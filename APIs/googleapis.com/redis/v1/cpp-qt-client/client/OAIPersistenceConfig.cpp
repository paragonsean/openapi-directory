/**
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersistenceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersistenceConfig::OAIPersistenceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersistenceConfig::OAIPersistenceConfig() {
    this->initializeModel();
}

OAIPersistenceConfig::~OAIPersistenceConfig() {}

void OAIPersistenceConfig::initializeModel() {

    m_persistence_mode_isSet = false;
    m_persistence_mode_isValid = false;

    m_rdb_next_snapshot_time_isSet = false;
    m_rdb_next_snapshot_time_isValid = false;

    m_rdb_snapshot_period_isSet = false;
    m_rdb_snapshot_period_isValid = false;

    m_rdb_snapshot_start_time_isSet = false;
    m_rdb_snapshot_start_time_isValid = false;
}

void OAIPersistenceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersistenceConfig::fromJsonObject(QJsonObject json) {

    m_persistence_mode_isValid = ::OpenAPI::fromJsonValue(m_persistence_mode, json[QString("persistenceMode")]);
    m_persistence_mode_isSet = !json[QString("persistenceMode")].isNull() && m_persistence_mode_isValid;

    m_rdb_next_snapshot_time_isValid = ::OpenAPI::fromJsonValue(m_rdb_next_snapshot_time, json[QString("rdbNextSnapshotTime")]);
    m_rdb_next_snapshot_time_isSet = !json[QString("rdbNextSnapshotTime")].isNull() && m_rdb_next_snapshot_time_isValid;

    m_rdb_snapshot_period_isValid = ::OpenAPI::fromJsonValue(m_rdb_snapshot_period, json[QString("rdbSnapshotPeriod")]);
    m_rdb_snapshot_period_isSet = !json[QString("rdbSnapshotPeriod")].isNull() && m_rdb_snapshot_period_isValid;

    m_rdb_snapshot_start_time_isValid = ::OpenAPI::fromJsonValue(m_rdb_snapshot_start_time, json[QString("rdbSnapshotStartTime")]);
    m_rdb_snapshot_start_time_isSet = !json[QString("rdbSnapshotStartTime")].isNull() && m_rdb_snapshot_start_time_isValid;
}

QString OAIPersistenceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersistenceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_persistence_mode_isSet) {
        obj.insert(QString("persistenceMode"), ::OpenAPI::toJsonValue(m_persistence_mode));
    }
    if (m_rdb_next_snapshot_time_isSet) {
        obj.insert(QString("rdbNextSnapshotTime"), ::OpenAPI::toJsonValue(m_rdb_next_snapshot_time));
    }
    if (m_rdb_snapshot_period_isSet) {
        obj.insert(QString("rdbSnapshotPeriod"), ::OpenAPI::toJsonValue(m_rdb_snapshot_period));
    }
    if (m_rdb_snapshot_start_time_isSet) {
        obj.insert(QString("rdbSnapshotStartTime"), ::OpenAPI::toJsonValue(m_rdb_snapshot_start_time));
    }
    return obj;
}

QString OAIPersistenceConfig::getPersistenceMode() const {
    return m_persistence_mode;
}
void OAIPersistenceConfig::setPersistenceMode(const QString &persistence_mode) {
    m_persistence_mode = persistence_mode;
    m_persistence_mode_isSet = true;
}

bool OAIPersistenceConfig::is_persistence_mode_Set() const{
    return m_persistence_mode_isSet;
}

bool OAIPersistenceConfig::is_persistence_mode_Valid() const{
    return m_persistence_mode_isValid;
}

QString OAIPersistenceConfig::getRdbNextSnapshotTime() const {
    return m_rdb_next_snapshot_time;
}
void OAIPersistenceConfig::setRdbNextSnapshotTime(const QString &rdb_next_snapshot_time) {
    m_rdb_next_snapshot_time = rdb_next_snapshot_time;
    m_rdb_next_snapshot_time_isSet = true;
}

bool OAIPersistenceConfig::is_rdb_next_snapshot_time_Set() const{
    return m_rdb_next_snapshot_time_isSet;
}

bool OAIPersistenceConfig::is_rdb_next_snapshot_time_Valid() const{
    return m_rdb_next_snapshot_time_isValid;
}

QString OAIPersistenceConfig::getRdbSnapshotPeriod() const {
    return m_rdb_snapshot_period;
}
void OAIPersistenceConfig::setRdbSnapshotPeriod(const QString &rdb_snapshot_period) {
    m_rdb_snapshot_period = rdb_snapshot_period;
    m_rdb_snapshot_period_isSet = true;
}

bool OAIPersistenceConfig::is_rdb_snapshot_period_Set() const{
    return m_rdb_snapshot_period_isSet;
}

bool OAIPersistenceConfig::is_rdb_snapshot_period_Valid() const{
    return m_rdb_snapshot_period_isValid;
}

QString OAIPersistenceConfig::getRdbSnapshotStartTime() const {
    return m_rdb_snapshot_start_time;
}
void OAIPersistenceConfig::setRdbSnapshotStartTime(const QString &rdb_snapshot_start_time) {
    m_rdb_snapshot_start_time = rdb_snapshot_start_time;
    m_rdb_snapshot_start_time_isSet = true;
}

bool OAIPersistenceConfig::is_rdb_snapshot_start_time_Set() const{
    return m_rdb_snapshot_start_time_isSet;
}

bool OAIPersistenceConfig::is_rdb_snapshot_start_time_Valid() const{
    return m_rdb_snapshot_start_time_isValid;
}

bool OAIPersistenceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_persistence_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rdb_next_snapshot_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rdb_snapshot_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rdb_snapshot_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersistenceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
