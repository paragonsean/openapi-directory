/**
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseResourceId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseResourceId::OAIDatabaseResourceId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseResourceId::OAIDatabaseResourceId() {
    this->initializeModel();
}

OAIDatabaseResourceId::~OAIDatabaseResourceId() {}

void OAIDatabaseResourceId::initializeModel() {

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_provider_description_isSet = false;
    m_provider_description_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_unique_id_isSet = false;
    m_unique_id_isValid = false;
}

void OAIDatabaseResourceId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseResourceId::fromJsonObject(QJsonObject json) {

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_provider_description_isValid = ::OpenAPI::fromJsonValue(m_provider_description, json[QString("providerDescription")]);
    m_provider_description_isSet = !json[QString("providerDescription")].isNull() && m_provider_description_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_unique_id_isValid = ::OpenAPI::fromJsonValue(m_unique_id, json[QString("uniqueId")]);
    m_unique_id_isSet = !json[QString("uniqueId")].isNull() && m_unique_id_isValid;
}

QString OAIDatabaseResourceId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseResourceId::asJsonObject() const {
    QJsonObject obj;
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_provider_description_isSet) {
        obj.insert(QString("providerDescription"), ::OpenAPI::toJsonValue(m_provider_description));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_unique_id_isSet) {
        obj.insert(QString("uniqueId"), ::OpenAPI::toJsonValue(m_unique_id));
    }
    return obj;
}

QString OAIDatabaseResourceId::getProvider() const {
    return m_provider;
}
void OAIDatabaseResourceId::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIDatabaseResourceId::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIDatabaseResourceId::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIDatabaseResourceId::getProviderDescription() const {
    return m_provider_description;
}
void OAIDatabaseResourceId::setProviderDescription(const QString &provider_description) {
    m_provider_description = provider_description;
    m_provider_description_isSet = true;
}

bool OAIDatabaseResourceId::is_provider_description_Set() const{
    return m_provider_description_isSet;
}

bool OAIDatabaseResourceId::is_provider_description_Valid() const{
    return m_provider_description_isValid;
}

QString OAIDatabaseResourceId::getResourceType() const {
    return m_resource_type;
}
void OAIDatabaseResourceId::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIDatabaseResourceId::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIDatabaseResourceId::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIDatabaseResourceId::getUniqueId() const {
    return m_unique_id;
}
void OAIDatabaseResourceId::setUniqueId(const QString &unique_id) {
    m_unique_id = unique_id;
    m_unique_id_isSet = true;
}

bool OAIDatabaseResourceId::is_unique_id_Set() const{
    return m_unique_id_isSet;
}

bool OAIDatabaseResourceId::is_unique_id_Valid() const{
    return m_unique_id_isValid;
}

bool OAIDatabaseResourceId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseResourceId::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
