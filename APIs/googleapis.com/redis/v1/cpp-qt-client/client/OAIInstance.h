/**
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInstance.h
 *
 * A Memorystore for Redis instance.
 */

#ifndef OAIInstance_H
#define OAIInstance_H

#include <QJsonObject>

#include "OAIMaintenancePolicy.h"
#include "OAIMaintenanceSchedule.h"
#include "OAINodeInfo.h"
#include "OAIPersistenceConfig.h"
#include "OAITlsCertificate.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMaintenancePolicy;
class OAIMaintenanceSchedule;
class OAINodeInfo;
class OAIPersistenceConfig;
class OAITlsCertificate;

class OAIInstance : public OAIObject {
public:
    OAIInstance();
    OAIInstance(QString json);
    ~OAIInstance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAlternativeLocationId() const;
    void setAlternativeLocationId(const QString &alternative_location_id);
    bool is_alternative_location_id_Set() const;
    bool is_alternative_location_id_Valid() const;

    bool isAuthEnabled() const;
    void setAuthEnabled(const bool &auth_enabled);
    bool is_auth_enabled_Set() const;
    bool is_auth_enabled_Valid() const;

    QString getAuthorizedNetwork() const;
    void setAuthorizedNetwork(const QString &authorized_network);
    bool is_authorized_network_Set() const;
    bool is_authorized_network_Valid() const;

    QList<QString> getAvailableMaintenanceVersions() const;
    void setAvailableMaintenanceVersions(const QList<QString> &available_maintenance_versions);
    bool is_available_maintenance_versions_Set() const;
    bool is_available_maintenance_versions_Valid() const;

    QString getConnectMode() const;
    void setConnectMode(const QString &connect_mode);
    bool is_connect_mode_Set() const;
    bool is_connect_mode_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getCurrentLocationId() const;
    void setCurrentLocationId(const QString &current_location_id);
    bool is_current_location_id_Set() const;
    bool is_current_location_id_Valid() const;

    QString getCustomerManagedKey() const;
    void setCustomerManagedKey(const QString &customer_managed_key);
    bool is_customer_managed_key_Set() const;
    bool is_customer_managed_key_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getHost() const;
    void setHost(const QString &host);
    bool is_host_Set() const;
    bool is_host_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getLocationId() const;
    void setLocationId(const QString &location_id);
    bool is_location_id_Set() const;
    bool is_location_id_Valid() const;

    OAIMaintenancePolicy getMaintenancePolicy() const;
    void setMaintenancePolicy(const OAIMaintenancePolicy &maintenance_policy);
    bool is_maintenance_policy_Set() const;
    bool is_maintenance_policy_Valid() const;

    OAIMaintenanceSchedule getMaintenanceSchedule() const;
    void setMaintenanceSchedule(const OAIMaintenanceSchedule &maintenance_schedule);
    bool is_maintenance_schedule_Set() const;
    bool is_maintenance_schedule_Valid() const;

    QString getMaintenanceVersion() const;
    void setMaintenanceVersion(const QString &maintenance_version);
    bool is_maintenance_version_Set() const;
    bool is_maintenance_version_Valid() const;

    qint32 getMemorySizeGb() const;
    void setMemorySizeGb(const qint32 &memory_size_gb);
    bool is_memory_size_gb_Set() const;
    bool is_memory_size_gb_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAINodeInfo> getNodes() const;
    void setNodes(const QList<OAINodeInfo> &nodes);
    bool is_nodes_Set() const;
    bool is_nodes_Valid() const;

    OAIPersistenceConfig getPersistenceConfig() const;
    void setPersistenceConfig(const OAIPersistenceConfig &persistence_config);
    bool is_persistence_config_Set() const;
    bool is_persistence_config_Valid() const;

    QString getPersistenceIamIdentity() const;
    void setPersistenceIamIdentity(const QString &persistence_iam_identity);
    bool is_persistence_iam_identity_Set() const;
    bool is_persistence_iam_identity_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getReadEndpoint() const;
    void setReadEndpoint(const QString &read_endpoint);
    bool is_read_endpoint_Set() const;
    bool is_read_endpoint_Valid() const;

    qint32 getReadEndpointPort() const;
    void setReadEndpointPort(const qint32 &read_endpoint_port);
    bool is_read_endpoint_port_Set() const;
    bool is_read_endpoint_port_Valid() const;

    QString getReadReplicasMode() const;
    void setReadReplicasMode(const QString &read_replicas_mode);
    bool is_read_replicas_mode_Set() const;
    bool is_read_replicas_mode_Valid() const;

    QMap<QString, QString> getRedisConfigs() const;
    void setRedisConfigs(const QMap<QString, QString> &redis_configs);
    bool is_redis_configs_Set() const;
    bool is_redis_configs_Valid() const;

    QString getRedisVersion() const;
    void setRedisVersion(const QString &redis_version);
    bool is_redis_version_Set() const;
    bool is_redis_version_Valid() const;

    qint32 getReplicaCount() const;
    void setReplicaCount(const qint32 &replica_count);
    bool is_replica_count_Set() const;
    bool is_replica_count_Valid() const;

    QString getReservedIpRange() const;
    void setReservedIpRange(const QString &reserved_ip_range);
    bool is_reserved_ip_range_Set() const;
    bool is_reserved_ip_range_Valid() const;

    bool isSatisfiesPzi() const;
    void setSatisfiesPzi(const bool &satisfies_pzi);
    bool is_satisfies_pzi_Set() const;
    bool is_satisfies_pzi_Valid() const;

    bool isSatisfiesPzs() const;
    void setSatisfiesPzs(const bool &satisfies_pzs);
    bool is_satisfies_pzs_Set() const;
    bool is_satisfies_pzs_Valid() const;

    QString getSecondaryIpRange() const;
    void setSecondaryIpRange(const QString &secondary_ip_range);
    bool is_secondary_ip_range_Set() const;
    bool is_secondary_ip_range_Valid() const;

    QList<OAITlsCertificate> getServerCaCerts() const;
    void setServerCaCerts(const QList<OAITlsCertificate> &server_ca_certs);
    bool is_server_ca_certs_Set() const;
    bool is_server_ca_certs_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStatusMessage() const;
    void setStatusMessage(const QString &status_message);
    bool is_status_message_Set() const;
    bool is_status_message_Valid() const;

    QList<QString> getSuspensionReasons() const;
    void setSuspensionReasons(const QList<QString> &suspension_reasons);
    bool is_suspension_reasons_Set() const;
    bool is_suspension_reasons_Valid() const;

    QString getTier() const;
    void setTier(const QString &tier);
    bool is_tier_Set() const;
    bool is_tier_Valid() const;

    QString getTransitEncryptionMode() const;
    void setTransitEncryptionMode(const QString &transit_encryption_mode);
    bool is_transit_encryption_mode_Set() const;
    bool is_transit_encryption_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_alternative_location_id;
    bool m_alternative_location_id_isSet;
    bool m_alternative_location_id_isValid;

    bool m_auth_enabled;
    bool m_auth_enabled_isSet;
    bool m_auth_enabled_isValid;

    QString m_authorized_network;
    bool m_authorized_network_isSet;
    bool m_authorized_network_isValid;

    QList<QString> m_available_maintenance_versions;
    bool m_available_maintenance_versions_isSet;
    bool m_available_maintenance_versions_isValid;

    QString m_connect_mode;
    bool m_connect_mode_isSet;
    bool m_connect_mode_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_current_location_id;
    bool m_current_location_id_isSet;
    bool m_current_location_id_isValid;

    QString m_customer_managed_key;
    bool m_customer_managed_key_isSet;
    bool m_customer_managed_key_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_host;
    bool m_host_isSet;
    bool m_host_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_location_id;
    bool m_location_id_isSet;
    bool m_location_id_isValid;

    OAIMaintenancePolicy m_maintenance_policy;
    bool m_maintenance_policy_isSet;
    bool m_maintenance_policy_isValid;

    OAIMaintenanceSchedule m_maintenance_schedule;
    bool m_maintenance_schedule_isSet;
    bool m_maintenance_schedule_isValid;

    QString m_maintenance_version;
    bool m_maintenance_version_isSet;
    bool m_maintenance_version_isValid;

    qint32 m_memory_size_gb;
    bool m_memory_size_gb_isSet;
    bool m_memory_size_gb_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAINodeInfo> m_nodes;
    bool m_nodes_isSet;
    bool m_nodes_isValid;

    OAIPersistenceConfig m_persistence_config;
    bool m_persistence_config_isSet;
    bool m_persistence_config_isValid;

    QString m_persistence_iam_identity;
    bool m_persistence_iam_identity_isSet;
    bool m_persistence_iam_identity_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_read_endpoint;
    bool m_read_endpoint_isSet;
    bool m_read_endpoint_isValid;

    qint32 m_read_endpoint_port;
    bool m_read_endpoint_port_isSet;
    bool m_read_endpoint_port_isValid;

    QString m_read_replicas_mode;
    bool m_read_replicas_mode_isSet;
    bool m_read_replicas_mode_isValid;

    QMap<QString, QString> m_redis_configs;
    bool m_redis_configs_isSet;
    bool m_redis_configs_isValid;

    QString m_redis_version;
    bool m_redis_version_isSet;
    bool m_redis_version_isValid;

    qint32 m_replica_count;
    bool m_replica_count_isSet;
    bool m_replica_count_isValid;

    QString m_reserved_ip_range;
    bool m_reserved_ip_range_isSet;
    bool m_reserved_ip_range_isValid;

    bool m_satisfies_pzi;
    bool m_satisfies_pzi_isSet;
    bool m_satisfies_pzi_isValid;

    bool m_satisfies_pzs;
    bool m_satisfies_pzs_isSet;
    bool m_satisfies_pzs_isValid;

    QString m_secondary_ip_range;
    bool m_secondary_ip_range_isSet;
    bool m_secondary_ip_range_isValid;

    QList<OAITlsCertificate> m_server_ca_certs;
    bool m_server_ca_certs_isSet;
    bool m_server_ca_certs_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_status_message;
    bool m_status_message_isSet;
    bool m_status_message_isValid;

    QList<QString> m_suspension_reasons;
    bool m_suspension_reasons_isSet;
    bool m_suspension_reasons_isValid;

    QString m_tier;
    bool m_tier_isSet;
    bool m_tier_isValid;

    QString m_transit_encryption_mode;
    bool m_transit_encryption_mode_isSet;
    bool m_transit_encryption_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInstance)

#endif // OAIInstance_H
