/**
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetentionSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetentionSettings::OAIRetentionSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetentionSettings::OAIRetentionSettings() {
    this->initializeModel();
}

OAIRetentionSettings::~OAIRetentionSettings() {}

void OAIRetentionSettings::initializeModel() {

    m_quantity_based_retention_isSet = false;
    m_quantity_based_retention_isValid = false;

    m_retention_unit_isSet = false;
    m_retention_unit_isValid = false;

    m_time_based_retention_isSet = false;
    m_time_based_retention_isValid = false;
}

void OAIRetentionSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetentionSettings::fromJsonObject(QJsonObject json) {

    m_quantity_based_retention_isValid = ::OpenAPI::fromJsonValue(m_quantity_based_retention, json[QString("quantityBasedRetention")]);
    m_quantity_based_retention_isSet = !json[QString("quantityBasedRetention")].isNull() && m_quantity_based_retention_isValid;

    m_retention_unit_isValid = ::OpenAPI::fromJsonValue(m_retention_unit, json[QString("retentionUnit")]);
    m_retention_unit_isSet = !json[QString("retentionUnit")].isNull() && m_retention_unit_isValid;

    m_time_based_retention_isValid = ::OpenAPI::fromJsonValue(m_time_based_retention, json[QString("timeBasedRetention")]);
    m_time_based_retention_isSet = !json[QString("timeBasedRetention")].isNull() && m_time_based_retention_isValid;
}

QString OAIRetentionSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetentionSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_quantity_based_retention_isSet) {
        obj.insert(QString("quantityBasedRetention"), ::OpenAPI::toJsonValue(m_quantity_based_retention));
    }
    if (m_retention_unit_isSet) {
        obj.insert(QString("retentionUnit"), ::OpenAPI::toJsonValue(m_retention_unit));
    }
    if (m_time_based_retention_isSet) {
        obj.insert(QString("timeBasedRetention"), ::OpenAPI::toJsonValue(m_time_based_retention));
    }
    return obj;
}

qint32 OAIRetentionSettings::getQuantityBasedRetention() const {
    return m_quantity_based_retention;
}
void OAIRetentionSettings::setQuantityBasedRetention(const qint32 &quantity_based_retention) {
    m_quantity_based_retention = quantity_based_retention;
    m_quantity_based_retention_isSet = true;
}

bool OAIRetentionSettings::is_quantity_based_retention_Set() const{
    return m_quantity_based_retention_isSet;
}

bool OAIRetentionSettings::is_quantity_based_retention_Valid() const{
    return m_quantity_based_retention_isValid;
}

QString OAIRetentionSettings::getRetentionUnit() const {
    return m_retention_unit;
}
void OAIRetentionSettings::setRetentionUnit(const QString &retention_unit) {
    m_retention_unit = retention_unit;
    m_retention_unit_isSet = true;
}

bool OAIRetentionSettings::is_retention_unit_Set() const{
    return m_retention_unit_isSet;
}

bool OAIRetentionSettings::is_retention_unit_Valid() const{
    return m_retention_unit_isValid;
}

QString OAIRetentionSettings::getTimeBasedRetention() const {
    return m_time_based_retention;
}
void OAIRetentionSettings::setTimeBasedRetention(const QString &time_based_retention) {
    m_time_based_retention = time_based_retention;
    m_time_based_retention_isSet = true;
}

bool OAIRetentionSettings::is_time_based_retention_Set() const{
    return m_time_based_retention_isSet;
}

bool OAIRetentionSettings::is_time_based_retention_Valid() const{
    return m_time_based_retention_isValid;
}

bool OAIRetentionSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_quantity_based_retention_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_based_retention_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetentionSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
