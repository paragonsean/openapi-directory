/**
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseResourceFeed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseResourceFeed::OAIDatabaseResourceFeed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseResourceFeed::OAIDatabaseResourceFeed() {
    this->initializeModel();
}

OAIDatabaseResourceFeed::~OAIDatabaseResourceFeed() {}

void OAIDatabaseResourceFeed::initializeModel() {

    m_feed_timestamp_isSet = false;
    m_feed_timestamp_isValid = false;

    m_feed_type_isSet = false;
    m_feed_type_isValid = false;

    m_recommendation_signal_data_isSet = false;
    m_recommendation_signal_data_isValid = false;

    m_resource_health_signal_data_isSet = false;
    m_resource_health_signal_data_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_metadata_isSet = false;
    m_resource_metadata_isValid = false;
}

void OAIDatabaseResourceFeed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseResourceFeed::fromJsonObject(QJsonObject json) {

    m_feed_timestamp_isValid = ::OpenAPI::fromJsonValue(m_feed_timestamp, json[QString("feedTimestamp")]);
    m_feed_timestamp_isSet = !json[QString("feedTimestamp")].isNull() && m_feed_timestamp_isValid;

    m_feed_type_isValid = ::OpenAPI::fromJsonValue(m_feed_type, json[QString("feedType")]);
    m_feed_type_isSet = !json[QString("feedType")].isNull() && m_feed_type_isValid;

    m_recommendation_signal_data_isValid = ::OpenAPI::fromJsonValue(m_recommendation_signal_data, json[QString("recommendationSignalData")]);
    m_recommendation_signal_data_isSet = !json[QString("recommendationSignalData")].isNull() && m_recommendation_signal_data_isValid;

    m_resource_health_signal_data_isValid = ::OpenAPI::fromJsonValue(m_resource_health_signal_data, json[QString("resourceHealthSignalData")]);
    m_resource_health_signal_data_isSet = !json[QString("resourceHealthSignalData")].isNull() && m_resource_health_signal_data_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_metadata_isValid = ::OpenAPI::fromJsonValue(m_resource_metadata, json[QString("resourceMetadata")]);
    m_resource_metadata_isSet = !json[QString("resourceMetadata")].isNull() && m_resource_metadata_isValid;
}

QString OAIDatabaseResourceFeed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseResourceFeed::asJsonObject() const {
    QJsonObject obj;
    if (m_feed_timestamp_isSet) {
        obj.insert(QString("feedTimestamp"), ::OpenAPI::toJsonValue(m_feed_timestamp));
    }
    if (m_feed_type_isSet) {
        obj.insert(QString("feedType"), ::OpenAPI::toJsonValue(m_feed_type));
    }
    if (m_recommendation_signal_data.isSet()) {
        obj.insert(QString("recommendationSignalData"), ::OpenAPI::toJsonValue(m_recommendation_signal_data));
    }
    if (m_resource_health_signal_data.isSet()) {
        obj.insert(QString("resourceHealthSignalData"), ::OpenAPI::toJsonValue(m_resource_health_signal_data));
    }
    if (m_resource_id.isSet()) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_metadata.isSet()) {
        obj.insert(QString("resourceMetadata"), ::OpenAPI::toJsonValue(m_resource_metadata));
    }
    return obj;
}

QString OAIDatabaseResourceFeed::getFeedTimestamp() const {
    return m_feed_timestamp;
}
void OAIDatabaseResourceFeed::setFeedTimestamp(const QString &feed_timestamp) {
    m_feed_timestamp = feed_timestamp;
    m_feed_timestamp_isSet = true;
}

bool OAIDatabaseResourceFeed::is_feed_timestamp_Set() const{
    return m_feed_timestamp_isSet;
}

bool OAIDatabaseResourceFeed::is_feed_timestamp_Valid() const{
    return m_feed_timestamp_isValid;
}

QString OAIDatabaseResourceFeed::getFeedType() const {
    return m_feed_type;
}
void OAIDatabaseResourceFeed::setFeedType(const QString &feed_type) {
    m_feed_type = feed_type;
    m_feed_type_isSet = true;
}

bool OAIDatabaseResourceFeed::is_feed_type_Set() const{
    return m_feed_type_isSet;
}

bool OAIDatabaseResourceFeed::is_feed_type_Valid() const{
    return m_feed_type_isValid;
}

OAIDatabaseResourceRecommendationSignalData OAIDatabaseResourceFeed::getRecommendationSignalData() const {
    return m_recommendation_signal_data;
}
void OAIDatabaseResourceFeed::setRecommendationSignalData(const OAIDatabaseResourceRecommendationSignalData &recommendation_signal_data) {
    m_recommendation_signal_data = recommendation_signal_data;
    m_recommendation_signal_data_isSet = true;
}

bool OAIDatabaseResourceFeed::is_recommendation_signal_data_Set() const{
    return m_recommendation_signal_data_isSet;
}

bool OAIDatabaseResourceFeed::is_recommendation_signal_data_Valid() const{
    return m_recommendation_signal_data_isValid;
}

OAIDatabaseResourceHealthSignalData OAIDatabaseResourceFeed::getResourceHealthSignalData() const {
    return m_resource_health_signal_data;
}
void OAIDatabaseResourceFeed::setResourceHealthSignalData(const OAIDatabaseResourceHealthSignalData &resource_health_signal_data) {
    m_resource_health_signal_data = resource_health_signal_data;
    m_resource_health_signal_data_isSet = true;
}

bool OAIDatabaseResourceFeed::is_resource_health_signal_data_Set() const{
    return m_resource_health_signal_data_isSet;
}

bool OAIDatabaseResourceFeed::is_resource_health_signal_data_Valid() const{
    return m_resource_health_signal_data_isValid;
}

OAIDatabaseResourceId OAIDatabaseResourceFeed::getResourceId() const {
    return m_resource_id;
}
void OAIDatabaseResourceFeed::setResourceId(const OAIDatabaseResourceId &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIDatabaseResourceFeed::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIDatabaseResourceFeed::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

OAIDatabaseResourceMetadata OAIDatabaseResourceFeed::getResourceMetadata() const {
    return m_resource_metadata;
}
void OAIDatabaseResourceFeed::setResourceMetadata(const OAIDatabaseResourceMetadata &resource_metadata) {
    m_resource_metadata = resource_metadata;
    m_resource_metadata_isSet = true;
}

bool OAIDatabaseResourceFeed::is_resource_metadata_Set() const{
    return m_resource_metadata_isSet;
}

bool OAIDatabaseResourceFeed::is_resource_metadata_Valid() const{
    return m_resource_metadata_isValid;
}

bool OAIDatabaseResourceFeed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feed_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feed_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_signal_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_health_signal_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseResourceFeed::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
