/*
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AvailabilityConfiguration;
import org.openapitools.client.model.BackupConfiguration;
import org.openapitools.client.model.BackupRun;
import org.openapitools.client.model.CustomMetadataData;
import org.openapitools.client.model.DatabaseResourceId;
import org.openapitools.client.model.Entitlement;
import org.openapitools.client.model.Product;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Common model for database resource instance metadata.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:56.197101-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabaseResourceMetadata {
  public static final String SERIALIZED_NAME_AVAILABILITY_CONFIGURATION = "availabilityConfiguration";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_CONFIGURATION)
  private AvailabilityConfiguration availabilityConfiguration;

  public static final String SERIALIZED_NAME_BACKUP_CONFIGURATION = "backupConfiguration";
  @SerializedName(SERIALIZED_NAME_BACKUP_CONFIGURATION)
  private BackupConfiguration backupConfiguration;

  public static final String SERIALIZED_NAME_BACKUP_RUN = "backupRun";
  @SerializedName(SERIALIZED_NAME_BACKUP_RUN)
  private BackupRun backupRun;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  /**
   * Current state of the instance.
   */
  @JsonAdapter(CurrentStateEnum.Adapter.class)
  public enum CurrentStateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    HEALTHY("HEALTHY"),
    
    UNHEALTHY("UNHEALTHY"),
    
    SUSPENDED("SUSPENDED"),
    
    DELETED("DELETED"),
    
    STATE_OTHER("STATE_OTHER");

    private String value;

    CurrentStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrentStateEnum fromValue(String value) {
      for (CurrentStateEnum b : CurrentStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrentStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrentStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrentStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrentStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrentStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENT_STATE = "currentState";
  @SerializedName(SERIALIZED_NAME_CURRENT_STATE)
  private CurrentStateEnum currentState;

  public static final String SERIALIZED_NAME_CUSTOM_METADATA = "customMetadata";
  @SerializedName(SERIALIZED_NAME_CUSTOM_METADATA)
  private CustomMetadataData customMetadata;

  public static final String SERIALIZED_NAME_ENTITLEMENTS = "entitlements";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENTS)
  private List<Entitlement> entitlements = new ArrayList<>();

  /**
   * The state that the instance is expected to be in. For example, an instance state can transition to UNHEALTHY due to wrong patch update, while the expected state will remain at the HEALTHY.
   */
  @JsonAdapter(ExpectedStateEnum.Adapter.class)
  public enum ExpectedStateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    HEALTHY("HEALTHY"),
    
    UNHEALTHY("UNHEALTHY"),
    
    SUSPENDED("SUSPENDED"),
    
    DELETED("DELETED"),
    
    STATE_OTHER("STATE_OTHER");

    private String value;

    ExpectedStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpectedStateEnum fromValue(String value) {
      for (ExpectedStateEnum b : ExpectedStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExpectedStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpectedStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpectedStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpectedStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExpectedStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPECTED_STATE = "expectedState";
  @SerializedName(SERIALIZED_NAME_EXPECTED_STATE)
  private ExpectedStateEnum expectedState;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private DatabaseResourceId id;

  /**
   * The type of the instance. Specified at creation time.
   */
  @JsonAdapter(InstanceTypeEnum.Adapter.class)
  public enum InstanceTypeEnum {
    INSTANCE_TYPE_UNSPECIFIED("INSTANCE_TYPE_UNSPECIFIED"),
    
    SUB_RESOURCE_TYPE_UNSPECIFIED("SUB_RESOURCE_TYPE_UNSPECIFIED"),
    
    PRIMARY("PRIMARY"),
    
    SECONDARY("SECONDARY"),
    
    READ_REPLICA("READ_REPLICA"),
    
    OTHER("OTHER"),
    
    SUB_RESOURCE_TYPE_PRIMARY("SUB_RESOURCE_TYPE_PRIMARY"),
    
    SUB_RESOURCE_TYPE_SECONDARY("SUB_RESOURCE_TYPE_SECONDARY"),
    
    SUB_RESOURCE_TYPE_READ_REPLICA("SUB_RESOURCE_TYPE_READ_REPLICA"),
    
    SUB_RESOURCE_TYPE_OTHER("SUB_RESOURCE_TYPE_OTHER");

    private String value;

    InstanceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InstanceTypeEnum fromValue(String value) {
      for (InstanceTypeEnum b : InstanceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InstanceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstanceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstanceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InstanceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InstanceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private InstanceTypeEnum instanceType;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_PRIMARY_RESOURCE_ID = "primaryResourceId";
  @SerializedName(SERIALIZED_NAME_PRIMARY_RESOURCE_ID)
  private DatabaseResourceId primaryResourceId;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private Product product;

  public static final String SERIALIZED_NAME_RESOURCE_CONTAINER = "resourceContainer";
  @SerializedName(SERIALIZED_NAME_RESOURCE_CONTAINER)
  private String resourceContainer;

  public static final String SERIALIZED_NAME_RESOURCE_NAME = "resourceName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAME)
  private String resourceName;

  public static final String SERIALIZED_NAME_UPDATION_TIME = "updationTime";
  @SerializedName(SERIALIZED_NAME_UPDATION_TIME)
  private String updationTime;

  public static final String SERIALIZED_NAME_USER_LABELS = "userLabels";
  @SerializedName(SERIALIZED_NAME_USER_LABELS)
  private Map<String, String> userLabels = new HashMap<>();

  public DatabaseResourceMetadata() {
  }

  public DatabaseResourceMetadata availabilityConfiguration(AvailabilityConfiguration availabilityConfiguration) {
    this.availabilityConfiguration = availabilityConfiguration;
    return this;
  }

  /**
   * Get availabilityConfiguration
   * @return availabilityConfiguration
   */
  @javax.annotation.Nullable
  public AvailabilityConfiguration getAvailabilityConfiguration() {
    return availabilityConfiguration;
  }

  public void setAvailabilityConfiguration(AvailabilityConfiguration availabilityConfiguration) {
    this.availabilityConfiguration = availabilityConfiguration;
  }


  public DatabaseResourceMetadata backupConfiguration(BackupConfiguration backupConfiguration) {
    this.backupConfiguration = backupConfiguration;
    return this;
  }

  /**
   * Get backupConfiguration
   * @return backupConfiguration
   */
  @javax.annotation.Nullable
  public BackupConfiguration getBackupConfiguration() {
    return backupConfiguration;
  }

  public void setBackupConfiguration(BackupConfiguration backupConfiguration) {
    this.backupConfiguration = backupConfiguration;
  }


  public DatabaseResourceMetadata backupRun(BackupRun backupRun) {
    this.backupRun = backupRun;
    return this;
  }

  /**
   * Get backupRun
   * @return backupRun
   */
  @javax.annotation.Nullable
  public BackupRun getBackupRun() {
    return backupRun;
  }

  public void setBackupRun(BackupRun backupRun) {
    this.backupRun = backupRun;
  }


  public DatabaseResourceMetadata creationTime(String creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * The creation time of the resource, i.e. the time when resource is created and recorded in partner service.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(String creationTime) {
    this.creationTime = creationTime;
  }


  public DatabaseResourceMetadata currentState(CurrentStateEnum currentState) {
    this.currentState = currentState;
    return this;
  }

  /**
   * Current state of the instance.
   * @return currentState
   */
  @javax.annotation.Nullable
  public CurrentStateEnum getCurrentState() {
    return currentState;
  }

  public void setCurrentState(CurrentStateEnum currentState) {
    this.currentState = currentState;
  }


  public DatabaseResourceMetadata customMetadata(CustomMetadataData customMetadata) {
    this.customMetadata = customMetadata;
    return this;
  }

  /**
   * Get customMetadata
   * @return customMetadata
   */
  @javax.annotation.Nullable
  public CustomMetadataData getCustomMetadata() {
    return customMetadata;
  }

  public void setCustomMetadata(CustomMetadataData customMetadata) {
    this.customMetadata = customMetadata;
  }


  public DatabaseResourceMetadata entitlements(List<Entitlement> entitlements) {
    this.entitlements = entitlements;
    return this;
  }

  public DatabaseResourceMetadata addEntitlementsItem(Entitlement entitlementsItem) {
    if (this.entitlements == null) {
      this.entitlements = new ArrayList<>();
    }
    this.entitlements.add(entitlementsItem);
    return this;
  }

  /**
   * Entitlements associated with the resource
   * @return entitlements
   */
  @javax.annotation.Nullable
  public List<Entitlement> getEntitlements() {
    return entitlements;
  }

  public void setEntitlements(List<Entitlement> entitlements) {
    this.entitlements = entitlements;
  }


  public DatabaseResourceMetadata expectedState(ExpectedStateEnum expectedState) {
    this.expectedState = expectedState;
    return this;
  }

  /**
   * The state that the instance is expected to be in. For example, an instance state can transition to UNHEALTHY due to wrong patch update, while the expected state will remain at the HEALTHY.
   * @return expectedState
   */
  @javax.annotation.Nullable
  public ExpectedStateEnum getExpectedState() {
    return expectedState;
  }

  public void setExpectedState(ExpectedStateEnum expectedState) {
    this.expectedState = expectedState;
  }


  public DatabaseResourceMetadata id(DatabaseResourceId id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public DatabaseResourceId getId() {
    return id;
  }

  public void setId(DatabaseResourceId id) {
    this.id = id;
  }


  public DatabaseResourceMetadata instanceType(InstanceTypeEnum instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * The type of the instance. Specified at creation time.
   * @return instanceType
   */
  @javax.annotation.Nullable
  public InstanceTypeEnum getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(InstanceTypeEnum instanceType) {
    this.instanceType = instanceType;
  }


  public DatabaseResourceMetadata location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The resource location. REQUIRED
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public DatabaseResourceMetadata primaryResourceId(DatabaseResourceId primaryResourceId) {
    this.primaryResourceId = primaryResourceId;
    return this;
  }

  /**
   * Get primaryResourceId
   * @return primaryResourceId
   */
  @javax.annotation.Nullable
  public DatabaseResourceId getPrimaryResourceId() {
    return primaryResourceId;
  }

  public void setPrimaryResourceId(DatabaseResourceId primaryResourceId) {
    this.primaryResourceId = primaryResourceId;
  }


  public DatabaseResourceMetadata product(Product product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nullable
  public Product getProduct() {
    return product;
  }

  public void setProduct(Product product) {
    this.product = product;
  }


  public DatabaseResourceMetadata resourceContainer(String resourceContainer) {
    this.resourceContainer = resourceContainer;
    return this;
  }

  /**
   * Closest parent Cloud Resource Manager container of this resource. It must be resource name of a Cloud Resource Manager project with the format of \&quot;/\&quot;, such as \&quot;projects/123\&quot;. For GCP provided resources, number should be project number.
   * @return resourceContainer
   */
  @javax.annotation.Nullable
  public String getResourceContainer() {
    return resourceContainer;
  }

  public void setResourceContainer(String resourceContainer) {
    this.resourceContainer = resourceContainer;
  }


  public DatabaseResourceMetadata resourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  /**
   * Required. Different from DatabaseResourceId.unique_id, a resource name can be reused over time. That is, after a resource named \&quot;ABC\&quot; is deleted, the name \&quot;ABC\&quot; can be used to to create a new resource within the same source. Resource name to follow CAIS resource_name format as noted here go/condor-common-datamodel
   * @return resourceName
   */
  @javax.annotation.Nullable
  public String getResourceName() {
    return resourceName;
  }

  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }


  public DatabaseResourceMetadata updationTime(String updationTime) {
    this.updationTime = updationTime;
    return this;
  }

  /**
   * The time at which the resource was updated and recorded at partner service.
   * @return updationTime
   */
  @javax.annotation.Nullable
  public String getUpdationTime() {
    return updationTime;
  }

  public void setUpdationTime(String updationTime) {
    this.updationTime = updationTime;
  }


  public DatabaseResourceMetadata userLabels(Map<String, String> userLabels) {
    this.userLabels = userLabels;
    return this;
  }

  public DatabaseResourceMetadata putUserLabelsItem(String key, String userLabelsItem) {
    if (this.userLabels == null) {
      this.userLabels = new HashMap<>();
    }
    this.userLabels.put(key, userLabelsItem);
    return this;
  }

  /**
   * User-provided labels, represented as a dictionary where each label is a single key value pair.
   * @return userLabels
   */
  @javax.annotation.Nullable
  public Map<String, String> getUserLabels() {
    return userLabels;
  }

  public void setUserLabels(Map<String, String> userLabels) {
    this.userLabels = userLabels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseResourceMetadata databaseResourceMetadata = (DatabaseResourceMetadata) o;
    return Objects.equals(this.availabilityConfiguration, databaseResourceMetadata.availabilityConfiguration) &&
        Objects.equals(this.backupConfiguration, databaseResourceMetadata.backupConfiguration) &&
        Objects.equals(this.backupRun, databaseResourceMetadata.backupRun) &&
        Objects.equals(this.creationTime, databaseResourceMetadata.creationTime) &&
        Objects.equals(this.currentState, databaseResourceMetadata.currentState) &&
        Objects.equals(this.customMetadata, databaseResourceMetadata.customMetadata) &&
        Objects.equals(this.entitlements, databaseResourceMetadata.entitlements) &&
        Objects.equals(this.expectedState, databaseResourceMetadata.expectedState) &&
        Objects.equals(this.id, databaseResourceMetadata.id) &&
        Objects.equals(this.instanceType, databaseResourceMetadata.instanceType) &&
        Objects.equals(this.location, databaseResourceMetadata.location) &&
        Objects.equals(this.primaryResourceId, databaseResourceMetadata.primaryResourceId) &&
        Objects.equals(this.product, databaseResourceMetadata.product) &&
        Objects.equals(this.resourceContainer, databaseResourceMetadata.resourceContainer) &&
        Objects.equals(this.resourceName, databaseResourceMetadata.resourceName) &&
        Objects.equals(this.updationTime, databaseResourceMetadata.updationTime) &&
        Objects.equals(this.userLabels, databaseResourceMetadata.userLabels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availabilityConfiguration, backupConfiguration, backupRun, creationTime, currentState, customMetadata, entitlements, expectedState, id, instanceType, location, primaryResourceId, product, resourceContainer, resourceName, updationTime, userLabels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseResourceMetadata {\n");
    sb.append("    availabilityConfiguration: ").append(toIndentedString(availabilityConfiguration)).append("\n");
    sb.append("    backupConfiguration: ").append(toIndentedString(backupConfiguration)).append("\n");
    sb.append("    backupRun: ").append(toIndentedString(backupRun)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    currentState: ").append(toIndentedString(currentState)).append("\n");
    sb.append("    customMetadata: ").append(toIndentedString(customMetadata)).append("\n");
    sb.append("    entitlements: ").append(toIndentedString(entitlements)).append("\n");
    sb.append("    expectedState: ").append(toIndentedString(expectedState)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    primaryResourceId: ").append(toIndentedString(primaryResourceId)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    resourceContainer: ").append(toIndentedString(resourceContainer)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("    updationTime: ").append(toIndentedString(updationTime)).append("\n");
    sb.append("    userLabels: ").append(toIndentedString(userLabels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availabilityConfiguration");
    openapiFields.add("backupConfiguration");
    openapiFields.add("backupRun");
    openapiFields.add("creationTime");
    openapiFields.add("currentState");
    openapiFields.add("customMetadata");
    openapiFields.add("entitlements");
    openapiFields.add("expectedState");
    openapiFields.add("id");
    openapiFields.add("instanceType");
    openapiFields.add("location");
    openapiFields.add("primaryResourceId");
    openapiFields.add("product");
    openapiFields.add("resourceContainer");
    openapiFields.add("resourceName");
    openapiFields.add("updationTime");
    openapiFields.add("userLabels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabaseResourceMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseResourceMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseResourceMetadata is not found in the empty JSON string", DatabaseResourceMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseResourceMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseResourceMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `availabilityConfiguration`
      if (jsonObj.get("availabilityConfiguration") != null && !jsonObj.get("availabilityConfiguration").isJsonNull()) {
        AvailabilityConfiguration.validateJsonElement(jsonObj.get("availabilityConfiguration"));
      }
      // validate the optional field `backupConfiguration`
      if (jsonObj.get("backupConfiguration") != null && !jsonObj.get("backupConfiguration").isJsonNull()) {
        BackupConfiguration.validateJsonElement(jsonObj.get("backupConfiguration"));
      }
      // validate the optional field `backupRun`
      if (jsonObj.get("backupRun") != null && !jsonObj.get("backupRun").isJsonNull()) {
        BackupRun.validateJsonElement(jsonObj.get("backupRun"));
      }
      if ((jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) && !jsonObj.get("creationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationTime").toString()));
      }
      if ((jsonObj.get("currentState") != null && !jsonObj.get("currentState").isJsonNull()) && !jsonObj.get("currentState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentState").toString()));
      }
      // validate the optional field `currentState`
      if (jsonObj.get("currentState") != null && !jsonObj.get("currentState").isJsonNull()) {
        CurrentStateEnum.validateJsonElement(jsonObj.get("currentState"));
      }
      // validate the optional field `customMetadata`
      if (jsonObj.get("customMetadata") != null && !jsonObj.get("customMetadata").isJsonNull()) {
        CustomMetadataData.validateJsonElement(jsonObj.get("customMetadata"));
      }
      if (jsonObj.get("entitlements") != null && !jsonObj.get("entitlements").isJsonNull()) {
        JsonArray jsonArrayentitlements = jsonObj.getAsJsonArray("entitlements");
        if (jsonArrayentitlements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entitlements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entitlements` to be an array in the JSON string but got `%s`", jsonObj.get("entitlements").toString()));
          }

          // validate the optional field `entitlements` (array)
          for (int i = 0; i < jsonArrayentitlements.size(); i++) {
            Entitlement.validateJsonElement(jsonArrayentitlements.get(i));
          };
        }
      }
      if ((jsonObj.get("expectedState") != null && !jsonObj.get("expectedState").isJsonNull()) && !jsonObj.get("expectedState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expectedState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expectedState").toString()));
      }
      // validate the optional field `expectedState`
      if (jsonObj.get("expectedState") != null && !jsonObj.get("expectedState").isJsonNull()) {
        ExpectedStateEnum.validateJsonElement(jsonObj.get("expectedState"));
      }
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        DatabaseResourceId.validateJsonElement(jsonObj.get("id"));
      }
      if ((jsonObj.get("instanceType") != null && !jsonObj.get("instanceType").isJsonNull()) && !jsonObj.get("instanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceType").toString()));
      }
      // validate the optional field `instanceType`
      if (jsonObj.get("instanceType") != null && !jsonObj.get("instanceType").isJsonNull()) {
        InstanceTypeEnum.validateJsonElement(jsonObj.get("instanceType"));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      // validate the optional field `primaryResourceId`
      if (jsonObj.get("primaryResourceId") != null && !jsonObj.get("primaryResourceId").isJsonNull()) {
        DatabaseResourceId.validateJsonElement(jsonObj.get("primaryResourceId"));
      }
      // validate the optional field `product`
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        Product.validateJsonElement(jsonObj.get("product"));
      }
      if ((jsonObj.get("resourceContainer") != null && !jsonObj.get("resourceContainer").isJsonNull()) && !jsonObj.get("resourceContainer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceContainer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceContainer").toString()));
      }
      if ((jsonObj.get("resourceName") != null && !jsonObj.get("resourceName").isJsonNull()) && !jsonObj.get("resourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceName").toString()));
      }
      if ((jsonObj.get("updationTime") != null && !jsonObj.get("updationTime").isJsonNull()) && !jsonObj.get("updationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updationTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseResourceMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseResourceMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseResourceMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseResourceMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseResourceMetadata>() {
           @Override
           public void write(JsonWriter out, DatabaseResourceMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseResourceMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabaseResourceMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabaseResourceMetadata
   * @throws IOException if the JSON string is invalid with respect to DatabaseResourceMetadata
   */
  public static DatabaseResourceMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseResourceMetadata.class);
  }

  /**
   * Convert an instance of DatabaseResourceMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

