/*
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration of the persistence functionality.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:56.197101-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PersistenceConfig {
  /**
   * Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
   */
  @JsonAdapter(PersistenceModeEnum.Adapter.class)
  public enum PersistenceModeEnum {
    PERSISTENCE_MODE_UNSPECIFIED("PERSISTENCE_MODE_UNSPECIFIED"),
    
    DISABLED("DISABLED"),
    
    RDB("RDB");

    private String value;

    PersistenceModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PersistenceModeEnum fromValue(String value) {
      for (PersistenceModeEnum b : PersistenceModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PersistenceModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PersistenceModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PersistenceModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PersistenceModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PersistenceModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERSISTENCE_MODE = "persistenceMode";
  @SerializedName(SERIALIZED_NAME_PERSISTENCE_MODE)
  private PersistenceModeEnum persistenceMode;

  public static final String SERIALIZED_NAME_RDB_NEXT_SNAPSHOT_TIME = "rdbNextSnapshotTime";
  @SerializedName(SERIALIZED_NAME_RDB_NEXT_SNAPSHOT_TIME)
  private String rdbNextSnapshotTime;

  /**
   * Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default.
   */
  @JsonAdapter(RdbSnapshotPeriodEnum.Adapter.class)
  public enum RdbSnapshotPeriodEnum {
    SNAPSHOT_PERIOD_UNSPECIFIED("SNAPSHOT_PERIOD_UNSPECIFIED"),
    
    ONE_HOUR("ONE_HOUR"),
    
    SIX_HOURS("SIX_HOURS"),
    
    TWELVE_HOURS("TWELVE_HOURS"),
    
    TWENTY_FOUR_HOURS("TWENTY_FOUR_HOURS");

    private String value;

    RdbSnapshotPeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RdbSnapshotPeriodEnum fromValue(String value) {
      for (RdbSnapshotPeriodEnum b : RdbSnapshotPeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RdbSnapshotPeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RdbSnapshotPeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RdbSnapshotPeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RdbSnapshotPeriodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RdbSnapshotPeriodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RDB_SNAPSHOT_PERIOD = "rdbSnapshotPeriod";
  @SerializedName(SERIALIZED_NAME_RDB_SNAPSHOT_PERIOD)
  private RdbSnapshotPeriodEnum rdbSnapshotPeriod;

  public static final String SERIALIZED_NAME_RDB_SNAPSHOT_START_TIME = "rdbSnapshotStartTime";
  @SerializedName(SERIALIZED_NAME_RDB_SNAPSHOT_START_TIME)
  private String rdbSnapshotStartTime;

  public PersistenceConfig() {
  }

  public PersistenceConfig(
     String rdbNextSnapshotTime
  ) {
    this();
    this.rdbNextSnapshotTime = rdbNextSnapshotTime;
  }

  public PersistenceConfig persistenceMode(PersistenceModeEnum persistenceMode) {
    this.persistenceMode = persistenceMode;
    return this;
  }

  /**
   * Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
   * @return persistenceMode
   */
  @javax.annotation.Nullable
  public PersistenceModeEnum getPersistenceMode() {
    return persistenceMode;
  }

  public void setPersistenceMode(PersistenceModeEnum persistenceMode) {
    this.persistenceMode = persistenceMode;
  }


  /**
   * Output only. The next time that a snapshot attempt is scheduled to occur.
   * @return rdbNextSnapshotTime
   */
  @javax.annotation.Nullable
  public String getRdbNextSnapshotTime() {
    return rdbNextSnapshotTime;
  }



  public PersistenceConfig rdbSnapshotPeriod(RdbSnapshotPeriodEnum rdbSnapshotPeriod) {
    this.rdbSnapshotPeriod = rdbSnapshotPeriod;
    return this;
  }

  /**
   * Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default.
   * @return rdbSnapshotPeriod
   */
  @javax.annotation.Nullable
  public RdbSnapshotPeriodEnum getRdbSnapshotPeriod() {
    return rdbSnapshotPeriod;
  }

  public void setRdbSnapshotPeriod(RdbSnapshotPeriodEnum rdbSnapshotPeriod) {
    this.rdbSnapshotPeriod = rdbSnapshotPeriod;
  }


  public PersistenceConfig rdbSnapshotStartTime(String rdbSnapshotStartTime) {
    this.rdbSnapshotStartTime = rdbSnapshotStartTime;
    return this;
  }

  /**
   * Optional. Date and time that the first snapshot was/will be attempted, and to which future snapshots will be aligned. If not provided, the current time will be used.
   * @return rdbSnapshotStartTime
   */
  @javax.annotation.Nullable
  public String getRdbSnapshotStartTime() {
    return rdbSnapshotStartTime;
  }

  public void setRdbSnapshotStartTime(String rdbSnapshotStartTime) {
    this.rdbSnapshotStartTime = rdbSnapshotStartTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersistenceConfig persistenceConfig = (PersistenceConfig) o;
    return Objects.equals(this.persistenceMode, persistenceConfig.persistenceMode) &&
        Objects.equals(this.rdbNextSnapshotTime, persistenceConfig.rdbNextSnapshotTime) &&
        Objects.equals(this.rdbSnapshotPeriod, persistenceConfig.rdbSnapshotPeriod) &&
        Objects.equals(this.rdbSnapshotStartTime, persistenceConfig.rdbSnapshotStartTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(persistenceMode, rdbNextSnapshotTime, rdbSnapshotPeriod, rdbSnapshotStartTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersistenceConfig {\n");
    sb.append("    persistenceMode: ").append(toIndentedString(persistenceMode)).append("\n");
    sb.append("    rdbNextSnapshotTime: ").append(toIndentedString(rdbNextSnapshotTime)).append("\n");
    sb.append("    rdbSnapshotPeriod: ").append(toIndentedString(rdbSnapshotPeriod)).append("\n");
    sb.append("    rdbSnapshotStartTime: ").append(toIndentedString(rdbSnapshotStartTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("persistenceMode");
    openapiFields.add("rdbNextSnapshotTime");
    openapiFields.add("rdbSnapshotPeriod");
    openapiFields.add("rdbSnapshotStartTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PersistenceConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PersistenceConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersistenceConfig is not found in the empty JSON string", PersistenceConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PersistenceConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PersistenceConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("persistenceMode") != null && !jsonObj.get("persistenceMode").isJsonNull()) && !jsonObj.get("persistenceMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `persistenceMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("persistenceMode").toString()));
      }
      // validate the optional field `persistenceMode`
      if (jsonObj.get("persistenceMode") != null && !jsonObj.get("persistenceMode").isJsonNull()) {
        PersistenceModeEnum.validateJsonElement(jsonObj.get("persistenceMode"));
      }
      if ((jsonObj.get("rdbNextSnapshotTime") != null && !jsonObj.get("rdbNextSnapshotTime").isJsonNull()) && !jsonObj.get("rdbNextSnapshotTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rdbNextSnapshotTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rdbNextSnapshotTime").toString()));
      }
      if ((jsonObj.get("rdbSnapshotPeriod") != null && !jsonObj.get("rdbSnapshotPeriod").isJsonNull()) && !jsonObj.get("rdbSnapshotPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rdbSnapshotPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rdbSnapshotPeriod").toString()));
      }
      // validate the optional field `rdbSnapshotPeriod`
      if (jsonObj.get("rdbSnapshotPeriod") != null && !jsonObj.get("rdbSnapshotPeriod").isJsonNull()) {
        RdbSnapshotPeriodEnum.validateJsonElement(jsonObj.get("rdbSnapshotPeriod"));
      }
      if ((jsonObj.get("rdbSnapshotStartTime") != null && !jsonObj.get("rdbSnapshotStartTime").isJsonNull()) && !jsonObj.get("rdbSnapshotStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rdbSnapshotStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rdbSnapshotStartTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersistenceConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersistenceConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersistenceConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersistenceConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PersistenceConfig>() {
           @Override
           public void write(JsonWriter out, PersistenceConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PersistenceConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PersistenceConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PersistenceConfig
   * @throws IOException if the JSON string is invalid with respect to PersistenceConfig
   */
  public static PersistenceConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersistenceConfig.class);
  }

  /**
   * Convert an instance of PersistenceConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

