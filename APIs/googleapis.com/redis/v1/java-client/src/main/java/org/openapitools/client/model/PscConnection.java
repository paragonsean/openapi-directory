/*
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of consumer resources in a PSC connection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:56.197101-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PscConnection {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_FORWARDING_RULE = "forwardingRule";
  @SerializedName(SERIALIZED_NAME_FORWARDING_RULE)
  private String forwardingRule;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_PSC_CONNECTION_ID = "pscConnectionId";
  @SerializedName(SERIALIZED_NAME_PSC_CONNECTION_ID)
  private String pscConnectionId;

  public PscConnection() {
  }

  public PscConnection(
     String address, 
     String forwardingRule, 
     String projectId, 
     String pscConnectionId
  ) {
    this();
    this.address = address;
    this.forwardingRule = forwardingRule;
    this.projectId = projectId;
    this.pscConnectionId = pscConnectionId;
  }

  /**
   * Output only. The IP allocated on the consumer network for the PSC forwarding rule.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }



  /**
   * Output only. The URI of the consumer side forwarding rule. Example: projects/{projectNumOrId}/regions/us-east1/forwardingRules/{resourceId}.
   * @return forwardingRule
   */
  @javax.annotation.Nullable
  public String getForwardingRule() {
    return forwardingRule;
  }



  public PscConnection network(String network) {
    this.network = network;
    return this;
  }

  /**
   * The consumer network where the IP address resides, in the form of projects/{project_id}/global/networks/{network_id}.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  /**
   * Output only. The consumer project_id where the forwarding rule is created from.
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }



  /**
   * Output only. The PSC connection id of the forwarding rule connected to the service attachment.
   * @return pscConnectionId
   */
  @javax.annotation.Nullable
  public String getPscConnectionId() {
    return pscConnectionId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PscConnection pscConnection = (PscConnection) o;
    return Objects.equals(this.address, pscConnection.address) &&
        Objects.equals(this.forwardingRule, pscConnection.forwardingRule) &&
        Objects.equals(this.network, pscConnection.network) &&
        Objects.equals(this.projectId, pscConnection.projectId) &&
        Objects.equals(this.pscConnectionId, pscConnection.pscConnectionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, forwardingRule, network, projectId, pscConnectionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PscConnection {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    forwardingRule: ").append(toIndentedString(forwardingRule)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    pscConnectionId: ").append(toIndentedString(pscConnectionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("forwardingRule");
    openapiFields.add("network");
    openapiFields.add("projectId");
    openapiFields.add("pscConnectionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PscConnection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PscConnection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PscConnection is not found in the empty JSON string", PscConnection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PscConnection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PscConnection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("forwardingRule") != null && !jsonObj.get("forwardingRule").isJsonNull()) && !jsonObj.get("forwardingRule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forwardingRule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forwardingRule").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if ((jsonObj.get("pscConnectionId") != null && !jsonObj.get("pscConnectionId").isJsonNull()) && !jsonObj.get("pscConnectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pscConnectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pscConnectionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PscConnection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PscConnection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PscConnection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PscConnection.class));

       return (TypeAdapter<T>) new TypeAdapter<PscConnection>() {
           @Override
           public void write(JsonWriter out, PscConnection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PscConnection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PscConnection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PscConnection
   * @throws IOException if the JSON string is invalid with respect to PscConnection
   */
  public static PscConnection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PscConnection.class);
  }

  /**
   * Convert an instance of PscConnection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

