/**
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiscoveryEndpoint from './DiscoveryEndpoint';
import PscConfig from './PscConfig';
import PscConnection from './PscConnection';
import StateInfo from './StateInfo';

/**
 * The Cluster model module.
 * @module model/Cluster
 * @version v1beta1
 */
class Cluster {
    /**
     * Constructs a new <code>Cluster</code>.
     * A cluster instance.
     * @alias module:model/Cluster
     */
    constructor() { 
        
        Cluster.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Cluster</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cluster} obj Optional instance to populate.
     * @return {module:model/Cluster} The populated <code>Cluster</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cluster();

            if (data.hasOwnProperty('authorizationMode')) {
                obj['authorizationMode'] = ApiClient.convertToType(data['authorizationMode'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('discoveryEndpoints')) {
                obj['discoveryEndpoints'] = ApiClient.convertToType(data['discoveryEndpoints'], [DiscoveryEndpoint]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pscConfigs')) {
                obj['pscConfigs'] = ApiClient.convertToType(data['pscConfigs'], [PscConfig]);
            }
            if (data.hasOwnProperty('pscConnections')) {
                obj['pscConnections'] = ApiClient.convertToType(data['pscConnections'], [PscConnection]);
            }
            if (data.hasOwnProperty('replicaCount')) {
                obj['replicaCount'] = ApiClient.convertToType(data['replicaCount'], 'Number');
            }
            if (data.hasOwnProperty('shardCount')) {
                obj['shardCount'] = ApiClient.convertToType(data['shardCount'], 'Number');
            }
            if (data.hasOwnProperty('sizeGb')) {
                obj['sizeGb'] = ApiClient.convertToType(data['sizeGb'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateInfo')) {
                obj['stateInfo'] = StateInfo.constructFromObject(data['stateInfo']);
            }
            if (data.hasOwnProperty('transitEncryptionMode')) {
                obj['transitEncryptionMode'] = ApiClient.convertToType(data['transitEncryptionMode'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cluster</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cluster</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authorizationMode'] && !(typeof data['authorizationMode'] === 'string' || data['authorizationMode'] instanceof String)) {
            throw new Error("Expected the field `authorizationMode` to be a primitive type in the JSON string but got " + data['authorizationMode']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        if (data['discoveryEndpoints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['discoveryEndpoints'])) {
                throw new Error("Expected the field `discoveryEndpoints` to be an array in the JSON data but got " + data['discoveryEndpoints']);
            }
            // validate the optional field `discoveryEndpoints` (array)
            for (const item of data['discoveryEndpoints']) {
                DiscoveryEndpoint.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['pscConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pscConfigs'])) {
                throw new Error("Expected the field `pscConfigs` to be an array in the JSON data but got " + data['pscConfigs']);
            }
            // validate the optional field `pscConfigs` (array)
            for (const item of data['pscConfigs']) {
                PscConfig.validateJSON(item);
            };
        }
        if (data['pscConnections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pscConnections'])) {
                throw new Error("Expected the field `pscConnections` to be an array in the JSON data but got " + data['pscConnections']);
            }
            // validate the optional field `pscConnections` (array)
            for (const item of data['pscConnections']) {
                PscConnection.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `stateInfo`
        if (data['stateInfo']) { // data not null
          StateInfo.validateJSON(data['stateInfo']);
        }
        // ensure the json data is a string
        if (data['transitEncryptionMode'] && !(typeof data['transitEncryptionMode'] === 'string' || data['transitEncryptionMode'] instanceof String)) {
            throw new Error("Expected the field `transitEncryptionMode` to be a primitive type in the JSON string but got " + data['transitEncryptionMode']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}



/**
 * Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
 * @member {module:model/Cluster.AuthorizationModeEnum} authorizationMode
 */
Cluster.prototype['authorizationMode'] = undefined;

/**
 * Output only. The timestamp associated with the cluster creation request.
 * @member {String} createTime
 */
Cluster.prototype['createTime'] = undefined;

/**
 * Output only. Endpoints created on each given network, for Redis clients to connect to the cluster. Currently only one discovery endpoint is supported.
 * @member {Array.<module:model/DiscoveryEndpoint>} discoveryEndpoints
 */
Cluster.prototype['discoveryEndpoints'] = undefined;

/**
 * Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`
 * @member {String} name
 */
Cluster.prototype['name'] = undefined;

/**
 * Required. Each PscConfig configures the consumer network where IPs will be designated to the cluster for client access through Private Service Connect Automation. Currently, only one PscConfig is supported.
 * @member {Array.<module:model/PscConfig>} pscConfigs
 */
Cluster.prototype['pscConfigs'] = undefined;

/**
 * Output only. PSC connections for discovery of the cluster topology and accessing the cluster.
 * @member {Array.<module:model/PscConnection>} pscConnections
 */
Cluster.prototype['pscConnections'] = undefined;

/**
 * Optional. The number of replica nodes per shard.
 * @member {Number} replicaCount
 */
Cluster.prototype['replicaCount'] = undefined;

/**
 * Required. Number of shards for the Redis cluster.
 * @member {Number} shardCount
 */
Cluster.prototype['shardCount'] = undefined;

/**
 * Output only. Redis memory size in GB for the entire cluster rounded up to the next integer.
 * @member {Number} sizeGb
 */
Cluster.prototype['sizeGb'] = undefined;

/**
 * Output only. The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED
 * @member {module:model/Cluster.StateEnum} state
 */
Cluster.prototype['state'] = undefined;

/**
 * @member {module:model/StateInfo} stateInfo
 */
Cluster.prototype['stateInfo'] = undefined;

/**
 * Optional. The in-transit encryption for the Redis cluster. If not provided, encryption is disabled for the cluster.
 * @member {module:model/Cluster.TransitEncryptionModeEnum} transitEncryptionMode
 */
Cluster.prototype['transitEncryptionMode'] = undefined;

/**
 * Output only. System assigned, unique identifier for the cluster.
 * @member {String} uid
 */
Cluster.prototype['uid'] = undefined;





/**
 * Allowed values for the <code>authorizationMode</code> property.
 * @enum {String}
 * @readonly
 */
Cluster['AuthorizationModeEnum'] = {

    /**
     * value: "AUTH_MODE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "AUTH_MODE_UNSPECIFIED",

    /**
     * value: "AUTH_MODE_IAM_AUTH"
     * @const
     */
    "IAM_AUTH": "AUTH_MODE_IAM_AUTH",

    /**
     * value: "AUTH_MODE_DISABLED"
     * @const
     */
    "DISABLED": "AUTH_MODE_DISABLED"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Cluster['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING"
};


/**
 * Allowed values for the <code>transitEncryptionMode</code> property.
 * @enum {String}
 * @readonly
 */
Cluster['TransitEncryptionModeEnum'] = {

    /**
     * value: "TRANSIT_ENCRYPTION_MODE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "TRANSIT_ENCRYPTION_MODE_UNSPECIFIED",

    /**
     * value: "TRANSIT_ENCRYPTION_MODE_DISABLED"
     * @const
     */
    "DISABLED": "TRANSIT_ENCRYPTION_MODE_DISABLED",

    /**
     * value: "TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION"
     * @const
     */
    "SERVER_AUTHENTICATION": "TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION"
};



export default Cluster;

