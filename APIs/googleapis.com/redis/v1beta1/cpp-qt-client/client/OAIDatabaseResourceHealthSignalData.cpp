/**
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseResourceHealthSignalData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseResourceHealthSignalData::OAIDatabaseResourceHealthSignalData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseResourceHealthSignalData::OAIDatabaseResourceHealthSignalData() {
    this->initializeModel();
}

OAIDatabaseResourceHealthSignalData::~OAIDatabaseResourceHealthSignalData() {}

void OAIDatabaseResourceHealthSignalData::initializeModel() {

    m_additional_metadata_isSet = false;
    m_additional_metadata_isValid = false;

    m_compliance_isSet = false;
    m_compliance_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_time_isSet = false;
    m_event_time_isValid = false;

    m_external_uri_isSet = false;
    m_external_uri_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_resource_container_isSet = false;
    m_resource_container_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_signal_class_isSet = false;
    m_signal_class_isValid = false;

    m_signal_id_isSet = false;
    m_signal_id_isValid = false;

    m_signal_type_isSet = false;
    m_signal_type_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIDatabaseResourceHealthSignalData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseResourceHealthSignalData::fromJsonObject(QJsonObject json) {

    m_additional_metadata_isValid = ::OpenAPI::fromJsonValue(m_additional_metadata, json[QString("additionalMetadata")]);
    m_additional_metadata_isSet = !json[QString("additionalMetadata")].isNull() && m_additional_metadata_isValid;

    m_compliance_isValid = ::OpenAPI::fromJsonValue(m_compliance, json[QString("compliance")]);
    m_compliance_isSet = !json[QString("compliance")].isNull() && m_compliance_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_time_isValid = ::OpenAPI::fromJsonValue(m_event_time, json[QString("eventTime")]);
    m_event_time_isSet = !json[QString("eventTime")].isNull() && m_event_time_isValid;

    m_external_uri_isValid = ::OpenAPI::fromJsonValue(m_external_uri, json[QString("externalUri")]);
    m_external_uri_isSet = !json[QString("externalUri")].isNull() && m_external_uri_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_resource_container_isValid = ::OpenAPI::fromJsonValue(m_resource_container, json[QString("resourceContainer")]);
    m_resource_container_isSet = !json[QString("resourceContainer")].isNull() && m_resource_container_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;

    m_signal_class_isValid = ::OpenAPI::fromJsonValue(m_signal_class, json[QString("signalClass")]);
    m_signal_class_isSet = !json[QString("signalClass")].isNull() && m_signal_class_isValid;

    m_signal_id_isValid = ::OpenAPI::fromJsonValue(m_signal_id, json[QString("signalId")]);
    m_signal_id_isSet = !json[QString("signalId")].isNull() && m_signal_id_isValid;

    m_signal_type_isValid = ::OpenAPI::fromJsonValue(m_signal_type, json[QString("signalType")]);
    m_signal_type_isSet = !json[QString("signalType")].isNull() && m_signal_type_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIDatabaseResourceHealthSignalData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseResourceHealthSignalData::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_metadata.size() > 0) {
        obj.insert(QString("additionalMetadata"), ::OpenAPI::toJsonValue(m_additional_metadata));
    }
    if (m_compliance.size() > 0) {
        obj.insert(QString("compliance"), ::OpenAPI::toJsonValue(m_compliance));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_time_isSet) {
        obj.insert(QString("eventTime"), ::OpenAPI::toJsonValue(m_event_time));
    }
    if (m_external_uri_isSet) {
        obj.insert(QString("externalUri"), ::OpenAPI::toJsonValue(m_external_uri));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_resource_container_isSet) {
        obj.insert(QString("resourceContainer"), ::OpenAPI::toJsonValue(m_resource_container));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_signal_class_isSet) {
        obj.insert(QString("signalClass"), ::OpenAPI::toJsonValue(m_signal_class));
    }
    if (m_signal_id_isSet) {
        obj.insert(QString("signalId"), ::OpenAPI::toJsonValue(m_signal_id));
    }
    if (m_signal_type_isSet) {
        obj.insert(QString("signalType"), ::OpenAPI::toJsonValue(m_signal_type));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIDatabaseResourceHealthSignalData::getAdditionalMetadata() const {
    return m_additional_metadata;
}
void OAIDatabaseResourceHealthSignalData::setAdditionalMetadata(const QMap<QString, QJsonValue> &additional_metadata) {
    m_additional_metadata = additional_metadata;
    m_additional_metadata_isSet = true;
}

bool OAIDatabaseResourceHealthSignalData::is_additional_metadata_Set() const{
    return m_additional_metadata_isSet;
}

bool OAIDatabaseResourceHealthSignalData::is_additional_metadata_Valid() const{
    return m_additional_metadata_isValid;
}

QList<OAICompliance> OAIDatabaseResourceHealthSignalData::getCompliance() const {
    return m_compliance;
}
void OAIDatabaseResourceHealthSignalData::setCompliance(const QList<OAICompliance> &compliance) {
    m_compliance = compliance;
    m_compliance_isSet = true;
}

bool OAIDatabaseResourceHealthSignalData::is_compliance_Set() const{
    return m_compliance_isSet;
}

bool OAIDatabaseResourceHealthSignalData::is_compliance_Valid() const{
    return m_compliance_isValid;
}

QString OAIDatabaseResourceHealthSignalData::getDescription() const {
    return m_description;
}
void OAIDatabaseResourceHealthSignalData::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDatabaseResourceHealthSignalData::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDatabaseResourceHealthSignalData::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDatabaseResourceHealthSignalData::getEventTime() const {
    return m_event_time;
}
void OAIDatabaseResourceHealthSignalData::setEventTime(const QString &event_time) {
    m_event_time = event_time;
    m_event_time_isSet = true;
}

bool OAIDatabaseResourceHealthSignalData::is_event_time_Set() const{
    return m_event_time_isSet;
}

bool OAIDatabaseResourceHealthSignalData::is_event_time_Valid() const{
    return m_event_time_isValid;
}

QString OAIDatabaseResourceHealthSignalData::getExternalUri() const {
    return m_external_uri;
}
void OAIDatabaseResourceHealthSignalData::setExternalUri(const QString &external_uri) {
    m_external_uri = external_uri;
    m_external_uri_isSet = true;
}

bool OAIDatabaseResourceHealthSignalData::is_external_uri_Set() const{
    return m_external_uri_isSet;
}

bool OAIDatabaseResourceHealthSignalData::is_external_uri_Valid() const{
    return m_external_uri_isValid;
}

QString OAIDatabaseResourceHealthSignalData::getName() const {
    return m_name;
}
void OAIDatabaseResourceHealthSignalData::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDatabaseResourceHealthSignalData::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDatabaseResourceHealthSignalData::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDatabaseResourceHealthSignalData::getProvider() const {
    return m_provider;
}
void OAIDatabaseResourceHealthSignalData::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIDatabaseResourceHealthSignalData::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIDatabaseResourceHealthSignalData::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIDatabaseResourceHealthSignalData::getResourceContainer() const {
    return m_resource_container;
}
void OAIDatabaseResourceHealthSignalData::setResourceContainer(const QString &resource_container) {
    m_resource_container = resource_container;
    m_resource_container_isSet = true;
}

bool OAIDatabaseResourceHealthSignalData::is_resource_container_Set() const{
    return m_resource_container_isSet;
}

bool OAIDatabaseResourceHealthSignalData::is_resource_container_Valid() const{
    return m_resource_container_isValid;
}

QString OAIDatabaseResourceHealthSignalData::getResourceName() const {
    return m_resource_name;
}
void OAIDatabaseResourceHealthSignalData::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIDatabaseResourceHealthSignalData::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIDatabaseResourceHealthSignalData::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

QString OAIDatabaseResourceHealthSignalData::getSignalClass() const {
    return m_signal_class;
}
void OAIDatabaseResourceHealthSignalData::setSignalClass(const QString &signal_class) {
    m_signal_class = signal_class;
    m_signal_class_isSet = true;
}

bool OAIDatabaseResourceHealthSignalData::is_signal_class_Set() const{
    return m_signal_class_isSet;
}

bool OAIDatabaseResourceHealthSignalData::is_signal_class_Valid() const{
    return m_signal_class_isValid;
}

QString OAIDatabaseResourceHealthSignalData::getSignalId() const {
    return m_signal_id;
}
void OAIDatabaseResourceHealthSignalData::setSignalId(const QString &signal_id) {
    m_signal_id = signal_id;
    m_signal_id_isSet = true;
}

bool OAIDatabaseResourceHealthSignalData::is_signal_id_Set() const{
    return m_signal_id_isSet;
}

bool OAIDatabaseResourceHealthSignalData::is_signal_id_Valid() const{
    return m_signal_id_isValid;
}

QString OAIDatabaseResourceHealthSignalData::getSignalType() const {
    return m_signal_type;
}
void OAIDatabaseResourceHealthSignalData::setSignalType(const QString &signal_type) {
    m_signal_type = signal_type;
    m_signal_type_isSet = true;
}

bool OAIDatabaseResourceHealthSignalData::is_signal_type_Set() const{
    return m_signal_type_isSet;
}

bool OAIDatabaseResourceHealthSignalData::is_signal_type_Valid() const{
    return m_signal_type_isValid;
}

QString OAIDatabaseResourceHealthSignalData::getState() const {
    return m_state;
}
void OAIDatabaseResourceHealthSignalData::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDatabaseResourceHealthSignalData::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDatabaseResourceHealthSignalData::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIDatabaseResourceHealthSignalData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signal_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signal_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseResourceHealthSignalData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
