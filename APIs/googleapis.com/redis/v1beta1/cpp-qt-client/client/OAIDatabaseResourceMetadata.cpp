/**
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseResourceMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseResourceMetadata::OAIDatabaseResourceMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseResourceMetadata::OAIDatabaseResourceMetadata() {
    this->initializeModel();
}

OAIDatabaseResourceMetadata::~OAIDatabaseResourceMetadata() {}

void OAIDatabaseResourceMetadata::initializeModel() {

    m_availability_configuration_isSet = false;
    m_availability_configuration_isValid = false;

    m_backup_configuration_isSet = false;
    m_backup_configuration_isValid = false;

    m_backup_run_isSet = false;
    m_backup_run_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_current_state_isSet = false;
    m_current_state_isValid = false;

    m_custom_metadata_isSet = false;
    m_custom_metadata_isValid = false;

    m_entitlements_isSet = false;
    m_entitlements_isValid = false;

    m_expected_state_isSet = false;
    m_expected_state_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_primary_resource_id_isSet = false;
    m_primary_resource_id_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_resource_container_isSet = false;
    m_resource_container_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_updation_time_isSet = false;
    m_updation_time_isValid = false;

    m_user_labels_isSet = false;
    m_user_labels_isValid = false;
}

void OAIDatabaseResourceMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseResourceMetadata::fromJsonObject(QJsonObject json) {

    m_availability_configuration_isValid = ::OpenAPI::fromJsonValue(m_availability_configuration, json[QString("availabilityConfiguration")]);
    m_availability_configuration_isSet = !json[QString("availabilityConfiguration")].isNull() && m_availability_configuration_isValid;

    m_backup_configuration_isValid = ::OpenAPI::fromJsonValue(m_backup_configuration, json[QString("backupConfiguration")]);
    m_backup_configuration_isSet = !json[QString("backupConfiguration")].isNull() && m_backup_configuration_isValid;

    m_backup_run_isValid = ::OpenAPI::fromJsonValue(m_backup_run, json[QString("backupRun")]);
    m_backup_run_isSet = !json[QString("backupRun")].isNull() && m_backup_run_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_current_state_isValid = ::OpenAPI::fromJsonValue(m_current_state, json[QString("currentState")]);
    m_current_state_isSet = !json[QString("currentState")].isNull() && m_current_state_isValid;

    m_custom_metadata_isValid = ::OpenAPI::fromJsonValue(m_custom_metadata, json[QString("customMetadata")]);
    m_custom_metadata_isSet = !json[QString("customMetadata")].isNull() && m_custom_metadata_isValid;

    m_entitlements_isValid = ::OpenAPI::fromJsonValue(m_entitlements, json[QString("entitlements")]);
    m_entitlements_isSet = !json[QString("entitlements")].isNull() && m_entitlements_isValid;

    m_expected_state_isValid = ::OpenAPI::fromJsonValue(m_expected_state, json[QString("expectedState")]);
    m_expected_state_isSet = !json[QString("expectedState")].isNull() && m_expected_state_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_primary_resource_id_isValid = ::OpenAPI::fromJsonValue(m_primary_resource_id, json[QString("primaryResourceId")]);
    m_primary_resource_id_isSet = !json[QString("primaryResourceId")].isNull() && m_primary_resource_id_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_resource_container_isValid = ::OpenAPI::fromJsonValue(m_resource_container, json[QString("resourceContainer")]);
    m_resource_container_isSet = !json[QString("resourceContainer")].isNull() && m_resource_container_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;

    m_updation_time_isValid = ::OpenAPI::fromJsonValue(m_updation_time, json[QString("updationTime")]);
    m_updation_time_isSet = !json[QString("updationTime")].isNull() && m_updation_time_isValid;

    m_user_labels_isValid = ::OpenAPI::fromJsonValue(m_user_labels, json[QString("userLabels")]);
    m_user_labels_isSet = !json[QString("userLabels")].isNull() && m_user_labels_isValid;
}

QString OAIDatabaseResourceMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseResourceMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_configuration.isSet()) {
        obj.insert(QString("availabilityConfiguration"), ::OpenAPI::toJsonValue(m_availability_configuration));
    }
    if (m_backup_configuration.isSet()) {
        obj.insert(QString("backupConfiguration"), ::OpenAPI::toJsonValue(m_backup_configuration));
    }
    if (m_backup_run.isSet()) {
        obj.insert(QString("backupRun"), ::OpenAPI::toJsonValue(m_backup_run));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_current_state_isSet) {
        obj.insert(QString("currentState"), ::OpenAPI::toJsonValue(m_current_state));
    }
    if (m_custom_metadata.isSet()) {
        obj.insert(QString("customMetadata"), ::OpenAPI::toJsonValue(m_custom_metadata));
    }
    if (m_entitlements.size() > 0) {
        obj.insert(QString("entitlements"), ::OpenAPI::toJsonValue(m_entitlements));
    }
    if (m_expected_state_isSet) {
        obj.insert(QString("expectedState"), ::OpenAPI::toJsonValue(m_expected_state));
    }
    if (m_id.isSet()) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_primary_resource_id.isSet()) {
        obj.insert(QString("primaryResourceId"), ::OpenAPI::toJsonValue(m_primary_resource_id));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_resource_container_isSet) {
        obj.insert(QString("resourceContainer"), ::OpenAPI::toJsonValue(m_resource_container));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_updation_time_isSet) {
        obj.insert(QString("updationTime"), ::OpenAPI::toJsonValue(m_updation_time));
    }
    if (m_user_labels.size() > 0) {
        obj.insert(QString("userLabels"), ::OpenAPI::toJsonValue(m_user_labels));
    }
    return obj;
}

OAIAvailabilityConfiguration OAIDatabaseResourceMetadata::getAvailabilityConfiguration() const {
    return m_availability_configuration;
}
void OAIDatabaseResourceMetadata::setAvailabilityConfiguration(const OAIAvailabilityConfiguration &availability_configuration) {
    m_availability_configuration = availability_configuration;
    m_availability_configuration_isSet = true;
}

bool OAIDatabaseResourceMetadata::is_availability_configuration_Set() const{
    return m_availability_configuration_isSet;
}

bool OAIDatabaseResourceMetadata::is_availability_configuration_Valid() const{
    return m_availability_configuration_isValid;
}

OAIBackupConfiguration OAIDatabaseResourceMetadata::getBackupConfiguration() const {
    return m_backup_configuration;
}
void OAIDatabaseResourceMetadata::setBackupConfiguration(const OAIBackupConfiguration &backup_configuration) {
    m_backup_configuration = backup_configuration;
    m_backup_configuration_isSet = true;
}

bool OAIDatabaseResourceMetadata::is_backup_configuration_Set() const{
    return m_backup_configuration_isSet;
}

bool OAIDatabaseResourceMetadata::is_backup_configuration_Valid() const{
    return m_backup_configuration_isValid;
}

OAIBackupRun OAIDatabaseResourceMetadata::getBackupRun() const {
    return m_backup_run;
}
void OAIDatabaseResourceMetadata::setBackupRun(const OAIBackupRun &backup_run) {
    m_backup_run = backup_run;
    m_backup_run_isSet = true;
}

bool OAIDatabaseResourceMetadata::is_backup_run_Set() const{
    return m_backup_run_isSet;
}

bool OAIDatabaseResourceMetadata::is_backup_run_Valid() const{
    return m_backup_run_isValid;
}

QString OAIDatabaseResourceMetadata::getCreationTime() const {
    return m_creation_time;
}
void OAIDatabaseResourceMetadata::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDatabaseResourceMetadata::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDatabaseResourceMetadata::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIDatabaseResourceMetadata::getCurrentState() const {
    return m_current_state;
}
void OAIDatabaseResourceMetadata::setCurrentState(const QString &current_state) {
    m_current_state = current_state;
    m_current_state_isSet = true;
}

bool OAIDatabaseResourceMetadata::is_current_state_Set() const{
    return m_current_state_isSet;
}

bool OAIDatabaseResourceMetadata::is_current_state_Valid() const{
    return m_current_state_isValid;
}

OAICustomMetadataData OAIDatabaseResourceMetadata::getCustomMetadata() const {
    return m_custom_metadata;
}
void OAIDatabaseResourceMetadata::setCustomMetadata(const OAICustomMetadataData &custom_metadata) {
    m_custom_metadata = custom_metadata;
    m_custom_metadata_isSet = true;
}

bool OAIDatabaseResourceMetadata::is_custom_metadata_Set() const{
    return m_custom_metadata_isSet;
}

bool OAIDatabaseResourceMetadata::is_custom_metadata_Valid() const{
    return m_custom_metadata_isValid;
}

QList<OAIEntitlement> OAIDatabaseResourceMetadata::getEntitlements() const {
    return m_entitlements;
}
void OAIDatabaseResourceMetadata::setEntitlements(const QList<OAIEntitlement> &entitlements) {
    m_entitlements = entitlements;
    m_entitlements_isSet = true;
}

bool OAIDatabaseResourceMetadata::is_entitlements_Set() const{
    return m_entitlements_isSet;
}

bool OAIDatabaseResourceMetadata::is_entitlements_Valid() const{
    return m_entitlements_isValid;
}

QString OAIDatabaseResourceMetadata::getExpectedState() const {
    return m_expected_state;
}
void OAIDatabaseResourceMetadata::setExpectedState(const QString &expected_state) {
    m_expected_state = expected_state;
    m_expected_state_isSet = true;
}

bool OAIDatabaseResourceMetadata::is_expected_state_Set() const{
    return m_expected_state_isSet;
}

bool OAIDatabaseResourceMetadata::is_expected_state_Valid() const{
    return m_expected_state_isValid;
}

OAIDatabaseResourceId OAIDatabaseResourceMetadata::getId() const {
    return m_id;
}
void OAIDatabaseResourceMetadata::setId(const OAIDatabaseResourceId &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDatabaseResourceMetadata::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDatabaseResourceMetadata::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDatabaseResourceMetadata::getInstanceType() const {
    return m_instance_type;
}
void OAIDatabaseResourceMetadata::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIDatabaseResourceMetadata::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIDatabaseResourceMetadata::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAIDatabaseResourceMetadata::getLocation() const {
    return m_location;
}
void OAIDatabaseResourceMetadata::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIDatabaseResourceMetadata::is_location_Set() const{
    return m_location_isSet;
}

bool OAIDatabaseResourceMetadata::is_location_Valid() const{
    return m_location_isValid;
}

OAIDatabaseResourceId OAIDatabaseResourceMetadata::getPrimaryResourceId() const {
    return m_primary_resource_id;
}
void OAIDatabaseResourceMetadata::setPrimaryResourceId(const OAIDatabaseResourceId &primary_resource_id) {
    m_primary_resource_id = primary_resource_id;
    m_primary_resource_id_isSet = true;
}

bool OAIDatabaseResourceMetadata::is_primary_resource_id_Set() const{
    return m_primary_resource_id_isSet;
}

bool OAIDatabaseResourceMetadata::is_primary_resource_id_Valid() const{
    return m_primary_resource_id_isValid;
}

OAIProduct OAIDatabaseResourceMetadata::getProduct() const {
    return m_product;
}
void OAIDatabaseResourceMetadata::setProduct(const OAIProduct &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIDatabaseResourceMetadata::is_product_Set() const{
    return m_product_isSet;
}

bool OAIDatabaseResourceMetadata::is_product_Valid() const{
    return m_product_isValid;
}

QString OAIDatabaseResourceMetadata::getResourceContainer() const {
    return m_resource_container;
}
void OAIDatabaseResourceMetadata::setResourceContainer(const QString &resource_container) {
    m_resource_container = resource_container;
    m_resource_container_isSet = true;
}

bool OAIDatabaseResourceMetadata::is_resource_container_Set() const{
    return m_resource_container_isSet;
}

bool OAIDatabaseResourceMetadata::is_resource_container_Valid() const{
    return m_resource_container_isValid;
}

QString OAIDatabaseResourceMetadata::getResourceName() const {
    return m_resource_name;
}
void OAIDatabaseResourceMetadata::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIDatabaseResourceMetadata::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIDatabaseResourceMetadata::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

QString OAIDatabaseResourceMetadata::getUpdationTime() const {
    return m_updation_time;
}
void OAIDatabaseResourceMetadata::setUpdationTime(const QString &updation_time) {
    m_updation_time = updation_time;
    m_updation_time_isSet = true;
}

bool OAIDatabaseResourceMetadata::is_updation_time_Set() const{
    return m_updation_time_isSet;
}

bool OAIDatabaseResourceMetadata::is_updation_time_Valid() const{
    return m_updation_time_isValid;
}

QMap<QString, QString> OAIDatabaseResourceMetadata::getUserLabels() const {
    return m_user_labels;
}
void OAIDatabaseResourceMetadata::setUserLabels(const QMap<QString, QString> &user_labels) {
    m_user_labels = user_labels;
    m_user_labels_isSet = true;
}

bool OAIDatabaseResourceMetadata::is_user_labels_Set() const{
    return m_user_labels_isSet;
}

bool OAIDatabaseResourceMetadata::is_user_labels_Valid() const{
    return m_user_labels_isValid;
}

bool OAIDatabaseResourceMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_run.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entitlements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_resource_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseResourceMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
