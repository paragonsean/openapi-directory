/**
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupConfiguration::OAIBackupConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupConfiguration::OAIBackupConfiguration() {
    this->initializeModel();
}

OAIBackupConfiguration::~OAIBackupConfiguration() {}

void OAIBackupConfiguration::initializeModel() {

    m_automated_backup_enabled_isSet = false;
    m_automated_backup_enabled_isValid = false;

    m_backup_retention_settings_isSet = false;
    m_backup_retention_settings_isValid = false;

    m_point_in_time_recovery_enabled_isSet = false;
    m_point_in_time_recovery_enabled_isValid = false;
}

void OAIBackupConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupConfiguration::fromJsonObject(QJsonObject json) {

    m_automated_backup_enabled_isValid = ::OpenAPI::fromJsonValue(m_automated_backup_enabled, json[QString("automatedBackupEnabled")]);
    m_automated_backup_enabled_isSet = !json[QString("automatedBackupEnabled")].isNull() && m_automated_backup_enabled_isValid;

    m_backup_retention_settings_isValid = ::OpenAPI::fromJsonValue(m_backup_retention_settings, json[QString("backupRetentionSettings")]);
    m_backup_retention_settings_isSet = !json[QString("backupRetentionSettings")].isNull() && m_backup_retention_settings_isValid;

    m_point_in_time_recovery_enabled_isValid = ::OpenAPI::fromJsonValue(m_point_in_time_recovery_enabled, json[QString("pointInTimeRecoveryEnabled")]);
    m_point_in_time_recovery_enabled_isSet = !json[QString("pointInTimeRecoveryEnabled")].isNull() && m_point_in_time_recovery_enabled_isValid;
}

QString OAIBackupConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_automated_backup_enabled_isSet) {
        obj.insert(QString("automatedBackupEnabled"), ::OpenAPI::toJsonValue(m_automated_backup_enabled));
    }
    if (m_backup_retention_settings.isSet()) {
        obj.insert(QString("backupRetentionSettings"), ::OpenAPI::toJsonValue(m_backup_retention_settings));
    }
    if (m_point_in_time_recovery_enabled_isSet) {
        obj.insert(QString("pointInTimeRecoveryEnabled"), ::OpenAPI::toJsonValue(m_point_in_time_recovery_enabled));
    }
    return obj;
}

bool OAIBackupConfiguration::isAutomatedBackupEnabled() const {
    return m_automated_backup_enabled;
}
void OAIBackupConfiguration::setAutomatedBackupEnabled(const bool &automated_backup_enabled) {
    m_automated_backup_enabled = automated_backup_enabled;
    m_automated_backup_enabled_isSet = true;
}

bool OAIBackupConfiguration::is_automated_backup_enabled_Set() const{
    return m_automated_backup_enabled_isSet;
}

bool OAIBackupConfiguration::is_automated_backup_enabled_Valid() const{
    return m_automated_backup_enabled_isValid;
}

OAIRetentionSettings OAIBackupConfiguration::getBackupRetentionSettings() const {
    return m_backup_retention_settings;
}
void OAIBackupConfiguration::setBackupRetentionSettings(const OAIRetentionSettings &backup_retention_settings) {
    m_backup_retention_settings = backup_retention_settings;
    m_backup_retention_settings_isSet = true;
}

bool OAIBackupConfiguration::is_backup_retention_settings_Set() const{
    return m_backup_retention_settings_isSet;
}

bool OAIBackupConfiguration::is_backup_retention_settings_Valid() const{
    return m_backup_retention_settings_isValid;
}

bool OAIBackupConfiguration::isPointInTimeRecoveryEnabled() const {
    return m_point_in_time_recovery_enabled;
}
void OAIBackupConfiguration::setPointInTimeRecoveryEnabled(const bool &point_in_time_recovery_enabled) {
    m_point_in_time_recovery_enabled = point_in_time_recovery_enabled;
    m_point_in_time_recovery_enabled_isSet = true;
}

bool OAIBackupConfiguration::is_point_in_time_recovery_enabled_Set() const{
    return m_point_in_time_recovery_enabled_isSet;
}

bool OAIBackupConfiguration::is_point_in_time_recovery_enabled_Valid() const{
    return m_point_in_time_recovery_enabled_isValid;
}

bool OAIBackupConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automated_backup_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_retention_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_in_time_recovery_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
