/**
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseMetadata::OAIDatabaseMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseMetadata::OAIDatabaseMetadata() {
    this->initializeModel();
}

OAIDatabaseMetadata::~OAIDatabaseMetadata() {}

void OAIDatabaseMetadata::initializeModel() {

    m_backup_configuration_isSet = false;
    m_backup_configuration_isValid = false;

    m_backup_run_isSet = false;
    m_backup_run_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;
}

void OAIDatabaseMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseMetadata::fromJsonObject(QJsonObject json) {

    m_backup_configuration_isValid = ::OpenAPI::fromJsonValue(m_backup_configuration, json[QString("backupConfiguration")]);
    m_backup_configuration_isSet = !json[QString("backupConfiguration")].isNull() && m_backup_configuration_isValid;

    m_backup_run_isValid = ::OpenAPI::fromJsonValue(m_backup_run, json[QString("backupRun")]);
    m_backup_run_isSet = !json[QString("backupRun")].isNull() && m_backup_run_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;
}

QString OAIDatabaseMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_configuration.isSet()) {
        obj.insert(QString("backupConfiguration"), ::OpenAPI::toJsonValue(m_backup_configuration));
    }
    if (m_backup_run.isSet()) {
        obj.insert(QString("backupRun"), ::OpenAPI::toJsonValue(m_backup_run));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_resource_id.isSet()) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    return obj;
}

OAIBackupConfiguration OAIDatabaseMetadata::getBackupConfiguration() const {
    return m_backup_configuration;
}
void OAIDatabaseMetadata::setBackupConfiguration(const OAIBackupConfiguration &backup_configuration) {
    m_backup_configuration = backup_configuration;
    m_backup_configuration_isSet = true;
}

bool OAIDatabaseMetadata::is_backup_configuration_Set() const{
    return m_backup_configuration_isSet;
}

bool OAIDatabaseMetadata::is_backup_configuration_Valid() const{
    return m_backup_configuration_isValid;
}

OAIBackupRun OAIDatabaseMetadata::getBackupRun() const {
    return m_backup_run;
}
void OAIDatabaseMetadata::setBackupRun(const OAIBackupRun &backup_run) {
    m_backup_run = backup_run;
    m_backup_run_isSet = true;
}

bool OAIDatabaseMetadata::is_backup_run_Set() const{
    return m_backup_run_isSet;
}

bool OAIDatabaseMetadata::is_backup_run_Valid() const{
    return m_backup_run_isValid;
}

OAIProduct OAIDatabaseMetadata::getProduct() const {
    return m_product;
}
void OAIDatabaseMetadata::setProduct(const OAIProduct &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIDatabaseMetadata::is_product_Set() const{
    return m_product_isSet;
}

bool OAIDatabaseMetadata::is_product_Valid() const{
    return m_product_isValid;
}

OAIDatabaseResourceId OAIDatabaseMetadata::getResourceId() const {
    return m_resource_id;
}
void OAIDatabaseMetadata::setResourceId(const OAIDatabaseResourceId &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIDatabaseMetadata::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIDatabaseMetadata::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIDatabaseMetadata::getResourceName() const {
    return m_resource_name;
}
void OAIDatabaseMetadata::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIDatabaseMetadata::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIDatabaseMetadata::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

bool OAIDatabaseMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_run.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
