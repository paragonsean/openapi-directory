/**
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITlsCertificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITlsCertificate::OAITlsCertificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITlsCertificate::OAITlsCertificate() {
    this->initializeModel();
}

OAITlsCertificate::~OAITlsCertificate() {}

void OAITlsCertificate::initializeModel() {

    m_cert_isSet = false;
    m_cert_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_sha1_fingerprint_isSet = false;
    m_sha1_fingerprint_isValid = false;
}

void OAITlsCertificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITlsCertificate::fromJsonObject(QJsonObject json) {

    m_cert_isValid = ::OpenAPI::fromJsonValue(m_cert, json[QString("cert")]);
    m_cert_isSet = !json[QString("cert")].isNull() && m_cert_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_sha1_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_sha1_fingerprint, json[QString("sha1Fingerprint")]);
    m_sha1_fingerprint_isSet = !json[QString("sha1Fingerprint")].isNull() && m_sha1_fingerprint_isValid;
}

QString OAITlsCertificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITlsCertificate::asJsonObject() const {
    QJsonObject obj;
    if (m_cert_isSet) {
        obj.insert(QString("cert"), ::OpenAPI::toJsonValue(m_cert));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_sha1_fingerprint_isSet) {
        obj.insert(QString("sha1Fingerprint"), ::OpenAPI::toJsonValue(m_sha1_fingerprint));
    }
    return obj;
}

QString OAITlsCertificate::getCert() const {
    return m_cert;
}
void OAITlsCertificate::setCert(const QString &cert) {
    m_cert = cert;
    m_cert_isSet = true;
}

bool OAITlsCertificate::is_cert_Set() const{
    return m_cert_isSet;
}

bool OAITlsCertificate::is_cert_Valid() const{
    return m_cert_isValid;
}

QString OAITlsCertificate::getCreateTime() const {
    return m_create_time;
}
void OAITlsCertificate::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAITlsCertificate::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAITlsCertificate::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAITlsCertificate::getExpireTime() const {
    return m_expire_time;
}
void OAITlsCertificate::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAITlsCertificate::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAITlsCertificate::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAITlsCertificate::getSerialNumber() const {
    return m_serial_number;
}
void OAITlsCertificate::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAITlsCertificate::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAITlsCertificate::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAITlsCertificate::getSha1Fingerprint() const {
    return m_sha1_fingerprint;
}
void OAITlsCertificate::setSha1Fingerprint(const QString &sha1_fingerprint) {
    m_sha1_fingerprint = sha1_fingerprint;
    m_sha1_fingerprint_isSet = true;
}

bool OAITlsCertificate::is_sha1_fingerprint_Set() const{
    return m_sha1_fingerprint_isSet;
}

bool OAITlsCertificate::is_sha1_fingerprint_Valid() const{
    return m_sha1_fingerprint_isValid;
}

bool OAITlsCertificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cert_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha1_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITlsCertificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
