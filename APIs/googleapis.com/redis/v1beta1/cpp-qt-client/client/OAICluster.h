/**
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICluster.h
 *
 * A cluster instance.
 */

#ifndef OAICluster_H
#define OAICluster_H

#include <QJsonObject>

#include "OAIDiscoveryEndpoint.h"
#include "OAIPscConfig.h"
#include "OAIPscConnection.h"
#include "OAIStateInfo.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDiscoveryEndpoint;
class OAIPscConfig;
class OAIPscConnection;
class OAIStateInfo;

class OAICluster : public OAIObject {
public:
    OAICluster();
    OAICluster(QString json);
    ~OAICluster() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuthorizationMode() const;
    void setAuthorizationMode(const QString &authorization_mode);
    bool is_authorization_mode_Set() const;
    bool is_authorization_mode_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QList<OAIDiscoveryEndpoint> getDiscoveryEndpoints() const;
    void setDiscoveryEndpoints(const QList<OAIDiscoveryEndpoint> &discovery_endpoints);
    bool is_discovery_endpoints_Set() const;
    bool is_discovery_endpoints_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIPscConfig> getPscConfigs() const;
    void setPscConfigs(const QList<OAIPscConfig> &psc_configs);
    bool is_psc_configs_Set() const;
    bool is_psc_configs_Valid() const;

    QList<OAIPscConnection> getPscConnections() const;
    void setPscConnections(const QList<OAIPscConnection> &psc_connections);
    bool is_psc_connections_Set() const;
    bool is_psc_connections_Valid() const;

    qint32 getReplicaCount() const;
    void setReplicaCount(const qint32 &replica_count);
    bool is_replica_count_Set() const;
    bool is_replica_count_Valid() const;

    qint32 getShardCount() const;
    void setShardCount(const qint32 &shard_count);
    bool is_shard_count_Set() const;
    bool is_shard_count_Valid() const;

    qint32 getSizeGb() const;
    void setSizeGb(const qint32 &size_gb);
    bool is_size_gb_Set() const;
    bool is_size_gb_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAIStateInfo getStateInfo() const;
    void setStateInfo(const OAIStateInfo &state_info);
    bool is_state_info_Set() const;
    bool is_state_info_Valid() const;

    QString getTransitEncryptionMode() const;
    void setTransitEncryptionMode(const QString &transit_encryption_mode);
    bool is_transit_encryption_mode_Set() const;
    bool is_transit_encryption_mode_Valid() const;

    QString getUid() const;
    void setUid(const QString &uid);
    bool is_uid_Set() const;
    bool is_uid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_authorization_mode;
    bool m_authorization_mode_isSet;
    bool m_authorization_mode_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QList<OAIDiscoveryEndpoint> m_discovery_endpoints;
    bool m_discovery_endpoints_isSet;
    bool m_discovery_endpoints_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIPscConfig> m_psc_configs;
    bool m_psc_configs_isSet;
    bool m_psc_configs_isValid;

    QList<OAIPscConnection> m_psc_connections;
    bool m_psc_connections_isSet;
    bool m_psc_connections_isValid;

    qint32 m_replica_count;
    bool m_replica_count_isSet;
    bool m_replica_count_isValid;

    qint32 m_shard_count;
    bool m_shard_count_isSet;
    bool m_shard_count_isValid;

    qint32 m_size_gb;
    bool m_size_gb_isSet;
    bool m_size_gb_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAIStateInfo m_state_info;
    bool m_state_info_isSet;
    bool m_state_info_isValid;

    QString m_transit_encryption_mode;
    bool m_transit_encryption_mode_isSet;
    bool m_transit_encryption_mode_isValid;

    QString m_uid;
    bool m_uid_isSet;
    bool m_uid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICluster)

#endif // OAICluster_H
