/**
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReconciliationOperationMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReconciliationOperationMetadata::OAIReconciliationOperationMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReconciliationOperationMetadata::OAIReconciliationOperationMetadata() {
    this->initializeModel();
}

OAIReconciliationOperationMetadata::~OAIReconciliationOperationMetadata() {}

void OAIReconciliationOperationMetadata::initializeModel() {

    m_delete_resource_isSet = false;
    m_delete_resource_isValid = false;

    m_exclusive_action_isSet = false;
    m_exclusive_action_isValid = false;
}

void OAIReconciliationOperationMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReconciliationOperationMetadata::fromJsonObject(QJsonObject json) {

    m_delete_resource_isValid = ::OpenAPI::fromJsonValue(m_delete_resource, json[QString("deleteResource")]);
    m_delete_resource_isSet = !json[QString("deleteResource")].isNull() && m_delete_resource_isValid;

    m_exclusive_action_isValid = ::OpenAPI::fromJsonValue(m_exclusive_action, json[QString("exclusiveAction")]);
    m_exclusive_action_isSet = !json[QString("exclusiveAction")].isNull() && m_exclusive_action_isValid;
}

QString OAIReconciliationOperationMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReconciliationOperationMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_delete_resource_isSet) {
        obj.insert(QString("deleteResource"), ::OpenAPI::toJsonValue(m_delete_resource));
    }
    if (m_exclusive_action_isSet) {
        obj.insert(QString("exclusiveAction"), ::OpenAPI::toJsonValue(m_exclusive_action));
    }
    return obj;
}

bool OAIReconciliationOperationMetadata::isDeleteResource() const {
    return m_delete_resource;
}
void OAIReconciliationOperationMetadata::setDeleteResource(const bool &delete_resource) {
    m_delete_resource = delete_resource;
    m_delete_resource_isSet = true;
}

bool OAIReconciliationOperationMetadata::is_delete_resource_Set() const{
    return m_delete_resource_isSet;
}

bool OAIReconciliationOperationMetadata::is_delete_resource_Valid() const{
    return m_delete_resource_isValid;
}

QString OAIReconciliationOperationMetadata::getExclusiveAction() const {
    return m_exclusive_action;
}
void OAIReconciliationOperationMetadata::setExclusiveAction(const QString &exclusive_action) {
    m_exclusive_action = exclusive_action;
    m_exclusive_action_isSet = true;
}

bool OAIReconciliationOperationMetadata::is_exclusive_action_Set() const{
    return m_exclusive_action_isSet;
}

bool OAIReconciliationOperationMetadata::is_exclusive_action_Valid() const{
    return m_exclusive_action_isValid;
}

bool OAIReconciliationOperationMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delete_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusive_action_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReconciliationOperationMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
