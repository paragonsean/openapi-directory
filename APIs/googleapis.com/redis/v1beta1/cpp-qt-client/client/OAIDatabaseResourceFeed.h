/**
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDatabaseResourceFeed.h
 *
 * DatabaseResourceFeed is the top level proto to be used to ingest different database resource level events into Condor platform.
 */

#ifndef OAIDatabaseResourceFeed_H
#define OAIDatabaseResourceFeed_H

#include <QJsonObject>

#include "OAIDatabaseResourceHealthSignalData.h"
#include "OAIDatabaseResourceId.h"
#include "OAIDatabaseResourceMetadata.h"
#include "OAIDatabaseResourceRecommendationSignalData.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDatabaseResourceRecommendationSignalData;
class OAIDatabaseResourceHealthSignalData;
class OAIDatabaseResourceId;
class OAIDatabaseResourceMetadata;

class OAIDatabaseResourceFeed : public OAIObject {
public:
    OAIDatabaseResourceFeed();
    OAIDatabaseResourceFeed(QString json);
    ~OAIDatabaseResourceFeed() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFeedTimestamp() const;
    void setFeedTimestamp(const QString &feed_timestamp);
    bool is_feed_timestamp_Set() const;
    bool is_feed_timestamp_Valid() const;

    QString getFeedType() const;
    void setFeedType(const QString &feed_type);
    bool is_feed_type_Set() const;
    bool is_feed_type_Valid() const;

    OAIDatabaseResourceRecommendationSignalData getRecommendationSignalData() const;
    void setRecommendationSignalData(const OAIDatabaseResourceRecommendationSignalData &recommendation_signal_data);
    bool is_recommendation_signal_data_Set() const;
    bool is_recommendation_signal_data_Valid() const;

    OAIDatabaseResourceHealthSignalData getResourceHealthSignalData() const;
    void setResourceHealthSignalData(const OAIDatabaseResourceHealthSignalData &resource_health_signal_data);
    bool is_resource_health_signal_data_Set() const;
    bool is_resource_health_signal_data_Valid() const;

    OAIDatabaseResourceId getResourceId() const;
    void setResourceId(const OAIDatabaseResourceId &resource_id);
    bool is_resource_id_Set() const;
    bool is_resource_id_Valid() const;

    OAIDatabaseResourceMetadata getResourceMetadata() const;
    void setResourceMetadata(const OAIDatabaseResourceMetadata &resource_metadata);
    bool is_resource_metadata_Set() const;
    bool is_resource_metadata_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_feed_timestamp;
    bool m_feed_timestamp_isSet;
    bool m_feed_timestamp_isValid;

    QString m_feed_type;
    bool m_feed_type_isSet;
    bool m_feed_type_isValid;

    OAIDatabaseResourceRecommendationSignalData m_recommendation_signal_data;
    bool m_recommendation_signal_data_isSet;
    bool m_recommendation_signal_data_isValid;

    OAIDatabaseResourceHealthSignalData m_resource_health_signal_data;
    bool m_resource_health_signal_data_isSet;
    bool m_resource_health_signal_data_isValid;

    OAIDatabaseResourceId m_resource_id;
    bool m_resource_id_isSet;
    bool m_resource_id_isValid;

    OAIDatabaseResourceMetadata m_resource_metadata;
    bool m_resource_metadata_isSet;
    bool m_resource_metadata_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDatabaseResourceFeed)

#endif // OAIDatabaseResourceFeed_H
