/**
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscoveryEndpoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscoveryEndpoint::OAIDiscoveryEndpoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscoveryEndpoint::OAIDiscoveryEndpoint() {
    this->initializeModel();
}

OAIDiscoveryEndpoint::~OAIDiscoveryEndpoint() {}

void OAIDiscoveryEndpoint::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_psc_config_isSet = false;
    m_psc_config_isValid = false;
}

void OAIDiscoveryEndpoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscoveryEndpoint::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_psc_config_isValid = ::OpenAPI::fromJsonValue(m_psc_config, json[QString("pscConfig")]);
    m_psc_config_isSet = !json[QString("pscConfig")].isNull() && m_psc_config_isValid;
}

QString OAIDiscoveryEndpoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscoveryEndpoint::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_psc_config.isSet()) {
        obj.insert(QString("pscConfig"), ::OpenAPI::toJsonValue(m_psc_config));
    }
    return obj;
}

QString OAIDiscoveryEndpoint::getAddress() const {
    return m_address;
}
void OAIDiscoveryEndpoint::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIDiscoveryEndpoint::is_address_Set() const{
    return m_address_isSet;
}

bool OAIDiscoveryEndpoint::is_address_Valid() const{
    return m_address_isValid;
}

qint32 OAIDiscoveryEndpoint::getPort() const {
    return m_port;
}
void OAIDiscoveryEndpoint::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIDiscoveryEndpoint::is_port_Set() const{
    return m_port_isSet;
}

bool OAIDiscoveryEndpoint::is_port_Valid() const{
    return m_port_isValid;
}

OAIPscConfig OAIDiscoveryEndpoint::getPscConfig() const {
    return m_psc_config;
}
void OAIDiscoveryEndpoint::setPscConfig(const OAIPscConfig &psc_config) {
    m_psc_config = psc_config;
    m_psc_config_isSet = true;
}

bool OAIDiscoveryEndpoint::is_psc_config_Set() const{
    return m_psc_config_isSet;
}

bool OAIDiscoveryEndpoint::is_psc_config_Valid() const{
    return m_psc_config_isValid;
}

bool OAIDiscoveryEndpoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscoveryEndpoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
