/**
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateInfo::OAIUpdateInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateInfo::OAIUpdateInfo() {
    this->initializeModel();
}

OAIUpdateInfo::~OAIUpdateInfo() {}

void OAIUpdateInfo::initializeModel() {

    m_target_replica_count_isSet = false;
    m_target_replica_count_isValid = false;

    m_target_shard_count_isSet = false;
    m_target_shard_count_isValid = false;
}

void OAIUpdateInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateInfo::fromJsonObject(QJsonObject json) {

    m_target_replica_count_isValid = ::OpenAPI::fromJsonValue(m_target_replica_count, json[QString("targetReplicaCount")]);
    m_target_replica_count_isSet = !json[QString("targetReplicaCount")].isNull() && m_target_replica_count_isValid;

    m_target_shard_count_isValid = ::OpenAPI::fromJsonValue(m_target_shard_count, json[QString("targetShardCount")]);
    m_target_shard_count_isSet = !json[QString("targetShardCount")].isNull() && m_target_shard_count_isValid;
}

QString OAIUpdateInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_target_replica_count_isSet) {
        obj.insert(QString("targetReplicaCount"), ::OpenAPI::toJsonValue(m_target_replica_count));
    }
    if (m_target_shard_count_isSet) {
        obj.insert(QString("targetShardCount"), ::OpenAPI::toJsonValue(m_target_shard_count));
    }
    return obj;
}

qint32 OAIUpdateInfo::getTargetReplicaCount() const {
    return m_target_replica_count;
}
void OAIUpdateInfo::setTargetReplicaCount(const qint32 &target_replica_count) {
    m_target_replica_count = target_replica_count;
    m_target_replica_count_isSet = true;
}

bool OAIUpdateInfo::is_target_replica_count_Set() const{
    return m_target_replica_count_isSet;
}

bool OAIUpdateInfo::is_target_replica_count_Valid() const{
    return m_target_replica_count_isValid;
}

qint32 OAIUpdateInfo::getTargetShardCount() const {
    return m_target_shard_count;
}
void OAIUpdateInfo::setTargetShardCount(const qint32 &target_shard_count) {
    m_target_shard_count = target_shard_count;
    m_target_shard_count_isSet = true;
}

bool OAIUpdateInfo::is_target_shard_count_Set() const{
    return m_target_shard_count_isSet;
}

bool OAIUpdateInfo::is_target_shard_count_Valid() const{
    return m_target_shard_count_isValid;
}

bool OAIUpdateInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_replica_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_shard_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
