# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation_error import OperationError
from openapi_server import util


class BackupRun(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, error: OperationError=None, start_time: str=None, status: str=None):
        """BackupRun - a model defined in OpenAPI

        :param end_time: The end_time of this BackupRun.
        :param error: The error of this BackupRun.
        :param start_time: The start_time of this BackupRun.
        :param status: The status of this BackupRun.
        """
        self.openapi_types = {
            'end_time': str,
            'error': OperationError,
            'start_time': str,
            'status': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'error': 'error',
            'start_time': 'startTime',
            'status': 'status'
        }

        self._end_time = end_time
        self._error = error
        self._start_time = start_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupRun':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupRun of this BackupRun.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this BackupRun.

        The time the backup operation completed. REQUIRED

        :return: The end_time of this BackupRun.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this BackupRun.

        The time the backup operation completed. REQUIRED

        :param end_time: The end_time of this BackupRun.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def error(self):
        """Gets the error of this BackupRun.


        :return: The error of this BackupRun.
        :rtype: OperationError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this BackupRun.


        :param error: The error of this BackupRun.
        :type error: OperationError
        """

        self._error = error

    @property
    def start_time(self):
        """Gets the start_time of this BackupRun.

        The time the backup operation started. REQUIRED

        :return: The start_time of this BackupRun.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BackupRun.

        The time the backup operation started. REQUIRED

        :param start_time: The start_time of this BackupRun.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this BackupRun.

        The status of this run. REQUIRED

        :return: The status of this BackupRun.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BackupRun.

        The status of this run. REQUIRED

        :param status: The status of this BackupRun.
        :type status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "SUCCESSFUL", "FAILED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
