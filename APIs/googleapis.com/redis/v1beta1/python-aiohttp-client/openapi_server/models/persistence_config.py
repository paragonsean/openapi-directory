# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PersistenceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, persistence_mode: str=None, rdb_next_snapshot_time: str=None, rdb_snapshot_period: str=None, rdb_snapshot_start_time: str=None):
        """PersistenceConfig - a model defined in OpenAPI

        :param persistence_mode: The persistence_mode of this PersistenceConfig.
        :param rdb_next_snapshot_time: The rdb_next_snapshot_time of this PersistenceConfig.
        :param rdb_snapshot_period: The rdb_snapshot_period of this PersistenceConfig.
        :param rdb_snapshot_start_time: The rdb_snapshot_start_time of this PersistenceConfig.
        """
        self.openapi_types = {
            'persistence_mode': str,
            'rdb_next_snapshot_time': str,
            'rdb_snapshot_period': str,
            'rdb_snapshot_start_time': str
        }

        self.attribute_map = {
            'persistence_mode': 'persistenceMode',
            'rdb_next_snapshot_time': 'rdbNextSnapshotTime',
            'rdb_snapshot_period': 'rdbSnapshotPeriod',
            'rdb_snapshot_start_time': 'rdbSnapshotStartTime'
        }

        self._persistence_mode = persistence_mode
        self._rdb_next_snapshot_time = rdb_next_snapshot_time
        self._rdb_snapshot_period = rdb_snapshot_period
        self._rdb_snapshot_start_time = rdb_snapshot_start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersistenceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersistenceConfig of this PersistenceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def persistence_mode(self):
        """Gets the persistence_mode of this PersistenceConfig.

        Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.

        :return: The persistence_mode of this PersistenceConfig.
        :rtype: str
        """
        return self._persistence_mode

    @persistence_mode.setter
    def persistence_mode(self, persistence_mode):
        """Sets the persistence_mode of this PersistenceConfig.

        Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.

        :param persistence_mode: The persistence_mode of this PersistenceConfig.
        :type persistence_mode: str
        """
        allowed_values = ["PERSISTENCE_MODE_UNSPECIFIED", "DISABLED", "RDB"]  # noqa: E501
        if persistence_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `persistence_mode` ({0}), must be one of {1}"
                .format(persistence_mode, allowed_values)
            )

        self._persistence_mode = persistence_mode

    @property
    def rdb_next_snapshot_time(self):
        """Gets the rdb_next_snapshot_time of this PersistenceConfig.

        Output only. The next time that a snapshot attempt is scheduled to occur.

        :return: The rdb_next_snapshot_time of this PersistenceConfig.
        :rtype: str
        """
        return self._rdb_next_snapshot_time

    @rdb_next_snapshot_time.setter
    def rdb_next_snapshot_time(self, rdb_next_snapshot_time):
        """Sets the rdb_next_snapshot_time of this PersistenceConfig.

        Output only. The next time that a snapshot attempt is scheduled to occur.

        :param rdb_next_snapshot_time: The rdb_next_snapshot_time of this PersistenceConfig.
        :type rdb_next_snapshot_time: str
        """

        self._rdb_next_snapshot_time = rdb_next_snapshot_time

    @property
    def rdb_snapshot_period(self):
        """Gets the rdb_snapshot_period of this PersistenceConfig.

        Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default.

        :return: The rdb_snapshot_period of this PersistenceConfig.
        :rtype: str
        """
        return self._rdb_snapshot_period

    @rdb_snapshot_period.setter
    def rdb_snapshot_period(self, rdb_snapshot_period):
        """Sets the rdb_snapshot_period of this PersistenceConfig.

        Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default.

        :param rdb_snapshot_period: The rdb_snapshot_period of this PersistenceConfig.
        :type rdb_snapshot_period: str
        """
        allowed_values = ["SNAPSHOT_PERIOD_UNSPECIFIED", "ONE_HOUR", "SIX_HOURS", "TWELVE_HOURS", "TWENTY_FOUR_HOURS"]  # noqa: E501
        if rdb_snapshot_period not in allowed_values:
            raise ValueError(
                "Invalid value for `rdb_snapshot_period` ({0}), must be one of {1}"
                .format(rdb_snapshot_period, allowed_values)
            )

        self._rdb_snapshot_period = rdb_snapshot_period

    @property
    def rdb_snapshot_start_time(self):
        """Gets the rdb_snapshot_start_time of this PersistenceConfig.

        Optional. Date and time that the first snapshot was/will be attempted, and to which future snapshots will be aligned. If not provided, the current time will be used.

        :return: The rdb_snapshot_start_time of this PersistenceConfig.
        :rtype: str
        """
        return self._rdb_snapshot_start_time

    @rdb_snapshot_start_time.setter
    def rdb_snapshot_start_time(self, rdb_snapshot_start_time):
        """Sets the rdb_snapshot_start_time of this PersistenceConfig.

        Optional. Date and time that the first snapshot was/will be attempted, and to which future snapshots will be aligned. If not provided, the current time will be used.

        :param rdb_snapshot_start_time: The rdb_snapshot_start_time of this PersistenceConfig.
        :type rdb_snapshot_start_time: str
        """

        self._rdb_snapshot_start_time = rdb_snapshot_start_time
