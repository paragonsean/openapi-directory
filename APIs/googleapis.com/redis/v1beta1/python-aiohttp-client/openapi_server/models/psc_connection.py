# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PscConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, forwarding_rule: str=None, network: str=None, project_id: str=None, psc_connection_id: str=None):
        """PscConnection - a model defined in OpenAPI

        :param address: The address of this PscConnection.
        :param forwarding_rule: The forwarding_rule of this PscConnection.
        :param network: The network of this PscConnection.
        :param project_id: The project_id of this PscConnection.
        :param psc_connection_id: The psc_connection_id of this PscConnection.
        """
        self.openapi_types = {
            'address': str,
            'forwarding_rule': str,
            'network': str,
            'project_id': str,
            'psc_connection_id': str
        }

        self.attribute_map = {
            'address': 'address',
            'forwarding_rule': 'forwardingRule',
            'network': 'network',
            'project_id': 'projectId',
            'psc_connection_id': 'pscConnectionId'
        }

        self._address = address
        self._forwarding_rule = forwarding_rule
        self._network = network
        self._project_id = project_id
        self._psc_connection_id = psc_connection_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PscConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PscConnection of this PscConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this PscConnection.

        Output only. The IP allocated on the consumer network for the PSC forwarding rule.

        :return: The address of this PscConnection.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PscConnection.

        Output only. The IP allocated on the consumer network for the PSC forwarding rule.

        :param address: The address of this PscConnection.
        :type address: str
        """

        self._address = address

    @property
    def forwarding_rule(self):
        """Gets the forwarding_rule of this PscConnection.

        Output only. The URI of the consumer side forwarding rule. Example: projects/{projectNumOrId}/regions/us-east1/forwardingRules/{resourceId}.

        :return: The forwarding_rule of this PscConnection.
        :rtype: str
        """
        return self._forwarding_rule

    @forwarding_rule.setter
    def forwarding_rule(self, forwarding_rule):
        """Sets the forwarding_rule of this PscConnection.

        Output only. The URI of the consumer side forwarding rule. Example: projects/{projectNumOrId}/regions/us-east1/forwardingRules/{resourceId}.

        :param forwarding_rule: The forwarding_rule of this PscConnection.
        :type forwarding_rule: str
        """

        self._forwarding_rule = forwarding_rule

    @property
    def network(self):
        """Gets the network of this PscConnection.

        The consumer network where the IP address resides, in the form of projects/{project_id}/global/networks/{network_id}.

        :return: The network of this PscConnection.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this PscConnection.

        The consumer network where the IP address resides, in the form of projects/{project_id}/global/networks/{network_id}.

        :param network: The network of this PscConnection.
        :type network: str
        """

        self._network = network

    @property
    def project_id(self):
        """Gets the project_id of this PscConnection.

        Output only. The consumer project_id where the forwarding rule is created from.

        :return: The project_id of this PscConnection.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this PscConnection.

        Output only. The consumer project_id where the forwarding rule is created from.

        :param project_id: The project_id of this PscConnection.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def psc_connection_id(self):
        """Gets the psc_connection_id of this PscConnection.

        Output only. The PSC connection id of the forwarding rule connected to the service attachment.

        :return: The psc_connection_id of this PscConnection.
        :rtype: str
        """
        return self._psc_connection_id

    @psc_connection_id.setter
    def psc_connection_id(self, psc_connection_id):
        """Sets the psc_connection_id of this PscConnection.

        Output only. The PSC connection id of the forwarding rule connected to the service attachment.

        :param psc_connection_id: The psc_connection_id of this PscConnection.
        :type psc_connection_id: str
        """

        self._psc_connection_id = psc_connection_id
