# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TlsCertificate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cert: str=None, create_time: str=None, expire_time: str=None, serial_number: str=None, sha1_fingerprint: str=None):
        """TlsCertificate - a model defined in OpenAPI

        :param cert: The cert of this TlsCertificate.
        :param create_time: The create_time of this TlsCertificate.
        :param expire_time: The expire_time of this TlsCertificate.
        :param serial_number: The serial_number of this TlsCertificate.
        :param sha1_fingerprint: The sha1_fingerprint of this TlsCertificate.
        """
        self.openapi_types = {
            'cert': str,
            'create_time': str,
            'expire_time': str,
            'serial_number': str,
            'sha1_fingerprint': str
        }

        self.attribute_map = {
            'cert': 'cert',
            'create_time': 'createTime',
            'expire_time': 'expireTime',
            'serial_number': 'serialNumber',
            'sha1_fingerprint': 'sha1Fingerprint'
        }

        self._cert = cert
        self._create_time = create_time
        self._expire_time = expire_time
        self._serial_number = serial_number
        self._sha1_fingerprint = sha1_fingerprint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TlsCertificate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TlsCertificate of this TlsCertificate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert(self):
        """Gets the cert of this TlsCertificate.

        PEM representation.

        :return: The cert of this TlsCertificate.
        :rtype: str
        """
        return self._cert

    @cert.setter
    def cert(self, cert):
        """Sets the cert of this TlsCertificate.

        PEM representation.

        :param cert: The cert of this TlsCertificate.
        :type cert: str
        """

        self._cert = cert

    @property
    def create_time(self):
        """Gets the create_time of this TlsCertificate.

        Output only. The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.

        :return: The create_time of this TlsCertificate.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this TlsCertificate.

        Output only. The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.

        :param create_time: The create_time of this TlsCertificate.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def expire_time(self):
        """Gets the expire_time of this TlsCertificate.

        Output only. The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.

        :return: The expire_time of this TlsCertificate.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this TlsCertificate.

        Output only. The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.

        :param expire_time: The expire_time of this TlsCertificate.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def serial_number(self):
        """Gets the serial_number of this TlsCertificate.

        Serial number, as extracted from the certificate.

        :return: The serial_number of this TlsCertificate.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this TlsCertificate.

        Serial number, as extracted from the certificate.

        :param serial_number: The serial_number of this TlsCertificate.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def sha1_fingerprint(self):
        """Gets the sha1_fingerprint of this TlsCertificate.

        Sha1 Fingerprint of the certificate.

        :return: The sha1_fingerprint of this TlsCertificate.
        :rtype: str
        """
        return self._sha1_fingerprint

    @sha1_fingerprint.setter
    def sha1_fingerprint(self, sha1_fingerprint):
        """Sets the sha1_fingerprint of this TlsCertificate.

        Sha1 Fingerprint of the certificate.

        :param sha1_fingerprint: The sha1_fingerprint of this TlsCertificate.
        :type sha1_fingerprint: str
        """

        self._sha1_fingerprint = sha1_fingerprint
