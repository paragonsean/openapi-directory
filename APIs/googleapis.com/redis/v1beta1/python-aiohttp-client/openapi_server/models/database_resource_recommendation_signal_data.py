# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabaseResourceRecommendationSignalData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_metadata: Dict[str, object]=None, last_refresh_time: str=None, recommendation_state: str=None, recommender: str=None, recommender_id: str=None, recommender_subtype: str=None, resource_name: str=None, signal_type: str=None):
        """DatabaseResourceRecommendationSignalData - a model defined in OpenAPI

        :param additional_metadata: The additional_metadata of this DatabaseResourceRecommendationSignalData.
        :param last_refresh_time: The last_refresh_time of this DatabaseResourceRecommendationSignalData.
        :param recommendation_state: The recommendation_state of this DatabaseResourceRecommendationSignalData.
        :param recommender: The recommender of this DatabaseResourceRecommendationSignalData.
        :param recommender_id: The recommender_id of this DatabaseResourceRecommendationSignalData.
        :param recommender_subtype: The recommender_subtype of this DatabaseResourceRecommendationSignalData.
        :param resource_name: The resource_name of this DatabaseResourceRecommendationSignalData.
        :param signal_type: The signal_type of this DatabaseResourceRecommendationSignalData.
        """
        self.openapi_types = {
            'additional_metadata': Dict[str, object],
            'last_refresh_time': str,
            'recommendation_state': str,
            'recommender': str,
            'recommender_id': str,
            'recommender_subtype': str,
            'resource_name': str,
            'signal_type': str
        }

        self.attribute_map = {
            'additional_metadata': 'additionalMetadata',
            'last_refresh_time': 'lastRefreshTime',
            'recommendation_state': 'recommendationState',
            'recommender': 'recommender',
            'recommender_id': 'recommenderId',
            'recommender_subtype': 'recommenderSubtype',
            'resource_name': 'resourceName',
            'signal_type': 'signalType'
        }

        self._additional_metadata = additional_metadata
        self._last_refresh_time = last_refresh_time
        self._recommendation_state = recommendation_state
        self._recommender = recommender
        self._recommender_id = recommender_id
        self._recommender_subtype = recommender_subtype
        self._resource_name = resource_name
        self._signal_type = signal_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseResourceRecommendationSignalData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseResourceRecommendationSignalData of this DatabaseResourceRecommendationSignalData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_metadata(self):
        """Gets the additional_metadata of this DatabaseResourceRecommendationSignalData.

        Optional. Any other additional metadata specific to recommendation

        :return: The additional_metadata of this DatabaseResourceRecommendationSignalData.
        :rtype: Dict[str, object]
        """
        return self._additional_metadata

    @additional_metadata.setter
    def additional_metadata(self, additional_metadata):
        """Sets the additional_metadata of this DatabaseResourceRecommendationSignalData.

        Optional. Any other additional metadata specific to recommendation

        :param additional_metadata: The additional_metadata of this DatabaseResourceRecommendationSignalData.
        :type additional_metadata: Dict[str, object]
        """

        self._additional_metadata = additional_metadata

    @property
    def last_refresh_time(self):
        """Gets the last_refresh_time of this DatabaseResourceRecommendationSignalData.

        Required. last time recommendationw as refreshed

        :return: The last_refresh_time of this DatabaseResourceRecommendationSignalData.
        :rtype: str
        """
        return self._last_refresh_time

    @last_refresh_time.setter
    def last_refresh_time(self, last_refresh_time):
        """Sets the last_refresh_time of this DatabaseResourceRecommendationSignalData.

        Required. last time recommendationw as refreshed

        :param last_refresh_time: The last_refresh_time of this DatabaseResourceRecommendationSignalData.
        :type last_refresh_time: str
        """

        self._last_refresh_time = last_refresh_time

    @property
    def recommendation_state(self):
        """Gets the recommendation_state of this DatabaseResourceRecommendationSignalData.

        Required. Recommendation state

        :return: The recommendation_state of this DatabaseResourceRecommendationSignalData.
        :rtype: str
        """
        return self._recommendation_state

    @recommendation_state.setter
    def recommendation_state(self, recommendation_state):
        """Sets the recommendation_state of this DatabaseResourceRecommendationSignalData.

        Required. Recommendation state

        :param recommendation_state: The recommendation_state of this DatabaseResourceRecommendationSignalData.
        :type recommendation_state: str
        """
        allowed_values = ["UNSPECIFIED", "ACTIVE", "CLAIMED", "SUCCEEDED", "FAILED", "DISMISSED"]  # noqa: E501
        if recommendation_state not in allowed_values:
            raise ValueError(
                "Invalid value for `recommendation_state` ({0}), must be one of {1}"
                .format(recommendation_state, allowed_values)
            )

        self._recommendation_state = recommendation_state

    @property
    def recommender(self):
        """Gets the recommender of this DatabaseResourceRecommendationSignalData.

        Required. Name of recommendation. Examples: organizations/1234/locations/us-central1/recommenders/google.cloudsql.instance.PerformanceRecommender/recommendations/9876

        :return: The recommender of this DatabaseResourceRecommendationSignalData.
        :rtype: str
        """
        return self._recommender

    @recommender.setter
    def recommender(self, recommender):
        """Sets the recommender of this DatabaseResourceRecommendationSignalData.

        Required. Name of recommendation. Examples: organizations/1234/locations/us-central1/recommenders/google.cloudsql.instance.PerformanceRecommender/recommendations/9876

        :param recommender: The recommender of this DatabaseResourceRecommendationSignalData.
        :type recommender: str
        """

        self._recommender = recommender

    @property
    def recommender_id(self):
        """Gets the recommender_id of this DatabaseResourceRecommendationSignalData.

        Required. ID of recommender. Examples: \"google.cloudsql.instance.PerformanceRecommender\"

        :return: The recommender_id of this DatabaseResourceRecommendationSignalData.
        :rtype: str
        """
        return self._recommender_id

    @recommender_id.setter
    def recommender_id(self, recommender_id):
        """Sets the recommender_id of this DatabaseResourceRecommendationSignalData.

        Required. ID of recommender. Examples: \"google.cloudsql.instance.PerformanceRecommender\"

        :param recommender_id: The recommender_id of this DatabaseResourceRecommendationSignalData.
        :type recommender_id: str
        """

        self._recommender_id = recommender_id

    @property
    def recommender_subtype(self):
        """Gets the recommender_subtype of this DatabaseResourceRecommendationSignalData.

        Required. Contains an identifier for a subtype of recommendations produced for the same recommender. Subtype is a function of content and impact, meaning a new subtype might be added when significant changes to `content` or `primary_impact.category` are introduced. See the Recommenders section to see a list of subtypes for a given Recommender. Examples: For recommender = \"google.cloudsql.instance.PerformanceRecommender\", recommender_subtype can be \"MYSQL_HIGH_NUMBER_OF_OPEN_TABLES_BEST_PRACTICE\"/\"POSTGRES_HIGH_TRANSACTION_ID_UTILIZATION_BEST_PRACTICE\"

        :return: The recommender_subtype of this DatabaseResourceRecommendationSignalData.
        :rtype: str
        """
        return self._recommender_subtype

    @recommender_subtype.setter
    def recommender_subtype(self, recommender_subtype):
        """Sets the recommender_subtype of this DatabaseResourceRecommendationSignalData.

        Required. Contains an identifier for a subtype of recommendations produced for the same recommender. Subtype is a function of content and impact, meaning a new subtype might be added when significant changes to `content` or `primary_impact.category` are introduced. See the Recommenders section to see a list of subtypes for a given Recommender. Examples: For recommender = \"google.cloudsql.instance.PerformanceRecommender\", recommender_subtype can be \"MYSQL_HIGH_NUMBER_OF_OPEN_TABLES_BEST_PRACTICE\"/\"POSTGRES_HIGH_TRANSACTION_ID_UTILIZATION_BEST_PRACTICE\"

        :param recommender_subtype: The recommender_subtype of this DatabaseResourceRecommendationSignalData.
        :type recommender_subtype: str
        """

        self._recommender_subtype = recommender_subtype

    @property
    def resource_name(self):
        """Gets the resource_name of this DatabaseResourceRecommendationSignalData.

        Required. Database resource name associated with the signal. Resource name to follow CAIS resource_name format as noted here go/condor-common-datamodel

        :return: The resource_name of this DatabaseResourceRecommendationSignalData.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this DatabaseResourceRecommendationSignalData.

        Required. Database resource name associated with the signal. Resource name to follow CAIS resource_name format as noted here go/condor-common-datamodel

        :param resource_name: The resource_name of this DatabaseResourceRecommendationSignalData.
        :type resource_name: str
        """

        self._resource_name = resource_name

    @property
    def signal_type(self):
        """Gets the signal_type of this DatabaseResourceRecommendationSignalData.

        Required. Type of signal, for example, `SIGNAL_TYPE_IDLE`, `SIGNAL_TYPE_HIGH_NUMBER_OF_TABLES`, etc.

        :return: The signal_type of this DatabaseResourceRecommendationSignalData.
        :rtype: str
        """
        return self._signal_type

    @signal_type.setter
    def signal_type(self, signal_type):
        """Sets the signal_type of this DatabaseResourceRecommendationSignalData.

        Required. Type of signal, for example, `SIGNAL_TYPE_IDLE`, `SIGNAL_TYPE_HIGH_NUMBER_OF_TABLES`, etc.

        :param signal_type: The signal_type of this DatabaseResourceRecommendationSignalData.
        :type signal_type: str
        """
        allowed_values = ["SIGNAL_TYPE_UNSPECIFIED", "SIGNAL_TYPE_NOT_PROTECTED_BY_AUTOMATIC_FAILOVER", "SIGNAL_TYPE_GROUP_NOT_REPLICATING_ACROSS_REGIONS", "SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_ZONES", "SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_REGIONS", "SIGNAL_TYPE_NO_PROMOTABLE_REPLICA", "SIGNAL_TYPE_NO_AUTOMATED_BACKUP_POLICY", "SIGNAL_TYPE_SHORT_BACKUP_RETENTION", "SIGNAL_TYPE_LAST_BACKUP_FAILED", "SIGNAL_TYPE_LAST_BACKUP_OLD", "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_2_0", "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_3", "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_2", "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_1", "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_0", "SIGNAL_TYPE_VIOLATES_NIST_800_53", "SIGNAL_TYPE_VIOLATES_ISO_27001", "SIGNAL_TYPE_VIOLATES_PCI_DSS_V3_2_1", "SIGNAL_TYPE_LOGS_NOT_OPTIMIZED_FOR_TROUBLESHOOTING", "SIGNAL_TYPE_QUERY_DURATIONS_NOT_LOGGED", "SIGNAL_TYPE_VERBOSE_ERROR_LOGGING", "SIGNAL_TYPE_QUERY_LOCK_WAITS_NOT_LOGGED", "SIGNAL_TYPE_LOGGING_MOST_ERRORS", "SIGNAL_TYPE_LOGGING_ONLY_CRITICAL_ERRORS", "SIGNAL_TYPE_MINIMAL_ERROR_LOGGING", "SIGNAL_TYPE_QUERY_STATISTICS_LOGGED", "SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_CLIENT_HOSTNAME", "SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PARSER_STATISTICS", "SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PLANNER_STATISTICS", "SIGNAL_TYPE_NOT_LOGGING_ONLY_DDL_STATEMENTS", "SIGNAL_TYPE_LOGGING_QUERY_STATISTICS", "SIGNAL_TYPE_NOT_LOGGING_TEMPORARY_FILES", "SIGNAL_TYPE_CONNECTION_MAX_NOT_CONFIGURED", "SIGNAL_TYPE_USER_OPTIONS_CONFIGURED", "SIGNAL_TYPE_EXPOSED_TO_PUBLIC_ACCESS", "SIGNAL_TYPE_UNENCRYPTED_CONNECTIONS", "SIGNAL_TYPE_NO_ROOT_PASSWORD", "SIGNAL_TYPE_WEAK_ROOT_PASSWORD", "SIGNAL_TYPE_ENCRYPTION_KEY_NOT_CUSTOMER_MANAGED", "SIGNAL_TYPE_SERVER_AUTHENTICATION_NOT_REQUIRED", "SIGNAL_TYPE_EXPOSED_BY_OWNERSHIP_CHAINING", "SIGNAL_TYPE_EXPOSED_TO_EXTERNAL_SCRIPTS", "SIGNAL_TYPE_EXPOSED_TO_LOCAL_DATA_LOADS", "SIGNAL_TYPE_CONNECTION_ATTEMPTS_NOT_LOGGED", "SIGNAL_TYPE_DISCONNECTIONS_NOT_LOGGED", "SIGNAL_TYPE_LOGGING_EXCESSIVE_STATEMENT_INFO", "SIGNAL_TYPE_EXPOSED_TO_REMOTE_ACCESS", "SIGNAL_TYPE_DATABASE_NAMES_EXPOSED", "SIGNAL_TYPE_SENSITIVE_TRACE_INFO_NOT_MASKED", "SIGNAL_TYPE_PUBLIC_IP_ENABLED", "SIGNAL_TYPE_IDLE", "SIGNAL_TYPE_OVERPROVISIONED", "SIGNAL_TYPE_HIGH_NUMBER_OF_OPEN_TABLES", "SIGNAL_TYPE_HIGH_NUMBER_OF_TABLES", "SIGNAL_TYPE_HIGH_TRANSACTION_ID_UTILIZATION", "SIGNAL_TYPE_UNDERPROVISIONED", "SIGNAL_TYPE_OUT_OF_DISK", "SIGNAL_TYPE_SERVER_CERTIFICATE_NEAR_EXPIRY", "SIGNAL_TYPE_DATABASE_AUDITING_DISABLED", "SIGNAL_TYPE_RESTRICT_AUTHORIZED_NETWORKS", "SIGNAL_TYPE_VIOLATE_POLICY_RESTRICT_PUBLIC_IP"]  # noqa: E501
        if signal_type not in allowed_values:
            raise ValueError(
                "Invalid value for `signal_type` ({0}), must be one of {1}"
                .format(signal_type, allowed_values)
            )

        self._signal_type = signal_type
