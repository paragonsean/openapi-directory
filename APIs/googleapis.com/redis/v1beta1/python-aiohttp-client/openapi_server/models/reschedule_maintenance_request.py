# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RescheduleMaintenanceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reschedule_type: str=None, schedule_time: str=None):
        """RescheduleMaintenanceRequest - a model defined in OpenAPI

        :param reschedule_type: The reschedule_type of this RescheduleMaintenanceRequest.
        :param schedule_time: The schedule_time of this RescheduleMaintenanceRequest.
        """
        self.openapi_types = {
            'reschedule_type': str,
            'schedule_time': str
        }

        self.attribute_map = {
            'reschedule_type': 'rescheduleType',
            'schedule_time': 'scheduleTime'
        }

        self._reschedule_type = reschedule_type
        self._schedule_time = schedule_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RescheduleMaintenanceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RescheduleMaintenanceRequest of this RescheduleMaintenanceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reschedule_type(self):
        """Gets the reschedule_type of this RescheduleMaintenanceRequest.

        Required. If reschedule type is SPECIFIC_TIME, must set up schedule_time as well.

        :return: The reschedule_type of this RescheduleMaintenanceRequest.
        :rtype: str
        """
        return self._reschedule_type

    @reschedule_type.setter
    def reschedule_type(self, reschedule_type):
        """Sets the reschedule_type of this RescheduleMaintenanceRequest.

        Required. If reschedule type is SPECIFIC_TIME, must set up schedule_time as well.

        :param reschedule_type: The reschedule_type of this RescheduleMaintenanceRequest.
        :type reschedule_type: str
        """
        allowed_values = ["RESCHEDULE_TYPE_UNSPECIFIED", "IMMEDIATE", "NEXT_AVAILABLE_WINDOW", "SPECIFIC_TIME"]  # noqa: E501
        if reschedule_type not in allowed_values:
            raise ValueError(
                "Invalid value for `reschedule_type` ({0}), must be one of {1}"
                .format(reschedule_type, allowed_values)
            )

        self._reschedule_type = reschedule_type

    @property
    def schedule_time(self):
        """Gets the schedule_time of this RescheduleMaintenanceRequest.

        Optional. Timestamp when the maintenance shall be rescheduled to if reschedule_type=SPECIFIC_TIME, in RFC 3339 format, for example `2012-11-15T16:19:00.094Z`.

        :return: The schedule_time of this RescheduleMaintenanceRequest.
        :rtype: str
        """
        return self._schedule_time

    @schedule_time.setter
    def schedule_time(self, schedule_time):
        """Sets the schedule_time of this RescheduleMaintenanceRequest.

        Optional. Timestamp when the maintenance shall be rescheduled to if reschedule_type=SPECIFIC_TIME, in RFC 3339 format, for example `2012-11-15T16:19:00.094Z`.

        :param schedule_time: The schedule_time of this RescheduleMaintenanceRequest.
        :type schedule_time: str
        """

        self._schedule_time = schedule_time
