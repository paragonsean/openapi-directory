# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, labels: Dict[str, str]=None, location_id: str=None, metadata: Dict[str, object]=None, name: str=None):
        """Location - a model defined in OpenAPI

        :param display_name: The display_name of this Location.
        :param labels: The labels of this Location.
        :param location_id: The location_id of this Location.
        :param metadata: The metadata of this Location.
        :param name: The name of this Location.
        """
        self.openapi_types = {
            'display_name': str,
            'labels': Dict[str, str],
            'location_id': str,
            'metadata': Dict[str, object],
            'name': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'labels': 'labels',
            'location_id': 'locationId',
            'metadata': 'metadata',
            'name': 'name'
        }

        self._display_name = display_name
        self._labels = labels
        self._location_id = location_id
        self._metadata = metadata
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location of this Location.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this Location.

        The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".

        :return: The display_name of this Location.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Location.

        The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".

        :param display_name: The display_name of this Location.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def labels(self):
        """Gets the labels of this Location.

        Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}

        :return: The labels of this Location.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Location.

        Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}

        :param labels: The labels of this Location.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def location_id(self):
        """Gets the location_id of this Location.

        Resource ID for the region. For example: \"us-east1\".

        :return: The location_id of this Location.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Location.

        Resource ID for the region. For example: \"us-east1\".

        :param location_id: The location_id of this Location.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def metadata(self):
        """Gets the metadata of this Location.

        Output only. The set of available zones in the location. The map is keyed by the lowercase ID of each zone, as defined by Compute Engine. These keys can be specified in `location_id` or `alternative_location_id` fields when creating a Redis instance.

        :return: The metadata of this Location.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Location.

        Output only. The set of available zones in the location. The map is keyed by the lowercase ID of each zone, as defined by Compute Engine. These keys can be specified in `location_id` or `alternative_location_id` fields when creating a Redis instance.

        :param metadata: The metadata of this Location.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Location.

        Full resource name for the region. For example: \"projects/example-project/locations/us-east1\".

        :return: The name of this Location.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Location.

        Full resource name for the region. For example: \"projects/example-project/locations/us-east1\".

        :param name: The name of this Location.
        :type name: str
        """

        self._name = name
