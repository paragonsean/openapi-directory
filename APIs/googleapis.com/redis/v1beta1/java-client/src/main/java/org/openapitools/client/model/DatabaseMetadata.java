/*
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BackupConfiguration;
import org.openapitools.client.model.BackupRun;
import org.openapitools.client.model.DatabaseResourceId;
import org.openapitools.client.model.Product;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata for individual databases created in an instance. i.e. spanner instance can have multiple databases with unique configuration settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:22.996581-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabaseMetadata {
  public static final String SERIALIZED_NAME_BACKUP_CONFIGURATION = "backupConfiguration";
  @SerializedName(SERIALIZED_NAME_BACKUP_CONFIGURATION)
  private BackupConfiguration backupConfiguration;

  public static final String SERIALIZED_NAME_BACKUP_RUN = "backupRun";
  @SerializedName(SERIALIZED_NAME_BACKUP_RUN)
  private BackupRun backupRun;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private Product product;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private DatabaseResourceId resourceId;

  public static final String SERIALIZED_NAME_RESOURCE_NAME = "resourceName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAME)
  private String resourceName;

  public DatabaseMetadata() {
  }

  public DatabaseMetadata backupConfiguration(BackupConfiguration backupConfiguration) {
    this.backupConfiguration = backupConfiguration;
    return this;
  }

  /**
   * Get backupConfiguration
   * @return backupConfiguration
   */
  @javax.annotation.Nullable
  public BackupConfiguration getBackupConfiguration() {
    return backupConfiguration;
  }

  public void setBackupConfiguration(BackupConfiguration backupConfiguration) {
    this.backupConfiguration = backupConfiguration;
  }


  public DatabaseMetadata backupRun(BackupRun backupRun) {
    this.backupRun = backupRun;
    return this;
  }

  /**
   * Get backupRun
   * @return backupRun
   */
  @javax.annotation.Nullable
  public BackupRun getBackupRun() {
    return backupRun;
  }

  public void setBackupRun(BackupRun backupRun) {
    this.backupRun = backupRun;
  }


  public DatabaseMetadata product(Product product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nullable
  public Product getProduct() {
    return product;
  }

  public void setProduct(Product product) {
    this.product = product;
  }


  public DatabaseMetadata resourceId(DatabaseResourceId resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Get resourceId
   * @return resourceId
   */
  @javax.annotation.Nullable
  public DatabaseResourceId getResourceId() {
    return resourceId;
  }

  public void setResourceId(DatabaseResourceId resourceId) {
    this.resourceId = resourceId;
  }


  public DatabaseMetadata resourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  /**
   * Required. Database name. Resource name to follow CAIS resource_name format as noted here go/condor-common-datamodel
   * @return resourceName
   */
  @javax.annotation.Nullable
  public String getResourceName() {
    return resourceName;
  }

  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseMetadata databaseMetadata = (DatabaseMetadata) o;
    return Objects.equals(this.backupConfiguration, databaseMetadata.backupConfiguration) &&
        Objects.equals(this.backupRun, databaseMetadata.backupRun) &&
        Objects.equals(this.product, databaseMetadata.product) &&
        Objects.equals(this.resourceId, databaseMetadata.resourceId) &&
        Objects.equals(this.resourceName, databaseMetadata.resourceName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupConfiguration, backupRun, product, resourceId, resourceName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseMetadata {\n");
    sb.append("    backupConfiguration: ").append(toIndentedString(backupConfiguration)).append("\n");
    sb.append("    backupRun: ").append(toIndentedString(backupRun)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupConfiguration");
    openapiFields.add("backupRun");
    openapiFields.add("product");
    openapiFields.add("resourceId");
    openapiFields.add("resourceName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabaseMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseMetadata is not found in the empty JSON string", DatabaseMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backupConfiguration`
      if (jsonObj.get("backupConfiguration") != null && !jsonObj.get("backupConfiguration").isJsonNull()) {
        BackupConfiguration.validateJsonElement(jsonObj.get("backupConfiguration"));
      }
      // validate the optional field `backupRun`
      if (jsonObj.get("backupRun") != null && !jsonObj.get("backupRun").isJsonNull()) {
        BackupRun.validateJsonElement(jsonObj.get("backupRun"));
      }
      // validate the optional field `product`
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        Product.validateJsonElement(jsonObj.get("product"));
      }
      // validate the optional field `resourceId`
      if (jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) {
        DatabaseResourceId.validateJsonElement(jsonObj.get("resourceId"));
      }
      if ((jsonObj.get("resourceName") != null && !jsonObj.get("resourceName").isJsonNull()) && !jsonObj.get("resourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseMetadata>() {
           @Override
           public void write(JsonWriter out, DatabaseMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabaseMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabaseMetadata
   * @throws IOException if the JSON string is invalid with respect to DatabaseMetadata
   */
  public static DatabaseMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseMetadata.class);
  }

  /**
   * Convert an instance of DatabaseMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

