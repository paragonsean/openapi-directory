/*
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DiscoveryEndpoint;
import org.openapitools.client.model.PscConfig;
import org.openapitools.client.model.PscConnection;
import org.openapitools.client.model.StateInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A cluster instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:22.996581-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Cluster {
  /**
   * Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
   */
  @JsonAdapter(AuthorizationModeEnum.Adapter.class)
  public enum AuthorizationModeEnum {
    UNSPECIFIED("AUTH_MODE_UNSPECIFIED"),
    
    IAM_AUTH("AUTH_MODE_IAM_AUTH"),
    
    DISABLED("AUTH_MODE_DISABLED");

    private String value;

    AuthorizationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthorizationModeEnum fromValue(String value) {
      for (AuthorizationModeEnum b : AuthorizationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthorizationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthorizationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthorizationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthorizationModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthorizationModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHORIZATION_MODE = "authorizationMode";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_MODE)
  private AuthorizationModeEnum authorizationMode;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DISCOVERY_ENDPOINTS = "discoveryEndpoints";
  @SerializedName(SERIALIZED_NAME_DISCOVERY_ENDPOINTS)
  private List<DiscoveryEndpoint> discoveryEndpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PSC_CONFIGS = "pscConfigs";
  @SerializedName(SERIALIZED_NAME_PSC_CONFIGS)
  private List<PscConfig> pscConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_PSC_CONNECTIONS = "pscConnections";
  @SerializedName(SERIALIZED_NAME_PSC_CONNECTIONS)
  private List<PscConnection> pscConnections = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPLICA_COUNT = "replicaCount";
  @SerializedName(SERIALIZED_NAME_REPLICA_COUNT)
  private Integer replicaCount;

  public static final String SERIALIZED_NAME_SHARD_COUNT = "shardCount";
  @SerializedName(SERIALIZED_NAME_SHARD_COUNT)
  private Integer shardCount;

  public static final String SERIALIZED_NAME_SIZE_GB = "sizeGb";
  @SerializedName(SERIALIZED_NAME_SIZE_GB)
  private Integer sizeGb;

  /**
   * Output only. The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    ACTIVE("ACTIVE"),
    
    UPDATING("UPDATING"),
    
    DELETING("DELETING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATE_INFO = "stateInfo";
  @SerializedName(SERIALIZED_NAME_STATE_INFO)
  private StateInfo stateInfo;

  /**
   * Optional. The in-transit encryption for the Redis cluster. If not provided, encryption is disabled for the cluster.
   */
  @JsonAdapter(TransitEncryptionModeEnum.Adapter.class)
  public enum TransitEncryptionModeEnum {
    UNSPECIFIED("TRANSIT_ENCRYPTION_MODE_UNSPECIFIED"),
    
    DISABLED("TRANSIT_ENCRYPTION_MODE_DISABLED"),
    
    SERVER_AUTHENTICATION("TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION");

    private String value;

    TransitEncryptionModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransitEncryptionModeEnum fromValue(String value) {
      for (TransitEncryptionModeEnum b : TransitEncryptionModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransitEncryptionModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransitEncryptionModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransitEncryptionModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransitEncryptionModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransitEncryptionModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSIT_ENCRYPTION_MODE = "transitEncryptionMode";
  @SerializedName(SERIALIZED_NAME_TRANSIT_ENCRYPTION_MODE)
  private TransitEncryptionModeEnum transitEncryptionMode;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public Cluster() {
  }

  public Cluster(
     String createTime, 
     List<DiscoveryEndpoint> discoveryEndpoints, 
     List<PscConnection> pscConnections, 
     Integer sizeGb, 
     StateEnum state, 
     String uid
  ) {
    this();
    this.createTime = createTime;
    this.discoveryEndpoints = discoveryEndpoints;
    this.pscConnections = pscConnections;
    this.sizeGb = sizeGb;
    this.state = state;
    this.uid = uid;
  }

  public Cluster authorizationMode(AuthorizationModeEnum authorizationMode) {
    this.authorizationMode = authorizationMode;
    return this;
  }

  /**
   * Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
   * @return authorizationMode
   */
  @javax.annotation.Nullable
  public AuthorizationModeEnum getAuthorizationMode() {
    return authorizationMode;
  }

  public void setAuthorizationMode(AuthorizationModeEnum authorizationMode) {
    this.authorizationMode = authorizationMode;
  }


  /**
   * Output only. The timestamp associated with the cluster creation request.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. Endpoints created on each given network, for Redis clients to connect to the cluster. Currently only one discovery endpoint is supported.
   * @return discoveryEndpoints
   */
  @javax.annotation.Nullable
  public List<DiscoveryEndpoint> getDiscoveryEndpoints() {
    return discoveryEndpoints;
  }



  public Cluster name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Unique name of the resource in this scope including project and location using the form: &#x60;projects/{project_id}/locations/{location_id}/clusters/{cluster_id}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Cluster pscConfigs(List<PscConfig> pscConfigs) {
    this.pscConfigs = pscConfigs;
    return this;
  }

  public Cluster addPscConfigsItem(PscConfig pscConfigsItem) {
    if (this.pscConfigs == null) {
      this.pscConfigs = new ArrayList<>();
    }
    this.pscConfigs.add(pscConfigsItem);
    return this;
  }

  /**
   * Required. Each PscConfig configures the consumer network where IPs will be designated to the cluster for client access through Private Service Connect Automation. Currently, only one PscConfig is supported.
   * @return pscConfigs
   */
  @javax.annotation.Nullable
  public List<PscConfig> getPscConfigs() {
    return pscConfigs;
  }

  public void setPscConfigs(List<PscConfig> pscConfigs) {
    this.pscConfigs = pscConfigs;
  }


  /**
   * Output only. PSC connections for discovery of the cluster topology and accessing the cluster.
   * @return pscConnections
   */
  @javax.annotation.Nullable
  public List<PscConnection> getPscConnections() {
    return pscConnections;
  }



  public Cluster replicaCount(Integer replicaCount) {
    this.replicaCount = replicaCount;
    return this;
  }

  /**
   * Optional. The number of replica nodes per shard.
   * @return replicaCount
   */
  @javax.annotation.Nullable
  public Integer getReplicaCount() {
    return replicaCount;
  }

  public void setReplicaCount(Integer replicaCount) {
    this.replicaCount = replicaCount;
  }


  public Cluster shardCount(Integer shardCount) {
    this.shardCount = shardCount;
    return this;
  }

  /**
   * Required. Number of shards for the Redis cluster.
   * @return shardCount
   */
  @javax.annotation.Nullable
  public Integer getShardCount() {
    return shardCount;
  }

  public void setShardCount(Integer shardCount) {
    this.shardCount = shardCount;
  }


  /**
   * Output only. Redis memory size in GB for the entire cluster rounded up to the next integer.
   * @return sizeGb
   */
  @javax.annotation.Nullable
  public Integer getSizeGb() {
    return sizeGb;
  }



  /**
   * Output only. The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public Cluster stateInfo(StateInfo stateInfo) {
    this.stateInfo = stateInfo;
    return this;
  }

  /**
   * Get stateInfo
   * @return stateInfo
   */
  @javax.annotation.Nullable
  public StateInfo getStateInfo() {
    return stateInfo;
  }

  public void setStateInfo(StateInfo stateInfo) {
    this.stateInfo = stateInfo;
  }


  public Cluster transitEncryptionMode(TransitEncryptionModeEnum transitEncryptionMode) {
    this.transitEncryptionMode = transitEncryptionMode;
    return this;
  }

  /**
   * Optional. The in-transit encryption for the Redis cluster. If not provided, encryption is disabled for the cluster.
   * @return transitEncryptionMode
   */
  @javax.annotation.Nullable
  public TransitEncryptionModeEnum getTransitEncryptionMode() {
    return transitEncryptionMode;
  }

  public void setTransitEncryptionMode(TransitEncryptionModeEnum transitEncryptionMode) {
    this.transitEncryptionMode = transitEncryptionMode;
  }


  /**
   * Output only. System assigned, unique identifier for the cluster.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cluster cluster = (Cluster) o;
    return Objects.equals(this.authorizationMode, cluster.authorizationMode) &&
        Objects.equals(this.createTime, cluster.createTime) &&
        Objects.equals(this.discoveryEndpoints, cluster.discoveryEndpoints) &&
        Objects.equals(this.name, cluster.name) &&
        Objects.equals(this.pscConfigs, cluster.pscConfigs) &&
        Objects.equals(this.pscConnections, cluster.pscConnections) &&
        Objects.equals(this.replicaCount, cluster.replicaCount) &&
        Objects.equals(this.shardCount, cluster.shardCount) &&
        Objects.equals(this.sizeGb, cluster.sizeGb) &&
        Objects.equals(this.state, cluster.state) &&
        Objects.equals(this.stateInfo, cluster.stateInfo) &&
        Objects.equals(this.transitEncryptionMode, cluster.transitEncryptionMode) &&
        Objects.equals(this.uid, cluster.uid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationMode, createTime, discoveryEndpoints, name, pscConfigs, pscConnections, replicaCount, shardCount, sizeGb, state, stateInfo, transitEncryptionMode, uid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cluster {\n");
    sb.append("    authorizationMode: ").append(toIndentedString(authorizationMode)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    discoveryEndpoints: ").append(toIndentedString(discoveryEndpoints)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pscConfigs: ").append(toIndentedString(pscConfigs)).append("\n");
    sb.append("    pscConnections: ").append(toIndentedString(pscConnections)).append("\n");
    sb.append("    replicaCount: ").append(toIndentedString(replicaCount)).append("\n");
    sb.append("    shardCount: ").append(toIndentedString(shardCount)).append("\n");
    sb.append("    sizeGb: ").append(toIndentedString(sizeGb)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateInfo: ").append(toIndentedString(stateInfo)).append("\n");
    sb.append("    transitEncryptionMode: ").append(toIndentedString(transitEncryptionMode)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizationMode");
    openapiFields.add("createTime");
    openapiFields.add("discoveryEndpoints");
    openapiFields.add("name");
    openapiFields.add("pscConfigs");
    openapiFields.add("pscConnections");
    openapiFields.add("replicaCount");
    openapiFields.add("shardCount");
    openapiFields.add("sizeGb");
    openapiFields.add("state");
    openapiFields.add("stateInfo");
    openapiFields.add("transitEncryptionMode");
    openapiFields.add("uid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Cluster
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Cluster.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Cluster is not found in the empty JSON string", Cluster.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Cluster.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Cluster` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authorizationMode") != null && !jsonObj.get("authorizationMode").isJsonNull()) && !jsonObj.get("authorizationMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationMode").toString()));
      }
      // validate the optional field `authorizationMode`
      if (jsonObj.get("authorizationMode") != null && !jsonObj.get("authorizationMode").isJsonNull()) {
        AuthorizationModeEnum.validateJsonElement(jsonObj.get("authorizationMode"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if (jsonObj.get("discoveryEndpoints") != null && !jsonObj.get("discoveryEndpoints").isJsonNull()) {
        JsonArray jsonArraydiscoveryEndpoints = jsonObj.getAsJsonArray("discoveryEndpoints");
        if (jsonArraydiscoveryEndpoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("discoveryEndpoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `discoveryEndpoints` to be an array in the JSON string but got `%s`", jsonObj.get("discoveryEndpoints").toString()));
          }

          // validate the optional field `discoveryEndpoints` (array)
          for (int i = 0; i < jsonArraydiscoveryEndpoints.size(); i++) {
            DiscoveryEndpoint.validateJsonElement(jsonArraydiscoveryEndpoints.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("pscConfigs") != null && !jsonObj.get("pscConfigs").isJsonNull()) {
        JsonArray jsonArraypscConfigs = jsonObj.getAsJsonArray("pscConfigs");
        if (jsonArraypscConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pscConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pscConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("pscConfigs").toString()));
          }

          // validate the optional field `pscConfigs` (array)
          for (int i = 0; i < jsonArraypscConfigs.size(); i++) {
            PscConfig.validateJsonElement(jsonArraypscConfigs.get(i));
          };
        }
      }
      if (jsonObj.get("pscConnections") != null && !jsonObj.get("pscConnections").isJsonNull()) {
        JsonArray jsonArraypscConnections = jsonObj.getAsJsonArray("pscConnections");
        if (jsonArraypscConnections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pscConnections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pscConnections` to be an array in the JSON string but got `%s`", jsonObj.get("pscConnections").toString()));
          }

          // validate the optional field `pscConnections` (array)
          for (int i = 0; i < jsonArraypscConnections.size(); i++) {
            PscConnection.validateJsonElement(jsonArraypscConnections.get(i));
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `stateInfo`
      if (jsonObj.get("stateInfo") != null && !jsonObj.get("stateInfo").isJsonNull()) {
        StateInfo.validateJsonElement(jsonObj.get("stateInfo"));
      }
      if ((jsonObj.get("transitEncryptionMode") != null && !jsonObj.get("transitEncryptionMode").isJsonNull()) && !jsonObj.get("transitEncryptionMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transitEncryptionMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transitEncryptionMode").toString()));
      }
      // validate the optional field `transitEncryptionMode`
      if (jsonObj.get("transitEncryptionMode") != null && !jsonObj.get("transitEncryptionMode").isJsonNull()) {
        TransitEncryptionModeEnum.validateJsonElement(jsonObj.get("transitEncryptionMode"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Cluster.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Cluster' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Cluster> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Cluster.class));

       return (TypeAdapter<T>) new TypeAdapter<Cluster>() {
           @Override
           public void write(JsonWriter out, Cluster value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Cluster read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Cluster given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Cluster
   * @throws IOException if the JSON string is invalid with respect to Cluster
   */
  public static Cluster fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Cluster.class);
  }

  /**
   * Convert an instance of Cluster to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

