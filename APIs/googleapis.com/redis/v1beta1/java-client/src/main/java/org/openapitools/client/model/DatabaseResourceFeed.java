/*
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DatabaseResourceHealthSignalData;
import org.openapitools.client.model.DatabaseResourceId;
import org.openapitools.client.model.DatabaseResourceMetadata;
import org.openapitools.client.model.DatabaseResourceRecommendationSignalData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DatabaseResourceFeed is the top level proto to be used to ingest different database resource level events into Condor platform.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:22.996581-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabaseResourceFeed {
  public static final String SERIALIZED_NAME_FEED_TIMESTAMP = "feedTimestamp";
  @SerializedName(SERIALIZED_NAME_FEED_TIMESTAMP)
  private String feedTimestamp;

  /**
   * Required. Type feed to be ingested into condor
   */
  @JsonAdapter(FeedTypeEnum.Adapter.class)
  public enum FeedTypeEnum {
    FEEDTYPE_UNSPECIFIED("FEEDTYPE_UNSPECIFIED"),
    
    RESOURCE_METADATA("RESOURCE_METADATA"),
    
    OBSERVABILITY_DATA("OBSERVABILITY_DATA"),
    
    SECURITY_FINDING_DATA("SECURITY_FINDING_DATA"),
    
    RECOMMENDATION_SIGNAL_DATA("RECOMMENDATION_SIGNAL_DATA");

    private String value;

    FeedTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeedTypeEnum fromValue(String value) {
      for (FeedTypeEnum b : FeedTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeedTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeedTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeedTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeedTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FeedTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FEED_TYPE = "feedType";
  @SerializedName(SERIALIZED_NAME_FEED_TYPE)
  private FeedTypeEnum feedType;

  public static final String SERIALIZED_NAME_RECOMMENDATION_SIGNAL_DATA = "recommendationSignalData";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_SIGNAL_DATA)
  private DatabaseResourceRecommendationSignalData recommendationSignalData;

  public static final String SERIALIZED_NAME_RESOURCE_HEALTH_SIGNAL_DATA = "resourceHealthSignalData";
  @SerializedName(SERIALIZED_NAME_RESOURCE_HEALTH_SIGNAL_DATA)
  private DatabaseResourceHealthSignalData resourceHealthSignalData;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private DatabaseResourceId resourceId;

  public static final String SERIALIZED_NAME_RESOURCE_METADATA = "resourceMetadata";
  @SerializedName(SERIALIZED_NAME_RESOURCE_METADATA)
  private DatabaseResourceMetadata resourceMetadata;

  public DatabaseResourceFeed() {
  }

  public DatabaseResourceFeed feedTimestamp(String feedTimestamp) {
    this.feedTimestamp = feedTimestamp;
    return this;
  }

  /**
   * Required. Timestamp when feed is generated.
   * @return feedTimestamp
   */
  @javax.annotation.Nullable
  public String getFeedTimestamp() {
    return feedTimestamp;
  }

  public void setFeedTimestamp(String feedTimestamp) {
    this.feedTimestamp = feedTimestamp;
  }


  public DatabaseResourceFeed feedType(FeedTypeEnum feedType) {
    this.feedType = feedType;
    return this;
  }

  /**
   * Required. Type feed to be ingested into condor
   * @return feedType
   */
  @javax.annotation.Nullable
  public FeedTypeEnum getFeedType() {
    return feedType;
  }

  public void setFeedType(FeedTypeEnum feedType) {
    this.feedType = feedType;
  }


  public DatabaseResourceFeed recommendationSignalData(DatabaseResourceRecommendationSignalData recommendationSignalData) {
    this.recommendationSignalData = recommendationSignalData;
    return this;
  }

  /**
   * Get recommendationSignalData
   * @return recommendationSignalData
   */
  @javax.annotation.Nullable
  public DatabaseResourceRecommendationSignalData getRecommendationSignalData() {
    return recommendationSignalData;
  }

  public void setRecommendationSignalData(DatabaseResourceRecommendationSignalData recommendationSignalData) {
    this.recommendationSignalData = recommendationSignalData;
  }


  public DatabaseResourceFeed resourceHealthSignalData(DatabaseResourceHealthSignalData resourceHealthSignalData) {
    this.resourceHealthSignalData = resourceHealthSignalData;
    return this;
  }

  /**
   * Get resourceHealthSignalData
   * @return resourceHealthSignalData
   */
  @javax.annotation.Nullable
  public DatabaseResourceHealthSignalData getResourceHealthSignalData() {
    return resourceHealthSignalData;
  }

  public void setResourceHealthSignalData(DatabaseResourceHealthSignalData resourceHealthSignalData) {
    this.resourceHealthSignalData = resourceHealthSignalData;
  }


  public DatabaseResourceFeed resourceId(DatabaseResourceId resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Get resourceId
   * @return resourceId
   */
  @javax.annotation.Nullable
  public DatabaseResourceId getResourceId() {
    return resourceId;
  }

  public void setResourceId(DatabaseResourceId resourceId) {
    this.resourceId = resourceId;
  }


  public DatabaseResourceFeed resourceMetadata(DatabaseResourceMetadata resourceMetadata) {
    this.resourceMetadata = resourceMetadata;
    return this;
  }

  /**
   * Get resourceMetadata
   * @return resourceMetadata
   */
  @javax.annotation.Nullable
  public DatabaseResourceMetadata getResourceMetadata() {
    return resourceMetadata;
  }

  public void setResourceMetadata(DatabaseResourceMetadata resourceMetadata) {
    this.resourceMetadata = resourceMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseResourceFeed databaseResourceFeed = (DatabaseResourceFeed) o;
    return Objects.equals(this.feedTimestamp, databaseResourceFeed.feedTimestamp) &&
        Objects.equals(this.feedType, databaseResourceFeed.feedType) &&
        Objects.equals(this.recommendationSignalData, databaseResourceFeed.recommendationSignalData) &&
        Objects.equals(this.resourceHealthSignalData, databaseResourceFeed.resourceHealthSignalData) &&
        Objects.equals(this.resourceId, databaseResourceFeed.resourceId) &&
        Objects.equals(this.resourceMetadata, databaseResourceFeed.resourceMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(feedTimestamp, feedType, recommendationSignalData, resourceHealthSignalData, resourceId, resourceMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseResourceFeed {\n");
    sb.append("    feedTimestamp: ").append(toIndentedString(feedTimestamp)).append("\n");
    sb.append("    feedType: ").append(toIndentedString(feedType)).append("\n");
    sb.append("    recommendationSignalData: ").append(toIndentedString(recommendationSignalData)).append("\n");
    sb.append("    resourceHealthSignalData: ").append(toIndentedString(resourceHealthSignalData)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    resourceMetadata: ").append(toIndentedString(resourceMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("feedTimestamp");
    openapiFields.add("feedType");
    openapiFields.add("recommendationSignalData");
    openapiFields.add("resourceHealthSignalData");
    openapiFields.add("resourceId");
    openapiFields.add("resourceMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabaseResourceFeed
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseResourceFeed.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseResourceFeed is not found in the empty JSON string", DatabaseResourceFeed.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseResourceFeed.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseResourceFeed` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("feedTimestamp") != null && !jsonObj.get("feedTimestamp").isJsonNull()) && !jsonObj.get("feedTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feedTimestamp").toString()));
      }
      if ((jsonObj.get("feedType") != null && !jsonObj.get("feedType").isJsonNull()) && !jsonObj.get("feedType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feedType").toString()));
      }
      // validate the optional field `feedType`
      if (jsonObj.get("feedType") != null && !jsonObj.get("feedType").isJsonNull()) {
        FeedTypeEnum.validateJsonElement(jsonObj.get("feedType"));
      }
      // validate the optional field `recommendationSignalData`
      if (jsonObj.get("recommendationSignalData") != null && !jsonObj.get("recommendationSignalData").isJsonNull()) {
        DatabaseResourceRecommendationSignalData.validateJsonElement(jsonObj.get("recommendationSignalData"));
      }
      // validate the optional field `resourceHealthSignalData`
      if (jsonObj.get("resourceHealthSignalData") != null && !jsonObj.get("resourceHealthSignalData").isJsonNull()) {
        DatabaseResourceHealthSignalData.validateJsonElement(jsonObj.get("resourceHealthSignalData"));
      }
      // validate the optional field `resourceId`
      if (jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) {
        DatabaseResourceId.validateJsonElement(jsonObj.get("resourceId"));
      }
      // validate the optional field `resourceMetadata`
      if (jsonObj.get("resourceMetadata") != null && !jsonObj.get("resourceMetadata").isJsonNull()) {
        DatabaseResourceMetadata.validateJsonElement(jsonObj.get("resourceMetadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseResourceFeed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseResourceFeed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseResourceFeed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseResourceFeed.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseResourceFeed>() {
           @Override
           public void write(JsonWriter out, DatabaseResourceFeed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseResourceFeed read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabaseResourceFeed given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabaseResourceFeed
   * @throws IOException if the JSON string is invalid with respect to DatabaseResourceFeed
   */
  public static DatabaseResourceFeed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseResourceFeed.class);
  }

  /**
   * Convert an instance of DatabaseResourceFeed to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

