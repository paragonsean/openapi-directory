/*
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Compliance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Common model for database resource health signal data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:22.996581-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabaseResourceHealthSignalData {
  public static final String SERIALIZED_NAME_ADDITIONAL_METADATA = "additionalMetadata";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_METADATA)
  private Map<String, Object> additionalMetadata = new HashMap<>();

  public static final String SERIALIZED_NAME_COMPLIANCE = "compliance";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE)
  private List<Compliance> compliance = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EVENT_TIME = "eventTime";
  @SerializedName(SERIALIZED_NAME_EVENT_TIME)
  private String eventTime;

  public static final String SERIALIZED_NAME_EXTERNAL_URI = "externalUri";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_URI)
  private String externalUri;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Cloud provider name. Ex: GCP/AWS/Azure/OnPrem/SelfManaged
   */
  @JsonAdapter(ProviderEnum.Adapter.class)
  public enum ProviderEnum {
    PROVIDER_UNSPECIFIED("PROVIDER_UNSPECIFIED"),
    
    GCP("GCP"),
    
    AWS("AWS"),
    
    AZURE("AZURE"),
    
    ONPREM("ONPREM"),
    
    SELFMANAGED("SELFMANAGED"),
    
    PROVIDER_OTHER("PROVIDER_OTHER");

    private String value;

    ProviderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProviderEnum fromValue(String value) {
      for (ProviderEnum b : ProviderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProviderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProviderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProviderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProviderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProviderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private ProviderEnum provider;

  public static final String SERIALIZED_NAME_RESOURCE_CONTAINER = "resourceContainer";
  @SerializedName(SERIALIZED_NAME_RESOURCE_CONTAINER)
  private String resourceContainer;

  public static final String SERIALIZED_NAME_RESOURCE_NAME = "resourceName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAME)
  private String resourceName;

  /**
   * Required. The class of the signal, such as if it&#39;s a THREAT or VULNERABILITY.
   */
  @JsonAdapter(SignalClassEnum.Adapter.class)
  public enum SignalClassEnum {
    CLASS_UNSPECIFIED("CLASS_UNSPECIFIED"),
    
    THREAT("THREAT"),
    
    VULNERABILITY("VULNERABILITY"),
    
    MISCONFIGURATION("MISCONFIGURATION"),
    
    OBSERVATION("OBSERVATION"),
    
    ERROR("ERROR");

    private String value;

    SignalClassEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignalClassEnum fromValue(String value) {
      for (SignalClassEnum b : SignalClassEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignalClassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignalClassEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignalClassEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignalClassEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignalClassEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNAL_CLASS = "signalClass";
  @SerializedName(SERIALIZED_NAME_SIGNAL_CLASS)
  private SignalClassEnum signalClass;

  public static final String SERIALIZED_NAME_SIGNAL_ID = "signalId";
  @SerializedName(SERIALIZED_NAME_SIGNAL_ID)
  private String signalId;

  /**
   * Required. Type of signal, for example, &#x60;AVAILABLE_IN_MULTIPLE_ZONES&#x60;, &#x60;LOGGING_MOST_ERRORS&#x60;, etc.
   */
  @JsonAdapter(SignalTypeEnum.Adapter.class)
  public enum SignalTypeEnum {
    UNSPECIFIED("SIGNAL_TYPE_UNSPECIFIED"),
    
    NOT_PROTECTED_BY_AUTOMATIC_FAILOVER("SIGNAL_TYPE_NOT_PROTECTED_BY_AUTOMATIC_FAILOVER"),
    
    GROUP_NOT_REPLICATING_ACROSS_REGIONS("SIGNAL_TYPE_GROUP_NOT_REPLICATING_ACROSS_REGIONS"),
    
    NOT_AVAILABLE_IN_MULTIPLE_ZONES("SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_ZONES"),
    
    NOT_AVAILABLE_IN_MULTIPLE_REGIONS("SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_REGIONS"),
    
    NO_PROMOTABLE_REPLICA("SIGNAL_TYPE_NO_PROMOTABLE_REPLICA"),
    
    NO_AUTOMATED_BACKUP_POLICY("SIGNAL_TYPE_NO_AUTOMATED_BACKUP_POLICY"),
    
    SHORT_BACKUP_RETENTION("SIGNAL_TYPE_SHORT_BACKUP_RETENTION"),
    
    LAST_BACKUP_FAILED("SIGNAL_TYPE_LAST_BACKUP_FAILED"),
    
    LAST_BACKUP_OLD("SIGNAL_TYPE_LAST_BACKUP_OLD"),
    
    VIOLATES_CIS_GCP_FOUNDATION_2_0("SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_2_0"),
    
    VIOLATES_CIS_GCP_FOUNDATION_1_3("SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_3"),
    
    VIOLATES_CIS_GCP_FOUNDATION_1_2("SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_2"),
    
    VIOLATES_CIS_GCP_FOUNDATION_1_1("SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_1"),
    
    VIOLATES_CIS_GCP_FOUNDATION_1_0("SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_0"),
    
    VIOLATES_NIST_800_53("SIGNAL_TYPE_VIOLATES_NIST_800_53"),
    
    VIOLATES_ISO_27001("SIGNAL_TYPE_VIOLATES_ISO_27001"),
    
    VIOLATES_PCI_DSS_V3_2_1("SIGNAL_TYPE_VIOLATES_PCI_DSS_V3_2_1"),
    
    LOGS_NOT_OPTIMIZED_FOR_TROUBLESHOOTING("SIGNAL_TYPE_LOGS_NOT_OPTIMIZED_FOR_TROUBLESHOOTING"),
    
    QUERY_DURATIONS_NOT_LOGGED("SIGNAL_TYPE_QUERY_DURATIONS_NOT_LOGGED"),
    
    VERBOSE_ERROR_LOGGING("SIGNAL_TYPE_VERBOSE_ERROR_LOGGING"),
    
    QUERY_LOCK_WAITS_NOT_LOGGED("SIGNAL_TYPE_QUERY_LOCK_WAITS_NOT_LOGGED"),
    
    LOGGING_MOST_ERRORS("SIGNAL_TYPE_LOGGING_MOST_ERRORS"),
    
    LOGGING_ONLY_CRITICAL_ERRORS("SIGNAL_TYPE_LOGGING_ONLY_CRITICAL_ERRORS"),
    
    MINIMAL_ERROR_LOGGING("SIGNAL_TYPE_MINIMAL_ERROR_LOGGING"),
    
    QUERY_STATISTICS_LOGGED("SIGNAL_TYPE_QUERY_STATISTICS_LOGGED"),
    
    EXCESSIVE_LOGGING_OF_CLIENT_HOSTNAME("SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_CLIENT_HOSTNAME"),
    
    EXCESSIVE_LOGGING_OF_PARSER_STATISTICS("SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PARSER_STATISTICS"),
    
    EXCESSIVE_LOGGING_OF_PLANNER_STATISTICS("SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PLANNER_STATISTICS"),
    
    NOT_LOGGING_ONLY_DDL_STATEMENTS("SIGNAL_TYPE_NOT_LOGGING_ONLY_DDL_STATEMENTS"),
    
    LOGGING_QUERY_STATISTICS("SIGNAL_TYPE_LOGGING_QUERY_STATISTICS"),
    
    NOT_LOGGING_TEMPORARY_FILES("SIGNAL_TYPE_NOT_LOGGING_TEMPORARY_FILES"),
    
    CONNECTION_MAX_NOT_CONFIGURED("SIGNAL_TYPE_CONNECTION_MAX_NOT_CONFIGURED"),
    
    USER_OPTIONS_CONFIGURED("SIGNAL_TYPE_USER_OPTIONS_CONFIGURED"),
    
    EXPOSED_TO_PUBLIC_ACCESS("SIGNAL_TYPE_EXPOSED_TO_PUBLIC_ACCESS"),
    
    UNENCRYPTED_CONNECTIONS("SIGNAL_TYPE_UNENCRYPTED_CONNECTIONS"),
    
    NO_ROOT_PASSWORD("SIGNAL_TYPE_NO_ROOT_PASSWORD"),
    
    WEAK_ROOT_PASSWORD("SIGNAL_TYPE_WEAK_ROOT_PASSWORD"),
    
    ENCRYPTION_KEY_NOT_CUSTOMER_MANAGED("SIGNAL_TYPE_ENCRYPTION_KEY_NOT_CUSTOMER_MANAGED"),
    
    SERVER_AUTHENTICATION_NOT_REQUIRED("SIGNAL_TYPE_SERVER_AUTHENTICATION_NOT_REQUIRED"),
    
    EXPOSED_BY_OWNERSHIP_CHAINING("SIGNAL_TYPE_EXPOSED_BY_OWNERSHIP_CHAINING"),
    
    EXPOSED_TO_EXTERNAL_SCRIPTS("SIGNAL_TYPE_EXPOSED_TO_EXTERNAL_SCRIPTS"),
    
    EXPOSED_TO_LOCAL_DATA_LOADS("SIGNAL_TYPE_EXPOSED_TO_LOCAL_DATA_LOADS"),
    
    CONNECTION_ATTEMPTS_NOT_LOGGED("SIGNAL_TYPE_CONNECTION_ATTEMPTS_NOT_LOGGED"),
    
    DISCONNECTIONS_NOT_LOGGED("SIGNAL_TYPE_DISCONNECTIONS_NOT_LOGGED"),
    
    LOGGING_EXCESSIVE_STATEMENT_INFO("SIGNAL_TYPE_LOGGING_EXCESSIVE_STATEMENT_INFO"),
    
    EXPOSED_TO_REMOTE_ACCESS("SIGNAL_TYPE_EXPOSED_TO_REMOTE_ACCESS"),
    
    DATABASE_NAMES_EXPOSED("SIGNAL_TYPE_DATABASE_NAMES_EXPOSED"),
    
    SENSITIVE_TRACE_INFO_NOT_MASKED("SIGNAL_TYPE_SENSITIVE_TRACE_INFO_NOT_MASKED"),
    
    PUBLIC_IP_ENABLED("SIGNAL_TYPE_PUBLIC_IP_ENABLED"),
    
    IDLE("SIGNAL_TYPE_IDLE"),
    
    OVERPROVISIONED("SIGNAL_TYPE_OVERPROVISIONED"),
    
    HIGH_NUMBER_OF_OPEN_TABLES("SIGNAL_TYPE_HIGH_NUMBER_OF_OPEN_TABLES"),
    
    HIGH_NUMBER_OF_TABLES("SIGNAL_TYPE_HIGH_NUMBER_OF_TABLES"),
    
    HIGH_TRANSACTION_ID_UTILIZATION("SIGNAL_TYPE_HIGH_TRANSACTION_ID_UTILIZATION"),
    
    UNDERPROVISIONED("SIGNAL_TYPE_UNDERPROVISIONED"),
    
    OUT_OF_DISK("SIGNAL_TYPE_OUT_OF_DISK"),
    
    SERVER_CERTIFICATE_NEAR_EXPIRY("SIGNAL_TYPE_SERVER_CERTIFICATE_NEAR_EXPIRY"),
    
    DATABASE_AUDITING_DISABLED("SIGNAL_TYPE_DATABASE_AUDITING_DISABLED"),
    
    RESTRICT_AUTHORIZED_NETWORKS("SIGNAL_TYPE_RESTRICT_AUTHORIZED_NETWORKS"),
    
    VIOLATE_POLICY_RESTRICT_PUBLIC_IP("SIGNAL_TYPE_VIOLATE_POLICY_RESTRICT_PUBLIC_IP");

    private String value;

    SignalTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignalTypeEnum fromValue(String value) {
      for (SignalTypeEnum b : SignalTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignalTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignalTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignalTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignalTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignalTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNAL_TYPE = "signalType";
  @SerializedName(SERIALIZED_NAME_SIGNAL_TYPE)
  private SignalTypeEnum signalType;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    RESOLVED("RESOLVED"),
    
    MUTED("MUTED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public DatabaseResourceHealthSignalData() {
  }

  public DatabaseResourceHealthSignalData additionalMetadata(Map<String, Object> additionalMetadata) {
    this.additionalMetadata = additionalMetadata;
    return this;
  }

  public DatabaseResourceHealthSignalData putAdditionalMetadataItem(String key, Object additionalMetadataItem) {
    if (this.additionalMetadata == null) {
      this.additionalMetadata = new HashMap<>();
    }
    this.additionalMetadata.put(key, additionalMetadataItem);
    return this;
  }

  /**
   * Any other additional metadata
   * @return additionalMetadata
   */
  @javax.annotation.Nullable
  public Map<String, Object> getAdditionalMetadata() {
    return additionalMetadata;
  }

  public void setAdditionalMetadata(Map<String, Object> additionalMetadata) {
    this.additionalMetadata = additionalMetadata;
  }


  public DatabaseResourceHealthSignalData compliance(List<Compliance> compliance) {
    this.compliance = compliance;
    return this;
  }

  public DatabaseResourceHealthSignalData addComplianceItem(Compliance complianceItem) {
    if (this.compliance == null) {
      this.compliance = new ArrayList<>();
    }
    this.compliance.add(complianceItem);
    return this;
  }

  /**
   * Industry standards associated with this signal; if this signal is an issue, that could be a violation of the associated industry standard(s). For example, AUTO_BACKUP_DISABLED signal is associated with CIS GCP 1.1, CIS GCP 1.2, CIS GCP 1.3, NIST 800-53 and ISO-27001 compliance standards. If a database resource does not have automated backup enable, it will violate these following industry standards.
   * @return compliance
   */
  @javax.annotation.Nullable
  public List<Compliance> getCompliance() {
    return compliance;
  }

  public void setCompliance(List<Compliance> compliance) {
    this.compliance = compliance;
  }


  public DatabaseResourceHealthSignalData description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description associated with signal
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DatabaseResourceHealthSignalData eventTime(String eventTime) {
    this.eventTime = eventTime;
    return this;
  }

  /**
   * Required. The last time at which the event described by this signal took place
   * @return eventTime
   */
  @javax.annotation.Nullable
  public String getEventTime() {
    return eventTime;
  }

  public void setEventTime(String eventTime) {
    this.eventTime = eventTime;
  }


  public DatabaseResourceHealthSignalData externalUri(String externalUri) {
    this.externalUri = externalUri;
    return this;
  }

  /**
   * The external-uri of the signal, using which more information about this signal can be obtained. In GCP, this will take user to SCC page to get more details about signals.
   * @return externalUri
   */
  @javax.annotation.Nullable
  public String getExternalUri() {
    return externalUri;
  }

  public void setExternalUri(String externalUri) {
    this.externalUri = externalUri;
  }


  public DatabaseResourceHealthSignalData name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The name of the signal, ex: PUBLIC_SQL_INSTANCE, SQL_LOG_ERROR_VERBOSITY etc.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DatabaseResourceHealthSignalData provider(ProviderEnum provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Cloud provider name. Ex: GCP/AWS/Azure/OnPrem/SelfManaged
   * @return provider
   */
  @javax.annotation.Nullable
  public ProviderEnum getProvider() {
    return provider;
  }

  public void setProvider(ProviderEnum provider) {
    this.provider = provider;
  }


  public DatabaseResourceHealthSignalData resourceContainer(String resourceContainer) {
    this.resourceContainer = resourceContainer;
    return this;
  }

  /**
   * Closest parent container of this resource. In GCP, &#39;container&#39; refers to a Cloud Resource Manager project. It must be resource name of a Cloud Resource Manager project with the format of \&quot;provider//\&quot;, such as \&quot;projects/123\&quot;. For GCP provided resources, number should be project number.
   * @return resourceContainer
   */
  @javax.annotation.Nullable
  public String getResourceContainer() {
    return resourceContainer;
  }

  public void setResourceContainer(String resourceContainer) {
    this.resourceContainer = resourceContainer;
  }


  public DatabaseResourceHealthSignalData resourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  /**
   * Required. Database resource name associated with the signal. Resource name to follow CAIS resource_name format as noted here go/condor-common-datamodel
   * @return resourceName
   */
  @javax.annotation.Nullable
  public String getResourceName() {
    return resourceName;
  }

  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }


  public DatabaseResourceHealthSignalData signalClass(SignalClassEnum signalClass) {
    this.signalClass = signalClass;
    return this;
  }

  /**
   * Required. The class of the signal, such as if it&#39;s a THREAT or VULNERABILITY.
   * @return signalClass
   */
  @javax.annotation.Nullable
  public SignalClassEnum getSignalClass() {
    return signalClass;
  }

  public void setSignalClass(SignalClassEnum signalClass) {
    this.signalClass = signalClass;
  }


  public DatabaseResourceHealthSignalData signalId(String signalId) {
    this.signalId = signalId;
    return this;
  }

  /**
   * Required. Unique identifier for the signal. This is an unique id which would be mainatined by partner to identify a signal.
   * @return signalId
   */
  @javax.annotation.Nullable
  public String getSignalId() {
    return signalId;
  }

  public void setSignalId(String signalId) {
    this.signalId = signalId;
  }


  public DatabaseResourceHealthSignalData signalType(SignalTypeEnum signalType) {
    this.signalType = signalType;
    return this;
  }

  /**
   * Required. Type of signal, for example, &#x60;AVAILABLE_IN_MULTIPLE_ZONES&#x60;, &#x60;LOGGING_MOST_ERRORS&#x60;, etc.
   * @return signalType
   */
  @javax.annotation.Nullable
  public SignalTypeEnum getSignalType() {
    return signalType;
  }

  public void setSignalType(SignalTypeEnum signalType) {
    this.signalType = signalType;
  }


  public DatabaseResourceHealthSignalData state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseResourceHealthSignalData databaseResourceHealthSignalData = (DatabaseResourceHealthSignalData) o;
    return Objects.equals(this.additionalMetadata, databaseResourceHealthSignalData.additionalMetadata) &&
        Objects.equals(this.compliance, databaseResourceHealthSignalData.compliance) &&
        Objects.equals(this.description, databaseResourceHealthSignalData.description) &&
        Objects.equals(this.eventTime, databaseResourceHealthSignalData.eventTime) &&
        Objects.equals(this.externalUri, databaseResourceHealthSignalData.externalUri) &&
        Objects.equals(this.name, databaseResourceHealthSignalData.name) &&
        Objects.equals(this.provider, databaseResourceHealthSignalData.provider) &&
        Objects.equals(this.resourceContainer, databaseResourceHealthSignalData.resourceContainer) &&
        Objects.equals(this.resourceName, databaseResourceHealthSignalData.resourceName) &&
        Objects.equals(this.signalClass, databaseResourceHealthSignalData.signalClass) &&
        Objects.equals(this.signalId, databaseResourceHealthSignalData.signalId) &&
        Objects.equals(this.signalType, databaseResourceHealthSignalData.signalType) &&
        Objects.equals(this.state, databaseResourceHealthSignalData.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalMetadata, compliance, description, eventTime, externalUri, name, provider, resourceContainer, resourceName, signalClass, signalId, signalType, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseResourceHealthSignalData {\n");
    sb.append("    additionalMetadata: ").append(toIndentedString(additionalMetadata)).append("\n");
    sb.append("    compliance: ").append(toIndentedString(compliance)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventTime: ").append(toIndentedString(eventTime)).append("\n");
    sb.append("    externalUri: ").append(toIndentedString(externalUri)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    resourceContainer: ").append(toIndentedString(resourceContainer)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("    signalClass: ").append(toIndentedString(signalClass)).append("\n");
    sb.append("    signalId: ").append(toIndentedString(signalId)).append("\n");
    sb.append("    signalType: ").append(toIndentedString(signalType)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalMetadata");
    openapiFields.add("compliance");
    openapiFields.add("description");
    openapiFields.add("eventTime");
    openapiFields.add("externalUri");
    openapiFields.add("name");
    openapiFields.add("provider");
    openapiFields.add("resourceContainer");
    openapiFields.add("resourceName");
    openapiFields.add("signalClass");
    openapiFields.add("signalId");
    openapiFields.add("signalType");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabaseResourceHealthSignalData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseResourceHealthSignalData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseResourceHealthSignalData is not found in the empty JSON string", DatabaseResourceHealthSignalData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseResourceHealthSignalData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseResourceHealthSignalData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("compliance") != null && !jsonObj.get("compliance").isJsonNull()) {
        JsonArray jsonArraycompliance = jsonObj.getAsJsonArray("compliance");
        if (jsonArraycompliance != null) {
          // ensure the json data is an array
          if (!jsonObj.get("compliance").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `compliance` to be an array in the JSON string but got `%s`", jsonObj.get("compliance").toString()));
          }

          // validate the optional field `compliance` (array)
          for (int i = 0; i < jsonArraycompliance.size(); i++) {
            Compliance.validateJsonElement(jsonArraycompliance.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("eventTime") != null && !jsonObj.get("eventTime").isJsonNull()) && !jsonObj.get("eventTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventTime").toString()));
      }
      if ((jsonObj.get("externalUri") != null && !jsonObj.get("externalUri").isJsonNull()) && !jsonObj.get("externalUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalUri").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      // validate the optional field `provider`
      if (jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) {
        ProviderEnum.validateJsonElement(jsonObj.get("provider"));
      }
      if ((jsonObj.get("resourceContainer") != null && !jsonObj.get("resourceContainer").isJsonNull()) && !jsonObj.get("resourceContainer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceContainer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceContainer").toString()));
      }
      if ((jsonObj.get("resourceName") != null && !jsonObj.get("resourceName").isJsonNull()) && !jsonObj.get("resourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceName").toString()));
      }
      if ((jsonObj.get("signalClass") != null && !jsonObj.get("signalClass").isJsonNull()) && !jsonObj.get("signalClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signalClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signalClass").toString()));
      }
      // validate the optional field `signalClass`
      if (jsonObj.get("signalClass") != null && !jsonObj.get("signalClass").isJsonNull()) {
        SignalClassEnum.validateJsonElement(jsonObj.get("signalClass"));
      }
      if ((jsonObj.get("signalId") != null && !jsonObj.get("signalId").isJsonNull()) && !jsonObj.get("signalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signalId").toString()));
      }
      if ((jsonObj.get("signalType") != null && !jsonObj.get("signalType").isJsonNull()) && !jsonObj.get("signalType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signalType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signalType").toString()));
      }
      // validate the optional field `signalType`
      if (jsonObj.get("signalType") != null && !jsonObj.get("signalType").isJsonNull()) {
        SignalTypeEnum.validateJsonElement(jsonObj.get("signalType"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseResourceHealthSignalData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseResourceHealthSignalData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseResourceHealthSignalData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseResourceHealthSignalData.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseResourceHealthSignalData>() {
           @Override
           public void write(JsonWriter out, DatabaseResourceHealthSignalData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseResourceHealthSignalData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabaseResourceHealthSignalData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabaseResourceHealthSignalData
   * @throws IOException if the JSON string is invalid with respect to DatabaseResourceHealthSignalData
   */
  public static DatabaseResourceHealthSignalData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseResourceHealthSignalData.class);
  }

  /**
   * Convert an instance of DatabaseResourceHealthSignalData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

