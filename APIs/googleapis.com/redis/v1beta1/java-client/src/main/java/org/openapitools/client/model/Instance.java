/*
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.MaintenancePolicy;
import org.openapitools.client.model.MaintenanceSchedule;
import org.openapitools.client.model.NodeInfo;
import org.openapitools.client.model.PersistenceConfig;
import org.openapitools.client.model.TlsCertificate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Memorystore for Redis instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:22.996581-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Instance {
  public static final String SERIALIZED_NAME_ALTERNATIVE_LOCATION_ID = "alternativeLocationId";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_LOCATION_ID)
  private String alternativeLocationId;

  public static final String SERIALIZED_NAME_AUTH_ENABLED = "authEnabled";
  @SerializedName(SERIALIZED_NAME_AUTH_ENABLED)
  private Boolean authEnabled;

  public static final String SERIALIZED_NAME_AUTHORIZED_NETWORK = "authorizedNetwork";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_NETWORK)
  private String authorizedNetwork;

  public static final String SERIALIZED_NAME_AVAILABLE_MAINTENANCE_VERSIONS = "availableMaintenanceVersions";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_MAINTENANCE_VERSIONS)
  private List<String> availableMaintenanceVersions = new ArrayList<>();

  /**
   * Optional. The network connect mode of the Redis instance. If not provided, the connect mode defaults to DIRECT_PEERING.
   */
  @JsonAdapter(ConnectModeEnum.Adapter.class)
  public enum ConnectModeEnum {
    CONNECT_MODE_UNSPECIFIED("CONNECT_MODE_UNSPECIFIED"),
    
    DIRECT_PEERING("DIRECT_PEERING"),
    
    PRIVATE_SERVICE_ACCESS("PRIVATE_SERVICE_ACCESS");

    private String value;

    ConnectModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectModeEnum fromValue(String value) {
      for (ConnectModeEnum b : ConnectModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECT_MODE = "connectMode";
  @SerializedName(SERIALIZED_NAME_CONNECT_MODE)
  private ConnectModeEnum connectMode;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CURRENT_LOCATION_ID = "currentLocationId";
  @SerializedName(SERIALIZED_NAME_CURRENT_LOCATION_ID)
  private String currentLocationId;

  public static final String SERIALIZED_NAME_CUSTOMER_MANAGED_KEY = "customerManagedKey";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_MANAGED_KEY)
  private String customerManagedKey;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_LOCATION_ID = "locationId";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_MAINTENANCE_POLICY = "maintenancePolicy";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE_POLICY)
  private MaintenancePolicy maintenancePolicy;

  public static final String SERIALIZED_NAME_MAINTENANCE_SCHEDULE = "maintenanceSchedule";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE_SCHEDULE)
  private MaintenanceSchedule maintenanceSchedule;

  public static final String SERIALIZED_NAME_MAINTENANCE_VERSION = "maintenanceVersion";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE_VERSION)
  private String maintenanceVersion;

  public static final String SERIALIZED_NAME_MEMORY_SIZE_GB = "memorySizeGb";
  @SerializedName(SERIALIZED_NAME_MEMORY_SIZE_GB)
  private Integer memorySizeGb;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODES = "nodes";
  @SerializedName(SERIALIZED_NAME_NODES)
  private List<NodeInfo> nodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERSISTENCE_CONFIG = "persistenceConfig";
  @SerializedName(SERIALIZED_NAME_PERSISTENCE_CONFIG)
  private PersistenceConfig persistenceConfig;

  public static final String SERIALIZED_NAME_PERSISTENCE_IAM_IDENTITY = "persistenceIamIdentity";
  @SerializedName(SERIALIZED_NAME_PERSISTENCE_IAM_IDENTITY)
  private String persistenceIamIdentity;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_READ_ENDPOINT = "readEndpoint";
  @SerializedName(SERIALIZED_NAME_READ_ENDPOINT)
  private String readEndpoint;

  public static final String SERIALIZED_NAME_READ_ENDPOINT_PORT = "readEndpointPort";
  @SerializedName(SERIALIZED_NAME_READ_ENDPOINT_PORT)
  private Integer readEndpointPort;

  /**
   * Optional. Read replicas mode for the instance. Defaults to READ_REPLICAS_DISABLED.
   */
  @JsonAdapter(ReadReplicasModeEnum.Adapter.class)
  public enum ReadReplicasModeEnum {
    MODE_UNSPECIFIED("READ_REPLICAS_MODE_UNSPECIFIED"),
    
    DISABLED("READ_REPLICAS_DISABLED"),
    
    ENABLED("READ_REPLICAS_ENABLED");

    private String value;

    ReadReplicasModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReadReplicasModeEnum fromValue(String value) {
      for (ReadReplicasModeEnum b : ReadReplicasModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReadReplicasModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReadReplicasModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReadReplicasModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReadReplicasModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReadReplicasModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_READ_REPLICAS_MODE = "readReplicasMode";
  @SerializedName(SERIALIZED_NAME_READ_REPLICAS_MODE)
  private ReadReplicasModeEnum readReplicasMode;

  public static final String SERIALIZED_NAME_REDIS_CONFIGS = "redisConfigs";
  @SerializedName(SERIALIZED_NAME_REDIS_CONFIGS)
  private Map<String, String> redisConfigs = new HashMap<>();

  public static final String SERIALIZED_NAME_REDIS_VERSION = "redisVersion";
  @SerializedName(SERIALIZED_NAME_REDIS_VERSION)
  private String redisVersion;

  public static final String SERIALIZED_NAME_REPLICA_COUNT = "replicaCount";
  @SerializedName(SERIALIZED_NAME_REPLICA_COUNT)
  private Integer replicaCount;

  public static final String SERIALIZED_NAME_RESERVED_IP_RANGE = "reservedIpRange";
  @SerializedName(SERIALIZED_NAME_RESERVED_IP_RANGE)
  private String reservedIpRange;

  public static final String SERIALIZED_NAME_SATISFIES_PZI = "satisfiesPzi";
  @SerializedName(SERIALIZED_NAME_SATISFIES_PZI)
  private Boolean satisfiesPzi;

  public static final String SERIALIZED_NAME_SATISFIES_PZS = "satisfiesPzs";
  @SerializedName(SERIALIZED_NAME_SATISFIES_PZS)
  private Boolean satisfiesPzs;

  public static final String SERIALIZED_NAME_SECONDARY_IP_RANGE = "secondaryIpRange";
  @SerializedName(SERIALIZED_NAME_SECONDARY_IP_RANGE)
  private String secondaryIpRange;

  public static final String SERIALIZED_NAME_SERVER_CA_CERTS = "serverCaCerts";
  @SerializedName(SERIALIZED_NAME_SERVER_CA_CERTS)
  private List<TlsCertificate> serverCaCerts = new ArrayList<>();

  /**
   * Output only. The current state of this instance.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    READY("READY"),
    
    UPDATING("UPDATING"),
    
    DELETING("DELETING"),
    
    REPAIRING("REPAIRING"),
    
    MAINTENANCE("MAINTENANCE"),
    
    IMPORTING("IMPORTING"),
    
    FAILING_OVER("FAILING_OVER");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  /**
   * Gets or Sets suspensionReasons
   */
  @JsonAdapter(SuspensionReasonsEnum.Adapter.class)
  public enum SuspensionReasonsEnum {
    SUSPENSION_REASON_UNSPECIFIED("SUSPENSION_REASON_UNSPECIFIED"),
    
    CUSTOMER_MANAGED_KEY_ISSUE("CUSTOMER_MANAGED_KEY_ISSUE");

    private String value;

    SuspensionReasonsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SuspensionReasonsEnum fromValue(String value) {
      for (SuspensionReasonsEnum b : SuspensionReasonsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SuspensionReasonsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SuspensionReasonsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SuspensionReasonsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SuspensionReasonsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SuspensionReasonsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUSPENSION_REASONS = "suspensionReasons";
  @SerializedName(SERIALIZED_NAME_SUSPENSION_REASONS)
  private List<SuspensionReasonsEnum> suspensionReasons = new ArrayList<>();

  /**
   * Required. The service tier of the instance.
   */
  @JsonAdapter(TierEnum.Adapter.class)
  public enum TierEnum {
    TIER_UNSPECIFIED("TIER_UNSPECIFIED"),
    
    BASIC("BASIC"),
    
    STANDARD_HA("STANDARD_HA");

    private String value;

    TierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TierEnum fromValue(String value) {
      for (TierEnum b : TierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private TierEnum tier;

  /**
   * Optional. The TLS mode of the Redis instance. If not provided, TLS is disabled for the instance.
   */
  @JsonAdapter(TransitEncryptionModeEnum.Adapter.class)
  public enum TransitEncryptionModeEnum {
    TRANSIT_ENCRYPTION_MODE_UNSPECIFIED("TRANSIT_ENCRYPTION_MODE_UNSPECIFIED"),
    
    SERVER_AUTHENTICATION("SERVER_AUTHENTICATION"),
    
    DISABLED("DISABLED");

    private String value;

    TransitEncryptionModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransitEncryptionModeEnum fromValue(String value) {
      for (TransitEncryptionModeEnum b : TransitEncryptionModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransitEncryptionModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransitEncryptionModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransitEncryptionModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransitEncryptionModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransitEncryptionModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSIT_ENCRYPTION_MODE = "transitEncryptionMode";
  @SerializedName(SERIALIZED_NAME_TRANSIT_ENCRYPTION_MODE)
  private TransitEncryptionModeEnum transitEncryptionMode;

  public Instance() {
  }

  public Instance(
     String createTime, 
     String currentLocationId, 
     String host, 
     List<NodeInfo> nodes, 
     String persistenceIamIdentity, 
     Integer port, 
     String readEndpoint, 
     Integer readEndpointPort, 
     Boolean satisfiesPzi, 
     Boolean satisfiesPzs, 
     List<TlsCertificate> serverCaCerts, 
     StateEnum state, 
     String statusMessage
  ) {
    this();
    this.createTime = createTime;
    this.currentLocationId = currentLocationId;
    this.host = host;
    this.nodes = nodes;
    this.persistenceIamIdentity = persistenceIamIdentity;
    this.port = port;
    this.readEndpoint = readEndpoint;
    this.readEndpointPort = readEndpointPort;
    this.satisfiesPzi = satisfiesPzi;
    this.satisfiesPzs = satisfiesPzs;
    this.serverCaCerts = serverCaCerts;
    this.state = state;
    this.statusMessage = statusMessage;
  }

  public Instance alternativeLocationId(String alternativeLocationId) {
    this.alternativeLocationId = alternativeLocationId;
    return this;
  }

  /**
   * Optional. If specified, at least one node will be provisioned in this zone in addition to the zone specified in location_id. Only applicable to standard tier. If provided, it must be a different zone from the one provided in [location_id]. Additional nodes beyond the first 2 will be placed in zones selected by the service.
   * @return alternativeLocationId
   */
  @javax.annotation.Nullable
  public String getAlternativeLocationId() {
    return alternativeLocationId;
  }

  public void setAlternativeLocationId(String alternativeLocationId) {
    this.alternativeLocationId = alternativeLocationId;
  }


  public Instance authEnabled(Boolean authEnabled) {
    this.authEnabled = authEnabled;
    return this;
  }

  /**
   * Optional. Indicates whether OSS Redis AUTH is enabled for the instance. If set to \&quot;true\&quot; AUTH is enabled on the instance. Default value is \&quot;false\&quot; meaning AUTH is disabled.
   * @return authEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAuthEnabled() {
    return authEnabled;
  }

  public void setAuthEnabled(Boolean authEnabled) {
    this.authEnabled = authEnabled;
  }


  public Instance authorizedNetwork(String authorizedNetwork) {
    this.authorizedNetwork = authorizedNetwork;
    return this;
  }

  /**
   * Optional. The full name of the Google Compute Engine [network](https://cloud.google.com/vpc/docs/vpc) to which the instance is connected. If left unspecified, the &#x60;default&#x60; network will be used.
   * @return authorizedNetwork
   */
  @javax.annotation.Nullable
  public String getAuthorizedNetwork() {
    return authorizedNetwork;
  }

  public void setAuthorizedNetwork(String authorizedNetwork) {
    this.authorizedNetwork = authorizedNetwork;
  }


  public Instance availableMaintenanceVersions(List<String> availableMaintenanceVersions) {
    this.availableMaintenanceVersions = availableMaintenanceVersions;
    return this;
  }

  public Instance addAvailableMaintenanceVersionsItem(String availableMaintenanceVersionsItem) {
    if (this.availableMaintenanceVersions == null) {
      this.availableMaintenanceVersions = new ArrayList<>();
    }
    this.availableMaintenanceVersions.add(availableMaintenanceVersionsItem);
    return this;
  }

  /**
   * Optional. The available maintenance versions that an instance could update to.
   * @return availableMaintenanceVersions
   */
  @javax.annotation.Nullable
  public List<String> getAvailableMaintenanceVersions() {
    return availableMaintenanceVersions;
  }

  public void setAvailableMaintenanceVersions(List<String> availableMaintenanceVersions) {
    this.availableMaintenanceVersions = availableMaintenanceVersions;
  }


  public Instance connectMode(ConnectModeEnum connectMode) {
    this.connectMode = connectMode;
    return this;
  }

  /**
   * Optional. The network connect mode of the Redis instance. If not provided, the connect mode defaults to DIRECT_PEERING.
   * @return connectMode
   */
  @javax.annotation.Nullable
  public ConnectModeEnum getConnectMode() {
    return connectMode;
  }

  public void setConnectMode(ConnectModeEnum connectMode) {
    this.connectMode = connectMode;
  }


  /**
   * Output only. The time the instance was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. The current zone where the Redis primary node is located. In basic tier, this will always be the same as [location_id]. In standard tier, this can be the zone of any node in the instance.
   * @return currentLocationId
   */
  @javax.annotation.Nullable
  public String getCurrentLocationId() {
    return currentLocationId;
  }



  public Instance customerManagedKey(String customerManagedKey) {
    this.customerManagedKey = customerManagedKey;
    return this;
  }

  /**
   * Optional. The KMS key reference that the customer provides when trying to create the instance.
   * @return customerManagedKey
   */
  @javax.annotation.Nullable
  public String getCustomerManagedKey() {
    return customerManagedKey;
  }

  public void setCustomerManagedKey(String customerManagedKey) {
    this.customerManagedKey = customerManagedKey;
  }


  public Instance displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * An arbitrary and optional user-provided name for the instance.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  /**
   * Output only. Hostname or IP address of the exposed Redis endpoint used by clients to connect to the service.
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }



  public Instance labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Instance putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Resource labels to represent user provided metadata
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Instance locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * Optional. The zone where the instance will be provisioned. If not provided, the service will choose a zone from the specified region for the instance. For standard tier, additional nodes will be added across multiple zones for protection against zonal failures. If specified, at least one node will be provisioned in this zone.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public Instance maintenancePolicy(MaintenancePolicy maintenancePolicy) {
    this.maintenancePolicy = maintenancePolicy;
    return this;
  }

  /**
   * Get maintenancePolicy
   * @return maintenancePolicy
   */
  @javax.annotation.Nullable
  public MaintenancePolicy getMaintenancePolicy() {
    return maintenancePolicy;
  }

  public void setMaintenancePolicy(MaintenancePolicy maintenancePolicy) {
    this.maintenancePolicy = maintenancePolicy;
  }


  public Instance maintenanceSchedule(MaintenanceSchedule maintenanceSchedule) {
    this.maintenanceSchedule = maintenanceSchedule;
    return this;
  }

  /**
   * Get maintenanceSchedule
   * @return maintenanceSchedule
   */
  @javax.annotation.Nullable
  public MaintenanceSchedule getMaintenanceSchedule() {
    return maintenanceSchedule;
  }

  public void setMaintenanceSchedule(MaintenanceSchedule maintenanceSchedule) {
    this.maintenanceSchedule = maintenanceSchedule;
  }


  public Instance maintenanceVersion(String maintenanceVersion) {
    this.maintenanceVersion = maintenanceVersion;
    return this;
  }

  /**
   * Optional. The self service update maintenance version. The version is date based such as \&quot;20210712_00_00\&quot;.
   * @return maintenanceVersion
   */
  @javax.annotation.Nullable
  public String getMaintenanceVersion() {
    return maintenanceVersion;
  }

  public void setMaintenanceVersion(String maintenanceVersion) {
    this.maintenanceVersion = maintenanceVersion;
  }


  public Instance memorySizeGb(Integer memorySizeGb) {
    this.memorySizeGb = memorySizeGb;
    return this;
  }

  /**
   * Required. Redis memory size in GiB.
   * @return memorySizeGb
   */
  @javax.annotation.Nullable
  public Integer getMemorySizeGb() {
    return memorySizeGb;
  }

  public void setMemorySizeGb(Integer memorySizeGb) {
    this.memorySizeGb = memorySizeGb;
  }


  public Instance name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Unique name of the resource in this scope including project and location using the form: &#x60;projects/{project_id}/locations/{location_id}/instances/{instance_id}&#x60; Note: Redis instances are managed and addressed at regional level so location_id here refers to a GCP region; however, users may choose which specific zone (or collection of zones for cross-zone instances) an instance should be provisioned in. Refer to location_id and alternative_location_id fields for more details.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. Info per node.
   * @return nodes
   */
  @javax.annotation.Nullable
  public List<NodeInfo> getNodes() {
    return nodes;
  }



  public Instance persistenceConfig(PersistenceConfig persistenceConfig) {
    this.persistenceConfig = persistenceConfig;
    return this;
  }

  /**
   * Get persistenceConfig
   * @return persistenceConfig
   */
  @javax.annotation.Nullable
  public PersistenceConfig getPersistenceConfig() {
    return persistenceConfig;
  }

  public void setPersistenceConfig(PersistenceConfig persistenceConfig) {
    this.persistenceConfig = persistenceConfig;
  }


  /**
   * Output only. Cloud IAM identity used by import / export operations to transfer data to/from Cloud Storage. Format is \&quot;serviceAccount:\&quot;. The value may change over time for a given instance so should be checked before each import/export operation.
   * @return persistenceIamIdentity
   */
  @javax.annotation.Nullable
  public String getPersistenceIamIdentity() {
    return persistenceIamIdentity;
  }



  /**
   * Output only. The port number of the exposed Redis endpoint.
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }



  /**
   * Output only. Hostname or IP address of the exposed readonly Redis endpoint. Standard tier only. Targets all healthy replica nodes in instance. Replication is asynchronous and replica nodes will exhibit some lag behind the primary. Write requests must target &#39;host&#39;.
   * @return readEndpoint
   */
  @javax.annotation.Nullable
  public String getReadEndpoint() {
    return readEndpoint;
  }



  /**
   * Output only. The port number of the exposed readonly redis endpoint. Standard tier only. Write requests should target &#39;port&#39;.
   * @return readEndpointPort
   */
  @javax.annotation.Nullable
  public Integer getReadEndpointPort() {
    return readEndpointPort;
  }



  public Instance readReplicasMode(ReadReplicasModeEnum readReplicasMode) {
    this.readReplicasMode = readReplicasMode;
    return this;
  }

  /**
   * Optional. Read replicas mode for the instance. Defaults to READ_REPLICAS_DISABLED.
   * @return readReplicasMode
   */
  @javax.annotation.Nullable
  public ReadReplicasModeEnum getReadReplicasMode() {
    return readReplicasMode;
  }

  public void setReadReplicasMode(ReadReplicasModeEnum readReplicasMode) {
    this.readReplicasMode = readReplicasMode;
  }


  public Instance redisConfigs(Map<String, String> redisConfigs) {
    this.redisConfigs = redisConfigs;
    return this;
  }

  public Instance putRedisConfigsItem(String key, String redisConfigsItem) {
    if (this.redisConfigs == null) {
      this.redisConfigs = new HashMap<>();
    }
    this.redisConfigs.put(key, redisConfigsItem);
    return this;
  }

  /**
   * Optional. Redis configuration parameters, according to http://redis.io/topics/config. Currently, the only supported parameters are: Redis version 3.2 and newer: * maxmemory-policy * notify-keyspace-events Redis version 4.0 and newer: * activedefrag * lfu-decay-time * lfu-log-factor * maxmemory-gb Redis version 5.0 and newer: * stream-node-max-bytes * stream-node-max-entries
   * @return redisConfigs
   */
  @javax.annotation.Nullable
  public Map<String, String> getRedisConfigs() {
    return redisConfigs;
  }

  public void setRedisConfigs(Map<String, String> redisConfigs) {
    this.redisConfigs = redisConfigs;
  }


  public Instance redisVersion(String redisVersion) {
    this.redisVersion = redisVersion;
    return this;
  }

  /**
   * Optional. The version of Redis software. If not provided, latest supported version will be used. Currently, the supported values are: * &#x60;REDIS_3_2&#x60; for Redis 3.2 compatibility * &#x60;REDIS_4_0&#x60; for Redis 4.0 compatibility (default) * &#x60;REDIS_5_0&#x60; for Redis 5.0 compatibility * &#x60;REDIS_6_X&#x60; for Redis 6.x compatibility * &#x60;REDIS_7_0&#x60; for Redis 7.0 compatibility
   * @return redisVersion
   */
  @javax.annotation.Nullable
  public String getRedisVersion() {
    return redisVersion;
  }

  public void setRedisVersion(String redisVersion) {
    this.redisVersion = redisVersion;
  }


  public Instance replicaCount(Integer replicaCount) {
    this.replicaCount = replicaCount;
    return this;
  }

  /**
   * Optional. The number of replica nodes. The valid range for the Standard Tier with read replicas enabled is [1-5] and defaults to 2. If read replicas are not enabled for a Standard Tier instance, the only valid value is 1 and the default is 1. The valid value for basic tier is 0 and the default is also 0.
   * @return replicaCount
   */
  @javax.annotation.Nullable
  public Integer getReplicaCount() {
    return replicaCount;
  }

  public void setReplicaCount(Integer replicaCount) {
    this.replicaCount = replicaCount;
  }


  public Instance reservedIpRange(String reservedIpRange) {
    this.reservedIpRange = reservedIpRange;
    return this;
  }

  /**
   * Optional. For DIRECT_PEERING mode, the CIDR range of internal addresses that are reserved for this instance. Range must be unique and non-overlapping with existing subnets in an authorized network. For PRIVATE_SERVICE_ACCESS mode, the name of one allocated IP address ranges associated with this private service access connection. If not provided, the service will choose an unused /29 block, for example, 10.0.0.0/29 or 192.168.0.0/29. For READ_REPLICAS_ENABLED the default block size is /28.
   * @return reservedIpRange
   */
  @javax.annotation.Nullable
  public String getReservedIpRange() {
    return reservedIpRange;
  }

  public void setReservedIpRange(String reservedIpRange) {
    this.reservedIpRange = reservedIpRange;
  }


  /**
   * Optional. Output only. Reserved for future use.
   * @return satisfiesPzi
   */
  @javax.annotation.Nullable
  public Boolean getSatisfiesPzi() {
    return satisfiesPzi;
  }



  /**
   * Optional. Output only. Reserved for future use.
   * @return satisfiesPzs
   */
  @javax.annotation.Nullable
  public Boolean getSatisfiesPzs() {
    return satisfiesPzs;
  }



  public Instance secondaryIpRange(String secondaryIpRange) {
    this.secondaryIpRange = secondaryIpRange;
    return this;
  }

  /**
   * Optional. Additional IP range for node placement. Required when enabling read replicas on an existing instance. For DIRECT_PEERING mode value must be a CIDR range of size /28, or \&quot;auto\&quot;. For PRIVATE_SERVICE_ACCESS mode value must be the name of an allocated address range associated with the private service access connection, or \&quot;auto\&quot;.
   * @return secondaryIpRange
   */
  @javax.annotation.Nullable
  public String getSecondaryIpRange() {
    return secondaryIpRange;
  }

  public void setSecondaryIpRange(String secondaryIpRange) {
    this.secondaryIpRange = secondaryIpRange;
  }


  /**
   * Output only. List of server CA certificates for the instance.
   * @return serverCaCerts
   */
  @javax.annotation.Nullable
  public List<TlsCertificate> getServerCaCerts() {
    return serverCaCerts;
  }



  /**
   * Output only. The current state of this instance.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Additional information about the current status of this instance, if available.
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }



  public Instance suspensionReasons(List<SuspensionReasonsEnum> suspensionReasons) {
    this.suspensionReasons = suspensionReasons;
    return this;
  }

  public Instance addSuspensionReasonsItem(SuspensionReasonsEnum suspensionReasonsItem) {
    if (this.suspensionReasons == null) {
      this.suspensionReasons = new ArrayList<>();
    }
    this.suspensionReasons.add(suspensionReasonsItem);
    return this;
  }

  /**
   * Optional. reasons that causes instance in \&quot;SUSPENDED\&quot; state.
   * @return suspensionReasons
   */
  @javax.annotation.Nullable
  public List<SuspensionReasonsEnum> getSuspensionReasons() {
    return suspensionReasons;
  }

  public void setSuspensionReasons(List<SuspensionReasonsEnum> suspensionReasons) {
    this.suspensionReasons = suspensionReasons;
  }


  public Instance tier(TierEnum tier) {
    this.tier = tier;
    return this;
  }

  /**
   * Required. The service tier of the instance.
   * @return tier
   */
  @javax.annotation.Nullable
  public TierEnum getTier() {
    return tier;
  }

  public void setTier(TierEnum tier) {
    this.tier = tier;
  }


  public Instance transitEncryptionMode(TransitEncryptionModeEnum transitEncryptionMode) {
    this.transitEncryptionMode = transitEncryptionMode;
    return this;
  }

  /**
   * Optional. The TLS mode of the Redis instance. If not provided, TLS is disabled for the instance.
   * @return transitEncryptionMode
   */
  @javax.annotation.Nullable
  public TransitEncryptionModeEnum getTransitEncryptionMode() {
    return transitEncryptionMode;
  }

  public void setTransitEncryptionMode(TransitEncryptionModeEnum transitEncryptionMode) {
    this.transitEncryptionMode = transitEncryptionMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Instance instance = (Instance) o;
    return Objects.equals(this.alternativeLocationId, instance.alternativeLocationId) &&
        Objects.equals(this.authEnabled, instance.authEnabled) &&
        Objects.equals(this.authorizedNetwork, instance.authorizedNetwork) &&
        Objects.equals(this.availableMaintenanceVersions, instance.availableMaintenanceVersions) &&
        Objects.equals(this.connectMode, instance.connectMode) &&
        Objects.equals(this.createTime, instance.createTime) &&
        Objects.equals(this.currentLocationId, instance.currentLocationId) &&
        Objects.equals(this.customerManagedKey, instance.customerManagedKey) &&
        Objects.equals(this.displayName, instance.displayName) &&
        Objects.equals(this.host, instance.host) &&
        Objects.equals(this.labels, instance.labels) &&
        Objects.equals(this.locationId, instance.locationId) &&
        Objects.equals(this.maintenancePolicy, instance.maintenancePolicy) &&
        Objects.equals(this.maintenanceSchedule, instance.maintenanceSchedule) &&
        Objects.equals(this.maintenanceVersion, instance.maintenanceVersion) &&
        Objects.equals(this.memorySizeGb, instance.memorySizeGb) &&
        Objects.equals(this.name, instance.name) &&
        Objects.equals(this.nodes, instance.nodes) &&
        Objects.equals(this.persistenceConfig, instance.persistenceConfig) &&
        Objects.equals(this.persistenceIamIdentity, instance.persistenceIamIdentity) &&
        Objects.equals(this.port, instance.port) &&
        Objects.equals(this.readEndpoint, instance.readEndpoint) &&
        Objects.equals(this.readEndpointPort, instance.readEndpointPort) &&
        Objects.equals(this.readReplicasMode, instance.readReplicasMode) &&
        Objects.equals(this.redisConfigs, instance.redisConfigs) &&
        Objects.equals(this.redisVersion, instance.redisVersion) &&
        Objects.equals(this.replicaCount, instance.replicaCount) &&
        Objects.equals(this.reservedIpRange, instance.reservedIpRange) &&
        Objects.equals(this.satisfiesPzi, instance.satisfiesPzi) &&
        Objects.equals(this.satisfiesPzs, instance.satisfiesPzs) &&
        Objects.equals(this.secondaryIpRange, instance.secondaryIpRange) &&
        Objects.equals(this.serverCaCerts, instance.serverCaCerts) &&
        Objects.equals(this.state, instance.state) &&
        Objects.equals(this.statusMessage, instance.statusMessage) &&
        Objects.equals(this.suspensionReasons, instance.suspensionReasons) &&
        Objects.equals(this.tier, instance.tier) &&
        Objects.equals(this.transitEncryptionMode, instance.transitEncryptionMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternativeLocationId, authEnabled, authorizedNetwork, availableMaintenanceVersions, connectMode, createTime, currentLocationId, customerManagedKey, displayName, host, labels, locationId, maintenancePolicy, maintenanceSchedule, maintenanceVersion, memorySizeGb, name, nodes, persistenceConfig, persistenceIamIdentity, port, readEndpoint, readEndpointPort, readReplicasMode, redisConfigs, redisVersion, replicaCount, reservedIpRange, satisfiesPzi, satisfiesPzs, secondaryIpRange, serverCaCerts, state, statusMessage, suspensionReasons, tier, transitEncryptionMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Instance {\n");
    sb.append("    alternativeLocationId: ").append(toIndentedString(alternativeLocationId)).append("\n");
    sb.append("    authEnabled: ").append(toIndentedString(authEnabled)).append("\n");
    sb.append("    authorizedNetwork: ").append(toIndentedString(authorizedNetwork)).append("\n");
    sb.append("    availableMaintenanceVersions: ").append(toIndentedString(availableMaintenanceVersions)).append("\n");
    sb.append("    connectMode: ").append(toIndentedString(connectMode)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    currentLocationId: ").append(toIndentedString(currentLocationId)).append("\n");
    sb.append("    customerManagedKey: ").append(toIndentedString(customerManagedKey)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    maintenancePolicy: ").append(toIndentedString(maintenancePolicy)).append("\n");
    sb.append("    maintenanceSchedule: ").append(toIndentedString(maintenanceSchedule)).append("\n");
    sb.append("    maintenanceVersion: ").append(toIndentedString(maintenanceVersion)).append("\n");
    sb.append("    memorySizeGb: ").append(toIndentedString(memorySizeGb)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    persistenceConfig: ").append(toIndentedString(persistenceConfig)).append("\n");
    sb.append("    persistenceIamIdentity: ").append(toIndentedString(persistenceIamIdentity)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    readEndpoint: ").append(toIndentedString(readEndpoint)).append("\n");
    sb.append("    readEndpointPort: ").append(toIndentedString(readEndpointPort)).append("\n");
    sb.append("    readReplicasMode: ").append(toIndentedString(readReplicasMode)).append("\n");
    sb.append("    redisConfigs: ").append(toIndentedString(redisConfigs)).append("\n");
    sb.append("    redisVersion: ").append(toIndentedString(redisVersion)).append("\n");
    sb.append("    replicaCount: ").append(toIndentedString(replicaCount)).append("\n");
    sb.append("    reservedIpRange: ").append(toIndentedString(reservedIpRange)).append("\n");
    sb.append("    satisfiesPzi: ").append(toIndentedString(satisfiesPzi)).append("\n");
    sb.append("    satisfiesPzs: ").append(toIndentedString(satisfiesPzs)).append("\n");
    sb.append("    secondaryIpRange: ").append(toIndentedString(secondaryIpRange)).append("\n");
    sb.append("    serverCaCerts: ").append(toIndentedString(serverCaCerts)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    suspensionReasons: ").append(toIndentedString(suspensionReasons)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("    transitEncryptionMode: ").append(toIndentedString(transitEncryptionMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternativeLocationId");
    openapiFields.add("authEnabled");
    openapiFields.add("authorizedNetwork");
    openapiFields.add("availableMaintenanceVersions");
    openapiFields.add("connectMode");
    openapiFields.add("createTime");
    openapiFields.add("currentLocationId");
    openapiFields.add("customerManagedKey");
    openapiFields.add("displayName");
    openapiFields.add("host");
    openapiFields.add("labels");
    openapiFields.add("locationId");
    openapiFields.add("maintenancePolicy");
    openapiFields.add("maintenanceSchedule");
    openapiFields.add("maintenanceVersion");
    openapiFields.add("memorySizeGb");
    openapiFields.add("name");
    openapiFields.add("nodes");
    openapiFields.add("persistenceConfig");
    openapiFields.add("persistenceIamIdentity");
    openapiFields.add("port");
    openapiFields.add("readEndpoint");
    openapiFields.add("readEndpointPort");
    openapiFields.add("readReplicasMode");
    openapiFields.add("redisConfigs");
    openapiFields.add("redisVersion");
    openapiFields.add("replicaCount");
    openapiFields.add("reservedIpRange");
    openapiFields.add("satisfiesPzi");
    openapiFields.add("satisfiesPzs");
    openapiFields.add("secondaryIpRange");
    openapiFields.add("serverCaCerts");
    openapiFields.add("state");
    openapiFields.add("statusMessage");
    openapiFields.add("suspensionReasons");
    openapiFields.add("tier");
    openapiFields.add("transitEncryptionMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Instance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Instance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Instance is not found in the empty JSON string", Instance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Instance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Instance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alternativeLocationId") != null && !jsonObj.get("alternativeLocationId").isJsonNull()) && !jsonObj.get("alternativeLocationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternativeLocationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alternativeLocationId").toString()));
      }
      if ((jsonObj.get("authorizedNetwork") != null && !jsonObj.get("authorizedNetwork").isJsonNull()) && !jsonObj.get("authorizedNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizedNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizedNetwork").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("availableMaintenanceVersions") != null && !jsonObj.get("availableMaintenanceVersions").isJsonNull() && !jsonObj.get("availableMaintenanceVersions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableMaintenanceVersions` to be an array in the JSON string but got `%s`", jsonObj.get("availableMaintenanceVersions").toString()));
      }
      if ((jsonObj.get("connectMode") != null && !jsonObj.get("connectMode").isJsonNull()) && !jsonObj.get("connectMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectMode").toString()));
      }
      // validate the optional field `connectMode`
      if (jsonObj.get("connectMode") != null && !jsonObj.get("connectMode").isJsonNull()) {
        ConnectModeEnum.validateJsonElement(jsonObj.get("connectMode"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("currentLocationId") != null && !jsonObj.get("currentLocationId").isJsonNull()) && !jsonObj.get("currentLocationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentLocationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentLocationId").toString()));
      }
      if ((jsonObj.get("customerManagedKey") != null && !jsonObj.get("customerManagedKey").isJsonNull()) && !jsonObj.get("customerManagedKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerManagedKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerManagedKey").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("locationId") != null && !jsonObj.get("locationId").isJsonNull()) && !jsonObj.get("locationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationId").toString()));
      }
      // validate the optional field `maintenancePolicy`
      if (jsonObj.get("maintenancePolicy") != null && !jsonObj.get("maintenancePolicy").isJsonNull()) {
        MaintenancePolicy.validateJsonElement(jsonObj.get("maintenancePolicy"));
      }
      // validate the optional field `maintenanceSchedule`
      if (jsonObj.get("maintenanceSchedule") != null && !jsonObj.get("maintenanceSchedule").isJsonNull()) {
        MaintenanceSchedule.validateJsonElement(jsonObj.get("maintenanceSchedule"));
      }
      if ((jsonObj.get("maintenanceVersion") != null && !jsonObj.get("maintenanceVersion").isJsonNull()) && !jsonObj.get("maintenanceVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maintenanceVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maintenanceVersion").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("nodes") != null && !jsonObj.get("nodes").isJsonNull()) {
        JsonArray jsonArraynodes = jsonObj.getAsJsonArray("nodes");
        if (jsonArraynodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nodes` to be an array in the JSON string but got `%s`", jsonObj.get("nodes").toString()));
          }

          // validate the optional field `nodes` (array)
          for (int i = 0; i < jsonArraynodes.size(); i++) {
            NodeInfo.validateJsonElement(jsonArraynodes.get(i));
          };
        }
      }
      // validate the optional field `persistenceConfig`
      if (jsonObj.get("persistenceConfig") != null && !jsonObj.get("persistenceConfig").isJsonNull()) {
        PersistenceConfig.validateJsonElement(jsonObj.get("persistenceConfig"));
      }
      if ((jsonObj.get("persistenceIamIdentity") != null && !jsonObj.get("persistenceIamIdentity").isJsonNull()) && !jsonObj.get("persistenceIamIdentity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `persistenceIamIdentity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("persistenceIamIdentity").toString()));
      }
      if ((jsonObj.get("readEndpoint") != null && !jsonObj.get("readEndpoint").isJsonNull()) && !jsonObj.get("readEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readEndpoint").toString()));
      }
      if ((jsonObj.get("readReplicasMode") != null && !jsonObj.get("readReplicasMode").isJsonNull()) && !jsonObj.get("readReplicasMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readReplicasMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readReplicasMode").toString()));
      }
      // validate the optional field `readReplicasMode`
      if (jsonObj.get("readReplicasMode") != null && !jsonObj.get("readReplicasMode").isJsonNull()) {
        ReadReplicasModeEnum.validateJsonElement(jsonObj.get("readReplicasMode"));
      }
      if ((jsonObj.get("redisVersion") != null && !jsonObj.get("redisVersion").isJsonNull()) && !jsonObj.get("redisVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redisVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redisVersion").toString()));
      }
      if ((jsonObj.get("reservedIpRange") != null && !jsonObj.get("reservedIpRange").isJsonNull()) && !jsonObj.get("reservedIpRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservedIpRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservedIpRange").toString()));
      }
      if ((jsonObj.get("secondaryIpRange") != null && !jsonObj.get("secondaryIpRange").isJsonNull()) && !jsonObj.get("secondaryIpRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryIpRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryIpRange").toString()));
      }
      if (jsonObj.get("serverCaCerts") != null && !jsonObj.get("serverCaCerts").isJsonNull()) {
        JsonArray jsonArrayserverCaCerts = jsonObj.getAsJsonArray("serverCaCerts");
        if (jsonArrayserverCaCerts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("serverCaCerts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `serverCaCerts` to be an array in the JSON string but got `%s`", jsonObj.get("serverCaCerts").toString()));
          }

          // validate the optional field `serverCaCerts` (array)
          for (int i = 0; i < jsonArrayserverCaCerts.size(); i++) {
            TlsCertificate.validateJsonElement(jsonArrayserverCaCerts.get(i));
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) && !jsonObj.get("statusMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusMessage").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("suspensionReasons") != null && !jsonObj.get("suspensionReasons").isJsonNull() && !jsonObj.get("suspensionReasons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `suspensionReasons` to be an array in the JSON string but got `%s`", jsonObj.get("suspensionReasons").toString()));
      }
      if ((jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) && !jsonObj.get("tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier").toString()));
      }
      // validate the optional field `tier`
      if (jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) {
        TierEnum.validateJsonElement(jsonObj.get("tier"));
      }
      if ((jsonObj.get("transitEncryptionMode") != null && !jsonObj.get("transitEncryptionMode").isJsonNull()) && !jsonObj.get("transitEncryptionMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transitEncryptionMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transitEncryptionMode").toString()));
      }
      // validate the optional field `transitEncryptionMode`
      if (jsonObj.get("transitEncryptionMode") != null && !jsonObj.get("transitEncryptionMode").isJsonNull()) {
        TransitEncryptionModeEnum.validateJsonElement(jsonObj.get("transitEncryptionMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Instance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Instance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Instance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Instance.class));

       return (TypeAdapter<T>) new TypeAdapter<Instance>() {
           @Override
           public void write(JsonWriter out, Instance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Instance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Instance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Instance
   * @throws IOException if the JSON string is invalid with respect to Instance
   */
  public static Instance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Instance.class);
  }

  /**
   * Convert an instance of Instance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

