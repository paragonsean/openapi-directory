/**
 * Apps Script API
 * Manages and executes Google Apps Script projects. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListScriptProcessesResponse from '../model/ListScriptProcessesResponse';
import ListUserProcessesResponse from '../model/ListUserProcessesResponse';

/**
* Processes service.
* @module api/ProcessesApi
* @version v1
*/
export default class ProcessesApi {

    /**
    * Constructs a new ProcessesApi. 
    * @alias module:api/ProcessesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the scriptProcessesList operation.
     * @callback module:api/ProcessesApi~scriptProcessesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUserProcessesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List information about processes made by or on behalf of a user, such as process type and current status.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] The maximum number of returned processes per page of results. Defaults to 50.
     * @param {String} [pageToken] The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response.
     * @param {String} [userProcessFilterDeploymentId] Optional field used to limit returned processes to those originating from projects with a specific deployment ID.
     * @param {String} [userProcessFilterEndTime] Optional field used to limit returned processes to those that completed on or before the given timestamp.
     * @param {String} [userProcessFilterFunctionName] Optional field used to limit returned processes to those originating from a script function with the given function name.
     * @param {String} [userProcessFilterProjectName] Optional field used to limit returned processes to those originating from projects with project names containing a specific string.
     * @param {String} [userProcessFilterScriptId] Optional field used to limit returned processes to those originating from projects with a specific script ID.
     * @param {String} [userProcessFilterStartTime] Optional field used to limit returned processes to those that were started on or after the given timestamp.
     * @param {Array.<module:model/String>} [userProcessFilterStatuses] Optional field used to limit returned processes to those having one of the specified process statuses.
     * @param {Array.<module:model/String>} [userProcessFilterTypes] Optional field used to limit returned processes to those having one of the specified process types.
     * @param {Array.<module:model/String>} [userProcessFilterUserAccessLevels] Optional field used to limit returned processes to those having one of the specified user access levels.
     * @param {module:api/ProcessesApi~scriptProcessesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUserProcessesResponse}
     */
    scriptProcessesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'userProcessFilter.deploymentId': opts['userProcessFilterDeploymentId'],
        'userProcessFilter.endTime': opts['userProcessFilterEndTime'],
        'userProcessFilter.functionName': opts['userProcessFilterFunctionName'],
        'userProcessFilter.projectName': opts['userProcessFilterProjectName'],
        'userProcessFilter.scriptId': opts['userProcessFilterScriptId'],
        'userProcessFilter.startTime': opts['userProcessFilterStartTime'],
        'userProcessFilter.statuses': this.apiClient.buildCollectionParam(opts['userProcessFilterStatuses'], 'multi'),
        'userProcessFilter.types': this.apiClient.buildCollectionParam(opts['userProcessFilterTypes'], 'multi'),
        'userProcessFilter.userAccessLevels': this.apiClient.buildCollectionParam(opts['userProcessFilterUserAccessLevels'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListUserProcessesResponse;
      return this.apiClient.callApi(
        '/v1/processes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scriptProcessesListScriptProcesses operation.
     * @callback module:api/ProcessesApi~scriptProcessesListScriptProcessesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListScriptProcessesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List information about a script's executed processes, such as process type and current status.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] The maximum number of returned processes per page of results. Defaults to 50.
     * @param {String} [pageToken] The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response.
     * @param {String} [scriptId] The script ID of the project whose processes are listed.
     * @param {String} [scriptProcessFilterDeploymentId] Optional field used to limit returned processes to those originating from projects with a specific deployment ID.
     * @param {String} [scriptProcessFilterEndTime] Optional field used to limit returned processes to those that completed on or before the given timestamp.
     * @param {String} [scriptProcessFilterFunctionName] Optional field used to limit returned processes to those originating from a script function with the given function name.
     * @param {String} [scriptProcessFilterStartTime] Optional field used to limit returned processes to those that were started on or after the given timestamp.
     * @param {Array.<module:model/String>} [scriptProcessFilterStatuses] Optional field used to limit returned processes to those having one of the specified process statuses.
     * @param {Array.<module:model/String>} [scriptProcessFilterTypes] Optional field used to limit returned processes to those having one of the specified process types.
     * @param {Array.<module:model/String>} [scriptProcessFilterUserAccessLevels] Optional field used to limit returned processes to those having one of the specified user access levels.
     * @param {module:api/ProcessesApi~scriptProcessesListScriptProcessesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListScriptProcessesResponse}
     */
    scriptProcessesListScriptProcesses(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'scriptId': opts['scriptId'],
        'scriptProcessFilter.deploymentId': opts['scriptProcessFilterDeploymentId'],
        'scriptProcessFilter.endTime': opts['scriptProcessFilterEndTime'],
        'scriptProcessFilter.functionName': opts['scriptProcessFilterFunctionName'],
        'scriptProcessFilter.startTime': opts['scriptProcessFilterStartTime'],
        'scriptProcessFilter.statuses': this.apiClient.buildCollectionParam(opts['scriptProcessFilterStatuses'], 'multi'),
        'scriptProcessFilter.types': this.apiClient.buildCollectionParam(opts['scriptProcessFilterTypes'], 'multi'),
        'scriptProcessFilter.userAccessLevels': this.apiClient.buildCollectionParam(opts['scriptProcessFilterUserAccessLevels'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListScriptProcessesResponse;
      return this.apiClient.callApi(
        '/v1/processes:listScriptProcesses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
