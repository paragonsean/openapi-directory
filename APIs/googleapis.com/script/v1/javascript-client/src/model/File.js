/**
 * Apps Script API
 * Manages and executes Google Apps Script projects. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleAppsScriptTypeFunctionSet from './GoogleAppsScriptTypeFunctionSet';
import GoogleAppsScriptTypeUser from './GoogleAppsScriptTypeUser';

/**
 * The File model module.
 * @module model/File
 * @version v1
 */
class File {
    /**
     * Constructs a new <code>File</code>.
     * An individual file within a script project. A file is a third-party source code created by one or more developers. It can be a server-side JS code, HTML, or a configuration file. Each script project can contain multiple files.
     * @alias module:model/File
     */
    constructor() { 
        
        File.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>File</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/File} obj Optional instance to populate.
     * @return {module:model/File} The populated <code>File</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new File();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('functionSet')) {
                obj['functionSet'] = GoogleAppsScriptTypeFunctionSet.constructFromObject(data['functionSet']);
            }
            if (data.hasOwnProperty('lastModifyUser')) {
                obj['lastModifyUser'] = GoogleAppsScriptTypeUser.constructFromObject(data['lastModifyUser']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>File</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>File</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `functionSet`
        if (data['functionSet']) { // data not null
          GoogleAppsScriptTypeFunctionSet.validateJSON(data['functionSet']);
        }
        // validate the optional field `lastModifyUser`
        if (data['lastModifyUser']) { // data not null
          GoogleAppsScriptTypeUser.validateJSON(data['lastModifyUser']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Creation date timestamp. This read-only field is only visible to users who have WRITER permission for the script project.
 * @member {String} createTime
 */
File.prototype['createTime'] = undefined;

/**
 * @member {module:model/GoogleAppsScriptTypeFunctionSet} functionSet
 */
File.prototype['functionSet'] = undefined;

/**
 * @member {module:model/GoogleAppsScriptTypeUser} lastModifyUser
 */
File.prototype['lastModifyUser'] = undefined;

/**
 * The name of the file. The file extension is not part of the file name, which can be identified from the type field.
 * @member {String} name
 */
File.prototype['name'] = undefined;

/**
 * The file content.
 * @member {String} source
 */
File.prototype['source'] = undefined;

/**
 * The type of the file.
 * @member {module:model/File.TypeEnum} type
 */
File.prototype['type'] = undefined;

/**
 * Last modified date timestamp. This read-only field is only visible to users who have WRITER permission for the script project.
 * @member {String} updateTime
 */
File.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
File['TypeEnum'] = {

    /**
     * value: "ENUM_TYPE_UNSPECIFIED"
     * @const
     */
    "ENUM_TYPE_UNSPECIFIED": "ENUM_TYPE_UNSPECIFIED",

    /**
     * value: "SERVER_JS"
     * @const
     */
    "SERVER_JS": "SERVER_JS",

    /**
     * value: "HTML"
     * @const
     */
    "HTML": "HTML",

    /**
     * value: "JSON"
     * @const
     */
    "JSON": "JSON"
};



export default File;

