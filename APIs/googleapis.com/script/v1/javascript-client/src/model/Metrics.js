/**
 * Apps Script API
 * Manages and executes Google Apps Script projects. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricsValue from './MetricsValue';

/**
 * The Metrics model module.
 * @module model/Metrics
 * @version v1
 */
class Metrics {
    /**
     * Constructs a new <code>Metrics</code>.
     * Resource containing usage stats for a given script, based on the supplied filter and mask present in the request.
     * @alias module:model/Metrics
     */
    constructor() { 
        
        Metrics.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Metrics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Metrics} obj Optional instance to populate.
     * @return {module:model/Metrics} The populated <code>Metrics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Metrics();

            if (data.hasOwnProperty('activeUsers')) {
                obj['activeUsers'] = ApiClient.convertToType(data['activeUsers'], [MetricsValue]);
            }
            if (data.hasOwnProperty('failedExecutions')) {
                obj['failedExecutions'] = ApiClient.convertToType(data['failedExecutions'], [MetricsValue]);
            }
            if (data.hasOwnProperty('totalExecutions')) {
                obj['totalExecutions'] = ApiClient.convertToType(data['totalExecutions'], [MetricsValue]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Metrics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Metrics</code>.
     */
    static validateJSON(data) {
        if (data['activeUsers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['activeUsers'])) {
                throw new Error("Expected the field `activeUsers` to be an array in the JSON data but got " + data['activeUsers']);
            }
            // validate the optional field `activeUsers` (array)
            for (const item of data['activeUsers']) {
                MetricsValue.validateJSON(item);
            };
        }
        if (data['failedExecutions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['failedExecutions'])) {
                throw new Error("Expected the field `failedExecutions` to be an array in the JSON data but got " + data['failedExecutions']);
            }
            // validate the optional field `failedExecutions` (array)
            for (const item of data['failedExecutions']) {
                MetricsValue.validateJSON(item);
            };
        }
        if (data['totalExecutions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['totalExecutions'])) {
                throw new Error("Expected the field `totalExecutions` to be an array in the JSON data but got " + data['totalExecutions']);
            }
            // validate the optional field `totalExecutions` (array)
            for (const item of data['totalExecutions']) {
                MetricsValue.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Number of active users.
 * @member {Array.<module:model/MetricsValue>} activeUsers
 */
Metrics.prototype['activeUsers'] = undefined;

/**
 * Number of failed executions.
 * @member {Array.<module:model/MetricsValue>} failedExecutions
 */
Metrics.prototype['failedExecutions'] = undefined;

/**
 * Number of total executions.
 * @member {Array.<module:model/MetricsValue>} totalExecutions
 */
Metrics.prototype['totalExecutions'] = undefined;






export default Metrics;

