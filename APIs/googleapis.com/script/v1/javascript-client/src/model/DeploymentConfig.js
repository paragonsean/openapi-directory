/**
 * Apps Script API
 * Manages and executes Google Apps Script projects. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeploymentConfig model module.
 * @module model/DeploymentConfig
 * @version v1
 */
class DeploymentConfig {
    /**
     * Constructs a new <code>DeploymentConfig</code>.
     * Metadata the defines how a deployment is configured.
     * @alias module:model/DeploymentConfig
     */
    constructor() { 
        
        DeploymentConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeploymentConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeploymentConfig} obj Optional instance to populate.
     * @return {module:model/DeploymentConfig} The populated <code>DeploymentConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeploymentConfig();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('manifestFileName')) {
                obj['manifestFileName'] = ApiClient.convertToType(data['manifestFileName'], 'String');
            }
            if (data.hasOwnProperty('scriptId')) {
                obj['scriptId'] = ApiClient.convertToType(data['scriptId'], 'String');
            }
            if (data.hasOwnProperty('versionNumber')) {
                obj['versionNumber'] = ApiClient.convertToType(data['versionNumber'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeploymentConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeploymentConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['manifestFileName'] && !(typeof data['manifestFileName'] === 'string' || data['manifestFileName'] instanceof String)) {
            throw new Error("Expected the field `manifestFileName` to be a primitive type in the JSON string but got " + data['manifestFileName']);
        }
        // ensure the json data is a string
        if (data['scriptId'] && !(typeof data['scriptId'] === 'string' || data['scriptId'] instanceof String)) {
            throw new Error("Expected the field `scriptId` to be a primitive type in the JSON string but got " + data['scriptId']);
        }

        return true;
    }


}



/**
 * The description for this deployment.
 * @member {String} description
 */
DeploymentConfig.prototype['description'] = undefined;

/**
 * The manifest file name for this deployment.
 * @member {String} manifestFileName
 */
DeploymentConfig.prototype['manifestFileName'] = undefined;

/**
 * The script project's Drive ID.
 * @member {String} scriptId
 */
DeploymentConfig.prototype['scriptId'] = undefined;

/**
 * The version number on which this deployment is based.
 * @member {Number} versionNumber
 */
DeploymentConfig.prototype['versionNumber'] = undefined;






export default DeploymentConfig;

