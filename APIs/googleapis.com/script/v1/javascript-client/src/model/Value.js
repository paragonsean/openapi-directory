/**
 * Apps Script API
 * Manages and executes Google Apps Script projects. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ListValue from './ListValue';
import Struct from './Struct';

/**
 * The Value model module.
 * @module model/Value
 * @version v1
 */
class Value {
    /**
     * Constructs a new <code>Value</code>.
     * &#x60;Value&#x60; represents a dynamically typed value which is the outcome of an executed script.
     * @alias module:model/Value
     */
    constructor() { 
        
        Value.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Value</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Value} obj Optional instance to populate.
     * @return {module:model/Value} The populated <code>Value</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Value();

            if (data.hasOwnProperty('boolValue')) {
                obj['boolValue'] = ApiClient.convertToType(data['boolValue'], 'Boolean');
            }
            if (data.hasOwnProperty('bytesValue')) {
                obj['bytesValue'] = ApiClient.convertToType(data['bytesValue'], 'Blob');
            }
            if (data.hasOwnProperty('dateValue')) {
                obj['dateValue'] = ApiClient.convertToType(data['dateValue'], 'String');
            }
            if (data.hasOwnProperty('listValue')) {
                obj['listValue'] = ListValue.constructFromObject(data['listValue']);
            }
            if (data.hasOwnProperty('nullValue')) {
                obj['nullValue'] = ApiClient.convertToType(data['nullValue'], 'String');
            }
            if (data.hasOwnProperty('numberValue')) {
                obj['numberValue'] = ApiClient.convertToType(data['numberValue'], 'Number');
            }
            if (data.hasOwnProperty('protoValue')) {
                obj['protoValue'] = ApiClient.convertToType(data['protoValue'], {'String': Object});
            }
            if (data.hasOwnProperty('stringValue')) {
                obj['stringValue'] = ApiClient.convertToType(data['stringValue'], 'String');
            }
            if (data.hasOwnProperty('structValue')) {
                obj['structValue'] = Struct.constructFromObject(data['structValue']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Value</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Value</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dateValue'] && !(typeof data['dateValue'] === 'string' || data['dateValue'] instanceof String)) {
            throw new Error("Expected the field `dateValue` to be a primitive type in the JSON string but got " + data['dateValue']);
        }
        // validate the optional field `listValue`
        if (data['listValue']) { // data not null
          ListValue.validateJSON(data['listValue']);
        }
        // ensure the json data is a string
        if (data['nullValue'] && !(typeof data['nullValue'] === 'string' || data['nullValue'] instanceof String)) {
            throw new Error("Expected the field `nullValue` to be a primitive type in the JSON string but got " + data['nullValue']);
        }
        // ensure the json data is a string
        if (data['stringValue'] && !(typeof data['stringValue'] === 'string' || data['stringValue'] instanceof String)) {
            throw new Error("Expected the field `stringValue` to be a primitive type in the JSON string but got " + data['stringValue']);
        }
        // validate the optional field `structValue`
        if (data['structValue']) { // data not null
          Struct.validateJSON(data['structValue']);
        }

        return true;
    }


}



/**
 * Represents a boolean value.
 * @member {Boolean} boolValue
 */
Value.prototype['boolValue'] = undefined;

/**
 * Represents raw byte values.
 * @member {Blob} bytesValue
 */
Value.prototype['bytesValue'] = undefined;

/**
 * Represents a date in ms since the epoch.
 * @member {String} dateValue
 */
Value.prototype['dateValue'] = undefined;

/**
 * @member {module:model/ListValue} listValue
 */
Value.prototype['listValue'] = undefined;

/**
 * Represents a null value.
 * @member {module:model/Value.NullValueEnum} nullValue
 */
Value.prototype['nullValue'] = undefined;

/**
 * Represents a double value.
 * @member {Number} numberValue
 */
Value.prototype['numberValue'] = undefined;

/**
 * Represents a structured proto value.
 * @member {Object.<String, Object>} protoValue
 */
Value.prototype['protoValue'] = undefined;

/**
 * Represents a string value.
 * @member {String} stringValue
 */
Value.prototype['stringValue'] = undefined;

/**
 * @member {module:model/Struct} structValue
 */
Value.prototype['structValue'] = undefined;





/**
 * Allowed values for the <code>nullValue</code> property.
 * @enum {String}
 * @readonly
 */
Value['NullValueEnum'] = {

    /**
     * value: "NULL_VALUE"
     * @const
     */
    "NULL_VALUE": "NULL_VALUE"
};



export default Value;

