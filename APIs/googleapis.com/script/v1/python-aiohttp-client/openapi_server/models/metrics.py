# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metrics_value import MetricsValue
from openapi_server import util


class Metrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_users: List[MetricsValue]=None, failed_executions: List[MetricsValue]=None, total_executions: List[MetricsValue]=None):
        """Metrics - a model defined in OpenAPI

        :param active_users: The active_users of this Metrics.
        :param failed_executions: The failed_executions of this Metrics.
        :param total_executions: The total_executions of this Metrics.
        """
        self.openapi_types = {
            'active_users': List[MetricsValue],
            'failed_executions': List[MetricsValue],
            'total_executions': List[MetricsValue]
        }

        self.attribute_map = {
            'active_users': 'activeUsers',
            'failed_executions': 'failedExecutions',
            'total_executions': 'totalExecutions'
        }

        self._active_users = active_users
        self._failed_executions = failed_executions
        self._total_executions = total_executions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metrics of this Metrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_users(self):
        """Gets the active_users of this Metrics.

        Number of active users.

        :return: The active_users of this Metrics.
        :rtype: List[MetricsValue]
        """
        return self._active_users

    @active_users.setter
    def active_users(self, active_users):
        """Sets the active_users of this Metrics.

        Number of active users.

        :param active_users: The active_users of this Metrics.
        :type active_users: List[MetricsValue]
        """

        self._active_users = active_users

    @property
    def failed_executions(self):
        """Gets the failed_executions of this Metrics.

        Number of failed executions.

        :return: The failed_executions of this Metrics.
        :rtype: List[MetricsValue]
        """
        return self._failed_executions

    @failed_executions.setter
    def failed_executions(self, failed_executions):
        """Sets the failed_executions of this Metrics.

        Number of failed executions.

        :param failed_executions: The failed_executions of this Metrics.
        :type failed_executions: List[MetricsValue]
        """

        self._failed_executions = failed_executions

    @property
    def total_executions(self):
        """Gets the total_executions of this Metrics.

        Number of total executions.

        :return: The total_executions of this Metrics.
        :rtype: List[MetricsValue]
        """
        return self._total_executions

    @total_executions.setter
    def total_executions(self, total_executions):
        """Sets the total_executions of this Metrics.

        Number of total executions.

        :param total_executions: The total_executions of this Metrics.
        :type total_executions: List[MetricsValue]
        """

        self._total_executions = total_executions
