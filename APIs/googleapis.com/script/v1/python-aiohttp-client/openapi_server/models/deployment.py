# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployment_config import DeploymentConfig
from openapi_server.models.entry_point import EntryPoint
from openapi_server import util


class Deployment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployment_config: DeploymentConfig=None, deployment_id: str=None, entry_points: List[EntryPoint]=None, update_time: str=None):
        """Deployment - a model defined in OpenAPI

        :param deployment_config: The deployment_config of this Deployment.
        :param deployment_id: The deployment_id of this Deployment.
        :param entry_points: The entry_points of this Deployment.
        :param update_time: The update_time of this Deployment.
        """
        self.openapi_types = {
            'deployment_config': DeploymentConfig,
            'deployment_id': str,
            'entry_points': List[EntryPoint],
            'update_time': str
        }

        self.attribute_map = {
            'deployment_config': 'deploymentConfig',
            'deployment_id': 'deploymentId',
            'entry_points': 'entryPoints',
            'update_time': 'updateTime'
        }

        self._deployment_config = deployment_config
        self._deployment_id = deployment_id
        self._entry_points = entry_points
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Deployment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Deployment of this Deployment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployment_config(self):
        """Gets the deployment_config of this Deployment.


        :return: The deployment_config of this Deployment.
        :rtype: DeploymentConfig
        """
        return self._deployment_config

    @deployment_config.setter
    def deployment_config(self, deployment_config):
        """Sets the deployment_config of this Deployment.


        :param deployment_config: The deployment_config of this Deployment.
        :type deployment_config: DeploymentConfig
        """

        self._deployment_config = deployment_config

    @property
    def deployment_id(self):
        """Gets the deployment_id of this Deployment.

        The deployment ID for this deployment.

        :return: The deployment_id of this Deployment.
        :rtype: str
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id):
        """Sets the deployment_id of this Deployment.

        The deployment ID for this deployment.

        :param deployment_id: The deployment_id of this Deployment.
        :type deployment_id: str
        """

        self._deployment_id = deployment_id

    @property
    def entry_points(self):
        """Gets the entry_points of this Deployment.

        The deployment's entry points.

        :return: The entry_points of this Deployment.
        :rtype: List[EntryPoint]
        """
        return self._entry_points

    @entry_points.setter
    def entry_points(self, entry_points):
        """Sets the entry_points of this Deployment.

        The deployment's entry points.

        :param entry_points: The entry_points of this Deployment.
        :type entry_points: List[EntryPoint]
        """

        self._entry_points = entry_points

    @property
    def update_time(self):
        """Gets the update_time of this Deployment.

        Last modified date time stamp.

        :return: The update_time of this Deployment.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Deployment.

        Last modified date time stamp.

        :param update_time: The update_time of this Deployment.
        :type update_time: str
        """

        self._update_time = update_time
