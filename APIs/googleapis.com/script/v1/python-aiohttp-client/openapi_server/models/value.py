# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_value import ListValue
from openapi_server.models.struct import Struct
from openapi_server import util


class Value(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bool_value: bool=None, bytes_value: str=None, date_value: str=None, list_value: ListValue=None, null_value: str=None, number_value: float=None, proto_value: Dict[str, object]=None, string_value: str=None, struct_value: Struct=None):
        """Value - a model defined in OpenAPI

        :param bool_value: The bool_value of this Value.
        :param bytes_value: The bytes_value of this Value.
        :param date_value: The date_value of this Value.
        :param list_value: The list_value of this Value.
        :param null_value: The null_value of this Value.
        :param number_value: The number_value of this Value.
        :param proto_value: The proto_value of this Value.
        :param string_value: The string_value of this Value.
        :param struct_value: The struct_value of this Value.
        """
        self.openapi_types = {
            'bool_value': bool,
            'bytes_value': str,
            'date_value': str,
            'list_value': ListValue,
            'null_value': str,
            'number_value': float,
            'proto_value': Dict[str, object],
            'string_value': str,
            'struct_value': Struct
        }

        self.attribute_map = {
            'bool_value': 'boolValue',
            'bytes_value': 'bytesValue',
            'date_value': 'dateValue',
            'list_value': 'listValue',
            'null_value': 'nullValue',
            'number_value': 'numberValue',
            'proto_value': 'protoValue',
            'string_value': 'stringValue',
            'struct_value': 'structValue'
        }

        self._bool_value = bool_value
        self._bytes_value = bytes_value
        self._date_value = date_value
        self._list_value = list_value
        self._null_value = null_value
        self._number_value = number_value
        self._proto_value = proto_value
        self._string_value = string_value
        self._struct_value = struct_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Value':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Value of this Value.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bool_value(self):
        """Gets the bool_value of this Value.

        Represents a boolean value.

        :return: The bool_value of this Value.
        :rtype: bool
        """
        return self._bool_value

    @bool_value.setter
    def bool_value(self, bool_value):
        """Sets the bool_value of this Value.

        Represents a boolean value.

        :param bool_value: The bool_value of this Value.
        :type bool_value: bool
        """

        self._bool_value = bool_value

    @property
    def bytes_value(self):
        """Gets the bytes_value of this Value.

        Represents raw byte values.

        :return: The bytes_value of this Value.
        :rtype: str
        """
        return self._bytes_value

    @bytes_value.setter
    def bytes_value(self, bytes_value):
        """Sets the bytes_value of this Value.

        Represents raw byte values.

        :param bytes_value: The bytes_value of this Value.
        :type bytes_value: str
        """

        self._bytes_value = bytes_value

    @property
    def date_value(self):
        """Gets the date_value of this Value.

        Represents a date in ms since the epoch.

        :return: The date_value of this Value.
        :rtype: str
        """
        return self._date_value

    @date_value.setter
    def date_value(self, date_value):
        """Sets the date_value of this Value.

        Represents a date in ms since the epoch.

        :param date_value: The date_value of this Value.
        :type date_value: str
        """

        self._date_value = date_value

    @property
    def list_value(self):
        """Gets the list_value of this Value.


        :return: The list_value of this Value.
        :rtype: ListValue
        """
        return self._list_value

    @list_value.setter
    def list_value(self, list_value):
        """Sets the list_value of this Value.


        :param list_value: The list_value of this Value.
        :type list_value: ListValue
        """

        self._list_value = list_value

    @property
    def null_value(self):
        """Gets the null_value of this Value.

        Represents a null value.

        :return: The null_value of this Value.
        :rtype: str
        """
        return self._null_value

    @null_value.setter
    def null_value(self, null_value):
        """Sets the null_value of this Value.

        Represents a null value.

        :param null_value: The null_value of this Value.
        :type null_value: str
        """
        allowed_values = ["NULL_VALUE"]  # noqa: E501
        if null_value not in allowed_values:
            raise ValueError(
                "Invalid value for `null_value` ({0}), must be one of {1}"
                .format(null_value, allowed_values)
            )

        self._null_value = null_value

    @property
    def number_value(self):
        """Gets the number_value of this Value.

        Represents a double value.

        :return: The number_value of this Value.
        :rtype: float
        """
        return self._number_value

    @number_value.setter
    def number_value(self, number_value):
        """Sets the number_value of this Value.

        Represents a double value.

        :param number_value: The number_value of this Value.
        :type number_value: float
        """

        self._number_value = number_value

    @property
    def proto_value(self):
        """Gets the proto_value of this Value.

        Represents a structured proto value.

        :return: The proto_value of this Value.
        :rtype: Dict[str, object]
        """
        return self._proto_value

    @proto_value.setter
    def proto_value(self, proto_value):
        """Sets the proto_value of this Value.

        Represents a structured proto value.

        :param proto_value: The proto_value of this Value.
        :type proto_value: Dict[str, object]
        """

        self._proto_value = proto_value

    @property
    def string_value(self):
        """Gets the string_value of this Value.

        Represents a string value.

        :return: The string_value of this Value.
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this Value.

        Represents a string value.

        :param string_value: The string_value of this Value.
        :type string_value: str
        """

        self._string_value = string_value

    @property
    def struct_value(self):
        """Gets the struct_value of this Value.


        :return: The struct_value of this Value.
        :rtype: Struct
        """
        return self._struct_value

    @struct_value.setter
    def struct_value(self, struct_value):
        """Sets the struct_value of this Value.


        :param struct_value: The struct_value of this Value.
        :type struct_value: Struct
        """

        self._struct_value = struct_value
