# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleAppsScriptTypeWebAppConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: str=None, execute_as: str=None):
        """GoogleAppsScriptTypeWebAppConfig - a model defined in OpenAPI

        :param access: The access of this GoogleAppsScriptTypeWebAppConfig.
        :param execute_as: The execute_as of this GoogleAppsScriptTypeWebAppConfig.
        """
        self.openapi_types = {
            'access': str,
            'execute_as': str
        }

        self.attribute_map = {
            'access': 'access',
            'execute_as': 'executeAs'
        }

        self._access = access
        self._execute_as = execute_as

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAppsScriptTypeWebAppConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAppsScriptTypeWebAppConfig of this GoogleAppsScriptTypeWebAppConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this GoogleAppsScriptTypeWebAppConfig.

        Who has permission to run the web app.

        :return: The access of this GoogleAppsScriptTypeWebAppConfig.
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this GoogleAppsScriptTypeWebAppConfig.

        Who has permission to run the web app.

        :param access: The access of this GoogleAppsScriptTypeWebAppConfig.
        :type access: str
        """
        allowed_values = ["UNKNOWN_ACCESS", "MYSELF", "DOMAIN", "ANYONE", "ANYONE_ANONYMOUS"]  # noqa: E501
        if access not in allowed_values:
            raise ValueError(
                "Invalid value for `access` ({0}), must be one of {1}"
                .format(access, allowed_values)
            )

        self._access = access

    @property
    def execute_as(self):
        """Gets the execute_as of this GoogleAppsScriptTypeWebAppConfig.

        Who to execute the web app as.

        :return: The execute_as of this GoogleAppsScriptTypeWebAppConfig.
        :rtype: str
        """
        return self._execute_as

    @execute_as.setter
    def execute_as(self, execute_as):
        """Sets the execute_as of this GoogleAppsScriptTypeWebAppConfig.

        Who to execute the web app as.

        :param execute_as: The execute_as of this GoogleAppsScriptTypeWebAppConfig.
        :type execute_as: str
        """
        allowed_values = ["UNKNOWN_EXECUTE_AS", "USER_ACCESSING", "USER_DEPLOYING"]  # noqa: E501
        if execute_as not in allowed_values:
            raise ValueError(
                "Invalid value for `execute_as` ({0}), must be one of {1}"
                .format(execute_as, allowed_values)
            )

        self._execute_as = execute_as
