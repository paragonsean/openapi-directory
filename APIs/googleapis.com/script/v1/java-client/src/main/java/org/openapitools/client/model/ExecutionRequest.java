/*
 * Apps Script API
 * Manages and executes Google Apps Script projects. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request to run the function in a script. The script is identified by the specified &#x60;script_id&#x60;. Executing a function on a script returns results based on the implementation of the script.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:22.086382-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExecutionRequest {
  public static final String SERIALIZED_NAME_DEV_MODE = "devMode";
  @SerializedName(SERIALIZED_NAME_DEV_MODE)
  private Boolean devMode;

  public static final String SERIALIZED_NAME_FUNCTION = "function";
  @SerializedName(SERIALIZED_NAME_FUNCTION)
  private String function;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<Object> parameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_SESSION_STATE = "sessionState";
  @SerializedName(SERIALIZED_NAME_SESSION_STATE)
  private String sessionState;

  public ExecutionRequest() {
  }

  public ExecutionRequest devMode(Boolean devMode) {
    this.devMode = devMode;
    return this;
  }

  /**
   * If &#x60;true&#x60; and the user is an owner of the script, the script runs at the most recently saved version rather than the version deployed for use with the Apps Script API. Optional; default is &#x60;false&#x60;.
   * @return devMode
   */
  @javax.annotation.Nullable
  public Boolean getDevMode() {
    return devMode;
  }

  public void setDevMode(Boolean devMode) {
    this.devMode = devMode;
  }


  public ExecutionRequest function(String function) {
    this.function = function;
    return this;
  }

  /**
   * The name of the function to execute in the given script. The name does not include parentheses or parameters. It can reference a function in an included library such as &#x60;Library.libFunction1&#x60;.
   * @return function
   */
  @javax.annotation.Nullable
  public String getFunction() {
    return function;
  }

  public void setFunction(String function) {
    this.function = function;
  }


  public ExecutionRequest parameters(List<Object> parameters) {
    this.parameters = parameters;
    return this;
  }

  public ExecutionRequest addParametersItem(Object parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

  /**
   * The parameters to be passed to the function being executed. The object type for each parameter should match the expected type in Apps Script. Parameters cannot be Apps Script-specific object types (such as a &#x60;Document&#x60; or a &#x60;Calendar&#x60;); they can only be primitive types such as &#x60;string&#x60;, &#x60;number&#x60;, &#x60;array&#x60;, &#x60;object&#x60;, or &#x60;boolean&#x60;. Optional.
   * @return parameters
   */
  @javax.annotation.Nullable
  public List<Object> getParameters() {
    return parameters;
  }

  public void setParameters(List<Object> parameters) {
    this.parameters = parameters;
  }


  public ExecutionRequest sessionState(String sessionState) {
    this.sessionState = sessionState;
    return this;
  }

  /**
   * *Deprecated*. For use with Android add-ons only. An ID that represents the user&#39;s current session in the Android app for Google Docs or Sheets, included as extra data in the [Intent](https://developer.android.com/guide/components/intents-filters.html) that launches the add-on. When an Android add-on is run with a session state, it gains the privileges of a [bound](https://developers.google.com/apps-script/guides/bound) scriptâ€”that is, it can access information like the user&#39;s current cursor position (in Docs) or selected cell (in Sheets). To retrieve the state, call &#x60;Intent.getStringExtra(\&quot;com.google.android.apps.docs.addons.SessionState\&quot;)&#x60;. Optional.
   * @return sessionState
   */
  @javax.annotation.Nullable
  public String getSessionState() {
    return sessionState;
  }

  public void setSessionState(String sessionState) {
    this.sessionState = sessionState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecutionRequest executionRequest = (ExecutionRequest) o;
    return Objects.equals(this.devMode, executionRequest.devMode) &&
        Objects.equals(this.function, executionRequest.function) &&
        Objects.equals(this.parameters, executionRequest.parameters) &&
        Objects.equals(this.sessionState, executionRequest.sessionState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(devMode, function, parameters, sessionState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecutionRequest {\n");
    sb.append("    devMode: ").append(toIndentedString(devMode)).append("\n");
    sb.append("    function: ").append(toIndentedString(function)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    sessionState: ").append(toIndentedString(sessionState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("devMode");
    openapiFields.add("function");
    openapiFields.add("parameters");
    openapiFields.add("sessionState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExecutionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExecutionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExecutionRequest is not found in the empty JSON string", ExecutionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExecutionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExecutionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("function") != null && !jsonObj.get("function").isJsonNull()) && !jsonObj.get("function").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `function` to be a primitive type in the JSON string but got `%s`", jsonObj.get("function").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull() && !jsonObj.get("parameters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameters` to be an array in the JSON string but got `%s`", jsonObj.get("parameters").toString()));
      }
      if ((jsonObj.get("sessionState") != null && !jsonObj.get("sessionState").isJsonNull()) && !jsonObj.get("sessionState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExecutionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExecutionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExecutionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExecutionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ExecutionRequest>() {
           @Override
           public void write(JsonWriter out, ExecutionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExecutionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExecutionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExecutionRequest
   * @throws IOException if the JSON string is invalid with respect to ExecutionRequest
   */
  public static ExecutionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExecutionRequest.class);
  }

  /**
   * Convert an instance of ExecutionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

