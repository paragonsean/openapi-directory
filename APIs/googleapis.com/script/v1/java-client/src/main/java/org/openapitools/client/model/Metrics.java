/*
 * Apps Script API
 * Manages and executes Google Apps Script projects. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MetricsValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Resource containing usage stats for a given script, based on the supplied filter and mask present in the request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:22.086382-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Metrics {
  public static final String SERIALIZED_NAME_ACTIVE_USERS = "activeUsers";
  @SerializedName(SERIALIZED_NAME_ACTIVE_USERS)
  private List<MetricsValue> activeUsers = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAILED_EXECUTIONS = "failedExecutions";
  @SerializedName(SERIALIZED_NAME_FAILED_EXECUTIONS)
  private List<MetricsValue> failedExecutions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_EXECUTIONS = "totalExecutions";
  @SerializedName(SERIALIZED_NAME_TOTAL_EXECUTIONS)
  private List<MetricsValue> totalExecutions = new ArrayList<>();

  public Metrics() {
  }

  public Metrics activeUsers(List<MetricsValue> activeUsers) {
    this.activeUsers = activeUsers;
    return this;
  }

  public Metrics addActiveUsersItem(MetricsValue activeUsersItem) {
    if (this.activeUsers == null) {
      this.activeUsers = new ArrayList<>();
    }
    this.activeUsers.add(activeUsersItem);
    return this;
  }

  /**
   * Number of active users.
   * @return activeUsers
   */
  @javax.annotation.Nullable
  public List<MetricsValue> getActiveUsers() {
    return activeUsers;
  }

  public void setActiveUsers(List<MetricsValue> activeUsers) {
    this.activeUsers = activeUsers;
  }


  public Metrics failedExecutions(List<MetricsValue> failedExecutions) {
    this.failedExecutions = failedExecutions;
    return this;
  }

  public Metrics addFailedExecutionsItem(MetricsValue failedExecutionsItem) {
    if (this.failedExecutions == null) {
      this.failedExecutions = new ArrayList<>();
    }
    this.failedExecutions.add(failedExecutionsItem);
    return this;
  }

  /**
   * Number of failed executions.
   * @return failedExecutions
   */
  @javax.annotation.Nullable
  public List<MetricsValue> getFailedExecutions() {
    return failedExecutions;
  }

  public void setFailedExecutions(List<MetricsValue> failedExecutions) {
    this.failedExecutions = failedExecutions;
  }


  public Metrics totalExecutions(List<MetricsValue> totalExecutions) {
    this.totalExecutions = totalExecutions;
    return this;
  }

  public Metrics addTotalExecutionsItem(MetricsValue totalExecutionsItem) {
    if (this.totalExecutions == null) {
      this.totalExecutions = new ArrayList<>();
    }
    this.totalExecutions.add(totalExecutionsItem);
    return this;
  }

  /**
   * Number of total executions.
   * @return totalExecutions
   */
  @javax.annotation.Nullable
  public List<MetricsValue> getTotalExecutions() {
    return totalExecutions;
  }

  public void setTotalExecutions(List<MetricsValue> totalExecutions) {
    this.totalExecutions = totalExecutions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Metrics metrics = (Metrics) o;
    return Objects.equals(this.activeUsers, metrics.activeUsers) &&
        Objects.equals(this.failedExecutions, metrics.failedExecutions) &&
        Objects.equals(this.totalExecutions, metrics.totalExecutions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeUsers, failedExecutions, totalExecutions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Metrics {\n");
    sb.append("    activeUsers: ").append(toIndentedString(activeUsers)).append("\n");
    sb.append("    failedExecutions: ").append(toIndentedString(failedExecutions)).append("\n");
    sb.append("    totalExecutions: ").append(toIndentedString(totalExecutions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeUsers");
    openapiFields.add("failedExecutions");
    openapiFields.add("totalExecutions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Metrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Metrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Metrics is not found in the empty JSON string", Metrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Metrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Metrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("activeUsers") != null && !jsonObj.get("activeUsers").isJsonNull()) {
        JsonArray jsonArrayactiveUsers = jsonObj.getAsJsonArray("activeUsers");
        if (jsonArrayactiveUsers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("activeUsers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `activeUsers` to be an array in the JSON string but got `%s`", jsonObj.get("activeUsers").toString()));
          }

          // validate the optional field `activeUsers` (array)
          for (int i = 0; i < jsonArrayactiveUsers.size(); i++) {
            MetricsValue.validateJsonElement(jsonArrayactiveUsers.get(i));
          };
        }
      }
      if (jsonObj.get("failedExecutions") != null && !jsonObj.get("failedExecutions").isJsonNull()) {
        JsonArray jsonArrayfailedExecutions = jsonObj.getAsJsonArray("failedExecutions");
        if (jsonArrayfailedExecutions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("failedExecutions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `failedExecutions` to be an array in the JSON string but got `%s`", jsonObj.get("failedExecutions").toString()));
          }

          // validate the optional field `failedExecutions` (array)
          for (int i = 0; i < jsonArrayfailedExecutions.size(); i++) {
            MetricsValue.validateJsonElement(jsonArrayfailedExecutions.get(i));
          };
        }
      }
      if (jsonObj.get("totalExecutions") != null && !jsonObj.get("totalExecutions").isJsonNull()) {
        JsonArray jsonArraytotalExecutions = jsonObj.getAsJsonArray("totalExecutions");
        if (jsonArraytotalExecutions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("totalExecutions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `totalExecutions` to be an array in the JSON string but got `%s`", jsonObj.get("totalExecutions").toString()));
          }

          // validate the optional field `totalExecutions` (array)
          for (int i = 0; i < jsonArraytotalExecutions.size(); i++) {
            MetricsValue.validateJsonElement(jsonArraytotalExecutions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Metrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Metrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Metrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Metrics.class));

       return (TypeAdapter<T>) new TypeAdapter<Metrics>() {
           @Override
           public void write(JsonWriter out, Metrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Metrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Metrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Metrics
   * @throws IOException if the JSON string is invalid with respect to Metrics
   */
  public static Metrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Metrics.class);
  }

  /**
   * Convert an instance of Metrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

