/*
 * Apps Script API
 * Manages and executes Google Apps Script projects. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ListValue;
import org.openapitools.client.model.Struct;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &#x60;Value&#x60; represents a dynamically typed value which is the outcome of an executed script.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:22.086382-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Value {
  public static final String SERIALIZED_NAME_BOOL_VALUE = "boolValue";
  @SerializedName(SERIALIZED_NAME_BOOL_VALUE)
  private Boolean boolValue;

  public static final String SERIALIZED_NAME_BYTES_VALUE = "bytesValue";
  @SerializedName(SERIALIZED_NAME_BYTES_VALUE)
  private byte[] bytesValue;

  public static final String SERIALIZED_NAME_DATE_VALUE = "dateValue";
  @SerializedName(SERIALIZED_NAME_DATE_VALUE)
  private String dateValue;

  public static final String SERIALIZED_NAME_LIST_VALUE = "listValue";
  @SerializedName(SERIALIZED_NAME_LIST_VALUE)
  private ListValue listValue;

  /**
   * Represents a null value.
   */
  @JsonAdapter(NullValueEnum.Adapter.class)
  public enum NullValueEnum {
    NULL_VALUE("NULL_VALUE");

    private String value;

    NullValueEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NullValueEnum fromValue(String value) {
      for (NullValueEnum b : NullValueEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NullValueEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NullValueEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NullValueEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NullValueEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NullValueEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NULL_VALUE = "nullValue";
  @SerializedName(SERIALIZED_NAME_NULL_VALUE)
  private NullValueEnum nullValue;

  public static final String SERIALIZED_NAME_NUMBER_VALUE = "numberValue";
  @SerializedName(SERIALIZED_NAME_NUMBER_VALUE)
  private Double numberValue;

  public static final String SERIALIZED_NAME_PROTO_VALUE = "protoValue";
  @SerializedName(SERIALIZED_NAME_PROTO_VALUE)
  private Map<String, Object> protoValue = new HashMap<>();

  public static final String SERIALIZED_NAME_STRING_VALUE = "stringValue";
  @SerializedName(SERIALIZED_NAME_STRING_VALUE)
  private String stringValue;

  public static final String SERIALIZED_NAME_STRUCT_VALUE = "structValue";
  @SerializedName(SERIALIZED_NAME_STRUCT_VALUE)
  private Struct structValue;

  public Value() {
  }

  public Value boolValue(Boolean boolValue) {
    this.boolValue = boolValue;
    return this;
  }

  /**
   * Represents a boolean value.
   * @return boolValue
   */
  @javax.annotation.Nullable
  public Boolean getBoolValue() {
    return boolValue;
  }

  public void setBoolValue(Boolean boolValue) {
    this.boolValue = boolValue;
  }


  public Value bytesValue(byte[] bytesValue) {
    this.bytesValue = bytesValue;
    return this;
  }

  /**
   * Represents raw byte values.
   * @return bytesValue
   */
  @javax.annotation.Nullable
  public byte[] getBytesValue() {
    return bytesValue;
  }

  public void setBytesValue(byte[] bytesValue) {
    this.bytesValue = bytesValue;
  }


  public Value dateValue(String dateValue) {
    this.dateValue = dateValue;
    return this;
  }

  /**
   * Represents a date in ms since the epoch.
   * @return dateValue
   */
  @javax.annotation.Nullable
  public String getDateValue() {
    return dateValue;
  }

  public void setDateValue(String dateValue) {
    this.dateValue = dateValue;
  }


  public Value listValue(ListValue listValue) {
    this.listValue = listValue;
    return this;
  }

  /**
   * Get listValue
   * @return listValue
   */
  @javax.annotation.Nullable
  public ListValue getListValue() {
    return listValue;
  }

  public void setListValue(ListValue listValue) {
    this.listValue = listValue;
  }


  public Value nullValue(NullValueEnum nullValue) {
    this.nullValue = nullValue;
    return this;
  }

  /**
   * Represents a null value.
   * @return nullValue
   */
  @javax.annotation.Nullable
  public NullValueEnum getNullValue() {
    return nullValue;
  }

  public void setNullValue(NullValueEnum nullValue) {
    this.nullValue = nullValue;
  }


  public Value numberValue(Double numberValue) {
    this.numberValue = numberValue;
    return this;
  }

  /**
   * Represents a double value.
   * @return numberValue
   */
  @javax.annotation.Nullable
  public Double getNumberValue() {
    return numberValue;
  }

  public void setNumberValue(Double numberValue) {
    this.numberValue = numberValue;
  }


  public Value protoValue(Map<String, Object> protoValue) {
    this.protoValue = protoValue;
    return this;
  }

  public Value putProtoValueItem(String key, Object protoValueItem) {
    if (this.protoValue == null) {
      this.protoValue = new HashMap<>();
    }
    this.protoValue.put(key, protoValueItem);
    return this;
  }

  /**
   * Represents a structured proto value.
   * @return protoValue
   */
  @javax.annotation.Nullable
  public Map<String, Object> getProtoValue() {
    return protoValue;
  }

  public void setProtoValue(Map<String, Object> protoValue) {
    this.protoValue = protoValue;
  }


  public Value stringValue(String stringValue) {
    this.stringValue = stringValue;
    return this;
  }

  /**
   * Represents a string value.
   * @return stringValue
   */
  @javax.annotation.Nullable
  public String getStringValue() {
    return stringValue;
  }

  public void setStringValue(String stringValue) {
    this.stringValue = stringValue;
  }


  public Value structValue(Struct structValue) {
    this.structValue = structValue;
    return this;
  }

  /**
   * Get structValue
   * @return structValue
   */
  @javax.annotation.Nullable
  public Struct getStructValue() {
    return structValue;
  }

  public void setStructValue(Struct structValue) {
    this.structValue = structValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Value value = (Value) o;
    return Objects.equals(this.boolValue, value.boolValue) &&
        Arrays.equals(this.bytesValue, value.bytesValue) &&
        Objects.equals(this.dateValue, value.dateValue) &&
        Objects.equals(this.listValue, value.listValue) &&
        Objects.equals(this.nullValue, value.nullValue) &&
        Objects.equals(this.numberValue, value.numberValue) &&
        Objects.equals(this.protoValue, value.protoValue) &&
        Objects.equals(this.stringValue, value.stringValue) &&
        Objects.equals(this.structValue, value.structValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boolValue, Arrays.hashCode(bytesValue), dateValue, listValue, nullValue, numberValue, protoValue, stringValue, structValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Value {\n");
    sb.append("    boolValue: ").append(toIndentedString(boolValue)).append("\n");
    sb.append("    bytesValue: ").append(toIndentedString(bytesValue)).append("\n");
    sb.append("    dateValue: ").append(toIndentedString(dateValue)).append("\n");
    sb.append("    listValue: ").append(toIndentedString(listValue)).append("\n");
    sb.append("    nullValue: ").append(toIndentedString(nullValue)).append("\n");
    sb.append("    numberValue: ").append(toIndentedString(numberValue)).append("\n");
    sb.append("    protoValue: ").append(toIndentedString(protoValue)).append("\n");
    sb.append("    stringValue: ").append(toIndentedString(stringValue)).append("\n");
    sb.append("    structValue: ").append(toIndentedString(structValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boolValue");
    openapiFields.add("bytesValue");
    openapiFields.add("dateValue");
    openapiFields.add("listValue");
    openapiFields.add("nullValue");
    openapiFields.add("numberValue");
    openapiFields.add("protoValue");
    openapiFields.add("stringValue");
    openapiFields.add("structValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Value
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Value.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Value is not found in the empty JSON string", Value.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Value.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Value` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dateValue") != null && !jsonObj.get("dateValue").isJsonNull()) && !jsonObj.get("dateValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateValue").toString()));
      }
      // validate the optional field `listValue`
      if (jsonObj.get("listValue") != null && !jsonObj.get("listValue").isJsonNull()) {
        ListValue.validateJsonElement(jsonObj.get("listValue"));
      }
      if ((jsonObj.get("nullValue") != null && !jsonObj.get("nullValue").isJsonNull()) && !jsonObj.get("nullValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nullValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nullValue").toString()));
      }
      // validate the optional field `nullValue`
      if (jsonObj.get("nullValue") != null && !jsonObj.get("nullValue").isJsonNull()) {
        NullValueEnum.validateJsonElement(jsonObj.get("nullValue"));
      }
      if ((jsonObj.get("stringValue") != null && !jsonObj.get("stringValue").isJsonNull()) && !jsonObj.get("stringValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stringValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stringValue").toString()));
      }
      // validate the optional field `structValue`
      if (jsonObj.get("structValue") != null && !jsonObj.get("structValue").isJsonNull()) {
        Struct.validateJsonElement(jsonObj.get("structValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Value.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Value' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Value> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Value.class));

       return (TypeAdapter<T>) new TypeAdapter<Value>() {
           @Override
           public void write(JsonWriter out, Value value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Value read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Value given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Value
   * @throws IOException if the JSON string is invalid with respect to Value
   */
  public static Value fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Value.class);
  }

  /**
   * Convert an instance of Value to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

