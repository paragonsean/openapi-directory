/*
 * Apps Script API
 * Manages and executes Google Apps Script projects. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListScriptProcessesResponse;
import org.openapitools.client.model.ListUserProcessesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProcessesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProcessesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProcessesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for scriptProcessesList
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param pageSize The maximum number of returned processes per page of results. Defaults to 50. (optional)
     * @param pageToken The token for continuing a previous list request on the next page. This should be set to the value of &#x60;nextPageToken&#x60; from a previous response. (optional)
     * @param userProcessFilterDeploymentId Optional field used to limit returned processes to those originating from projects with a specific deployment ID. (optional)
     * @param userProcessFilterEndTime Optional field used to limit returned processes to those that completed on or before the given timestamp. (optional)
     * @param userProcessFilterFunctionName Optional field used to limit returned processes to those originating from a script function with the given function name. (optional)
     * @param userProcessFilterProjectName Optional field used to limit returned processes to those originating from projects with project names containing a specific string. (optional)
     * @param userProcessFilterScriptId Optional field used to limit returned processes to those originating from projects with a specific script ID. (optional)
     * @param userProcessFilterStartTime Optional field used to limit returned processes to those that were started on or after the given timestamp. (optional)
     * @param userProcessFilterStatuses Optional field used to limit returned processes to those having one of the specified process statuses. (optional)
     * @param userProcessFilterTypes Optional field used to limit returned processes to those having one of the specified process types. (optional)
     * @param userProcessFilterUserAccessLevels Optional field used to limit returned processes to those having one of the specified user access levels. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptProcessesListCall(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer pageSize, String pageToken, String userProcessFilterDeploymentId, String userProcessFilterEndTime, String userProcessFilterFunctionName, String userProcessFilterProjectName, String userProcessFilterScriptId, String userProcessFilterStartTime, List<String> userProcessFilterStatuses, List<String> userProcessFilterTypes, List<String> userProcessFilterUserAccessLevels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/processes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (userProcessFilterDeploymentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProcessFilter.deploymentId", userProcessFilterDeploymentId));
        }

        if (userProcessFilterEndTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProcessFilter.endTime", userProcessFilterEndTime));
        }

        if (userProcessFilterFunctionName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProcessFilter.functionName", userProcessFilterFunctionName));
        }

        if (userProcessFilterProjectName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProcessFilter.projectName", userProcessFilterProjectName));
        }

        if (userProcessFilterScriptId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProcessFilter.scriptId", userProcessFilterScriptId));
        }

        if (userProcessFilterStartTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProcessFilter.startTime", userProcessFilterStartTime));
        }

        if (userProcessFilterStatuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "userProcessFilter.statuses", userProcessFilterStatuses));
        }

        if (userProcessFilterTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "userProcessFilter.types", userProcessFilterTypes));
        }

        if (userProcessFilterUserAccessLevels != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "userProcessFilter.userAccessLevels", userProcessFilterUserAccessLevels));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scriptProcessesListValidateBeforeCall(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer pageSize, String pageToken, String userProcessFilterDeploymentId, String userProcessFilterEndTime, String userProcessFilterFunctionName, String userProcessFilterProjectName, String userProcessFilterScriptId, String userProcessFilterStartTime, List<String> userProcessFilterStatuses, List<String> userProcessFilterTypes, List<String> userProcessFilterUserAccessLevels, final ApiCallback _callback) throws ApiException {
        return scriptProcessesListCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, userProcessFilterDeploymentId, userProcessFilterEndTime, userProcessFilterFunctionName, userProcessFilterProjectName, userProcessFilterScriptId, userProcessFilterStartTime, userProcessFilterStatuses, userProcessFilterTypes, userProcessFilterUserAccessLevels, _callback);

    }

    /**
     * 
     * List information about processes made by or on behalf of a user, such as process type and current status.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param pageSize The maximum number of returned processes per page of results. Defaults to 50. (optional)
     * @param pageToken The token for continuing a previous list request on the next page. This should be set to the value of &#x60;nextPageToken&#x60; from a previous response. (optional)
     * @param userProcessFilterDeploymentId Optional field used to limit returned processes to those originating from projects with a specific deployment ID. (optional)
     * @param userProcessFilterEndTime Optional field used to limit returned processes to those that completed on or before the given timestamp. (optional)
     * @param userProcessFilterFunctionName Optional field used to limit returned processes to those originating from a script function with the given function name. (optional)
     * @param userProcessFilterProjectName Optional field used to limit returned processes to those originating from projects with project names containing a specific string. (optional)
     * @param userProcessFilterScriptId Optional field used to limit returned processes to those originating from projects with a specific script ID. (optional)
     * @param userProcessFilterStartTime Optional field used to limit returned processes to those that were started on or after the given timestamp. (optional)
     * @param userProcessFilterStatuses Optional field used to limit returned processes to those having one of the specified process statuses. (optional)
     * @param userProcessFilterTypes Optional field used to limit returned processes to those having one of the specified process types. (optional)
     * @param userProcessFilterUserAccessLevels Optional field used to limit returned processes to those having one of the specified user access levels. (optional)
     * @return ListUserProcessesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ListUserProcessesResponse scriptProcessesList(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer pageSize, String pageToken, String userProcessFilterDeploymentId, String userProcessFilterEndTime, String userProcessFilterFunctionName, String userProcessFilterProjectName, String userProcessFilterScriptId, String userProcessFilterStartTime, List<String> userProcessFilterStatuses, List<String> userProcessFilterTypes, List<String> userProcessFilterUserAccessLevels) throws ApiException {
        ApiResponse<ListUserProcessesResponse> localVarResp = scriptProcessesListWithHttpInfo($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, userProcessFilterDeploymentId, userProcessFilterEndTime, userProcessFilterFunctionName, userProcessFilterProjectName, userProcessFilterScriptId, userProcessFilterStartTime, userProcessFilterStatuses, userProcessFilterTypes, userProcessFilterUserAccessLevels);
        return localVarResp.getData();
    }

    /**
     * 
     * List information about processes made by or on behalf of a user, such as process type and current status.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param pageSize The maximum number of returned processes per page of results. Defaults to 50. (optional)
     * @param pageToken The token for continuing a previous list request on the next page. This should be set to the value of &#x60;nextPageToken&#x60; from a previous response. (optional)
     * @param userProcessFilterDeploymentId Optional field used to limit returned processes to those originating from projects with a specific deployment ID. (optional)
     * @param userProcessFilterEndTime Optional field used to limit returned processes to those that completed on or before the given timestamp. (optional)
     * @param userProcessFilterFunctionName Optional field used to limit returned processes to those originating from a script function with the given function name. (optional)
     * @param userProcessFilterProjectName Optional field used to limit returned processes to those originating from projects with project names containing a specific string. (optional)
     * @param userProcessFilterScriptId Optional field used to limit returned processes to those originating from projects with a specific script ID. (optional)
     * @param userProcessFilterStartTime Optional field used to limit returned processes to those that were started on or after the given timestamp. (optional)
     * @param userProcessFilterStatuses Optional field used to limit returned processes to those having one of the specified process statuses. (optional)
     * @param userProcessFilterTypes Optional field used to limit returned processes to those having one of the specified process types. (optional)
     * @param userProcessFilterUserAccessLevels Optional field used to limit returned processes to those having one of the specified user access levels. (optional)
     * @return ApiResponse&lt;ListUserProcessesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListUserProcessesResponse> scriptProcessesListWithHttpInfo(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer pageSize, String pageToken, String userProcessFilterDeploymentId, String userProcessFilterEndTime, String userProcessFilterFunctionName, String userProcessFilterProjectName, String userProcessFilterScriptId, String userProcessFilterStartTime, List<String> userProcessFilterStatuses, List<String> userProcessFilterTypes, List<String> userProcessFilterUserAccessLevels) throws ApiException {
        okhttp3.Call localVarCall = scriptProcessesListValidateBeforeCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, userProcessFilterDeploymentId, userProcessFilterEndTime, userProcessFilterFunctionName, userProcessFilterProjectName, userProcessFilterScriptId, userProcessFilterStartTime, userProcessFilterStatuses, userProcessFilterTypes, userProcessFilterUserAccessLevels, null);
        Type localVarReturnType = new TypeToken<ListUserProcessesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List information about processes made by or on behalf of a user, such as process type and current status.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param pageSize The maximum number of returned processes per page of results. Defaults to 50. (optional)
     * @param pageToken The token for continuing a previous list request on the next page. This should be set to the value of &#x60;nextPageToken&#x60; from a previous response. (optional)
     * @param userProcessFilterDeploymentId Optional field used to limit returned processes to those originating from projects with a specific deployment ID. (optional)
     * @param userProcessFilterEndTime Optional field used to limit returned processes to those that completed on or before the given timestamp. (optional)
     * @param userProcessFilterFunctionName Optional field used to limit returned processes to those originating from a script function with the given function name. (optional)
     * @param userProcessFilterProjectName Optional field used to limit returned processes to those originating from projects with project names containing a specific string. (optional)
     * @param userProcessFilterScriptId Optional field used to limit returned processes to those originating from projects with a specific script ID. (optional)
     * @param userProcessFilterStartTime Optional field used to limit returned processes to those that were started on or after the given timestamp. (optional)
     * @param userProcessFilterStatuses Optional field used to limit returned processes to those having one of the specified process statuses. (optional)
     * @param userProcessFilterTypes Optional field used to limit returned processes to those having one of the specified process types. (optional)
     * @param userProcessFilterUserAccessLevels Optional field used to limit returned processes to those having one of the specified user access levels. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptProcessesListAsync(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer pageSize, String pageToken, String userProcessFilterDeploymentId, String userProcessFilterEndTime, String userProcessFilterFunctionName, String userProcessFilterProjectName, String userProcessFilterScriptId, String userProcessFilterStartTime, List<String> userProcessFilterStatuses, List<String> userProcessFilterTypes, List<String> userProcessFilterUserAccessLevels, final ApiCallback<ListUserProcessesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = scriptProcessesListValidateBeforeCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, userProcessFilterDeploymentId, userProcessFilterEndTime, userProcessFilterFunctionName, userProcessFilterProjectName, userProcessFilterScriptId, userProcessFilterStartTime, userProcessFilterStatuses, userProcessFilterTypes, userProcessFilterUserAccessLevels, _callback);
        Type localVarReturnType = new TypeToken<ListUserProcessesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scriptProcessesListScriptProcesses
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param pageSize The maximum number of returned processes per page of results. Defaults to 50. (optional)
     * @param pageToken The token for continuing a previous list request on the next page. This should be set to the value of &#x60;nextPageToken&#x60; from a previous response. (optional)
     * @param scriptId The script ID of the project whose processes are listed. (optional)
     * @param scriptProcessFilterDeploymentId Optional field used to limit returned processes to those originating from projects with a specific deployment ID. (optional)
     * @param scriptProcessFilterEndTime Optional field used to limit returned processes to those that completed on or before the given timestamp. (optional)
     * @param scriptProcessFilterFunctionName Optional field used to limit returned processes to those originating from a script function with the given function name. (optional)
     * @param scriptProcessFilterStartTime Optional field used to limit returned processes to those that were started on or after the given timestamp. (optional)
     * @param scriptProcessFilterStatuses Optional field used to limit returned processes to those having one of the specified process statuses. (optional)
     * @param scriptProcessFilterTypes Optional field used to limit returned processes to those having one of the specified process types. (optional)
     * @param scriptProcessFilterUserAccessLevels Optional field used to limit returned processes to those having one of the specified user access levels. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptProcessesListScriptProcessesCall(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer pageSize, String pageToken, String scriptId, String scriptProcessFilterDeploymentId, String scriptProcessFilterEndTime, String scriptProcessFilterFunctionName, String scriptProcessFilterStartTime, List<String> scriptProcessFilterStatuses, List<String> scriptProcessFilterTypes, List<String> scriptProcessFilterUserAccessLevels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/processes:listScriptProcesses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (scriptId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scriptId", scriptId));
        }

        if (scriptProcessFilterDeploymentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scriptProcessFilter.deploymentId", scriptProcessFilterDeploymentId));
        }

        if (scriptProcessFilterEndTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scriptProcessFilter.endTime", scriptProcessFilterEndTime));
        }

        if (scriptProcessFilterFunctionName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scriptProcessFilter.functionName", scriptProcessFilterFunctionName));
        }

        if (scriptProcessFilterStartTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scriptProcessFilter.startTime", scriptProcessFilterStartTime));
        }

        if (scriptProcessFilterStatuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "scriptProcessFilter.statuses", scriptProcessFilterStatuses));
        }

        if (scriptProcessFilterTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "scriptProcessFilter.types", scriptProcessFilterTypes));
        }

        if (scriptProcessFilterUserAccessLevels != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "scriptProcessFilter.userAccessLevels", scriptProcessFilterUserAccessLevels));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scriptProcessesListScriptProcessesValidateBeforeCall(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer pageSize, String pageToken, String scriptId, String scriptProcessFilterDeploymentId, String scriptProcessFilterEndTime, String scriptProcessFilterFunctionName, String scriptProcessFilterStartTime, List<String> scriptProcessFilterStatuses, List<String> scriptProcessFilterTypes, List<String> scriptProcessFilterUserAccessLevels, final ApiCallback _callback) throws ApiException {
        return scriptProcessesListScriptProcessesCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, scriptId, scriptProcessFilterDeploymentId, scriptProcessFilterEndTime, scriptProcessFilterFunctionName, scriptProcessFilterStartTime, scriptProcessFilterStatuses, scriptProcessFilterTypes, scriptProcessFilterUserAccessLevels, _callback);

    }

    /**
     * 
     * List information about a script&#39;s executed processes, such as process type and current status.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param pageSize The maximum number of returned processes per page of results. Defaults to 50. (optional)
     * @param pageToken The token for continuing a previous list request on the next page. This should be set to the value of &#x60;nextPageToken&#x60; from a previous response. (optional)
     * @param scriptId The script ID of the project whose processes are listed. (optional)
     * @param scriptProcessFilterDeploymentId Optional field used to limit returned processes to those originating from projects with a specific deployment ID. (optional)
     * @param scriptProcessFilterEndTime Optional field used to limit returned processes to those that completed on or before the given timestamp. (optional)
     * @param scriptProcessFilterFunctionName Optional field used to limit returned processes to those originating from a script function with the given function name. (optional)
     * @param scriptProcessFilterStartTime Optional field used to limit returned processes to those that were started on or after the given timestamp. (optional)
     * @param scriptProcessFilterStatuses Optional field used to limit returned processes to those having one of the specified process statuses. (optional)
     * @param scriptProcessFilterTypes Optional field used to limit returned processes to those having one of the specified process types. (optional)
     * @param scriptProcessFilterUserAccessLevels Optional field used to limit returned processes to those having one of the specified user access levels. (optional)
     * @return ListScriptProcessesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ListScriptProcessesResponse scriptProcessesListScriptProcesses(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer pageSize, String pageToken, String scriptId, String scriptProcessFilterDeploymentId, String scriptProcessFilterEndTime, String scriptProcessFilterFunctionName, String scriptProcessFilterStartTime, List<String> scriptProcessFilterStatuses, List<String> scriptProcessFilterTypes, List<String> scriptProcessFilterUserAccessLevels) throws ApiException {
        ApiResponse<ListScriptProcessesResponse> localVarResp = scriptProcessesListScriptProcessesWithHttpInfo($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, scriptId, scriptProcessFilterDeploymentId, scriptProcessFilterEndTime, scriptProcessFilterFunctionName, scriptProcessFilterStartTime, scriptProcessFilterStatuses, scriptProcessFilterTypes, scriptProcessFilterUserAccessLevels);
        return localVarResp.getData();
    }

    /**
     * 
     * List information about a script&#39;s executed processes, such as process type and current status.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param pageSize The maximum number of returned processes per page of results. Defaults to 50. (optional)
     * @param pageToken The token for continuing a previous list request on the next page. This should be set to the value of &#x60;nextPageToken&#x60; from a previous response. (optional)
     * @param scriptId The script ID of the project whose processes are listed. (optional)
     * @param scriptProcessFilterDeploymentId Optional field used to limit returned processes to those originating from projects with a specific deployment ID. (optional)
     * @param scriptProcessFilterEndTime Optional field used to limit returned processes to those that completed on or before the given timestamp. (optional)
     * @param scriptProcessFilterFunctionName Optional field used to limit returned processes to those originating from a script function with the given function name. (optional)
     * @param scriptProcessFilterStartTime Optional field used to limit returned processes to those that were started on or after the given timestamp. (optional)
     * @param scriptProcessFilterStatuses Optional field used to limit returned processes to those having one of the specified process statuses. (optional)
     * @param scriptProcessFilterTypes Optional field used to limit returned processes to those having one of the specified process types. (optional)
     * @param scriptProcessFilterUserAccessLevels Optional field used to limit returned processes to those having one of the specified user access levels. (optional)
     * @return ApiResponse&lt;ListScriptProcessesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListScriptProcessesResponse> scriptProcessesListScriptProcessesWithHttpInfo(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer pageSize, String pageToken, String scriptId, String scriptProcessFilterDeploymentId, String scriptProcessFilterEndTime, String scriptProcessFilterFunctionName, String scriptProcessFilterStartTime, List<String> scriptProcessFilterStatuses, List<String> scriptProcessFilterTypes, List<String> scriptProcessFilterUserAccessLevels) throws ApiException {
        okhttp3.Call localVarCall = scriptProcessesListScriptProcessesValidateBeforeCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, scriptId, scriptProcessFilterDeploymentId, scriptProcessFilterEndTime, scriptProcessFilterFunctionName, scriptProcessFilterStartTime, scriptProcessFilterStatuses, scriptProcessFilterTypes, scriptProcessFilterUserAccessLevels, null);
        Type localVarReturnType = new TypeToken<ListScriptProcessesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List information about a script&#39;s executed processes, such as process type and current status.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param pageSize The maximum number of returned processes per page of results. Defaults to 50. (optional)
     * @param pageToken The token for continuing a previous list request on the next page. This should be set to the value of &#x60;nextPageToken&#x60; from a previous response. (optional)
     * @param scriptId The script ID of the project whose processes are listed. (optional)
     * @param scriptProcessFilterDeploymentId Optional field used to limit returned processes to those originating from projects with a specific deployment ID. (optional)
     * @param scriptProcessFilterEndTime Optional field used to limit returned processes to those that completed on or before the given timestamp. (optional)
     * @param scriptProcessFilterFunctionName Optional field used to limit returned processes to those originating from a script function with the given function name. (optional)
     * @param scriptProcessFilterStartTime Optional field used to limit returned processes to those that were started on or after the given timestamp. (optional)
     * @param scriptProcessFilterStatuses Optional field used to limit returned processes to those having one of the specified process statuses. (optional)
     * @param scriptProcessFilterTypes Optional field used to limit returned processes to those having one of the specified process types. (optional)
     * @param scriptProcessFilterUserAccessLevels Optional field used to limit returned processes to those having one of the specified user access levels. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptProcessesListScriptProcessesAsync(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer pageSize, String pageToken, String scriptId, String scriptProcessFilterDeploymentId, String scriptProcessFilterEndTime, String scriptProcessFilterFunctionName, String scriptProcessFilterStartTime, List<String> scriptProcessFilterStatuses, List<String> scriptProcessFilterTypes, List<String> scriptProcessFilterUserAccessLevels, final ApiCallback<ListScriptProcessesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = scriptProcessesListScriptProcessesValidateBeforeCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, scriptId, scriptProcessFilterDeploymentId, scriptProcessFilterEndTime, scriptProcessFilterFunctionName, scriptProcessFilterStartTime, scriptProcessFilterStatuses, scriptProcessFilterTypes, scriptProcessFilterUserAccessLevels, _callback);
        Type localVarReturnType = new TypeToken<ListScriptProcessesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
