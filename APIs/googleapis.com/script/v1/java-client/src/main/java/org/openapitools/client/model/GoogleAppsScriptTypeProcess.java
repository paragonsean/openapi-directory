/*
 * Apps Script API
 * Manages and executes Google Apps Script projects. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Representation of a single script process execution that was started from the script editor, a trigger, an application, or using the Apps Script API. This is distinct from the &#x60;Operation&#x60; resource, which only represents executions started via the Apps Script API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:22.086382-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAppsScriptTypeProcess {
  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_FUNCTION_NAME = "functionName";
  @SerializedName(SERIALIZED_NAME_FUNCTION_NAME)
  private String functionName;

  /**
   * The executions status.
   */
  @JsonAdapter(ProcessStatusEnum.Adapter.class)
  public enum ProcessStatusEnum {
    PROCESS_STATUS_UNSPECIFIED("PROCESS_STATUS_UNSPECIFIED"),
    
    RUNNING("RUNNING"),
    
    PAUSED("PAUSED"),
    
    COMPLETED("COMPLETED"),
    
    CANCELED("CANCELED"),
    
    FAILED("FAILED"),
    
    TIMED_OUT("TIMED_OUT"),
    
    UNKNOWN("UNKNOWN"),
    
    DELAYED("DELAYED"),
    
    EXECUTION_DISABLED("EXECUTION_DISABLED");

    private String value;

    ProcessStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProcessStatusEnum fromValue(String value) {
      for (ProcessStatusEnum b : ProcessStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProcessStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProcessStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProcessStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProcessStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProcessStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROCESS_STATUS = "processStatus";
  @SerializedName(SERIALIZED_NAME_PROCESS_STATUS)
  private ProcessStatusEnum processStatus;

  /**
   * The executions type.
   */
  @JsonAdapter(ProcessTypeEnum.Adapter.class)
  public enum ProcessTypeEnum {
    PROCESS_TYPE_UNSPECIFIED("PROCESS_TYPE_UNSPECIFIED"),
    
    ADD_ON("ADD_ON"),
    
    EXECUTION_API("EXECUTION_API"),
    
    TIME_DRIVEN("TIME_DRIVEN"),
    
    TRIGGER("TRIGGER"),
    
    WEBAPP("WEBAPP"),
    
    EDITOR("EDITOR"),
    
    SIMPLE_TRIGGER("SIMPLE_TRIGGER"),
    
    MENU("MENU"),
    
    BATCH_TASK("BATCH_TASK");

    private String value;

    ProcessTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProcessTypeEnum fromValue(String value) {
      for (ProcessTypeEnum b : ProcessTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProcessTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProcessTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProcessTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProcessTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProcessTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROCESS_TYPE = "processType";
  @SerializedName(SERIALIZED_NAME_PROCESS_TYPE)
  private ProcessTypeEnum processType;

  public static final String SERIALIZED_NAME_PROJECT_NAME = "projectName";
  @SerializedName(SERIALIZED_NAME_PROJECT_NAME)
  private String projectName;

  /**
   * Which version of maestro to use to execute the script.
   */
  @JsonAdapter(RuntimeVersionEnum.Adapter.class)
  public enum RuntimeVersionEnum {
    RUNTIME_VERSION_UNSPECIFIED("RUNTIME_VERSION_UNSPECIFIED"),
    
    DEPRECATED_ES5("DEPRECATED_ES5"),
    
    V8("V8");

    private String value;

    RuntimeVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RuntimeVersionEnum fromValue(String value) {
      for (RuntimeVersionEnum b : RuntimeVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RuntimeVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RuntimeVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RuntimeVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RuntimeVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RuntimeVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RUNTIME_VERSION = "runtimeVersion";
  @SerializedName(SERIALIZED_NAME_RUNTIME_VERSION)
  private RuntimeVersionEnum runtimeVersion;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  /**
   * The executing users access level to the script.
   */
  @JsonAdapter(UserAccessLevelEnum.Adapter.class)
  public enum UserAccessLevelEnum {
    USER_ACCESS_LEVEL_UNSPECIFIED("USER_ACCESS_LEVEL_UNSPECIFIED"),
    
    NONE("NONE"),
    
    READ("READ"),
    
    WRITE("WRITE"),
    
    OWNER("OWNER");

    private String value;

    UserAccessLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserAccessLevelEnum fromValue(String value) {
      for (UserAccessLevelEnum b : UserAccessLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserAccessLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserAccessLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserAccessLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserAccessLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UserAccessLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USER_ACCESS_LEVEL = "userAccessLevel";
  @SerializedName(SERIALIZED_NAME_USER_ACCESS_LEVEL)
  private UserAccessLevelEnum userAccessLevel;

  public GoogleAppsScriptTypeProcess() {
  }

  public GoogleAppsScriptTypeProcess duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Duration the execution spent executing.
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public GoogleAppsScriptTypeProcess functionName(String functionName) {
    this.functionName = functionName;
    return this;
  }

  /**
   * Name of the function the started the execution.
   * @return functionName
   */
  @javax.annotation.Nullable
  public String getFunctionName() {
    return functionName;
  }

  public void setFunctionName(String functionName) {
    this.functionName = functionName;
  }


  public GoogleAppsScriptTypeProcess processStatus(ProcessStatusEnum processStatus) {
    this.processStatus = processStatus;
    return this;
  }

  /**
   * The executions status.
   * @return processStatus
   */
  @javax.annotation.Nullable
  public ProcessStatusEnum getProcessStatus() {
    return processStatus;
  }

  public void setProcessStatus(ProcessStatusEnum processStatus) {
    this.processStatus = processStatus;
  }


  public GoogleAppsScriptTypeProcess processType(ProcessTypeEnum processType) {
    this.processType = processType;
    return this;
  }

  /**
   * The executions type.
   * @return processType
   */
  @javax.annotation.Nullable
  public ProcessTypeEnum getProcessType() {
    return processType;
  }

  public void setProcessType(ProcessTypeEnum processType) {
    this.processType = processType;
  }


  public GoogleAppsScriptTypeProcess projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  /**
   * Name of the script being executed.
   * @return projectName
   */
  @javax.annotation.Nullable
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }


  public GoogleAppsScriptTypeProcess runtimeVersion(RuntimeVersionEnum runtimeVersion) {
    this.runtimeVersion = runtimeVersion;
    return this;
  }

  /**
   * Which version of maestro to use to execute the script.
   * @return runtimeVersion
   */
  @javax.annotation.Nullable
  public RuntimeVersionEnum getRuntimeVersion() {
    return runtimeVersion;
  }

  public void setRuntimeVersion(RuntimeVersionEnum runtimeVersion) {
    this.runtimeVersion = runtimeVersion;
  }


  public GoogleAppsScriptTypeProcess startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Time the execution started.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public GoogleAppsScriptTypeProcess userAccessLevel(UserAccessLevelEnum userAccessLevel) {
    this.userAccessLevel = userAccessLevel;
    return this;
  }

  /**
   * The executing users access level to the script.
   * @return userAccessLevel
   */
  @javax.annotation.Nullable
  public UserAccessLevelEnum getUserAccessLevel() {
    return userAccessLevel;
  }

  public void setUserAccessLevel(UserAccessLevelEnum userAccessLevel) {
    this.userAccessLevel = userAccessLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAppsScriptTypeProcess googleAppsScriptTypeProcess = (GoogleAppsScriptTypeProcess) o;
    return Objects.equals(this.duration, googleAppsScriptTypeProcess.duration) &&
        Objects.equals(this.functionName, googleAppsScriptTypeProcess.functionName) &&
        Objects.equals(this.processStatus, googleAppsScriptTypeProcess.processStatus) &&
        Objects.equals(this.processType, googleAppsScriptTypeProcess.processType) &&
        Objects.equals(this.projectName, googleAppsScriptTypeProcess.projectName) &&
        Objects.equals(this.runtimeVersion, googleAppsScriptTypeProcess.runtimeVersion) &&
        Objects.equals(this.startTime, googleAppsScriptTypeProcess.startTime) &&
        Objects.equals(this.userAccessLevel, googleAppsScriptTypeProcess.userAccessLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(duration, functionName, processStatus, processType, projectName, runtimeVersion, startTime, userAccessLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAppsScriptTypeProcess {\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    functionName: ").append(toIndentedString(functionName)).append("\n");
    sb.append("    processStatus: ").append(toIndentedString(processStatus)).append("\n");
    sb.append("    processType: ").append(toIndentedString(processType)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    runtimeVersion: ").append(toIndentedString(runtimeVersion)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    userAccessLevel: ").append(toIndentedString(userAccessLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("duration");
    openapiFields.add("functionName");
    openapiFields.add("processStatus");
    openapiFields.add("processType");
    openapiFields.add("projectName");
    openapiFields.add("runtimeVersion");
    openapiFields.add("startTime");
    openapiFields.add("userAccessLevel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAppsScriptTypeProcess
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAppsScriptTypeProcess.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAppsScriptTypeProcess is not found in the empty JSON string", GoogleAppsScriptTypeProcess.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAppsScriptTypeProcess.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAppsScriptTypeProcess` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("functionName") != null && !jsonObj.get("functionName").isJsonNull()) && !jsonObj.get("functionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionName").toString()));
      }
      if ((jsonObj.get("processStatus") != null && !jsonObj.get("processStatus").isJsonNull()) && !jsonObj.get("processStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processStatus").toString()));
      }
      // validate the optional field `processStatus`
      if (jsonObj.get("processStatus") != null && !jsonObj.get("processStatus").isJsonNull()) {
        ProcessStatusEnum.validateJsonElement(jsonObj.get("processStatus"));
      }
      if ((jsonObj.get("processType") != null && !jsonObj.get("processType").isJsonNull()) && !jsonObj.get("processType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processType").toString()));
      }
      // validate the optional field `processType`
      if (jsonObj.get("processType") != null && !jsonObj.get("processType").isJsonNull()) {
        ProcessTypeEnum.validateJsonElement(jsonObj.get("processType"));
      }
      if ((jsonObj.get("projectName") != null && !jsonObj.get("projectName").isJsonNull()) && !jsonObj.get("projectName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectName").toString()));
      }
      if ((jsonObj.get("runtimeVersion") != null && !jsonObj.get("runtimeVersion").isJsonNull()) && !jsonObj.get("runtimeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runtimeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runtimeVersion").toString()));
      }
      // validate the optional field `runtimeVersion`
      if (jsonObj.get("runtimeVersion") != null && !jsonObj.get("runtimeVersion").isJsonNull()) {
        RuntimeVersionEnum.validateJsonElement(jsonObj.get("runtimeVersion"));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("userAccessLevel") != null && !jsonObj.get("userAccessLevel").isJsonNull()) && !jsonObj.get("userAccessLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userAccessLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userAccessLevel").toString()));
      }
      // validate the optional field `userAccessLevel`
      if (jsonObj.get("userAccessLevel") != null && !jsonObj.get("userAccessLevel").isJsonNull()) {
        UserAccessLevelEnum.validateJsonElement(jsonObj.get("userAccessLevel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAppsScriptTypeProcess.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAppsScriptTypeProcess' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAppsScriptTypeProcess> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAppsScriptTypeProcess.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAppsScriptTypeProcess>() {
           @Override
           public void write(JsonWriter out, GoogleAppsScriptTypeProcess value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAppsScriptTypeProcess read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAppsScriptTypeProcess given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAppsScriptTypeProcess
   * @throws IOException if the JSON string is invalid with respect to GoogleAppsScriptTypeProcess
   */
  public static GoogleAppsScriptTypeProcess fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAppsScriptTypeProcess.class);
  }

  /**
   * Convert an instance of GoogleAppsScriptTypeProcess to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

