/*
 * Apps Script API
 * Manages and executes Google Apps Script projects. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Content;
import org.openapitools.client.model.CreateProjectRequest;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.DeploymentConfig;
import org.openapitools.client.model.ListDeploymentsResponse;
import org.openapitools.client.model.ListVersionsResponse;
import org.openapitools.client.model.Metrics;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.UpdateDeploymentRequest;
import org.openapitools.client.model.Version;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates a new, empty script project with no script files and a base manifest file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptProjectsCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CreateProjectRequest createProjectRequest = null;
        Project response = api.scriptProjectsCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, createProjectRequest);
        // TODO: test validations
    }

    /**
     * Creates a deployment of an Apps Script project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptProjectsDeploymentsCreateTest() throws ApiException {
        String scriptId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DeploymentConfig deploymentConfig = null;
        Deployment response = api.scriptProjectsDeploymentsCreate(scriptId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, deploymentConfig);
        // TODO: test validations
    }

    /**
     * Deletes a deployment of an Apps Script project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptProjectsDeploymentsDeleteTest() throws ApiException {
        String scriptId = null;
        String deploymentId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.scriptProjectsDeploymentsDelete(scriptId, deploymentId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a deployment of an Apps Script project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptProjectsDeploymentsGetTest() throws ApiException {
        String scriptId = null;
        String deploymentId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Deployment response = api.scriptProjectsDeploymentsGet(scriptId, deploymentId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the deployments of an Apps Script project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptProjectsDeploymentsListTest() throws ApiException {
        String scriptId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListDeploymentsResponse response = api.scriptProjectsDeploymentsList(scriptId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a deployment of an Apps Script project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptProjectsDeploymentsUpdateTest() throws ApiException {
        String scriptId = null;
        String deploymentId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UpdateDeploymentRequest updateDeploymentRequest = null;
        Deployment response = api.scriptProjectsDeploymentsUpdate(scriptId, deploymentId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateDeploymentRequest);
        // TODO: test validations
    }

    /**
     * Gets a script project&#39;s metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptProjectsGetTest() throws ApiException {
        String scriptId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Project response = api.scriptProjectsGet(scriptId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the content of the script project, including the code source and metadata for each script file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptProjectsGetContentTest() throws ApiException {
        String scriptId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer versionNumber = null;
        Content response = api.scriptProjectsGetContent(scriptId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, versionNumber);
        // TODO: test validations
    }

    /**
     * Get metrics data for scripts, such as number of executions and active users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptProjectsGetMetricsTest() throws ApiException {
        String scriptId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String metricsFilterDeploymentId = null;
        String metricsGranularity = null;
        Metrics response = api.scriptProjectsGetMetrics(scriptId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, metricsFilterDeploymentId, metricsGranularity);
        // TODO: test validations
    }

    /**
     * Updates the content of the specified script project. This content is stored as the HEAD version, and is used when the script is executed as a trigger, in the script editor, in add-on preview mode, or as a web app or Apps Script API in development mode. This clears all the existing files in the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptProjectsUpdateContentTest() throws ApiException {
        String scriptId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Content content = null;
        Content response = api.scriptProjectsUpdateContent(scriptId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, content);
        // TODO: test validations
    }

    /**
     * Creates a new immutable version using the current code, with a unique version number.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptProjectsVersionsCreateTest() throws ApiException {
        String scriptId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Version version = null;
        Version response = api.scriptProjectsVersionsCreate(scriptId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, version);
        // TODO: test validations
    }

    /**
     * Gets a version of a script project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptProjectsVersionsGetTest() throws ApiException {
        String scriptId = null;
        Integer versionNumber = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Version response = api.scriptProjectsVersionsGet(scriptId, versionNumber, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * List the versions of a script project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptProjectsVersionsListTest() throws ApiException {
        String scriptId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListVersionsResponse response = api.scriptProjectsVersionsList(scriptId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

}
