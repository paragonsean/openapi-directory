/**
 * Apps Script API
 * Manages and executes Google Apps Script projects. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetrics::OAIMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetrics::OAIMetrics() {
    this->initializeModel();
}

OAIMetrics::~OAIMetrics() {}

void OAIMetrics::initializeModel() {

    m_active_users_isSet = false;
    m_active_users_isValid = false;

    m_failed_executions_isSet = false;
    m_failed_executions_isValid = false;

    m_total_executions_isSet = false;
    m_total_executions_isValid = false;
}

void OAIMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetrics::fromJsonObject(QJsonObject json) {

    m_active_users_isValid = ::OpenAPI::fromJsonValue(m_active_users, json[QString("activeUsers")]);
    m_active_users_isSet = !json[QString("activeUsers")].isNull() && m_active_users_isValid;

    m_failed_executions_isValid = ::OpenAPI::fromJsonValue(m_failed_executions, json[QString("failedExecutions")]);
    m_failed_executions_isSet = !json[QString("failedExecutions")].isNull() && m_failed_executions_isValid;

    m_total_executions_isValid = ::OpenAPI::fromJsonValue(m_total_executions, json[QString("totalExecutions")]);
    m_total_executions_isSet = !json[QString("totalExecutions")].isNull() && m_total_executions_isValid;
}

QString OAIMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_active_users.size() > 0) {
        obj.insert(QString("activeUsers"), ::OpenAPI::toJsonValue(m_active_users));
    }
    if (m_failed_executions.size() > 0) {
        obj.insert(QString("failedExecutions"), ::OpenAPI::toJsonValue(m_failed_executions));
    }
    if (m_total_executions.size() > 0) {
        obj.insert(QString("totalExecutions"), ::OpenAPI::toJsonValue(m_total_executions));
    }
    return obj;
}

QList<OAIMetricsValue> OAIMetrics::getActiveUsers() const {
    return m_active_users;
}
void OAIMetrics::setActiveUsers(const QList<OAIMetricsValue> &active_users) {
    m_active_users = active_users;
    m_active_users_isSet = true;
}

bool OAIMetrics::is_active_users_Set() const{
    return m_active_users_isSet;
}

bool OAIMetrics::is_active_users_Valid() const{
    return m_active_users_isValid;
}

QList<OAIMetricsValue> OAIMetrics::getFailedExecutions() const {
    return m_failed_executions;
}
void OAIMetrics::setFailedExecutions(const QList<OAIMetricsValue> &failed_executions) {
    m_failed_executions = failed_executions;
    m_failed_executions_isSet = true;
}

bool OAIMetrics::is_failed_executions_Set() const{
    return m_failed_executions_isSet;
}

bool OAIMetrics::is_failed_executions_Valid() const{
    return m_failed_executions_isValid;
}

QList<OAIMetricsValue> OAIMetrics::getTotalExecutions() const {
    return m_total_executions;
}
void OAIMetrics::setTotalExecutions(const QList<OAIMetricsValue> &total_executions) {
    m_total_executions = total_executions;
    m_total_executions_isSet = true;
}

bool OAIMetrics::is_total_executions_Set() const{
    return m_total_executions_isSet;
}

bool OAIMetrics::is_total_executions_Valid() const{
    return m_total_executions_isValid;
}

bool OAIMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_executions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_executions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
