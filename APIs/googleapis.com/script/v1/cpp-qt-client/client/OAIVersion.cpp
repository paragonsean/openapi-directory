/**
 * Apps Script API
 * Manages and executes Google Apps Script projects. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersion::OAIVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersion::OAIVersion() {
    this->initializeModel();
}

OAIVersion::~OAIVersion() {}

void OAIVersion::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_script_id_isSet = false;
    m_script_id_isValid = false;

    m_version_number_isSet = false;
    m_version_number_isValid = false;
}

void OAIVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersion::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_script_id_isValid = ::OpenAPI::fromJsonValue(m_script_id, json[QString("scriptId")]);
    m_script_id_isSet = !json[QString("scriptId")].isNull() && m_script_id_isValid;

    m_version_number_isValid = ::OpenAPI::fromJsonValue(m_version_number, json[QString("versionNumber")]);
    m_version_number_isSet = !json[QString("versionNumber")].isNull() && m_version_number_isValid;
}

QString OAIVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_script_id_isSet) {
        obj.insert(QString("scriptId"), ::OpenAPI::toJsonValue(m_script_id));
    }
    if (m_version_number_isSet) {
        obj.insert(QString("versionNumber"), ::OpenAPI::toJsonValue(m_version_number));
    }
    return obj;
}

QString OAIVersion::getCreateTime() const {
    return m_create_time;
}
void OAIVersion::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIVersion::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIVersion::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIVersion::getDescription() const {
    return m_description;
}
void OAIVersion::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVersion::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVersion::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIVersion::getScriptId() const {
    return m_script_id;
}
void OAIVersion::setScriptId(const QString &script_id) {
    m_script_id = script_id;
    m_script_id_isSet = true;
}

bool OAIVersion::is_script_id_Set() const{
    return m_script_id_isSet;
}

bool OAIVersion::is_script_id_Valid() const{
    return m_script_id_isValid;
}

qint32 OAIVersion::getVersionNumber() const {
    return m_version_number;
}
void OAIVersion::setVersionNumber(const qint32 &version_number) {
    m_version_number = version_number;
    m_version_number_isSet = true;
}

bool OAIVersion::is_version_number_Set() const{
    return m_version_number_isSet;
}

bool OAIVersion::is_version_number_Valid() const{
    return m_version_number_isValid;
}

bool OAIVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
