/**
 * Apps Script API
 * Manages and executes Google Apps Script projects. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValue::OAIValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValue::OAIValue() {
    this->initializeModel();
}

OAIValue::~OAIValue() {}

void OAIValue::initializeModel() {

    m_bool_value_isSet = false;
    m_bool_value_isValid = false;

    m_bytes_value_isSet = false;
    m_bytes_value_isValid = false;

    m_date_value_isSet = false;
    m_date_value_isValid = false;

    m_list_value_isSet = false;
    m_list_value_isValid = false;

    m_null_value_isSet = false;
    m_null_value_isValid = false;

    m_number_value_isSet = false;
    m_number_value_isValid = false;

    m_proto_value_isSet = false;
    m_proto_value_isValid = false;

    m_string_value_isSet = false;
    m_string_value_isValid = false;

    m_struct_value_isSet = false;
    m_struct_value_isValid = false;
}

void OAIValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValue::fromJsonObject(QJsonObject json) {

    m_bool_value_isValid = ::OpenAPI::fromJsonValue(m_bool_value, json[QString("boolValue")]);
    m_bool_value_isSet = !json[QString("boolValue")].isNull() && m_bool_value_isValid;

    m_bytes_value_isValid = ::OpenAPI::fromJsonValue(m_bytes_value, json[QString("bytesValue")]);
    m_bytes_value_isSet = !json[QString("bytesValue")].isNull() && m_bytes_value_isValid;

    m_date_value_isValid = ::OpenAPI::fromJsonValue(m_date_value, json[QString("dateValue")]);
    m_date_value_isSet = !json[QString("dateValue")].isNull() && m_date_value_isValid;

    m_list_value_isValid = ::OpenAPI::fromJsonValue(m_list_value, json[QString("listValue")]);
    m_list_value_isSet = !json[QString("listValue")].isNull() && m_list_value_isValid;

    m_null_value_isValid = ::OpenAPI::fromJsonValue(m_null_value, json[QString("nullValue")]);
    m_null_value_isSet = !json[QString("nullValue")].isNull() && m_null_value_isValid;

    m_number_value_isValid = ::OpenAPI::fromJsonValue(m_number_value, json[QString("numberValue")]);
    m_number_value_isSet = !json[QString("numberValue")].isNull() && m_number_value_isValid;

    m_proto_value_isValid = ::OpenAPI::fromJsonValue(m_proto_value, json[QString("protoValue")]);
    m_proto_value_isSet = !json[QString("protoValue")].isNull() && m_proto_value_isValid;

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("stringValue")]);
    m_string_value_isSet = !json[QString("stringValue")].isNull() && m_string_value_isValid;

    m_struct_value_isValid = ::OpenAPI::fromJsonValue(m_struct_value, json[QString("structValue")]);
    m_struct_value_isSet = !json[QString("structValue")].isNull() && m_struct_value_isValid;
}

QString OAIValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValue::asJsonObject() const {
    QJsonObject obj;
    if (m_bool_value_isSet) {
        obj.insert(QString("boolValue"), ::OpenAPI::toJsonValue(m_bool_value));
    }
    if (m_bytes_value_isSet) {
        obj.insert(QString("bytesValue"), ::OpenAPI::toJsonValue(m_bytes_value));
    }
    if (m_date_value_isSet) {
        obj.insert(QString("dateValue"), ::OpenAPI::toJsonValue(m_date_value));
    }
    if (m_list_value.isSet()) {
        obj.insert(QString("listValue"), ::OpenAPI::toJsonValue(m_list_value));
    }
    if (m_null_value_isSet) {
        obj.insert(QString("nullValue"), ::OpenAPI::toJsonValue(m_null_value));
    }
    if (m_number_value_isSet) {
        obj.insert(QString("numberValue"), ::OpenAPI::toJsonValue(m_number_value));
    }
    if (m_proto_value.size() > 0) {
        obj.insert(QString("protoValue"), ::OpenAPI::toJsonValue(m_proto_value));
    }
    if (m_string_value_isSet) {
        obj.insert(QString("stringValue"), ::OpenAPI::toJsonValue(m_string_value));
    }
    if (m_struct_value.isSet()) {
        obj.insert(QString("structValue"), ::OpenAPI::toJsonValue(m_struct_value));
    }
    return obj;
}

bool OAIValue::isBoolValue() const {
    return m_bool_value;
}
void OAIValue::setBoolValue(const bool &bool_value) {
    m_bool_value = bool_value;
    m_bool_value_isSet = true;
}

bool OAIValue::is_bool_value_Set() const{
    return m_bool_value_isSet;
}

bool OAIValue::is_bool_value_Valid() const{
    return m_bool_value_isValid;
}

QByteArray OAIValue::getBytesValue() const {
    return m_bytes_value;
}
void OAIValue::setBytesValue(const QByteArray &bytes_value) {
    m_bytes_value = bytes_value;
    m_bytes_value_isSet = true;
}

bool OAIValue::is_bytes_value_Set() const{
    return m_bytes_value_isSet;
}

bool OAIValue::is_bytes_value_Valid() const{
    return m_bytes_value_isValid;
}

QString OAIValue::getDateValue() const {
    return m_date_value;
}
void OAIValue::setDateValue(const QString &date_value) {
    m_date_value = date_value;
    m_date_value_isSet = true;
}

bool OAIValue::is_date_value_Set() const{
    return m_date_value_isSet;
}

bool OAIValue::is_date_value_Valid() const{
    return m_date_value_isValid;
}

OAIListValue OAIValue::getListValue() const {
    return m_list_value;
}
void OAIValue::setListValue(const OAIListValue &list_value) {
    m_list_value = list_value;
    m_list_value_isSet = true;
}

bool OAIValue::is_list_value_Set() const{
    return m_list_value_isSet;
}

bool OAIValue::is_list_value_Valid() const{
    return m_list_value_isValid;
}

QString OAIValue::getNullValue() const {
    return m_null_value;
}
void OAIValue::setNullValue(const QString &null_value) {
    m_null_value = null_value;
    m_null_value_isSet = true;
}

bool OAIValue::is_null_value_Set() const{
    return m_null_value_isSet;
}

bool OAIValue::is_null_value_Valid() const{
    return m_null_value_isValid;
}

double OAIValue::getNumberValue() const {
    return m_number_value;
}
void OAIValue::setNumberValue(const double &number_value) {
    m_number_value = number_value;
    m_number_value_isSet = true;
}

bool OAIValue::is_number_value_Set() const{
    return m_number_value_isSet;
}

bool OAIValue::is_number_value_Valid() const{
    return m_number_value_isValid;
}

QMap<QString, QJsonValue> OAIValue::getProtoValue() const {
    return m_proto_value;
}
void OAIValue::setProtoValue(const QMap<QString, QJsonValue> &proto_value) {
    m_proto_value = proto_value;
    m_proto_value_isSet = true;
}

bool OAIValue::is_proto_value_Set() const{
    return m_proto_value_isSet;
}

bool OAIValue::is_proto_value_Valid() const{
    return m_proto_value_isValid;
}

QString OAIValue::getStringValue() const {
    return m_string_value;
}
void OAIValue::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAIValue::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAIValue::is_string_value_Valid() const{
    return m_string_value_isValid;
}

OAIStruct OAIValue::getStructValue() const {
    return m_struct_value;
}
void OAIValue::setStructValue(const OAIStruct &struct_value) {
    m_struct_value = struct_value;
    m_struct_value_isSet = true;
}

bool OAIValue::is_struct_value_Set() const{
    return m_struct_value_isSet;
}

bool OAIValue::is_struct_value_Valid() const{
    return m_struct_value_isValid;
}

bool OAIValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bool_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proto_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_struct_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
