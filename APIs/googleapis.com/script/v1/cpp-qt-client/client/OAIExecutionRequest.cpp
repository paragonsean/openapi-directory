/**
 * Apps Script API
 * Manages and executes Google Apps Script projects. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecutionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecutionRequest::OAIExecutionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecutionRequest::OAIExecutionRequest() {
    this->initializeModel();
}

OAIExecutionRequest::~OAIExecutionRequest() {}

void OAIExecutionRequest::initializeModel() {

    m_dev_mode_isSet = false;
    m_dev_mode_isValid = false;

    m_function_isSet = false;
    m_function_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_session_state_isSet = false;
    m_session_state_isValid = false;
}

void OAIExecutionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecutionRequest::fromJsonObject(QJsonObject json) {

    m_dev_mode_isValid = ::OpenAPI::fromJsonValue(m_dev_mode, json[QString("devMode")]);
    m_dev_mode_isSet = !json[QString("devMode")].isNull() && m_dev_mode_isValid;

    m_function_isValid = ::OpenAPI::fromJsonValue(m_function, json[QString("function")]);
    m_function_isSet = !json[QString("function")].isNull() && m_function_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_session_state_isValid = ::OpenAPI::fromJsonValue(m_session_state, json[QString("sessionState")]);
    m_session_state_isSet = !json[QString("sessionState")].isNull() && m_session_state_isValid;
}

QString OAIExecutionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecutionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_dev_mode_isSet) {
        obj.insert(QString("devMode"), ::OpenAPI::toJsonValue(m_dev_mode));
    }
    if (m_function_isSet) {
        obj.insert(QString("function"), ::OpenAPI::toJsonValue(m_function));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_session_state_isSet) {
        obj.insert(QString("sessionState"), ::OpenAPI::toJsonValue(m_session_state));
    }
    return obj;
}

bool OAIExecutionRequest::isDevMode() const {
    return m_dev_mode;
}
void OAIExecutionRequest::setDevMode(const bool &dev_mode) {
    m_dev_mode = dev_mode;
    m_dev_mode_isSet = true;
}

bool OAIExecutionRequest::is_dev_mode_Set() const{
    return m_dev_mode_isSet;
}

bool OAIExecutionRequest::is_dev_mode_Valid() const{
    return m_dev_mode_isValid;
}

QString OAIExecutionRequest::getFunction() const {
    return m_function;
}
void OAIExecutionRequest::setFunction(const QString &function) {
    m_function = function;
    m_function_isSet = true;
}

bool OAIExecutionRequest::is_function_Set() const{
    return m_function_isSet;
}

bool OAIExecutionRequest::is_function_Valid() const{
    return m_function_isValid;
}

QList<QJsonValue> OAIExecutionRequest::getParameters() const {
    return m_parameters;
}
void OAIExecutionRequest::setParameters(const QList<QJsonValue> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIExecutionRequest::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIExecutionRequest::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIExecutionRequest::getSessionState() const {
    return m_session_state;
}
void OAIExecutionRequest::setSessionState(const QString &session_state) {
    m_session_state = session_state;
    m_session_state_isSet = true;
}

bool OAIExecutionRequest::is_session_state_Set() const{
    return m_session_state_isSet;
}

bool OAIExecutionRequest::is_session_state_Valid() const{
    return m_session_state_isValid;
}

bool OAIExecutionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dev_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecutionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
