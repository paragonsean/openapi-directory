/**
 * Apps Script API
 * Manages and executes Google Apps Script projects. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecutionError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecutionError::OAIExecutionError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecutionError::OAIExecutionError() {
    this->initializeModel();
}

OAIExecutionError::~OAIExecutionError() {}

void OAIExecutionError::initializeModel() {

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_error_type_isSet = false;
    m_error_type_isValid = false;

    m_script_stack_trace_elements_isSet = false;
    m_script_stack_trace_elements_isValid = false;
}

void OAIExecutionError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecutionError::fromJsonObject(QJsonObject json) {

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_error_type_isValid = ::OpenAPI::fromJsonValue(m_error_type, json[QString("errorType")]);
    m_error_type_isSet = !json[QString("errorType")].isNull() && m_error_type_isValid;

    m_script_stack_trace_elements_isValid = ::OpenAPI::fromJsonValue(m_script_stack_trace_elements, json[QString("scriptStackTraceElements")]);
    m_script_stack_trace_elements_isSet = !json[QString("scriptStackTraceElements")].isNull() && m_script_stack_trace_elements_isValid;
}

QString OAIExecutionError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecutionError::asJsonObject() const {
    QJsonObject obj;
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_error_type_isSet) {
        obj.insert(QString("errorType"), ::OpenAPI::toJsonValue(m_error_type));
    }
    if (m_script_stack_trace_elements.size() > 0) {
        obj.insert(QString("scriptStackTraceElements"), ::OpenAPI::toJsonValue(m_script_stack_trace_elements));
    }
    return obj;
}

QString OAIExecutionError::getErrorMessage() const {
    return m_error_message;
}
void OAIExecutionError::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIExecutionError::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIExecutionError::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIExecutionError::getErrorType() const {
    return m_error_type;
}
void OAIExecutionError::setErrorType(const QString &error_type) {
    m_error_type = error_type;
    m_error_type_isSet = true;
}

bool OAIExecutionError::is_error_type_Set() const{
    return m_error_type_isSet;
}

bool OAIExecutionError::is_error_type_Valid() const{
    return m_error_type_isValid;
}

QList<OAIScriptStackTraceElement> OAIExecutionError::getScriptStackTraceElements() const {
    return m_script_stack_trace_elements;
}
void OAIExecutionError::setScriptStackTraceElements(const QList<OAIScriptStackTraceElement> &script_stack_trace_elements) {
    m_script_stack_trace_elements = script_stack_trace_elements;
    m_script_stack_trace_elements_isSet = true;
}

bool OAIExecutionError::is_script_stack_trace_elements_Set() const{
    return m_script_stack_trace_elements_isSet;
}

bool OAIExecutionError::is_script_stack_trace_elements_Valid() const{
    return m_script_stack_trace_elements_isValid;
}

bool OAIExecutionError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_stack_trace_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecutionError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
