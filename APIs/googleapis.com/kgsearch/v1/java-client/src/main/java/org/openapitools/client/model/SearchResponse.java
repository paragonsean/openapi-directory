/*
 * Knowledge Graph Search API
 * Searches the Google Knowledge Graph for entities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message includes the context and a list of matching results which contain the detail of associated entities.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:28.496495-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchResponse {
  public static final String SERIALIZED_NAME_AT_CONTEXT = "@context";
  @SerializedName(SERIALIZED_NAME_AT_CONTEXT)
  private Object atContext = null;

  public static final String SERIALIZED_NAME_AT_TYPE = "@type";
  @SerializedName(SERIALIZED_NAME_AT_TYPE)
  private Object atType = null;

  public static final String SERIALIZED_NAME_ITEM_LIST_ELEMENT = "itemListElement";
  @SerializedName(SERIALIZED_NAME_ITEM_LIST_ELEMENT)
  private List<Object> itemListElement = new ArrayList<>();

  public SearchResponse() {
  }

  public SearchResponse atContext(Object atContext) {
    this.atContext = atContext;
    return this;
  }

  /**
   * The local context applicable for the response. See more details at http://www.w3.org/TR/json-ld/#context-definitions.
   * @return atContext
   */
  @javax.annotation.Nullable
  public Object getAtContext() {
    return atContext;
  }

  public void setAtContext(Object atContext) {
    this.atContext = atContext;
  }


  public SearchResponse atType(Object atType) {
    this.atType = atType;
    return this;
  }

  /**
   * The schema type of top-level JSON-LD object, e.g. ItemList.
   * @return atType
   */
  @javax.annotation.Nullable
  public Object getAtType() {
    return atType;
  }

  public void setAtType(Object atType) {
    this.atType = atType;
  }


  public SearchResponse itemListElement(List<Object> itemListElement) {
    this.itemListElement = itemListElement;
    return this;
  }

  public SearchResponse addItemListElementItem(Object itemListElementItem) {
    if (this.itemListElement == null) {
      this.itemListElement = new ArrayList<>();
    }
    this.itemListElement.add(itemListElementItem);
    return this;
  }

  /**
   * The item list of search results.
   * @return itemListElement
   */
  @javax.annotation.Nullable
  public List<Object> getItemListElement() {
    return itemListElement;
  }

  public void setItemListElement(List<Object> itemListElement) {
    this.itemListElement = itemListElement;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchResponse searchResponse = (SearchResponse) o;
    return Objects.equals(this.atContext, searchResponse.atContext) &&
        Objects.equals(this.atType, searchResponse.atType) &&
        Objects.equals(this.itemListElement, searchResponse.itemListElement);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(atContext, atType, itemListElement);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchResponse {\n");
    sb.append("    atContext: ").append(toIndentedString(atContext)).append("\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("    itemListElement: ").append(toIndentedString(itemListElement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@context");
    openapiFields.add("@type");
    openapiFields.add("itemListElement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchResponse is not found in the empty JSON string", SearchResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("itemListElement") != null && !jsonObj.get("itemListElement").isJsonNull() && !jsonObj.get("itemListElement").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemListElement` to be an array in the JSON string but got `%s`", jsonObj.get("itemListElement").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchResponse>() {
           @Override
           public void write(JsonWriter out, SearchResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchResponse
   * @throws IOException if the JSON string is invalid with respect to SearchResponse
   */
  public static SearchResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchResponse.class);
  }

  /**
   * Convert an instance of SearchResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

