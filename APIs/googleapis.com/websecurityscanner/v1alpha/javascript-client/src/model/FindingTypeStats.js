/**
 * Web Security Scanner API
 * Scans your Compute and App Engine apps for common web vulnerabilities.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FindingTypeStats model module.
 * @module model/FindingTypeStats
 * @version v1alpha
 */
class FindingTypeStats {
    /**
     * Constructs a new <code>FindingTypeStats</code>.
     * A FindingTypeStats resource represents stats regarding a specific FindingType of Findings under a given ScanRun.
     * @alias module:model/FindingTypeStats
     */
    constructor() { 
        
        FindingTypeStats.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FindingTypeStats</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FindingTypeStats} obj Optional instance to populate.
     * @return {module:model/FindingTypeStats} The populated <code>FindingTypeStats</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FindingTypeStats();

            if (data.hasOwnProperty('findingCount')) {
                obj['findingCount'] = ApiClient.convertToType(data['findingCount'], 'Number');
            }
            if (data.hasOwnProperty('findingType')) {
                obj['findingType'] = ApiClient.convertToType(data['findingType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FindingTypeStats</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FindingTypeStats</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['findingType'] && !(typeof data['findingType'] === 'string' || data['findingType'] instanceof String)) {
            throw new Error("Expected the field `findingType` to be a primitive type in the JSON string but got " + data['findingType']);
        }

        return true;
    }


}



/**
 * The count of findings belonging to this finding type.
 * @member {Number} findingCount
 */
FindingTypeStats.prototype['findingCount'] = undefined;

/**
 * The finding type associated with the stats.
 * @member {module:model/FindingTypeStats.FindingTypeEnum} findingType
 */
FindingTypeStats.prototype['findingType'] = undefined;





/**
 * Allowed values for the <code>findingType</code> property.
 * @enum {String}
 * @readonly
 */
FindingTypeStats['FindingTypeEnum'] = {

    /**
     * value: "FINDING_TYPE_UNSPECIFIED"
     * @const
     */
    "FINDING_TYPE_UNSPECIFIED": "FINDING_TYPE_UNSPECIFIED",

    /**
     * value: "MIXED_CONTENT"
     * @const
     */
    "MIXED_CONTENT": "MIXED_CONTENT",

    /**
     * value: "OUTDATED_LIBRARY"
     * @const
     */
    "OUTDATED_LIBRARY": "OUTDATED_LIBRARY",

    /**
     * value: "ROSETTA_FLASH"
     * @const
     */
    "ROSETTA_FLASH": "ROSETTA_FLASH",

    /**
     * value: "XSS_CALLBACK"
     * @const
     */
    "XSS_CALLBACK": "XSS_CALLBACK",

    /**
     * value: "XSS_ERROR"
     * @const
     */
    "XSS_ERROR": "XSS_ERROR",

    /**
     * value: "CLEAR_TEXT_PASSWORD"
     * @const
     */
    "CLEAR_TEXT_PASSWORD": "CLEAR_TEXT_PASSWORD",

    /**
     * value: "INVALID_CONTENT_TYPE"
     * @const
     */
    "INVALID_CONTENT_TYPE": "INVALID_CONTENT_TYPE",

    /**
     * value: "XSS_ANGULAR_CALLBACK"
     * @const
     */
    "XSS_ANGULAR_CALLBACK": "XSS_ANGULAR_CALLBACK",

    /**
     * value: "INVALID_HEADER"
     * @const
     */
    "INVALID_HEADER": "INVALID_HEADER",

    /**
     * value: "MISSPELLED_SECURITY_HEADER_NAME"
     * @const
     */
    "MISSPELLED_SECURITY_HEADER_NAME": "MISSPELLED_SECURITY_HEADER_NAME",

    /**
     * value: "MISMATCHING_SECURITY_HEADER_VALUES"
     * @const
     */
    "MISMATCHING_SECURITY_HEADER_VALUES": "MISMATCHING_SECURITY_HEADER_VALUES",

    /**
     * value: "ACCESSIBLE_GIT_REPOSITORY"
     * @const
     */
    "ACCESSIBLE_GIT_REPOSITORY": "ACCESSIBLE_GIT_REPOSITORY",

    /**
     * value: "ACCESSIBLE_SVN_REPOSITORY"
     * @const
     */
    "ACCESSIBLE_SVN_REPOSITORY": "ACCESSIBLE_SVN_REPOSITORY",

    /**
     * value: "ACCESSIBLE_ENV_FILE"
     * @const
     */
    "ACCESSIBLE_ENV_FILE": "ACCESSIBLE_ENV_FILE"
};



export default FindingTypeStats;

