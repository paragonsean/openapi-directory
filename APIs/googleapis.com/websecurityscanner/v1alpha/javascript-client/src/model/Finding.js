/**
 * Web Security Scanner API
 * Scans your Compute and App Engine apps for common web vulnerabilities.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OutdatedLibrary from './OutdatedLibrary';
import ViolatingResource from './ViolatingResource';
import VulnerableHeaders from './VulnerableHeaders';
import VulnerableParameters from './VulnerableParameters';
import Xss from './Xss';

/**
 * The Finding model module.
 * @module model/Finding
 * @version v1alpha
 */
class Finding {
    /**
     * Constructs a new <code>Finding</code>.
     * A Finding resource represents a vulnerability instance identified during a ScanRun.
     * @alias module:model/Finding
     */
    constructor() { 
        
        Finding.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Finding</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Finding} obj Optional instance to populate.
     * @return {module:model/Finding} The populated <code>Finding</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Finding();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('finalUrl')) {
                obj['finalUrl'] = ApiClient.convertToType(data['finalUrl'], 'String');
            }
            if (data.hasOwnProperty('findingType')) {
                obj['findingType'] = ApiClient.convertToType(data['findingType'], 'String');
            }
            if (data.hasOwnProperty('frameUrl')) {
                obj['frameUrl'] = ApiClient.convertToType(data['frameUrl'], 'String');
            }
            if (data.hasOwnProperty('fuzzedUrl')) {
                obj['fuzzedUrl'] = ApiClient.convertToType(data['fuzzedUrl'], 'String');
            }
            if (data.hasOwnProperty('httpMethod')) {
                obj['httpMethod'] = ApiClient.convertToType(data['httpMethod'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('outdatedLibrary')) {
                obj['outdatedLibrary'] = OutdatedLibrary.constructFromObject(data['outdatedLibrary']);
            }
            if (data.hasOwnProperty('reproductionUrl')) {
                obj['reproductionUrl'] = ApiClient.convertToType(data['reproductionUrl'], 'String');
            }
            if (data.hasOwnProperty('trackingId')) {
                obj['trackingId'] = ApiClient.convertToType(data['trackingId'], 'String');
            }
            if (data.hasOwnProperty('violatingResource')) {
                obj['violatingResource'] = ViolatingResource.constructFromObject(data['violatingResource']);
            }
            if (data.hasOwnProperty('vulnerableHeaders')) {
                obj['vulnerableHeaders'] = VulnerableHeaders.constructFromObject(data['vulnerableHeaders']);
            }
            if (data.hasOwnProperty('vulnerableParameters')) {
                obj['vulnerableParameters'] = VulnerableParameters.constructFromObject(data['vulnerableParameters']);
            }
            if (data.hasOwnProperty('xss')) {
                obj['xss'] = Xss.constructFromObject(data['xss']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Finding</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Finding</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['finalUrl'] && !(typeof data['finalUrl'] === 'string' || data['finalUrl'] instanceof String)) {
            throw new Error("Expected the field `finalUrl` to be a primitive type in the JSON string but got " + data['finalUrl']);
        }
        // ensure the json data is a string
        if (data['findingType'] && !(typeof data['findingType'] === 'string' || data['findingType'] instanceof String)) {
            throw new Error("Expected the field `findingType` to be a primitive type in the JSON string but got " + data['findingType']);
        }
        // ensure the json data is a string
        if (data['frameUrl'] && !(typeof data['frameUrl'] === 'string' || data['frameUrl'] instanceof String)) {
            throw new Error("Expected the field `frameUrl` to be a primitive type in the JSON string but got " + data['frameUrl']);
        }
        // ensure the json data is a string
        if (data['fuzzedUrl'] && !(typeof data['fuzzedUrl'] === 'string' || data['fuzzedUrl'] instanceof String)) {
            throw new Error("Expected the field `fuzzedUrl` to be a primitive type in the JSON string but got " + data['fuzzedUrl']);
        }
        // ensure the json data is a string
        if (data['httpMethod'] && !(typeof data['httpMethod'] === 'string' || data['httpMethod'] instanceof String)) {
            throw new Error("Expected the field `httpMethod` to be a primitive type in the JSON string but got " + data['httpMethod']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `outdatedLibrary`
        if (data['outdatedLibrary']) { // data not null
          OutdatedLibrary.validateJSON(data['outdatedLibrary']);
        }
        // ensure the json data is a string
        if (data['reproductionUrl'] && !(typeof data['reproductionUrl'] === 'string' || data['reproductionUrl'] instanceof String)) {
            throw new Error("Expected the field `reproductionUrl` to be a primitive type in the JSON string but got " + data['reproductionUrl']);
        }
        // ensure the json data is a string
        if (data['trackingId'] && !(typeof data['trackingId'] === 'string' || data['trackingId'] instanceof String)) {
            throw new Error("Expected the field `trackingId` to be a primitive type in the JSON string but got " + data['trackingId']);
        }
        // validate the optional field `violatingResource`
        if (data['violatingResource']) { // data not null
          ViolatingResource.validateJSON(data['violatingResource']);
        }
        // validate the optional field `vulnerableHeaders`
        if (data['vulnerableHeaders']) { // data not null
          VulnerableHeaders.validateJSON(data['vulnerableHeaders']);
        }
        // validate the optional field `vulnerableParameters`
        if (data['vulnerableParameters']) { // data not null
          VulnerableParameters.validateJSON(data['vulnerableParameters']);
        }
        // validate the optional field `xss`
        if (data['xss']) { // data not null
          Xss.validateJSON(data['xss']);
        }

        return true;
    }


}



/**
 * The body of the request that triggered the vulnerability.
 * @member {String} body
 */
Finding.prototype['body'] = undefined;

/**
 * The description of the vulnerability.
 * @member {String} description
 */
Finding.prototype['description'] = undefined;

/**
 * The URL where the browser lands when the vulnerability is detected.
 * @member {String} finalUrl
 */
Finding.prototype['finalUrl'] = undefined;

/**
 * The type of the Finding.
 * @member {module:model/Finding.FindingTypeEnum} findingType
 */
Finding.prototype['findingType'] = undefined;

/**
 * If the vulnerability was originated from nested IFrame, the immediate parent IFrame is reported.
 * @member {String} frameUrl
 */
Finding.prototype['frameUrl'] = undefined;

/**
 * The URL produced by the server-side fuzzer and used in the request that triggered the vulnerability.
 * @member {String} fuzzedUrl
 */
Finding.prototype['fuzzedUrl'] = undefined;

/**
 * The http method of the request that triggered the vulnerability, in uppercase.
 * @member {String} httpMethod
 */
Finding.prototype['httpMethod'] = undefined;

/**
 * The resource name of the Finding. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanruns/{scanRunId}/findings/{findingId}'. The finding IDs are generated by the system.
 * @member {String} name
 */
Finding.prototype['name'] = undefined;

/**
 * @member {module:model/OutdatedLibrary} outdatedLibrary
 */
Finding.prototype['outdatedLibrary'] = undefined;

/**
 * The URL containing human-readable payload that user can leverage to reproduce the vulnerability.
 * @member {String} reproductionUrl
 */
Finding.prototype['reproductionUrl'] = undefined;

/**
 * The tracking ID uniquely identifies a vulnerability instance across multiple ScanRuns.
 * @member {String} trackingId
 */
Finding.prototype['trackingId'] = undefined;

/**
 * @member {module:model/ViolatingResource} violatingResource
 */
Finding.prototype['violatingResource'] = undefined;

/**
 * @member {module:model/VulnerableHeaders} vulnerableHeaders
 */
Finding.prototype['vulnerableHeaders'] = undefined;

/**
 * @member {module:model/VulnerableParameters} vulnerableParameters
 */
Finding.prototype['vulnerableParameters'] = undefined;

/**
 * @member {module:model/Xss} xss
 */
Finding.prototype['xss'] = undefined;





/**
 * Allowed values for the <code>findingType</code> property.
 * @enum {String}
 * @readonly
 */
Finding['FindingTypeEnum'] = {

    /**
     * value: "FINDING_TYPE_UNSPECIFIED"
     * @const
     */
    "FINDING_TYPE_UNSPECIFIED": "FINDING_TYPE_UNSPECIFIED",

    /**
     * value: "MIXED_CONTENT"
     * @const
     */
    "MIXED_CONTENT": "MIXED_CONTENT",

    /**
     * value: "OUTDATED_LIBRARY"
     * @const
     */
    "OUTDATED_LIBRARY": "OUTDATED_LIBRARY",

    /**
     * value: "ROSETTA_FLASH"
     * @const
     */
    "ROSETTA_FLASH": "ROSETTA_FLASH",

    /**
     * value: "XSS_CALLBACK"
     * @const
     */
    "XSS_CALLBACK": "XSS_CALLBACK",

    /**
     * value: "XSS_ERROR"
     * @const
     */
    "XSS_ERROR": "XSS_ERROR",

    /**
     * value: "CLEAR_TEXT_PASSWORD"
     * @const
     */
    "CLEAR_TEXT_PASSWORD": "CLEAR_TEXT_PASSWORD",

    /**
     * value: "INVALID_CONTENT_TYPE"
     * @const
     */
    "INVALID_CONTENT_TYPE": "INVALID_CONTENT_TYPE",

    /**
     * value: "XSS_ANGULAR_CALLBACK"
     * @const
     */
    "XSS_ANGULAR_CALLBACK": "XSS_ANGULAR_CALLBACK",

    /**
     * value: "INVALID_HEADER"
     * @const
     */
    "INVALID_HEADER": "INVALID_HEADER",

    /**
     * value: "MISSPELLED_SECURITY_HEADER_NAME"
     * @const
     */
    "MISSPELLED_SECURITY_HEADER_NAME": "MISSPELLED_SECURITY_HEADER_NAME",

    /**
     * value: "MISMATCHING_SECURITY_HEADER_VALUES"
     * @const
     */
    "MISMATCHING_SECURITY_HEADER_VALUES": "MISMATCHING_SECURITY_HEADER_VALUES",

    /**
     * value: "ACCESSIBLE_GIT_REPOSITORY"
     * @const
     */
    "ACCESSIBLE_GIT_REPOSITORY": "ACCESSIBLE_GIT_REPOSITORY",

    /**
     * value: "ACCESSIBLE_SVN_REPOSITORY"
     * @const
     */
    "ACCESSIBLE_SVN_REPOSITORY": "ACCESSIBLE_SVN_REPOSITORY",

    /**
     * value: "ACCESSIBLE_ENV_FILE"
     * @const
     */
    "ACCESSIBLE_ENV_FILE": "ACCESSIBLE_ENV_FILE"
};



export default Finding;

