/*
 * Web Security Scanner API
 * Scans your Compute and App Engine apps for common web vulnerabilities.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Authentication;
import org.openapitools.client.model.ScanRun;
import org.openapitools.client.model.Schedule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A ScanConfig resource contains the configurations to launch a scan. next id: 12
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:54.657978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScanConfig {
  public static final String SERIALIZED_NAME_AUTHENTICATION = "authentication";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION)
  private Authentication authentication;

  public static final String SERIALIZED_NAME_BLACKLIST_PATTERNS = "blacklistPatterns";
  @SerializedName(SERIALIZED_NAME_BLACKLIST_PATTERNS)
  private List<String> blacklistPatterns = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_LATEST_RUN = "latestRun";
  @SerializedName(SERIALIZED_NAME_LATEST_RUN)
  private ScanRun latestRun;

  public static final String SERIALIZED_NAME_MAX_QPS = "maxQps";
  @SerializedName(SERIALIZED_NAME_MAX_QPS)
  private Integer maxQps;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private Schedule schedule;

  public static final String SERIALIZED_NAME_STARTING_URLS = "startingUrls";
  @SerializedName(SERIALIZED_NAME_STARTING_URLS)
  private List<String> startingUrls = new ArrayList<>();

  /**
   * Gets or Sets targetPlatforms
   */
  @JsonAdapter(TargetPlatformsEnum.Adapter.class)
  public enum TargetPlatformsEnum {
    TARGET_PLATFORM_UNSPECIFIED("TARGET_PLATFORM_UNSPECIFIED"),
    
    APP_ENGINE("APP_ENGINE"),
    
    COMPUTE("COMPUTE"),
    
    CLOUD_RUN("CLOUD_RUN"),
    
    CLOUD_FUNCTIONS("CLOUD_FUNCTIONS");

    private String value;

    TargetPlatformsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetPlatformsEnum fromValue(String value) {
      for (TargetPlatformsEnum b : TargetPlatformsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetPlatformsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetPlatformsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetPlatformsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetPlatformsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetPlatformsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGET_PLATFORMS = "targetPlatforms";
  @SerializedName(SERIALIZED_NAME_TARGET_PLATFORMS)
  private List<TargetPlatformsEnum> targetPlatforms = new ArrayList<>();

  /**
   * The user agent used during scanning.
   */
  @JsonAdapter(UserAgentEnum.Adapter.class)
  public enum UserAgentEnum {
    USER_AGENT_UNSPECIFIED("USER_AGENT_UNSPECIFIED"),
    
    CHROME_LINUX("CHROME_LINUX"),
    
    CHROME_ANDROID("CHROME_ANDROID"),
    
    SAFARI_IPHONE("SAFARI_IPHONE");

    private String value;

    UserAgentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserAgentEnum fromValue(String value) {
      for (UserAgentEnum b : UserAgentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserAgentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserAgentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserAgentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserAgentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UserAgentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USER_AGENT = "userAgent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private UserAgentEnum userAgent;

  public ScanConfig() {
  }

  public ScanConfig authentication(Authentication authentication) {
    this.authentication = authentication;
    return this;
  }

  /**
   * Get authentication
   * @return authentication
   */
  @javax.annotation.Nullable
  public Authentication getAuthentication() {
    return authentication;
  }

  public void setAuthentication(Authentication authentication) {
    this.authentication = authentication;
  }


  public ScanConfig blacklistPatterns(List<String> blacklistPatterns) {
    this.blacklistPatterns = blacklistPatterns;
    return this;
  }

  public ScanConfig addBlacklistPatternsItem(String blacklistPatternsItem) {
    if (this.blacklistPatterns == null) {
      this.blacklistPatterns = new ArrayList<>();
    }
    this.blacklistPatterns.add(blacklistPatternsItem);
    return this;
  }

  /**
   * The excluded URL patterns as described in https://cloud.google.com/security-command-center/docs/how-to-use-web-security-scanner#excluding_urls
   * @return blacklistPatterns
   */
  @javax.annotation.Nullable
  public List<String> getBlacklistPatterns() {
    return blacklistPatterns;
  }

  public void setBlacklistPatterns(List<String> blacklistPatterns) {
    this.blacklistPatterns = blacklistPatterns;
  }


  public ScanConfig displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The user provided display name of the ScanConfig.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ScanConfig latestRun(ScanRun latestRun) {
    this.latestRun = latestRun;
    return this;
  }

  /**
   * Get latestRun
   * @return latestRun
   */
  @javax.annotation.Nullable
  public ScanRun getLatestRun() {
    return latestRun;
  }

  public void setLatestRun(ScanRun latestRun) {
    this.latestRun = latestRun;
  }


  public ScanConfig maxQps(Integer maxQps) {
    this.maxQps = maxQps;
    return this;
  }

  /**
   * The maximum QPS during scanning. A valid value ranges from 5 to 20 inclusively. If the field is unspecified or its value is set 0, server will default to 15. Other values outside of [5, 20] range will be rejected with INVALID_ARGUMENT error.
   * @return maxQps
   */
  @javax.annotation.Nullable
  public Integer getMaxQps() {
    return maxQps;
  }

  public void setMaxQps(Integer maxQps) {
    this.maxQps = maxQps;
  }


  public ScanConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the ScanConfig. The name follows the format of &#39;projects/{projectId}/scanConfigs/{scanConfigId}&#39;. The ScanConfig IDs are generated by the system.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ScanConfig schedule(Schedule schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Get schedule
   * @return schedule
   */
  @javax.annotation.Nullable
  public Schedule getSchedule() {
    return schedule;
  }

  public void setSchedule(Schedule schedule) {
    this.schedule = schedule;
  }


  public ScanConfig startingUrls(List<String> startingUrls) {
    this.startingUrls = startingUrls;
    return this;
  }

  public ScanConfig addStartingUrlsItem(String startingUrlsItem) {
    if (this.startingUrls == null) {
      this.startingUrls = new ArrayList<>();
    }
    this.startingUrls.add(startingUrlsItem);
    return this;
  }

  /**
   * Required. The starting URLs from which the scanner finds site pages.
   * @return startingUrls
   */
  @javax.annotation.Nullable
  public List<String> getStartingUrls() {
    return startingUrls;
  }

  public void setStartingUrls(List<String> startingUrls) {
    this.startingUrls = startingUrls;
  }


  public ScanConfig targetPlatforms(List<TargetPlatformsEnum> targetPlatforms) {
    this.targetPlatforms = targetPlatforms;
    return this;
  }

  public ScanConfig addTargetPlatformsItem(TargetPlatformsEnum targetPlatformsItem) {
    if (this.targetPlatforms == null) {
      this.targetPlatforms = new ArrayList<>();
    }
    this.targetPlatforms.add(targetPlatformsItem);
    return this;
  }

  /**
   * Set of Google Cloud platforms targeted by the scan. If empty, APP_ENGINE will be used as a default.
   * @return targetPlatforms
   */
  @javax.annotation.Nullable
  public List<TargetPlatformsEnum> getTargetPlatforms() {
    return targetPlatforms;
  }

  public void setTargetPlatforms(List<TargetPlatformsEnum> targetPlatforms) {
    this.targetPlatforms = targetPlatforms;
  }


  public ScanConfig userAgent(UserAgentEnum userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  /**
   * The user agent used during scanning.
   * @return userAgent
   */
  @javax.annotation.Nullable
  public UserAgentEnum getUserAgent() {
    return userAgent;
  }

  public void setUserAgent(UserAgentEnum userAgent) {
    this.userAgent = userAgent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScanConfig scanConfig = (ScanConfig) o;
    return Objects.equals(this.authentication, scanConfig.authentication) &&
        Objects.equals(this.blacklistPatterns, scanConfig.blacklistPatterns) &&
        Objects.equals(this.displayName, scanConfig.displayName) &&
        Objects.equals(this.latestRun, scanConfig.latestRun) &&
        Objects.equals(this.maxQps, scanConfig.maxQps) &&
        Objects.equals(this.name, scanConfig.name) &&
        Objects.equals(this.schedule, scanConfig.schedule) &&
        Objects.equals(this.startingUrls, scanConfig.startingUrls) &&
        Objects.equals(this.targetPlatforms, scanConfig.targetPlatforms) &&
        Objects.equals(this.userAgent, scanConfig.userAgent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authentication, blacklistPatterns, displayName, latestRun, maxQps, name, schedule, startingUrls, targetPlatforms, userAgent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScanConfig {\n");
    sb.append("    authentication: ").append(toIndentedString(authentication)).append("\n");
    sb.append("    blacklistPatterns: ").append(toIndentedString(blacklistPatterns)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    latestRun: ").append(toIndentedString(latestRun)).append("\n");
    sb.append("    maxQps: ").append(toIndentedString(maxQps)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    startingUrls: ").append(toIndentedString(startingUrls)).append("\n");
    sb.append("    targetPlatforms: ").append(toIndentedString(targetPlatforms)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authentication");
    openapiFields.add("blacklistPatterns");
    openapiFields.add("displayName");
    openapiFields.add("latestRun");
    openapiFields.add("maxQps");
    openapiFields.add("name");
    openapiFields.add("schedule");
    openapiFields.add("startingUrls");
    openapiFields.add("targetPlatforms");
    openapiFields.add("userAgent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScanConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScanConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScanConfig is not found in the empty JSON string", ScanConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScanConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScanConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `authentication`
      if (jsonObj.get("authentication") != null && !jsonObj.get("authentication").isJsonNull()) {
        Authentication.validateJsonElement(jsonObj.get("authentication"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("blacklistPatterns") != null && !jsonObj.get("blacklistPatterns").isJsonNull() && !jsonObj.get("blacklistPatterns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blacklistPatterns` to be an array in the JSON string but got `%s`", jsonObj.get("blacklistPatterns").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `latestRun`
      if (jsonObj.get("latestRun") != null && !jsonObj.get("latestRun").isJsonNull()) {
        ScanRun.validateJsonElement(jsonObj.get("latestRun"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `schedule`
      if (jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) {
        Schedule.validateJsonElement(jsonObj.get("schedule"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("startingUrls") != null && !jsonObj.get("startingUrls").isJsonNull() && !jsonObj.get("startingUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `startingUrls` to be an array in the JSON string but got `%s`", jsonObj.get("startingUrls").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targetPlatforms") != null && !jsonObj.get("targetPlatforms").isJsonNull() && !jsonObj.get("targetPlatforms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetPlatforms` to be an array in the JSON string but got `%s`", jsonObj.get("targetPlatforms").toString()));
      }
      if ((jsonObj.get("userAgent") != null && !jsonObj.get("userAgent").isJsonNull()) && !jsonObj.get("userAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userAgent").toString()));
      }
      // validate the optional field `userAgent`
      if (jsonObj.get("userAgent") != null && !jsonObj.get("userAgent").isJsonNull()) {
        UserAgentEnum.validateJsonElement(jsonObj.get("userAgent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScanConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScanConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScanConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScanConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ScanConfig>() {
           @Override
           public void write(JsonWriter out, ScanConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScanConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScanConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScanConfig
   * @throws IOException if the JSON string is invalid with respect to ScanConfig
   */
  public static ScanConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScanConfig.class);
  }

  /**
   * Convert an instance of ScanConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

