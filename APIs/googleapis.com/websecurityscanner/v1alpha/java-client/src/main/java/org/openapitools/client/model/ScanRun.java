/*
 * Web Security Scanner API
 * Scans your Compute and App Engine apps for common web vulnerabilities.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A ScanRun is a output-only resource representing an actual run of the scan.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:54.657978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScanRun {
  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  /**
   * The execution state of the ScanRun.
   */
  @JsonAdapter(ExecutionStateEnum.Adapter.class)
  public enum ExecutionStateEnum {
    EXECUTION_STATE_UNSPECIFIED("EXECUTION_STATE_UNSPECIFIED"),
    
    QUEUED("QUEUED"),
    
    SCANNING("SCANNING"),
    
    FINISHED("FINISHED");

    private String value;

    ExecutionStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExecutionStateEnum fromValue(String value) {
      for (ExecutionStateEnum b : ExecutionStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExecutionStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExecutionStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExecutionStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExecutionStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExecutionStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXECUTION_STATE = "executionState";
  @SerializedName(SERIALIZED_NAME_EXECUTION_STATE)
  private ExecutionStateEnum executionState;

  public static final String SERIALIZED_NAME_HAS_VULNERABILITIES = "hasVulnerabilities";
  @SerializedName(SERIALIZED_NAME_HAS_VULNERABILITIES)
  private Boolean hasVulnerabilities;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROGRESS_PERCENT = "progressPercent";
  @SerializedName(SERIALIZED_NAME_PROGRESS_PERCENT)
  private Integer progressPercent;

  /**
   * The result state of the ScanRun. This field is only available after the execution state reaches \&quot;FINISHED\&quot;.
   */
  @JsonAdapter(ResultStateEnum.Adapter.class)
  public enum ResultStateEnum {
    RESULT_STATE_UNSPECIFIED("RESULT_STATE_UNSPECIFIED"),
    
    SUCCESS("SUCCESS"),
    
    ERROR("ERROR"),
    
    KILLED("KILLED");

    private String value;

    ResultStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResultStateEnum fromValue(String value) {
      for (ResultStateEnum b : ResultStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResultStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResultStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResultStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResultStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESULT_STATE = "resultState";
  @SerializedName(SERIALIZED_NAME_RESULT_STATE)
  private ResultStateEnum resultState;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_URLS_CRAWLED_COUNT = "urlsCrawledCount";
  @SerializedName(SERIALIZED_NAME_URLS_CRAWLED_COUNT)
  private String urlsCrawledCount;

  public static final String SERIALIZED_NAME_URLS_TESTED_COUNT = "urlsTestedCount";
  @SerializedName(SERIALIZED_NAME_URLS_TESTED_COUNT)
  private String urlsTestedCount;

  public ScanRun() {
  }

  public ScanRun endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The time at which the ScanRun reached termination state - that the ScanRun is either finished or stopped by user.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public ScanRun executionState(ExecutionStateEnum executionState) {
    this.executionState = executionState;
    return this;
  }

  /**
   * The execution state of the ScanRun.
   * @return executionState
   */
  @javax.annotation.Nullable
  public ExecutionStateEnum getExecutionState() {
    return executionState;
  }

  public void setExecutionState(ExecutionStateEnum executionState) {
    this.executionState = executionState;
  }


  public ScanRun hasVulnerabilities(Boolean hasVulnerabilities) {
    this.hasVulnerabilities = hasVulnerabilities;
    return this;
  }

  /**
   * Whether the scan run has found any vulnerabilities.
   * @return hasVulnerabilities
   */
  @javax.annotation.Nullable
  public Boolean getHasVulnerabilities() {
    return hasVulnerabilities;
  }

  public void setHasVulnerabilities(Boolean hasVulnerabilities) {
    this.hasVulnerabilities = hasVulnerabilities;
  }


  public ScanRun name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the ScanRun. The name follows the format of &#39;projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}&#39;. The ScanRun IDs are generated by the system.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ScanRun progressPercent(Integer progressPercent) {
    this.progressPercent = progressPercent;
    return this;
  }

  /**
   * The percentage of total completion ranging from 0 to 100. If the scan is in queue, the value is 0. If the scan is running, the value ranges from 0 to 100. If the scan is finished, the value is 100.
   * @return progressPercent
   */
  @javax.annotation.Nullable
  public Integer getProgressPercent() {
    return progressPercent;
  }

  public void setProgressPercent(Integer progressPercent) {
    this.progressPercent = progressPercent;
  }


  public ScanRun resultState(ResultStateEnum resultState) {
    this.resultState = resultState;
    return this;
  }

  /**
   * The result state of the ScanRun. This field is only available after the execution state reaches \&quot;FINISHED\&quot;.
   * @return resultState
   */
  @javax.annotation.Nullable
  public ResultStateEnum getResultState() {
    return resultState;
  }

  public void setResultState(ResultStateEnum resultState) {
    this.resultState = resultState;
  }


  public ScanRun startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time at which the ScanRun started.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public ScanRun urlsCrawledCount(String urlsCrawledCount) {
    this.urlsCrawledCount = urlsCrawledCount;
    return this;
  }

  /**
   * The number of URLs crawled during this ScanRun. If the scan is in progress, the value represents the number of URLs crawled up to now.
   * @return urlsCrawledCount
   */
  @javax.annotation.Nullable
  public String getUrlsCrawledCount() {
    return urlsCrawledCount;
  }

  public void setUrlsCrawledCount(String urlsCrawledCount) {
    this.urlsCrawledCount = urlsCrawledCount;
  }


  public ScanRun urlsTestedCount(String urlsTestedCount) {
    this.urlsTestedCount = urlsTestedCount;
    return this;
  }

  /**
   * The number of URLs tested during this ScanRun. If the scan is in progress, the value represents the number of URLs tested up to now. The number of URLs tested is usually larger than the number URLS crawled because typically a crawled URL is tested with multiple test payloads.
   * @return urlsTestedCount
   */
  @javax.annotation.Nullable
  public String getUrlsTestedCount() {
    return urlsTestedCount;
  }

  public void setUrlsTestedCount(String urlsTestedCount) {
    this.urlsTestedCount = urlsTestedCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScanRun scanRun = (ScanRun) o;
    return Objects.equals(this.endTime, scanRun.endTime) &&
        Objects.equals(this.executionState, scanRun.executionState) &&
        Objects.equals(this.hasVulnerabilities, scanRun.hasVulnerabilities) &&
        Objects.equals(this.name, scanRun.name) &&
        Objects.equals(this.progressPercent, scanRun.progressPercent) &&
        Objects.equals(this.resultState, scanRun.resultState) &&
        Objects.equals(this.startTime, scanRun.startTime) &&
        Objects.equals(this.urlsCrawledCount, scanRun.urlsCrawledCount) &&
        Objects.equals(this.urlsTestedCount, scanRun.urlsTestedCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, executionState, hasVulnerabilities, name, progressPercent, resultState, startTime, urlsCrawledCount, urlsTestedCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScanRun {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    executionState: ").append(toIndentedString(executionState)).append("\n");
    sb.append("    hasVulnerabilities: ").append(toIndentedString(hasVulnerabilities)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    progressPercent: ").append(toIndentedString(progressPercent)).append("\n");
    sb.append("    resultState: ").append(toIndentedString(resultState)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    urlsCrawledCount: ").append(toIndentedString(urlsCrawledCount)).append("\n");
    sb.append("    urlsTestedCount: ").append(toIndentedString(urlsTestedCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("executionState");
    openapiFields.add("hasVulnerabilities");
    openapiFields.add("name");
    openapiFields.add("progressPercent");
    openapiFields.add("resultState");
    openapiFields.add("startTime");
    openapiFields.add("urlsCrawledCount");
    openapiFields.add("urlsTestedCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScanRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScanRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScanRun is not found in the empty JSON string", ScanRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScanRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScanRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("executionState") != null && !jsonObj.get("executionState").isJsonNull()) && !jsonObj.get("executionState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionState").toString()));
      }
      // validate the optional field `executionState`
      if (jsonObj.get("executionState") != null && !jsonObj.get("executionState").isJsonNull()) {
        ExecutionStateEnum.validateJsonElement(jsonObj.get("executionState"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("resultState") != null && !jsonObj.get("resultState").isJsonNull()) && !jsonObj.get("resultState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultState").toString()));
      }
      // validate the optional field `resultState`
      if (jsonObj.get("resultState") != null && !jsonObj.get("resultState").isJsonNull()) {
        ResultStateEnum.validateJsonElement(jsonObj.get("resultState"));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("urlsCrawledCount") != null && !jsonObj.get("urlsCrawledCount").isJsonNull()) && !jsonObj.get("urlsCrawledCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlsCrawledCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlsCrawledCount").toString()));
      }
      if ((jsonObj.get("urlsTestedCount") != null && !jsonObj.get("urlsTestedCount").isJsonNull()) && !jsonObj.get("urlsTestedCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlsTestedCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlsTestedCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScanRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScanRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScanRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScanRun.class));

       return (TypeAdapter<T>) new TypeAdapter<ScanRun>() {
           @Override
           public void write(JsonWriter out, ScanRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScanRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScanRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScanRun
   * @throws IOException if the JSON string is invalid with respect to ScanRun
   */
  public static ScanRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScanRun.class);
  }

  /**
   * Convert an instance of ScanRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

