# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication import Authentication
from openapi_server.models.scan_run import ScanRun
from openapi_server.models.schedule import Schedule
from openapi_server import util


class ScanConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication: Authentication=None, blacklist_patterns: List[str]=None, display_name: str=None, latest_run: ScanRun=None, max_qps: int=None, name: str=None, schedule: Schedule=None, starting_urls: List[str]=None, target_platforms: List[str]=None, user_agent: str=None):
        """ScanConfig - a model defined in OpenAPI

        :param authentication: The authentication of this ScanConfig.
        :param blacklist_patterns: The blacklist_patterns of this ScanConfig.
        :param display_name: The display_name of this ScanConfig.
        :param latest_run: The latest_run of this ScanConfig.
        :param max_qps: The max_qps of this ScanConfig.
        :param name: The name of this ScanConfig.
        :param schedule: The schedule of this ScanConfig.
        :param starting_urls: The starting_urls of this ScanConfig.
        :param target_platforms: The target_platforms of this ScanConfig.
        :param user_agent: The user_agent of this ScanConfig.
        """
        self.openapi_types = {
            'authentication': Authentication,
            'blacklist_patterns': List[str],
            'display_name': str,
            'latest_run': ScanRun,
            'max_qps': int,
            'name': str,
            'schedule': Schedule,
            'starting_urls': List[str],
            'target_platforms': List[str],
            'user_agent': str
        }

        self.attribute_map = {
            'authentication': 'authentication',
            'blacklist_patterns': 'blacklistPatterns',
            'display_name': 'displayName',
            'latest_run': 'latestRun',
            'max_qps': 'maxQps',
            'name': 'name',
            'schedule': 'schedule',
            'starting_urls': 'startingUrls',
            'target_platforms': 'targetPlatforms',
            'user_agent': 'userAgent'
        }

        self._authentication = authentication
        self._blacklist_patterns = blacklist_patterns
        self._display_name = display_name
        self._latest_run = latest_run
        self._max_qps = max_qps
        self._name = name
        self._schedule = schedule
        self._starting_urls = starting_urls
        self._target_platforms = target_platforms
        self._user_agent = user_agent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScanConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScanConfig of this ScanConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication(self):
        """Gets the authentication of this ScanConfig.


        :return: The authentication of this ScanConfig.
        :rtype: Authentication
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this ScanConfig.


        :param authentication: The authentication of this ScanConfig.
        :type authentication: Authentication
        """

        self._authentication = authentication

    @property
    def blacklist_patterns(self):
        """Gets the blacklist_patterns of this ScanConfig.

        The excluded URL patterns as described in https://cloud.google.com/security-command-center/docs/how-to-use-web-security-scanner#excluding_urls

        :return: The blacklist_patterns of this ScanConfig.
        :rtype: List[str]
        """
        return self._blacklist_patterns

    @blacklist_patterns.setter
    def blacklist_patterns(self, blacklist_patterns):
        """Sets the blacklist_patterns of this ScanConfig.

        The excluded URL patterns as described in https://cloud.google.com/security-command-center/docs/how-to-use-web-security-scanner#excluding_urls

        :param blacklist_patterns: The blacklist_patterns of this ScanConfig.
        :type blacklist_patterns: List[str]
        """

        self._blacklist_patterns = blacklist_patterns

    @property
    def display_name(self):
        """Gets the display_name of this ScanConfig.

        Required. The user provided display name of the ScanConfig.

        :return: The display_name of this ScanConfig.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ScanConfig.

        Required. The user provided display name of the ScanConfig.

        :param display_name: The display_name of this ScanConfig.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def latest_run(self):
        """Gets the latest_run of this ScanConfig.


        :return: The latest_run of this ScanConfig.
        :rtype: ScanRun
        """
        return self._latest_run

    @latest_run.setter
    def latest_run(self, latest_run):
        """Sets the latest_run of this ScanConfig.


        :param latest_run: The latest_run of this ScanConfig.
        :type latest_run: ScanRun
        """

        self._latest_run = latest_run

    @property
    def max_qps(self):
        """Gets the max_qps of this ScanConfig.

        The maximum QPS during scanning. A valid value ranges from 5 to 20 inclusively. If the field is unspecified or its value is set 0, server will default to 15. Other values outside of [5, 20] range will be rejected with INVALID_ARGUMENT error.

        :return: The max_qps of this ScanConfig.
        :rtype: int
        """
        return self._max_qps

    @max_qps.setter
    def max_qps(self, max_qps):
        """Sets the max_qps of this ScanConfig.

        The maximum QPS during scanning. A valid value ranges from 5 to 20 inclusively. If the field is unspecified or its value is set 0, server will default to 15. Other values outside of [5, 20] range will be rejected with INVALID_ARGUMENT error.

        :param max_qps: The max_qps of this ScanConfig.
        :type max_qps: int
        """

        self._max_qps = max_qps

    @property
    def name(self):
        """Gets the name of this ScanConfig.

        The resource name of the ScanConfig. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}'. The ScanConfig IDs are generated by the system.

        :return: The name of this ScanConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScanConfig.

        The resource name of the ScanConfig. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}'. The ScanConfig IDs are generated by the system.

        :param name: The name of this ScanConfig.
        :type name: str
        """

        self._name = name

    @property
    def schedule(self):
        """Gets the schedule of this ScanConfig.


        :return: The schedule of this ScanConfig.
        :rtype: Schedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this ScanConfig.


        :param schedule: The schedule of this ScanConfig.
        :type schedule: Schedule
        """

        self._schedule = schedule

    @property
    def starting_urls(self):
        """Gets the starting_urls of this ScanConfig.

        Required. The starting URLs from which the scanner finds site pages.

        :return: The starting_urls of this ScanConfig.
        :rtype: List[str]
        """
        return self._starting_urls

    @starting_urls.setter
    def starting_urls(self, starting_urls):
        """Sets the starting_urls of this ScanConfig.

        Required. The starting URLs from which the scanner finds site pages.

        :param starting_urls: The starting_urls of this ScanConfig.
        :type starting_urls: List[str]
        """

        self._starting_urls = starting_urls

    @property
    def target_platforms(self):
        """Gets the target_platforms of this ScanConfig.

        Set of Google Cloud platforms targeted by the scan. If empty, APP_ENGINE will be used as a default.

        :return: The target_platforms of this ScanConfig.
        :rtype: List[str]
        """
        return self._target_platforms

    @target_platforms.setter
    def target_platforms(self, target_platforms):
        """Sets the target_platforms of this ScanConfig.

        Set of Google Cloud platforms targeted by the scan. If empty, APP_ENGINE will be used as a default.

        :param target_platforms: The target_platforms of this ScanConfig.
        :type target_platforms: List[str]
        """
        allowed_values = ["TARGET_PLATFORM_UNSPECIFIED", "APP_ENGINE", "COMPUTE", "CLOUD_RUN", "CLOUD_FUNCTIONS"]  # noqa: E501
        if not set(target_platforms).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `target_platforms` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(target_platforms) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._target_platforms = target_platforms

    @property
    def user_agent(self):
        """Gets the user_agent of this ScanConfig.

        The user agent used during scanning.

        :return: The user_agent of this ScanConfig.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this ScanConfig.

        The user agent used during scanning.

        :param user_agent: The user_agent of this ScanConfig.
        :type user_agent: str
        """
        allowed_values = ["USER_AGENT_UNSPECIFIED", "CHROME_LINUX", "CHROME_ANDROID", "SAFARI_IPHONE"]  # noqa: E501
        if user_agent not in allowed_values:
            raise ValueError(
                "Invalid value for `user_agent` ({0}), must be one of {1}"
                .format(user_agent, allowed_values)
            )

        self._user_agent = user_agent
