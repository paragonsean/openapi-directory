# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, login_url: str=None, password: str=None, username: str=None):
        """CustomAccount - a model defined in OpenAPI

        :param login_url: The login_url of this CustomAccount.
        :param password: The password of this CustomAccount.
        :param username: The username of this CustomAccount.
        """
        self.openapi_types = {
            'login_url': str,
            'password': str,
            'username': str
        }

        self.attribute_map = {
            'login_url': 'loginUrl',
            'password': 'password',
            'username': 'username'
        }

        self._login_url = login_url
        self._password = password
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomAccount of this CustomAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def login_url(self):
        """Gets the login_url of this CustomAccount.

        Required. The login form URL of the website.

        :return: The login_url of this CustomAccount.
        :rtype: str
        """
        return self._login_url

    @login_url.setter
    def login_url(self, login_url):
        """Sets the login_url of this CustomAccount.

        Required. The login form URL of the website.

        :param login_url: The login_url of this CustomAccount.
        :type login_url: str
        """

        self._login_url = login_url

    @property
    def password(self):
        """Gets the password of this CustomAccount.

        Required. Input only. The password of the custom account. The credential is stored encrypted and not returned in any response nor included in audit logs.

        :return: The password of this CustomAccount.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CustomAccount.

        Required. Input only. The password of the custom account. The credential is stored encrypted and not returned in any response nor included in audit logs.

        :param password: The password of this CustomAccount.
        :type password: str
        """

        self._password = password

    @property
    def username(self):
        """Gets the username of this CustomAccount.

        Required. The user name of the custom account.

        :return: The username of this CustomAccount.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CustomAccount.

        Required. The user name of the custom account.

        :param username: The username of this CustomAccount.
        :type username: str
        """

        self._username = username
