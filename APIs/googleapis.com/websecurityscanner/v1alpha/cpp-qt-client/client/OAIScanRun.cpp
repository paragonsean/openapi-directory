/**
 * Web Security Scanner API
 * Scans your Compute and App Engine apps for common web vulnerabilities.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScanRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScanRun::OAIScanRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScanRun::OAIScanRun() {
    this->initializeModel();
}

OAIScanRun::~OAIScanRun() {}

void OAIScanRun::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_execution_state_isSet = false;
    m_execution_state_isValid = false;

    m_has_vulnerabilities_isSet = false;
    m_has_vulnerabilities_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_progress_percent_isSet = false;
    m_progress_percent_isValid = false;

    m_result_state_isSet = false;
    m_result_state_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_urls_crawled_count_isSet = false;
    m_urls_crawled_count_isValid = false;

    m_urls_tested_count_isSet = false;
    m_urls_tested_count_isValid = false;
}

void OAIScanRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScanRun::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_execution_state_isValid = ::OpenAPI::fromJsonValue(m_execution_state, json[QString("executionState")]);
    m_execution_state_isSet = !json[QString("executionState")].isNull() && m_execution_state_isValid;

    m_has_vulnerabilities_isValid = ::OpenAPI::fromJsonValue(m_has_vulnerabilities, json[QString("hasVulnerabilities")]);
    m_has_vulnerabilities_isSet = !json[QString("hasVulnerabilities")].isNull() && m_has_vulnerabilities_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_progress_percent_isValid = ::OpenAPI::fromJsonValue(m_progress_percent, json[QString("progressPercent")]);
    m_progress_percent_isSet = !json[QString("progressPercent")].isNull() && m_progress_percent_isValid;

    m_result_state_isValid = ::OpenAPI::fromJsonValue(m_result_state, json[QString("resultState")]);
    m_result_state_isSet = !json[QString("resultState")].isNull() && m_result_state_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_urls_crawled_count_isValid = ::OpenAPI::fromJsonValue(m_urls_crawled_count, json[QString("urlsCrawledCount")]);
    m_urls_crawled_count_isSet = !json[QString("urlsCrawledCount")].isNull() && m_urls_crawled_count_isValid;

    m_urls_tested_count_isValid = ::OpenAPI::fromJsonValue(m_urls_tested_count, json[QString("urlsTestedCount")]);
    m_urls_tested_count_isSet = !json[QString("urlsTestedCount")].isNull() && m_urls_tested_count_isValid;
}

QString OAIScanRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScanRun::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_execution_state_isSet) {
        obj.insert(QString("executionState"), ::OpenAPI::toJsonValue(m_execution_state));
    }
    if (m_has_vulnerabilities_isSet) {
        obj.insert(QString("hasVulnerabilities"), ::OpenAPI::toJsonValue(m_has_vulnerabilities));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_progress_percent_isSet) {
        obj.insert(QString("progressPercent"), ::OpenAPI::toJsonValue(m_progress_percent));
    }
    if (m_result_state_isSet) {
        obj.insert(QString("resultState"), ::OpenAPI::toJsonValue(m_result_state));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_urls_crawled_count_isSet) {
        obj.insert(QString("urlsCrawledCount"), ::OpenAPI::toJsonValue(m_urls_crawled_count));
    }
    if (m_urls_tested_count_isSet) {
        obj.insert(QString("urlsTestedCount"), ::OpenAPI::toJsonValue(m_urls_tested_count));
    }
    return obj;
}

QString OAIScanRun::getEndTime() const {
    return m_end_time;
}
void OAIScanRun::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIScanRun::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIScanRun::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIScanRun::getExecutionState() const {
    return m_execution_state;
}
void OAIScanRun::setExecutionState(const QString &execution_state) {
    m_execution_state = execution_state;
    m_execution_state_isSet = true;
}

bool OAIScanRun::is_execution_state_Set() const{
    return m_execution_state_isSet;
}

bool OAIScanRun::is_execution_state_Valid() const{
    return m_execution_state_isValid;
}

bool OAIScanRun::isHasVulnerabilities() const {
    return m_has_vulnerabilities;
}
void OAIScanRun::setHasVulnerabilities(const bool &has_vulnerabilities) {
    m_has_vulnerabilities = has_vulnerabilities;
    m_has_vulnerabilities_isSet = true;
}

bool OAIScanRun::is_has_vulnerabilities_Set() const{
    return m_has_vulnerabilities_isSet;
}

bool OAIScanRun::is_has_vulnerabilities_Valid() const{
    return m_has_vulnerabilities_isValid;
}

QString OAIScanRun::getName() const {
    return m_name;
}
void OAIScanRun::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIScanRun::is_name_Set() const{
    return m_name_isSet;
}

bool OAIScanRun::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIScanRun::getProgressPercent() const {
    return m_progress_percent;
}
void OAIScanRun::setProgressPercent(const qint32 &progress_percent) {
    m_progress_percent = progress_percent;
    m_progress_percent_isSet = true;
}

bool OAIScanRun::is_progress_percent_Set() const{
    return m_progress_percent_isSet;
}

bool OAIScanRun::is_progress_percent_Valid() const{
    return m_progress_percent_isValid;
}

QString OAIScanRun::getResultState() const {
    return m_result_state;
}
void OAIScanRun::setResultState(const QString &result_state) {
    m_result_state = result_state;
    m_result_state_isSet = true;
}

bool OAIScanRun::is_result_state_Set() const{
    return m_result_state_isSet;
}

bool OAIScanRun::is_result_state_Valid() const{
    return m_result_state_isValid;
}

QString OAIScanRun::getStartTime() const {
    return m_start_time;
}
void OAIScanRun::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIScanRun::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIScanRun::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIScanRun::getUrlsCrawledCount() const {
    return m_urls_crawled_count;
}
void OAIScanRun::setUrlsCrawledCount(const QString &urls_crawled_count) {
    m_urls_crawled_count = urls_crawled_count;
    m_urls_crawled_count_isSet = true;
}

bool OAIScanRun::is_urls_crawled_count_Set() const{
    return m_urls_crawled_count_isSet;
}

bool OAIScanRun::is_urls_crawled_count_Valid() const{
    return m_urls_crawled_count_isValid;
}

QString OAIScanRun::getUrlsTestedCount() const {
    return m_urls_tested_count;
}
void OAIScanRun::setUrlsTestedCount(const QString &urls_tested_count) {
    m_urls_tested_count = urls_tested_count;
    m_urls_tested_count_isSet = true;
}

bool OAIScanRun::is_urls_tested_count_Set() const{
    return m_urls_tested_count_isSet;
}

bool OAIScanRun::is_urls_tested_count_Valid() const{
    return m_urls_tested_count_isValid;
}

bool OAIScanRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_vulnerabilities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls_crawled_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls_tested_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScanRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
