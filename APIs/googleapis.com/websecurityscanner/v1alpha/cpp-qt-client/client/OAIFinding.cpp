/**
 * Web Security Scanner API
 * Scans your Compute and App Engine apps for common web vulnerabilities.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFinding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFinding::OAIFinding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFinding::OAIFinding() {
    this->initializeModel();
}

OAIFinding::~OAIFinding() {}

void OAIFinding::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_final_url_isSet = false;
    m_final_url_isValid = false;

    m_finding_type_isSet = false;
    m_finding_type_isValid = false;

    m_frame_url_isSet = false;
    m_frame_url_isValid = false;

    m_fuzzed_url_isSet = false;
    m_fuzzed_url_isValid = false;

    m_http_method_isSet = false;
    m_http_method_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_outdated_library_isSet = false;
    m_outdated_library_isValid = false;

    m_reproduction_url_isSet = false;
    m_reproduction_url_isValid = false;

    m_tracking_id_isSet = false;
    m_tracking_id_isValid = false;

    m_violating_resource_isSet = false;
    m_violating_resource_isValid = false;

    m_vulnerable_headers_isSet = false;
    m_vulnerable_headers_isValid = false;

    m_vulnerable_parameters_isSet = false;
    m_vulnerable_parameters_isValid = false;

    m_xss_isSet = false;
    m_xss_isValid = false;
}

void OAIFinding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFinding::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_final_url_isValid = ::OpenAPI::fromJsonValue(m_final_url, json[QString("finalUrl")]);
    m_final_url_isSet = !json[QString("finalUrl")].isNull() && m_final_url_isValid;

    m_finding_type_isValid = ::OpenAPI::fromJsonValue(m_finding_type, json[QString("findingType")]);
    m_finding_type_isSet = !json[QString("findingType")].isNull() && m_finding_type_isValid;

    m_frame_url_isValid = ::OpenAPI::fromJsonValue(m_frame_url, json[QString("frameUrl")]);
    m_frame_url_isSet = !json[QString("frameUrl")].isNull() && m_frame_url_isValid;

    m_fuzzed_url_isValid = ::OpenAPI::fromJsonValue(m_fuzzed_url, json[QString("fuzzedUrl")]);
    m_fuzzed_url_isSet = !json[QString("fuzzedUrl")].isNull() && m_fuzzed_url_isValid;

    m_http_method_isValid = ::OpenAPI::fromJsonValue(m_http_method, json[QString("httpMethod")]);
    m_http_method_isSet = !json[QString("httpMethod")].isNull() && m_http_method_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_outdated_library_isValid = ::OpenAPI::fromJsonValue(m_outdated_library, json[QString("outdatedLibrary")]);
    m_outdated_library_isSet = !json[QString("outdatedLibrary")].isNull() && m_outdated_library_isValid;

    m_reproduction_url_isValid = ::OpenAPI::fromJsonValue(m_reproduction_url, json[QString("reproductionUrl")]);
    m_reproduction_url_isSet = !json[QString("reproductionUrl")].isNull() && m_reproduction_url_isValid;

    m_tracking_id_isValid = ::OpenAPI::fromJsonValue(m_tracking_id, json[QString("trackingId")]);
    m_tracking_id_isSet = !json[QString("trackingId")].isNull() && m_tracking_id_isValid;

    m_violating_resource_isValid = ::OpenAPI::fromJsonValue(m_violating_resource, json[QString("violatingResource")]);
    m_violating_resource_isSet = !json[QString("violatingResource")].isNull() && m_violating_resource_isValid;

    m_vulnerable_headers_isValid = ::OpenAPI::fromJsonValue(m_vulnerable_headers, json[QString("vulnerableHeaders")]);
    m_vulnerable_headers_isSet = !json[QString("vulnerableHeaders")].isNull() && m_vulnerable_headers_isValid;

    m_vulnerable_parameters_isValid = ::OpenAPI::fromJsonValue(m_vulnerable_parameters, json[QString("vulnerableParameters")]);
    m_vulnerable_parameters_isSet = !json[QString("vulnerableParameters")].isNull() && m_vulnerable_parameters_isValid;

    m_xss_isValid = ::OpenAPI::fromJsonValue(m_xss, json[QString("xss")]);
    m_xss_isSet = !json[QString("xss")].isNull() && m_xss_isValid;
}

QString OAIFinding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFinding::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_final_url_isSet) {
        obj.insert(QString("finalUrl"), ::OpenAPI::toJsonValue(m_final_url));
    }
    if (m_finding_type_isSet) {
        obj.insert(QString("findingType"), ::OpenAPI::toJsonValue(m_finding_type));
    }
    if (m_frame_url_isSet) {
        obj.insert(QString("frameUrl"), ::OpenAPI::toJsonValue(m_frame_url));
    }
    if (m_fuzzed_url_isSet) {
        obj.insert(QString("fuzzedUrl"), ::OpenAPI::toJsonValue(m_fuzzed_url));
    }
    if (m_http_method_isSet) {
        obj.insert(QString("httpMethod"), ::OpenAPI::toJsonValue(m_http_method));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_outdated_library.isSet()) {
        obj.insert(QString("outdatedLibrary"), ::OpenAPI::toJsonValue(m_outdated_library));
    }
    if (m_reproduction_url_isSet) {
        obj.insert(QString("reproductionUrl"), ::OpenAPI::toJsonValue(m_reproduction_url));
    }
    if (m_tracking_id_isSet) {
        obj.insert(QString("trackingId"), ::OpenAPI::toJsonValue(m_tracking_id));
    }
    if (m_violating_resource.isSet()) {
        obj.insert(QString("violatingResource"), ::OpenAPI::toJsonValue(m_violating_resource));
    }
    if (m_vulnerable_headers.isSet()) {
        obj.insert(QString("vulnerableHeaders"), ::OpenAPI::toJsonValue(m_vulnerable_headers));
    }
    if (m_vulnerable_parameters.isSet()) {
        obj.insert(QString("vulnerableParameters"), ::OpenAPI::toJsonValue(m_vulnerable_parameters));
    }
    if (m_xss.isSet()) {
        obj.insert(QString("xss"), ::OpenAPI::toJsonValue(m_xss));
    }
    return obj;
}

QString OAIFinding::getBody() const {
    return m_body;
}
void OAIFinding::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIFinding::is_body_Set() const{
    return m_body_isSet;
}

bool OAIFinding::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIFinding::getDescription() const {
    return m_description;
}
void OAIFinding::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFinding::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFinding::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIFinding::getFinalUrl() const {
    return m_final_url;
}
void OAIFinding::setFinalUrl(const QString &final_url) {
    m_final_url = final_url;
    m_final_url_isSet = true;
}

bool OAIFinding::is_final_url_Set() const{
    return m_final_url_isSet;
}

bool OAIFinding::is_final_url_Valid() const{
    return m_final_url_isValid;
}

QString OAIFinding::getFindingType() const {
    return m_finding_type;
}
void OAIFinding::setFindingType(const QString &finding_type) {
    m_finding_type = finding_type;
    m_finding_type_isSet = true;
}

bool OAIFinding::is_finding_type_Set() const{
    return m_finding_type_isSet;
}

bool OAIFinding::is_finding_type_Valid() const{
    return m_finding_type_isValid;
}

QString OAIFinding::getFrameUrl() const {
    return m_frame_url;
}
void OAIFinding::setFrameUrl(const QString &frame_url) {
    m_frame_url = frame_url;
    m_frame_url_isSet = true;
}

bool OAIFinding::is_frame_url_Set() const{
    return m_frame_url_isSet;
}

bool OAIFinding::is_frame_url_Valid() const{
    return m_frame_url_isValid;
}

QString OAIFinding::getFuzzedUrl() const {
    return m_fuzzed_url;
}
void OAIFinding::setFuzzedUrl(const QString &fuzzed_url) {
    m_fuzzed_url = fuzzed_url;
    m_fuzzed_url_isSet = true;
}

bool OAIFinding::is_fuzzed_url_Set() const{
    return m_fuzzed_url_isSet;
}

bool OAIFinding::is_fuzzed_url_Valid() const{
    return m_fuzzed_url_isValid;
}

QString OAIFinding::getHttpMethod() const {
    return m_http_method;
}
void OAIFinding::setHttpMethod(const QString &http_method) {
    m_http_method = http_method;
    m_http_method_isSet = true;
}

bool OAIFinding::is_http_method_Set() const{
    return m_http_method_isSet;
}

bool OAIFinding::is_http_method_Valid() const{
    return m_http_method_isValid;
}

QString OAIFinding::getName() const {
    return m_name;
}
void OAIFinding::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFinding::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFinding::is_name_Valid() const{
    return m_name_isValid;
}

OAIOutdatedLibrary OAIFinding::getOutdatedLibrary() const {
    return m_outdated_library;
}
void OAIFinding::setOutdatedLibrary(const OAIOutdatedLibrary &outdated_library) {
    m_outdated_library = outdated_library;
    m_outdated_library_isSet = true;
}

bool OAIFinding::is_outdated_library_Set() const{
    return m_outdated_library_isSet;
}

bool OAIFinding::is_outdated_library_Valid() const{
    return m_outdated_library_isValid;
}

QString OAIFinding::getReproductionUrl() const {
    return m_reproduction_url;
}
void OAIFinding::setReproductionUrl(const QString &reproduction_url) {
    m_reproduction_url = reproduction_url;
    m_reproduction_url_isSet = true;
}

bool OAIFinding::is_reproduction_url_Set() const{
    return m_reproduction_url_isSet;
}

bool OAIFinding::is_reproduction_url_Valid() const{
    return m_reproduction_url_isValid;
}

QString OAIFinding::getTrackingId() const {
    return m_tracking_id;
}
void OAIFinding::setTrackingId(const QString &tracking_id) {
    m_tracking_id = tracking_id;
    m_tracking_id_isSet = true;
}

bool OAIFinding::is_tracking_id_Set() const{
    return m_tracking_id_isSet;
}

bool OAIFinding::is_tracking_id_Valid() const{
    return m_tracking_id_isValid;
}

OAIViolatingResource OAIFinding::getViolatingResource() const {
    return m_violating_resource;
}
void OAIFinding::setViolatingResource(const OAIViolatingResource &violating_resource) {
    m_violating_resource = violating_resource;
    m_violating_resource_isSet = true;
}

bool OAIFinding::is_violating_resource_Set() const{
    return m_violating_resource_isSet;
}

bool OAIFinding::is_violating_resource_Valid() const{
    return m_violating_resource_isValid;
}

OAIVulnerableHeaders OAIFinding::getVulnerableHeaders() const {
    return m_vulnerable_headers;
}
void OAIFinding::setVulnerableHeaders(const OAIVulnerableHeaders &vulnerable_headers) {
    m_vulnerable_headers = vulnerable_headers;
    m_vulnerable_headers_isSet = true;
}

bool OAIFinding::is_vulnerable_headers_Set() const{
    return m_vulnerable_headers_isSet;
}

bool OAIFinding::is_vulnerable_headers_Valid() const{
    return m_vulnerable_headers_isValid;
}

OAIVulnerableParameters OAIFinding::getVulnerableParameters() const {
    return m_vulnerable_parameters;
}
void OAIFinding::setVulnerableParameters(const OAIVulnerableParameters &vulnerable_parameters) {
    m_vulnerable_parameters = vulnerable_parameters;
    m_vulnerable_parameters_isSet = true;
}

bool OAIFinding::is_vulnerable_parameters_Set() const{
    return m_vulnerable_parameters_isSet;
}

bool OAIFinding::is_vulnerable_parameters_Valid() const{
    return m_vulnerable_parameters_isValid;
}

OAIXss OAIFinding::getXss() const {
    return m_xss;
}
void OAIFinding::setXss(const OAIXss &xss) {
    m_xss = xss;
    m_xss_isSet = true;
}

bool OAIFinding::is_xss_Set() const{
    return m_xss_isSet;
}

bool OAIFinding::is_xss_Valid() const{
    return m_xss_isValid;
}

bool OAIFinding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finding_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuzzed_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outdated_library.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reproduction_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violating_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerable_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerable_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_xss.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFinding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
