/**
 * Web Security Scanner API
 * Scans your Compute and App Engine apps for common web vulnerabilities.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerableHeaders.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerableHeaders::OAIVulnerableHeaders(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerableHeaders::OAIVulnerableHeaders() {
    this->initializeModel();
}

OAIVulnerableHeaders::~OAIVulnerableHeaders() {}

void OAIVulnerableHeaders::initializeModel() {

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_missing_headers_isSet = false;
    m_missing_headers_isValid = false;
}

void OAIVulnerableHeaders::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerableHeaders::fromJsonObject(QJsonObject json) {

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_missing_headers_isValid = ::OpenAPI::fromJsonValue(m_missing_headers, json[QString("missingHeaders")]);
    m_missing_headers_isSet = !json[QString("missingHeaders")].isNull() && m_missing_headers_isValid;
}

QString OAIVulnerableHeaders::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerableHeaders::asJsonObject() const {
    QJsonObject obj;
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_missing_headers.size() > 0) {
        obj.insert(QString("missingHeaders"), ::OpenAPI::toJsonValue(m_missing_headers));
    }
    return obj;
}

QList<OAIHeader> OAIVulnerableHeaders::getHeaders() const {
    return m_headers;
}
void OAIVulnerableHeaders::setHeaders(const QList<OAIHeader> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIVulnerableHeaders::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIVulnerableHeaders::is_headers_Valid() const{
    return m_headers_isValid;
}

QList<OAIHeader> OAIVulnerableHeaders::getMissingHeaders() const {
    return m_missing_headers;
}
void OAIVulnerableHeaders::setMissingHeaders(const QList<OAIHeader> &missing_headers) {
    m_missing_headers = missing_headers;
    m_missing_headers_isSet = true;
}

bool OAIVulnerableHeaders::is_missing_headers_Set() const{
    return m_missing_headers_isSet;
}

bool OAIVulnerableHeaders::is_missing_headers_Valid() const{
    return m_missing_headers_isValid;
}

bool OAIVulnerableHeaders::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_missing_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerableHeaders::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
