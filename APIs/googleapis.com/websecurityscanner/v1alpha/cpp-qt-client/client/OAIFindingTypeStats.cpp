/**
 * Web Security Scanner API
 * Scans your Compute and App Engine apps for common web vulnerabilities.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFindingTypeStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFindingTypeStats::OAIFindingTypeStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFindingTypeStats::OAIFindingTypeStats() {
    this->initializeModel();
}

OAIFindingTypeStats::~OAIFindingTypeStats() {}

void OAIFindingTypeStats::initializeModel() {

    m_finding_count_isSet = false;
    m_finding_count_isValid = false;

    m_finding_type_isSet = false;
    m_finding_type_isValid = false;
}

void OAIFindingTypeStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFindingTypeStats::fromJsonObject(QJsonObject json) {

    m_finding_count_isValid = ::OpenAPI::fromJsonValue(m_finding_count, json[QString("findingCount")]);
    m_finding_count_isSet = !json[QString("findingCount")].isNull() && m_finding_count_isValid;

    m_finding_type_isValid = ::OpenAPI::fromJsonValue(m_finding_type, json[QString("findingType")]);
    m_finding_type_isSet = !json[QString("findingType")].isNull() && m_finding_type_isValid;
}

QString OAIFindingTypeStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFindingTypeStats::asJsonObject() const {
    QJsonObject obj;
    if (m_finding_count_isSet) {
        obj.insert(QString("findingCount"), ::OpenAPI::toJsonValue(m_finding_count));
    }
    if (m_finding_type_isSet) {
        obj.insert(QString("findingType"), ::OpenAPI::toJsonValue(m_finding_type));
    }
    return obj;
}

qint32 OAIFindingTypeStats::getFindingCount() const {
    return m_finding_count;
}
void OAIFindingTypeStats::setFindingCount(const qint32 &finding_count) {
    m_finding_count = finding_count;
    m_finding_count_isSet = true;
}

bool OAIFindingTypeStats::is_finding_count_Set() const{
    return m_finding_count_isSet;
}

bool OAIFindingTypeStats::is_finding_count_Valid() const{
    return m_finding_count_isValid;
}

QString OAIFindingTypeStats::getFindingType() const {
    return m_finding_type;
}
void OAIFindingTypeStats::setFindingType(const QString &finding_type) {
    m_finding_type = finding_type;
    m_finding_type_isSet = true;
}

bool OAIFindingTypeStats::is_finding_type_Set() const{
    return m_finding_type_isSet;
}

bool OAIFindingTypeStats::is_finding_type_Valid() const{
    return m_finding_type_isValid;
}

bool OAIFindingTypeStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_finding_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finding_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFindingTypeStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
