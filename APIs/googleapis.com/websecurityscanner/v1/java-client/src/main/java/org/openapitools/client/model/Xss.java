/*
 * Web Security Scanner API
 * Scans your Compute and App Engine apps for common web vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information reported for an XSS.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:53.430729-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Xss {
  /**
   * The attack vector of the payload triggering this XSS.
   */
  @JsonAdapter(AttackVectorEnum.Adapter.class)
  public enum AttackVectorEnum {
    ATTACK_VECTOR_UNSPECIFIED("ATTACK_VECTOR_UNSPECIFIED"),
    
    LOCAL_STORAGE("LOCAL_STORAGE"),
    
    SESSION_STORAGE("SESSION_STORAGE"),
    
    WINDOW_NAME("WINDOW_NAME"),
    
    REFERRER("REFERRER"),
    
    FORM_INPUT("FORM_INPUT"),
    
    COOKIE("COOKIE"),
    
    POST_MESSAGE("POST_MESSAGE"),
    
    GET_PARAMETERS("GET_PARAMETERS"),
    
    URL_FRAGMENT("URL_FRAGMENT"),
    
    HTML_COMMENT("HTML_COMMENT"),
    
    POST_PARAMETERS("POST_PARAMETERS"),
    
    PROTOCOL("PROTOCOL"),
    
    STORED_XSS("STORED_XSS"),
    
    SAME_ORIGIN("SAME_ORIGIN"),
    
    USER_CONTROLLABLE_URL("USER_CONTROLLABLE_URL");

    private String value;

    AttackVectorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AttackVectorEnum fromValue(String value) {
      for (AttackVectorEnum b : AttackVectorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AttackVectorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AttackVectorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AttackVectorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AttackVectorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AttackVectorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ATTACK_VECTOR = "attackVector";
  @SerializedName(SERIALIZED_NAME_ATTACK_VECTOR)
  private AttackVectorEnum attackVector;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_STACK_TRACES = "stackTraces";
  @SerializedName(SERIALIZED_NAME_STACK_TRACES)
  private List<String> stackTraces = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORED_XSS_SEEDING_URL = "storedXssSeedingUrl";
  @SerializedName(SERIALIZED_NAME_STORED_XSS_SEEDING_URL)
  private String storedXssSeedingUrl;

  public Xss() {
  }

  public Xss attackVector(AttackVectorEnum attackVector) {
    this.attackVector = attackVector;
    return this;
  }

  /**
   * The attack vector of the payload triggering this XSS.
   * @return attackVector
   */
  @javax.annotation.Nullable
  public AttackVectorEnum getAttackVector() {
    return attackVector;
  }

  public void setAttackVector(AttackVectorEnum attackVector) {
    this.attackVector = attackVector;
  }


  public Xss errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * An error message generated by a javascript breakage.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public Xss stackTraces(List<String> stackTraces) {
    this.stackTraces = stackTraces;
    return this;
  }

  public Xss addStackTracesItem(String stackTracesItem) {
    if (this.stackTraces == null) {
      this.stackTraces = new ArrayList<>();
    }
    this.stackTraces.add(stackTracesItem);
    return this;
  }

  /**
   * Stack traces leading to the point where the XSS occurred.
   * @return stackTraces
   */
  @javax.annotation.Nullable
  public List<String> getStackTraces() {
    return stackTraces;
  }

  public void setStackTraces(List<String> stackTraces) {
    this.stackTraces = stackTraces;
  }


  public Xss storedXssSeedingUrl(String storedXssSeedingUrl) {
    this.storedXssSeedingUrl = storedXssSeedingUrl;
    return this;
  }

  /**
   * The reproduction url for the seeding POST request of a Stored XSS.
   * @return storedXssSeedingUrl
   */
  @javax.annotation.Nullable
  public String getStoredXssSeedingUrl() {
    return storedXssSeedingUrl;
  }

  public void setStoredXssSeedingUrl(String storedXssSeedingUrl) {
    this.storedXssSeedingUrl = storedXssSeedingUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Xss xss = (Xss) o;
    return Objects.equals(this.attackVector, xss.attackVector) &&
        Objects.equals(this.errorMessage, xss.errorMessage) &&
        Objects.equals(this.stackTraces, xss.stackTraces) &&
        Objects.equals(this.storedXssSeedingUrl, xss.storedXssSeedingUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attackVector, errorMessage, stackTraces, storedXssSeedingUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Xss {\n");
    sb.append("    attackVector: ").append(toIndentedString(attackVector)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    stackTraces: ").append(toIndentedString(stackTraces)).append("\n");
    sb.append("    storedXssSeedingUrl: ").append(toIndentedString(storedXssSeedingUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attackVector");
    openapiFields.add("errorMessage");
    openapiFields.add("stackTraces");
    openapiFields.add("storedXssSeedingUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Xss
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Xss.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Xss is not found in the empty JSON string", Xss.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Xss.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Xss` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("attackVector") != null && !jsonObj.get("attackVector").isJsonNull()) && !jsonObj.get("attackVector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attackVector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attackVector").toString()));
      }
      // validate the optional field `attackVector`
      if (jsonObj.get("attackVector") != null && !jsonObj.get("attackVector").isJsonNull()) {
        AttackVectorEnum.validateJsonElement(jsonObj.get("attackVector"));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("stackTraces") != null && !jsonObj.get("stackTraces").isJsonNull() && !jsonObj.get("stackTraces").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stackTraces` to be an array in the JSON string but got `%s`", jsonObj.get("stackTraces").toString()));
      }
      if ((jsonObj.get("storedXssSeedingUrl") != null && !jsonObj.get("storedXssSeedingUrl").isJsonNull()) && !jsonObj.get("storedXssSeedingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storedXssSeedingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storedXssSeedingUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Xss.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Xss' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Xss> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Xss.class));

       return (TypeAdapter<T>) new TypeAdapter<Xss>() {
           @Override
           public void write(JsonWriter out, Xss value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Xss read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Xss given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Xss
   * @throws IOException if the JSON string is invalid with respect to Xss
   */
  public static Xss fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Xss.class);
  }

  /**
   * Convert an instance of Xss to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

