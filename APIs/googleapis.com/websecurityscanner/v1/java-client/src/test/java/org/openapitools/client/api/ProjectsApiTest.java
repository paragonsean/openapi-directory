/*
 * Web Security Scanner API
 * Scans your Compute and App Engine apps for common web vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Finding;
import org.openapitools.client.model.ListCrawledUrlsResponse;
import org.openapitools.client.model.ListFindingTypeStatsResponse;
import org.openapitools.client.model.ListFindingsResponse;
import org.openapitools.client.model.ListScanConfigsResponse;
import org.openapitools.client.model.ListScanRunsResponse;
import org.openapitools.client.model.ScanConfig;
import org.openapitools.client.model.ScanRun;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates a new ScanConfig.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void websecurityscannerProjectsScanConfigsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ScanConfig scanConfig = null;
        ScanConfig response = api.websecurityscannerProjectsScanConfigsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, scanConfig);
        // TODO: test validations
    }

    /**
     * Deletes an existing ScanConfig and its child resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void websecurityscannerProjectsScanConfigsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.websecurityscannerProjectsScanConfigsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists ScanConfigs under a given project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void websecurityscannerProjectsScanConfigsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListScanConfigsResponse response = api.websecurityscannerProjectsScanConfigsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a ScanConfig. This method support partial update of a ScanConfig.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void websecurityscannerProjectsScanConfigsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        ScanConfig scanConfig = null;
        ScanConfig response = api.websecurityscannerProjectsScanConfigsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, scanConfig);
        // TODO: test validations
    }

    /**
     * List CrawledUrls under a given ScanRun.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void websecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListCrawledUrlsResponse response = api.websecurityscannerProjectsScanConfigsScanRunsCrawledUrlsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * List all FindingTypeStats under a given ScanRun.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void websecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListFindingTypeStatsResponse response = api.websecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a Finding.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void websecurityscannerProjectsScanConfigsScanRunsFindingsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Finding response = api.websecurityscannerProjectsScanConfigsScanRunsFindingsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * List Findings under a given ScanRun.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void websecurityscannerProjectsScanConfigsScanRunsFindingsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListFindingsResponse response = api.websecurityscannerProjectsScanConfigsScanRunsFindingsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists ScanRuns under a given ScanConfig, in descending order of ScanRun stop time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void websecurityscannerProjectsScanConfigsScanRunsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListScanRunsResponse response = api.websecurityscannerProjectsScanConfigsScanRunsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Stops a ScanRun. The stopped ScanRun is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void websecurityscannerProjectsScanConfigsScanRunsStopTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        ScanRun response = api.websecurityscannerProjectsScanConfigsScanRunsStop(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Start a ScanRun according to the given ScanConfig.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void websecurityscannerProjectsScanConfigsStartTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        ScanRun response = api.websecurityscannerProjectsScanConfigsStart(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

}
