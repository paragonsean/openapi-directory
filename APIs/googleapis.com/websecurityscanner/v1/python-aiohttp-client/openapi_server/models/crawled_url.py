# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CrawledUrl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, http_method: str=None, url: str=None):
        """CrawledUrl - a model defined in OpenAPI

        :param body: The body of this CrawledUrl.
        :param http_method: The http_method of this CrawledUrl.
        :param url: The url of this CrawledUrl.
        """
        self.openapi_types = {
            'body': str,
            'http_method': str,
            'url': str
        }

        self.attribute_map = {
            'body': 'body',
            'http_method': 'httpMethod',
            'url': 'url'
        }

        self._body = body
        self._http_method = http_method
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CrawledUrl':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CrawledUrl of this CrawledUrl.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this CrawledUrl.

        Output only. The body of the request that was used to visit the URL.

        :return: The body of this CrawledUrl.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this CrawledUrl.

        Output only. The body of the request that was used to visit the URL.

        :param body: The body of this CrawledUrl.
        :type body: str
        """

        self._body = body

    @property
    def http_method(self):
        """Gets the http_method of this CrawledUrl.

        Output only. The http method of the request that was used to visit the URL, in uppercase.

        :return: The http_method of this CrawledUrl.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this CrawledUrl.

        Output only. The http method of the request that was used to visit the URL, in uppercase.

        :param http_method: The http_method of this CrawledUrl.
        :type http_method: str
        """

        self._http_method = http_method

    @property
    def url(self):
        """Gets the url of this CrawledUrl.

        Output only. The URL that was crawled.

        :return: The url of this CrawledUrl.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CrawledUrl.

        Output only. The URL that was crawled.

        :param url: The url of this CrawledUrl.
        :type url: str
        """

        self._url = url
