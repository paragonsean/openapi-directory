# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScanConfigError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, field_name: str=None):
        """ScanConfigError - a model defined in OpenAPI

        :param code: The code of this ScanConfigError.
        :param field_name: The field_name of this ScanConfigError.
        """
        self.openapi_types = {
            'code': str,
            'field_name': str
        }

        self.attribute_map = {
            'code': 'code',
            'field_name': 'fieldName'
        }

        self._code = code
        self._field_name = field_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScanConfigError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScanConfigError of this ScanConfigError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ScanConfigError.

        Output only. Indicates the reason code for a configuration failure.

        :return: The code of this ScanConfigError.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ScanConfigError.

        Output only. Indicates the reason code for a configuration failure.

        :param code: The code of this ScanConfigError.
        :type code: str
        """
        allowed_values = ["CODE_UNSPECIFIED", "OK", "INTERNAL_ERROR", "APPENGINE_API_BACKEND_ERROR", "APPENGINE_API_NOT_ACCESSIBLE", "APPENGINE_DEFAULT_HOST_MISSING", "CANNOT_USE_GOOGLE_COM_ACCOUNT", "CANNOT_USE_OWNER_ACCOUNT", "COMPUTE_API_BACKEND_ERROR", "COMPUTE_API_NOT_ACCESSIBLE", "CUSTOM_LOGIN_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT", "CUSTOM_LOGIN_URL_MALFORMED", "CUSTOM_LOGIN_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS", "CUSTOM_LOGIN_URL_MAPPED_TO_UNRESERVED_ADDRESS", "CUSTOM_LOGIN_URL_HAS_NON_ROUTABLE_IP_ADDRESS", "CUSTOM_LOGIN_URL_HAS_UNRESERVED_IP_ADDRESS", "DUPLICATE_SCAN_NAME", "INVALID_FIELD_VALUE", "FAILED_TO_AUTHENTICATE_TO_TARGET", "FINDING_TYPE_UNSPECIFIED", "FORBIDDEN_TO_SCAN_COMPUTE", "FORBIDDEN_UPDATE_TO_MANAGED_SCAN", "MALFORMED_FILTER", "MALFORMED_RESOURCE_NAME", "PROJECT_INACTIVE", "REQUIRED_FIELD", "RESOURCE_NAME_INCONSISTENT", "SCAN_ALREADY_RUNNING", "SCAN_NOT_RUNNING", "SEED_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT", "SEED_URL_MALFORMED", "SEED_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS", "SEED_URL_MAPPED_TO_UNRESERVED_ADDRESS", "SEED_URL_HAS_NON_ROUTABLE_IP_ADDRESS", "SEED_URL_HAS_UNRESERVED_IP_ADDRESS", "SERVICE_ACCOUNT_NOT_CONFIGURED", "TOO_MANY_SCANS", "UNABLE_TO_RESOLVE_PROJECT_INFO", "UNSUPPORTED_BLACKLIST_PATTERN_FORMAT", "UNSUPPORTED_FILTER", "UNSUPPORTED_FINDING_TYPE", "UNSUPPORTED_URL_SCHEME", "CLOUD_ASSET_INVENTORY_ASSET_NOT_FOUND"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def field_name(self):
        """Gets the field_name of this ScanConfigError.

        Output only. Indicates the full name of the ScanConfig field that triggers this error, for example \"scan_config.max_qps\". This field is provided for troubleshooting purposes only and its actual value can change in the future.

        :return: The field_name of this ScanConfigError.
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this ScanConfigError.

        Output only. Indicates the full name of the ScanConfig field that triggers this error, for example \"scan_config.max_qps\". This field is provided for troubleshooting purposes only and its actual value can change in the future.

        :param field_name: The field_name of this ScanConfigError.
        :type field_name: str
        """

        self._field_name = field_name
