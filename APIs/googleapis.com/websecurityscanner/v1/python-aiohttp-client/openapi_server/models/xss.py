# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Xss(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attack_vector: str=None, error_message: str=None, stack_traces: List[str]=None, stored_xss_seeding_url: str=None):
        """Xss - a model defined in OpenAPI

        :param attack_vector: The attack_vector of this Xss.
        :param error_message: The error_message of this Xss.
        :param stack_traces: The stack_traces of this Xss.
        :param stored_xss_seeding_url: The stored_xss_seeding_url of this Xss.
        """
        self.openapi_types = {
            'attack_vector': str,
            'error_message': str,
            'stack_traces': List[str],
            'stored_xss_seeding_url': str
        }

        self.attribute_map = {
            'attack_vector': 'attackVector',
            'error_message': 'errorMessage',
            'stack_traces': 'stackTraces',
            'stored_xss_seeding_url': 'storedXssSeedingUrl'
        }

        self._attack_vector = attack_vector
        self._error_message = error_message
        self._stack_traces = stack_traces
        self._stored_xss_seeding_url = stored_xss_seeding_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Xss':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Xss of this Xss.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attack_vector(self):
        """Gets the attack_vector of this Xss.

        The attack vector of the payload triggering this XSS.

        :return: The attack_vector of this Xss.
        :rtype: str
        """
        return self._attack_vector

    @attack_vector.setter
    def attack_vector(self, attack_vector):
        """Sets the attack_vector of this Xss.

        The attack vector of the payload triggering this XSS.

        :param attack_vector: The attack_vector of this Xss.
        :type attack_vector: str
        """
        allowed_values = ["ATTACK_VECTOR_UNSPECIFIED", "LOCAL_STORAGE", "SESSION_STORAGE", "WINDOW_NAME", "REFERRER", "FORM_INPUT", "COOKIE", "POST_MESSAGE", "GET_PARAMETERS", "URL_FRAGMENT", "HTML_COMMENT", "POST_PARAMETERS", "PROTOCOL", "STORED_XSS", "SAME_ORIGIN", "USER_CONTROLLABLE_URL"]  # noqa: E501
        if attack_vector not in allowed_values:
            raise ValueError(
                "Invalid value for `attack_vector` ({0}), must be one of {1}"
                .format(attack_vector, allowed_values)
            )

        self._attack_vector = attack_vector

    @property
    def error_message(self):
        """Gets the error_message of this Xss.

        An error message generated by a javascript breakage.

        :return: The error_message of this Xss.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this Xss.

        An error message generated by a javascript breakage.

        :param error_message: The error_message of this Xss.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def stack_traces(self):
        """Gets the stack_traces of this Xss.

        Stack traces leading to the point where the XSS occurred.

        :return: The stack_traces of this Xss.
        :rtype: List[str]
        """
        return self._stack_traces

    @stack_traces.setter
    def stack_traces(self, stack_traces):
        """Sets the stack_traces of this Xss.

        Stack traces leading to the point where the XSS occurred.

        :param stack_traces: The stack_traces of this Xss.
        :type stack_traces: List[str]
        """

        self._stack_traces = stack_traces

    @property
    def stored_xss_seeding_url(self):
        """Gets the stored_xss_seeding_url of this Xss.

        The reproduction url for the seeding POST request of a Stored XSS.

        :return: The stored_xss_seeding_url of this Xss.
        :rtype: str
        """
        return self._stored_xss_seeding_url

    @stored_xss_seeding_url.setter
    def stored_xss_seeding_url(self, stored_xss_seeding_url):
        """Sets the stored_xss_seeding_url of this Xss.

        The reproduction url for the seeding POST request of a Stored XSS.

        :param stored_xss_seeding_url: The stored_xss_seeding_url of this Xss.
        :type stored_xss_seeding_url: str
        """

        self._stored_xss_seeding_url = stored_xss_seeding_url
