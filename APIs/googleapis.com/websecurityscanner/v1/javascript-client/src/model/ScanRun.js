/**
 * Web Security Scanner API
 * Scans your Compute and App Engine apps for common web vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScanRunErrorTrace from './ScanRunErrorTrace';
import ScanRunWarningTrace from './ScanRunWarningTrace';

/**
 * The ScanRun model module.
 * @module model/ScanRun
 * @version v1
 */
class ScanRun {
    /**
     * Constructs a new <code>ScanRun</code>.
     * A ScanRun is a output-only resource representing an actual run of the scan. Next id: 12
     * @alias module:model/ScanRun
     */
    constructor() { 
        
        ScanRun.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScanRun</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScanRun} obj Optional instance to populate.
     * @return {module:model/ScanRun} The populated <code>ScanRun</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScanRun();

            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('errorTrace')) {
                obj['errorTrace'] = ScanRunErrorTrace.constructFromObject(data['errorTrace']);
            }
            if (data.hasOwnProperty('executionState')) {
                obj['executionState'] = ApiClient.convertToType(data['executionState'], 'String');
            }
            if (data.hasOwnProperty('hasVulnerabilities')) {
                obj['hasVulnerabilities'] = ApiClient.convertToType(data['hasVulnerabilities'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('progressPercent')) {
                obj['progressPercent'] = ApiClient.convertToType(data['progressPercent'], 'Number');
            }
            if (data.hasOwnProperty('resultState')) {
                obj['resultState'] = ApiClient.convertToType(data['resultState'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('urlsCrawledCount')) {
                obj['urlsCrawledCount'] = ApiClient.convertToType(data['urlsCrawledCount'], 'String');
            }
            if (data.hasOwnProperty('urlsTestedCount')) {
                obj['urlsTestedCount'] = ApiClient.convertToType(data['urlsTestedCount'], 'String');
            }
            if (data.hasOwnProperty('warningTraces')) {
                obj['warningTraces'] = ApiClient.convertToType(data['warningTraces'], [ScanRunWarningTrace]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScanRun</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScanRun</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // validate the optional field `errorTrace`
        if (data['errorTrace']) { // data not null
          ScanRunErrorTrace.validateJSON(data['errorTrace']);
        }
        // ensure the json data is a string
        if (data['executionState'] && !(typeof data['executionState'] === 'string' || data['executionState'] instanceof String)) {
            throw new Error("Expected the field `executionState` to be a primitive type in the JSON string but got " + data['executionState']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['resultState'] && !(typeof data['resultState'] === 'string' || data['resultState'] instanceof String)) {
            throw new Error("Expected the field `resultState` to be a primitive type in the JSON string but got " + data['resultState']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['urlsCrawledCount'] && !(typeof data['urlsCrawledCount'] === 'string' || data['urlsCrawledCount'] instanceof String)) {
            throw new Error("Expected the field `urlsCrawledCount` to be a primitive type in the JSON string but got " + data['urlsCrawledCount']);
        }
        // ensure the json data is a string
        if (data['urlsTestedCount'] && !(typeof data['urlsTestedCount'] === 'string' || data['urlsTestedCount'] instanceof String)) {
            throw new Error("Expected the field `urlsTestedCount` to be a primitive type in the JSON string but got " + data['urlsTestedCount']);
        }
        if (data['warningTraces']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['warningTraces'])) {
                throw new Error("Expected the field `warningTraces` to be an array in the JSON data but got " + data['warningTraces']);
            }
            // validate the optional field `warningTraces` (array)
            for (const item of data['warningTraces']) {
                ScanRunWarningTrace.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Output only. The time at which the ScanRun reached termination state - that the ScanRun is either finished or stopped by user.
 * @member {String} endTime
 */
ScanRun.prototype['endTime'] = undefined;

/**
 * @member {module:model/ScanRunErrorTrace} errorTrace
 */
ScanRun.prototype['errorTrace'] = undefined;

/**
 * Output only. The execution state of the ScanRun.
 * @member {module:model/ScanRun.ExecutionStateEnum} executionState
 */
ScanRun.prototype['executionState'] = undefined;

/**
 * Output only. Whether the scan run has found any vulnerabilities.
 * @member {Boolean} hasVulnerabilities
 */
ScanRun.prototype['hasVulnerabilities'] = undefined;

/**
 * Output only. The resource name of the ScanRun. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'. The ScanRun IDs are generated by the system.
 * @member {String} name
 */
ScanRun.prototype['name'] = undefined;

/**
 * Output only. The percentage of total completion ranging from 0 to 100. If the scan is in queue, the value is 0. If the scan is running, the value ranges from 0 to 100. If the scan is finished, the value is 100.
 * @member {Number} progressPercent
 */
ScanRun.prototype['progressPercent'] = undefined;

/**
 * Output only. The result state of the ScanRun. This field is only available after the execution state reaches \"FINISHED\".
 * @member {module:model/ScanRun.ResultStateEnum} resultState
 */
ScanRun.prototype['resultState'] = undefined;

/**
 * Output only. The time at which the ScanRun started.
 * @member {String} startTime
 */
ScanRun.prototype['startTime'] = undefined;

/**
 * Output only. The number of URLs crawled during this ScanRun. If the scan is in progress, the value represents the number of URLs crawled up to now.
 * @member {String} urlsCrawledCount
 */
ScanRun.prototype['urlsCrawledCount'] = undefined;

/**
 * Output only. The number of URLs tested during this ScanRun. If the scan is in progress, the value represents the number of URLs tested up to now. The number of URLs tested is usually larger than the number URLS crawled because typically a crawled URL is tested with multiple test payloads.
 * @member {String} urlsTestedCount
 */
ScanRun.prototype['urlsTestedCount'] = undefined;

/**
 * Output only. A list of warnings, if such are encountered during this scan run.
 * @member {Array.<module:model/ScanRunWarningTrace>} warningTraces
 */
ScanRun.prototype['warningTraces'] = undefined;





/**
 * Allowed values for the <code>executionState</code> property.
 * @enum {String}
 * @readonly
 */
ScanRun['ExecutionStateEnum'] = {

    /**
     * value: "EXECUTION_STATE_UNSPECIFIED"
     * @const
     */
    "EXECUTION_STATE_UNSPECIFIED": "EXECUTION_STATE_UNSPECIFIED",

    /**
     * value: "QUEUED"
     * @const
     */
    "QUEUED": "QUEUED",

    /**
     * value: "SCANNING"
     * @const
     */
    "SCANNING": "SCANNING",

    /**
     * value: "FINISHED"
     * @const
     */
    "FINISHED": "FINISHED"
};


/**
 * Allowed values for the <code>resultState</code> property.
 * @enum {String}
 * @readonly
 */
ScanRun['ResultStateEnum'] = {

    /**
     * value: "RESULT_STATE_UNSPECIFIED"
     * @const
     */
    "RESULT_STATE_UNSPECIFIED": "RESULT_STATE_UNSPECIFIED",

    /**
     * value: "SUCCESS"
     * @const
     */
    "SUCCESS": "SUCCESS",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "KILLED"
     * @const
     */
    "KILLED": "KILLED"
};



export default ScanRun;

