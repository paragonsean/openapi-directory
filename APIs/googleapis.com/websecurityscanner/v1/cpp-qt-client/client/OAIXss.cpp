/**
 * Web Security Scanner API
 * Scans your Compute and App Engine apps for common web vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIXss.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIXss::OAIXss(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIXss::OAIXss() {
    this->initializeModel();
}

OAIXss::~OAIXss() {}

void OAIXss::initializeModel() {

    m_attack_vector_isSet = false;
    m_attack_vector_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_stack_traces_isSet = false;
    m_stack_traces_isValid = false;

    m_stored_xss_seeding_url_isSet = false;
    m_stored_xss_seeding_url_isValid = false;
}

void OAIXss::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIXss::fromJsonObject(QJsonObject json) {

    m_attack_vector_isValid = ::OpenAPI::fromJsonValue(m_attack_vector, json[QString("attackVector")]);
    m_attack_vector_isSet = !json[QString("attackVector")].isNull() && m_attack_vector_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_stack_traces_isValid = ::OpenAPI::fromJsonValue(m_stack_traces, json[QString("stackTraces")]);
    m_stack_traces_isSet = !json[QString("stackTraces")].isNull() && m_stack_traces_isValid;

    m_stored_xss_seeding_url_isValid = ::OpenAPI::fromJsonValue(m_stored_xss_seeding_url, json[QString("storedXssSeedingUrl")]);
    m_stored_xss_seeding_url_isSet = !json[QString("storedXssSeedingUrl")].isNull() && m_stored_xss_seeding_url_isValid;
}

QString OAIXss::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIXss::asJsonObject() const {
    QJsonObject obj;
    if (m_attack_vector_isSet) {
        obj.insert(QString("attackVector"), ::OpenAPI::toJsonValue(m_attack_vector));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_stack_traces.size() > 0) {
        obj.insert(QString("stackTraces"), ::OpenAPI::toJsonValue(m_stack_traces));
    }
    if (m_stored_xss_seeding_url_isSet) {
        obj.insert(QString("storedXssSeedingUrl"), ::OpenAPI::toJsonValue(m_stored_xss_seeding_url));
    }
    return obj;
}

QString OAIXss::getAttackVector() const {
    return m_attack_vector;
}
void OAIXss::setAttackVector(const QString &attack_vector) {
    m_attack_vector = attack_vector;
    m_attack_vector_isSet = true;
}

bool OAIXss::is_attack_vector_Set() const{
    return m_attack_vector_isSet;
}

bool OAIXss::is_attack_vector_Valid() const{
    return m_attack_vector_isValid;
}

QString OAIXss::getErrorMessage() const {
    return m_error_message;
}
void OAIXss::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIXss::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIXss::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QList<QString> OAIXss::getStackTraces() const {
    return m_stack_traces;
}
void OAIXss::setStackTraces(const QList<QString> &stack_traces) {
    m_stack_traces = stack_traces;
    m_stack_traces_isSet = true;
}

bool OAIXss::is_stack_traces_Set() const{
    return m_stack_traces_isSet;
}

bool OAIXss::is_stack_traces_Valid() const{
    return m_stack_traces_isValid;
}

QString OAIXss::getStoredXssSeedingUrl() const {
    return m_stored_xss_seeding_url;
}
void OAIXss::setStoredXssSeedingUrl(const QString &stored_xss_seeding_url) {
    m_stored_xss_seeding_url = stored_xss_seeding_url;
    m_stored_xss_seeding_url_isSet = true;
}

bool OAIXss::is_stored_xss_seeding_url_Set() const{
    return m_stored_xss_seeding_url_isSet;
}

bool OAIXss::is_stored_xss_seeding_url_Valid() const{
    return m_stored_xss_seeding_url_isValid;
}

bool OAIXss::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attack_vector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_traces.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stored_xss_seeding_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIXss::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
