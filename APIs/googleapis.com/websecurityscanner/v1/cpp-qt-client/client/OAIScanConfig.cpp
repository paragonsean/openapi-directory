/**
 * Web Security Scanner API
 * Scans your Compute and App Engine apps for common web vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScanConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScanConfig::OAIScanConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScanConfig::OAIScanConfig() {
    this->initializeModel();
}

OAIScanConfig::~OAIScanConfig() {}

void OAIScanConfig::initializeModel() {

    m_authentication_isSet = false;
    m_authentication_isValid = false;

    m_blacklist_patterns_isSet = false;
    m_blacklist_patterns_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_export_to_security_command_center_isSet = false;
    m_export_to_security_command_center_isValid = false;

    m_ignore_http_status_errors_isSet = false;
    m_ignore_http_status_errors_isValid = false;

    m_managed_scan_isSet = false;
    m_managed_scan_isValid = false;

    m_max_qps_isSet = false;
    m_max_qps_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_risk_level_isSet = false;
    m_risk_level_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_starting_urls_isSet = false;
    m_starting_urls_isValid = false;

    m_static_ip_scan_isSet = false;
    m_static_ip_scan_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;
}

void OAIScanConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScanConfig::fromJsonObject(QJsonObject json) {

    m_authentication_isValid = ::OpenAPI::fromJsonValue(m_authentication, json[QString("authentication")]);
    m_authentication_isSet = !json[QString("authentication")].isNull() && m_authentication_isValid;

    m_blacklist_patterns_isValid = ::OpenAPI::fromJsonValue(m_blacklist_patterns, json[QString("blacklistPatterns")]);
    m_blacklist_patterns_isSet = !json[QString("blacklistPatterns")].isNull() && m_blacklist_patterns_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_export_to_security_command_center_isValid = ::OpenAPI::fromJsonValue(m_export_to_security_command_center, json[QString("exportToSecurityCommandCenter")]);
    m_export_to_security_command_center_isSet = !json[QString("exportToSecurityCommandCenter")].isNull() && m_export_to_security_command_center_isValid;

    m_ignore_http_status_errors_isValid = ::OpenAPI::fromJsonValue(m_ignore_http_status_errors, json[QString("ignoreHttpStatusErrors")]);
    m_ignore_http_status_errors_isSet = !json[QString("ignoreHttpStatusErrors")].isNull() && m_ignore_http_status_errors_isValid;

    m_managed_scan_isValid = ::OpenAPI::fromJsonValue(m_managed_scan, json[QString("managedScan")]);
    m_managed_scan_isSet = !json[QString("managedScan")].isNull() && m_managed_scan_isValid;

    m_max_qps_isValid = ::OpenAPI::fromJsonValue(m_max_qps, json[QString("maxQps")]);
    m_max_qps_isSet = !json[QString("maxQps")].isNull() && m_max_qps_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_risk_level_isValid = ::OpenAPI::fromJsonValue(m_risk_level, json[QString("riskLevel")]);
    m_risk_level_isSet = !json[QString("riskLevel")].isNull() && m_risk_level_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_starting_urls_isValid = ::OpenAPI::fromJsonValue(m_starting_urls, json[QString("startingUrls")]);
    m_starting_urls_isSet = !json[QString("startingUrls")].isNull() && m_starting_urls_isValid;

    m_static_ip_scan_isValid = ::OpenAPI::fromJsonValue(m_static_ip_scan, json[QString("staticIpScan")]);
    m_static_ip_scan_isSet = !json[QString("staticIpScan")].isNull() && m_static_ip_scan_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("userAgent")]);
    m_user_agent_isSet = !json[QString("userAgent")].isNull() && m_user_agent_isValid;
}

QString OAIScanConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScanConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication.isSet()) {
        obj.insert(QString("authentication"), ::OpenAPI::toJsonValue(m_authentication));
    }
    if (m_blacklist_patterns.size() > 0) {
        obj.insert(QString("blacklistPatterns"), ::OpenAPI::toJsonValue(m_blacklist_patterns));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_export_to_security_command_center_isSet) {
        obj.insert(QString("exportToSecurityCommandCenter"), ::OpenAPI::toJsonValue(m_export_to_security_command_center));
    }
    if (m_ignore_http_status_errors_isSet) {
        obj.insert(QString("ignoreHttpStatusErrors"), ::OpenAPI::toJsonValue(m_ignore_http_status_errors));
    }
    if (m_managed_scan_isSet) {
        obj.insert(QString("managedScan"), ::OpenAPI::toJsonValue(m_managed_scan));
    }
    if (m_max_qps_isSet) {
        obj.insert(QString("maxQps"), ::OpenAPI::toJsonValue(m_max_qps));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_risk_level_isSet) {
        obj.insert(QString("riskLevel"), ::OpenAPI::toJsonValue(m_risk_level));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_starting_urls.size() > 0) {
        obj.insert(QString("startingUrls"), ::OpenAPI::toJsonValue(m_starting_urls));
    }
    if (m_static_ip_scan_isSet) {
        obj.insert(QString("staticIpScan"), ::OpenAPI::toJsonValue(m_static_ip_scan));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("userAgent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    return obj;
}

OAIAuthentication OAIScanConfig::getAuthentication() const {
    return m_authentication;
}
void OAIScanConfig::setAuthentication(const OAIAuthentication &authentication) {
    m_authentication = authentication;
    m_authentication_isSet = true;
}

bool OAIScanConfig::is_authentication_Set() const{
    return m_authentication_isSet;
}

bool OAIScanConfig::is_authentication_Valid() const{
    return m_authentication_isValid;
}

QList<QString> OAIScanConfig::getBlacklistPatterns() const {
    return m_blacklist_patterns;
}
void OAIScanConfig::setBlacklistPatterns(const QList<QString> &blacklist_patterns) {
    m_blacklist_patterns = blacklist_patterns;
    m_blacklist_patterns_isSet = true;
}

bool OAIScanConfig::is_blacklist_patterns_Set() const{
    return m_blacklist_patterns_isSet;
}

bool OAIScanConfig::is_blacklist_patterns_Valid() const{
    return m_blacklist_patterns_isValid;
}

QString OAIScanConfig::getDisplayName() const {
    return m_display_name;
}
void OAIScanConfig::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIScanConfig::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIScanConfig::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIScanConfig::getExportToSecurityCommandCenter() const {
    return m_export_to_security_command_center;
}
void OAIScanConfig::setExportToSecurityCommandCenter(const QString &export_to_security_command_center) {
    m_export_to_security_command_center = export_to_security_command_center;
    m_export_to_security_command_center_isSet = true;
}

bool OAIScanConfig::is_export_to_security_command_center_Set() const{
    return m_export_to_security_command_center_isSet;
}

bool OAIScanConfig::is_export_to_security_command_center_Valid() const{
    return m_export_to_security_command_center_isValid;
}

bool OAIScanConfig::isIgnoreHttpStatusErrors() const {
    return m_ignore_http_status_errors;
}
void OAIScanConfig::setIgnoreHttpStatusErrors(const bool &ignore_http_status_errors) {
    m_ignore_http_status_errors = ignore_http_status_errors;
    m_ignore_http_status_errors_isSet = true;
}

bool OAIScanConfig::is_ignore_http_status_errors_Set() const{
    return m_ignore_http_status_errors_isSet;
}

bool OAIScanConfig::is_ignore_http_status_errors_Valid() const{
    return m_ignore_http_status_errors_isValid;
}

bool OAIScanConfig::isManagedScan() const {
    return m_managed_scan;
}
void OAIScanConfig::setManagedScan(const bool &managed_scan) {
    m_managed_scan = managed_scan;
    m_managed_scan_isSet = true;
}

bool OAIScanConfig::is_managed_scan_Set() const{
    return m_managed_scan_isSet;
}

bool OAIScanConfig::is_managed_scan_Valid() const{
    return m_managed_scan_isValid;
}

qint32 OAIScanConfig::getMaxQps() const {
    return m_max_qps;
}
void OAIScanConfig::setMaxQps(const qint32 &max_qps) {
    m_max_qps = max_qps;
    m_max_qps_isSet = true;
}

bool OAIScanConfig::is_max_qps_Set() const{
    return m_max_qps_isSet;
}

bool OAIScanConfig::is_max_qps_Valid() const{
    return m_max_qps_isValid;
}

QString OAIScanConfig::getName() const {
    return m_name;
}
void OAIScanConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIScanConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIScanConfig::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIScanConfig::getRiskLevel() const {
    return m_risk_level;
}
void OAIScanConfig::setRiskLevel(const QString &risk_level) {
    m_risk_level = risk_level;
    m_risk_level_isSet = true;
}

bool OAIScanConfig::is_risk_level_Set() const{
    return m_risk_level_isSet;
}

bool OAIScanConfig::is_risk_level_Valid() const{
    return m_risk_level_isValid;
}

OAISchedule OAIScanConfig::getSchedule() const {
    return m_schedule;
}
void OAIScanConfig::setSchedule(const OAISchedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIScanConfig::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIScanConfig::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QList<QString> OAIScanConfig::getStartingUrls() const {
    return m_starting_urls;
}
void OAIScanConfig::setStartingUrls(const QList<QString> &starting_urls) {
    m_starting_urls = starting_urls;
    m_starting_urls_isSet = true;
}

bool OAIScanConfig::is_starting_urls_Set() const{
    return m_starting_urls_isSet;
}

bool OAIScanConfig::is_starting_urls_Valid() const{
    return m_starting_urls_isValid;
}

bool OAIScanConfig::isStaticIpScan() const {
    return m_static_ip_scan;
}
void OAIScanConfig::setStaticIpScan(const bool &static_ip_scan) {
    m_static_ip_scan = static_ip_scan;
    m_static_ip_scan_isSet = true;
}

bool OAIScanConfig::is_static_ip_scan_Set() const{
    return m_static_ip_scan_isSet;
}

bool OAIScanConfig::is_static_ip_scan_Valid() const{
    return m_static_ip_scan_isValid;
}

QString OAIScanConfig::getUserAgent() const {
    return m_user_agent;
}
void OAIScanConfig::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAIScanConfig::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAIScanConfig::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

bool OAIScanConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blacklist_patterns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_to_security_command_center_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_http_status_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_scan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_qps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_starting_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_ip_scan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScanConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
