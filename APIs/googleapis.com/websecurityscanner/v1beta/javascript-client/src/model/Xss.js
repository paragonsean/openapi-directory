/**
 * Web Security Scanner API
 * Scans your Compute and App Engine apps for common web vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Xss model module.
 * @module model/Xss
 * @version v1beta
 */
class Xss {
    /**
     * Constructs a new <code>Xss</code>.
     * Information reported for an XSS.
     * @alias module:model/Xss
     */
    constructor() { 
        
        Xss.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Xss</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Xss} obj Optional instance to populate.
     * @return {module:model/Xss} The populated <code>Xss</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Xss();

            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('stackTraces')) {
                obj['stackTraces'] = ApiClient.convertToType(data['stackTraces'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Xss</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Xss</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['stackTraces'])) {
            throw new Error("Expected the field `stackTraces` to be an array in the JSON data but got " + data['stackTraces']);
        }

        return true;
    }


}



/**
 * An error message generated by a javascript breakage.
 * @member {String} errorMessage
 */
Xss.prototype['errorMessage'] = undefined;

/**
 * Stack traces leading to the point where the XSS occurred.
 * @member {Array.<String>} stackTraces
 */
Xss.prototype['stackTraces'] = undefined;






export default Xss;

