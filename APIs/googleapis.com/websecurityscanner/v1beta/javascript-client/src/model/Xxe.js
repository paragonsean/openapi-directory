/**
 * Web Security Scanner API
 * Scans your Compute and App Engine apps for common web vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Xxe model module.
 * @module model/Xxe
 * @version v1beta
 */
class Xxe {
    /**
     * Constructs a new <code>Xxe</code>.
     * Information reported for an XXE.
     * @alias module:model/Xxe
     */
    constructor() { 
        
        Xxe.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Xxe</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Xxe} obj Optional instance to populate.
     * @return {module:model/Xxe} The populated <code>Xxe</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Xxe();

            if (data.hasOwnProperty('payloadLocation')) {
                obj['payloadLocation'] = ApiClient.convertToType(data['payloadLocation'], 'String');
            }
            if (data.hasOwnProperty('payloadValue')) {
                obj['payloadValue'] = ApiClient.convertToType(data['payloadValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Xxe</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Xxe</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['payloadLocation'] && !(typeof data['payloadLocation'] === 'string' || data['payloadLocation'] instanceof String)) {
            throw new Error("Expected the field `payloadLocation` to be a primitive type in the JSON string but got " + data['payloadLocation']);
        }
        // ensure the json data is a string
        if (data['payloadValue'] && !(typeof data['payloadValue'] === 'string' || data['payloadValue'] instanceof String)) {
            throw new Error("Expected the field `payloadValue` to be a primitive type in the JSON string but got " + data['payloadValue']);
        }

        return true;
    }


}



/**
 * Location within the request where the payload was placed.
 * @member {module:model/Xxe.PayloadLocationEnum} payloadLocation
 */
Xxe.prototype['payloadLocation'] = undefined;

/**
 * The XML string that triggered the XXE vulnerability. Non-payload values might be redacted.
 * @member {String} payloadValue
 */
Xxe.prototype['payloadValue'] = undefined;





/**
 * Allowed values for the <code>payloadLocation</code> property.
 * @enum {String}
 * @readonly
 */
Xxe['PayloadLocationEnum'] = {

    /**
     * value: "LOCATION_UNSPECIFIED"
     * @const
     */
    "LOCATION_UNSPECIFIED": "LOCATION_UNSPECIFIED",

    /**
     * value: "COMPLETE_REQUEST_BODY"
     * @const
     */
    "COMPLETE_REQUEST_BODY": "COMPLETE_REQUEST_BODY"
};



export default Xxe;

