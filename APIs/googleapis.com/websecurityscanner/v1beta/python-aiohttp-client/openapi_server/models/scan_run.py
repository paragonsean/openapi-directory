# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scan_run_error_trace import ScanRunErrorTrace
from openapi_server.models.scan_run_warning_trace import ScanRunWarningTrace
from openapi_server import util


class ScanRun(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, error_trace: ScanRunErrorTrace=None, execution_state: str=None, has_vulnerabilities: bool=None, name: str=None, progress_percent: int=None, result_state: str=None, start_time: str=None, urls_crawled_count: str=None, urls_tested_count: str=None, warning_traces: List[ScanRunWarningTrace]=None):
        """ScanRun - a model defined in OpenAPI

        :param end_time: The end_time of this ScanRun.
        :param error_trace: The error_trace of this ScanRun.
        :param execution_state: The execution_state of this ScanRun.
        :param has_vulnerabilities: The has_vulnerabilities of this ScanRun.
        :param name: The name of this ScanRun.
        :param progress_percent: The progress_percent of this ScanRun.
        :param result_state: The result_state of this ScanRun.
        :param start_time: The start_time of this ScanRun.
        :param urls_crawled_count: The urls_crawled_count of this ScanRun.
        :param urls_tested_count: The urls_tested_count of this ScanRun.
        :param warning_traces: The warning_traces of this ScanRun.
        """
        self.openapi_types = {
            'end_time': str,
            'error_trace': ScanRunErrorTrace,
            'execution_state': str,
            'has_vulnerabilities': bool,
            'name': str,
            'progress_percent': int,
            'result_state': str,
            'start_time': str,
            'urls_crawled_count': str,
            'urls_tested_count': str,
            'warning_traces': List[ScanRunWarningTrace]
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'error_trace': 'errorTrace',
            'execution_state': 'executionState',
            'has_vulnerabilities': 'hasVulnerabilities',
            'name': 'name',
            'progress_percent': 'progressPercent',
            'result_state': 'resultState',
            'start_time': 'startTime',
            'urls_crawled_count': 'urlsCrawledCount',
            'urls_tested_count': 'urlsTestedCount',
            'warning_traces': 'warningTraces'
        }

        self._end_time = end_time
        self._error_trace = error_trace
        self._execution_state = execution_state
        self._has_vulnerabilities = has_vulnerabilities
        self._name = name
        self._progress_percent = progress_percent
        self._result_state = result_state
        self._start_time = start_time
        self._urls_crawled_count = urls_crawled_count
        self._urls_tested_count = urls_tested_count
        self._warning_traces = warning_traces

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScanRun':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScanRun of this ScanRun.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this ScanRun.

        The time at which the ScanRun reached termination state - that the ScanRun is either finished or stopped by user.

        :return: The end_time of this ScanRun.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ScanRun.

        The time at which the ScanRun reached termination state - that the ScanRun is either finished or stopped by user.

        :param end_time: The end_time of this ScanRun.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def error_trace(self):
        """Gets the error_trace of this ScanRun.


        :return: The error_trace of this ScanRun.
        :rtype: ScanRunErrorTrace
        """
        return self._error_trace

    @error_trace.setter
    def error_trace(self, error_trace):
        """Sets the error_trace of this ScanRun.


        :param error_trace: The error_trace of this ScanRun.
        :type error_trace: ScanRunErrorTrace
        """

        self._error_trace = error_trace

    @property
    def execution_state(self):
        """Gets the execution_state of this ScanRun.

        The execution state of the ScanRun.

        :return: The execution_state of this ScanRun.
        :rtype: str
        """
        return self._execution_state

    @execution_state.setter
    def execution_state(self, execution_state):
        """Sets the execution_state of this ScanRun.

        The execution state of the ScanRun.

        :param execution_state: The execution_state of this ScanRun.
        :type execution_state: str
        """
        allowed_values = ["EXECUTION_STATE_UNSPECIFIED", "QUEUED", "SCANNING", "FINISHED"]  # noqa: E501
        if execution_state not in allowed_values:
            raise ValueError(
                "Invalid value for `execution_state` ({0}), must be one of {1}"
                .format(execution_state, allowed_values)
            )

        self._execution_state = execution_state

    @property
    def has_vulnerabilities(self):
        """Gets the has_vulnerabilities of this ScanRun.

        Whether the scan run has found any vulnerabilities.

        :return: The has_vulnerabilities of this ScanRun.
        :rtype: bool
        """
        return self._has_vulnerabilities

    @has_vulnerabilities.setter
    def has_vulnerabilities(self, has_vulnerabilities):
        """Sets the has_vulnerabilities of this ScanRun.

        Whether the scan run has found any vulnerabilities.

        :param has_vulnerabilities: The has_vulnerabilities of this ScanRun.
        :type has_vulnerabilities: bool
        """

        self._has_vulnerabilities = has_vulnerabilities

    @property
    def name(self):
        """Gets the name of this ScanRun.

        The resource name of the ScanRun. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'. The ScanRun IDs are generated by the system.

        :return: The name of this ScanRun.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScanRun.

        The resource name of the ScanRun. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'. The ScanRun IDs are generated by the system.

        :param name: The name of this ScanRun.
        :type name: str
        """

        self._name = name

    @property
    def progress_percent(self):
        """Gets the progress_percent of this ScanRun.

        The percentage of total completion ranging from 0 to 100. If the scan is in queue, the value is 0. If the scan is running, the value ranges from 0 to 100. If the scan is finished, the value is 100.

        :return: The progress_percent of this ScanRun.
        :rtype: int
        """
        return self._progress_percent

    @progress_percent.setter
    def progress_percent(self, progress_percent):
        """Sets the progress_percent of this ScanRun.

        The percentage of total completion ranging from 0 to 100. If the scan is in queue, the value is 0. If the scan is running, the value ranges from 0 to 100. If the scan is finished, the value is 100.

        :param progress_percent: The progress_percent of this ScanRun.
        :type progress_percent: int
        """

        self._progress_percent = progress_percent

    @property
    def result_state(self):
        """Gets the result_state of this ScanRun.

        The result state of the ScanRun. This field is only available after the execution state reaches \"FINISHED\".

        :return: The result_state of this ScanRun.
        :rtype: str
        """
        return self._result_state

    @result_state.setter
    def result_state(self, result_state):
        """Sets the result_state of this ScanRun.

        The result state of the ScanRun. This field is only available after the execution state reaches \"FINISHED\".

        :param result_state: The result_state of this ScanRun.
        :type result_state: str
        """
        allowed_values = ["RESULT_STATE_UNSPECIFIED", "SUCCESS", "ERROR", "KILLED"]  # noqa: E501
        if result_state not in allowed_values:
            raise ValueError(
                "Invalid value for `result_state` ({0}), must be one of {1}"
                .format(result_state, allowed_values)
            )

        self._result_state = result_state

    @property
    def start_time(self):
        """Gets the start_time of this ScanRun.

        The time at which the ScanRun started.

        :return: The start_time of this ScanRun.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ScanRun.

        The time at which the ScanRun started.

        :param start_time: The start_time of this ScanRun.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def urls_crawled_count(self):
        """Gets the urls_crawled_count of this ScanRun.

        The number of URLs crawled during this ScanRun. If the scan is in progress, the value represents the number of URLs crawled up to now.

        :return: The urls_crawled_count of this ScanRun.
        :rtype: str
        """
        return self._urls_crawled_count

    @urls_crawled_count.setter
    def urls_crawled_count(self, urls_crawled_count):
        """Sets the urls_crawled_count of this ScanRun.

        The number of URLs crawled during this ScanRun. If the scan is in progress, the value represents the number of URLs crawled up to now.

        :param urls_crawled_count: The urls_crawled_count of this ScanRun.
        :type urls_crawled_count: str
        """

        self._urls_crawled_count = urls_crawled_count

    @property
    def urls_tested_count(self):
        """Gets the urls_tested_count of this ScanRun.

        The number of URLs tested during this ScanRun. If the scan is in progress, the value represents the number of URLs tested up to now. The number of URLs tested is usually larger than the number URLS crawled because typically a crawled URL is tested with multiple test payloads.

        :return: The urls_tested_count of this ScanRun.
        :rtype: str
        """
        return self._urls_tested_count

    @urls_tested_count.setter
    def urls_tested_count(self, urls_tested_count):
        """Sets the urls_tested_count of this ScanRun.

        The number of URLs tested during this ScanRun. If the scan is in progress, the value represents the number of URLs tested up to now. The number of URLs tested is usually larger than the number URLS crawled because typically a crawled URL is tested with multiple test payloads.

        :param urls_tested_count: The urls_tested_count of this ScanRun.
        :type urls_tested_count: str
        """

        self._urls_tested_count = urls_tested_count

    @property
    def warning_traces(self):
        """Gets the warning_traces of this ScanRun.

        A list of warnings, if such are encountered during this scan run.

        :return: The warning_traces of this ScanRun.
        :rtype: List[ScanRunWarningTrace]
        """
        return self._warning_traces

    @warning_traces.setter
    def warning_traces(self, warning_traces):
        """Sets the warning_traces of this ScanRun.

        A list of warnings, if such are encountered during this scan run.

        :param warning_traces: The warning_traces of this ScanRun.
        :type warning_traces: List[ScanRunWarningTrace]
        """

        self._warning_traces = warning_traces
