# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Xxe(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payload_location: str=None, payload_value: str=None):
        """Xxe - a model defined in OpenAPI

        :param payload_location: The payload_location of this Xxe.
        :param payload_value: The payload_value of this Xxe.
        """
        self.openapi_types = {
            'payload_location': str,
            'payload_value': str
        }

        self.attribute_map = {
            'payload_location': 'payloadLocation',
            'payload_value': 'payloadValue'
        }

        self._payload_location = payload_location
        self._payload_value = payload_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Xxe':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Xxe of this Xxe.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payload_location(self):
        """Gets the payload_location of this Xxe.

        Location within the request where the payload was placed.

        :return: The payload_location of this Xxe.
        :rtype: str
        """
        return self._payload_location

    @payload_location.setter
    def payload_location(self, payload_location):
        """Sets the payload_location of this Xxe.

        Location within the request where the payload was placed.

        :param payload_location: The payload_location of this Xxe.
        :type payload_location: str
        """
        allowed_values = ["LOCATION_UNSPECIFIED", "COMPLETE_REQUEST_BODY"]  # noqa: E501
        if payload_location not in allowed_values:
            raise ValueError(
                "Invalid value for `payload_location` ({0}), must be one of {1}"
                .format(payload_location, allowed_values)
            )

        self._payload_location = payload_location

    @property
    def payload_value(self):
        """Gets the payload_value of this Xxe.

        The XML string that triggered the XXE vulnerability. Non-payload values might be redacted.

        :return: The payload_value of this Xxe.
        :rtype: str
        """
        return self._payload_value

    @payload_value.setter
    def payload_value(self, payload_value):
        """Sets the payload_value of this Xxe.

        The XML string that triggered the XXE vulnerability. Non-payload values might be redacted.

        :param payload_value: The payload_value of this Xxe.
        :type payload_value: str
        """

        self._payload_value = payload_value
