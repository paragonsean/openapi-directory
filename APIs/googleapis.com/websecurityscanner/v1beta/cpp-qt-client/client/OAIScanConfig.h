/**
 * Web Security Scanner API
 * Scans your Compute and App Engine apps for common web vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScanConfig.h
 *
 * A ScanConfig resource contains the configurations to launch a scan.
 */

#ifndef OAIScanConfig_H
#define OAIScanConfig_H

#include <QJsonObject>

#include "OAIAuthentication.h"
#include "OAIScanRun.h"
#include "OAISchedule.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAuthentication;
class OAIScanRun;
class OAISchedule;

class OAIScanConfig : public OAIObject {
public:
    OAIScanConfig();
    OAIScanConfig(QString json);
    ~OAIScanConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAuthentication getAuthentication() const;
    void setAuthentication(const OAIAuthentication &authentication);
    bool is_authentication_Set() const;
    bool is_authentication_Valid() const;

    QList<QString> getBlacklistPatterns() const;
    void setBlacklistPatterns(const QList<QString> &blacklist_patterns);
    bool is_blacklist_patterns_Set() const;
    bool is_blacklist_patterns_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getExportToSecurityCommandCenter() const;
    void setExportToSecurityCommandCenter(const QString &export_to_security_command_center);
    bool is_export_to_security_command_center_Set() const;
    bool is_export_to_security_command_center_Valid() const;

    bool isIgnoreHttpStatusErrors() const;
    void setIgnoreHttpStatusErrors(const bool &ignore_http_status_errors);
    bool is_ignore_http_status_errors_Set() const;
    bool is_ignore_http_status_errors_Valid() const;

    OAIScanRun getLatestRun() const;
    void setLatestRun(const OAIScanRun &latest_run);
    bool is_latest_run_Set() const;
    bool is_latest_run_Valid() const;

    bool isManagedScan() const;
    void setManagedScan(const bool &managed_scan);
    bool is_managed_scan_Set() const;
    bool is_managed_scan_Valid() const;

    qint32 getMaxQps() const;
    void setMaxQps(const qint32 &max_qps);
    bool is_max_qps_Set() const;
    bool is_max_qps_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRiskLevel() const;
    void setRiskLevel(const QString &risk_level);
    bool is_risk_level_Set() const;
    bool is_risk_level_Valid() const;

    OAISchedule getSchedule() const;
    void setSchedule(const OAISchedule &schedule);
    bool is_schedule_Set() const;
    bool is_schedule_Valid() const;

    QList<QString> getStartingUrls() const;
    void setStartingUrls(const QList<QString> &starting_urls);
    bool is_starting_urls_Set() const;
    bool is_starting_urls_Valid() const;

    bool isStaticIpScan() const;
    void setStaticIpScan(const bool &static_ip_scan);
    bool is_static_ip_scan_Set() const;
    bool is_static_ip_scan_Valid() const;

    QList<QString> getTargetPlatforms() const;
    void setTargetPlatforms(const QList<QString> &target_platforms);
    bool is_target_platforms_Set() const;
    bool is_target_platforms_Valid() const;

    QString getUserAgent() const;
    void setUserAgent(const QString &user_agent);
    bool is_user_agent_Set() const;
    bool is_user_agent_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAuthentication m_authentication;
    bool m_authentication_isSet;
    bool m_authentication_isValid;

    QList<QString> m_blacklist_patterns;
    bool m_blacklist_patterns_isSet;
    bool m_blacklist_patterns_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_export_to_security_command_center;
    bool m_export_to_security_command_center_isSet;
    bool m_export_to_security_command_center_isValid;

    bool m_ignore_http_status_errors;
    bool m_ignore_http_status_errors_isSet;
    bool m_ignore_http_status_errors_isValid;

    OAIScanRun m_latest_run;
    bool m_latest_run_isSet;
    bool m_latest_run_isValid;

    bool m_managed_scan;
    bool m_managed_scan_isSet;
    bool m_managed_scan_isValid;

    qint32 m_max_qps;
    bool m_max_qps_isSet;
    bool m_max_qps_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_risk_level;
    bool m_risk_level_isSet;
    bool m_risk_level_isValid;

    OAISchedule m_schedule;
    bool m_schedule_isSet;
    bool m_schedule_isValid;

    QList<QString> m_starting_urls;
    bool m_starting_urls_isSet;
    bool m_starting_urls_isValid;

    bool m_static_ip_scan;
    bool m_static_ip_scan_isSet;
    bool m_static_ip_scan_isValid;

    QList<QString> m_target_platforms;
    bool m_target_platforms_isSet;
    bool m_target_platforms_isValid;

    QString m_user_agent;
    bool m_user_agent_isSet;
    bool m_user_agent_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScanConfig)

#endif // OAIScanConfig_H
