/**
 * Web Security Scanner API
 * Scans your Compute and App Engine apps for common web vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScanRunErrorTrace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScanRunErrorTrace::OAIScanRunErrorTrace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScanRunErrorTrace::OAIScanRunErrorTrace() {
    this->initializeModel();
}

OAIScanRunErrorTrace::~OAIScanRunErrorTrace() {}

void OAIScanRunErrorTrace::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_most_common_http_error_code_isSet = false;
    m_most_common_http_error_code_isValid = false;

    m_scan_config_error_isSet = false;
    m_scan_config_error_isValid = false;
}

void OAIScanRunErrorTrace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScanRunErrorTrace::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_most_common_http_error_code_isValid = ::OpenAPI::fromJsonValue(m_most_common_http_error_code, json[QString("mostCommonHttpErrorCode")]);
    m_most_common_http_error_code_isSet = !json[QString("mostCommonHttpErrorCode")].isNull() && m_most_common_http_error_code_isValid;

    m_scan_config_error_isValid = ::OpenAPI::fromJsonValue(m_scan_config_error, json[QString("scanConfigError")]);
    m_scan_config_error_isSet = !json[QString("scanConfigError")].isNull() && m_scan_config_error_isValid;
}

QString OAIScanRunErrorTrace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScanRunErrorTrace::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_most_common_http_error_code_isSet) {
        obj.insert(QString("mostCommonHttpErrorCode"), ::OpenAPI::toJsonValue(m_most_common_http_error_code));
    }
    if (m_scan_config_error.isSet()) {
        obj.insert(QString("scanConfigError"), ::OpenAPI::toJsonValue(m_scan_config_error));
    }
    return obj;
}

QString OAIScanRunErrorTrace::getCode() const {
    return m_code;
}
void OAIScanRunErrorTrace::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIScanRunErrorTrace::is_code_Set() const{
    return m_code_isSet;
}

bool OAIScanRunErrorTrace::is_code_Valid() const{
    return m_code_isValid;
}

qint32 OAIScanRunErrorTrace::getMostCommonHttpErrorCode() const {
    return m_most_common_http_error_code;
}
void OAIScanRunErrorTrace::setMostCommonHttpErrorCode(const qint32 &most_common_http_error_code) {
    m_most_common_http_error_code = most_common_http_error_code;
    m_most_common_http_error_code_isSet = true;
}

bool OAIScanRunErrorTrace::is_most_common_http_error_code_Set() const{
    return m_most_common_http_error_code_isSet;
}

bool OAIScanRunErrorTrace::is_most_common_http_error_code_Valid() const{
    return m_most_common_http_error_code_isValid;
}

OAIScanConfigError OAIScanRunErrorTrace::getScanConfigError() const {
    return m_scan_config_error;
}
void OAIScanRunErrorTrace::setScanConfigError(const OAIScanConfigError &scan_config_error) {
    m_scan_config_error = scan_config_error;
    m_scan_config_error_isSet = true;
}

bool OAIScanRunErrorTrace::is_scan_config_error_Set() const{
    return m_scan_config_error_isSet;
}

bool OAIScanRunErrorTrace::is_scan_config_error_Valid() const{
    return m_scan_config_error_isValid;
}

bool OAIScanRunErrorTrace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_most_common_http_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_config_error.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScanRunErrorTrace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
