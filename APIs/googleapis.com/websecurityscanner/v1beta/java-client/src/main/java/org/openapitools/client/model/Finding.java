/*
 * Web Security Scanner API
 * Scans your Compute and App Engine apps for common web vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Form;
import org.openapitools.client.model.OutdatedLibrary;
import org.openapitools.client.model.ViolatingResource;
import org.openapitools.client.model.VulnerableHeaders;
import org.openapitools.client.model.VulnerableParameters;
import org.openapitools.client.model.Xss;
import org.openapitools.client.model.Xxe;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Finding resource represents a vulnerability instance identified during a ScanRun.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:56.316990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Finding {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FINAL_URL = "finalUrl";
  @SerializedName(SERIALIZED_NAME_FINAL_URL)
  private String finalUrl;

  public static final String SERIALIZED_NAME_FINDING_TYPE = "findingType";
  @SerializedName(SERIALIZED_NAME_FINDING_TYPE)
  private String findingType;

  public static final String SERIALIZED_NAME_FORM = "form";
  @SerializedName(SERIALIZED_NAME_FORM)
  private Form form;

  public static final String SERIALIZED_NAME_FRAME_URL = "frameUrl";
  @SerializedName(SERIALIZED_NAME_FRAME_URL)
  private String frameUrl;

  public static final String SERIALIZED_NAME_FUZZED_URL = "fuzzedUrl";
  @SerializedName(SERIALIZED_NAME_FUZZED_URL)
  private String fuzzedUrl;

  public static final String SERIALIZED_NAME_HTTP_METHOD = "httpMethod";
  @SerializedName(SERIALIZED_NAME_HTTP_METHOD)
  private String httpMethod;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTDATED_LIBRARY = "outdatedLibrary";
  @SerializedName(SERIALIZED_NAME_OUTDATED_LIBRARY)
  private OutdatedLibrary outdatedLibrary;

  public static final String SERIALIZED_NAME_REPRODUCTION_URL = "reproductionUrl";
  @SerializedName(SERIALIZED_NAME_REPRODUCTION_URL)
  private String reproductionUrl;

  /**
   * The severity level of the reported vulnerability.
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    SEVERITY_UNSPECIFIED("SEVERITY_UNSPECIFIED"),
    
    CRITICAL("CRITICAL"),
    
    HIGH("HIGH"),
    
    MEDIUM("MEDIUM"),
    
    LOW("LOW");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  public static final String SERIALIZED_NAME_TRACKING_ID = "trackingId";
  @SerializedName(SERIALIZED_NAME_TRACKING_ID)
  private String trackingId;

  public static final String SERIALIZED_NAME_VIOLATING_RESOURCE = "violatingResource";
  @SerializedName(SERIALIZED_NAME_VIOLATING_RESOURCE)
  private ViolatingResource violatingResource;

  public static final String SERIALIZED_NAME_VULNERABLE_HEADERS = "vulnerableHeaders";
  @SerializedName(SERIALIZED_NAME_VULNERABLE_HEADERS)
  private VulnerableHeaders vulnerableHeaders;

  public static final String SERIALIZED_NAME_VULNERABLE_PARAMETERS = "vulnerableParameters";
  @SerializedName(SERIALIZED_NAME_VULNERABLE_PARAMETERS)
  private VulnerableParameters vulnerableParameters;

  public static final String SERIALIZED_NAME_XSS = "xss";
  @SerializedName(SERIALIZED_NAME_XSS)
  private Xss xss;

  public static final String SERIALIZED_NAME_XXE = "xxe";
  @SerializedName(SERIALIZED_NAME_XXE)
  private Xxe xxe;

  public Finding() {
  }

  public Finding body(String body) {
    this.body = body;
    return this;
  }

  /**
   * The body of the request that triggered the vulnerability.
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public Finding description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the vulnerability.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Finding finalUrl(String finalUrl) {
    this.finalUrl = finalUrl;
    return this;
  }

  /**
   * The URL where the browser lands when the vulnerability is detected.
   * @return finalUrl
   */
  @javax.annotation.Nullable
  public String getFinalUrl() {
    return finalUrl;
  }

  public void setFinalUrl(String finalUrl) {
    this.finalUrl = finalUrl;
  }


  public Finding findingType(String findingType) {
    this.findingType = findingType;
    return this;
  }

  /**
   * The type of the Finding. Detailed and up-to-date information on findings can be found here: https://cloud.google.com/security-command-center/docs/how-to-remediate-web-security-scanner
   * @return findingType
   */
  @javax.annotation.Nullable
  public String getFindingType() {
    return findingType;
  }

  public void setFindingType(String findingType) {
    this.findingType = findingType;
  }


  public Finding form(Form form) {
    this.form = form;
    return this;
  }

  /**
   * Get form
   * @return form
   */
  @javax.annotation.Nullable
  public Form getForm() {
    return form;
  }

  public void setForm(Form form) {
    this.form = form;
  }


  public Finding frameUrl(String frameUrl) {
    this.frameUrl = frameUrl;
    return this;
  }

  /**
   * If the vulnerability was originated from nested IFrame, the immediate parent IFrame is reported.
   * @return frameUrl
   */
  @javax.annotation.Nullable
  public String getFrameUrl() {
    return frameUrl;
  }

  public void setFrameUrl(String frameUrl) {
    this.frameUrl = frameUrl;
  }


  public Finding fuzzedUrl(String fuzzedUrl) {
    this.fuzzedUrl = fuzzedUrl;
    return this;
  }

  /**
   * The URL produced by the server-side fuzzer and used in the request that triggered the vulnerability.
   * @return fuzzedUrl
   */
  @javax.annotation.Nullable
  public String getFuzzedUrl() {
    return fuzzedUrl;
  }

  public void setFuzzedUrl(String fuzzedUrl) {
    this.fuzzedUrl = fuzzedUrl;
  }


  public Finding httpMethod(String httpMethod) {
    this.httpMethod = httpMethod;
    return this;
  }

  /**
   * The http method of the request that triggered the vulnerability, in uppercase.
   * @return httpMethod
   */
  @javax.annotation.Nullable
  public String getHttpMethod() {
    return httpMethod;
  }

  public void setHttpMethod(String httpMethod) {
    this.httpMethod = httpMethod;
  }


  public Finding name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the Finding. The name follows the format of &#39;projects/{projectId}/scanConfigs/{scanConfigId}/scanruns/{scanRunId}/findings/{findingId}&#39;. The finding IDs are generated by the system.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Finding outdatedLibrary(OutdatedLibrary outdatedLibrary) {
    this.outdatedLibrary = outdatedLibrary;
    return this;
  }

  /**
   * Get outdatedLibrary
   * @return outdatedLibrary
   */
  @javax.annotation.Nullable
  public OutdatedLibrary getOutdatedLibrary() {
    return outdatedLibrary;
  }

  public void setOutdatedLibrary(OutdatedLibrary outdatedLibrary) {
    this.outdatedLibrary = outdatedLibrary;
  }


  public Finding reproductionUrl(String reproductionUrl) {
    this.reproductionUrl = reproductionUrl;
    return this;
  }

  /**
   * The URL containing human-readable payload that user can leverage to reproduce the vulnerability.
   * @return reproductionUrl
   */
  @javax.annotation.Nullable
  public String getReproductionUrl() {
    return reproductionUrl;
  }

  public void setReproductionUrl(String reproductionUrl) {
    this.reproductionUrl = reproductionUrl;
  }


  public Finding severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

  /**
   * The severity level of the reported vulnerability.
   * @return severity
   */
  @javax.annotation.Nullable
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public Finding trackingId(String trackingId) {
    this.trackingId = trackingId;
    return this;
  }

  /**
   * The tracking ID uniquely identifies a vulnerability instance across multiple ScanRuns.
   * @return trackingId
   */
  @javax.annotation.Nullable
  public String getTrackingId() {
    return trackingId;
  }

  public void setTrackingId(String trackingId) {
    this.trackingId = trackingId;
  }


  public Finding violatingResource(ViolatingResource violatingResource) {
    this.violatingResource = violatingResource;
    return this;
  }

  /**
   * Get violatingResource
   * @return violatingResource
   */
  @javax.annotation.Nullable
  public ViolatingResource getViolatingResource() {
    return violatingResource;
  }

  public void setViolatingResource(ViolatingResource violatingResource) {
    this.violatingResource = violatingResource;
  }


  public Finding vulnerableHeaders(VulnerableHeaders vulnerableHeaders) {
    this.vulnerableHeaders = vulnerableHeaders;
    return this;
  }

  /**
   * Get vulnerableHeaders
   * @return vulnerableHeaders
   */
  @javax.annotation.Nullable
  public VulnerableHeaders getVulnerableHeaders() {
    return vulnerableHeaders;
  }

  public void setVulnerableHeaders(VulnerableHeaders vulnerableHeaders) {
    this.vulnerableHeaders = vulnerableHeaders;
  }


  public Finding vulnerableParameters(VulnerableParameters vulnerableParameters) {
    this.vulnerableParameters = vulnerableParameters;
    return this;
  }

  /**
   * Get vulnerableParameters
   * @return vulnerableParameters
   */
  @javax.annotation.Nullable
  public VulnerableParameters getVulnerableParameters() {
    return vulnerableParameters;
  }

  public void setVulnerableParameters(VulnerableParameters vulnerableParameters) {
    this.vulnerableParameters = vulnerableParameters;
  }


  public Finding xss(Xss xss) {
    this.xss = xss;
    return this;
  }

  /**
   * Get xss
   * @return xss
   */
  @javax.annotation.Nullable
  public Xss getXss() {
    return xss;
  }

  public void setXss(Xss xss) {
    this.xss = xss;
  }


  public Finding xxe(Xxe xxe) {
    this.xxe = xxe;
    return this;
  }

  /**
   * Get xxe
   * @return xxe
   */
  @javax.annotation.Nullable
  public Xxe getXxe() {
    return xxe;
  }

  public void setXxe(Xxe xxe) {
    this.xxe = xxe;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Finding finding = (Finding) o;
    return Objects.equals(this.body, finding.body) &&
        Objects.equals(this.description, finding.description) &&
        Objects.equals(this.finalUrl, finding.finalUrl) &&
        Objects.equals(this.findingType, finding.findingType) &&
        Objects.equals(this.form, finding.form) &&
        Objects.equals(this.frameUrl, finding.frameUrl) &&
        Objects.equals(this.fuzzedUrl, finding.fuzzedUrl) &&
        Objects.equals(this.httpMethod, finding.httpMethod) &&
        Objects.equals(this.name, finding.name) &&
        Objects.equals(this.outdatedLibrary, finding.outdatedLibrary) &&
        Objects.equals(this.reproductionUrl, finding.reproductionUrl) &&
        Objects.equals(this.severity, finding.severity) &&
        Objects.equals(this.trackingId, finding.trackingId) &&
        Objects.equals(this.violatingResource, finding.violatingResource) &&
        Objects.equals(this.vulnerableHeaders, finding.vulnerableHeaders) &&
        Objects.equals(this.vulnerableParameters, finding.vulnerableParameters) &&
        Objects.equals(this.xss, finding.xss) &&
        Objects.equals(this.xxe, finding.xxe);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, description, finalUrl, findingType, form, frameUrl, fuzzedUrl, httpMethod, name, outdatedLibrary, reproductionUrl, severity, trackingId, violatingResource, vulnerableHeaders, vulnerableParameters, xss, xxe);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Finding {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    finalUrl: ").append(toIndentedString(finalUrl)).append("\n");
    sb.append("    findingType: ").append(toIndentedString(findingType)).append("\n");
    sb.append("    form: ").append(toIndentedString(form)).append("\n");
    sb.append("    frameUrl: ").append(toIndentedString(frameUrl)).append("\n");
    sb.append("    fuzzedUrl: ").append(toIndentedString(fuzzedUrl)).append("\n");
    sb.append("    httpMethod: ").append(toIndentedString(httpMethod)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outdatedLibrary: ").append(toIndentedString(outdatedLibrary)).append("\n");
    sb.append("    reproductionUrl: ").append(toIndentedString(reproductionUrl)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    trackingId: ").append(toIndentedString(trackingId)).append("\n");
    sb.append("    violatingResource: ").append(toIndentedString(violatingResource)).append("\n");
    sb.append("    vulnerableHeaders: ").append(toIndentedString(vulnerableHeaders)).append("\n");
    sb.append("    vulnerableParameters: ").append(toIndentedString(vulnerableParameters)).append("\n");
    sb.append("    xss: ").append(toIndentedString(xss)).append("\n");
    sb.append("    xxe: ").append(toIndentedString(xxe)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("description");
    openapiFields.add("finalUrl");
    openapiFields.add("findingType");
    openapiFields.add("form");
    openapiFields.add("frameUrl");
    openapiFields.add("fuzzedUrl");
    openapiFields.add("httpMethod");
    openapiFields.add("name");
    openapiFields.add("outdatedLibrary");
    openapiFields.add("reproductionUrl");
    openapiFields.add("severity");
    openapiFields.add("trackingId");
    openapiFields.add("violatingResource");
    openapiFields.add("vulnerableHeaders");
    openapiFields.add("vulnerableParameters");
    openapiFields.add("xss");
    openapiFields.add("xxe");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Finding
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Finding.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Finding is not found in the empty JSON string", Finding.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Finding.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Finding` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("finalUrl") != null && !jsonObj.get("finalUrl").isJsonNull()) && !jsonObj.get("finalUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `finalUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("finalUrl").toString()));
      }
      if ((jsonObj.get("findingType") != null && !jsonObj.get("findingType").isJsonNull()) && !jsonObj.get("findingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `findingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("findingType").toString()));
      }
      // validate the optional field `form`
      if (jsonObj.get("form") != null && !jsonObj.get("form").isJsonNull()) {
        Form.validateJsonElement(jsonObj.get("form"));
      }
      if ((jsonObj.get("frameUrl") != null && !jsonObj.get("frameUrl").isJsonNull()) && !jsonObj.get("frameUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frameUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frameUrl").toString()));
      }
      if ((jsonObj.get("fuzzedUrl") != null && !jsonObj.get("fuzzedUrl").isJsonNull()) && !jsonObj.get("fuzzedUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fuzzedUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fuzzedUrl").toString()));
      }
      if ((jsonObj.get("httpMethod") != null && !jsonObj.get("httpMethod").isJsonNull()) && !jsonObj.get("httpMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpMethod").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `outdatedLibrary`
      if (jsonObj.get("outdatedLibrary") != null && !jsonObj.get("outdatedLibrary").isJsonNull()) {
        OutdatedLibrary.validateJsonElement(jsonObj.get("outdatedLibrary"));
      }
      if ((jsonObj.get("reproductionUrl") != null && !jsonObj.get("reproductionUrl").isJsonNull()) && !jsonObj.get("reproductionUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reproductionUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reproductionUrl").toString()));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      }
      if ((jsonObj.get("trackingId") != null && !jsonObj.get("trackingId").isJsonNull()) && !jsonObj.get("trackingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingId").toString()));
      }
      // validate the optional field `violatingResource`
      if (jsonObj.get("violatingResource") != null && !jsonObj.get("violatingResource").isJsonNull()) {
        ViolatingResource.validateJsonElement(jsonObj.get("violatingResource"));
      }
      // validate the optional field `vulnerableHeaders`
      if (jsonObj.get("vulnerableHeaders") != null && !jsonObj.get("vulnerableHeaders").isJsonNull()) {
        VulnerableHeaders.validateJsonElement(jsonObj.get("vulnerableHeaders"));
      }
      // validate the optional field `vulnerableParameters`
      if (jsonObj.get("vulnerableParameters") != null && !jsonObj.get("vulnerableParameters").isJsonNull()) {
        VulnerableParameters.validateJsonElement(jsonObj.get("vulnerableParameters"));
      }
      // validate the optional field `xss`
      if (jsonObj.get("xss") != null && !jsonObj.get("xss").isJsonNull()) {
        Xss.validateJsonElement(jsonObj.get("xss"));
      }
      // validate the optional field `xxe`
      if (jsonObj.get("xxe") != null && !jsonObj.get("xxe").isJsonNull()) {
        Xxe.validateJsonElement(jsonObj.get("xxe"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Finding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Finding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Finding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Finding.class));

       return (TypeAdapter<T>) new TypeAdapter<Finding>() {
           @Override
           public void write(JsonWriter out, Finding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Finding read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Finding given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Finding
   * @throws IOException if the JSON string is invalid with respect to Finding
   */
  public static Finding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Finding.class);
  }

  /**
   * Convert an instance of Finding to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

