/*
 * Web Security Scanner API
 * Scans your Compute and App Engine apps for common web vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a custom error message used by CreateScanConfig and UpdateScanConfig APIs when scan configuration validation fails. It is also reported as part of a ScanRunErrorTrace message if scan validation fails due to a scan configuration error.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:56.316990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScanConfigError {
  /**
   * Indicates the reason code for a configuration failure.
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    CODE_UNSPECIFIED("CODE_UNSPECIFIED"),
    
    OK("OK"),
    
    INTERNAL_ERROR("INTERNAL_ERROR"),
    
    APPENGINE_API_BACKEND_ERROR("APPENGINE_API_BACKEND_ERROR"),
    
    APPENGINE_API_NOT_ACCESSIBLE("APPENGINE_API_NOT_ACCESSIBLE"),
    
    APPENGINE_DEFAULT_HOST_MISSING("APPENGINE_DEFAULT_HOST_MISSING"),
    
    CANNOT_USE_GOOGLE_COM_ACCOUNT("CANNOT_USE_GOOGLE_COM_ACCOUNT"),
    
    CANNOT_USE_OWNER_ACCOUNT("CANNOT_USE_OWNER_ACCOUNT"),
    
    COMPUTE_API_BACKEND_ERROR("COMPUTE_API_BACKEND_ERROR"),
    
    COMPUTE_API_NOT_ACCESSIBLE("COMPUTE_API_NOT_ACCESSIBLE"),
    
    CUSTOM_LOGIN_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT("CUSTOM_LOGIN_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT"),
    
    CUSTOM_LOGIN_URL_MALFORMED("CUSTOM_LOGIN_URL_MALFORMED"),
    
    CUSTOM_LOGIN_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS("CUSTOM_LOGIN_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS"),
    
    CUSTOM_LOGIN_URL_MAPPED_TO_UNRESERVED_ADDRESS("CUSTOM_LOGIN_URL_MAPPED_TO_UNRESERVED_ADDRESS"),
    
    CUSTOM_LOGIN_URL_HAS_NON_ROUTABLE_IP_ADDRESS("CUSTOM_LOGIN_URL_HAS_NON_ROUTABLE_IP_ADDRESS"),
    
    CUSTOM_LOGIN_URL_HAS_UNRESERVED_IP_ADDRESS("CUSTOM_LOGIN_URL_HAS_UNRESERVED_IP_ADDRESS"),
    
    DUPLICATE_SCAN_NAME("DUPLICATE_SCAN_NAME"),
    
    INVALID_FIELD_VALUE("INVALID_FIELD_VALUE"),
    
    FAILED_TO_AUTHENTICATE_TO_TARGET("FAILED_TO_AUTHENTICATE_TO_TARGET"),
    
    FINDING_TYPE_UNSPECIFIED("FINDING_TYPE_UNSPECIFIED"),
    
    FORBIDDEN_TO_SCAN_COMPUTE("FORBIDDEN_TO_SCAN_COMPUTE"),
    
    FORBIDDEN_UPDATE_TO_MANAGED_SCAN("FORBIDDEN_UPDATE_TO_MANAGED_SCAN"),
    
    MALFORMED_FILTER("MALFORMED_FILTER"),
    
    MALFORMED_RESOURCE_NAME("MALFORMED_RESOURCE_NAME"),
    
    PROJECT_INACTIVE("PROJECT_INACTIVE"),
    
    REQUIRED_FIELD("REQUIRED_FIELD"),
    
    RESOURCE_NAME_INCONSISTENT("RESOURCE_NAME_INCONSISTENT"),
    
    SCAN_ALREADY_RUNNING("SCAN_ALREADY_RUNNING"),
    
    SCAN_NOT_RUNNING("SCAN_NOT_RUNNING"),
    
    SEED_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT("SEED_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT"),
    
    SEED_URL_MALFORMED("SEED_URL_MALFORMED"),
    
    SEED_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS("SEED_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS"),
    
    SEED_URL_MAPPED_TO_UNRESERVED_ADDRESS("SEED_URL_MAPPED_TO_UNRESERVED_ADDRESS"),
    
    SEED_URL_HAS_NON_ROUTABLE_IP_ADDRESS("SEED_URL_HAS_NON_ROUTABLE_IP_ADDRESS"),
    
    SEED_URL_HAS_UNRESERVED_IP_ADDRESS("SEED_URL_HAS_UNRESERVED_IP_ADDRESS"),
    
    SERVICE_ACCOUNT_NOT_CONFIGURED("SERVICE_ACCOUNT_NOT_CONFIGURED"),
    
    TOO_MANY_SCANS("TOO_MANY_SCANS"),
    
    UNABLE_TO_RESOLVE_PROJECT_INFO("UNABLE_TO_RESOLVE_PROJECT_INFO"),
    
    UNSUPPORTED_BLACKLIST_PATTERN_FORMAT("UNSUPPORTED_BLACKLIST_PATTERN_FORMAT"),
    
    UNSUPPORTED_FILTER("UNSUPPORTED_FILTER"),
    
    UNSUPPORTED_FINDING_TYPE("UNSUPPORTED_FINDING_TYPE"),
    
    UNSUPPORTED_URL_SCHEME("UNSUPPORTED_URL_SCHEME"),
    
    CLOUD_ASSET_INVENTORY_ASSET_NOT_FOUND("CLOUD_ASSET_INVENTORY_ASSET_NOT_FOUND");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private CodeEnum code;

  public static final String SERIALIZED_NAME_FIELD_NAME = "fieldName";
  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  private String fieldName;

  public ScanConfigError() {
  }

  public ScanConfigError code(CodeEnum code) {
    this.code = code;
    return this;
  }

  /**
   * Indicates the reason code for a configuration failure.
   * @return code
   */
  @javax.annotation.Nullable
  public CodeEnum getCode() {
    return code;
  }

  public void setCode(CodeEnum code) {
    this.code = code;
  }


  public ScanConfigError fieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  /**
   * Indicates the full name of the ScanConfig field that triggers this error, for example \&quot;scan_config.max_qps\&quot;. This field is provided for troubleshooting purposes only and its actual value can change in the future.
   * @return fieldName
   */
  @javax.annotation.Nullable
  public String getFieldName() {
    return fieldName;
  }

  public void setFieldName(String fieldName) {
    this.fieldName = fieldName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScanConfigError scanConfigError = (ScanConfigError) o;
    return Objects.equals(this.code, scanConfigError.code) &&
        Objects.equals(this.fieldName, scanConfigError.fieldName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, fieldName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScanConfigError {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("fieldName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScanConfigError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScanConfigError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScanConfigError is not found in the empty JSON string", ScanConfigError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScanConfigError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScanConfigError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `code`
      if (jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) {
        CodeEnum.validateJsonElement(jsonObj.get("code"));
      }
      if ((jsonObj.get("fieldName") != null && !jsonObj.get("fieldName").isJsonNull()) && !jsonObj.get("fieldName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScanConfigError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScanConfigError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScanConfigError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScanConfigError.class));

       return (TypeAdapter<T>) new TypeAdapter<ScanConfigError>() {
           @Override
           public void write(JsonWriter out, ScanConfigError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScanConfigError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScanConfigError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScanConfigError
   * @throws IOException if the JSON string is invalid with respect to ScanConfigError
   */
  public static ScanConfigError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScanConfigError.class);
  }

  /**
   * Convert an instance of ScanConfigError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

