# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.path_override import PathOverride
from openapi_server.models.query_override import QueryOverride
from openapi_server import util


class UriOverride(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host: str=None, path_override: PathOverride=None, port: str=None, query_override: QueryOverride=None, scheme: str=None, uri_override_enforce_mode: str=None):
        """UriOverride - a model defined in OpenAPI

        :param host: The host of this UriOverride.
        :param path_override: The path_override of this UriOverride.
        :param port: The port of this UriOverride.
        :param query_override: The query_override of this UriOverride.
        :param scheme: The scheme of this UriOverride.
        :param uri_override_enforce_mode: The uri_override_enforce_mode of this UriOverride.
        """
        self.openapi_types = {
            'host': str,
            'path_override': PathOverride,
            'port': str,
            'query_override': QueryOverride,
            'scheme': str,
            'uri_override_enforce_mode': str
        }

        self.attribute_map = {
            'host': 'host',
            'path_override': 'pathOverride',
            'port': 'port',
            'query_override': 'queryOverride',
            'scheme': 'scheme',
            'uri_override_enforce_mode': 'uriOverrideEnforceMode'
        }

        self._host = host
        self._path_override = path_override
        self._port = port
        self._query_override = query_override
        self._scheme = scheme
        self._uri_override_enforce_mode = uri_override_enforce_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UriOverride':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UriOverride of this UriOverride.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host(self):
        """Gets the host of this UriOverride.

        Host override. When specified, replaces the host part of the task URL. For example, if the task URL is \"https://www.google.com,\" and host value is set to \"example.net\", the overridden URI will be changed to \"https://example.net.\" Host value cannot be an empty string (INVALID_ARGUMENT).

        :return: The host of this UriOverride.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this UriOverride.

        Host override. When specified, replaces the host part of the task URL. For example, if the task URL is \"https://www.google.com,\" and host value is set to \"example.net\", the overridden URI will be changed to \"https://example.net.\" Host value cannot be an empty string (INVALID_ARGUMENT).

        :param host: The host of this UriOverride.
        :type host: str
        """

        self._host = host

    @property
    def path_override(self):
        """Gets the path_override of this UriOverride.


        :return: The path_override of this UriOverride.
        :rtype: PathOverride
        """
        return self._path_override

    @path_override.setter
    def path_override(self, path_override):
        """Sets the path_override of this UriOverride.


        :param path_override: The path_override of this UriOverride.
        :type path_override: PathOverride
        """

        self._path_override = path_override

    @property
    def port(self):
        """Gets the port of this UriOverride.

        Port override. When specified, replaces the port part of the task URI. For instance, for a URI http://www.google.com/foo and port=123, the overridden URI becomes http://www.google.com:123/foo. Note that the port value must be a positive integer. Setting the port to 0 (Zero) clears the URI port.

        :return: The port of this UriOverride.
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this UriOverride.

        Port override. When specified, replaces the port part of the task URI. For instance, for a URI http://www.google.com/foo and port=123, the overridden URI becomes http://www.google.com:123/foo. Note that the port value must be a positive integer. Setting the port to 0 (Zero) clears the URI port.

        :param port: The port of this UriOverride.
        :type port: str
        """

        self._port = port

    @property
    def query_override(self):
        """Gets the query_override of this UriOverride.


        :return: The query_override of this UriOverride.
        :rtype: QueryOverride
        """
        return self._query_override

    @query_override.setter
    def query_override(self, query_override):
        """Sets the query_override of this UriOverride.


        :param query_override: The query_override of this UriOverride.
        :type query_override: QueryOverride
        """

        self._query_override = query_override

    @property
    def scheme(self):
        """Gets the scheme of this UriOverride.

        Scheme override. When specified, the task URI scheme is replaced by the provided value (HTTP or HTTPS).

        :return: The scheme of this UriOverride.
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this UriOverride.

        Scheme override. When specified, the task URI scheme is replaced by the provided value (HTTP or HTTPS).

        :param scheme: The scheme of this UriOverride.
        :type scheme: str
        """
        allowed_values = ["SCHEME_UNSPECIFIED", "HTTP", "HTTPS"]  # noqa: E501
        if scheme not in allowed_values:
            raise ValueError(
                "Invalid value for `scheme` ({0}), must be one of {1}"
                .format(scheme, allowed_values)
            )

        self._scheme = scheme

    @property
    def uri_override_enforce_mode(self):
        """Gets the uri_override_enforce_mode of this UriOverride.

        URI Override Enforce Mode When specified, determines the Target UriOverride mode. If not specified, it defaults to ALWAYS.

        :return: The uri_override_enforce_mode of this UriOverride.
        :rtype: str
        """
        return self._uri_override_enforce_mode

    @uri_override_enforce_mode.setter
    def uri_override_enforce_mode(self, uri_override_enforce_mode):
        """Sets the uri_override_enforce_mode of this UriOverride.

        URI Override Enforce Mode When specified, determines the Target UriOverride mode. If not specified, it defaults to ALWAYS.

        :param uri_override_enforce_mode: The uri_override_enforce_mode of this UriOverride.
        :type uri_override_enforce_mode: str
        """
        allowed_values = ["URI_OVERRIDE_ENFORCE_MODE_UNSPECIFIED", "IF_NOT_EXISTS", "ALWAYS"]  # noqa: E501
        if uri_override_enforce_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `uri_override_enforce_mode` ({0}), must be one of {1}"
                .format(uri_override_enforce_mode, allowed_values)
            )

        self._uri_override_enforce_mode = uri_override_enforce_mode
