# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.header_override import HeaderOverride
from openapi_server.models.o_auth_token import OAuthToken
from openapi_server.models.oidc_token import OidcToken
from openapi_server.models.uri_override import UriOverride
from openapi_server import util


class HttpTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, header_overrides: List[HeaderOverride]=None, http_method: str=None, oauth_token: OAuthToken=None, oidc_token: OidcToken=None, uri_override: UriOverride=None):
        """HttpTarget - a model defined in OpenAPI

        :param header_overrides: The header_overrides of this HttpTarget.
        :param http_method: The http_method of this HttpTarget.
        :param oauth_token: The oauth_token of this HttpTarget.
        :param oidc_token: The oidc_token of this HttpTarget.
        :param uri_override: The uri_override of this HttpTarget.
        """
        self.openapi_types = {
            'header_overrides': List[HeaderOverride],
            'http_method': str,
            'oauth_token': OAuthToken,
            'oidc_token': OidcToken,
            'uri_override': UriOverride
        }

        self.attribute_map = {
            'header_overrides': 'headerOverrides',
            'http_method': 'httpMethod',
            'oauth_token': 'oauthToken',
            'oidc_token': 'oidcToken',
            'uri_override': 'uriOverride'
        }

        self._header_overrides = header_overrides
        self._http_method = http_method
        self._oauth_token = oauth_token
        self._oidc_token = oidc_token
        self._uri_override = uri_override

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpTarget of this HttpTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def header_overrides(self):
        """Gets the header_overrides of this HttpTarget.

        HTTP target headers. This map contains the header field names and values. Headers will be set when running the CreateTask and/or BufferTask. These headers represent a subset of the headers that will be configured for the task's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is: * Several predefined headers, prefixed with \"X-CloudTasks-\", can be used to define properties of the task. * Host: This will be computed by Cloud Tasks and derived from HttpRequest.url. * Content-Length: This will be computed by Cloud Tasks. `Content-Type` won't be set by Cloud Tasks. You can explicitly set `Content-Type` to a media type when the task is created. For example,`Content-Type` can be set to `\"application/octet-stream\"` or `\"application/json\"`. The default value is set to `\"application/json\"`. * User-Agent: This will be set to `\"Google-Cloud-Tasks\"`. Headers which can have multiple values (according to RFC2616) can be specified using comma-separated values. The size of the headers must be less than 80KB. Queue-level headers to override headers of all the tasks in the queue.

        :return: The header_overrides of this HttpTarget.
        :rtype: List[HeaderOverride]
        """
        return self._header_overrides

    @header_overrides.setter
    def header_overrides(self, header_overrides):
        """Sets the header_overrides of this HttpTarget.

        HTTP target headers. This map contains the header field names and values. Headers will be set when running the CreateTask and/or BufferTask. These headers represent a subset of the headers that will be configured for the task's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is: * Several predefined headers, prefixed with \"X-CloudTasks-\", can be used to define properties of the task. * Host: This will be computed by Cloud Tasks and derived from HttpRequest.url. * Content-Length: This will be computed by Cloud Tasks. `Content-Type` won't be set by Cloud Tasks. You can explicitly set `Content-Type` to a media type when the task is created. For example,`Content-Type` can be set to `\"application/octet-stream\"` or `\"application/json\"`. The default value is set to `\"application/json\"`. * User-Agent: This will be set to `\"Google-Cloud-Tasks\"`. Headers which can have multiple values (according to RFC2616) can be specified using comma-separated values. The size of the headers must be less than 80KB. Queue-level headers to override headers of all the tasks in the queue.

        :param header_overrides: The header_overrides of this HttpTarget.
        :type header_overrides: List[HeaderOverride]
        """

        self._header_overrides = header_overrides

    @property
    def http_method(self):
        """Gets the http_method of this HttpTarget.

        The HTTP method to use for the request. When specified, it overrides HttpRequest for the task. Note that if the value is set to HttpMethod the HttpRequest of the task will be ignored at execution time.

        :return: The http_method of this HttpTarget.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this HttpTarget.

        The HTTP method to use for the request. When specified, it overrides HttpRequest for the task. Note that if the value is set to HttpMethod the HttpRequest of the task will be ignored at execution time.

        :param http_method: The http_method of this HttpTarget.
        :type http_method: str
        """
        allowed_values = ["HTTP_METHOD_UNSPECIFIED", "POST", "GET", "HEAD", "PUT", "DELETE", "PATCH", "OPTIONS"]  # noqa: E501
        if http_method not in allowed_values:
            raise ValueError(
                "Invalid value for `http_method` ({0}), must be one of {1}"
                .format(http_method, allowed_values)
            )

        self._http_method = http_method

    @property
    def oauth_token(self):
        """Gets the oauth_token of this HttpTarget.


        :return: The oauth_token of this HttpTarget.
        :rtype: OAuthToken
        """
        return self._oauth_token

    @oauth_token.setter
    def oauth_token(self, oauth_token):
        """Sets the oauth_token of this HttpTarget.


        :param oauth_token: The oauth_token of this HttpTarget.
        :type oauth_token: OAuthToken
        """

        self._oauth_token = oauth_token

    @property
    def oidc_token(self):
        """Gets the oidc_token of this HttpTarget.


        :return: The oidc_token of this HttpTarget.
        :rtype: OidcToken
        """
        return self._oidc_token

    @oidc_token.setter
    def oidc_token(self, oidc_token):
        """Sets the oidc_token of this HttpTarget.


        :param oidc_token: The oidc_token of this HttpTarget.
        :type oidc_token: OidcToken
        """

        self._oidc_token = oidc_token

    @property
    def uri_override(self):
        """Gets the uri_override of this HttpTarget.


        :return: The uri_override of this HttpTarget.
        :rtype: UriOverride
        """
        return self._uri_override

    @uri_override.setter
    def uri_override(self, uri_override):
        """Sets the uri_override of this HttpTarget.


        :param uri_override: The uri_override of this HttpTarget.
        :type uri_override: UriOverride
        """

        self._uri_override = uri_override
