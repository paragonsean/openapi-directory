# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.o_auth_token import OAuthToken
from openapi_server.models.oidc_token import OidcToken
from openapi_server import util


class HttpRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, headers: Dict[str, str]=None, http_method: str=None, oauth_token: OAuthToken=None, oidc_token: OidcToken=None, url: str=None):
        """HttpRequest - a model defined in OpenAPI

        :param body: The body of this HttpRequest.
        :param headers: The headers of this HttpRequest.
        :param http_method: The http_method of this HttpRequest.
        :param oauth_token: The oauth_token of this HttpRequest.
        :param oidc_token: The oidc_token of this HttpRequest.
        :param url: The url of this HttpRequest.
        """
        self.openapi_types = {
            'body': str,
            'headers': Dict[str, str],
            'http_method': str,
            'oauth_token': OAuthToken,
            'oidc_token': OidcToken,
            'url': str
        }

        self.attribute_map = {
            'body': 'body',
            'headers': 'headers',
            'http_method': 'httpMethod',
            'oauth_token': 'oauthToken',
            'oidc_token': 'oidcToken',
            'url': 'url'
        }

        self._body = body
        self._headers = headers
        self._http_method = http_method
        self._oauth_token = oauth_token
        self._oidc_token = oidc_token
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpRequest of this HttpRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this HttpRequest.

        HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a task with an incompatible HttpMethod.

        :return: The body of this HttpRequest.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this HttpRequest.

        HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a task with an incompatible HttpMethod.

        :param body: The body of this HttpRequest.
        :type body: str
        """

        self._body = body

    @property
    def headers(self):
        """Gets the headers of this HttpRequest.

        HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. These headers represent a subset of the headers that will accompany the task's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is: * Any header that is prefixed with \"X-CloudTasks-\" will be treated as service header. Service headers define properties of the task and are predefined in CloudTask. * Host: This will be computed by Cloud Tasks and derived from HttpRequest.url. * Content-Length: This will be computed by Cloud Tasks. * User-Agent: This will be set to `\"Google-Cloud-Tasks\"`. * `X-Google-*`: Google use only. * `X-AppEngine-*`: Google use only. `Content-Type` won't be set by Cloud Tasks. You can explicitly set `Content-Type` to a media type when the task is created. For example, `Content-Type` can be set to `\"application/octet-stream\"` or `\"application/json\"`. Headers which can have multiple values (according to RFC2616) can be specified using comma-separated values. The size of the headers must be less than 80KB.

        :return: The headers of this HttpRequest.
        :rtype: Dict[str, str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this HttpRequest.

        HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. These headers represent a subset of the headers that will accompany the task's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is: * Any header that is prefixed with \"X-CloudTasks-\" will be treated as service header. Service headers define properties of the task and are predefined in CloudTask. * Host: This will be computed by Cloud Tasks and derived from HttpRequest.url. * Content-Length: This will be computed by Cloud Tasks. * User-Agent: This will be set to `\"Google-Cloud-Tasks\"`. * `X-Google-*`: Google use only. * `X-AppEngine-*`: Google use only. `Content-Type` won't be set by Cloud Tasks. You can explicitly set `Content-Type` to a media type when the task is created. For example, `Content-Type` can be set to `\"application/octet-stream\"` or `\"application/json\"`. Headers which can have multiple values (according to RFC2616) can be specified using comma-separated values. The size of the headers must be less than 80KB.

        :param headers: The headers of this HttpRequest.
        :type headers: Dict[str, str]
        """

        self._headers = headers

    @property
    def http_method(self):
        """Gets the http_method of this HttpRequest.

        The HTTP method to use for the request. The default is POST.

        :return: The http_method of this HttpRequest.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this HttpRequest.

        The HTTP method to use for the request. The default is POST.

        :param http_method: The http_method of this HttpRequest.
        :type http_method: str
        """
        allowed_values = ["HTTP_METHOD_UNSPECIFIED", "POST", "GET", "HEAD", "PUT", "DELETE", "PATCH", "OPTIONS"]  # noqa: E501
        if http_method not in allowed_values:
            raise ValueError(
                "Invalid value for `http_method` ({0}), must be one of {1}"
                .format(http_method, allowed_values)
            )

        self._http_method = http_method

    @property
    def oauth_token(self):
        """Gets the oauth_token of this HttpRequest.


        :return: The oauth_token of this HttpRequest.
        :rtype: OAuthToken
        """
        return self._oauth_token

    @oauth_token.setter
    def oauth_token(self, oauth_token):
        """Sets the oauth_token of this HttpRequest.


        :param oauth_token: The oauth_token of this HttpRequest.
        :type oauth_token: OAuthToken
        """

        self._oauth_token = oauth_token

    @property
    def oidc_token(self):
        """Gets the oidc_token of this HttpRequest.


        :return: The oidc_token of this HttpRequest.
        :rtype: OidcToken
        """
        return self._oidc_token

    @oidc_token.setter
    def oidc_token(self, oidc_token):
        """Sets the oidc_token of this HttpRequest.


        :param oidc_token: The oidc_token of this HttpRequest.
        :type oidc_token: OidcToken
        """

        self._oidc_token = oidc_token

    @property
    def url(self):
        """Gets the url of this HttpRequest.

        Required. The full url path that the request will be sent to. This string must begin with either \"http://\" or \"https://\". Some examples are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Tasks will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding. The `Location` header response from a redirect response [`300` - `399`] may be followed. The redirect is not counted as a separate attempt.

        :return: The url of this HttpRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this HttpRequest.

        Required. The full url path that the request will be sent to. This string must begin with either \"http://\" or \"https://\". Some examples are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Tasks will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding. The `Location` header response from a redirect response [`300` - `399`] may be followed. The redirect is not counted as a separate attempt.

        :param url: The url of this HttpRequest.
        :type url: str
        """

        self._url = url
