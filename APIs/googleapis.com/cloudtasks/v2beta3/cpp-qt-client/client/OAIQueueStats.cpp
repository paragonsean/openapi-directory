/**
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueueStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueueStats::OAIQueueStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueueStats::OAIQueueStats() {
    this->initializeModel();
}

OAIQueueStats::~OAIQueueStats() {}

void OAIQueueStats::initializeModel() {

    m_concurrent_dispatches_count_isSet = false;
    m_concurrent_dispatches_count_isValid = false;

    m_effective_execution_rate_isSet = false;
    m_effective_execution_rate_isValid = false;

    m_executed_last_minute_count_isSet = false;
    m_executed_last_minute_count_isValid = false;

    m_oldest_estimated_arrival_time_isSet = false;
    m_oldest_estimated_arrival_time_isValid = false;

    m_tasks_count_isSet = false;
    m_tasks_count_isValid = false;
}

void OAIQueueStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueueStats::fromJsonObject(QJsonObject json) {

    m_concurrent_dispatches_count_isValid = ::OpenAPI::fromJsonValue(m_concurrent_dispatches_count, json[QString("concurrentDispatchesCount")]);
    m_concurrent_dispatches_count_isSet = !json[QString("concurrentDispatchesCount")].isNull() && m_concurrent_dispatches_count_isValid;

    m_effective_execution_rate_isValid = ::OpenAPI::fromJsonValue(m_effective_execution_rate, json[QString("effectiveExecutionRate")]);
    m_effective_execution_rate_isSet = !json[QString("effectiveExecutionRate")].isNull() && m_effective_execution_rate_isValid;

    m_executed_last_minute_count_isValid = ::OpenAPI::fromJsonValue(m_executed_last_minute_count, json[QString("executedLastMinuteCount")]);
    m_executed_last_minute_count_isSet = !json[QString("executedLastMinuteCount")].isNull() && m_executed_last_minute_count_isValid;

    m_oldest_estimated_arrival_time_isValid = ::OpenAPI::fromJsonValue(m_oldest_estimated_arrival_time, json[QString("oldestEstimatedArrivalTime")]);
    m_oldest_estimated_arrival_time_isSet = !json[QString("oldestEstimatedArrivalTime")].isNull() && m_oldest_estimated_arrival_time_isValid;

    m_tasks_count_isValid = ::OpenAPI::fromJsonValue(m_tasks_count, json[QString("tasksCount")]);
    m_tasks_count_isSet = !json[QString("tasksCount")].isNull() && m_tasks_count_isValid;
}

QString OAIQueueStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueueStats::asJsonObject() const {
    QJsonObject obj;
    if (m_concurrent_dispatches_count_isSet) {
        obj.insert(QString("concurrentDispatchesCount"), ::OpenAPI::toJsonValue(m_concurrent_dispatches_count));
    }
    if (m_effective_execution_rate_isSet) {
        obj.insert(QString("effectiveExecutionRate"), ::OpenAPI::toJsonValue(m_effective_execution_rate));
    }
    if (m_executed_last_minute_count_isSet) {
        obj.insert(QString("executedLastMinuteCount"), ::OpenAPI::toJsonValue(m_executed_last_minute_count));
    }
    if (m_oldest_estimated_arrival_time_isSet) {
        obj.insert(QString("oldestEstimatedArrivalTime"), ::OpenAPI::toJsonValue(m_oldest_estimated_arrival_time));
    }
    if (m_tasks_count_isSet) {
        obj.insert(QString("tasksCount"), ::OpenAPI::toJsonValue(m_tasks_count));
    }
    return obj;
}

QString OAIQueueStats::getConcurrentDispatchesCount() const {
    return m_concurrent_dispatches_count;
}
void OAIQueueStats::setConcurrentDispatchesCount(const QString &concurrent_dispatches_count) {
    m_concurrent_dispatches_count = concurrent_dispatches_count;
    m_concurrent_dispatches_count_isSet = true;
}

bool OAIQueueStats::is_concurrent_dispatches_count_Set() const{
    return m_concurrent_dispatches_count_isSet;
}

bool OAIQueueStats::is_concurrent_dispatches_count_Valid() const{
    return m_concurrent_dispatches_count_isValid;
}

double OAIQueueStats::getEffectiveExecutionRate() const {
    return m_effective_execution_rate;
}
void OAIQueueStats::setEffectiveExecutionRate(const double &effective_execution_rate) {
    m_effective_execution_rate = effective_execution_rate;
    m_effective_execution_rate_isSet = true;
}

bool OAIQueueStats::is_effective_execution_rate_Set() const{
    return m_effective_execution_rate_isSet;
}

bool OAIQueueStats::is_effective_execution_rate_Valid() const{
    return m_effective_execution_rate_isValid;
}

QString OAIQueueStats::getExecutedLastMinuteCount() const {
    return m_executed_last_minute_count;
}
void OAIQueueStats::setExecutedLastMinuteCount(const QString &executed_last_minute_count) {
    m_executed_last_minute_count = executed_last_minute_count;
    m_executed_last_minute_count_isSet = true;
}

bool OAIQueueStats::is_executed_last_minute_count_Set() const{
    return m_executed_last_minute_count_isSet;
}

bool OAIQueueStats::is_executed_last_minute_count_Valid() const{
    return m_executed_last_minute_count_isValid;
}

QString OAIQueueStats::getOldestEstimatedArrivalTime() const {
    return m_oldest_estimated_arrival_time;
}
void OAIQueueStats::setOldestEstimatedArrivalTime(const QString &oldest_estimated_arrival_time) {
    m_oldest_estimated_arrival_time = oldest_estimated_arrival_time;
    m_oldest_estimated_arrival_time_isSet = true;
}

bool OAIQueueStats::is_oldest_estimated_arrival_time_Set() const{
    return m_oldest_estimated_arrival_time_isSet;
}

bool OAIQueueStats::is_oldest_estimated_arrival_time_Valid() const{
    return m_oldest_estimated_arrival_time_isValid;
}

QString OAIQueueStats::getTasksCount() const {
    return m_tasks_count;
}
void OAIQueueStats::setTasksCount(const QString &tasks_count) {
    m_tasks_count = tasks_count;
    m_tasks_count_isSet = true;
}

bool OAIQueueStats::is_tasks_count_Set() const{
    return m_tasks_count_isSet;
}

bool OAIQueueStats::is_tasks_count_Valid() const{
    return m_tasks_count_isValid;
}

bool OAIQueueStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concurrent_dispatches_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_execution_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_executed_last_minute_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oldest_estimated_arrival_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tasks_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueueStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
