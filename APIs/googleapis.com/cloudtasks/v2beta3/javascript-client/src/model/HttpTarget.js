/**
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HeaderOverride from './HeaderOverride';
import OAuthToken from './OAuthToken';
import OidcToken from './OidcToken';
import UriOverride from './UriOverride';

/**
 * The HttpTarget model module.
 * @module model/HttpTarget
 * @version v2beta3
 */
class HttpTarget {
    /**
     * Constructs a new <code>HttpTarget</code>.
     * HTTP target. When specified as a Queue, all the tasks with [HttpRequest] will be overridden according to the target.
     * @alias module:model/HttpTarget
     */
    constructor() { 
        
        HttpTarget.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HttpTarget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HttpTarget} obj Optional instance to populate.
     * @return {module:model/HttpTarget} The populated <code>HttpTarget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HttpTarget();

            if (data.hasOwnProperty('headerOverrides')) {
                obj['headerOverrides'] = ApiClient.convertToType(data['headerOverrides'], [HeaderOverride]);
            }
            if (data.hasOwnProperty('httpMethod')) {
                obj['httpMethod'] = ApiClient.convertToType(data['httpMethod'], 'String');
            }
            if (data.hasOwnProperty('oauthToken')) {
                obj['oauthToken'] = OAuthToken.constructFromObject(data['oauthToken']);
            }
            if (data.hasOwnProperty('oidcToken')) {
                obj['oidcToken'] = OidcToken.constructFromObject(data['oidcToken']);
            }
            if (data.hasOwnProperty('uriOverride')) {
                obj['uriOverride'] = UriOverride.constructFromObject(data['uriOverride']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HttpTarget</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HttpTarget</code>.
     */
    static validateJSON(data) {
        if (data['headerOverrides']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['headerOverrides'])) {
                throw new Error("Expected the field `headerOverrides` to be an array in the JSON data but got " + data['headerOverrides']);
            }
            // validate the optional field `headerOverrides` (array)
            for (const item of data['headerOverrides']) {
                HeaderOverride.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['httpMethod'] && !(typeof data['httpMethod'] === 'string' || data['httpMethod'] instanceof String)) {
            throw new Error("Expected the field `httpMethod` to be a primitive type in the JSON string but got " + data['httpMethod']);
        }
        // validate the optional field `oauthToken`
        if (data['oauthToken']) { // data not null
          OAuthToken.validateJSON(data['oauthToken']);
        }
        // validate the optional field `oidcToken`
        if (data['oidcToken']) { // data not null
          OidcToken.validateJSON(data['oidcToken']);
        }
        // validate the optional field `uriOverride`
        if (data['uriOverride']) { // data not null
          UriOverride.validateJSON(data['uriOverride']);
        }

        return true;
    }


}



/**
 * HTTP target headers. This map contains the header field names and values. Headers will be set when running the CreateTask and/or BufferTask. These headers represent a subset of the headers that will be configured for the task's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is: * Several predefined headers, prefixed with \"X-CloudTasks-\", can be used to define properties of the task. * Host: This will be computed by Cloud Tasks and derived from HttpRequest.url. * Content-Length: This will be computed by Cloud Tasks. `Content-Type` won't be set by Cloud Tasks. You can explicitly set `Content-Type` to a media type when the task is created. For example,`Content-Type` can be set to `\"application/octet-stream\"` or `\"application/json\"`. The default value is set to `\"application/json\"`. * User-Agent: This will be set to `\"Google-Cloud-Tasks\"`. Headers which can have multiple values (according to RFC2616) can be specified using comma-separated values. The size of the headers must be less than 80KB. Queue-level headers to override headers of all the tasks in the queue.
 * @member {Array.<module:model/HeaderOverride>} headerOverrides
 */
HttpTarget.prototype['headerOverrides'] = undefined;

/**
 * The HTTP method to use for the request. When specified, it overrides HttpRequest for the task. Note that if the value is set to HttpMethod the HttpRequest of the task will be ignored at execution time.
 * @member {module:model/HttpTarget.HttpMethodEnum} httpMethod
 */
HttpTarget.prototype['httpMethod'] = undefined;

/**
 * @member {module:model/OAuthToken} oauthToken
 */
HttpTarget.prototype['oauthToken'] = undefined;

/**
 * @member {module:model/OidcToken} oidcToken
 */
HttpTarget.prototype['oidcToken'] = undefined;

/**
 * @member {module:model/UriOverride} uriOverride
 */
HttpTarget.prototype['uriOverride'] = undefined;





/**
 * Allowed values for the <code>httpMethod</code> property.
 * @enum {String}
 * @readonly
 */
HttpTarget['HttpMethodEnum'] = {

    /**
     * value: "HTTP_METHOD_UNSPECIFIED"
     * @const
     */
    "HTTP_METHOD_UNSPECIFIED": "HTTP_METHOD_UNSPECIFIED",

    /**
     * value: "POST"
     * @const
     */
    "POST": "POST",

    /**
     * value: "GET"
     * @const
     */
    "GET": "GET",

    /**
     * value: "HEAD"
     * @const
     */
    "HEAD": "HEAD",

    /**
     * value: "PUT"
     * @const
     */
    "PUT": "PUT",

    /**
     * value: "DELETE"
     * @const
     */
    "DELETE": "DELETE",

    /**
     * value: "PATCH"
     * @const
     */
    "PATCH": "PATCH",

    /**
     * value: "OPTIONS"
     * @const
     */
    "OPTIONS": "OPTIONS"
};



export default HttpTarget;

