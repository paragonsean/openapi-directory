/*
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AppEngineRouting;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * App Engine HTTP request. The message defines the HTTP request that is sent to an App Engine app when the task is dispatched. Using AppEngineHttpRequest requires [&#x60;appengine.applications.get&#x60;](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: &#x60;https://www.googleapis.com/auth/cloud-platform&#x60; The task will be delivered to the App Engine app which belongs to the same project as the queue. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and how routing is affected by [dispatch files](https://cloud.google.com/appengine/docs/python/config/dispatchref). Traffic is encrypted during transport and never leaves Google datacenters. Because this traffic is carried over a communication mechanism internal to Google, you cannot explicitly set the protocol (for example, HTTP or HTTPS). The request to the handler, however, will appear to have used the HTTP protocol. The AppEngineRouting used to construct the URL that the task is delivered to can be set at the queue-level or task-level: * If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing. The &#x60;url&#x60; that the task will be sent to is: * &#x60;url &#x3D;&#x60; host &#x60;+&#x60; relative_uri Tasks can be dispatched to secure app handlers, unsecure app handlers, and URIs restricted with [&#x60;login: admin&#x60;](https://cloud.google.com/appengine/docs/standard/python/config/appref). Because tasks are not run as any user, they cannot be dispatched to URIs restricted with [&#x60;login: required&#x60;](https://cloud.google.com/appengine/docs/standard/python/config/appref) Task dispatches also do not follow redirects. The task attempt has succeeded if the app&#39;s request handler returns an HTTP response code in the range [&#x60;200&#x60; - &#x60;299&#x60;]. The task attempt has failed if the app&#39;s handler returns a non-2xx response code or Cloud Tasks does not receive response before the deadline. Failed tasks will be retried according to the retry configuration. &#x60;503&#x60; (Service Unavailable) is considered an App Engine system error instead of an application error and will cause Cloud Tasks&#39; traffic congestion control to temporarily throttle the queue&#39;s dispatches. Unlike other types of task targets, a &#x60;429&#x60; (Too Many Requests) response from an app handler does not cause traffic congestion control to throttle the queue.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:08.664586-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppEngineHttpRequest {
  public static final String SERIALIZED_NAME_APP_ENGINE_ROUTING = "appEngineRouting";
  @SerializedName(SERIALIZED_NAME_APP_ENGINE_ROUTING)
  private AppEngineRouting appEngineRouting;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private byte[] body;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Map<String, String> headers = new HashMap<>();

  /**
   * The HTTP method to use for the request. The default is POST. The app&#39;s request handler for the task&#39;s target URL must be able to handle HTTP requests with this http_method, otherwise the task attempt fails with error code 405 (Method Not Allowed). See [Writing a push task request handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler) and the App Engine documentation for your runtime on [How Requests are Handled](https://cloud.google.com/appengine/docs/standard/python3/how-requests-are-handled).
   */
  @JsonAdapter(HttpMethodEnum.Adapter.class)
  public enum HttpMethodEnum {
    HTTP_METHOD_UNSPECIFIED("HTTP_METHOD_UNSPECIFIED"),
    
    POST("POST"),
    
    GET("GET"),
    
    HEAD("HEAD"),
    
    PUT("PUT"),
    
    DELETE("DELETE"),
    
    PATCH("PATCH"),
    
    OPTIONS("OPTIONS");

    private String value;

    HttpMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HttpMethodEnum fromValue(String value) {
      for (HttpMethodEnum b : HttpMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HttpMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HttpMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HttpMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HttpMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HttpMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HTTP_METHOD = "httpMethod";
  @SerializedName(SERIALIZED_NAME_HTTP_METHOD)
  private HttpMethodEnum httpMethod;

  public static final String SERIALIZED_NAME_RELATIVE_URI = "relativeUri";
  @SerializedName(SERIALIZED_NAME_RELATIVE_URI)
  private String relativeUri;

  public AppEngineHttpRequest() {
  }

  public AppEngineHttpRequest appEngineRouting(AppEngineRouting appEngineRouting) {
    this.appEngineRouting = appEngineRouting;
    return this;
  }

  /**
   * Get appEngineRouting
   * @return appEngineRouting
   */
  @javax.annotation.Nullable
  public AppEngineRouting getAppEngineRouting() {
    return appEngineRouting;
  }

  public void setAppEngineRouting(AppEngineRouting appEngineRouting) {
    this.appEngineRouting = appEngineRouting;
  }


  public AppEngineHttpRequest body(byte[] body) {
    this.body = body;
    return this;
  }

  /**
   * HTTP request body. A request body is allowed only if the HTTP method is POST or PUT. It is an error to set a body on a task with an incompatible HttpMethod.
   * @return body
   */
  @javax.annotation.Nullable
  public byte[] getBody() {
    return body;
  }

  public void setBody(byte[] body) {
    this.body = body;
  }


  public AppEngineHttpRequest headers(Map<String, String> headers) {
    this.headers = headers;
    return this;
  }

  public AppEngineHttpRequest putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

  /**
   * HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. Repeated headers are not supported but a header value can contain commas. Cloud Tasks sets some headers to default values: * &#x60;User-Agent&#x60;: By default, this header is &#x60;\&quot;AppEngine-Google; (+http://code.google.com/appengine)\&quot;&#x60;. This header can be modified, but Cloud Tasks will append &#x60;\&quot;AppEngine-Google; (+http://code.google.com/appengine)\&quot;&#x60; to the modified &#x60;User-Agent&#x60;. If the task has a body, Cloud Tasks sets the following headers: * &#x60;Content-Type&#x60;: By default, the &#x60;Content-Type&#x60; header is set to &#x60;\&quot;application/octet-stream\&quot;&#x60;. The default can be overridden by explicitly setting &#x60;Content-Type&#x60; to a particular media type when the task is created. For example, &#x60;Content-Type&#x60; can be set to &#x60;\&quot;application/json\&quot;&#x60;. * &#x60;Content-Length&#x60;: This is computed by Cloud Tasks. This value is output only. It cannot be changed. The headers below cannot be set or overridden: * &#x60;Host&#x60; * &#x60;X-Google-*&#x60; * &#x60;X-AppEngine-*&#x60; In addition, Cloud Tasks sets some headers when the task is dispatched, such as headers containing information about the task; see [request headers](https://cloud.google.com/tasks/docs/creating-appengine-handlers#reading_request_headers). These headers are set only when the task is dispatched, so they are not visible when the task is returned in a Cloud Tasks response. Although there is no specific limit for the maximum number of headers or the size, there is a limit on the maximum size of the Task. For more information, see the CreateTask documentation.
   * @return headers
   */
  @javax.annotation.Nullable
  public Map<String, String> getHeaders() {
    return headers;
  }

  public void setHeaders(Map<String, String> headers) {
    this.headers = headers;
  }


  public AppEngineHttpRequest httpMethod(HttpMethodEnum httpMethod) {
    this.httpMethod = httpMethod;
    return this;
  }

  /**
   * The HTTP method to use for the request. The default is POST. The app&#39;s request handler for the task&#39;s target URL must be able to handle HTTP requests with this http_method, otherwise the task attempt fails with error code 405 (Method Not Allowed). See [Writing a push task request handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler) and the App Engine documentation for your runtime on [How Requests are Handled](https://cloud.google.com/appengine/docs/standard/python3/how-requests-are-handled).
   * @return httpMethod
   */
  @javax.annotation.Nullable
  public HttpMethodEnum getHttpMethod() {
    return httpMethod;
  }

  public void setHttpMethod(HttpMethodEnum httpMethod) {
    this.httpMethod = httpMethod;
  }


  public AppEngineHttpRequest relativeUri(String relativeUri) {
    this.relativeUri = relativeUri;
    return this;
  }

  /**
   * The relative URI. The relative URI must begin with \&quot;/\&quot; and must be a valid HTTP relative URI. It can contain a path and query string arguments. If the relative URI is empty, then the root path \&quot;/\&quot; will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
   * @return relativeUri
   */
  @javax.annotation.Nullable
  public String getRelativeUri() {
    return relativeUri;
  }

  public void setRelativeUri(String relativeUri) {
    this.relativeUri = relativeUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppEngineHttpRequest appEngineHttpRequest = (AppEngineHttpRequest) o;
    return Objects.equals(this.appEngineRouting, appEngineHttpRequest.appEngineRouting) &&
        Arrays.equals(this.body, appEngineHttpRequest.body) &&
        Objects.equals(this.headers, appEngineHttpRequest.headers) &&
        Objects.equals(this.httpMethod, appEngineHttpRequest.httpMethod) &&
        Objects.equals(this.relativeUri, appEngineHttpRequest.relativeUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appEngineRouting, Arrays.hashCode(body), headers, httpMethod, relativeUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppEngineHttpRequest {\n");
    sb.append("    appEngineRouting: ").append(toIndentedString(appEngineRouting)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    httpMethod: ").append(toIndentedString(httpMethod)).append("\n");
    sb.append("    relativeUri: ").append(toIndentedString(relativeUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appEngineRouting");
    openapiFields.add("body");
    openapiFields.add("headers");
    openapiFields.add("httpMethod");
    openapiFields.add("relativeUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppEngineHttpRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppEngineHttpRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppEngineHttpRequest is not found in the empty JSON string", AppEngineHttpRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppEngineHttpRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppEngineHttpRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appEngineRouting`
      if (jsonObj.get("appEngineRouting") != null && !jsonObj.get("appEngineRouting").isJsonNull()) {
        AppEngineRouting.validateJsonElement(jsonObj.get("appEngineRouting"));
      }
      if ((jsonObj.get("httpMethod") != null && !jsonObj.get("httpMethod").isJsonNull()) && !jsonObj.get("httpMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpMethod").toString()));
      }
      // validate the optional field `httpMethod`
      if (jsonObj.get("httpMethod") != null && !jsonObj.get("httpMethod").isJsonNull()) {
        HttpMethodEnum.validateJsonElement(jsonObj.get("httpMethod"));
      }
      if ((jsonObj.get("relativeUri") != null && !jsonObj.get("relativeUri").isJsonNull()) && !jsonObj.get("relativeUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relativeUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relativeUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppEngineHttpRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppEngineHttpRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppEngineHttpRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppEngineHttpRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AppEngineHttpRequest>() {
           @Override
           public void write(JsonWriter out, AppEngineHttpRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppEngineHttpRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppEngineHttpRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppEngineHttpRequest
   * @throws IOException if the JSON string is invalid with respect to AppEngineHttpRequest
   */
  public static AppEngineHttpRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppEngineHttpRequest.class);
  }

  /**
   * Convert an instance of AppEngineHttpRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

