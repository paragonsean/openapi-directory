/*
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AppEngineHttpRequest;
import org.openapitools.client.model.Attempt;
import org.openapitools.client.model.HttpRequest;
import org.openapitools.client.model.PullMessage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A unit of scheduled work.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:08.664586-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Task {
  public static final String SERIALIZED_NAME_APP_ENGINE_HTTP_REQUEST = "appEngineHttpRequest";
  @SerializedName(SERIALIZED_NAME_APP_ENGINE_HTTP_REQUEST)
  private AppEngineHttpRequest appEngineHttpRequest;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DISPATCH_COUNT = "dispatchCount";
  @SerializedName(SERIALIZED_NAME_DISPATCH_COUNT)
  private Integer dispatchCount;

  public static final String SERIALIZED_NAME_DISPATCH_DEADLINE = "dispatchDeadline";
  @SerializedName(SERIALIZED_NAME_DISPATCH_DEADLINE)
  private String dispatchDeadline;

  public static final String SERIALIZED_NAME_FIRST_ATTEMPT = "firstAttempt";
  @SerializedName(SERIALIZED_NAME_FIRST_ATTEMPT)
  private Attempt firstAttempt;

  public static final String SERIALIZED_NAME_HTTP_REQUEST = "httpRequest";
  @SerializedName(SERIALIZED_NAME_HTTP_REQUEST)
  private HttpRequest httpRequest;

  public static final String SERIALIZED_NAME_LAST_ATTEMPT = "lastAttempt";
  @SerializedName(SERIALIZED_NAME_LAST_ATTEMPT)
  private Attempt lastAttempt;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PULL_MESSAGE = "pullMessage";
  @SerializedName(SERIALIZED_NAME_PULL_MESSAGE)
  private PullMessage pullMessage;

  public static final String SERIALIZED_NAME_RESPONSE_COUNT = "responseCount";
  @SerializedName(SERIALIZED_NAME_RESPONSE_COUNT)
  private Integer responseCount;

  public static final String SERIALIZED_NAME_SCHEDULE_TIME = "scheduleTime";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_TIME)
  private String scheduleTime;

  /**
   * Output only. The view specifies which subset of the Task has been returned.
   */
  @JsonAdapter(ViewEnum.Adapter.class)
  public enum ViewEnum {
    VIEW_UNSPECIFIED("VIEW_UNSPECIFIED"),
    
    BASIC("BASIC"),
    
    FULL("FULL");

    private String value;

    ViewEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViewEnum fromValue(String value) {
      for (ViewEnum b : ViewEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViewEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViewEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViewEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ViewEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIEW = "view";
  @SerializedName(SERIALIZED_NAME_VIEW)
  private ViewEnum view;

  public Task() {
  }

  public Task appEngineHttpRequest(AppEngineHttpRequest appEngineHttpRequest) {
    this.appEngineHttpRequest = appEngineHttpRequest;
    return this;
  }

  /**
   * Get appEngineHttpRequest
   * @return appEngineHttpRequest
   */
  @javax.annotation.Nullable
  public AppEngineHttpRequest getAppEngineHttpRequest() {
    return appEngineHttpRequest;
  }

  public void setAppEngineHttpRequest(AppEngineHttpRequest appEngineHttpRequest) {
    this.appEngineHttpRequest = appEngineHttpRequest;
  }


  public Task createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. The time that the task was created. &#x60;create_time&#x60; will be truncated to the nearest second.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public Task dispatchCount(Integer dispatchCount) {
    this.dispatchCount = dispatchCount;
    return this;
  }

  /**
   * Output only. The number of attempts dispatched. This count includes attempts which have been dispatched but haven&#39;t received a response.
   * @return dispatchCount
   */
  @javax.annotation.Nullable
  public Integer getDispatchCount() {
    return dispatchCount;
  }

  public void setDispatchCount(Integer dispatchCount) {
    this.dispatchCount = dispatchCount;
  }


  public Task dispatchDeadline(String dispatchDeadline) {
    this.dispatchDeadline = dispatchDeadline;
    return this;
  }

  /**
   * The deadline for requests sent to the worker. If the worker does not respond by this deadline then the request is cancelled and the attempt is marked as a &#x60;DEADLINE_EXCEEDED&#x60; failure. Cloud Tasks will retry the task according to the RetryConfig. Note that when the request is cancelled, Cloud Tasks will stop listening for the response, but whether the worker stops processing depends on the worker. For example, if the worker is stuck, it may not react to cancelled requests. The default and maximum values depend on the type of request: * For HTTP tasks, the default is 10 minutes. The deadline must be in the interval [15 seconds, 30 minutes]. * For App Engine tasks, 0 indicates that the request has the default deadline. The default deadline depends on the [scaling type](https://cloud.google.com/appengine/docs/standard/go/how-instances-are-managed#instance_scaling) of the service: 10 minutes for standard apps with automatic scaling, 24 hours for standard apps with manual and basic scaling, and 60 minutes for flex apps. If the request deadline is set, it must be in the interval [15 seconds, 24 hours 15 seconds]. Regardless of the task&#39;s &#x60;dispatch_deadline&#x60;, the app handler will not run for longer than than the service&#39;s timeout. We recommend setting the &#x60;dispatch_deadline&#x60; to at most a few seconds more than the app handler&#39;s timeout. For more information see [Timeouts](https://cloud.google.com/tasks/docs/creating-appengine-handlers#timeouts). The value must be given as a string that indicates the length of time (in seconds) followed by &#x60;s&#x60; (for \&quot;seconds\&quot;). For more information on the format, see the documentation for [Duration](https://protobuf.dev/reference/protobuf/google.protobuf/#duration). &#x60;dispatch_deadline&#x60; will be truncated to the nearest millisecond. The deadline is an approximate deadline.
   * @return dispatchDeadline
   */
  @javax.annotation.Nullable
  public String getDispatchDeadline() {
    return dispatchDeadline;
  }

  public void setDispatchDeadline(String dispatchDeadline) {
    this.dispatchDeadline = dispatchDeadline;
  }


  public Task firstAttempt(Attempt firstAttempt) {
    this.firstAttempt = firstAttempt;
    return this;
  }

  /**
   * Get firstAttempt
   * @return firstAttempt
   */
  @javax.annotation.Nullable
  public Attempt getFirstAttempt() {
    return firstAttempt;
  }

  public void setFirstAttempt(Attempt firstAttempt) {
    this.firstAttempt = firstAttempt;
  }


  public Task httpRequest(HttpRequest httpRequest) {
    this.httpRequest = httpRequest;
    return this;
  }

  /**
   * Get httpRequest
   * @return httpRequest
   */
  @javax.annotation.Nullable
  public HttpRequest getHttpRequest() {
    return httpRequest;
  }

  public void setHttpRequest(HttpRequest httpRequest) {
    this.httpRequest = httpRequest;
  }


  public Task lastAttempt(Attempt lastAttempt) {
    this.lastAttempt = lastAttempt;
    return this;
  }

  /**
   * Get lastAttempt
   * @return lastAttempt
   */
  @javax.annotation.Nullable
  public Attempt getLastAttempt() {
    return lastAttempt;
  }

  public void setLastAttempt(Attempt lastAttempt) {
    this.lastAttempt = lastAttempt;
  }


  public Task name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Optionally caller-specified in CreateTask. The task name. The task name must have the following format: &#x60;projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID&#x60; * &#x60;PROJECT_ID&#x60; can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * &#x60;LOCATION_ID&#x60; is the canonical ID for the task&#39;s location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * &#x60;QUEUE_ID&#x60; can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * &#x60;TASK_ID&#x60; can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Task pullMessage(PullMessage pullMessage) {
    this.pullMessage = pullMessage;
    return this;
  }

  /**
   * Get pullMessage
   * @return pullMessage
   */
  @javax.annotation.Nullable
  public PullMessage getPullMessage() {
    return pullMessage;
  }

  public void setPullMessage(PullMessage pullMessage) {
    this.pullMessage = pullMessage;
  }


  public Task responseCount(Integer responseCount) {
    this.responseCount = responseCount;
    return this;
  }

  /**
   * Output only. The number of attempts which have received a response.
   * @return responseCount
   */
  @javax.annotation.Nullable
  public Integer getResponseCount() {
    return responseCount;
  }

  public void setResponseCount(Integer responseCount) {
    this.responseCount = responseCount;
  }


  public Task scheduleTime(String scheduleTime) {
    this.scheduleTime = scheduleTime;
    return this;
  }

  /**
   * The time when the task is scheduled to be attempted. For App Engine queues, this is when the task will be attempted or retried. &#x60;schedule_time&#x60; will be truncated to the nearest microsecond.
   * @return scheduleTime
   */
  @javax.annotation.Nullable
  public String getScheduleTime() {
    return scheduleTime;
  }

  public void setScheduleTime(String scheduleTime) {
    this.scheduleTime = scheduleTime;
  }


  public Task view(ViewEnum view) {
    this.view = view;
    return this;
  }

  /**
   * Output only. The view specifies which subset of the Task has been returned.
   * @return view
   */
  @javax.annotation.Nullable
  public ViewEnum getView() {
    return view;
  }

  public void setView(ViewEnum view) {
    this.view = view;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Task task = (Task) o;
    return Objects.equals(this.appEngineHttpRequest, task.appEngineHttpRequest) &&
        Objects.equals(this.createTime, task.createTime) &&
        Objects.equals(this.dispatchCount, task.dispatchCount) &&
        Objects.equals(this.dispatchDeadline, task.dispatchDeadline) &&
        Objects.equals(this.firstAttempt, task.firstAttempt) &&
        Objects.equals(this.httpRequest, task.httpRequest) &&
        Objects.equals(this.lastAttempt, task.lastAttempt) &&
        Objects.equals(this.name, task.name) &&
        Objects.equals(this.pullMessage, task.pullMessage) &&
        Objects.equals(this.responseCount, task.responseCount) &&
        Objects.equals(this.scheduleTime, task.scheduleTime) &&
        Objects.equals(this.view, task.view);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appEngineHttpRequest, createTime, dispatchCount, dispatchDeadline, firstAttempt, httpRequest, lastAttempt, name, pullMessage, responseCount, scheduleTime, view);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Task {\n");
    sb.append("    appEngineHttpRequest: ").append(toIndentedString(appEngineHttpRequest)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    dispatchCount: ").append(toIndentedString(dispatchCount)).append("\n");
    sb.append("    dispatchDeadline: ").append(toIndentedString(dispatchDeadline)).append("\n");
    sb.append("    firstAttempt: ").append(toIndentedString(firstAttempt)).append("\n");
    sb.append("    httpRequest: ").append(toIndentedString(httpRequest)).append("\n");
    sb.append("    lastAttempt: ").append(toIndentedString(lastAttempt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pullMessage: ").append(toIndentedString(pullMessage)).append("\n");
    sb.append("    responseCount: ").append(toIndentedString(responseCount)).append("\n");
    sb.append("    scheduleTime: ").append(toIndentedString(scheduleTime)).append("\n");
    sb.append("    view: ").append(toIndentedString(view)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appEngineHttpRequest");
    openapiFields.add("createTime");
    openapiFields.add("dispatchCount");
    openapiFields.add("dispatchDeadline");
    openapiFields.add("firstAttempt");
    openapiFields.add("httpRequest");
    openapiFields.add("lastAttempt");
    openapiFields.add("name");
    openapiFields.add("pullMessage");
    openapiFields.add("responseCount");
    openapiFields.add("scheduleTime");
    openapiFields.add("view");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Task
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Task.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Task is not found in the empty JSON string", Task.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Task.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Task` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appEngineHttpRequest`
      if (jsonObj.get("appEngineHttpRequest") != null && !jsonObj.get("appEngineHttpRequest").isJsonNull()) {
        AppEngineHttpRequest.validateJsonElement(jsonObj.get("appEngineHttpRequest"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("dispatchDeadline") != null && !jsonObj.get("dispatchDeadline").isJsonNull()) && !jsonObj.get("dispatchDeadline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dispatchDeadline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dispatchDeadline").toString()));
      }
      // validate the optional field `firstAttempt`
      if (jsonObj.get("firstAttempt") != null && !jsonObj.get("firstAttempt").isJsonNull()) {
        Attempt.validateJsonElement(jsonObj.get("firstAttempt"));
      }
      // validate the optional field `httpRequest`
      if (jsonObj.get("httpRequest") != null && !jsonObj.get("httpRequest").isJsonNull()) {
        HttpRequest.validateJsonElement(jsonObj.get("httpRequest"));
      }
      // validate the optional field `lastAttempt`
      if (jsonObj.get("lastAttempt") != null && !jsonObj.get("lastAttempt").isJsonNull()) {
        Attempt.validateJsonElement(jsonObj.get("lastAttempt"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `pullMessage`
      if (jsonObj.get("pullMessage") != null && !jsonObj.get("pullMessage").isJsonNull()) {
        PullMessage.validateJsonElement(jsonObj.get("pullMessage"));
      }
      if ((jsonObj.get("scheduleTime") != null && !jsonObj.get("scheduleTime").isJsonNull()) && !jsonObj.get("scheduleTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduleTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduleTime").toString()));
      }
      if ((jsonObj.get("view") != null && !jsonObj.get("view").isJsonNull()) && !jsonObj.get("view").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `view` to be a primitive type in the JSON string but got `%s`", jsonObj.get("view").toString()));
      }
      // validate the optional field `view`
      if (jsonObj.get("view") != null && !jsonObj.get("view").isJsonNull()) {
        ViewEnum.validateJsonElement(jsonObj.get("view"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Task.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Task' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Task> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Task.class));

       return (TypeAdapter<T>) new TypeAdapter<Task>() {
           @Override
           public void write(JsonWriter out, Task value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Task read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Task given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Task
   * @throws IOException if the JSON string is invalid with respect to Task
   */
  public static Task fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Task.class);
  }

  /**
   * Convert an instance of Task to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

