/*
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for forcing a task to run now using RunTask.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:08.664586-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RunTaskRequest {
  /**
   * The response_view specifies which subset of the Task will be returned. By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains. Authorization for FULL requires &#x60;cloudtasks.tasks.fullView&#x60; [Google IAM](https://cloud.google.com/iam/) permission on the Task resource.
   */
  @JsonAdapter(ResponseViewEnum.Adapter.class)
  public enum ResponseViewEnum {
    VIEW_UNSPECIFIED("VIEW_UNSPECIFIED"),
    
    BASIC("BASIC"),
    
    FULL("FULL");

    private String value;

    ResponseViewEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResponseViewEnum fromValue(String value) {
      for (ResponseViewEnum b : ResponseViewEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResponseViewEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResponseViewEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResponseViewEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResponseViewEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResponseViewEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESPONSE_VIEW = "responseView";
  @SerializedName(SERIALIZED_NAME_RESPONSE_VIEW)
  private ResponseViewEnum responseView;

  public RunTaskRequest() {
  }

  public RunTaskRequest responseView(ResponseViewEnum responseView) {
    this.responseView = responseView;
    return this;
  }

  /**
   * The response_view specifies which subset of the Task will be returned. By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains. Authorization for FULL requires &#x60;cloudtasks.tasks.fullView&#x60; [Google IAM](https://cloud.google.com/iam/) permission on the Task resource.
   * @return responseView
   */
  @javax.annotation.Nullable
  public ResponseViewEnum getResponseView() {
    return responseView;
  }

  public void setResponseView(ResponseViewEnum responseView) {
    this.responseView = responseView;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunTaskRequest runTaskRequest = (RunTaskRequest) o;
    return Objects.equals(this.responseView, runTaskRequest.responseView);
  }

  @Override
  public int hashCode() {
    return Objects.hash(responseView);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunTaskRequest {\n");
    sb.append("    responseView: ").append(toIndentedString(responseView)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("responseView");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunTaskRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunTaskRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunTaskRequest is not found in the empty JSON string", RunTaskRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunTaskRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunTaskRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("responseView") != null && !jsonObj.get("responseView").isJsonNull()) && !jsonObj.get("responseView").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseView` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseView").toString()));
      }
      // validate the optional field `responseView`
      if (jsonObj.get("responseView") != null && !jsonObj.get("responseView").isJsonNull()) {
        ResponseViewEnum.validateJsonElement(jsonObj.get("responseView"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunTaskRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunTaskRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunTaskRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunTaskRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RunTaskRequest>() {
           @Override
           public void write(JsonWriter out, RunTaskRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunTaskRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunTaskRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunTaskRequest
   * @throws IOException if the JSON string is invalid with respect to RunTaskRequest
   */
  public static RunTaskRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunTaskRequest.class);
  }

  /**
   * Convert an instance of RunTaskRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

