/*
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HeaderOverride;
import org.openapitools.client.model.OAuthToken;
import org.openapitools.client.model.OidcToken;
import org.openapitools.client.model.UriOverride;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HTTP target. When specified as a Queue, all the tasks with [HttpRequest] will be overridden according to the target.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:08.664586-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HttpTarget {
  public static final String SERIALIZED_NAME_HEADER_OVERRIDES = "headerOverrides";
  @SerializedName(SERIALIZED_NAME_HEADER_OVERRIDES)
  private List<HeaderOverride> headerOverrides = new ArrayList<>();

  /**
   * The HTTP method to use for the request. When specified, it overrides HttpRequest for the task. Note that if the value is set to HttpMethod the HttpRequest of the task will be ignored at execution time.
   */
  @JsonAdapter(HttpMethodEnum.Adapter.class)
  public enum HttpMethodEnum {
    HTTP_METHOD_UNSPECIFIED("HTTP_METHOD_UNSPECIFIED"),
    
    POST("POST"),
    
    GET("GET"),
    
    HEAD("HEAD"),
    
    PUT("PUT"),
    
    DELETE("DELETE"),
    
    PATCH("PATCH"),
    
    OPTIONS("OPTIONS");

    private String value;

    HttpMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HttpMethodEnum fromValue(String value) {
      for (HttpMethodEnum b : HttpMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HttpMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HttpMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HttpMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HttpMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HttpMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HTTP_METHOD = "httpMethod";
  @SerializedName(SERIALIZED_NAME_HTTP_METHOD)
  private HttpMethodEnum httpMethod;

  public static final String SERIALIZED_NAME_OAUTH_TOKEN = "oauthToken";
  @SerializedName(SERIALIZED_NAME_OAUTH_TOKEN)
  private OAuthToken oauthToken;

  public static final String SERIALIZED_NAME_OIDC_TOKEN = "oidcToken";
  @SerializedName(SERIALIZED_NAME_OIDC_TOKEN)
  private OidcToken oidcToken;

  public static final String SERIALIZED_NAME_URI_OVERRIDE = "uriOverride";
  @SerializedName(SERIALIZED_NAME_URI_OVERRIDE)
  private UriOverride uriOverride;

  public HttpTarget() {
  }

  public HttpTarget headerOverrides(List<HeaderOverride> headerOverrides) {
    this.headerOverrides = headerOverrides;
    return this;
  }

  public HttpTarget addHeaderOverridesItem(HeaderOverride headerOverridesItem) {
    if (this.headerOverrides == null) {
      this.headerOverrides = new ArrayList<>();
    }
    this.headerOverrides.add(headerOverridesItem);
    return this;
  }

  /**
   * HTTP target headers. This map contains the header field names and values. Headers will be set when running the CreateTask and/or BufferTask. These headers represent a subset of the headers that will be configured for the task&#39;s HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is: * Several predefined headers, prefixed with \&quot;X-CloudTasks-\&quot;, can be used to define properties of the task. * Host: This will be computed by Cloud Tasks and derived from HttpRequest.url. * Content-Length: This will be computed by Cloud Tasks. &#x60;Content-Type&#x60; won&#39;t be set by Cloud Tasks. You can explicitly set &#x60;Content-Type&#x60; to a media type when the task is created. For example,&#x60;Content-Type&#x60; can be set to &#x60;\&quot;application/octet-stream\&quot;&#x60; or &#x60;\&quot;application/json\&quot;&#x60;. The default value is set to &#x60;\&quot;application/json\&quot;&#x60;. * User-Agent: This will be set to &#x60;\&quot;Google-Cloud-Tasks\&quot;&#x60;. Headers which can have multiple values (according to RFC2616) can be specified using comma-separated values. The size of the headers must be less than 80KB. Queue-level headers to override headers of all the tasks in the queue.
   * @return headerOverrides
   */
  @javax.annotation.Nullable
  public List<HeaderOverride> getHeaderOverrides() {
    return headerOverrides;
  }

  public void setHeaderOverrides(List<HeaderOverride> headerOverrides) {
    this.headerOverrides = headerOverrides;
  }


  public HttpTarget httpMethod(HttpMethodEnum httpMethod) {
    this.httpMethod = httpMethod;
    return this;
  }

  /**
   * The HTTP method to use for the request. When specified, it overrides HttpRequest for the task. Note that if the value is set to HttpMethod the HttpRequest of the task will be ignored at execution time.
   * @return httpMethod
   */
  @javax.annotation.Nullable
  public HttpMethodEnum getHttpMethod() {
    return httpMethod;
  }

  public void setHttpMethod(HttpMethodEnum httpMethod) {
    this.httpMethod = httpMethod;
  }


  public HttpTarget oauthToken(OAuthToken oauthToken) {
    this.oauthToken = oauthToken;
    return this;
  }

  /**
   * Get oauthToken
   * @return oauthToken
   */
  @javax.annotation.Nullable
  public OAuthToken getOauthToken() {
    return oauthToken;
  }

  public void setOauthToken(OAuthToken oauthToken) {
    this.oauthToken = oauthToken;
  }


  public HttpTarget oidcToken(OidcToken oidcToken) {
    this.oidcToken = oidcToken;
    return this;
  }

  /**
   * Get oidcToken
   * @return oidcToken
   */
  @javax.annotation.Nullable
  public OidcToken getOidcToken() {
    return oidcToken;
  }

  public void setOidcToken(OidcToken oidcToken) {
    this.oidcToken = oidcToken;
  }


  public HttpTarget uriOverride(UriOverride uriOverride) {
    this.uriOverride = uriOverride;
    return this;
  }

  /**
   * Get uriOverride
   * @return uriOverride
   */
  @javax.annotation.Nullable
  public UriOverride getUriOverride() {
    return uriOverride;
  }

  public void setUriOverride(UriOverride uriOverride) {
    this.uriOverride = uriOverride;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpTarget httpTarget = (HttpTarget) o;
    return Objects.equals(this.headerOverrides, httpTarget.headerOverrides) &&
        Objects.equals(this.httpMethod, httpTarget.httpMethod) &&
        Objects.equals(this.oauthToken, httpTarget.oauthToken) &&
        Objects.equals(this.oidcToken, httpTarget.oidcToken) &&
        Objects.equals(this.uriOverride, httpTarget.uriOverride);
  }

  @Override
  public int hashCode() {
    return Objects.hash(headerOverrides, httpMethod, oauthToken, oidcToken, uriOverride);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpTarget {\n");
    sb.append("    headerOverrides: ").append(toIndentedString(headerOverrides)).append("\n");
    sb.append("    httpMethod: ").append(toIndentedString(httpMethod)).append("\n");
    sb.append("    oauthToken: ").append(toIndentedString(oauthToken)).append("\n");
    sb.append("    oidcToken: ").append(toIndentedString(oidcToken)).append("\n");
    sb.append("    uriOverride: ").append(toIndentedString(uriOverride)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("headerOverrides");
    openapiFields.add("httpMethod");
    openapiFields.add("oauthToken");
    openapiFields.add("oidcToken");
    openapiFields.add("uriOverride");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HttpTarget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HttpTarget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HttpTarget is not found in the empty JSON string", HttpTarget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HttpTarget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HttpTarget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("headerOverrides") != null && !jsonObj.get("headerOverrides").isJsonNull()) {
        JsonArray jsonArrayheaderOverrides = jsonObj.getAsJsonArray("headerOverrides");
        if (jsonArrayheaderOverrides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("headerOverrides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `headerOverrides` to be an array in the JSON string but got `%s`", jsonObj.get("headerOverrides").toString()));
          }

          // validate the optional field `headerOverrides` (array)
          for (int i = 0; i < jsonArrayheaderOverrides.size(); i++) {
            HeaderOverride.validateJsonElement(jsonArrayheaderOverrides.get(i));
          };
        }
      }
      if ((jsonObj.get("httpMethod") != null && !jsonObj.get("httpMethod").isJsonNull()) && !jsonObj.get("httpMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpMethod").toString()));
      }
      // validate the optional field `httpMethod`
      if (jsonObj.get("httpMethod") != null && !jsonObj.get("httpMethod").isJsonNull()) {
        HttpMethodEnum.validateJsonElement(jsonObj.get("httpMethod"));
      }
      // validate the optional field `oauthToken`
      if (jsonObj.get("oauthToken") != null && !jsonObj.get("oauthToken").isJsonNull()) {
        OAuthToken.validateJsonElement(jsonObj.get("oauthToken"));
      }
      // validate the optional field `oidcToken`
      if (jsonObj.get("oidcToken") != null && !jsonObj.get("oidcToken").isJsonNull()) {
        OidcToken.validateJsonElement(jsonObj.get("oidcToken"));
      }
      // validate the optional field `uriOverride`
      if (jsonObj.get("uriOverride") != null && !jsonObj.get("uriOverride").isJsonNull()) {
        UriOverride.validateJsonElement(jsonObj.get("uriOverride"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HttpTarget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HttpTarget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HttpTarget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HttpTarget.class));

       return (TypeAdapter<T>) new TypeAdapter<HttpTarget>() {
           @Override
           public void write(JsonWriter out, HttpTarget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HttpTarget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HttpTarget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HttpTarget
   * @throws IOException if the JSON string is invalid with respect to HttpTarget
   */
  public static HttpTarget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HttpTarget.class);
  }

  /**
   * Convert an instance of HttpTarget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

