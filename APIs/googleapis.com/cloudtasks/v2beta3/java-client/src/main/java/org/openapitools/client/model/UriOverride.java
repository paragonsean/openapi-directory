/*
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PathOverride;
import org.openapitools.client.model.QueryOverride;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * URI Override. When specified, all the HTTP tasks inside the queue will be partially or fully overridden depending on the configured values.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:08.664586-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UriOverride {
  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_PATH_OVERRIDE = "pathOverride";
  @SerializedName(SERIALIZED_NAME_PATH_OVERRIDE)
  private PathOverride pathOverride;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private String port;

  public static final String SERIALIZED_NAME_QUERY_OVERRIDE = "queryOverride";
  @SerializedName(SERIALIZED_NAME_QUERY_OVERRIDE)
  private QueryOverride queryOverride;

  /**
   * Scheme override. When specified, the task URI scheme is replaced by the provided value (HTTP or HTTPS).
   */
  @JsonAdapter(SchemeEnum.Adapter.class)
  public enum SchemeEnum {
    SCHEME_UNSPECIFIED("SCHEME_UNSPECIFIED"),
    
    HTTP("HTTP"),
    
    HTTPS("HTTPS");

    private String value;

    SchemeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SchemeEnum fromValue(String value) {
      for (SchemeEnum b : SchemeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SchemeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SchemeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SchemeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SchemeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SchemeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCHEME = "scheme";
  @SerializedName(SERIALIZED_NAME_SCHEME)
  private SchemeEnum scheme;

  /**
   * URI Override Enforce Mode When specified, determines the Target UriOverride mode. If not specified, it defaults to ALWAYS.
   */
  @JsonAdapter(UriOverrideEnforceModeEnum.Adapter.class)
  public enum UriOverrideEnforceModeEnum {
    URI_OVERRIDE_ENFORCE_MODE_UNSPECIFIED("URI_OVERRIDE_ENFORCE_MODE_UNSPECIFIED"),
    
    IF_NOT_EXISTS("IF_NOT_EXISTS"),
    
    ALWAYS("ALWAYS");

    private String value;

    UriOverrideEnforceModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UriOverrideEnforceModeEnum fromValue(String value) {
      for (UriOverrideEnforceModeEnum b : UriOverrideEnforceModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UriOverrideEnforceModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UriOverrideEnforceModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UriOverrideEnforceModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UriOverrideEnforceModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UriOverrideEnforceModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_URI_OVERRIDE_ENFORCE_MODE = "uriOverrideEnforceMode";
  @SerializedName(SERIALIZED_NAME_URI_OVERRIDE_ENFORCE_MODE)
  private UriOverrideEnforceModeEnum uriOverrideEnforceMode;

  public UriOverride() {
  }

  public UriOverride host(String host) {
    this.host = host;
    return this;
  }

  /**
   * Host override. When specified, replaces the host part of the task URL. For example, if the task URL is \&quot;https://www.google.com,\&quot; and host value is set to \&quot;example.net\&quot;, the overridden URI will be changed to \&quot;https://example.net.\&quot; Host value cannot be an empty string (INVALID_ARGUMENT).
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public UriOverride pathOverride(PathOverride pathOverride) {
    this.pathOverride = pathOverride;
    return this;
  }

  /**
   * Get pathOverride
   * @return pathOverride
   */
  @javax.annotation.Nullable
  public PathOverride getPathOverride() {
    return pathOverride;
  }

  public void setPathOverride(PathOverride pathOverride) {
    this.pathOverride = pathOverride;
  }


  public UriOverride port(String port) {
    this.port = port;
    return this;
  }

  /**
   * Port override. When specified, replaces the port part of the task URI. For instance, for a URI http://www.google.com/foo and port&#x3D;123, the overridden URI becomes http://www.google.com:123/foo. Note that the port value must be a positive integer. Setting the port to 0 (Zero) clears the URI port.
   * @return port
   */
  @javax.annotation.Nullable
  public String getPort() {
    return port;
  }

  public void setPort(String port) {
    this.port = port;
  }


  public UriOverride queryOverride(QueryOverride queryOverride) {
    this.queryOverride = queryOverride;
    return this;
  }

  /**
   * Get queryOverride
   * @return queryOverride
   */
  @javax.annotation.Nullable
  public QueryOverride getQueryOverride() {
    return queryOverride;
  }

  public void setQueryOverride(QueryOverride queryOverride) {
    this.queryOverride = queryOverride;
  }


  public UriOverride scheme(SchemeEnum scheme) {
    this.scheme = scheme;
    return this;
  }

  /**
   * Scheme override. When specified, the task URI scheme is replaced by the provided value (HTTP or HTTPS).
   * @return scheme
   */
  @javax.annotation.Nullable
  public SchemeEnum getScheme() {
    return scheme;
  }

  public void setScheme(SchemeEnum scheme) {
    this.scheme = scheme;
  }


  public UriOverride uriOverrideEnforceMode(UriOverrideEnforceModeEnum uriOverrideEnforceMode) {
    this.uriOverrideEnforceMode = uriOverrideEnforceMode;
    return this;
  }

  /**
   * URI Override Enforce Mode When specified, determines the Target UriOverride mode. If not specified, it defaults to ALWAYS.
   * @return uriOverrideEnforceMode
   */
  @javax.annotation.Nullable
  public UriOverrideEnforceModeEnum getUriOverrideEnforceMode() {
    return uriOverrideEnforceMode;
  }

  public void setUriOverrideEnforceMode(UriOverrideEnforceModeEnum uriOverrideEnforceMode) {
    this.uriOverrideEnforceMode = uriOverrideEnforceMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UriOverride uriOverride = (UriOverride) o;
    return Objects.equals(this.host, uriOverride.host) &&
        Objects.equals(this.pathOverride, uriOverride.pathOverride) &&
        Objects.equals(this.port, uriOverride.port) &&
        Objects.equals(this.queryOverride, uriOverride.queryOverride) &&
        Objects.equals(this.scheme, uriOverride.scheme) &&
        Objects.equals(this.uriOverrideEnforceMode, uriOverride.uriOverrideEnforceMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(host, pathOverride, port, queryOverride, scheme, uriOverrideEnforceMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UriOverride {\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    pathOverride: ").append(toIndentedString(pathOverride)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    queryOverride: ").append(toIndentedString(queryOverride)).append("\n");
    sb.append("    scheme: ").append(toIndentedString(scheme)).append("\n");
    sb.append("    uriOverrideEnforceMode: ").append(toIndentedString(uriOverrideEnforceMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("host");
    openapiFields.add("pathOverride");
    openapiFields.add("port");
    openapiFields.add("queryOverride");
    openapiFields.add("scheme");
    openapiFields.add("uriOverrideEnforceMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UriOverride
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UriOverride.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UriOverride is not found in the empty JSON string", UriOverride.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UriOverride.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UriOverride` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      // validate the optional field `pathOverride`
      if (jsonObj.get("pathOverride") != null && !jsonObj.get("pathOverride").isJsonNull()) {
        PathOverride.validateJsonElement(jsonObj.get("pathOverride"));
      }
      if ((jsonObj.get("port") != null && !jsonObj.get("port").isJsonNull()) && !jsonObj.get("port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("port").toString()));
      }
      // validate the optional field `queryOverride`
      if (jsonObj.get("queryOverride") != null && !jsonObj.get("queryOverride").isJsonNull()) {
        QueryOverride.validateJsonElement(jsonObj.get("queryOverride"));
      }
      if ((jsonObj.get("scheme") != null && !jsonObj.get("scheme").isJsonNull()) && !jsonObj.get("scheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheme").toString()));
      }
      // validate the optional field `scheme`
      if (jsonObj.get("scheme") != null && !jsonObj.get("scheme").isJsonNull()) {
        SchemeEnum.validateJsonElement(jsonObj.get("scheme"));
      }
      if ((jsonObj.get("uriOverrideEnforceMode") != null && !jsonObj.get("uriOverrideEnforceMode").isJsonNull()) && !jsonObj.get("uriOverrideEnforceMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uriOverrideEnforceMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uriOverrideEnforceMode").toString()));
      }
      // validate the optional field `uriOverrideEnforceMode`
      if (jsonObj.get("uriOverrideEnforceMode") != null && !jsonObj.get("uriOverrideEnforceMode").isJsonNull()) {
        UriOverrideEnforceModeEnum.validateJsonElement(jsonObj.get("uriOverrideEnforceMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UriOverride.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UriOverride' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UriOverride> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UriOverride.class));

       return (TypeAdapter<T>) new TypeAdapter<UriOverride>() {
           @Override
           public void write(JsonWriter out, UriOverride value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UriOverride read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UriOverride given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UriOverride
   * @throws IOException if the JSON string is invalid with respect to UriOverride
   */
  public static UriOverride fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UriOverride.class);
  }

  /**
   * Convert an instance of UriOverride to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

