/*
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.OAuthToken;
import org.openapitools.client.model.OidcToken;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HTTP request. The task will be pushed to the worker as an HTTP request. If the worker or the redirected worker acknowledges the task by returning a successful HTTP response code ([&#x60;200&#x60; - &#x60;299&#x60;]), the task will be removed from the queue. If any other HTTP response code is returned or no response is received, the task will be retried according to the following: * User-specified throttling: retry configuration, rate limits, and the queue&#39;s state. * System throttling: To prevent the worker from overloading, Cloud Tasks may temporarily reduce the queue&#39;s effective rate. User-specified settings will not be changed. System throttling happens because: * Cloud Tasks backs off on all errors. Normally the backoff specified in rate limits will be used. But if the worker returns &#x60;429&#x60; (Too Many Requests), &#x60;503&#x60; (Service Unavailable), or the rate of errors is high, Cloud Tasks will use a higher backoff rate. The retry specified in the &#x60;Retry-After&#x60; HTTP response header is considered. * To prevent traffic spikes and to smooth sudden increases in traffic, dispatches ramp up slowly when the queue is newly created or idle and if large numbers of tasks suddenly become available to dispatch (due to spikes in create task rates, the queue being unpaused, or many tasks that are scheduled at the same time).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:12.281691-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HttpRequest {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private byte[] body;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Map<String, String> headers = new HashMap<>();

  /**
   * The HTTP method to use for the request. The default is POST.
   */
  @JsonAdapter(HttpMethodEnum.Adapter.class)
  public enum HttpMethodEnum {
    HTTP_METHOD_UNSPECIFIED("HTTP_METHOD_UNSPECIFIED"),
    
    POST("POST"),
    
    GET("GET"),
    
    HEAD("HEAD"),
    
    PUT("PUT"),
    
    DELETE("DELETE"),
    
    PATCH("PATCH"),
    
    OPTIONS("OPTIONS");

    private String value;

    HttpMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HttpMethodEnum fromValue(String value) {
      for (HttpMethodEnum b : HttpMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HttpMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HttpMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HttpMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HttpMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HttpMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HTTP_METHOD = "httpMethod";
  @SerializedName(SERIALIZED_NAME_HTTP_METHOD)
  private HttpMethodEnum httpMethod;

  public static final String SERIALIZED_NAME_OAUTH_TOKEN = "oauthToken";
  @SerializedName(SERIALIZED_NAME_OAUTH_TOKEN)
  private OAuthToken oauthToken;

  public static final String SERIALIZED_NAME_OIDC_TOKEN = "oidcToken";
  @SerializedName(SERIALIZED_NAME_OIDC_TOKEN)
  private OidcToken oidcToken;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public HttpRequest() {
  }

  public HttpRequest body(byte[] body) {
    this.body = body;
    return this;
  }

  /**
   * HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a task with an incompatible HttpMethod.
   * @return body
   */
  @javax.annotation.Nullable
  public byte[] getBody() {
    return body;
  }

  public void setBody(byte[] body) {
    this.body = body;
  }


  public HttpRequest headers(Map<String, String> headers) {
    this.headers = headers;
    return this;
  }

  public HttpRequest putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

  /**
   * HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. These headers represent a subset of the headers that will accompany the task&#39;s HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is: * Host: This will be computed by Cloud Tasks and derived from HttpRequest.url. * Content-Length: This will be computed by Cloud Tasks. * User-Agent: This will be set to &#x60;\&quot;Google-Cloud-Tasks\&quot;&#x60;. * &#x60;X-Google-*&#x60;: Google use only. * &#x60;X-AppEngine-*&#x60;: Google use only. &#x60;Content-Type&#x60; won&#39;t be set by Cloud Tasks. You can explicitly set &#x60;Content-Type&#x60; to a media type when the task is created. For example, &#x60;Content-Type&#x60; can be set to &#x60;\&quot;application/octet-stream\&quot;&#x60; or &#x60;\&quot;application/json\&quot;&#x60;. Headers which can have multiple values (according to RFC2616) can be specified using comma-separated values. The size of the headers must be less than 80KB.
   * @return headers
   */
  @javax.annotation.Nullable
  public Map<String, String> getHeaders() {
    return headers;
  }

  public void setHeaders(Map<String, String> headers) {
    this.headers = headers;
  }


  public HttpRequest httpMethod(HttpMethodEnum httpMethod) {
    this.httpMethod = httpMethod;
    return this;
  }

  /**
   * The HTTP method to use for the request. The default is POST.
   * @return httpMethod
   */
  @javax.annotation.Nullable
  public HttpMethodEnum getHttpMethod() {
    return httpMethod;
  }

  public void setHttpMethod(HttpMethodEnum httpMethod) {
    this.httpMethod = httpMethod;
  }


  public HttpRequest oauthToken(OAuthToken oauthToken) {
    this.oauthToken = oauthToken;
    return this;
  }

  /**
   * Get oauthToken
   * @return oauthToken
   */
  @javax.annotation.Nullable
  public OAuthToken getOauthToken() {
    return oauthToken;
  }

  public void setOauthToken(OAuthToken oauthToken) {
    this.oauthToken = oauthToken;
  }


  public HttpRequest oidcToken(OidcToken oidcToken) {
    this.oidcToken = oidcToken;
    return this;
  }

  /**
   * Get oidcToken
   * @return oidcToken
   */
  @javax.annotation.Nullable
  public OidcToken getOidcToken() {
    return oidcToken;
  }

  public void setOidcToken(OidcToken oidcToken) {
    this.oidcToken = oidcToken;
  }


  public HttpRequest url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Required. The full url path that the request will be sent to. This string must begin with either \&quot;http://\&quot; or \&quot;https://\&quot;. Some examples are: &#x60;http://acme.com&#x60; and &#x60;https://acme.com/sales:8080&#x60;. Cloud Tasks will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding. The &#x60;Location&#x60; header response from a redirect response [&#x60;300&#x60; - &#x60;399&#x60;] may be followed. The redirect is not counted as a separate attempt.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpRequest httpRequest = (HttpRequest) o;
    return Arrays.equals(this.body, httpRequest.body) &&
        Objects.equals(this.headers, httpRequest.headers) &&
        Objects.equals(this.httpMethod, httpRequest.httpMethod) &&
        Objects.equals(this.oauthToken, httpRequest.oauthToken) &&
        Objects.equals(this.oidcToken, httpRequest.oidcToken) &&
        Objects.equals(this.url, httpRequest.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(body), headers, httpMethod, oauthToken, oidcToken, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpRequest {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    httpMethod: ").append(toIndentedString(httpMethod)).append("\n");
    sb.append("    oauthToken: ").append(toIndentedString(oauthToken)).append("\n");
    sb.append("    oidcToken: ").append(toIndentedString(oidcToken)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("headers");
    openapiFields.add("httpMethod");
    openapiFields.add("oauthToken");
    openapiFields.add("oidcToken");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HttpRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HttpRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HttpRequest is not found in the empty JSON string", HttpRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HttpRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HttpRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("httpMethod") != null && !jsonObj.get("httpMethod").isJsonNull()) && !jsonObj.get("httpMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpMethod").toString()));
      }
      // validate the optional field `httpMethod`
      if (jsonObj.get("httpMethod") != null && !jsonObj.get("httpMethod").isJsonNull()) {
        HttpMethodEnum.validateJsonElement(jsonObj.get("httpMethod"));
      }
      // validate the optional field `oauthToken`
      if (jsonObj.get("oauthToken") != null && !jsonObj.get("oauthToken").isJsonNull()) {
        OAuthToken.validateJsonElement(jsonObj.get("oauthToken"));
      }
      // validate the optional field `oidcToken`
      if (jsonObj.get("oidcToken") != null && !jsonObj.get("oidcToken").isJsonNull()) {
        OidcToken.validateJsonElement(jsonObj.get("oidcToken"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HttpRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HttpRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HttpRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HttpRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<HttpRequest>() {
           @Override
           public void write(JsonWriter out, HttpRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HttpRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HttpRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HttpRequest
   * @throws IOException if the JSON string is invalid with respect to HttpRequest
   */
  public static HttpRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HttpRequest.class);
  }

  /**
   * Convert an instance of HttpRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

