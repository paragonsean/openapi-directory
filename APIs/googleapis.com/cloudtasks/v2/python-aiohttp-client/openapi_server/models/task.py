# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_engine_http_request import AppEngineHttpRequest
from openapi_server.models.attempt import Attempt
from openapi_server.models.http_request import HttpRequest
from openapi_server import util


class Task(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_engine_http_request: AppEngineHttpRequest=None, create_time: str=None, dispatch_count: int=None, dispatch_deadline: str=None, first_attempt: Attempt=None, http_request: HttpRequest=None, last_attempt: Attempt=None, name: str=None, response_count: int=None, schedule_time: str=None, view: str=None):
        """Task - a model defined in OpenAPI

        :param app_engine_http_request: The app_engine_http_request of this Task.
        :param create_time: The create_time of this Task.
        :param dispatch_count: The dispatch_count of this Task.
        :param dispatch_deadline: The dispatch_deadline of this Task.
        :param first_attempt: The first_attempt of this Task.
        :param http_request: The http_request of this Task.
        :param last_attempt: The last_attempt of this Task.
        :param name: The name of this Task.
        :param response_count: The response_count of this Task.
        :param schedule_time: The schedule_time of this Task.
        :param view: The view of this Task.
        """
        self.openapi_types = {
            'app_engine_http_request': AppEngineHttpRequest,
            'create_time': str,
            'dispatch_count': int,
            'dispatch_deadline': str,
            'first_attempt': Attempt,
            'http_request': HttpRequest,
            'last_attempt': Attempt,
            'name': str,
            'response_count': int,
            'schedule_time': str,
            'view': str
        }

        self.attribute_map = {
            'app_engine_http_request': 'appEngineHttpRequest',
            'create_time': 'createTime',
            'dispatch_count': 'dispatchCount',
            'dispatch_deadline': 'dispatchDeadline',
            'first_attempt': 'firstAttempt',
            'http_request': 'httpRequest',
            'last_attempt': 'lastAttempt',
            'name': 'name',
            'response_count': 'responseCount',
            'schedule_time': 'scheduleTime',
            'view': 'view'
        }

        self._app_engine_http_request = app_engine_http_request
        self._create_time = create_time
        self._dispatch_count = dispatch_count
        self._dispatch_deadline = dispatch_deadline
        self._first_attempt = first_attempt
        self._http_request = http_request
        self._last_attempt = last_attempt
        self._name = name
        self._response_count = response_count
        self._schedule_time = schedule_time
        self._view = view

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Task':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Task of this Task.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_engine_http_request(self):
        """Gets the app_engine_http_request of this Task.


        :return: The app_engine_http_request of this Task.
        :rtype: AppEngineHttpRequest
        """
        return self._app_engine_http_request

    @app_engine_http_request.setter
    def app_engine_http_request(self, app_engine_http_request):
        """Sets the app_engine_http_request of this Task.


        :param app_engine_http_request: The app_engine_http_request of this Task.
        :type app_engine_http_request: AppEngineHttpRequest
        """

        self._app_engine_http_request = app_engine_http_request

    @property
    def create_time(self):
        """Gets the create_time of this Task.

        Output only. The time that the task was created. `create_time` will be truncated to the nearest second.

        :return: The create_time of this Task.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Task.

        Output only. The time that the task was created. `create_time` will be truncated to the nearest second.

        :param create_time: The create_time of this Task.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def dispatch_count(self):
        """Gets the dispatch_count of this Task.

        Output only. The number of attempts dispatched. This count includes attempts which have been dispatched but haven't received a response.

        :return: The dispatch_count of this Task.
        :rtype: int
        """
        return self._dispatch_count

    @dispatch_count.setter
    def dispatch_count(self, dispatch_count):
        """Sets the dispatch_count of this Task.

        Output only. The number of attempts dispatched. This count includes attempts which have been dispatched but haven't received a response.

        :param dispatch_count: The dispatch_count of this Task.
        :type dispatch_count: int
        """

        self._dispatch_count = dispatch_count

    @property
    def dispatch_deadline(self):
        """Gets the dispatch_deadline of this Task.

        The deadline for requests sent to the worker. If the worker does not respond by this deadline then the request is cancelled and the attempt is marked as a `DEADLINE_EXCEEDED` failure. Cloud Tasks will retry the task according to the RetryConfig. Note that when the request is cancelled, Cloud Tasks will stop listening for the response, but whether the worker stops processing depends on the worker. For example, if the worker is stuck, it may not react to cancelled requests. The default and maximum values depend on the type of request: * For HTTP tasks, the default is 10 minutes. The deadline must be in the interval [15 seconds, 30 minutes]. * For App Engine tasks, 0 indicates that the request has the default deadline. The default deadline depends on the [scaling type](https://cloud.google.com/appengine/docs/standard/go/how-instances-are-managed#instance_scaling) of the service: 10 minutes for standard apps with automatic scaling, 24 hours for standard apps with manual and basic scaling, and 60 minutes for flex apps. If the request deadline is set, it must be in the interval [15 seconds, 24 hours 15 seconds]. Regardless of the task's `dispatch_deadline`, the app handler will not run for longer than than the service's timeout. We recommend setting the `dispatch_deadline` to at most a few seconds more than the app handler's timeout. For more information see [Timeouts](https://cloud.google.com/tasks/docs/creating-appengine-handlers#timeouts). The value must be given as a string that indicates the length of time (in seconds) followed by `s` (for \"seconds\"). For more information on the format, see the documentation for [Duration](https://protobuf.dev/reference/protobuf/google.protobuf/#duration). `dispatch_deadline` will be truncated to the nearest millisecond. The deadline is an approximate deadline.

        :return: The dispatch_deadline of this Task.
        :rtype: str
        """
        return self._dispatch_deadline

    @dispatch_deadline.setter
    def dispatch_deadline(self, dispatch_deadline):
        """Sets the dispatch_deadline of this Task.

        The deadline for requests sent to the worker. If the worker does not respond by this deadline then the request is cancelled and the attempt is marked as a `DEADLINE_EXCEEDED` failure. Cloud Tasks will retry the task according to the RetryConfig. Note that when the request is cancelled, Cloud Tasks will stop listening for the response, but whether the worker stops processing depends on the worker. For example, if the worker is stuck, it may not react to cancelled requests. The default and maximum values depend on the type of request: * For HTTP tasks, the default is 10 minutes. The deadline must be in the interval [15 seconds, 30 minutes]. * For App Engine tasks, 0 indicates that the request has the default deadline. The default deadline depends on the [scaling type](https://cloud.google.com/appengine/docs/standard/go/how-instances-are-managed#instance_scaling) of the service: 10 minutes for standard apps with automatic scaling, 24 hours for standard apps with manual and basic scaling, and 60 minutes for flex apps. If the request deadline is set, it must be in the interval [15 seconds, 24 hours 15 seconds]. Regardless of the task's `dispatch_deadline`, the app handler will not run for longer than than the service's timeout. We recommend setting the `dispatch_deadline` to at most a few seconds more than the app handler's timeout. For more information see [Timeouts](https://cloud.google.com/tasks/docs/creating-appengine-handlers#timeouts). The value must be given as a string that indicates the length of time (in seconds) followed by `s` (for \"seconds\"). For more information on the format, see the documentation for [Duration](https://protobuf.dev/reference/protobuf/google.protobuf/#duration). `dispatch_deadline` will be truncated to the nearest millisecond. The deadline is an approximate deadline.

        :param dispatch_deadline: The dispatch_deadline of this Task.
        :type dispatch_deadline: str
        """

        self._dispatch_deadline = dispatch_deadline

    @property
    def first_attempt(self):
        """Gets the first_attempt of this Task.


        :return: The first_attempt of this Task.
        :rtype: Attempt
        """
        return self._first_attempt

    @first_attempt.setter
    def first_attempt(self, first_attempt):
        """Sets the first_attempt of this Task.


        :param first_attempt: The first_attempt of this Task.
        :type first_attempt: Attempt
        """

        self._first_attempt = first_attempt

    @property
    def http_request(self):
        """Gets the http_request of this Task.


        :return: The http_request of this Task.
        :rtype: HttpRequest
        """
        return self._http_request

    @http_request.setter
    def http_request(self, http_request):
        """Sets the http_request of this Task.


        :param http_request: The http_request of this Task.
        :type http_request: HttpRequest
        """

        self._http_request = http_request

    @property
    def last_attempt(self):
        """Gets the last_attempt of this Task.


        :return: The last_attempt of this Task.
        :rtype: Attempt
        """
        return self._last_attempt

    @last_attempt.setter
    def last_attempt(self, last_attempt):
        """Sets the last_attempt of this Task.


        :param last_attempt: The last_attempt of this Task.
        :type last_attempt: Attempt
        """

        self._last_attempt = last_attempt

    @property
    def name(self):
        """Gets the name of this Task.

        Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.

        :return: The name of this Task.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Task.

        Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.

        :param name: The name of this Task.
        :type name: str
        """

        self._name = name

    @property
    def response_count(self):
        """Gets the response_count of this Task.

        Output only. The number of attempts which have received a response.

        :return: The response_count of this Task.
        :rtype: int
        """
        return self._response_count

    @response_count.setter
    def response_count(self, response_count):
        """Sets the response_count of this Task.

        Output only. The number of attempts which have received a response.

        :param response_count: The response_count of this Task.
        :type response_count: int
        """

        self._response_count = response_count

    @property
    def schedule_time(self):
        """Gets the schedule_time of this Task.

        The time when the task is scheduled to be attempted or retried. `schedule_time` will be truncated to the nearest microsecond.

        :return: The schedule_time of this Task.
        :rtype: str
        """
        return self._schedule_time

    @schedule_time.setter
    def schedule_time(self, schedule_time):
        """Sets the schedule_time of this Task.

        The time when the task is scheduled to be attempted or retried. `schedule_time` will be truncated to the nearest microsecond.

        :param schedule_time: The schedule_time of this Task.
        :type schedule_time: str
        """

        self._schedule_time = schedule_time

    @property
    def view(self):
        """Gets the view of this Task.

        Output only. The view specifies which subset of the Task has been returned.

        :return: The view of this Task.
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this Task.

        Output only. The view specifies which subset of the Task has been returned.

        :param view: The view of this Task.
        :type view: str
        """
        allowed_values = ["VIEW_UNSPECIFIED", "BASIC", "FULL"]  # noqa: E501
        if view not in allowed_values:
            raise ValueError(
                "Invalid value for `view` ({0}), must be one of {1}"
                .format(view, allowed_values)
            )

        self._view = view
