/**
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetryConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetryConfig::OAIRetryConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetryConfig::OAIRetryConfig() {
    this->initializeModel();
}

OAIRetryConfig::~OAIRetryConfig() {}

void OAIRetryConfig::initializeModel() {

    m_max_attempts_isSet = false;
    m_max_attempts_isValid = false;

    m_max_backoff_isSet = false;
    m_max_backoff_isValid = false;

    m_max_doublings_isSet = false;
    m_max_doublings_isValid = false;

    m_max_retry_duration_isSet = false;
    m_max_retry_duration_isValid = false;

    m_min_backoff_isSet = false;
    m_min_backoff_isValid = false;
}

void OAIRetryConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetryConfig::fromJsonObject(QJsonObject json) {

    m_max_attempts_isValid = ::OpenAPI::fromJsonValue(m_max_attempts, json[QString("maxAttempts")]);
    m_max_attempts_isSet = !json[QString("maxAttempts")].isNull() && m_max_attempts_isValid;

    m_max_backoff_isValid = ::OpenAPI::fromJsonValue(m_max_backoff, json[QString("maxBackoff")]);
    m_max_backoff_isSet = !json[QString("maxBackoff")].isNull() && m_max_backoff_isValid;

    m_max_doublings_isValid = ::OpenAPI::fromJsonValue(m_max_doublings, json[QString("maxDoublings")]);
    m_max_doublings_isSet = !json[QString("maxDoublings")].isNull() && m_max_doublings_isValid;

    m_max_retry_duration_isValid = ::OpenAPI::fromJsonValue(m_max_retry_duration, json[QString("maxRetryDuration")]);
    m_max_retry_duration_isSet = !json[QString("maxRetryDuration")].isNull() && m_max_retry_duration_isValid;

    m_min_backoff_isValid = ::OpenAPI::fromJsonValue(m_min_backoff, json[QString("minBackoff")]);
    m_min_backoff_isSet = !json[QString("minBackoff")].isNull() && m_min_backoff_isValid;
}

QString OAIRetryConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetryConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_max_attempts_isSet) {
        obj.insert(QString("maxAttempts"), ::OpenAPI::toJsonValue(m_max_attempts));
    }
    if (m_max_backoff_isSet) {
        obj.insert(QString("maxBackoff"), ::OpenAPI::toJsonValue(m_max_backoff));
    }
    if (m_max_doublings_isSet) {
        obj.insert(QString("maxDoublings"), ::OpenAPI::toJsonValue(m_max_doublings));
    }
    if (m_max_retry_duration_isSet) {
        obj.insert(QString("maxRetryDuration"), ::OpenAPI::toJsonValue(m_max_retry_duration));
    }
    if (m_min_backoff_isSet) {
        obj.insert(QString("minBackoff"), ::OpenAPI::toJsonValue(m_min_backoff));
    }
    return obj;
}

qint32 OAIRetryConfig::getMaxAttempts() const {
    return m_max_attempts;
}
void OAIRetryConfig::setMaxAttempts(const qint32 &max_attempts) {
    m_max_attempts = max_attempts;
    m_max_attempts_isSet = true;
}

bool OAIRetryConfig::is_max_attempts_Set() const{
    return m_max_attempts_isSet;
}

bool OAIRetryConfig::is_max_attempts_Valid() const{
    return m_max_attempts_isValid;
}

QString OAIRetryConfig::getMaxBackoff() const {
    return m_max_backoff;
}
void OAIRetryConfig::setMaxBackoff(const QString &max_backoff) {
    m_max_backoff = max_backoff;
    m_max_backoff_isSet = true;
}

bool OAIRetryConfig::is_max_backoff_Set() const{
    return m_max_backoff_isSet;
}

bool OAIRetryConfig::is_max_backoff_Valid() const{
    return m_max_backoff_isValid;
}

qint32 OAIRetryConfig::getMaxDoublings() const {
    return m_max_doublings;
}
void OAIRetryConfig::setMaxDoublings(const qint32 &max_doublings) {
    m_max_doublings = max_doublings;
    m_max_doublings_isSet = true;
}

bool OAIRetryConfig::is_max_doublings_Set() const{
    return m_max_doublings_isSet;
}

bool OAIRetryConfig::is_max_doublings_Valid() const{
    return m_max_doublings_isValid;
}

QString OAIRetryConfig::getMaxRetryDuration() const {
    return m_max_retry_duration;
}
void OAIRetryConfig::setMaxRetryDuration(const QString &max_retry_duration) {
    m_max_retry_duration = max_retry_duration;
    m_max_retry_duration_isSet = true;
}

bool OAIRetryConfig::is_max_retry_duration_Set() const{
    return m_max_retry_duration_isSet;
}

bool OAIRetryConfig::is_max_retry_duration_Valid() const{
    return m_max_retry_duration_isValid;
}

QString OAIRetryConfig::getMinBackoff() const {
    return m_min_backoff;
}
void OAIRetryConfig::setMinBackoff(const QString &min_backoff) {
    m_min_backoff = min_backoff;
    m_min_backoff_isSet = true;
}

bool OAIRetryConfig::is_min_backoff_Set() const{
    return m_min_backoff_isSet;
}

bool OAIRetryConfig::is_min_backoff_Valid() const{
    return m_min_backoff_isValid;
}

bool OAIRetryConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_backoff_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_doublings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_retry_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_backoff_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetryConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
