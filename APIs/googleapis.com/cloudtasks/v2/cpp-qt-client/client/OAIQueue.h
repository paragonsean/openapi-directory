/**
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQueue.h
 *
 * A queue is a container of related tasks. Queues are configured to manage how those tasks are dispatched. Configurable properties include rate limits, retry options, queue types, and others.
 */

#ifndef OAIQueue_H
#define OAIQueue_H

#include <QJsonObject>

#include "OAIAppEngineRouting.h"
#include "OAIHttpTarget.h"
#include "OAIRateLimits.h"
#include "OAIRetryConfig.h"
#include "OAIStackdriverLoggingConfig.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAppEngineRouting;
class OAIHttpTarget;
class OAIRateLimits;
class OAIRetryConfig;
class OAIStackdriverLoggingConfig;

class OAIQueue : public OAIObject {
public:
    OAIQueue();
    OAIQueue(QString json);
    ~OAIQueue() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAppEngineRouting getAppEngineRoutingOverride() const;
    void setAppEngineRoutingOverride(const OAIAppEngineRouting &app_engine_routing_override);
    bool is_app_engine_routing_override_Set() const;
    bool is_app_engine_routing_override_Valid() const;

    OAIHttpTarget getHttpTarget() const;
    void setHttpTarget(const OAIHttpTarget &http_target);
    bool is_http_target_Set() const;
    bool is_http_target_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPurgeTime() const;
    void setPurgeTime(const QString &purge_time);
    bool is_purge_time_Set() const;
    bool is_purge_time_Valid() const;

    OAIRateLimits getRateLimits() const;
    void setRateLimits(const OAIRateLimits &rate_limits);
    bool is_rate_limits_Set() const;
    bool is_rate_limits_Valid() const;

    OAIRetryConfig getRetryConfig() const;
    void setRetryConfig(const OAIRetryConfig &retry_config);
    bool is_retry_config_Set() const;
    bool is_retry_config_Valid() const;

    OAIStackdriverLoggingConfig getStackdriverLoggingConfig() const;
    void setStackdriverLoggingConfig(const OAIStackdriverLoggingConfig &stackdriver_logging_config);
    bool is_stackdriver_logging_config_Set() const;
    bool is_stackdriver_logging_config_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAppEngineRouting m_app_engine_routing_override;
    bool m_app_engine_routing_override_isSet;
    bool m_app_engine_routing_override_isValid;

    OAIHttpTarget m_http_target;
    bool m_http_target_isSet;
    bool m_http_target_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_purge_time;
    bool m_purge_time_isSet;
    bool m_purge_time_isValid;

    OAIRateLimits m_rate_limits;
    bool m_rate_limits_isSet;
    bool m_rate_limits_isValid;

    OAIRetryConfig m_retry_config;
    bool m_retry_config_isSet;
    bool m_retry_config_isValid;

    OAIStackdriverLoggingConfig m_stackdriver_logging_config;
    bool m_stackdriver_logging_config_isSet;
    bool m_stackdriver_logging_config_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQueue)

#endif // OAIQueue_H
