/**
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUriOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUriOverride::OAIUriOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUriOverride::OAIUriOverride() {
    this->initializeModel();
}

OAIUriOverride::~OAIUriOverride() {}

void OAIUriOverride::initializeModel() {

    m_host_isSet = false;
    m_host_isValid = false;

    m_path_override_isSet = false;
    m_path_override_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_query_override_isSet = false;
    m_query_override_isValid = false;

    m_scheme_isSet = false;
    m_scheme_isValid = false;

    m_uri_override_enforce_mode_isSet = false;
    m_uri_override_enforce_mode_isValid = false;
}

void OAIUriOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUriOverride::fromJsonObject(QJsonObject json) {

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_path_override_isValid = ::OpenAPI::fromJsonValue(m_path_override, json[QString("pathOverride")]);
    m_path_override_isSet = !json[QString("pathOverride")].isNull() && m_path_override_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_query_override_isValid = ::OpenAPI::fromJsonValue(m_query_override, json[QString("queryOverride")]);
    m_query_override_isSet = !json[QString("queryOverride")].isNull() && m_query_override_isValid;

    m_scheme_isValid = ::OpenAPI::fromJsonValue(m_scheme, json[QString("scheme")]);
    m_scheme_isSet = !json[QString("scheme")].isNull() && m_scheme_isValid;

    m_uri_override_enforce_mode_isValid = ::OpenAPI::fromJsonValue(m_uri_override_enforce_mode, json[QString("uriOverrideEnforceMode")]);
    m_uri_override_enforce_mode_isSet = !json[QString("uriOverrideEnforceMode")].isNull() && m_uri_override_enforce_mode_isValid;
}

QString OAIUriOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUriOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_path_override.isSet()) {
        obj.insert(QString("pathOverride"), ::OpenAPI::toJsonValue(m_path_override));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_query_override.isSet()) {
        obj.insert(QString("queryOverride"), ::OpenAPI::toJsonValue(m_query_override));
    }
    if (m_scheme_isSet) {
        obj.insert(QString("scheme"), ::OpenAPI::toJsonValue(m_scheme));
    }
    if (m_uri_override_enforce_mode_isSet) {
        obj.insert(QString("uriOverrideEnforceMode"), ::OpenAPI::toJsonValue(m_uri_override_enforce_mode));
    }
    return obj;
}

QString OAIUriOverride::getHost() const {
    return m_host;
}
void OAIUriOverride::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIUriOverride::is_host_Set() const{
    return m_host_isSet;
}

bool OAIUriOverride::is_host_Valid() const{
    return m_host_isValid;
}

OAIPathOverride OAIUriOverride::getPathOverride() const {
    return m_path_override;
}
void OAIUriOverride::setPathOverride(const OAIPathOverride &path_override) {
    m_path_override = path_override;
    m_path_override_isSet = true;
}

bool OAIUriOverride::is_path_override_Set() const{
    return m_path_override_isSet;
}

bool OAIUriOverride::is_path_override_Valid() const{
    return m_path_override_isValid;
}

QString OAIUriOverride::getPort() const {
    return m_port;
}
void OAIUriOverride::setPort(const QString &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIUriOverride::is_port_Set() const{
    return m_port_isSet;
}

bool OAIUriOverride::is_port_Valid() const{
    return m_port_isValid;
}

OAIQueryOverride OAIUriOverride::getQueryOverride() const {
    return m_query_override;
}
void OAIUriOverride::setQueryOverride(const OAIQueryOverride &query_override) {
    m_query_override = query_override;
    m_query_override_isSet = true;
}

bool OAIUriOverride::is_query_override_Set() const{
    return m_query_override_isSet;
}

bool OAIUriOverride::is_query_override_Valid() const{
    return m_query_override_isValid;
}

QString OAIUriOverride::getScheme() const {
    return m_scheme;
}
void OAIUriOverride::setScheme(const QString &scheme) {
    m_scheme = scheme;
    m_scheme_isSet = true;
}

bool OAIUriOverride::is_scheme_Set() const{
    return m_scheme_isSet;
}

bool OAIUriOverride::is_scheme_Valid() const{
    return m_scheme_isValid;
}

QString OAIUriOverride::getUriOverrideEnforceMode() const {
    return m_uri_override_enforce_mode;
}
void OAIUriOverride::setUriOverrideEnforceMode(const QString &uri_override_enforce_mode) {
    m_uri_override_enforce_mode = uri_override_enforce_mode;
    m_uri_override_enforce_mode_isSet = true;
}

bool OAIUriOverride::is_uri_override_enforce_mode_Set() const{
    return m_uri_override_enforce_mode_isSet;
}

bool OAIUriOverride::is_uri_override_enforce_mode_Valid() const{
    return m_uri_override_enforce_mode_isValid;
}

bool OAIUriOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_override_enforce_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUriOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
