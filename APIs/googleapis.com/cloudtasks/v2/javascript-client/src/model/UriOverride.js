/**
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PathOverride from './PathOverride';
import QueryOverride from './QueryOverride';

/**
 * The UriOverride model module.
 * @module model/UriOverride
 * @version v2
 */
class UriOverride {
    /**
     * Constructs a new <code>UriOverride</code>.
     * URI Override. When specified, all the HTTP tasks inside the queue will be partially or fully overridden depending on the configured values.
     * @alias module:model/UriOverride
     */
    constructor() { 
        
        UriOverride.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UriOverride</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UriOverride} obj Optional instance to populate.
     * @return {module:model/UriOverride} The populated <code>UriOverride</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UriOverride();

            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('pathOverride')) {
                obj['pathOverride'] = PathOverride.constructFromObject(data['pathOverride']);
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'String');
            }
            if (data.hasOwnProperty('queryOverride')) {
                obj['queryOverride'] = QueryOverride.constructFromObject(data['queryOverride']);
            }
            if (data.hasOwnProperty('scheme')) {
                obj['scheme'] = ApiClient.convertToType(data['scheme'], 'String');
            }
            if (data.hasOwnProperty('uriOverrideEnforceMode')) {
                obj['uriOverrideEnforceMode'] = ApiClient.convertToType(data['uriOverrideEnforceMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UriOverride</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UriOverride</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // validate the optional field `pathOverride`
        if (data['pathOverride']) { // data not null
          PathOverride.validateJSON(data['pathOverride']);
        }
        // ensure the json data is a string
        if (data['port'] && !(typeof data['port'] === 'string' || data['port'] instanceof String)) {
            throw new Error("Expected the field `port` to be a primitive type in the JSON string but got " + data['port']);
        }
        // validate the optional field `queryOverride`
        if (data['queryOverride']) { // data not null
          QueryOverride.validateJSON(data['queryOverride']);
        }
        // ensure the json data is a string
        if (data['scheme'] && !(typeof data['scheme'] === 'string' || data['scheme'] instanceof String)) {
            throw new Error("Expected the field `scheme` to be a primitive type in the JSON string but got " + data['scheme']);
        }
        // ensure the json data is a string
        if (data['uriOverrideEnforceMode'] && !(typeof data['uriOverrideEnforceMode'] === 'string' || data['uriOverrideEnforceMode'] instanceof String)) {
            throw new Error("Expected the field `uriOverrideEnforceMode` to be a primitive type in the JSON string but got " + data['uriOverrideEnforceMode']);
        }

        return true;
    }


}



/**
 * Host override. When specified, replaces the host part of the task URL. For example, if the task URL is \"https://www.google.com,\" and host value is set to \"example.net\", the overridden URI will be changed to \"https://example.net.\" Host value cannot be an empty string (INVALID_ARGUMENT).
 * @member {String} host
 */
UriOverride.prototype['host'] = undefined;

/**
 * @member {module:model/PathOverride} pathOverride
 */
UriOverride.prototype['pathOverride'] = undefined;

/**
 * Port override. When specified, replaces the port part of the task URI. For instance, for a URI http://www.google.com/foo and port=123, the overridden URI becomes http://www.google.com:123/foo. Note that the port value must be a positive integer. Setting the port to 0 (Zero) clears the URI port.
 * @member {String} port
 */
UriOverride.prototype['port'] = undefined;

/**
 * @member {module:model/QueryOverride} queryOverride
 */
UriOverride.prototype['queryOverride'] = undefined;

/**
 * Scheme override. When specified, the task URI scheme is replaced by the provided value (HTTP or HTTPS).
 * @member {module:model/UriOverride.SchemeEnum} scheme
 */
UriOverride.prototype['scheme'] = undefined;

/**
 * URI Override Enforce Mode When specified, determines the Target UriOverride mode. If not specified, it defaults to ALWAYS.
 * @member {module:model/UriOverride.UriOverrideEnforceModeEnum} uriOverrideEnforceMode
 */
UriOverride.prototype['uriOverrideEnforceMode'] = undefined;





/**
 * Allowed values for the <code>scheme</code> property.
 * @enum {String}
 * @readonly
 */
UriOverride['SchemeEnum'] = {

    /**
     * value: "SCHEME_UNSPECIFIED"
     * @const
     */
    "SCHEME_UNSPECIFIED": "SCHEME_UNSPECIFIED",

    /**
     * value: "HTTP"
     * @const
     */
    "HTTP": "HTTP",

    /**
     * value: "HTTPS"
     * @const
     */
    "HTTPS": "HTTPS"
};


/**
 * Allowed values for the <code>uriOverrideEnforceMode</code> property.
 * @enum {String}
 * @readonly
 */
UriOverride['UriOverrideEnforceModeEnum'] = {

    /**
     * value: "URI_OVERRIDE_ENFORCE_MODE_UNSPECIFIED"
     * @const
     */
    "URI_OVERRIDE_ENFORCE_MODE_UNSPECIFIED": "URI_OVERRIDE_ENFORCE_MODE_UNSPECIFIED",

    /**
     * value: "IF_NOT_EXISTS"
     * @const
     */
    "IF_NOT_EXISTS": "IF_NOT_EXISTS",

    /**
     * value: "ALWAYS"
     * @const
     */
    "ALWAYS": "ALWAYS"
};



export default UriOverride;

