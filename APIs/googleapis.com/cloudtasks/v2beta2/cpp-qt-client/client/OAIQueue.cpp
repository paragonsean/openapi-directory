/**
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueue::OAIQueue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueue::OAIQueue() {
    this->initializeModel();
}

OAIQueue::~OAIQueue() {}

void OAIQueue::initializeModel() {

    m_app_engine_http_target_isSet = false;
    m_app_engine_http_target_isValid = false;

    m_http_target_isSet = false;
    m_http_target_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pull_target_isSet = false;
    m_pull_target_isValid = false;

    m_purge_time_isSet = false;
    m_purge_time_isValid = false;

    m_rate_limits_isSet = false;
    m_rate_limits_isValid = false;

    m_retry_config_isSet = false;
    m_retry_config_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;

    m_task_ttl_isSet = false;
    m_task_ttl_isValid = false;

    m_tombstone_ttl_isSet = false;
    m_tombstone_ttl_isValid = false;
}

void OAIQueue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueue::fromJsonObject(QJsonObject json) {

    m_app_engine_http_target_isValid = ::OpenAPI::fromJsonValue(m_app_engine_http_target, json[QString("appEngineHttpTarget")]);
    m_app_engine_http_target_isSet = !json[QString("appEngineHttpTarget")].isNull() && m_app_engine_http_target_isValid;

    m_http_target_isValid = ::OpenAPI::fromJsonValue(m_http_target, json[QString("httpTarget")]);
    m_http_target_isSet = !json[QString("httpTarget")].isNull() && m_http_target_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pull_target_isValid = ::OpenAPI::fromJsonValue(m_pull_target, json[QString("pullTarget")]);
    m_pull_target_isSet = !json[QString("pullTarget")].isNull() && m_pull_target_isValid;

    m_purge_time_isValid = ::OpenAPI::fromJsonValue(m_purge_time, json[QString("purgeTime")]);
    m_purge_time_isSet = !json[QString("purgeTime")].isNull() && m_purge_time_isValid;

    m_rate_limits_isValid = ::OpenAPI::fromJsonValue(m_rate_limits, json[QString("rateLimits")]);
    m_rate_limits_isSet = !json[QString("rateLimits")].isNull() && m_rate_limits_isValid;

    m_retry_config_isValid = ::OpenAPI::fromJsonValue(m_retry_config, json[QString("retryConfig")]);
    m_retry_config_isSet = !json[QString("retryConfig")].isNull() && m_retry_config_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;

    m_task_ttl_isValid = ::OpenAPI::fromJsonValue(m_task_ttl, json[QString("taskTtl")]);
    m_task_ttl_isSet = !json[QString("taskTtl")].isNull() && m_task_ttl_isValid;

    m_tombstone_ttl_isValid = ::OpenAPI::fromJsonValue(m_tombstone_ttl, json[QString("tombstoneTtl")]);
    m_tombstone_ttl_isSet = !json[QString("tombstoneTtl")].isNull() && m_tombstone_ttl_isValid;
}

QString OAIQueue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueue::asJsonObject() const {
    QJsonObject obj;
    if (m_app_engine_http_target.isSet()) {
        obj.insert(QString("appEngineHttpTarget"), ::OpenAPI::toJsonValue(m_app_engine_http_target));
    }
    if (m_http_target.isSet()) {
        obj.insert(QString("httpTarget"), ::OpenAPI::toJsonValue(m_http_target));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pull_target_isSet) {
        obj.insert(QString("pullTarget"), ::OpenAPI::toJsonValue(m_pull_target));
    }
    if (m_purge_time_isSet) {
        obj.insert(QString("purgeTime"), ::OpenAPI::toJsonValue(m_purge_time));
    }
    if (m_rate_limits.isSet()) {
        obj.insert(QString("rateLimits"), ::OpenAPI::toJsonValue(m_rate_limits));
    }
    if (m_retry_config.isSet()) {
        obj.insert(QString("retryConfig"), ::OpenAPI::toJsonValue(m_retry_config));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    if (m_task_ttl_isSet) {
        obj.insert(QString("taskTtl"), ::OpenAPI::toJsonValue(m_task_ttl));
    }
    if (m_tombstone_ttl_isSet) {
        obj.insert(QString("tombstoneTtl"), ::OpenAPI::toJsonValue(m_tombstone_ttl));
    }
    return obj;
}

OAIAppEngineHttpTarget OAIQueue::getAppEngineHttpTarget() const {
    return m_app_engine_http_target;
}
void OAIQueue::setAppEngineHttpTarget(const OAIAppEngineHttpTarget &app_engine_http_target) {
    m_app_engine_http_target = app_engine_http_target;
    m_app_engine_http_target_isSet = true;
}

bool OAIQueue::is_app_engine_http_target_Set() const{
    return m_app_engine_http_target_isSet;
}

bool OAIQueue::is_app_engine_http_target_Valid() const{
    return m_app_engine_http_target_isValid;
}

OAIHttpTarget OAIQueue::getHttpTarget() const {
    return m_http_target;
}
void OAIQueue::setHttpTarget(const OAIHttpTarget &http_target) {
    m_http_target = http_target;
    m_http_target_isSet = true;
}

bool OAIQueue::is_http_target_Set() const{
    return m_http_target_isSet;
}

bool OAIQueue::is_http_target_Valid() const{
    return m_http_target_isValid;
}

QString OAIQueue::getName() const {
    return m_name;
}
void OAIQueue::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIQueue::is_name_Set() const{
    return m_name_isSet;
}

bool OAIQueue::is_name_Valid() const{
    return m_name_isValid;
}

OAIObject OAIQueue::getPullTarget() const {
    return m_pull_target;
}
void OAIQueue::setPullTarget(const OAIObject &pull_target) {
    m_pull_target = pull_target;
    m_pull_target_isSet = true;
}

bool OAIQueue::is_pull_target_Set() const{
    return m_pull_target_isSet;
}

bool OAIQueue::is_pull_target_Valid() const{
    return m_pull_target_isValid;
}

QString OAIQueue::getPurgeTime() const {
    return m_purge_time;
}
void OAIQueue::setPurgeTime(const QString &purge_time) {
    m_purge_time = purge_time;
    m_purge_time_isSet = true;
}

bool OAIQueue::is_purge_time_Set() const{
    return m_purge_time_isSet;
}

bool OAIQueue::is_purge_time_Valid() const{
    return m_purge_time_isValid;
}

OAIRateLimits OAIQueue::getRateLimits() const {
    return m_rate_limits;
}
void OAIQueue::setRateLimits(const OAIRateLimits &rate_limits) {
    m_rate_limits = rate_limits;
    m_rate_limits_isSet = true;
}

bool OAIQueue::is_rate_limits_Set() const{
    return m_rate_limits_isSet;
}

bool OAIQueue::is_rate_limits_Valid() const{
    return m_rate_limits_isValid;
}

OAIRetryConfig OAIQueue::getRetryConfig() const {
    return m_retry_config;
}
void OAIQueue::setRetryConfig(const OAIRetryConfig &retry_config) {
    m_retry_config = retry_config;
    m_retry_config_isSet = true;
}

bool OAIQueue::is_retry_config_Set() const{
    return m_retry_config_isSet;
}

bool OAIQueue::is_retry_config_Valid() const{
    return m_retry_config_isValid;
}

QString OAIQueue::getState() const {
    return m_state;
}
void OAIQueue::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIQueue::is_state_Set() const{
    return m_state_isSet;
}

bool OAIQueue::is_state_Valid() const{
    return m_state_isValid;
}

OAIQueueStats OAIQueue::getStats() const {
    return m_stats;
}
void OAIQueue::setStats(const OAIQueueStats &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIQueue::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIQueue::is_stats_Valid() const{
    return m_stats_isValid;
}

QString OAIQueue::getTaskTtl() const {
    return m_task_ttl;
}
void OAIQueue::setTaskTtl(const QString &task_ttl) {
    m_task_ttl = task_ttl;
    m_task_ttl_isSet = true;
}

bool OAIQueue::is_task_ttl_Set() const{
    return m_task_ttl_isSet;
}

bool OAIQueue::is_task_ttl_Valid() const{
    return m_task_ttl_isValid;
}

QString OAIQueue::getTombstoneTtl() const {
    return m_tombstone_ttl;
}
void OAIQueue::setTombstoneTtl(const QString &tombstone_ttl) {
    m_tombstone_ttl = tombstone_ttl;
    m_tombstone_ttl_isSet = true;
}

bool OAIQueue::is_tombstone_ttl_Set() const{
    return m_tombstone_ttl_isSet;
}

bool OAIQueue::is_tombstone_ttl_Valid() const{
    return m_tombstone_ttl_isValid;
}

bool OAIQueue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_engine_http_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purge_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_limits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tombstone_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
