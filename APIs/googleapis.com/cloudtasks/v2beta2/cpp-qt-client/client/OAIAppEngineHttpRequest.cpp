/**
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppEngineHttpRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppEngineHttpRequest::OAIAppEngineHttpRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppEngineHttpRequest::OAIAppEngineHttpRequest() {
    this->initializeModel();
}

OAIAppEngineHttpRequest::~OAIAppEngineHttpRequest() {}

void OAIAppEngineHttpRequest::initializeModel() {

    m_app_engine_routing_isSet = false;
    m_app_engine_routing_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_http_method_isSet = false;
    m_http_method_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_relative_url_isSet = false;
    m_relative_url_isValid = false;
}

void OAIAppEngineHttpRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppEngineHttpRequest::fromJsonObject(QJsonObject json) {

    m_app_engine_routing_isValid = ::OpenAPI::fromJsonValue(m_app_engine_routing, json[QString("appEngineRouting")]);
    m_app_engine_routing_isSet = !json[QString("appEngineRouting")].isNull() && m_app_engine_routing_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_http_method_isValid = ::OpenAPI::fromJsonValue(m_http_method, json[QString("httpMethod")]);
    m_http_method_isSet = !json[QString("httpMethod")].isNull() && m_http_method_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_relative_url_isValid = ::OpenAPI::fromJsonValue(m_relative_url, json[QString("relativeUrl")]);
    m_relative_url_isSet = !json[QString("relativeUrl")].isNull() && m_relative_url_isValid;
}

QString OAIAppEngineHttpRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppEngineHttpRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_engine_routing.isSet()) {
        obj.insert(QString("appEngineRouting"), ::OpenAPI::toJsonValue(m_app_engine_routing));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_http_method_isSet) {
        obj.insert(QString("httpMethod"), ::OpenAPI::toJsonValue(m_http_method));
    }
    if (m_payload_isSet) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_relative_url_isSet) {
        obj.insert(QString("relativeUrl"), ::OpenAPI::toJsonValue(m_relative_url));
    }
    return obj;
}

OAIAppEngineRouting OAIAppEngineHttpRequest::getAppEngineRouting() const {
    return m_app_engine_routing;
}
void OAIAppEngineHttpRequest::setAppEngineRouting(const OAIAppEngineRouting &app_engine_routing) {
    m_app_engine_routing = app_engine_routing;
    m_app_engine_routing_isSet = true;
}

bool OAIAppEngineHttpRequest::is_app_engine_routing_Set() const{
    return m_app_engine_routing_isSet;
}

bool OAIAppEngineHttpRequest::is_app_engine_routing_Valid() const{
    return m_app_engine_routing_isValid;
}

QMap<QString, QString> OAIAppEngineHttpRequest::getHeaders() const {
    return m_headers;
}
void OAIAppEngineHttpRequest::setHeaders(const QMap<QString, QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIAppEngineHttpRequest::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIAppEngineHttpRequest::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIAppEngineHttpRequest::getHttpMethod() const {
    return m_http_method;
}
void OAIAppEngineHttpRequest::setHttpMethod(const QString &http_method) {
    m_http_method = http_method;
    m_http_method_isSet = true;
}

bool OAIAppEngineHttpRequest::is_http_method_Set() const{
    return m_http_method_isSet;
}

bool OAIAppEngineHttpRequest::is_http_method_Valid() const{
    return m_http_method_isValid;
}

QByteArray OAIAppEngineHttpRequest::getPayload() const {
    return m_payload;
}
void OAIAppEngineHttpRequest::setPayload(const QByteArray &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIAppEngineHttpRequest::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIAppEngineHttpRequest::is_payload_Valid() const{
    return m_payload_isValid;
}

QString OAIAppEngineHttpRequest::getRelativeUrl() const {
    return m_relative_url;
}
void OAIAppEngineHttpRequest::setRelativeUrl(const QString &relative_url) {
    m_relative_url = relative_url;
    m_relative_url_isSet = true;
}

bool OAIAppEngineHttpRequest::is_relative_url_Set() const{
    return m_relative_url_isSet;
}

bool OAIAppEngineHttpRequest::is_relative_url_Valid() const{
    return m_relative_url_isValid;
}

bool OAIAppEngineHttpRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_engine_routing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppEngineHttpRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
