/**
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpTarget::OAIHttpTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpTarget::OAIHttpTarget() {
    this->initializeModel();
}

OAIHttpTarget::~OAIHttpTarget() {}

void OAIHttpTarget::initializeModel() {

    m_header_overrides_isSet = false;
    m_header_overrides_isValid = false;

    m_http_method_isSet = false;
    m_http_method_isValid = false;

    m_oauth_token_isSet = false;
    m_oauth_token_isValid = false;

    m_oidc_token_isSet = false;
    m_oidc_token_isValid = false;

    m_uri_override_isSet = false;
    m_uri_override_isValid = false;
}

void OAIHttpTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpTarget::fromJsonObject(QJsonObject json) {

    m_header_overrides_isValid = ::OpenAPI::fromJsonValue(m_header_overrides, json[QString("headerOverrides")]);
    m_header_overrides_isSet = !json[QString("headerOverrides")].isNull() && m_header_overrides_isValid;

    m_http_method_isValid = ::OpenAPI::fromJsonValue(m_http_method, json[QString("httpMethod")]);
    m_http_method_isSet = !json[QString("httpMethod")].isNull() && m_http_method_isValid;

    m_oauth_token_isValid = ::OpenAPI::fromJsonValue(m_oauth_token, json[QString("oauthToken")]);
    m_oauth_token_isSet = !json[QString("oauthToken")].isNull() && m_oauth_token_isValid;

    m_oidc_token_isValid = ::OpenAPI::fromJsonValue(m_oidc_token, json[QString("oidcToken")]);
    m_oidc_token_isSet = !json[QString("oidcToken")].isNull() && m_oidc_token_isValid;

    m_uri_override_isValid = ::OpenAPI::fromJsonValue(m_uri_override, json[QString("uriOverride")]);
    m_uri_override_isSet = !json[QString("uriOverride")].isNull() && m_uri_override_isValid;
}

QString OAIHttpTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_header_overrides.size() > 0) {
        obj.insert(QString("headerOverrides"), ::OpenAPI::toJsonValue(m_header_overrides));
    }
    if (m_http_method_isSet) {
        obj.insert(QString("httpMethod"), ::OpenAPI::toJsonValue(m_http_method));
    }
    if (m_oauth_token.isSet()) {
        obj.insert(QString("oauthToken"), ::OpenAPI::toJsonValue(m_oauth_token));
    }
    if (m_oidc_token.isSet()) {
        obj.insert(QString("oidcToken"), ::OpenAPI::toJsonValue(m_oidc_token));
    }
    if (m_uri_override.isSet()) {
        obj.insert(QString("uriOverride"), ::OpenAPI::toJsonValue(m_uri_override));
    }
    return obj;
}

QList<OAIHeaderOverride> OAIHttpTarget::getHeaderOverrides() const {
    return m_header_overrides;
}
void OAIHttpTarget::setHeaderOverrides(const QList<OAIHeaderOverride> &header_overrides) {
    m_header_overrides = header_overrides;
    m_header_overrides_isSet = true;
}

bool OAIHttpTarget::is_header_overrides_Set() const{
    return m_header_overrides_isSet;
}

bool OAIHttpTarget::is_header_overrides_Valid() const{
    return m_header_overrides_isValid;
}

QString OAIHttpTarget::getHttpMethod() const {
    return m_http_method;
}
void OAIHttpTarget::setHttpMethod(const QString &http_method) {
    m_http_method = http_method;
    m_http_method_isSet = true;
}

bool OAIHttpTarget::is_http_method_Set() const{
    return m_http_method_isSet;
}

bool OAIHttpTarget::is_http_method_Valid() const{
    return m_http_method_isValid;
}

OAIOAuthToken OAIHttpTarget::getOauthToken() const {
    return m_oauth_token;
}
void OAIHttpTarget::setOauthToken(const OAIOAuthToken &oauth_token) {
    m_oauth_token = oauth_token;
    m_oauth_token_isSet = true;
}

bool OAIHttpTarget::is_oauth_token_Set() const{
    return m_oauth_token_isSet;
}

bool OAIHttpTarget::is_oauth_token_Valid() const{
    return m_oauth_token_isValid;
}

OAIOidcToken OAIHttpTarget::getOidcToken() const {
    return m_oidc_token;
}
void OAIHttpTarget::setOidcToken(const OAIOidcToken &oidc_token) {
    m_oidc_token = oidc_token;
    m_oidc_token_isSet = true;
}

bool OAIHttpTarget::is_oidc_token_Set() const{
    return m_oidc_token_isSet;
}

bool OAIHttpTarget::is_oidc_token_Valid() const{
    return m_oidc_token_isValid;
}

OAIUriOverride OAIHttpTarget::getUriOverride() const {
    return m_uri_override;
}
void OAIHttpTarget::setUriOverride(const OAIUriOverride &uri_override) {
    m_uri_override = uri_override;
    m_uri_override_isSet = true;
}

bool OAIHttpTarget::is_uri_override_Set() const{
    return m_uri_override_isSet;
}

bool OAIHttpTarget::is_uri_override_Valid() const{
    return m_uri_override_isValid;
}

bool OAIHttpTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_header_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_token.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oidc_token.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_override.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
