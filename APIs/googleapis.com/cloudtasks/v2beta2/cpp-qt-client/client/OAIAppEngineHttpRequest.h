/**
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAppEngineHttpRequest.h
 *
 * App Engine HTTP request. The message defines the HTTP request that is sent to an App Engine app when the task is dispatched. This proto can only be used for tasks in a queue which has app_engine_http_target set. Using AppEngineHttpRequest requires [&#x60;appengine.applications.get&#x60;](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: &#x60;https://www.googleapis.com/auth/cloud-platform&#x60; The task will be delivered to the App Engine app which belongs to the same project as the queue. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and how routing is affected by [dispatch files](https://cloud.google.com/appengine/docs/python/config/dispatchref). Traffic is encrypted during transport and never leaves Google datacenters. Because this traffic is carried over a communication mechanism internal to Google, you cannot explicitly set the protocol (for example, HTTP or HTTPS). The request to the handler, however, will appear to have used the HTTP protocol. The AppEngineRouting used to construct the URL that the task is delivered to can be set at the queue-level or task-level: * If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing. The &#x60;url&#x60; that the task will be sent to is: * &#x60;url &#x3D;&#x60; host &#x60;+&#x60; relative_url Tasks can be dispatched to secure app handlers, unsecure app handlers, and URIs restricted with [&#x60;login: admin&#x60;](https://cloud.google.com/appengine/docs/standard/python/config/appref). Because tasks are not run as any user, they cannot be dispatched to URIs restricted with [&#x60;login: required&#x60;](https://cloud.google.com/appengine/docs/standard/python/config/appref) Task dispatches also do not follow redirects. The task attempt has succeeded if the app&#39;s request handler returns an HTTP response code in the range [&#x60;200&#x60; - &#x60;299&#x60;]. The task attempt has failed if the app&#39;s handler returns a non-2xx response code or Cloud Tasks does not receive response before the deadline. Failed tasks will be retried according to the retry configuration. &#x60;503&#x60; (Service Unavailable) is considered an App Engine system error instead of an application error and will cause Cloud Tasks&#39; traffic congestion control to temporarily throttle the queue&#39;s dispatches. Unlike other types of task targets, a &#x60;429&#x60; (Too Many Requests) response from an app handler does not cause traffic congestion control to throttle the queue.
 */

#ifndef OAIAppEngineHttpRequest_H
#define OAIAppEngineHttpRequest_H

#include <QJsonObject>

#include "OAIAppEngineRouting.h"
#include <QByteArray>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAppEngineRouting;

class OAIAppEngineHttpRequest : public OAIObject {
public:
    OAIAppEngineHttpRequest();
    OAIAppEngineHttpRequest(QString json);
    ~OAIAppEngineHttpRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAppEngineRouting getAppEngineRouting() const;
    void setAppEngineRouting(const OAIAppEngineRouting &app_engine_routing);
    bool is_app_engine_routing_Set() const;
    bool is_app_engine_routing_Valid() const;

    QMap<QString, QString> getHeaders() const;
    void setHeaders(const QMap<QString, QString> &headers);
    bool is_headers_Set() const;
    bool is_headers_Valid() const;

    QString getHttpMethod() const;
    void setHttpMethod(const QString &http_method);
    bool is_http_method_Set() const;
    bool is_http_method_Valid() const;

    QByteArray getPayload() const;
    void setPayload(const QByteArray &payload);
    bool is_payload_Set() const;
    bool is_payload_Valid() const;

    QString getRelativeUrl() const;
    void setRelativeUrl(const QString &relative_url);
    bool is_relative_url_Set() const;
    bool is_relative_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAppEngineRouting m_app_engine_routing;
    bool m_app_engine_routing_isSet;
    bool m_app_engine_routing_isValid;

    QMap<QString, QString> m_headers;
    bool m_headers_isSet;
    bool m_headers_isValid;

    QString m_http_method;
    bool m_http_method_isSet;
    bool m_http_method_isValid;

    QByteArray m_payload;
    bool m_payload_isSet;
    bool m_payload_isValid;

    QString m_relative_url;
    bool m_relative_url_isSet;
    bool m_relative_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAppEngineHttpRequest)

#endif // OAIAppEngineHttpRequest_H
