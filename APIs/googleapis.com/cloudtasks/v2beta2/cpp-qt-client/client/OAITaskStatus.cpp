/**
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskStatus::OAITaskStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskStatus::OAITaskStatus() {
    this->initializeModel();
}

OAITaskStatus::~OAITaskStatus() {}

void OAITaskStatus::initializeModel() {

    m_attempt_dispatch_count_isSet = false;
    m_attempt_dispatch_count_isValid = false;

    m_attempt_response_count_isSet = false;
    m_attempt_response_count_isValid = false;

    m_first_attempt_status_isSet = false;
    m_first_attempt_status_isValid = false;

    m_last_attempt_status_isSet = false;
    m_last_attempt_status_isValid = false;
}

void OAITaskStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskStatus::fromJsonObject(QJsonObject json) {

    m_attempt_dispatch_count_isValid = ::OpenAPI::fromJsonValue(m_attempt_dispatch_count, json[QString("attemptDispatchCount")]);
    m_attempt_dispatch_count_isSet = !json[QString("attemptDispatchCount")].isNull() && m_attempt_dispatch_count_isValid;

    m_attempt_response_count_isValid = ::OpenAPI::fromJsonValue(m_attempt_response_count, json[QString("attemptResponseCount")]);
    m_attempt_response_count_isSet = !json[QString("attemptResponseCount")].isNull() && m_attempt_response_count_isValid;

    m_first_attempt_status_isValid = ::OpenAPI::fromJsonValue(m_first_attempt_status, json[QString("firstAttemptStatus")]);
    m_first_attempt_status_isSet = !json[QString("firstAttemptStatus")].isNull() && m_first_attempt_status_isValid;

    m_last_attempt_status_isValid = ::OpenAPI::fromJsonValue(m_last_attempt_status, json[QString("lastAttemptStatus")]);
    m_last_attempt_status_isSet = !json[QString("lastAttemptStatus")].isNull() && m_last_attempt_status_isValid;
}

QString OAITaskStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_attempt_dispatch_count_isSet) {
        obj.insert(QString("attemptDispatchCount"), ::OpenAPI::toJsonValue(m_attempt_dispatch_count));
    }
    if (m_attempt_response_count_isSet) {
        obj.insert(QString("attemptResponseCount"), ::OpenAPI::toJsonValue(m_attempt_response_count));
    }
    if (m_first_attempt_status.isSet()) {
        obj.insert(QString("firstAttemptStatus"), ::OpenAPI::toJsonValue(m_first_attempt_status));
    }
    if (m_last_attempt_status.isSet()) {
        obj.insert(QString("lastAttemptStatus"), ::OpenAPI::toJsonValue(m_last_attempt_status));
    }
    return obj;
}

qint32 OAITaskStatus::getAttemptDispatchCount() const {
    return m_attempt_dispatch_count;
}
void OAITaskStatus::setAttemptDispatchCount(const qint32 &attempt_dispatch_count) {
    m_attempt_dispatch_count = attempt_dispatch_count;
    m_attempt_dispatch_count_isSet = true;
}

bool OAITaskStatus::is_attempt_dispatch_count_Set() const{
    return m_attempt_dispatch_count_isSet;
}

bool OAITaskStatus::is_attempt_dispatch_count_Valid() const{
    return m_attempt_dispatch_count_isValid;
}

qint32 OAITaskStatus::getAttemptResponseCount() const {
    return m_attempt_response_count;
}
void OAITaskStatus::setAttemptResponseCount(const qint32 &attempt_response_count) {
    m_attempt_response_count = attempt_response_count;
    m_attempt_response_count_isSet = true;
}

bool OAITaskStatus::is_attempt_response_count_Set() const{
    return m_attempt_response_count_isSet;
}

bool OAITaskStatus::is_attempt_response_count_Valid() const{
    return m_attempt_response_count_isValid;
}

OAIAttemptStatus OAITaskStatus::getFirstAttemptStatus() const {
    return m_first_attempt_status;
}
void OAITaskStatus::setFirstAttemptStatus(const OAIAttemptStatus &first_attempt_status) {
    m_first_attempt_status = first_attempt_status;
    m_first_attempt_status_isSet = true;
}

bool OAITaskStatus::is_first_attempt_status_Set() const{
    return m_first_attempt_status_isSet;
}

bool OAITaskStatus::is_first_attempt_status_Valid() const{
    return m_first_attempt_status_isValid;
}

OAIAttemptStatus OAITaskStatus::getLastAttemptStatus() const {
    return m_last_attempt_status;
}
void OAITaskStatus::setLastAttemptStatus(const OAIAttemptStatus &last_attempt_status) {
    m_last_attempt_status = last_attempt_status;
    m_last_attempt_status_isSet = true;
}

bool OAITaskStatus::is_last_attempt_status_Set() const{
    return m_last_attempt_status_isSet;
}

bool OAITaskStatus::is_last_attempt_status_Valid() const{
    return m_last_attempt_status_isValid;
}

bool OAITaskStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attempt_dispatch_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attempt_response_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_attempt_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_attempt_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
