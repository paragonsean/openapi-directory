/**
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppEngineRouting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppEngineRouting::OAIAppEngineRouting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppEngineRouting::OAIAppEngineRouting() {
    this->initializeModel();
}

OAIAppEngineRouting::~OAIAppEngineRouting() {}

void OAIAppEngineRouting::initializeModel() {

    m_host_isSet = false;
    m_host_isValid = false;

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIAppEngineRouting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppEngineRouting::fromJsonObject(QJsonObject json) {

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIAppEngineRouting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppEngineRouting::asJsonObject() const {
    QJsonObject obj;
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_instance_isSet) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIAppEngineRouting::getHost() const {
    return m_host;
}
void OAIAppEngineRouting::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIAppEngineRouting::is_host_Set() const{
    return m_host_isSet;
}

bool OAIAppEngineRouting::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIAppEngineRouting::getInstance() const {
    return m_instance;
}
void OAIAppEngineRouting::setInstance(const QString &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAIAppEngineRouting::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAIAppEngineRouting::is_instance_Valid() const{
    return m_instance_isValid;
}

QString OAIAppEngineRouting::getService() const {
    return m_service;
}
void OAIAppEngineRouting::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIAppEngineRouting::is_service_Set() const{
    return m_service_isSet;
}

bool OAIAppEngineRouting::is_service_Valid() const{
    return m_service_isValid;
}

QString OAIAppEngineRouting::getVersion() const {
    return m_version;
}
void OAIAppEngineRouting::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIAppEngineRouting::is_version_Set() const{
    return m_version_isSet;
}

bool OAIAppEngineRouting::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIAppEngineRouting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppEngineRouting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
