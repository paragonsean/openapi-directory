/**
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeaseTasksRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeaseTasksRequest::OAILeaseTasksRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeaseTasksRequest::OAILeaseTasksRequest() {
    this->initializeModel();
}

OAILeaseTasksRequest::~OAILeaseTasksRequest() {}

void OAILeaseTasksRequest::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_lease_duration_isSet = false;
    m_lease_duration_isValid = false;

    m_max_tasks_isSet = false;
    m_max_tasks_isValid = false;

    m_response_view_isSet = false;
    m_response_view_isValid = false;
}

void OAILeaseTasksRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILeaseTasksRequest::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_lease_duration_isValid = ::OpenAPI::fromJsonValue(m_lease_duration, json[QString("leaseDuration")]);
    m_lease_duration_isSet = !json[QString("leaseDuration")].isNull() && m_lease_duration_isValid;

    m_max_tasks_isValid = ::OpenAPI::fromJsonValue(m_max_tasks, json[QString("maxTasks")]);
    m_max_tasks_isSet = !json[QString("maxTasks")].isNull() && m_max_tasks_isValid;

    m_response_view_isValid = ::OpenAPI::fromJsonValue(m_response_view, json[QString("responseView")]);
    m_response_view_isSet = !json[QString("responseView")].isNull() && m_response_view_isValid;
}

QString OAILeaseTasksRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILeaseTasksRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_lease_duration_isSet) {
        obj.insert(QString("leaseDuration"), ::OpenAPI::toJsonValue(m_lease_duration));
    }
    if (m_max_tasks_isSet) {
        obj.insert(QString("maxTasks"), ::OpenAPI::toJsonValue(m_max_tasks));
    }
    if (m_response_view_isSet) {
        obj.insert(QString("responseView"), ::OpenAPI::toJsonValue(m_response_view));
    }
    return obj;
}

QString OAILeaseTasksRequest::getFilter() const {
    return m_filter;
}
void OAILeaseTasksRequest::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAILeaseTasksRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAILeaseTasksRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAILeaseTasksRequest::getLeaseDuration() const {
    return m_lease_duration;
}
void OAILeaseTasksRequest::setLeaseDuration(const QString &lease_duration) {
    m_lease_duration = lease_duration;
    m_lease_duration_isSet = true;
}

bool OAILeaseTasksRequest::is_lease_duration_Set() const{
    return m_lease_duration_isSet;
}

bool OAILeaseTasksRequest::is_lease_duration_Valid() const{
    return m_lease_duration_isValid;
}

qint32 OAILeaseTasksRequest::getMaxTasks() const {
    return m_max_tasks;
}
void OAILeaseTasksRequest::setMaxTasks(const qint32 &max_tasks) {
    m_max_tasks = max_tasks;
    m_max_tasks_isSet = true;
}

bool OAILeaseTasksRequest::is_max_tasks_Set() const{
    return m_max_tasks_isSet;
}

bool OAILeaseTasksRequest::is_max_tasks_Valid() const{
    return m_max_tasks_isValid;
}

QString OAILeaseTasksRequest::getResponseView() const {
    return m_response_view;
}
void OAILeaseTasksRequest::setResponseView(const QString &response_view) {
    m_response_view = response_view;
    m_response_view_isSet = true;
}

bool OAILeaseTasksRequest::is_response_view_Set() const{
    return m_response_view_isSet;
}

bool OAILeaseTasksRequest::is_response_view_Valid() const{
    return m_response_view_isValid;
}

bool OAILeaseTasksRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lease_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_tasks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_view_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILeaseTasksRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
