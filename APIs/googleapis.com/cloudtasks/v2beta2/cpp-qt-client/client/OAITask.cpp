/**
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITask::OAITask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITask::OAITask() {
    this->initializeModel();
}

OAITask::~OAITask() {}

void OAITask::initializeModel() {

    m_app_engine_http_request_isSet = false;
    m_app_engine_http_request_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_http_request_isSet = false;
    m_http_request_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pull_message_isSet = false;
    m_pull_message_isValid = false;

    m_schedule_time_isSet = false;
    m_schedule_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_view_isSet = false;
    m_view_isValid = false;
}

void OAITask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITask::fromJsonObject(QJsonObject json) {

    m_app_engine_http_request_isValid = ::OpenAPI::fromJsonValue(m_app_engine_http_request, json[QString("appEngineHttpRequest")]);
    m_app_engine_http_request_isSet = !json[QString("appEngineHttpRequest")].isNull() && m_app_engine_http_request_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_http_request_isValid = ::OpenAPI::fromJsonValue(m_http_request, json[QString("httpRequest")]);
    m_http_request_isSet = !json[QString("httpRequest")].isNull() && m_http_request_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pull_message_isValid = ::OpenAPI::fromJsonValue(m_pull_message, json[QString("pullMessage")]);
    m_pull_message_isSet = !json[QString("pullMessage")].isNull() && m_pull_message_isValid;

    m_schedule_time_isValid = ::OpenAPI::fromJsonValue(m_schedule_time, json[QString("scheduleTime")]);
    m_schedule_time_isSet = !json[QString("scheduleTime")].isNull() && m_schedule_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_view_isValid = ::OpenAPI::fromJsonValue(m_view, json[QString("view")]);
    m_view_isSet = !json[QString("view")].isNull() && m_view_isValid;
}

QString OAITask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITask::asJsonObject() const {
    QJsonObject obj;
    if (m_app_engine_http_request.isSet()) {
        obj.insert(QString("appEngineHttpRequest"), ::OpenAPI::toJsonValue(m_app_engine_http_request));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_http_request.isSet()) {
        obj.insert(QString("httpRequest"), ::OpenAPI::toJsonValue(m_http_request));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pull_message.isSet()) {
        obj.insert(QString("pullMessage"), ::OpenAPI::toJsonValue(m_pull_message));
    }
    if (m_schedule_time_isSet) {
        obj.insert(QString("scheduleTime"), ::OpenAPI::toJsonValue(m_schedule_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_view_isSet) {
        obj.insert(QString("view"), ::OpenAPI::toJsonValue(m_view));
    }
    return obj;
}

OAIAppEngineHttpRequest OAITask::getAppEngineHttpRequest() const {
    return m_app_engine_http_request;
}
void OAITask::setAppEngineHttpRequest(const OAIAppEngineHttpRequest &app_engine_http_request) {
    m_app_engine_http_request = app_engine_http_request;
    m_app_engine_http_request_isSet = true;
}

bool OAITask::is_app_engine_http_request_Set() const{
    return m_app_engine_http_request_isSet;
}

bool OAITask::is_app_engine_http_request_Valid() const{
    return m_app_engine_http_request_isValid;
}

QString OAITask::getCreateTime() const {
    return m_create_time;
}
void OAITask::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAITask::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAITask::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIHttpRequest OAITask::getHttpRequest() const {
    return m_http_request;
}
void OAITask::setHttpRequest(const OAIHttpRequest &http_request) {
    m_http_request = http_request;
    m_http_request_isSet = true;
}

bool OAITask::is_http_request_Set() const{
    return m_http_request_isSet;
}

bool OAITask::is_http_request_Valid() const{
    return m_http_request_isValid;
}

QString OAITask::getName() const {
    return m_name;
}
void OAITask::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITask::is_name_Set() const{
    return m_name_isSet;
}

bool OAITask::is_name_Valid() const{
    return m_name_isValid;
}

OAIPullMessage OAITask::getPullMessage() const {
    return m_pull_message;
}
void OAITask::setPullMessage(const OAIPullMessage &pull_message) {
    m_pull_message = pull_message;
    m_pull_message_isSet = true;
}

bool OAITask::is_pull_message_Set() const{
    return m_pull_message_isSet;
}

bool OAITask::is_pull_message_Valid() const{
    return m_pull_message_isValid;
}

QString OAITask::getScheduleTime() const {
    return m_schedule_time;
}
void OAITask::setScheduleTime(const QString &schedule_time) {
    m_schedule_time = schedule_time;
    m_schedule_time_isSet = true;
}

bool OAITask::is_schedule_time_Set() const{
    return m_schedule_time_isSet;
}

bool OAITask::is_schedule_time_Valid() const{
    return m_schedule_time_isValid;
}

OAITaskStatus OAITask::getStatus() const {
    return m_status;
}
void OAITask::setStatus(const OAITaskStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITask::is_status_Set() const{
    return m_status_isSet;
}

bool OAITask::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITask::getView() const {
    return m_view;
}
void OAITask::setView(const QString &view) {
    m_view = view;
    m_view_isSet = true;
}

bool OAITask::is_view_Set() const{
    return m_view_isSet;
}

bool OAITask::is_view_Valid() const{
    return m_view_isValid;
}

bool OAITask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_engine_http_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITask::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
