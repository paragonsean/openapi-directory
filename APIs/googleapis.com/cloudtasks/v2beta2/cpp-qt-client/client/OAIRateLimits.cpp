/**
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRateLimits.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRateLimits::OAIRateLimits(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRateLimits::OAIRateLimits() {
    this->initializeModel();
}

OAIRateLimits::~OAIRateLimits() {}

void OAIRateLimits::initializeModel() {

    m_max_burst_size_isSet = false;
    m_max_burst_size_isValid = false;

    m_max_concurrent_tasks_isSet = false;
    m_max_concurrent_tasks_isValid = false;

    m_max_tasks_dispatched_per_second_isSet = false;
    m_max_tasks_dispatched_per_second_isValid = false;
}

void OAIRateLimits::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRateLimits::fromJsonObject(QJsonObject json) {

    m_max_burst_size_isValid = ::OpenAPI::fromJsonValue(m_max_burst_size, json[QString("maxBurstSize")]);
    m_max_burst_size_isSet = !json[QString("maxBurstSize")].isNull() && m_max_burst_size_isValid;

    m_max_concurrent_tasks_isValid = ::OpenAPI::fromJsonValue(m_max_concurrent_tasks, json[QString("maxConcurrentTasks")]);
    m_max_concurrent_tasks_isSet = !json[QString("maxConcurrentTasks")].isNull() && m_max_concurrent_tasks_isValid;

    m_max_tasks_dispatched_per_second_isValid = ::OpenAPI::fromJsonValue(m_max_tasks_dispatched_per_second, json[QString("maxTasksDispatchedPerSecond")]);
    m_max_tasks_dispatched_per_second_isSet = !json[QString("maxTasksDispatchedPerSecond")].isNull() && m_max_tasks_dispatched_per_second_isValid;
}

QString OAIRateLimits::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRateLimits::asJsonObject() const {
    QJsonObject obj;
    if (m_max_burst_size_isSet) {
        obj.insert(QString("maxBurstSize"), ::OpenAPI::toJsonValue(m_max_burst_size));
    }
    if (m_max_concurrent_tasks_isSet) {
        obj.insert(QString("maxConcurrentTasks"), ::OpenAPI::toJsonValue(m_max_concurrent_tasks));
    }
    if (m_max_tasks_dispatched_per_second_isSet) {
        obj.insert(QString("maxTasksDispatchedPerSecond"), ::OpenAPI::toJsonValue(m_max_tasks_dispatched_per_second));
    }
    return obj;
}

qint32 OAIRateLimits::getMaxBurstSize() const {
    return m_max_burst_size;
}
void OAIRateLimits::setMaxBurstSize(const qint32 &max_burst_size) {
    m_max_burst_size = max_burst_size;
    m_max_burst_size_isSet = true;
}

bool OAIRateLimits::is_max_burst_size_Set() const{
    return m_max_burst_size_isSet;
}

bool OAIRateLimits::is_max_burst_size_Valid() const{
    return m_max_burst_size_isValid;
}

qint32 OAIRateLimits::getMaxConcurrentTasks() const {
    return m_max_concurrent_tasks;
}
void OAIRateLimits::setMaxConcurrentTasks(const qint32 &max_concurrent_tasks) {
    m_max_concurrent_tasks = max_concurrent_tasks;
    m_max_concurrent_tasks_isSet = true;
}

bool OAIRateLimits::is_max_concurrent_tasks_Set() const{
    return m_max_concurrent_tasks_isSet;
}

bool OAIRateLimits::is_max_concurrent_tasks_Valid() const{
    return m_max_concurrent_tasks_isValid;
}

double OAIRateLimits::getMaxTasksDispatchedPerSecond() const {
    return m_max_tasks_dispatched_per_second;
}
void OAIRateLimits::setMaxTasksDispatchedPerSecond(const double &max_tasks_dispatched_per_second) {
    m_max_tasks_dispatched_per_second = max_tasks_dispatched_per_second;
    m_max_tasks_dispatched_per_second_isSet = true;
}

bool OAIRateLimits::is_max_tasks_dispatched_per_second_Set() const{
    return m_max_tasks_dispatched_per_second_isSet;
}

bool OAIRateLimits::is_max_tasks_dispatched_per_second_Valid() const{
    return m_max_tasks_dispatched_per_second_isValid;
}

bool OAIRateLimits::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_burst_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrent_tasks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_tasks_dispatched_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRateLimits::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
