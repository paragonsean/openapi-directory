/**
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OAuthToken from './OAuthToken';
import OidcToken from './OidcToken';

/**
 * The HttpRequest model module.
 * @module model/HttpRequest
 * @version v2beta2
 */
class HttpRequest {
    /**
     * Constructs a new <code>HttpRequest</code>.
     * HTTP request. The task will be pushed to the worker as an HTTP request. An HTTP request embodies a url, an http method, headers, body and authorization for the http task.
     * @alias module:model/HttpRequest
     */
    constructor() { 
        
        HttpRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HttpRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HttpRequest} obj Optional instance to populate.
     * @return {module:model/HttpRequest} The populated <code>HttpRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HttpRequest();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'Blob');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], {'String': 'String'});
            }
            if (data.hasOwnProperty('httpMethod')) {
                obj['httpMethod'] = ApiClient.convertToType(data['httpMethod'], 'String');
            }
            if (data.hasOwnProperty('oauthToken')) {
                obj['oauthToken'] = OAuthToken.constructFromObject(data['oauthToken']);
            }
            if (data.hasOwnProperty('oidcToken')) {
                obj['oidcToken'] = OidcToken.constructFromObject(data['oidcToken']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HttpRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HttpRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['httpMethod'] && !(typeof data['httpMethod'] === 'string' || data['httpMethod'] instanceof String)) {
            throw new Error("Expected the field `httpMethod` to be a primitive type in the JSON string but got " + data['httpMethod']);
        }
        // validate the optional field `oauthToken`
        if (data['oauthToken']) { // data not null
          OAuthToken.validateJSON(data['oauthToken']);
        }
        // validate the optional field `oidcToken`
        if (data['oidcToken']) { // data not null
          OidcToken.validateJSON(data['oidcToken']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a task with an incompatible HttpMethod.
 * @member {Blob} body
 */
HttpRequest.prototype['body'] = undefined;

/**
 * HTTP request headers. This map contains the header field names and values. Headers can be set when running the task is created or task is created. These headers represent a subset of the headers that will accompany the task's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is: * Any header that is prefixed with \"X-CloudTasks-\" will be treated as service header. Service headers define properties of the task and are predefined in CloudTask. * Host: This will be computed by Cloud Tasks and derived from HttpRequest.url. * Content-Length: This will be computed by Cloud Tasks. * User-Agent: This will be set to `\"Google-Cloud-Tasks\"`. * `X-Google-*`: Google use only. * `X-AppEngine-*`: Google use only. `Content-Type` won't be set by Cloud Tasks. You can explicitly set `Content-Type` to a media type when the task is created. For example, `Content-Type` can be set to `\"application/octet-stream\"` or `\"application/json\"`. Headers which can have multiple values (according to RFC2616) can be specified using comma-separated values. The size of the headers must be less than 80KB.
 * @member {Object.<String, String>} headers
 */
HttpRequest.prototype['headers'] = undefined;

/**
 * The HTTP method to use for the request. The default is POST.
 * @member {module:model/HttpRequest.HttpMethodEnum} httpMethod
 */
HttpRequest.prototype['httpMethod'] = undefined;

/**
 * @member {module:model/OAuthToken} oauthToken
 */
HttpRequest.prototype['oauthToken'] = undefined;

/**
 * @member {module:model/OidcToken} oidcToken
 */
HttpRequest.prototype['oidcToken'] = undefined;

/**
 * Required. The full url path that the request will be sent to. This string must begin with either \"http://\" or \"https://\". Some examples are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Tasks will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding. The `Location` header response from a redirect response [`300` - `399`] may be followed. The redirect is not counted as a separate attempt.
 * @member {String} url
 */
HttpRequest.prototype['url'] = undefined;





/**
 * Allowed values for the <code>httpMethod</code> property.
 * @enum {String}
 * @readonly
 */
HttpRequest['HttpMethodEnum'] = {

    /**
     * value: "HTTP_METHOD_UNSPECIFIED"
     * @const
     */
    "HTTP_METHOD_UNSPECIFIED": "HTTP_METHOD_UNSPECIFIED",

    /**
     * value: "POST"
     * @const
     */
    "POST": "POST",

    /**
     * value: "GET"
     * @const
     */
    "GET": "GET",

    /**
     * value: "HEAD"
     * @const
     */
    "HEAD": "HEAD",

    /**
     * value: "PUT"
     * @const
     */
    "PUT": "PUT",

    /**
     * value: "DELETE"
     * @const
     */
    "DELETE": "DELETE",

    /**
     * value: "PATCH"
     * @const
     */
    "PATCH": "PATCH",

    /**
     * value: "OPTIONS"
     * @const
     */
    "OPTIONS": "OPTIONS"
};



export default HttpRequest;

