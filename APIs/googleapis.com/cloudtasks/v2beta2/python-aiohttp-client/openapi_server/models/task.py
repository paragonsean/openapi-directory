# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_engine_http_request import AppEngineHttpRequest
from openapi_server.models.http_request import HttpRequest
from openapi_server.models.pull_message import PullMessage
from openapi_server.models.task_status import TaskStatus
from openapi_server import util


class Task(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_engine_http_request: AppEngineHttpRequest=None, create_time: str=None, http_request: HttpRequest=None, name: str=None, pull_message: PullMessage=None, schedule_time: str=None, status: TaskStatus=None, view: str=None):
        """Task - a model defined in OpenAPI

        :param app_engine_http_request: The app_engine_http_request of this Task.
        :param create_time: The create_time of this Task.
        :param http_request: The http_request of this Task.
        :param name: The name of this Task.
        :param pull_message: The pull_message of this Task.
        :param schedule_time: The schedule_time of this Task.
        :param status: The status of this Task.
        :param view: The view of this Task.
        """
        self.openapi_types = {
            'app_engine_http_request': AppEngineHttpRequest,
            'create_time': str,
            'http_request': HttpRequest,
            'name': str,
            'pull_message': PullMessage,
            'schedule_time': str,
            'status': TaskStatus,
            'view': str
        }

        self.attribute_map = {
            'app_engine_http_request': 'appEngineHttpRequest',
            'create_time': 'createTime',
            'http_request': 'httpRequest',
            'name': 'name',
            'pull_message': 'pullMessage',
            'schedule_time': 'scheduleTime',
            'status': 'status',
            'view': 'view'
        }

        self._app_engine_http_request = app_engine_http_request
        self._create_time = create_time
        self._http_request = http_request
        self._name = name
        self._pull_message = pull_message
        self._schedule_time = schedule_time
        self._status = status
        self._view = view

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Task':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Task of this Task.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_engine_http_request(self):
        """Gets the app_engine_http_request of this Task.


        :return: The app_engine_http_request of this Task.
        :rtype: AppEngineHttpRequest
        """
        return self._app_engine_http_request

    @app_engine_http_request.setter
    def app_engine_http_request(self, app_engine_http_request):
        """Sets the app_engine_http_request of this Task.


        :param app_engine_http_request: The app_engine_http_request of this Task.
        :type app_engine_http_request: AppEngineHttpRequest
        """

        self._app_engine_http_request = app_engine_http_request

    @property
    def create_time(self):
        """Gets the create_time of this Task.

        Output only. The time that the task was created. `create_time` will be truncated to the nearest second.

        :return: The create_time of this Task.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Task.

        Output only. The time that the task was created. `create_time` will be truncated to the nearest second.

        :param create_time: The create_time of this Task.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def http_request(self):
        """Gets the http_request of this Task.


        :return: The http_request of this Task.
        :rtype: HttpRequest
        """
        return self._http_request

    @http_request.setter
    def http_request(self, http_request):
        """Sets the http_request of this Task.


        :param http_request: The http_request of this Task.
        :type http_request: HttpRequest
        """

        self._http_request = http_request

    @property
    def name(self):
        """Gets the name of this Task.

        Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.

        :return: The name of this Task.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Task.

        Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.

        :param name: The name of this Task.
        :type name: str
        """

        self._name = name

    @property
    def pull_message(self):
        """Gets the pull_message of this Task.


        :return: The pull_message of this Task.
        :rtype: PullMessage
        """
        return self._pull_message

    @pull_message.setter
    def pull_message(self, pull_message):
        """Sets the pull_message of this Task.


        :param pull_message: The pull_message of this Task.
        :type pull_message: PullMessage
        """

        self._pull_message = pull_message

    @property
    def schedule_time(self):
        """Gets the schedule_time of this Task.

        The time when the task is scheduled to be attempted. For App Engine queues, this is when the task will be attempted or retried. For pull queues, this is the time when the task is available to be leased; if a task is currently leased, this is the time when the current lease expires, that is, the time that the task was leased plus the lease_duration. `schedule_time` will be truncated to the nearest microsecond.

        :return: The schedule_time of this Task.
        :rtype: str
        """
        return self._schedule_time

    @schedule_time.setter
    def schedule_time(self, schedule_time):
        """Sets the schedule_time of this Task.

        The time when the task is scheduled to be attempted. For App Engine queues, this is when the task will be attempted or retried. For pull queues, this is the time when the task is available to be leased; if a task is currently leased, this is the time when the current lease expires, that is, the time that the task was leased plus the lease_duration. `schedule_time` will be truncated to the nearest microsecond.

        :param schedule_time: The schedule_time of this Task.
        :type schedule_time: str
        """

        self._schedule_time = schedule_time

    @property
    def status(self):
        """Gets the status of this Task.


        :return: The status of this Task.
        :rtype: TaskStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Task.


        :param status: The status of this Task.
        :type status: TaskStatus
        """

        self._status = status

    @property
    def view(self):
        """Gets the view of this Task.

        Output only. The view specifies which subset of the Task has been returned.

        :return: The view of this Task.
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this Task.

        Output only. The view specifies which subset of the Task has been returned.

        :param view: The view of this Task.
        :type view: str
        """
        allowed_values = ["VIEW_UNSPECIFIED", "BASIC", "FULL"]  # noqa: E501
        if view not in allowed_values:
            raise ValueError(
                "Invalid value for `view` ({0}), must be one of {1}"
                .format(view, allowed_values)
            )

        self._view = view
