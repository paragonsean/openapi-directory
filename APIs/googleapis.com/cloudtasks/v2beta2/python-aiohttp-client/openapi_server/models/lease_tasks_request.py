# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LeaseTasksRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: str=None, lease_duration: str=None, max_tasks: int=None, response_view: str=None):
        """LeaseTasksRequest - a model defined in OpenAPI

        :param filter: The filter of this LeaseTasksRequest.
        :param lease_duration: The lease_duration of this LeaseTasksRequest.
        :param max_tasks: The max_tasks of this LeaseTasksRequest.
        :param response_view: The response_view of this LeaseTasksRequest.
        """
        self.openapi_types = {
            'filter': str,
            'lease_duration': str,
            'max_tasks': int,
            'response_view': str
        }

        self.attribute_map = {
            'filter': 'filter',
            'lease_duration': 'leaseDuration',
            'max_tasks': 'maxTasks',
            'response_view': 'responseView'
        }

        self._filter = filter
        self._lease_duration = lease_duration
        self._max_tasks = max_tasks
        self._response_view = response_view

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LeaseTasksRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LeaseTasksRequest of this LeaseTasksRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this LeaseTasksRequest.

        `filter` can be used to specify a subset of tasks to lease. When `filter` is set to `tag=` then the response will contain only tasks whose tag is equal to ``. `` must be less than 500 characters. When `filter` is set to `tag_function=oldest_tag()`, only tasks which have the same tag as the task with the oldest schedule_time will be returned. Grammar Syntax: * `filter = \"tag=\" tag | \"tag_function=\" function` * `tag = string` * `function = \"oldest_tag()\"` The `oldest_tag()` function returns tasks which have the same tag as the oldest task (ordered by schedule time). SDK compatibility: Although the SDK allows tags to be either string or [bytes](https://cloud.google.com/appengine/docs/standard/java/javadoc/com/google/appengine/api/taskqueue/TaskOptions.html#tag-byte:A-), only UTF-8 encoded tags can be used in Cloud Tasks. Tag which aren't UTF-8 encoded can't be used in the filter and the task's tag will be displayed as empty in Cloud Tasks.

        :return: The filter of this LeaseTasksRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this LeaseTasksRequest.

        `filter` can be used to specify a subset of tasks to lease. When `filter` is set to `tag=` then the response will contain only tasks whose tag is equal to ``. `` must be less than 500 characters. When `filter` is set to `tag_function=oldest_tag()`, only tasks which have the same tag as the task with the oldest schedule_time will be returned. Grammar Syntax: * `filter = \"tag=\" tag | \"tag_function=\" function` * `tag = string` * `function = \"oldest_tag()\"` The `oldest_tag()` function returns tasks which have the same tag as the oldest task (ordered by schedule time). SDK compatibility: Although the SDK allows tags to be either string or [bytes](https://cloud.google.com/appengine/docs/standard/java/javadoc/com/google/appengine/api/taskqueue/TaskOptions.html#tag-byte:A-), only UTF-8 encoded tags can be used in Cloud Tasks. Tag which aren't UTF-8 encoded can't be used in the filter and the task's tag will be displayed as empty in Cloud Tasks.

        :param filter: The filter of this LeaseTasksRequest.
        :type filter: str
        """

        self._filter = filter

    @property
    def lease_duration(self):
        """Gets the lease_duration of this LeaseTasksRequest.

        Required. The duration of the lease. Each task returned in the response will have its schedule_time set to the current time plus the `lease_duration`. The task is leased until its schedule_time; thus, the task will not be returned to another LeaseTasks call before its schedule_time. After the worker has successfully finished the work associated with the task, the worker must call via AcknowledgeTask before the schedule_time. Otherwise the task will be returned to a later LeaseTasks call so that another worker can retry it. The maximum lease duration is 1 week. `lease_duration` will be truncated to the nearest second.

        :return: The lease_duration of this LeaseTasksRequest.
        :rtype: str
        """
        return self._lease_duration

    @lease_duration.setter
    def lease_duration(self, lease_duration):
        """Sets the lease_duration of this LeaseTasksRequest.

        Required. The duration of the lease. Each task returned in the response will have its schedule_time set to the current time plus the `lease_duration`. The task is leased until its schedule_time; thus, the task will not be returned to another LeaseTasks call before its schedule_time. After the worker has successfully finished the work associated with the task, the worker must call via AcknowledgeTask before the schedule_time. Otherwise the task will be returned to a later LeaseTasks call so that another worker can retry it. The maximum lease duration is 1 week. `lease_duration` will be truncated to the nearest second.

        :param lease_duration: The lease_duration of this LeaseTasksRequest.
        :type lease_duration: str
        """

        self._lease_duration = lease_duration

    @property
    def max_tasks(self):
        """Gets the max_tasks of this LeaseTasksRequest.

        The maximum number of tasks to lease. The system will make a best effort to return as close to as `max_tasks` as possible. The largest that `max_tasks` can be is 1000. The maximum total size of a lease tasks response is 32 MB. If the sum of all task sizes requested reaches this limit, fewer tasks than requested are returned.

        :return: The max_tasks of this LeaseTasksRequest.
        :rtype: int
        """
        return self._max_tasks

    @max_tasks.setter
    def max_tasks(self, max_tasks):
        """Sets the max_tasks of this LeaseTasksRequest.

        The maximum number of tasks to lease. The system will make a best effort to return as close to as `max_tasks` as possible. The largest that `max_tasks` can be is 1000. The maximum total size of a lease tasks response is 32 MB. If the sum of all task sizes requested reaches this limit, fewer tasks than requested are returned.

        :param max_tasks: The max_tasks of this LeaseTasksRequest.
        :type max_tasks: int
        """

        self._max_tasks = max_tasks

    @property
    def response_view(self):
        """Gets the response_view of this LeaseTasksRequest.

        The response_view specifies which subset of the Task will be returned. By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains. Authorization for FULL requires `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/) permission on the Task resource.

        :return: The response_view of this LeaseTasksRequest.
        :rtype: str
        """
        return self._response_view

    @response_view.setter
    def response_view(self, response_view):
        """Sets the response_view of this LeaseTasksRequest.

        The response_view specifies which subset of the Task will be returned. By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains. Authorization for FULL requires `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/) permission on the Task resource.

        :param response_view: The response_view of this LeaseTasksRequest.
        :type response_view: str
        """
        allowed_values = ["VIEW_UNSPECIFIED", "BASIC", "FULL"]  # noqa: E501
        if response_view not in allowed_values:
            raise ValueError(
                "Invalid value for `response_view` ({0}), must be one of {1}"
                .format(response_view, allowed_values)
            )

        self._response_view = response_view
