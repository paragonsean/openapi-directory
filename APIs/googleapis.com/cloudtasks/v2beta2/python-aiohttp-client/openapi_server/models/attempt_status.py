# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class AttemptStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dispatch_time: str=None, response_status: Status=None, response_time: str=None, schedule_time: str=None):
        """AttemptStatus - a model defined in OpenAPI

        :param dispatch_time: The dispatch_time of this AttemptStatus.
        :param response_status: The response_status of this AttemptStatus.
        :param response_time: The response_time of this AttemptStatus.
        :param schedule_time: The schedule_time of this AttemptStatus.
        """
        self.openapi_types = {
            'dispatch_time': str,
            'response_status': Status,
            'response_time': str,
            'schedule_time': str
        }

        self.attribute_map = {
            'dispatch_time': 'dispatchTime',
            'response_status': 'responseStatus',
            'response_time': 'responseTime',
            'schedule_time': 'scheduleTime'
        }

        self._dispatch_time = dispatch_time
        self._response_status = response_status
        self._response_time = response_time
        self._schedule_time = schedule_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttemptStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttemptStatus of this AttemptStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dispatch_time(self):
        """Gets the dispatch_time of this AttemptStatus.

        Output only. The time that this attempt was dispatched. `dispatch_time` will be truncated to the nearest microsecond.

        :return: The dispatch_time of this AttemptStatus.
        :rtype: str
        """
        return self._dispatch_time

    @dispatch_time.setter
    def dispatch_time(self, dispatch_time):
        """Sets the dispatch_time of this AttemptStatus.

        Output only. The time that this attempt was dispatched. `dispatch_time` will be truncated to the nearest microsecond.

        :param dispatch_time: The dispatch_time of this AttemptStatus.
        :type dispatch_time: str
        """

        self._dispatch_time = dispatch_time

    @property
    def response_status(self):
        """Gets the response_status of this AttemptStatus.


        :return: The response_status of this AttemptStatus.
        :rtype: Status
        """
        return self._response_status

    @response_status.setter
    def response_status(self, response_status):
        """Sets the response_status of this AttemptStatus.


        :param response_status: The response_status of this AttemptStatus.
        :type response_status: Status
        """

        self._response_status = response_status

    @property
    def response_time(self):
        """Gets the response_time of this AttemptStatus.

        Output only. The time that this attempt response was received. `response_time` will be truncated to the nearest microsecond.

        :return: The response_time of this AttemptStatus.
        :rtype: str
        """
        return self._response_time

    @response_time.setter
    def response_time(self, response_time):
        """Sets the response_time of this AttemptStatus.

        Output only. The time that this attempt response was received. `response_time` will be truncated to the nearest microsecond.

        :param response_time: The response_time of this AttemptStatus.
        :type response_time: str
        """

        self._response_time = response_time

    @property
    def schedule_time(self):
        """Gets the schedule_time of this AttemptStatus.

        Output only. The time that this attempt was scheduled. `schedule_time` will be truncated to the nearest microsecond.

        :return: The schedule_time of this AttemptStatus.
        :rtype: str
        """
        return self._schedule_time

    @schedule_time.setter
    def schedule_time(self, schedule_time):
        """Sets the schedule_time of this AttemptStatus.

        Output only. The time that this attempt was scheduled. `schedule_time` will be truncated to the nearest microsecond.

        :param schedule_time: The schedule_time of this AttemptStatus.
        :type schedule_time: str
        """

        self._schedule_time = schedule_time
