# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RetryConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_attempts: int=None, max_backoff: str=None, max_doublings: int=None, max_retry_duration: str=None, min_backoff: str=None, unlimited_attempts: bool=None):
        """RetryConfig - a model defined in OpenAPI

        :param max_attempts: The max_attempts of this RetryConfig.
        :param max_backoff: The max_backoff of this RetryConfig.
        :param max_doublings: The max_doublings of this RetryConfig.
        :param max_retry_duration: The max_retry_duration of this RetryConfig.
        :param min_backoff: The min_backoff of this RetryConfig.
        :param unlimited_attempts: The unlimited_attempts of this RetryConfig.
        """
        self.openapi_types = {
            'max_attempts': int,
            'max_backoff': str,
            'max_doublings': int,
            'max_retry_duration': str,
            'min_backoff': str,
            'unlimited_attempts': bool
        }

        self.attribute_map = {
            'max_attempts': 'maxAttempts',
            'max_backoff': 'maxBackoff',
            'max_doublings': 'maxDoublings',
            'max_retry_duration': 'maxRetryDuration',
            'min_backoff': 'minBackoff',
            'unlimited_attempts': 'unlimitedAttempts'
        }

        self._max_attempts = max_attempts
        self._max_backoff = max_backoff
        self._max_doublings = max_doublings
        self._max_retry_duration = max_retry_duration
        self._min_backoff = min_backoff
        self._unlimited_attempts = unlimited_attempts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetryConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RetryConfig of this RetryConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_attempts(self):
        """Gets the max_attempts of this RetryConfig.

        The maximum number of attempts for a task. Cloud Tasks will attempt the task `max_attempts` times (that is, if the first attempt fails, then there will be `max_attempts - 1` retries). Must be > 0.

        :return: The max_attempts of this RetryConfig.
        :rtype: int
        """
        return self._max_attempts

    @max_attempts.setter
    def max_attempts(self, max_attempts):
        """Sets the max_attempts of this RetryConfig.

        The maximum number of attempts for a task. Cloud Tasks will attempt the task `max_attempts` times (that is, if the first attempt fails, then there will be `max_attempts - 1` retries). Must be > 0.

        :param max_attempts: The max_attempts of this RetryConfig.
        :type max_attempts: int
        """

        self._max_attempts = max_attempts

    @property
    def max_backoff(self):
        """Gets the max_backoff of this RetryConfig.

        A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. `max_backoff` will be truncated to the nearest second. This field has the same meaning as [max_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).

        :return: The max_backoff of this RetryConfig.
        :rtype: str
        """
        return self._max_backoff

    @max_backoff.setter
    def max_backoff(self, max_backoff):
        """Sets the max_backoff of this RetryConfig.

        A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. `max_backoff` will be truncated to the nearest second. This field has the same meaning as [max_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).

        :param max_backoff: The max_backoff of this RetryConfig.
        :type max_backoff: str
        """

        self._max_backoff = max_backoff

    @property
    def max_doublings(self):
        """Gets the max_doublings of this RetryConfig.

        The time between retries will double `max_doublings` times. A task's retry interval starts at min_backoff, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff up to max_attempts times. For example, if min_backoff is 10s, max_backoff is 300s, and `max_doublings` is 3, then the a task will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the task will retry at intervals of max_backoff until the task has been attempted max_attempts times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. This field has the same meaning as [max_doublings in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).

        :return: The max_doublings of this RetryConfig.
        :rtype: int
        """
        return self._max_doublings

    @max_doublings.setter
    def max_doublings(self, max_doublings):
        """Sets the max_doublings of this RetryConfig.

        The time between retries will double `max_doublings` times. A task's retry interval starts at min_backoff, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff up to max_attempts times. For example, if min_backoff is 10s, max_backoff is 300s, and `max_doublings` is 3, then the a task will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the task will retry at intervals of max_backoff until the task has been attempted max_attempts times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. This field has the same meaning as [max_doublings in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).

        :param max_doublings: The max_doublings of this RetryConfig.
        :type max_doublings: int
        """

        self._max_doublings = max_doublings

    @property
    def max_retry_duration(self):
        """Gets the max_retry_duration of this RetryConfig.

        If positive, `max_retry_duration` specifies the time limit for retrying a failed task, measured from when the task was first attempted. Once `max_retry_duration` time has passed *and* the task has been attempted max_attempts times, no further attempts will be made and the task will be deleted. If zero, then the task age is unlimited. If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. `max_retry_duration` will be truncated to the nearest second. This field has the same meaning as [task_age_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).

        :return: The max_retry_duration of this RetryConfig.
        :rtype: str
        """
        return self._max_retry_duration

    @max_retry_duration.setter
    def max_retry_duration(self, max_retry_duration):
        """Sets the max_retry_duration of this RetryConfig.

        If positive, `max_retry_duration` specifies the time limit for retrying a failed task, measured from when the task was first attempted. Once `max_retry_duration` time has passed *and* the task has been attempted max_attempts times, no further attempts will be made and the task will be deleted. If zero, then the task age is unlimited. If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. `max_retry_duration` will be truncated to the nearest second. This field has the same meaning as [task_age_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).

        :param max_retry_duration: The max_retry_duration of this RetryConfig.
        :type max_retry_duration: str
        """

        self._max_retry_duration = max_retry_duration

    @property
    def min_backoff(self):
        """Gets the min_backoff of this RetryConfig.

        A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. `min_backoff` will be truncated to the nearest second. This field has the same meaning as [min_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).

        :return: The min_backoff of this RetryConfig.
        :rtype: str
        """
        return self._min_backoff

    @min_backoff.setter
    def min_backoff(self, min_backoff):
        """Sets the min_backoff of this RetryConfig.

        A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. `min_backoff` will be truncated to the nearest second. This field has the same meaning as [min_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).

        :param min_backoff: The min_backoff of this RetryConfig.
        :type min_backoff: str
        """

        self._min_backoff = min_backoff

    @property
    def unlimited_attempts(self):
        """Gets the unlimited_attempts of this RetryConfig.

        If true, then the number of attempts is unlimited.

        :return: The unlimited_attempts of this RetryConfig.
        :rtype: bool
        """
        return self._unlimited_attempts

    @unlimited_attempts.setter
    def unlimited_attempts(self, unlimited_attempts):
        """Sets the unlimited_attempts of this RetryConfig.

        If true, then the number of attempts is unlimited.

        :param unlimited_attempts: The unlimited_attempts of this RetryConfig.
        :type unlimited_attempts: bool
        """

        self._unlimited_attempts = unlimited_attempts
