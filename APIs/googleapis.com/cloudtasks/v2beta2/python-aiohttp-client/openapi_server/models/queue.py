# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_engine_http_target import AppEngineHttpTarget
from openapi_server.models.http_target import HttpTarget
from openapi_server.models.queue_stats import QueueStats
from openapi_server.models.rate_limits import RateLimits
from openapi_server.models.retry_config import RetryConfig
from openapi_server import util


class Queue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_engine_http_target: AppEngineHttpTarget=None, http_target: HttpTarget=None, name: str=None, pull_target: object=None, purge_time: str=None, rate_limits: RateLimits=None, retry_config: RetryConfig=None, state: str=None, stats: QueueStats=None, task_ttl: str=None, tombstone_ttl: str=None):
        """Queue - a model defined in OpenAPI

        :param app_engine_http_target: The app_engine_http_target of this Queue.
        :param http_target: The http_target of this Queue.
        :param name: The name of this Queue.
        :param pull_target: The pull_target of this Queue.
        :param purge_time: The purge_time of this Queue.
        :param rate_limits: The rate_limits of this Queue.
        :param retry_config: The retry_config of this Queue.
        :param state: The state of this Queue.
        :param stats: The stats of this Queue.
        :param task_ttl: The task_ttl of this Queue.
        :param tombstone_ttl: The tombstone_ttl of this Queue.
        """
        self.openapi_types = {
            'app_engine_http_target': AppEngineHttpTarget,
            'http_target': HttpTarget,
            'name': str,
            'pull_target': object,
            'purge_time': str,
            'rate_limits': RateLimits,
            'retry_config': RetryConfig,
            'state': str,
            'stats': QueueStats,
            'task_ttl': str,
            'tombstone_ttl': str
        }

        self.attribute_map = {
            'app_engine_http_target': 'appEngineHttpTarget',
            'http_target': 'httpTarget',
            'name': 'name',
            'pull_target': 'pullTarget',
            'purge_time': 'purgeTime',
            'rate_limits': 'rateLimits',
            'retry_config': 'retryConfig',
            'state': 'state',
            'stats': 'stats',
            'task_ttl': 'taskTtl',
            'tombstone_ttl': 'tombstoneTtl'
        }

        self._app_engine_http_target = app_engine_http_target
        self._http_target = http_target
        self._name = name
        self._pull_target = pull_target
        self._purge_time = purge_time
        self._rate_limits = rate_limits
        self._retry_config = retry_config
        self._state = state
        self._stats = stats
        self._task_ttl = task_ttl
        self._tombstone_ttl = tombstone_ttl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Queue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Queue of this Queue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_engine_http_target(self):
        """Gets the app_engine_http_target of this Queue.


        :return: The app_engine_http_target of this Queue.
        :rtype: AppEngineHttpTarget
        """
        return self._app_engine_http_target

    @app_engine_http_target.setter
    def app_engine_http_target(self, app_engine_http_target):
        """Sets the app_engine_http_target of this Queue.


        :param app_engine_http_target: The app_engine_http_target of this Queue.
        :type app_engine_http_target: AppEngineHttpTarget
        """

        self._app_engine_http_target = app_engine_http_target

    @property
    def http_target(self):
        """Gets the http_target of this Queue.


        :return: The http_target of this Queue.
        :rtype: HttpTarget
        """
        return self._http_target

    @http_target.setter
    def http_target(self, http_target):
        """Sets the http_target of this Queue.


        :param http_target: The http_target of this Queue.
        :type http_target: HttpTarget
        """

        self._http_target = http_target

    @property
    def name(self):
        """Gets the name of this Queue.

        Caller-specified and required in CreateQueue, after which it becomes output only. The queue name. The queue name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the queue's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters.

        :return: The name of this Queue.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Queue.

        Caller-specified and required in CreateQueue, after which it becomes output only. The queue name. The queue name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the queue's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters.

        :param name: The name of this Queue.
        :type name: str
        """

        self._name = name

    @property
    def pull_target(self):
        """Gets the pull_target of this Queue.

        Pull target.

        :return: The pull_target of this Queue.
        :rtype: object
        """
        return self._pull_target

    @pull_target.setter
    def pull_target(self, pull_target):
        """Sets the pull_target of this Queue.

        Pull target.

        :param pull_target: The pull_target of this Queue.
        :type pull_target: object
        """

        self._pull_target = pull_target

    @property
    def purge_time(self):
        """Gets the purge_time of this Queue.

        Output only. The last time this queue was purged. All tasks that were created before this time were purged. A queue can be purged using PurgeQueue, the [App Engine Task Queue SDK, or the Cloud Console](https://cloud.google.com/appengine/docs/standard/python/taskqueue/push/deleting-tasks-and-queues#purging_all_tasks_from_a_queue). Purge time will be truncated to the nearest microsecond. Purge time will be unset if the queue has never been purged.

        :return: The purge_time of this Queue.
        :rtype: str
        """
        return self._purge_time

    @purge_time.setter
    def purge_time(self, purge_time):
        """Sets the purge_time of this Queue.

        Output only. The last time this queue was purged. All tasks that were created before this time were purged. A queue can be purged using PurgeQueue, the [App Engine Task Queue SDK, or the Cloud Console](https://cloud.google.com/appengine/docs/standard/python/taskqueue/push/deleting-tasks-and-queues#purging_all_tasks_from_a_queue). Purge time will be truncated to the nearest microsecond. Purge time will be unset if the queue has never been purged.

        :param purge_time: The purge_time of this Queue.
        :type purge_time: str
        """

        self._purge_time = purge_time

    @property
    def rate_limits(self):
        """Gets the rate_limits of this Queue.


        :return: The rate_limits of this Queue.
        :rtype: RateLimits
        """
        return self._rate_limits

    @rate_limits.setter
    def rate_limits(self, rate_limits):
        """Sets the rate_limits of this Queue.


        :param rate_limits: The rate_limits of this Queue.
        :type rate_limits: RateLimits
        """

        self._rate_limits = rate_limits

    @property
    def retry_config(self):
        """Gets the retry_config of this Queue.


        :return: The retry_config of this Queue.
        :rtype: RetryConfig
        """
        return self._retry_config

    @retry_config.setter
    def retry_config(self, retry_config):
        """Sets the retry_config of this Queue.


        :param retry_config: The retry_config of this Queue.
        :type retry_config: RetryConfig
        """

        self._retry_config = retry_config

    @property
    def state(self):
        """Gets the state of this Queue.

        Output only. The state of the queue. `state` can only be changed by called PauseQueue, ResumeQueue, or uploading [queue.yaml/xml](https://cloud.google.com/appengine/docs/python/config/queueref). UpdateQueue cannot be used to change `state`.

        :return: The state of this Queue.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Queue.

        Output only. The state of the queue. `state` can only be changed by called PauseQueue, ResumeQueue, or uploading [queue.yaml/xml](https://cloud.google.com/appengine/docs/python/config/queueref). UpdateQueue cannot be used to change `state`.

        :param state: The state of this Queue.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "RUNNING", "PAUSED", "DISABLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def stats(self):
        """Gets the stats of this Queue.


        :return: The stats of this Queue.
        :rtype: QueueStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this Queue.


        :param stats: The stats of this Queue.
        :type stats: QueueStats
        """

        self._stats = stats

    @property
    def task_ttl(self):
        """Gets the task_ttl of this Queue.

        The maximum amount of time that a task will be retained in this queue. Queues created by Cloud Tasks have a default `task_ttl` of 31 days. After a task has lived for `task_ttl`, the task will be deleted regardless of whether it was dispatched or not. The `task_ttl` for queues created via queue.yaml/xml is equal to the maximum duration because there is a [storage quota](https://cloud.google.com/appengine/quotas#Task_Queue) for these queues. To view the maximum valid duration, see the documentation for Duration.

        :return: The task_ttl of this Queue.
        :rtype: str
        """
        return self._task_ttl

    @task_ttl.setter
    def task_ttl(self, task_ttl):
        """Sets the task_ttl of this Queue.

        The maximum amount of time that a task will be retained in this queue. Queues created by Cloud Tasks have a default `task_ttl` of 31 days. After a task has lived for `task_ttl`, the task will be deleted regardless of whether it was dispatched or not. The `task_ttl` for queues created via queue.yaml/xml is equal to the maximum duration because there is a [storage quota](https://cloud.google.com/appengine/quotas#Task_Queue) for these queues. To view the maximum valid duration, see the documentation for Duration.

        :param task_ttl: The task_ttl of this Queue.
        :type task_ttl: str
        """

        self._task_ttl = task_ttl

    @property
    def tombstone_ttl(self):
        """Gets the tombstone_ttl of this Queue.

        The task tombstone time to live (TTL). After a task is deleted or completed, the task's tombstone is retained for the length of time specified by `tombstone_ttl`. The tombstone is used by task de-duplication; another task with the same name can't be created until the tombstone has expired. For more information about task de-duplication, see the documentation for CreateTaskRequest. Queues created by Cloud Tasks have a default `tombstone_ttl` of 1 hour.

        :return: The tombstone_ttl of this Queue.
        :rtype: str
        """
        return self._tombstone_ttl

    @tombstone_ttl.setter
    def tombstone_ttl(self, tombstone_ttl):
        """Sets the tombstone_ttl of this Queue.

        The task tombstone time to live (TTL). After a task is deleted or completed, the task's tombstone is retained for the length of time specified by `tombstone_ttl`. The tombstone is used by task de-duplication; another task with the same name can't be created until the tombstone has expired. For more information about task de-duplication, see the documentation for CreateTaskRequest. Queues created by Cloud Tasks have a default `tombstone_ttl` of 1 hour.

        :param tombstone_ttl: The tombstone_ttl of this Queue.
        :type tombstone_ttl: str
        """

        self._tombstone_ttl = tombstone_ttl
