# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_engine_routing import AppEngineRouting
from openapi_server import util


class AppEngineHttpRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_engine_routing: AppEngineRouting=None, headers: Dict[str, str]=None, http_method: str=None, payload: str=None, relative_url: str=None):
        """AppEngineHttpRequest - a model defined in OpenAPI

        :param app_engine_routing: The app_engine_routing of this AppEngineHttpRequest.
        :param headers: The headers of this AppEngineHttpRequest.
        :param http_method: The http_method of this AppEngineHttpRequest.
        :param payload: The payload of this AppEngineHttpRequest.
        :param relative_url: The relative_url of this AppEngineHttpRequest.
        """
        self.openapi_types = {
            'app_engine_routing': AppEngineRouting,
            'headers': Dict[str, str],
            'http_method': str,
            'payload': str,
            'relative_url': str
        }

        self.attribute_map = {
            'app_engine_routing': 'appEngineRouting',
            'headers': 'headers',
            'http_method': 'httpMethod',
            'payload': 'payload',
            'relative_url': 'relativeUrl'
        }

        self._app_engine_routing = app_engine_routing
        self._headers = headers
        self._http_method = http_method
        self._payload = payload
        self._relative_url = relative_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppEngineHttpRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppEngineHttpRequest of this AppEngineHttpRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_engine_routing(self):
        """Gets the app_engine_routing of this AppEngineHttpRequest.


        :return: The app_engine_routing of this AppEngineHttpRequest.
        :rtype: AppEngineRouting
        """
        return self._app_engine_routing

    @app_engine_routing.setter
    def app_engine_routing(self, app_engine_routing):
        """Sets the app_engine_routing of this AppEngineHttpRequest.


        :param app_engine_routing: The app_engine_routing of this AppEngineHttpRequest.
        :type app_engine_routing: AppEngineRouting
        """

        self._app_engine_routing = app_engine_routing

    @property
    def headers(self):
        """Gets the headers of this AppEngineHttpRequest.

        HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. Repeated headers are not supported but a header value can contain commas. Cloud Tasks sets some headers to default values: * `User-Agent`: By default, this header is `\"AppEngine-Google; (+http://code.google.com/appengine)\"`. This header can be modified, but Cloud Tasks will append `\"AppEngine-Google; (+http://code.google.com/appengine)\"` to the modified `User-Agent`. If the task has a payload, Cloud Tasks sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `\"application/octet-stream\"`. The default can be overridden by explicitly setting `Content-Type` to a particular media type when the task is created. For example, `Content-Type` can be set to `\"application/json\"`. * `Content-Length`: This is computed by Cloud Tasks. This value is output only. It cannot be changed. The headers below cannot be set or overridden: * `Host` * `X-Google-*` * `X-AppEngine-*` In addition, Cloud Tasks sets some headers when the task is dispatched, such as headers containing information about the task; see [request headers](https://cloud.google.com/appengine/docs/python/taskqueue/push/creating-handlers#reading_request_headers). These headers are set only when the task is dispatched, so they are not visible when the task is returned in a Cloud Tasks response. Although there is no specific limit for the maximum number of headers or the size, there is a limit on the maximum size of the Task. For more information, see the CreateTask documentation.

        :return: The headers of this AppEngineHttpRequest.
        :rtype: Dict[str, str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this AppEngineHttpRequest.

        HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. Repeated headers are not supported but a header value can contain commas. Cloud Tasks sets some headers to default values: * `User-Agent`: By default, this header is `\"AppEngine-Google; (+http://code.google.com/appengine)\"`. This header can be modified, but Cloud Tasks will append `\"AppEngine-Google; (+http://code.google.com/appengine)\"` to the modified `User-Agent`. If the task has a payload, Cloud Tasks sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `\"application/octet-stream\"`. The default can be overridden by explicitly setting `Content-Type` to a particular media type when the task is created. For example, `Content-Type` can be set to `\"application/json\"`. * `Content-Length`: This is computed by Cloud Tasks. This value is output only. It cannot be changed. The headers below cannot be set or overridden: * `Host` * `X-Google-*` * `X-AppEngine-*` In addition, Cloud Tasks sets some headers when the task is dispatched, such as headers containing information about the task; see [request headers](https://cloud.google.com/appengine/docs/python/taskqueue/push/creating-handlers#reading_request_headers). These headers are set only when the task is dispatched, so they are not visible when the task is returned in a Cloud Tasks response. Although there is no specific limit for the maximum number of headers or the size, there is a limit on the maximum size of the Task. For more information, see the CreateTask documentation.

        :param headers: The headers of this AppEngineHttpRequest.
        :type headers: Dict[str, str]
        """

        self._headers = headers

    @property
    def http_method(self):
        """Gets the http_method of this AppEngineHttpRequest.

        The HTTP method to use for the request. The default is POST. The app's request handler for the task's target URL must be able to handle HTTP requests with this http_method, otherwise the task attempt fails with error code 405 (Method Not Allowed). See [Writing a push task request handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler) and the App Engine documentation for your runtime on [How Requests are Handled](https://cloud.google.com/appengine/docs/standard/python3/how-requests-are-handled).

        :return: The http_method of this AppEngineHttpRequest.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this AppEngineHttpRequest.

        The HTTP method to use for the request. The default is POST. The app's request handler for the task's target URL must be able to handle HTTP requests with this http_method, otherwise the task attempt fails with error code 405 (Method Not Allowed). See [Writing a push task request handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler) and the App Engine documentation for your runtime on [How Requests are Handled](https://cloud.google.com/appengine/docs/standard/python3/how-requests-are-handled).

        :param http_method: The http_method of this AppEngineHttpRequest.
        :type http_method: str
        """
        allowed_values = ["HTTP_METHOD_UNSPECIFIED", "POST", "GET", "HEAD", "PUT", "DELETE", "PATCH", "OPTIONS"]  # noqa: E501
        if http_method not in allowed_values:
            raise ValueError(
                "Invalid value for `http_method` ({0}), must be one of {1}"
                .format(http_method, allowed_values)
            )

        self._http_method = http_method

    @property
    def payload(self):
        """Gets the payload of this AppEngineHttpRequest.

        Payload. The payload will be sent as the HTTP message body. A message body, and thus a payload, is allowed only if the HTTP method is POST or PUT. It is an error to set a data payload on a task with an incompatible HttpMethod.

        :return: The payload of this AppEngineHttpRequest.
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this AppEngineHttpRequest.

        Payload. The payload will be sent as the HTTP message body. A message body, and thus a payload, is allowed only if the HTTP method is POST or PUT. It is an error to set a data payload on a task with an incompatible HttpMethod.

        :param payload: The payload of this AppEngineHttpRequest.
        :type payload: str
        """

        self._payload = payload

    @property
    def relative_url(self):
        """Gets the relative_url of this AppEngineHttpRequest.

        The relative URL. The relative URL must begin with \"/\" and must be a valid HTTP relative URL. It can contain a path and query string arguments. If the relative URL is empty, then the root path \"/\" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.

        :return: The relative_url of this AppEngineHttpRequest.
        :rtype: str
        """
        return self._relative_url

    @relative_url.setter
    def relative_url(self, relative_url):
        """Sets the relative_url of this AppEngineHttpRequest.

        The relative URL. The relative URL must begin with \"/\" and must be a valid HTTP relative URL. It can contain a path and query string arguments. If the relative URL is empty, then the root path \"/\" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.

        :param relative_url: The relative_url of this AppEngineHttpRequest.
        :type relative_url: str
        """

        self._relative_url = relative_url
