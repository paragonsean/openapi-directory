# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RenewLeaseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lease_duration: str=None, response_view: str=None, schedule_time: str=None):
        """RenewLeaseRequest - a model defined in OpenAPI

        :param lease_duration: The lease_duration of this RenewLeaseRequest.
        :param response_view: The response_view of this RenewLeaseRequest.
        :param schedule_time: The schedule_time of this RenewLeaseRequest.
        """
        self.openapi_types = {
            'lease_duration': str,
            'response_view': str,
            'schedule_time': str
        }

        self.attribute_map = {
            'lease_duration': 'leaseDuration',
            'response_view': 'responseView',
            'schedule_time': 'scheduleTime'
        }

        self._lease_duration = lease_duration
        self._response_view = response_view
        self._schedule_time = schedule_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RenewLeaseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RenewLeaseRequest of this RenewLeaseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lease_duration(self):
        """Gets the lease_duration of this RenewLeaseRequest.

        Required. The desired new lease duration, starting from now. The maximum lease duration is 1 week. `lease_duration` will be truncated to the nearest second.

        :return: The lease_duration of this RenewLeaseRequest.
        :rtype: str
        """
        return self._lease_duration

    @lease_duration.setter
    def lease_duration(self, lease_duration):
        """Sets the lease_duration of this RenewLeaseRequest.

        Required. The desired new lease duration, starting from now. The maximum lease duration is 1 week. `lease_duration` will be truncated to the nearest second.

        :param lease_duration: The lease_duration of this RenewLeaseRequest.
        :type lease_duration: str
        """

        self._lease_duration = lease_duration

    @property
    def response_view(self):
        """Gets the response_view of this RenewLeaseRequest.

        The response_view specifies which subset of the Task will be returned. By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains. Authorization for FULL requires `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/) permission on the Task resource.

        :return: The response_view of this RenewLeaseRequest.
        :rtype: str
        """
        return self._response_view

    @response_view.setter
    def response_view(self, response_view):
        """Sets the response_view of this RenewLeaseRequest.

        The response_view specifies which subset of the Task will be returned. By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains. Authorization for FULL requires `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/) permission on the Task resource.

        :param response_view: The response_view of this RenewLeaseRequest.
        :type response_view: str
        """
        allowed_values = ["VIEW_UNSPECIFIED", "BASIC", "FULL"]  # noqa: E501
        if response_view not in allowed_values:
            raise ValueError(
                "Invalid value for `response_view` ({0}), must be one of {1}"
                .format(response_view, allowed_values)
            )

        self._response_view = response_view

    @property
    def schedule_time(self):
        """Gets the schedule_time of this RenewLeaseRequest.

        Required. The task's current schedule time, available in the schedule_time returned by LeaseTasks response or RenewLease response. This restriction is to ensure that your worker currently holds the lease.

        :return: The schedule_time of this RenewLeaseRequest.
        :rtype: str
        """
        return self._schedule_time

    @schedule_time.setter
    def schedule_time(self, schedule_time):
        """Sets the schedule_time of this RenewLeaseRequest.

        Required. The task's current schedule time, available in the schedule_time returned by LeaseTasks response or RenewLease response. This restriction is to ensure that your worker currently holds the lease.

        :param schedule_time: The schedule_time of this RenewLeaseRequest.
        :type schedule_time: str
        """

        self._schedule_time = schedule_time
