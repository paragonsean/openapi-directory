# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueueStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concurrent_dispatches_count: str=None, effective_execution_rate: float=None, executed_last_minute_count: str=None, oldest_estimated_arrival_time: str=None, tasks_count: str=None):
        """QueueStats - a model defined in OpenAPI

        :param concurrent_dispatches_count: The concurrent_dispatches_count of this QueueStats.
        :param effective_execution_rate: The effective_execution_rate of this QueueStats.
        :param executed_last_minute_count: The executed_last_minute_count of this QueueStats.
        :param oldest_estimated_arrival_time: The oldest_estimated_arrival_time of this QueueStats.
        :param tasks_count: The tasks_count of this QueueStats.
        """
        self.openapi_types = {
            'concurrent_dispatches_count': str,
            'effective_execution_rate': float,
            'executed_last_minute_count': str,
            'oldest_estimated_arrival_time': str,
            'tasks_count': str
        }

        self.attribute_map = {
            'concurrent_dispatches_count': 'concurrentDispatchesCount',
            'effective_execution_rate': 'effectiveExecutionRate',
            'executed_last_minute_count': 'executedLastMinuteCount',
            'oldest_estimated_arrival_time': 'oldestEstimatedArrivalTime',
            'tasks_count': 'tasksCount'
        }

        self._concurrent_dispatches_count = concurrent_dispatches_count
        self._effective_execution_rate = effective_execution_rate
        self._executed_last_minute_count = executed_last_minute_count
        self._oldest_estimated_arrival_time = oldest_estimated_arrival_time
        self._tasks_count = tasks_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueueStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueueStats of this QueueStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concurrent_dispatches_count(self):
        """Gets the concurrent_dispatches_count of this QueueStats.

        Output only. The number of requests that the queue has dispatched but has not received a reply for yet.

        :return: The concurrent_dispatches_count of this QueueStats.
        :rtype: str
        """
        return self._concurrent_dispatches_count

    @concurrent_dispatches_count.setter
    def concurrent_dispatches_count(self, concurrent_dispatches_count):
        """Sets the concurrent_dispatches_count of this QueueStats.

        Output only. The number of requests that the queue has dispatched but has not received a reply for yet.

        :param concurrent_dispatches_count: The concurrent_dispatches_count of this QueueStats.
        :type concurrent_dispatches_count: str
        """

        self._concurrent_dispatches_count = concurrent_dispatches_count

    @property
    def effective_execution_rate(self):
        """Gets the effective_execution_rate of this QueueStats.

        Output only. The current maximum number of tasks per second executed by the queue. The maximum value of this variable is controlled by the RateLimits of the Queue. However, this value could be less to avoid overloading the endpoints tasks in the queue are targeting.

        :return: The effective_execution_rate of this QueueStats.
        :rtype: float
        """
        return self._effective_execution_rate

    @effective_execution_rate.setter
    def effective_execution_rate(self, effective_execution_rate):
        """Sets the effective_execution_rate of this QueueStats.

        Output only. The current maximum number of tasks per second executed by the queue. The maximum value of this variable is controlled by the RateLimits of the Queue. However, this value could be less to avoid overloading the endpoints tasks in the queue are targeting.

        :param effective_execution_rate: The effective_execution_rate of this QueueStats.
        :type effective_execution_rate: float
        """

        self._effective_execution_rate = effective_execution_rate

    @property
    def executed_last_minute_count(self):
        """Gets the executed_last_minute_count of this QueueStats.

        Output only. The number of tasks that the queue has dispatched and received a reply for during the last minute. This variable counts both successful and non-successful executions.

        :return: The executed_last_minute_count of this QueueStats.
        :rtype: str
        """
        return self._executed_last_minute_count

    @executed_last_minute_count.setter
    def executed_last_minute_count(self, executed_last_minute_count):
        """Sets the executed_last_minute_count of this QueueStats.

        Output only. The number of tasks that the queue has dispatched and received a reply for during the last minute. This variable counts both successful and non-successful executions.

        :param executed_last_minute_count: The executed_last_minute_count of this QueueStats.
        :type executed_last_minute_count: str
        """

        self._executed_last_minute_count = executed_last_minute_count

    @property
    def oldest_estimated_arrival_time(self):
        """Gets the oldest_estimated_arrival_time of this QueueStats.

        Output only. An estimation of the nearest time in the future where a task in the queue is scheduled to be executed.

        :return: The oldest_estimated_arrival_time of this QueueStats.
        :rtype: str
        """
        return self._oldest_estimated_arrival_time

    @oldest_estimated_arrival_time.setter
    def oldest_estimated_arrival_time(self, oldest_estimated_arrival_time):
        """Sets the oldest_estimated_arrival_time of this QueueStats.

        Output only. An estimation of the nearest time in the future where a task in the queue is scheduled to be executed.

        :param oldest_estimated_arrival_time: The oldest_estimated_arrival_time of this QueueStats.
        :type oldest_estimated_arrival_time: str
        """

        self._oldest_estimated_arrival_time = oldest_estimated_arrival_time

    @property
    def tasks_count(self):
        """Gets the tasks_count of this QueueStats.

        Output only. An estimation of the number of tasks in the queue, that is, the tasks in the queue that haven't been executed, the tasks in the queue which the queue has dispatched but has not yet received a reply for, and the failed tasks that the queue is retrying.

        :return: The tasks_count of this QueueStats.
        :rtype: str
        """
        return self._tasks_count

    @tasks_count.setter
    def tasks_count(self, tasks_count):
        """Sets the tasks_count of this QueueStats.

        Output only. An estimation of the number of tasks in the queue, that is, the tasks in the queue that haven't been executed, the tasks in the queue which the queue has dispatched but has not yet received a reply for, and the failed tasks that the queue is retrying.

        :param tasks_count: The tasks_count of this QueueStats.
        :type tasks_count: str
        """

        self._tasks_count = tasks_count
