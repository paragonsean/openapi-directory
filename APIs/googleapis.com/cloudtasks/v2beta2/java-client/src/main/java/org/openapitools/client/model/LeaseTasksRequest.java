/*
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for leasing tasks using LeaseTasks.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:06.175700-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LeaseTasksRequest {
  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_LEASE_DURATION = "leaseDuration";
  @SerializedName(SERIALIZED_NAME_LEASE_DURATION)
  private String leaseDuration;

  public static final String SERIALIZED_NAME_MAX_TASKS = "maxTasks";
  @SerializedName(SERIALIZED_NAME_MAX_TASKS)
  private Integer maxTasks;

  /**
   * The response_view specifies which subset of the Task will be returned. By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains. Authorization for FULL requires &#x60;cloudtasks.tasks.fullView&#x60; [Google IAM](https://cloud.google.com/iam/) permission on the Task resource.
   */
  @JsonAdapter(ResponseViewEnum.Adapter.class)
  public enum ResponseViewEnum {
    VIEW_UNSPECIFIED("VIEW_UNSPECIFIED"),
    
    BASIC("BASIC"),
    
    FULL("FULL");

    private String value;

    ResponseViewEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResponseViewEnum fromValue(String value) {
      for (ResponseViewEnum b : ResponseViewEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResponseViewEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResponseViewEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResponseViewEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResponseViewEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResponseViewEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESPONSE_VIEW = "responseView";
  @SerializedName(SERIALIZED_NAME_RESPONSE_VIEW)
  private ResponseViewEnum responseView;

  public LeaseTasksRequest() {
  }

  public LeaseTasksRequest filter(String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * &#x60;filter&#x60; can be used to specify a subset of tasks to lease. When &#x60;filter&#x60; is set to &#x60;tag&#x3D;&#x60; then the response will contain only tasks whose tag is equal to &#x60;&#x60;. &#x60;&#x60; must be less than 500 characters. When &#x60;filter&#x60; is set to &#x60;tag_function&#x3D;oldest_tag()&#x60;, only tasks which have the same tag as the task with the oldest schedule_time will be returned. Grammar Syntax: * &#x60;filter &#x3D; \&quot;tag&#x3D;\&quot; tag | \&quot;tag_function&#x3D;\&quot; function&#x60; * &#x60;tag &#x3D; string&#x60; * &#x60;function &#x3D; \&quot;oldest_tag()\&quot;&#x60; The &#x60;oldest_tag()&#x60; function returns tasks which have the same tag as the oldest task (ordered by schedule time). SDK compatibility: Although the SDK allows tags to be either string or [bytes](https://cloud.google.com/appengine/docs/standard/java/javadoc/com/google/appengine/api/taskqueue/TaskOptions.html#tag-byte:A-), only UTF-8 encoded tags can be used in Cloud Tasks. Tag which aren&#39;t UTF-8 encoded can&#39;t be used in the filter and the task&#39;s tag will be displayed as empty in Cloud Tasks.
   * @return filter
   */
  @javax.annotation.Nullable
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }


  public LeaseTasksRequest leaseDuration(String leaseDuration) {
    this.leaseDuration = leaseDuration;
    return this;
  }

  /**
   * Required. The duration of the lease. Each task returned in the response will have its schedule_time set to the current time plus the &#x60;lease_duration&#x60;. The task is leased until its schedule_time; thus, the task will not be returned to another LeaseTasks call before its schedule_time. After the worker has successfully finished the work associated with the task, the worker must call via AcknowledgeTask before the schedule_time. Otherwise the task will be returned to a later LeaseTasks call so that another worker can retry it. The maximum lease duration is 1 week. &#x60;lease_duration&#x60; will be truncated to the nearest second.
   * @return leaseDuration
   */
  @javax.annotation.Nullable
  public String getLeaseDuration() {
    return leaseDuration;
  }

  public void setLeaseDuration(String leaseDuration) {
    this.leaseDuration = leaseDuration;
  }


  public LeaseTasksRequest maxTasks(Integer maxTasks) {
    this.maxTasks = maxTasks;
    return this;
  }

  /**
   * The maximum number of tasks to lease. The system will make a best effort to return as close to as &#x60;max_tasks&#x60; as possible. The largest that &#x60;max_tasks&#x60; can be is 1000. The maximum total size of a lease tasks response is 32 MB. If the sum of all task sizes requested reaches this limit, fewer tasks than requested are returned.
   * @return maxTasks
   */
  @javax.annotation.Nullable
  public Integer getMaxTasks() {
    return maxTasks;
  }

  public void setMaxTasks(Integer maxTasks) {
    this.maxTasks = maxTasks;
  }


  public LeaseTasksRequest responseView(ResponseViewEnum responseView) {
    this.responseView = responseView;
    return this;
  }

  /**
   * The response_view specifies which subset of the Task will be returned. By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains. Authorization for FULL requires &#x60;cloudtasks.tasks.fullView&#x60; [Google IAM](https://cloud.google.com/iam/) permission on the Task resource.
   * @return responseView
   */
  @javax.annotation.Nullable
  public ResponseViewEnum getResponseView() {
    return responseView;
  }

  public void setResponseView(ResponseViewEnum responseView) {
    this.responseView = responseView;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeaseTasksRequest leaseTasksRequest = (LeaseTasksRequest) o;
    return Objects.equals(this.filter, leaseTasksRequest.filter) &&
        Objects.equals(this.leaseDuration, leaseTasksRequest.leaseDuration) &&
        Objects.equals(this.maxTasks, leaseTasksRequest.maxTasks) &&
        Objects.equals(this.responseView, leaseTasksRequest.responseView);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filter, leaseDuration, maxTasks, responseView);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeaseTasksRequest {\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    leaseDuration: ").append(toIndentedString(leaseDuration)).append("\n");
    sb.append("    maxTasks: ").append(toIndentedString(maxTasks)).append("\n");
    sb.append("    responseView: ").append(toIndentedString(responseView)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filter");
    openapiFields.add("leaseDuration");
    openapiFields.add("maxTasks");
    openapiFields.add("responseView");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LeaseTasksRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LeaseTasksRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LeaseTasksRequest is not found in the empty JSON string", LeaseTasksRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LeaseTasksRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LeaseTasksRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      if ((jsonObj.get("leaseDuration") != null && !jsonObj.get("leaseDuration").isJsonNull()) && !jsonObj.get("leaseDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leaseDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leaseDuration").toString()));
      }
      if ((jsonObj.get("responseView") != null && !jsonObj.get("responseView").isJsonNull()) && !jsonObj.get("responseView").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseView` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseView").toString()));
      }
      // validate the optional field `responseView`
      if (jsonObj.get("responseView") != null && !jsonObj.get("responseView").isJsonNull()) {
        ResponseViewEnum.validateJsonElement(jsonObj.get("responseView"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LeaseTasksRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LeaseTasksRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LeaseTasksRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LeaseTasksRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<LeaseTasksRequest>() {
           @Override
           public void write(JsonWriter out, LeaseTasksRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LeaseTasksRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LeaseTasksRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LeaseTasksRequest
   * @throws IOException if the JSON string is invalid with respect to LeaseTasksRequest
   */
  public static LeaseTasksRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LeaseTasksRequest.class);
  }

  /**
   * Convert an instance of LeaseTasksRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

