/*
 * Cloud Tasks API
 * Manages the execution of large numbers of distributed requests.
 *
 * The version of the OpenAPI document: v2beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for renewing a lease using RenewLease.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:06.175700-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RenewLeaseRequest {
  public static final String SERIALIZED_NAME_LEASE_DURATION = "leaseDuration";
  @SerializedName(SERIALIZED_NAME_LEASE_DURATION)
  private String leaseDuration;

  /**
   * The response_view specifies which subset of the Task will be returned. By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains. Authorization for FULL requires &#x60;cloudtasks.tasks.fullView&#x60; [Google IAM](https://cloud.google.com/iam/) permission on the Task resource.
   */
  @JsonAdapter(ResponseViewEnum.Adapter.class)
  public enum ResponseViewEnum {
    VIEW_UNSPECIFIED("VIEW_UNSPECIFIED"),
    
    BASIC("BASIC"),
    
    FULL("FULL");

    private String value;

    ResponseViewEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResponseViewEnum fromValue(String value) {
      for (ResponseViewEnum b : ResponseViewEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResponseViewEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResponseViewEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResponseViewEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResponseViewEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResponseViewEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESPONSE_VIEW = "responseView";
  @SerializedName(SERIALIZED_NAME_RESPONSE_VIEW)
  private ResponseViewEnum responseView;

  public static final String SERIALIZED_NAME_SCHEDULE_TIME = "scheduleTime";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_TIME)
  private String scheduleTime;

  public RenewLeaseRequest() {
  }

  public RenewLeaseRequest leaseDuration(String leaseDuration) {
    this.leaseDuration = leaseDuration;
    return this;
  }

  /**
   * Required. The desired new lease duration, starting from now. The maximum lease duration is 1 week. &#x60;lease_duration&#x60; will be truncated to the nearest second.
   * @return leaseDuration
   */
  @javax.annotation.Nullable
  public String getLeaseDuration() {
    return leaseDuration;
  }

  public void setLeaseDuration(String leaseDuration) {
    this.leaseDuration = leaseDuration;
  }


  public RenewLeaseRequest responseView(ResponseViewEnum responseView) {
    this.responseView = responseView;
    return this;
  }

  /**
   * The response_view specifies which subset of the Task will be returned. By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains. Authorization for FULL requires &#x60;cloudtasks.tasks.fullView&#x60; [Google IAM](https://cloud.google.com/iam/) permission on the Task resource.
   * @return responseView
   */
  @javax.annotation.Nullable
  public ResponseViewEnum getResponseView() {
    return responseView;
  }

  public void setResponseView(ResponseViewEnum responseView) {
    this.responseView = responseView;
  }


  public RenewLeaseRequest scheduleTime(String scheduleTime) {
    this.scheduleTime = scheduleTime;
    return this;
  }

  /**
   * Required. The task&#39;s current schedule time, available in the schedule_time returned by LeaseTasks response or RenewLease response. This restriction is to ensure that your worker currently holds the lease.
   * @return scheduleTime
   */
  @javax.annotation.Nullable
  public String getScheduleTime() {
    return scheduleTime;
  }

  public void setScheduleTime(String scheduleTime) {
    this.scheduleTime = scheduleTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RenewLeaseRequest renewLeaseRequest = (RenewLeaseRequest) o;
    return Objects.equals(this.leaseDuration, renewLeaseRequest.leaseDuration) &&
        Objects.equals(this.responseView, renewLeaseRequest.responseView) &&
        Objects.equals(this.scheduleTime, renewLeaseRequest.scheduleTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(leaseDuration, responseView, scheduleTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RenewLeaseRequest {\n");
    sb.append("    leaseDuration: ").append(toIndentedString(leaseDuration)).append("\n");
    sb.append("    responseView: ").append(toIndentedString(responseView)).append("\n");
    sb.append("    scheduleTime: ").append(toIndentedString(scheduleTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("leaseDuration");
    openapiFields.add("responseView");
    openapiFields.add("scheduleTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RenewLeaseRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RenewLeaseRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RenewLeaseRequest is not found in the empty JSON string", RenewLeaseRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RenewLeaseRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RenewLeaseRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("leaseDuration") != null && !jsonObj.get("leaseDuration").isJsonNull()) && !jsonObj.get("leaseDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leaseDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leaseDuration").toString()));
      }
      if ((jsonObj.get("responseView") != null && !jsonObj.get("responseView").isJsonNull()) && !jsonObj.get("responseView").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseView` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseView").toString()));
      }
      // validate the optional field `responseView`
      if (jsonObj.get("responseView") != null && !jsonObj.get("responseView").isJsonNull()) {
        ResponseViewEnum.validateJsonElement(jsonObj.get("responseView"));
      }
      if ((jsonObj.get("scheduleTime") != null && !jsonObj.get("scheduleTime").isJsonNull()) && !jsonObj.get("scheduleTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduleTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduleTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RenewLeaseRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RenewLeaseRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RenewLeaseRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RenewLeaseRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RenewLeaseRequest>() {
           @Override
           public void write(JsonWriter out, RenewLeaseRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RenewLeaseRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RenewLeaseRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RenewLeaseRequest
   * @throws IOException if the JSON string is invalid with respect to RenewLeaseRequest
   */
  public static RenewLeaseRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RenewLeaseRequest.class);
  }

  /**
   * Convert an instance of RenewLeaseRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

