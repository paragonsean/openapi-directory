# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.linked_resource import LinkedResource
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: str=None, data_exchange: str=None, last_modify_time: str=None, linked_dataset_map: Dict[str, LinkedResource]=None, listing: str=None, name: str=None, organization_display_name: str=None, organization_id: str=None, state: str=None, subscriber_contact: str=None):
        """Subscription - a model defined in OpenAPI

        :param creation_time: The creation_time of this Subscription.
        :param data_exchange: The data_exchange of this Subscription.
        :param last_modify_time: The last_modify_time of this Subscription.
        :param linked_dataset_map: The linked_dataset_map of this Subscription.
        :param listing: The listing of this Subscription.
        :param name: The name of this Subscription.
        :param organization_display_name: The organization_display_name of this Subscription.
        :param organization_id: The organization_id of this Subscription.
        :param state: The state of this Subscription.
        :param subscriber_contact: The subscriber_contact of this Subscription.
        """
        self.openapi_types = {
            'creation_time': str,
            'data_exchange': str,
            'last_modify_time': str,
            'linked_dataset_map': Dict[str, LinkedResource],
            'listing': str,
            'name': str,
            'organization_display_name': str,
            'organization_id': str,
            'state': str,
            'subscriber_contact': str
        }

        self.attribute_map = {
            'creation_time': 'creationTime',
            'data_exchange': 'dataExchange',
            'last_modify_time': 'lastModifyTime',
            'linked_dataset_map': 'linkedDatasetMap',
            'listing': 'listing',
            'name': 'name',
            'organization_display_name': 'organizationDisplayName',
            'organization_id': 'organizationId',
            'state': 'state',
            'subscriber_contact': 'subscriberContact'
        }

        self._creation_time = creation_time
        self._data_exchange = data_exchange
        self._last_modify_time = last_modify_time
        self._linked_dataset_map = linked_dataset_map
        self._listing = listing
        self._name = name
        self._organization_display_name = organization_display_name
        self._organization_id = organization_id
        self._state = state
        self._subscriber_contact = subscriber_contact

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this Subscription.

        Output only. Timestamp when the subscription was created.

        :return: The creation_time of this Subscription.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Subscription.

        Output only. Timestamp when the subscription was created.

        :param creation_time: The creation_time of this Subscription.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def data_exchange(self):
        """Gets the data_exchange of this Subscription.

        Output only. Resource name of the source Data Exchange. e.g. projects/123/locations/US/dataExchanges/456

        :return: The data_exchange of this Subscription.
        :rtype: str
        """
        return self._data_exchange

    @data_exchange.setter
    def data_exchange(self, data_exchange):
        """Sets the data_exchange of this Subscription.

        Output only. Resource name of the source Data Exchange. e.g. projects/123/locations/US/dataExchanges/456

        :param data_exchange: The data_exchange of this Subscription.
        :type data_exchange: str
        """

        self._data_exchange = data_exchange

    @property
    def last_modify_time(self):
        """Gets the last_modify_time of this Subscription.

        Output only. Timestamp when the subscription was last modified.

        :return: The last_modify_time of this Subscription.
        :rtype: str
        """
        return self._last_modify_time

    @last_modify_time.setter
    def last_modify_time(self, last_modify_time):
        """Sets the last_modify_time of this Subscription.

        Output only. Timestamp when the subscription was last modified.

        :param last_modify_time: The last_modify_time of this Subscription.
        :type last_modify_time: str
        """

        self._last_modify_time = last_modify_time

    @property
    def linked_dataset_map(self):
        """Gets the linked_dataset_map of this Subscription.

        Output only. Map of listing resource names to associated linked resource, e.g. projects/123/locations/US/dataExchanges/456/listings/789 -> projects/123/datasets/my_dataset For listing-level subscriptions, this is a map of size 1. Only contains values if state == STATE_ACTIVE.

        :return: The linked_dataset_map of this Subscription.
        :rtype: Dict[str, LinkedResource]
        """
        return self._linked_dataset_map

    @linked_dataset_map.setter
    def linked_dataset_map(self, linked_dataset_map):
        """Sets the linked_dataset_map of this Subscription.

        Output only. Map of listing resource names to associated linked resource, e.g. projects/123/locations/US/dataExchanges/456/listings/789 -> projects/123/datasets/my_dataset For listing-level subscriptions, this is a map of size 1. Only contains values if state == STATE_ACTIVE.

        :param linked_dataset_map: The linked_dataset_map of this Subscription.
        :type linked_dataset_map: Dict[str, LinkedResource]
        """

        self._linked_dataset_map = linked_dataset_map

    @property
    def listing(self):
        """Gets the listing of this Subscription.

        Output only. Resource name of the source Listing. e.g. projects/123/locations/US/dataExchanges/456/listings/789

        :return: The listing of this Subscription.
        :rtype: str
        """
        return self._listing

    @listing.setter
    def listing(self, listing):
        """Sets the listing of this Subscription.

        Output only. Resource name of the source Listing. e.g. projects/123/locations/US/dataExchanges/456/listings/789

        :param listing: The listing of this Subscription.
        :type listing: str
        """

        self._listing = listing

    @property
    def name(self):
        """Gets the name of this Subscription.

        Output only. The resource name of the subscription. e.g. `projects/myproject/locations/US/subscriptions/123`.

        :return: The name of this Subscription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Subscription.

        Output only. The resource name of the subscription. e.g. `projects/myproject/locations/US/subscriptions/123`.

        :param name: The name of this Subscription.
        :type name: str
        """

        self._name = name

    @property
    def organization_display_name(self):
        """Gets the organization_display_name of this Subscription.

        Output only. Display name of the project of this subscription.

        :return: The organization_display_name of this Subscription.
        :rtype: str
        """
        return self._organization_display_name

    @organization_display_name.setter
    def organization_display_name(self, organization_display_name):
        """Sets the organization_display_name of this Subscription.

        Output only. Display name of the project of this subscription.

        :param organization_display_name: The organization_display_name of this Subscription.
        :type organization_display_name: str
        """

        self._organization_display_name = organization_display_name

    @property
    def organization_id(self):
        """Gets the organization_id of this Subscription.

        Output only. Organization of the project this subscription belongs to.

        :return: The organization_id of this Subscription.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Subscription.

        Output only. Organization of the project this subscription belongs to.

        :param organization_id: The organization_id of this Subscription.
        :type organization_id: str
        """

        self._organization_id = organization_id

    @property
    def state(self):
        """Gets the state of this Subscription.

        Output only. Current state of the subscription.

        :return: The state of this Subscription.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Subscription.

        Output only. Current state of the subscription.

        :param state: The state of this Subscription.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "STATE_ACTIVE", "STATE_STALE", "STATE_INACTIVE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def subscriber_contact(self):
        """Gets the subscriber_contact of this Subscription.

        Output only. Email of the subscriber.

        :return: The subscriber_contact of this Subscription.
        :rtype: str
        """
        return self._subscriber_contact

    @subscriber_contact.setter
    def subscriber_contact(self, subscriber_contact):
        """Sets the subscriber_contact of this Subscription.

        Output only. Email of the subscriber.

        :param subscriber_contact: The subscriber_contact of this Subscription.
        :type subscriber_contact: str
        """

        self._subscriber_contact = subscriber_contact
