/**
 * Analytics Hub API
 * Exchange data and analytics assets securely and efficiently.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BigQueryDatasetSource from './BigQueryDatasetSource';
import DataProvider from './DataProvider';
import Publisher from './Publisher';
import RestrictedExportConfig from './RestrictedExportConfig';

/**
 * The Listing model module.
 * @module model/Listing
 * @version v1
 */
class Listing {
    /**
     * Constructs a new <code>Listing</code>.
     * A listing is what gets published into a data exchange that a subscriber can subscribe to. It contains a reference to the data source along with descriptive information that will help subscribers find and subscribe the data.
     * @alias module:model/Listing
     */
    constructor() { 
        
        Listing.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Listing</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Listing} obj Optional instance to populate.
     * @return {module:model/Listing} The populated <code>Listing</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Listing();

            if (data.hasOwnProperty('bigqueryDataset')) {
                obj['bigqueryDataset'] = BigQueryDatasetSource.constructFromObject(data['bigqueryDataset']);
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
            if (data.hasOwnProperty('dataProvider')) {
                obj['dataProvider'] = DataProvider.constructFromObject(data['dataProvider']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('documentation')) {
                obj['documentation'] = ApiClient.convertToType(data['documentation'], 'String');
            }
            if (data.hasOwnProperty('icon')) {
                obj['icon'] = ApiClient.convertToType(data['icon'], 'Blob');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('primaryContact')) {
                obj['primaryContact'] = ApiClient.convertToType(data['primaryContact'], 'String');
            }
            if (data.hasOwnProperty('publisher')) {
                obj['publisher'] = Publisher.constructFromObject(data['publisher']);
            }
            if (data.hasOwnProperty('requestAccess')) {
                obj['requestAccess'] = ApiClient.convertToType(data['requestAccess'], 'String');
            }
            if (data.hasOwnProperty('restrictedExportConfig')) {
                obj['restrictedExportConfig'] = RestrictedExportConfig.constructFromObject(data['restrictedExportConfig']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Listing</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Listing</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bigqueryDataset`
        if (data['bigqueryDataset']) { // data not null
          BigQueryDatasetSource.validateJSON(data['bigqueryDataset']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        // validate the optional field `dataProvider`
        if (data['dataProvider']) { // data not null
          DataProvider.validateJSON(data['dataProvider']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['documentation'] && !(typeof data['documentation'] === 'string' || data['documentation'] instanceof String)) {
            throw new Error("Expected the field `documentation` to be a primitive type in the JSON string but got " + data['documentation']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['primaryContact'] && !(typeof data['primaryContact'] === 'string' || data['primaryContact'] instanceof String)) {
            throw new Error("Expected the field `primaryContact` to be a primitive type in the JSON string but got " + data['primaryContact']);
        }
        // validate the optional field `publisher`
        if (data['publisher']) { // data not null
          Publisher.validateJSON(data['publisher']);
        }
        // ensure the json data is a string
        if (data['requestAccess'] && !(typeof data['requestAccess'] === 'string' || data['requestAccess'] instanceof String)) {
            throw new Error("Expected the field `requestAccess` to be a primitive type in the JSON string but got " + data['requestAccess']);
        }
        // validate the optional field `restrictedExportConfig`
        if (data['restrictedExportConfig']) { // data not null
          RestrictedExportConfig.validateJSON(data['restrictedExportConfig']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * @member {module:model/BigQueryDatasetSource} bigqueryDataset
 */
Listing.prototype['bigqueryDataset'] = undefined;

/**
 * Optional. Categories of the listing. Up to two categories are allowed.
 * @member {Array.<module:model/Listing.CategoriesEnum>} categories
 */
Listing.prototype['categories'] = undefined;

/**
 * @member {module:model/DataProvider} dataProvider
 */
Listing.prototype['dataProvider'] = undefined;

/**
 * Optional. Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). Default value is an empty string. Max length: 2000 bytes.
 * @member {String} description
 */
Listing.prototype['description'] = undefined;

/**
 * Required. Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&) and can't start or end with spaces. Default value is an empty string. Max length: 63 bytes.
 * @member {String} displayName
 */
Listing.prototype['displayName'] = undefined;

/**
 * Optional. Documentation describing the listing.
 * @member {String} documentation
 */
Listing.prototype['documentation'] = undefined;

/**
 * Optional. Base64 encoded image representing the listing. Max Size: 3.0MiB Expected image dimensions are 512x512 pixels, however the API only performs validation on size of the encoded data. Note: For byte fields, the contents of the field are base64-encoded (which increases the size of the data by 33-36%) when using JSON on the wire.
 * @member {Blob} icon
 */
Listing.prototype['icon'] = undefined;

/**
 * Output only. The resource name of the listing. e.g. `projects/myproject/locations/US/dataExchanges/123/listings/456`
 * @member {String} name
 */
Listing.prototype['name'] = undefined;

/**
 * Optional. Email or URL of the primary point of contact of the listing. Max Length: 1000 bytes.
 * @member {String} primaryContact
 */
Listing.prototype['primaryContact'] = undefined;

/**
 * @member {module:model/Publisher} publisher
 */
Listing.prototype['publisher'] = undefined;

/**
 * Optional. Email or URL of the request access of the listing. Subscribers can use this reference to request access. Max Length: 1000 bytes.
 * @member {String} requestAccess
 */
Listing.prototype['requestAccess'] = undefined;

/**
 * @member {module:model/RestrictedExportConfig} restrictedExportConfig
 */
Listing.prototype['restrictedExportConfig'] = undefined;

/**
 * Output only. Current state of the listing.
 * @member {module:model/Listing.StateEnum} state
 */
Listing.prototype['state'] = undefined;





/**
 * Allowed values for the <code>categories</code> property.
 * @enum {String}
 * @readonly
 */
Listing['CategoriesEnum'] = {

    /**
     * value: "CATEGORY_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "CATEGORY_UNSPECIFIED",

    /**
     * value: "CATEGORY_OTHERS"
     * @const
     */
    "OTHERS": "CATEGORY_OTHERS",

    /**
     * value: "CATEGORY_ADVERTISING_AND_MARKETING"
     * @const
     */
    "ADVERTISING_AND_MARKETING": "CATEGORY_ADVERTISING_AND_MARKETING",

    /**
     * value: "CATEGORY_COMMERCE"
     * @const
     */
    "COMMERCE": "CATEGORY_COMMERCE",

    /**
     * value: "CATEGORY_CLIMATE_AND_ENVIRONMENT"
     * @const
     */
    "CLIMATE_AND_ENVIRONMENT": "CATEGORY_CLIMATE_AND_ENVIRONMENT",

    /**
     * value: "CATEGORY_DEMOGRAPHICS"
     * @const
     */
    "DEMOGRAPHICS": "CATEGORY_DEMOGRAPHICS",

    /**
     * value: "CATEGORY_ECONOMICS"
     * @const
     */
    "ECONOMICS": "CATEGORY_ECONOMICS",

    /**
     * value: "CATEGORY_EDUCATION"
     * @const
     */
    "EDUCATION": "CATEGORY_EDUCATION",

    /**
     * value: "CATEGORY_ENERGY"
     * @const
     */
    "ENERGY": "CATEGORY_ENERGY",

    /**
     * value: "CATEGORY_FINANCIAL"
     * @const
     */
    "FINANCIAL": "CATEGORY_FINANCIAL",

    /**
     * value: "CATEGORY_GAMING"
     * @const
     */
    "GAMING": "CATEGORY_GAMING",

    /**
     * value: "CATEGORY_GEOSPATIAL"
     * @const
     */
    "GEOSPATIAL": "CATEGORY_GEOSPATIAL",

    /**
     * value: "CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE"
     * @const
     */
    "HEALTHCARE_AND_LIFE_SCIENCE": "CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE",

    /**
     * value: "CATEGORY_MEDIA"
     * @const
     */
    "MEDIA": "CATEGORY_MEDIA",

    /**
     * value: "CATEGORY_PUBLIC_SECTOR"
     * @const
     */
    "PUBLIC_SECTOR": "CATEGORY_PUBLIC_SECTOR",

    /**
     * value: "CATEGORY_RETAIL"
     * @const
     */
    "RETAIL": "CATEGORY_RETAIL",

    /**
     * value: "CATEGORY_SPORTS"
     * @const
     */
    "SPORTS": "CATEGORY_SPORTS",

    /**
     * value: "CATEGORY_SCIENCE_AND_RESEARCH"
     * @const
     */
    "SCIENCE_AND_RESEARCH": "CATEGORY_SCIENCE_AND_RESEARCH",

    /**
     * value: "CATEGORY_TRANSPORTATION_AND_LOGISTICS"
     * @const
     */
    "TRANSPORTATION_AND_LOGISTICS": "CATEGORY_TRANSPORTATION_AND_LOGISTICS",

    /**
     * value: "CATEGORY_TRAVEL_AND_TOURISM"
     * @const
     */
    "TRAVEL_AND_TOURISM": "CATEGORY_TRAVEL_AND_TOURISM"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Listing['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE"
};



export default Listing;

