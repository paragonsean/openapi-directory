/**
 * Analytics Hub API
 * Exchange data and analytics assets securely and efficiently.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LinkedResource from './LinkedResource';

/**
 * The Subscription model module.
 * @module model/Subscription
 * @version v1
 */
class Subscription {
    /**
     * Constructs a new <code>Subscription</code>.
     * A subscription represents a subscribers&#39; access to a particular set of published data. It contains references to associated listings, data exchanges, and linked datasets.
     * @alias module:model/Subscription
     */
    constructor() { 
        
        Subscription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Subscription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Subscription} obj Optional instance to populate.
     * @return {module:model/Subscription} The populated <code>Subscription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Subscription();

            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'String');
            }
            if (data.hasOwnProperty('dataExchange')) {
                obj['dataExchange'] = ApiClient.convertToType(data['dataExchange'], 'String');
            }
            if (data.hasOwnProperty('lastModifyTime')) {
                obj['lastModifyTime'] = ApiClient.convertToType(data['lastModifyTime'], 'String');
            }
            if (data.hasOwnProperty('linkedDatasetMap')) {
                obj['linkedDatasetMap'] = ApiClient.convertToType(data['linkedDatasetMap'], {'String': LinkedResource});
            }
            if (data.hasOwnProperty('listing')) {
                obj['listing'] = ApiClient.convertToType(data['listing'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('organizationDisplayName')) {
                obj['organizationDisplayName'] = ApiClient.convertToType(data['organizationDisplayName'], 'String');
            }
            if (data.hasOwnProperty('organizationId')) {
                obj['organizationId'] = ApiClient.convertToType(data['organizationId'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('subscriberContact')) {
                obj['subscriberContact'] = ApiClient.convertToType(data['subscriberContact'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Subscription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Subscription</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['creationTime'] && !(typeof data['creationTime'] === 'string' || data['creationTime'] instanceof String)) {
            throw new Error("Expected the field `creationTime` to be a primitive type in the JSON string but got " + data['creationTime']);
        }
        // ensure the json data is a string
        if (data['dataExchange'] && !(typeof data['dataExchange'] === 'string' || data['dataExchange'] instanceof String)) {
            throw new Error("Expected the field `dataExchange` to be a primitive type in the JSON string but got " + data['dataExchange']);
        }
        // ensure the json data is a string
        if (data['lastModifyTime'] && !(typeof data['lastModifyTime'] === 'string' || data['lastModifyTime'] instanceof String)) {
            throw new Error("Expected the field `lastModifyTime` to be a primitive type in the JSON string but got " + data['lastModifyTime']);
        }
        // ensure the json data is a string
        if (data['listing'] && !(typeof data['listing'] === 'string' || data['listing'] instanceof String)) {
            throw new Error("Expected the field `listing` to be a primitive type in the JSON string but got " + data['listing']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['organizationDisplayName'] && !(typeof data['organizationDisplayName'] === 'string' || data['organizationDisplayName'] instanceof String)) {
            throw new Error("Expected the field `organizationDisplayName` to be a primitive type in the JSON string but got " + data['organizationDisplayName']);
        }
        // ensure the json data is a string
        if (data['organizationId'] && !(typeof data['organizationId'] === 'string' || data['organizationId'] instanceof String)) {
            throw new Error("Expected the field `organizationId` to be a primitive type in the JSON string but got " + data['organizationId']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['subscriberContact'] && !(typeof data['subscriberContact'] === 'string' || data['subscriberContact'] instanceof String)) {
            throw new Error("Expected the field `subscriberContact` to be a primitive type in the JSON string but got " + data['subscriberContact']);
        }

        return true;
    }


}



/**
 * Output only. Timestamp when the subscription was created.
 * @member {String} creationTime
 */
Subscription.prototype['creationTime'] = undefined;

/**
 * Output only. Resource name of the source Data Exchange. e.g. projects/123/locations/US/dataExchanges/456
 * @member {String} dataExchange
 */
Subscription.prototype['dataExchange'] = undefined;

/**
 * Output only. Timestamp when the subscription was last modified.
 * @member {String} lastModifyTime
 */
Subscription.prototype['lastModifyTime'] = undefined;

/**
 * Output only. Map of listing resource names to associated linked resource, e.g. projects/123/locations/US/dataExchanges/456/listings/789 -> projects/123/datasets/my_dataset For listing-level subscriptions, this is a map of size 1. Only contains values if state == STATE_ACTIVE.
 * @member {Object.<String, module:model/LinkedResource>} linkedDatasetMap
 */
Subscription.prototype['linkedDatasetMap'] = undefined;

/**
 * Output only. Resource name of the source Listing. e.g. projects/123/locations/US/dataExchanges/456/listings/789
 * @member {String} listing
 */
Subscription.prototype['listing'] = undefined;

/**
 * Output only. The resource name of the subscription. e.g. `projects/myproject/locations/US/subscriptions/123`.
 * @member {String} name
 */
Subscription.prototype['name'] = undefined;

/**
 * Output only. Display name of the project of this subscription.
 * @member {String} organizationDisplayName
 */
Subscription.prototype['organizationDisplayName'] = undefined;

/**
 * Output only. Organization of the project this subscription belongs to.
 * @member {String} organizationId
 */
Subscription.prototype['organizationId'] = undefined;

/**
 * Output only. Current state of the subscription.
 * @member {module:model/Subscription.StateEnum} state
 */
Subscription.prototype['state'] = undefined;

/**
 * Output only. Email of the subscriber.
 * @member {String} subscriberContact
 */
Subscription.prototype['subscriberContact'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Subscription['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "STATE_ACTIVE"
     * @const
     */
    "ACTIVE": "STATE_ACTIVE",

    /**
     * value: "STATE_STALE"
     * @const
     */
    "STALE": "STATE_STALE",

    /**
     * value: "STATE_INACTIVE"
     * @const
     */
    "INACTIVE": "STATE_INACTIVE"
};



export default Subscription;

