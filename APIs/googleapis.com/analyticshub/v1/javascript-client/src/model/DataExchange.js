/**
 * Analytics Hub API
 * Exchange data and analytics assets securely and efficiently.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SharingEnvironmentConfig from './SharingEnvironmentConfig';

/**
 * The DataExchange model module.
 * @module model/DataExchange
 * @version v1
 */
class DataExchange {
    /**
     * Constructs a new <code>DataExchange</code>.
     * A data exchange is a container that lets you share data. Along with the descriptive information about the data exchange, it contains listings that reference shared datasets.
     * @alias module:model/DataExchange
     */
    constructor() { 
        
        DataExchange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataExchange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataExchange} obj Optional instance to populate.
     * @return {module:model/DataExchange} The populated <code>DataExchange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataExchange();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('documentation')) {
                obj['documentation'] = ApiClient.convertToType(data['documentation'], 'String');
            }
            if (data.hasOwnProperty('icon')) {
                obj['icon'] = ApiClient.convertToType(data['icon'], 'Blob');
            }
            if (data.hasOwnProperty('listingCount')) {
                obj['listingCount'] = ApiClient.convertToType(data['listingCount'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('primaryContact')) {
                obj['primaryContact'] = ApiClient.convertToType(data['primaryContact'], 'String');
            }
            if (data.hasOwnProperty('sharingEnvironmentConfig')) {
                obj['sharingEnvironmentConfig'] = SharingEnvironmentConfig.constructFromObject(data['sharingEnvironmentConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataExchange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataExchange</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['documentation'] && !(typeof data['documentation'] === 'string' || data['documentation'] instanceof String)) {
            throw new Error("Expected the field `documentation` to be a primitive type in the JSON string but got " + data['documentation']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['primaryContact'] && !(typeof data['primaryContact'] === 'string' || data['primaryContact'] instanceof String)) {
            throw new Error("Expected the field `primaryContact` to be a primitive type in the JSON string but got " + data['primaryContact']);
        }
        // validate the optional field `sharingEnvironmentConfig`
        if (data['sharingEnvironmentConfig']) { // data not null
          SharingEnvironmentConfig.validateJSON(data['sharingEnvironmentConfig']);
        }

        return true;
    }


}



/**
 * Optional. Description of the data exchange. The description must not contain Unicode non-characters as well as C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). Default value is an empty string. Max length: 2000 bytes.
 * @member {String} description
 */
DataExchange.prototype['description'] = undefined;

/**
 * Required. Human-readable display name of the data exchange. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&) and must not start or end with spaces. Default value is an empty string. Max length: 63 bytes.
 * @member {String} displayName
 */
DataExchange.prototype['displayName'] = undefined;

/**
 * Optional. Documentation describing the data exchange.
 * @member {String} documentation
 */
DataExchange.prototype['documentation'] = undefined;

/**
 * Optional. Base64 encoded image representing the data exchange. Max Size: 3.0MiB Expected image dimensions are 512x512 pixels, however the API only performs validation on size of the encoded data. Note: For byte fields, the content of the fields are base64-encoded (which increases the size of the data by 33-36%) when using JSON on the wire.
 * @member {Blob} icon
 */
DataExchange.prototype['icon'] = undefined;

/**
 * Output only. Number of listings contained in the data exchange.
 * @member {Number} listingCount
 */
DataExchange.prototype['listingCount'] = undefined;

/**
 * Output only. The resource name of the data exchange. e.g. `projects/myproject/locations/US/dataExchanges/123`.
 * @member {String} name
 */
DataExchange.prototype['name'] = undefined;

/**
 * Optional. Email or URL of the primary point of contact of the data exchange. Max Length: 1000 bytes.
 * @member {String} primaryContact
 */
DataExchange.prototype['primaryContact'] = undefined;

/**
 * @member {module:model/SharingEnvironmentConfig} sharingEnvironmentConfig
 */
DataExchange.prototype['sharingEnvironmentConfig'] = undefined;






export default DataExchange;

