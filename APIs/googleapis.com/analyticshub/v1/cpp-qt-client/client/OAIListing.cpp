/**
 * Analytics Hub API
 * Exchange data and analytics assets securely and efficiently.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListing::OAIListing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListing::OAIListing() {
    this->initializeModel();
}

OAIListing::~OAIListing() {}

void OAIListing::initializeModel() {

    m_bigquery_dataset_isSet = false;
    m_bigquery_dataset_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_data_provider_isSet = false;
    m_data_provider_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_documentation_isSet = false;
    m_documentation_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_primary_contact_isSet = false;
    m_primary_contact_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_request_access_isSet = false;
    m_request_access_isValid = false;

    m_restricted_export_config_isSet = false;
    m_restricted_export_config_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIListing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListing::fromJsonObject(QJsonObject json) {

    m_bigquery_dataset_isValid = ::OpenAPI::fromJsonValue(m_bigquery_dataset, json[QString("bigqueryDataset")]);
    m_bigquery_dataset_isSet = !json[QString("bigqueryDataset")].isNull() && m_bigquery_dataset_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_data_provider_isValid = ::OpenAPI::fromJsonValue(m_data_provider, json[QString("dataProvider")]);
    m_data_provider_isSet = !json[QString("dataProvider")].isNull() && m_data_provider_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_documentation_isValid = ::OpenAPI::fromJsonValue(m_documentation, json[QString("documentation")]);
    m_documentation_isSet = !json[QString("documentation")].isNull() && m_documentation_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_primary_contact_isValid = ::OpenAPI::fromJsonValue(m_primary_contact, json[QString("primaryContact")]);
    m_primary_contact_isSet = !json[QString("primaryContact")].isNull() && m_primary_contact_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_request_access_isValid = ::OpenAPI::fromJsonValue(m_request_access, json[QString("requestAccess")]);
    m_request_access_isSet = !json[QString("requestAccess")].isNull() && m_request_access_isValid;

    m_restricted_export_config_isValid = ::OpenAPI::fromJsonValue(m_restricted_export_config, json[QString("restrictedExportConfig")]);
    m_restricted_export_config_isSet = !json[QString("restrictedExportConfig")].isNull() && m_restricted_export_config_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIListing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListing::asJsonObject() const {
    QJsonObject obj;
    if (m_bigquery_dataset.isSet()) {
        obj.insert(QString("bigqueryDataset"), ::OpenAPI::toJsonValue(m_bigquery_dataset));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_data_provider.isSet()) {
        obj.insert(QString("dataProvider"), ::OpenAPI::toJsonValue(m_data_provider));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_documentation_isSet) {
        obj.insert(QString("documentation"), ::OpenAPI::toJsonValue(m_documentation));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_primary_contact_isSet) {
        obj.insert(QString("primaryContact"), ::OpenAPI::toJsonValue(m_primary_contact));
    }
    if (m_publisher.isSet()) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_request_access_isSet) {
        obj.insert(QString("requestAccess"), ::OpenAPI::toJsonValue(m_request_access));
    }
    if (m_restricted_export_config.isSet()) {
        obj.insert(QString("restrictedExportConfig"), ::OpenAPI::toJsonValue(m_restricted_export_config));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIBigQueryDatasetSource OAIListing::getBigqueryDataset() const {
    return m_bigquery_dataset;
}
void OAIListing::setBigqueryDataset(const OAIBigQueryDatasetSource &bigquery_dataset) {
    m_bigquery_dataset = bigquery_dataset;
    m_bigquery_dataset_isSet = true;
}

bool OAIListing::is_bigquery_dataset_Set() const{
    return m_bigquery_dataset_isSet;
}

bool OAIListing::is_bigquery_dataset_Valid() const{
    return m_bigquery_dataset_isValid;
}

QList<QString> OAIListing::getCategories() const {
    return m_categories;
}
void OAIListing::setCategories(const QList<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIListing::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIListing::is_categories_Valid() const{
    return m_categories_isValid;
}

OAIDataProvider OAIListing::getDataProvider() const {
    return m_data_provider;
}
void OAIListing::setDataProvider(const OAIDataProvider &data_provider) {
    m_data_provider = data_provider;
    m_data_provider_isSet = true;
}

bool OAIListing::is_data_provider_Set() const{
    return m_data_provider_isSet;
}

bool OAIListing::is_data_provider_Valid() const{
    return m_data_provider_isValid;
}

QString OAIListing::getDescription() const {
    return m_description;
}
void OAIListing::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIListing::is_description_Set() const{
    return m_description_isSet;
}

bool OAIListing::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIListing::getDisplayName() const {
    return m_display_name;
}
void OAIListing::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIListing::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIListing::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIListing::getDocumentation() const {
    return m_documentation;
}
void OAIListing::setDocumentation(const QString &documentation) {
    m_documentation = documentation;
    m_documentation_isSet = true;
}

bool OAIListing::is_documentation_Set() const{
    return m_documentation_isSet;
}

bool OAIListing::is_documentation_Valid() const{
    return m_documentation_isValid;
}

QByteArray OAIListing::getIcon() const {
    return m_icon;
}
void OAIListing::setIcon(const QByteArray &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIListing::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIListing::is_icon_Valid() const{
    return m_icon_isValid;
}

QString OAIListing::getName() const {
    return m_name;
}
void OAIListing::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIListing::is_name_Set() const{
    return m_name_isSet;
}

bool OAIListing::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIListing::getPrimaryContact() const {
    return m_primary_contact;
}
void OAIListing::setPrimaryContact(const QString &primary_contact) {
    m_primary_contact = primary_contact;
    m_primary_contact_isSet = true;
}

bool OAIListing::is_primary_contact_Set() const{
    return m_primary_contact_isSet;
}

bool OAIListing::is_primary_contact_Valid() const{
    return m_primary_contact_isValid;
}

OAIPublisher OAIListing::getPublisher() const {
    return m_publisher;
}
void OAIListing::setPublisher(const OAIPublisher &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIListing::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIListing::is_publisher_Valid() const{
    return m_publisher_isValid;
}

QString OAIListing::getRequestAccess() const {
    return m_request_access;
}
void OAIListing::setRequestAccess(const QString &request_access) {
    m_request_access = request_access;
    m_request_access_isSet = true;
}

bool OAIListing::is_request_access_Set() const{
    return m_request_access_isSet;
}

bool OAIListing::is_request_access_Valid() const{
    return m_request_access_isValid;
}

OAIRestrictedExportConfig OAIListing::getRestrictedExportConfig() const {
    return m_restricted_export_config;
}
void OAIListing::setRestrictedExportConfig(const OAIRestrictedExportConfig &restricted_export_config) {
    m_restricted_export_config = restricted_export_config;
    m_restricted_export_config_isSet = true;
}

bool OAIListing::is_restricted_export_config_Set() const{
    return m_restricted_export_config_isSet;
}

bool OAIListing::is_restricted_export_config_Valid() const{
    return m_restricted_export_config_isValid;
}

QString OAIListing::getState() const {
    return m_state;
}
void OAIListing::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIListing::is_state_Set() const{
    return m_state_isSet;
}

bool OAIListing::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIListing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bigquery_dataset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_export_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
