/**
 * Analytics Hub API
 * Exchange data and analytics assets securely and efficiently.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription::OAISubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription::OAISubscription() {
    this->initializeModel();
}

OAISubscription::~OAISubscription() {}

void OAISubscription::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_data_exchange_isSet = false;
    m_data_exchange_isValid = false;

    m_last_modify_time_isSet = false;
    m_last_modify_time_isValid = false;

    m_linked_dataset_map_isSet = false;
    m_linked_dataset_map_isValid = false;

    m_listing_isSet = false;
    m_listing_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_display_name_isSet = false;
    m_organization_display_name_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_subscriber_contact_isSet = false;
    m_subscriber_contact_isValid = false;
}

void OAISubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_data_exchange_isValid = ::OpenAPI::fromJsonValue(m_data_exchange, json[QString("dataExchange")]);
    m_data_exchange_isSet = !json[QString("dataExchange")].isNull() && m_data_exchange_isValid;

    m_last_modify_time_isValid = ::OpenAPI::fromJsonValue(m_last_modify_time, json[QString("lastModifyTime")]);
    m_last_modify_time_isSet = !json[QString("lastModifyTime")].isNull() && m_last_modify_time_isValid;

    m_linked_dataset_map_isValid = ::OpenAPI::fromJsonValue(m_linked_dataset_map, json[QString("linkedDatasetMap")]);
    m_linked_dataset_map_isSet = !json[QString("linkedDatasetMap")].isNull() && m_linked_dataset_map_isValid;

    m_listing_isValid = ::OpenAPI::fromJsonValue(m_listing, json[QString("listing")]);
    m_listing_isSet = !json[QString("listing")].isNull() && m_listing_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_display_name_isValid = ::OpenAPI::fromJsonValue(m_organization_display_name, json[QString("organizationDisplayName")]);
    m_organization_display_name_isSet = !json[QString("organizationDisplayName")].isNull() && m_organization_display_name_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(m_organization_id, json[QString("organizationId")]);
    m_organization_id_isSet = !json[QString("organizationId")].isNull() && m_organization_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_subscriber_contact_isValid = ::OpenAPI::fromJsonValue(m_subscriber_contact, json[QString("subscriberContact")]);
    m_subscriber_contact_isSet = !json[QString("subscriberContact")].isNull() && m_subscriber_contact_isValid;
}

QString OAISubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_data_exchange_isSet) {
        obj.insert(QString("dataExchange"), ::OpenAPI::toJsonValue(m_data_exchange));
    }
    if (m_last_modify_time_isSet) {
        obj.insert(QString("lastModifyTime"), ::OpenAPI::toJsonValue(m_last_modify_time));
    }
    if (m_linked_dataset_map.size() > 0) {
        obj.insert(QString("linkedDatasetMap"), ::OpenAPI::toJsonValue(m_linked_dataset_map));
    }
    if (m_listing_isSet) {
        obj.insert(QString("listing"), ::OpenAPI::toJsonValue(m_listing));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization_display_name_isSet) {
        obj.insert(QString("organizationDisplayName"), ::OpenAPI::toJsonValue(m_organization_display_name));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organizationId"), ::OpenAPI::toJsonValue(m_organization_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_subscriber_contact_isSet) {
        obj.insert(QString("subscriberContact"), ::OpenAPI::toJsonValue(m_subscriber_contact));
    }
    return obj;
}

QString OAISubscription::getCreationTime() const {
    return m_creation_time;
}
void OAISubscription::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAISubscription::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAISubscription::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAISubscription::getDataExchange() const {
    return m_data_exchange;
}
void OAISubscription::setDataExchange(const QString &data_exchange) {
    m_data_exchange = data_exchange;
    m_data_exchange_isSet = true;
}

bool OAISubscription::is_data_exchange_Set() const{
    return m_data_exchange_isSet;
}

bool OAISubscription::is_data_exchange_Valid() const{
    return m_data_exchange_isValid;
}

QString OAISubscription::getLastModifyTime() const {
    return m_last_modify_time;
}
void OAISubscription::setLastModifyTime(const QString &last_modify_time) {
    m_last_modify_time = last_modify_time;
    m_last_modify_time_isSet = true;
}

bool OAISubscription::is_last_modify_time_Set() const{
    return m_last_modify_time_isSet;
}

bool OAISubscription::is_last_modify_time_Valid() const{
    return m_last_modify_time_isValid;
}

QMap<QString, OAILinkedResource> OAISubscription::getLinkedDatasetMap() const {
    return m_linked_dataset_map;
}
void OAISubscription::setLinkedDatasetMap(const QMap<QString, OAILinkedResource> &linked_dataset_map) {
    m_linked_dataset_map = linked_dataset_map;
    m_linked_dataset_map_isSet = true;
}

bool OAISubscription::is_linked_dataset_map_Set() const{
    return m_linked_dataset_map_isSet;
}

bool OAISubscription::is_linked_dataset_map_Valid() const{
    return m_linked_dataset_map_isValid;
}

QString OAISubscription::getListing() const {
    return m_listing;
}
void OAISubscription::setListing(const QString &listing) {
    m_listing = listing;
    m_listing_isSet = true;
}

bool OAISubscription::is_listing_Set() const{
    return m_listing_isSet;
}

bool OAISubscription::is_listing_Valid() const{
    return m_listing_isValid;
}

QString OAISubscription::getName() const {
    return m_name;
}
void OAISubscription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISubscription::is_name_Set() const{
    return m_name_isSet;
}

bool OAISubscription::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISubscription::getOrganizationDisplayName() const {
    return m_organization_display_name;
}
void OAISubscription::setOrganizationDisplayName(const QString &organization_display_name) {
    m_organization_display_name = organization_display_name;
    m_organization_display_name_isSet = true;
}

bool OAISubscription::is_organization_display_name_Set() const{
    return m_organization_display_name_isSet;
}

bool OAISubscription::is_organization_display_name_Valid() const{
    return m_organization_display_name_isValid;
}

QString OAISubscription::getOrganizationId() const {
    return m_organization_id;
}
void OAISubscription::setOrganizationId(const QString &organization_id) {
    m_organization_id = organization_id;
    m_organization_id_isSet = true;
}

bool OAISubscription::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAISubscription::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

QString OAISubscription::getState() const {
    return m_state;
}
void OAISubscription::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISubscription::is_state_Set() const{
    return m_state_isSet;
}

bool OAISubscription::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISubscription::getSubscriberContact() const {
    return m_subscriber_contact;
}
void OAISubscription::setSubscriberContact(const QString &subscriber_contact) {
    m_subscriber_contact = subscriber_contact;
    m_subscriber_contact_isSet = true;
}

bool OAISubscription::is_subscriber_contact_Set() const{
    return m_subscriber_contact_isSet;
}

bool OAISubscription::is_subscriber_contact_Valid() const{
    return m_subscriber_contact_isValid;
}

bool OAISubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modify_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_dataset_map.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_listing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscriber_contact_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
