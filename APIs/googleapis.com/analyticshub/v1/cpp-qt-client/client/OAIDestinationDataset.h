/**
 * Analytics Hub API
 * Exchange data and analytics assets securely and efficiently.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestinationDataset.h
 *
 * Defines the destination bigquery dataset.
 */

#ifndef OAIDestinationDataset_H
#define OAIDestinationDataset_H

#include <QJsonObject>

#include "OAIDestinationDatasetReference.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestinationDatasetReference;

class OAIDestinationDataset : public OAIObject {
public:
    OAIDestinationDataset();
    OAIDestinationDataset(QString json);
    ~OAIDestinationDataset() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDestinationDatasetReference getDatasetReference() const;
    void setDatasetReference(const OAIDestinationDatasetReference &dataset_reference);
    bool is_dataset_reference_Set() const;
    bool is_dataset_reference_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getFriendlyName() const;
    void setFriendlyName(const QString &friendly_name);
    bool is_friendly_name_Set() const;
    bool is_friendly_name_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDestinationDatasetReference m_dataset_reference;
    bool m_dataset_reference_isSet;
    bool m_dataset_reference_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_friendly_name;
    bool m_friendly_name_isSet;
    bool m_friendly_name_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestinationDataset)

#endif // OAIDestinationDataset_H
