/**
 * Analytics Hub API
 * Exchange data and analytics assets securely and efficiently.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDcrExchangeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDcrExchangeConfig::OAIDcrExchangeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDcrExchangeConfig::OAIDcrExchangeConfig() {
    this->initializeModel();
}

OAIDcrExchangeConfig::~OAIDcrExchangeConfig() {}

void OAIDcrExchangeConfig::initializeModel() {

    m_single_linked_dataset_per_cleanroom_isSet = false;
    m_single_linked_dataset_per_cleanroom_isValid = false;

    m_single_selected_resource_sharing_restriction_isSet = false;
    m_single_selected_resource_sharing_restriction_isValid = false;
}

void OAIDcrExchangeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDcrExchangeConfig::fromJsonObject(QJsonObject json) {

    m_single_linked_dataset_per_cleanroom_isValid = ::OpenAPI::fromJsonValue(m_single_linked_dataset_per_cleanroom, json[QString("singleLinkedDatasetPerCleanroom")]);
    m_single_linked_dataset_per_cleanroom_isSet = !json[QString("singleLinkedDatasetPerCleanroom")].isNull() && m_single_linked_dataset_per_cleanroom_isValid;

    m_single_selected_resource_sharing_restriction_isValid = ::OpenAPI::fromJsonValue(m_single_selected_resource_sharing_restriction, json[QString("singleSelectedResourceSharingRestriction")]);
    m_single_selected_resource_sharing_restriction_isSet = !json[QString("singleSelectedResourceSharingRestriction")].isNull() && m_single_selected_resource_sharing_restriction_isValid;
}

QString OAIDcrExchangeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDcrExchangeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_single_linked_dataset_per_cleanroom_isSet) {
        obj.insert(QString("singleLinkedDatasetPerCleanroom"), ::OpenAPI::toJsonValue(m_single_linked_dataset_per_cleanroom));
    }
    if (m_single_selected_resource_sharing_restriction_isSet) {
        obj.insert(QString("singleSelectedResourceSharingRestriction"), ::OpenAPI::toJsonValue(m_single_selected_resource_sharing_restriction));
    }
    return obj;
}

bool OAIDcrExchangeConfig::isSingleLinkedDatasetPerCleanroom() const {
    return m_single_linked_dataset_per_cleanroom;
}
void OAIDcrExchangeConfig::setSingleLinkedDatasetPerCleanroom(const bool &single_linked_dataset_per_cleanroom) {
    m_single_linked_dataset_per_cleanroom = single_linked_dataset_per_cleanroom;
    m_single_linked_dataset_per_cleanroom_isSet = true;
}

bool OAIDcrExchangeConfig::is_single_linked_dataset_per_cleanroom_Set() const{
    return m_single_linked_dataset_per_cleanroom_isSet;
}

bool OAIDcrExchangeConfig::is_single_linked_dataset_per_cleanroom_Valid() const{
    return m_single_linked_dataset_per_cleanroom_isValid;
}

bool OAIDcrExchangeConfig::isSingleSelectedResourceSharingRestriction() const {
    return m_single_selected_resource_sharing_restriction;
}
void OAIDcrExchangeConfig::setSingleSelectedResourceSharingRestriction(const bool &single_selected_resource_sharing_restriction) {
    m_single_selected_resource_sharing_restriction = single_selected_resource_sharing_restriction;
    m_single_selected_resource_sharing_restriction_isSet = true;
}

bool OAIDcrExchangeConfig::is_single_selected_resource_sharing_restriction_Set() const{
    return m_single_selected_resource_sharing_restriction_isSet;
}

bool OAIDcrExchangeConfig::is_single_selected_resource_sharing_restriction_Valid() const{
    return m_single_selected_resource_sharing_restriction_isValid;
}

bool OAIDcrExchangeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_single_linked_dataset_per_cleanroom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_selected_resource_sharing_restriction_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDcrExchangeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
