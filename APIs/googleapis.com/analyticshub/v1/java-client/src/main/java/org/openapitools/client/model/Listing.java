/*
 * Analytics Hub API
 * Exchange data and analytics assets securely and efficiently.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BigQueryDatasetSource;
import org.openapitools.client.model.DataProvider;
import org.openapitools.client.model.Publisher;
import org.openapitools.client.model.RestrictedExportConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A listing is what gets published into a data exchange that a subscriber can subscribe to. It contains a reference to the data source along with descriptive information that will help subscribers find and subscribe the data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:42.782579-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Listing {
  public static final String SERIALIZED_NAME_BIGQUERY_DATASET = "bigqueryDataset";
  @SerializedName(SERIALIZED_NAME_BIGQUERY_DATASET)
  private BigQueryDatasetSource bigqueryDataset;

  /**
   * Gets or Sets categories
   */
  @JsonAdapter(CategoriesEnum.Adapter.class)
  public enum CategoriesEnum {
    UNSPECIFIED("CATEGORY_UNSPECIFIED"),
    
    OTHERS("CATEGORY_OTHERS"),
    
    ADVERTISING_AND_MARKETING("CATEGORY_ADVERTISING_AND_MARKETING"),
    
    COMMERCE("CATEGORY_COMMERCE"),
    
    CLIMATE_AND_ENVIRONMENT("CATEGORY_CLIMATE_AND_ENVIRONMENT"),
    
    DEMOGRAPHICS("CATEGORY_DEMOGRAPHICS"),
    
    ECONOMICS("CATEGORY_ECONOMICS"),
    
    EDUCATION("CATEGORY_EDUCATION"),
    
    ENERGY("CATEGORY_ENERGY"),
    
    FINANCIAL("CATEGORY_FINANCIAL"),
    
    GAMING("CATEGORY_GAMING"),
    
    GEOSPATIAL("CATEGORY_GEOSPATIAL"),
    
    HEALTHCARE_AND_LIFE_SCIENCE("CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE"),
    
    MEDIA("CATEGORY_MEDIA"),
    
    PUBLIC_SECTOR("CATEGORY_PUBLIC_SECTOR"),
    
    RETAIL("CATEGORY_RETAIL"),
    
    SPORTS("CATEGORY_SPORTS"),
    
    SCIENCE_AND_RESEARCH("CATEGORY_SCIENCE_AND_RESEARCH"),
    
    TRANSPORTATION_AND_LOGISTICS("CATEGORY_TRANSPORTATION_AND_LOGISTICS"),
    
    TRAVEL_AND_TOURISM("CATEGORY_TRAVEL_AND_TOURISM");

    private String value;

    CategoriesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoriesEnum fromValue(String value) {
      for (CategoriesEnum b : CategoriesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoriesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoriesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoriesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoriesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoriesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<CategoriesEnum> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_PROVIDER = "dataProvider";
  @SerializedName(SERIALIZED_NAME_DATA_PROVIDER)
  private DataProvider dataProvider;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DOCUMENTATION = "documentation";
  @SerializedName(SERIALIZED_NAME_DOCUMENTATION)
  private String documentation;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private byte[] icon;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIMARY_CONTACT = "primaryContact";
  @SerializedName(SERIALIZED_NAME_PRIMARY_CONTACT)
  private String primaryContact;

  public static final String SERIALIZED_NAME_PUBLISHER = "publisher";
  @SerializedName(SERIALIZED_NAME_PUBLISHER)
  private Publisher publisher;

  public static final String SERIALIZED_NAME_REQUEST_ACCESS = "requestAccess";
  @SerializedName(SERIALIZED_NAME_REQUEST_ACCESS)
  private String requestAccess;

  public static final String SERIALIZED_NAME_RESTRICTED_EXPORT_CONFIG = "restrictedExportConfig";
  @SerializedName(SERIALIZED_NAME_RESTRICTED_EXPORT_CONFIG)
  private RestrictedExportConfig restrictedExportConfig;

  /**
   * Output only. Current state of the listing.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public Listing() {
  }

  public Listing(
     String name, 
     StateEnum state
  ) {
    this();
    this.name = name;
    this.state = state;
  }

  public Listing bigqueryDataset(BigQueryDatasetSource bigqueryDataset) {
    this.bigqueryDataset = bigqueryDataset;
    return this;
  }

  /**
   * Get bigqueryDataset
   * @return bigqueryDataset
   */
  @javax.annotation.Nullable
  public BigQueryDatasetSource getBigqueryDataset() {
    return bigqueryDataset;
  }

  public void setBigqueryDataset(BigQueryDatasetSource bigqueryDataset) {
    this.bigqueryDataset = bigqueryDataset;
  }


  public Listing categories(List<CategoriesEnum> categories) {
    this.categories = categories;
    return this;
  }

  public Listing addCategoriesItem(CategoriesEnum categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Optional. Categories of the listing. Up to two categories are allowed.
   * @return categories
   */
  @javax.annotation.Nullable
  public List<CategoriesEnum> getCategories() {
    return categories;
  }

  public void setCategories(List<CategoriesEnum> categories) {
    this.categories = categories;
  }


  public Listing dataProvider(DataProvider dataProvider) {
    this.dataProvider = dataProvider;
    return this;
  }

  /**
   * Get dataProvider
   * @return dataProvider
   */
  @javax.annotation.Nullable
  public DataProvider getDataProvider() {
    return dataProvider;
  }

  public void setDataProvider(DataProvider dataProvider) {
    this.dataProvider = dataProvider;
  }


  public Listing description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). Default value is an empty string. Max length: 2000 bytes.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Listing displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&amp;) and can&#39;t start or end with spaces. Default value is an empty string. Max length: 63 bytes.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Listing documentation(String documentation) {
    this.documentation = documentation;
    return this;
  }

  /**
   * Optional. Documentation describing the listing.
   * @return documentation
   */
  @javax.annotation.Nullable
  public String getDocumentation() {
    return documentation;
  }

  public void setDocumentation(String documentation) {
    this.documentation = documentation;
  }


  public Listing icon(byte[] icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Optional. Base64 encoded image representing the listing. Max Size: 3.0MiB Expected image dimensions are 512x512 pixels, however the API only performs validation on size of the encoded data. Note: For byte fields, the contents of the field are base64-encoded (which increases the size of the data by 33-36%) when using JSON on the wire.
   * @return icon
   */
  @javax.annotation.Nullable
  public byte[] getIcon() {
    return icon;
  }

  public void setIcon(byte[] icon) {
    this.icon = icon;
  }


  /**
   * Output only. The resource name of the listing. e.g. &#x60;projects/myproject/locations/US/dataExchanges/123/listings/456&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Listing primaryContact(String primaryContact) {
    this.primaryContact = primaryContact;
    return this;
  }

  /**
   * Optional. Email or URL of the primary point of contact of the listing. Max Length: 1000 bytes.
   * @return primaryContact
   */
  @javax.annotation.Nullable
  public String getPrimaryContact() {
    return primaryContact;
  }

  public void setPrimaryContact(String primaryContact) {
    this.primaryContact = primaryContact;
  }


  public Listing publisher(Publisher publisher) {
    this.publisher = publisher;
    return this;
  }

  /**
   * Get publisher
   * @return publisher
   */
  @javax.annotation.Nullable
  public Publisher getPublisher() {
    return publisher;
  }

  public void setPublisher(Publisher publisher) {
    this.publisher = publisher;
  }


  public Listing requestAccess(String requestAccess) {
    this.requestAccess = requestAccess;
    return this;
  }

  /**
   * Optional. Email or URL of the request access of the listing. Subscribers can use this reference to request access. Max Length: 1000 bytes.
   * @return requestAccess
   */
  @javax.annotation.Nullable
  public String getRequestAccess() {
    return requestAccess;
  }

  public void setRequestAccess(String requestAccess) {
    this.requestAccess = requestAccess;
  }


  public Listing restrictedExportConfig(RestrictedExportConfig restrictedExportConfig) {
    this.restrictedExportConfig = restrictedExportConfig;
    return this;
  }

  /**
   * Get restrictedExportConfig
   * @return restrictedExportConfig
   */
  @javax.annotation.Nullable
  public RestrictedExportConfig getRestrictedExportConfig() {
    return restrictedExportConfig;
  }

  public void setRestrictedExportConfig(RestrictedExportConfig restrictedExportConfig) {
    this.restrictedExportConfig = restrictedExportConfig;
  }


  /**
   * Output only. Current state of the listing.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Listing listing = (Listing) o;
    return Objects.equals(this.bigqueryDataset, listing.bigqueryDataset) &&
        Objects.equals(this.categories, listing.categories) &&
        Objects.equals(this.dataProvider, listing.dataProvider) &&
        Objects.equals(this.description, listing.description) &&
        Objects.equals(this.displayName, listing.displayName) &&
        Objects.equals(this.documentation, listing.documentation) &&
        Arrays.equals(this.icon, listing.icon) &&
        Objects.equals(this.name, listing.name) &&
        Objects.equals(this.primaryContact, listing.primaryContact) &&
        Objects.equals(this.publisher, listing.publisher) &&
        Objects.equals(this.requestAccess, listing.requestAccess) &&
        Objects.equals(this.restrictedExportConfig, listing.restrictedExportConfig) &&
        Objects.equals(this.state, listing.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bigqueryDataset, categories, dataProvider, description, displayName, documentation, Arrays.hashCode(icon), name, primaryContact, publisher, requestAccess, restrictedExportConfig, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Listing {\n");
    sb.append("    bigqueryDataset: ").append(toIndentedString(bigqueryDataset)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    dataProvider: ").append(toIndentedString(dataProvider)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    documentation: ").append(toIndentedString(documentation)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    primaryContact: ").append(toIndentedString(primaryContact)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    requestAccess: ").append(toIndentedString(requestAccess)).append("\n");
    sb.append("    restrictedExportConfig: ").append(toIndentedString(restrictedExportConfig)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bigqueryDataset");
    openapiFields.add("categories");
    openapiFields.add("dataProvider");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("documentation");
    openapiFields.add("icon");
    openapiFields.add("name");
    openapiFields.add("primaryContact");
    openapiFields.add("publisher");
    openapiFields.add("requestAccess");
    openapiFields.add("restrictedExportConfig");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Listing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Listing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Listing is not found in the empty JSON string", Listing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Listing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Listing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bigqueryDataset`
      if (jsonObj.get("bigqueryDataset") != null && !jsonObj.get("bigqueryDataset").isJsonNull()) {
        BigQueryDatasetSource.validateJsonElement(jsonObj.get("bigqueryDataset"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull() && !jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      // validate the optional field `dataProvider`
      if (jsonObj.get("dataProvider") != null && !jsonObj.get("dataProvider").isJsonNull()) {
        DataProvider.validateJsonElement(jsonObj.get("dataProvider"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("documentation") != null && !jsonObj.get("documentation").isJsonNull()) && !jsonObj.get("documentation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentation").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("primaryContact") != null && !jsonObj.get("primaryContact").isJsonNull()) && !jsonObj.get("primaryContact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryContact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryContact").toString()));
      }
      // validate the optional field `publisher`
      if (jsonObj.get("publisher") != null && !jsonObj.get("publisher").isJsonNull()) {
        Publisher.validateJsonElement(jsonObj.get("publisher"));
      }
      if ((jsonObj.get("requestAccess") != null && !jsonObj.get("requestAccess").isJsonNull()) && !jsonObj.get("requestAccess").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestAccess` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestAccess").toString()));
      }
      // validate the optional field `restrictedExportConfig`
      if (jsonObj.get("restrictedExportConfig") != null && !jsonObj.get("restrictedExportConfig").isJsonNull()) {
        RestrictedExportConfig.validateJsonElement(jsonObj.get("restrictedExportConfig"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Listing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Listing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Listing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Listing.class));

       return (TypeAdapter<T>) new TypeAdapter<Listing>() {
           @Override
           public void write(JsonWriter out, Listing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Listing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Listing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Listing
   * @throws IOException if the JSON string is invalid with respect to Listing
   */
  public static Listing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Listing.class);
  }

  /**
   * Convert an instance of Listing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

