/*
 * Analytics Hub API
 * Exchange data and analytics assets securely and efficiently.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.LinkedResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A subscription represents a subscribers&#39; access to a particular set of published data. It contains references to associated listings, data exchanges, and linked datasets.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:42.782579-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Subscription {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_DATA_EXCHANGE = "dataExchange";
  @SerializedName(SERIALIZED_NAME_DATA_EXCHANGE)
  private String dataExchange;

  public static final String SERIALIZED_NAME_LAST_MODIFY_TIME = "lastModifyTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFY_TIME)
  private String lastModifyTime;

  public static final String SERIALIZED_NAME_LINKED_DATASET_MAP = "linkedDatasetMap";
  @SerializedName(SERIALIZED_NAME_LINKED_DATASET_MAP)
  private Map<String, LinkedResource> linkedDatasetMap = new HashMap<>();

  public static final String SERIALIZED_NAME_LISTING = "listing";
  @SerializedName(SERIALIZED_NAME_LISTING)
  private String listing;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORGANIZATION_DISPLAY_NAME = "organizationDisplayName";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_DISPLAY_NAME)
  private String organizationDisplayName;

  public static final String SERIALIZED_NAME_ORGANIZATION_ID = "organizationId";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ID)
  private String organizationId;

  /**
   * Output only. Current state of the subscription.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("STATE_ACTIVE"),
    
    STALE("STATE_STALE"),
    
    INACTIVE("STATE_INACTIVE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_SUBSCRIBER_CONTACT = "subscriberContact";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBER_CONTACT)
  private String subscriberContact;

  public Subscription() {
  }

  public Subscription(
     String creationTime, 
     String dataExchange, 
     String lastModifyTime, 
     Map<String, LinkedResource> linkedDatasetMap, 
     String listing, 
     String name, 
     String organizationDisplayName, 
     String organizationId, 
     StateEnum state, 
     String subscriberContact
  ) {
    this();
    this.creationTime = creationTime;
    this.dataExchange = dataExchange;
    this.lastModifyTime = lastModifyTime;
    this.linkedDatasetMap = linkedDatasetMap;
    this.listing = listing;
    this.name = name;
    this.organizationDisplayName = organizationDisplayName;
    this.organizationId = organizationId;
    this.state = state;
    this.subscriberContact = subscriberContact;
  }

  /**
   * Output only. Timestamp when the subscription was created.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }



  /**
   * Output only. Resource name of the source Data Exchange. e.g. projects/123/locations/US/dataExchanges/456
   * @return dataExchange
   */
  @javax.annotation.Nullable
  public String getDataExchange() {
    return dataExchange;
  }



  /**
   * Output only. Timestamp when the subscription was last modified.
   * @return lastModifyTime
   */
  @javax.annotation.Nullable
  public String getLastModifyTime() {
    return lastModifyTime;
  }



  /**
   * Output only. Map of listing resource names to associated linked resource, e.g. projects/123/locations/US/dataExchanges/456/listings/789 -&gt; projects/123/datasets/my_dataset For listing-level subscriptions, this is a map of size 1. Only contains values if state &#x3D;&#x3D; STATE_ACTIVE.
   * @return linkedDatasetMap
   */
  @javax.annotation.Nullable
  public Map<String, LinkedResource> getLinkedDatasetMap() {
    return linkedDatasetMap;
  }



  /**
   * Output only. Resource name of the source Listing. e.g. projects/123/locations/US/dataExchanges/456/listings/789
   * @return listing
   */
  @javax.annotation.Nullable
  public String getListing() {
    return listing;
  }



  /**
   * Output only. The resource name of the subscription. e.g. &#x60;projects/myproject/locations/US/subscriptions/123&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. Display name of the project of this subscription.
   * @return organizationDisplayName
   */
  @javax.annotation.Nullable
  public String getOrganizationDisplayName() {
    return organizationDisplayName;
  }



  /**
   * Output only. Organization of the project this subscription belongs to.
   * @return organizationId
   */
  @javax.annotation.Nullable
  public String getOrganizationId() {
    return organizationId;
  }



  /**
   * Output only. Current state of the subscription.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Email of the subscriber.
   * @return subscriberContact
   */
  @javax.annotation.Nullable
  public String getSubscriberContact() {
    return subscriberContact;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subscription subscription = (Subscription) o;
    return Objects.equals(this.creationTime, subscription.creationTime) &&
        Objects.equals(this.dataExchange, subscription.dataExchange) &&
        Objects.equals(this.lastModifyTime, subscription.lastModifyTime) &&
        Objects.equals(this.linkedDatasetMap, subscription.linkedDatasetMap) &&
        Objects.equals(this.listing, subscription.listing) &&
        Objects.equals(this.name, subscription.name) &&
        Objects.equals(this.organizationDisplayName, subscription.organizationDisplayName) &&
        Objects.equals(this.organizationId, subscription.organizationId) &&
        Objects.equals(this.state, subscription.state) &&
        Objects.equals(this.subscriberContact, subscription.subscriberContact);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, dataExchange, lastModifyTime, linkedDatasetMap, listing, name, organizationDisplayName, organizationId, state, subscriberContact);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Subscription {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    dataExchange: ").append(toIndentedString(dataExchange)).append("\n");
    sb.append("    lastModifyTime: ").append(toIndentedString(lastModifyTime)).append("\n");
    sb.append("    linkedDatasetMap: ").append(toIndentedString(linkedDatasetMap)).append("\n");
    sb.append("    listing: ").append(toIndentedString(listing)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    organizationDisplayName: ").append(toIndentedString(organizationDisplayName)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    subscriberContact: ").append(toIndentedString(subscriberContact)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("dataExchange");
    openapiFields.add("lastModifyTime");
    openapiFields.add("linkedDatasetMap");
    openapiFields.add("listing");
    openapiFields.add("name");
    openapiFields.add("organizationDisplayName");
    openapiFields.add("organizationId");
    openapiFields.add("state");
    openapiFields.add("subscriberContact");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Subscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Subscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Subscription is not found in the empty JSON string", Subscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Subscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Subscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) && !jsonObj.get("creationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationTime").toString()));
      }
      if ((jsonObj.get("dataExchange") != null && !jsonObj.get("dataExchange").isJsonNull()) && !jsonObj.get("dataExchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataExchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataExchange").toString()));
      }
      if ((jsonObj.get("lastModifyTime") != null && !jsonObj.get("lastModifyTime").isJsonNull()) && !jsonObj.get("lastModifyTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifyTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifyTime").toString()));
      }
      if ((jsonObj.get("listing") != null && !jsonObj.get("listing").isJsonNull()) && !jsonObj.get("listing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listing").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("organizationDisplayName") != null && !jsonObj.get("organizationDisplayName").isJsonNull()) && !jsonObj.get("organizationDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizationDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizationDisplayName").toString()));
      }
      if ((jsonObj.get("organizationId") != null && !jsonObj.get("organizationId").isJsonNull()) && !jsonObj.get("organizationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizationId").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("subscriberContact") != null && !jsonObj.get("subscriberContact").isJsonNull()) && !jsonObj.get("subscriberContact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriberContact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriberContact").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Subscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Subscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Subscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Subscription.class));

       return (TypeAdapter<T>) new TypeAdapter<Subscription>() {
           @Override
           public void write(JsonWriter out, Subscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Subscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Subscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Subscription
   * @throws IOException if the JSON string is invalid with respect to Subscription
   */
  public static Subscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Subscription.class);
  }

  /**
   * Convert an instance of Subscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

