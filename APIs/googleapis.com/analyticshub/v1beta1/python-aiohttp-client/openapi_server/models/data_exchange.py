# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataExchange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_name: str=None, documentation: str=None, icon: str=None, listing_count: int=None, name: str=None, primary_contact: str=None):
        """DataExchange - a model defined in OpenAPI

        :param description: The description of this DataExchange.
        :param display_name: The display_name of this DataExchange.
        :param documentation: The documentation of this DataExchange.
        :param icon: The icon of this DataExchange.
        :param listing_count: The listing_count of this DataExchange.
        :param name: The name of this DataExchange.
        :param primary_contact: The primary_contact of this DataExchange.
        """
        self.openapi_types = {
            'description': str,
            'display_name': str,
            'documentation': str,
            'icon': str,
            'listing_count': int,
            'name': str,
            'primary_contact': str
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'displayName',
            'documentation': 'documentation',
            'icon': 'icon',
            'listing_count': 'listingCount',
            'name': 'name',
            'primary_contact': 'primaryContact'
        }

        self._description = description
        self._display_name = display_name
        self._documentation = documentation
        self._icon = icon
        self._listing_count = listing_count
        self._name = name
        self._primary_contact = primary_contact

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataExchange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataExchange of this DataExchange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this DataExchange.

        Optional. Description of the data exchange. The description must not contain Unicode non-characters as well as C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). Default value is an empty string. Max length: 2000 bytes.

        :return: The description of this DataExchange.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataExchange.

        Optional. Description of the data exchange. The description must not contain Unicode non-characters as well as C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). Default value is an empty string. Max length: 2000 bytes.

        :param description: The description of this DataExchange.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this DataExchange.

        Required. Human-readable display name of the data exchange. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&) and must not start or end with spaces. Default value is an empty string. Max length: 63 bytes.

        :return: The display_name of this DataExchange.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DataExchange.

        Required. Human-readable display name of the data exchange. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&) and must not start or end with spaces. Default value is an empty string. Max length: 63 bytes.

        :param display_name: The display_name of this DataExchange.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def documentation(self):
        """Gets the documentation of this DataExchange.

        Optional. Documentation describing the data exchange.

        :return: The documentation of this DataExchange.
        :rtype: str
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this DataExchange.

        Optional. Documentation describing the data exchange.

        :param documentation: The documentation of this DataExchange.
        :type documentation: str
        """

        self._documentation = documentation

    @property
    def icon(self):
        """Gets the icon of this DataExchange.

        Optional. Base64 encoded image representing the data exchange. Max Size: 3.0MiB Expected image dimensions are 512x512 pixels, however the API only performs validation on size of the encoded data. Note: For byte fields, the content of the fields are base64-encoded (which increases the size of the data by 33-36%) when using JSON on the wire.

        :return: The icon of this DataExchange.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this DataExchange.

        Optional. Base64 encoded image representing the data exchange. Max Size: 3.0MiB Expected image dimensions are 512x512 pixels, however the API only performs validation on size of the encoded data. Note: For byte fields, the content of the fields are base64-encoded (which increases the size of the data by 33-36%) when using JSON on the wire.

        :param icon: The icon of this DataExchange.
        :type icon: str
        """

        self._icon = icon

    @property
    def listing_count(self):
        """Gets the listing_count of this DataExchange.

        Output only. Number of listings contained in the data exchange.

        :return: The listing_count of this DataExchange.
        :rtype: int
        """
        return self._listing_count

    @listing_count.setter
    def listing_count(self, listing_count):
        """Sets the listing_count of this DataExchange.

        Output only. Number of listings contained in the data exchange.

        :param listing_count: The listing_count of this DataExchange.
        :type listing_count: int
        """

        self._listing_count = listing_count

    @property
    def name(self):
        """Gets the name of this DataExchange.

        Output only. The resource name of the data exchange. e.g. `projects/myproject/locations/US/dataExchanges/123`.

        :return: The name of this DataExchange.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataExchange.

        Output only. The resource name of the data exchange. e.g. `projects/myproject/locations/US/dataExchanges/123`.

        :param name: The name of this DataExchange.
        :type name: str
        """

        self._name = name

    @property
    def primary_contact(self):
        """Gets the primary_contact of this DataExchange.

        Optional. Email or URL of the primary point of contact of the data exchange. Max Length: 1000 bytes.

        :return: The primary_contact of this DataExchange.
        :rtype: str
        """
        return self._primary_contact

    @primary_contact.setter
    def primary_contact(self, primary_contact):
        """Sets the primary_contact of this DataExchange.

        Optional. Email or URL of the primary point of contact of the data exchange. Max Length: 1000 bytes.

        :param primary_contact: The primary_contact of this DataExchange.
        :type primary_contact: str
        """

        self._primary_contact = primary_contact
