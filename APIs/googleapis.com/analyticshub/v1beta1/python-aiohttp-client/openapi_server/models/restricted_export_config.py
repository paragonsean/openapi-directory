# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RestrictedExportConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, restrict_direct_table_access: bool=None, restrict_query_result: bool=None):
        """RestrictedExportConfig - a model defined in OpenAPI

        :param enabled: The enabled of this RestrictedExportConfig.
        :param restrict_direct_table_access: The restrict_direct_table_access of this RestrictedExportConfig.
        :param restrict_query_result: The restrict_query_result of this RestrictedExportConfig.
        """
        self.openapi_types = {
            'enabled': bool,
            'restrict_direct_table_access': bool,
            'restrict_query_result': bool
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'restrict_direct_table_access': 'restrictDirectTableAccess',
            'restrict_query_result': 'restrictQueryResult'
        }

        self._enabled = enabled
        self._restrict_direct_table_access = restrict_direct_table_access
        self._restrict_query_result = restrict_query_result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestrictedExportConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RestrictedExportConfig of this RestrictedExportConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this RestrictedExportConfig.

        Optional. If true, enable restricted export.

        :return: The enabled of this RestrictedExportConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this RestrictedExportConfig.

        Optional. If true, enable restricted export.

        :param enabled: The enabled of this RestrictedExportConfig.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def restrict_direct_table_access(self):
        """Gets the restrict_direct_table_access of this RestrictedExportConfig.

        Output only. If true, restrict direct table access(read api/tabledata.list) on linked table.

        :return: The restrict_direct_table_access of this RestrictedExportConfig.
        :rtype: bool
        """
        return self._restrict_direct_table_access

    @restrict_direct_table_access.setter
    def restrict_direct_table_access(self, restrict_direct_table_access):
        """Sets the restrict_direct_table_access of this RestrictedExportConfig.

        Output only. If true, restrict direct table access(read api/tabledata.list) on linked table.

        :param restrict_direct_table_access: The restrict_direct_table_access of this RestrictedExportConfig.
        :type restrict_direct_table_access: bool
        """

        self._restrict_direct_table_access = restrict_direct_table_access

    @property
    def restrict_query_result(self):
        """Gets the restrict_query_result of this RestrictedExportConfig.

        Optional. If true, restrict export of query result derived from restricted linked dataset table.

        :return: The restrict_query_result of this RestrictedExportConfig.
        :rtype: bool
        """
        return self._restrict_query_result

    @restrict_query_result.setter
    def restrict_query_result(self, restrict_query_result):
        """Sets the restrict_query_result of this RestrictedExportConfig.

        Optional. If true, restrict export of query result derived from restricted linked dataset table.

        :param restrict_query_result: The restrict_query_result of this RestrictedExportConfig.
        :type restrict_query_result: bool
        """

        self._restrict_query_result = restrict_query_result
