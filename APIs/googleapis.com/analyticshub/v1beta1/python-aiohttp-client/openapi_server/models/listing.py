# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.big_query_dataset_source import BigQueryDatasetSource
from openapi_server.models.data_provider import DataProvider
from openapi_server.models.publisher import Publisher
from openapi_server.models.restricted_export_config import RestrictedExportConfig
from openapi_server import util


class Listing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bigquery_dataset: BigQueryDatasetSource=None, categories: List[str]=None, data_provider: DataProvider=None, description: str=None, display_name: str=None, documentation: str=None, icon: str=None, name: str=None, primary_contact: str=None, publisher: Publisher=None, request_access: str=None, restricted_export_config: RestrictedExportConfig=None, state: str=None):
        """Listing - a model defined in OpenAPI

        :param bigquery_dataset: The bigquery_dataset of this Listing.
        :param categories: The categories of this Listing.
        :param data_provider: The data_provider of this Listing.
        :param description: The description of this Listing.
        :param display_name: The display_name of this Listing.
        :param documentation: The documentation of this Listing.
        :param icon: The icon of this Listing.
        :param name: The name of this Listing.
        :param primary_contact: The primary_contact of this Listing.
        :param publisher: The publisher of this Listing.
        :param request_access: The request_access of this Listing.
        :param restricted_export_config: The restricted_export_config of this Listing.
        :param state: The state of this Listing.
        """
        self.openapi_types = {
            'bigquery_dataset': BigQueryDatasetSource,
            'categories': List[str],
            'data_provider': DataProvider,
            'description': str,
            'display_name': str,
            'documentation': str,
            'icon': str,
            'name': str,
            'primary_contact': str,
            'publisher': Publisher,
            'request_access': str,
            'restricted_export_config': RestrictedExportConfig,
            'state': str
        }

        self.attribute_map = {
            'bigquery_dataset': 'bigqueryDataset',
            'categories': 'categories',
            'data_provider': 'dataProvider',
            'description': 'description',
            'display_name': 'displayName',
            'documentation': 'documentation',
            'icon': 'icon',
            'name': 'name',
            'primary_contact': 'primaryContact',
            'publisher': 'publisher',
            'request_access': 'requestAccess',
            'restricted_export_config': 'restrictedExportConfig',
            'state': 'state'
        }

        self._bigquery_dataset = bigquery_dataset
        self._categories = categories
        self._data_provider = data_provider
        self._description = description
        self._display_name = display_name
        self._documentation = documentation
        self._icon = icon
        self._name = name
        self._primary_contact = primary_contact
        self._publisher = publisher
        self._request_access = request_access
        self._restricted_export_config = restricted_export_config
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Listing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Listing of this Listing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bigquery_dataset(self):
        """Gets the bigquery_dataset of this Listing.


        :return: The bigquery_dataset of this Listing.
        :rtype: BigQueryDatasetSource
        """
        return self._bigquery_dataset

    @bigquery_dataset.setter
    def bigquery_dataset(self, bigquery_dataset):
        """Sets the bigquery_dataset of this Listing.


        :param bigquery_dataset: The bigquery_dataset of this Listing.
        :type bigquery_dataset: BigQueryDatasetSource
        """

        self._bigquery_dataset = bigquery_dataset

    @property
    def categories(self):
        """Gets the categories of this Listing.

        Optional. Categories of the listing. Up to two categories are allowed.

        :return: The categories of this Listing.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Listing.

        Optional. Categories of the listing. Up to two categories are allowed.

        :param categories: The categories of this Listing.
        :type categories: List[str]
        """
        allowed_values = ["CATEGORY_UNSPECIFIED", "CATEGORY_OTHERS", "CATEGORY_ADVERTISING_AND_MARKETING", "CATEGORY_COMMERCE", "CATEGORY_CLIMATE_AND_ENVIRONMENT", "CATEGORY_DEMOGRAPHICS", "CATEGORY_ECONOMICS", "CATEGORY_EDUCATION", "CATEGORY_ENERGY", "CATEGORY_FINANCIAL", "CATEGORY_GAMING", "CATEGORY_GEOSPATIAL", "CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE", "CATEGORY_MEDIA", "CATEGORY_PUBLIC_SECTOR", "CATEGORY_RETAIL", "CATEGORY_SPORTS", "CATEGORY_SCIENCE_AND_RESEARCH", "CATEGORY_TRANSPORTATION_AND_LOGISTICS", "CATEGORY_TRAVEL_AND_TOURISM"]  # noqa: E501
        if not set(categories).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `categories` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(categories) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._categories = categories

    @property
    def data_provider(self):
        """Gets the data_provider of this Listing.


        :return: The data_provider of this Listing.
        :rtype: DataProvider
        """
        return self._data_provider

    @data_provider.setter
    def data_provider(self, data_provider):
        """Sets the data_provider of this Listing.


        :param data_provider: The data_provider of this Listing.
        :type data_provider: DataProvider
        """

        self._data_provider = data_provider

    @property
    def description(self):
        """Gets the description of this Listing.

        Optional. Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). Default value is an empty string. Max length: 2000 bytes.

        :return: The description of this Listing.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Listing.

        Optional. Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). Default value is an empty string. Max length: 2000 bytes.

        :param description: The description of this Listing.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Listing.

        Required. Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&) and can't start or end with spaces. Default value is an empty string. Max length: 63 bytes.

        :return: The display_name of this Listing.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Listing.

        Required. Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&) and can't start or end with spaces. Default value is an empty string. Max length: 63 bytes.

        :param display_name: The display_name of this Listing.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def documentation(self):
        """Gets the documentation of this Listing.

        Optional. Documentation describing the listing.

        :return: The documentation of this Listing.
        :rtype: str
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this Listing.

        Optional. Documentation describing the listing.

        :param documentation: The documentation of this Listing.
        :type documentation: str
        """

        self._documentation = documentation

    @property
    def icon(self):
        """Gets the icon of this Listing.

        Optional. Base64 encoded image representing the listing. Max Size: 3.0MiB Expected image dimensions are 512x512 pixels, however the API only performs validation on size of the encoded data. Note: For byte fields, the contents of the field are base64-encoded (which increases the size of the data by 33-36%) when using JSON on the wire.

        :return: The icon of this Listing.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Listing.

        Optional. Base64 encoded image representing the listing. Max Size: 3.0MiB Expected image dimensions are 512x512 pixels, however the API only performs validation on size of the encoded data. Note: For byte fields, the contents of the field are base64-encoded (which increases the size of the data by 33-36%) when using JSON on the wire.

        :param icon: The icon of this Listing.
        :type icon: str
        """

        self._icon = icon

    @property
    def name(self):
        """Gets the name of this Listing.

        Output only. The resource name of the listing. e.g. `projects/myproject/locations/US/dataExchanges/123/listings/456`

        :return: The name of this Listing.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Listing.

        Output only. The resource name of the listing. e.g. `projects/myproject/locations/US/dataExchanges/123/listings/456`

        :param name: The name of this Listing.
        :type name: str
        """

        self._name = name

    @property
    def primary_contact(self):
        """Gets the primary_contact of this Listing.

        Optional. Email or URL of the primary point of contact of the listing. Max Length: 1000 bytes.

        :return: The primary_contact of this Listing.
        :rtype: str
        """
        return self._primary_contact

    @primary_contact.setter
    def primary_contact(self, primary_contact):
        """Sets the primary_contact of this Listing.

        Optional. Email or URL of the primary point of contact of the listing. Max Length: 1000 bytes.

        :param primary_contact: The primary_contact of this Listing.
        :type primary_contact: str
        """

        self._primary_contact = primary_contact

    @property
    def publisher(self):
        """Gets the publisher of this Listing.


        :return: The publisher of this Listing.
        :rtype: Publisher
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this Listing.


        :param publisher: The publisher of this Listing.
        :type publisher: Publisher
        """

        self._publisher = publisher

    @property
    def request_access(self):
        """Gets the request_access of this Listing.

        Optional. Email or URL of the request access of the listing. Subscribers can use this reference to request access. Max Length: 1000 bytes.

        :return: The request_access of this Listing.
        :rtype: str
        """
        return self._request_access

    @request_access.setter
    def request_access(self, request_access):
        """Sets the request_access of this Listing.

        Optional. Email or URL of the request access of the listing. Subscribers can use this reference to request access. Max Length: 1000 bytes.

        :param request_access: The request_access of this Listing.
        :type request_access: str
        """

        self._request_access = request_access

    @property
    def restricted_export_config(self):
        """Gets the restricted_export_config of this Listing.


        :return: The restricted_export_config of this Listing.
        :rtype: RestrictedExportConfig
        """
        return self._restricted_export_config

    @restricted_export_config.setter
    def restricted_export_config(self, restricted_export_config):
        """Sets the restricted_export_config of this Listing.


        :param restricted_export_config: The restricted_export_config of this Listing.
        :type restricted_export_config: RestrictedExportConfig
        """

        self._restricted_export_config = restricted_export_config

    @property
    def state(self):
        """Gets the state of this Listing.

        Output only. Current state of the listing.

        :return: The state of this Listing.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Listing.

        Output only. Current state of the listing.

        :param state: The state of this Listing.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
