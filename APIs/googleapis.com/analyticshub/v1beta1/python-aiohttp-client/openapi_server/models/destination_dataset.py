# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destination_dataset_reference import DestinationDatasetReference
from openapi_server import util


class DestinationDataset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_reference: DestinationDatasetReference=None, description: str=None, friendly_name: str=None, labels: Dict[str, str]=None, location: str=None):
        """DestinationDataset - a model defined in OpenAPI

        :param dataset_reference: The dataset_reference of this DestinationDataset.
        :param description: The description of this DestinationDataset.
        :param friendly_name: The friendly_name of this DestinationDataset.
        :param labels: The labels of this DestinationDataset.
        :param location: The location of this DestinationDataset.
        """
        self.openapi_types = {
            'dataset_reference': DestinationDatasetReference,
            'description': str,
            'friendly_name': str,
            'labels': Dict[str, str],
            'location': str
        }

        self.attribute_map = {
            'dataset_reference': 'datasetReference',
            'description': 'description',
            'friendly_name': 'friendlyName',
            'labels': 'labels',
            'location': 'location'
        }

        self._dataset_reference = dataset_reference
        self._description = description
        self._friendly_name = friendly_name
        self._labels = labels
        self._location = location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationDataset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationDataset of this DestinationDataset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_reference(self):
        """Gets the dataset_reference of this DestinationDataset.


        :return: The dataset_reference of this DestinationDataset.
        :rtype: DestinationDatasetReference
        """
        return self._dataset_reference

    @dataset_reference.setter
    def dataset_reference(self, dataset_reference):
        """Sets the dataset_reference of this DestinationDataset.


        :param dataset_reference: The dataset_reference of this DestinationDataset.
        :type dataset_reference: DestinationDatasetReference
        """

        self._dataset_reference = dataset_reference

    @property
    def description(self):
        """Gets the description of this DestinationDataset.

        Optional. A user-friendly description of the dataset.

        :return: The description of this DestinationDataset.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DestinationDataset.

        Optional. A user-friendly description of the dataset.

        :param description: The description of this DestinationDataset.
        :type description: str
        """

        self._description = description

    @property
    def friendly_name(self):
        """Gets the friendly_name of this DestinationDataset.

        Optional. A descriptive name for the dataset.

        :return: The friendly_name of this DestinationDataset.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this DestinationDataset.

        Optional. A descriptive name for the dataset.

        :param friendly_name: The friendly_name of this DestinationDataset.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def labels(self):
        """Gets the labels of this DestinationDataset.

        Optional. The labels associated with this dataset. You can use these to organize and group your datasets. You can set this property when inserting or updating a dataset. See https://cloud.google.com/resource-manager/docs/creating-managing-labels for more information.

        :return: The labels of this DestinationDataset.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this DestinationDataset.

        Optional. The labels associated with this dataset. You can use these to organize and group your datasets. You can set this property when inserting or updating a dataset. See https://cloud.google.com/resource-manager/docs/creating-managing-labels for more information.

        :param labels: The labels of this DestinationDataset.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def location(self):
        """Gets the location of this DestinationDataset.

        Required. The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations.

        :return: The location of this DestinationDataset.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DestinationDataset.

        Required. The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations.

        :param location: The location of this DestinationDataset.
        :type location: str
        """

        self._location = location
