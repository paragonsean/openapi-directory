/**
 * Analytics Hub API
 * Exchange data and analytics assets securely and efficiently.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListing.h
 *
 * A listing is what gets published into a data exchange that a subscriber can subscribe to. It contains a reference to the data source along with descriptive information that will help subscribers find and subscribe the data.
 */

#ifndef OAIListing_H
#define OAIListing_H

#include <QJsonObject>

#include "OAIBigQueryDatasetSource.h"
#include "OAIDataProvider.h"
#include "OAIPublisher.h"
#include "OAIRestrictedExportConfig.h"
#include <QByteArray>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBigQueryDatasetSource;
class OAIDataProvider;
class OAIPublisher;
class OAIRestrictedExportConfig;

class OAIListing : public OAIObject {
public:
    OAIListing();
    OAIListing(QString json);
    ~OAIListing() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBigQueryDatasetSource getBigqueryDataset() const;
    void setBigqueryDataset(const OAIBigQueryDatasetSource &bigquery_dataset);
    bool is_bigquery_dataset_Set() const;
    bool is_bigquery_dataset_Valid() const;

    QList<QString> getCategories() const;
    void setCategories(const QList<QString> &categories);
    bool is_categories_Set() const;
    bool is_categories_Valid() const;

    OAIDataProvider getDataProvider() const;
    void setDataProvider(const OAIDataProvider &data_provider);
    bool is_data_provider_Set() const;
    bool is_data_provider_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getDocumentation() const;
    void setDocumentation(const QString &documentation);
    bool is_documentation_Set() const;
    bool is_documentation_Valid() const;

    QByteArray getIcon() const;
    void setIcon(const QByteArray &icon);
    bool is_icon_Set() const;
    bool is_icon_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPrimaryContact() const;
    void setPrimaryContact(const QString &primary_contact);
    bool is_primary_contact_Set() const;
    bool is_primary_contact_Valid() const;

    OAIPublisher getPublisher() const;
    void setPublisher(const OAIPublisher &publisher);
    bool is_publisher_Set() const;
    bool is_publisher_Valid() const;

    QString getRequestAccess() const;
    void setRequestAccess(const QString &request_access);
    bool is_request_access_Set() const;
    bool is_request_access_Valid() const;

    OAIRestrictedExportConfig getRestrictedExportConfig() const;
    void setRestrictedExportConfig(const OAIRestrictedExportConfig &restricted_export_config);
    bool is_restricted_export_config_Set() const;
    bool is_restricted_export_config_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBigQueryDatasetSource m_bigquery_dataset;
    bool m_bigquery_dataset_isSet;
    bool m_bigquery_dataset_isValid;

    QList<QString> m_categories;
    bool m_categories_isSet;
    bool m_categories_isValid;

    OAIDataProvider m_data_provider;
    bool m_data_provider_isSet;
    bool m_data_provider_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_documentation;
    bool m_documentation_isSet;
    bool m_documentation_isValid;

    QByteArray m_icon;
    bool m_icon_isSet;
    bool m_icon_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_primary_contact;
    bool m_primary_contact_isSet;
    bool m_primary_contact_isValid;

    OAIPublisher m_publisher;
    bool m_publisher_isSet;
    bool m_publisher_isValid;

    QString m_request_access;
    bool m_request_access_isSet;
    bool m_request_access_isValid;

    OAIRestrictedExportConfig m_restricted_export_config;
    bool m_restricted_export_config_isSet;
    bool m_restricted_export_config_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListing)

#endif // OAIListing_H
