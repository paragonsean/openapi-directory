/**
 * Analytics Hub API
 * Exchange data and analytics assets securely and efficiently.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscribeListingRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscribeListingRequest::OAISubscribeListingRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscribeListingRequest::OAISubscribeListingRequest() {
    this->initializeModel();
}

OAISubscribeListingRequest::~OAISubscribeListingRequest() {}

void OAISubscribeListingRequest::initializeModel() {

    m_destination_dataset_isSet = false;
    m_destination_dataset_isValid = false;
}

void OAISubscribeListingRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscribeListingRequest::fromJsonObject(QJsonObject json) {

    m_destination_dataset_isValid = ::OpenAPI::fromJsonValue(m_destination_dataset, json[QString("destinationDataset")]);
    m_destination_dataset_isSet = !json[QString("destinationDataset")].isNull() && m_destination_dataset_isValid;
}

QString OAISubscribeListingRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscribeListingRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_dataset.isSet()) {
        obj.insert(QString("destinationDataset"), ::OpenAPI::toJsonValue(m_destination_dataset));
    }
    return obj;
}

OAIDestinationDataset OAISubscribeListingRequest::getDestinationDataset() const {
    return m_destination_dataset;
}
void OAISubscribeListingRequest::setDestinationDataset(const OAIDestinationDataset &destination_dataset) {
    m_destination_dataset = destination_dataset;
    m_destination_dataset_isSet = true;
}

bool OAISubscribeListingRequest::is_destination_dataset_Set() const{
    return m_destination_dataset_isSet;
}

bool OAISubscribeListingRequest::is_destination_dataset_Valid() const{
    return m_destination_dataset_isValid;
}

bool OAISubscribeListingRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_dataset.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscribeListingRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
