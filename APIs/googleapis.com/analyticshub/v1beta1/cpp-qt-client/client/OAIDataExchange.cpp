/**
 * Analytics Hub API
 * Exchange data and analytics assets securely and efficiently.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataExchange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataExchange::OAIDataExchange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataExchange::OAIDataExchange() {
    this->initializeModel();
}

OAIDataExchange::~OAIDataExchange() {}

void OAIDataExchange::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_documentation_isSet = false;
    m_documentation_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_listing_count_isSet = false;
    m_listing_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_primary_contact_isSet = false;
    m_primary_contact_isValid = false;
}

void OAIDataExchange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataExchange::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_documentation_isValid = ::OpenAPI::fromJsonValue(m_documentation, json[QString("documentation")]);
    m_documentation_isSet = !json[QString("documentation")].isNull() && m_documentation_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_listing_count_isValid = ::OpenAPI::fromJsonValue(m_listing_count, json[QString("listingCount")]);
    m_listing_count_isSet = !json[QString("listingCount")].isNull() && m_listing_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_primary_contact_isValid = ::OpenAPI::fromJsonValue(m_primary_contact, json[QString("primaryContact")]);
    m_primary_contact_isSet = !json[QString("primaryContact")].isNull() && m_primary_contact_isValid;
}

QString OAIDataExchange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataExchange::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_documentation_isSet) {
        obj.insert(QString("documentation"), ::OpenAPI::toJsonValue(m_documentation));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_listing_count_isSet) {
        obj.insert(QString("listingCount"), ::OpenAPI::toJsonValue(m_listing_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_primary_contact_isSet) {
        obj.insert(QString("primaryContact"), ::OpenAPI::toJsonValue(m_primary_contact));
    }
    return obj;
}

QString OAIDataExchange::getDescription() const {
    return m_description;
}
void OAIDataExchange::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDataExchange::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDataExchange::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDataExchange::getDisplayName() const {
    return m_display_name;
}
void OAIDataExchange::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDataExchange::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDataExchange::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIDataExchange::getDocumentation() const {
    return m_documentation;
}
void OAIDataExchange::setDocumentation(const QString &documentation) {
    m_documentation = documentation;
    m_documentation_isSet = true;
}

bool OAIDataExchange::is_documentation_Set() const{
    return m_documentation_isSet;
}

bool OAIDataExchange::is_documentation_Valid() const{
    return m_documentation_isValid;
}

QByteArray OAIDataExchange::getIcon() const {
    return m_icon;
}
void OAIDataExchange::setIcon(const QByteArray &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIDataExchange::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIDataExchange::is_icon_Valid() const{
    return m_icon_isValid;
}

qint32 OAIDataExchange::getListingCount() const {
    return m_listing_count;
}
void OAIDataExchange::setListingCount(const qint32 &listing_count) {
    m_listing_count = listing_count;
    m_listing_count_isSet = true;
}

bool OAIDataExchange::is_listing_count_Set() const{
    return m_listing_count_isSet;
}

bool OAIDataExchange::is_listing_count_Valid() const{
    return m_listing_count_isValid;
}

QString OAIDataExchange::getName() const {
    return m_name;
}
void OAIDataExchange::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataExchange::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataExchange::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDataExchange::getPrimaryContact() const {
    return m_primary_contact;
}
void OAIDataExchange::setPrimaryContact(const QString &primary_contact) {
    m_primary_contact = primary_contact;
    m_primary_contact_isSet = true;
}

bool OAIDataExchange::is_primary_contact_Set() const{
    return m_primary_contact_isSet;
}

bool OAIDataExchange::is_primary_contact_Valid() const{
    return m_primary_contact_isValid;
}

bool OAIDataExchange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listing_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_contact_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataExchange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
