/**
 * Analytics Hub API
 * Exchange data and analytics assets securely and efficiently.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinationDatasetReference from './DestinationDatasetReference';

/**
 * The DestinationDataset model module.
 * @module model/DestinationDataset
 * @version v1beta1
 */
class DestinationDataset {
    /**
     * Constructs a new <code>DestinationDataset</code>.
     * Defines the destination bigquery dataset.
     * @alias module:model/DestinationDataset
     */
    constructor() { 
        
        DestinationDataset.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinationDataset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinationDataset} obj Optional instance to populate.
     * @return {module:model/DestinationDataset} The populated <code>DestinationDataset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinationDataset();

            if (data.hasOwnProperty('datasetReference')) {
                obj['datasetReference'] = DestinationDatasetReference.constructFromObject(data['datasetReference']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinationDataset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinationDataset</code>.
     */
    static validateJSON(data) {
        // validate the optional field `datasetReference`
        if (data['datasetReference']) { // data not null
          DestinationDatasetReference.validateJSON(data['datasetReference']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }

        return true;
    }


}



/**
 * @member {module:model/DestinationDatasetReference} datasetReference
 */
DestinationDataset.prototype['datasetReference'] = undefined;

/**
 * Optional. A user-friendly description of the dataset.
 * @member {String} description
 */
DestinationDataset.prototype['description'] = undefined;

/**
 * Optional. A descriptive name for the dataset.
 * @member {String} friendlyName
 */
DestinationDataset.prototype['friendlyName'] = undefined;

/**
 * Optional. The labels associated with this dataset. You can use these to organize and group your datasets. You can set this property when inserting or updating a dataset. See https://cloud.google.com/resource-manager/docs/creating-managing-labels for more information.
 * @member {Object.<String, String>} labels
 */
DestinationDataset.prototype['labels'] = undefined;

/**
 * Required. The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations.
 * @member {String} location
 */
DestinationDataset.prototype['location'] = undefined;






export default DestinationDataset;

