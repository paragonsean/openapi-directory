/*
 * Analytics Hub API
 * Exchange data and analytics assets securely and efficiently.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DataExchange;
import org.openapitools.client.model.GetIamPolicyRequest;
import org.openapitools.client.model.ListDataExchangesResponse;
import org.openapitools.client.model.ListListingsResponse;
import org.openapitools.client.model.Listing;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.SubscribeListingRequest;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates a new data exchange.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticshubProjectsLocationsDataExchangesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String dataExchangeId = null;
        DataExchange dataExchange = null;
        DataExchange response = api.analyticshubProjectsLocationsDataExchangesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dataExchangeId, dataExchange);
        // TODO: test validations
    }

    /**
     * Lists all data exchanges in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticshubProjectsLocationsDataExchangesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListDataExchangesResponse response = api.analyticshubProjectsLocationsDataExchangesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new listing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticshubProjectsLocationsDataExchangesListingsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String listingId = null;
        Listing listing = null;
        Listing response = api.analyticshubProjectsLocationsDataExchangesListingsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, listingId, listing);
        // TODO: test validations
    }

    /**
     * Deletes a listing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticshubProjectsLocationsDataExchangesListingsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.analyticshubProjectsLocationsDataExchangesListingsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the details of a listing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticshubProjectsLocationsDataExchangesListingsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Listing response = api.analyticshubProjectsLocationsDataExchangesListingsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the IAM policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticshubProjectsLocationsDataExchangesListingsGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GetIamPolicyRequest getIamPolicyRequest = null;
        Policy response = api.analyticshubProjectsLocationsDataExchangesListingsGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, getIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Lists all listings in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticshubProjectsLocationsDataExchangesListingsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListListingsResponse response = api.analyticshubProjectsLocationsDataExchangesListingsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates an existing listing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticshubProjectsLocationsDataExchangesListingsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        Listing listing = null;
        Listing response = api.analyticshubProjectsLocationsDataExchangesListingsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, listing);
        // TODO: test validations
    }

    /**
     * Sets the IAM policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticshubProjectsLocationsDataExchangesListingsSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        Policy response = api.analyticshubProjectsLocationsDataExchangesListingsSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Subscribes to a listing. Currently, with Analytics Hub, you can create listings that reference only BigQuery datasets. Upon subscription to a listing for a BigQuery dataset, Analytics Hub creates a linked dataset in the subscriber&#39;s project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticshubProjectsLocationsDataExchangesListingsSubscribeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SubscribeListingRequest subscribeListingRequest = null;
        Object response = api.analyticshubProjectsLocationsDataExchangesListingsSubscribe(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, subscribeListingRequest);
        // TODO: test validations
    }

    /**
     * Returns the permissions that a caller has.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticshubProjectsLocationsDataExchangesListingsTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.analyticshubProjectsLocationsDataExchangesListingsTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

}
