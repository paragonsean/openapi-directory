/*
 * Analytics Hub API
 * Exchange data and analytics assets securely and efficiently.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A data exchange is a container that lets you share data. Along with the descriptive information about the data exchange, it contains listings that reference shared datasets.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:45.100336-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataExchange {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DOCUMENTATION = "documentation";
  @SerializedName(SERIALIZED_NAME_DOCUMENTATION)
  private String documentation;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private byte[] icon;

  public static final String SERIALIZED_NAME_LISTING_COUNT = "listingCount";
  @SerializedName(SERIALIZED_NAME_LISTING_COUNT)
  private Integer listingCount;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIMARY_CONTACT = "primaryContact";
  @SerializedName(SERIALIZED_NAME_PRIMARY_CONTACT)
  private String primaryContact;

  public DataExchange() {
  }

  public DataExchange(
     Integer listingCount, 
     String name
  ) {
    this();
    this.listingCount = listingCount;
    this.name = name;
  }

  public DataExchange description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Description of the data exchange. The description must not contain Unicode non-characters as well as C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). Default value is an empty string. Max length: 2000 bytes.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DataExchange displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. Human-readable display name of the data exchange. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&amp;) and must not start or end with spaces. Default value is an empty string. Max length: 63 bytes.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public DataExchange documentation(String documentation) {
    this.documentation = documentation;
    return this;
  }

  /**
   * Optional. Documentation describing the data exchange.
   * @return documentation
   */
  @javax.annotation.Nullable
  public String getDocumentation() {
    return documentation;
  }

  public void setDocumentation(String documentation) {
    this.documentation = documentation;
  }


  public DataExchange icon(byte[] icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Optional. Base64 encoded image representing the data exchange. Max Size: 3.0MiB Expected image dimensions are 512x512 pixels, however the API only performs validation on size of the encoded data. Note: For byte fields, the content of the fields are base64-encoded (which increases the size of the data by 33-36%) when using JSON on the wire.
   * @return icon
   */
  @javax.annotation.Nullable
  public byte[] getIcon() {
    return icon;
  }

  public void setIcon(byte[] icon) {
    this.icon = icon;
  }


  /**
   * Output only. Number of listings contained in the data exchange.
   * @return listingCount
   */
  @javax.annotation.Nullable
  public Integer getListingCount() {
    return listingCount;
  }



  /**
   * Output only. The resource name of the data exchange. e.g. &#x60;projects/myproject/locations/US/dataExchanges/123&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public DataExchange primaryContact(String primaryContact) {
    this.primaryContact = primaryContact;
    return this;
  }

  /**
   * Optional. Email or URL of the primary point of contact of the data exchange. Max Length: 1000 bytes.
   * @return primaryContact
   */
  @javax.annotation.Nullable
  public String getPrimaryContact() {
    return primaryContact;
  }

  public void setPrimaryContact(String primaryContact) {
    this.primaryContact = primaryContact;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataExchange dataExchange = (DataExchange) o;
    return Objects.equals(this.description, dataExchange.description) &&
        Objects.equals(this.displayName, dataExchange.displayName) &&
        Objects.equals(this.documentation, dataExchange.documentation) &&
        Arrays.equals(this.icon, dataExchange.icon) &&
        Objects.equals(this.listingCount, dataExchange.listingCount) &&
        Objects.equals(this.name, dataExchange.name) &&
        Objects.equals(this.primaryContact, dataExchange.primaryContact);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayName, documentation, Arrays.hashCode(icon), listingCount, name, primaryContact);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataExchange {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    documentation: ").append(toIndentedString(documentation)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    listingCount: ").append(toIndentedString(listingCount)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    primaryContact: ").append(toIndentedString(primaryContact)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("documentation");
    openapiFields.add("icon");
    openapiFields.add("listingCount");
    openapiFields.add("name");
    openapiFields.add("primaryContact");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataExchange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataExchange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataExchange is not found in the empty JSON string", DataExchange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataExchange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataExchange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("documentation") != null && !jsonObj.get("documentation").isJsonNull()) && !jsonObj.get("documentation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentation").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("primaryContact") != null && !jsonObj.get("primaryContact").isJsonNull()) && !jsonObj.get("primaryContact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryContact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryContact").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataExchange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataExchange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataExchange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataExchange.class));

       return (TypeAdapter<T>) new TypeAdapter<DataExchange>() {
           @Override
           public void write(JsonWriter out, DataExchange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataExchange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataExchange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataExchange
   * @throws IOException if the JSON string is invalid with respect to DataExchange
   */
  public static DataExchange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataExchange.class);
  }

  /**
   * Convert an instance of DataExchange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

