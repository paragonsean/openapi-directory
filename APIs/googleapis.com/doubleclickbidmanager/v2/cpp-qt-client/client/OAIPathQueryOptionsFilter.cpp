/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPathQueryOptionsFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPathQueryOptionsFilter::OAIPathQueryOptionsFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPathQueryOptionsFilter::OAIPathQueryOptionsFilter() {
    this->initializeModel();
}

OAIPathQueryOptionsFilter::~OAIPathQueryOptionsFilter() {}

void OAIPathQueryOptionsFilter::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIPathQueryOptionsFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPathQueryOptionsFilter::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIPathQueryOptionsFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPathQueryOptionsFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_match_isSet) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAIPathQueryOptionsFilter::getFilter() const {
    return m_filter;
}
void OAIPathQueryOptionsFilter::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIPathQueryOptionsFilter::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIPathQueryOptionsFilter::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIPathQueryOptionsFilter::getMatch() const {
    return m_match;
}
void OAIPathQueryOptionsFilter::setMatch(const QString &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAIPathQueryOptionsFilter::is_match_Set() const{
    return m_match_isSet;
}

bool OAIPathQueryOptionsFilter::is_match_Valid() const{
    return m_match_isValid;
}

QList<QString> OAIPathQueryOptionsFilter::getValues() const {
    return m_values;
}
void OAIPathQueryOptionsFilter::setValues(const QList<QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIPathQueryOptionsFilter::is_values_Set() const{
    return m_values_isSet;
}

bool OAIPathQueryOptionsFilter::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIPathQueryOptionsFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPathQueryOptionsFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
