/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuery::OAIQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuery::OAIQuery() {
    this->initializeModel();
}

OAIQuery::~OAIQuery() {}

void OAIQuery::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_query_id_isSet = false;
    m_query_id_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;
}

void OAIQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuery::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_query_id_isValid = ::OpenAPI::fromJsonValue(m_query_id, json[QString("queryId")]);
    m_query_id_isSet = !json[QString("queryId")].isNull() && m_query_id_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;
}

QString OAIQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_params.isSet()) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_query_id_isSet) {
        obj.insert(QString("queryId"), ::OpenAPI::toJsonValue(m_query_id));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    return obj;
}

OAIQueryMetadata OAIQuery::getMetadata() const {
    return m_metadata;
}
void OAIQuery::setMetadata(const OAIQueryMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIQuery::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIQuery::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIParameters OAIQuery::getParams() const {
    return m_params;
}
void OAIQuery::setParams(const OAIParameters &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIQuery::is_params_Set() const{
    return m_params_isSet;
}

bool OAIQuery::is_params_Valid() const{
    return m_params_isValid;
}

QString OAIQuery::getQueryId() const {
    return m_query_id;
}
void OAIQuery::setQueryId(const QString &query_id) {
    m_query_id = query_id;
    m_query_id_isSet = true;
}

bool OAIQuery::is_query_id_Set() const{
    return m_query_id_isSet;
}

bool OAIQuery::is_query_id_Valid() const{
    return m_query_id_isValid;
}

OAIQuerySchedule OAIQuery::getSchedule() const {
    return m_schedule;
}
void OAIQuery::setSchedule(const OAIQuerySchedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIQuery::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIQuery::is_schedule_Valid() const{
    return m_schedule_isValid;
}

bool OAIQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
