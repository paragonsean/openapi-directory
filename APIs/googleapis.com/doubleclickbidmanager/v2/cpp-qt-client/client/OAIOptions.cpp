/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOptions::OAIOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOptions::OAIOptions() {
    this->initializeModel();
}

OAIOptions::~OAIOptions() {}

void OAIOptions::initializeModel() {

    m_include_only_targeted_user_lists_isSet = false;
    m_include_only_targeted_user_lists_isValid = false;

    m_path_query_options_isSet = false;
    m_path_query_options_isValid = false;
}

void OAIOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOptions::fromJsonObject(QJsonObject json) {

    m_include_only_targeted_user_lists_isValid = ::OpenAPI::fromJsonValue(m_include_only_targeted_user_lists, json[QString("includeOnlyTargetedUserLists")]);
    m_include_only_targeted_user_lists_isSet = !json[QString("includeOnlyTargetedUserLists")].isNull() && m_include_only_targeted_user_lists_isValid;

    m_path_query_options_isValid = ::OpenAPI::fromJsonValue(m_path_query_options, json[QString("pathQueryOptions")]);
    m_path_query_options_isSet = !json[QString("pathQueryOptions")].isNull() && m_path_query_options_isValid;
}

QString OAIOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_include_only_targeted_user_lists_isSet) {
        obj.insert(QString("includeOnlyTargetedUserLists"), ::OpenAPI::toJsonValue(m_include_only_targeted_user_lists));
    }
    if (m_path_query_options.isSet()) {
        obj.insert(QString("pathQueryOptions"), ::OpenAPI::toJsonValue(m_path_query_options));
    }
    return obj;
}

bool OAIOptions::isIncludeOnlyTargetedUserLists() const {
    return m_include_only_targeted_user_lists;
}
void OAIOptions::setIncludeOnlyTargetedUserLists(const bool &include_only_targeted_user_lists) {
    m_include_only_targeted_user_lists = include_only_targeted_user_lists;
    m_include_only_targeted_user_lists_isSet = true;
}

bool OAIOptions::is_include_only_targeted_user_lists_Set() const{
    return m_include_only_targeted_user_lists_isSet;
}

bool OAIOptions::is_include_only_targeted_user_lists_Valid() const{
    return m_include_only_targeted_user_lists_isValid;
}

OAIPathQueryOptions OAIOptions::getPathQueryOptions() const {
    return m_path_query_options;
}
void OAIOptions::setPathQueryOptions(const OAIPathQueryOptions &path_query_options) {
    m_path_query_options = path_query_options;
    m_path_query_options_isSet = true;
}

bool OAIOptions::is_path_query_options_Set() const{
    return m_path_query_options_isSet;
}

bool OAIOptions::is_path_query_options_Valid() const{
    return m_path_query_options_isValid;
}

bool OAIOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_include_only_targeted_user_lists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_query_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
