/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryMetadata::OAIQueryMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryMetadata::OAIQueryMetadata() {
    this->initializeModel();
}

OAIQueryMetadata::~OAIQueryMetadata() {}

void OAIQueryMetadata::initializeModel() {

    m_data_range_isSet = false;
    m_data_range_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_send_notification_isSet = false;
    m_send_notification_isValid = false;

    m_share_email_address_isSet = false;
    m_share_email_address_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIQueryMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryMetadata::fromJsonObject(QJsonObject json) {

    m_data_range_isValid = ::OpenAPI::fromJsonValue(m_data_range, json[QString("dataRange")]);
    m_data_range_isSet = !json[QString("dataRange")].isNull() && m_data_range_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_send_notification_isValid = ::OpenAPI::fromJsonValue(m_send_notification, json[QString("sendNotification")]);
    m_send_notification_isSet = !json[QString("sendNotification")].isNull() && m_send_notification_isValid;

    m_share_email_address_isValid = ::OpenAPI::fromJsonValue(m_share_email_address, json[QString("shareEmailAddress")]);
    m_share_email_address_isSet = !json[QString("shareEmailAddress")].isNull() && m_share_email_address_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIQueryMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_data_range.isSet()) {
        obj.insert(QString("dataRange"), ::OpenAPI::toJsonValue(m_data_range));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_send_notification_isSet) {
        obj.insert(QString("sendNotification"), ::OpenAPI::toJsonValue(m_send_notification));
    }
    if (m_share_email_address.size() > 0) {
        obj.insert(QString("shareEmailAddress"), ::OpenAPI::toJsonValue(m_share_email_address));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

OAIDataRange OAIQueryMetadata::getDataRange() const {
    return m_data_range;
}
void OAIQueryMetadata::setDataRange(const OAIDataRange &data_range) {
    m_data_range = data_range;
    m_data_range_isSet = true;
}

bool OAIQueryMetadata::is_data_range_Set() const{
    return m_data_range_isSet;
}

bool OAIQueryMetadata::is_data_range_Valid() const{
    return m_data_range_isValid;
}

QString OAIQueryMetadata::getFormat() const {
    return m_format;
}
void OAIQueryMetadata::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIQueryMetadata::is_format_Set() const{
    return m_format_isSet;
}

bool OAIQueryMetadata::is_format_Valid() const{
    return m_format_isValid;
}

bool OAIQueryMetadata::isSendNotification() const {
    return m_send_notification;
}
void OAIQueryMetadata::setSendNotification(const bool &send_notification) {
    m_send_notification = send_notification;
    m_send_notification_isSet = true;
}

bool OAIQueryMetadata::is_send_notification_Set() const{
    return m_send_notification_isSet;
}

bool OAIQueryMetadata::is_send_notification_Valid() const{
    return m_send_notification_isValid;
}

QList<QString> OAIQueryMetadata::getShareEmailAddress() const {
    return m_share_email_address;
}
void OAIQueryMetadata::setShareEmailAddress(const QList<QString> &share_email_address) {
    m_share_email_address = share_email_address;
    m_share_email_address_isSet = true;
}

bool OAIQueryMetadata::is_share_email_address_Set() const{
    return m_share_email_address_isSet;
}

bool OAIQueryMetadata::is_share_email_address_Valid() const{
    return m_share_email_address_isValid;
}

QString OAIQueryMetadata::getTitle() const {
    return m_title;
}
void OAIQueryMetadata::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIQueryMetadata::is_title_Set() const{
    return m_title_isSet;
}

bool OAIQueryMetadata::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIQueryMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_email_address.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
