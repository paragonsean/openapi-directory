/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelGrouping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelGrouping::OAIChannelGrouping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelGrouping::OAIChannelGrouping() {
    this->initializeModel();
}

OAIChannelGrouping::~OAIChannelGrouping() {}

void OAIChannelGrouping::initializeModel() {

    m_fallback_name_isSet = false;
    m_fallback_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;
}

void OAIChannelGrouping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelGrouping::fromJsonObject(QJsonObject json) {

    m_fallback_name_isValid = ::OpenAPI::fromJsonValue(m_fallback_name, json[QString("fallbackName")]);
    m_fallback_name_isSet = !json[QString("fallbackName")].isNull() && m_fallback_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;
}

QString OAIChannelGrouping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelGrouping::asJsonObject() const {
    QJsonObject obj;
    if (m_fallback_name_isSet) {
        obj.insert(QString("fallbackName"), ::OpenAPI::toJsonValue(m_fallback_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rules.size() > 0) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    return obj;
}

QString OAIChannelGrouping::getFallbackName() const {
    return m_fallback_name;
}
void OAIChannelGrouping::setFallbackName(const QString &fallback_name) {
    m_fallback_name = fallback_name;
    m_fallback_name_isSet = true;
}

bool OAIChannelGrouping::is_fallback_name_Set() const{
    return m_fallback_name_isSet;
}

bool OAIChannelGrouping::is_fallback_name_Valid() const{
    return m_fallback_name_isValid;
}

QString OAIChannelGrouping::getName() const {
    return m_name;
}
void OAIChannelGrouping::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIChannelGrouping::is_name_Set() const{
    return m_name_isSet;
}

bool OAIChannelGrouping::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIRule> OAIChannelGrouping::getRules() const {
    return m_rules;
}
void OAIChannelGrouping::setRules(const QList<OAIRule> &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIChannelGrouping::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIChannelGrouping::is_rules_Valid() const{
    return m_rules_isValid;
}

bool OAIChannelGrouping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fallback_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelGrouping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
