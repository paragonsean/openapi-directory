/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelGrouping from './ChannelGrouping';
import PathFilter from './PathFilter';

/**
 * The PathQueryOptions model module.
 * @module model/PathQueryOptions
 * @version v2
 */
class PathQueryOptions {
    /**
     * Constructs a new <code>PathQueryOptions</code>.
     * Path Query Options for Report Options.
     * @alias module:model/PathQueryOptions
     */
    constructor() { 
        
        PathQueryOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PathQueryOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PathQueryOptions} obj Optional instance to populate.
     * @return {module:model/PathQueryOptions} The populated <code>PathQueryOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PathQueryOptions();

            if (data.hasOwnProperty('channelGrouping')) {
                obj['channelGrouping'] = ChannelGrouping.constructFromObject(data['channelGrouping']);
            }
            if (data.hasOwnProperty('pathFilters')) {
                obj['pathFilters'] = ApiClient.convertToType(data['pathFilters'], [PathFilter]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PathQueryOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PathQueryOptions</code>.
     */
    static validateJSON(data) {
        // validate the optional field `channelGrouping`
        if (data['channelGrouping']) { // data not null
          ChannelGrouping.validateJSON(data['channelGrouping']);
        }
        if (data['pathFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pathFilters'])) {
                throw new Error("Expected the field `pathFilters` to be an array in the JSON data but got " + data['pathFilters']);
            }
            // validate the optional field `pathFilters` (array)
            for (const item of data['pathFilters']) {
                PathFilter.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/ChannelGrouping} channelGrouping
 */
PathQueryOptions.prototype['channelGrouping'] = undefined;

/**
 * Path Filters. There is a limit of 100 path filters that can be set per report.
 * @member {Array.<module:model/PathFilter>} pathFilters
 */
PathQueryOptions.prototype['pathFilters'] = undefined;






export default PathQueryOptions;

