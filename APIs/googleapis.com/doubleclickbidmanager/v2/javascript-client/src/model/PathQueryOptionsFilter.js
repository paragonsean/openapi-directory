/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PathQueryOptionsFilter model module.
 * @module model/PathQueryOptionsFilter
 * @version v2
 */
class PathQueryOptionsFilter {
    /**
     * Constructs a new <code>PathQueryOptionsFilter</code>.
     * Dimension filter on path events.
     * @alias module:model/PathQueryOptionsFilter
     */
    constructor() { 
        
        PathQueryOptionsFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PathQueryOptionsFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PathQueryOptionsFilter} obj Optional instance to populate.
     * @return {module:model/PathQueryOptionsFilter} The populated <code>PathQueryOptionsFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PathQueryOptionsFilter();

            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('match')) {
                obj['match'] = ApiClient.convertToType(data['match'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PathQueryOptionsFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PathQueryOptionsFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }
        // ensure the json data is a string
        if (data['match'] && !(typeof data['match'] === 'string' || data['match'] instanceof String)) {
            throw new Error("Expected the field `match` to be a primitive type in the JSON string but got " + data['match']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['values'])) {
            throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
        }

        return true;
    }


}



/**
 * Dimension the filter is applied to.
 * @member {String} filter
 */
PathQueryOptionsFilter.prototype['filter'] = undefined;

/**
 * Match logic of the filter.
 * @member {module:model/PathQueryOptionsFilter.MatchEnum} match
 */
PathQueryOptionsFilter.prototype['match'] = undefined;

/**
 * Values to filter on.
 * @member {Array.<String>} values
 */
PathQueryOptionsFilter.prototype['values'] = undefined;





/**
 * Allowed values for the <code>match</code> property.
 * @enum {String}
 * @readonly
 */
PathQueryOptionsFilter['MatchEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "EXACT"
     * @const
     */
    "EXACT": "EXACT",

    /**
     * value: "PARTIAL"
     * @const
     */
    "PARTIAL": "PARTIAL",

    /**
     * value: "BEGINS_WITH"
     * @const
     */
    "BEGINS_WITH": "BEGINS_WITH",

    /**
     * value: "WILDCARD_EXPRESSION"
     * @const
     */
    "WILDCARD_EXPRESSION": "WILDCARD_EXPRESSION"
};



export default PathQueryOptionsFilter;

