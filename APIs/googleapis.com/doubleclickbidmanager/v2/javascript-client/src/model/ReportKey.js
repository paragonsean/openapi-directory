/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReportKey model module.
 * @module model/ReportKey
 * @version v2
 */
class ReportKey {
    /**
     * Constructs a new <code>ReportKey</code>.
     * Key used to identify a report.
     * @alias module:model/ReportKey
     */
    constructor() { 
        
        ReportKey.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportKey} obj Optional instance to populate.
     * @return {module:model/ReportKey} The populated <code>ReportKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportKey();

            if (data.hasOwnProperty('queryId')) {
                obj['queryId'] = ApiClient.convertToType(data['queryId'], 'String');
            }
            if (data.hasOwnProperty('reportId')) {
                obj['reportId'] = ApiClient.convertToType(data['reportId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportKey</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['queryId'] && !(typeof data['queryId'] === 'string' || data['queryId'] instanceof String)) {
            throw new Error("Expected the field `queryId` to be a primitive type in the JSON string but got " + data['queryId']);
        }
        // ensure the json data is a string
        if (data['reportId'] && !(typeof data['reportId'] === 'string' || data['reportId'] instanceof String)) {
            throw new Error("Expected the field `reportId` to be a primitive type in the JSON string but got " + data['reportId']);
        }

        return true;
    }


}



/**
 * Output only. Query ID.
 * @member {String} queryId
 */
ReportKey.prototype['queryId'] = undefined;

/**
 * Output only. Report ID.
 * @member {String} reportId
 */
ReportKey.prototype['reportId'] = undefined;






export default ReportKey;

