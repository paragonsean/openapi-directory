/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelDate from './ModelDate';

/**
 * The DataRange model module.
 * @module model/DataRange
 * @version v2
 */
class DataRange {
    /**
     * Constructs a new <code>DataRange</code>.
     * Report data range.
     * @alias module:model/DataRange
     */
    constructor() { 
        
        DataRange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataRange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataRange} obj Optional instance to populate.
     * @return {module:model/DataRange} The populated <code>DataRange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataRange();

            if (data.hasOwnProperty('customEndDate')) {
                obj['customEndDate'] = ModelDate.constructFromObject(data['customEndDate']);
            }
            if (data.hasOwnProperty('customStartDate')) {
                obj['customStartDate'] = ModelDate.constructFromObject(data['customStartDate']);
            }
            if (data.hasOwnProperty('range')) {
                obj['range'] = ApiClient.convertToType(data['range'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataRange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataRange</code>.
     */
    static validateJSON(data) {
        // validate the optional field `customEndDate`
        if (data['customEndDate']) { // data not null
          ModelDate.validateJSON(data['customEndDate']);
        }
        // validate the optional field `customStartDate`
        if (data['customStartDate']) { // data not null
          ModelDate.validateJSON(data['customStartDate']);
        }
        // ensure the json data is a string
        if (data['range'] && !(typeof data['range'] === 'string' || data['range'] instanceof String)) {
            throw new Error("Expected the field `range` to be a primitive type in the JSON string but got " + data['range']);
        }

        return true;
    }


}



/**
 * @member {module:model/ModelDate} customEndDate
 */
DataRange.prototype['customEndDate'] = undefined;

/**
 * @member {module:model/ModelDate} customStartDate
 */
DataRange.prototype['customStartDate'] = undefined;

/**
 * Report data range used to generate the report.
 * @member {module:model/DataRange.RangeEnum} range
 */
DataRange.prototype['range'] = undefined;





/**
 * Allowed values for the <code>range</code> property.
 * @enum {String}
 * @readonly
 */
DataRange['RangeEnum'] = {

    /**
     * value: "RANGE_UNSPECIFIED"
     * @const
     */
    "RANGE_UNSPECIFIED": "RANGE_UNSPECIFIED",

    /**
     * value: "CUSTOM_DATES"
     * @const
     */
    "CUSTOM_DATES": "CUSTOM_DATES",

    /**
     * value: "CURRENT_DAY"
     * @const
     */
    "CURRENT_DAY": "CURRENT_DAY",

    /**
     * value: "PREVIOUS_DAY"
     * @const
     */
    "PREVIOUS_DAY": "PREVIOUS_DAY",

    /**
     * value: "WEEK_TO_DATE"
     * @const
     */
    "WEEK_TO_DATE": "WEEK_TO_DATE",

    /**
     * value: "MONTH_TO_DATE"
     * @const
     */
    "MONTH_TO_DATE": "MONTH_TO_DATE",

    /**
     * value: "QUARTER_TO_DATE"
     * @const
     */
    "QUARTER_TO_DATE": "QUARTER_TO_DATE",

    /**
     * value: "YEAR_TO_DATE"
     * @const
     */
    "YEAR_TO_DATE": "YEAR_TO_DATE",

    /**
     * value: "PREVIOUS_WEEK"
     * @const
     */
    "PREVIOUS_WEEK": "PREVIOUS_WEEK",

    /**
     * value: "PREVIOUS_MONTH"
     * @const
     */
    "PREVIOUS_MONTH": "PREVIOUS_MONTH",

    /**
     * value: "PREVIOUS_QUARTER"
     * @const
     */
    "PREVIOUS_QUARTER": "PREVIOUS_QUARTER",

    /**
     * value: "PREVIOUS_YEAR"
     * @const
     */
    "PREVIOUS_YEAR": "PREVIOUS_YEAR",

    /**
     * value: "LAST_7_DAYS"
     * @const
     */
    "LAST_7_DAYS": "LAST_7_DAYS",

    /**
     * value: "LAST_30_DAYS"
     * @const
     */
    "LAST_30_DAYS": "LAST_30_DAYS",

    /**
     * value: "LAST_90_DAYS"
     * @const
     */
    "LAST_90_DAYS": "LAST_90_DAYS",

    /**
     * value: "LAST_365_DAYS"
     * @const
     */
    "LAST_365_DAYS": "LAST_365_DAYS",

    /**
     * value: "ALL_TIME"
     * @const
     */
    "ALL_TIME": "ALL_TIME",

    /**
     * value: "LAST_14_DAYS"
     * @const
     */
    "LAST_14_DAYS": "LAST_14_DAYS",

    /**
     * value: "LAST_60_DAYS"
     * @const
     */
    "LAST_60_DAYS": "LAST_60_DAYS"
};



export default DataRange;

