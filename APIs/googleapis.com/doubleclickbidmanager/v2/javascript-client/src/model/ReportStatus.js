/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReportStatus model module.
 * @module model/ReportStatus
 * @version v2
 */
class ReportStatus {
    /**
     * Constructs a new <code>ReportStatus</code>.
     * Report status.
     * @alias module:model/ReportStatus
     */
    constructor() { 
        
        ReportStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportStatus} obj Optional instance to populate.
     * @return {module:model/ReportStatus} The populated <code>ReportStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportStatus();

            if (data.hasOwnProperty('finishTime')) {
                obj['finishTime'] = ApiClient.convertToType(data['finishTime'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportStatus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['finishTime'] && !(typeof data['finishTime'] === 'string' || data['finishTime'] instanceof String)) {
            throw new Error("Expected the field `finishTime` to be a primitive type in the JSON string but got " + data['finishTime']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Output only. The time when this report either completed successfully or failed.
 * @member {String} finishTime
 */
ReportStatus.prototype['finishTime'] = undefined;

/**
 * The file type of the report.
 * @member {module:model/ReportStatus.FormatEnum} format
 */
ReportStatus.prototype['format'] = undefined;

/**
 * Output only. The state of the report.
 * @member {module:model/ReportStatus.StateEnum} state
 */
ReportStatus.prototype['state'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
ReportStatus['FormatEnum'] = {

    /**
     * value: "FORMAT_UNSPECIFIED"
     * @const
     */
    "FORMAT_UNSPECIFIED": "FORMAT_UNSPECIFIED",

    /**
     * value: "CSV"
     * @const
     */
    "CSV": "CSV",

    /**
     * value: "XLSX"
     * @const
     */
    "XLSX": "XLSX"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ReportStatus['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "QUEUED"
     * @const
     */
    "QUEUED": "QUEUED",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "DONE"
     * @const
     */
    "DONE": "DONE",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default ReportStatus;

