/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FilterPair from './FilterPair';
import Options from './Options';

/**
 * The Parameters model module.
 * @module model/Parameters
 * @version v2
 */
class Parameters {
    /**
     * Constructs a new <code>Parameters</code>.
     * Parameters of a query or report.
     * @alias module:model/Parameters
     */
    constructor() { 
        
        Parameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Parameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Parameters} obj Optional instance to populate.
     * @return {module:model/Parameters} The populated <code>Parameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Parameters();

            if (data.hasOwnProperty('filters')) {
                obj['filters'] = ApiClient.convertToType(data['filters'], [FilterPair]);
            }
            if (data.hasOwnProperty('groupBys')) {
                obj['groupBys'] = ApiClient.convertToType(data['groupBys'], ['String']);
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], ['String']);
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = Options.constructFromObject(data['options']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Parameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Parameters</code>.
     */
    static validateJSON(data) {
        if (data['filters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filters'])) {
                throw new Error("Expected the field `filters` to be an array in the JSON data but got " + data['filters']);
            }
            // validate the optional field `filters` (array)
            for (const item of data['filters']) {
                FilterPair.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['groupBys'])) {
            throw new Error("Expected the field `groupBys` to be an array in the JSON data but got " + data['groupBys']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['metrics'])) {
            throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
        }
        // validate the optional field `options`
        if (data['options']) { // data not null
          Options.validateJSON(data['options']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Filters used to match traffic data in your report.
 * @member {Array.<module:model/FilterPair>} filters
 */
Parameters.prototype['filters'] = undefined;

/**
 * Data is grouped by the filters listed in this field.
 * @member {Array.<String>} groupBys
 */
Parameters.prototype['groupBys'] = undefined;

/**
 * Metrics to include as columns in your report.
 * @member {Array.<String>} metrics
 */
Parameters.prototype['metrics'] = undefined;

/**
 * @member {module:model/Options} options
 */
Parameters.prototype['options'] = undefined;

/**
 * The type of the report. The type of the report will dictate what dimesions, filters, and metrics can be used.
 * @member {module:model/Parameters.TypeEnum} type
 */
Parameters.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Parameters['TypeEnum'] = {

    /**
     * value: "REPORT_TYPE_UNSPECIFIED"
     * @const
     */
    "REPORT_TYPE_UNSPECIFIED": "REPORT_TYPE_UNSPECIFIED",

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD",

    /**
     * value: "INVENTORY_AVAILABILITY"
     * @const
     */
    "INVENTORY_AVAILABILITY": "INVENTORY_AVAILABILITY",

    /**
     * value: "AUDIENCE_COMPOSITION"
     * @const
     */
    "AUDIENCE_COMPOSITION": "AUDIENCE_COMPOSITION",

    /**
     * value: "FLOODLIGHT"
     * @const
     */
    "FLOODLIGHT": "FLOODLIGHT",

    /**
     * value: "YOUTUBE"
     * @const
     */
    "YOUTUBE": "YOUTUBE",

    /**
     * value: "GRP"
     * @const
     */
    "GRP": "GRP",

    /**
     * value: "YOUTUBE_PROGRAMMATIC_GUARANTEED"
     * @const
     */
    "YOUTUBE_PROGRAMMATIC_GUARANTEED": "YOUTUBE_PROGRAMMATIC_GUARANTEED",

    /**
     * value: "REACH"
     * @const
     */
    "REACH": "REACH",

    /**
     * value: "UNIQUE_REACH_AUDIENCE"
     * @const
     */
    "UNIQUE_REACH_AUDIENCE": "UNIQUE_REACH_AUDIENCE",

    /**
     * value: "FULL_PATH"
     * @const
     */
    "FULL_PATH": "FULL_PATH",

    /**
     * value: "PATH_ATTRIBUTION"
     * @const
     */
    "PATH_ATTRIBUTION": "PATH_ATTRIBUTION"
};



export default Parameters;

