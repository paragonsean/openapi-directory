# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_date import ModelDate
from openapi_server import util


class DataRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_end_date: ModelDate=None, custom_start_date: ModelDate=None, range: str=None):
        """DataRange - a model defined in OpenAPI

        :param custom_end_date: The custom_end_date of this DataRange.
        :param custom_start_date: The custom_start_date of this DataRange.
        :param range: The range of this DataRange.
        """
        self.openapi_types = {
            'custom_end_date': ModelDate,
            'custom_start_date': ModelDate,
            'range': str
        }

        self.attribute_map = {
            'custom_end_date': 'customEndDate',
            'custom_start_date': 'customStartDate',
            'range': 'range'
        }

        self._custom_end_date = custom_end_date
        self._custom_start_date = custom_start_date
        self._range = range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataRange of this DataRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_end_date(self):
        """Gets the custom_end_date of this DataRange.


        :return: The custom_end_date of this DataRange.
        :rtype: ModelDate
        """
        return self._custom_end_date

    @custom_end_date.setter
    def custom_end_date(self, custom_end_date):
        """Sets the custom_end_date of this DataRange.


        :param custom_end_date: The custom_end_date of this DataRange.
        :type custom_end_date: ModelDate
        """

        self._custom_end_date = custom_end_date

    @property
    def custom_start_date(self):
        """Gets the custom_start_date of this DataRange.


        :return: The custom_start_date of this DataRange.
        :rtype: ModelDate
        """
        return self._custom_start_date

    @custom_start_date.setter
    def custom_start_date(self, custom_start_date):
        """Sets the custom_start_date of this DataRange.


        :param custom_start_date: The custom_start_date of this DataRange.
        :type custom_start_date: ModelDate
        """

        self._custom_start_date = custom_start_date

    @property
    def range(self):
        """Gets the range of this DataRange.

        Report data range used to generate the report.

        :return: The range of this DataRange.
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this DataRange.

        Report data range used to generate the report.

        :param range: The range of this DataRange.
        :type range: str
        """
        allowed_values = ["RANGE_UNSPECIFIED", "CUSTOM_DATES", "CURRENT_DAY", "PREVIOUS_DAY", "WEEK_TO_DATE", "MONTH_TO_DATE", "QUARTER_TO_DATE", "YEAR_TO_DATE", "PREVIOUS_WEEK", "PREVIOUS_MONTH", "PREVIOUS_QUARTER", "PREVIOUS_YEAR", "LAST_7_DAYS", "LAST_30_DAYS", "LAST_90_DAYS", "LAST_365_DAYS", "ALL_TIME", "LAST_14_DAYS", "LAST_60_DAYS"]  # noqa: E501
        if range not in allowed_values:
            raise ValueError(
                "Invalid value for `range` ({0}), must be one of {1}"
                .format(range, allowed_values)
            )

        self._range = range
