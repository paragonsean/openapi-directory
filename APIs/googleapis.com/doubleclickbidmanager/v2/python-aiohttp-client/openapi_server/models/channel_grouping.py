# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule import Rule
from openapi_server import util


class ChannelGrouping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fallback_name: str=None, name: str=None, rules: List[Rule]=None):
        """ChannelGrouping - a model defined in OpenAPI

        :param fallback_name: The fallback_name of this ChannelGrouping.
        :param name: The name of this ChannelGrouping.
        :param rules: The rules of this ChannelGrouping.
        """
        self.openapi_types = {
            'fallback_name': str,
            'name': str,
            'rules': List[Rule]
        }

        self.attribute_map = {
            'fallback_name': 'fallbackName',
            'name': 'name',
            'rules': 'rules'
        }

        self._fallback_name = fallback_name
        self._name = name
        self._rules = rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelGrouping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelGrouping of this ChannelGrouping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fallback_name(self):
        """Gets the fallback_name of this ChannelGrouping.

        The name to apply to an event that does not match any of the rules in the channel grouping.

        :return: The fallback_name of this ChannelGrouping.
        :rtype: str
        """
        return self._fallback_name

    @fallback_name.setter
    def fallback_name(self, fallback_name):
        """Sets the fallback_name of this ChannelGrouping.

        The name to apply to an event that does not match any of the rules in the channel grouping.

        :param fallback_name: The fallback_name of this ChannelGrouping.
        :type fallback_name: str
        """

        self._fallback_name = fallback_name

    @property
    def name(self):
        """Gets the name of this ChannelGrouping.

        Channel Grouping name.

        :return: The name of this ChannelGrouping.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChannelGrouping.

        Channel Grouping name.

        :param name: The name of this ChannelGrouping.
        :type name: str
        """

        self._name = name

    @property
    def rules(self):
        """Gets the rules of this ChannelGrouping.

        Rules within Channel Grouping. There is a limit of 100 rules that can be set per channel grouping.

        :return: The rules of this ChannelGrouping.
        :rtype: List[Rule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this ChannelGrouping.

        Rules within Channel Grouping. There is a limit of 100 rules that can be set per channel grouping.

        :param rules: The rules of this ChannelGrouping.
        :type rules: List[Rule]
        """

        self._rules = rules
