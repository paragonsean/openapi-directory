# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PathQueryOptionsFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: str=None, match: str=None, values: List[str]=None):
        """PathQueryOptionsFilter - a model defined in OpenAPI

        :param filter: The filter of this PathQueryOptionsFilter.
        :param match: The match of this PathQueryOptionsFilter.
        :param values: The values of this PathQueryOptionsFilter.
        """
        self.openapi_types = {
            'filter': str,
            'match': str,
            'values': List[str]
        }

        self.attribute_map = {
            'filter': 'filter',
            'match': 'match',
            'values': 'values'
        }

        self._filter = filter
        self._match = match
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PathQueryOptionsFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PathQueryOptionsFilter of this PathQueryOptionsFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this PathQueryOptionsFilter.

        Dimension the filter is applied to.

        :return: The filter of this PathQueryOptionsFilter.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this PathQueryOptionsFilter.

        Dimension the filter is applied to.

        :param filter: The filter of this PathQueryOptionsFilter.
        :type filter: str
        """

        self._filter = filter

    @property
    def match(self):
        """Gets the match of this PathQueryOptionsFilter.

        Match logic of the filter.

        :return: The match of this PathQueryOptionsFilter.
        :rtype: str
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this PathQueryOptionsFilter.

        Match logic of the filter.

        :param match: The match of this PathQueryOptionsFilter.
        :type match: str
        """
        allowed_values = ["UNKNOWN", "EXACT", "PARTIAL", "BEGINS_WITH", "WILDCARD_EXPRESSION"]  # noqa: E501
        if match not in allowed_values:
            raise ValueError(
                "Invalid value for `match` ({0}), must be one of {1}"
                .format(match, allowed_values)
            )

        self._match = match

    @property
    def values(self):
        """Gets the values of this PathQueryOptionsFilter.

        Values to filter on.

        :return: The values of this PathQueryOptionsFilter.
        :rtype: List[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this PathQueryOptionsFilter.

        Values to filter on.

        :param values: The values of this PathQueryOptionsFilter.
        :type values: List[str]
        """

        self._values = values
