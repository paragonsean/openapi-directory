# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, finish_time: str=None, format: str=None, state: str=None):
        """ReportStatus - a model defined in OpenAPI

        :param finish_time: The finish_time of this ReportStatus.
        :param format: The format of this ReportStatus.
        :param state: The state of this ReportStatus.
        """
        self.openapi_types = {
            'finish_time': str,
            'format': str,
            'state': str
        }

        self.attribute_map = {
            'finish_time': 'finishTime',
            'format': 'format',
            'state': 'state'
        }

        self._finish_time = finish_time
        self._format = format
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportStatus of this ReportStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def finish_time(self):
        """Gets the finish_time of this ReportStatus.

        Output only. The time when this report either completed successfully or failed.

        :return: The finish_time of this ReportStatus.
        :rtype: str
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time):
        """Sets the finish_time of this ReportStatus.

        Output only. The time when this report either completed successfully or failed.

        :param finish_time: The finish_time of this ReportStatus.
        :type finish_time: str
        """

        self._finish_time = finish_time

    @property
    def format(self):
        """Gets the format of this ReportStatus.

        The file type of the report.

        :return: The format of this ReportStatus.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ReportStatus.

        The file type of the report.

        :param format: The format of this ReportStatus.
        :type format: str
        """
        allowed_values = ["FORMAT_UNSPECIFIED", "CSV", "XLSX"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def state(self):
        """Gets the state of this ReportStatus.

        Output only. The state of the report.

        :return: The state of this ReportStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ReportStatus.

        Output only. The state of the report.

        :param state: The state of this ReportStatus.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "QUEUED", "RUNNING", "DONE", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
