# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_date import ModelDate
from openapi_server import util


class QuerySchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_date: ModelDate=None, frequency: str=None, next_run_timezone_code: str=None, start_date: ModelDate=None):
        """QuerySchedule - a model defined in OpenAPI

        :param end_date: The end_date of this QuerySchedule.
        :param frequency: The frequency of this QuerySchedule.
        :param next_run_timezone_code: The next_run_timezone_code of this QuerySchedule.
        :param start_date: The start_date of this QuerySchedule.
        """
        self.openapi_types = {
            'end_date': ModelDate,
            'frequency': str,
            'next_run_timezone_code': str,
            'start_date': ModelDate
        }

        self.attribute_map = {
            'end_date': 'endDate',
            'frequency': 'frequency',
            'next_run_timezone_code': 'nextRunTimezoneCode',
            'start_date': 'startDate'
        }

        self._end_date = end_date
        self._frequency = frequency
        self._next_run_timezone_code = next_run_timezone_code
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuerySchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QuerySchedule of this QuerySchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_date(self):
        """Gets the end_date of this QuerySchedule.


        :return: The end_date of this QuerySchedule.
        :rtype: ModelDate
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this QuerySchedule.


        :param end_date: The end_date of this QuerySchedule.
        :type end_date: ModelDate
        """

        self._end_date = end_date

    @property
    def frequency(self):
        """Gets the frequency of this QuerySchedule.

        How often the query is run.

        :return: The frequency of this QuerySchedule.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this QuerySchedule.

        How often the query is run.

        :param frequency: The frequency of this QuerySchedule.
        :type frequency: str
        """
        allowed_values = ["FREQUENCY_UNSPECIFIED", "ONE_TIME", "DAILY", "WEEKLY", "SEMI_MONTHLY", "MONTHLY", "QUARTERLY", "YEARLY"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def next_run_timezone_code(self):
        """Gets the next_run_timezone_code of this QuerySchedule.

        Canonical timezone code for report generation time. Defaults to `America/New_York`.

        :return: The next_run_timezone_code of this QuerySchedule.
        :rtype: str
        """
        return self._next_run_timezone_code

    @next_run_timezone_code.setter
    def next_run_timezone_code(self, next_run_timezone_code):
        """Sets the next_run_timezone_code of this QuerySchedule.

        Canonical timezone code for report generation time. Defaults to `America/New_York`.

        :param next_run_timezone_code: The next_run_timezone_code of this QuerySchedule.
        :type next_run_timezone_code: str
        """

        self._next_run_timezone_code = next_run_timezone_code

    @property
    def start_date(self):
        """Gets the start_date of this QuerySchedule.


        :return: The start_date of this QuerySchedule.
        :rtype: ModelDate
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this QuerySchedule.


        :param start_date: The start_date of this QuerySchedule.
        :type start_date: ModelDate
        """

        self._start_date = start_date
