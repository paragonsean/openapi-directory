# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_range import DataRange
from openapi_server import util


class QueryMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_range: DataRange=None, format: str=None, send_notification: bool=None, share_email_address: List[str]=None, title: str=None):
        """QueryMetadata - a model defined in OpenAPI

        :param data_range: The data_range of this QueryMetadata.
        :param format: The format of this QueryMetadata.
        :param send_notification: The send_notification of this QueryMetadata.
        :param share_email_address: The share_email_address of this QueryMetadata.
        :param title: The title of this QueryMetadata.
        """
        self.openapi_types = {
            'data_range': DataRange,
            'format': str,
            'send_notification': bool,
            'share_email_address': List[str],
            'title': str
        }

        self.attribute_map = {
            'data_range': 'dataRange',
            'format': 'format',
            'send_notification': 'sendNotification',
            'share_email_address': 'shareEmailAddress',
            'title': 'title'
        }

        self._data_range = data_range
        self._format = format
        self._send_notification = send_notification
        self._share_email_address = share_email_address
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryMetadata of this QueryMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_range(self):
        """Gets the data_range of this QueryMetadata.


        :return: The data_range of this QueryMetadata.
        :rtype: DataRange
        """
        return self._data_range

    @data_range.setter
    def data_range(self, data_range):
        """Sets the data_range of this QueryMetadata.


        :param data_range: The data_range of this QueryMetadata.
        :type data_range: DataRange
        """

        self._data_range = data_range

    @property
    def format(self):
        """Gets the format of this QueryMetadata.

        Format of the generated report.

        :return: The format of this QueryMetadata.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this QueryMetadata.

        Format of the generated report.

        :param format: The format of this QueryMetadata.
        :type format: str
        """
        allowed_values = ["FORMAT_UNSPECIFIED", "CSV", "XLSX"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def send_notification(self):
        """Gets the send_notification of this QueryMetadata.

        Whether to send an email notification when a report is ready. Defaults to false.

        :return: The send_notification of this QueryMetadata.
        :rtype: bool
        """
        return self._send_notification

    @send_notification.setter
    def send_notification(self, send_notification):
        """Sets the send_notification of this QueryMetadata.

        Whether to send an email notification when a report is ready. Defaults to false.

        :param send_notification: The send_notification of this QueryMetadata.
        :type send_notification: bool
        """

        self._send_notification = send_notification

    @property
    def share_email_address(self):
        """Gets the share_email_address of this QueryMetadata.

        List of email addresses which are sent email notifications when the report is finished. Separate from send_notification.

        :return: The share_email_address of this QueryMetadata.
        :rtype: List[str]
        """
        return self._share_email_address

    @share_email_address.setter
    def share_email_address(self, share_email_address):
        """Sets the share_email_address of this QueryMetadata.

        List of email addresses which are sent email notifications when the report is finished. Separate from send_notification.

        :param share_email_address: The share_email_address of this QueryMetadata.
        :type share_email_address: List[str]
        """

        self._share_email_address = share_email_address

    @property
    def title(self):
        """Gets the title of this QueryMetadata.

        Query title. It is used to name the reports generated from this query.

        :return: The title of this QueryMetadata.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this QueryMetadata.

        Query title. It is used to name the reports generated from this query.

        :param title: The title of this QueryMetadata.
        :type title: str
        """

        self._title = title
