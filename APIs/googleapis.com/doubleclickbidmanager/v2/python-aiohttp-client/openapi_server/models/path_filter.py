# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_filter import EventFilter
from openapi_server import util


class PathFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_filters: List[EventFilter]=None, path_match_position: str=None):
        """PathFilter - a model defined in OpenAPI

        :param event_filters: The event_filters of this PathFilter.
        :param path_match_position: The path_match_position of this PathFilter.
        """
        self.openapi_types = {
            'event_filters': List[EventFilter],
            'path_match_position': str
        }

        self.attribute_map = {
            'event_filters': 'eventFilters',
            'path_match_position': 'pathMatchPosition'
        }

        self._event_filters = event_filters
        self._path_match_position = path_match_position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PathFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PathFilter of this PathFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_filters(self):
        """Gets the event_filters of this PathFilter.

        Filter on an event to be applied to some part of the path.

        :return: The event_filters of this PathFilter.
        :rtype: List[EventFilter]
        """
        return self._event_filters

    @event_filters.setter
    def event_filters(self, event_filters):
        """Sets the event_filters of this PathFilter.

        Filter on an event to be applied to some part of the path.

        :param event_filters: The event_filters of this PathFilter.
        :type event_filters: List[EventFilter]
        """

        self._event_filters = event_filters

    @property
    def path_match_position(self):
        """Gets the path_match_position of this PathFilter.

        The position of the path the filter should match to (first, last, or any event in path).

        :return: The path_match_position of this PathFilter.
        :rtype: str
        """
        return self._path_match_position

    @path_match_position.setter
    def path_match_position(self, path_match_position):
        """Sets the path_match_position of this PathFilter.

        The position of the path the filter should match to (first, last, or any event in path).

        :param path_match_position: The path_match_position of this PathFilter.
        :type path_match_position: str
        """
        allowed_values = ["PATH_MATCH_POSITION_UNSPECIFIED", "ANY", "FIRST", "LAST"]  # noqa: E501
        if path_match_position not in allowed_values:
            raise ValueError(
                "Invalid value for `path_match_position` ({0}), must be one of {1}"
                .format(path_match_position, allowed_values)
            )

        self._path_match_position = path_match_position
