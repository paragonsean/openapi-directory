# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter_pair import FilterPair
from openapi_server.models.options import Options
from openapi_server import util


class Parameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filters: List[FilterPair]=None, group_bys: List[str]=None, metrics: List[str]=None, options: Options=None, type: str=None):
        """Parameters - a model defined in OpenAPI

        :param filters: The filters of this Parameters.
        :param group_bys: The group_bys of this Parameters.
        :param metrics: The metrics of this Parameters.
        :param options: The options of this Parameters.
        :param type: The type of this Parameters.
        """
        self.openapi_types = {
            'filters': List[FilterPair],
            'group_bys': List[str],
            'metrics': List[str],
            'options': Options,
            'type': str
        }

        self.attribute_map = {
            'filters': 'filters',
            'group_bys': 'groupBys',
            'metrics': 'metrics',
            'options': 'options',
            'type': 'type'
        }

        self._filters = filters
        self._group_bys = group_bys
        self._metrics = metrics
        self._options = options
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Parameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Parameters of this Parameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filters(self):
        """Gets the filters of this Parameters.

        Filters used to match traffic data in your report.

        :return: The filters of this Parameters.
        :rtype: List[FilterPair]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this Parameters.

        Filters used to match traffic data in your report.

        :param filters: The filters of this Parameters.
        :type filters: List[FilterPair]
        """

        self._filters = filters

    @property
    def group_bys(self):
        """Gets the group_bys of this Parameters.

        Data is grouped by the filters listed in this field.

        :return: The group_bys of this Parameters.
        :rtype: List[str]
        """
        return self._group_bys

    @group_bys.setter
    def group_bys(self, group_bys):
        """Sets the group_bys of this Parameters.

        Data is grouped by the filters listed in this field.

        :param group_bys: The group_bys of this Parameters.
        :type group_bys: List[str]
        """

        self._group_bys = group_bys

    @property
    def metrics(self):
        """Gets the metrics of this Parameters.

        Metrics to include as columns in your report.

        :return: The metrics of this Parameters.
        :rtype: List[str]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this Parameters.

        Metrics to include as columns in your report.

        :param metrics: The metrics of this Parameters.
        :type metrics: List[str]
        """

        self._metrics = metrics

    @property
    def options(self):
        """Gets the options of this Parameters.


        :return: The options of this Parameters.
        :rtype: Options
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Parameters.


        :param options: The options of this Parameters.
        :type options: Options
        """

        self._options = options

    @property
    def type(self):
        """Gets the type of this Parameters.

        The type of the report. The type of the report will dictate what dimesions, filters, and metrics can be used.

        :return: The type of this Parameters.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Parameters.

        The type of the report. The type of the report will dictate what dimesions, filters, and metrics can be used.

        :param type: The type of this Parameters.
        :type type: str
        """
        allowed_values = ["REPORT_TYPE_UNSPECIFIED", "STANDARD", "INVENTORY_AVAILABILITY", "AUDIENCE_COMPOSITION", "FLOODLIGHT", "YOUTUBE", "GRP", "YOUTUBE_PROGRAMMATIC_GUARANTEED", "REACH", "UNIQUE_REACH_AUDIENCE", "FULL_PATH", "PATH_ATTRIBUTION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
