/*
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EventFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Path filters specify which paths to include in a report. A path is the result of combining DV360 events based on User ID to create a workflow of users&#39; actions. When a path filter is set, the resulting report will only include paths that match the specified event at the specified position. All other paths will be excluded.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:05.648512-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PathFilter {
  public static final String SERIALIZED_NAME_EVENT_FILTERS = "eventFilters";
  @SerializedName(SERIALIZED_NAME_EVENT_FILTERS)
  private List<EventFilter> eventFilters = new ArrayList<>();

  /**
   * The position of the path the filter should match to (first, last, or any event in path).
   */
  @JsonAdapter(PathMatchPositionEnum.Adapter.class)
  public enum PathMatchPositionEnum {
    PATH_MATCH_POSITION_UNSPECIFIED("PATH_MATCH_POSITION_UNSPECIFIED"),
    
    ANY("ANY"),
    
    FIRST("FIRST"),
    
    LAST("LAST");

    private String value;

    PathMatchPositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PathMatchPositionEnum fromValue(String value) {
      for (PathMatchPositionEnum b : PathMatchPositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PathMatchPositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PathMatchPositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PathMatchPositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PathMatchPositionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PathMatchPositionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PATH_MATCH_POSITION = "pathMatchPosition";
  @SerializedName(SERIALIZED_NAME_PATH_MATCH_POSITION)
  private PathMatchPositionEnum pathMatchPosition;

  public PathFilter() {
  }

  public PathFilter eventFilters(List<EventFilter> eventFilters) {
    this.eventFilters = eventFilters;
    return this;
  }

  public PathFilter addEventFiltersItem(EventFilter eventFiltersItem) {
    if (this.eventFilters == null) {
      this.eventFilters = new ArrayList<>();
    }
    this.eventFilters.add(eventFiltersItem);
    return this;
  }

  /**
   * Filter on an event to be applied to some part of the path.
   * @return eventFilters
   */
  @javax.annotation.Nullable
  public List<EventFilter> getEventFilters() {
    return eventFilters;
  }

  public void setEventFilters(List<EventFilter> eventFilters) {
    this.eventFilters = eventFilters;
  }


  public PathFilter pathMatchPosition(PathMatchPositionEnum pathMatchPosition) {
    this.pathMatchPosition = pathMatchPosition;
    return this;
  }

  /**
   * The position of the path the filter should match to (first, last, or any event in path).
   * @return pathMatchPosition
   */
  @javax.annotation.Nullable
  public PathMatchPositionEnum getPathMatchPosition() {
    return pathMatchPosition;
  }

  public void setPathMatchPosition(PathMatchPositionEnum pathMatchPosition) {
    this.pathMatchPosition = pathMatchPosition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PathFilter pathFilter = (PathFilter) o;
    return Objects.equals(this.eventFilters, pathFilter.eventFilters) &&
        Objects.equals(this.pathMatchPosition, pathFilter.pathMatchPosition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventFilters, pathMatchPosition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PathFilter {\n");
    sb.append("    eventFilters: ").append(toIndentedString(eventFilters)).append("\n");
    sb.append("    pathMatchPosition: ").append(toIndentedString(pathMatchPosition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventFilters");
    openapiFields.add("pathMatchPosition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PathFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PathFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PathFilter is not found in the empty JSON string", PathFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PathFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PathFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("eventFilters") != null && !jsonObj.get("eventFilters").isJsonNull()) {
        JsonArray jsonArrayeventFilters = jsonObj.getAsJsonArray("eventFilters");
        if (jsonArrayeventFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("eventFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `eventFilters` to be an array in the JSON string but got `%s`", jsonObj.get("eventFilters").toString()));
          }

          // validate the optional field `eventFilters` (array)
          for (int i = 0; i < jsonArrayeventFilters.size(); i++) {
            EventFilter.validateJsonElement(jsonArrayeventFilters.get(i));
          };
        }
      }
      if ((jsonObj.get("pathMatchPosition") != null && !jsonObj.get("pathMatchPosition").isJsonNull()) && !jsonObj.get("pathMatchPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pathMatchPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pathMatchPosition").toString()));
      }
      // validate the optional field `pathMatchPosition`
      if (jsonObj.get("pathMatchPosition") != null && !jsonObj.get("pathMatchPosition").isJsonNull()) {
        PathMatchPositionEnum.validateJsonElement(jsonObj.get("pathMatchPosition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PathFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PathFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PathFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PathFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<PathFilter>() {
           @Override
           public void write(JsonWriter out, PathFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PathFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PathFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PathFilter
   * @throws IOException if the JSON string is invalid with respect to PathFilter
   */
  public static PathFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PathFilter.class);
  }

  /**
   * Convert an instance of PathFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

