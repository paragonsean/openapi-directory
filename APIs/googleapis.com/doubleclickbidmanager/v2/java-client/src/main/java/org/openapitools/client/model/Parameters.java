/*
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FilterPair;
import org.openapitools.client.model.Options;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters of a query or report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:05.648512-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Parameters {
  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<FilterPair> filters = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP_BYS = "groupBys";
  @SerializedName(SERIALIZED_NAME_GROUP_BYS)
  private List<String> groupBys = new ArrayList<>();

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<String> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Options options;

  /**
   * The type of the report. The type of the report will dictate what dimesions, filters, and metrics can be used.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    REPORT_TYPE_UNSPECIFIED("REPORT_TYPE_UNSPECIFIED"),
    
    STANDARD("STANDARD"),
    
    INVENTORY_AVAILABILITY("INVENTORY_AVAILABILITY"),
    
    AUDIENCE_COMPOSITION("AUDIENCE_COMPOSITION"),
    
    FLOODLIGHT("FLOODLIGHT"),
    
    YOUTUBE("YOUTUBE"),
    
    GRP("GRP"),
    
    YOUTUBE_PROGRAMMATIC_GUARANTEED("YOUTUBE_PROGRAMMATIC_GUARANTEED"),
    
    REACH("REACH"),
    
    UNIQUE_REACH_AUDIENCE("UNIQUE_REACH_AUDIENCE"),
    
    FULL_PATH("FULL_PATH"),
    
    PATH_ATTRIBUTION("PATH_ATTRIBUTION");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Parameters() {
  }

  public Parameters filters(List<FilterPair> filters) {
    this.filters = filters;
    return this;
  }

  public Parameters addFiltersItem(FilterPair filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * Filters used to match traffic data in your report.
   * @return filters
   */
  @javax.annotation.Nullable
  public List<FilterPair> getFilters() {
    return filters;
  }

  public void setFilters(List<FilterPair> filters) {
    this.filters = filters;
  }


  public Parameters groupBys(List<String> groupBys) {
    this.groupBys = groupBys;
    return this;
  }

  public Parameters addGroupBysItem(String groupBysItem) {
    if (this.groupBys == null) {
      this.groupBys = new ArrayList<>();
    }
    this.groupBys.add(groupBysItem);
    return this;
  }

  /**
   * Data is grouped by the filters listed in this field.
   * @return groupBys
   */
  @javax.annotation.Nullable
  public List<String> getGroupBys() {
    return groupBys;
  }

  public void setGroupBys(List<String> groupBys) {
    this.groupBys = groupBys;
  }


  public Parameters metrics(List<String> metrics) {
    this.metrics = metrics;
    return this;
  }

  public Parameters addMetricsItem(String metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * Metrics to include as columns in your report.
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<String> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<String> metrics) {
    this.metrics = metrics;
  }


  public Parameters options(Options options) {
    this.options = options;
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  public Options getOptions() {
    return options;
  }

  public void setOptions(Options options) {
    this.options = options;
  }


  public Parameters type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the report. The type of the report will dictate what dimesions, filters, and metrics can be used.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Parameters parameters = (Parameters) o;
    return Objects.equals(this.filters, parameters.filters) &&
        Objects.equals(this.groupBys, parameters.groupBys) &&
        Objects.equals(this.metrics, parameters.metrics) &&
        Objects.equals(this.options, parameters.options) &&
        Objects.equals(this.type, parameters.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filters, groupBys, metrics, options, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Parameters {\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    groupBys: ").append(toIndentedString(groupBys)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filters");
    openapiFields.add("groupBys");
    openapiFields.add("metrics");
    openapiFields.add("options");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Parameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Parameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Parameters is not found in the empty JSON string", Parameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Parameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Parameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            FilterPair.validateJsonElement(jsonArrayfilters.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("groupBys") != null && !jsonObj.get("groupBys").isJsonNull() && !jsonObj.get("groupBys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupBys` to be an array in the JSON string but got `%s`", jsonObj.get("groupBys").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull() && !jsonObj.get("metrics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
      }
      // validate the optional field `options`
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        Options.validateJsonElement(jsonObj.get("options"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Parameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Parameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Parameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Parameters.class));

       return (TypeAdapter<T>) new TypeAdapter<Parameters>() {
           @Override
           public void write(JsonWriter out, Parameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Parameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Parameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Parameters
   * @throws IOException if the JSON string is invalid with respect to Parameters
   */
  public static Parameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Parameters.class);
  }

  /**
   * Convert an instance of Parameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

