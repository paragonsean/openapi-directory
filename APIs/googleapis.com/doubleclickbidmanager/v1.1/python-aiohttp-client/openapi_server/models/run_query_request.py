# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RunQueryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_range: str=None, report_data_end_time_ms: str=None, report_data_start_time_ms: str=None, timezone_code: str=None):
        """RunQueryRequest - a model defined in OpenAPI

        :param data_range: The data_range of this RunQueryRequest.
        :param report_data_end_time_ms: The report_data_end_time_ms of this RunQueryRequest.
        :param report_data_start_time_ms: The report_data_start_time_ms of this RunQueryRequest.
        :param timezone_code: The timezone_code of this RunQueryRequest.
        """
        self.openapi_types = {
            'data_range': str,
            'report_data_end_time_ms': str,
            'report_data_start_time_ms': str,
            'timezone_code': str
        }

        self.attribute_map = {
            'data_range': 'dataRange',
            'report_data_end_time_ms': 'reportDataEndTimeMs',
            'report_data_start_time_ms': 'reportDataStartTimeMs',
            'timezone_code': 'timezoneCode'
        }

        self._data_range = data_range
        self._report_data_end_time_ms = report_data_end_time_ms
        self._report_data_start_time_ms = report_data_start_time_ms
        self._timezone_code = timezone_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunQueryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunQueryRequest of this RunQueryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_range(self):
        """Gets the data_range of this RunQueryRequest.

        Report data range used to generate the report.

        :return: The data_range of this RunQueryRequest.
        :rtype: str
        """
        return self._data_range

    @data_range.setter
    def data_range(self, data_range):
        """Sets the data_range of this RunQueryRequest.

        Report data range used to generate the report.

        :param data_range: The data_range of this RunQueryRequest.
        :type data_range: str
        """
        allowed_values = ["CUSTOM_DATES", "CURRENT_DAY", "PREVIOUS_DAY", "WEEK_TO_DATE", "MONTH_TO_DATE", "QUARTER_TO_DATE", "YEAR_TO_DATE", "PREVIOUS_WEEK", "PREVIOUS_HALF_MONTH", "PREVIOUS_MONTH", "PREVIOUS_QUARTER", "PREVIOUS_YEAR", "LAST_7_DAYS", "LAST_30_DAYS", "LAST_90_DAYS", "LAST_365_DAYS", "ALL_TIME", "LAST_14_DAYS", "TYPE_NOT_SUPPORTED", "LAST_60_DAYS"]  # noqa: E501
        if data_range not in allowed_values:
            raise ValueError(
                "Invalid value for `data_range` ({0}), must be one of {1}"
                .format(data_range, allowed_values)
            )

        self._data_range = data_range

    @property
    def report_data_end_time_ms(self):
        """Gets the report_data_end_time_ms of this RunQueryRequest.

        The ending time for the data that is shown in the report. Note, reportDataEndTimeMs is required if dataRange is CUSTOM_DATES and ignored otherwise.

        :return: The report_data_end_time_ms of this RunQueryRequest.
        :rtype: str
        """
        return self._report_data_end_time_ms

    @report_data_end_time_ms.setter
    def report_data_end_time_ms(self, report_data_end_time_ms):
        """Sets the report_data_end_time_ms of this RunQueryRequest.

        The ending time for the data that is shown in the report. Note, reportDataEndTimeMs is required if dataRange is CUSTOM_DATES and ignored otherwise.

        :param report_data_end_time_ms: The report_data_end_time_ms of this RunQueryRequest.
        :type report_data_end_time_ms: str
        """

        self._report_data_end_time_ms = report_data_end_time_ms

    @property
    def report_data_start_time_ms(self):
        """Gets the report_data_start_time_ms of this RunQueryRequest.

        The starting time for the data that is shown in the report. Note, reportDataStartTimeMs is required if dataRange is CUSTOM_DATES and ignored otherwise.

        :return: The report_data_start_time_ms of this RunQueryRequest.
        :rtype: str
        """
        return self._report_data_start_time_ms

    @report_data_start_time_ms.setter
    def report_data_start_time_ms(self, report_data_start_time_ms):
        """Sets the report_data_start_time_ms of this RunQueryRequest.

        The starting time for the data that is shown in the report. Note, reportDataStartTimeMs is required if dataRange is CUSTOM_DATES and ignored otherwise.

        :param report_data_start_time_ms: The report_data_start_time_ms of this RunQueryRequest.
        :type report_data_start_time_ms: str
        """

        self._report_data_start_time_ms = report_data_start_time_ms

    @property
    def timezone_code(self):
        """Gets the timezone_code of this RunQueryRequest.

        Canonical timezone code for report data time. Defaults to America/New_York.

        :return: The timezone_code of this RunQueryRequest.
        :rtype: str
        """
        return self._timezone_code

    @timezone_code.setter
    def timezone_code(self, timezone_code):
        """Sets the timezone_code of this RunQueryRequest.

        Canonical timezone code for report data time. Defaults to America/New_York.

        :param timezone_code: The timezone_code of this RunQueryRequest.
        :type timezone_code: str
        """

        self._timezone_code = timezone_code
