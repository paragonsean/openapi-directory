# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueryMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_range: str=None, format: str=None, google_cloud_storage_path_for_latest_report: str=None, google_drive_path_for_latest_report: str=None, latest_report_run_time_ms: str=None, locale: str=None, report_count: int=None, running: bool=None, send_notification: bool=None, share_email_address: List[str]=None, title: str=None):
        """QueryMetadata - a model defined in OpenAPI

        :param data_range: The data_range of this QueryMetadata.
        :param format: The format of this QueryMetadata.
        :param google_cloud_storage_path_for_latest_report: The google_cloud_storage_path_for_latest_report of this QueryMetadata.
        :param google_drive_path_for_latest_report: The google_drive_path_for_latest_report of this QueryMetadata.
        :param latest_report_run_time_ms: The latest_report_run_time_ms of this QueryMetadata.
        :param locale: The locale of this QueryMetadata.
        :param report_count: The report_count of this QueryMetadata.
        :param running: The running of this QueryMetadata.
        :param send_notification: The send_notification of this QueryMetadata.
        :param share_email_address: The share_email_address of this QueryMetadata.
        :param title: The title of this QueryMetadata.
        """
        self.openapi_types = {
            'data_range': str,
            'format': str,
            'google_cloud_storage_path_for_latest_report': str,
            'google_drive_path_for_latest_report': str,
            'latest_report_run_time_ms': str,
            'locale': str,
            'report_count': int,
            'running': bool,
            'send_notification': bool,
            'share_email_address': List[str],
            'title': str
        }

        self.attribute_map = {
            'data_range': 'dataRange',
            'format': 'format',
            'google_cloud_storage_path_for_latest_report': 'googleCloudStoragePathForLatestReport',
            'google_drive_path_for_latest_report': 'googleDrivePathForLatestReport',
            'latest_report_run_time_ms': 'latestReportRunTimeMs',
            'locale': 'locale',
            'report_count': 'reportCount',
            'running': 'running',
            'send_notification': 'sendNotification',
            'share_email_address': 'shareEmailAddress',
            'title': 'title'
        }

        self._data_range = data_range
        self._format = format
        self._google_cloud_storage_path_for_latest_report = google_cloud_storage_path_for_latest_report
        self._google_drive_path_for_latest_report = google_drive_path_for_latest_report
        self._latest_report_run_time_ms = latest_report_run_time_ms
        self._locale = locale
        self._report_count = report_count
        self._running = running
        self._send_notification = send_notification
        self._share_email_address = share_email_address
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryMetadata of this QueryMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_range(self):
        """Gets the data_range of this QueryMetadata.

        Range of report data.

        :return: The data_range of this QueryMetadata.
        :rtype: str
        """
        return self._data_range

    @data_range.setter
    def data_range(self, data_range):
        """Sets the data_range of this QueryMetadata.

        Range of report data.

        :param data_range: The data_range of this QueryMetadata.
        :type data_range: str
        """
        allowed_values = ["CUSTOM_DATES", "CURRENT_DAY", "PREVIOUS_DAY", "WEEK_TO_DATE", "MONTH_TO_DATE", "QUARTER_TO_DATE", "YEAR_TO_DATE", "PREVIOUS_WEEK", "PREVIOUS_HALF_MONTH", "PREVIOUS_MONTH", "PREVIOUS_QUARTER", "PREVIOUS_YEAR", "LAST_7_DAYS", "LAST_30_DAYS", "LAST_90_DAYS", "LAST_365_DAYS", "ALL_TIME", "LAST_14_DAYS", "TYPE_NOT_SUPPORTED", "LAST_60_DAYS"]  # noqa: E501
        if data_range not in allowed_values:
            raise ValueError(
                "Invalid value for `data_range` ({0}), must be one of {1}"
                .format(data_range, allowed_values)
            )

        self._data_range = data_range

    @property
    def format(self):
        """Gets the format of this QueryMetadata.

        Format of the generated report.

        :return: The format of this QueryMetadata.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this QueryMetadata.

        Format of the generated report.

        :param format: The format of this QueryMetadata.
        :type format: str
        """
        allowed_values = ["CSV", "EXCEL_CSV", "XLSX"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def google_cloud_storage_path_for_latest_report(self):
        """Gets the google_cloud_storage_path_for_latest_report of this QueryMetadata.

        The path to the location in Google Cloud Storage where the latest report is stored.

        :return: The google_cloud_storage_path_for_latest_report of this QueryMetadata.
        :rtype: str
        """
        return self._google_cloud_storage_path_for_latest_report

    @google_cloud_storage_path_for_latest_report.setter
    def google_cloud_storage_path_for_latest_report(self, google_cloud_storage_path_for_latest_report):
        """Sets the google_cloud_storage_path_for_latest_report of this QueryMetadata.

        The path to the location in Google Cloud Storage where the latest report is stored.

        :param google_cloud_storage_path_for_latest_report: The google_cloud_storage_path_for_latest_report of this QueryMetadata.
        :type google_cloud_storage_path_for_latest_report: str
        """

        self._google_cloud_storage_path_for_latest_report = google_cloud_storage_path_for_latest_report

    @property
    def google_drive_path_for_latest_report(self):
        """Gets the google_drive_path_for_latest_report of this QueryMetadata.

        The path in Google Drive for the latest report.

        :return: The google_drive_path_for_latest_report of this QueryMetadata.
        :rtype: str
        """
        return self._google_drive_path_for_latest_report

    @google_drive_path_for_latest_report.setter
    def google_drive_path_for_latest_report(self, google_drive_path_for_latest_report):
        """Sets the google_drive_path_for_latest_report of this QueryMetadata.

        The path in Google Drive for the latest report.

        :param google_drive_path_for_latest_report: The google_drive_path_for_latest_report of this QueryMetadata.
        :type google_drive_path_for_latest_report: str
        """

        self._google_drive_path_for_latest_report = google_drive_path_for_latest_report

    @property
    def latest_report_run_time_ms(self):
        """Gets the latest_report_run_time_ms of this QueryMetadata.

        The time when the latest report started to run.

        :return: The latest_report_run_time_ms of this QueryMetadata.
        :rtype: str
        """
        return self._latest_report_run_time_ms

    @latest_report_run_time_ms.setter
    def latest_report_run_time_ms(self, latest_report_run_time_ms):
        """Sets the latest_report_run_time_ms of this QueryMetadata.

        The time when the latest report started to run.

        :param latest_report_run_time_ms: The latest_report_run_time_ms of this QueryMetadata.
        :type latest_report_run_time_ms: str
        """

        self._latest_report_run_time_ms = latest_report_run_time_ms

    @property
    def locale(self):
        """Gets the locale of this QueryMetadata.

        Locale of the generated reports. Valid values are cs CZECH de GERMAN en ENGLISH es SPANISH fr FRENCH it ITALIAN ja JAPANESE ko KOREAN pl POLISH pt-BR BRAZILIAN_PORTUGUESE ru RUSSIAN tr TURKISH uk UKRAINIAN zh-CN CHINA_CHINESE zh-TW TAIWAN_CHINESE An locale string not in the list above will generate reports in English.

        :return: The locale of this QueryMetadata.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this QueryMetadata.

        Locale of the generated reports. Valid values are cs CZECH de GERMAN en ENGLISH es SPANISH fr FRENCH it ITALIAN ja JAPANESE ko KOREAN pl POLISH pt-BR BRAZILIAN_PORTUGUESE ru RUSSIAN tr TURKISH uk UKRAINIAN zh-CN CHINA_CHINESE zh-TW TAIWAN_CHINESE An locale string not in the list above will generate reports in English.

        :param locale: The locale of this QueryMetadata.
        :type locale: str
        """

        self._locale = locale

    @property
    def report_count(self):
        """Gets the report_count of this QueryMetadata.

        Number of reports that have been generated for the query.

        :return: The report_count of this QueryMetadata.
        :rtype: int
        """
        return self._report_count

    @report_count.setter
    def report_count(self, report_count):
        """Sets the report_count of this QueryMetadata.

        Number of reports that have been generated for the query.

        :param report_count: The report_count of this QueryMetadata.
        :type report_count: int
        """

        self._report_count = report_count

    @property
    def running(self):
        """Gets the running of this QueryMetadata.

        Whether the latest report is currently running.

        :return: The running of this QueryMetadata.
        :rtype: bool
        """
        return self._running

    @running.setter
    def running(self, running):
        """Sets the running of this QueryMetadata.

        Whether the latest report is currently running.

        :param running: The running of this QueryMetadata.
        :type running: bool
        """

        self._running = running

    @property
    def send_notification(self):
        """Gets the send_notification of this QueryMetadata.

        Whether to send an email notification when a report is ready. Default to false.

        :return: The send_notification of this QueryMetadata.
        :rtype: bool
        """
        return self._send_notification

    @send_notification.setter
    def send_notification(self, send_notification):
        """Sets the send_notification of this QueryMetadata.

        Whether to send an email notification when a report is ready. Default to false.

        :param send_notification: The send_notification of this QueryMetadata.
        :type send_notification: bool
        """

        self._send_notification = send_notification

    @property
    def share_email_address(self):
        """Gets the share_email_address of this QueryMetadata.

        List of email addresses which are sent email notifications when the report is finished. Separate from sendNotification.

        :return: The share_email_address of this QueryMetadata.
        :rtype: List[str]
        """
        return self._share_email_address

    @share_email_address.setter
    def share_email_address(self, share_email_address):
        """Sets the share_email_address of this QueryMetadata.

        List of email addresses which are sent email notifications when the report is finished. Separate from sendNotification.

        :param share_email_address: The share_email_address of this QueryMetadata.
        :type share_email_address: List[str]
        """

        self._share_email_address = share_email_address

    @property
    def title(self):
        """Gets the title of this QueryMetadata.

        Query title. It is used to name the reports generated from this query.

        :return: The title of this QueryMetadata.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this QueryMetadata.

        Query title. It is used to name the reports generated from this query.

        :param title: The title of this QueryMetadata.
        :type title: str
        """

        self._title = title
