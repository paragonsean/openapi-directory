# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QuerySchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time_ms: str=None, frequency: str=None, next_run_minute_of_day: int=None, next_run_timezone_code: str=None, start_time_ms: str=None):
        """QuerySchedule - a model defined in OpenAPI

        :param end_time_ms: The end_time_ms of this QuerySchedule.
        :param frequency: The frequency of this QuerySchedule.
        :param next_run_minute_of_day: The next_run_minute_of_day of this QuerySchedule.
        :param next_run_timezone_code: The next_run_timezone_code of this QuerySchedule.
        :param start_time_ms: The start_time_ms of this QuerySchedule.
        """
        self.openapi_types = {
            'end_time_ms': str,
            'frequency': str,
            'next_run_minute_of_day': int,
            'next_run_timezone_code': str,
            'start_time_ms': str
        }

        self.attribute_map = {
            'end_time_ms': 'endTimeMs',
            'frequency': 'frequency',
            'next_run_minute_of_day': 'nextRunMinuteOfDay',
            'next_run_timezone_code': 'nextRunTimezoneCode',
            'start_time_ms': 'startTimeMs'
        }

        self._end_time_ms = end_time_ms
        self._frequency = frequency
        self._next_run_minute_of_day = next_run_minute_of_day
        self._next_run_timezone_code = next_run_timezone_code
        self._start_time_ms = start_time_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuerySchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QuerySchedule of this QuerySchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time_ms(self):
        """Gets the end_time_ms of this QuerySchedule.

        Datetime to periodically run the query until.

        :return: The end_time_ms of this QuerySchedule.
        :rtype: str
        """
        return self._end_time_ms

    @end_time_ms.setter
    def end_time_ms(self, end_time_ms):
        """Sets the end_time_ms of this QuerySchedule.

        Datetime to periodically run the query until.

        :param end_time_ms: The end_time_ms of this QuerySchedule.
        :type end_time_ms: str
        """

        self._end_time_ms = end_time_ms

    @property
    def frequency(self):
        """Gets the frequency of this QuerySchedule.

        How often the query is run.

        :return: The frequency of this QuerySchedule.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this QuerySchedule.

        How often the query is run.

        :param frequency: The frequency of this QuerySchedule.
        :type frequency: str
        """
        allowed_values = ["ONE_TIME", "DAILY", "WEEKLY", "SEMI_MONTHLY", "MONTHLY", "QUARTERLY", "YEARLY"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def next_run_minute_of_day(self):
        """Gets the next_run_minute_of_day of this QuerySchedule.

        Time of day at which a new report will be generated, represented as minutes past midnight. Range is 0 to 1439. Only applies to scheduled reports.

        :return: The next_run_minute_of_day of this QuerySchedule.
        :rtype: int
        """
        return self._next_run_minute_of_day

    @next_run_minute_of_day.setter
    def next_run_minute_of_day(self, next_run_minute_of_day):
        """Sets the next_run_minute_of_day of this QuerySchedule.

        Time of day at which a new report will be generated, represented as minutes past midnight. Range is 0 to 1439. Only applies to scheduled reports.

        :param next_run_minute_of_day: The next_run_minute_of_day of this QuerySchedule.
        :type next_run_minute_of_day: int
        """

        self._next_run_minute_of_day = next_run_minute_of_day

    @property
    def next_run_timezone_code(self):
        """Gets the next_run_timezone_code of this QuerySchedule.

        Canonical timezone code for report generation time. Defaults to America/New_York.

        :return: The next_run_timezone_code of this QuerySchedule.
        :rtype: str
        """
        return self._next_run_timezone_code

    @next_run_timezone_code.setter
    def next_run_timezone_code(self, next_run_timezone_code):
        """Sets the next_run_timezone_code of this QuerySchedule.

        Canonical timezone code for report generation time. Defaults to America/New_York.

        :param next_run_timezone_code: The next_run_timezone_code of this QuerySchedule.
        :type next_run_timezone_code: str
        """

        self._next_run_timezone_code = next_run_timezone_code

    @property
    def start_time_ms(self):
        """Gets the start_time_ms of this QuerySchedule.

        When to start running the query. Not applicable to `ONE_TIME` frequency.

        :return: The start_time_ms of this QuerySchedule.
        :rtype: str
        """
        return self._start_time_ms

    @start_time_ms.setter
    def start_time_ms(self, start_time_ms):
        """Sets the start_time_ms of this QuerySchedule.

        When to start running the query. Not applicable to `ONE_TIME` frequency.

        :param start_time_ms: The start_time_ms of this QuerySchedule.
        :type start_time_ms: str
        """

        self._start_time_ms = start_time_ms
