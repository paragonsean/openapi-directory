# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportFailure(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_code: str=None):
        """ReportFailure - a model defined in OpenAPI

        :param error_code: The error_code of this ReportFailure.
        """
        self.openapi_types = {
            'error_code': str
        }

        self.attribute_map = {
            'error_code': 'errorCode'
        }

        self._error_code = error_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportFailure':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportFailure of this ReportFailure.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_code(self):
        """Gets the error_code of this ReportFailure.

        Error code that shows why the report was not created.

        :return: The error_code of this ReportFailure.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ReportFailure.

        Error code that shows why the report was not created.

        :param error_code: The error_code of this ReportFailure.
        :type error_code: str
        """
        allowed_values = ["AUTHENTICATION_ERROR", "UNAUTHORIZED_API_ACCESS", "SERVER_ERROR", "VALIDATION_ERROR", "REPORTING_FATAL_ERROR", "REPORTING_TRANSIENT_ERROR", "REPORTING_IMCOMPATIBLE_METRICS", "REPORTING_ILLEGAL_FILENAME", "REPORTING_QUERY_NOT_FOUND", "REPORTING_BUCKET_NOT_FOUND", "REPORTING_CREATE_BUCKET_FAILED", "REPORTING_DELETE_BUCKET_FAILED", "REPORTING_UPDATE_BUCKET_PERMISSION_FAILED", "REPORTING_WRITE_BUCKET_OBJECT_FAILED", "DEPRECATED_REPORTING_INVALID_QUERY", "REPORTING_INVALID_QUERY_TOO_MANY_UNFILTERED_LARGE_GROUP_BYS", "REPORTING_INVALID_QUERY_TITLE_MISSING", "REPORTING_INVALID_QUERY_MISSING_PARTNER_AND_ADVERTISER_FILTERS"]  # noqa: E501
        if error_code not in allowed_values:
            raise ValueError(
                "Invalid value for `error_code` ({0}), must be one of {1}"
                .format(error_code, allowed_values)
            )

        self._error_code = error_code
