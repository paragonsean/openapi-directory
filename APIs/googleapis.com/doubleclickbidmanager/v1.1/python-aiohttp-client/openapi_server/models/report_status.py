# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_failure import ReportFailure
from openapi_server import util


class ReportStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failure: ReportFailure=None, finish_time_ms: str=None, format: str=None, state: str=None):
        """ReportStatus - a model defined in OpenAPI

        :param failure: The failure of this ReportStatus.
        :param finish_time_ms: The finish_time_ms of this ReportStatus.
        :param format: The format of this ReportStatus.
        :param state: The state of this ReportStatus.
        """
        self.openapi_types = {
            'failure': ReportFailure,
            'finish_time_ms': str,
            'format': str,
            'state': str
        }

        self.attribute_map = {
            'failure': 'failure',
            'finish_time_ms': 'finishTimeMs',
            'format': 'format',
            'state': 'state'
        }

        self._failure = failure
        self._finish_time_ms = finish_time_ms
        self._format = format
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportStatus of this ReportStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failure(self):
        """Gets the failure of this ReportStatus.


        :return: The failure of this ReportStatus.
        :rtype: ReportFailure
        """
        return self._failure

    @failure.setter
    def failure(self, failure):
        """Sets the failure of this ReportStatus.


        :param failure: The failure of this ReportStatus.
        :type failure: ReportFailure
        """

        self._failure = failure

    @property
    def finish_time_ms(self):
        """Gets the finish_time_ms of this ReportStatus.

        The time when this report either completed successfully or failed.

        :return: The finish_time_ms of this ReportStatus.
        :rtype: str
        """
        return self._finish_time_ms

    @finish_time_ms.setter
    def finish_time_ms(self, finish_time_ms):
        """Sets the finish_time_ms of this ReportStatus.

        The time when this report either completed successfully or failed.

        :param finish_time_ms: The finish_time_ms of this ReportStatus.
        :type finish_time_ms: str
        """

        self._finish_time_ms = finish_time_ms

    @property
    def format(self):
        """Gets the format of this ReportStatus.

        The file type of the report.

        :return: The format of this ReportStatus.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ReportStatus.

        The file type of the report.

        :param format: The format of this ReportStatus.
        :type format: str
        """
        allowed_values = ["CSV", "EXCEL_CSV", "XLSX"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def state(self):
        """Gets the state of this ReportStatus.

        The state of the report.

        :return: The state of this ReportStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ReportStatus.

        The state of the report.

        :param state: The state of this ReportStatus.
        :type state: str
        """
        allowed_values = ["RUNNING", "DONE", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
