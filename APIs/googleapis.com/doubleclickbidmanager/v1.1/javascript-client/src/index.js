/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ChannelGrouping from './model/ChannelGrouping';
import DisjunctiveMatchStatement from './model/DisjunctiveMatchStatement';
import EventFilter from './model/EventFilter';
import FilterPair from './model/FilterPair';
import ListQueriesResponse from './model/ListQueriesResponse';
import ListReportsResponse from './model/ListReportsResponse';
import Options from './model/Options';
import Parameters from './model/Parameters';
import PathFilter from './model/PathFilter';
import PathQueryOptions from './model/PathQueryOptions';
import PathQueryOptionsFilter from './model/PathQueryOptionsFilter';
import Query from './model/Query';
import QueryMetadata from './model/QueryMetadata';
import QuerySchedule from './model/QuerySchedule';
import Report from './model/Report';
import ReportFailure from './model/ReportFailure';
import ReportKey from './model/ReportKey';
import ReportMetadata from './model/ReportMetadata';
import ReportStatus from './model/ReportStatus';
import Rule from './model/Rule';
import RunQueryRequest from './model/RunQueryRequest';
import QueriesApi from './api/QueriesApi';
import ReportsApi from './api/ReportsApi';


/**
* DoubleClick Bid Manager API allows users to manage and create campaigns and reports..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var DoubleClickBidManagerApi = require('index'); // See note below*.
* var xxxSvc = new DoubleClickBidManagerApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new DoubleClickBidManagerApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new DoubleClickBidManagerApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new DoubleClickBidManagerApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1.1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ChannelGrouping model constructor.
     * @property {module:model/ChannelGrouping}
     */
    ChannelGrouping,

    /**
     * The DisjunctiveMatchStatement model constructor.
     * @property {module:model/DisjunctiveMatchStatement}
     */
    DisjunctiveMatchStatement,

    /**
     * The EventFilter model constructor.
     * @property {module:model/EventFilter}
     */
    EventFilter,

    /**
     * The FilterPair model constructor.
     * @property {module:model/FilterPair}
     */
    FilterPair,

    /**
     * The ListQueriesResponse model constructor.
     * @property {module:model/ListQueriesResponse}
     */
    ListQueriesResponse,

    /**
     * The ListReportsResponse model constructor.
     * @property {module:model/ListReportsResponse}
     */
    ListReportsResponse,

    /**
     * The Options model constructor.
     * @property {module:model/Options}
     */
    Options,

    /**
     * The Parameters model constructor.
     * @property {module:model/Parameters}
     */
    Parameters,

    /**
     * The PathFilter model constructor.
     * @property {module:model/PathFilter}
     */
    PathFilter,

    /**
     * The PathQueryOptions model constructor.
     * @property {module:model/PathQueryOptions}
     */
    PathQueryOptions,

    /**
     * The PathQueryOptionsFilter model constructor.
     * @property {module:model/PathQueryOptionsFilter}
     */
    PathQueryOptionsFilter,

    /**
     * The Query model constructor.
     * @property {module:model/Query}
     */
    Query,

    /**
     * The QueryMetadata model constructor.
     * @property {module:model/QueryMetadata}
     */
    QueryMetadata,

    /**
     * The QuerySchedule model constructor.
     * @property {module:model/QuerySchedule}
     */
    QuerySchedule,

    /**
     * The Report model constructor.
     * @property {module:model/Report}
     */
    Report,

    /**
     * The ReportFailure model constructor.
     * @property {module:model/ReportFailure}
     */
    ReportFailure,

    /**
     * The ReportKey model constructor.
     * @property {module:model/ReportKey}
     */
    ReportKey,

    /**
     * The ReportMetadata model constructor.
     * @property {module:model/ReportMetadata}
     */
    ReportMetadata,

    /**
     * The ReportStatus model constructor.
     * @property {module:model/ReportStatus}
     */
    ReportStatus,

    /**
     * The Rule model constructor.
     * @property {module:model/Rule}
     */
    Rule,

    /**
     * The RunQueryRequest model constructor.
     * @property {module:model/RunQueryRequest}
     */
    RunQueryRequest,

    /**
    * The QueriesApi service constructor.
    * @property {module:api/QueriesApi}
    */
    QueriesApi,

    /**
    * The ReportsApi service constructor.
    * @property {module:api/ReportsApi}
    */
    ReportsApi
};
