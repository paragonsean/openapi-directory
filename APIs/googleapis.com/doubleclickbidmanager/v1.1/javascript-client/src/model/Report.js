/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Parameters from './Parameters';
import ReportKey from './ReportKey';
import ReportMetadata from './ReportMetadata';

/**
 * The Report model module.
 * @module model/Report
 * @version v1.1
 */
class Report {
    /**
     * Constructs a new <code>Report</code>.
     * Represents a report.
     * @alias module:model/Report
     */
    constructor() { 
        
        Report.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Report</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Report} obj Optional instance to populate.
     * @return {module:model/Report} The populated <code>Report</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Report();

            if (data.hasOwnProperty('key')) {
                obj['key'] = ReportKey.constructFromObject(data['key']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ReportMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = Parameters.constructFromObject(data['params']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Report</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Report</code>.
     */
    static validateJSON(data) {
        // validate the optional field `key`
        if (data['key']) { // data not null
          ReportKey.validateJSON(data['key']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          ReportMetadata.validateJSON(data['metadata']);
        }
        // validate the optional field `params`
        if (data['params']) { // data not null
          Parameters.validateJSON(data['params']);
        }

        return true;
    }


}



/**
 * @member {module:model/ReportKey} key
 */
Report.prototype['key'] = undefined;

/**
 * @member {module:model/ReportMetadata} metadata
 */
Report.prototype['metadata'] = undefined;

/**
 * @member {module:model/Parameters} params
 */
Report.prototype['params'] = undefined;






export default Report;

