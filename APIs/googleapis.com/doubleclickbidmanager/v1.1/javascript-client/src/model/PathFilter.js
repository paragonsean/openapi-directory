/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventFilter from './EventFilter';

/**
 * The PathFilter model module.
 * @module model/PathFilter
 * @version v1.1
 */
class PathFilter {
    /**
     * Constructs a new <code>PathFilter</code>.
     * Path filters specify which paths to include in a report. A path is the result of combining DV360 events based on User ID to create a workflow of users&#39; actions. When a path filter is set, the resulting report will only include paths that match the specified event at the specified position. All other paths will be excluded.
     * @alias module:model/PathFilter
     */
    constructor() { 
        
        PathFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PathFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PathFilter} obj Optional instance to populate.
     * @return {module:model/PathFilter} The populated <code>PathFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PathFilter();

            if (data.hasOwnProperty('eventFilters')) {
                obj['eventFilters'] = ApiClient.convertToType(data['eventFilters'], [EventFilter]);
            }
            if (data.hasOwnProperty('pathMatchPosition')) {
                obj['pathMatchPosition'] = ApiClient.convertToType(data['pathMatchPosition'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PathFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PathFilter</code>.
     */
    static validateJSON(data) {
        if (data['eventFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['eventFilters'])) {
                throw new Error("Expected the field `eventFilters` to be an array in the JSON data but got " + data['eventFilters']);
            }
            // validate the optional field `eventFilters` (array)
            for (const item of data['eventFilters']) {
                EventFilter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['pathMatchPosition'] && !(typeof data['pathMatchPosition'] === 'string' || data['pathMatchPosition'] instanceof String)) {
            throw new Error("Expected the field `pathMatchPosition` to be a primitive type in the JSON string but got " + data['pathMatchPosition']);
        }

        return true;
    }


}



/**
 * Filter on an event to be applied to some part of the path.
 * @member {Array.<module:model/EventFilter>} eventFilters
 */
PathFilter.prototype['eventFilters'] = undefined;

/**
 * Indicates the position of the path the filter should match to (first, last, or any event in path).
 * @member {module:model/PathFilter.PathMatchPositionEnum} pathMatchPosition
 */
PathFilter.prototype['pathMatchPosition'] = undefined;





/**
 * Allowed values for the <code>pathMatchPosition</code> property.
 * @enum {String}
 * @readonly
 */
PathFilter['PathMatchPositionEnum'] = {

    /**
     * value: "ANY"
     * @const
     */
    "ANY": "ANY",

    /**
     * value: "FIRST"
     * @const
     */
    "FIRST": "FIRST",

    /**
     * value: "LAST"
     * @const
     */
    "LAST": "LAST"
};



export default PathFilter;

