/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PathQueryOptions from './PathQueryOptions';

/**
 * The Options model module.
 * @module model/Options
 * @version v1.1
 */
class Options {
    /**
     * Constructs a new <code>Options</code>.
     * Additional query options.
     * @alias module:model/Options
     */
    constructor() { 
        
        Options.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Options</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Options} obj Optional instance to populate.
     * @return {module:model/Options} The populated <code>Options</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Options();

            if (data.hasOwnProperty('includeOnlyTargetedUserLists')) {
                obj['includeOnlyTargetedUserLists'] = ApiClient.convertToType(data['includeOnlyTargetedUserLists'], 'Boolean');
            }
            if (data.hasOwnProperty('pathQueryOptions')) {
                obj['pathQueryOptions'] = PathQueryOptions.constructFromObject(data['pathQueryOptions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Options</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Options</code>.
     */
    static validateJSON(data) {
        // validate the optional field `pathQueryOptions`
        if (data['pathQueryOptions']) { // data not null
          PathQueryOptions.validateJSON(data['pathQueryOptions']);
        }

        return true;
    }


}



/**
 * Set to true and filter your report by `FILTER_INSERTION_ORDER` or `FILTER_LINE_ITEM` to include data for audience lists specifically targeted by those items.
 * @member {Boolean} includeOnlyTargetedUserLists
 */
Options.prototype['includeOnlyTargetedUserLists'] = undefined;

/**
 * @member {module:model/PathQueryOptions} pathQueryOptions
 */
Options.prototype['pathQueryOptions'] = undefined;






export default Options;

