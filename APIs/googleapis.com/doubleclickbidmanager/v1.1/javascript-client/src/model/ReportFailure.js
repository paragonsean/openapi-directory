/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReportFailure model module.
 * @module model/ReportFailure
 * @version v1.1
 */
class ReportFailure {
    /**
     * Constructs a new <code>ReportFailure</code>.
     * An explanation of a report failure.
     * @alias module:model/ReportFailure
     */
    constructor() { 
        
        ReportFailure.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportFailure</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportFailure} obj Optional instance to populate.
     * @return {module:model/ReportFailure} The populated <code>ReportFailure</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportFailure();

            if (data.hasOwnProperty('errorCode')) {
                obj['errorCode'] = ApiClient.convertToType(data['errorCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportFailure</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportFailure</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['errorCode'] && !(typeof data['errorCode'] === 'string' || data['errorCode'] instanceof String)) {
            throw new Error("Expected the field `errorCode` to be a primitive type in the JSON string but got " + data['errorCode']);
        }

        return true;
    }


}



/**
 * Error code that shows why the report was not created.
 * @member {module:model/ReportFailure.ErrorCodeEnum} errorCode
 */
ReportFailure.prototype['errorCode'] = undefined;





/**
 * Allowed values for the <code>errorCode</code> property.
 * @enum {String}
 * @readonly
 */
ReportFailure['ErrorCodeEnum'] = {

    /**
     * value: "AUTHENTICATION_ERROR"
     * @const
     */
    "AUTHENTICATION_ERROR": "AUTHENTICATION_ERROR",

    /**
     * value: "UNAUTHORIZED_API_ACCESS"
     * @const
     */
    "UNAUTHORIZED_API_ACCESS": "UNAUTHORIZED_API_ACCESS",

    /**
     * value: "SERVER_ERROR"
     * @const
     */
    "SERVER_ERROR": "SERVER_ERROR",

    /**
     * value: "VALIDATION_ERROR"
     * @const
     */
    "VALIDATION_ERROR": "VALIDATION_ERROR",

    /**
     * value: "REPORTING_FATAL_ERROR"
     * @const
     */
    "REPORTING_FATAL_ERROR": "REPORTING_FATAL_ERROR",

    /**
     * value: "REPORTING_TRANSIENT_ERROR"
     * @const
     */
    "REPORTING_TRANSIENT_ERROR": "REPORTING_TRANSIENT_ERROR",

    /**
     * value: "REPORTING_IMCOMPATIBLE_METRICS"
     * @const
     */
    "REPORTING_IMCOMPATIBLE_METRICS": "REPORTING_IMCOMPATIBLE_METRICS",

    /**
     * value: "REPORTING_ILLEGAL_FILENAME"
     * @const
     */
    "REPORTING_ILLEGAL_FILENAME": "REPORTING_ILLEGAL_FILENAME",

    /**
     * value: "REPORTING_QUERY_NOT_FOUND"
     * @const
     */
    "REPORTING_QUERY_NOT_FOUND": "REPORTING_QUERY_NOT_FOUND",

    /**
     * value: "REPORTING_BUCKET_NOT_FOUND"
     * @const
     */
    "REPORTING_BUCKET_NOT_FOUND": "REPORTING_BUCKET_NOT_FOUND",

    /**
     * value: "REPORTING_CREATE_BUCKET_FAILED"
     * @const
     */
    "REPORTING_CREATE_BUCKET_FAILED": "REPORTING_CREATE_BUCKET_FAILED",

    /**
     * value: "REPORTING_DELETE_BUCKET_FAILED"
     * @const
     */
    "REPORTING_DELETE_BUCKET_FAILED": "REPORTING_DELETE_BUCKET_FAILED",

    /**
     * value: "REPORTING_UPDATE_BUCKET_PERMISSION_FAILED"
     * @const
     */
    "REPORTING_UPDATE_BUCKET_PERMISSION_FAILED": "REPORTING_UPDATE_BUCKET_PERMISSION_FAILED",

    /**
     * value: "REPORTING_WRITE_BUCKET_OBJECT_FAILED"
     * @const
     */
    "REPORTING_WRITE_BUCKET_OBJECT_FAILED": "REPORTING_WRITE_BUCKET_OBJECT_FAILED",

    /**
     * value: "DEPRECATED_REPORTING_INVALID_QUERY"
     * @const
     */
    "DEPRECATED_REPORTING_INVALID_QUERY": "DEPRECATED_REPORTING_INVALID_QUERY",

    /**
     * value: "REPORTING_INVALID_QUERY_TOO_MANY_UNFILTERED_LARGE_GROUP_BYS"
     * @const
     */
    "REPORTING_INVALID_QUERY_TOO_MANY_UNFILTERED_LARGE_GROUP_BYS": "REPORTING_INVALID_QUERY_TOO_MANY_UNFILTERED_LARGE_GROUP_BYS",

    /**
     * value: "REPORTING_INVALID_QUERY_TITLE_MISSING"
     * @const
     */
    "REPORTING_INVALID_QUERY_TITLE_MISSING": "REPORTING_INVALID_QUERY_TITLE_MISSING",

    /**
     * value: "REPORTING_INVALID_QUERY_MISSING_PARTNER_AND_ADVERTISER_FILTERS"
     * @const
     */
    "REPORTING_INVALID_QUERY_MISSING_PARTNER_AND_ADVERTISER_FILTERS": "REPORTING_INVALID_QUERY_MISSING_PARTNER_AND_ADVERTISER_FILTERS"
};



export default ReportFailure;

