/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The QuerySchedule model module.
 * @module model/QuerySchedule
 * @version v1.1
 */
class QuerySchedule {
    /**
     * Constructs a new <code>QuerySchedule</code>.
     * Information on how frequently and when to run a query.
     * @alias module:model/QuerySchedule
     */
    constructor() { 
        
        QuerySchedule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QuerySchedule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuerySchedule} obj Optional instance to populate.
     * @return {module:model/QuerySchedule} The populated <code>QuerySchedule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuerySchedule();

            if (data.hasOwnProperty('endTimeMs')) {
                obj['endTimeMs'] = ApiClient.convertToType(data['endTimeMs'], 'String');
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'String');
            }
            if (data.hasOwnProperty('nextRunMinuteOfDay')) {
                obj['nextRunMinuteOfDay'] = ApiClient.convertToType(data['nextRunMinuteOfDay'], 'Number');
            }
            if (data.hasOwnProperty('nextRunTimezoneCode')) {
                obj['nextRunTimezoneCode'] = ApiClient.convertToType(data['nextRunTimezoneCode'], 'String');
            }
            if (data.hasOwnProperty('startTimeMs')) {
                obj['startTimeMs'] = ApiClient.convertToType(data['startTimeMs'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuerySchedule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuerySchedule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['endTimeMs'] && !(typeof data['endTimeMs'] === 'string' || data['endTimeMs'] instanceof String)) {
            throw new Error("Expected the field `endTimeMs` to be a primitive type in the JSON string but got " + data['endTimeMs']);
        }
        // ensure the json data is a string
        if (data['frequency'] && !(typeof data['frequency'] === 'string' || data['frequency'] instanceof String)) {
            throw new Error("Expected the field `frequency` to be a primitive type in the JSON string but got " + data['frequency']);
        }
        // ensure the json data is a string
        if (data['nextRunTimezoneCode'] && !(typeof data['nextRunTimezoneCode'] === 'string' || data['nextRunTimezoneCode'] instanceof String)) {
            throw new Error("Expected the field `nextRunTimezoneCode` to be a primitive type in the JSON string but got " + data['nextRunTimezoneCode']);
        }
        // ensure the json data is a string
        if (data['startTimeMs'] && !(typeof data['startTimeMs'] === 'string' || data['startTimeMs'] instanceof String)) {
            throw new Error("Expected the field `startTimeMs` to be a primitive type in the JSON string but got " + data['startTimeMs']);
        }

        return true;
    }


}



/**
 * Datetime to periodically run the query until.
 * @member {String} endTimeMs
 */
QuerySchedule.prototype['endTimeMs'] = undefined;

/**
 * How often the query is run.
 * @member {module:model/QuerySchedule.FrequencyEnum} frequency
 */
QuerySchedule.prototype['frequency'] = undefined;

/**
 * Time of day at which a new report will be generated, represented as minutes past midnight. Range is 0 to 1439. Only applies to scheduled reports.
 * @member {Number} nextRunMinuteOfDay
 */
QuerySchedule.prototype['nextRunMinuteOfDay'] = undefined;

/**
 * Canonical timezone code for report generation time. Defaults to America/New_York.
 * @member {String} nextRunTimezoneCode
 */
QuerySchedule.prototype['nextRunTimezoneCode'] = undefined;

/**
 * When to start running the query. Not applicable to `ONE_TIME` frequency.
 * @member {String} startTimeMs
 */
QuerySchedule.prototype['startTimeMs'] = undefined;





/**
 * Allowed values for the <code>frequency</code> property.
 * @enum {String}
 * @readonly
 */
QuerySchedule['FrequencyEnum'] = {

    /**
     * value: "ONE_TIME"
     * @const
     */
    "ONE_TIME": "ONE_TIME",

    /**
     * value: "DAILY"
     * @const
     */
    "DAILY": "DAILY",

    /**
     * value: "WEEKLY"
     * @const
     */
    "WEEKLY": "WEEKLY",

    /**
     * value: "SEMI_MONTHLY"
     * @const
     */
    "SEMI_MONTHLY": "SEMI_MONTHLY",

    /**
     * value: "MONTHLY"
     * @const
     */
    "MONTHLY": "MONTHLY",

    /**
     * value: "QUARTERLY"
     * @const
     */
    "QUARTERLY": "QUARTERLY",

    /**
     * value: "YEARLY"
     * @const
     */
    "YEARLY": "YEARLY"
};



export default QuerySchedule;

