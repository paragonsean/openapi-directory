/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportKey::OAIReportKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportKey::OAIReportKey() {
    this->initializeModel();
}

OAIReportKey::~OAIReportKey() {}

void OAIReportKey::initializeModel() {

    m_query_id_isSet = false;
    m_query_id_isValid = false;

    m_report_id_isSet = false;
    m_report_id_isValid = false;
}

void OAIReportKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportKey::fromJsonObject(QJsonObject json) {

    m_query_id_isValid = ::OpenAPI::fromJsonValue(m_query_id, json[QString("queryId")]);
    m_query_id_isSet = !json[QString("queryId")].isNull() && m_query_id_isValid;

    m_report_id_isValid = ::OpenAPI::fromJsonValue(m_report_id, json[QString("reportId")]);
    m_report_id_isSet = !json[QString("reportId")].isNull() && m_report_id_isValid;
}

QString OAIReportKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportKey::asJsonObject() const {
    QJsonObject obj;
    if (m_query_id_isSet) {
        obj.insert(QString("queryId"), ::OpenAPI::toJsonValue(m_query_id));
    }
    if (m_report_id_isSet) {
        obj.insert(QString("reportId"), ::OpenAPI::toJsonValue(m_report_id));
    }
    return obj;
}

QString OAIReportKey::getQueryId() const {
    return m_query_id;
}
void OAIReportKey::setQueryId(const QString &query_id) {
    m_query_id = query_id;
    m_query_id_isSet = true;
}

bool OAIReportKey::is_query_id_Set() const{
    return m_query_id_isSet;
}

bool OAIReportKey::is_query_id_Valid() const{
    return m_query_id_isValid;
}

QString OAIReportKey::getReportId() const {
    return m_report_id;
}
void OAIReportKey::setReportId(const QString &report_id) {
    m_report_id = report_id;
    m_report_id_isSet = true;
}

bool OAIReportKey::is_report_id_Set() const{
    return m_report_id_isSet;
}

bool OAIReportKey::is_report_id_Valid() const{
    return m_report_id_isValid;
}

bool OAIReportKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
