/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryMetadata::OAIQueryMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryMetadata::OAIQueryMetadata() {
    this->initializeModel();
}

OAIQueryMetadata::~OAIQueryMetadata() {}

void OAIQueryMetadata::initializeModel() {

    m_data_range_isSet = false;
    m_data_range_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_google_cloud_storage_path_for_latest_report_isSet = false;
    m_google_cloud_storage_path_for_latest_report_isValid = false;

    m_google_drive_path_for_latest_report_isSet = false;
    m_google_drive_path_for_latest_report_isValid = false;

    m_latest_report_run_time_ms_isSet = false;
    m_latest_report_run_time_ms_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_report_count_isSet = false;
    m_report_count_isValid = false;

    m_running_isSet = false;
    m_running_isValid = false;

    m_send_notification_isSet = false;
    m_send_notification_isValid = false;

    m_share_email_address_isSet = false;
    m_share_email_address_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIQueryMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryMetadata::fromJsonObject(QJsonObject json) {

    m_data_range_isValid = ::OpenAPI::fromJsonValue(m_data_range, json[QString("dataRange")]);
    m_data_range_isSet = !json[QString("dataRange")].isNull() && m_data_range_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_google_cloud_storage_path_for_latest_report_isValid = ::OpenAPI::fromJsonValue(m_google_cloud_storage_path_for_latest_report, json[QString("googleCloudStoragePathForLatestReport")]);
    m_google_cloud_storage_path_for_latest_report_isSet = !json[QString("googleCloudStoragePathForLatestReport")].isNull() && m_google_cloud_storage_path_for_latest_report_isValid;

    m_google_drive_path_for_latest_report_isValid = ::OpenAPI::fromJsonValue(m_google_drive_path_for_latest_report, json[QString("googleDrivePathForLatestReport")]);
    m_google_drive_path_for_latest_report_isSet = !json[QString("googleDrivePathForLatestReport")].isNull() && m_google_drive_path_for_latest_report_isValid;

    m_latest_report_run_time_ms_isValid = ::OpenAPI::fromJsonValue(m_latest_report_run_time_ms, json[QString("latestReportRunTimeMs")]);
    m_latest_report_run_time_ms_isSet = !json[QString("latestReportRunTimeMs")].isNull() && m_latest_report_run_time_ms_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_report_count_isValid = ::OpenAPI::fromJsonValue(m_report_count, json[QString("reportCount")]);
    m_report_count_isSet = !json[QString("reportCount")].isNull() && m_report_count_isValid;

    m_running_isValid = ::OpenAPI::fromJsonValue(m_running, json[QString("running")]);
    m_running_isSet = !json[QString("running")].isNull() && m_running_isValid;

    m_send_notification_isValid = ::OpenAPI::fromJsonValue(m_send_notification, json[QString("sendNotification")]);
    m_send_notification_isSet = !json[QString("sendNotification")].isNull() && m_send_notification_isValid;

    m_share_email_address_isValid = ::OpenAPI::fromJsonValue(m_share_email_address, json[QString("shareEmailAddress")]);
    m_share_email_address_isSet = !json[QString("shareEmailAddress")].isNull() && m_share_email_address_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIQueryMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_data_range_isSet) {
        obj.insert(QString("dataRange"), ::OpenAPI::toJsonValue(m_data_range));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_google_cloud_storage_path_for_latest_report_isSet) {
        obj.insert(QString("googleCloudStoragePathForLatestReport"), ::OpenAPI::toJsonValue(m_google_cloud_storage_path_for_latest_report));
    }
    if (m_google_drive_path_for_latest_report_isSet) {
        obj.insert(QString("googleDrivePathForLatestReport"), ::OpenAPI::toJsonValue(m_google_drive_path_for_latest_report));
    }
    if (m_latest_report_run_time_ms_isSet) {
        obj.insert(QString("latestReportRunTimeMs"), ::OpenAPI::toJsonValue(m_latest_report_run_time_ms));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_report_count_isSet) {
        obj.insert(QString("reportCount"), ::OpenAPI::toJsonValue(m_report_count));
    }
    if (m_running_isSet) {
        obj.insert(QString("running"), ::OpenAPI::toJsonValue(m_running));
    }
    if (m_send_notification_isSet) {
        obj.insert(QString("sendNotification"), ::OpenAPI::toJsonValue(m_send_notification));
    }
    if (m_share_email_address.size() > 0) {
        obj.insert(QString("shareEmailAddress"), ::OpenAPI::toJsonValue(m_share_email_address));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIQueryMetadata::getDataRange() const {
    return m_data_range;
}
void OAIQueryMetadata::setDataRange(const QString &data_range) {
    m_data_range = data_range;
    m_data_range_isSet = true;
}

bool OAIQueryMetadata::is_data_range_Set() const{
    return m_data_range_isSet;
}

bool OAIQueryMetadata::is_data_range_Valid() const{
    return m_data_range_isValid;
}

QString OAIQueryMetadata::getFormat() const {
    return m_format;
}
void OAIQueryMetadata::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIQueryMetadata::is_format_Set() const{
    return m_format_isSet;
}

bool OAIQueryMetadata::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIQueryMetadata::getGoogleCloudStoragePathForLatestReport() const {
    return m_google_cloud_storage_path_for_latest_report;
}
void OAIQueryMetadata::setGoogleCloudStoragePathForLatestReport(const QString &google_cloud_storage_path_for_latest_report) {
    m_google_cloud_storage_path_for_latest_report = google_cloud_storage_path_for_latest_report;
    m_google_cloud_storage_path_for_latest_report_isSet = true;
}

bool OAIQueryMetadata::is_google_cloud_storage_path_for_latest_report_Set() const{
    return m_google_cloud_storage_path_for_latest_report_isSet;
}

bool OAIQueryMetadata::is_google_cloud_storage_path_for_latest_report_Valid() const{
    return m_google_cloud_storage_path_for_latest_report_isValid;
}

QString OAIQueryMetadata::getGoogleDrivePathForLatestReport() const {
    return m_google_drive_path_for_latest_report;
}
void OAIQueryMetadata::setGoogleDrivePathForLatestReport(const QString &google_drive_path_for_latest_report) {
    m_google_drive_path_for_latest_report = google_drive_path_for_latest_report;
    m_google_drive_path_for_latest_report_isSet = true;
}

bool OAIQueryMetadata::is_google_drive_path_for_latest_report_Set() const{
    return m_google_drive_path_for_latest_report_isSet;
}

bool OAIQueryMetadata::is_google_drive_path_for_latest_report_Valid() const{
    return m_google_drive_path_for_latest_report_isValid;
}

QString OAIQueryMetadata::getLatestReportRunTimeMs() const {
    return m_latest_report_run_time_ms;
}
void OAIQueryMetadata::setLatestReportRunTimeMs(const QString &latest_report_run_time_ms) {
    m_latest_report_run_time_ms = latest_report_run_time_ms;
    m_latest_report_run_time_ms_isSet = true;
}

bool OAIQueryMetadata::is_latest_report_run_time_ms_Set() const{
    return m_latest_report_run_time_ms_isSet;
}

bool OAIQueryMetadata::is_latest_report_run_time_ms_Valid() const{
    return m_latest_report_run_time_ms_isValid;
}

QString OAIQueryMetadata::getLocale() const {
    return m_locale;
}
void OAIQueryMetadata::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIQueryMetadata::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIQueryMetadata::is_locale_Valid() const{
    return m_locale_isValid;
}

qint32 OAIQueryMetadata::getReportCount() const {
    return m_report_count;
}
void OAIQueryMetadata::setReportCount(const qint32 &report_count) {
    m_report_count = report_count;
    m_report_count_isSet = true;
}

bool OAIQueryMetadata::is_report_count_Set() const{
    return m_report_count_isSet;
}

bool OAIQueryMetadata::is_report_count_Valid() const{
    return m_report_count_isValid;
}

bool OAIQueryMetadata::isRunning() const {
    return m_running;
}
void OAIQueryMetadata::setRunning(const bool &running) {
    m_running = running;
    m_running_isSet = true;
}

bool OAIQueryMetadata::is_running_Set() const{
    return m_running_isSet;
}

bool OAIQueryMetadata::is_running_Valid() const{
    return m_running_isValid;
}

bool OAIQueryMetadata::isSendNotification() const {
    return m_send_notification;
}
void OAIQueryMetadata::setSendNotification(const bool &send_notification) {
    m_send_notification = send_notification;
    m_send_notification_isSet = true;
}

bool OAIQueryMetadata::is_send_notification_Set() const{
    return m_send_notification_isSet;
}

bool OAIQueryMetadata::is_send_notification_Valid() const{
    return m_send_notification_isValid;
}

QList<QString> OAIQueryMetadata::getShareEmailAddress() const {
    return m_share_email_address;
}
void OAIQueryMetadata::setShareEmailAddress(const QList<QString> &share_email_address) {
    m_share_email_address = share_email_address;
    m_share_email_address_isSet = true;
}

bool OAIQueryMetadata::is_share_email_address_Set() const{
    return m_share_email_address_isSet;
}

bool OAIQueryMetadata::is_share_email_address_Valid() const{
    return m_share_email_address_isValid;
}

QString OAIQueryMetadata::getTitle() const {
    return m_title;
}
void OAIQueryMetadata::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIQueryMetadata::is_title_Set() const{
    return m_title_isSet;
}

bool OAIQueryMetadata::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIQueryMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_cloud_storage_path_for_latest_report_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_drive_path_for_latest_report_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_report_run_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_email_address.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
