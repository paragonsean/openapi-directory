/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParameters::OAIParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParameters::OAIParameters() {
    this->initializeModel();
}

OAIParameters::~OAIParameters() {}

void OAIParameters::initializeModel() {

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_group_bys_isSet = false;
    m_group_bys_isValid = false;

    m_include_invite_data_isSet = false;
    m_include_invite_data_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParameters::fromJsonObject(QJsonObject json) {

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_group_bys_isValid = ::OpenAPI::fromJsonValue(m_group_bys, json[QString("groupBys")]);
    m_group_bys_isSet = !json[QString("groupBys")].isNull() && m_group_bys_isValid;

    m_include_invite_data_isValid = ::OpenAPI::fromJsonValue(m_include_invite_data, json[QString("includeInviteData")]);
    m_include_invite_data_isSet = !json[QString("includeInviteData")].isNull() && m_include_invite_data_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_filters.size() > 0) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_group_bys.size() > 0) {
        obj.insert(QString("groupBys"), ::OpenAPI::toJsonValue(m_group_bys));
    }
    if (m_include_invite_data_isSet) {
        obj.insert(QString("includeInviteData"), ::OpenAPI::toJsonValue(m_include_invite_data));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_options.isSet()) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIFilterPair> OAIParameters::getFilters() const {
    return m_filters;
}
void OAIParameters::setFilters(const QList<OAIFilterPair> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIParameters::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIParameters::is_filters_Valid() const{
    return m_filters_isValid;
}

QList<QString> OAIParameters::getGroupBys() const {
    return m_group_bys;
}
void OAIParameters::setGroupBys(const QList<QString> &group_bys) {
    m_group_bys = group_bys;
    m_group_bys_isSet = true;
}

bool OAIParameters::is_group_bys_Set() const{
    return m_group_bys_isSet;
}

bool OAIParameters::is_group_bys_Valid() const{
    return m_group_bys_isValid;
}

bool OAIParameters::isIncludeInviteData() const {
    return m_include_invite_data;
}
void OAIParameters::setIncludeInviteData(const bool &include_invite_data) {
    m_include_invite_data = include_invite_data;
    m_include_invite_data_isSet = true;
}

bool OAIParameters::is_include_invite_data_Set() const{
    return m_include_invite_data_isSet;
}

bool OAIParameters::is_include_invite_data_Valid() const{
    return m_include_invite_data_isValid;
}

QList<QString> OAIParameters::getMetrics() const {
    return m_metrics;
}
void OAIParameters::setMetrics(const QList<QString> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIParameters::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIParameters::is_metrics_Valid() const{
    return m_metrics_isValid;
}

OAIOptions OAIParameters::getOptions() const {
    return m_options;
}
void OAIParameters::setOptions(const OAIOptions &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIParameters::is_options_Set() const{
    return m_options_isSet;
}

bool OAIParameters::is_options_Valid() const{
    return m_options_isValid;
}

QString OAIParameters::getType() const {
    return m_type;
}
void OAIParameters::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIParameters::is_type_Set() const{
    return m_type_isSet;
}

bool OAIParameters::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_bys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_invite_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
