/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportMetadata::OAIReportMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportMetadata::OAIReportMetadata() {
    this->initializeModel();
}

OAIReportMetadata::~OAIReportMetadata() {}

void OAIReportMetadata::initializeModel() {

    m_google_cloud_storage_path_isSet = false;
    m_google_cloud_storage_path_isValid = false;

    m_report_data_end_time_ms_isSet = false;
    m_report_data_end_time_ms_isValid = false;

    m_report_data_start_time_ms_isSet = false;
    m_report_data_start_time_ms_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIReportMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportMetadata::fromJsonObject(QJsonObject json) {

    m_google_cloud_storage_path_isValid = ::OpenAPI::fromJsonValue(m_google_cloud_storage_path, json[QString("googleCloudStoragePath")]);
    m_google_cloud_storage_path_isSet = !json[QString("googleCloudStoragePath")].isNull() && m_google_cloud_storage_path_isValid;

    m_report_data_end_time_ms_isValid = ::OpenAPI::fromJsonValue(m_report_data_end_time_ms, json[QString("reportDataEndTimeMs")]);
    m_report_data_end_time_ms_isSet = !json[QString("reportDataEndTimeMs")].isNull() && m_report_data_end_time_ms_isValid;

    m_report_data_start_time_ms_isValid = ::OpenAPI::fromJsonValue(m_report_data_start_time_ms, json[QString("reportDataStartTimeMs")]);
    m_report_data_start_time_ms_isSet = !json[QString("reportDataStartTimeMs")].isNull() && m_report_data_start_time_ms_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIReportMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_google_cloud_storage_path_isSet) {
        obj.insert(QString("googleCloudStoragePath"), ::OpenAPI::toJsonValue(m_google_cloud_storage_path));
    }
    if (m_report_data_end_time_ms_isSet) {
        obj.insert(QString("reportDataEndTimeMs"), ::OpenAPI::toJsonValue(m_report_data_end_time_ms));
    }
    if (m_report_data_start_time_ms_isSet) {
        obj.insert(QString("reportDataStartTimeMs"), ::OpenAPI::toJsonValue(m_report_data_start_time_ms));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIReportMetadata::getGoogleCloudStoragePath() const {
    return m_google_cloud_storage_path;
}
void OAIReportMetadata::setGoogleCloudStoragePath(const QString &google_cloud_storage_path) {
    m_google_cloud_storage_path = google_cloud_storage_path;
    m_google_cloud_storage_path_isSet = true;
}

bool OAIReportMetadata::is_google_cloud_storage_path_Set() const{
    return m_google_cloud_storage_path_isSet;
}

bool OAIReportMetadata::is_google_cloud_storage_path_Valid() const{
    return m_google_cloud_storage_path_isValid;
}

QString OAIReportMetadata::getReportDataEndTimeMs() const {
    return m_report_data_end_time_ms;
}
void OAIReportMetadata::setReportDataEndTimeMs(const QString &report_data_end_time_ms) {
    m_report_data_end_time_ms = report_data_end_time_ms;
    m_report_data_end_time_ms_isSet = true;
}

bool OAIReportMetadata::is_report_data_end_time_ms_Set() const{
    return m_report_data_end_time_ms_isSet;
}

bool OAIReportMetadata::is_report_data_end_time_ms_Valid() const{
    return m_report_data_end_time_ms_isValid;
}

QString OAIReportMetadata::getReportDataStartTimeMs() const {
    return m_report_data_start_time_ms;
}
void OAIReportMetadata::setReportDataStartTimeMs(const QString &report_data_start_time_ms) {
    m_report_data_start_time_ms = report_data_start_time_ms;
    m_report_data_start_time_ms_isSet = true;
}

bool OAIReportMetadata::is_report_data_start_time_ms_Set() const{
    return m_report_data_start_time_ms_isSet;
}

bool OAIReportMetadata::is_report_data_start_time_ms_Valid() const{
    return m_report_data_start_time_ms_isValid;
}

OAIReportStatus OAIReportMetadata::getStatus() const {
    return m_status;
}
void OAIReportMetadata::setStatus(const OAIReportStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReportMetadata::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReportMetadata::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIReportMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_google_cloud_storage_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_data_end_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_data_start_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
