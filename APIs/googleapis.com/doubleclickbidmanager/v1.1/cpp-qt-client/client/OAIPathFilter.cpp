/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPathFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPathFilter::OAIPathFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPathFilter::OAIPathFilter() {
    this->initializeModel();
}

OAIPathFilter::~OAIPathFilter() {}

void OAIPathFilter::initializeModel() {

    m_event_filters_isSet = false;
    m_event_filters_isValid = false;

    m_path_match_position_isSet = false;
    m_path_match_position_isValid = false;
}

void OAIPathFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPathFilter::fromJsonObject(QJsonObject json) {

    m_event_filters_isValid = ::OpenAPI::fromJsonValue(m_event_filters, json[QString("eventFilters")]);
    m_event_filters_isSet = !json[QString("eventFilters")].isNull() && m_event_filters_isValid;

    m_path_match_position_isValid = ::OpenAPI::fromJsonValue(m_path_match_position, json[QString("pathMatchPosition")]);
    m_path_match_position_isSet = !json[QString("pathMatchPosition")].isNull() && m_path_match_position_isValid;
}

QString OAIPathFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPathFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_event_filters.size() > 0) {
        obj.insert(QString("eventFilters"), ::OpenAPI::toJsonValue(m_event_filters));
    }
    if (m_path_match_position_isSet) {
        obj.insert(QString("pathMatchPosition"), ::OpenAPI::toJsonValue(m_path_match_position));
    }
    return obj;
}

QList<OAIEventFilter> OAIPathFilter::getEventFilters() const {
    return m_event_filters;
}
void OAIPathFilter::setEventFilters(const QList<OAIEventFilter> &event_filters) {
    m_event_filters = event_filters;
    m_event_filters_isSet = true;
}

bool OAIPathFilter::is_event_filters_Set() const{
    return m_event_filters_isSet;
}

bool OAIPathFilter::is_event_filters_Valid() const{
    return m_event_filters_isValid;
}

QString OAIPathFilter::getPathMatchPosition() const {
    return m_path_match_position;
}
void OAIPathFilter::setPathMatchPosition(const QString &path_match_position) {
    m_path_match_position = path_match_position;
    m_path_match_position_isSet = true;
}

bool OAIPathFilter::is_path_match_position_Set() const{
    return m_path_match_position_isSet;
}

bool OAIPathFilter::is_path_match_position_Valid() const{
    return m_path_match_position_isValid;
}

bool OAIPathFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_match_position_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPathFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
