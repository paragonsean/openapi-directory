/**
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportStatus::OAIReportStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportStatus::OAIReportStatus() {
    this->initializeModel();
}

OAIReportStatus::~OAIReportStatus() {}

void OAIReportStatus::initializeModel() {

    m_failure_isSet = false;
    m_failure_isValid = false;

    m_finish_time_ms_isSet = false;
    m_finish_time_ms_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIReportStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportStatus::fromJsonObject(QJsonObject json) {

    m_failure_isValid = ::OpenAPI::fromJsonValue(m_failure, json[QString("failure")]);
    m_failure_isSet = !json[QString("failure")].isNull() && m_failure_isValid;

    m_finish_time_ms_isValid = ::OpenAPI::fromJsonValue(m_finish_time_ms, json[QString("finishTimeMs")]);
    m_finish_time_ms_isSet = !json[QString("finishTimeMs")].isNull() && m_finish_time_ms_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIReportStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_failure.isSet()) {
        obj.insert(QString("failure"), ::OpenAPI::toJsonValue(m_failure));
    }
    if (m_finish_time_ms_isSet) {
        obj.insert(QString("finishTimeMs"), ::OpenAPI::toJsonValue(m_finish_time_ms));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIReportFailure OAIReportStatus::getFailure() const {
    return m_failure;
}
void OAIReportStatus::setFailure(const OAIReportFailure &failure) {
    m_failure = failure;
    m_failure_isSet = true;
}

bool OAIReportStatus::is_failure_Set() const{
    return m_failure_isSet;
}

bool OAIReportStatus::is_failure_Valid() const{
    return m_failure_isValid;
}

QString OAIReportStatus::getFinishTimeMs() const {
    return m_finish_time_ms;
}
void OAIReportStatus::setFinishTimeMs(const QString &finish_time_ms) {
    m_finish_time_ms = finish_time_ms;
    m_finish_time_ms_isSet = true;
}

bool OAIReportStatus::is_finish_time_ms_Set() const{
    return m_finish_time_ms_isSet;
}

bool OAIReportStatus::is_finish_time_ms_Valid() const{
    return m_finish_time_ms_isValid;
}

QString OAIReportStatus::getFormat() const {
    return m_format;
}
void OAIReportStatus::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIReportStatus::is_format_Set() const{
    return m_format_isSet;
}

bool OAIReportStatus::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIReportStatus::getState() const {
    return m_state;
}
void OAIReportStatus::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIReportStatus::is_state_Set() const{
    return m_state_isSet;
}

bool OAIReportStatus::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIReportStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failure.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_finish_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
