/*
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ListQueriesResponse;
import org.openapitools.client.model.Query;
import org.openapitools.client.model.RunQueryRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QueriesApi
 */
@Disabled
public class QueriesApiTest {

    private final QueriesApi api = new QueriesApi();

    /**
     * Creates a query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void doubleclickbidmanagerQueriesCreatequeryTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean asynchronous = null;
        Query query = null;
        Query response = api.doubleclickbidmanagerQueriesCreatequery($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, asynchronous, query);
        // TODO: test validations
    }

    /**
     * Deletes a stored query as well as the associated stored reports.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void doubleclickbidmanagerQueriesDeletequeryTest() throws ApiException {
        String queryId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.doubleclickbidmanagerQueriesDeletequery(queryId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves a stored query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void doubleclickbidmanagerQueriesGetqueryTest() throws ApiException {
        String queryId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Query response = api.doubleclickbidmanagerQueriesGetquery(queryId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves stored queries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void doubleclickbidmanagerQueriesListqueriesTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListQueriesResponse response = api.doubleclickbidmanagerQueriesListqueries($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Runs a stored query to generate a report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void doubleclickbidmanagerQueriesRunqueryTest() throws ApiException {
        String queryId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean asynchronous = null;
        RunQueryRequest runQueryRequest = null;
        api.doubleclickbidmanagerQueriesRunquery(queryId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, asynchronous, runQueryRequest);
        // TODO: test validations
    }

}
