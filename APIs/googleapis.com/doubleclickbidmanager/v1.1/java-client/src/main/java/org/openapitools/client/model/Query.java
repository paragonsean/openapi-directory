/*
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Parameters;
import org.openapitools.client.model.QueryMetadata;
import org.openapitools.client.model.QuerySchedule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:04.321334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Query {
  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private QueryMetadata metadata;

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private Parameters params;

  public static final String SERIALIZED_NAME_QUERY_ID = "queryId";
  @SerializedName(SERIALIZED_NAME_QUERY_ID)
  private String queryId;

  public static final String SERIALIZED_NAME_REPORT_DATA_END_TIME_MS = "reportDataEndTimeMs";
  @SerializedName(SERIALIZED_NAME_REPORT_DATA_END_TIME_MS)
  private String reportDataEndTimeMs;

  public static final String SERIALIZED_NAME_REPORT_DATA_START_TIME_MS = "reportDataStartTimeMs";
  @SerializedName(SERIALIZED_NAME_REPORT_DATA_START_TIME_MS)
  private String reportDataStartTimeMs;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private QuerySchedule schedule;

  public static final String SERIALIZED_NAME_TIMEZONE_CODE = "timezoneCode";
  @SerializedName(SERIALIZED_NAME_TIMEZONE_CODE)
  private String timezoneCode;

  public Query() {
  }

  public Query kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;doubleclickbidmanager#query\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Query metadata(QueryMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public QueryMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(QueryMetadata metadata) {
    this.metadata = metadata;
  }


  public Query params(Parameters params) {
    this.params = params;
    return this;
  }

  /**
   * Get params
   * @return params
   */
  @javax.annotation.Nullable
  public Parameters getParams() {
    return params;
  }

  public void setParams(Parameters params) {
    this.params = params;
  }


  public Query queryId(String queryId) {
    this.queryId = queryId;
    return this;
  }

  /**
   * Query ID.
   * @return queryId
   */
  @javax.annotation.Nullable
  public String getQueryId() {
    return queryId;
  }

  public void setQueryId(String queryId) {
    this.queryId = queryId;
  }


  public Query reportDataEndTimeMs(String reportDataEndTimeMs) {
    this.reportDataEndTimeMs = reportDataEndTimeMs;
    return this;
  }

  /**
   * The ending time for the data that is shown in the report. Note, reportDataEndTimeMs is required if metadata.dataRange is CUSTOM_DATES and ignored otherwise.
   * @return reportDataEndTimeMs
   */
  @javax.annotation.Nullable
  public String getReportDataEndTimeMs() {
    return reportDataEndTimeMs;
  }

  public void setReportDataEndTimeMs(String reportDataEndTimeMs) {
    this.reportDataEndTimeMs = reportDataEndTimeMs;
  }


  public Query reportDataStartTimeMs(String reportDataStartTimeMs) {
    this.reportDataStartTimeMs = reportDataStartTimeMs;
    return this;
  }

  /**
   * The starting time for the data that is shown in the report. Note, reportDataStartTimeMs is required if metadata.dataRange is CUSTOM_DATES and ignored otherwise.
   * @return reportDataStartTimeMs
   */
  @javax.annotation.Nullable
  public String getReportDataStartTimeMs() {
    return reportDataStartTimeMs;
  }

  public void setReportDataStartTimeMs(String reportDataStartTimeMs) {
    this.reportDataStartTimeMs = reportDataStartTimeMs;
  }


  public Query schedule(QuerySchedule schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Get schedule
   * @return schedule
   */
  @javax.annotation.Nullable
  public QuerySchedule getSchedule() {
    return schedule;
  }

  public void setSchedule(QuerySchedule schedule) {
    this.schedule = schedule;
  }


  public Query timezoneCode(String timezoneCode) {
    this.timezoneCode = timezoneCode;
    return this;
  }

  /**
   * Canonical timezone code for report data time. Defaults to America/New_York.
   * @return timezoneCode
   */
  @javax.annotation.Nullable
  public String getTimezoneCode() {
    return timezoneCode;
  }

  public void setTimezoneCode(String timezoneCode) {
    this.timezoneCode = timezoneCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Query query = (Query) o;
    return Objects.equals(this.kind, query.kind) &&
        Objects.equals(this.metadata, query.metadata) &&
        Objects.equals(this.params, query.params) &&
        Objects.equals(this.queryId, query.queryId) &&
        Objects.equals(this.reportDataEndTimeMs, query.reportDataEndTimeMs) &&
        Objects.equals(this.reportDataStartTimeMs, query.reportDataStartTimeMs) &&
        Objects.equals(this.schedule, query.schedule) &&
        Objects.equals(this.timezoneCode, query.timezoneCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kind, metadata, params, queryId, reportDataEndTimeMs, reportDataStartTimeMs, schedule, timezoneCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Query {\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    queryId: ").append(toIndentedString(queryId)).append("\n");
    sb.append("    reportDataEndTimeMs: ").append(toIndentedString(reportDataEndTimeMs)).append("\n");
    sb.append("    reportDataStartTimeMs: ").append(toIndentedString(reportDataStartTimeMs)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    timezoneCode: ").append(toIndentedString(timezoneCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("kind");
    openapiFields.add("metadata");
    openapiFields.add("params");
    openapiFields.add("queryId");
    openapiFields.add("reportDataEndTimeMs");
    openapiFields.add("reportDataStartTimeMs");
    openapiFields.add("schedule");
    openapiFields.add("timezoneCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Query
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Query.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Query is not found in the empty JSON string", Query.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Query.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Query` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        QueryMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      // validate the optional field `params`
      if (jsonObj.get("params") != null && !jsonObj.get("params").isJsonNull()) {
        Parameters.validateJsonElement(jsonObj.get("params"));
      }
      if ((jsonObj.get("queryId") != null && !jsonObj.get("queryId").isJsonNull()) && !jsonObj.get("queryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryId").toString()));
      }
      if ((jsonObj.get("reportDataEndTimeMs") != null && !jsonObj.get("reportDataEndTimeMs").isJsonNull()) && !jsonObj.get("reportDataEndTimeMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportDataEndTimeMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportDataEndTimeMs").toString()));
      }
      if ((jsonObj.get("reportDataStartTimeMs") != null && !jsonObj.get("reportDataStartTimeMs").isJsonNull()) && !jsonObj.get("reportDataStartTimeMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportDataStartTimeMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportDataStartTimeMs").toString()));
      }
      // validate the optional field `schedule`
      if (jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) {
        QuerySchedule.validateJsonElement(jsonObj.get("schedule"));
      }
      if ((jsonObj.get("timezoneCode") != null && !jsonObj.get("timezoneCode").isJsonNull()) && !jsonObj.get("timezoneCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezoneCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezoneCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Query.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Query' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Query> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Query.class));

       return (TypeAdapter<T>) new TypeAdapter<Query>() {
           @Override
           public void write(JsonWriter out, Query value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Query read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Query given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Query
   * @throws IOException if the JSON string is invalid with respect to Query
   */
  public static Query fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Query.class);
  }

  /**
   * Convert an instance of Query to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

