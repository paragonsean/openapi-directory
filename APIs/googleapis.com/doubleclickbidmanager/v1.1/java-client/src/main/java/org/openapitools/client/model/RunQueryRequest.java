/*
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to run a stored query to generate a report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:04.321334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RunQueryRequest {
  /**
   * Report data range used to generate the report.
   */
  @JsonAdapter(DataRangeEnum.Adapter.class)
  public enum DataRangeEnum {
    CUSTOM_DATES("CUSTOM_DATES"),
    
    CURRENT_DAY("CURRENT_DAY"),
    
    PREVIOUS_DAY("PREVIOUS_DAY"),
    
    WEEK_TO_DATE("WEEK_TO_DATE"),
    
    MONTH_TO_DATE("MONTH_TO_DATE"),
    
    QUARTER_TO_DATE("QUARTER_TO_DATE"),
    
    YEAR_TO_DATE("YEAR_TO_DATE"),
    
    PREVIOUS_WEEK("PREVIOUS_WEEK"),
    
    PREVIOUS_HALF_MONTH("PREVIOUS_HALF_MONTH"),
    
    PREVIOUS_MONTH("PREVIOUS_MONTH"),
    
    PREVIOUS_QUARTER("PREVIOUS_QUARTER"),
    
    PREVIOUS_YEAR("PREVIOUS_YEAR"),
    
    LAST_7_DAYS("LAST_7_DAYS"),
    
    LAST_30_DAYS("LAST_30_DAYS"),
    
    LAST_90_DAYS("LAST_90_DAYS"),
    
    LAST_365_DAYS("LAST_365_DAYS"),
    
    ALL_TIME("ALL_TIME"),
    
    LAST_14_DAYS("LAST_14_DAYS"),
    
    TYPE_NOT_SUPPORTED("TYPE_NOT_SUPPORTED"),
    
    LAST_60_DAYS("LAST_60_DAYS");

    private String value;

    DataRangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataRangeEnum fromValue(String value) {
      for (DataRangeEnum b : DataRangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataRangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataRangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataRangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataRangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataRangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_RANGE = "dataRange";
  @SerializedName(SERIALIZED_NAME_DATA_RANGE)
  private DataRangeEnum dataRange;

  public static final String SERIALIZED_NAME_REPORT_DATA_END_TIME_MS = "reportDataEndTimeMs";
  @SerializedName(SERIALIZED_NAME_REPORT_DATA_END_TIME_MS)
  private String reportDataEndTimeMs;

  public static final String SERIALIZED_NAME_REPORT_DATA_START_TIME_MS = "reportDataStartTimeMs";
  @SerializedName(SERIALIZED_NAME_REPORT_DATA_START_TIME_MS)
  private String reportDataStartTimeMs;

  public static final String SERIALIZED_NAME_TIMEZONE_CODE = "timezoneCode";
  @SerializedName(SERIALIZED_NAME_TIMEZONE_CODE)
  private String timezoneCode;

  public RunQueryRequest() {
  }

  public RunQueryRequest dataRange(DataRangeEnum dataRange) {
    this.dataRange = dataRange;
    return this;
  }

  /**
   * Report data range used to generate the report.
   * @return dataRange
   */
  @javax.annotation.Nullable
  public DataRangeEnum getDataRange() {
    return dataRange;
  }

  public void setDataRange(DataRangeEnum dataRange) {
    this.dataRange = dataRange;
  }


  public RunQueryRequest reportDataEndTimeMs(String reportDataEndTimeMs) {
    this.reportDataEndTimeMs = reportDataEndTimeMs;
    return this;
  }

  /**
   * The ending time for the data that is shown in the report. Note, reportDataEndTimeMs is required if dataRange is CUSTOM_DATES and ignored otherwise.
   * @return reportDataEndTimeMs
   */
  @javax.annotation.Nullable
  public String getReportDataEndTimeMs() {
    return reportDataEndTimeMs;
  }

  public void setReportDataEndTimeMs(String reportDataEndTimeMs) {
    this.reportDataEndTimeMs = reportDataEndTimeMs;
  }


  public RunQueryRequest reportDataStartTimeMs(String reportDataStartTimeMs) {
    this.reportDataStartTimeMs = reportDataStartTimeMs;
    return this;
  }

  /**
   * The starting time for the data that is shown in the report. Note, reportDataStartTimeMs is required if dataRange is CUSTOM_DATES and ignored otherwise.
   * @return reportDataStartTimeMs
   */
  @javax.annotation.Nullable
  public String getReportDataStartTimeMs() {
    return reportDataStartTimeMs;
  }

  public void setReportDataStartTimeMs(String reportDataStartTimeMs) {
    this.reportDataStartTimeMs = reportDataStartTimeMs;
  }


  public RunQueryRequest timezoneCode(String timezoneCode) {
    this.timezoneCode = timezoneCode;
    return this;
  }

  /**
   * Canonical timezone code for report data time. Defaults to America/New_York.
   * @return timezoneCode
   */
  @javax.annotation.Nullable
  public String getTimezoneCode() {
    return timezoneCode;
  }

  public void setTimezoneCode(String timezoneCode) {
    this.timezoneCode = timezoneCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunQueryRequest runQueryRequest = (RunQueryRequest) o;
    return Objects.equals(this.dataRange, runQueryRequest.dataRange) &&
        Objects.equals(this.reportDataEndTimeMs, runQueryRequest.reportDataEndTimeMs) &&
        Objects.equals(this.reportDataStartTimeMs, runQueryRequest.reportDataStartTimeMs) &&
        Objects.equals(this.timezoneCode, runQueryRequest.timezoneCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataRange, reportDataEndTimeMs, reportDataStartTimeMs, timezoneCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunQueryRequest {\n");
    sb.append("    dataRange: ").append(toIndentedString(dataRange)).append("\n");
    sb.append("    reportDataEndTimeMs: ").append(toIndentedString(reportDataEndTimeMs)).append("\n");
    sb.append("    reportDataStartTimeMs: ").append(toIndentedString(reportDataStartTimeMs)).append("\n");
    sb.append("    timezoneCode: ").append(toIndentedString(timezoneCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataRange");
    openapiFields.add("reportDataEndTimeMs");
    openapiFields.add("reportDataStartTimeMs");
    openapiFields.add("timezoneCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunQueryRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunQueryRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunQueryRequest is not found in the empty JSON string", RunQueryRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunQueryRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunQueryRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataRange") != null && !jsonObj.get("dataRange").isJsonNull()) && !jsonObj.get("dataRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataRange").toString()));
      }
      // validate the optional field `dataRange`
      if (jsonObj.get("dataRange") != null && !jsonObj.get("dataRange").isJsonNull()) {
        DataRangeEnum.validateJsonElement(jsonObj.get("dataRange"));
      }
      if ((jsonObj.get("reportDataEndTimeMs") != null && !jsonObj.get("reportDataEndTimeMs").isJsonNull()) && !jsonObj.get("reportDataEndTimeMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportDataEndTimeMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportDataEndTimeMs").toString()));
      }
      if ((jsonObj.get("reportDataStartTimeMs") != null && !jsonObj.get("reportDataStartTimeMs").isJsonNull()) && !jsonObj.get("reportDataStartTimeMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportDataStartTimeMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportDataStartTimeMs").toString()));
      }
      if ((jsonObj.get("timezoneCode") != null && !jsonObj.get("timezoneCode").isJsonNull()) && !jsonObj.get("timezoneCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezoneCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezoneCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunQueryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunQueryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunQueryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunQueryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RunQueryRequest>() {
           @Override
           public void write(JsonWriter out, RunQueryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunQueryRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunQueryRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunQueryRequest
   * @throws IOException if the JSON string is invalid with respect to RunQueryRequest
   */
  public static RunQueryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunQueryRequest.class);
  }

  /**
   * Convert an instance of RunQueryRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

