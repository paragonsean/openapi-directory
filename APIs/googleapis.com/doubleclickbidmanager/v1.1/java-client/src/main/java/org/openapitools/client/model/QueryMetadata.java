/*
 * DoubleClick Bid Manager API
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 *
 * The version of the OpenAPI document: v1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Query metadata.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:04.321334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryMetadata {
  /**
   * Range of report data.
   */
  @JsonAdapter(DataRangeEnum.Adapter.class)
  public enum DataRangeEnum {
    CUSTOM_DATES("CUSTOM_DATES"),
    
    CURRENT_DAY("CURRENT_DAY"),
    
    PREVIOUS_DAY("PREVIOUS_DAY"),
    
    WEEK_TO_DATE("WEEK_TO_DATE"),
    
    MONTH_TO_DATE("MONTH_TO_DATE"),
    
    QUARTER_TO_DATE("QUARTER_TO_DATE"),
    
    YEAR_TO_DATE("YEAR_TO_DATE"),
    
    PREVIOUS_WEEK("PREVIOUS_WEEK"),
    
    PREVIOUS_HALF_MONTH("PREVIOUS_HALF_MONTH"),
    
    PREVIOUS_MONTH("PREVIOUS_MONTH"),
    
    PREVIOUS_QUARTER("PREVIOUS_QUARTER"),
    
    PREVIOUS_YEAR("PREVIOUS_YEAR"),
    
    LAST_7_DAYS("LAST_7_DAYS"),
    
    LAST_30_DAYS("LAST_30_DAYS"),
    
    LAST_90_DAYS("LAST_90_DAYS"),
    
    LAST_365_DAYS("LAST_365_DAYS"),
    
    ALL_TIME("ALL_TIME"),
    
    LAST_14_DAYS("LAST_14_DAYS"),
    
    TYPE_NOT_SUPPORTED("TYPE_NOT_SUPPORTED"),
    
    LAST_60_DAYS("LAST_60_DAYS");

    private String value;

    DataRangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataRangeEnum fromValue(String value) {
      for (DataRangeEnum b : DataRangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataRangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataRangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataRangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataRangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataRangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_RANGE = "dataRange";
  @SerializedName(SERIALIZED_NAME_DATA_RANGE)
  private DataRangeEnum dataRange;

  /**
   * Format of the generated report.
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    CSV("CSV"),
    
    EXCEL_CSV("EXCEL_CSV"),
    
    XLSX("XLSX");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format;

  public static final String SERIALIZED_NAME_GOOGLE_CLOUD_STORAGE_PATH_FOR_LATEST_REPORT = "googleCloudStoragePathForLatestReport";
  @SerializedName(SERIALIZED_NAME_GOOGLE_CLOUD_STORAGE_PATH_FOR_LATEST_REPORT)
  private String googleCloudStoragePathForLatestReport;

  public static final String SERIALIZED_NAME_GOOGLE_DRIVE_PATH_FOR_LATEST_REPORT = "googleDrivePathForLatestReport";
  @SerializedName(SERIALIZED_NAME_GOOGLE_DRIVE_PATH_FOR_LATEST_REPORT)
  private String googleDrivePathForLatestReport;

  public static final String SERIALIZED_NAME_LATEST_REPORT_RUN_TIME_MS = "latestReportRunTimeMs";
  @SerializedName(SERIALIZED_NAME_LATEST_REPORT_RUN_TIME_MS)
  private String latestReportRunTimeMs;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_REPORT_COUNT = "reportCount";
  @SerializedName(SERIALIZED_NAME_REPORT_COUNT)
  private Integer reportCount;

  public static final String SERIALIZED_NAME_RUNNING = "running";
  @SerializedName(SERIALIZED_NAME_RUNNING)
  private Boolean running;

  public static final String SERIALIZED_NAME_SEND_NOTIFICATION = "sendNotification";
  @SerializedName(SERIALIZED_NAME_SEND_NOTIFICATION)
  private Boolean sendNotification;

  public static final String SERIALIZED_NAME_SHARE_EMAIL_ADDRESS = "shareEmailAddress";
  @SerializedName(SERIALIZED_NAME_SHARE_EMAIL_ADDRESS)
  private List<String> shareEmailAddress = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public QueryMetadata() {
  }

  public QueryMetadata dataRange(DataRangeEnum dataRange) {
    this.dataRange = dataRange;
    return this;
  }

  /**
   * Range of report data.
   * @return dataRange
   */
  @javax.annotation.Nullable
  public DataRangeEnum getDataRange() {
    return dataRange;
  }

  public void setDataRange(DataRangeEnum dataRange) {
    this.dataRange = dataRange;
  }


  public QueryMetadata format(FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * Format of the generated report.
   * @return format
   */
  @javax.annotation.Nullable
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public QueryMetadata googleCloudStoragePathForLatestReport(String googleCloudStoragePathForLatestReport) {
    this.googleCloudStoragePathForLatestReport = googleCloudStoragePathForLatestReport;
    return this;
  }

  /**
   * The path to the location in Google Cloud Storage where the latest report is stored.
   * @return googleCloudStoragePathForLatestReport
   */
  @javax.annotation.Nullable
  public String getGoogleCloudStoragePathForLatestReport() {
    return googleCloudStoragePathForLatestReport;
  }

  public void setGoogleCloudStoragePathForLatestReport(String googleCloudStoragePathForLatestReport) {
    this.googleCloudStoragePathForLatestReport = googleCloudStoragePathForLatestReport;
  }


  public QueryMetadata googleDrivePathForLatestReport(String googleDrivePathForLatestReport) {
    this.googleDrivePathForLatestReport = googleDrivePathForLatestReport;
    return this;
  }

  /**
   * The path in Google Drive for the latest report.
   * @return googleDrivePathForLatestReport
   */
  @javax.annotation.Nullable
  public String getGoogleDrivePathForLatestReport() {
    return googleDrivePathForLatestReport;
  }

  public void setGoogleDrivePathForLatestReport(String googleDrivePathForLatestReport) {
    this.googleDrivePathForLatestReport = googleDrivePathForLatestReport;
  }


  public QueryMetadata latestReportRunTimeMs(String latestReportRunTimeMs) {
    this.latestReportRunTimeMs = latestReportRunTimeMs;
    return this;
  }

  /**
   * The time when the latest report started to run.
   * @return latestReportRunTimeMs
   */
  @javax.annotation.Nullable
  public String getLatestReportRunTimeMs() {
    return latestReportRunTimeMs;
  }

  public void setLatestReportRunTimeMs(String latestReportRunTimeMs) {
    this.latestReportRunTimeMs = latestReportRunTimeMs;
  }


  public QueryMetadata locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Locale of the generated reports. Valid values are cs CZECH de GERMAN en ENGLISH es SPANISH fr FRENCH it ITALIAN ja JAPANESE ko KOREAN pl POLISH pt-BR BRAZILIAN_PORTUGUESE ru RUSSIAN tr TURKISH uk UKRAINIAN zh-CN CHINA_CHINESE zh-TW TAIWAN_CHINESE An locale string not in the list above will generate reports in English.
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public QueryMetadata reportCount(Integer reportCount) {
    this.reportCount = reportCount;
    return this;
  }

  /**
   * Number of reports that have been generated for the query.
   * @return reportCount
   */
  @javax.annotation.Nullable
  public Integer getReportCount() {
    return reportCount;
  }

  public void setReportCount(Integer reportCount) {
    this.reportCount = reportCount;
  }


  public QueryMetadata running(Boolean running) {
    this.running = running;
    return this;
  }

  /**
   * Whether the latest report is currently running.
   * @return running
   */
  @javax.annotation.Nullable
  public Boolean getRunning() {
    return running;
  }

  public void setRunning(Boolean running) {
    this.running = running;
  }


  public QueryMetadata sendNotification(Boolean sendNotification) {
    this.sendNotification = sendNotification;
    return this;
  }

  /**
   * Whether to send an email notification when a report is ready. Default to false.
   * @return sendNotification
   */
  @javax.annotation.Nullable
  public Boolean getSendNotification() {
    return sendNotification;
  }

  public void setSendNotification(Boolean sendNotification) {
    this.sendNotification = sendNotification;
  }


  public QueryMetadata shareEmailAddress(List<String> shareEmailAddress) {
    this.shareEmailAddress = shareEmailAddress;
    return this;
  }

  public QueryMetadata addShareEmailAddressItem(String shareEmailAddressItem) {
    if (this.shareEmailAddress == null) {
      this.shareEmailAddress = new ArrayList<>();
    }
    this.shareEmailAddress.add(shareEmailAddressItem);
    return this;
  }

  /**
   * List of email addresses which are sent email notifications when the report is finished. Separate from sendNotification.
   * @return shareEmailAddress
   */
  @javax.annotation.Nullable
  public List<String> getShareEmailAddress() {
    return shareEmailAddress;
  }

  public void setShareEmailAddress(List<String> shareEmailAddress) {
    this.shareEmailAddress = shareEmailAddress;
  }


  public QueryMetadata title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Query title. It is used to name the reports generated from this query.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryMetadata queryMetadata = (QueryMetadata) o;
    return Objects.equals(this.dataRange, queryMetadata.dataRange) &&
        Objects.equals(this.format, queryMetadata.format) &&
        Objects.equals(this.googleCloudStoragePathForLatestReport, queryMetadata.googleCloudStoragePathForLatestReport) &&
        Objects.equals(this.googleDrivePathForLatestReport, queryMetadata.googleDrivePathForLatestReport) &&
        Objects.equals(this.latestReportRunTimeMs, queryMetadata.latestReportRunTimeMs) &&
        Objects.equals(this.locale, queryMetadata.locale) &&
        Objects.equals(this.reportCount, queryMetadata.reportCount) &&
        Objects.equals(this.running, queryMetadata.running) &&
        Objects.equals(this.sendNotification, queryMetadata.sendNotification) &&
        Objects.equals(this.shareEmailAddress, queryMetadata.shareEmailAddress) &&
        Objects.equals(this.title, queryMetadata.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataRange, format, googleCloudStoragePathForLatestReport, googleDrivePathForLatestReport, latestReportRunTimeMs, locale, reportCount, running, sendNotification, shareEmailAddress, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryMetadata {\n");
    sb.append("    dataRange: ").append(toIndentedString(dataRange)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    googleCloudStoragePathForLatestReport: ").append(toIndentedString(googleCloudStoragePathForLatestReport)).append("\n");
    sb.append("    googleDrivePathForLatestReport: ").append(toIndentedString(googleDrivePathForLatestReport)).append("\n");
    sb.append("    latestReportRunTimeMs: ").append(toIndentedString(latestReportRunTimeMs)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    reportCount: ").append(toIndentedString(reportCount)).append("\n");
    sb.append("    running: ").append(toIndentedString(running)).append("\n");
    sb.append("    sendNotification: ").append(toIndentedString(sendNotification)).append("\n");
    sb.append("    shareEmailAddress: ").append(toIndentedString(shareEmailAddress)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataRange");
    openapiFields.add("format");
    openapiFields.add("googleCloudStoragePathForLatestReport");
    openapiFields.add("googleDrivePathForLatestReport");
    openapiFields.add("latestReportRunTimeMs");
    openapiFields.add("locale");
    openapiFields.add("reportCount");
    openapiFields.add("running");
    openapiFields.add("sendNotification");
    openapiFields.add("shareEmailAddress");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryMetadata is not found in the empty JSON string", QueryMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataRange") != null && !jsonObj.get("dataRange").isJsonNull()) && !jsonObj.get("dataRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataRange").toString()));
      }
      // validate the optional field `dataRange`
      if (jsonObj.get("dataRange") != null && !jsonObj.get("dataRange").isJsonNull()) {
        DataRangeEnum.validateJsonElement(jsonObj.get("dataRange"));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        FormatEnum.validateJsonElement(jsonObj.get("format"));
      }
      if ((jsonObj.get("googleCloudStoragePathForLatestReport") != null && !jsonObj.get("googleCloudStoragePathForLatestReport").isJsonNull()) && !jsonObj.get("googleCloudStoragePathForLatestReport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleCloudStoragePathForLatestReport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleCloudStoragePathForLatestReport").toString()));
      }
      if ((jsonObj.get("googleDrivePathForLatestReport") != null && !jsonObj.get("googleDrivePathForLatestReport").isJsonNull()) && !jsonObj.get("googleDrivePathForLatestReport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleDrivePathForLatestReport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleDrivePathForLatestReport").toString()));
      }
      if ((jsonObj.get("latestReportRunTimeMs") != null && !jsonObj.get("latestReportRunTimeMs").isJsonNull()) && !jsonObj.get("latestReportRunTimeMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latestReportRunTimeMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latestReportRunTimeMs").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("shareEmailAddress") != null && !jsonObj.get("shareEmailAddress").isJsonNull() && !jsonObj.get("shareEmailAddress").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareEmailAddress` to be an array in the JSON string but got `%s`", jsonObj.get("shareEmailAddress").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryMetadata>() {
           @Override
           public void write(JsonWriter out, QueryMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryMetadata
   * @throws IOException if the JSON string is invalid with respect to QueryMetadata
   */
  public static QueryMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryMetadata.class);
  }

  /**
   * Convert an instance of QueryMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

