/**
 * Access Approval API
 * An API for controlling access to data by Google personnel.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccessLocations model module.
 * @module model/AccessLocations
 * @version v1
 */
class AccessLocations {
    /**
     * Constructs a new <code>AccessLocations</code>.
     * Home office and physical location of the principal.
     * @alias module:model/AccessLocations
     */
    constructor() { 
        
        AccessLocations.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccessLocations</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccessLocations} obj Optional instance to populate.
     * @return {module:model/AccessLocations} The populated <code>AccessLocations</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccessLocations();

            if (data.hasOwnProperty('principalOfficeCountry')) {
                obj['principalOfficeCountry'] = ApiClient.convertToType(data['principalOfficeCountry'], 'String');
            }
            if (data.hasOwnProperty('principalPhysicalLocationCountry')) {
                obj['principalPhysicalLocationCountry'] = ApiClient.convertToType(data['principalPhysicalLocationCountry'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccessLocations</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccessLocations</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['principalOfficeCountry'] && !(typeof data['principalOfficeCountry'] === 'string' || data['principalOfficeCountry'] instanceof String)) {
            throw new Error("Expected the field `principalOfficeCountry` to be a primitive type in the JSON string but got " + data['principalOfficeCountry']);
        }
        // ensure the json data is a string
        if (data['principalPhysicalLocationCountry'] && !(typeof data['principalPhysicalLocationCountry'] === 'string' || data['principalPhysicalLocationCountry'] instanceof String)) {
            throw new Error("Expected the field `principalPhysicalLocationCountry` to be a primitive type in the JSON string but got " + data['principalPhysicalLocationCountry']);
        }

        return true;
    }


}



/**
 * The \"home office\" location of the principal. A two-letter country code (ISO 3166-1 alpha-2), such as \"US\", \"DE\" or \"GB\" or a region code. In some limited situations Google systems may refer refer to a region code instead of a country code. Possible Region Codes: * ASI: Asia * EUR: Europe * OCE: Oceania * AFR: Africa * NAM: North America * SAM: South America * ANT: Antarctica * ANY: Any location
 * @member {String} principalOfficeCountry
 */
AccessLocations.prototype['principalOfficeCountry'] = undefined;

/**
 * Physical location of the principal at the time of the access. A two-letter country code (ISO 3166-1 alpha-2), such as \"US\", \"DE\" or \"GB\" or a region code. In some limited situations Google systems may refer refer to a region code instead of a country code. Possible Region Codes: * ASI: Asia * EUR: Europe * OCE: Oceania * AFR: Africa * NAM: North America * SAM: South America * ANT: Antarctica * ANY: Any location
 * @member {String} principalPhysicalLocationCountry
 */
AccessLocations.prototype['principalPhysicalLocationCountry'] = undefined;






export default AccessLocations;

