/**
 * Access Approval API
 * An API for controlling access to data by Google personnel.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SignatureInfo model module.
 * @module model/SignatureInfo
 * @version v1
 */
class SignatureInfo {
    /**
     * Constructs a new <code>SignatureInfo</code>.
     * Information about the digital signature of the resource.
     * @alias module:model/SignatureInfo
     */
    constructor() { 
        
        SignatureInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SignatureInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SignatureInfo} obj Optional instance to populate.
     * @return {module:model/SignatureInfo} The populated <code>SignatureInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SignatureInfo();

            if (data.hasOwnProperty('customerKmsKeyVersion')) {
                obj['customerKmsKeyVersion'] = ApiClient.convertToType(data['customerKmsKeyVersion'], 'String');
            }
            if (data.hasOwnProperty('googleKeyAlgorithm')) {
                obj['googleKeyAlgorithm'] = ApiClient.convertToType(data['googleKeyAlgorithm'], 'String');
            }
            if (data.hasOwnProperty('googlePublicKeyPem')) {
                obj['googlePublicKeyPem'] = ApiClient.convertToType(data['googlePublicKeyPem'], 'String');
            }
            if (data.hasOwnProperty('serializedApprovalRequest')) {
                obj['serializedApprovalRequest'] = ApiClient.convertToType(data['serializedApprovalRequest'], 'Blob');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SignatureInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SignatureInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['customerKmsKeyVersion'] && !(typeof data['customerKmsKeyVersion'] === 'string' || data['customerKmsKeyVersion'] instanceof String)) {
            throw new Error("Expected the field `customerKmsKeyVersion` to be a primitive type in the JSON string but got " + data['customerKmsKeyVersion']);
        }
        // ensure the json data is a string
        if (data['googleKeyAlgorithm'] && !(typeof data['googleKeyAlgorithm'] === 'string' || data['googleKeyAlgorithm'] instanceof String)) {
            throw new Error("Expected the field `googleKeyAlgorithm` to be a primitive type in the JSON string but got " + data['googleKeyAlgorithm']);
        }
        // ensure the json data is a string
        if (data['googlePublicKeyPem'] && !(typeof data['googlePublicKeyPem'] === 'string' || data['googlePublicKeyPem'] instanceof String)) {
            throw new Error("Expected the field `googlePublicKeyPem` to be a primitive type in the JSON string but got " + data['googlePublicKeyPem']);
        }

        return true;
    }


}



/**
 * The resource name of the customer CryptoKeyVersion used for signing.
 * @member {String} customerKmsKeyVersion
 */
SignatureInfo.prototype['customerKmsKeyVersion'] = undefined;

/**
 * The hashing algorithm used for signature verification. It will only be present in the case of Google managed keys.
 * @member {module:model/SignatureInfo.GoogleKeyAlgorithmEnum} googleKeyAlgorithm
 */
SignatureInfo.prototype['googleKeyAlgorithm'] = undefined;

/**
 * The public key for the Google default signing, encoded in PEM format. The signature was created using a private key which may be verified using this public key.
 * @member {String} googlePublicKeyPem
 */
SignatureInfo.prototype['googlePublicKeyPem'] = undefined;

/**
 * The ApprovalRequest that is serialized without the SignatureInfo message field. This data is used with the hashing algorithm to generate the digital signature, and it can be used for signature verification.
 * @member {Blob} serializedApprovalRequest
 */
SignatureInfo.prototype['serializedApprovalRequest'] = undefined;

/**
 * The digital signature.
 * @member {Blob} signature
 */
SignatureInfo.prototype['signature'] = undefined;





/**
 * Allowed values for the <code>googleKeyAlgorithm</code> property.
 * @enum {String}
 * @readonly
 */
SignatureInfo['GoogleKeyAlgorithmEnum'] = {

    /**
     * value: "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED"
     * @const
     */
    "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED": "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED",

    /**
     * value: "GOOGLE_SYMMETRIC_ENCRYPTION"
     * @const
     */
    "GOOGLE_SYMMETRIC_ENCRYPTION": "GOOGLE_SYMMETRIC_ENCRYPTION",

    /**
     * value: "AES_128_GCM"
     * @const
     */
    "AES_128_GCM": "AES_128_GCM",

    /**
     * value: "AES_256_GCM"
     * @const
     */
    "AES_256_GCM": "AES_256_GCM",

    /**
     * value: "AES_128_CBC"
     * @const
     */
    "AES_128_CBC": "AES_128_CBC",

    /**
     * value: "AES_256_CBC"
     * @const
     */
    "AES_256_CBC": "AES_256_CBC",

    /**
     * value: "AES_128_CTR"
     * @const
     */
    "AES_128_CTR": "AES_128_CTR",

    /**
     * value: "AES_256_CTR"
     * @const
     */
    "AES_256_CTR": "AES_256_CTR",

    /**
     * value: "RSA_SIGN_PSS_2048_SHA256"
     * @const
     */
    "RSA_SIGN_PSS_2048_SHA256": "RSA_SIGN_PSS_2048_SHA256",

    /**
     * value: "RSA_SIGN_PSS_3072_SHA256"
     * @const
     */
    "RSA_SIGN_PSS_3072_SHA256": "RSA_SIGN_PSS_3072_SHA256",

    /**
     * value: "RSA_SIGN_PSS_4096_SHA256"
     * @const
     */
    "RSA_SIGN_PSS_4096_SHA256": "RSA_SIGN_PSS_4096_SHA256",

    /**
     * value: "RSA_SIGN_PSS_4096_SHA512"
     * @const
     */
    "RSA_SIGN_PSS_4096_SHA512": "RSA_SIGN_PSS_4096_SHA512",

    /**
     * value: "RSA_SIGN_PKCS1_2048_SHA256"
     * @const
     */
    "RSA_SIGN_PKCS1_2048_SHA256": "RSA_SIGN_PKCS1_2048_SHA256",

    /**
     * value: "RSA_SIGN_PKCS1_3072_SHA256"
     * @const
     */
    "RSA_SIGN_PKCS1_3072_SHA256": "RSA_SIGN_PKCS1_3072_SHA256",

    /**
     * value: "RSA_SIGN_PKCS1_4096_SHA256"
     * @const
     */
    "RSA_SIGN_PKCS1_4096_SHA256": "RSA_SIGN_PKCS1_4096_SHA256",

    /**
     * value: "RSA_SIGN_PKCS1_4096_SHA512"
     * @const
     */
    "RSA_SIGN_PKCS1_4096_SHA512": "RSA_SIGN_PKCS1_4096_SHA512",

    /**
     * value: "RSA_SIGN_RAW_PKCS1_2048"
     * @const
     */
    "RSA_SIGN_RAW_PKCS1_2048": "RSA_SIGN_RAW_PKCS1_2048",

    /**
     * value: "RSA_SIGN_RAW_PKCS1_3072"
     * @const
     */
    "RSA_SIGN_RAW_PKCS1_3072": "RSA_SIGN_RAW_PKCS1_3072",

    /**
     * value: "RSA_SIGN_RAW_PKCS1_4096"
     * @const
     */
    "RSA_SIGN_RAW_PKCS1_4096": "RSA_SIGN_RAW_PKCS1_4096",

    /**
     * value: "RSA_DECRYPT_OAEP_2048_SHA256"
     * @const
     */
    "RSA_DECRYPT_OAEP_2048_SHA256": "RSA_DECRYPT_OAEP_2048_SHA256",

    /**
     * value: "RSA_DECRYPT_OAEP_3072_SHA256"
     * @const
     */
    "RSA_DECRYPT_OAEP_3072_SHA256": "RSA_DECRYPT_OAEP_3072_SHA256",

    /**
     * value: "RSA_DECRYPT_OAEP_4096_SHA256"
     * @const
     */
    "RSA_DECRYPT_OAEP_4096_SHA256": "RSA_DECRYPT_OAEP_4096_SHA256",

    /**
     * value: "RSA_DECRYPT_OAEP_4096_SHA512"
     * @const
     */
    "RSA_DECRYPT_OAEP_4096_SHA512": "RSA_DECRYPT_OAEP_4096_SHA512",

    /**
     * value: "RSA_DECRYPT_OAEP_2048_SHA1"
     * @const
     */
    "RSA_DECRYPT_OAEP_2048_SHA1": "RSA_DECRYPT_OAEP_2048_SHA1",

    /**
     * value: "RSA_DECRYPT_OAEP_3072_SHA1"
     * @const
     */
    "RSA_DECRYPT_OAEP_3072_SHA1": "RSA_DECRYPT_OAEP_3072_SHA1",

    /**
     * value: "RSA_DECRYPT_OAEP_4096_SHA1"
     * @const
     */
    "RSA_DECRYPT_OAEP_4096_SHA1": "RSA_DECRYPT_OAEP_4096_SHA1",

    /**
     * value: "EC_SIGN_P256_SHA256"
     * @const
     */
    "EC_SIGN_P256_SHA256": "EC_SIGN_P256_SHA256",

    /**
     * value: "EC_SIGN_P384_SHA384"
     * @const
     */
    "EC_SIGN_P384_SHA384": "EC_SIGN_P384_SHA384",

    /**
     * value: "EC_SIGN_SECP256K1_SHA256"
     * @const
     */
    "EC_SIGN_SECP256K1_SHA256": "EC_SIGN_SECP256K1_SHA256",

    /**
     * value: "HMAC_SHA256"
     * @const
     */
    "HMAC_SHA256": "HMAC_SHA256",

    /**
     * value: "HMAC_SHA1"
     * @const
     */
    "HMAC_SHA1": "HMAC_SHA1",

    /**
     * value: "HMAC_SHA384"
     * @const
     */
    "HMAC_SHA384": "HMAC_SHA384",

    /**
     * value: "HMAC_SHA512"
     * @const
     */
    "HMAC_SHA512": "HMAC_SHA512",

    /**
     * value: "HMAC_SHA224"
     * @const
     */
    "HMAC_SHA224": "HMAC_SHA224",

    /**
     * value: "EXTERNAL_SYMMETRIC_ENCRYPTION"
     * @const
     */
    "EXTERNAL_SYMMETRIC_ENCRYPTION": "EXTERNAL_SYMMETRIC_ENCRYPTION"
};



export default SignatureInfo;

