# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.signature_info import SignatureInfo
from openapi_server import util


class ApproveDecision(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approve_time: str=None, auto_approved: bool=None, expire_time: str=None, invalidate_time: str=None, signature_info: SignatureInfo=None):
        """ApproveDecision - a model defined in OpenAPI

        :param approve_time: The approve_time of this ApproveDecision.
        :param auto_approved: The auto_approved of this ApproveDecision.
        :param expire_time: The expire_time of this ApproveDecision.
        :param invalidate_time: The invalidate_time of this ApproveDecision.
        :param signature_info: The signature_info of this ApproveDecision.
        """
        self.openapi_types = {
            'approve_time': str,
            'auto_approved': bool,
            'expire_time': str,
            'invalidate_time': str,
            'signature_info': SignatureInfo
        }

        self.attribute_map = {
            'approve_time': 'approveTime',
            'auto_approved': 'autoApproved',
            'expire_time': 'expireTime',
            'invalidate_time': 'invalidateTime',
            'signature_info': 'signatureInfo'
        }

        self._approve_time = approve_time
        self._auto_approved = auto_approved
        self._expire_time = expire_time
        self._invalidate_time = invalidate_time
        self._signature_info = signature_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApproveDecision':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApproveDecision of this ApproveDecision.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approve_time(self):
        """Gets the approve_time of this ApproveDecision.

        The time at which approval was granted.

        :return: The approve_time of this ApproveDecision.
        :rtype: str
        """
        return self._approve_time

    @approve_time.setter
    def approve_time(self, approve_time):
        """Sets the approve_time of this ApproveDecision.

        The time at which approval was granted.

        :param approve_time: The approve_time of this ApproveDecision.
        :type approve_time: str
        """

        self._approve_time = approve_time

    @property
    def auto_approved(self):
        """Gets the auto_approved of this ApproveDecision.

        True when the request has been auto-approved.

        :return: The auto_approved of this ApproveDecision.
        :rtype: bool
        """
        return self._auto_approved

    @auto_approved.setter
    def auto_approved(self, auto_approved):
        """Sets the auto_approved of this ApproveDecision.

        True when the request has been auto-approved.

        :param auto_approved: The auto_approved of this ApproveDecision.
        :type auto_approved: bool
        """

        self._auto_approved = auto_approved

    @property
    def expire_time(self):
        """Gets the expire_time of this ApproveDecision.

        The time at which the approval expires.

        :return: The expire_time of this ApproveDecision.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this ApproveDecision.

        The time at which the approval expires.

        :param expire_time: The expire_time of this ApproveDecision.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def invalidate_time(self):
        """Gets the invalidate_time of this ApproveDecision.

        If set, denotes the timestamp at which the approval is invalidated.

        :return: The invalidate_time of this ApproveDecision.
        :rtype: str
        """
        return self._invalidate_time

    @invalidate_time.setter
    def invalidate_time(self, invalidate_time):
        """Sets the invalidate_time of this ApproveDecision.

        If set, denotes the timestamp at which the approval is invalidated.

        :param invalidate_time: The invalidate_time of this ApproveDecision.
        :type invalidate_time: str
        """

        self._invalidate_time = invalidate_time

    @property
    def signature_info(self):
        """Gets the signature_info of this ApproveDecision.


        :return: The signature_info of this ApproveDecision.
        :rtype: SignatureInfo
        """
        return self._signature_info

    @signature_info.setter
    def signature_info(self, signature_info):
        """Sets the signature_info of this ApproveDecision.


        :param signature_info: The signature_info of this ApproveDecision.
        :type signature_info: SignatureInfo
        """

        self._signature_info = signature_info
