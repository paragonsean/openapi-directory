# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SignatureInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_kms_key_version: str=None, google_key_algorithm: str=None, google_public_key_pem: str=None, serialized_approval_request: str=None, signature: str=None):
        """SignatureInfo - a model defined in OpenAPI

        :param customer_kms_key_version: The customer_kms_key_version of this SignatureInfo.
        :param google_key_algorithm: The google_key_algorithm of this SignatureInfo.
        :param google_public_key_pem: The google_public_key_pem of this SignatureInfo.
        :param serialized_approval_request: The serialized_approval_request of this SignatureInfo.
        :param signature: The signature of this SignatureInfo.
        """
        self.openapi_types = {
            'customer_kms_key_version': str,
            'google_key_algorithm': str,
            'google_public_key_pem': str,
            'serialized_approval_request': str,
            'signature': str
        }

        self.attribute_map = {
            'customer_kms_key_version': 'customerKmsKeyVersion',
            'google_key_algorithm': 'googleKeyAlgorithm',
            'google_public_key_pem': 'googlePublicKeyPem',
            'serialized_approval_request': 'serializedApprovalRequest',
            'signature': 'signature'
        }

        self._customer_kms_key_version = customer_kms_key_version
        self._google_key_algorithm = google_key_algorithm
        self._google_public_key_pem = google_public_key_pem
        self._serialized_approval_request = serialized_approval_request
        self._signature = signature

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SignatureInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SignatureInfo of this SignatureInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_kms_key_version(self):
        """Gets the customer_kms_key_version of this SignatureInfo.

        The resource name of the customer CryptoKeyVersion used for signing.

        :return: The customer_kms_key_version of this SignatureInfo.
        :rtype: str
        """
        return self._customer_kms_key_version

    @customer_kms_key_version.setter
    def customer_kms_key_version(self, customer_kms_key_version):
        """Sets the customer_kms_key_version of this SignatureInfo.

        The resource name of the customer CryptoKeyVersion used for signing.

        :param customer_kms_key_version: The customer_kms_key_version of this SignatureInfo.
        :type customer_kms_key_version: str
        """

        self._customer_kms_key_version = customer_kms_key_version

    @property
    def google_key_algorithm(self):
        """Gets the google_key_algorithm of this SignatureInfo.

        The hashing algorithm used for signature verification. It will only be present in the case of Google managed keys.

        :return: The google_key_algorithm of this SignatureInfo.
        :rtype: str
        """
        return self._google_key_algorithm

    @google_key_algorithm.setter
    def google_key_algorithm(self, google_key_algorithm):
        """Sets the google_key_algorithm of this SignatureInfo.

        The hashing algorithm used for signature verification. It will only be present in the case of Google managed keys.

        :param google_key_algorithm: The google_key_algorithm of this SignatureInfo.
        :type google_key_algorithm: str
        """
        allowed_values = ["CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED", "GOOGLE_SYMMETRIC_ENCRYPTION", "AES_128_GCM", "AES_256_GCM", "AES_128_CBC", "AES_256_CBC", "AES_128_CTR", "AES_256_CTR", "RSA_SIGN_PSS_2048_SHA256", "RSA_SIGN_PSS_3072_SHA256", "RSA_SIGN_PSS_4096_SHA256", "RSA_SIGN_PSS_4096_SHA512", "RSA_SIGN_PKCS1_2048_SHA256", "RSA_SIGN_PKCS1_3072_SHA256", "RSA_SIGN_PKCS1_4096_SHA256", "RSA_SIGN_PKCS1_4096_SHA512", "RSA_SIGN_RAW_PKCS1_2048", "RSA_SIGN_RAW_PKCS1_3072", "RSA_SIGN_RAW_PKCS1_4096", "RSA_DECRYPT_OAEP_2048_SHA256", "RSA_DECRYPT_OAEP_3072_SHA256", "RSA_DECRYPT_OAEP_4096_SHA256", "RSA_DECRYPT_OAEP_4096_SHA512", "RSA_DECRYPT_OAEP_2048_SHA1", "RSA_DECRYPT_OAEP_3072_SHA1", "RSA_DECRYPT_OAEP_4096_SHA1", "EC_SIGN_P256_SHA256", "EC_SIGN_P384_SHA384", "EC_SIGN_SECP256K1_SHA256", "HMAC_SHA256", "HMAC_SHA1", "HMAC_SHA384", "HMAC_SHA512", "HMAC_SHA224", "EXTERNAL_SYMMETRIC_ENCRYPTION"]  # noqa: E501
        if google_key_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `google_key_algorithm` ({0}), must be one of {1}"
                .format(google_key_algorithm, allowed_values)
            )

        self._google_key_algorithm = google_key_algorithm

    @property
    def google_public_key_pem(self):
        """Gets the google_public_key_pem of this SignatureInfo.

        The public key for the Google default signing, encoded in PEM format. The signature was created using a private key which may be verified using this public key.

        :return: The google_public_key_pem of this SignatureInfo.
        :rtype: str
        """
        return self._google_public_key_pem

    @google_public_key_pem.setter
    def google_public_key_pem(self, google_public_key_pem):
        """Sets the google_public_key_pem of this SignatureInfo.

        The public key for the Google default signing, encoded in PEM format. The signature was created using a private key which may be verified using this public key.

        :param google_public_key_pem: The google_public_key_pem of this SignatureInfo.
        :type google_public_key_pem: str
        """

        self._google_public_key_pem = google_public_key_pem

    @property
    def serialized_approval_request(self):
        """Gets the serialized_approval_request of this SignatureInfo.

        The ApprovalRequest that is serialized without the SignatureInfo message field. This data is used with the hashing algorithm to generate the digital signature, and it can be used for signature verification.

        :return: The serialized_approval_request of this SignatureInfo.
        :rtype: str
        """
        return self._serialized_approval_request

    @serialized_approval_request.setter
    def serialized_approval_request(self, serialized_approval_request):
        """Sets the serialized_approval_request of this SignatureInfo.

        The ApprovalRequest that is serialized without the SignatureInfo message field. This data is used with the hashing algorithm to generate the digital signature, and it can be used for signature verification.

        :param serialized_approval_request: The serialized_approval_request of this SignatureInfo.
        :type serialized_approval_request: str
        """

        self._serialized_approval_request = serialized_approval_request

    @property
    def signature(self):
        """Gets the signature of this SignatureInfo.

        The digital signature.

        :return: The signature of this SignatureInfo.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this SignatureInfo.

        The digital signature.

        :param signature: The signature of this SignatureInfo.
        :type signature: str
        """

        self._signature = signature
