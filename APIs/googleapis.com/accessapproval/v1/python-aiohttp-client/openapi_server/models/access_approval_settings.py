# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enrolled_service import EnrolledService
from openapi_server import util


class AccessApprovalSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_key_version: str=None, ancestor_has_active_key_version: bool=None, enrolled_ancestor: bool=None, enrolled_services: List[EnrolledService]=None, invalid_key_version: bool=None, name: str=None, notification_emails: List[str]=None, notification_pubsub_topic: str=None, prefer_no_broad_approval_requests: bool=None, preferred_request_expiration_days: int=None):
        """AccessApprovalSettings - a model defined in OpenAPI

        :param active_key_version: The active_key_version of this AccessApprovalSettings.
        :param ancestor_has_active_key_version: The ancestor_has_active_key_version of this AccessApprovalSettings.
        :param enrolled_ancestor: The enrolled_ancestor of this AccessApprovalSettings.
        :param enrolled_services: The enrolled_services of this AccessApprovalSettings.
        :param invalid_key_version: The invalid_key_version of this AccessApprovalSettings.
        :param name: The name of this AccessApprovalSettings.
        :param notification_emails: The notification_emails of this AccessApprovalSettings.
        :param notification_pubsub_topic: The notification_pubsub_topic of this AccessApprovalSettings.
        :param prefer_no_broad_approval_requests: The prefer_no_broad_approval_requests of this AccessApprovalSettings.
        :param preferred_request_expiration_days: The preferred_request_expiration_days of this AccessApprovalSettings.
        """
        self.openapi_types = {
            'active_key_version': str,
            'ancestor_has_active_key_version': bool,
            'enrolled_ancestor': bool,
            'enrolled_services': List[EnrolledService],
            'invalid_key_version': bool,
            'name': str,
            'notification_emails': List[str],
            'notification_pubsub_topic': str,
            'prefer_no_broad_approval_requests': bool,
            'preferred_request_expiration_days': int
        }

        self.attribute_map = {
            'active_key_version': 'activeKeyVersion',
            'ancestor_has_active_key_version': 'ancestorHasActiveKeyVersion',
            'enrolled_ancestor': 'enrolledAncestor',
            'enrolled_services': 'enrolledServices',
            'invalid_key_version': 'invalidKeyVersion',
            'name': 'name',
            'notification_emails': 'notificationEmails',
            'notification_pubsub_topic': 'notificationPubsubTopic',
            'prefer_no_broad_approval_requests': 'preferNoBroadApprovalRequests',
            'preferred_request_expiration_days': 'preferredRequestExpirationDays'
        }

        self._active_key_version = active_key_version
        self._ancestor_has_active_key_version = ancestor_has_active_key_version
        self._enrolled_ancestor = enrolled_ancestor
        self._enrolled_services = enrolled_services
        self._invalid_key_version = invalid_key_version
        self._name = name
        self._notification_emails = notification_emails
        self._notification_pubsub_topic = notification_pubsub_topic
        self._prefer_no_broad_approval_requests = prefer_no_broad_approval_requests
        self._preferred_request_expiration_days = preferred_request_expiration_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessApprovalSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessApprovalSettings of this AccessApprovalSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_key_version(self):
        """Gets the active_key_version of this AccessApprovalSettings.

        The asymmetric crypto key version to use for signing approval requests. Empty active_key_version indicates that a Google-managed key should be used for signing. This property will be ignored if set by an ancestor of this resource, and new non-empty values may not be set.

        :return: The active_key_version of this AccessApprovalSettings.
        :rtype: str
        """
        return self._active_key_version

    @active_key_version.setter
    def active_key_version(self, active_key_version):
        """Sets the active_key_version of this AccessApprovalSettings.

        The asymmetric crypto key version to use for signing approval requests. Empty active_key_version indicates that a Google-managed key should be used for signing. This property will be ignored if set by an ancestor of this resource, and new non-empty values may not be set.

        :param active_key_version: The active_key_version of this AccessApprovalSettings.
        :type active_key_version: str
        """

        self._active_key_version = active_key_version

    @property
    def ancestor_has_active_key_version(self):
        """Gets the ancestor_has_active_key_version of this AccessApprovalSettings.

        Output only. This field is read only (not settable via UpdateAccessApprovalSettings method). If the field is true, that indicates that an ancestor of this Project or Folder has set active_key_version (this field will always be unset for the organization since organizations do not have ancestors).

        :return: The ancestor_has_active_key_version of this AccessApprovalSettings.
        :rtype: bool
        """
        return self._ancestor_has_active_key_version

    @ancestor_has_active_key_version.setter
    def ancestor_has_active_key_version(self, ancestor_has_active_key_version):
        """Sets the ancestor_has_active_key_version of this AccessApprovalSettings.

        Output only. This field is read only (not settable via UpdateAccessApprovalSettings method). If the field is true, that indicates that an ancestor of this Project or Folder has set active_key_version (this field will always be unset for the organization since organizations do not have ancestors).

        :param ancestor_has_active_key_version: The ancestor_has_active_key_version of this AccessApprovalSettings.
        :type ancestor_has_active_key_version: bool
        """

        self._ancestor_has_active_key_version = ancestor_has_active_key_version

    @property
    def enrolled_ancestor(self):
        """Gets the enrolled_ancestor of this AccessApprovalSettings.

        Output only. This field is read only (not settable via UpdateAccessApprovalSettings method). If the field is true, that indicates that at least one service is enrolled for Access Approval in one or more ancestors of the Project or Folder (this field will always be unset for the organization since organizations do not have ancestors).

        :return: The enrolled_ancestor of this AccessApprovalSettings.
        :rtype: bool
        """
        return self._enrolled_ancestor

    @enrolled_ancestor.setter
    def enrolled_ancestor(self, enrolled_ancestor):
        """Sets the enrolled_ancestor of this AccessApprovalSettings.

        Output only. This field is read only (not settable via UpdateAccessApprovalSettings method). If the field is true, that indicates that at least one service is enrolled for Access Approval in one or more ancestors of the Project or Folder (this field will always be unset for the organization since organizations do not have ancestors).

        :param enrolled_ancestor: The enrolled_ancestor of this AccessApprovalSettings.
        :type enrolled_ancestor: bool
        """

        self._enrolled_ancestor = enrolled_ancestor

    @property
    def enrolled_services(self):
        """Gets the enrolled_services of this AccessApprovalSettings.

        A list of Google Cloud Services for which the given resource has Access Approval enrolled. Access requests for the resource given by name against any of these services contained here will be required to have explicit approval. If name refers to an organization, enrollment can be done for individual services. If name refers to a folder or project, enrollment can only be done on an all or nothing basis. If a cloud_product is repeated in this list, the first entry will be honored and all following entries will be discarded. A maximum of 10 enrolled services will be enforced, to be expanded as the set of supported services is expanded.

        :return: The enrolled_services of this AccessApprovalSettings.
        :rtype: List[EnrolledService]
        """
        return self._enrolled_services

    @enrolled_services.setter
    def enrolled_services(self, enrolled_services):
        """Sets the enrolled_services of this AccessApprovalSettings.

        A list of Google Cloud Services for which the given resource has Access Approval enrolled. Access requests for the resource given by name against any of these services contained here will be required to have explicit approval. If name refers to an organization, enrollment can be done for individual services. If name refers to a folder or project, enrollment can only be done on an all or nothing basis. If a cloud_product is repeated in this list, the first entry will be honored and all following entries will be discarded. A maximum of 10 enrolled services will be enforced, to be expanded as the set of supported services is expanded.

        :param enrolled_services: The enrolled_services of this AccessApprovalSettings.
        :type enrolled_services: List[EnrolledService]
        """

        self._enrolled_services = enrolled_services

    @property
    def invalid_key_version(self):
        """Gets the invalid_key_version of this AccessApprovalSettings.

        Output only. This field is read only (not settable via UpdateAccessApprovalSettings method). If the field is true, that indicates that there is some configuration issue with the active_key_version configured at this level in the resource hierarchy (e.g. it doesn't exist or the Access Approval service account doesn't have the correct permissions on it, etc.) This key version is not necessarily the effective key version at this level, as key versions are inherited top-down.

        :return: The invalid_key_version of this AccessApprovalSettings.
        :rtype: bool
        """
        return self._invalid_key_version

    @invalid_key_version.setter
    def invalid_key_version(self, invalid_key_version):
        """Sets the invalid_key_version of this AccessApprovalSettings.

        Output only. This field is read only (not settable via UpdateAccessApprovalSettings method). If the field is true, that indicates that there is some configuration issue with the active_key_version configured at this level in the resource hierarchy (e.g. it doesn't exist or the Access Approval service account doesn't have the correct permissions on it, etc.) This key version is not necessarily the effective key version at this level, as key versions are inherited top-down.

        :param invalid_key_version: The invalid_key_version of this AccessApprovalSettings.
        :type invalid_key_version: bool
        """

        self._invalid_key_version = invalid_key_version

    @property
    def name(self):
        """Gets the name of this AccessApprovalSettings.

        The resource name of the settings. Format is one of: * \"projects/{project}/accessApprovalSettings\" * \"folders/{folder}/accessApprovalSettings\" * \"organizations/{organization}/accessApprovalSettings\"

        :return: The name of this AccessApprovalSettings.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccessApprovalSettings.

        The resource name of the settings. Format is one of: * \"projects/{project}/accessApprovalSettings\" * \"folders/{folder}/accessApprovalSettings\" * \"organizations/{organization}/accessApprovalSettings\"

        :param name: The name of this AccessApprovalSettings.
        :type name: str
        """

        self._name = name

    @property
    def notification_emails(self):
        """Gets the notification_emails of this AccessApprovalSettings.

        A list of email addresses to which notifications relating to approval requests should be sent. Notifications relating to a resource will be sent to all emails in the settings of ancestor resources of that resource. A maximum of 50 email addresses are allowed.

        :return: The notification_emails of this AccessApprovalSettings.
        :rtype: List[str]
        """
        return self._notification_emails

    @notification_emails.setter
    def notification_emails(self, notification_emails):
        """Sets the notification_emails of this AccessApprovalSettings.

        A list of email addresses to which notifications relating to approval requests should be sent. Notifications relating to a resource will be sent to all emails in the settings of ancestor resources of that resource. A maximum of 50 email addresses are allowed.

        :param notification_emails: The notification_emails of this AccessApprovalSettings.
        :type notification_emails: List[str]
        """

        self._notification_emails = notification_emails

    @property
    def notification_pubsub_topic(self):
        """Gets the notification_pubsub_topic of this AccessApprovalSettings.

        Optional. A pubsub topic to which notifications relating to approval requests should be sent.

        :return: The notification_pubsub_topic of this AccessApprovalSettings.
        :rtype: str
        """
        return self._notification_pubsub_topic

    @notification_pubsub_topic.setter
    def notification_pubsub_topic(self, notification_pubsub_topic):
        """Sets the notification_pubsub_topic of this AccessApprovalSettings.

        Optional. A pubsub topic to which notifications relating to approval requests should be sent.

        :param notification_pubsub_topic: The notification_pubsub_topic of this AccessApprovalSettings.
        :type notification_pubsub_topic: str
        """

        self._notification_pubsub_topic = notification_pubsub_topic

    @property
    def prefer_no_broad_approval_requests(self):
        """Gets the prefer_no_broad_approval_requests of this AccessApprovalSettings.

        This preference is communicated to Google personnel when sending an approval request but can be overridden if necessary.

        :return: The prefer_no_broad_approval_requests of this AccessApprovalSettings.
        :rtype: bool
        """
        return self._prefer_no_broad_approval_requests

    @prefer_no_broad_approval_requests.setter
    def prefer_no_broad_approval_requests(self, prefer_no_broad_approval_requests):
        """Sets the prefer_no_broad_approval_requests of this AccessApprovalSettings.

        This preference is communicated to Google personnel when sending an approval request but can be overridden if necessary.

        :param prefer_no_broad_approval_requests: The prefer_no_broad_approval_requests of this AccessApprovalSettings.
        :type prefer_no_broad_approval_requests: bool
        """

        self._prefer_no_broad_approval_requests = prefer_no_broad_approval_requests

    @property
    def preferred_request_expiration_days(self):
        """Gets the preferred_request_expiration_days of this AccessApprovalSettings.

        This preference is shared with Google personnel, but can be overridden if said personnel deems necessary. The approver ultimately can set the expiration at approval time.

        :return: The preferred_request_expiration_days of this AccessApprovalSettings.
        :rtype: int
        """
        return self._preferred_request_expiration_days

    @preferred_request_expiration_days.setter
    def preferred_request_expiration_days(self, preferred_request_expiration_days):
        """Sets the preferred_request_expiration_days of this AccessApprovalSettings.

        This preference is shared with Google personnel, but can be overridden if said personnel deems necessary. The approver ultimately can set the expiration at approval time.

        :param preferred_request_expiration_days: The preferred_request_expiration_days of this AccessApprovalSettings.
        :type preferred_request_expiration_days: int
        """

        self._preferred_request_expiration_days = preferred_request_expiration_days
