# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DismissDecision(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dismiss_time: str=None, implicit: bool=None):
        """DismissDecision - a model defined in OpenAPI

        :param dismiss_time: The dismiss_time of this DismissDecision.
        :param implicit: The implicit of this DismissDecision.
        """
        self.openapi_types = {
            'dismiss_time': str,
            'implicit': bool
        }

        self.attribute_map = {
            'dismiss_time': 'dismissTime',
            'implicit': 'implicit'
        }

        self._dismiss_time = dismiss_time
        self._implicit = implicit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DismissDecision':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DismissDecision of this DismissDecision.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dismiss_time(self):
        """Gets the dismiss_time of this DismissDecision.

        The time at which the approval request was dismissed.

        :return: The dismiss_time of this DismissDecision.
        :rtype: str
        """
        return self._dismiss_time

    @dismiss_time.setter
    def dismiss_time(self, dismiss_time):
        """Sets the dismiss_time of this DismissDecision.

        The time at which the approval request was dismissed.

        :param dismiss_time: The dismiss_time of this DismissDecision.
        :type dismiss_time: str
        """

        self._dismiss_time = dismiss_time

    @property
    def implicit(self):
        """Gets the implicit of this DismissDecision.

        This field will be true if the ApprovalRequest was implicitly dismissed due to inaction by the access approval approvers (the request is not acted on by the approvers before the exiration time).

        :return: The implicit of this DismissDecision.
        :rtype: bool
        """
        return self._implicit

    @implicit.setter
    def implicit(self, implicit):
        """Sets the implicit of this DismissDecision.

        This field will be true if the ApprovalRequest was implicitly dismissed due to inaction by the access approval approvers (the request is not acted on by the approvers before the exiration time).

        :param implicit: The implicit of this DismissDecision.
        :type implicit: bool
        """

        self._implicit = implicit
