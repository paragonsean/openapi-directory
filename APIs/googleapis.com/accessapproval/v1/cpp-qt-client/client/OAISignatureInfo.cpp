/**
 * Access Approval API
 * An API for controlling access to data by Google personnel.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISignatureInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISignatureInfo::OAISignatureInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISignatureInfo::OAISignatureInfo() {
    this->initializeModel();
}

OAISignatureInfo::~OAISignatureInfo() {}

void OAISignatureInfo::initializeModel() {

    m_customer_kms_key_version_isSet = false;
    m_customer_kms_key_version_isValid = false;

    m_google_key_algorithm_isSet = false;
    m_google_key_algorithm_isValid = false;

    m_google_public_key_pem_isSet = false;
    m_google_public_key_pem_isValid = false;

    m_serialized_approval_request_isSet = false;
    m_serialized_approval_request_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;
}

void OAISignatureInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISignatureInfo::fromJsonObject(QJsonObject json) {

    m_customer_kms_key_version_isValid = ::OpenAPI::fromJsonValue(m_customer_kms_key_version, json[QString("customerKmsKeyVersion")]);
    m_customer_kms_key_version_isSet = !json[QString("customerKmsKeyVersion")].isNull() && m_customer_kms_key_version_isValid;

    m_google_key_algorithm_isValid = ::OpenAPI::fromJsonValue(m_google_key_algorithm, json[QString("googleKeyAlgorithm")]);
    m_google_key_algorithm_isSet = !json[QString("googleKeyAlgorithm")].isNull() && m_google_key_algorithm_isValid;

    m_google_public_key_pem_isValid = ::OpenAPI::fromJsonValue(m_google_public_key_pem, json[QString("googlePublicKeyPem")]);
    m_google_public_key_pem_isSet = !json[QString("googlePublicKeyPem")].isNull() && m_google_public_key_pem_isValid;

    m_serialized_approval_request_isValid = ::OpenAPI::fromJsonValue(m_serialized_approval_request, json[QString("serializedApprovalRequest")]);
    m_serialized_approval_request_isSet = !json[QString("serializedApprovalRequest")].isNull() && m_serialized_approval_request_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;
}

QString OAISignatureInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISignatureInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_kms_key_version_isSet) {
        obj.insert(QString("customerKmsKeyVersion"), ::OpenAPI::toJsonValue(m_customer_kms_key_version));
    }
    if (m_google_key_algorithm_isSet) {
        obj.insert(QString("googleKeyAlgorithm"), ::OpenAPI::toJsonValue(m_google_key_algorithm));
    }
    if (m_google_public_key_pem_isSet) {
        obj.insert(QString("googlePublicKeyPem"), ::OpenAPI::toJsonValue(m_google_public_key_pem));
    }
    if (m_serialized_approval_request_isSet) {
        obj.insert(QString("serializedApprovalRequest"), ::OpenAPI::toJsonValue(m_serialized_approval_request));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    return obj;
}

QString OAISignatureInfo::getCustomerKmsKeyVersion() const {
    return m_customer_kms_key_version;
}
void OAISignatureInfo::setCustomerKmsKeyVersion(const QString &customer_kms_key_version) {
    m_customer_kms_key_version = customer_kms_key_version;
    m_customer_kms_key_version_isSet = true;
}

bool OAISignatureInfo::is_customer_kms_key_version_Set() const{
    return m_customer_kms_key_version_isSet;
}

bool OAISignatureInfo::is_customer_kms_key_version_Valid() const{
    return m_customer_kms_key_version_isValid;
}

QString OAISignatureInfo::getGoogleKeyAlgorithm() const {
    return m_google_key_algorithm;
}
void OAISignatureInfo::setGoogleKeyAlgorithm(const QString &google_key_algorithm) {
    m_google_key_algorithm = google_key_algorithm;
    m_google_key_algorithm_isSet = true;
}

bool OAISignatureInfo::is_google_key_algorithm_Set() const{
    return m_google_key_algorithm_isSet;
}

bool OAISignatureInfo::is_google_key_algorithm_Valid() const{
    return m_google_key_algorithm_isValid;
}

QString OAISignatureInfo::getGooglePublicKeyPem() const {
    return m_google_public_key_pem;
}
void OAISignatureInfo::setGooglePublicKeyPem(const QString &google_public_key_pem) {
    m_google_public_key_pem = google_public_key_pem;
    m_google_public_key_pem_isSet = true;
}

bool OAISignatureInfo::is_google_public_key_pem_Set() const{
    return m_google_public_key_pem_isSet;
}

bool OAISignatureInfo::is_google_public_key_pem_Valid() const{
    return m_google_public_key_pem_isValid;
}

QByteArray OAISignatureInfo::getSerializedApprovalRequest() const {
    return m_serialized_approval_request;
}
void OAISignatureInfo::setSerializedApprovalRequest(const QByteArray &serialized_approval_request) {
    m_serialized_approval_request = serialized_approval_request;
    m_serialized_approval_request_isSet = true;
}

bool OAISignatureInfo::is_serialized_approval_request_Set() const{
    return m_serialized_approval_request_isSet;
}

bool OAISignatureInfo::is_serialized_approval_request_Valid() const{
    return m_serialized_approval_request_isValid;
}

QByteArray OAISignatureInfo::getSignature() const {
    return m_signature;
}
void OAISignatureInfo::setSignature(const QByteArray &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAISignatureInfo::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAISignatureInfo::is_signature_Valid() const{
    return m_signature_isValid;
}

bool OAISignatureInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_kms_key_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_key_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_public_key_pem_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serialized_approval_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISignatureInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
