/**
 * Access Approval API
 * An API for controlling access to data by Google personnel.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessApprovalSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessApprovalSettings::OAIAccessApprovalSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessApprovalSettings::OAIAccessApprovalSettings() {
    this->initializeModel();
}

OAIAccessApprovalSettings::~OAIAccessApprovalSettings() {}

void OAIAccessApprovalSettings::initializeModel() {

    m_active_key_version_isSet = false;
    m_active_key_version_isValid = false;

    m_ancestor_has_active_key_version_isSet = false;
    m_ancestor_has_active_key_version_isValid = false;

    m_enrolled_ancestor_isSet = false;
    m_enrolled_ancestor_isValid = false;

    m_enrolled_services_isSet = false;
    m_enrolled_services_isValid = false;

    m_invalid_key_version_isSet = false;
    m_invalid_key_version_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notification_emails_isSet = false;
    m_notification_emails_isValid = false;

    m_notification_pubsub_topic_isSet = false;
    m_notification_pubsub_topic_isValid = false;

    m_prefer_no_broad_approval_requests_isSet = false;
    m_prefer_no_broad_approval_requests_isValid = false;

    m_preferred_request_expiration_days_isSet = false;
    m_preferred_request_expiration_days_isValid = false;
}

void OAIAccessApprovalSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessApprovalSettings::fromJsonObject(QJsonObject json) {

    m_active_key_version_isValid = ::OpenAPI::fromJsonValue(m_active_key_version, json[QString("activeKeyVersion")]);
    m_active_key_version_isSet = !json[QString("activeKeyVersion")].isNull() && m_active_key_version_isValid;

    m_ancestor_has_active_key_version_isValid = ::OpenAPI::fromJsonValue(m_ancestor_has_active_key_version, json[QString("ancestorHasActiveKeyVersion")]);
    m_ancestor_has_active_key_version_isSet = !json[QString("ancestorHasActiveKeyVersion")].isNull() && m_ancestor_has_active_key_version_isValid;

    m_enrolled_ancestor_isValid = ::OpenAPI::fromJsonValue(m_enrolled_ancestor, json[QString("enrolledAncestor")]);
    m_enrolled_ancestor_isSet = !json[QString("enrolledAncestor")].isNull() && m_enrolled_ancestor_isValid;

    m_enrolled_services_isValid = ::OpenAPI::fromJsonValue(m_enrolled_services, json[QString("enrolledServices")]);
    m_enrolled_services_isSet = !json[QString("enrolledServices")].isNull() && m_enrolled_services_isValid;

    m_invalid_key_version_isValid = ::OpenAPI::fromJsonValue(m_invalid_key_version, json[QString("invalidKeyVersion")]);
    m_invalid_key_version_isSet = !json[QString("invalidKeyVersion")].isNull() && m_invalid_key_version_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notification_emails_isValid = ::OpenAPI::fromJsonValue(m_notification_emails, json[QString("notificationEmails")]);
    m_notification_emails_isSet = !json[QString("notificationEmails")].isNull() && m_notification_emails_isValid;

    m_notification_pubsub_topic_isValid = ::OpenAPI::fromJsonValue(m_notification_pubsub_topic, json[QString("notificationPubsubTopic")]);
    m_notification_pubsub_topic_isSet = !json[QString("notificationPubsubTopic")].isNull() && m_notification_pubsub_topic_isValid;

    m_prefer_no_broad_approval_requests_isValid = ::OpenAPI::fromJsonValue(m_prefer_no_broad_approval_requests, json[QString("preferNoBroadApprovalRequests")]);
    m_prefer_no_broad_approval_requests_isSet = !json[QString("preferNoBroadApprovalRequests")].isNull() && m_prefer_no_broad_approval_requests_isValid;

    m_preferred_request_expiration_days_isValid = ::OpenAPI::fromJsonValue(m_preferred_request_expiration_days, json[QString("preferredRequestExpirationDays")]);
    m_preferred_request_expiration_days_isSet = !json[QString("preferredRequestExpirationDays")].isNull() && m_preferred_request_expiration_days_isValid;
}

QString OAIAccessApprovalSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessApprovalSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_active_key_version_isSet) {
        obj.insert(QString("activeKeyVersion"), ::OpenAPI::toJsonValue(m_active_key_version));
    }
    if (m_ancestor_has_active_key_version_isSet) {
        obj.insert(QString("ancestorHasActiveKeyVersion"), ::OpenAPI::toJsonValue(m_ancestor_has_active_key_version));
    }
    if (m_enrolled_ancestor_isSet) {
        obj.insert(QString("enrolledAncestor"), ::OpenAPI::toJsonValue(m_enrolled_ancestor));
    }
    if (m_enrolled_services.size() > 0) {
        obj.insert(QString("enrolledServices"), ::OpenAPI::toJsonValue(m_enrolled_services));
    }
    if (m_invalid_key_version_isSet) {
        obj.insert(QString("invalidKeyVersion"), ::OpenAPI::toJsonValue(m_invalid_key_version));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notification_emails.size() > 0) {
        obj.insert(QString("notificationEmails"), ::OpenAPI::toJsonValue(m_notification_emails));
    }
    if (m_notification_pubsub_topic_isSet) {
        obj.insert(QString("notificationPubsubTopic"), ::OpenAPI::toJsonValue(m_notification_pubsub_topic));
    }
    if (m_prefer_no_broad_approval_requests_isSet) {
        obj.insert(QString("preferNoBroadApprovalRequests"), ::OpenAPI::toJsonValue(m_prefer_no_broad_approval_requests));
    }
    if (m_preferred_request_expiration_days_isSet) {
        obj.insert(QString("preferredRequestExpirationDays"), ::OpenAPI::toJsonValue(m_preferred_request_expiration_days));
    }
    return obj;
}

QString OAIAccessApprovalSettings::getActiveKeyVersion() const {
    return m_active_key_version;
}
void OAIAccessApprovalSettings::setActiveKeyVersion(const QString &active_key_version) {
    m_active_key_version = active_key_version;
    m_active_key_version_isSet = true;
}

bool OAIAccessApprovalSettings::is_active_key_version_Set() const{
    return m_active_key_version_isSet;
}

bool OAIAccessApprovalSettings::is_active_key_version_Valid() const{
    return m_active_key_version_isValid;
}

bool OAIAccessApprovalSettings::isAncestorHasActiveKeyVersion() const {
    return m_ancestor_has_active_key_version;
}
void OAIAccessApprovalSettings::setAncestorHasActiveKeyVersion(const bool &ancestor_has_active_key_version) {
    m_ancestor_has_active_key_version = ancestor_has_active_key_version;
    m_ancestor_has_active_key_version_isSet = true;
}

bool OAIAccessApprovalSettings::is_ancestor_has_active_key_version_Set() const{
    return m_ancestor_has_active_key_version_isSet;
}

bool OAIAccessApprovalSettings::is_ancestor_has_active_key_version_Valid() const{
    return m_ancestor_has_active_key_version_isValid;
}

bool OAIAccessApprovalSettings::isEnrolledAncestor() const {
    return m_enrolled_ancestor;
}
void OAIAccessApprovalSettings::setEnrolledAncestor(const bool &enrolled_ancestor) {
    m_enrolled_ancestor = enrolled_ancestor;
    m_enrolled_ancestor_isSet = true;
}

bool OAIAccessApprovalSettings::is_enrolled_ancestor_Set() const{
    return m_enrolled_ancestor_isSet;
}

bool OAIAccessApprovalSettings::is_enrolled_ancestor_Valid() const{
    return m_enrolled_ancestor_isValid;
}

QList<OAIEnrolledService> OAIAccessApprovalSettings::getEnrolledServices() const {
    return m_enrolled_services;
}
void OAIAccessApprovalSettings::setEnrolledServices(const QList<OAIEnrolledService> &enrolled_services) {
    m_enrolled_services = enrolled_services;
    m_enrolled_services_isSet = true;
}

bool OAIAccessApprovalSettings::is_enrolled_services_Set() const{
    return m_enrolled_services_isSet;
}

bool OAIAccessApprovalSettings::is_enrolled_services_Valid() const{
    return m_enrolled_services_isValid;
}

bool OAIAccessApprovalSettings::isInvalidKeyVersion() const {
    return m_invalid_key_version;
}
void OAIAccessApprovalSettings::setInvalidKeyVersion(const bool &invalid_key_version) {
    m_invalid_key_version = invalid_key_version;
    m_invalid_key_version_isSet = true;
}

bool OAIAccessApprovalSettings::is_invalid_key_version_Set() const{
    return m_invalid_key_version_isSet;
}

bool OAIAccessApprovalSettings::is_invalid_key_version_Valid() const{
    return m_invalid_key_version_isValid;
}

QString OAIAccessApprovalSettings::getName() const {
    return m_name;
}
void OAIAccessApprovalSettings::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccessApprovalSettings::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccessApprovalSettings::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIAccessApprovalSettings::getNotificationEmails() const {
    return m_notification_emails;
}
void OAIAccessApprovalSettings::setNotificationEmails(const QList<QString> &notification_emails) {
    m_notification_emails = notification_emails;
    m_notification_emails_isSet = true;
}

bool OAIAccessApprovalSettings::is_notification_emails_Set() const{
    return m_notification_emails_isSet;
}

bool OAIAccessApprovalSettings::is_notification_emails_Valid() const{
    return m_notification_emails_isValid;
}

QString OAIAccessApprovalSettings::getNotificationPubsubTopic() const {
    return m_notification_pubsub_topic;
}
void OAIAccessApprovalSettings::setNotificationPubsubTopic(const QString &notification_pubsub_topic) {
    m_notification_pubsub_topic = notification_pubsub_topic;
    m_notification_pubsub_topic_isSet = true;
}

bool OAIAccessApprovalSettings::is_notification_pubsub_topic_Set() const{
    return m_notification_pubsub_topic_isSet;
}

bool OAIAccessApprovalSettings::is_notification_pubsub_topic_Valid() const{
    return m_notification_pubsub_topic_isValid;
}

bool OAIAccessApprovalSettings::isPreferNoBroadApprovalRequests() const {
    return m_prefer_no_broad_approval_requests;
}
void OAIAccessApprovalSettings::setPreferNoBroadApprovalRequests(const bool &prefer_no_broad_approval_requests) {
    m_prefer_no_broad_approval_requests = prefer_no_broad_approval_requests;
    m_prefer_no_broad_approval_requests_isSet = true;
}

bool OAIAccessApprovalSettings::is_prefer_no_broad_approval_requests_Set() const{
    return m_prefer_no_broad_approval_requests_isSet;
}

bool OAIAccessApprovalSettings::is_prefer_no_broad_approval_requests_Valid() const{
    return m_prefer_no_broad_approval_requests_isValid;
}

qint32 OAIAccessApprovalSettings::getPreferredRequestExpirationDays() const {
    return m_preferred_request_expiration_days;
}
void OAIAccessApprovalSettings::setPreferredRequestExpirationDays(const qint32 &preferred_request_expiration_days) {
    m_preferred_request_expiration_days = preferred_request_expiration_days;
    m_preferred_request_expiration_days_isSet = true;
}

bool OAIAccessApprovalSettings::is_preferred_request_expiration_days_Set() const{
    return m_preferred_request_expiration_days_isSet;
}

bool OAIAccessApprovalSettings::is_preferred_request_expiration_days_Valid() const{
    return m_preferred_request_expiration_days_isValid;
}

bool OAIAccessApprovalSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_key_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ancestor_has_active_key_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enrolled_ancestor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enrolled_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_key_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_pubsub_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefer_no_broad_approval_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_request_expiration_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessApprovalSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
