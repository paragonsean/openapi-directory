/**
 * Access Approval API
 * An API for controlling access to data by Google personnel.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessLocations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessLocations::OAIAccessLocations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessLocations::OAIAccessLocations() {
    this->initializeModel();
}

OAIAccessLocations::~OAIAccessLocations() {}

void OAIAccessLocations::initializeModel() {

    m_principal_office_country_isSet = false;
    m_principal_office_country_isValid = false;

    m_principal_physical_location_country_isSet = false;
    m_principal_physical_location_country_isValid = false;
}

void OAIAccessLocations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessLocations::fromJsonObject(QJsonObject json) {

    m_principal_office_country_isValid = ::OpenAPI::fromJsonValue(m_principal_office_country, json[QString("principalOfficeCountry")]);
    m_principal_office_country_isSet = !json[QString("principalOfficeCountry")].isNull() && m_principal_office_country_isValid;

    m_principal_physical_location_country_isValid = ::OpenAPI::fromJsonValue(m_principal_physical_location_country, json[QString("principalPhysicalLocationCountry")]);
    m_principal_physical_location_country_isSet = !json[QString("principalPhysicalLocationCountry")].isNull() && m_principal_physical_location_country_isValid;
}

QString OAIAccessLocations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessLocations::asJsonObject() const {
    QJsonObject obj;
    if (m_principal_office_country_isSet) {
        obj.insert(QString("principalOfficeCountry"), ::OpenAPI::toJsonValue(m_principal_office_country));
    }
    if (m_principal_physical_location_country_isSet) {
        obj.insert(QString("principalPhysicalLocationCountry"), ::OpenAPI::toJsonValue(m_principal_physical_location_country));
    }
    return obj;
}

QString OAIAccessLocations::getPrincipalOfficeCountry() const {
    return m_principal_office_country;
}
void OAIAccessLocations::setPrincipalOfficeCountry(const QString &principal_office_country) {
    m_principal_office_country = principal_office_country;
    m_principal_office_country_isSet = true;
}

bool OAIAccessLocations::is_principal_office_country_Set() const{
    return m_principal_office_country_isSet;
}

bool OAIAccessLocations::is_principal_office_country_Valid() const{
    return m_principal_office_country_isValid;
}

QString OAIAccessLocations::getPrincipalPhysicalLocationCountry() const {
    return m_principal_physical_location_country;
}
void OAIAccessLocations::setPrincipalPhysicalLocationCountry(const QString &principal_physical_location_country) {
    m_principal_physical_location_country = principal_physical_location_country;
    m_principal_physical_location_country_isSet = true;
}

bool OAIAccessLocations::is_principal_physical_location_country_Set() const{
    return m_principal_physical_location_country_isSet;
}

bool OAIAccessLocations::is_principal_physical_location_country_Valid() const{
    return m_principal_physical_location_country_isValid;
}

bool OAIAccessLocations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_principal_office_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_physical_location_country_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessLocations::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
