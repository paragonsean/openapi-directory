/**
 * Access Approval API
 * An API for controlling access to data by Google personnel.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApprovalRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApprovalRequest::OAIApprovalRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApprovalRequest::OAIApprovalRequest() {
    this->initializeModel();
}

OAIApprovalRequest::~OAIApprovalRequest() {}

void OAIApprovalRequest::initializeModel() {

    m_approve_isSet = false;
    m_approve_isValid = false;

    m_dismiss_isSet = false;
    m_dismiss_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_request_time_isSet = false;
    m_request_time_isValid = false;

    m_requested_duration_isSet = false;
    m_requested_duration_isValid = false;

    m_requested_expiration_isSet = false;
    m_requested_expiration_isValid = false;

    m_requested_locations_isSet = false;
    m_requested_locations_isValid = false;

    m_requested_reason_isSet = false;
    m_requested_reason_isValid = false;

    m_requested_resource_name_isSet = false;
    m_requested_resource_name_isValid = false;

    m_requested_resource_properties_isSet = false;
    m_requested_resource_properties_isValid = false;
}

void OAIApprovalRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApprovalRequest::fromJsonObject(QJsonObject json) {

    m_approve_isValid = ::OpenAPI::fromJsonValue(m_approve, json[QString("approve")]);
    m_approve_isSet = !json[QString("approve")].isNull() && m_approve_isValid;

    m_dismiss_isValid = ::OpenAPI::fromJsonValue(m_dismiss, json[QString("dismiss")]);
    m_dismiss_isSet = !json[QString("dismiss")].isNull() && m_dismiss_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_request_time_isValid = ::OpenAPI::fromJsonValue(m_request_time, json[QString("requestTime")]);
    m_request_time_isSet = !json[QString("requestTime")].isNull() && m_request_time_isValid;

    m_requested_duration_isValid = ::OpenAPI::fromJsonValue(m_requested_duration, json[QString("requestedDuration")]);
    m_requested_duration_isSet = !json[QString("requestedDuration")].isNull() && m_requested_duration_isValid;

    m_requested_expiration_isValid = ::OpenAPI::fromJsonValue(m_requested_expiration, json[QString("requestedExpiration")]);
    m_requested_expiration_isSet = !json[QString("requestedExpiration")].isNull() && m_requested_expiration_isValid;

    m_requested_locations_isValid = ::OpenAPI::fromJsonValue(m_requested_locations, json[QString("requestedLocations")]);
    m_requested_locations_isSet = !json[QString("requestedLocations")].isNull() && m_requested_locations_isValid;

    m_requested_reason_isValid = ::OpenAPI::fromJsonValue(m_requested_reason, json[QString("requestedReason")]);
    m_requested_reason_isSet = !json[QString("requestedReason")].isNull() && m_requested_reason_isValid;

    m_requested_resource_name_isValid = ::OpenAPI::fromJsonValue(m_requested_resource_name, json[QString("requestedResourceName")]);
    m_requested_resource_name_isSet = !json[QString("requestedResourceName")].isNull() && m_requested_resource_name_isValid;

    m_requested_resource_properties_isValid = ::OpenAPI::fromJsonValue(m_requested_resource_properties, json[QString("requestedResourceProperties")]);
    m_requested_resource_properties_isSet = !json[QString("requestedResourceProperties")].isNull() && m_requested_resource_properties_isValid;
}

QString OAIApprovalRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApprovalRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_approve.isSet()) {
        obj.insert(QString("approve"), ::OpenAPI::toJsonValue(m_approve));
    }
    if (m_dismiss.isSet()) {
        obj.insert(QString("dismiss"), ::OpenAPI::toJsonValue(m_dismiss));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_request_time_isSet) {
        obj.insert(QString("requestTime"), ::OpenAPI::toJsonValue(m_request_time));
    }
    if (m_requested_duration_isSet) {
        obj.insert(QString("requestedDuration"), ::OpenAPI::toJsonValue(m_requested_duration));
    }
    if (m_requested_expiration_isSet) {
        obj.insert(QString("requestedExpiration"), ::OpenAPI::toJsonValue(m_requested_expiration));
    }
    if (m_requested_locations.isSet()) {
        obj.insert(QString("requestedLocations"), ::OpenAPI::toJsonValue(m_requested_locations));
    }
    if (m_requested_reason.isSet()) {
        obj.insert(QString("requestedReason"), ::OpenAPI::toJsonValue(m_requested_reason));
    }
    if (m_requested_resource_name_isSet) {
        obj.insert(QString("requestedResourceName"), ::OpenAPI::toJsonValue(m_requested_resource_name));
    }
    if (m_requested_resource_properties.isSet()) {
        obj.insert(QString("requestedResourceProperties"), ::OpenAPI::toJsonValue(m_requested_resource_properties));
    }
    return obj;
}

OAIApproveDecision OAIApprovalRequest::getApprove() const {
    return m_approve;
}
void OAIApprovalRequest::setApprove(const OAIApproveDecision &approve) {
    m_approve = approve;
    m_approve_isSet = true;
}

bool OAIApprovalRequest::is_approve_Set() const{
    return m_approve_isSet;
}

bool OAIApprovalRequest::is_approve_Valid() const{
    return m_approve_isValid;
}

OAIDismissDecision OAIApprovalRequest::getDismiss() const {
    return m_dismiss;
}
void OAIApprovalRequest::setDismiss(const OAIDismissDecision &dismiss) {
    m_dismiss = dismiss;
    m_dismiss_isSet = true;
}

bool OAIApprovalRequest::is_dismiss_Set() const{
    return m_dismiss_isSet;
}

bool OAIApprovalRequest::is_dismiss_Valid() const{
    return m_dismiss_isValid;
}

QString OAIApprovalRequest::getName() const {
    return m_name;
}
void OAIApprovalRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApprovalRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApprovalRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApprovalRequest::getRequestTime() const {
    return m_request_time;
}
void OAIApprovalRequest::setRequestTime(const QString &request_time) {
    m_request_time = request_time;
    m_request_time_isSet = true;
}

bool OAIApprovalRequest::is_request_time_Set() const{
    return m_request_time_isSet;
}

bool OAIApprovalRequest::is_request_time_Valid() const{
    return m_request_time_isValid;
}

QString OAIApprovalRequest::getRequestedDuration() const {
    return m_requested_duration;
}
void OAIApprovalRequest::setRequestedDuration(const QString &requested_duration) {
    m_requested_duration = requested_duration;
    m_requested_duration_isSet = true;
}

bool OAIApprovalRequest::is_requested_duration_Set() const{
    return m_requested_duration_isSet;
}

bool OAIApprovalRequest::is_requested_duration_Valid() const{
    return m_requested_duration_isValid;
}

QString OAIApprovalRequest::getRequestedExpiration() const {
    return m_requested_expiration;
}
void OAIApprovalRequest::setRequestedExpiration(const QString &requested_expiration) {
    m_requested_expiration = requested_expiration;
    m_requested_expiration_isSet = true;
}

bool OAIApprovalRequest::is_requested_expiration_Set() const{
    return m_requested_expiration_isSet;
}

bool OAIApprovalRequest::is_requested_expiration_Valid() const{
    return m_requested_expiration_isValid;
}

OAIAccessLocations OAIApprovalRequest::getRequestedLocations() const {
    return m_requested_locations;
}
void OAIApprovalRequest::setRequestedLocations(const OAIAccessLocations &requested_locations) {
    m_requested_locations = requested_locations;
    m_requested_locations_isSet = true;
}

bool OAIApprovalRequest::is_requested_locations_Set() const{
    return m_requested_locations_isSet;
}

bool OAIApprovalRequest::is_requested_locations_Valid() const{
    return m_requested_locations_isValid;
}

OAIAccessReason OAIApprovalRequest::getRequestedReason() const {
    return m_requested_reason;
}
void OAIApprovalRequest::setRequestedReason(const OAIAccessReason &requested_reason) {
    m_requested_reason = requested_reason;
    m_requested_reason_isSet = true;
}

bool OAIApprovalRequest::is_requested_reason_Set() const{
    return m_requested_reason_isSet;
}

bool OAIApprovalRequest::is_requested_reason_Valid() const{
    return m_requested_reason_isValid;
}

QString OAIApprovalRequest::getRequestedResourceName() const {
    return m_requested_resource_name;
}
void OAIApprovalRequest::setRequestedResourceName(const QString &requested_resource_name) {
    m_requested_resource_name = requested_resource_name;
    m_requested_resource_name_isSet = true;
}

bool OAIApprovalRequest::is_requested_resource_name_Set() const{
    return m_requested_resource_name_isSet;
}

bool OAIApprovalRequest::is_requested_resource_name_Valid() const{
    return m_requested_resource_name_isValid;
}

OAIResourceProperties OAIApprovalRequest::getRequestedResourceProperties() const {
    return m_requested_resource_properties;
}
void OAIApprovalRequest::setRequestedResourceProperties(const OAIResourceProperties &requested_resource_properties) {
    m_requested_resource_properties = requested_resource_properties;
    m_requested_resource_properties_isSet = true;
}

bool OAIApprovalRequest::is_requested_resource_properties_Set() const{
    return m_requested_resource_properties_isSet;
}

bool OAIApprovalRequest::is_requested_resource_properties_Valid() const{
    return m_requested_resource_properties_isValid;
}

bool OAIApprovalRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approve.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dismiss.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_locations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_resource_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApprovalRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
