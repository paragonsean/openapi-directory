/**
 * Access Approval API
 * An API for controlling access to data by Google personnel.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDismissDecision.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDismissDecision::OAIDismissDecision(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDismissDecision::OAIDismissDecision() {
    this->initializeModel();
}

OAIDismissDecision::~OAIDismissDecision() {}

void OAIDismissDecision::initializeModel() {

    m_dismiss_time_isSet = false;
    m_dismiss_time_isValid = false;

    m_implicit_isSet = false;
    m_implicit_isValid = false;
}

void OAIDismissDecision::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDismissDecision::fromJsonObject(QJsonObject json) {

    m_dismiss_time_isValid = ::OpenAPI::fromJsonValue(m_dismiss_time, json[QString("dismissTime")]);
    m_dismiss_time_isSet = !json[QString("dismissTime")].isNull() && m_dismiss_time_isValid;

    m_implicit_isValid = ::OpenAPI::fromJsonValue(m_implicit, json[QString("implicit")]);
    m_implicit_isSet = !json[QString("implicit")].isNull() && m_implicit_isValid;
}

QString OAIDismissDecision::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDismissDecision::asJsonObject() const {
    QJsonObject obj;
    if (m_dismiss_time_isSet) {
        obj.insert(QString("dismissTime"), ::OpenAPI::toJsonValue(m_dismiss_time));
    }
    if (m_implicit_isSet) {
        obj.insert(QString("implicit"), ::OpenAPI::toJsonValue(m_implicit));
    }
    return obj;
}

QString OAIDismissDecision::getDismissTime() const {
    return m_dismiss_time;
}
void OAIDismissDecision::setDismissTime(const QString &dismiss_time) {
    m_dismiss_time = dismiss_time;
    m_dismiss_time_isSet = true;
}

bool OAIDismissDecision::is_dismiss_time_Set() const{
    return m_dismiss_time_isSet;
}

bool OAIDismissDecision::is_dismiss_time_Valid() const{
    return m_dismiss_time_isValid;
}

bool OAIDismissDecision::isImplicit() const {
    return m_implicit;
}
void OAIDismissDecision::setImplicit(const bool &implicit) {
    m_implicit = implicit;
    m_implicit_isSet = true;
}

bool OAIDismissDecision::is_implicit_Set() const{
    return m_implicit_isSet;
}

bool OAIDismissDecision::is_implicit_Valid() const{
    return m_implicit_isValid;
}

bool OAIDismissDecision::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dismiss_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_implicit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDismissDecision::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
