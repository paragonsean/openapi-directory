/**
 * Access Approval API
 * An API for controlling access to data by Google personnel.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApproveDecision.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApproveDecision::OAIApproveDecision(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApproveDecision::OAIApproveDecision() {
    this->initializeModel();
}

OAIApproveDecision::~OAIApproveDecision() {}

void OAIApproveDecision::initializeModel() {

    m_approve_time_isSet = false;
    m_approve_time_isValid = false;

    m_auto_approved_isSet = false;
    m_auto_approved_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_invalidate_time_isSet = false;
    m_invalidate_time_isValid = false;

    m_signature_info_isSet = false;
    m_signature_info_isValid = false;
}

void OAIApproveDecision::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApproveDecision::fromJsonObject(QJsonObject json) {

    m_approve_time_isValid = ::OpenAPI::fromJsonValue(m_approve_time, json[QString("approveTime")]);
    m_approve_time_isSet = !json[QString("approveTime")].isNull() && m_approve_time_isValid;

    m_auto_approved_isValid = ::OpenAPI::fromJsonValue(m_auto_approved, json[QString("autoApproved")]);
    m_auto_approved_isSet = !json[QString("autoApproved")].isNull() && m_auto_approved_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_invalidate_time_isValid = ::OpenAPI::fromJsonValue(m_invalidate_time, json[QString("invalidateTime")]);
    m_invalidate_time_isSet = !json[QString("invalidateTime")].isNull() && m_invalidate_time_isValid;

    m_signature_info_isValid = ::OpenAPI::fromJsonValue(m_signature_info, json[QString("signatureInfo")]);
    m_signature_info_isSet = !json[QString("signatureInfo")].isNull() && m_signature_info_isValid;
}

QString OAIApproveDecision::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApproveDecision::asJsonObject() const {
    QJsonObject obj;
    if (m_approve_time_isSet) {
        obj.insert(QString("approveTime"), ::OpenAPI::toJsonValue(m_approve_time));
    }
    if (m_auto_approved_isSet) {
        obj.insert(QString("autoApproved"), ::OpenAPI::toJsonValue(m_auto_approved));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_invalidate_time_isSet) {
        obj.insert(QString("invalidateTime"), ::OpenAPI::toJsonValue(m_invalidate_time));
    }
    if (m_signature_info.isSet()) {
        obj.insert(QString("signatureInfo"), ::OpenAPI::toJsonValue(m_signature_info));
    }
    return obj;
}

QString OAIApproveDecision::getApproveTime() const {
    return m_approve_time;
}
void OAIApproveDecision::setApproveTime(const QString &approve_time) {
    m_approve_time = approve_time;
    m_approve_time_isSet = true;
}

bool OAIApproveDecision::is_approve_time_Set() const{
    return m_approve_time_isSet;
}

bool OAIApproveDecision::is_approve_time_Valid() const{
    return m_approve_time_isValid;
}

bool OAIApproveDecision::isAutoApproved() const {
    return m_auto_approved;
}
void OAIApproveDecision::setAutoApproved(const bool &auto_approved) {
    m_auto_approved = auto_approved;
    m_auto_approved_isSet = true;
}

bool OAIApproveDecision::is_auto_approved_Set() const{
    return m_auto_approved_isSet;
}

bool OAIApproveDecision::is_auto_approved_Valid() const{
    return m_auto_approved_isValid;
}

QString OAIApproveDecision::getExpireTime() const {
    return m_expire_time;
}
void OAIApproveDecision::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIApproveDecision::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIApproveDecision::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAIApproveDecision::getInvalidateTime() const {
    return m_invalidate_time;
}
void OAIApproveDecision::setInvalidateTime(const QString &invalidate_time) {
    m_invalidate_time = invalidate_time;
    m_invalidate_time_isSet = true;
}

bool OAIApproveDecision::is_invalidate_time_Set() const{
    return m_invalidate_time_isSet;
}

bool OAIApproveDecision::is_invalidate_time_Valid() const{
    return m_invalidate_time_isValid;
}

OAISignatureInfo OAIApproveDecision::getSignatureInfo() const {
    return m_signature_info;
}
void OAIApproveDecision::setSignatureInfo(const OAISignatureInfo &signature_info) {
    m_signature_info = signature_info;
    m_signature_info_isSet = true;
}

bool OAIApproveDecision::is_signature_info_Set() const{
    return m_signature_info_isSet;
}

bool OAIApproveDecision::is_signature_info_Valid() const{
    return m_signature_info_isValid;
}

bool OAIApproveDecision::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approve_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalidate_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApproveDecision::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
