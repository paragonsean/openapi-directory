/*
 * Access Approval API
 * An API for controlling access to data by Google personnel.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AccessLocations;
import org.openapitools.client.model.AccessReason;
import org.openapitools.client.model.ApproveDecision;
import org.openapitools.client.model.DismissDecision;
import org.openapitools.client.model.ResourceProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request for the customer to approve access to a resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:17.320881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApprovalRequest {
  public static final String SERIALIZED_NAME_APPROVE = "approve";
  @SerializedName(SERIALIZED_NAME_APPROVE)
  private ApproveDecision approve;

  public static final String SERIALIZED_NAME_DISMISS = "dismiss";
  @SerializedName(SERIALIZED_NAME_DISMISS)
  private DismissDecision dismiss;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REQUEST_TIME = "requestTime";
  @SerializedName(SERIALIZED_NAME_REQUEST_TIME)
  private String requestTime;

  public static final String SERIALIZED_NAME_REQUESTED_DURATION = "requestedDuration";
  @SerializedName(SERIALIZED_NAME_REQUESTED_DURATION)
  private String requestedDuration;

  public static final String SERIALIZED_NAME_REQUESTED_EXPIRATION = "requestedExpiration";
  @SerializedName(SERIALIZED_NAME_REQUESTED_EXPIRATION)
  private String requestedExpiration;

  public static final String SERIALIZED_NAME_REQUESTED_LOCATIONS = "requestedLocations";
  @SerializedName(SERIALIZED_NAME_REQUESTED_LOCATIONS)
  private AccessLocations requestedLocations;

  public static final String SERIALIZED_NAME_REQUESTED_REASON = "requestedReason";
  @SerializedName(SERIALIZED_NAME_REQUESTED_REASON)
  private AccessReason requestedReason;

  public static final String SERIALIZED_NAME_REQUESTED_RESOURCE_NAME = "requestedResourceName";
  @SerializedName(SERIALIZED_NAME_REQUESTED_RESOURCE_NAME)
  private String requestedResourceName;

  public static final String SERIALIZED_NAME_REQUESTED_RESOURCE_PROPERTIES = "requestedResourceProperties";
  @SerializedName(SERIALIZED_NAME_REQUESTED_RESOURCE_PROPERTIES)
  private ResourceProperties requestedResourceProperties;

  public ApprovalRequest() {
  }

  public ApprovalRequest approve(ApproveDecision approve) {
    this.approve = approve;
    return this;
  }

  /**
   * Get approve
   * @return approve
   */
  @javax.annotation.Nullable
  public ApproveDecision getApprove() {
    return approve;
  }

  public void setApprove(ApproveDecision approve) {
    this.approve = approve;
  }


  public ApprovalRequest dismiss(DismissDecision dismiss) {
    this.dismiss = dismiss;
    return this;
  }

  /**
   * Get dismiss
   * @return dismiss
   */
  @javax.annotation.Nullable
  public DismissDecision getDismiss() {
    return dismiss;
  }

  public void setDismiss(DismissDecision dismiss) {
    this.dismiss = dismiss;
  }


  public ApprovalRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the request. Format is \&quot;{projects|folders|organizations}/{id}/approvalRequests/{approval_request}\&quot;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ApprovalRequest requestTime(String requestTime) {
    this.requestTime = requestTime;
    return this;
  }

  /**
   * The time at which approval was requested.
   * @return requestTime
   */
  @javax.annotation.Nullable
  public String getRequestTime() {
    return requestTime;
  }

  public void setRequestTime(String requestTime) {
    this.requestTime = requestTime;
  }


  public ApprovalRequest requestedDuration(String requestedDuration) {
    this.requestedDuration = requestedDuration;
    return this;
  }

  /**
   * The requested access duration.
   * @return requestedDuration
   */
  @javax.annotation.Nullable
  public String getRequestedDuration() {
    return requestedDuration;
  }

  public void setRequestedDuration(String requestedDuration) {
    this.requestedDuration = requestedDuration;
  }


  public ApprovalRequest requestedExpiration(String requestedExpiration) {
    this.requestedExpiration = requestedExpiration;
    return this;
  }

  /**
   * The original requested expiration for the approval. Calculated by adding the requested_duration to the request_time.
   * @return requestedExpiration
   */
  @javax.annotation.Nullable
  public String getRequestedExpiration() {
    return requestedExpiration;
  }

  public void setRequestedExpiration(String requestedExpiration) {
    this.requestedExpiration = requestedExpiration;
  }


  public ApprovalRequest requestedLocations(AccessLocations requestedLocations) {
    this.requestedLocations = requestedLocations;
    return this;
  }

  /**
   * Get requestedLocations
   * @return requestedLocations
   */
  @javax.annotation.Nullable
  public AccessLocations getRequestedLocations() {
    return requestedLocations;
  }

  public void setRequestedLocations(AccessLocations requestedLocations) {
    this.requestedLocations = requestedLocations;
  }


  public ApprovalRequest requestedReason(AccessReason requestedReason) {
    this.requestedReason = requestedReason;
    return this;
  }

  /**
   * Get requestedReason
   * @return requestedReason
   */
  @javax.annotation.Nullable
  public AccessReason getRequestedReason() {
    return requestedReason;
  }

  public void setRequestedReason(AccessReason requestedReason) {
    this.requestedReason = requestedReason;
  }


  public ApprovalRequest requestedResourceName(String requestedResourceName) {
    this.requestedResourceName = requestedResourceName;
    return this;
  }

  /**
   * The resource for which approval is being requested. The format of the resource name is defined at https://cloud.google.com/apis/design/resource_names. The resource name here may either be a \&quot;full\&quot; resource name (e.g. \&quot;//library.googleapis.com/shelves/shelf1/books/book2\&quot;) or a \&quot;relative\&quot; resource name (e.g. \&quot;shelves/shelf1/books/book2\&quot;) as described in the resource name specification.
   * @return requestedResourceName
   */
  @javax.annotation.Nullable
  public String getRequestedResourceName() {
    return requestedResourceName;
  }

  public void setRequestedResourceName(String requestedResourceName) {
    this.requestedResourceName = requestedResourceName;
  }


  public ApprovalRequest requestedResourceProperties(ResourceProperties requestedResourceProperties) {
    this.requestedResourceProperties = requestedResourceProperties;
    return this;
  }

  /**
   * Get requestedResourceProperties
   * @return requestedResourceProperties
   */
  @javax.annotation.Nullable
  public ResourceProperties getRequestedResourceProperties() {
    return requestedResourceProperties;
  }

  public void setRequestedResourceProperties(ResourceProperties requestedResourceProperties) {
    this.requestedResourceProperties = requestedResourceProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApprovalRequest approvalRequest = (ApprovalRequest) o;
    return Objects.equals(this.approve, approvalRequest.approve) &&
        Objects.equals(this.dismiss, approvalRequest.dismiss) &&
        Objects.equals(this.name, approvalRequest.name) &&
        Objects.equals(this.requestTime, approvalRequest.requestTime) &&
        Objects.equals(this.requestedDuration, approvalRequest.requestedDuration) &&
        Objects.equals(this.requestedExpiration, approvalRequest.requestedExpiration) &&
        Objects.equals(this.requestedLocations, approvalRequest.requestedLocations) &&
        Objects.equals(this.requestedReason, approvalRequest.requestedReason) &&
        Objects.equals(this.requestedResourceName, approvalRequest.requestedResourceName) &&
        Objects.equals(this.requestedResourceProperties, approvalRequest.requestedResourceProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approve, dismiss, name, requestTime, requestedDuration, requestedExpiration, requestedLocations, requestedReason, requestedResourceName, requestedResourceProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApprovalRequest {\n");
    sb.append("    approve: ").append(toIndentedString(approve)).append("\n");
    sb.append("    dismiss: ").append(toIndentedString(dismiss)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    requestTime: ").append(toIndentedString(requestTime)).append("\n");
    sb.append("    requestedDuration: ").append(toIndentedString(requestedDuration)).append("\n");
    sb.append("    requestedExpiration: ").append(toIndentedString(requestedExpiration)).append("\n");
    sb.append("    requestedLocations: ").append(toIndentedString(requestedLocations)).append("\n");
    sb.append("    requestedReason: ").append(toIndentedString(requestedReason)).append("\n");
    sb.append("    requestedResourceName: ").append(toIndentedString(requestedResourceName)).append("\n");
    sb.append("    requestedResourceProperties: ").append(toIndentedString(requestedResourceProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("approve");
    openapiFields.add("dismiss");
    openapiFields.add("name");
    openapiFields.add("requestTime");
    openapiFields.add("requestedDuration");
    openapiFields.add("requestedExpiration");
    openapiFields.add("requestedLocations");
    openapiFields.add("requestedReason");
    openapiFields.add("requestedResourceName");
    openapiFields.add("requestedResourceProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApprovalRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApprovalRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApprovalRequest is not found in the empty JSON string", ApprovalRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApprovalRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApprovalRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `approve`
      if (jsonObj.get("approve") != null && !jsonObj.get("approve").isJsonNull()) {
        ApproveDecision.validateJsonElement(jsonObj.get("approve"));
      }
      // validate the optional field `dismiss`
      if (jsonObj.get("dismiss") != null && !jsonObj.get("dismiss").isJsonNull()) {
        DismissDecision.validateJsonElement(jsonObj.get("dismiss"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("requestTime") != null && !jsonObj.get("requestTime").isJsonNull()) && !jsonObj.get("requestTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestTime").toString()));
      }
      if ((jsonObj.get("requestedDuration") != null && !jsonObj.get("requestedDuration").isJsonNull()) && !jsonObj.get("requestedDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedDuration").toString()));
      }
      if ((jsonObj.get("requestedExpiration") != null && !jsonObj.get("requestedExpiration").isJsonNull()) && !jsonObj.get("requestedExpiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedExpiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedExpiration").toString()));
      }
      // validate the optional field `requestedLocations`
      if (jsonObj.get("requestedLocations") != null && !jsonObj.get("requestedLocations").isJsonNull()) {
        AccessLocations.validateJsonElement(jsonObj.get("requestedLocations"));
      }
      // validate the optional field `requestedReason`
      if (jsonObj.get("requestedReason") != null && !jsonObj.get("requestedReason").isJsonNull()) {
        AccessReason.validateJsonElement(jsonObj.get("requestedReason"));
      }
      if ((jsonObj.get("requestedResourceName") != null && !jsonObj.get("requestedResourceName").isJsonNull()) && !jsonObj.get("requestedResourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedResourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedResourceName").toString()));
      }
      // validate the optional field `requestedResourceProperties`
      if (jsonObj.get("requestedResourceProperties") != null && !jsonObj.get("requestedResourceProperties").isJsonNull()) {
        ResourceProperties.validateJsonElement(jsonObj.get("requestedResourceProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApprovalRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApprovalRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApprovalRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApprovalRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ApprovalRequest>() {
           @Override
           public void write(JsonWriter out, ApprovalRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApprovalRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApprovalRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApprovalRequest
   * @throws IOException if the JSON string is invalid with respect to ApprovalRequest
   */
  public static ApprovalRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApprovalRequest.class);
  }

  /**
   * Convert an instance of ApprovalRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

