/*
 * Access Approval API
 * An API for controlling access to data by Google personnel.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the enrollment of a cloud resource into a specific service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:17.320881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnrolledService {
  public static final String SERIALIZED_NAME_CLOUD_PRODUCT = "cloudProduct";
  @SerializedName(SERIALIZED_NAME_CLOUD_PRODUCT)
  private String cloudProduct;

  /**
   * The enrollment level of the service.
   */
  @JsonAdapter(EnrollmentLevelEnum.Adapter.class)
  public enum EnrollmentLevelEnum {
    ENROLLMENT_LEVEL_UNSPECIFIED("ENROLLMENT_LEVEL_UNSPECIFIED"),
    
    BLOCK_ALL("BLOCK_ALL");

    private String value;

    EnrollmentLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnrollmentLevelEnum fromValue(String value) {
      for (EnrollmentLevelEnum b : EnrollmentLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnrollmentLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnrollmentLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnrollmentLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnrollmentLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnrollmentLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENROLLMENT_LEVEL = "enrollmentLevel";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_LEVEL)
  private EnrollmentLevelEnum enrollmentLevel;

  public EnrolledService() {
  }

  public EnrolledService cloudProduct(String cloudProduct) {
    this.cloudProduct = cloudProduct;
    return this;
  }

  /**
   * The product for which Access Approval will be enrolled. Allowed values are listed below (case-sensitive): * all * GA * App Engine * Artifact Registry * BigQuery * Certificate Authority Service * Cloud Bigtable * Cloud Key Management Service * Compute Engine * Cloud Composer * Cloud Dataflow * Cloud Dataproc * Cloud DLP * Cloud EKM * Cloud Firestore * Cloud HSM * Cloud Identity and Access Management * Cloud Logging * Cloud NAT * Cloud Pub/Sub * Cloud Spanner * Cloud SQL * Cloud Storage * Eventarc * Google Kubernetes Engine * Organization Policy Serivice * Persistent Disk * Resource Manager * Secret Manager * Speaker ID Note: These values are supported as input for legacy purposes, but will not be returned from the API. * all * ga-only * appengine.googleapis.com * artifactregistry.googleapis.com * bigquery.googleapis.com * bigtable.googleapis.com * container.googleapis.com * cloudkms.googleapis.com * cloudresourcemanager.googleapis.com * cloudsql.googleapis.com * compute.googleapis.com * dataflow.googleapis.com * dataproc.googleapis.com * dlp.googleapis.com * iam.googleapis.com * logging.googleapis.com * orgpolicy.googleapis.com * pubsub.googleapis.com * spanner.googleapis.com * secretmanager.googleapis.com * speakerid.googleapis.com * storage.googleapis.com Calls to UpdateAccessApprovalSettings using &#39;all&#39; or any of the XXX.googleapis.com will be translated to the associated product name (&#39;all&#39;, &#39;App Engine&#39;, etc.). Note: &#39;all&#39; will enroll the resource in all products supported at both &#39;GA&#39; and &#39;Preview&#39; levels. More information about levels of support is available at https://cloud.google.com/access-approval/docs/supported-services
   * @return cloudProduct
   */
  @javax.annotation.Nullable
  public String getCloudProduct() {
    return cloudProduct;
  }

  public void setCloudProduct(String cloudProduct) {
    this.cloudProduct = cloudProduct;
  }


  public EnrolledService enrollmentLevel(EnrollmentLevelEnum enrollmentLevel) {
    this.enrollmentLevel = enrollmentLevel;
    return this;
  }

  /**
   * The enrollment level of the service.
   * @return enrollmentLevel
   */
  @javax.annotation.Nullable
  public EnrollmentLevelEnum getEnrollmentLevel() {
    return enrollmentLevel;
  }

  public void setEnrollmentLevel(EnrollmentLevelEnum enrollmentLevel) {
    this.enrollmentLevel = enrollmentLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnrolledService enrolledService = (EnrolledService) o;
    return Objects.equals(this.cloudProduct, enrolledService.cloudProduct) &&
        Objects.equals(this.enrollmentLevel, enrolledService.enrollmentLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudProduct, enrollmentLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnrolledService {\n");
    sb.append("    cloudProduct: ").append(toIndentedString(cloudProduct)).append("\n");
    sb.append("    enrollmentLevel: ").append(toIndentedString(enrollmentLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloudProduct");
    openapiFields.add("enrollmentLevel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnrolledService
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnrolledService.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnrolledService is not found in the empty JSON string", EnrolledService.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnrolledService.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnrolledService` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cloudProduct") != null && !jsonObj.get("cloudProduct").isJsonNull()) && !jsonObj.get("cloudProduct").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudProduct` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudProduct").toString()));
      }
      if ((jsonObj.get("enrollmentLevel") != null && !jsonObj.get("enrollmentLevel").isJsonNull()) && !jsonObj.get("enrollmentLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollmentLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollmentLevel").toString()));
      }
      // validate the optional field `enrollmentLevel`
      if (jsonObj.get("enrollmentLevel") != null && !jsonObj.get("enrollmentLevel").isJsonNull()) {
        EnrollmentLevelEnum.validateJsonElement(jsonObj.get("enrollmentLevel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnrolledService.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnrolledService' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnrolledService> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnrolledService.class));

       return (TypeAdapter<T>) new TypeAdapter<EnrolledService>() {
           @Override
           public void write(JsonWriter out, EnrolledService value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnrolledService read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnrolledService given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnrolledService
   * @throws IOException if the JSON string is invalid with respect to EnrolledService
   */
  public static EnrolledService fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnrolledService.class);
  }

  /**
   * Convert an instance of EnrolledService to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

