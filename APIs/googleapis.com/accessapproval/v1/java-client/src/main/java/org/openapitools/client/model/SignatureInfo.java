/*
 * Access Approval API
 * An API for controlling access to data by Google personnel.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the digital signature of the resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:17.320881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SignatureInfo {
  public static final String SERIALIZED_NAME_CUSTOMER_KMS_KEY_VERSION = "customerKmsKeyVersion";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_KMS_KEY_VERSION)
  private String customerKmsKeyVersion;

  /**
   * The hashing algorithm used for signature verification. It will only be present in the case of Google managed keys.
   */
  @JsonAdapter(GoogleKeyAlgorithmEnum.Adapter.class)
  public enum GoogleKeyAlgorithmEnum {
    CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED("CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED"),
    
    GOOGLE_SYMMETRIC_ENCRYPTION("GOOGLE_SYMMETRIC_ENCRYPTION"),
    
    AES_128_GCM("AES_128_GCM"),
    
    AES_256_GCM("AES_256_GCM"),
    
    AES_128_CBC("AES_128_CBC"),
    
    AES_256_CBC("AES_256_CBC"),
    
    AES_128_CTR("AES_128_CTR"),
    
    AES_256_CTR("AES_256_CTR"),
    
    RSA_SIGN_PSS_2048_SHA256("RSA_SIGN_PSS_2048_SHA256"),
    
    RSA_SIGN_PSS_3072_SHA256("RSA_SIGN_PSS_3072_SHA256"),
    
    RSA_SIGN_PSS_4096_SHA256("RSA_SIGN_PSS_4096_SHA256"),
    
    RSA_SIGN_PSS_4096_SHA512("RSA_SIGN_PSS_4096_SHA512"),
    
    RSA_SIGN_PKCS1_2048_SHA256("RSA_SIGN_PKCS1_2048_SHA256"),
    
    RSA_SIGN_PKCS1_3072_SHA256("RSA_SIGN_PKCS1_3072_SHA256"),
    
    RSA_SIGN_PKCS1_4096_SHA256("RSA_SIGN_PKCS1_4096_SHA256"),
    
    RSA_SIGN_PKCS1_4096_SHA512("RSA_SIGN_PKCS1_4096_SHA512"),
    
    RSA_SIGN_RAW_PKCS1_2048("RSA_SIGN_RAW_PKCS1_2048"),
    
    RSA_SIGN_RAW_PKCS1_3072("RSA_SIGN_RAW_PKCS1_3072"),
    
    RSA_SIGN_RAW_PKCS1_4096("RSA_SIGN_RAW_PKCS1_4096"),
    
    RSA_DECRYPT_OAEP_2048_SHA256("RSA_DECRYPT_OAEP_2048_SHA256"),
    
    RSA_DECRYPT_OAEP_3072_SHA256("RSA_DECRYPT_OAEP_3072_SHA256"),
    
    RSA_DECRYPT_OAEP_4096_SHA256("RSA_DECRYPT_OAEP_4096_SHA256"),
    
    RSA_DECRYPT_OAEP_4096_SHA512("RSA_DECRYPT_OAEP_4096_SHA512"),
    
    RSA_DECRYPT_OAEP_2048_SHA1("RSA_DECRYPT_OAEP_2048_SHA1"),
    
    RSA_DECRYPT_OAEP_3072_SHA1("RSA_DECRYPT_OAEP_3072_SHA1"),
    
    RSA_DECRYPT_OAEP_4096_SHA1("RSA_DECRYPT_OAEP_4096_SHA1"),
    
    EC_SIGN_P256_SHA256("EC_SIGN_P256_SHA256"),
    
    EC_SIGN_P384_SHA384("EC_SIGN_P384_SHA384"),
    
    EC_SIGN_SECP256_K1_SHA256("EC_SIGN_SECP256K1_SHA256"),
    
    HMAC_SHA256("HMAC_SHA256"),
    
    HMAC_SHA1("HMAC_SHA1"),
    
    HMAC_SHA384("HMAC_SHA384"),
    
    HMAC_SHA512("HMAC_SHA512"),
    
    HMAC_SHA224("HMAC_SHA224"),
    
    EXTERNAL_SYMMETRIC_ENCRYPTION("EXTERNAL_SYMMETRIC_ENCRYPTION");

    private String value;

    GoogleKeyAlgorithmEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GoogleKeyAlgorithmEnum fromValue(String value) {
      for (GoogleKeyAlgorithmEnum b : GoogleKeyAlgorithmEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GoogleKeyAlgorithmEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GoogleKeyAlgorithmEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GoogleKeyAlgorithmEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GoogleKeyAlgorithmEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GoogleKeyAlgorithmEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GOOGLE_KEY_ALGORITHM = "googleKeyAlgorithm";
  @SerializedName(SERIALIZED_NAME_GOOGLE_KEY_ALGORITHM)
  private GoogleKeyAlgorithmEnum googleKeyAlgorithm;

  public static final String SERIALIZED_NAME_GOOGLE_PUBLIC_KEY_PEM = "googlePublicKeyPem";
  @SerializedName(SERIALIZED_NAME_GOOGLE_PUBLIC_KEY_PEM)
  private String googlePublicKeyPem;

  public static final String SERIALIZED_NAME_SERIALIZED_APPROVAL_REQUEST = "serializedApprovalRequest";
  @SerializedName(SERIALIZED_NAME_SERIALIZED_APPROVAL_REQUEST)
  private byte[] serializedApprovalRequest;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private byte[] signature;

  public SignatureInfo() {
  }

  public SignatureInfo customerKmsKeyVersion(String customerKmsKeyVersion) {
    this.customerKmsKeyVersion = customerKmsKeyVersion;
    return this;
  }

  /**
   * The resource name of the customer CryptoKeyVersion used for signing.
   * @return customerKmsKeyVersion
   */
  @javax.annotation.Nullable
  public String getCustomerKmsKeyVersion() {
    return customerKmsKeyVersion;
  }

  public void setCustomerKmsKeyVersion(String customerKmsKeyVersion) {
    this.customerKmsKeyVersion = customerKmsKeyVersion;
  }


  public SignatureInfo googleKeyAlgorithm(GoogleKeyAlgorithmEnum googleKeyAlgorithm) {
    this.googleKeyAlgorithm = googleKeyAlgorithm;
    return this;
  }

  /**
   * The hashing algorithm used for signature verification. It will only be present in the case of Google managed keys.
   * @return googleKeyAlgorithm
   */
  @javax.annotation.Nullable
  public GoogleKeyAlgorithmEnum getGoogleKeyAlgorithm() {
    return googleKeyAlgorithm;
  }

  public void setGoogleKeyAlgorithm(GoogleKeyAlgorithmEnum googleKeyAlgorithm) {
    this.googleKeyAlgorithm = googleKeyAlgorithm;
  }


  public SignatureInfo googlePublicKeyPem(String googlePublicKeyPem) {
    this.googlePublicKeyPem = googlePublicKeyPem;
    return this;
  }

  /**
   * The public key for the Google default signing, encoded in PEM format. The signature was created using a private key which may be verified using this public key.
   * @return googlePublicKeyPem
   */
  @javax.annotation.Nullable
  public String getGooglePublicKeyPem() {
    return googlePublicKeyPem;
  }

  public void setGooglePublicKeyPem(String googlePublicKeyPem) {
    this.googlePublicKeyPem = googlePublicKeyPem;
  }


  public SignatureInfo serializedApprovalRequest(byte[] serializedApprovalRequest) {
    this.serializedApprovalRequest = serializedApprovalRequest;
    return this;
  }

  /**
   * The ApprovalRequest that is serialized without the SignatureInfo message field. This data is used with the hashing algorithm to generate the digital signature, and it can be used for signature verification.
   * @return serializedApprovalRequest
   */
  @javax.annotation.Nullable
  public byte[] getSerializedApprovalRequest() {
    return serializedApprovalRequest;
  }

  public void setSerializedApprovalRequest(byte[] serializedApprovalRequest) {
    this.serializedApprovalRequest = serializedApprovalRequest;
  }


  public SignatureInfo signature(byte[] signature) {
    this.signature = signature;
    return this;
  }

  /**
   * The digital signature.
   * @return signature
   */
  @javax.annotation.Nullable
  public byte[] getSignature() {
    return signature;
  }

  public void setSignature(byte[] signature) {
    this.signature = signature;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignatureInfo signatureInfo = (SignatureInfo) o;
    return Objects.equals(this.customerKmsKeyVersion, signatureInfo.customerKmsKeyVersion) &&
        Objects.equals(this.googleKeyAlgorithm, signatureInfo.googleKeyAlgorithm) &&
        Objects.equals(this.googlePublicKeyPem, signatureInfo.googlePublicKeyPem) &&
        Arrays.equals(this.serializedApprovalRequest, signatureInfo.serializedApprovalRequest) &&
        Arrays.equals(this.signature, signatureInfo.signature);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerKmsKeyVersion, googleKeyAlgorithm, googlePublicKeyPem, Arrays.hashCode(serializedApprovalRequest), Arrays.hashCode(signature));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignatureInfo {\n");
    sb.append("    customerKmsKeyVersion: ").append(toIndentedString(customerKmsKeyVersion)).append("\n");
    sb.append("    googleKeyAlgorithm: ").append(toIndentedString(googleKeyAlgorithm)).append("\n");
    sb.append("    googlePublicKeyPem: ").append(toIndentedString(googlePublicKeyPem)).append("\n");
    sb.append("    serializedApprovalRequest: ").append(toIndentedString(serializedApprovalRequest)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customerKmsKeyVersion");
    openapiFields.add("googleKeyAlgorithm");
    openapiFields.add("googlePublicKeyPem");
    openapiFields.add("serializedApprovalRequest");
    openapiFields.add("signature");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SignatureInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SignatureInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SignatureInfo is not found in the empty JSON string", SignatureInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SignatureInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SignatureInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("customerKmsKeyVersion") != null && !jsonObj.get("customerKmsKeyVersion").isJsonNull()) && !jsonObj.get("customerKmsKeyVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerKmsKeyVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerKmsKeyVersion").toString()));
      }
      if ((jsonObj.get("googleKeyAlgorithm") != null && !jsonObj.get("googleKeyAlgorithm").isJsonNull()) && !jsonObj.get("googleKeyAlgorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleKeyAlgorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleKeyAlgorithm").toString()));
      }
      // validate the optional field `googleKeyAlgorithm`
      if (jsonObj.get("googleKeyAlgorithm") != null && !jsonObj.get("googleKeyAlgorithm").isJsonNull()) {
        GoogleKeyAlgorithmEnum.validateJsonElement(jsonObj.get("googleKeyAlgorithm"));
      }
      if ((jsonObj.get("googlePublicKeyPem") != null && !jsonObj.get("googlePublicKeyPem").isJsonNull()) && !jsonObj.get("googlePublicKeyPem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googlePublicKeyPem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googlePublicKeyPem").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SignatureInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SignatureInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SignatureInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SignatureInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<SignatureInfo>() {
           @Override
           public void write(JsonWriter out, SignatureInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SignatureInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SignatureInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SignatureInfo
   * @throws IOException if the JSON string is invalid with respect to SignatureInfo
   */
  public static SignatureInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignatureInfo.class);
  }

  /**
   * Convert an instance of SignatureInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

