/*
 * Access Approval API
 * An API for controlling access to data by Google personnel.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A decision that has been made to dismiss an approval request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:17.320881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DismissDecision {
  public static final String SERIALIZED_NAME_DISMISS_TIME = "dismissTime";
  @SerializedName(SERIALIZED_NAME_DISMISS_TIME)
  private String dismissTime;

  public static final String SERIALIZED_NAME_IMPLICIT = "implicit";
  @SerializedName(SERIALIZED_NAME_IMPLICIT)
  private Boolean implicit;

  public DismissDecision() {
  }

  public DismissDecision dismissTime(String dismissTime) {
    this.dismissTime = dismissTime;
    return this;
  }

  /**
   * The time at which the approval request was dismissed.
   * @return dismissTime
   */
  @javax.annotation.Nullable
  public String getDismissTime() {
    return dismissTime;
  }

  public void setDismissTime(String dismissTime) {
    this.dismissTime = dismissTime;
  }


  public DismissDecision implicit(Boolean implicit) {
    this.implicit = implicit;
    return this;
  }

  /**
   * This field will be true if the ApprovalRequest was implicitly dismissed due to inaction by the access approval approvers (the request is not acted on by the approvers before the exiration time).
   * @return implicit
   */
  @javax.annotation.Nullable
  public Boolean getImplicit() {
    return implicit;
  }

  public void setImplicit(Boolean implicit) {
    this.implicit = implicit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DismissDecision dismissDecision = (DismissDecision) o;
    return Objects.equals(this.dismissTime, dismissDecision.dismissTime) &&
        Objects.equals(this.implicit, dismissDecision.implicit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dismissTime, implicit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DismissDecision {\n");
    sb.append("    dismissTime: ").append(toIndentedString(dismissTime)).append("\n");
    sb.append("    implicit: ").append(toIndentedString(implicit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dismissTime");
    openapiFields.add("implicit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DismissDecision
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DismissDecision.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DismissDecision is not found in the empty JSON string", DismissDecision.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DismissDecision.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DismissDecision` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dismissTime") != null && !jsonObj.get("dismissTime").isJsonNull()) && !jsonObj.get("dismissTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dismissTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dismissTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DismissDecision.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DismissDecision' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DismissDecision> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DismissDecision.class));

       return (TypeAdapter<T>) new TypeAdapter<DismissDecision>() {
           @Override
           public void write(JsonWriter out, DismissDecision value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DismissDecision read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DismissDecision given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DismissDecision
   * @throws IOException if the JSON string is invalid with respect to DismissDecision
   */
  public static DismissDecision fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DismissDecision.class);
  }

  /**
   * Convert an instance of DismissDecision to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

