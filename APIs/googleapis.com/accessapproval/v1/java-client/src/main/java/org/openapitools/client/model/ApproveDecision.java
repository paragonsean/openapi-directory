/*
 * Access Approval API
 * An API for controlling access to data by Google personnel.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SignatureInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A decision that has been made to approve access to a resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:17.320881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApproveDecision {
  public static final String SERIALIZED_NAME_APPROVE_TIME = "approveTime";
  @SerializedName(SERIALIZED_NAME_APPROVE_TIME)
  private String approveTime;

  public static final String SERIALIZED_NAME_AUTO_APPROVED = "autoApproved";
  @SerializedName(SERIALIZED_NAME_AUTO_APPROVED)
  private Boolean autoApproved;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private String expireTime;

  public static final String SERIALIZED_NAME_INVALIDATE_TIME = "invalidateTime";
  @SerializedName(SERIALIZED_NAME_INVALIDATE_TIME)
  private String invalidateTime;

  public static final String SERIALIZED_NAME_SIGNATURE_INFO = "signatureInfo";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_INFO)
  private SignatureInfo signatureInfo;

  public ApproveDecision() {
  }

  public ApproveDecision approveTime(String approveTime) {
    this.approveTime = approveTime;
    return this;
  }

  /**
   * The time at which approval was granted.
   * @return approveTime
   */
  @javax.annotation.Nullable
  public String getApproveTime() {
    return approveTime;
  }

  public void setApproveTime(String approveTime) {
    this.approveTime = approveTime;
  }


  public ApproveDecision autoApproved(Boolean autoApproved) {
    this.autoApproved = autoApproved;
    return this;
  }

  /**
   * True when the request has been auto-approved.
   * @return autoApproved
   */
  @javax.annotation.Nullable
  public Boolean getAutoApproved() {
    return autoApproved;
  }

  public void setAutoApproved(Boolean autoApproved) {
    this.autoApproved = autoApproved;
  }


  public ApproveDecision expireTime(String expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * The time at which the approval expires.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }

  public void setExpireTime(String expireTime) {
    this.expireTime = expireTime;
  }


  public ApproveDecision invalidateTime(String invalidateTime) {
    this.invalidateTime = invalidateTime;
    return this;
  }

  /**
   * If set, denotes the timestamp at which the approval is invalidated.
   * @return invalidateTime
   */
  @javax.annotation.Nullable
  public String getInvalidateTime() {
    return invalidateTime;
  }

  public void setInvalidateTime(String invalidateTime) {
    this.invalidateTime = invalidateTime;
  }


  public ApproveDecision signatureInfo(SignatureInfo signatureInfo) {
    this.signatureInfo = signatureInfo;
    return this;
  }

  /**
   * Get signatureInfo
   * @return signatureInfo
   */
  @javax.annotation.Nullable
  public SignatureInfo getSignatureInfo() {
    return signatureInfo;
  }

  public void setSignatureInfo(SignatureInfo signatureInfo) {
    this.signatureInfo = signatureInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApproveDecision approveDecision = (ApproveDecision) o;
    return Objects.equals(this.approveTime, approveDecision.approveTime) &&
        Objects.equals(this.autoApproved, approveDecision.autoApproved) &&
        Objects.equals(this.expireTime, approveDecision.expireTime) &&
        Objects.equals(this.invalidateTime, approveDecision.invalidateTime) &&
        Objects.equals(this.signatureInfo, approveDecision.signatureInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approveTime, autoApproved, expireTime, invalidateTime, signatureInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApproveDecision {\n");
    sb.append("    approveTime: ").append(toIndentedString(approveTime)).append("\n");
    sb.append("    autoApproved: ").append(toIndentedString(autoApproved)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    invalidateTime: ").append(toIndentedString(invalidateTime)).append("\n");
    sb.append("    signatureInfo: ").append(toIndentedString(signatureInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("approveTime");
    openapiFields.add("autoApproved");
    openapiFields.add("expireTime");
    openapiFields.add("invalidateTime");
    openapiFields.add("signatureInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApproveDecision
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApproveDecision.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApproveDecision is not found in the empty JSON string", ApproveDecision.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApproveDecision.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApproveDecision` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("approveTime") != null && !jsonObj.get("approveTime").isJsonNull()) && !jsonObj.get("approveTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approveTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approveTime").toString()));
      }
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      if ((jsonObj.get("invalidateTime") != null && !jsonObj.get("invalidateTime").isJsonNull()) && !jsonObj.get("invalidateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invalidateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invalidateTime").toString()));
      }
      // validate the optional field `signatureInfo`
      if (jsonObj.get("signatureInfo") != null && !jsonObj.get("signatureInfo").isJsonNull()) {
        SignatureInfo.validateJsonElement(jsonObj.get("signatureInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApproveDecision.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApproveDecision' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApproveDecision> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApproveDecision.class));

       return (TypeAdapter<T>) new TypeAdapter<ApproveDecision>() {
           @Override
           public void write(JsonWriter out, ApproveDecision value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApproveDecision read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApproveDecision given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApproveDecision
   * @throws IOException if the JSON string is invalid with respect to ApproveDecision
   */
  public static ApproveDecision fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApproveDecision.class);
  }

  /**
   * Convert an instance of ApproveDecision to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

