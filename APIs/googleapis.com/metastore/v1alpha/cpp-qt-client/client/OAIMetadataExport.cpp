/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetadataExport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetadataExport::OAIMetadataExport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetadataExport::OAIMetadataExport() {
    this->initializeModel();
}

OAIMetadataExport::~OAIMetadataExport() {}

void OAIMetadataExport::initializeModel() {

    m_database_dump_type_isSet = false;
    m_database_dump_type_isValid = false;

    m_destination_gcs_uri_isSet = false;
    m_destination_gcs_uri_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIMetadataExport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetadataExport::fromJsonObject(QJsonObject json) {

    m_database_dump_type_isValid = ::OpenAPI::fromJsonValue(m_database_dump_type, json[QString("databaseDumpType")]);
    m_database_dump_type_isSet = !json[QString("databaseDumpType")].isNull() && m_database_dump_type_isValid;

    m_destination_gcs_uri_isValid = ::OpenAPI::fromJsonValue(m_destination_gcs_uri, json[QString("destinationGcsUri")]);
    m_destination_gcs_uri_isSet = !json[QString("destinationGcsUri")].isNull() && m_destination_gcs_uri_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIMetadataExport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetadataExport::asJsonObject() const {
    QJsonObject obj;
    if (m_database_dump_type_isSet) {
        obj.insert(QString("databaseDumpType"), ::OpenAPI::toJsonValue(m_database_dump_type));
    }
    if (m_destination_gcs_uri_isSet) {
        obj.insert(QString("destinationGcsUri"), ::OpenAPI::toJsonValue(m_destination_gcs_uri));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIMetadataExport::getDatabaseDumpType() const {
    return m_database_dump_type;
}
void OAIMetadataExport::setDatabaseDumpType(const QString &database_dump_type) {
    m_database_dump_type = database_dump_type;
    m_database_dump_type_isSet = true;
}

bool OAIMetadataExport::is_database_dump_type_Set() const{
    return m_database_dump_type_isSet;
}

bool OAIMetadataExport::is_database_dump_type_Valid() const{
    return m_database_dump_type_isValid;
}

QString OAIMetadataExport::getDestinationGcsUri() const {
    return m_destination_gcs_uri;
}
void OAIMetadataExport::setDestinationGcsUri(const QString &destination_gcs_uri) {
    m_destination_gcs_uri = destination_gcs_uri;
    m_destination_gcs_uri_isSet = true;
}

bool OAIMetadataExport::is_destination_gcs_uri_Set() const{
    return m_destination_gcs_uri_isSet;
}

bool OAIMetadataExport::is_destination_gcs_uri_Valid() const{
    return m_destination_gcs_uri_isValid;
}

QString OAIMetadataExport::getEndTime() const {
    return m_end_time;
}
void OAIMetadataExport::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIMetadataExport::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIMetadataExport::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIMetadataExport::getStartTime() const {
    return m_start_time;
}
void OAIMetadataExport::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIMetadataExport::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIMetadataExport::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIMetadataExport::getState() const {
    return m_state;
}
void OAIMetadataExport::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIMetadataExport::is_state_Set() const{
    return m_state_isSet;
}

bool OAIMetadataExport::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIMetadataExport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_dump_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_gcs_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetadataExport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
