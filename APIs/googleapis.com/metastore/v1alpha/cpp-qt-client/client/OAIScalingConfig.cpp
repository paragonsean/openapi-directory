/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScalingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScalingConfig::OAIScalingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScalingConfig::OAIScalingConfig() {
    this->initializeModel();
}

OAIScalingConfig::~OAIScalingConfig() {}

void OAIScalingConfig::initializeModel() {

    m_instance_size_isSet = false;
    m_instance_size_isValid = false;

    m_scaling_factor_isSet = false;
    m_scaling_factor_isValid = false;
}

void OAIScalingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScalingConfig::fromJsonObject(QJsonObject json) {

    m_instance_size_isValid = ::OpenAPI::fromJsonValue(m_instance_size, json[QString("instanceSize")]);
    m_instance_size_isSet = !json[QString("instanceSize")].isNull() && m_instance_size_isValid;

    m_scaling_factor_isValid = ::OpenAPI::fromJsonValue(m_scaling_factor, json[QString("scalingFactor")]);
    m_scaling_factor_isSet = !json[QString("scalingFactor")].isNull() && m_scaling_factor_isValid;
}

QString OAIScalingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScalingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_size_isSet) {
        obj.insert(QString("instanceSize"), ::OpenAPI::toJsonValue(m_instance_size));
    }
    if (m_scaling_factor_isSet) {
        obj.insert(QString("scalingFactor"), ::OpenAPI::toJsonValue(m_scaling_factor));
    }
    return obj;
}

QString OAIScalingConfig::getInstanceSize() const {
    return m_instance_size;
}
void OAIScalingConfig::setInstanceSize(const QString &instance_size) {
    m_instance_size = instance_size;
    m_instance_size_isSet = true;
}

bool OAIScalingConfig::is_instance_size_Set() const{
    return m_instance_size_isSet;
}

bool OAIScalingConfig::is_instance_size_Valid() const{
    return m_instance_size_isValid;
}

float OAIScalingConfig::getScalingFactor() const {
    return m_scaling_factor;
}
void OAIScalingConfig::setScalingFactor(const float &scaling_factor) {
    m_scaling_factor = scaling_factor;
    m_scaling_factor_isSet = true;
}

bool OAIScalingConfig::is_scaling_factor_Set() const{
    return m_scaling_factor_isSet;
}

bool OAIScalingConfig::is_scaling_factor_Valid() const{
    return m_scaling_factor_isValid;
}

bool OAIScalingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling_factor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScalingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
