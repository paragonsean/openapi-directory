/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlterMetadataResourceLocationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlterMetadataResourceLocationRequest::OAIAlterMetadataResourceLocationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlterMetadataResourceLocationRequest::OAIAlterMetadataResourceLocationRequest() {
    this->initializeModel();
}

OAIAlterMetadataResourceLocationRequest::~OAIAlterMetadataResourceLocationRequest() {}

void OAIAlterMetadataResourceLocationRequest::initializeModel() {

    m_location_uri_isSet = false;
    m_location_uri_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;
}

void OAIAlterMetadataResourceLocationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlterMetadataResourceLocationRequest::fromJsonObject(QJsonObject json) {

    m_location_uri_isValid = ::OpenAPI::fromJsonValue(m_location_uri, json[QString("locationUri")]);
    m_location_uri_isSet = !json[QString("locationUri")].isNull() && m_location_uri_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;
}

QString OAIAlterMetadataResourceLocationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlterMetadataResourceLocationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_location_uri_isSet) {
        obj.insert(QString("locationUri"), ::OpenAPI::toJsonValue(m_location_uri));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    return obj;
}

QString OAIAlterMetadataResourceLocationRequest::getLocationUri() const {
    return m_location_uri;
}
void OAIAlterMetadataResourceLocationRequest::setLocationUri(const QString &location_uri) {
    m_location_uri = location_uri;
    m_location_uri_isSet = true;
}

bool OAIAlterMetadataResourceLocationRequest::is_location_uri_Set() const{
    return m_location_uri_isSet;
}

bool OAIAlterMetadataResourceLocationRequest::is_location_uri_Valid() const{
    return m_location_uri_isValid;
}

QString OAIAlterMetadataResourceLocationRequest::getResourceName() const {
    return m_resource_name;
}
void OAIAlterMetadataResourceLocationRequest::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIAlterMetadataResourceLocationRequest::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIAlterMetadataResourceLocationRequest::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

bool OAIAlterMetadataResourceLocationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlterMetadataResourceLocationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
