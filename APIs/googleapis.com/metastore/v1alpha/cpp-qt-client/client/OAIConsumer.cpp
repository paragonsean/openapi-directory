/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsumer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsumer::OAIConsumer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsumer::OAIConsumer() {
    this->initializeModel();
}

OAIConsumer::~OAIConsumer() {}

void OAIConsumer::initializeModel() {

    m_endpoint_location_isSet = false;
    m_endpoint_location_isValid = false;

    m_endpoint_uri_isSet = false;
    m_endpoint_uri_isValid = false;

    m_subnetwork_isSet = false;
    m_subnetwork_isValid = false;
}

void OAIConsumer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsumer::fromJsonObject(QJsonObject json) {

    m_endpoint_location_isValid = ::OpenAPI::fromJsonValue(m_endpoint_location, json[QString("endpointLocation")]);
    m_endpoint_location_isSet = !json[QString("endpointLocation")].isNull() && m_endpoint_location_isValid;

    m_endpoint_uri_isValid = ::OpenAPI::fromJsonValue(m_endpoint_uri, json[QString("endpointUri")]);
    m_endpoint_uri_isSet = !json[QString("endpointUri")].isNull() && m_endpoint_uri_isValid;

    m_subnetwork_isValid = ::OpenAPI::fromJsonValue(m_subnetwork, json[QString("subnetwork")]);
    m_subnetwork_isSet = !json[QString("subnetwork")].isNull() && m_subnetwork_isValid;
}

QString OAIConsumer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsumer::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_location_isSet) {
        obj.insert(QString("endpointLocation"), ::OpenAPI::toJsonValue(m_endpoint_location));
    }
    if (m_endpoint_uri_isSet) {
        obj.insert(QString("endpointUri"), ::OpenAPI::toJsonValue(m_endpoint_uri));
    }
    if (m_subnetwork_isSet) {
        obj.insert(QString("subnetwork"), ::OpenAPI::toJsonValue(m_subnetwork));
    }
    return obj;
}

QString OAIConsumer::getEndpointLocation() const {
    return m_endpoint_location;
}
void OAIConsumer::setEndpointLocation(const QString &endpoint_location) {
    m_endpoint_location = endpoint_location;
    m_endpoint_location_isSet = true;
}

bool OAIConsumer::is_endpoint_location_Set() const{
    return m_endpoint_location_isSet;
}

bool OAIConsumer::is_endpoint_location_Valid() const{
    return m_endpoint_location_isValid;
}

QString OAIConsumer::getEndpointUri() const {
    return m_endpoint_uri;
}
void OAIConsumer::setEndpointUri(const QString &endpoint_uri) {
    m_endpoint_uri = endpoint_uri;
    m_endpoint_uri_isSet = true;
}

bool OAIConsumer::is_endpoint_uri_Set() const{
    return m_endpoint_uri_isSet;
}

bool OAIConsumer::is_endpoint_uri_Valid() const{
    return m_endpoint_uri_isValid;
}

QString OAIConsumer::getSubnetwork() const {
    return m_subnetwork;
}
void OAIConsumer::setSubnetwork(const QString &subnetwork) {
    m_subnetwork = subnetwork;
    m_subnetwork_isSet = true;
}

bool OAIConsumer::is_subnetwork_Set() const{
    return m_subnetwork_isSet;
}

bool OAIConsumer::is_subnetwork_Valid() const{
    return m_subnetwork_isValid;
}

bool OAIConsumer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnetwork_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsumer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
