/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHiveMetastoreVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHiveMetastoreVersion::OAIHiveMetastoreVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHiveMetastoreVersion::OAIHiveMetastoreVersion() {
    this->initializeModel();
}

OAIHiveMetastoreVersion::~OAIHiveMetastoreVersion() {}

void OAIHiveMetastoreVersion::initializeModel() {

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIHiveMetastoreVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHiveMetastoreVersion::fromJsonObject(QJsonObject json) {

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIHiveMetastoreVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHiveMetastoreVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

bool OAIHiveMetastoreVersion::isIsDefault() const {
    return m_is_default;
}
void OAIHiveMetastoreVersion::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIHiveMetastoreVersion::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIHiveMetastoreVersion::is_is_default_Valid() const{
    return m_is_default_isValid;
}

QString OAIHiveMetastoreVersion::getVersion() const {
    return m_version;
}
void OAIHiveMetastoreVersion::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIHiveMetastoreVersion::is_version_Set() const{
    return m_version_isSet;
}

bool OAIHiveMetastoreVersion::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIHiveMetastoreVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHiveMetastoreVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
