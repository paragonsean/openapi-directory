/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHiveMetastoreConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHiveMetastoreConfig::OAIHiveMetastoreConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHiveMetastoreConfig::OAIHiveMetastoreConfig() {
    this->initializeModel();
}

OAIHiveMetastoreConfig::~OAIHiveMetastoreConfig() {}

void OAIHiveMetastoreConfig::initializeModel() {

    m_auxiliary_versions_isSet = false;
    m_auxiliary_versions_isValid = false;

    m_config_overrides_isSet = false;
    m_config_overrides_isValid = false;

    m_endpoint_protocol_isSet = false;
    m_endpoint_protocol_isValid = false;

    m_kerberos_config_isSet = false;
    m_kerberos_config_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIHiveMetastoreConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHiveMetastoreConfig::fromJsonObject(QJsonObject json) {

    m_auxiliary_versions_isValid = ::OpenAPI::fromJsonValue(m_auxiliary_versions, json[QString("auxiliaryVersions")]);
    m_auxiliary_versions_isSet = !json[QString("auxiliaryVersions")].isNull() && m_auxiliary_versions_isValid;

    m_config_overrides_isValid = ::OpenAPI::fromJsonValue(m_config_overrides, json[QString("configOverrides")]);
    m_config_overrides_isSet = !json[QString("configOverrides")].isNull() && m_config_overrides_isValid;

    m_endpoint_protocol_isValid = ::OpenAPI::fromJsonValue(m_endpoint_protocol, json[QString("endpointProtocol")]);
    m_endpoint_protocol_isSet = !json[QString("endpointProtocol")].isNull() && m_endpoint_protocol_isValid;

    m_kerberos_config_isValid = ::OpenAPI::fromJsonValue(m_kerberos_config, json[QString("kerberosConfig")]);
    m_kerberos_config_isSet = !json[QString("kerberosConfig")].isNull() && m_kerberos_config_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIHiveMetastoreConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHiveMetastoreConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_auxiliary_versions.size() > 0) {
        obj.insert(QString("auxiliaryVersions"), ::OpenAPI::toJsonValue(m_auxiliary_versions));
    }
    if (m_config_overrides.size() > 0) {
        obj.insert(QString("configOverrides"), ::OpenAPI::toJsonValue(m_config_overrides));
    }
    if (m_endpoint_protocol_isSet) {
        obj.insert(QString("endpointProtocol"), ::OpenAPI::toJsonValue(m_endpoint_protocol));
    }
    if (m_kerberos_config.isSet()) {
        obj.insert(QString("kerberosConfig"), ::OpenAPI::toJsonValue(m_kerberos_config));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QMap<QString, OAIAuxiliaryVersionConfig> OAIHiveMetastoreConfig::getAuxiliaryVersions() const {
    return m_auxiliary_versions;
}
void OAIHiveMetastoreConfig::setAuxiliaryVersions(const QMap<QString, OAIAuxiliaryVersionConfig> &auxiliary_versions) {
    m_auxiliary_versions = auxiliary_versions;
    m_auxiliary_versions_isSet = true;
}

bool OAIHiveMetastoreConfig::is_auxiliary_versions_Set() const{
    return m_auxiliary_versions_isSet;
}

bool OAIHiveMetastoreConfig::is_auxiliary_versions_Valid() const{
    return m_auxiliary_versions_isValid;
}

QMap<QString, QString> OAIHiveMetastoreConfig::getConfigOverrides() const {
    return m_config_overrides;
}
void OAIHiveMetastoreConfig::setConfigOverrides(const QMap<QString, QString> &config_overrides) {
    m_config_overrides = config_overrides;
    m_config_overrides_isSet = true;
}

bool OAIHiveMetastoreConfig::is_config_overrides_Set() const{
    return m_config_overrides_isSet;
}

bool OAIHiveMetastoreConfig::is_config_overrides_Valid() const{
    return m_config_overrides_isValid;
}

QString OAIHiveMetastoreConfig::getEndpointProtocol() const {
    return m_endpoint_protocol;
}
void OAIHiveMetastoreConfig::setEndpointProtocol(const QString &endpoint_protocol) {
    m_endpoint_protocol = endpoint_protocol;
    m_endpoint_protocol_isSet = true;
}

bool OAIHiveMetastoreConfig::is_endpoint_protocol_Set() const{
    return m_endpoint_protocol_isSet;
}

bool OAIHiveMetastoreConfig::is_endpoint_protocol_Valid() const{
    return m_endpoint_protocol_isValid;
}

OAIKerberosConfig OAIHiveMetastoreConfig::getKerberosConfig() const {
    return m_kerberos_config;
}
void OAIHiveMetastoreConfig::setKerberosConfig(const OAIKerberosConfig &kerberos_config) {
    m_kerberos_config = kerberos_config;
    m_kerberos_config_isSet = true;
}

bool OAIHiveMetastoreConfig::is_kerberos_config_Set() const{
    return m_kerberos_config_isSet;
}

bool OAIHiveMetastoreConfig::is_kerberos_config_Valid() const{
    return m_kerberos_config_isValid;
}

QString OAIHiveMetastoreConfig::getVersion() const {
    return m_version;
}
void OAIHiveMetastoreConfig::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIHiveMetastoreConfig::is_version_Set() const{
    return m_version_isSet;
}

bool OAIHiveMetastoreConfig::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIHiveMetastoreConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auxiliary_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kerberos_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHiveMetastoreConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
