/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackup::OAIBackup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackup::OAIBackup() {
    this->initializeModel();
}

OAIBackup::~OAIBackup() {}

void OAIBackup::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_restoring_services_isSet = false;
    m_restoring_services_isValid = false;

    m_service_revision_isSet = false;
    m_service_revision_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIBackup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackup::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_restoring_services_isValid = ::OpenAPI::fromJsonValue(m_restoring_services, json[QString("restoringServices")]);
    m_restoring_services_isSet = !json[QString("restoringServices")].isNull() && m_restoring_services_isValid;

    m_service_revision_isValid = ::OpenAPI::fromJsonValue(m_service_revision, json[QString("serviceRevision")]);
    m_service_revision_isSet = !json[QString("serviceRevision")].isNull() && m_service_revision_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIBackup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackup::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_restoring_services.size() > 0) {
        obj.insert(QString("restoringServices"), ::OpenAPI::toJsonValue(m_restoring_services));
    }
    if (m_service_revision.isSet()) {
        obj.insert(QString("serviceRevision"), ::OpenAPI::toJsonValue(m_service_revision));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIBackup::getCreateTime() const {
    return m_create_time;
}
void OAIBackup::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIBackup::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIBackup::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIBackup::getDescription() const {
    return m_description;
}
void OAIBackup::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBackup::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBackup::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIBackup::getEndTime() const {
    return m_end_time;
}
void OAIBackup::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIBackup::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIBackup::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIBackup::getName() const {
    return m_name;
}
void OAIBackup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBackup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBackup::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIBackup::getRestoringServices() const {
    return m_restoring_services;
}
void OAIBackup::setRestoringServices(const QList<QString> &restoring_services) {
    m_restoring_services = restoring_services;
    m_restoring_services_isSet = true;
}

bool OAIBackup::is_restoring_services_Set() const{
    return m_restoring_services_isSet;
}

bool OAIBackup::is_restoring_services_Valid() const{
    return m_restoring_services_isValid;
}

OAIService OAIBackup::getServiceRevision() const {
    return m_service_revision;
}
void OAIBackup::setServiceRevision(const OAIService &service_revision) {
    m_service_revision = service_revision;
    m_service_revision_isSet = true;
}

bool OAIBackup::is_service_revision_Set() const{
    return m_service_revision_isSet;
}

bool OAIBackup::is_service_revision_Valid() const{
    return m_service_revision_isValid;
}

QString OAIBackup::getState() const {
    return m_state;
}
void OAIBackup::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIBackup::is_state_Set() const{
    return m_state_isSet;
}

bool OAIBackup::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIBackup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restoring_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_revision.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
