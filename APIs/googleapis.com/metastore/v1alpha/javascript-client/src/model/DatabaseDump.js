/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DatabaseDump model module.
 * @module model/DatabaseDump
 * @version v1alpha
 */
class DatabaseDump {
    /**
     * Constructs a new <code>DatabaseDump</code>.
     * A specification of the location of and metadata about a database dump from a relational database management system.
     * @alias module:model/DatabaseDump
     */
    constructor() { 
        
        DatabaseDump.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DatabaseDump</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatabaseDump} obj Optional instance to populate.
     * @return {module:model/DatabaseDump} The populated <code>DatabaseDump</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatabaseDump();

            if (data.hasOwnProperty('databaseType')) {
                obj['databaseType'] = ApiClient.convertToType(data['databaseType'], 'String');
            }
            if (data.hasOwnProperty('gcsUri')) {
                obj['gcsUri'] = ApiClient.convertToType(data['gcsUri'], 'String');
            }
            if (data.hasOwnProperty('sourceDatabase')) {
                obj['sourceDatabase'] = ApiClient.convertToType(data['sourceDatabase'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatabaseDump</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatabaseDump</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['databaseType'] && !(typeof data['databaseType'] === 'string' || data['databaseType'] instanceof String)) {
            throw new Error("Expected the field `databaseType` to be a primitive type in the JSON string but got " + data['databaseType']);
        }
        // ensure the json data is a string
        if (data['gcsUri'] && !(typeof data['gcsUri'] === 'string' || data['gcsUri'] instanceof String)) {
            throw new Error("Expected the field `gcsUri` to be a primitive type in the JSON string but got " + data['gcsUri']);
        }
        // ensure the json data is a string
        if (data['sourceDatabase'] && !(typeof data['sourceDatabase'] === 'string' || data['sourceDatabase'] instanceof String)) {
            throw new Error("Expected the field `sourceDatabase` to be a primitive type in the JSON string but got " + data['sourceDatabase']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The type of the database.
 * @member {module:model/DatabaseDump.DatabaseTypeEnum} databaseType
 */
DatabaseDump.prototype['databaseType'] = undefined;

/**
 * A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.
 * @member {String} gcsUri
 */
DatabaseDump.prototype['gcsUri'] = undefined;

/**
 * The name of the source database.
 * @member {String} sourceDatabase
 */
DatabaseDump.prototype['sourceDatabase'] = undefined;

/**
 * Optional. The type of the database dump. If unspecified, defaults to MYSQL.
 * @member {module:model/DatabaseDump.TypeEnum} type
 */
DatabaseDump.prototype['type'] = undefined;





/**
 * Allowed values for the <code>databaseType</code> property.
 * @enum {String}
 * @readonly
 */
DatabaseDump['DatabaseTypeEnum'] = {

    /**
     * value: "DATABASE_TYPE_UNSPECIFIED"
     * @const
     */
    "DATABASE_TYPE_UNSPECIFIED": "DATABASE_TYPE_UNSPECIFIED",

    /**
     * value: "MYSQL"
     * @const
     */
    "MYSQL": "MYSQL"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
DatabaseDump['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "MYSQL"
     * @const
     */
    "MYSQL": "MYSQL",

    /**
     * value: "AVRO"
     * @const
     */
    "AVRO": "AVRO"
};



export default DatabaseDump;

