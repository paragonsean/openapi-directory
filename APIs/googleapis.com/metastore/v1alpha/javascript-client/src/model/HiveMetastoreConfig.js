/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuxiliaryVersionConfig from './AuxiliaryVersionConfig';
import KerberosConfig from './KerberosConfig';

/**
 * The HiveMetastoreConfig model module.
 * @module model/HiveMetastoreConfig
 * @version v1alpha
 */
class HiveMetastoreConfig {
    /**
     * Constructs a new <code>HiveMetastoreConfig</code>.
     * Specifies configuration information specific to running Hive metastore software as the metastore service.
     * @alias module:model/HiveMetastoreConfig
     */
    constructor() { 
        
        HiveMetastoreConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HiveMetastoreConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HiveMetastoreConfig} obj Optional instance to populate.
     * @return {module:model/HiveMetastoreConfig} The populated <code>HiveMetastoreConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HiveMetastoreConfig();

            if (data.hasOwnProperty('auxiliaryVersions')) {
                obj['auxiliaryVersions'] = ApiClient.convertToType(data['auxiliaryVersions'], {'String': AuxiliaryVersionConfig});
            }
            if (data.hasOwnProperty('configOverrides')) {
                obj['configOverrides'] = ApiClient.convertToType(data['configOverrides'], {'String': 'String'});
            }
            if (data.hasOwnProperty('endpointProtocol')) {
                obj['endpointProtocol'] = ApiClient.convertToType(data['endpointProtocol'], 'String');
            }
            if (data.hasOwnProperty('kerberosConfig')) {
                obj['kerberosConfig'] = KerberosConfig.constructFromObject(data['kerberosConfig']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HiveMetastoreConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HiveMetastoreConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['endpointProtocol'] && !(typeof data['endpointProtocol'] === 'string' || data['endpointProtocol'] instanceof String)) {
            throw new Error("Expected the field `endpointProtocol` to be a primitive type in the JSON string but got " + data['endpointProtocol']);
        }
        // validate the optional field `kerberosConfig`
        if (data['kerberosConfig']) { // data not null
          KerberosConfig.validateJSON(data['kerberosConfig']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * A mapping of Hive metastore version to the auxiliary version configuration. When specified, a secondary Hive metastore service is created along with the primary service. All auxiliary versions must be less than the service's primary version. The key is the auxiliary service name and it must match the regular expression a-z?. This means that the first character must be a lowercase letter, and all the following characters must be hyphens, lowercase letters, or digits, except the last character, which cannot be a hyphen.
 * @member {Object.<String, module:model/AuxiliaryVersionConfig>} auxiliaryVersions
 */
HiveMetastoreConfig.prototype['auxiliaryVersions'] = undefined;

/**
 * A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml). The mappings override system defaults (some keys cannot be overridden). These overrides are also applied to auxiliary versions and can be further customized in the auxiliary version's AuxiliaryVersionConfig.
 * @member {Object.<String, String>} configOverrides
 */
HiveMetastoreConfig.prototype['configOverrides'] = undefined;

/**
 * The protocol to use for the metastore service endpoint. If unspecified, defaults to THRIFT.
 * @member {module:model/HiveMetastoreConfig.EndpointProtocolEnum} endpointProtocol
 */
HiveMetastoreConfig.prototype['endpointProtocol'] = undefined;

/**
 * @member {module:model/KerberosConfig} kerberosConfig
 */
HiveMetastoreConfig.prototype['kerberosConfig'] = undefined;

/**
 * Immutable. The Hive metastore schema version.
 * @member {String} version
 */
HiveMetastoreConfig.prototype['version'] = undefined;





/**
 * Allowed values for the <code>endpointProtocol</code> property.
 * @enum {String}
 * @readonly
 */
HiveMetastoreConfig['EndpointProtocolEnum'] = {

    /**
     * value: "ENDPOINT_PROTOCOL_UNSPECIFIED"
     * @const
     */
    "ENDPOINT_PROTOCOL_UNSPECIFIED": "ENDPOINT_PROTOCOL_UNSPECIFIED",

    /**
     * value: "THRIFT"
     * @const
     */
    "THRIFT": "THRIFT",

    /**
     * value: "GRPC"
     * @const
     */
    "GRPC": "GRPC"
};



export default HiveMetastoreConfig;

