/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExportMetadataRequest model module.
 * @module model/ExportMetadataRequest
 * @version v1alpha
 */
class ExportMetadataRequest {
    /**
     * Constructs a new <code>ExportMetadataRequest</code>.
     * Request message for DataprocMetastore.ExportMetadata.
     * @alias module:model/ExportMetadataRequest
     */
    constructor() { 
        
        ExportMetadataRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExportMetadataRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExportMetadataRequest} obj Optional instance to populate.
     * @return {module:model/ExportMetadataRequest} The populated <code>ExportMetadataRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExportMetadataRequest();

            if (data.hasOwnProperty('databaseDumpType')) {
                obj['databaseDumpType'] = ApiClient.convertToType(data['databaseDumpType'], 'String');
            }
            if (data.hasOwnProperty('destinationGcsFolder')) {
                obj['destinationGcsFolder'] = ApiClient.convertToType(data['destinationGcsFolder'], 'String');
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExportMetadataRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExportMetadataRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['databaseDumpType'] && !(typeof data['databaseDumpType'] === 'string' || data['databaseDumpType'] instanceof String)) {
            throw new Error("Expected the field `databaseDumpType` to be a primitive type in the JSON string but got " + data['databaseDumpType']);
        }
        // ensure the json data is a string
        if (data['destinationGcsFolder'] && !(typeof data['destinationGcsFolder'] === 'string' || data['destinationGcsFolder'] instanceof String)) {
            throw new Error("Expected the field `destinationGcsFolder` to be a primitive type in the JSON string but got " + data['destinationGcsFolder']);
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }

        return true;
    }


}



/**
 * Optional. The type of the database dump. If unspecified, defaults to MYSQL.
 * @member {module:model/ExportMetadataRequest.DatabaseDumpTypeEnum} databaseDumpType
 */
ExportMetadataRequest.prototype['databaseDumpType'] = undefined;

/**
 * A Cloud Storage URI of a folder, in the format gs:///. A sub-folder containing exported files will be created below it.
 * @member {String} destinationGcsFolder
 */
ExportMetadataRequest.prototype['destinationGcsFolder'] = undefined;

/**
 * Optional. A request ID. Specify a unique request ID to allow the server to ignore the request if it has completed. The server will ignore subsequent requests that provide a duplicate request ID for at least 60 minutes after the first request.For example, if an initial request times out, followed by another request with the same request ID, the server ignores the second request to prevent the creation of duplicate commitments.The request ID must be a valid UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format). A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
 * @member {String} requestId
 */
ExportMetadataRequest.prototype['requestId'] = undefined;





/**
 * Allowed values for the <code>databaseDumpType</code> property.
 * @enum {String}
 * @readonly
 */
ExportMetadataRequest['DatabaseDumpTypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "MYSQL"
     * @const
     */
    "MYSQL": "MYSQL",

    /**
     * value: "AVRO"
     * @const
     */
    "AVRO": "AVRO"
};



export default ExportMetadataRequest;

