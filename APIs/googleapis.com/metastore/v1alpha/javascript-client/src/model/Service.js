/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EncryptionConfig from './EncryptionConfig';
import HiveMetastoreConfig from './HiveMetastoreConfig';
import MaintenanceWindow from './MaintenanceWindow';
import MetadataIntegration from './MetadataIntegration';
import MetadataManagementActivity from './MetadataManagementActivity';
import NetworkConfig from './NetworkConfig';
import ScalingConfig from './ScalingConfig';
import ScheduledBackup from './ScheduledBackup';
import TelemetryConfig from './TelemetryConfig';

/**
 * The Service model module.
 * @module model/Service
 * @version v1alpha
 */
class Service {
    /**
     * Constructs a new <code>Service</code>.
     * A managed metastore service that serves metadata queries.
     * @alias module:model/Service
     */
    constructor() { 
        
        Service.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Service</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Service} obj Optional instance to populate.
     * @return {module:model/Service} The populated <code>Service</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Service();

            if (data.hasOwnProperty('artifactGcsUri')) {
                obj['artifactGcsUri'] = ApiClient.convertToType(data['artifactGcsUri'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('databaseType')) {
                obj['databaseType'] = ApiClient.convertToType(data['databaseType'], 'String');
            }
            if (data.hasOwnProperty('encryptionConfig')) {
                obj['encryptionConfig'] = EncryptionConfig.constructFromObject(data['encryptionConfig']);
            }
            if (data.hasOwnProperty('endpointUri')) {
                obj['endpointUri'] = ApiClient.convertToType(data['endpointUri'], 'String');
            }
            if (data.hasOwnProperty('hiveMetastoreConfig')) {
                obj['hiveMetastoreConfig'] = HiveMetastoreConfig.constructFromObject(data['hiveMetastoreConfig']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('maintenanceWindow')) {
                obj['maintenanceWindow'] = MaintenanceWindow.constructFromObject(data['maintenanceWindow']);
            }
            if (data.hasOwnProperty('metadataIntegration')) {
                obj['metadataIntegration'] = MetadataIntegration.constructFromObject(data['metadataIntegration']);
            }
            if (data.hasOwnProperty('metadataManagementActivity')) {
                obj['metadataManagementActivity'] = MetadataManagementActivity.constructFromObject(data['metadataManagementActivity']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('networkConfig')) {
                obj['networkConfig'] = NetworkConfig.constructFromObject(data['networkConfig']);
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('releaseChannel')) {
                obj['releaseChannel'] = ApiClient.convertToType(data['releaseChannel'], 'String');
            }
            if (data.hasOwnProperty('scalingConfig')) {
                obj['scalingConfig'] = ScalingConfig.constructFromObject(data['scalingConfig']);
            }
            if (data.hasOwnProperty('scheduledBackup')) {
                obj['scheduledBackup'] = ScheduledBackup.constructFromObject(data['scheduledBackup']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateMessage')) {
                obj['stateMessage'] = ApiClient.convertToType(data['stateMessage'], 'String');
            }
            if (data.hasOwnProperty('telemetryConfig')) {
                obj['telemetryConfig'] = TelemetryConfig.constructFromObject(data['telemetryConfig']);
            }
            if (data.hasOwnProperty('tier')) {
                obj['tier'] = ApiClient.convertToType(data['tier'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Service</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Service</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['artifactGcsUri'] && !(typeof data['artifactGcsUri'] === 'string' || data['artifactGcsUri'] instanceof String)) {
            throw new Error("Expected the field `artifactGcsUri` to be a primitive type in the JSON string but got " + data['artifactGcsUri']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['databaseType'] && !(typeof data['databaseType'] === 'string' || data['databaseType'] instanceof String)) {
            throw new Error("Expected the field `databaseType` to be a primitive type in the JSON string but got " + data['databaseType']);
        }
        // validate the optional field `encryptionConfig`
        if (data['encryptionConfig']) { // data not null
          EncryptionConfig.validateJSON(data['encryptionConfig']);
        }
        // ensure the json data is a string
        if (data['endpointUri'] && !(typeof data['endpointUri'] === 'string' || data['endpointUri'] instanceof String)) {
            throw new Error("Expected the field `endpointUri` to be a primitive type in the JSON string but got " + data['endpointUri']);
        }
        // validate the optional field `hiveMetastoreConfig`
        if (data['hiveMetastoreConfig']) { // data not null
          HiveMetastoreConfig.validateJSON(data['hiveMetastoreConfig']);
        }
        // validate the optional field `maintenanceWindow`
        if (data['maintenanceWindow']) { // data not null
          MaintenanceWindow.validateJSON(data['maintenanceWindow']);
        }
        // validate the optional field `metadataIntegration`
        if (data['metadataIntegration']) { // data not null
          MetadataIntegration.validateJSON(data['metadataIntegration']);
        }
        // validate the optional field `metadataManagementActivity`
        if (data['metadataManagementActivity']) { // data not null
          MetadataManagementActivity.validateJSON(data['metadataManagementActivity']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // validate the optional field `networkConfig`
        if (data['networkConfig']) { // data not null
          NetworkConfig.validateJSON(data['networkConfig']);
        }
        // ensure the json data is a string
        if (data['releaseChannel'] && !(typeof data['releaseChannel'] === 'string' || data['releaseChannel'] instanceof String)) {
            throw new Error("Expected the field `releaseChannel` to be a primitive type in the JSON string but got " + data['releaseChannel']);
        }
        // validate the optional field `scalingConfig`
        if (data['scalingConfig']) { // data not null
          ScalingConfig.validateJSON(data['scalingConfig']);
        }
        // validate the optional field `scheduledBackup`
        if (data['scheduledBackup']) { // data not null
          ScheduledBackup.validateJSON(data['scheduledBackup']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['stateMessage'] && !(typeof data['stateMessage'] === 'string' || data['stateMessage'] instanceof String)) {
            throw new Error("Expected the field `stateMessage` to be a primitive type in the JSON string but got " + data['stateMessage']);
        }
        // validate the optional field `telemetryConfig`
        if (data['telemetryConfig']) { // data not null
          TelemetryConfig.validateJSON(data['telemetryConfig']);
        }
        // ensure the json data is a string
        if (data['tier'] && !(typeof data['tier'] === 'string' || data['tier'] instanceof String)) {
            throw new Error("Expected the field `tier` to be a primitive type in the JSON string but got " + data['tier']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
 * @member {String} artifactGcsUri
 */
Service.prototype['artifactGcsUri'] = undefined;

/**
 * Output only. The time when the metastore service was created.
 * @member {String} createTime
 */
Service.prototype['createTime'] = undefined;

/**
 * Immutable. The database type that the Metastore service stores its data.
 * @member {module:model/Service.DatabaseTypeEnum} databaseType
 */
Service.prototype['databaseType'] = undefined;

/**
 * @member {module:model/EncryptionConfig} encryptionConfig
 */
Service.prototype['encryptionConfig'] = undefined;

/**
 * Output only. The URI of the endpoint used to access the metastore service.
 * @member {String} endpointUri
 */
Service.prototype['endpointUri'] = undefined;

/**
 * @member {module:model/HiveMetastoreConfig} hiveMetastoreConfig
 */
Service.prototype['hiveMetastoreConfig'] = undefined;

/**
 * User-defined labels for the metastore service.
 * @member {Object.<String, String>} labels
 */
Service.prototype['labels'] = undefined;

/**
 * @member {module:model/MaintenanceWindow} maintenanceWindow
 */
Service.prototype['maintenanceWindow'] = undefined;

/**
 * @member {module:model/MetadataIntegration} metadataIntegration
 */
Service.prototype['metadataIntegration'] = undefined;

/**
 * @member {module:model/MetadataManagementActivity} metadataManagementActivity
 */
Service.prototype['metadataManagementActivity'] = undefined;

/**
 * Immutable. The relative resource name of the metastore service, in the following format:projects/{project_number}/locations/{location_id}/services/{service_id}.
 * @member {String} name
 */
Service.prototype['name'] = undefined;

/**
 * Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.
 * @member {String} network
 */
Service.prototype['network'] = undefined;

/**
 * @member {module:model/NetworkConfig} networkConfig
 */
Service.prototype['networkConfig'] = undefined;

/**
 * The TCP port at which the metastore service is reached. Default: 9083.
 * @member {Number} port
 */
Service.prototype['port'] = undefined;

/**
 * Immutable. The release channel of the service. If unspecified, defaults to STABLE.
 * @member {module:model/Service.ReleaseChannelEnum} releaseChannel
 */
Service.prototype['releaseChannel'] = undefined;

/**
 * @member {module:model/ScalingConfig} scalingConfig
 */
Service.prototype['scalingConfig'] = undefined;

/**
 * @member {module:model/ScheduledBackup} scheduledBackup
 */
Service.prototype['scheduledBackup'] = undefined;

/**
 * Output only. The current state of the metastore service.
 * @member {module:model/Service.StateEnum} state
 */
Service.prototype['state'] = undefined;

/**
 * Output only. Additional information about the current state of the metastore service, if available.
 * @member {String} stateMessage
 */
Service.prototype['stateMessage'] = undefined;

/**
 * @member {module:model/TelemetryConfig} telemetryConfig
 */
Service.prototype['telemetryConfig'] = undefined;

/**
 * The tier of the service.
 * @member {module:model/Service.TierEnum} tier
 */
Service.prototype['tier'] = undefined;

/**
 * Output only. The globally unique resource identifier of the metastore service.
 * @member {String} uid
 */
Service.prototype['uid'] = undefined;

/**
 * Output only. The time when the metastore service was last updated.
 * @member {String} updateTime
 */
Service.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>databaseType</code> property.
 * @enum {String}
 * @readonly
 */
Service['DatabaseTypeEnum'] = {

    /**
     * value: "DATABASE_TYPE_UNSPECIFIED"
     * @const
     */
    "DATABASE_TYPE_UNSPECIFIED": "DATABASE_TYPE_UNSPECIFIED",

    /**
     * value: "MYSQL"
     * @const
     */
    "MYSQL": "MYSQL",

    /**
     * value: "SPANNER"
     * @const
     */
    "SPANNER": "SPANNER"
};


/**
 * Allowed values for the <code>releaseChannel</code> property.
 * @enum {String}
 * @readonly
 */
Service['ReleaseChannelEnum'] = {

    /**
     * value: "RELEASE_CHANNEL_UNSPECIFIED"
     * @const
     */
    "RELEASE_CHANNEL_UNSPECIFIED": "RELEASE_CHANNEL_UNSPECIFIED",

    /**
     * value: "CANARY"
     * @const
     */
    "CANARY": "CANARY",

    /**
     * value: "STABLE"
     * @const
     */
    "STABLE": "STABLE"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Service['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "SUSPENDING"
     * @const
     */
    "SUSPENDING": "SUSPENDING",

    /**
     * value: "SUSPENDED"
     * @const
     */
    "SUSPENDED": "SUSPENDED",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR"
};


/**
 * Allowed values for the <code>tier</code> property.
 * @enum {String}
 * @readonly
 */
Service['TierEnum'] = {

    /**
     * value: "TIER_UNSPECIFIED"
     * @const
     */
    "TIER_UNSPECIFIED": "TIER_UNSPECIFIED",

    /**
     * value: "DEVELOPER"
     * @const
     */
    "DEVELOPER": "DEVELOPER",

    /**
     * value: "ENTERPRISE"
     * @const
     */
    "ENTERPRISE": "ENTERPRISE"
};



export default Service;

