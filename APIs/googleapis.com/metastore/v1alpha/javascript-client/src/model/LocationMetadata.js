/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HiveMetastoreVersion from './HiveMetastoreVersion';
import MultiRegionMetadata from './MultiRegionMetadata';

/**
 * The LocationMetadata model module.
 * @module model/LocationMetadata
 * @version v1alpha
 */
class LocationMetadata {
    /**
     * Constructs a new <code>LocationMetadata</code>.
     * Metadata about the service in a location.
     * @alias module:model/LocationMetadata
     */
    constructor() { 
        
        LocationMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LocationMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocationMetadata} obj Optional instance to populate.
     * @return {module:model/LocationMetadata} The populated <code>LocationMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocationMetadata();

            if (data.hasOwnProperty('multiRegionMetadata')) {
                obj['multiRegionMetadata'] = MultiRegionMetadata.constructFromObject(data['multiRegionMetadata']);
            }
            if (data.hasOwnProperty('supportedHiveMetastoreVersions')) {
                obj['supportedHiveMetastoreVersions'] = ApiClient.convertToType(data['supportedHiveMetastoreVersions'], [HiveMetastoreVersion]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LocationMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LocationMetadata</code>.
     */
    static validateJSON(data) {
        // validate the optional field `multiRegionMetadata`
        if (data['multiRegionMetadata']) { // data not null
          MultiRegionMetadata.validateJSON(data['multiRegionMetadata']);
        }
        if (data['supportedHiveMetastoreVersions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['supportedHiveMetastoreVersions'])) {
                throw new Error("Expected the field `supportedHiveMetastoreVersions` to be an array in the JSON data but got " + data['supportedHiveMetastoreVersions']);
            }
            // validate the optional field `supportedHiveMetastoreVersions` (array)
            for (const item of data['supportedHiveMetastoreVersions']) {
                HiveMetastoreVersion.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/MultiRegionMetadata} multiRegionMetadata
 */
LocationMetadata.prototype['multiRegionMetadata'] = undefined;

/**
 * The versions of Hive Metastore that can be used when creating a new metastore service in this location. The server guarantees that exactly one HiveMetastoreVersion in the list will set is_default.
 * @member {Array.<module:model/HiveMetastoreVersion>} supportedHiveMetastoreVersions
 */
LocationMetadata.prototype['supportedHiveMetastoreVersions'] = undefined;






export default LocationMetadata;

