/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Consumer model module.
 * @module model/Consumer
 * @version v1alpha
 */
class Consumer {
    /**
     * Constructs a new <code>Consumer</code>.
     * Contains information of the customer&#39;s network configurations.
     * @alias module:model/Consumer
     */
    constructor() { 
        
        Consumer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Consumer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Consumer} obj Optional instance to populate.
     * @return {module:model/Consumer} The populated <code>Consumer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Consumer();

            if (data.hasOwnProperty('endpointLocation')) {
                obj['endpointLocation'] = ApiClient.convertToType(data['endpointLocation'], 'String');
            }
            if (data.hasOwnProperty('endpointUri')) {
                obj['endpointUri'] = ApiClient.convertToType(data['endpointUri'], 'String');
            }
            if (data.hasOwnProperty('subnetwork')) {
                obj['subnetwork'] = ApiClient.convertToType(data['subnetwork'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Consumer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Consumer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['endpointLocation'] && !(typeof data['endpointLocation'] === 'string' || data['endpointLocation'] instanceof String)) {
            throw new Error("Expected the field `endpointLocation` to be a primitive type in the JSON string but got " + data['endpointLocation']);
        }
        // ensure the json data is a string
        if (data['endpointUri'] && !(typeof data['endpointUri'] === 'string' || data['endpointUri'] instanceof String)) {
            throw new Error("Expected the field `endpointUri` to be a primitive type in the JSON string but got " + data['endpointUri']);
        }
        // ensure the json data is a string
        if (data['subnetwork'] && !(typeof data['subnetwork'] === 'string' || data['subnetwork'] instanceof String)) {
            throw new Error("Expected the field `subnetwork` to be a primitive type in the JSON string but got " + data['subnetwork']);
        }

        return true;
    }


}



/**
 * Output only. The location of the endpoint URI. Format: projects/{project}/locations/{location}.
 * @member {String} endpointLocation
 */
Consumer.prototype['endpointLocation'] = undefined;

/**
 * Output only. The URI of the endpoint used to access the metastore service.
 * @member {String} endpointUri
 */
Consumer.prototype['endpointUri'] = undefined;

/**
 * Immutable. The subnetwork of the customer project from which an IP address is reserved and used as the Dataproc Metastore service's endpoint. It is accessible to hosts in the subnet and to all hosts in a subnet in the same region and same network. There must be at least one IP address available in the subnet's primary range. The subnet is specified in the following form:projects/{project_number}/regions/{region_id}/subnetworks/{subnetwork_id}
 * @member {String} subnetwork
 */
Consumer.prototype['subnetwork'] = undefined;






export default Consumer;

