/*
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for DataprocMetastore.ExportMetadata.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:14.340752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportMetadataRequest {
  /**
   * Optional. The type of the database dump. If unspecified, defaults to MYSQL.
   */
  @JsonAdapter(DatabaseDumpTypeEnum.Adapter.class)
  public enum DatabaseDumpTypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    MYSQL("MYSQL"),
    
    AVRO("AVRO");

    private String value;

    DatabaseDumpTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DatabaseDumpTypeEnum fromValue(String value) {
      for (DatabaseDumpTypeEnum b : DatabaseDumpTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DatabaseDumpTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DatabaseDumpTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DatabaseDumpTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DatabaseDumpTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DatabaseDumpTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATABASE_DUMP_TYPE = "databaseDumpType";
  @SerializedName(SERIALIZED_NAME_DATABASE_DUMP_TYPE)
  private DatabaseDumpTypeEnum databaseDumpType;

  public static final String SERIALIZED_NAME_DESTINATION_GCS_FOLDER = "destinationGcsFolder";
  @SerializedName(SERIALIZED_NAME_DESTINATION_GCS_FOLDER)
  private String destinationGcsFolder;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public ExportMetadataRequest() {
  }

  public ExportMetadataRequest databaseDumpType(DatabaseDumpTypeEnum databaseDumpType) {
    this.databaseDumpType = databaseDumpType;
    return this;
  }

  /**
   * Optional. The type of the database dump. If unspecified, defaults to MYSQL.
   * @return databaseDumpType
   */
  @javax.annotation.Nullable
  public DatabaseDumpTypeEnum getDatabaseDumpType() {
    return databaseDumpType;
  }

  public void setDatabaseDumpType(DatabaseDumpTypeEnum databaseDumpType) {
    this.databaseDumpType = databaseDumpType;
  }


  public ExportMetadataRequest destinationGcsFolder(String destinationGcsFolder) {
    this.destinationGcsFolder = destinationGcsFolder;
    return this;
  }

  /**
   * A Cloud Storage URI of a folder, in the format gs:///. A sub-folder containing exported files will be created below it.
   * @return destinationGcsFolder
   */
  @javax.annotation.Nullable
  public String getDestinationGcsFolder() {
    return destinationGcsFolder;
  }

  public void setDestinationGcsFolder(String destinationGcsFolder) {
    this.destinationGcsFolder = destinationGcsFolder;
  }


  public ExportMetadataRequest requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Optional. A request ID. Specify a unique request ID to allow the server to ignore the request if it has completed. The server will ignore subsequent requests that provide a duplicate request ID for at least 60 minutes after the first request.For example, if an initial request times out, followed by another request with the same request ID, the server ignores the second request to prevent the creation of duplicate commitments.The request ID must be a valid UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format). A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportMetadataRequest exportMetadataRequest = (ExportMetadataRequest) o;
    return Objects.equals(this.databaseDumpType, exportMetadataRequest.databaseDumpType) &&
        Objects.equals(this.destinationGcsFolder, exportMetadataRequest.destinationGcsFolder) &&
        Objects.equals(this.requestId, exportMetadataRequest.requestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(databaseDumpType, destinationGcsFolder, requestId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportMetadataRequest {\n");
    sb.append("    databaseDumpType: ").append(toIndentedString(databaseDumpType)).append("\n");
    sb.append("    destinationGcsFolder: ").append(toIndentedString(destinationGcsFolder)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("databaseDumpType");
    openapiFields.add("destinationGcsFolder");
    openapiFields.add("requestId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportMetadataRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportMetadataRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportMetadataRequest is not found in the empty JSON string", ExportMetadataRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportMetadataRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportMetadataRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("databaseDumpType") != null && !jsonObj.get("databaseDumpType").isJsonNull()) && !jsonObj.get("databaseDumpType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseDumpType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseDumpType").toString()));
      }
      // validate the optional field `databaseDumpType`
      if (jsonObj.get("databaseDumpType") != null && !jsonObj.get("databaseDumpType").isJsonNull()) {
        DatabaseDumpTypeEnum.validateJsonElement(jsonObj.get("databaseDumpType"));
      }
      if ((jsonObj.get("destinationGcsFolder") != null && !jsonObj.get("destinationGcsFolder").isJsonNull()) && !jsonObj.get("destinationGcsFolder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationGcsFolder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationGcsFolder").toString()));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportMetadataRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportMetadataRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportMetadataRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportMetadataRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportMetadataRequest>() {
           @Override
           public void write(JsonWriter out, ExportMetadataRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportMetadataRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportMetadataRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportMetadataRequest
   * @throws IOException if the JSON string is invalid with respect to ExportMetadataRequest
   */
  public static ExportMetadataRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportMetadataRequest.class);
  }

  /**
   * Convert an instance of ExportMetadataRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

