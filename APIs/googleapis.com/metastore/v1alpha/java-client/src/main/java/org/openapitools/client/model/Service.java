/*
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.EncryptionConfig;
import org.openapitools.client.model.HiveMetastoreConfig;
import org.openapitools.client.model.MaintenanceWindow;
import org.openapitools.client.model.MetadataIntegration;
import org.openapitools.client.model.MetadataManagementActivity;
import org.openapitools.client.model.NetworkConfig;
import org.openapitools.client.model.ScalingConfig;
import org.openapitools.client.model.ScheduledBackup;
import org.openapitools.client.model.TelemetryConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A managed metastore service that serves metadata queries.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:14.340752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Service {
  public static final String SERIALIZED_NAME_ARTIFACT_GCS_URI = "artifactGcsUri";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_GCS_URI)
  private String artifactGcsUri;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  /**
   * Immutable. The database type that the Metastore service stores its data.
   */
  @JsonAdapter(DatabaseTypeEnum.Adapter.class)
  public enum DatabaseTypeEnum {
    DATABASE_TYPE_UNSPECIFIED("DATABASE_TYPE_UNSPECIFIED"),
    
    MYSQL("MYSQL"),
    
    SPANNER("SPANNER");

    private String value;

    DatabaseTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DatabaseTypeEnum fromValue(String value) {
      for (DatabaseTypeEnum b : DatabaseTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DatabaseTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DatabaseTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DatabaseTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DatabaseTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DatabaseTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATABASE_TYPE = "databaseType";
  @SerializedName(SERIALIZED_NAME_DATABASE_TYPE)
  private DatabaseTypeEnum databaseType;

  public static final String SERIALIZED_NAME_ENCRYPTION_CONFIG = "encryptionConfig";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_CONFIG)
  private EncryptionConfig encryptionConfig;

  public static final String SERIALIZED_NAME_ENDPOINT_URI = "endpointUri";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_URI)
  private String endpointUri;

  public static final String SERIALIZED_NAME_HIVE_METASTORE_CONFIG = "hiveMetastoreConfig";
  @SerializedName(SERIALIZED_NAME_HIVE_METASTORE_CONFIG)
  private HiveMetastoreConfig hiveMetastoreConfig;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_MAINTENANCE_WINDOW = "maintenanceWindow";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE_WINDOW)
  private MaintenanceWindow maintenanceWindow;

  public static final String SERIALIZED_NAME_METADATA_INTEGRATION = "metadataIntegration";
  @SerializedName(SERIALIZED_NAME_METADATA_INTEGRATION)
  private MetadataIntegration metadataIntegration;

  public static final String SERIALIZED_NAME_METADATA_MANAGEMENT_ACTIVITY = "metadataManagementActivity";
  @SerializedName(SERIALIZED_NAME_METADATA_MANAGEMENT_ACTIVITY)
  private MetadataManagementActivity metadataManagementActivity;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_NETWORK_CONFIG = "networkConfig";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIG)
  private NetworkConfig networkConfig;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  /**
   * Immutable. The release channel of the service. If unspecified, defaults to STABLE.
   */
  @JsonAdapter(ReleaseChannelEnum.Adapter.class)
  public enum ReleaseChannelEnum {
    RELEASE_CHANNEL_UNSPECIFIED("RELEASE_CHANNEL_UNSPECIFIED"),
    
    CANARY("CANARY"),
    
    STABLE("STABLE");

    private String value;

    ReleaseChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReleaseChannelEnum fromValue(String value) {
      for (ReleaseChannelEnum b : ReleaseChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReleaseChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReleaseChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReleaseChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReleaseChannelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReleaseChannelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELEASE_CHANNEL = "releaseChannel";
  @SerializedName(SERIALIZED_NAME_RELEASE_CHANNEL)
  private ReleaseChannelEnum releaseChannel;

  public static final String SERIALIZED_NAME_SCALING_CONFIG = "scalingConfig";
  @SerializedName(SERIALIZED_NAME_SCALING_CONFIG)
  private ScalingConfig scalingConfig;

  public static final String SERIALIZED_NAME_SCHEDULED_BACKUP = "scheduledBackup";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_BACKUP)
  private ScheduledBackup scheduledBackup;

  /**
   * Output only. The current state of the metastore service.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    ACTIVE("ACTIVE"),
    
    SUSPENDING("SUSPENDING"),
    
    SUSPENDED("SUSPENDED"),
    
    UPDATING("UPDATING"),
    
    DELETING("DELETING"),
    
    ERROR("ERROR");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATE_MESSAGE = "stateMessage";
  @SerializedName(SERIALIZED_NAME_STATE_MESSAGE)
  private String stateMessage;

  public static final String SERIALIZED_NAME_TELEMETRY_CONFIG = "telemetryConfig";
  @SerializedName(SERIALIZED_NAME_TELEMETRY_CONFIG)
  private TelemetryConfig telemetryConfig;

  /**
   * The tier of the service.
   */
  @JsonAdapter(TierEnum.Adapter.class)
  public enum TierEnum {
    TIER_UNSPECIFIED("TIER_UNSPECIFIED"),
    
    DEVELOPER("DEVELOPER"),
    
    ENTERPRISE("ENTERPRISE");

    private String value;

    TierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TierEnum fromValue(String value) {
      for (TierEnum b : TierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private TierEnum tier;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Service() {
  }

  public Service(
     String artifactGcsUri, 
     String createTime, 
     String endpointUri, 
     StateEnum state, 
     String stateMessage, 
     String uid, 
     String updateTime
  ) {
    this();
    this.artifactGcsUri = artifactGcsUri;
    this.createTime = createTime;
    this.endpointUri = endpointUri;
    this.state = state;
    this.stateMessage = stateMessage;
    this.uid = uid;
    this.updateTime = updateTime;
  }

  /**
   * Output only. A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
   * @return artifactGcsUri
   */
  @javax.annotation.Nullable
  public String getArtifactGcsUri() {
    return artifactGcsUri;
  }



  /**
   * Output only. The time when the metastore service was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Service databaseType(DatabaseTypeEnum databaseType) {
    this.databaseType = databaseType;
    return this;
  }

  /**
   * Immutable. The database type that the Metastore service stores its data.
   * @return databaseType
   */
  @javax.annotation.Nullable
  public DatabaseTypeEnum getDatabaseType() {
    return databaseType;
  }

  public void setDatabaseType(DatabaseTypeEnum databaseType) {
    this.databaseType = databaseType;
  }


  public Service encryptionConfig(EncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
    return this;
  }

  /**
   * Get encryptionConfig
   * @return encryptionConfig
   */
  @javax.annotation.Nullable
  public EncryptionConfig getEncryptionConfig() {
    return encryptionConfig;
  }

  public void setEncryptionConfig(EncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
  }


  /**
   * Output only. The URI of the endpoint used to access the metastore service.
   * @return endpointUri
   */
  @javax.annotation.Nullable
  public String getEndpointUri() {
    return endpointUri;
  }



  public Service hiveMetastoreConfig(HiveMetastoreConfig hiveMetastoreConfig) {
    this.hiveMetastoreConfig = hiveMetastoreConfig;
    return this;
  }

  /**
   * Get hiveMetastoreConfig
   * @return hiveMetastoreConfig
   */
  @javax.annotation.Nullable
  public HiveMetastoreConfig getHiveMetastoreConfig() {
    return hiveMetastoreConfig;
  }

  public void setHiveMetastoreConfig(HiveMetastoreConfig hiveMetastoreConfig) {
    this.hiveMetastoreConfig = hiveMetastoreConfig;
  }


  public Service labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Service putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * User-defined labels for the metastore service.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Service maintenanceWindow(MaintenanceWindow maintenanceWindow) {
    this.maintenanceWindow = maintenanceWindow;
    return this;
  }

  /**
   * Get maintenanceWindow
   * @return maintenanceWindow
   */
  @javax.annotation.Nullable
  public MaintenanceWindow getMaintenanceWindow() {
    return maintenanceWindow;
  }

  public void setMaintenanceWindow(MaintenanceWindow maintenanceWindow) {
    this.maintenanceWindow = maintenanceWindow;
  }


  public Service metadataIntegration(MetadataIntegration metadataIntegration) {
    this.metadataIntegration = metadataIntegration;
    return this;
  }

  /**
   * Get metadataIntegration
   * @return metadataIntegration
   */
  @javax.annotation.Nullable
  public MetadataIntegration getMetadataIntegration() {
    return metadataIntegration;
  }

  public void setMetadataIntegration(MetadataIntegration metadataIntegration) {
    this.metadataIntegration = metadataIntegration;
  }


  public Service metadataManagementActivity(MetadataManagementActivity metadataManagementActivity) {
    this.metadataManagementActivity = metadataManagementActivity;
    return this;
  }

  /**
   * Get metadataManagementActivity
   * @return metadataManagementActivity
   */
  @javax.annotation.Nullable
  public MetadataManagementActivity getMetadataManagementActivity() {
    return metadataManagementActivity;
  }

  public void setMetadataManagementActivity(MetadataManagementActivity metadataManagementActivity) {
    this.metadataManagementActivity = metadataManagementActivity;
  }


  public Service name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. The relative resource name of the metastore service, in the following format:projects/{project_number}/locations/{location_id}/services/{service_id}.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Service network(String network) {
    this.network = network;
    return this;
  }

  /**
   * Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public Service networkConfig(NetworkConfig networkConfig) {
    this.networkConfig = networkConfig;
    return this;
  }

  /**
   * Get networkConfig
   * @return networkConfig
   */
  @javax.annotation.Nullable
  public NetworkConfig getNetworkConfig() {
    return networkConfig;
  }

  public void setNetworkConfig(NetworkConfig networkConfig) {
    this.networkConfig = networkConfig;
  }


  public Service port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * The TCP port at which the metastore service is reached. Default: 9083.
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public Service releaseChannel(ReleaseChannelEnum releaseChannel) {
    this.releaseChannel = releaseChannel;
    return this;
  }

  /**
   * Immutable. The release channel of the service. If unspecified, defaults to STABLE.
   * @return releaseChannel
   */
  @javax.annotation.Nullable
  public ReleaseChannelEnum getReleaseChannel() {
    return releaseChannel;
  }

  public void setReleaseChannel(ReleaseChannelEnum releaseChannel) {
    this.releaseChannel = releaseChannel;
  }


  public Service scalingConfig(ScalingConfig scalingConfig) {
    this.scalingConfig = scalingConfig;
    return this;
  }

  /**
   * Get scalingConfig
   * @return scalingConfig
   */
  @javax.annotation.Nullable
  public ScalingConfig getScalingConfig() {
    return scalingConfig;
  }

  public void setScalingConfig(ScalingConfig scalingConfig) {
    this.scalingConfig = scalingConfig;
  }


  public Service scheduledBackup(ScheduledBackup scheduledBackup) {
    this.scheduledBackup = scheduledBackup;
    return this;
  }

  /**
   * Get scheduledBackup
   * @return scheduledBackup
   */
  @javax.annotation.Nullable
  public ScheduledBackup getScheduledBackup() {
    return scheduledBackup;
  }

  public void setScheduledBackup(ScheduledBackup scheduledBackup) {
    this.scheduledBackup = scheduledBackup;
  }


  /**
   * Output only. The current state of the metastore service.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Additional information about the current state of the metastore service, if available.
   * @return stateMessage
   */
  @javax.annotation.Nullable
  public String getStateMessage() {
    return stateMessage;
  }



  public Service telemetryConfig(TelemetryConfig telemetryConfig) {
    this.telemetryConfig = telemetryConfig;
    return this;
  }

  /**
   * Get telemetryConfig
   * @return telemetryConfig
   */
  @javax.annotation.Nullable
  public TelemetryConfig getTelemetryConfig() {
    return telemetryConfig;
  }

  public void setTelemetryConfig(TelemetryConfig telemetryConfig) {
    this.telemetryConfig = telemetryConfig;
  }


  public Service tier(TierEnum tier) {
    this.tier = tier;
    return this;
  }

  /**
   * The tier of the service.
   * @return tier
   */
  @javax.annotation.Nullable
  public TierEnum getTier() {
    return tier;
  }

  public void setTier(TierEnum tier) {
    this.tier = tier;
  }


  /**
   * Output only. The globally unique resource identifier of the metastore service.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. The time when the metastore service was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Service service = (Service) o;
    return Objects.equals(this.artifactGcsUri, service.artifactGcsUri) &&
        Objects.equals(this.createTime, service.createTime) &&
        Objects.equals(this.databaseType, service.databaseType) &&
        Objects.equals(this.encryptionConfig, service.encryptionConfig) &&
        Objects.equals(this.endpointUri, service.endpointUri) &&
        Objects.equals(this.hiveMetastoreConfig, service.hiveMetastoreConfig) &&
        Objects.equals(this.labels, service.labels) &&
        Objects.equals(this.maintenanceWindow, service.maintenanceWindow) &&
        Objects.equals(this.metadataIntegration, service.metadataIntegration) &&
        Objects.equals(this.metadataManagementActivity, service.metadataManagementActivity) &&
        Objects.equals(this.name, service.name) &&
        Objects.equals(this.network, service.network) &&
        Objects.equals(this.networkConfig, service.networkConfig) &&
        Objects.equals(this.port, service.port) &&
        Objects.equals(this.releaseChannel, service.releaseChannel) &&
        Objects.equals(this.scalingConfig, service.scalingConfig) &&
        Objects.equals(this.scheduledBackup, service.scheduledBackup) &&
        Objects.equals(this.state, service.state) &&
        Objects.equals(this.stateMessage, service.stateMessage) &&
        Objects.equals(this.telemetryConfig, service.telemetryConfig) &&
        Objects.equals(this.tier, service.tier) &&
        Objects.equals(this.uid, service.uid) &&
        Objects.equals(this.updateTime, service.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactGcsUri, createTime, databaseType, encryptionConfig, endpointUri, hiveMetastoreConfig, labels, maintenanceWindow, metadataIntegration, metadataManagementActivity, name, network, networkConfig, port, releaseChannel, scalingConfig, scheduledBackup, state, stateMessage, telemetryConfig, tier, uid, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Service {\n");
    sb.append("    artifactGcsUri: ").append(toIndentedString(artifactGcsUri)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    databaseType: ").append(toIndentedString(databaseType)).append("\n");
    sb.append("    encryptionConfig: ").append(toIndentedString(encryptionConfig)).append("\n");
    sb.append("    endpointUri: ").append(toIndentedString(endpointUri)).append("\n");
    sb.append("    hiveMetastoreConfig: ").append(toIndentedString(hiveMetastoreConfig)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    maintenanceWindow: ").append(toIndentedString(maintenanceWindow)).append("\n");
    sb.append("    metadataIntegration: ").append(toIndentedString(metadataIntegration)).append("\n");
    sb.append("    metadataManagementActivity: ").append(toIndentedString(metadataManagementActivity)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    networkConfig: ").append(toIndentedString(networkConfig)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    releaseChannel: ").append(toIndentedString(releaseChannel)).append("\n");
    sb.append("    scalingConfig: ").append(toIndentedString(scalingConfig)).append("\n");
    sb.append("    scheduledBackup: ").append(toIndentedString(scheduledBackup)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateMessage: ").append(toIndentedString(stateMessage)).append("\n");
    sb.append("    telemetryConfig: ").append(toIndentedString(telemetryConfig)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artifactGcsUri");
    openapiFields.add("createTime");
    openapiFields.add("databaseType");
    openapiFields.add("encryptionConfig");
    openapiFields.add("endpointUri");
    openapiFields.add("hiveMetastoreConfig");
    openapiFields.add("labels");
    openapiFields.add("maintenanceWindow");
    openapiFields.add("metadataIntegration");
    openapiFields.add("metadataManagementActivity");
    openapiFields.add("name");
    openapiFields.add("network");
    openapiFields.add("networkConfig");
    openapiFields.add("port");
    openapiFields.add("releaseChannel");
    openapiFields.add("scalingConfig");
    openapiFields.add("scheduledBackup");
    openapiFields.add("state");
    openapiFields.add("stateMessage");
    openapiFields.add("telemetryConfig");
    openapiFields.add("tier");
    openapiFields.add("uid");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Service
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Service.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Service is not found in the empty JSON string", Service.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Service.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Service` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("artifactGcsUri") != null && !jsonObj.get("artifactGcsUri").isJsonNull()) && !jsonObj.get("artifactGcsUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artifactGcsUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artifactGcsUri").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("databaseType") != null && !jsonObj.get("databaseType").isJsonNull()) && !jsonObj.get("databaseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseType").toString()));
      }
      // validate the optional field `databaseType`
      if (jsonObj.get("databaseType") != null && !jsonObj.get("databaseType").isJsonNull()) {
        DatabaseTypeEnum.validateJsonElement(jsonObj.get("databaseType"));
      }
      // validate the optional field `encryptionConfig`
      if (jsonObj.get("encryptionConfig") != null && !jsonObj.get("encryptionConfig").isJsonNull()) {
        EncryptionConfig.validateJsonElement(jsonObj.get("encryptionConfig"));
      }
      if ((jsonObj.get("endpointUri") != null && !jsonObj.get("endpointUri").isJsonNull()) && !jsonObj.get("endpointUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointUri").toString()));
      }
      // validate the optional field `hiveMetastoreConfig`
      if (jsonObj.get("hiveMetastoreConfig") != null && !jsonObj.get("hiveMetastoreConfig").isJsonNull()) {
        HiveMetastoreConfig.validateJsonElement(jsonObj.get("hiveMetastoreConfig"));
      }
      // validate the optional field `maintenanceWindow`
      if (jsonObj.get("maintenanceWindow") != null && !jsonObj.get("maintenanceWindow").isJsonNull()) {
        MaintenanceWindow.validateJsonElement(jsonObj.get("maintenanceWindow"));
      }
      // validate the optional field `metadataIntegration`
      if (jsonObj.get("metadataIntegration") != null && !jsonObj.get("metadataIntegration").isJsonNull()) {
        MetadataIntegration.validateJsonElement(jsonObj.get("metadataIntegration"));
      }
      // validate the optional field `metadataManagementActivity`
      if (jsonObj.get("metadataManagementActivity") != null && !jsonObj.get("metadataManagementActivity").isJsonNull()) {
        MetadataManagementActivity.validateJsonElement(jsonObj.get("metadataManagementActivity"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      // validate the optional field `networkConfig`
      if (jsonObj.get("networkConfig") != null && !jsonObj.get("networkConfig").isJsonNull()) {
        NetworkConfig.validateJsonElement(jsonObj.get("networkConfig"));
      }
      if ((jsonObj.get("releaseChannel") != null && !jsonObj.get("releaseChannel").isJsonNull()) && !jsonObj.get("releaseChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releaseChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releaseChannel").toString()));
      }
      // validate the optional field `releaseChannel`
      if (jsonObj.get("releaseChannel") != null && !jsonObj.get("releaseChannel").isJsonNull()) {
        ReleaseChannelEnum.validateJsonElement(jsonObj.get("releaseChannel"));
      }
      // validate the optional field `scalingConfig`
      if (jsonObj.get("scalingConfig") != null && !jsonObj.get("scalingConfig").isJsonNull()) {
        ScalingConfig.validateJsonElement(jsonObj.get("scalingConfig"));
      }
      // validate the optional field `scheduledBackup`
      if (jsonObj.get("scheduledBackup") != null && !jsonObj.get("scheduledBackup").isJsonNull()) {
        ScheduledBackup.validateJsonElement(jsonObj.get("scheduledBackup"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("stateMessage") != null && !jsonObj.get("stateMessage").isJsonNull()) && !jsonObj.get("stateMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateMessage").toString()));
      }
      // validate the optional field `telemetryConfig`
      if (jsonObj.get("telemetryConfig") != null && !jsonObj.get("telemetryConfig").isJsonNull()) {
        TelemetryConfig.validateJsonElement(jsonObj.get("telemetryConfig"));
      }
      if ((jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) && !jsonObj.get("tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier").toString()));
      }
      // validate the optional field `tier`
      if (jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) {
        TierEnum.validateJsonElement(jsonObj.get("tier"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Service.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Service' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Service> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Service.class));

       return (TypeAdapter<T>) new TypeAdapter<Service>() {
           @Override
           public void write(JsonWriter out, Service value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Service read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Service given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Service
   * @throws IOException if the JSON string is invalid with respect to Service
   */
  public static Service fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Service.class);
  }

  /**
   * Convert an instance of Service to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

