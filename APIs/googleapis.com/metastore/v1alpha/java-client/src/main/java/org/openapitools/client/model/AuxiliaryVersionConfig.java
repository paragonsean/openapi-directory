/*
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.NetworkConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration information for the auxiliary service versions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:14.340752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuxiliaryVersionConfig {
  public static final String SERIALIZED_NAME_CONFIG_OVERRIDES = "configOverrides";
  @SerializedName(SERIALIZED_NAME_CONFIG_OVERRIDES)
  private Map<String, String> configOverrides = new HashMap<>();

  public static final String SERIALIZED_NAME_NETWORK_CONFIG = "networkConfig";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIG)
  private NetworkConfig networkConfig;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public AuxiliaryVersionConfig() {
  }

  public AuxiliaryVersionConfig configOverrides(Map<String, String> configOverrides) {
    this.configOverrides = configOverrides;
    return this;
  }

  public AuxiliaryVersionConfig putConfigOverridesItem(String key, String configOverridesItem) {
    if (this.configOverrides == null) {
      this.configOverrides = new HashMap<>();
    }
    this.configOverrides.put(key, configOverridesItem);
    return this;
  }

  /**
   * A mapping of Hive metastore configuration key-value pairs to apply to the auxiliary Hive metastore (configured in hive-site.xml) in addition to the primary version&#39;s overrides. If keys are present in both the auxiliary version&#39;s overrides and the primary version&#39;s overrides, the value from the auxiliary version&#39;s overrides takes precedence.
   * @return configOverrides
   */
  @javax.annotation.Nullable
  public Map<String, String> getConfigOverrides() {
    return configOverrides;
  }

  public void setConfigOverrides(Map<String, String> configOverrides) {
    this.configOverrides = configOverrides;
  }


  public AuxiliaryVersionConfig networkConfig(NetworkConfig networkConfig) {
    this.networkConfig = networkConfig;
    return this;
  }

  /**
   * Get networkConfig
   * @return networkConfig
   */
  @javax.annotation.Nullable
  public NetworkConfig getNetworkConfig() {
    return networkConfig;
  }

  public void setNetworkConfig(NetworkConfig networkConfig) {
    this.networkConfig = networkConfig;
  }


  public AuxiliaryVersionConfig version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The Hive metastore version of the auxiliary service. It must be less than the primary Hive metastore service&#39;s version.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuxiliaryVersionConfig auxiliaryVersionConfig = (AuxiliaryVersionConfig) o;
    return Objects.equals(this.configOverrides, auxiliaryVersionConfig.configOverrides) &&
        Objects.equals(this.networkConfig, auxiliaryVersionConfig.networkConfig) &&
        Objects.equals(this.version, auxiliaryVersionConfig.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configOverrides, networkConfig, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuxiliaryVersionConfig {\n");
    sb.append("    configOverrides: ").append(toIndentedString(configOverrides)).append("\n");
    sb.append("    networkConfig: ").append(toIndentedString(networkConfig)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configOverrides");
    openapiFields.add("networkConfig");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuxiliaryVersionConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuxiliaryVersionConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuxiliaryVersionConfig is not found in the empty JSON string", AuxiliaryVersionConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuxiliaryVersionConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuxiliaryVersionConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `networkConfig`
      if (jsonObj.get("networkConfig") != null && !jsonObj.get("networkConfig").isJsonNull()) {
        NetworkConfig.validateJsonElement(jsonObj.get("networkConfig"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuxiliaryVersionConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuxiliaryVersionConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuxiliaryVersionConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuxiliaryVersionConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<AuxiliaryVersionConfig>() {
           @Override
           public void write(JsonWriter out, AuxiliaryVersionConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuxiliaryVersionConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuxiliaryVersionConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuxiliaryVersionConfig
   * @throws IOException if the JSON string is invalid with respect to AuxiliaryVersionConfig
   */
  public static AuxiliaryVersionConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuxiliaryVersionConfig.class);
  }

  /**
   * Convert an instance of AuxiliaryVersionConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

