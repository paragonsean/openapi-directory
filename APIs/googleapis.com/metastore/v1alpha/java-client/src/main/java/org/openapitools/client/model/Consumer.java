/*
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information of the customer&#39;s network configurations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:14.340752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Consumer {
  public static final String SERIALIZED_NAME_ENDPOINT_LOCATION = "endpointLocation";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_LOCATION)
  private String endpointLocation;

  public static final String SERIALIZED_NAME_ENDPOINT_URI = "endpointUri";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_URI)
  private String endpointUri;

  public static final String SERIALIZED_NAME_SUBNETWORK = "subnetwork";
  @SerializedName(SERIALIZED_NAME_SUBNETWORK)
  private String subnetwork;

  public Consumer() {
  }

  public Consumer(
     String endpointLocation, 
     String endpointUri
  ) {
    this();
    this.endpointLocation = endpointLocation;
    this.endpointUri = endpointUri;
  }

  /**
   * Output only. The location of the endpoint URI. Format: projects/{project}/locations/{location}.
   * @return endpointLocation
   */
  @javax.annotation.Nullable
  public String getEndpointLocation() {
    return endpointLocation;
  }



  /**
   * Output only. The URI of the endpoint used to access the metastore service.
   * @return endpointUri
   */
  @javax.annotation.Nullable
  public String getEndpointUri() {
    return endpointUri;
  }



  public Consumer subnetwork(String subnetwork) {
    this.subnetwork = subnetwork;
    return this;
  }

  /**
   * Immutable. The subnetwork of the customer project from which an IP address is reserved and used as the Dataproc Metastore service&#39;s endpoint. It is accessible to hosts in the subnet and to all hosts in a subnet in the same region and same network. There must be at least one IP address available in the subnet&#39;s primary range. The subnet is specified in the following form:projects/{project_number}/regions/{region_id}/subnetworks/{subnetwork_id}
   * @return subnetwork
   */
  @javax.annotation.Nullable
  public String getSubnetwork() {
    return subnetwork;
  }

  public void setSubnetwork(String subnetwork) {
    this.subnetwork = subnetwork;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Consumer consumer = (Consumer) o;
    return Objects.equals(this.endpointLocation, consumer.endpointLocation) &&
        Objects.equals(this.endpointUri, consumer.endpointUri) &&
        Objects.equals(this.subnetwork, consumer.subnetwork);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpointLocation, endpointUri, subnetwork);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Consumer {\n");
    sb.append("    endpointLocation: ").append(toIndentedString(endpointLocation)).append("\n");
    sb.append("    endpointUri: ").append(toIndentedString(endpointUri)).append("\n");
    sb.append("    subnetwork: ").append(toIndentedString(subnetwork)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endpointLocation");
    openapiFields.add("endpointUri");
    openapiFields.add("subnetwork");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Consumer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Consumer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Consumer is not found in the empty JSON string", Consumer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Consumer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Consumer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endpointLocation") != null && !jsonObj.get("endpointLocation").isJsonNull()) && !jsonObj.get("endpointLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointLocation").toString()));
      }
      if ((jsonObj.get("endpointUri") != null && !jsonObj.get("endpointUri").isJsonNull()) && !jsonObj.get("endpointUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointUri").toString()));
      }
      if ((jsonObj.get("subnetwork") != null && !jsonObj.get("subnetwork").isJsonNull()) && !jsonObj.get("subnetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subnetwork").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Consumer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Consumer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Consumer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Consumer.class));

       return (TypeAdapter<T>) new TypeAdapter<Consumer>() {
           @Override
           public void write(JsonWriter out, Consumer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Consumer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Consumer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Consumer
   * @throws IOException if the JSON string is invalid with respect to Consumer
   */
  public static Consumer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Consumer.class);
  }

  /**
   * Convert an instance of Consumer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

