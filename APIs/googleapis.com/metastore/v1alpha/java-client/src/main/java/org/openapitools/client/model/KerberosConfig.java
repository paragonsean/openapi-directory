/*
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Secret;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration information for a Kerberos principal.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:14.340752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KerberosConfig {
  public static final String SERIALIZED_NAME_KEYTAB = "keytab";
  @SerializedName(SERIALIZED_NAME_KEYTAB)
  private Secret keytab;

  public static final String SERIALIZED_NAME_KRB5_CONFIG_GCS_URI = "krb5ConfigGcsUri";
  @SerializedName(SERIALIZED_NAME_KRB5_CONFIG_GCS_URI)
  private String krb5ConfigGcsUri;

  public static final String SERIALIZED_NAME_PRINCIPAL = "principal";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL)
  private String principal;

  public KerberosConfig() {
  }

  public KerberosConfig keytab(Secret keytab) {
    this.keytab = keytab;
    return this;
  }

  /**
   * Get keytab
   * @return keytab
   */
  @javax.annotation.Nullable
  public Secret getKeytab() {
    return keytab;
  }

  public void setKeytab(Secret keytab) {
    this.keytab = keytab;
  }


  public KerberosConfig krb5ConfigGcsUri(String krb5ConfigGcsUri) {
    this.krb5ConfigGcsUri = krb5ConfigGcsUri;
    return this;
  }

  /**
   * A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.
   * @return krb5ConfigGcsUri
   */
  @javax.annotation.Nullable
  public String getKrb5ConfigGcsUri() {
    return krb5ConfigGcsUri;
  }

  public void setKrb5ConfigGcsUri(String krb5ConfigGcsUri) {
    this.krb5ConfigGcsUri = krb5ConfigGcsUri;
  }


  public KerberosConfig principal(String principal) {
    this.principal = principal;
    return this;
  }

  /**
   * A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form primary/instance@REALM, but there is no exact format.
   * @return principal
   */
  @javax.annotation.Nullable
  public String getPrincipal() {
    return principal;
  }

  public void setPrincipal(String principal) {
    this.principal = principal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KerberosConfig kerberosConfig = (KerberosConfig) o;
    return Objects.equals(this.keytab, kerberosConfig.keytab) &&
        Objects.equals(this.krb5ConfigGcsUri, kerberosConfig.krb5ConfigGcsUri) &&
        Objects.equals(this.principal, kerberosConfig.principal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keytab, krb5ConfigGcsUri, principal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KerberosConfig {\n");
    sb.append("    keytab: ").append(toIndentedString(keytab)).append("\n");
    sb.append("    krb5ConfigGcsUri: ").append(toIndentedString(krb5ConfigGcsUri)).append("\n");
    sb.append("    principal: ").append(toIndentedString(principal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("keytab");
    openapiFields.add("krb5ConfigGcsUri");
    openapiFields.add("principal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KerberosConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KerberosConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KerberosConfig is not found in the empty JSON string", KerberosConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KerberosConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KerberosConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `keytab`
      if (jsonObj.get("keytab") != null && !jsonObj.get("keytab").isJsonNull()) {
        Secret.validateJsonElement(jsonObj.get("keytab"));
      }
      if ((jsonObj.get("krb5ConfigGcsUri") != null && !jsonObj.get("krb5ConfigGcsUri").isJsonNull()) && !jsonObj.get("krb5ConfigGcsUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `krb5ConfigGcsUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("krb5ConfigGcsUri").toString()));
      }
      if ((jsonObj.get("principal") != null && !jsonObj.get("principal").isJsonNull()) && !jsonObj.get("principal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `principal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("principal").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KerberosConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KerberosConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KerberosConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KerberosConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<KerberosConfig>() {
           @Override
           public void write(JsonWriter out, KerberosConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KerberosConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KerberosConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KerberosConfig
   * @throws IOException if the JSON string is invalid with respect to KerberosConfig
   */
  public static KerberosConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KerberosConfig.class);
  }

  /**
   * Convert an instance of KerberosConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

