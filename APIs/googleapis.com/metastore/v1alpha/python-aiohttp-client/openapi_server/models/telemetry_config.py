# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TelemetryConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_format: str=None):
        """TelemetryConfig - a model defined in OpenAPI

        :param log_format: The log_format of this TelemetryConfig.
        """
        self.openapi_types = {
            'log_format': str
        }

        self.attribute_map = {
            'log_format': 'logFormat'
        }

        self._log_format = log_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TelemetryConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TelemetryConfig of this TelemetryConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_format(self):
        """Gets the log_format of this TelemetryConfig.

        The output format of the Dataproc Metastore service's logs.

        :return: The log_format of this TelemetryConfig.
        :rtype: str
        """
        return self._log_format

    @log_format.setter
    def log_format(self, log_format):
        """Sets the log_format of this TelemetryConfig.

        The output format of the Dataproc Metastore service's logs.

        :param log_format: The log_format of this TelemetryConfig.
        :type log_format: str
        """
        allowed_values = ["LOG_FORMAT_UNSPECIFIED", "LEGACY", "JSON"]  # noqa: E501
        if log_format not in allowed_values:
            raise ValueError(
                "Invalid value for `log_format` ({0}), must be one of {1}"
                .format(log_format, allowed_values)
            )

        self._log_format = log_format
