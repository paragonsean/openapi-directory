# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExportMetadataRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_dump_type: str=None, destination_gcs_folder: str=None, request_id: str=None):
        """ExportMetadataRequest - a model defined in OpenAPI

        :param database_dump_type: The database_dump_type of this ExportMetadataRequest.
        :param destination_gcs_folder: The destination_gcs_folder of this ExportMetadataRequest.
        :param request_id: The request_id of this ExportMetadataRequest.
        """
        self.openapi_types = {
            'database_dump_type': str,
            'destination_gcs_folder': str,
            'request_id': str
        }

        self.attribute_map = {
            'database_dump_type': 'databaseDumpType',
            'destination_gcs_folder': 'destinationGcsFolder',
            'request_id': 'requestId'
        }

        self._database_dump_type = database_dump_type
        self._destination_gcs_folder = destination_gcs_folder
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportMetadataRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportMetadataRequest of this ExportMetadataRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_dump_type(self):
        """Gets the database_dump_type of this ExportMetadataRequest.

        Optional. The type of the database dump. If unspecified, defaults to MYSQL.

        :return: The database_dump_type of this ExportMetadataRequest.
        :rtype: str
        """
        return self._database_dump_type

    @database_dump_type.setter
    def database_dump_type(self, database_dump_type):
        """Sets the database_dump_type of this ExportMetadataRequest.

        Optional. The type of the database dump. If unspecified, defaults to MYSQL.

        :param database_dump_type: The database_dump_type of this ExportMetadataRequest.
        :type database_dump_type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "MYSQL", "AVRO"]  # noqa: E501
        if database_dump_type not in allowed_values:
            raise ValueError(
                "Invalid value for `database_dump_type` ({0}), must be one of {1}"
                .format(database_dump_type, allowed_values)
            )

        self._database_dump_type = database_dump_type

    @property
    def destination_gcs_folder(self):
        """Gets the destination_gcs_folder of this ExportMetadataRequest.

        A Cloud Storage URI of a folder, in the format gs:///. A sub-folder containing exported files will be created below it.

        :return: The destination_gcs_folder of this ExportMetadataRequest.
        :rtype: str
        """
        return self._destination_gcs_folder

    @destination_gcs_folder.setter
    def destination_gcs_folder(self, destination_gcs_folder):
        """Sets the destination_gcs_folder of this ExportMetadataRequest.

        A Cloud Storage URI of a folder, in the format gs:///. A sub-folder containing exported files will be created below it.

        :param destination_gcs_folder: The destination_gcs_folder of this ExportMetadataRequest.
        :type destination_gcs_folder: str
        """

        self._destination_gcs_folder = destination_gcs_folder

    @property
    def request_id(self):
        """Gets the request_id of this ExportMetadataRequest.

        Optional. A request ID. Specify a unique request ID to allow the server to ignore the request if it has completed. The server will ignore subsequent requests that provide a duplicate request ID for at least 60 minutes after the first request.For example, if an initial request times out, followed by another request with the same request ID, the server ignores the second request to prevent the creation of duplicate commitments.The request ID must be a valid UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format). A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.

        :return: The request_id of this ExportMetadataRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ExportMetadataRequest.

        Optional. A request ID. Specify a unique request ID to allow the server to ignore the request if it has completed. The server will ignore subsequent requests that provide a duplicate request ID for at least 60 minutes after the first request.For example, if an initial request times out, followed by another request with the same request ID, the server ignores the second request to prevent the creation of duplicate commitments.The request ID must be a valid UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format). A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.

        :param request_id: The request_id of this ExportMetadataRequest.
        :type request_id: str
        """

        self._request_id = request_id
