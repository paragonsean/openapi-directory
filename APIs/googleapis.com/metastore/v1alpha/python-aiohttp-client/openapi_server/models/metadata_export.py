# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetadataExport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_dump_type: str=None, destination_gcs_uri: str=None, end_time: str=None, start_time: str=None, state: str=None):
        """MetadataExport - a model defined in OpenAPI

        :param database_dump_type: The database_dump_type of this MetadataExport.
        :param destination_gcs_uri: The destination_gcs_uri of this MetadataExport.
        :param end_time: The end_time of this MetadataExport.
        :param start_time: The start_time of this MetadataExport.
        :param state: The state of this MetadataExport.
        """
        self.openapi_types = {
            'database_dump_type': str,
            'destination_gcs_uri': str,
            'end_time': str,
            'start_time': str,
            'state': str
        }

        self.attribute_map = {
            'database_dump_type': 'databaseDumpType',
            'destination_gcs_uri': 'destinationGcsUri',
            'end_time': 'endTime',
            'start_time': 'startTime',
            'state': 'state'
        }

        self._database_dump_type = database_dump_type
        self._destination_gcs_uri = destination_gcs_uri
        self._end_time = end_time
        self._start_time = start_time
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetadataExport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetadataExport of this MetadataExport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_dump_type(self):
        """Gets the database_dump_type of this MetadataExport.

        Output only. The type of the database dump.

        :return: The database_dump_type of this MetadataExport.
        :rtype: str
        """
        return self._database_dump_type

    @database_dump_type.setter
    def database_dump_type(self, database_dump_type):
        """Sets the database_dump_type of this MetadataExport.

        Output only. The type of the database dump.

        :param database_dump_type: The database_dump_type of this MetadataExport.
        :type database_dump_type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "MYSQL", "AVRO"]  # noqa: E501
        if database_dump_type not in allowed_values:
            raise ValueError(
                "Invalid value for `database_dump_type` ({0}), must be one of {1}"
                .format(database_dump_type, allowed_values)
            )

        self._database_dump_type = database_dump_type

    @property
    def destination_gcs_uri(self):
        """Gets the destination_gcs_uri of this MetadataExport.

        Output only. A Cloud Storage URI of a folder that metadata are exported to, in the form of gs:////, where is automatically generated.

        :return: The destination_gcs_uri of this MetadataExport.
        :rtype: str
        """
        return self._destination_gcs_uri

    @destination_gcs_uri.setter
    def destination_gcs_uri(self, destination_gcs_uri):
        """Sets the destination_gcs_uri of this MetadataExport.

        Output only. A Cloud Storage URI of a folder that metadata are exported to, in the form of gs:////, where is automatically generated.

        :param destination_gcs_uri: The destination_gcs_uri of this MetadataExport.
        :type destination_gcs_uri: str
        """

        self._destination_gcs_uri = destination_gcs_uri

    @property
    def end_time(self):
        """Gets the end_time of this MetadataExport.

        Output only. The time when the export ended.

        :return: The end_time of this MetadataExport.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this MetadataExport.

        Output only. The time when the export ended.

        :param end_time: The end_time of this MetadataExport.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def start_time(self):
        """Gets the start_time of this MetadataExport.

        Output only. The time when the export started.

        :return: The start_time of this MetadataExport.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this MetadataExport.

        Output only. The time when the export started.

        :param start_time: The start_time of this MetadataExport.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this MetadataExport.

        Output only. The current state of the export.

        :return: The state of this MetadataExport.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MetadataExport.

        Output only. The current state of the export.

        :param state: The state of this MetadataExport.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
