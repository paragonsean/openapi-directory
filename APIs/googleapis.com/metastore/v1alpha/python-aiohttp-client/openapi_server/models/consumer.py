# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Consumer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_location: str=None, endpoint_uri: str=None, subnetwork: str=None):
        """Consumer - a model defined in OpenAPI

        :param endpoint_location: The endpoint_location of this Consumer.
        :param endpoint_uri: The endpoint_uri of this Consumer.
        :param subnetwork: The subnetwork of this Consumer.
        """
        self.openapi_types = {
            'endpoint_location': str,
            'endpoint_uri': str,
            'subnetwork': str
        }

        self.attribute_map = {
            'endpoint_location': 'endpointLocation',
            'endpoint_uri': 'endpointUri',
            'subnetwork': 'subnetwork'
        }

        self._endpoint_location = endpoint_location
        self._endpoint_uri = endpoint_uri
        self._subnetwork = subnetwork

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Consumer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Consumer of this Consumer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_location(self):
        """Gets the endpoint_location of this Consumer.

        Output only. The location of the endpoint URI. Format: projects/{project}/locations/{location}.

        :return: The endpoint_location of this Consumer.
        :rtype: str
        """
        return self._endpoint_location

    @endpoint_location.setter
    def endpoint_location(self, endpoint_location):
        """Sets the endpoint_location of this Consumer.

        Output only. The location of the endpoint URI. Format: projects/{project}/locations/{location}.

        :param endpoint_location: The endpoint_location of this Consumer.
        :type endpoint_location: str
        """

        self._endpoint_location = endpoint_location

    @property
    def endpoint_uri(self):
        """Gets the endpoint_uri of this Consumer.

        Output only. The URI of the endpoint used to access the metastore service.

        :return: The endpoint_uri of this Consumer.
        :rtype: str
        """
        return self._endpoint_uri

    @endpoint_uri.setter
    def endpoint_uri(self, endpoint_uri):
        """Sets the endpoint_uri of this Consumer.

        Output only. The URI of the endpoint used to access the metastore service.

        :param endpoint_uri: The endpoint_uri of this Consumer.
        :type endpoint_uri: str
        """

        self._endpoint_uri = endpoint_uri

    @property
    def subnetwork(self):
        """Gets the subnetwork of this Consumer.

        Immutable. The subnetwork of the customer project from which an IP address is reserved and used as the Dataproc Metastore service's endpoint. It is accessible to hosts in the subnet and to all hosts in a subnet in the same region and same network. There must be at least one IP address available in the subnet's primary range. The subnet is specified in the following form:projects/{project_number}/regions/{region_id}/subnetworks/{subnetwork_id}

        :return: The subnetwork of this Consumer.
        :rtype: str
        """
        return self._subnetwork

    @subnetwork.setter
    def subnetwork(self, subnetwork):
        """Sets the subnetwork of this Consumer.

        Immutable. The subnetwork of the customer project from which an IP address is reserved and used as the Dataproc Metastore service's endpoint. It is accessible to hosts in the subnet and to all hosts in a subnet in the same region and same network. There must be at least one IP address available in the subnet's primary range. The subnet is specified in the following form:projects/{project_number}/regions/{region_id}/subnetworks/{subnetwork_id}

        :param subnetwork: The subnetwork of this Consumer.
        :type subnetwork: str
        """

        self._subnetwork = subnetwork
