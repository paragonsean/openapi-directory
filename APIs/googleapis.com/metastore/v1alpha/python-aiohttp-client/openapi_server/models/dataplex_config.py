# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lake import Lake
from openapi_server import util


class DataplexConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lake_resources: Dict[str, Lake]=None):
        """DataplexConfig - a model defined in OpenAPI

        :param lake_resources: The lake_resources of this DataplexConfig.
        """
        self.openapi_types = {
            'lake_resources': Dict[str, Lake]
        }

        self.attribute_map = {
            'lake_resources': 'lakeResources'
        }

        self._lake_resources = lake_resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataplexConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataplexConfig of this DataplexConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lake_resources(self):
        """Gets the lake_resources of this DataplexConfig.

        A reference to the Lake resources that this metastore service is attached to. The key is the lake resource name. Example: projects/{project_number}/locations/{location_id}/lakes/{lake_id}.

        :return: The lake_resources of this DataplexConfig.
        :rtype: Dict[str, Lake]
        """
        return self._lake_resources

    @lake_resources.setter
    def lake_resources(self, lake_resources):
        """Sets the lake_resources of this DataplexConfig.

        A reference to the Lake resources that this metastore service is attached to. The key is the lake resource name. Example: projects/{project_number}/locations/{location_id}/lakes/{lake_id}.

        :param lake_resources: The lake_resources of this DataplexConfig.
        :type lake_resources: Dict[str, Lake]
        """

        self._lake_resources = lake_resources
