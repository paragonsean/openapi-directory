# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Restore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup: str=None, backup_location: str=None, details: str=None, end_time: str=None, start_time: str=None, state: str=None, type: str=None):
        """Restore - a model defined in OpenAPI

        :param backup: The backup of this Restore.
        :param backup_location: The backup_location of this Restore.
        :param details: The details of this Restore.
        :param end_time: The end_time of this Restore.
        :param start_time: The start_time of this Restore.
        :param state: The state of this Restore.
        :param type: The type of this Restore.
        """
        self.openapi_types = {
            'backup': str,
            'backup_location': str,
            'details': str,
            'end_time': str,
            'start_time': str,
            'state': str,
            'type': str
        }

        self.attribute_map = {
            'backup': 'backup',
            'backup_location': 'backupLocation',
            'details': 'details',
            'end_time': 'endTime',
            'start_time': 'startTime',
            'state': 'state',
            'type': 'type'
        }

        self._backup = backup
        self._backup_location = backup_location
        self._details = details
        self._end_time = end_time
        self._start_time = start_time
        self._state = state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Restore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Restore of this Restore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup(self):
        """Gets the backup of this Restore.

        Output only. The relative resource name of the metastore service backup to restore from, in the following form:projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}.

        :return: The backup of this Restore.
        :rtype: str
        """
        return self._backup

    @backup.setter
    def backup(self, backup):
        """Sets the backup of this Restore.

        Output only. The relative resource name of the metastore service backup to restore from, in the following form:projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}.

        :param backup: The backup of this Restore.
        :type backup: str
        """

        self._backup = backup

    @property
    def backup_location(self):
        """Gets the backup_location of this Restore.

        Optional. A Cloud Storage URI specifying where the backup artifacts are stored, in the format gs:///.

        :return: The backup_location of this Restore.
        :rtype: str
        """
        return self._backup_location

    @backup_location.setter
    def backup_location(self, backup_location):
        """Sets the backup_location of this Restore.

        Optional. A Cloud Storage URI specifying where the backup artifacts are stored, in the format gs:///.

        :param backup_location: The backup_location of this Restore.
        :type backup_location: str
        """

        self._backup_location = backup_location

    @property
    def details(self):
        """Gets the details of this Restore.

        Output only. The restore details containing the revision of the service to be restored to, in format of JSON.

        :return: The details of this Restore.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Restore.

        Output only. The restore details containing the revision of the service to be restored to, in format of JSON.

        :param details: The details of this Restore.
        :type details: str
        """

        self._details = details

    @property
    def end_time(self):
        """Gets the end_time of this Restore.

        Output only. The time when the restore ended.

        :return: The end_time of this Restore.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Restore.

        Output only. The time when the restore ended.

        :param end_time: The end_time of this Restore.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def start_time(self):
        """Gets the start_time of this Restore.

        Output only. The time when the restore started.

        :return: The start_time of this Restore.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Restore.

        Output only. The time when the restore started.

        :param start_time: The start_time of this Restore.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this Restore.

        Output only. The current state of the restore.

        :return: The state of this Restore.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Restore.

        Output only. The current state of the restore.

        :param state: The state of this Restore.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this Restore.

        Output only. The type of restore.

        :return: The type of this Restore.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Restore.

        Output only. The type of restore.

        :param type: The type of this Restore.
        :type type: str
        """
        allowed_values = ["RESTORE_TYPE_UNSPECIFIED", "FULL", "METADATA_ONLY"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
