# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlterTablePropertiesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, properties: Dict[str, str]=None, table_name: str=None, update_mask: str=None):
        """AlterTablePropertiesRequest - a model defined in OpenAPI

        :param properties: The properties of this AlterTablePropertiesRequest.
        :param table_name: The table_name of this AlterTablePropertiesRequest.
        :param update_mask: The update_mask of this AlterTablePropertiesRequest.
        """
        self.openapi_types = {
            'properties': Dict[str, str],
            'table_name': str,
            'update_mask': str
        }

        self.attribute_map = {
            'properties': 'properties',
            'table_name': 'tableName',
            'update_mask': 'updateMask'
        }

        self._properties = properties
        self._table_name = table_name
        self._update_mask = update_mask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlterTablePropertiesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlterTablePropertiesRequest of this AlterTablePropertiesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def properties(self):
        """Gets the properties of this AlterTablePropertiesRequest.

        A map that describes the desired values to mutate. If update_mask is empty, the properties will not update. Otherwise, the properties only alters the value whose associated paths exist in the update mask

        :return: The properties of this AlterTablePropertiesRequest.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this AlterTablePropertiesRequest.

        A map that describes the desired values to mutate. If update_mask is empty, the properties will not update. Otherwise, the properties only alters the value whose associated paths exist in the update mask

        :param properties: The properties of this AlterTablePropertiesRequest.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def table_name(self):
        """Gets the table_name of this AlterTablePropertiesRequest.

        Required. The name of the table containing the properties you're altering in the following format.databases/{database_id}/tables/{table_id}

        :return: The table_name of this AlterTablePropertiesRequest.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this AlterTablePropertiesRequest.

        Required. The name of the table containing the properties you're altering in the following format.databases/{database_id}/tables/{table_id}

        :param table_name: The table_name of this AlterTablePropertiesRequest.
        :type table_name: str
        """

        self._table_name = table_name

    @property
    def update_mask(self):
        """Gets the update_mask of this AlterTablePropertiesRequest.

        A field mask that specifies the metadata table properties that are overwritten by the update. Fields specified in the update_mask are relative to the resource (not to the full request). A field is overwritten if it is in the mask.For example, given the target properties: properties { a: 1 b: 2 } And an update properties: properties { a: 2 b: 3 c: 4 } then if the field mask is:paths: \"properties.b\", \"properties.c\"then the result will be: properties { a: 1 b: 3 c: 4 } 

        :return: The update_mask of this AlterTablePropertiesRequest.
        :rtype: str
        """
        return self._update_mask

    @update_mask.setter
    def update_mask(self, update_mask):
        """Sets the update_mask of this AlterTablePropertiesRequest.

        A field mask that specifies the metadata table properties that are overwritten by the update. Fields specified in the update_mask are relative to the resource (not to the full request). A field is overwritten if it is in the mask.For example, given the target properties: properties { a: 1 b: 2 } And an update properties: properties { a: 2 b: 3 c: 4 } then if the field mask is:paths: \"properties.b\", \"properties.c\"then the result will be: properties { a: 1 b: 3 c: 4 } 

        :param update_mask: The update_mask of this AlterTablePropertiesRequest.
        :type update_mask: str
        """

        self._update_mask = update_mask
