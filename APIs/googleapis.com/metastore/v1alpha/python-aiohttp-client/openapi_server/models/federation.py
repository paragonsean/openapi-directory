# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backend_metastore import BackendMetastore
from openapi_server import util


class Federation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend_metastores: Dict[str, BackendMetastore]=None, create_time: str=None, endpoint_uri: str=None, labels: Dict[str, str]=None, name: str=None, state: str=None, state_message: str=None, uid: str=None, update_time: str=None, version: str=None):
        """Federation - a model defined in OpenAPI

        :param backend_metastores: The backend_metastores of this Federation.
        :param create_time: The create_time of this Federation.
        :param endpoint_uri: The endpoint_uri of this Federation.
        :param labels: The labels of this Federation.
        :param name: The name of this Federation.
        :param state: The state of this Federation.
        :param state_message: The state_message of this Federation.
        :param uid: The uid of this Federation.
        :param update_time: The update_time of this Federation.
        :param version: The version of this Federation.
        """
        self.openapi_types = {
            'backend_metastores': Dict[str, BackendMetastore],
            'create_time': str,
            'endpoint_uri': str,
            'labels': Dict[str, str],
            'name': str,
            'state': str,
            'state_message': str,
            'uid': str,
            'update_time': str,
            'version': str
        }

        self.attribute_map = {
            'backend_metastores': 'backendMetastores',
            'create_time': 'createTime',
            'endpoint_uri': 'endpointUri',
            'labels': 'labels',
            'name': 'name',
            'state': 'state',
            'state_message': 'stateMessage',
            'uid': 'uid',
            'update_time': 'updateTime',
            'version': 'version'
        }

        self._backend_metastores = backend_metastores
        self._create_time = create_time
        self._endpoint_uri = endpoint_uri
        self._labels = labels
        self._name = name
        self._state = state
        self._state_message = state_message
        self._uid = uid
        self._update_time = update_time
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Federation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Federation of this Federation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend_metastores(self):
        """Gets the backend_metastores of this Federation.

        A map from BackendMetastore rank to BackendMetastores from which the federation service serves metadata at query time. The map key represents the order in which BackendMetastores should be evaluated to resolve database names at query time and should be greater than or equal to zero. A BackendMetastore with a lower number will be evaluated before a BackendMetastore with a higher number.

        :return: The backend_metastores of this Federation.
        :rtype: Dict[str, BackendMetastore]
        """
        return self._backend_metastores

    @backend_metastores.setter
    def backend_metastores(self, backend_metastores):
        """Sets the backend_metastores of this Federation.

        A map from BackendMetastore rank to BackendMetastores from which the federation service serves metadata at query time. The map key represents the order in which BackendMetastores should be evaluated to resolve database names at query time and should be greater than or equal to zero. A BackendMetastore with a lower number will be evaluated before a BackendMetastore with a higher number.

        :param backend_metastores: The backend_metastores of this Federation.
        :type backend_metastores: Dict[str, BackendMetastore]
        """

        self._backend_metastores = backend_metastores

    @property
    def create_time(self):
        """Gets the create_time of this Federation.

        Output only. The time when the metastore federation was created.

        :return: The create_time of this Federation.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Federation.

        Output only. The time when the metastore federation was created.

        :param create_time: The create_time of this Federation.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def endpoint_uri(self):
        """Gets the endpoint_uri of this Federation.

        Output only. The federation endpoint.

        :return: The endpoint_uri of this Federation.
        :rtype: str
        """
        return self._endpoint_uri

    @endpoint_uri.setter
    def endpoint_uri(self, endpoint_uri):
        """Sets the endpoint_uri of this Federation.

        Output only. The federation endpoint.

        :param endpoint_uri: The endpoint_uri of this Federation.
        :type endpoint_uri: str
        """

        self._endpoint_uri = endpoint_uri

    @property
    def labels(self):
        """Gets the labels of this Federation.

        User-defined labels for the metastore federation.

        :return: The labels of this Federation.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Federation.

        User-defined labels for the metastore federation.

        :param labels: The labels of this Federation.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Federation.

        Immutable. The relative resource name of the federation, of the form: projects/{project_number}/locations/{location_id}/federations/{federation_id}`.

        :return: The name of this Federation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Federation.

        Immutable. The relative resource name of the federation, of the form: projects/{project_number}/locations/{location_id}/federations/{federation_id}`.

        :param name: The name of this Federation.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this Federation.

        Output only. The current state of the federation.

        :return: The state of this Federation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Federation.

        Output only. The current state of the federation.

        :param state: The state of this Federation.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "ACTIVE", "UPDATING", "DELETING", "ERROR"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_message(self):
        """Gets the state_message of this Federation.

        Output only. Additional information about the current state of the metastore federation, if available.

        :return: The state_message of this Federation.
        :rtype: str
        """
        return self._state_message

    @state_message.setter
    def state_message(self, state_message):
        """Sets the state_message of this Federation.

        Output only. Additional information about the current state of the metastore federation, if available.

        :param state_message: The state_message of this Federation.
        :type state_message: str
        """

        self._state_message = state_message

    @property
    def uid(self):
        """Gets the uid of this Federation.

        Output only. The globally unique resource identifier of the metastore federation.

        :return: The uid of this Federation.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Federation.

        Output only. The globally unique resource identifier of the metastore federation.

        :param uid: The uid of this Federation.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this Federation.

        Output only. The time when the metastore federation was last updated.

        :return: The update_time of this Federation.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Federation.

        Output only. The time when the metastore federation was last updated.

        :param update_time: The update_time of this Federation.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def version(self):
        """Gets the version of this Federation.

        Immutable. The Apache Hive metastore version of the federation. All backend metastore versions must be compatible with the federation version.

        :return: The version of this Federation.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Federation.

        Immutable. The Apache Hive metastore version of the federation. All backend metastore versions must be compatible with the federation version.

        :param version: The version of this Federation.
        :type version: str
        """

        self._version = version
