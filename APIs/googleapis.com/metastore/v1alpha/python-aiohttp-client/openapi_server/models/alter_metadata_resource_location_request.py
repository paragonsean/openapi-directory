# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlterMetadataResourceLocationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location_uri: str=None, resource_name: str=None):
        """AlterMetadataResourceLocationRequest - a model defined in OpenAPI

        :param location_uri: The location_uri of this AlterMetadataResourceLocationRequest.
        :param resource_name: The resource_name of this AlterMetadataResourceLocationRequest.
        """
        self.openapi_types = {
            'location_uri': str,
            'resource_name': str
        }

        self.attribute_map = {
            'location_uri': 'locationUri',
            'resource_name': 'resourceName'
        }

        self._location_uri = location_uri
        self._resource_name = resource_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlterMetadataResourceLocationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlterMetadataResourceLocationRequest of this AlterMetadataResourceLocationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location_uri(self):
        """Gets the location_uri of this AlterMetadataResourceLocationRequest.

        Required. The new location URI for the metadata resource.

        :return: The location_uri of this AlterMetadataResourceLocationRequest.
        :rtype: str
        """
        return self._location_uri

    @location_uri.setter
    def location_uri(self, location_uri):
        """Sets the location_uri of this AlterMetadataResourceLocationRequest.

        Required. The new location URI for the metadata resource.

        :param location_uri: The location_uri of this AlterMetadataResourceLocationRequest.
        :type location_uri: str
        """

        self._location_uri = location_uri

    @property
    def resource_name(self):
        """Gets the resource_name of this AlterMetadataResourceLocationRequest.

        Required. The relative metadata resource name in the following format.databases/{database_id} or databases/{database_id}/tables/{table_id} or databases/{database_id}/tables/{table_id}/partitions/{partition_id}

        :return: The resource_name of this AlterMetadataResourceLocationRequest.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this AlterMetadataResourceLocationRequest.

        Required. The relative metadata resource name in the following format.databases/{database_id} or databases/{database_id}/tables/{table_id} or databases/{database_id}/tables/{table_id}/partitions/{partition_id}

        :param resource_name: The resource_name of this AlterMetadataResourceLocationRequest.
        :type resource_name: str
        """

        self._resource_name = resource_name
