/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestore::OAIRestore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestore::OAIRestore() {
    this->initializeModel();
}

OAIRestore::~OAIRestore() {}

void OAIRestore::initializeModel() {

    m_backup_isSet = false;
    m_backup_isValid = false;

    m_backup_location_isSet = false;
    m_backup_location_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRestore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestore::fromJsonObject(QJsonObject json) {

    m_backup_isValid = ::OpenAPI::fromJsonValue(m_backup, json[QString("backup")]);
    m_backup_isSet = !json[QString("backup")].isNull() && m_backup_isValid;

    m_backup_location_isValid = ::OpenAPI::fromJsonValue(m_backup_location, json[QString("backupLocation")]);
    m_backup_location_isSet = !json[QString("backupLocation")].isNull() && m_backup_location_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRestore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestore::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_isSet) {
        obj.insert(QString("backup"), ::OpenAPI::toJsonValue(m_backup));
    }
    if (m_backup_location_isSet) {
        obj.insert(QString("backupLocation"), ::OpenAPI::toJsonValue(m_backup_location));
    }
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIRestore::getBackup() const {
    return m_backup;
}
void OAIRestore::setBackup(const QString &backup) {
    m_backup = backup;
    m_backup_isSet = true;
}

bool OAIRestore::is_backup_Set() const{
    return m_backup_isSet;
}

bool OAIRestore::is_backup_Valid() const{
    return m_backup_isValid;
}

QString OAIRestore::getBackupLocation() const {
    return m_backup_location;
}
void OAIRestore::setBackupLocation(const QString &backup_location) {
    m_backup_location = backup_location;
    m_backup_location_isSet = true;
}

bool OAIRestore::is_backup_location_Set() const{
    return m_backup_location_isSet;
}

bool OAIRestore::is_backup_location_Valid() const{
    return m_backup_location_isValid;
}

QString OAIRestore::getDetails() const {
    return m_details;
}
void OAIRestore::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIRestore::is_details_Set() const{
    return m_details_isSet;
}

bool OAIRestore::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIRestore::getEndTime() const {
    return m_end_time;
}
void OAIRestore::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIRestore::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIRestore::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIRestore::getStartTime() const {
    return m_start_time;
}
void OAIRestore::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIRestore::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIRestore::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIRestore::getState() const {
    return m_state;
}
void OAIRestore::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRestore::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRestore::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIRestore::getType() const {
    return m_type;
}
void OAIRestore::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRestore::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRestore::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRestore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
