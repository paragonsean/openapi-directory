/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataplexConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataplexConfig::OAIDataplexConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataplexConfig::OAIDataplexConfig() {
    this->initializeModel();
}

OAIDataplexConfig::~OAIDataplexConfig() {}

void OAIDataplexConfig::initializeModel() {

    m_lake_resources_isSet = false;
    m_lake_resources_isValid = false;
}

void OAIDataplexConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataplexConfig::fromJsonObject(QJsonObject json) {

    m_lake_resources_isValid = ::OpenAPI::fromJsonValue(m_lake_resources, json[QString("lakeResources")]);
    m_lake_resources_isSet = !json[QString("lakeResources")].isNull() && m_lake_resources_isValid;
}

QString OAIDataplexConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataplexConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_lake_resources.size() > 0) {
        obj.insert(QString("lakeResources"), ::OpenAPI::toJsonValue(m_lake_resources));
    }
    return obj;
}

QMap<QString, OAILake> OAIDataplexConfig::getLakeResources() const {
    return m_lake_resources;
}
void OAIDataplexConfig::setLakeResources(const QMap<QString, OAILake> &lake_resources) {
    m_lake_resources = lake_resources;
    m_lake_resources_isSet = true;
}

bool OAIDataplexConfig::is_lake_resources_Set() const{
    return m_lake_resources_isSet;
}

bool OAIDataplexConfig::is_lake_resources_Valid() const{
    return m_lake_resources_isValid;
}

bool OAIDataplexConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lake_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataplexConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
