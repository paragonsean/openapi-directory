/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledBackup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledBackup::OAIScheduledBackup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledBackup::OAIScheduledBackup() {
    this->initializeModel();
}

OAIScheduledBackup::~OAIScheduledBackup() {}

void OAIScheduledBackup::initializeModel() {

    m_backup_location_isSet = false;
    m_backup_location_isValid = false;

    m_cron_schedule_isSet = false;
    m_cron_schedule_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_latest_backup_isSet = false;
    m_latest_backup_isValid = false;

    m_next_scheduled_time_isSet = false;
    m_next_scheduled_time_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIScheduledBackup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledBackup::fromJsonObject(QJsonObject json) {

    m_backup_location_isValid = ::OpenAPI::fromJsonValue(m_backup_location, json[QString("backupLocation")]);
    m_backup_location_isSet = !json[QString("backupLocation")].isNull() && m_backup_location_isValid;

    m_cron_schedule_isValid = ::OpenAPI::fromJsonValue(m_cron_schedule, json[QString("cronSchedule")]);
    m_cron_schedule_isSet = !json[QString("cronSchedule")].isNull() && m_cron_schedule_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_latest_backup_isValid = ::OpenAPI::fromJsonValue(m_latest_backup, json[QString("latestBackup")]);
    m_latest_backup_isSet = !json[QString("latestBackup")].isNull() && m_latest_backup_isValid;

    m_next_scheduled_time_isValid = ::OpenAPI::fromJsonValue(m_next_scheduled_time, json[QString("nextScheduledTime")]);
    m_next_scheduled_time_isSet = !json[QString("nextScheduledTime")].isNull() && m_next_scheduled_time_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIScheduledBackup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledBackup::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_location_isSet) {
        obj.insert(QString("backupLocation"), ::OpenAPI::toJsonValue(m_backup_location));
    }
    if (m_cron_schedule_isSet) {
        obj.insert(QString("cronSchedule"), ::OpenAPI::toJsonValue(m_cron_schedule));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_latest_backup.isSet()) {
        obj.insert(QString("latestBackup"), ::OpenAPI::toJsonValue(m_latest_backup));
    }
    if (m_next_scheduled_time_isSet) {
        obj.insert(QString("nextScheduledTime"), ::OpenAPI::toJsonValue(m_next_scheduled_time));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QString OAIScheduledBackup::getBackupLocation() const {
    return m_backup_location;
}
void OAIScheduledBackup::setBackupLocation(const QString &backup_location) {
    m_backup_location = backup_location;
    m_backup_location_isSet = true;
}

bool OAIScheduledBackup::is_backup_location_Set() const{
    return m_backup_location_isSet;
}

bool OAIScheduledBackup::is_backup_location_Valid() const{
    return m_backup_location_isValid;
}

QString OAIScheduledBackup::getCronSchedule() const {
    return m_cron_schedule;
}
void OAIScheduledBackup::setCronSchedule(const QString &cron_schedule) {
    m_cron_schedule = cron_schedule;
    m_cron_schedule_isSet = true;
}

bool OAIScheduledBackup::is_cron_schedule_Set() const{
    return m_cron_schedule_isSet;
}

bool OAIScheduledBackup::is_cron_schedule_Valid() const{
    return m_cron_schedule_isValid;
}

bool OAIScheduledBackup::isEnabled() const {
    return m_enabled;
}
void OAIScheduledBackup::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIScheduledBackup::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIScheduledBackup::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAILatestBackup OAIScheduledBackup::getLatestBackup() const {
    return m_latest_backup;
}
void OAIScheduledBackup::setLatestBackup(const OAILatestBackup &latest_backup) {
    m_latest_backup = latest_backup;
    m_latest_backup_isSet = true;
}

bool OAIScheduledBackup::is_latest_backup_Set() const{
    return m_latest_backup_isSet;
}

bool OAIScheduledBackup::is_latest_backup_Valid() const{
    return m_latest_backup_isValid;
}

QString OAIScheduledBackup::getNextScheduledTime() const {
    return m_next_scheduled_time;
}
void OAIScheduledBackup::setNextScheduledTime(const QString &next_scheduled_time) {
    m_next_scheduled_time = next_scheduled_time;
    m_next_scheduled_time_isSet = true;
}

bool OAIScheduledBackup::is_next_scheduled_time_Set() const{
    return m_next_scheduled_time_isSet;
}

bool OAIScheduledBackup::is_next_scheduled_time_Valid() const{
    return m_next_scheduled_time_isValid;
}

QString OAIScheduledBackup::getTimeZone() const {
    return m_time_zone;
}
void OAIScheduledBackup::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIScheduledBackup::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIScheduledBackup::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIScheduledBackup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cron_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_backup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_scheduled_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledBackup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
