/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuxiliaryVersionConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuxiliaryVersionConfig::OAIAuxiliaryVersionConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuxiliaryVersionConfig::OAIAuxiliaryVersionConfig() {
    this->initializeModel();
}

OAIAuxiliaryVersionConfig::~OAIAuxiliaryVersionConfig() {}

void OAIAuxiliaryVersionConfig::initializeModel() {

    m_config_overrides_isSet = false;
    m_config_overrides_isValid = false;

    m_network_config_isSet = false;
    m_network_config_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIAuxiliaryVersionConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuxiliaryVersionConfig::fromJsonObject(QJsonObject json) {

    m_config_overrides_isValid = ::OpenAPI::fromJsonValue(m_config_overrides, json[QString("configOverrides")]);
    m_config_overrides_isSet = !json[QString("configOverrides")].isNull() && m_config_overrides_isValid;

    m_network_config_isValid = ::OpenAPI::fromJsonValue(m_network_config, json[QString("networkConfig")]);
    m_network_config_isSet = !json[QString("networkConfig")].isNull() && m_network_config_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIAuxiliaryVersionConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuxiliaryVersionConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_config_overrides.size() > 0) {
        obj.insert(QString("configOverrides"), ::OpenAPI::toJsonValue(m_config_overrides));
    }
    if (m_network_config.isSet()) {
        obj.insert(QString("networkConfig"), ::OpenAPI::toJsonValue(m_network_config));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QMap<QString, QString> OAIAuxiliaryVersionConfig::getConfigOverrides() const {
    return m_config_overrides;
}
void OAIAuxiliaryVersionConfig::setConfigOverrides(const QMap<QString, QString> &config_overrides) {
    m_config_overrides = config_overrides;
    m_config_overrides_isSet = true;
}

bool OAIAuxiliaryVersionConfig::is_config_overrides_Set() const{
    return m_config_overrides_isSet;
}

bool OAIAuxiliaryVersionConfig::is_config_overrides_Valid() const{
    return m_config_overrides_isValid;
}

OAINetworkConfig OAIAuxiliaryVersionConfig::getNetworkConfig() const {
    return m_network_config;
}
void OAIAuxiliaryVersionConfig::setNetworkConfig(const OAINetworkConfig &network_config) {
    m_network_config = network_config;
    m_network_config_isSet = true;
}

bool OAIAuxiliaryVersionConfig::is_network_config_Set() const{
    return m_network_config_isSet;
}

bool OAIAuxiliaryVersionConfig::is_network_config_Valid() const{
    return m_network_config_isValid;
}

QString OAIAuxiliaryVersionConfig::getVersion() const {
    return m_version;
}
void OAIAuxiliaryVersionConfig::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIAuxiliaryVersionConfig::is_version_Set() const{
    return m_version_isSet;
}

bool OAIAuxiliaryVersionConfig::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIAuxiliaryVersionConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuxiliaryVersionConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
