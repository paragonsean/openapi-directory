/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFederation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFederation::OAIFederation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFederation::OAIFederation() {
    this->initializeModel();
}

OAIFederation::~OAIFederation() {}

void OAIFederation::initializeModel() {

    m_backend_metastores_isSet = false;
    m_backend_metastores_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_endpoint_uri_isSet = false;
    m_endpoint_uri_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_message_isSet = false;
    m_state_message_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIFederation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFederation::fromJsonObject(QJsonObject json) {

    m_backend_metastores_isValid = ::OpenAPI::fromJsonValue(m_backend_metastores, json[QString("backendMetastores")]);
    m_backend_metastores_isSet = !json[QString("backendMetastores")].isNull() && m_backend_metastores_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_endpoint_uri_isValid = ::OpenAPI::fromJsonValue(m_endpoint_uri, json[QString("endpointUri")]);
    m_endpoint_uri_isSet = !json[QString("endpointUri")].isNull() && m_endpoint_uri_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_message_isValid = ::OpenAPI::fromJsonValue(m_state_message, json[QString("stateMessage")]);
    m_state_message_isSet = !json[QString("stateMessage")].isNull() && m_state_message_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIFederation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFederation::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_metastores.size() > 0) {
        obj.insert(QString("backendMetastores"), ::OpenAPI::toJsonValue(m_backend_metastores));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_endpoint_uri_isSet) {
        obj.insert(QString("endpointUri"), ::OpenAPI::toJsonValue(m_endpoint_uri));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_message_isSet) {
        obj.insert(QString("stateMessage"), ::OpenAPI::toJsonValue(m_state_message));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QMap<QString, OAIBackendMetastore> OAIFederation::getBackendMetastores() const {
    return m_backend_metastores;
}
void OAIFederation::setBackendMetastores(const QMap<QString, OAIBackendMetastore> &backend_metastores) {
    m_backend_metastores = backend_metastores;
    m_backend_metastores_isSet = true;
}

bool OAIFederation::is_backend_metastores_Set() const{
    return m_backend_metastores_isSet;
}

bool OAIFederation::is_backend_metastores_Valid() const{
    return m_backend_metastores_isValid;
}

QString OAIFederation::getCreateTime() const {
    return m_create_time;
}
void OAIFederation::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIFederation::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIFederation::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIFederation::getEndpointUri() const {
    return m_endpoint_uri;
}
void OAIFederation::setEndpointUri(const QString &endpoint_uri) {
    m_endpoint_uri = endpoint_uri;
    m_endpoint_uri_isSet = true;
}

bool OAIFederation::is_endpoint_uri_Set() const{
    return m_endpoint_uri_isSet;
}

bool OAIFederation::is_endpoint_uri_Valid() const{
    return m_endpoint_uri_isValid;
}

QMap<QString, QString> OAIFederation::getLabels() const {
    return m_labels;
}
void OAIFederation::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIFederation::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIFederation::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIFederation::getName() const {
    return m_name;
}
void OAIFederation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFederation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFederation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFederation::getState() const {
    return m_state;
}
void OAIFederation::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIFederation::is_state_Set() const{
    return m_state_isSet;
}

bool OAIFederation::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIFederation::getStateMessage() const {
    return m_state_message;
}
void OAIFederation::setStateMessage(const QString &state_message) {
    m_state_message = state_message;
    m_state_message_isSet = true;
}

bool OAIFederation::is_state_message_Set() const{
    return m_state_message_isSet;
}

bool OAIFederation::is_state_message_Valid() const{
    return m_state_message_isValid;
}

QString OAIFederation::getUid() const {
    return m_uid;
}
void OAIFederation::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIFederation::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIFederation::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIFederation::getUpdateTime() const {
    return m_update_time;
}
void OAIFederation::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIFederation::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIFederation::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIFederation::getVersion() const {
    return m_version;
}
void OAIFederation::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIFederation::is_version_Set() const{
    return m_version_isSet;
}

bool OAIFederation::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIFederation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_metastores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFederation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
