/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKerberosConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKerberosConfig::OAIKerberosConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKerberosConfig::OAIKerberosConfig() {
    this->initializeModel();
}

OAIKerberosConfig::~OAIKerberosConfig() {}

void OAIKerberosConfig::initializeModel() {

    m_keytab_isSet = false;
    m_keytab_isValid = false;

    m_krb5_config_gcs_uri_isSet = false;
    m_krb5_config_gcs_uri_isValid = false;

    m_principal_isSet = false;
    m_principal_isValid = false;
}

void OAIKerberosConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKerberosConfig::fromJsonObject(QJsonObject json) {

    m_keytab_isValid = ::OpenAPI::fromJsonValue(m_keytab, json[QString("keytab")]);
    m_keytab_isSet = !json[QString("keytab")].isNull() && m_keytab_isValid;

    m_krb5_config_gcs_uri_isValid = ::OpenAPI::fromJsonValue(m_krb5_config_gcs_uri, json[QString("krb5ConfigGcsUri")]);
    m_krb5_config_gcs_uri_isSet = !json[QString("krb5ConfigGcsUri")].isNull() && m_krb5_config_gcs_uri_isValid;

    m_principal_isValid = ::OpenAPI::fromJsonValue(m_principal, json[QString("principal")]);
    m_principal_isSet = !json[QString("principal")].isNull() && m_principal_isValid;
}

QString OAIKerberosConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKerberosConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_keytab.isSet()) {
        obj.insert(QString("keytab"), ::OpenAPI::toJsonValue(m_keytab));
    }
    if (m_krb5_config_gcs_uri_isSet) {
        obj.insert(QString("krb5ConfigGcsUri"), ::OpenAPI::toJsonValue(m_krb5_config_gcs_uri));
    }
    if (m_principal_isSet) {
        obj.insert(QString("principal"), ::OpenAPI::toJsonValue(m_principal));
    }
    return obj;
}

OAISecret OAIKerberosConfig::getKeytab() const {
    return m_keytab;
}
void OAIKerberosConfig::setKeytab(const OAISecret &keytab) {
    m_keytab = keytab;
    m_keytab_isSet = true;
}

bool OAIKerberosConfig::is_keytab_Set() const{
    return m_keytab_isSet;
}

bool OAIKerberosConfig::is_keytab_Valid() const{
    return m_keytab_isValid;
}

QString OAIKerberosConfig::getKrb5ConfigGcsUri() const {
    return m_krb5_config_gcs_uri;
}
void OAIKerberosConfig::setKrb5ConfigGcsUri(const QString &krb5_config_gcs_uri) {
    m_krb5_config_gcs_uri = krb5_config_gcs_uri;
    m_krb5_config_gcs_uri_isSet = true;
}

bool OAIKerberosConfig::is_krb5_config_gcs_uri_Set() const{
    return m_krb5_config_gcs_uri_isSet;
}

bool OAIKerberosConfig::is_krb5_config_gcs_uri_Valid() const{
    return m_krb5_config_gcs_uri_isValid;
}

QString OAIKerberosConfig::getPrincipal() const {
    return m_principal;
}
void OAIKerberosConfig::setPrincipal(const QString &principal) {
    m_principal = principal;
    m_principal_isSet = true;
}

bool OAIKerberosConfig::is_principal_Set() const{
    return m_principal_isSet;
}

bool OAIKerberosConfig::is_principal_Valid() const{
    return m_principal_isValid;
}

bool OAIKerberosConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_keytab.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_krb5_config_gcs_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKerberosConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
