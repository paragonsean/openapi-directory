/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetadataImport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetadataImport::OAIMetadataImport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetadataImport::OAIMetadataImport() {
    this->initializeModel();
}

OAIMetadataImport::~OAIMetadataImport() {}

void OAIMetadataImport::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_database_dump_isSet = false;
    m_database_dump_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIMetadataImport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetadataImport::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_database_dump_isValid = ::OpenAPI::fromJsonValue(m_database_dump, json[QString("databaseDump")]);
    m_database_dump_isSet = !json[QString("databaseDump")].isNull() && m_database_dump_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIMetadataImport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetadataImport::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_database_dump.isSet()) {
        obj.insert(QString("databaseDump"), ::OpenAPI::toJsonValue(m_database_dump));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIMetadataImport::getCreateTime() const {
    return m_create_time;
}
void OAIMetadataImport::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIMetadataImport::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIMetadataImport::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIDatabaseDump OAIMetadataImport::getDatabaseDump() const {
    return m_database_dump;
}
void OAIMetadataImport::setDatabaseDump(const OAIDatabaseDump &database_dump) {
    m_database_dump = database_dump;
    m_database_dump_isSet = true;
}

bool OAIMetadataImport::is_database_dump_Set() const{
    return m_database_dump_isSet;
}

bool OAIMetadataImport::is_database_dump_Valid() const{
    return m_database_dump_isValid;
}

QString OAIMetadataImport::getDescription() const {
    return m_description;
}
void OAIMetadataImport::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMetadataImport::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMetadataImport::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIMetadataImport::getEndTime() const {
    return m_end_time;
}
void OAIMetadataImport::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIMetadataImport::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIMetadataImport::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIMetadataImport::getName() const {
    return m_name;
}
void OAIMetadataImport::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMetadataImport::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMetadataImport::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMetadataImport::getState() const {
    return m_state;
}
void OAIMetadataImport::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIMetadataImport::is_state_Set() const{
    return m_state_isSet;
}

bool OAIMetadataImport::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIMetadataImport::getUpdateTime() const {
    return m_update_time;
}
void OAIMetadataImport::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIMetadataImport::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIMetadataImport::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIMetadataImport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_dump.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetadataImport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
