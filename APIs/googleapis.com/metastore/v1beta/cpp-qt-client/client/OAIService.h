/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIService.h
 *
 * A managed metastore service that serves metadata queries.
 */

#ifndef OAIService_H
#define OAIService_H

#include <QJsonObject>

#include "OAIEncryptionConfig.h"
#include "OAIHiveMetastoreConfig.h"
#include "OAIMaintenanceWindow.h"
#include "OAIMetadataIntegration.h"
#include "OAIMetadataManagementActivity.h"
#include "OAINetworkConfig.h"
#include "OAIScalingConfig.h"
#include "OAIScheduledBackup.h"
#include "OAITelemetryConfig.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEncryptionConfig;
class OAIHiveMetastoreConfig;
class OAIMaintenanceWindow;
class OAIMetadataIntegration;
class OAIMetadataManagementActivity;
class OAINetworkConfig;
class OAIScalingConfig;
class OAIScheduledBackup;
class OAITelemetryConfig;

class OAIService : public OAIObject {
public:
    OAIService();
    OAIService(QString json);
    ~OAIService() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArtifactGcsUri() const;
    void setArtifactGcsUri(const QString &artifact_gcs_uri);
    bool is_artifact_gcs_uri_Set() const;
    bool is_artifact_gcs_uri_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getDatabaseType() const;
    void setDatabaseType(const QString &database_type);
    bool is_database_type_Set() const;
    bool is_database_type_Valid() const;

    OAIEncryptionConfig getEncryptionConfig() const;
    void setEncryptionConfig(const OAIEncryptionConfig &encryption_config);
    bool is_encryption_config_Set() const;
    bool is_encryption_config_Valid() const;

    QString getEndpointUri() const;
    void setEndpointUri(const QString &endpoint_uri);
    bool is_endpoint_uri_Set() const;
    bool is_endpoint_uri_Valid() const;

    OAIHiveMetastoreConfig getHiveMetastoreConfig() const;
    void setHiveMetastoreConfig(const OAIHiveMetastoreConfig &hive_metastore_config);
    bool is_hive_metastore_config_Set() const;
    bool is_hive_metastore_config_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    OAIMaintenanceWindow getMaintenanceWindow() const;
    void setMaintenanceWindow(const OAIMaintenanceWindow &maintenance_window);
    bool is_maintenance_window_Set() const;
    bool is_maintenance_window_Valid() const;

    OAIMetadataIntegration getMetadataIntegration() const;
    void setMetadataIntegration(const OAIMetadataIntegration &metadata_integration);
    bool is_metadata_integration_Set() const;
    bool is_metadata_integration_Valid() const;

    OAIMetadataManagementActivity getMetadataManagementActivity() const;
    void setMetadataManagementActivity(const OAIMetadataManagementActivity &metadata_management_activity);
    bool is_metadata_management_activity_Set() const;
    bool is_metadata_management_activity_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNetwork() const;
    void setNetwork(const QString &network);
    bool is_network_Set() const;
    bool is_network_Valid() const;

    OAINetworkConfig getNetworkConfig() const;
    void setNetworkConfig(const OAINetworkConfig &network_config);
    bool is_network_config_Set() const;
    bool is_network_config_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getReleaseChannel() const;
    void setReleaseChannel(const QString &release_channel);
    bool is_release_channel_Set() const;
    bool is_release_channel_Valid() const;

    OAIScalingConfig getScalingConfig() const;
    void setScalingConfig(const OAIScalingConfig &scaling_config);
    bool is_scaling_config_Set() const;
    bool is_scaling_config_Valid() const;

    OAIScheduledBackup getScheduledBackup() const;
    void setScheduledBackup(const OAIScheduledBackup &scheduled_backup);
    bool is_scheduled_backup_Set() const;
    bool is_scheduled_backup_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStateMessage() const;
    void setStateMessage(const QString &state_message);
    bool is_state_message_Set() const;
    bool is_state_message_Valid() const;

    OAITelemetryConfig getTelemetryConfig() const;
    void setTelemetryConfig(const OAITelemetryConfig &telemetry_config);
    bool is_telemetry_config_Set() const;
    bool is_telemetry_config_Valid() const;

    QString getTier() const;
    void setTier(const QString &tier);
    bool is_tier_Set() const;
    bool is_tier_Valid() const;

    QString getUid() const;
    void setUid(const QString &uid);
    bool is_uid_Set() const;
    bool is_uid_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_artifact_gcs_uri;
    bool m_artifact_gcs_uri_isSet;
    bool m_artifact_gcs_uri_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_database_type;
    bool m_database_type_isSet;
    bool m_database_type_isValid;

    OAIEncryptionConfig m_encryption_config;
    bool m_encryption_config_isSet;
    bool m_encryption_config_isValid;

    QString m_endpoint_uri;
    bool m_endpoint_uri_isSet;
    bool m_endpoint_uri_isValid;

    OAIHiveMetastoreConfig m_hive_metastore_config;
    bool m_hive_metastore_config_isSet;
    bool m_hive_metastore_config_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    OAIMaintenanceWindow m_maintenance_window;
    bool m_maintenance_window_isSet;
    bool m_maintenance_window_isValid;

    OAIMetadataIntegration m_metadata_integration;
    bool m_metadata_integration_isSet;
    bool m_metadata_integration_isValid;

    OAIMetadataManagementActivity m_metadata_management_activity;
    bool m_metadata_management_activity_isSet;
    bool m_metadata_management_activity_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_network;
    bool m_network_isSet;
    bool m_network_isValid;

    OAINetworkConfig m_network_config;
    bool m_network_config_isSet;
    bool m_network_config_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_release_channel;
    bool m_release_channel_isSet;
    bool m_release_channel_isValid;

    OAIScalingConfig m_scaling_config;
    bool m_scaling_config_isSet;
    bool m_scaling_config_isValid;

    OAIScheduledBackup m_scheduled_backup;
    bool m_scheduled_backup_isSet;
    bool m_scheduled_backup_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_state_message;
    bool m_state_message_isSet;
    bool m_state_message_isValid;

    OAITelemetryConfig m_telemetry_config;
    bool m_telemetry_config_isSet;
    bool m_telemetry_config_isValid;

    QString m_tier;
    bool m_tier_isSet;
    bool m_tier_isValid;

    QString m_uid;
    bool m_uid_isSet;
    bool m_uid_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIService)

#endif // OAIService_H
