/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestoreServiceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestoreServiceRequest::OAIRestoreServiceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestoreServiceRequest::OAIRestoreServiceRequest() {
    this->initializeModel();
}

OAIRestoreServiceRequest::~OAIRestoreServiceRequest() {}

void OAIRestoreServiceRequest::initializeModel() {

    m_backup_isSet = false;
    m_backup_isValid = false;

    m_backup_location_isSet = false;
    m_backup_location_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_restore_type_isSet = false;
    m_restore_type_isValid = false;
}

void OAIRestoreServiceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestoreServiceRequest::fromJsonObject(QJsonObject json) {

    m_backup_isValid = ::OpenAPI::fromJsonValue(m_backup, json[QString("backup")]);
    m_backup_isSet = !json[QString("backup")].isNull() && m_backup_isValid;

    m_backup_location_isValid = ::OpenAPI::fromJsonValue(m_backup_location, json[QString("backupLocation")]);
    m_backup_location_isSet = !json[QString("backupLocation")].isNull() && m_backup_location_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_restore_type_isValid = ::OpenAPI::fromJsonValue(m_restore_type, json[QString("restoreType")]);
    m_restore_type_isSet = !json[QString("restoreType")].isNull() && m_restore_type_isValid;
}

QString OAIRestoreServiceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestoreServiceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_isSet) {
        obj.insert(QString("backup"), ::OpenAPI::toJsonValue(m_backup));
    }
    if (m_backup_location_isSet) {
        obj.insert(QString("backupLocation"), ::OpenAPI::toJsonValue(m_backup_location));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_restore_type_isSet) {
        obj.insert(QString("restoreType"), ::OpenAPI::toJsonValue(m_restore_type));
    }
    return obj;
}

QString OAIRestoreServiceRequest::getBackup() const {
    return m_backup;
}
void OAIRestoreServiceRequest::setBackup(const QString &backup) {
    m_backup = backup;
    m_backup_isSet = true;
}

bool OAIRestoreServiceRequest::is_backup_Set() const{
    return m_backup_isSet;
}

bool OAIRestoreServiceRequest::is_backup_Valid() const{
    return m_backup_isValid;
}

QString OAIRestoreServiceRequest::getBackupLocation() const {
    return m_backup_location;
}
void OAIRestoreServiceRequest::setBackupLocation(const QString &backup_location) {
    m_backup_location = backup_location;
    m_backup_location_isSet = true;
}

bool OAIRestoreServiceRequest::is_backup_location_Set() const{
    return m_backup_location_isSet;
}

bool OAIRestoreServiceRequest::is_backup_location_Valid() const{
    return m_backup_location_isValid;
}

QString OAIRestoreServiceRequest::getRequestId() const {
    return m_request_id;
}
void OAIRestoreServiceRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIRestoreServiceRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIRestoreServiceRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAIRestoreServiceRequest::getRestoreType() const {
    return m_restore_type;
}
void OAIRestoreServiceRequest::setRestoreType(const QString &restore_type) {
    m_restore_type = restore_type;
    m_restore_type_isSet = true;
}

bool OAIRestoreServiceRequest::is_restore_type_Set() const{
    return m_restore_type_isSet;
}

bool OAIRestoreServiceRequest::is_restore_type_Valid() const{
    return m_restore_type_isValid;
}

bool OAIRestoreServiceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestoreServiceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
