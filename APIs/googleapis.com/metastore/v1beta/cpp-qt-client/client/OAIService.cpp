/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIService::OAIService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIService::OAIService() {
    this->initializeModel();
}

OAIService::~OAIService() {}

void OAIService::initializeModel() {

    m_artifact_gcs_uri_isSet = false;
    m_artifact_gcs_uri_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_database_type_isSet = false;
    m_database_type_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_endpoint_uri_isSet = false;
    m_endpoint_uri_isValid = false;

    m_hive_metastore_config_isSet = false;
    m_hive_metastore_config_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_maintenance_window_isSet = false;
    m_maintenance_window_isValid = false;

    m_metadata_integration_isSet = false;
    m_metadata_integration_isValid = false;

    m_metadata_management_activity_isSet = false;
    m_metadata_management_activity_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_network_config_isSet = false;
    m_network_config_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_release_channel_isSet = false;
    m_release_channel_isValid = false;

    m_scaling_config_isSet = false;
    m_scaling_config_isValid = false;

    m_scheduled_backup_isSet = false;
    m_scheduled_backup_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_message_isSet = false;
    m_state_message_isValid = false;

    m_telemetry_config_isSet = false;
    m_telemetry_config_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIService::fromJsonObject(QJsonObject json) {

    m_artifact_gcs_uri_isValid = ::OpenAPI::fromJsonValue(m_artifact_gcs_uri, json[QString("artifactGcsUri")]);
    m_artifact_gcs_uri_isSet = !json[QString("artifactGcsUri")].isNull() && m_artifact_gcs_uri_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_database_type_isValid = ::OpenAPI::fromJsonValue(m_database_type, json[QString("databaseType")]);
    m_database_type_isSet = !json[QString("databaseType")].isNull() && m_database_type_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("encryptionConfig")]);
    m_encryption_config_isSet = !json[QString("encryptionConfig")].isNull() && m_encryption_config_isValid;

    m_endpoint_uri_isValid = ::OpenAPI::fromJsonValue(m_endpoint_uri, json[QString("endpointUri")]);
    m_endpoint_uri_isSet = !json[QString("endpointUri")].isNull() && m_endpoint_uri_isValid;

    m_hive_metastore_config_isValid = ::OpenAPI::fromJsonValue(m_hive_metastore_config, json[QString("hiveMetastoreConfig")]);
    m_hive_metastore_config_isSet = !json[QString("hiveMetastoreConfig")].isNull() && m_hive_metastore_config_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_maintenance_window, json[QString("maintenanceWindow")]);
    m_maintenance_window_isSet = !json[QString("maintenanceWindow")].isNull() && m_maintenance_window_isValid;

    m_metadata_integration_isValid = ::OpenAPI::fromJsonValue(m_metadata_integration, json[QString("metadataIntegration")]);
    m_metadata_integration_isSet = !json[QString("metadataIntegration")].isNull() && m_metadata_integration_isValid;

    m_metadata_management_activity_isValid = ::OpenAPI::fromJsonValue(m_metadata_management_activity, json[QString("metadataManagementActivity")]);
    m_metadata_management_activity_isSet = !json[QString("metadataManagementActivity")].isNull() && m_metadata_management_activity_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_network_config_isValid = ::OpenAPI::fromJsonValue(m_network_config, json[QString("networkConfig")]);
    m_network_config_isSet = !json[QString("networkConfig")].isNull() && m_network_config_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_release_channel_isValid = ::OpenAPI::fromJsonValue(m_release_channel, json[QString("releaseChannel")]);
    m_release_channel_isSet = !json[QString("releaseChannel")].isNull() && m_release_channel_isValid;

    m_scaling_config_isValid = ::OpenAPI::fromJsonValue(m_scaling_config, json[QString("scalingConfig")]);
    m_scaling_config_isSet = !json[QString("scalingConfig")].isNull() && m_scaling_config_isValid;

    m_scheduled_backup_isValid = ::OpenAPI::fromJsonValue(m_scheduled_backup, json[QString("scheduledBackup")]);
    m_scheduled_backup_isSet = !json[QString("scheduledBackup")].isNull() && m_scheduled_backup_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_message_isValid = ::OpenAPI::fromJsonValue(m_state_message, json[QString("stateMessage")]);
    m_state_message_isSet = !json[QString("stateMessage")].isNull() && m_state_message_isValid;

    m_telemetry_config_isValid = ::OpenAPI::fromJsonValue(m_telemetry_config, json[QString("telemetryConfig")]);
    m_telemetry_config_isSet = !json[QString("telemetryConfig")].isNull() && m_telemetry_config_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIService::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_gcs_uri_isSet) {
        obj.insert(QString("artifactGcsUri"), ::OpenAPI::toJsonValue(m_artifact_gcs_uri));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_database_type_isSet) {
        obj.insert(QString("databaseType"), ::OpenAPI::toJsonValue(m_database_type));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("encryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_endpoint_uri_isSet) {
        obj.insert(QString("endpointUri"), ::OpenAPI::toJsonValue(m_endpoint_uri));
    }
    if (m_hive_metastore_config.isSet()) {
        obj.insert(QString("hiveMetastoreConfig"), ::OpenAPI::toJsonValue(m_hive_metastore_config));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_maintenance_window.isSet()) {
        obj.insert(QString("maintenanceWindow"), ::OpenAPI::toJsonValue(m_maintenance_window));
    }
    if (m_metadata_integration.isSet()) {
        obj.insert(QString("metadataIntegration"), ::OpenAPI::toJsonValue(m_metadata_integration));
    }
    if (m_metadata_management_activity.isSet()) {
        obj.insert(QString("metadataManagementActivity"), ::OpenAPI::toJsonValue(m_metadata_management_activity));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_network_config.isSet()) {
        obj.insert(QString("networkConfig"), ::OpenAPI::toJsonValue(m_network_config));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_release_channel_isSet) {
        obj.insert(QString("releaseChannel"), ::OpenAPI::toJsonValue(m_release_channel));
    }
    if (m_scaling_config.isSet()) {
        obj.insert(QString("scalingConfig"), ::OpenAPI::toJsonValue(m_scaling_config));
    }
    if (m_scheduled_backup.isSet()) {
        obj.insert(QString("scheduledBackup"), ::OpenAPI::toJsonValue(m_scheduled_backup));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_message_isSet) {
        obj.insert(QString("stateMessage"), ::OpenAPI::toJsonValue(m_state_message));
    }
    if (m_telemetry_config.isSet()) {
        obj.insert(QString("telemetryConfig"), ::OpenAPI::toJsonValue(m_telemetry_config));
    }
    if (m_tier_isSet) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIService::getArtifactGcsUri() const {
    return m_artifact_gcs_uri;
}
void OAIService::setArtifactGcsUri(const QString &artifact_gcs_uri) {
    m_artifact_gcs_uri = artifact_gcs_uri;
    m_artifact_gcs_uri_isSet = true;
}

bool OAIService::is_artifact_gcs_uri_Set() const{
    return m_artifact_gcs_uri_isSet;
}

bool OAIService::is_artifact_gcs_uri_Valid() const{
    return m_artifact_gcs_uri_isValid;
}

QString OAIService::getCreateTime() const {
    return m_create_time;
}
void OAIService::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIService::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIService::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIService::getDatabaseType() const {
    return m_database_type;
}
void OAIService::setDatabaseType(const QString &database_type) {
    m_database_type = database_type;
    m_database_type_isSet = true;
}

bool OAIService::is_database_type_Set() const{
    return m_database_type_isSet;
}

bool OAIService::is_database_type_Valid() const{
    return m_database_type_isValid;
}

OAIEncryptionConfig OAIService::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAIService::setEncryptionConfig(const OAIEncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAIService::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAIService::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

QString OAIService::getEndpointUri() const {
    return m_endpoint_uri;
}
void OAIService::setEndpointUri(const QString &endpoint_uri) {
    m_endpoint_uri = endpoint_uri;
    m_endpoint_uri_isSet = true;
}

bool OAIService::is_endpoint_uri_Set() const{
    return m_endpoint_uri_isSet;
}

bool OAIService::is_endpoint_uri_Valid() const{
    return m_endpoint_uri_isValid;
}

OAIHiveMetastoreConfig OAIService::getHiveMetastoreConfig() const {
    return m_hive_metastore_config;
}
void OAIService::setHiveMetastoreConfig(const OAIHiveMetastoreConfig &hive_metastore_config) {
    m_hive_metastore_config = hive_metastore_config;
    m_hive_metastore_config_isSet = true;
}

bool OAIService::is_hive_metastore_config_Set() const{
    return m_hive_metastore_config_isSet;
}

bool OAIService::is_hive_metastore_config_Valid() const{
    return m_hive_metastore_config_isValid;
}

QMap<QString, QString> OAIService::getLabels() const {
    return m_labels;
}
void OAIService::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIService::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIService::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIMaintenanceWindow OAIService::getMaintenanceWindow() const {
    return m_maintenance_window;
}
void OAIService::setMaintenanceWindow(const OAIMaintenanceWindow &maintenance_window) {
    m_maintenance_window = maintenance_window;
    m_maintenance_window_isSet = true;
}

bool OAIService::is_maintenance_window_Set() const{
    return m_maintenance_window_isSet;
}

bool OAIService::is_maintenance_window_Valid() const{
    return m_maintenance_window_isValid;
}

OAIMetadataIntegration OAIService::getMetadataIntegration() const {
    return m_metadata_integration;
}
void OAIService::setMetadataIntegration(const OAIMetadataIntegration &metadata_integration) {
    m_metadata_integration = metadata_integration;
    m_metadata_integration_isSet = true;
}

bool OAIService::is_metadata_integration_Set() const{
    return m_metadata_integration_isSet;
}

bool OAIService::is_metadata_integration_Valid() const{
    return m_metadata_integration_isValid;
}

OAIMetadataManagementActivity OAIService::getMetadataManagementActivity() const {
    return m_metadata_management_activity;
}
void OAIService::setMetadataManagementActivity(const OAIMetadataManagementActivity &metadata_management_activity) {
    m_metadata_management_activity = metadata_management_activity;
    m_metadata_management_activity_isSet = true;
}

bool OAIService::is_metadata_management_activity_Set() const{
    return m_metadata_management_activity_isSet;
}

bool OAIService::is_metadata_management_activity_Valid() const{
    return m_metadata_management_activity_isValid;
}

QString OAIService::getName() const {
    return m_name;
}
void OAIService::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIService::is_name_Set() const{
    return m_name_isSet;
}

bool OAIService::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIService::getNetwork() const {
    return m_network;
}
void OAIService::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIService::is_network_Set() const{
    return m_network_isSet;
}

bool OAIService::is_network_Valid() const{
    return m_network_isValid;
}

OAINetworkConfig OAIService::getNetworkConfig() const {
    return m_network_config;
}
void OAIService::setNetworkConfig(const OAINetworkConfig &network_config) {
    m_network_config = network_config;
    m_network_config_isSet = true;
}

bool OAIService::is_network_config_Set() const{
    return m_network_config_isSet;
}

bool OAIService::is_network_config_Valid() const{
    return m_network_config_isValid;
}

qint32 OAIService::getPort() const {
    return m_port;
}
void OAIService::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIService::is_port_Set() const{
    return m_port_isSet;
}

bool OAIService::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIService::getReleaseChannel() const {
    return m_release_channel;
}
void OAIService::setReleaseChannel(const QString &release_channel) {
    m_release_channel = release_channel;
    m_release_channel_isSet = true;
}

bool OAIService::is_release_channel_Set() const{
    return m_release_channel_isSet;
}

bool OAIService::is_release_channel_Valid() const{
    return m_release_channel_isValid;
}

OAIScalingConfig OAIService::getScalingConfig() const {
    return m_scaling_config;
}
void OAIService::setScalingConfig(const OAIScalingConfig &scaling_config) {
    m_scaling_config = scaling_config;
    m_scaling_config_isSet = true;
}

bool OAIService::is_scaling_config_Set() const{
    return m_scaling_config_isSet;
}

bool OAIService::is_scaling_config_Valid() const{
    return m_scaling_config_isValid;
}

OAIScheduledBackup OAIService::getScheduledBackup() const {
    return m_scheduled_backup;
}
void OAIService::setScheduledBackup(const OAIScheduledBackup &scheduled_backup) {
    m_scheduled_backup = scheduled_backup;
    m_scheduled_backup_isSet = true;
}

bool OAIService::is_scheduled_backup_Set() const{
    return m_scheduled_backup_isSet;
}

bool OAIService::is_scheduled_backup_Valid() const{
    return m_scheduled_backup_isValid;
}

QString OAIService::getState() const {
    return m_state;
}
void OAIService::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIService::is_state_Set() const{
    return m_state_isSet;
}

bool OAIService::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIService::getStateMessage() const {
    return m_state_message;
}
void OAIService::setStateMessage(const QString &state_message) {
    m_state_message = state_message;
    m_state_message_isSet = true;
}

bool OAIService::is_state_message_Set() const{
    return m_state_message_isSet;
}

bool OAIService::is_state_message_Valid() const{
    return m_state_message_isValid;
}

OAITelemetryConfig OAIService::getTelemetryConfig() const {
    return m_telemetry_config;
}
void OAIService::setTelemetryConfig(const OAITelemetryConfig &telemetry_config) {
    m_telemetry_config = telemetry_config;
    m_telemetry_config_isSet = true;
}

bool OAIService::is_telemetry_config_Set() const{
    return m_telemetry_config_isSet;
}

bool OAIService::is_telemetry_config_Valid() const{
    return m_telemetry_config_isValid;
}

QString OAIService::getTier() const {
    return m_tier;
}
void OAIService::setTier(const QString &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAIService::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAIService::is_tier_Valid() const{
    return m_tier_isValid;
}

QString OAIService::getUid() const {
    return m_uid;
}
void OAIService::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIService::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIService::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIService::getUpdateTime() const {
    return m_update_time;
}
void OAIService::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIService::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIService::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_gcs_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hive_metastore_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_window.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_integration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_management_activity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_backup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telemetry_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
