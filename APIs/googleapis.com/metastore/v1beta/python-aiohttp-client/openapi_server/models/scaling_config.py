# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScalingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_size: str=None, scaling_factor: float=None):
        """ScalingConfig - a model defined in OpenAPI

        :param instance_size: The instance_size of this ScalingConfig.
        :param scaling_factor: The scaling_factor of this ScalingConfig.
        """
        self.openapi_types = {
            'instance_size': str,
            'scaling_factor': float
        }

        self.attribute_map = {
            'instance_size': 'instanceSize',
            'scaling_factor': 'scalingFactor'
        }

        self._instance_size = instance_size
        self._scaling_factor = scaling_factor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScalingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScalingConfig of this ScalingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_size(self):
        """Gets the instance_size of this ScalingConfig.

        An enum of readable instance sizes, with each instance size mapping to a float value (e.g. InstanceSize.EXTRA_SMALL = scaling_factor(0.1))

        :return: The instance_size of this ScalingConfig.
        :rtype: str
        """
        return self._instance_size

    @instance_size.setter
    def instance_size(self, instance_size):
        """Sets the instance_size of this ScalingConfig.

        An enum of readable instance sizes, with each instance size mapping to a float value (e.g. InstanceSize.EXTRA_SMALL = scaling_factor(0.1))

        :param instance_size: The instance_size of this ScalingConfig.
        :type instance_size: str
        """
        allowed_values = ["INSTANCE_SIZE_UNSPECIFIED", "EXTRA_SMALL", "SMALL", "MEDIUM", "LARGE", "EXTRA_LARGE"]  # noqa: E501
        if instance_size not in allowed_values:
            raise ValueError(
                "Invalid value for `instance_size` ({0}), must be one of {1}"
                .format(instance_size, allowed_values)
            )

        self._instance_size = instance_size

    @property
    def scaling_factor(self):
        """Gets the scaling_factor of this ScalingConfig.

        Scaling factor, increments of 0.1 for values less than 1.0, and increments of 1.0 for values greater than 1.0.

        :return: The scaling_factor of this ScalingConfig.
        :rtype: float
        """
        return self._scaling_factor

    @scaling_factor.setter
    def scaling_factor(self, scaling_factor):
        """Sets the scaling_factor of this ScalingConfig.

        Scaling factor, increments of 0.1 for values less than 1.0, and increments of 1.0 for values greater than 1.0.

        :param scaling_factor: The scaling_factor of this ScalingConfig.
        :type scaling_factor: float
        """

        self._scaling_factor = scaling_factor
