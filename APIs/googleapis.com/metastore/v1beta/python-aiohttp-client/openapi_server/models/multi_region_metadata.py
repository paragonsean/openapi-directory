# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MultiRegionMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, constituent_regions: List[str]=None):
        """MultiRegionMetadata - a model defined in OpenAPI

        :param constituent_regions: The constituent_regions of this MultiRegionMetadata.
        """
        self.openapi_types = {
            'constituent_regions': List[str]
        }

        self.attribute_map = {
            'constituent_regions': 'constituentRegions'
        }

        self._constituent_regions = constituent_regions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MultiRegionMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MultiRegionMetadata of this MultiRegionMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def constituent_regions(self):
        """Gets the constituent_regions of this MultiRegionMetadata.

        The regions constituting the multi-region.

        :return: The constituent_regions of this MultiRegionMetadata.
        :rtype: List[str]
        """
        return self._constituent_regions

    @constituent_regions.setter
    def constituent_regions(self, constituent_regions):
        """Sets the constituent_regions of this MultiRegionMetadata.

        The regions constituting the multi-region.

        :param constituent_regions: The constituent_regions of this MultiRegionMetadata.
        :type constituent_regions: List[str]
        """

        self._constituent_regions = constituent_regions
