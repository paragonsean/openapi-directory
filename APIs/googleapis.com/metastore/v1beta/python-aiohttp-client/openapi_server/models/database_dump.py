# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabaseDump(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_type: str=None, gcs_uri: str=None, source_database: str=None, type: str=None):
        """DatabaseDump - a model defined in OpenAPI

        :param database_type: The database_type of this DatabaseDump.
        :param gcs_uri: The gcs_uri of this DatabaseDump.
        :param source_database: The source_database of this DatabaseDump.
        :param type: The type of this DatabaseDump.
        """
        self.openapi_types = {
            'database_type': str,
            'gcs_uri': str,
            'source_database': str,
            'type': str
        }

        self.attribute_map = {
            'database_type': 'databaseType',
            'gcs_uri': 'gcsUri',
            'source_database': 'sourceDatabase',
            'type': 'type'
        }

        self._database_type = database_type
        self._gcs_uri = gcs_uri
        self._source_database = source_database
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseDump':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseDump of this DatabaseDump.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_type(self):
        """Gets the database_type of this DatabaseDump.

        The type of the database.

        :return: The database_type of this DatabaseDump.
        :rtype: str
        """
        return self._database_type

    @database_type.setter
    def database_type(self, database_type):
        """Sets the database_type of this DatabaseDump.

        The type of the database.

        :param database_type: The database_type of this DatabaseDump.
        :type database_type: str
        """
        allowed_values = ["DATABASE_TYPE_UNSPECIFIED", "MYSQL"]  # noqa: E501
        if database_type not in allowed_values:
            raise ValueError(
                "Invalid value for `database_type` ({0}), must be one of {1}"
                .format(database_type, allowed_values)
            )

        self._database_type = database_type

    @property
    def gcs_uri(self):
        """Gets the gcs_uri of this DatabaseDump.

        A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.

        :return: The gcs_uri of this DatabaseDump.
        :rtype: str
        """
        return self._gcs_uri

    @gcs_uri.setter
    def gcs_uri(self, gcs_uri):
        """Sets the gcs_uri of this DatabaseDump.

        A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.

        :param gcs_uri: The gcs_uri of this DatabaseDump.
        :type gcs_uri: str
        """

        self._gcs_uri = gcs_uri

    @property
    def source_database(self):
        """Gets the source_database of this DatabaseDump.

        The name of the source database.

        :return: The source_database of this DatabaseDump.
        :rtype: str
        """
        return self._source_database

    @source_database.setter
    def source_database(self, source_database):
        """Sets the source_database of this DatabaseDump.

        The name of the source database.

        :param source_database: The source_database of this DatabaseDump.
        :type source_database: str
        """

        self._source_database = source_database

    @property
    def type(self):
        """Gets the type of this DatabaseDump.

        Optional. The type of the database dump. If unspecified, defaults to MYSQL.

        :return: The type of this DatabaseDump.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DatabaseDump.

        Optional. The type of the database dump. If unspecified, defaults to MYSQL.

        :param type: The type of this DatabaseDump.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "MYSQL", "AVRO"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
