# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LatestBackup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_id: str=None, duration: str=None, start_time: str=None, state: str=None):
        """LatestBackup - a model defined in OpenAPI

        :param backup_id: The backup_id of this LatestBackup.
        :param duration: The duration of this LatestBackup.
        :param start_time: The start_time of this LatestBackup.
        :param state: The state of this LatestBackup.
        """
        self.openapi_types = {
            'backup_id': str,
            'duration': str,
            'start_time': str,
            'state': str
        }

        self.attribute_map = {
            'backup_id': 'backupId',
            'duration': 'duration',
            'start_time': 'startTime',
            'state': 'state'
        }

        self._backup_id = backup_id
        self._duration = duration
        self._start_time = start_time
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LatestBackup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LatestBackup of this LatestBackup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_id(self):
        """Gets the backup_id of this LatestBackup.

        Output only. The ID of an in-progress scheduled backup. Empty if no backup is in progress.

        :return: The backup_id of this LatestBackup.
        :rtype: str
        """
        return self._backup_id

    @backup_id.setter
    def backup_id(self, backup_id):
        """Sets the backup_id of this LatestBackup.

        Output only. The ID of an in-progress scheduled backup. Empty if no backup is in progress.

        :param backup_id: The backup_id of this LatestBackup.
        :type backup_id: str
        """

        self._backup_id = backup_id

    @property
    def duration(self):
        """Gets the duration of this LatestBackup.

        Output only. The duration of the backup completion.

        :return: The duration of this LatestBackup.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this LatestBackup.

        Output only. The duration of the backup completion.

        :param duration: The duration of this LatestBackup.
        :type duration: str
        """

        self._duration = duration

    @property
    def start_time(self):
        """Gets the start_time of this LatestBackup.

        Output only. The time when the backup was started.

        :return: The start_time of this LatestBackup.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this LatestBackup.

        Output only. The time when the backup was started.

        :param start_time: The start_time of this LatestBackup.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this LatestBackup.

        Output only. The current state of the backup.

        :return: The state of this LatestBackup.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this LatestBackup.

        Output only. The current state of the backup.

        :param state: The state of this LatestBackup.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "IN_PROGRESS", "SUCCEEDED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
