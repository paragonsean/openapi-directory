# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.network_config import NetworkConfig
from openapi_server import util


class AuxiliaryVersionConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config_overrides: Dict[str, str]=None, network_config: NetworkConfig=None, version: str=None):
        """AuxiliaryVersionConfig - a model defined in OpenAPI

        :param config_overrides: The config_overrides of this AuxiliaryVersionConfig.
        :param network_config: The network_config of this AuxiliaryVersionConfig.
        :param version: The version of this AuxiliaryVersionConfig.
        """
        self.openapi_types = {
            'config_overrides': Dict[str, str],
            'network_config': NetworkConfig,
            'version': str
        }

        self.attribute_map = {
            'config_overrides': 'configOverrides',
            'network_config': 'networkConfig',
            'version': 'version'
        }

        self._config_overrides = config_overrides
        self._network_config = network_config
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuxiliaryVersionConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuxiliaryVersionConfig of this AuxiliaryVersionConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config_overrides(self):
        """Gets the config_overrides of this AuxiliaryVersionConfig.

        A mapping of Hive metastore configuration key-value pairs to apply to the auxiliary Hive metastore (configured in hive-site.xml) in addition to the primary version's overrides. If keys are present in both the auxiliary version's overrides and the primary version's overrides, the value from the auxiliary version's overrides takes precedence.

        :return: The config_overrides of this AuxiliaryVersionConfig.
        :rtype: Dict[str, str]
        """
        return self._config_overrides

    @config_overrides.setter
    def config_overrides(self, config_overrides):
        """Sets the config_overrides of this AuxiliaryVersionConfig.

        A mapping of Hive metastore configuration key-value pairs to apply to the auxiliary Hive metastore (configured in hive-site.xml) in addition to the primary version's overrides. If keys are present in both the auxiliary version's overrides and the primary version's overrides, the value from the auxiliary version's overrides takes precedence.

        :param config_overrides: The config_overrides of this AuxiliaryVersionConfig.
        :type config_overrides: Dict[str, str]
        """

        self._config_overrides = config_overrides

    @property
    def network_config(self):
        """Gets the network_config of this AuxiliaryVersionConfig.


        :return: The network_config of this AuxiliaryVersionConfig.
        :rtype: NetworkConfig
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config):
        """Sets the network_config of this AuxiliaryVersionConfig.


        :param network_config: The network_config of this AuxiliaryVersionConfig.
        :type network_config: NetworkConfig
        """

        self._network_config = network_config

    @property
    def version(self):
        """Gets the version of this AuxiliaryVersionConfig.

        The Hive metastore version of the auxiliary service. It must be less than the primary Hive metastore service's version.

        :return: The version of this AuxiliaryVersionConfig.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AuxiliaryVersionConfig.

        The Hive metastore version of the auxiliary service. It must be less than the primary Hive metastore service's version.

        :param version: The version of this AuxiliaryVersionConfig.
        :type version: str
        """

        self._version = version
