# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MoveTableToDatabaseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, db_name: str=None, destination_db_name: str=None, table_name: str=None):
        """MoveTableToDatabaseRequest - a model defined in OpenAPI

        :param db_name: The db_name of this MoveTableToDatabaseRequest.
        :param destination_db_name: The destination_db_name of this MoveTableToDatabaseRequest.
        :param table_name: The table_name of this MoveTableToDatabaseRequest.
        """
        self.openapi_types = {
            'db_name': str,
            'destination_db_name': str,
            'table_name': str
        }

        self.attribute_map = {
            'db_name': 'dbName',
            'destination_db_name': 'destinationDbName',
            'table_name': 'tableName'
        }

        self._db_name = db_name
        self._destination_db_name = destination_db_name
        self._table_name = table_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MoveTableToDatabaseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MoveTableToDatabaseRequest of this MoveTableToDatabaseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def db_name(self):
        """Gets the db_name of this MoveTableToDatabaseRequest.

        Required. The name of the database where the table resides.

        :return: The db_name of this MoveTableToDatabaseRequest.
        :rtype: str
        """
        return self._db_name

    @db_name.setter
    def db_name(self, db_name):
        """Sets the db_name of this MoveTableToDatabaseRequest.

        Required. The name of the database where the table resides.

        :param db_name: The db_name of this MoveTableToDatabaseRequest.
        :type db_name: str
        """

        self._db_name = db_name

    @property
    def destination_db_name(self):
        """Gets the destination_db_name of this MoveTableToDatabaseRequest.

        Required. The name of the database where the table should be moved.

        :return: The destination_db_name of this MoveTableToDatabaseRequest.
        :rtype: str
        """
        return self._destination_db_name

    @destination_db_name.setter
    def destination_db_name(self, destination_db_name):
        """Sets the destination_db_name of this MoveTableToDatabaseRequest.

        Required. The name of the database where the table should be moved.

        :param destination_db_name: The destination_db_name of this MoveTableToDatabaseRequest.
        :type destination_db_name: str
        """

        self._destination_db_name = destination_db_name

    @property
    def table_name(self):
        """Gets the table_name of this MoveTableToDatabaseRequest.

        Required. The name of the table to be moved.

        :return: The table_name of this MoveTableToDatabaseRequest.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this MoveTableToDatabaseRequest.

        Required. The name of the table to be moved.

        :param table_name: The table_name of this MoveTableToDatabaseRequest.
        :type table_name: str
        """

        self._table_name = table_name
