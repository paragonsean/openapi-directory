/*
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for DataprocMetastore.Restore.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:13.591450-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RestoreServiceRequest {
  public static final String SERIALIZED_NAME_BACKUP = "backup";
  @SerializedName(SERIALIZED_NAME_BACKUP)
  private String backup;

  public static final String SERIALIZED_NAME_BACKUP_LOCATION = "backupLocation";
  @SerializedName(SERIALIZED_NAME_BACKUP_LOCATION)
  private String backupLocation;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  /**
   * Optional. The type of restore. If unspecified, defaults to METADATA_ONLY.
   */
  @JsonAdapter(RestoreTypeEnum.Adapter.class)
  public enum RestoreTypeEnum {
    RESTORE_TYPE_UNSPECIFIED("RESTORE_TYPE_UNSPECIFIED"),
    
    FULL("FULL"),
    
    METADATA_ONLY("METADATA_ONLY");

    private String value;

    RestoreTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RestoreTypeEnum fromValue(String value) {
      for (RestoreTypeEnum b : RestoreTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RestoreTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RestoreTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RestoreTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RestoreTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RestoreTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESTORE_TYPE = "restoreType";
  @SerializedName(SERIALIZED_NAME_RESTORE_TYPE)
  private RestoreTypeEnum restoreType;

  public RestoreServiceRequest() {
  }

  public RestoreServiceRequest backup(String backup) {
    this.backup = backup;
    return this;
  }

  /**
   * Optional. The relative resource name of the metastore service backup to restore from, in the following form:projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}. Mutually exclusive with backup_location, and exactly one of the two must be set.
   * @return backup
   */
  @javax.annotation.Nullable
  public String getBackup() {
    return backup;
  }

  public void setBackup(String backup) {
    this.backup = backup;
  }


  public RestoreServiceRequest backupLocation(String backupLocation) {
    this.backupLocation = backupLocation;
    return this;
  }

  /**
   * Optional. A Cloud Storage URI specifying the location of the backup artifacts, namely - backup avro files under \&quot;avro/\&quot;, backup_metastore.json and service.json, in the following form:gs://. Mutually exclusive with backup, and exactly one of the two must be set.
   * @return backupLocation
   */
  @javax.annotation.Nullable
  public String getBackupLocation() {
    return backupLocation;
  }

  public void setBackupLocation(String backupLocation) {
    this.backupLocation = backupLocation;
  }


  public RestoreServiceRequest requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Optional. A request ID. Specify a unique request ID to allow the server to ignore the request if it has completed. The server will ignore subsequent requests that provide a duplicate request ID for at least 60 minutes after the first request.For example, if an initial request times out, followed by another request with the same request ID, the server ignores the second request to prevent the creation of duplicate commitments.The request ID must be a valid UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format). A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public RestoreServiceRequest restoreType(RestoreTypeEnum restoreType) {
    this.restoreType = restoreType;
    return this;
  }

  /**
   * Optional. The type of restore. If unspecified, defaults to METADATA_ONLY.
   * @return restoreType
   */
  @javax.annotation.Nullable
  public RestoreTypeEnum getRestoreType() {
    return restoreType;
  }

  public void setRestoreType(RestoreTypeEnum restoreType) {
    this.restoreType = restoreType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestoreServiceRequest restoreServiceRequest = (RestoreServiceRequest) o;
    return Objects.equals(this.backup, restoreServiceRequest.backup) &&
        Objects.equals(this.backupLocation, restoreServiceRequest.backupLocation) &&
        Objects.equals(this.requestId, restoreServiceRequest.requestId) &&
        Objects.equals(this.restoreType, restoreServiceRequest.restoreType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backup, backupLocation, requestId, restoreType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestoreServiceRequest {\n");
    sb.append("    backup: ").append(toIndentedString(backup)).append("\n");
    sb.append("    backupLocation: ").append(toIndentedString(backupLocation)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    restoreType: ").append(toIndentedString(restoreType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backup");
    openapiFields.add("backupLocation");
    openapiFields.add("requestId");
    openapiFields.add("restoreType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RestoreServiceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestoreServiceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestoreServiceRequest is not found in the empty JSON string", RestoreServiceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestoreServiceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestoreServiceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backup") != null && !jsonObj.get("backup").isJsonNull()) && !jsonObj.get("backup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backup").toString()));
      }
      if ((jsonObj.get("backupLocation") != null && !jsonObj.get("backupLocation").isJsonNull()) && !jsonObj.get("backupLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupLocation").toString()));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if ((jsonObj.get("restoreType") != null && !jsonObj.get("restoreType").isJsonNull()) && !jsonObj.get("restoreType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `restoreType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("restoreType").toString()));
      }
      // validate the optional field `restoreType`
      if (jsonObj.get("restoreType") != null && !jsonObj.get("restoreType").isJsonNull()) {
        RestoreTypeEnum.validateJsonElement(jsonObj.get("restoreType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestoreServiceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestoreServiceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestoreServiceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestoreServiceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RestoreServiceRequest>() {
           @Override
           public void write(JsonWriter out, RestoreServiceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestoreServiceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RestoreServiceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RestoreServiceRequest
   * @throws IOException if the JSON string is invalid with respect to RestoreServiceRequest
   */
  public static RestoreServiceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestoreServiceRequest.class);
  }

  /**
   * Convert an instance of RestoreServiceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

