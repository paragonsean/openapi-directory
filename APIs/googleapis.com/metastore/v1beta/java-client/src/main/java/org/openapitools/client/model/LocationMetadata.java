/*
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HiveMetastoreVersion;
import org.openapitools.client.model.MultiRegionMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata about the service in a location.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:13.591450-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LocationMetadata {
  public static final String SERIALIZED_NAME_MULTI_REGION_METADATA = "multiRegionMetadata";
  @SerializedName(SERIALIZED_NAME_MULTI_REGION_METADATA)
  private MultiRegionMetadata multiRegionMetadata;

  public static final String SERIALIZED_NAME_SUPPORTED_HIVE_METASTORE_VERSIONS = "supportedHiveMetastoreVersions";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_HIVE_METASTORE_VERSIONS)
  private List<HiveMetastoreVersion> supportedHiveMetastoreVersions = new ArrayList<>();

  public LocationMetadata() {
  }

  public LocationMetadata multiRegionMetadata(MultiRegionMetadata multiRegionMetadata) {
    this.multiRegionMetadata = multiRegionMetadata;
    return this;
  }

  /**
   * Get multiRegionMetadata
   * @return multiRegionMetadata
   */
  @javax.annotation.Nullable
  public MultiRegionMetadata getMultiRegionMetadata() {
    return multiRegionMetadata;
  }

  public void setMultiRegionMetadata(MultiRegionMetadata multiRegionMetadata) {
    this.multiRegionMetadata = multiRegionMetadata;
  }


  public LocationMetadata supportedHiveMetastoreVersions(List<HiveMetastoreVersion> supportedHiveMetastoreVersions) {
    this.supportedHiveMetastoreVersions = supportedHiveMetastoreVersions;
    return this;
  }

  public LocationMetadata addSupportedHiveMetastoreVersionsItem(HiveMetastoreVersion supportedHiveMetastoreVersionsItem) {
    if (this.supportedHiveMetastoreVersions == null) {
      this.supportedHiveMetastoreVersions = new ArrayList<>();
    }
    this.supportedHiveMetastoreVersions.add(supportedHiveMetastoreVersionsItem);
    return this;
  }

  /**
   * The versions of Hive Metastore that can be used when creating a new metastore service in this location. The server guarantees that exactly one HiveMetastoreVersion in the list will set is_default.
   * @return supportedHiveMetastoreVersions
   */
  @javax.annotation.Nullable
  public List<HiveMetastoreVersion> getSupportedHiveMetastoreVersions() {
    return supportedHiveMetastoreVersions;
  }

  public void setSupportedHiveMetastoreVersions(List<HiveMetastoreVersion> supportedHiveMetastoreVersions) {
    this.supportedHiveMetastoreVersions = supportedHiveMetastoreVersions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocationMetadata locationMetadata = (LocationMetadata) o;
    return Objects.equals(this.multiRegionMetadata, locationMetadata.multiRegionMetadata) &&
        Objects.equals(this.supportedHiveMetastoreVersions, locationMetadata.supportedHiveMetastoreVersions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(multiRegionMetadata, supportedHiveMetastoreVersions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocationMetadata {\n");
    sb.append("    multiRegionMetadata: ").append(toIndentedString(multiRegionMetadata)).append("\n");
    sb.append("    supportedHiveMetastoreVersions: ").append(toIndentedString(supportedHiveMetastoreVersions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("multiRegionMetadata");
    openapiFields.add("supportedHiveMetastoreVersions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LocationMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LocationMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LocationMetadata is not found in the empty JSON string", LocationMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LocationMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LocationMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `multiRegionMetadata`
      if (jsonObj.get("multiRegionMetadata") != null && !jsonObj.get("multiRegionMetadata").isJsonNull()) {
        MultiRegionMetadata.validateJsonElement(jsonObj.get("multiRegionMetadata"));
      }
      if (jsonObj.get("supportedHiveMetastoreVersions") != null && !jsonObj.get("supportedHiveMetastoreVersions").isJsonNull()) {
        JsonArray jsonArraysupportedHiveMetastoreVersions = jsonObj.getAsJsonArray("supportedHiveMetastoreVersions");
        if (jsonArraysupportedHiveMetastoreVersions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("supportedHiveMetastoreVersions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `supportedHiveMetastoreVersions` to be an array in the JSON string but got `%s`", jsonObj.get("supportedHiveMetastoreVersions").toString()));
          }

          // validate the optional field `supportedHiveMetastoreVersions` (array)
          for (int i = 0; i < jsonArraysupportedHiveMetastoreVersions.size(); i++) {
            HiveMetastoreVersion.validateJsonElement(jsonArraysupportedHiveMetastoreVersions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LocationMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LocationMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LocationMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LocationMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<LocationMetadata>() {
           @Override
           public void write(JsonWriter out, LocationMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LocationMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LocationMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LocationMetadata
   * @throws IOException if the JSON string is invalid with respect to LocationMetadata
   */
  public static LocationMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LocationMetadata.class);
  }

  /**
   * Convert an instance of LocationMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

