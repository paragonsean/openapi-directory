/*
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A specification of the location of and metadata about a database dump from a relational database management system.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:13.591450-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabaseDump {
  /**
   * The type of the database.
   */
  @JsonAdapter(DatabaseTypeEnum.Adapter.class)
  public enum DatabaseTypeEnum {
    DATABASE_TYPE_UNSPECIFIED("DATABASE_TYPE_UNSPECIFIED"),
    
    MYSQL("MYSQL");

    private String value;

    DatabaseTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DatabaseTypeEnum fromValue(String value) {
      for (DatabaseTypeEnum b : DatabaseTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DatabaseTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DatabaseTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DatabaseTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DatabaseTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DatabaseTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATABASE_TYPE = "databaseType";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_DATABASE_TYPE)
  private DatabaseTypeEnum databaseType;

  public static final String SERIALIZED_NAME_GCS_URI = "gcsUri";
  @SerializedName(SERIALIZED_NAME_GCS_URI)
  private String gcsUri;

  public static final String SERIALIZED_NAME_SOURCE_DATABASE = "sourceDatabase";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SOURCE_DATABASE)
  private String sourceDatabase;

  /**
   * Optional. The type of the database dump. If unspecified, defaults to MYSQL.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    MYSQL("MYSQL"),
    
    AVRO("AVRO");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public DatabaseDump() {
  }

  @Deprecated
  public DatabaseDump databaseType(DatabaseTypeEnum databaseType) {
    this.databaseType = databaseType;
    return this;
  }

  /**
   * The type of the database.
   * @return databaseType
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public DatabaseTypeEnum getDatabaseType() {
    return databaseType;
  }

  @Deprecated
  public void setDatabaseType(DatabaseTypeEnum databaseType) {
    this.databaseType = databaseType;
  }


  public DatabaseDump gcsUri(String gcsUri) {
    this.gcsUri = gcsUri;
    return this;
  }

  /**
   * A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.
   * @return gcsUri
   */
  @javax.annotation.Nullable
  public String getGcsUri() {
    return gcsUri;
  }

  public void setGcsUri(String gcsUri) {
    this.gcsUri = gcsUri;
  }


  @Deprecated
  public DatabaseDump sourceDatabase(String sourceDatabase) {
    this.sourceDatabase = sourceDatabase;
    return this;
  }

  /**
   * The name of the source database.
   * @return sourceDatabase
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getSourceDatabase() {
    return sourceDatabase;
  }

  @Deprecated
  public void setSourceDatabase(String sourceDatabase) {
    this.sourceDatabase = sourceDatabase;
  }


  public DatabaseDump type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Optional. The type of the database dump. If unspecified, defaults to MYSQL.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseDump databaseDump = (DatabaseDump) o;
    return Objects.equals(this.databaseType, databaseDump.databaseType) &&
        Objects.equals(this.gcsUri, databaseDump.gcsUri) &&
        Objects.equals(this.sourceDatabase, databaseDump.sourceDatabase) &&
        Objects.equals(this.type, databaseDump.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(databaseType, gcsUri, sourceDatabase, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseDump {\n");
    sb.append("    databaseType: ").append(toIndentedString(databaseType)).append("\n");
    sb.append("    gcsUri: ").append(toIndentedString(gcsUri)).append("\n");
    sb.append("    sourceDatabase: ").append(toIndentedString(sourceDatabase)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("databaseType");
    openapiFields.add("gcsUri");
    openapiFields.add("sourceDatabase");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabaseDump
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseDump.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseDump is not found in the empty JSON string", DatabaseDump.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseDump.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseDump` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("databaseType") != null && !jsonObj.get("databaseType").isJsonNull()) && !jsonObj.get("databaseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseType").toString()));
      }
      // validate the optional field `databaseType`
      if (jsonObj.get("databaseType") != null && !jsonObj.get("databaseType").isJsonNull()) {
        DatabaseTypeEnum.validateJsonElement(jsonObj.get("databaseType"));
      }
      if ((jsonObj.get("gcsUri") != null && !jsonObj.get("gcsUri").isJsonNull()) && !jsonObj.get("gcsUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcsUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcsUri").toString()));
      }
      if ((jsonObj.get("sourceDatabase") != null && !jsonObj.get("sourceDatabase").isJsonNull()) && !jsonObj.get("sourceDatabase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceDatabase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceDatabase").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseDump.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseDump' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseDump> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseDump.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseDump>() {
           @Override
           public void write(JsonWriter out, DatabaseDump value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseDump read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabaseDump given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabaseDump
   * @throws IOException if the JSON string is invalid with respect to DatabaseDump
   */
  public static DatabaseDump fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseDump.class);
  }

  /**
   * Convert an instance of DatabaseDump to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

