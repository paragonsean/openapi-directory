/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DataprocMetastoreApi);
  }
}(this, function(expect, DataprocMetastoreApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DataprocMetastoreApi.ProjectsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectsApi', function() {
    describe('metastoreProjectsLocationsFederationsCreate', function() {
      it('should call metastoreProjectsLocationsFederationsCreate successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsFederationsCreate
        //instance.metastoreProjectsLocationsFederationsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsFederationsList', function() {
      it('should call metastoreProjectsLocationsFederationsList successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsFederationsList
        //instance.metastoreProjectsLocationsFederationsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsList', function() {
      it('should call metastoreProjectsLocationsList successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsList
        //instance.metastoreProjectsLocationsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsOperationsCancel', function() {
      it('should call metastoreProjectsLocationsOperationsCancel successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsOperationsCancel
        //instance.metastoreProjectsLocationsOperationsCancel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsOperationsList', function() {
      it('should call metastoreProjectsLocationsOperationsList successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsOperationsList
        //instance.metastoreProjectsLocationsOperationsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsServicesAlterLocation', function() {
      it('should call metastoreProjectsLocationsServicesAlterLocation successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsServicesAlterLocation
        //instance.metastoreProjectsLocationsServicesAlterLocation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsServicesAlterTableProperties', function() {
      it('should call metastoreProjectsLocationsServicesAlterTableProperties successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsServicesAlterTableProperties
        //instance.metastoreProjectsLocationsServicesAlterTableProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsServicesBackupsCreate', function() {
      it('should call metastoreProjectsLocationsServicesBackupsCreate successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsServicesBackupsCreate
        //instance.metastoreProjectsLocationsServicesBackupsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsServicesBackupsList', function() {
      it('should call metastoreProjectsLocationsServicesBackupsList successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsServicesBackupsList
        //instance.metastoreProjectsLocationsServicesBackupsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsServicesCreate', function() {
      it('should call metastoreProjectsLocationsServicesCreate successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsServicesCreate
        //instance.metastoreProjectsLocationsServicesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsServicesDatabasesTablesGetIamPolicy', function() {
      it('should call metastoreProjectsLocationsServicesDatabasesTablesGetIamPolicy successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsServicesDatabasesTablesGetIamPolicy
        //instance.metastoreProjectsLocationsServicesDatabasesTablesGetIamPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsServicesDatabasesTablesSetIamPolicy', function() {
      it('should call metastoreProjectsLocationsServicesDatabasesTablesSetIamPolicy successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsServicesDatabasesTablesSetIamPolicy
        //instance.metastoreProjectsLocationsServicesDatabasesTablesSetIamPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsServicesDatabasesTablesTestIamPermissions', function() {
      it('should call metastoreProjectsLocationsServicesDatabasesTablesTestIamPermissions successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsServicesDatabasesTablesTestIamPermissions
        //instance.metastoreProjectsLocationsServicesDatabasesTablesTestIamPermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsServicesExportMetadata', function() {
      it('should call metastoreProjectsLocationsServicesExportMetadata successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsServicesExportMetadata
        //instance.metastoreProjectsLocationsServicesExportMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsServicesList', function() {
      it('should call metastoreProjectsLocationsServicesList successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsServicesList
        //instance.metastoreProjectsLocationsServicesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsServicesMetadataImportsCreate', function() {
      it('should call metastoreProjectsLocationsServicesMetadataImportsCreate successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsServicesMetadataImportsCreate
        //instance.metastoreProjectsLocationsServicesMetadataImportsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsServicesMetadataImportsGet', function() {
      it('should call metastoreProjectsLocationsServicesMetadataImportsGet successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsServicesMetadataImportsGet
        //instance.metastoreProjectsLocationsServicesMetadataImportsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsServicesMetadataImportsList', function() {
      it('should call metastoreProjectsLocationsServicesMetadataImportsList successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsServicesMetadataImportsList
        //instance.metastoreProjectsLocationsServicesMetadataImportsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsServicesMetadataImportsPatch', function() {
      it('should call metastoreProjectsLocationsServicesMetadataImportsPatch successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsServicesMetadataImportsPatch
        //instance.metastoreProjectsLocationsServicesMetadataImportsPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsServicesMigrationExecutionsDelete', function() {
      it('should call metastoreProjectsLocationsServicesMigrationExecutionsDelete successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsServicesMigrationExecutionsDelete
        //instance.metastoreProjectsLocationsServicesMigrationExecutionsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsServicesMoveTableToDatabase', function() {
      it('should call metastoreProjectsLocationsServicesMoveTableToDatabase successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsServicesMoveTableToDatabase
        //instance.metastoreProjectsLocationsServicesMoveTableToDatabase(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsServicesQueryMetadata', function() {
      it('should call metastoreProjectsLocationsServicesQueryMetadata successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsServicesQueryMetadata
        //instance.metastoreProjectsLocationsServicesQueryMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsServicesRemoveIamPolicy', function() {
      it('should call metastoreProjectsLocationsServicesRemoveIamPolicy successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsServicesRemoveIamPolicy
        //instance.metastoreProjectsLocationsServicesRemoveIamPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metastoreProjectsLocationsServicesRestore', function() {
      it('should call metastoreProjectsLocationsServicesRestore successfully', function(done) {
        //uncomment below and update the code to test metastoreProjectsLocationsServicesRestore
        //instance.metastoreProjectsLocationsServicesRestore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
