/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AlterMetadataResourceLocationRequest from './model/AlterMetadataResourceLocationRequest';
import AlterTablePropertiesRequest from './model/AlterTablePropertiesRequest';
import AuditConfig from './model/AuditConfig';
import AuditLogConfig from './model/AuditLogConfig';
import AuxiliaryVersionConfig from './model/AuxiliaryVersionConfig';
import BackendMetastore from './model/BackendMetastore';
import Backup from './model/Backup';
import Binding from './model/Binding';
import Consumer from './model/Consumer';
import DataCatalogConfig from './model/DataCatalogConfig';
import DatabaseDump from './model/DatabaseDump';
import DataplexConfig from './model/DataplexConfig';
import EncryptionConfig from './model/EncryptionConfig';
import ErrorDetails from './model/ErrorDetails';
import ExportMetadataRequest from './model/ExportMetadataRequest';
import Expr from './model/Expr';
import Federation from './model/Federation';
import HiveMetastoreConfig from './model/HiveMetastoreConfig';
import HiveMetastoreVersion from './model/HiveMetastoreVersion';
import KerberosConfig from './model/KerberosConfig';
import Lake from './model/Lake';
import LatestBackup from './model/LatestBackup';
import ListBackupsResponse from './model/ListBackupsResponse';
import ListFederationsResponse from './model/ListFederationsResponse';
import ListLocationsResponse from './model/ListLocationsResponse';
import ListMetadataImportsResponse from './model/ListMetadataImportsResponse';
import ListOperationsResponse from './model/ListOperationsResponse';
import ListServicesResponse from './model/ListServicesResponse';
import Location from './model/Location';
import LocationMetadata from './model/LocationMetadata';
import MaintenanceWindow from './model/MaintenanceWindow';
import MetadataExport from './model/MetadataExport';
import MetadataImport from './model/MetadataImport';
import MetadataIntegration from './model/MetadataIntegration';
import MetadataManagementActivity from './model/MetadataManagementActivity';
import MoveTableToDatabaseRequest from './model/MoveTableToDatabaseRequest';
import MultiRegionMetadata from './model/MultiRegionMetadata';
import NetworkConfig from './model/NetworkConfig';
import Operation from './model/Operation';
import OperationMetadata from './model/OperationMetadata';
import Policy from './model/Policy';
import QueryMetadataRequest from './model/QueryMetadataRequest';
import QueryMetadataResponse from './model/QueryMetadataResponse';
import RemoveIamPolicyRequest from './model/RemoveIamPolicyRequest';
import RemoveIamPolicyResponse from './model/RemoveIamPolicyResponse';
import Restore from './model/Restore';
import RestoreServiceRequest from './model/RestoreServiceRequest';
import ScalingConfig from './model/ScalingConfig';
import ScheduledBackup from './model/ScheduledBackup';
import Secret from './model/Secret';
import Service from './model/Service';
import SetIamPolicyRequest from './model/SetIamPolicyRequest';
import Status from './model/Status';
import TelemetryConfig from './model/TelemetryConfig';
import TestIamPermissionsRequest from './model/TestIamPermissionsRequest';
import TestIamPermissionsResponse from './model/TestIamPermissionsResponse';
import ProjectsApi from './api/ProjectsApi';


/**
* The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var DataprocMetastoreApi = require('index'); // See note below*.
* var xxxSvc = new DataprocMetastoreApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new DataprocMetastoreApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new DataprocMetastoreApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new DataprocMetastoreApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1beta
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AlterMetadataResourceLocationRequest model constructor.
     * @property {module:model/AlterMetadataResourceLocationRequest}
     */
    AlterMetadataResourceLocationRequest,

    /**
     * The AlterTablePropertiesRequest model constructor.
     * @property {module:model/AlterTablePropertiesRequest}
     */
    AlterTablePropertiesRequest,

    /**
     * The AuditConfig model constructor.
     * @property {module:model/AuditConfig}
     */
    AuditConfig,

    /**
     * The AuditLogConfig model constructor.
     * @property {module:model/AuditLogConfig}
     */
    AuditLogConfig,

    /**
     * The AuxiliaryVersionConfig model constructor.
     * @property {module:model/AuxiliaryVersionConfig}
     */
    AuxiliaryVersionConfig,

    /**
     * The BackendMetastore model constructor.
     * @property {module:model/BackendMetastore}
     */
    BackendMetastore,

    /**
     * The Backup model constructor.
     * @property {module:model/Backup}
     */
    Backup,

    /**
     * The Binding model constructor.
     * @property {module:model/Binding}
     */
    Binding,

    /**
     * The Consumer model constructor.
     * @property {module:model/Consumer}
     */
    Consumer,

    /**
     * The DataCatalogConfig model constructor.
     * @property {module:model/DataCatalogConfig}
     */
    DataCatalogConfig,

    /**
     * The DatabaseDump model constructor.
     * @property {module:model/DatabaseDump}
     */
    DatabaseDump,

    /**
     * The DataplexConfig model constructor.
     * @property {module:model/DataplexConfig}
     */
    DataplexConfig,

    /**
     * The EncryptionConfig model constructor.
     * @property {module:model/EncryptionConfig}
     */
    EncryptionConfig,

    /**
     * The ErrorDetails model constructor.
     * @property {module:model/ErrorDetails}
     */
    ErrorDetails,

    /**
     * The ExportMetadataRequest model constructor.
     * @property {module:model/ExportMetadataRequest}
     */
    ExportMetadataRequest,

    /**
     * The Expr model constructor.
     * @property {module:model/Expr}
     */
    Expr,

    /**
     * The Federation model constructor.
     * @property {module:model/Federation}
     */
    Federation,

    /**
     * The HiveMetastoreConfig model constructor.
     * @property {module:model/HiveMetastoreConfig}
     */
    HiveMetastoreConfig,

    /**
     * The HiveMetastoreVersion model constructor.
     * @property {module:model/HiveMetastoreVersion}
     */
    HiveMetastoreVersion,

    /**
     * The KerberosConfig model constructor.
     * @property {module:model/KerberosConfig}
     */
    KerberosConfig,

    /**
     * The Lake model constructor.
     * @property {module:model/Lake}
     */
    Lake,

    /**
     * The LatestBackup model constructor.
     * @property {module:model/LatestBackup}
     */
    LatestBackup,

    /**
     * The ListBackupsResponse model constructor.
     * @property {module:model/ListBackupsResponse}
     */
    ListBackupsResponse,

    /**
     * The ListFederationsResponse model constructor.
     * @property {module:model/ListFederationsResponse}
     */
    ListFederationsResponse,

    /**
     * The ListLocationsResponse model constructor.
     * @property {module:model/ListLocationsResponse}
     */
    ListLocationsResponse,

    /**
     * The ListMetadataImportsResponse model constructor.
     * @property {module:model/ListMetadataImportsResponse}
     */
    ListMetadataImportsResponse,

    /**
     * The ListOperationsResponse model constructor.
     * @property {module:model/ListOperationsResponse}
     */
    ListOperationsResponse,

    /**
     * The ListServicesResponse model constructor.
     * @property {module:model/ListServicesResponse}
     */
    ListServicesResponse,

    /**
     * The Location model constructor.
     * @property {module:model/Location}
     */
    Location,

    /**
     * The LocationMetadata model constructor.
     * @property {module:model/LocationMetadata}
     */
    LocationMetadata,

    /**
     * The MaintenanceWindow model constructor.
     * @property {module:model/MaintenanceWindow}
     */
    MaintenanceWindow,

    /**
     * The MetadataExport model constructor.
     * @property {module:model/MetadataExport}
     */
    MetadataExport,

    /**
     * The MetadataImport model constructor.
     * @property {module:model/MetadataImport}
     */
    MetadataImport,

    /**
     * The MetadataIntegration model constructor.
     * @property {module:model/MetadataIntegration}
     */
    MetadataIntegration,

    /**
     * The MetadataManagementActivity model constructor.
     * @property {module:model/MetadataManagementActivity}
     */
    MetadataManagementActivity,

    /**
     * The MoveTableToDatabaseRequest model constructor.
     * @property {module:model/MoveTableToDatabaseRequest}
     */
    MoveTableToDatabaseRequest,

    /**
     * The MultiRegionMetadata model constructor.
     * @property {module:model/MultiRegionMetadata}
     */
    MultiRegionMetadata,

    /**
     * The NetworkConfig model constructor.
     * @property {module:model/NetworkConfig}
     */
    NetworkConfig,

    /**
     * The Operation model constructor.
     * @property {module:model/Operation}
     */
    Operation,

    /**
     * The OperationMetadata model constructor.
     * @property {module:model/OperationMetadata}
     */
    OperationMetadata,

    /**
     * The Policy model constructor.
     * @property {module:model/Policy}
     */
    Policy,

    /**
     * The QueryMetadataRequest model constructor.
     * @property {module:model/QueryMetadataRequest}
     */
    QueryMetadataRequest,

    /**
     * The QueryMetadataResponse model constructor.
     * @property {module:model/QueryMetadataResponse}
     */
    QueryMetadataResponse,

    /**
     * The RemoveIamPolicyRequest model constructor.
     * @property {module:model/RemoveIamPolicyRequest}
     */
    RemoveIamPolicyRequest,

    /**
     * The RemoveIamPolicyResponse model constructor.
     * @property {module:model/RemoveIamPolicyResponse}
     */
    RemoveIamPolicyResponse,

    /**
     * The Restore model constructor.
     * @property {module:model/Restore}
     */
    Restore,

    /**
     * The RestoreServiceRequest model constructor.
     * @property {module:model/RestoreServiceRequest}
     */
    RestoreServiceRequest,

    /**
     * The ScalingConfig model constructor.
     * @property {module:model/ScalingConfig}
     */
    ScalingConfig,

    /**
     * The ScheduledBackup model constructor.
     * @property {module:model/ScheduledBackup}
     */
    ScheduledBackup,

    /**
     * The Secret model constructor.
     * @property {module:model/Secret}
     */
    Secret,

    /**
     * The Service model constructor.
     * @property {module:model/Service}
     */
    Service,

    /**
     * The SetIamPolicyRequest model constructor.
     * @property {module:model/SetIamPolicyRequest}
     */
    SetIamPolicyRequest,

    /**
     * The Status model constructor.
     * @property {module:model/Status}
     */
    Status,

    /**
     * The TelemetryConfig model constructor.
     * @property {module:model/TelemetryConfig}
     */
    TelemetryConfig,

    /**
     * The TestIamPermissionsRequest model constructor.
     * @property {module:model/TestIamPermissionsRequest}
     */
    TestIamPermissionsRequest,

    /**
     * The TestIamPermissionsResponse model constructor.
     * @property {module:model/TestIamPermissionsResponse}
     */
    TestIamPermissionsResponse,

    /**
    * The ProjectsApi service constructor.
    * @property {module:api/ProjectsApi}
    */
    ProjectsApi
};
