/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AlterTablePropertiesRequest model module.
 * @module model/AlterTablePropertiesRequest
 * @version v1beta
 */
class AlterTablePropertiesRequest {
    /**
     * Constructs a new <code>AlterTablePropertiesRequest</code>.
     * Request message for DataprocMetastore.AlterTableProperties.
     * @alias module:model/AlterTablePropertiesRequest
     */
    constructor() { 
        
        AlterTablePropertiesRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AlterTablePropertiesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlterTablePropertiesRequest} obj Optional instance to populate.
     * @return {module:model/AlterTablePropertiesRequest} The populated <code>AlterTablePropertiesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlterTablePropertiesRequest();

            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('tableName')) {
                obj['tableName'] = ApiClient.convertToType(data['tableName'], 'String');
            }
            if (data.hasOwnProperty('updateMask')) {
                obj['updateMask'] = ApiClient.convertToType(data['updateMask'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlterTablePropertiesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlterTablePropertiesRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['tableName'] && !(typeof data['tableName'] === 'string' || data['tableName'] instanceof String)) {
            throw new Error("Expected the field `tableName` to be a primitive type in the JSON string but got " + data['tableName']);
        }
        // ensure the json data is a string
        if (data['updateMask'] && !(typeof data['updateMask'] === 'string' || data['updateMask'] instanceof String)) {
            throw new Error("Expected the field `updateMask` to be a primitive type in the JSON string but got " + data['updateMask']);
        }

        return true;
    }


}



/**
 * A map that describes the desired values to mutate. If update_mask is empty, the properties will not update. Otherwise, the properties only alters the value whose associated paths exist in the update mask
 * @member {Object.<String, String>} properties
 */
AlterTablePropertiesRequest.prototype['properties'] = undefined;

/**
 * Required. The name of the table containing the properties you're altering in the following format.databases/{database_id}/tables/{table_id}
 * @member {String} tableName
 */
AlterTablePropertiesRequest.prototype['tableName'] = undefined;

/**
 * A field mask that specifies the metadata table properties that are overwritten by the update. Fields specified in the update_mask are relative to the resource (not to the full request). A field is overwritten if it is in the mask.For example, given the target properties: properties { a: 1 b: 2 } And an update properties: properties { a: 2 b: 3 c: 4 } then if the field mask is:paths: \"properties.b\", \"properties.c\"then the result will be: properties { a: 1 b: 3 c: 4 } 
 * @member {String} updateMask
 */
AlterTablePropertiesRequest.prototype['updateMask'] = undefined;






export default AlterTablePropertiesRequest;

