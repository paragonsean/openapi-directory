/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MoveTableToDatabaseRequest model module.
 * @module model/MoveTableToDatabaseRequest
 * @version v1beta
 */
class MoveTableToDatabaseRequest {
    /**
     * Constructs a new <code>MoveTableToDatabaseRequest</code>.
     * Request message for DataprocMetastore.MoveTableToDatabase.
     * @alias module:model/MoveTableToDatabaseRequest
     */
    constructor() { 
        
        MoveTableToDatabaseRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MoveTableToDatabaseRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MoveTableToDatabaseRequest} obj Optional instance to populate.
     * @return {module:model/MoveTableToDatabaseRequest} The populated <code>MoveTableToDatabaseRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MoveTableToDatabaseRequest();

            if (data.hasOwnProperty('dbName')) {
                obj['dbName'] = ApiClient.convertToType(data['dbName'], 'String');
            }
            if (data.hasOwnProperty('destinationDbName')) {
                obj['destinationDbName'] = ApiClient.convertToType(data['destinationDbName'], 'String');
            }
            if (data.hasOwnProperty('tableName')) {
                obj['tableName'] = ApiClient.convertToType(data['tableName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MoveTableToDatabaseRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MoveTableToDatabaseRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dbName'] && !(typeof data['dbName'] === 'string' || data['dbName'] instanceof String)) {
            throw new Error("Expected the field `dbName` to be a primitive type in the JSON string but got " + data['dbName']);
        }
        // ensure the json data is a string
        if (data['destinationDbName'] && !(typeof data['destinationDbName'] === 'string' || data['destinationDbName'] instanceof String)) {
            throw new Error("Expected the field `destinationDbName` to be a primitive type in the JSON string but got " + data['destinationDbName']);
        }
        // ensure the json data is a string
        if (data['tableName'] && !(typeof data['tableName'] === 'string' || data['tableName'] instanceof String)) {
            throw new Error("Expected the field `tableName` to be a primitive type in the JSON string but got " + data['tableName']);
        }

        return true;
    }


}



/**
 * Required. The name of the database where the table resides.
 * @member {String} dbName
 */
MoveTableToDatabaseRequest.prototype['dbName'] = undefined;

/**
 * Required. The name of the database where the table should be moved.
 * @member {String} destinationDbName
 */
MoveTableToDatabaseRequest.prototype['destinationDbName'] = undefined;

/**
 * Required. The name of the table to be moved.
 * @member {String} tableName
 */
MoveTableToDatabaseRequest.prototype['tableName'] = undefined;






export default MoveTableToDatabaseRequest;

