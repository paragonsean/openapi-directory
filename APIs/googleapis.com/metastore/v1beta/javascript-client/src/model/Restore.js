/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Restore model module.
 * @module model/Restore
 * @version v1beta
 */
class Restore {
    /**
     * Constructs a new <code>Restore</code>.
     * The details of a metadata restore operation.
     * @alias module:model/Restore
     */
    constructor() { 
        
        Restore.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Restore</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Restore} obj Optional instance to populate.
     * @return {module:model/Restore} The populated <code>Restore</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Restore();

            if (data.hasOwnProperty('backup')) {
                obj['backup'] = ApiClient.convertToType(data['backup'], 'String');
            }
            if (data.hasOwnProperty('backupLocation')) {
                obj['backupLocation'] = ApiClient.convertToType(data['backupLocation'], 'String');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Restore</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Restore</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['backup'] && !(typeof data['backup'] === 'string' || data['backup'] instanceof String)) {
            throw new Error("Expected the field `backup` to be a primitive type in the JSON string but got " + data['backup']);
        }
        // ensure the json data is a string
        if (data['backupLocation'] && !(typeof data['backupLocation'] === 'string' || data['backupLocation'] instanceof String)) {
            throw new Error("Expected the field `backupLocation` to be a primitive type in the JSON string but got " + data['backupLocation']);
        }
        // ensure the json data is a string
        if (data['details'] && !(typeof data['details'] === 'string' || data['details'] instanceof String)) {
            throw new Error("Expected the field `details` to be a primitive type in the JSON string but got " + data['details']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Output only. The relative resource name of the metastore service backup to restore from, in the following form:projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}.
 * @member {String} backup
 */
Restore.prototype['backup'] = undefined;

/**
 * Optional. A Cloud Storage URI specifying where the backup artifacts are stored, in the format gs:///.
 * @member {String} backupLocation
 */
Restore.prototype['backupLocation'] = undefined;

/**
 * Output only. The restore details containing the revision of the service to be restored to, in format of JSON.
 * @member {String} details
 */
Restore.prototype['details'] = undefined;

/**
 * Output only. The time when the restore ended.
 * @member {String} endTime
 */
Restore.prototype['endTime'] = undefined;

/**
 * Output only. The time when the restore started.
 * @member {String} startTime
 */
Restore.prototype['startTime'] = undefined;

/**
 * Output only. The current state of the restore.
 * @member {module:model/Restore.StateEnum} state
 */
Restore.prototype['state'] = undefined;

/**
 * Output only. The type of restore.
 * @member {module:model/Restore.TypeEnum} type
 */
Restore.prototype['type'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Restore['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Restore['TypeEnum'] = {

    /**
     * value: "RESTORE_TYPE_UNSPECIFIED"
     * @const
     */
    "RESTORE_TYPE_UNSPECIFIED": "RESTORE_TYPE_UNSPECIFIED",

    /**
     * value: "FULL"
     * @const
     */
    "FULL": "FULL",

    /**
     * value: "METADATA_ONLY"
     * @const
     */
    "METADATA_ONLY": "METADATA_ONLY"
};



export default Restore;

