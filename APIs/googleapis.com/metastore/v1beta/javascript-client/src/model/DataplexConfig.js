/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Lake from './Lake';

/**
 * The DataplexConfig model module.
 * @module model/DataplexConfig
 * @version v1beta
 */
class DataplexConfig {
    /**
     * Constructs a new <code>DataplexConfig</code>.
     * Specifies how metastore metadata should be integrated with the Dataplex service.
     * @alias module:model/DataplexConfig
     */
    constructor() { 
        
        DataplexConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataplexConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataplexConfig} obj Optional instance to populate.
     * @return {module:model/DataplexConfig} The populated <code>DataplexConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataplexConfig();

            if (data.hasOwnProperty('lakeResources')) {
                obj['lakeResources'] = ApiClient.convertToType(data['lakeResources'], {'String': Lake});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataplexConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataplexConfig</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * A reference to the Lake resources that this metastore service is attached to. The key is the lake resource name. Example: projects/{project_number}/locations/{location_id}/lakes/{lake_id}.
 * @member {Object.<String, module:model/Lake>} lakeResources
 */
DataplexConfig.prototype['lakeResources'] = undefined;






export default DataplexConfig;

