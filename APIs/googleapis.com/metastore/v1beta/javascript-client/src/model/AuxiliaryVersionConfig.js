/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NetworkConfig from './NetworkConfig';

/**
 * The AuxiliaryVersionConfig model module.
 * @module model/AuxiliaryVersionConfig
 * @version v1beta
 */
class AuxiliaryVersionConfig {
    /**
     * Constructs a new <code>AuxiliaryVersionConfig</code>.
     * Configuration information for the auxiliary service versions.
     * @alias module:model/AuxiliaryVersionConfig
     */
    constructor() { 
        
        AuxiliaryVersionConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuxiliaryVersionConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuxiliaryVersionConfig} obj Optional instance to populate.
     * @return {module:model/AuxiliaryVersionConfig} The populated <code>AuxiliaryVersionConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuxiliaryVersionConfig();

            if (data.hasOwnProperty('configOverrides')) {
                obj['configOverrides'] = ApiClient.convertToType(data['configOverrides'], {'String': 'String'});
            }
            if (data.hasOwnProperty('networkConfig')) {
                obj['networkConfig'] = NetworkConfig.constructFromObject(data['networkConfig']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuxiliaryVersionConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuxiliaryVersionConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `networkConfig`
        if (data['networkConfig']) { // data not null
          NetworkConfig.validateJSON(data['networkConfig']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * A mapping of Hive metastore configuration key-value pairs to apply to the auxiliary Hive metastore (configured in hive-site.xml) in addition to the primary version's overrides. If keys are present in both the auxiliary version's overrides and the primary version's overrides, the value from the auxiliary version's overrides takes precedence.
 * @member {Object.<String, String>} configOverrides
 */
AuxiliaryVersionConfig.prototype['configOverrides'] = undefined;

/**
 * @member {module:model/NetworkConfig} networkConfig
 */
AuxiliaryVersionConfig.prototype['networkConfig'] = undefined;

/**
 * The Hive metastore version of the auxiliary service. It must be less than the primary Hive metastore service's version.
 * @member {String} version
 */
AuxiliaryVersionConfig.prototype['version'] = undefined;






export default AuxiliaryVersionConfig;

