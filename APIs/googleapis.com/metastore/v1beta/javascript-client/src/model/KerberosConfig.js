/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Secret from './Secret';

/**
 * The KerberosConfig model module.
 * @module model/KerberosConfig
 * @version v1beta
 */
class KerberosConfig {
    /**
     * Constructs a new <code>KerberosConfig</code>.
     * Configuration information for a Kerberos principal.
     * @alias module:model/KerberosConfig
     */
    constructor() { 
        
        KerberosConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KerberosConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KerberosConfig} obj Optional instance to populate.
     * @return {module:model/KerberosConfig} The populated <code>KerberosConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KerberosConfig();

            if (data.hasOwnProperty('keytab')) {
                obj['keytab'] = Secret.constructFromObject(data['keytab']);
            }
            if (data.hasOwnProperty('krb5ConfigGcsUri')) {
                obj['krb5ConfigGcsUri'] = ApiClient.convertToType(data['krb5ConfigGcsUri'], 'String');
            }
            if (data.hasOwnProperty('principal')) {
                obj['principal'] = ApiClient.convertToType(data['principal'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KerberosConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KerberosConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `keytab`
        if (data['keytab']) { // data not null
          Secret.validateJSON(data['keytab']);
        }
        // ensure the json data is a string
        if (data['krb5ConfigGcsUri'] && !(typeof data['krb5ConfigGcsUri'] === 'string' || data['krb5ConfigGcsUri'] instanceof String)) {
            throw new Error("Expected the field `krb5ConfigGcsUri` to be a primitive type in the JSON string but got " + data['krb5ConfigGcsUri']);
        }
        // ensure the json data is a string
        if (data['principal'] && !(typeof data['principal'] === 'string' || data['principal'] instanceof String)) {
            throw new Error("Expected the field `principal` to be a primitive type in the JSON string but got " + data['principal']);
        }

        return true;
    }


}



/**
 * @member {module:model/Secret} keytab
 */
KerberosConfig.prototype['keytab'] = undefined;

/**
 * A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.
 * @member {String} krb5ConfigGcsUri
 */
KerberosConfig.prototype['krb5ConfigGcsUri'] = undefined;

/**
 * A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form primary/instance@REALM, but there is no exact format.
 * @member {String} principal
 */
KerberosConfig.prototype['principal'] = undefined;






export default KerberosConfig;

