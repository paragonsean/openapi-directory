/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DataprocMetastoreApi);
  }
}(this, function(expect, DataprocMetastoreApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DataprocMetastoreApi.Service();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Service', function() {
    it('should create an instance of Service', function() {
      // uncomment below and update the code to test Service
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be.a(DataprocMetastoreApi.Service);
    });

    it('should have the property artifactGcsUri (base name: "artifactGcsUri")', function() {
      // uncomment below and update the code to test the property artifactGcsUri
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property createTime (base name: "createTime")', function() {
      // uncomment below and update the code to test the property createTime
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property databaseType (base name: "databaseType")', function() {
      // uncomment below and update the code to test the property databaseType
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property encryptionConfig (base name: "encryptionConfig")', function() {
      // uncomment below and update the code to test the property encryptionConfig
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property endpointUri (base name: "endpointUri")', function() {
      // uncomment below and update the code to test the property endpointUri
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property hiveMetastoreConfig (base name: "hiveMetastoreConfig")', function() {
      // uncomment below and update the code to test the property hiveMetastoreConfig
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property maintenanceWindow (base name: "maintenanceWindow")', function() {
      // uncomment below and update the code to test the property maintenanceWindow
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property metadataIntegration (base name: "metadataIntegration")', function() {
      // uncomment below and update the code to test the property metadataIntegration
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property metadataManagementActivity (base name: "metadataManagementActivity")', function() {
      // uncomment below and update the code to test the property metadataManagementActivity
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property network (base name: "network")', function() {
      // uncomment below and update the code to test the property network
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property networkConfig (base name: "networkConfig")', function() {
      // uncomment below and update the code to test the property networkConfig
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "port")', function() {
      // uncomment below and update the code to test the property port
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property releaseChannel (base name: "releaseChannel")', function() {
      // uncomment below and update the code to test the property releaseChannel
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property scalingConfig (base name: "scalingConfig")', function() {
      // uncomment below and update the code to test the property scalingConfig
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property scheduledBackup (base name: "scheduledBackup")', function() {
      // uncomment below and update the code to test the property scheduledBackup
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property stateMessage (base name: "stateMessage")', function() {
      // uncomment below and update the code to test the property stateMessage
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property telemetryConfig (base name: "telemetryConfig")', function() {
      // uncomment below and update the code to test the property telemetryConfig
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property tier (base name: "tier")', function() {
      // uncomment below and update the code to test the property tier
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property uid (base name: "uid")', function() {
      // uncomment below and update the code to test the property uid
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property updateTime (base name: "updateTime")', function() {
      // uncomment below and update the code to test the property updateTime
      //var instance = new DataprocMetastoreApi.Service();
      //expect(instance).to.be();
    });

  });

}));
