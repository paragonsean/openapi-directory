/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LatestBackup from './LatestBackup';

/**
 * The ScheduledBackup model module.
 * @module model/ScheduledBackup
 * @version v1
 */
class ScheduledBackup {
    /**
     * Constructs a new <code>ScheduledBackup</code>.
     * This specifies the configuration of scheduled backup.
     * @alias module:model/ScheduledBackup
     */
    constructor() { 
        
        ScheduledBackup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScheduledBackup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScheduledBackup} obj Optional instance to populate.
     * @return {module:model/ScheduledBackup} The populated <code>ScheduledBackup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScheduledBackup();

            if (data.hasOwnProperty('backupLocation')) {
                obj['backupLocation'] = ApiClient.convertToType(data['backupLocation'], 'String');
            }
            if (data.hasOwnProperty('cronSchedule')) {
                obj['cronSchedule'] = ApiClient.convertToType(data['cronSchedule'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('latestBackup')) {
                obj['latestBackup'] = LatestBackup.constructFromObject(data['latestBackup']);
            }
            if (data.hasOwnProperty('nextScheduledTime')) {
                obj['nextScheduledTime'] = ApiClient.convertToType(data['nextScheduledTime'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScheduledBackup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScheduledBackup</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['backupLocation'] && !(typeof data['backupLocation'] === 'string' || data['backupLocation'] instanceof String)) {
            throw new Error("Expected the field `backupLocation` to be a primitive type in the JSON string but got " + data['backupLocation']);
        }
        // ensure the json data is a string
        if (data['cronSchedule'] && !(typeof data['cronSchedule'] === 'string' || data['cronSchedule'] instanceof String)) {
            throw new Error("Expected the field `cronSchedule` to be a primitive type in the JSON string but got " + data['cronSchedule']);
        }
        // validate the optional field `latestBackup`
        if (data['latestBackup']) { // data not null
          LatestBackup.validateJSON(data['latestBackup']);
        }
        // ensure the json data is a string
        if (data['nextScheduledTime'] && !(typeof data['nextScheduledTime'] === 'string' || data['nextScheduledTime'] instanceof String)) {
            throw new Error("Expected the field `nextScheduledTime` to be a primitive type in the JSON string but got " + data['nextScheduledTime']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }

        return true;
    }


}



/**
 * Optional. A Cloud Storage URI of a folder, in the format gs:///. A sub-folder containing backup files will be stored below it.
 * @member {String} backupLocation
 */
ScheduledBackup.prototype['backupLocation'] = undefined;

/**
 * Optional. The scheduled interval in Cron format, see https://en.wikipedia.org/wiki/Cron The default is empty: scheduled backup is not enabled. Must be specified to enable scheduled backups.
 * @member {String} cronSchedule
 */
ScheduledBackup.prototype['cronSchedule'] = undefined;

/**
 * Optional. Defines whether the scheduled backup is enabled. The default value is false.
 * @member {Boolean} enabled
 */
ScheduledBackup.prototype['enabled'] = undefined;

/**
 * @member {module:model/LatestBackup} latestBackup
 */
ScheduledBackup.prototype['latestBackup'] = undefined;

/**
 * Output only. The time when the next backups execution is scheduled to start.
 * @member {String} nextScheduledTime
 */
ScheduledBackup.prototype['nextScheduledTime'] = undefined;

/**
 * Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones), e.g. America/Los_Angeles or Africa/Abidjan. If left unspecified, the default is UTC.
 * @member {String} timeZone
 */
ScheduledBackup.prototype['timeZone'] = undefined;






export default ScheduledBackup;

