/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BackendMetastore from './BackendMetastore';

/**
 * The Federation model module.
 * @module model/Federation
 * @version v1
 */
class Federation {
    /**
     * Constructs a new <code>Federation</code>.
     * Represents a federation of multiple backend metastores.
     * @alias module:model/Federation
     */
    constructor() { 
        
        Federation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Federation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Federation} obj Optional instance to populate.
     * @return {module:model/Federation} The populated <code>Federation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Federation();

            if (data.hasOwnProperty('backendMetastores')) {
                obj['backendMetastores'] = ApiClient.convertToType(data['backendMetastores'], {'String': BackendMetastore});
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('endpointUri')) {
                obj['endpointUri'] = ApiClient.convertToType(data['endpointUri'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateMessage')) {
                obj['stateMessage'] = ApiClient.convertToType(data['stateMessage'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Federation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Federation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['endpointUri'] && !(typeof data['endpointUri'] === 'string' || data['endpointUri'] instanceof String)) {
            throw new Error("Expected the field `endpointUri` to be a primitive type in the JSON string but got " + data['endpointUri']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['stateMessage'] && !(typeof data['stateMessage'] === 'string' || data['stateMessage'] instanceof String)) {
            throw new Error("Expected the field `stateMessage` to be a primitive type in the JSON string but got " + data['stateMessage']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * A map from BackendMetastore rank to BackendMetastores from which the federation service serves metadata at query time. The map key represents the order in which BackendMetastores should be evaluated to resolve database names at query time and should be greater than or equal to zero. A BackendMetastore with a lower number will be evaluated before a BackendMetastore with a higher number.
 * @member {Object.<String, module:model/BackendMetastore>} backendMetastores
 */
Federation.prototype['backendMetastores'] = undefined;

/**
 * Output only. The time when the metastore federation was created.
 * @member {String} createTime
 */
Federation.prototype['createTime'] = undefined;

/**
 * Output only. The federation endpoint.
 * @member {String} endpointUri
 */
Federation.prototype['endpointUri'] = undefined;

/**
 * User-defined labels for the metastore federation.
 * @member {Object.<String, String>} labels
 */
Federation.prototype['labels'] = undefined;

/**
 * Immutable. The relative resource name of the federation, of the form: projects/{project_number}/locations/{location_id}/federations/{federation_id}`.
 * @member {String} name
 */
Federation.prototype['name'] = undefined;

/**
 * Output only. The current state of the federation.
 * @member {module:model/Federation.StateEnum} state
 */
Federation.prototype['state'] = undefined;

/**
 * Output only. Additional information about the current state of the metastore federation, if available.
 * @member {String} stateMessage
 */
Federation.prototype['stateMessage'] = undefined;

/**
 * Output only. The globally unique resource identifier of the metastore federation.
 * @member {String} uid
 */
Federation.prototype['uid'] = undefined;

/**
 * Output only. The time when the metastore federation was last updated.
 * @member {String} updateTime
 */
Federation.prototype['updateTime'] = undefined;

/**
 * Immutable. The Apache Hive metastore version of the federation. All backend metastore versions must be compatible with the federation version.
 * @member {String} version
 */
Federation.prototype['version'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Federation['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR"
};



export default Federation;

