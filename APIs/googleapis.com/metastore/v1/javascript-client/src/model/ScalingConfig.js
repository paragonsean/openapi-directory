/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ScalingConfig model module.
 * @module model/ScalingConfig
 * @version v1
 */
class ScalingConfig {
    /**
     * Constructs a new <code>ScalingConfig</code>.
     * Represents the scaling configuration of a metastore service.
     * @alias module:model/ScalingConfig
     */
    constructor() { 
        
        ScalingConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScalingConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScalingConfig} obj Optional instance to populate.
     * @return {module:model/ScalingConfig} The populated <code>ScalingConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScalingConfig();

            if (data.hasOwnProperty('instanceSize')) {
                obj['instanceSize'] = ApiClient.convertToType(data['instanceSize'], 'String');
            }
            if (data.hasOwnProperty('scalingFactor')) {
                obj['scalingFactor'] = ApiClient.convertToType(data['scalingFactor'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScalingConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScalingConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['instanceSize'] && !(typeof data['instanceSize'] === 'string' || data['instanceSize'] instanceof String)) {
            throw new Error("Expected the field `instanceSize` to be a primitive type in the JSON string but got " + data['instanceSize']);
        }

        return true;
    }


}



/**
 * An enum of readable instance sizes, with each instance size mapping to a float value (e.g. InstanceSize.EXTRA_SMALL = scaling_factor(0.1))
 * @member {module:model/ScalingConfig.InstanceSizeEnum} instanceSize
 */
ScalingConfig.prototype['instanceSize'] = undefined;

/**
 * Scaling factor, increments of 0.1 for values less than 1.0, and increments of 1.0 for values greater than 1.0.
 * @member {Number} scalingFactor
 */
ScalingConfig.prototype['scalingFactor'] = undefined;





/**
 * Allowed values for the <code>instanceSize</code> property.
 * @enum {String}
 * @readonly
 */
ScalingConfig['InstanceSizeEnum'] = {

    /**
     * value: "INSTANCE_SIZE_UNSPECIFIED"
     * @const
     */
    "INSTANCE_SIZE_UNSPECIFIED": "INSTANCE_SIZE_UNSPECIFIED",

    /**
     * value: "EXTRA_SMALL"
     * @const
     */
    "EXTRA_SMALL": "EXTRA_SMALL",

    /**
     * value: "SMALL"
     * @const
     */
    "SMALL": "SMALL",

    /**
     * value: "MEDIUM"
     * @const
     */
    "MEDIUM": "MEDIUM",

    /**
     * value: "LARGE"
     * @const
     */
    "LARGE": "LARGE",

    /**
     * value: "EXTRA_LARGE"
     * @const
     */
    "EXTRA_LARGE": "EXTRA_LARGE"
};



export default ScalingConfig;

