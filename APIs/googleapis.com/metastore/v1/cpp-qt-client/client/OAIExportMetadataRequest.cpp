/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportMetadataRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportMetadataRequest::OAIExportMetadataRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportMetadataRequest::OAIExportMetadataRequest() {
    this->initializeModel();
}

OAIExportMetadataRequest::~OAIExportMetadataRequest() {}

void OAIExportMetadataRequest::initializeModel() {

    m_database_dump_type_isSet = false;
    m_database_dump_type_isValid = false;

    m_destination_gcs_folder_isSet = false;
    m_destination_gcs_folder_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIExportMetadataRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportMetadataRequest::fromJsonObject(QJsonObject json) {

    m_database_dump_type_isValid = ::OpenAPI::fromJsonValue(m_database_dump_type, json[QString("databaseDumpType")]);
    m_database_dump_type_isSet = !json[QString("databaseDumpType")].isNull() && m_database_dump_type_isValid;

    m_destination_gcs_folder_isValid = ::OpenAPI::fromJsonValue(m_destination_gcs_folder, json[QString("destinationGcsFolder")]);
    m_destination_gcs_folder_isSet = !json[QString("destinationGcsFolder")].isNull() && m_destination_gcs_folder_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;
}

QString OAIExportMetadataRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportMetadataRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_database_dump_type_isSet) {
        obj.insert(QString("databaseDumpType"), ::OpenAPI::toJsonValue(m_database_dump_type));
    }
    if (m_destination_gcs_folder_isSet) {
        obj.insert(QString("destinationGcsFolder"), ::OpenAPI::toJsonValue(m_destination_gcs_folder));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

QString OAIExportMetadataRequest::getDatabaseDumpType() const {
    return m_database_dump_type;
}
void OAIExportMetadataRequest::setDatabaseDumpType(const QString &database_dump_type) {
    m_database_dump_type = database_dump_type;
    m_database_dump_type_isSet = true;
}

bool OAIExportMetadataRequest::is_database_dump_type_Set() const{
    return m_database_dump_type_isSet;
}

bool OAIExportMetadataRequest::is_database_dump_type_Valid() const{
    return m_database_dump_type_isValid;
}

QString OAIExportMetadataRequest::getDestinationGcsFolder() const {
    return m_destination_gcs_folder;
}
void OAIExportMetadataRequest::setDestinationGcsFolder(const QString &destination_gcs_folder) {
    m_destination_gcs_folder = destination_gcs_folder;
    m_destination_gcs_folder_isSet = true;
}

bool OAIExportMetadataRequest::is_destination_gcs_folder_Set() const{
    return m_destination_gcs_folder_isSet;
}

bool OAIExportMetadataRequest::is_destination_gcs_folder_Valid() const{
    return m_destination_gcs_folder_isValid;
}

QString OAIExportMetadataRequest::getRequestId() const {
    return m_request_id;
}
void OAIExportMetadataRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIExportMetadataRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIExportMetadataRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIExportMetadataRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_dump_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_gcs_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportMetadataRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
