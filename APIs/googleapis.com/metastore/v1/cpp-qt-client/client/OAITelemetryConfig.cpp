/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITelemetryConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITelemetryConfig::OAITelemetryConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITelemetryConfig::OAITelemetryConfig() {
    this->initializeModel();
}

OAITelemetryConfig::~OAITelemetryConfig() {}

void OAITelemetryConfig::initializeModel() {

    m_log_format_isSet = false;
    m_log_format_isValid = false;
}

void OAITelemetryConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITelemetryConfig::fromJsonObject(QJsonObject json) {

    m_log_format_isValid = ::OpenAPI::fromJsonValue(m_log_format, json[QString("logFormat")]);
    m_log_format_isSet = !json[QString("logFormat")].isNull() && m_log_format_isValid;
}

QString OAITelemetryConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITelemetryConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_log_format_isSet) {
        obj.insert(QString("logFormat"), ::OpenAPI::toJsonValue(m_log_format));
    }
    return obj;
}

QString OAITelemetryConfig::getLogFormat() const {
    return m_log_format;
}
void OAITelemetryConfig::setLogFormat(const QString &log_format) {
    m_log_format = log_format;
    m_log_format_isSet = true;
}

bool OAITelemetryConfig::is_log_format_Set() const{
    return m_log_format_isSet;
}

bool OAITelemetryConfig::is_log_format_Valid() const{
    return m_log_format_isValid;
}

bool OAITelemetryConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_log_format_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITelemetryConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
