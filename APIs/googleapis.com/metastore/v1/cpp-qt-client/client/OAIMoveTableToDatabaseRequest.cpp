/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMoveTableToDatabaseRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMoveTableToDatabaseRequest::OAIMoveTableToDatabaseRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMoveTableToDatabaseRequest::OAIMoveTableToDatabaseRequest() {
    this->initializeModel();
}

OAIMoveTableToDatabaseRequest::~OAIMoveTableToDatabaseRequest() {}

void OAIMoveTableToDatabaseRequest::initializeModel() {

    m_db_name_isSet = false;
    m_db_name_isValid = false;

    m_destination_db_name_isSet = false;
    m_destination_db_name_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;
}

void OAIMoveTableToDatabaseRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMoveTableToDatabaseRequest::fromJsonObject(QJsonObject json) {

    m_db_name_isValid = ::OpenAPI::fromJsonValue(m_db_name, json[QString("dbName")]);
    m_db_name_isSet = !json[QString("dbName")].isNull() && m_db_name_isValid;

    m_destination_db_name_isValid = ::OpenAPI::fromJsonValue(m_destination_db_name, json[QString("destinationDbName")]);
    m_destination_db_name_isSet = !json[QString("destinationDbName")].isNull() && m_destination_db_name_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("tableName")]);
    m_table_name_isSet = !json[QString("tableName")].isNull() && m_table_name_isValid;
}

QString OAIMoveTableToDatabaseRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMoveTableToDatabaseRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_db_name_isSet) {
        obj.insert(QString("dbName"), ::OpenAPI::toJsonValue(m_db_name));
    }
    if (m_destination_db_name_isSet) {
        obj.insert(QString("destinationDbName"), ::OpenAPI::toJsonValue(m_destination_db_name));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("tableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    return obj;
}

QString OAIMoveTableToDatabaseRequest::getDbName() const {
    return m_db_name;
}
void OAIMoveTableToDatabaseRequest::setDbName(const QString &db_name) {
    m_db_name = db_name;
    m_db_name_isSet = true;
}

bool OAIMoveTableToDatabaseRequest::is_db_name_Set() const{
    return m_db_name_isSet;
}

bool OAIMoveTableToDatabaseRequest::is_db_name_Valid() const{
    return m_db_name_isValid;
}

QString OAIMoveTableToDatabaseRequest::getDestinationDbName() const {
    return m_destination_db_name;
}
void OAIMoveTableToDatabaseRequest::setDestinationDbName(const QString &destination_db_name) {
    m_destination_db_name = destination_db_name;
    m_destination_db_name_isSet = true;
}

bool OAIMoveTableToDatabaseRequest::is_destination_db_name_Set() const{
    return m_destination_db_name_isSet;
}

bool OAIMoveTableToDatabaseRequest::is_destination_db_name_Valid() const{
    return m_destination_db_name_isValid;
}

QString OAIMoveTableToDatabaseRequest::getTableName() const {
    return m_table_name;
}
void OAIMoveTableToDatabaseRequest::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIMoveTableToDatabaseRequest::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIMoveTableToDatabaseRequest::is_table_name_Valid() const{
    return m_table_name_isValid;
}

bool OAIMoveTableToDatabaseRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_db_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMoveTableToDatabaseRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
