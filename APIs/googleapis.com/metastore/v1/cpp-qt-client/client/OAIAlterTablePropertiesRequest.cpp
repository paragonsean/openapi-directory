/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlterTablePropertiesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlterTablePropertiesRequest::OAIAlterTablePropertiesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlterTablePropertiesRequest::OAIAlterTablePropertiesRequest() {
    this->initializeModel();
}

OAIAlterTablePropertiesRequest::~OAIAlterTablePropertiesRequest() {}

void OAIAlterTablePropertiesRequest::initializeModel() {

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_update_mask_isSet = false;
    m_update_mask_isValid = false;
}

void OAIAlterTablePropertiesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlterTablePropertiesRequest::fromJsonObject(QJsonObject json) {

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("tableName")]);
    m_table_name_isSet = !json[QString("tableName")].isNull() && m_table_name_isValid;

    m_update_mask_isValid = ::OpenAPI::fromJsonValue(m_update_mask, json[QString("updateMask")]);
    m_update_mask_isSet = !json[QString("updateMask")].isNull() && m_update_mask_isValid;
}

QString OAIAlterTablePropertiesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlterTablePropertiesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("tableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_update_mask_isSet) {
        obj.insert(QString("updateMask"), ::OpenAPI::toJsonValue(m_update_mask));
    }
    return obj;
}

QMap<QString, QString> OAIAlterTablePropertiesRequest::getProperties() const {
    return m_properties;
}
void OAIAlterTablePropertiesRequest::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIAlterTablePropertiesRequest::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIAlterTablePropertiesRequest::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIAlterTablePropertiesRequest::getTableName() const {
    return m_table_name;
}
void OAIAlterTablePropertiesRequest::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIAlterTablePropertiesRequest::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIAlterTablePropertiesRequest::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QString OAIAlterTablePropertiesRequest::getUpdateMask() const {
    return m_update_mask;
}
void OAIAlterTablePropertiesRequest::setUpdateMask(const QString &update_mask) {
    m_update_mask = update_mask;
    m_update_mask_isSet = true;
}

bool OAIAlterTablePropertiesRequest::is_update_mask_Set() const{
    return m_update_mask_isSet;
}

bool OAIAlterTablePropertiesRequest::is_update_mask_Valid() const{
    return m_update_mask_isValid;
}

bool OAIAlterTablePropertiesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_mask_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlterTablePropertiesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
