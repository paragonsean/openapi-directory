/**
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseDump.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseDump::OAIDatabaseDump(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseDump::OAIDatabaseDump() {
    this->initializeModel();
}

OAIDatabaseDump::~OAIDatabaseDump() {}

void OAIDatabaseDump::initializeModel() {

    m_database_type_isSet = false;
    m_database_type_isValid = false;

    m_gcs_uri_isSet = false;
    m_gcs_uri_isValid = false;

    m_source_database_isSet = false;
    m_source_database_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDatabaseDump::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseDump::fromJsonObject(QJsonObject json) {

    m_database_type_isValid = ::OpenAPI::fromJsonValue(m_database_type, json[QString("databaseType")]);
    m_database_type_isSet = !json[QString("databaseType")].isNull() && m_database_type_isValid;

    m_gcs_uri_isValid = ::OpenAPI::fromJsonValue(m_gcs_uri, json[QString("gcsUri")]);
    m_gcs_uri_isSet = !json[QString("gcsUri")].isNull() && m_gcs_uri_isValid;

    m_source_database_isValid = ::OpenAPI::fromJsonValue(m_source_database, json[QString("sourceDatabase")]);
    m_source_database_isSet = !json[QString("sourceDatabase")].isNull() && m_source_database_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDatabaseDump::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseDump::asJsonObject() const {
    QJsonObject obj;
    if (m_database_type_isSet) {
        obj.insert(QString("databaseType"), ::OpenAPI::toJsonValue(m_database_type));
    }
    if (m_gcs_uri_isSet) {
        obj.insert(QString("gcsUri"), ::OpenAPI::toJsonValue(m_gcs_uri));
    }
    if (m_source_database_isSet) {
        obj.insert(QString("sourceDatabase"), ::OpenAPI::toJsonValue(m_source_database));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIDatabaseDump::getDatabaseType() const {
    return m_database_type;
}
void OAIDatabaseDump::setDatabaseType(const QString &database_type) {
    m_database_type = database_type;
    m_database_type_isSet = true;
}

bool OAIDatabaseDump::is_database_type_Set() const{
    return m_database_type_isSet;
}

bool OAIDatabaseDump::is_database_type_Valid() const{
    return m_database_type_isValid;
}

QString OAIDatabaseDump::getGcsUri() const {
    return m_gcs_uri;
}
void OAIDatabaseDump::setGcsUri(const QString &gcs_uri) {
    m_gcs_uri = gcs_uri;
    m_gcs_uri_isSet = true;
}

bool OAIDatabaseDump::is_gcs_uri_Set() const{
    return m_gcs_uri_isSet;
}

bool OAIDatabaseDump::is_gcs_uri_Valid() const{
    return m_gcs_uri_isValid;
}

QString OAIDatabaseDump::getSourceDatabase() const {
    return m_source_database;
}
void OAIDatabaseDump::setSourceDatabase(const QString &source_database) {
    m_source_database = source_database;
    m_source_database_isSet = true;
}

bool OAIDatabaseDump::is_source_database_Set() const{
    return m_source_database_isSet;
}

bool OAIDatabaseDump::is_source_database_Valid() const{
    return m_source_database_isValid;
}

QString OAIDatabaseDump::getType() const {
    return m_type;
}
void OAIDatabaseDump::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDatabaseDump::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDatabaseDump::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDatabaseDump::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseDump::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
