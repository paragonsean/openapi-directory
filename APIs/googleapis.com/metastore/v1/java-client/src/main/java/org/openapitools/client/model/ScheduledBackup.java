/*
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LatestBackup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This specifies the configuration of scheduled backup.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:11.513382-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScheduledBackup {
  public static final String SERIALIZED_NAME_BACKUP_LOCATION = "backupLocation";
  @SerializedName(SERIALIZED_NAME_BACKUP_LOCATION)
  private String backupLocation;

  public static final String SERIALIZED_NAME_CRON_SCHEDULE = "cronSchedule";
  @SerializedName(SERIALIZED_NAME_CRON_SCHEDULE)
  private String cronSchedule;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_LATEST_BACKUP = "latestBackup";
  @SerializedName(SERIALIZED_NAME_LATEST_BACKUP)
  private LatestBackup latestBackup;

  public static final String SERIALIZED_NAME_NEXT_SCHEDULED_TIME = "nextScheduledTime";
  @SerializedName(SERIALIZED_NAME_NEXT_SCHEDULED_TIME)
  private String nextScheduledTime;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public ScheduledBackup() {
  }

  public ScheduledBackup(
     String nextScheduledTime
  ) {
    this();
    this.nextScheduledTime = nextScheduledTime;
  }

  public ScheduledBackup backupLocation(String backupLocation) {
    this.backupLocation = backupLocation;
    return this;
  }

  /**
   * Optional. A Cloud Storage URI of a folder, in the format gs:///. A sub-folder containing backup files will be stored below it.
   * @return backupLocation
   */
  @javax.annotation.Nullable
  public String getBackupLocation() {
    return backupLocation;
  }

  public void setBackupLocation(String backupLocation) {
    this.backupLocation = backupLocation;
  }


  public ScheduledBackup cronSchedule(String cronSchedule) {
    this.cronSchedule = cronSchedule;
    return this;
  }

  /**
   * Optional. The scheduled interval in Cron format, see https://en.wikipedia.org/wiki/Cron The default is empty: scheduled backup is not enabled. Must be specified to enable scheduled backups.
   * @return cronSchedule
   */
  @javax.annotation.Nullable
  public String getCronSchedule() {
    return cronSchedule;
  }

  public void setCronSchedule(String cronSchedule) {
    this.cronSchedule = cronSchedule;
  }


  public ScheduledBackup enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Optional. Defines whether the scheduled backup is enabled. The default value is false.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ScheduledBackup latestBackup(LatestBackup latestBackup) {
    this.latestBackup = latestBackup;
    return this;
  }

  /**
   * Get latestBackup
   * @return latestBackup
   */
  @javax.annotation.Nullable
  public LatestBackup getLatestBackup() {
    return latestBackup;
  }

  public void setLatestBackup(LatestBackup latestBackup) {
    this.latestBackup = latestBackup;
  }


  /**
   * Output only. The time when the next backups execution is scheduled to start.
   * @return nextScheduledTime
   */
  @javax.annotation.Nullable
  public String getNextScheduledTime() {
    return nextScheduledTime;
  }



  public ScheduledBackup timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones), e.g. America/Los_Angeles or Africa/Abidjan. If left unspecified, the default is UTC.
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScheduledBackup scheduledBackup = (ScheduledBackup) o;
    return Objects.equals(this.backupLocation, scheduledBackup.backupLocation) &&
        Objects.equals(this.cronSchedule, scheduledBackup.cronSchedule) &&
        Objects.equals(this.enabled, scheduledBackup.enabled) &&
        Objects.equals(this.latestBackup, scheduledBackup.latestBackup) &&
        Objects.equals(this.nextScheduledTime, scheduledBackup.nextScheduledTime) &&
        Objects.equals(this.timeZone, scheduledBackup.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupLocation, cronSchedule, enabled, latestBackup, nextScheduledTime, timeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScheduledBackup {\n");
    sb.append("    backupLocation: ").append(toIndentedString(backupLocation)).append("\n");
    sb.append("    cronSchedule: ").append(toIndentedString(cronSchedule)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    latestBackup: ").append(toIndentedString(latestBackup)).append("\n");
    sb.append("    nextScheduledTime: ").append(toIndentedString(nextScheduledTime)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupLocation");
    openapiFields.add("cronSchedule");
    openapiFields.add("enabled");
    openapiFields.add("latestBackup");
    openapiFields.add("nextScheduledTime");
    openapiFields.add("timeZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScheduledBackup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScheduledBackup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScheduledBackup is not found in the empty JSON string", ScheduledBackup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScheduledBackup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScheduledBackup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backupLocation") != null && !jsonObj.get("backupLocation").isJsonNull()) && !jsonObj.get("backupLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupLocation").toString()));
      }
      if ((jsonObj.get("cronSchedule") != null && !jsonObj.get("cronSchedule").isJsonNull()) && !jsonObj.get("cronSchedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cronSchedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cronSchedule").toString()));
      }
      // validate the optional field `latestBackup`
      if (jsonObj.get("latestBackup") != null && !jsonObj.get("latestBackup").isJsonNull()) {
        LatestBackup.validateJsonElement(jsonObj.get("latestBackup"));
      }
      if ((jsonObj.get("nextScheduledTime") != null && !jsonObj.get("nextScheduledTime").isJsonNull()) && !jsonObj.get("nextScheduledTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextScheduledTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextScheduledTime").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScheduledBackup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScheduledBackup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScheduledBackup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScheduledBackup.class));

       return (TypeAdapter<T>) new TypeAdapter<ScheduledBackup>() {
           @Override
           public void write(JsonWriter out, ScheduledBackup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScheduledBackup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScheduledBackup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScheduledBackup
   * @throws IOException if the JSON string is invalid with respect to ScheduledBackup
   */
  public static ScheduledBackup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScheduledBackup.class);
  }

  /**
   * Convert an instance of ScheduledBackup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

