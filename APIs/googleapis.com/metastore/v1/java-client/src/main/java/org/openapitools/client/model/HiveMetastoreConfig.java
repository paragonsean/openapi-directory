/*
 * Dataproc Metastore API
 * The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AuxiliaryVersionConfig;
import org.openapitools.client.model.KerberosConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies configuration information specific to running Hive metastore software as the metastore service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:11.513382-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HiveMetastoreConfig {
  public static final String SERIALIZED_NAME_AUXILIARY_VERSIONS = "auxiliaryVersions";
  @SerializedName(SERIALIZED_NAME_AUXILIARY_VERSIONS)
  private Map<String, AuxiliaryVersionConfig> auxiliaryVersions = new HashMap<>();

  public static final String SERIALIZED_NAME_CONFIG_OVERRIDES = "configOverrides";
  @SerializedName(SERIALIZED_NAME_CONFIG_OVERRIDES)
  private Map<String, String> configOverrides = new HashMap<>();

  /**
   * The protocol to use for the metastore service endpoint. If unspecified, defaults to THRIFT.
   */
  @JsonAdapter(EndpointProtocolEnum.Adapter.class)
  public enum EndpointProtocolEnum {
    ENDPOINT_PROTOCOL_UNSPECIFIED("ENDPOINT_PROTOCOL_UNSPECIFIED"),
    
    THRIFT("THRIFT"),
    
    GRPC("GRPC");

    private String value;

    EndpointProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EndpointProtocolEnum fromValue(String value) {
      for (EndpointProtocolEnum b : EndpointProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EndpointProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EndpointProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EndpointProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EndpointProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EndpointProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENDPOINT_PROTOCOL = "endpointProtocol";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_PROTOCOL)
  private EndpointProtocolEnum endpointProtocol;

  public static final String SERIALIZED_NAME_KERBEROS_CONFIG = "kerberosConfig";
  @SerializedName(SERIALIZED_NAME_KERBEROS_CONFIG)
  private KerberosConfig kerberosConfig;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public HiveMetastoreConfig() {
  }

  public HiveMetastoreConfig auxiliaryVersions(Map<String, AuxiliaryVersionConfig> auxiliaryVersions) {
    this.auxiliaryVersions = auxiliaryVersions;
    return this;
  }

  public HiveMetastoreConfig putAuxiliaryVersionsItem(String key, AuxiliaryVersionConfig auxiliaryVersionsItem) {
    if (this.auxiliaryVersions == null) {
      this.auxiliaryVersions = new HashMap<>();
    }
    this.auxiliaryVersions.put(key, auxiliaryVersionsItem);
    return this;
  }

  /**
   * A mapping of Hive metastore version to the auxiliary version configuration. When specified, a secondary Hive metastore service is created along with the primary service. All auxiliary versions must be less than the service&#39;s primary version. The key is the auxiliary service name and it must match the regular expression a-z?. This means that the first character must be a lowercase letter, and all the following characters must be hyphens, lowercase letters, or digits, except the last character, which cannot be a hyphen.
   * @return auxiliaryVersions
   */
  @javax.annotation.Nullable
  public Map<String, AuxiliaryVersionConfig> getAuxiliaryVersions() {
    return auxiliaryVersions;
  }

  public void setAuxiliaryVersions(Map<String, AuxiliaryVersionConfig> auxiliaryVersions) {
    this.auxiliaryVersions = auxiliaryVersions;
  }


  public HiveMetastoreConfig configOverrides(Map<String, String> configOverrides) {
    this.configOverrides = configOverrides;
    return this;
  }

  public HiveMetastoreConfig putConfigOverridesItem(String key, String configOverridesItem) {
    if (this.configOverrides == null) {
      this.configOverrides = new HashMap<>();
    }
    this.configOverrides.put(key, configOverridesItem);
    return this;
  }

  /**
   * A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml). The mappings override system defaults (some keys cannot be overridden). These overrides are also applied to auxiliary versions and can be further customized in the auxiliary version&#39;s AuxiliaryVersionConfig.
   * @return configOverrides
   */
  @javax.annotation.Nullable
  public Map<String, String> getConfigOverrides() {
    return configOverrides;
  }

  public void setConfigOverrides(Map<String, String> configOverrides) {
    this.configOverrides = configOverrides;
  }


  public HiveMetastoreConfig endpointProtocol(EndpointProtocolEnum endpointProtocol) {
    this.endpointProtocol = endpointProtocol;
    return this;
  }

  /**
   * The protocol to use for the metastore service endpoint. If unspecified, defaults to THRIFT.
   * @return endpointProtocol
   */
  @javax.annotation.Nullable
  public EndpointProtocolEnum getEndpointProtocol() {
    return endpointProtocol;
  }

  public void setEndpointProtocol(EndpointProtocolEnum endpointProtocol) {
    this.endpointProtocol = endpointProtocol;
  }


  public HiveMetastoreConfig kerberosConfig(KerberosConfig kerberosConfig) {
    this.kerberosConfig = kerberosConfig;
    return this;
  }

  /**
   * Get kerberosConfig
   * @return kerberosConfig
   */
  @javax.annotation.Nullable
  public KerberosConfig getKerberosConfig() {
    return kerberosConfig;
  }

  public void setKerberosConfig(KerberosConfig kerberosConfig) {
    this.kerberosConfig = kerberosConfig;
  }


  public HiveMetastoreConfig version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Immutable. The Hive metastore schema version.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HiveMetastoreConfig hiveMetastoreConfig = (HiveMetastoreConfig) o;
    return Objects.equals(this.auxiliaryVersions, hiveMetastoreConfig.auxiliaryVersions) &&
        Objects.equals(this.configOverrides, hiveMetastoreConfig.configOverrides) &&
        Objects.equals(this.endpointProtocol, hiveMetastoreConfig.endpointProtocol) &&
        Objects.equals(this.kerberosConfig, hiveMetastoreConfig.kerberosConfig) &&
        Objects.equals(this.version, hiveMetastoreConfig.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auxiliaryVersions, configOverrides, endpointProtocol, kerberosConfig, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HiveMetastoreConfig {\n");
    sb.append("    auxiliaryVersions: ").append(toIndentedString(auxiliaryVersions)).append("\n");
    sb.append("    configOverrides: ").append(toIndentedString(configOverrides)).append("\n");
    sb.append("    endpointProtocol: ").append(toIndentedString(endpointProtocol)).append("\n");
    sb.append("    kerberosConfig: ").append(toIndentedString(kerberosConfig)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auxiliaryVersions");
    openapiFields.add("configOverrides");
    openapiFields.add("endpointProtocol");
    openapiFields.add("kerberosConfig");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HiveMetastoreConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HiveMetastoreConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HiveMetastoreConfig is not found in the empty JSON string", HiveMetastoreConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HiveMetastoreConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HiveMetastoreConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endpointProtocol") != null && !jsonObj.get("endpointProtocol").isJsonNull()) && !jsonObj.get("endpointProtocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointProtocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointProtocol").toString()));
      }
      // validate the optional field `endpointProtocol`
      if (jsonObj.get("endpointProtocol") != null && !jsonObj.get("endpointProtocol").isJsonNull()) {
        EndpointProtocolEnum.validateJsonElement(jsonObj.get("endpointProtocol"));
      }
      // validate the optional field `kerberosConfig`
      if (jsonObj.get("kerberosConfig") != null && !jsonObj.get("kerberosConfig").isJsonNull()) {
        KerberosConfig.validateJsonElement(jsonObj.get("kerberosConfig"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HiveMetastoreConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HiveMetastoreConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HiveMetastoreConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HiveMetastoreConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<HiveMetastoreConfig>() {
           @Override
           public void write(JsonWriter out, HiveMetastoreConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HiveMetastoreConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HiveMetastoreConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HiveMetastoreConfig
   * @throws IOException if the JSON string is invalid with respect to HiveMetastoreConfig
   */
  public static HiveMetastoreConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HiveMetastoreConfig.class);
  }

  /**
   * Convert an instance of HiveMetastoreConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

