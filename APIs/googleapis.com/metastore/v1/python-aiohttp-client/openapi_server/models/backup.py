# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service import Service
from openapi_server import util


class Backup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, end_time: str=None, name: str=None, restoring_services: List[str]=None, service_revision: Service=None, state: str=None):
        """Backup - a model defined in OpenAPI

        :param create_time: The create_time of this Backup.
        :param description: The description of this Backup.
        :param end_time: The end_time of this Backup.
        :param name: The name of this Backup.
        :param restoring_services: The restoring_services of this Backup.
        :param service_revision: The service_revision of this Backup.
        :param state: The state of this Backup.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'end_time': str,
            'name': str,
            'restoring_services': List[str],
            'service_revision': Service,
            'state': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'end_time': 'endTime',
            'name': 'name',
            'restoring_services': 'restoringServices',
            'service_revision': 'serviceRevision',
            'state': 'state'
        }

        self._create_time = create_time
        self._description = description
        self._end_time = end_time
        self._name = name
        self._restoring_services = restoring_services
        self._service_revision = service_revision
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Backup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Backup of this Backup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Backup.

        Output only. The time when the backup was started.

        :return: The create_time of this Backup.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Backup.

        Output only. The time when the backup was started.

        :param create_time: The create_time of this Backup.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Backup.

        The description of the backup.

        :return: The description of this Backup.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Backup.

        The description of the backup.

        :param description: The description of this Backup.
        :type description: str
        """

        self._description = description

    @property
    def end_time(self):
        """Gets the end_time of this Backup.

        Output only. The time when the backup finished creating.

        :return: The end_time of this Backup.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Backup.

        Output only. The time when the backup finished creating.

        :param end_time: The end_time of this Backup.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def name(self):
        """Gets the name of this Backup.

        Immutable. The relative resource name of the backup, in the following form:projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}

        :return: The name of this Backup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Backup.

        Immutable. The relative resource name of the backup, in the following form:projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}

        :param name: The name of this Backup.
        :type name: str
        """

        self._name = name

    @property
    def restoring_services(self):
        """Gets the restoring_services of this Backup.

        Output only. Services that are restoring from the backup.

        :return: The restoring_services of this Backup.
        :rtype: List[str]
        """
        return self._restoring_services

    @restoring_services.setter
    def restoring_services(self, restoring_services):
        """Sets the restoring_services of this Backup.

        Output only. Services that are restoring from the backup.

        :param restoring_services: The restoring_services of this Backup.
        :type restoring_services: List[str]
        """

        self._restoring_services = restoring_services

    @property
    def service_revision(self):
        """Gets the service_revision of this Backup.


        :return: The service_revision of this Backup.
        :rtype: Service
        """
        return self._service_revision

    @service_revision.setter
    def service_revision(self, service_revision):
        """Sets the service_revision of this Backup.


        :param service_revision: The service_revision of this Backup.
        :type service_revision: Service
        """

        self._service_revision = service_revision

    @property
    def state(self):
        """Gets the state of this Backup.

        Output only. The current state of the backup.

        :return: The state of this Backup.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Backup.

        Output only. The current state of the backup.

        :param state: The state of this Backup.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "DELETING", "ACTIVE", "FAILED", "RESTORING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
