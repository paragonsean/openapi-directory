# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_config import EncryptionConfig
from openapi_server.models.hive_metastore_config import HiveMetastoreConfig
from openapi_server.models.maintenance_window import MaintenanceWindow
from openapi_server.models.metadata_integration import MetadataIntegration
from openapi_server.models.metadata_management_activity import MetadataManagementActivity
from openapi_server.models.network_config import NetworkConfig
from openapi_server.models.scaling_config import ScalingConfig
from openapi_server.models.scheduled_backup import ScheduledBackup
from openapi_server.models.telemetry_config import TelemetryConfig
from openapi_server import util


class Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifact_gcs_uri: str=None, create_time: str=None, database_type: str=None, encryption_config: EncryptionConfig=None, endpoint_uri: str=None, hive_metastore_config: HiveMetastoreConfig=None, labels: Dict[str, str]=None, maintenance_window: MaintenanceWindow=None, metadata_integration: MetadataIntegration=None, metadata_management_activity: MetadataManagementActivity=None, name: str=None, network: str=None, network_config: NetworkConfig=None, port: int=None, release_channel: str=None, scaling_config: ScalingConfig=None, scheduled_backup: ScheduledBackup=None, state: str=None, state_message: str=None, telemetry_config: TelemetryConfig=None, tier: str=None, uid: str=None, update_time: str=None):
        """Service - a model defined in OpenAPI

        :param artifact_gcs_uri: The artifact_gcs_uri of this Service.
        :param create_time: The create_time of this Service.
        :param database_type: The database_type of this Service.
        :param encryption_config: The encryption_config of this Service.
        :param endpoint_uri: The endpoint_uri of this Service.
        :param hive_metastore_config: The hive_metastore_config of this Service.
        :param labels: The labels of this Service.
        :param maintenance_window: The maintenance_window of this Service.
        :param metadata_integration: The metadata_integration of this Service.
        :param metadata_management_activity: The metadata_management_activity of this Service.
        :param name: The name of this Service.
        :param network: The network of this Service.
        :param network_config: The network_config of this Service.
        :param port: The port of this Service.
        :param release_channel: The release_channel of this Service.
        :param scaling_config: The scaling_config of this Service.
        :param scheduled_backup: The scheduled_backup of this Service.
        :param state: The state of this Service.
        :param state_message: The state_message of this Service.
        :param telemetry_config: The telemetry_config of this Service.
        :param tier: The tier of this Service.
        :param uid: The uid of this Service.
        :param update_time: The update_time of this Service.
        """
        self.openapi_types = {
            'artifact_gcs_uri': str,
            'create_time': str,
            'database_type': str,
            'encryption_config': EncryptionConfig,
            'endpoint_uri': str,
            'hive_metastore_config': HiveMetastoreConfig,
            'labels': Dict[str, str],
            'maintenance_window': MaintenanceWindow,
            'metadata_integration': MetadataIntegration,
            'metadata_management_activity': MetadataManagementActivity,
            'name': str,
            'network': str,
            'network_config': NetworkConfig,
            'port': int,
            'release_channel': str,
            'scaling_config': ScalingConfig,
            'scheduled_backup': ScheduledBackup,
            'state': str,
            'state_message': str,
            'telemetry_config': TelemetryConfig,
            'tier': str,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'artifact_gcs_uri': 'artifactGcsUri',
            'create_time': 'createTime',
            'database_type': 'databaseType',
            'encryption_config': 'encryptionConfig',
            'endpoint_uri': 'endpointUri',
            'hive_metastore_config': 'hiveMetastoreConfig',
            'labels': 'labels',
            'maintenance_window': 'maintenanceWindow',
            'metadata_integration': 'metadataIntegration',
            'metadata_management_activity': 'metadataManagementActivity',
            'name': 'name',
            'network': 'network',
            'network_config': 'networkConfig',
            'port': 'port',
            'release_channel': 'releaseChannel',
            'scaling_config': 'scalingConfig',
            'scheduled_backup': 'scheduledBackup',
            'state': 'state',
            'state_message': 'stateMessage',
            'telemetry_config': 'telemetryConfig',
            'tier': 'tier',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._artifact_gcs_uri = artifact_gcs_uri
        self._create_time = create_time
        self._database_type = database_type
        self._encryption_config = encryption_config
        self._endpoint_uri = endpoint_uri
        self._hive_metastore_config = hive_metastore_config
        self._labels = labels
        self._maintenance_window = maintenance_window
        self._metadata_integration = metadata_integration
        self._metadata_management_activity = metadata_management_activity
        self._name = name
        self._network = network
        self._network_config = network_config
        self._port = port
        self._release_channel = release_channel
        self._scaling_config = scaling_config
        self._scheduled_backup = scheduled_backup
        self._state = state
        self._state_message = state_message
        self._telemetry_config = telemetry_config
        self._tier = tier
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Service of this Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifact_gcs_uri(self):
        """Gets the artifact_gcs_uri of this Service.

        Output only. A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.

        :return: The artifact_gcs_uri of this Service.
        :rtype: str
        """
        return self._artifact_gcs_uri

    @artifact_gcs_uri.setter
    def artifact_gcs_uri(self, artifact_gcs_uri):
        """Sets the artifact_gcs_uri of this Service.

        Output only. A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.

        :param artifact_gcs_uri: The artifact_gcs_uri of this Service.
        :type artifact_gcs_uri: str
        """

        self._artifact_gcs_uri = artifact_gcs_uri

    @property
    def create_time(self):
        """Gets the create_time of this Service.

        Output only. The time when the metastore service was created.

        :return: The create_time of this Service.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Service.

        Output only. The time when the metastore service was created.

        :param create_time: The create_time of this Service.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def database_type(self):
        """Gets the database_type of this Service.

        Immutable. The database type that the Metastore service stores its data.

        :return: The database_type of this Service.
        :rtype: str
        """
        return self._database_type

    @database_type.setter
    def database_type(self, database_type):
        """Sets the database_type of this Service.

        Immutable. The database type that the Metastore service stores its data.

        :param database_type: The database_type of this Service.
        :type database_type: str
        """
        allowed_values = ["DATABASE_TYPE_UNSPECIFIED", "MYSQL", "SPANNER"]  # noqa: E501
        if database_type not in allowed_values:
            raise ValueError(
                "Invalid value for `database_type` ({0}), must be one of {1}"
                .format(database_type, allowed_values)
            )

        self._database_type = database_type

    @property
    def encryption_config(self):
        """Gets the encryption_config of this Service.


        :return: The encryption_config of this Service.
        :rtype: EncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this Service.


        :param encryption_config: The encryption_config of this Service.
        :type encryption_config: EncryptionConfig
        """

        self._encryption_config = encryption_config

    @property
    def endpoint_uri(self):
        """Gets the endpoint_uri of this Service.

        Output only. The URI of the endpoint used to access the metastore service.

        :return: The endpoint_uri of this Service.
        :rtype: str
        """
        return self._endpoint_uri

    @endpoint_uri.setter
    def endpoint_uri(self, endpoint_uri):
        """Sets the endpoint_uri of this Service.

        Output only. The URI of the endpoint used to access the metastore service.

        :param endpoint_uri: The endpoint_uri of this Service.
        :type endpoint_uri: str
        """

        self._endpoint_uri = endpoint_uri

    @property
    def hive_metastore_config(self):
        """Gets the hive_metastore_config of this Service.


        :return: The hive_metastore_config of this Service.
        :rtype: HiveMetastoreConfig
        """
        return self._hive_metastore_config

    @hive_metastore_config.setter
    def hive_metastore_config(self, hive_metastore_config):
        """Sets the hive_metastore_config of this Service.


        :param hive_metastore_config: The hive_metastore_config of this Service.
        :type hive_metastore_config: HiveMetastoreConfig
        """

        self._hive_metastore_config = hive_metastore_config

    @property
    def labels(self):
        """Gets the labels of this Service.

        User-defined labels for the metastore service.

        :return: The labels of this Service.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Service.

        User-defined labels for the metastore service.

        :param labels: The labels of this Service.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def maintenance_window(self):
        """Gets the maintenance_window of this Service.


        :return: The maintenance_window of this Service.
        :rtype: MaintenanceWindow
        """
        return self._maintenance_window

    @maintenance_window.setter
    def maintenance_window(self, maintenance_window):
        """Sets the maintenance_window of this Service.


        :param maintenance_window: The maintenance_window of this Service.
        :type maintenance_window: MaintenanceWindow
        """

        self._maintenance_window = maintenance_window

    @property
    def metadata_integration(self):
        """Gets the metadata_integration of this Service.


        :return: The metadata_integration of this Service.
        :rtype: MetadataIntegration
        """
        return self._metadata_integration

    @metadata_integration.setter
    def metadata_integration(self, metadata_integration):
        """Sets the metadata_integration of this Service.


        :param metadata_integration: The metadata_integration of this Service.
        :type metadata_integration: MetadataIntegration
        """

        self._metadata_integration = metadata_integration

    @property
    def metadata_management_activity(self):
        """Gets the metadata_management_activity of this Service.


        :return: The metadata_management_activity of this Service.
        :rtype: MetadataManagementActivity
        """
        return self._metadata_management_activity

    @metadata_management_activity.setter
    def metadata_management_activity(self, metadata_management_activity):
        """Sets the metadata_management_activity of this Service.


        :param metadata_management_activity: The metadata_management_activity of this Service.
        :type metadata_management_activity: MetadataManagementActivity
        """

        self._metadata_management_activity = metadata_management_activity

    @property
    def name(self):
        """Gets the name of this Service.

        Immutable. The relative resource name of the metastore service, in the following format:projects/{project_number}/locations/{location_id}/services/{service_id}.

        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.

        Immutable. The relative resource name of the metastore service, in the following format:projects/{project_number}/locations/{location_id}/services/{service_id}.

        :param name: The name of this Service.
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this Service.

        Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.

        :return: The network of this Service.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Service.

        Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.

        :param network: The network of this Service.
        :type network: str
        """

        self._network = network

    @property
    def network_config(self):
        """Gets the network_config of this Service.


        :return: The network_config of this Service.
        :rtype: NetworkConfig
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config):
        """Sets the network_config of this Service.


        :param network_config: The network_config of this Service.
        :type network_config: NetworkConfig
        """

        self._network_config = network_config

    @property
    def port(self):
        """Gets the port of this Service.

        The TCP port at which the metastore service is reached. Default: 9083.

        :return: The port of this Service.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Service.

        The TCP port at which the metastore service is reached. Default: 9083.

        :param port: The port of this Service.
        :type port: int
        """

        self._port = port

    @property
    def release_channel(self):
        """Gets the release_channel of this Service.

        Immutable. The release channel of the service. If unspecified, defaults to STABLE.

        :return: The release_channel of this Service.
        :rtype: str
        """
        return self._release_channel

    @release_channel.setter
    def release_channel(self, release_channel):
        """Sets the release_channel of this Service.

        Immutable. The release channel of the service. If unspecified, defaults to STABLE.

        :param release_channel: The release_channel of this Service.
        :type release_channel: str
        """
        allowed_values = ["RELEASE_CHANNEL_UNSPECIFIED", "CANARY", "STABLE"]  # noqa: E501
        if release_channel not in allowed_values:
            raise ValueError(
                "Invalid value for `release_channel` ({0}), must be one of {1}"
                .format(release_channel, allowed_values)
            )

        self._release_channel = release_channel

    @property
    def scaling_config(self):
        """Gets the scaling_config of this Service.


        :return: The scaling_config of this Service.
        :rtype: ScalingConfig
        """
        return self._scaling_config

    @scaling_config.setter
    def scaling_config(self, scaling_config):
        """Sets the scaling_config of this Service.


        :param scaling_config: The scaling_config of this Service.
        :type scaling_config: ScalingConfig
        """

        self._scaling_config = scaling_config

    @property
    def scheduled_backup(self):
        """Gets the scheduled_backup of this Service.


        :return: The scheduled_backup of this Service.
        :rtype: ScheduledBackup
        """
        return self._scheduled_backup

    @scheduled_backup.setter
    def scheduled_backup(self, scheduled_backup):
        """Sets the scheduled_backup of this Service.


        :param scheduled_backup: The scheduled_backup of this Service.
        :type scheduled_backup: ScheduledBackup
        """

        self._scheduled_backup = scheduled_backup

    @property
    def state(self):
        """Gets the state of this Service.

        Output only. The current state of the metastore service.

        :return: The state of this Service.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Service.

        Output only. The current state of the metastore service.

        :param state: The state of this Service.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "ACTIVE", "SUSPENDING", "SUSPENDED", "UPDATING", "DELETING", "ERROR"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_message(self):
        """Gets the state_message of this Service.

        Output only. Additional information about the current state of the metastore service, if available.

        :return: The state_message of this Service.
        :rtype: str
        """
        return self._state_message

    @state_message.setter
    def state_message(self, state_message):
        """Sets the state_message of this Service.

        Output only. Additional information about the current state of the metastore service, if available.

        :param state_message: The state_message of this Service.
        :type state_message: str
        """

        self._state_message = state_message

    @property
    def telemetry_config(self):
        """Gets the telemetry_config of this Service.


        :return: The telemetry_config of this Service.
        :rtype: TelemetryConfig
        """
        return self._telemetry_config

    @telemetry_config.setter
    def telemetry_config(self, telemetry_config):
        """Sets the telemetry_config of this Service.


        :param telemetry_config: The telemetry_config of this Service.
        :type telemetry_config: TelemetryConfig
        """

        self._telemetry_config = telemetry_config

    @property
    def tier(self):
        """Gets the tier of this Service.

        The tier of the service.

        :return: The tier of this Service.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this Service.

        The tier of the service.

        :param tier: The tier of this Service.
        :type tier: str
        """
        allowed_values = ["TIER_UNSPECIFIED", "DEVELOPER", "ENTERPRISE"]  # noqa: E501
        if tier not in allowed_values:
            raise ValueError(
                "Invalid value for `tier` ({0}), must be one of {1}"
                .format(tier, allowed_values)
            )

        self._tier = tier

    @property
    def uid(self):
        """Gets the uid of this Service.

        Output only. The globally unique resource identifier of the metastore service.

        :return: The uid of this Service.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Service.

        Output only. The globally unique resource identifier of the metastore service.

        :param uid: The uid of this Service.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this Service.

        Output only. The time when the metastore service was last updated.

        :return: The update_time of this Service.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Service.

        Output only. The time when the metastore service was last updated.

        :param update_time: The update_time of this Service.
        :type update_time: str
        """

        self._update_time = update_time
