# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.database_dump import DatabaseDump
from openapi_server import util


class MetadataImport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, database_dump: DatabaseDump=None, description: str=None, end_time: str=None, name: str=None, state: str=None, update_time: str=None):
        """MetadataImport - a model defined in OpenAPI

        :param create_time: The create_time of this MetadataImport.
        :param database_dump: The database_dump of this MetadataImport.
        :param description: The description of this MetadataImport.
        :param end_time: The end_time of this MetadataImport.
        :param name: The name of this MetadataImport.
        :param state: The state of this MetadataImport.
        :param update_time: The update_time of this MetadataImport.
        """
        self.openapi_types = {
            'create_time': str,
            'database_dump': DatabaseDump,
            'description': str,
            'end_time': str,
            'name': str,
            'state': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'database_dump': 'databaseDump',
            'description': 'description',
            'end_time': 'endTime',
            'name': 'name',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._database_dump = database_dump
        self._description = description
        self._end_time = end_time
        self._name = name
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetadataImport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetadataImport of this MetadataImport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this MetadataImport.

        Output only. The time when the metadata import was started.

        :return: The create_time of this MetadataImport.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this MetadataImport.

        Output only. The time when the metadata import was started.

        :param create_time: The create_time of this MetadataImport.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def database_dump(self):
        """Gets the database_dump of this MetadataImport.


        :return: The database_dump of this MetadataImport.
        :rtype: DatabaseDump
        """
        return self._database_dump

    @database_dump.setter
    def database_dump(self, database_dump):
        """Sets the database_dump of this MetadataImport.


        :param database_dump: The database_dump of this MetadataImport.
        :type database_dump: DatabaseDump
        """

        self._database_dump = database_dump

    @property
    def description(self):
        """Gets the description of this MetadataImport.

        The description of the metadata import.

        :return: The description of this MetadataImport.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MetadataImport.

        The description of the metadata import.

        :param description: The description of this MetadataImport.
        :type description: str
        """

        self._description = description

    @property
    def end_time(self):
        """Gets the end_time of this MetadataImport.

        Output only. The time when the metadata import finished.

        :return: The end_time of this MetadataImport.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this MetadataImport.

        Output only. The time when the metadata import finished.

        :param end_time: The end_time of this MetadataImport.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def name(self):
        """Gets the name of this MetadataImport.

        Immutable. The relative resource name of the metadata import, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.

        :return: The name of this MetadataImport.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetadataImport.

        Immutable. The relative resource name of the metadata import, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.

        :param name: The name of this MetadataImport.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this MetadataImport.

        Output only. The current state of the metadata import.

        :return: The state of this MetadataImport.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MetadataImport.

        Output only. The current state of the metadata import.

        :param state: The state of this MetadataImport.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "RUNNING", "SUCCEEDED", "UPDATING", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this MetadataImport.

        Output only. The time when the metadata import was last updated.

        :return: The update_time of this MetadataImport.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this MetadataImport.

        Output only. The time when the metadata import was last updated.

        :param update_time: The update_time of this MetadataImport.
        :type update_time: str
        """

        self._update_time = update_time
