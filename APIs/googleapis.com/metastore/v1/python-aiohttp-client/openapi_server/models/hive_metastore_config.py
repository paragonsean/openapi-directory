# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auxiliary_version_config import AuxiliaryVersionConfig
from openapi_server.models.kerberos_config import KerberosConfig
from openapi_server import util


class HiveMetastoreConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auxiliary_versions: Dict[str, AuxiliaryVersionConfig]=None, config_overrides: Dict[str, str]=None, endpoint_protocol: str=None, kerberos_config: KerberosConfig=None, version: str=None):
        """HiveMetastoreConfig - a model defined in OpenAPI

        :param auxiliary_versions: The auxiliary_versions of this HiveMetastoreConfig.
        :param config_overrides: The config_overrides of this HiveMetastoreConfig.
        :param endpoint_protocol: The endpoint_protocol of this HiveMetastoreConfig.
        :param kerberos_config: The kerberos_config of this HiveMetastoreConfig.
        :param version: The version of this HiveMetastoreConfig.
        """
        self.openapi_types = {
            'auxiliary_versions': Dict[str, AuxiliaryVersionConfig],
            'config_overrides': Dict[str, str],
            'endpoint_protocol': str,
            'kerberos_config': KerberosConfig,
            'version': str
        }

        self.attribute_map = {
            'auxiliary_versions': 'auxiliaryVersions',
            'config_overrides': 'configOverrides',
            'endpoint_protocol': 'endpointProtocol',
            'kerberos_config': 'kerberosConfig',
            'version': 'version'
        }

        self._auxiliary_versions = auxiliary_versions
        self._config_overrides = config_overrides
        self._endpoint_protocol = endpoint_protocol
        self._kerberos_config = kerberos_config
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HiveMetastoreConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HiveMetastoreConfig of this HiveMetastoreConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auxiliary_versions(self):
        """Gets the auxiliary_versions of this HiveMetastoreConfig.

        A mapping of Hive metastore version to the auxiliary version configuration. When specified, a secondary Hive metastore service is created along with the primary service. All auxiliary versions must be less than the service's primary version. The key is the auxiliary service name and it must match the regular expression a-z?. This means that the first character must be a lowercase letter, and all the following characters must be hyphens, lowercase letters, or digits, except the last character, which cannot be a hyphen.

        :return: The auxiliary_versions of this HiveMetastoreConfig.
        :rtype: Dict[str, AuxiliaryVersionConfig]
        """
        return self._auxiliary_versions

    @auxiliary_versions.setter
    def auxiliary_versions(self, auxiliary_versions):
        """Sets the auxiliary_versions of this HiveMetastoreConfig.

        A mapping of Hive metastore version to the auxiliary version configuration. When specified, a secondary Hive metastore service is created along with the primary service. All auxiliary versions must be less than the service's primary version. The key is the auxiliary service name and it must match the regular expression a-z?. This means that the first character must be a lowercase letter, and all the following characters must be hyphens, lowercase letters, or digits, except the last character, which cannot be a hyphen.

        :param auxiliary_versions: The auxiliary_versions of this HiveMetastoreConfig.
        :type auxiliary_versions: Dict[str, AuxiliaryVersionConfig]
        """

        self._auxiliary_versions = auxiliary_versions

    @property
    def config_overrides(self):
        """Gets the config_overrides of this HiveMetastoreConfig.

        A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml). The mappings override system defaults (some keys cannot be overridden). These overrides are also applied to auxiliary versions and can be further customized in the auxiliary version's AuxiliaryVersionConfig.

        :return: The config_overrides of this HiveMetastoreConfig.
        :rtype: Dict[str, str]
        """
        return self._config_overrides

    @config_overrides.setter
    def config_overrides(self, config_overrides):
        """Sets the config_overrides of this HiveMetastoreConfig.

        A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml). The mappings override system defaults (some keys cannot be overridden). These overrides are also applied to auxiliary versions and can be further customized in the auxiliary version's AuxiliaryVersionConfig.

        :param config_overrides: The config_overrides of this HiveMetastoreConfig.
        :type config_overrides: Dict[str, str]
        """

        self._config_overrides = config_overrides

    @property
    def endpoint_protocol(self):
        """Gets the endpoint_protocol of this HiveMetastoreConfig.

        The protocol to use for the metastore service endpoint. If unspecified, defaults to THRIFT.

        :return: The endpoint_protocol of this HiveMetastoreConfig.
        :rtype: str
        """
        return self._endpoint_protocol

    @endpoint_protocol.setter
    def endpoint_protocol(self, endpoint_protocol):
        """Sets the endpoint_protocol of this HiveMetastoreConfig.

        The protocol to use for the metastore service endpoint. If unspecified, defaults to THRIFT.

        :param endpoint_protocol: The endpoint_protocol of this HiveMetastoreConfig.
        :type endpoint_protocol: str
        """
        allowed_values = ["ENDPOINT_PROTOCOL_UNSPECIFIED", "THRIFT", "GRPC"]  # noqa: E501
        if endpoint_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `endpoint_protocol` ({0}), must be one of {1}"
                .format(endpoint_protocol, allowed_values)
            )

        self._endpoint_protocol = endpoint_protocol

    @property
    def kerberos_config(self):
        """Gets the kerberos_config of this HiveMetastoreConfig.


        :return: The kerberos_config of this HiveMetastoreConfig.
        :rtype: KerberosConfig
        """
        return self._kerberos_config

    @kerberos_config.setter
    def kerberos_config(self, kerberos_config):
        """Sets the kerberos_config of this HiveMetastoreConfig.


        :param kerberos_config: The kerberos_config of this HiveMetastoreConfig.
        :type kerberos_config: KerberosConfig
        """

        self._kerberos_config = kerberos_config

    @property
    def version(self):
        """Gets the version of this HiveMetastoreConfig.

        Immutable. The Hive metastore schema version.

        :return: The version of this HiveMetastoreConfig.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this HiveMetastoreConfig.

        Immutable. The Hive metastore schema version.

        :param version: The version of this HiveMetastoreConfig.
        :type version: str
        """

        self._version = version
