# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BackendMetastore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metastore_type: str=None, name: str=None):
        """BackendMetastore - a model defined in OpenAPI

        :param metastore_type: The metastore_type of this BackendMetastore.
        :param name: The name of this BackendMetastore.
        """
        self.openapi_types = {
            'metastore_type': str,
            'name': str
        }

        self.attribute_map = {
            'metastore_type': 'metastoreType',
            'name': 'name'
        }

        self._metastore_type = metastore_type
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackendMetastore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackendMetastore of this BackendMetastore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metastore_type(self):
        """Gets the metastore_type of this BackendMetastore.

        The type of the backend metastore.

        :return: The metastore_type of this BackendMetastore.
        :rtype: str
        """
        return self._metastore_type

    @metastore_type.setter
    def metastore_type(self, metastore_type):
        """Sets the metastore_type of this BackendMetastore.

        The type of the backend metastore.

        :param metastore_type: The metastore_type of this BackendMetastore.
        :type metastore_type: str
        """
        allowed_values = ["METASTORE_TYPE_UNSPECIFIED", "BIGQUERY", "DATAPROC_METASTORE"]  # noqa: E501
        if metastore_type not in allowed_values:
            raise ValueError(
                "Invalid value for `metastore_type` ({0}), must be one of {1}"
                .format(metastore_type, allowed_values)
            )

        self._metastore_type = metastore_type

    @property
    def name(self):
        """Gets the name of this BackendMetastore.

        The relative resource name of the metastore that is being federated. The formats of the relative resource names for the currently supported metastores are listed below: BigQuery projects/{project_id} Dataproc Metastore projects/{project_id}/locations/{location}/services/{service_id}

        :return: The name of this BackendMetastore.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BackendMetastore.

        The relative resource name of the metastore that is being federated. The formats of the relative resource names for the currently supported metastores are listed below: BigQuery projects/{project_id} Dataproc Metastore projects/{project_id}/locations/{location}/services/{service_id}

        :param name: The name of this BackendMetastore.
        :type name: str
        """

        self._name = name
