# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.latest_backup import LatestBackup
from openapi_server import util


class ScheduledBackup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_location: str=None, cron_schedule: str=None, enabled: bool=None, latest_backup: LatestBackup=None, next_scheduled_time: str=None, time_zone: str=None):
        """ScheduledBackup - a model defined in OpenAPI

        :param backup_location: The backup_location of this ScheduledBackup.
        :param cron_schedule: The cron_schedule of this ScheduledBackup.
        :param enabled: The enabled of this ScheduledBackup.
        :param latest_backup: The latest_backup of this ScheduledBackup.
        :param next_scheduled_time: The next_scheduled_time of this ScheduledBackup.
        :param time_zone: The time_zone of this ScheduledBackup.
        """
        self.openapi_types = {
            'backup_location': str,
            'cron_schedule': str,
            'enabled': bool,
            'latest_backup': LatestBackup,
            'next_scheduled_time': str,
            'time_zone': str
        }

        self.attribute_map = {
            'backup_location': 'backupLocation',
            'cron_schedule': 'cronSchedule',
            'enabled': 'enabled',
            'latest_backup': 'latestBackup',
            'next_scheduled_time': 'nextScheduledTime',
            'time_zone': 'timeZone'
        }

        self._backup_location = backup_location
        self._cron_schedule = cron_schedule
        self._enabled = enabled
        self._latest_backup = latest_backup
        self._next_scheduled_time = next_scheduled_time
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduledBackup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScheduledBackup of this ScheduledBackup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_location(self):
        """Gets the backup_location of this ScheduledBackup.

        Optional. A Cloud Storage URI of a folder, in the format gs:///. A sub-folder containing backup files will be stored below it.

        :return: The backup_location of this ScheduledBackup.
        :rtype: str
        """
        return self._backup_location

    @backup_location.setter
    def backup_location(self, backup_location):
        """Sets the backup_location of this ScheduledBackup.

        Optional. A Cloud Storage URI of a folder, in the format gs:///. A sub-folder containing backup files will be stored below it.

        :param backup_location: The backup_location of this ScheduledBackup.
        :type backup_location: str
        """

        self._backup_location = backup_location

    @property
    def cron_schedule(self):
        """Gets the cron_schedule of this ScheduledBackup.

        Optional. The scheduled interval in Cron format, see https://en.wikipedia.org/wiki/Cron The default is empty: scheduled backup is not enabled. Must be specified to enable scheduled backups.

        :return: The cron_schedule of this ScheduledBackup.
        :rtype: str
        """
        return self._cron_schedule

    @cron_schedule.setter
    def cron_schedule(self, cron_schedule):
        """Sets the cron_schedule of this ScheduledBackup.

        Optional. The scheduled interval in Cron format, see https://en.wikipedia.org/wiki/Cron The default is empty: scheduled backup is not enabled. Must be specified to enable scheduled backups.

        :param cron_schedule: The cron_schedule of this ScheduledBackup.
        :type cron_schedule: str
        """

        self._cron_schedule = cron_schedule

    @property
    def enabled(self):
        """Gets the enabled of this ScheduledBackup.

        Optional. Defines whether the scheduled backup is enabled. The default value is false.

        :return: The enabled of this ScheduledBackup.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ScheduledBackup.

        Optional. Defines whether the scheduled backup is enabled. The default value is false.

        :param enabled: The enabled of this ScheduledBackup.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def latest_backup(self):
        """Gets the latest_backup of this ScheduledBackup.


        :return: The latest_backup of this ScheduledBackup.
        :rtype: LatestBackup
        """
        return self._latest_backup

    @latest_backup.setter
    def latest_backup(self, latest_backup):
        """Sets the latest_backup of this ScheduledBackup.


        :param latest_backup: The latest_backup of this ScheduledBackup.
        :type latest_backup: LatestBackup
        """

        self._latest_backup = latest_backup

    @property
    def next_scheduled_time(self):
        """Gets the next_scheduled_time of this ScheduledBackup.

        Output only. The time when the next backups execution is scheduled to start.

        :return: The next_scheduled_time of this ScheduledBackup.
        :rtype: str
        """
        return self._next_scheduled_time

    @next_scheduled_time.setter
    def next_scheduled_time(self, next_scheduled_time):
        """Sets the next_scheduled_time of this ScheduledBackup.

        Output only. The time when the next backups execution is scheduled to start.

        :param next_scheduled_time: The next_scheduled_time of this ScheduledBackup.
        :type next_scheduled_time: str
        """

        self._next_scheduled_time = next_scheduled_time

    @property
    def time_zone(self):
        """Gets the time_zone of this ScheduledBackup.

        Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones), e.g. America/Los_Angeles or Africa/Abidjan. If left unspecified, the default is UTC.

        :return: The time_zone of this ScheduledBackup.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this ScheduledBackup.

        Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones), e.g. America/Los_Angeles or Africa/Abidjan. If left unspecified, the default is UTC.

        :param time_zone: The time_zone of this ScheduledBackup.
        :type time_zone: str
        """

        self._time_zone = time_zone
