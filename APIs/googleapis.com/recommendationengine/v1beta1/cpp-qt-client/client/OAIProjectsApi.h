/**
 * Recommendations AI (Beta)
 * Note that we now highly recommend new customers to use Retail API, which incorporates the GA version of the Recommendations AI funtionalities. To enable Retail API, please visit https://console.cloud.google.com/apis/library/retail.googleapis.com. The Recommendations AI service enables customers to build end-to-end personalized recommendation systems without requiring a high level of expertise in machine learning, recommendation system, or Google Cloud.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleApiHttpBody.h"
#include "OAIGoogleCloudRecommendationengineV1beta1CatalogItem.h"
#include "OAIGoogleCloudRecommendationengineV1beta1CreatePredictionApiKeyRegistrationRequest.h"
#include "OAIGoogleCloudRecommendationengineV1beta1ImportCatalogItemsRequest.h"
#include "OAIGoogleCloudRecommendationengineV1beta1ImportUserEventsRequest.h"
#include "OAIGoogleCloudRecommendationengineV1beta1ListCatalogItemsResponse.h"
#include "OAIGoogleCloudRecommendationengineV1beta1ListCatalogsResponse.h"
#include "OAIGoogleCloudRecommendationengineV1beta1ListPredictionApiKeyRegistrationsResponse.h"
#include "OAIGoogleCloudRecommendationengineV1beta1ListUserEventsResponse.h"
#include "OAIGoogleCloudRecommendationengineV1beta1PredictRequest.h"
#include "OAIGoogleCloudRecommendationengineV1beta1PredictResponse.h"
#include "OAIGoogleCloudRecommendationengineV1beta1PredictionApiKeyRegistration.h"
#include "OAIGoogleCloudRecommendationengineV1beta1PurgeUserEventsRequest.h"
#include "OAIGoogleCloudRecommendationengineV1beta1RejoinUserEventsRequest.h"
#include "OAIGoogleCloudRecommendationengineV1beta1UserEvent.h"
#include "OAIGoogleLongrunningListOperationsResponse.h"
#include "OAIGoogleLongrunningOperation.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_recommendationengine_v1beta1_catalog_item OAIGoogleCloudRecommendationengineV1beta1CatalogItem [optional]
    */
    virtual void recommendationengine_projects_locations_catalogs_catalogItems_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRecommendationengineV1beta1CatalogItem> &oai_google_cloud_recommendationengine_v1beta1_catalog_item = ::OpenAPI::OptionalParam<OAIGoogleCloudRecommendationengineV1beta1CatalogItem>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_recommendationengine_v1beta1_import_catalog_items_request OAIGoogleCloudRecommendationengineV1beta1ImportCatalogItemsRequest [optional]
    */
    virtual void recommendationengine_projects_locations_catalogs_catalogItems_import(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRecommendationengineV1beta1ImportCatalogItemsRequest> &oai_google_cloud_recommendationengine_v1beta1_import_catalog_items_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRecommendationengineV1beta1ImportCatalogItemsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void recommendationengine_projects_locations_catalogs_catalogItems_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_google_cloud_recommendationengine_v1beta1_catalog_item OAIGoogleCloudRecommendationengineV1beta1CatalogItem [optional]
    */
    virtual void recommendationengine_projects_locations_catalogs_catalogItems_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRecommendationengineV1beta1CatalogItem> &oai_google_cloud_recommendationengine_v1beta1_catalog_item = ::OpenAPI::OptionalParam<OAIGoogleCloudRecommendationengineV1beta1CatalogItem>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_recommendationengine_v1beta1_predict_request OAIGoogleCloudRecommendationengineV1beta1PredictRequest [optional]
    */
    virtual void recommendationengine_projects_locations_catalogs_eventStores_placements_predict(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRecommendationengineV1beta1PredictRequest> &oai_google_cloud_recommendationengine_v1beta1_predict_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRecommendationengineV1beta1PredictRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_recommendationengine_v1beta1_create_prediction_api_key_registration_request OAIGoogleCloudRecommendationengineV1beta1CreatePredictionApiKeyRegistrationRequest [optional]
    */
    virtual void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRecommendationengineV1beta1CreatePredictionApiKeyRegistrationRequest> &oai_google_cloud_recommendationengine_v1beta1_create_prediction_api_key_registration_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRecommendationengineV1beta1CreatePredictionApiKeyRegistrationRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  ets QString [optional]
    * @param[in]  uri QString [optional]
    * @param[in]  user_event QString [optional]
    */
    virtual void recommendationengine_projects_locations_catalogs_eventStores_userEvents_collect(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ets = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_event = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_recommendationengine_v1beta1_import_user_events_request OAIGoogleCloudRecommendationengineV1beta1ImportUserEventsRequest [optional]
    */
    virtual void recommendationengine_projects_locations_catalogs_eventStores_userEvents_import(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRecommendationengineV1beta1ImportUserEventsRequest> &oai_google_cloud_recommendationengine_v1beta1_import_user_events_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRecommendationengineV1beta1ImportUserEventsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void recommendationengine_projects_locations_catalogs_eventStores_userEvents_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_recommendationengine_v1beta1_purge_user_events_request OAIGoogleCloudRecommendationengineV1beta1PurgeUserEventsRequest [optional]
    */
    virtual void recommendationengine_projects_locations_catalogs_eventStores_userEvents_purge(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRecommendationengineV1beta1PurgeUserEventsRequest> &oai_google_cloud_recommendationengine_v1beta1_purge_user_events_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRecommendationengineV1beta1PurgeUserEventsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_recommendationengine_v1beta1_rejoin_user_events_request OAIGoogleCloudRecommendationengineV1beta1RejoinUserEventsRequest [optional]
    */
    virtual void recommendationengine_projects_locations_catalogs_eventStores_userEvents_rejoin(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRecommendationengineV1beta1RejoinUserEventsRequest> &oai_google_cloud_recommendationengine_v1beta1_rejoin_user_events_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRecommendationengineV1beta1RejoinUserEventsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_recommendationengine_v1beta1_user_event OAIGoogleCloudRecommendationengineV1beta1UserEvent [optional]
    */
    virtual void recommendationengine_projects_locations_catalogs_eventStores_userEvents_write(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRecommendationengineV1beta1UserEvent> &oai_google_cloud_recommendationengine_v1beta1_user_event = ::OpenAPI::OptionalParam<OAIGoogleCloudRecommendationengineV1beta1UserEvent>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void recommendationengine_projects_locations_catalogs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void recommendationengine_projects_locations_catalogs_operations_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void recommendationengine_projects_locations_catalogs_operations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void recommendationengine_projects_locations_catalogs_catalogItems_createCallback(OAIHttpRequestWorker *worker);
    void recommendationengine_projects_locations_catalogs_catalogItems_importCallback(OAIHttpRequestWorker *worker);
    void recommendationengine_projects_locations_catalogs_catalogItems_listCallback(OAIHttpRequestWorker *worker);
    void recommendationengine_projects_locations_catalogs_catalogItems_patchCallback(OAIHttpRequestWorker *worker);
    void recommendationengine_projects_locations_catalogs_eventStores_placements_predictCallback(OAIHttpRequestWorker *worker);
    void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_createCallback(OAIHttpRequestWorker *worker);
    void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_deleteCallback(OAIHttpRequestWorker *worker);
    void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_listCallback(OAIHttpRequestWorker *worker);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_collectCallback(OAIHttpRequestWorker *worker);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_importCallback(OAIHttpRequestWorker *worker);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_listCallback(OAIHttpRequestWorker *worker);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_purgeCallback(OAIHttpRequestWorker *worker);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_rejoinCallback(OAIHttpRequestWorker *worker);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_writeCallback(OAIHttpRequestWorker *worker);
    void recommendationengine_projects_locations_catalogs_listCallback(OAIHttpRequestWorker *worker);
    void recommendationengine_projects_locations_catalogs_operations_getCallback(OAIHttpRequestWorker *worker);
    void recommendationengine_projects_locations_catalogs_operations_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void recommendationengine_projects_locations_catalogs_catalogItems_createSignal(OAIGoogleCloudRecommendationengineV1beta1CatalogItem summary);
    void recommendationengine_projects_locations_catalogs_catalogItems_importSignal(OAIGoogleLongrunningOperation summary);
    void recommendationengine_projects_locations_catalogs_catalogItems_listSignal(OAIGoogleCloudRecommendationengineV1beta1ListCatalogItemsResponse summary);
    void recommendationengine_projects_locations_catalogs_catalogItems_patchSignal(OAIGoogleCloudRecommendationengineV1beta1CatalogItem summary);
    void recommendationengine_projects_locations_catalogs_eventStores_placements_predictSignal(OAIGoogleCloudRecommendationengineV1beta1PredictResponse summary);
    void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_createSignal(OAIGoogleCloudRecommendationengineV1beta1PredictionApiKeyRegistration summary);
    void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_deleteSignal(OAIObject summary);
    void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_listSignal(OAIGoogleCloudRecommendationengineV1beta1ListPredictionApiKeyRegistrationsResponse summary);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_collectSignal(OAIGoogleApiHttpBody summary);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_importSignal(OAIGoogleLongrunningOperation summary);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_listSignal(OAIGoogleCloudRecommendationengineV1beta1ListUserEventsResponse summary);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_purgeSignal(OAIGoogleLongrunningOperation summary);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_rejoinSignal(OAIGoogleLongrunningOperation summary);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_writeSignal(OAIGoogleCloudRecommendationengineV1beta1UserEvent summary);
    void recommendationengine_projects_locations_catalogs_listSignal(OAIGoogleCloudRecommendationengineV1beta1ListCatalogsResponse summary);
    void recommendationengine_projects_locations_catalogs_operations_getSignal(OAIGoogleLongrunningOperation summary);
    void recommendationengine_projects_locations_catalogs_operations_listSignal(OAIGoogleLongrunningListOperationsResponse summary);


    void recommendationengine_projects_locations_catalogs_catalogItems_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRecommendationengineV1beta1CatalogItem summary);
    void recommendationengine_projects_locations_catalogs_catalogItems_importSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void recommendationengine_projects_locations_catalogs_catalogItems_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRecommendationengineV1beta1ListCatalogItemsResponse summary);
    void recommendationengine_projects_locations_catalogs_catalogItems_patchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRecommendationengineV1beta1CatalogItem summary);
    void recommendationengine_projects_locations_catalogs_eventStores_placements_predictSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRecommendationengineV1beta1PredictResponse summary);
    void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRecommendationengineV1beta1PredictionApiKeyRegistration summary);
    void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRecommendationengineV1beta1ListPredictionApiKeyRegistrationsResponse summary);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_collectSignalFull(OAIHttpRequestWorker *worker, OAIGoogleApiHttpBody summary);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_importSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRecommendationengineV1beta1ListUserEventsResponse summary);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_purgeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_rejoinSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_writeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRecommendationengineV1beta1UserEvent summary);
    void recommendationengine_projects_locations_catalogs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRecommendationengineV1beta1ListCatalogsResponse summary);
    void recommendationengine_projects_locations_catalogs_operations_getSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void recommendationengine_projects_locations_catalogs_operations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningListOperationsResponse summary);

    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_catalogItems_createSignalError() instead")
    void recommendationengine_projects_locations_catalogs_catalogItems_createSignalE(OAIGoogleCloudRecommendationengineV1beta1CatalogItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_catalogItems_createSignalError(OAIGoogleCloudRecommendationengineV1beta1CatalogItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_catalogItems_importSignalError() instead")
    void recommendationengine_projects_locations_catalogs_catalogItems_importSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_catalogItems_importSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_catalogItems_listSignalError() instead")
    void recommendationengine_projects_locations_catalogs_catalogItems_listSignalE(OAIGoogleCloudRecommendationengineV1beta1ListCatalogItemsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_catalogItems_listSignalError(OAIGoogleCloudRecommendationengineV1beta1ListCatalogItemsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_catalogItems_patchSignalError() instead")
    void recommendationengine_projects_locations_catalogs_catalogItems_patchSignalE(OAIGoogleCloudRecommendationengineV1beta1CatalogItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_catalogItems_patchSignalError(OAIGoogleCloudRecommendationengineV1beta1CatalogItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_eventStores_placements_predictSignalError() instead")
    void recommendationengine_projects_locations_catalogs_eventStores_placements_predictSignalE(OAIGoogleCloudRecommendationengineV1beta1PredictResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_eventStores_placements_predictSignalError(OAIGoogleCloudRecommendationengineV1beta1PredictResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_createSignalError() instead")
    void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_createSignalE(OAIGoogleCloudRecommendationengineV1beta1PredictionApiKeyRegistration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_createSignalError(OAIGoogleCloudRecommendationengineV1beta1PredictionApiKeyRegistration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_deleteSignalError() instead")
    void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_listSignalError() instead")
    void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_listSignalE(OAIGoogleCloudRecommendationengineV1beta1ListPredictionApiKeyRegistrationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_listSignalError(OAIGoogleCloudRecommendationengineV1beta1ListPredictionApiKeyRegistrationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_eventStores_userEvents_collectSignalError() instead")
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_collectSignalE(OAIGoogleApiHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_collectSignalError(OAIGoogleApiHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_eventStores_userEvents_importSignalError() instead")
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_importSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_importSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_eventStores_userEvents_listSignalError() instead")
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_listSignalE(OAIGoogleCloudRecommendationengineV1beta1ListUserEventsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_listSignalError(OAIGoogleCloudRecommendationengineV1beta1ListUserEventsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_eventStores_userEvents_purgeSignalError() instead")
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_purgeSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_purgeSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_eventStores_userEvents_rejoinSignalError() instead")
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_rejoinSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_rejoinSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_eventStores_userEvents_writeSignalError() instead")
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_writeSignalE(OAIGoogleCloudRecommendationengineV1beta1UserEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_writeSignalError(OAIGoogleCloudRecommendationengineV1beta1UserEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_listSignalError() instead")
    void recommendationengine_projects_locations_catalogs_listSignalE(OAIGoogleCloudRecommendationengineV1beta1ListCatalogsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_listSignalError(OAIGoogleCloudRecommendationengineV1beta1ListCatalogsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_operations_getSignalError() instead")
    void recommendationengine_projects_locations_catalogs_operations_getSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_operations_getSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_operations_listSignalError() instead")
    void recommendationengine_projects_locations_catalogs_operations_listSignalE(OAIGoogleLongrunningListOperationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_operations_listSignalError(OAIGoogleLongrunningListOperationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_catalogItems_createSignalErrorFull() instead")
    void recommendationengine_projects_locations_catalogs_catalogItems_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_catalogItems_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_catalogItems_importSignalErrorFull() instead")
    void recommendationengine_projects_locations_catalogs_catalogItems_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_catalogItems_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_catalogItems_listSignalErrorFull() instead")
    void recommendationengine_projects_locations_catalogs_catalogItems_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_catalogItems_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_catalogItems_patchSignalErrorFull() instead")
    void recommendationengine_projects_locations_catalogs_catalogItems_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_catalogItems_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_eventStores_placements_predictSignalErrorFull() instead")
    void recommendationengine_projects_locations_catalogs_eventStores_placements_predictSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_eventStores_placements_predictSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_createSignalErrorFull() instead")
    void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_deleteSignalErrorFull() instead")
    void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_listSignalErrorFull() instead")
    void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_eventStores_predictionApiKeyRegistrations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_eventStores_userEvents_collectSignalErrorFull() instead")
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_collectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_collectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_eventStores_userEvents_importSignalErrorFull() instead")
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_eventStores_userEvents_listSignalErrorFull() instead")
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_eventStores_userEvents_purgeSignalErrorFull() instead")
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_purgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_purgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_eventStores_userEvents_rejoinSignalErrorFull() instead")
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_rejoinSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_rejoinSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_eventStores_userEvents_writeSignalErrorFull() instead")
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_writeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_eventStores_userEvents_writeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_listSignalErrorFull() instead")
    void recommendationengine_projects_locations_catalogs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_operations_getSignalErrorFull() instead")
    void recommendationengine_projects_locations_catalogs_operations_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_operations_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationengine_projects_locations_catalogs_operations_listSignalErrorFull() instead")
    void recommendationengine_projects_locations_catalogs_operations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationengine_projects_locations_catalogs_operations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
