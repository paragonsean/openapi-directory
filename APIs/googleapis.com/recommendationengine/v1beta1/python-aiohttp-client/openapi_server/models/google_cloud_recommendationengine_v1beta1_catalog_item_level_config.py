# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudRecommendationengineV1beta1CatalogItemLevelConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_item_level: str=None, predict_item_level: str=None):
        """GoogleCloudRecommendationengineV1beta1CatalogItemLevelConfig - a model defined in OpenAPI

        :param event_item_level: The event_item_level of this GoogleCloudRecommendationengineV1beta1CatalogItemLevelConfig.
        :param predict_item_level: The predict_item_level of this GoogleCloudRecommendationengineV1beta1CatalogItemLevelConfig.
        """
        self.openapi_types = {
            'event_item_level': str,
            'predict_item_level': str
        }

        self.attribute_map = {
            'event_item_level': 'eventItemLevel',
            'predict_item_level': 'predictItemLevel'
        }

        self._event_item_level = event_item_level
        self._predict_item_level = predict_item_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRecommendationengineV1beta1CatalogItemLevelConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRecommendationengineV1beta1CatalogItemLevelConfig of this GoogleCloudRecommendationengineV1beta1CatalogItemLevelConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_item_level(self):
        """Gets the event_item_level of this GoogleCloudRecommendationengineV1beta1CatalogItemLevelConfig.

        Optional. Level of the catalog at which events are uploaded. See https://cloud.google.com/recommendations-ai/docs/catalog#catalog-levels for more details.

        :return: The event_item_level of this GoogleCloudRecommendationengineV1beta1CatalogItemLevelConfig.
        :rtype: str
        """
        return self._event_item_level

    @event_item_level.setter
    def event_item_level(self, event_item_level):
        """Sets the event_item_level of this GoogleCloudRecommendationengineV1beta1CatalogItemLevelConfig.

        Optional. Level of the catalog at which events are uploaded. See https://cloud.google.com/recommendations-ai/docs/catalog#catalog-levels for more details.

        :param event_item_level: The event_item_level of this GoogleCloudRecommendationengineV1beta1CatalogItemLevelConfig.
        :type event_item_level: str
        """
        allowed_values = ["CATALOG_ITEM_LEVEL_UNSPECIFIED", "VARIANT", "MASTER"]  # noqa: E501
        if event_item_level not in allowed_values:
            raise ValueError(
                "Invalid value for `event_item_level` ({0}), must be one of {1}"
                .format(event_item_level, allowed_values)
            )

        self._event_item_level = event_item_level

    @property
    def predict_item_level(self):
        """Gets the predict_item_level of this GoogleCloudRecommendationengineV1beta1CatalogItemLevelConfig.

        Optional. Level of the catalog at which predictions are made. See https://cloud.google.com/recommendations-ai/docs/catalog#catalog-levels for more details.

        :return: The predict_item_level of this GoogleCloudRecommendationengineV1beta1CatalogItemLevelConfig.
        :rtype: str
        """
        return self._predict_item_level

    @predict_item_level.setter
    def predict_item_level(self, predict_item_level):
        """Sets the predict_item_level of this GoogleCloudRecommendationengineV1beta1CatalogItemLevelConfig.

        Optional. Level of the catalog at which predictions are made. See https://cloud.google.com/recommendations-ai/docs/catalog#catalog-levels for more details.

        :param predict_item_level: The predict_item_level of this GoogleCloudRecommendationengineV1beta1CatalogItemLevelConfig.
        :type predict_item_level: str
        """
        allowed_values = ["CATALOG_ITEM_LEVEL_UNSPECIFIED", "VARIANT", "MASTER"]  # noqa: E501
        if predict_item_level not in allowed_values:
            raise ValueError(
                "Invalid value for `predict_item_level` ({0}), must be one of {1}"
                .format(predict_item_level, allowed_values)
            )

        self._predict_item_level = predict_item_level
