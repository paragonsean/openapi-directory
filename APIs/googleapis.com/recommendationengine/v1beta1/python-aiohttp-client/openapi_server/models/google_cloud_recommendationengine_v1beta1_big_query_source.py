# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudRecommendationengineV1beta1BigQuerySource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_schema: str=None, dataset_id: str=None, gcs_staging_dir: str=None, project_id: str=None, table_id: str=None):
        """GoogleCloudRecommendationengineV1beta1BigQuerySource - a model defined in OpenAPI

        :param data_schema: The data_schema of this GoogleCloudRecommendationengineV1beta1BigQuerySource.
        :param dataset_id: The dataset_id of this GoogleCloudRecommendationengineV1beta1BigQuerySource.
        :param gcs_staging_dir: The gcs_staging_dir of this GoogleCloudRecommendationengineV1beta1BigQuerySource.
        :param project_id: The project_id of this GoogleCloudRecommendationengineV1beta1BigQuerySource.
        :param table_id: The table_id of this GoogleCloudRecommendationengineV1beta1BigQuerySource.
        """
        self.openapi_types = {
            'data_schema': str,
            'dataset_id': str,
            'gcs_staging_dir': str,
            'project_id': str,
            'table_id': str
        }

        self.attribute_map = {
            'data_schema': 'dataSchema',
            'dataset_id': 'datasetId',
            'gcs_staging_dir': 'gcsStagingDir',
            'project_id': 'projectId',
            'table_id': 'tableId'
        }

        self._data_schema = data_schema
        self._dataset_id = dataset_id
        self._gcs_staging_dir = gcs_staging_dir
        self._project_id = project_id
        self._table_id = table_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRecommendationengineV1beta1BigQuerySource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRecommendationengineV1beta1BigQuerySource of this GoogleCloudRecommendationengineV1beta1BigQuerySource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_schema(self):
        """Gets the data_schema of this GoogleCloudRecommendationengineV1beta1BigQuerySource.

        Optional. The schema to use when parsing the data from the source. Supported values for catalog imports: 1: \"catalog_recommendations_ai\" using https://cloud.google.com/recommendations-ai/docs/upload-catalog#json (Default for catalogItems.import) 2: \"catalog_merchant_center\" using https://cloud.google.com/recommendations-ai/docs/upload-catalog#mc Supported values for user event imports: 1: \"user_events_recommendations_ai\" using https://cloud.google.com/recommendations-ai/docs/manage-user-events#import (Default for userEvents.import) 2. \"user_events_ga360\" using https://support.google.com/analytics/answer/3437719?hl=en

        :return: The data_schema of this GoogleCloudRecommendationengineV1beta1BigQuerySource.
        :rtype: str
        """
        return self._data_schema

    @data_schema.setter
    def data_schema(self, data_schema):
        """Sets the data_schema of this GoogleCloudRecommendationengineV1beta1BigQuerySource.

        Optional. The schema to use when parsing the data from the source. Supported values for catalog imports: 1: \"catalog_recommendations_ai\" using https://cloud.google.com/recommendations-ai/docs/upload-catalog#json (Default for catalogItems.import) 2: \"catalog_merchant_center\" using https://cloud.google.com/recommendations-ai/docs/upload-catalog#mc Supported values for user event imports: 1: \"user_events_recommendations_ai\" using https://cloud.google.com/recommendations-ai/docs/manage-user-events#import (Default for userEvents.import) 2. \"user_events_ga360\" using https://support.google.com/analytics/answer/3437719?hl=en

        :param data_schema: The data_schema of this GoogleCloudRecommendationengineV1beta1BigQuerySource.
        :type data_schema: str
        """

        self._data_schema = data_schema

    @property
    def dataset_id(self):
        """Gets the dataset_id of this GoogleCloudRecommendationengineV1beta1BigQuerySource.

        Required. The BigQuery data set to copy the data from.

        :return: The dataset_id of this GoogleCloudRecommendationengineV1beta1BigQuerySource.
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this GoogleCloudRecommendationengineV1beta1BigQuerySource.

        Required. The BigQuery data set to copy the data from.

        :param dataset_id: The dataset_id of this GoogleCloudRecommendationengineV1beta1BigQuerySource.
        :type dataset_id: str
        """

        self._dataset_id = dataset_id

    @property
    def gcs_staging_dir(self):
        """Gets the gcs_staging_dir of this GoogleCloudRecommendationengineV1beta1BigQuerySource.

        Optional. Intermediate Cloud Storage directory used for the import. Can be specified if one wants to have the BigQuery export to a specific Cloud Storage directory.

        :return: The gcs_staging_dir of this GoogleCloudRecommendationengineV1beta1BigQuerySource.
        :rtype: str
        """
        return self._gcs_staging_dir

    @gcs_staging_dir.setter
    def gcs_staging_dir(self, gcs_staging_dir):
        """Sets the gcs_staging_dir of this GoogleCloudRecommendationengineV1beta1BigQuerySource.

        Optional. Intermediate Cloud Storage directory used for the import. Can be specified if one wants to have the BigQuery export to a specific Cloud Storage directory.

        :param gcs_staging_dir: The gcs_staging_dir of this GoogleCloudRecommendationengineV1beta1BigQuerySource.
        :type gcs_staging_dir: str
        """

        self._gcs_staging_dir = gcs_staging_dir

    @property
    def project_id(self):
        """Gets the project_id of this GoogleCloudRecommendationengineV1beta1BigQuerySource.

        Optional. The project id (can be project # or id) that the BigQuery source is in. If not specified, inherits the project id from the parent request.

        :return: The project_id of this GoogleCloudRecommendationengineV1beta1BigQuerySource.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this GoogleCloudRecommendationengineV1beta1BigQuerySource.

        Optional. The project id (can be project # or id) that the BigQuery source is in. If not specified, inherits the project id from the parent request.

        :param project_id: The project_id of this GoogleCloudRecommendationengineV1beta1BigQuerySource.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def table_id(self):
        """Gets the table_id of this GoogleCloudRecommendationengineV1beta1BigQuerySource.

        Required. The BigQuery table to copy the data from.

        :return: The table_id of this GoogleCloudRecommendationengineV1beta1BigQuerySource.
        :rtype: str
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this GoogleCloudRecommendationengineV1beta1BigQuerySource.

        Required. The BigQuery table to copy the data from.

        :param table_id: The table_id of this GoogleCloudRecommendationengineV1beta1BigQuerySource.
        :type table_id: str
        """

        self._table_id = table_id
