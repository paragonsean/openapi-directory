# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudRecommendationengineV1beta1PurchaseTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, costs: Dict[str, float]=None, currency_code: str=None, id: str=None, revenue: float=None, taxes: Dict[str, float]=None):
        """GoogleCloudRecommendationengineV1beta1PurchaseTransaction - a model defined in OpenAPI

        :param costs: The costs of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.
        :param currency_code: The currency_code of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.
        :param id: The id of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.
        :param revenue: The revenue of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.
        :param taxes: The taxes of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.
        """
        self.openapi_types = {
            'costs': Dict[str, float],
            'currency_code': str,
            'id': str,
            'revenue': float,
            'taxes': Dict[str, float]
        }

        self.attribute_map = {
            'costs': 'costs',
            'currency_code': 'currencyCode',
            'id': 'id',
            'revenue': 'revenue',
            'taxes': 'taxes'
        }

        self._costs = costs
        self._currency_code = currency_code
        self._id = id
        self._revenue = revenue
        self._taxes = taxes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRecommendationengineV1beta1PurchaseTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRecommendationengineV1beta1PurchaseTransaction of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def costs(self):
        """Gets the costs of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.

        Optional. All the costs associated with the product. These can be manufacturing costs, shipping expenses not borne by the end user, or any other costs. Total product cost such that profit = revenue - (sum(taxes) + sum(costs)) If product_cost is not set, then profit = revenue - tax - shipping - sum(CatalogItem.costs). If CatalogItem.cost is not specified for one of the items, CatalogItem.cost based profit *cannot* be calculated for this Transaction.

        :return: The costs of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.
        :rtype: Dict[str, float]
        """
        return self._costs

    @costs.setter
    def costs(self, costs):
        """Sets the costs of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.

        Optional. All the costs associated with the product. These can be manufacturing costs, shipping expenses not borne by the end user, or any other costs. Total product cost such that profit = revenue - (sum(taxes) + sum(costs)) If product_cost is not set, then profit = revenue - tax - shipping - sum(CatalogItem.costs). If CatalogItem.cost is not specified for one of the items, CatalogItem.cost based profit *cannot* be calculated for this Transaction.

        :param costs: The costs of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.
        :type costs: Dict[str, float]
        """

        self._costs = costs

    @property
    def currency_code(self):
        """Gets the currency_code of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.

        Required. Currency code. Use three-character ISO-4217 code. This field is not required if the event type is `refund`.

        :return: The currency_code of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.

        Required. Currency code. Use three-character ISO-4217 code. This field is not required if the event type is `refund`.

        :param currency_code: The currency_code of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def id(self):
        """Gets the id of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.

        Optional. The transaction ID with a length limit of 128 bytes.

        :return: The id of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.

        Optional. The transaction ID with a length limit of 128 bytes.

        :param id: The id of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.
        :type id: str
        """

        self._id = id

    @property
    def revenue(self):
        """Gets the revenue of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.

        Required. Total revenue or grand total associated with the transaction. This value include shipping, tax, or other adjustments to total revenue that you want to include as part of your revenue calculations. This field is not required if the event type is `refund`.

        :return: The revenue of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.
        :rtype: float
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """Sets the revenue of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.

        Required. Total revenue or grand total associated with the transaction. This value include shipping, tax, or other adjustments to total revenue that you want to include as part of your revenue calculations. This field is not required if the event type is `refund`.

        :param revenue: The revenue of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.
        :type revenue: float
        """

        self._revenue = revenue

    @property
    def taxes(self):
        """Gets the taxes of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.

        Optional. All the taxes associated with the transaction.

        :return: The taxes of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.
        :rtype: Dict[str, float]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.

        Optional. All the taxes associated with the transaction.

        :param taxes: The taxes of this GoogleCloudRecommendationengineV1beta1PurchaseTransaction.
        :type taxes: Dict[str, float]
        """

        self._taxes = taxes
