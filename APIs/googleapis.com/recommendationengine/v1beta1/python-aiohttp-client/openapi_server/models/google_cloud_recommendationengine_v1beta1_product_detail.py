# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_recommendationengine_v1beta1_feature_map import GoogleCloudRecommendationengineV1beta1FeatureMap
from openapi_server import util


class GoogleCloudRecommendationengineV1beta1ProductDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_quantity: int=None, currency_code: str=None, display_price: float=None, id: str=None, item_attributes: GoogleCloudRecommendationengineV1beta1FeatureMap=None, original_price: float=None, quantity: int=None, stock_state: str=None):
        """GoogleCloudRecommendationengineV1beta1ProductDetail - a model defined in OpenAPI

        :param available_quantity: The available_quantity of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :param currency_code: The currency_code of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :param display_price: The display_price of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :param id: The id of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :param item_attributes: The item_attributes of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :param original_price: The original_price of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :param quantity: The quantity of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :param stock_state: The stock_state of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        """
        self.openapi_types = {
            'available_quantity': int,
            'currency_code': str,
            'display_price': float,
            'id': str,
            'item_attributes': GoogleCloudRecommendationengineV1beta1FeatureMap,
            'original_price': float,
            'quantity': int,
            'stock_state': str
        }

        self.attribute_map = {
            'available_quantity': 'availableQuantity',
            'currency_code': 'currencyCode',
            'display_price': 'displayPrice',
            'id': 'id',
            'item_attributes': 'itemAttributes',
            'original_price': 'originalPrice',
            'quantity': 'quantity',
            'stock_state': 'stockState'
        }

        self._available_quantity = available_quantity
        self._currency_code = currency_code
        self._display_price = display_price
        self._id = id
        self._item_attributes = item_attributes
        self._original_price = original_price
        self._quantity = quantity
        self._stock_state = stock_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRecommendationengineV1beta1ProductDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRecommendationengineV1beta1ProductDetail of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_quantity(self):
        """Gets the available_quantity of this GoogleCloudRecommendationengineV1beta1ProductDetail.

        Optional. Quantity of the products in stock when a user event happens. Optional. If provided, this overrides the available quantity in Catalog for this event. and can only be set if `stock_status` is set to `IN_STOCK`. Note that if an item is out of stock, you must set the `stock_state` field to be `OUT_OF_STOCK`. Leaving this field unspecified / as zero is not sufficient to mark the item out of stock.

        :return: The available_quantity of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :rtype: int
        """
        return self._available_quantity

    @available_quantity.setter
    def available_quantity(self, available_quantity):
        """Sets the available_quantity of this GoogleCloudRecommendationengineV1beta1ProductDetail.

        Optional. Quantity of the products in stock when a user event happens. Optional. If provided, this overrides the available quantity in Catalog for this event. and can only be set if `stock_status` is set to `IN_STOCK`. Note that if an item is out of stock, you must set the `stock_state` field to be `OUT_OF_STOCK`. Leaving this field unspecified / as zero is not sufficient to mark the item out of stock.

        :param available_quantity: The available_quantity of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :type available_quantity: int
        """

        self._available_quantity = available_quantity

    @property
    def currency_code(self):
        """Gets the currency_code of this GoogleCloudRecommendationengineV1beta1ProductDetail.

        Optional. Currency code for price/costs. Use three-character ISO-4217 code. Required only if originalPrice or displayPrice is set.

        :return: The currency_code of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this GoogleCloudRecommendationengineV1beta1ProductDetail.

        Optional. Currency code for price/costs. Use three-character ISO-4217 code. Required only if originalPrice or displayPrice is set.

        :param currency_code: The currency_code of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def display_price(self):
        """Gets the display_price of this GoogleCloudRecommendationengineV1beta1ProductDetail.

        Optional. Display price of the product (e.g. discounted price). If provided, this will override the display price in Catalog for this product.

        :return: The display_price of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :rtype: float
        """
        return self._display_price

    @display_price.setter
    def display_price(self, display_price):
        """Sets the display_price of this GoogleCloudRecommendationengineV1beta1ProductDetail.

        Optional. Display price of the product (e.g. discounted price). If provided, this will override the display price in Catalog for this product.

        :param display_price: The display_price of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :type display_price: float
        """

        self._display_price = display_price

    @property
    def id(self):
        """Gets the id of this GoogleCloudRecommendationengineV1beta1ProductDetail.

        Required. Catalog item ID. UTF-8 encoded string with a length limit of 128 characters.

        :return: The id of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GoogleCloudRecommendationengineV1beta1ProductDetail.

        Required. Catalog item ID. UTF-8 encoded string with a length limit of 128 characters.

        :param id: The id of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :type id: str
        """

        self._id = id

    @property
    def item_attributes(self):
        """Gets the item_attributes of this GoogleCloudRecommendationengineV1beta1ProductDetail.


        :return: The item_attributes of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :rtype: GoogleCloudRecommendationengineV1beta1FeatureMap
        """
        return self._item_attributes

    @item_attributes.setter
    def item_attributes(self, item_attributes):
        """Sets the item_attributes of this GoogleCloudRecommendationengineV1beta1ProductDetail.


        :param item_attributes: The item_attributes of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :type item_attributes: GoogleCloudRecommendationengineV1beta1FeatureMap
        """

        self._item_attributes = item_attributes

    @property
    def original_price(self):
        """Gets the original_price of this GoogleCloudRecommendationengineV1beta1ProductDetail.

        Optional. Original price of the product. If provided, this will override the original price in Catalog for this product.

        :return: The original_price of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :rtype: float
        """
        return self._original_price

    @original_price.setter
    def original_price(self, original_price):
        """Sets the original_price of this GoogleCloudRecommendationengineV1beta1ProductDetail.

        Optional. Original price of the product. If provided, this will override the original price in Catalog for this product.

        :param original_price: The original_price of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :type original_price: float
        """

        self._original_price = original_price

    @property
    def quantity(self):
        """Gets the quantity of this GoogleCloudRecommendationengineV1beta1ProductDetail.

        Optional. Quantity of the product associated with the user event. For example, this field will be 2 if two products are added to the shopping cart for `add-to-cart` event. Required for `add-to-cart`, `add-to-list`, `remove-from-cart`, `checkout-start`, `purchase-complete`, `refund` event types.

        :return: The quantity of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GoogleCloudRecommendationengineV1beta1ProductDetail.

        Optional. Quantity of the product associated with the user event. For example, this field will be 2 if two products are added to the shopping cart for `add-to-cart` event. Required for `add-to-cart`, `add-to-list`, `remove-from-cart`, `checkout-start`, `purchase-complete`, `refund` event types.

        :param quantity: The quantity of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def stock_state(self):
        """Gets the stock_state of this GoogleCloudRecommendationengineV1beta1ProductDetail.

        Optional. Item stock state. If provided, this overrides the stock state in Catalog for items in this event.

        :return: The stock_state of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :rtype: str
        """
        return self._stock_state

    @stock_state.setter
    def stock_state(self, stock_state):
        """Sets the stock_state of this GoogleCloudRecommendationengineV1beta1ProductDetail.

        Optional. Item stock state. If provided, this overrides the stock state in Catalog for items in this event.

        :param stock_state: The stock_state of this GoogleCloudRecommendationengineV1beta1ProductDetail.
        :type stock_state: str
        """
        allowed_values = ["STOCK_STATE_UNSPECIFIED", "IN_STOCK", "OUT_OF_STOCK", "PREORDER", "BACKORDER"]  # noqa: E501
        if stock_state not in allowed_values:
            raise ValueError(
                "Invalid value for `stock_state` ({0}), must be one of {1}"
                .format(stock_state, allowed_values)
            )

        self._stock_state = stock_state
