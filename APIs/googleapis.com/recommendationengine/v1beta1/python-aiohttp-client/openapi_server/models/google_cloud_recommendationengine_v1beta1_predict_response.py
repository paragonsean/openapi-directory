# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_recommendationengine_v1beta1_predict_response_prediction_result import GoogleCloudRecommendationengineV1beta1PredictResponsePredictionResult
from openapi_server import util


class GoogleCloudRecommendationengineV1beta1PredictResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dry_run: bool=None, items_missing_in_catalog: List[str]=None, metadata: Dict[str, object]=None, next_page_token: str=None, recommendation_token: str=None, results: List[GoogleCloudRecommendationengineV1beta1PredictResponsePredictionResult]=None):
        """GoogleCloudRecommendationengineV1beta1PredictResponse - a model defined in OpenAPI

        :param dry_run: The dry_run of this GoogleCloudRecommendationengineV1beta1PredictResponse.
        :param items_missing_in_catalog: The items_missing_in_catalog of this GoogleCloudRecommendationengineV1beta1PredictResponse.
        :param metadata: The metadata of this GoogleCloudRecommendationengineV1beta1PredictResponse.
        :param next_page_token: The next_page_token of this GoogleCloudRecommendationengineV1beta1PredictResponse.
        :param recommendation_token: The recommendation_token of this GoogleCloudRecommendationengineV1beta1PredictResponse.
        :param results: The results of this GoogleCloudRecommendationengineV1beta1PredictResponse.
        """
        self.openapi_types = {
            'dry_run': bool,
            'items_missing_in_catalog': List[str],
            'metadata': Dict[str, object],
            'next_page_token': str,
            'recommendation_token': str,
            'results': List[GoogleCloudRecommendationengineV1beta1PredictResponsePredictionResult]
        }

        self.attribute_map = {
            'dry_run': 'dryRun',
            'items_missing_in_catalog': 'itemsMissingInCatalog',
            'metadata': 'metadata',
            'next_page_token': 'nextPageToken',
            'recommendation_token': 'recommendationToken',
            'results': 'results'
        }

        self._dry_run = dry_run
        self._items_missing_in_catalog = items_missing_in_catalog
        self._metadata = metadata
        self._next_page_token = next_page_token
        self._recommendation_token = recommendation_token
        self._results = results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRecommendationengineV1beta1PredictResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRecommendationengineV1beta1PredictResponse of this GoogleCloudRecommendationengineV1beta1PredictResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dry_run(self):
        """Gets the dry_run of this GoogleCloudRecommendationengineV1beta1PredictResponse.

        True if the dryRun property was set in the request.

        :return: The dry_run of this GoogleCloudRecommendationengineV1beta1PredictResponse.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this GoogleCloudRecommendationengineV1beta1PredictResponse.

        True if the dryRun property was set in the request.

        :param dry_run: The dry_run of this GoogleCloudRecommendationengineV1beta1PredictResponse.
        :type dry_run: bool
        """

        self._dry_run = dry_run

    @property
    def items_missing_in_catalog(self):
        """Gets the items_missing_in_catalog of this GoogleCloudRecommendationengineV1beta1PredictResponse.

        IDs of items in the request that were missing from the catalog.

        :return: The items_missing_in_catalog of this GoogleCloudRecommendationengineV1beta1PredictResponse.
        :rtype: List[str]
        """
        return self._items_missing_in_catalog

    @items_missing_in_catalog.setter
    def items_missing_in_catalog(self, items_missing_in_catalog):
        """Sets the items_missing_in_catalog of this GoogleCloudRecommendationengineV1beta1PredictResponse.

        IDs of items in the request that were missing from the catalog.

        :param items_missing_in_catalog: The items_missing_in_catalog of this GoogleCloudRecommendationengineV1beta1PredictResponse.
        :type items_missing_in_catalog: List[str]
        """

        self._items_missing_in_catalog = items_missing_in_catalog

    @property
    def metadata(self):
        """Gets the metadata of this GoogleCloudRecommendationengineV1beta1PredictResponse.

        Additional domain specific prediction response metadata.

        :return: The metadata of this GoogleCloudRecommendationengineV1beta1PredictResponse.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GoogleCloudRecommendationengineV1beta1PredictResponse.

        Additional domain specific prediction response metadata.

        :param metadata: The metadata of this GoogleCloudRecommendationengineV1beta1PredictResponse.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def next_page_token(self):
        """Gets the next_page_token of this GoogleCloudRecommendationengineV1beta1PredictResponse.

        If empty, the list is complete. If nonempty, the token to pass to the next request's PredictRequest.page_token.

        :return: The next_page_token of this GoogleCloudRecommendationengineV1beta1PredictResponse.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this GoogleCloudRecommendationengineV1beta1PredictResponse.

        If empty, the list is complete. If nonempty, the token to pass to the next request's PredictRequest.page_token.

        :param next_page_token: The next_page_token of this GoogleCloudRecommendationengineV1beta1PredictResponse.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def recommendation_token(self):
        """Gets the recommendation_token of this GoogleCloudRecommendationengineV1beta1PredictResponse.

        A unique recommendation token. This should be included in the user event logs resulting from this recommendation, which enables accurate attribution of recommendation model performance.

        :return: The recommendation_token of this GoogleCloudRecommendationengineV1beta1PredictResponse.
        :rtype: str
        """
        return self._recommendation_token

    @recommendation_token.setter
    def recommendation_token(self, recommendation_token):
        """Sets the recommendation_token of this GoogleCloudRecommendationengineV1beta1PredictResponse.

        A unique recommendation token. This should be included in the user event logs resulting from this recommendation, which enables accurate attribution of recommendation model performance.

        :param recommendation_token: The recommendation_token of this GoogleCloudRecommendationengineV1beta1PredictResponse.
        :type recommendation_token: str
        """

        self._recommendation_token = recommendation_token

    @property
    def results(self):
        """Gets the results of this GoogleCloudRecommendationengineV1beta1PredictResponse.

        A list of recommended items. The order represents the ranking (from the most relevant item to the least).

        :return: The results of this GoogleCloudRecommendationengineV1beta1PredictResponse.
        :rtype: List[GoogleCloudRecommendationengineV1beta1PredictResponsePredictionResult]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this GoogleCloudRecommendationengineV1beta1PredictResponse.

        A list of recommended items. The order represents the ranking (from the most relevant item to the least).

        :param results: The results of this GoogleCloudRecommendationengineV1beta1PredictResponse.
        :type results: List[GoogleCloudRecommendationengineV1beta1PredictResponsePredictionResult]
        """

        self._results = results
