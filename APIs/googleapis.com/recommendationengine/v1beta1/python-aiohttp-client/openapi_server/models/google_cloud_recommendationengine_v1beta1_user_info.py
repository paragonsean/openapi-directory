# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudRecommendationengineV1beta1UserInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, direct_user_request: bool=None, ip_address: str=None, user_agent: str=None, user_id: str=None, visitor_id: str=None):
        """GoogleCloudRecommendationengineV1beta1UserInfo - a model defined in OpenAPI

        :param direct_user_request: The direct_user_request of this GoogleCloudRecommendationengineV1beta1UserInfo.
        :param ip_address: The ip_address of this GoogleCloudRecommendationengineV1beta1UserInfo.
        :param user_agent: The user_agent of this GoogleCloudRecommendationengineV1beta1UserInfo.
        :param user_id: The user_id of this GoogleCloudRecommendationengineV1beta1UserInfo.
        :param visitor_id: The visitor_id of this GoogleCloudRecommendationengineV1beta1UserInfo.
        """
        self.openapi_types = {
            'direct_user_request': bool,
            'ip_address': str,
            'user_agent': str,
            'user_id': str,
            'visitor_id': str
        }

        self.attribute_map = {
            'direct_user_request': 'directUserRequest',
            'ip_address': 'ipAddress',
            'user_agent': 'userAgent',
            'user_id': 'userId',
            'visitor_id': 'visitorId'
        }

        self._direct_user_request = direct_user_request
        self._ip_address = ip_address
        self._user_agent = user_agent
        self._user_id = user_id
        self._visitor_id = visitor_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRecommendationengineV1beta1UserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRecommendationengineV1beta1UserInfo of this GoogleCloudRecommendationengineV1beta1UserInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def direct_user_request(self):
        """Gets the direct_user_request of this GoogleCloudRecommendationengineV1beta1UserInfo.

        Optional. Indicates if the request is made directly from the end user in which case the user_agent and ip_address fields can be populated from the HTTP request. This should *not* be set when using the javascript pixel. This flag should be set only if the API request is made directly from the end user such as a mobile app (and not if a gateway or a server is processing and pushing the user events).

        :return: The direct_user_request of this GoogleCloudRecommendationengineV1beta1UserInfo.
        :rtype: bool
        """
        return self._direct_user_request

    @direct_user_request.setter
    def direct_user_request(self, direct_user_request):
        """Sets the direct_user_request of this GoogleCloudRecommendationengineV1beta1UserInfo.

        Optional. Indicates if the request is made directly from the end user in which case the user_agent and ip_address fields can be populated from the HTTP request. This should *not* be set when using the javascript pixel. This flag should be set only if the API request is made directly from the end user such as a mobile app (and not if a gateway or a server is processing and pushing the user events).

        :param direct_user_request: The direct_user_request of this GoogleCloudRecommendationengineV1beta1UserInfo.
        :type direct_user_request: bool
        """

        self._direct_user_request = direct_user_request

    @property
    def ip_address(self):
        """Gets the ip_address of this GoogleCloudRecommendationengineV1beta1UserInfo.

        Optional. IP address of the user. This could be either IPv4 (e.g. 104.133.9.80) or IPv6 (e.g. 2001:0db8:85a3:0000:0000:8a2e:0370:7334). This should *not* be set when using the javascript pixel or if `direct_user_request` is set. Used to extract location information for personalization.

        :return: The ip_address of this GoogleCloudRecommendationengineV1beta1UserInfo.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this GoogleCloudRecommendationengineV1beta1UserInfo.

        Optional. IP address of the user. This could be either IPv4 (e.g. 104.133.9.80) or IPv6 (e.g. 2001:0db8:85a3:0000:0000:8a2e:0370:7334). This should *not* be set when using the javascript pixel or if `direct_user_request` is set. Used to extract location information for personalization.

        :param ip_address: The ip_address of this GoogleCloudRecommendationengineV1beta1UserInfo.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def user_agent(self):
        """Gets the user_agent of this GoogleCloudRecommendationengineV1beta1UserInfo.

        Optional. User agent as included in the HTTP header. UTF-8 encoded string with a length limit of 1 KiB. This should *not* be set when using the JavaScript pixel or if `directUserRequest` is set.

        :return: The user_agent of this GoogleCloudRecommendationengineV1beta1UserInfo.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this GoogleCloudRecommendationengineV1beta1UserInfo.

        Optional. User agent as included in the HTTP header. UTF-8 encoded string with a length limit of 1 KiB. This should *not* be set when using the JavaScript pixel or if `directUserRequest` is set.

        :param user_agent: The user_agent of this GoogleCloudRecommendationengineV1beta1UserInfo.
        :type user_agent: str
        """

        self._user_agent = user_agent

    @property
    def user_id(self):
        """Gets the user_id of this GoogleCloudRecommendationengineV1beta1UserInfo.

        Optional. Unique identifier for logged-in user with a length limit of 128 bytes. Required only for logged-in users. Don't set for anonymous users. Don't set the field to the same fixed ID for different users. This mixes the event history of those users together, which results in degraded model quality.

        :return: The user_id of this GoogleCloudRecommendationengineV1beta1UserInfo.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GoogleCloudRecommendationengineV1beta1UserInfo.

        Optional. Unique identifier for logged-in user with a length limit of 128 bytes. Required only for logged-in users. Don't set for anonymous users. Don't set the field to the same fixed ID for different users. This mixes the event history of those users together, which results in degraded model quality.

        :param user_id: The user_id of this GoogleCloudRecommendationengineV1beta1UserInfo.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def visitor_id(self):
        """Gets the visitor_id of this GoogleCloudRecommendationengineV1beta1UserInfo.

        Required. A unique identifier for tracking visitors with a length limit of 128 bytes. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor logs in or out of the website. Maximum length 128 bytes. Cannot be empty. Don't set the field to the same fixed ID for different users. This mixes the event history of those users together, which results in degraded model quality.

        :return: The visitor_id of this GoogleCloudRecommendationengineV1beta1UserInfo.
        :rtype: str
        """
        return self._visitor_id

    @visitor_id.setter
    def visitor_id(self, visitor_id):
        """Sets the visitor_id of this GoogleCloudRecommendationengineV1beta1UserInfo.

        Required. A unique identifier for tracking visitors with a length limit of 128 bytes. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor logs in or out of the website. Maximum length 128 bytes. Cannot be empty. Don't set the field to the same fixed ID for different users. This mixes the event history of those users together, which results in degraded model quality.

        :param visitor_id: The visitor_id of this GoogleCloudRecommendationengineV1beta1UserInfo.
        :type visitor_id: str
        """

        self._visitor_id = visitor_id
