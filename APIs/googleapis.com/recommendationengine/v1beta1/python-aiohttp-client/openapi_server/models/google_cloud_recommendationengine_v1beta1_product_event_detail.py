# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_recommendationengine_v1beta1_catalog_item_category_hierarchy import GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy
from openapi_server.models.google_cloud_recommendationengine_v1beta1_product_detail import GoogleCloudRecommendationengineV1beta1ProductDetail
from openapi_server.models.google_cloud_recommendationengine_v1beta1_purchase_transaction import GoogleCloudRecommendationengineV1beta1PurchaseTransaction
from openapi_server import util


class GoogleCloudRecommendationengineV1beta1ProductEventDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cart_id: str=None, list_id: str=None, page_categories: List[GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy]=None, product_details: List[GoogleCloudRecommendationengineV1beta1ProductDetail]=None, purchase_transaction: GoogleCloudRecommendationengineV1beta1PurchaseTransaction=None, search_query: str=None):
        """GoogleCloudRecommendationengineV1beta1ProductEventDetail - a model defined in OpenAPI

        :param cart_id: The cart_id of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.
        :param list_id: The list_id of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.
        :param page_categories: The page_categories of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.
        :param product_details: The product_details of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.
        :param purchase_transaction: The purchase_transaction of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.
        :param search_query: The search_query of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.
        """
        self.openapi_types = {
            'cart_id': str,
            'list_id': str,
            'page_categories': List[GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy],
            'product_details': List[GoogleCloudRecommendationengineV1beta1ProductDetail],
            'purchase_transaction': GoogleCloudRecommendationengineV1beta1PurchaseTransaction,
            'search_query': str
        }

        self.attribute_map = {
            'cart_id': 'cartId',
            'list_id': 'listId',
            'page_categories': 'pageCategories',
            'product_details': 'productDetails',
            'purchase_transaction': 'purchaseTransaction',
            'search_query': 'searchQuery'
        }

        self._cart_id = cart_id
        self._list_id = list_id
        self._page_categories = page_categories
        self._product_details = product_details
        self._purchase_transaction = purchase_transaction
        self._search_query = search_query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRecommendationengineV1beta1ProductEventDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRecommendationengineV1beta1ProductEventDetail of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cart_id(self):
        """Gets the cart_id of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.

        Optional. The id or name of the associated shopping cart. This id is used to associate multiple items added or present in the cart before purchase. This can only be set for `add-to-cart`, `remove-from-cart`, `checkout-start`, `purchase-complete`, or `shopping-cart-page-view` events.

        :return: The cart_id of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.
        :rtype: str
        """
        return self._cart_id

    @cart_id.setter
    def cart_id(self, cart_id):
        """Sets the cart_id of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.

        Optional. The id or name of the associated shopping cart. This id is used to associate multiple items added or present in the cart before purchase. This can only be set for `add-to-cart`, `remove-from-cart`, `checkout-start`, `purchase-complete`, or `shopping-cart-page-view` events.

        :param cart_id: The cart_id of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.
        :type cart_id: str
        """

        self._cart_id = cart_id

    @property
    def list_id(self):
        """Gets the list_id of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.

        Required for `add-to-list` and `remove-from-list` events. The id or name of the list that the item is being added to or removed from. Other event types should not set this field.

        :return: The list_id of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.
        :rtype: str
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.

        Required for `add-to-list` and `remove-from-list` events. The id or name of the list that the item is being added to or removed from. Other event types should not set this field.

        :param list_id: The list_id of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.
        :type list_id: str
        """

        self._list_id = list_id

    @property
    def page_categories(self):
        """Gets the page_categories of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.

        Required for `category-page-view` events. At least one of search_query or page_categories is required for `search` events. Other event types should not set this field. The categories associated with a category page. Category pages include special pages such as sales or promotions. For instance, a special sale page may have the category hierarchy: categories : [\"Sales\", \"2017 Black Friday Deals\"].

        :return: The page_categories of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.
        :rtype: List[GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy]
        """
        return self._page_categories

    @page_categories.setter
    def page_categories(self, page_categories):
        """Sets the page_categories of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.

        Required for `category-page-view` events. At least one of search_query or page_categories is required for `search` events. Other event types should not set this field. The categories associated with a category page. Category pages include special pages such as sales or promotions. For instance, a special sale page may have the category hierarchy: categories : [\"Sales\", \"2017 Black Friday Deals\"].

        :param page_categories: The page_categories of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.
        :type page_categories: List[GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy]
        """

        self._page_categories = page_categories

    @property
    def product_details(self):
        """Gets the product_details of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.

        The main product details related to the event. This field is required for the following event types: * `add-to-cart` * `add-to-list` * `checkout-start` * `detail-page-view` * `purchase-complete` * `refund` * `remove-from-cart` * `remove-from-list` This field is optional for the following event types: * `page-visit` * `shopping-cart-page-view` - note that 'product_details' should be set for this unless the shopping cart is empty. * `search` (highly encouraged) In a `search` event, this field represents the products returned to the end user on the current page (the end user may have not finished broswing the whole page yet). When a new page is returned to the end user, after pagination/filtering/ordering even for the same query, a new SEARCH event with different product_details is desired. The end user may have not finished broswing the whole page yet. This field is not allowed for the following event types: * `category-page-view` * `home-page-view`

        :return: The product_details of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.
        :rtype: List[GoogleCloudRecommendationengineV1beta1ProductDetail]
        """
        return self._product_details

    @product_details.setter
    def product_details(self, product_details):
        """Sets the product_details of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.

        The main product details related to the event. This field is required for the following event types: * `add-to-cart` * `add-to-list` * `checkout-start` * `detail-page-view` * `purchase-complete` * `refund` * `remove-from-cart` * `remove-from-list` This field is optional for the following event types: * `page-visit` * `shopping-cart-page-view` - note that 'product_details' should be set for this unless the shopping cart is empty. * `search` (highly encouraged) In a `search` event, this field represents the products returned to the end user on the current page (the end user may have not finished broswing the whole page yet). When a new page is returned to the end user, after pagination/filtering/ordering even for the same query, a new SEARCH event with different product_details is desired. The end user may have not finished broswing the whole page yet. This field is not allowed for the following event types: * `category-page-view` * `home-page-view`

        :param product_details: The product_details of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.
        :type product_details: List[GoogleCloudRecommendationengineV1beta1ProductDetail]
        """

        self._product_details = product_details

    @property
    def purchase_transaction(self):
        """Gets the purchase_transaction of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.


        :return: The purchase_transaction of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.
        :rtype: GoogleCloudRecommendationengineV1beta1PurchaseTransaction
        """
        return self._purchase_transaction

    @purchase_transaction.setter
    def purchase_transaction(self, purchase_transaction):
        """Sets the purchase_transaction of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.


        :param purchase_transaction: The purchase_transaction of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.
        :type purchase_transaction: GoogleCloudRecommendationengineV1beta1PurchaseTransaction
        """

        self._purchase_transaction = purchase_transaction

    @property
    def search_query(self):
        """Gets the search_query of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.

        At least one of search_query or page_categories is required for `search` events. Other event types should not set this field. The user's search query as UTF-8 encoded text with a length limit of 5 KiB.

        :return: The search_query of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.
        :rtype: str
        """
        return self._search_query

    @search_query.setter
    def search_query(self, search_query):
        """Sets the search_query of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.

        At least one of search_query or page_categories is required for `search` events. Other event types should not set this field. The user's search query as UTF-8 encoded text with a length limit of 5 KiB.

        :param search_query: The search_query of this GoogleCloudRecommendationengineV1beta1ProductEventDetail.
        :type search_query: str
        """

        self._search_query = search_query
