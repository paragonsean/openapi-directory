# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_recommendationengine_v1beta1_user_event import GoogleCloudRecommendationengineV1beta1UserEvent
from openapi_server import util


class GoogleCloudRecommendationengineV1beta1PredictRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dry_run: bool=None, filter: str=None, labels: Dict[str, str]=None, page_size: int=None, page_token: str=None, params: Dict[str, object]=None, user_event: GoogleCloudRecommendationengineV1beta1UserEvent=None):
        """GoogleCloudRecommendationengineV1beta1PredictRequest - a model defined in OpenAPI

        :param dry_run: The dry_run of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        :param filter: The filter of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        :param labels: The labels of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        :param page_size: The page_size of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        :param page_token: The page_token of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        :param params: The params of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        :param user_event: The user_event of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        """
        self.openapi_types = {
            'dry_run': bool,
            'filter': str,
            'labels': Dict[str, str],
            'page_size': int,
            'page_token': str,
            'params': Dict[str, object],
            'user_event': GoogleCloudRecommendationengineV1beta1UserEvent
        }

        self.attribute_map = {
            'dry_run': 'dryRun',
            'filter': 'filter',
            'labels': 'labels',
            'page_size': 'pageSize',
            'page_token': 'pageToken',
            'params': 'params',
            'user_event': 'userEvent'
        }

        self._dry_run = dry_run
        self._filter = filter
        self._labels = labels
        self._page_size = page_size
        self._page_token = page_token
        self._params = params
        self._user_event = user_event

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRecommendationengineV1beta1PredictRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRecommendationengineV1beta1PredictRequest of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dry_run(self):
        """Gets the dry_run of this GoogleCloudRecommendationengineV1beta1PredictRequest.

        Optional. Use dryRun mode for this prediction query. If set to true, a fake model will be used that returns arbitrary catalog items. Note that the dryRun mode should only be used for testing the API, or if the model is not ready.

        :return: The dry_run of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this GoogleCloudRecommendationengineV1beta1PredictRequest.

        Optional. Use dryRun mode for this prediction query. If set to true, a fake model will be used that returns arbitrary catalog items. Note that the dryRun mode should only be used for testing the API, or if the model is not ready.

        :param dry_run: The dry_run of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        :type dry_run: bool
        """

        self._dry_run = dry_run

    @property
    def filter(self):
        """Gets the filter of this GoogleCloudRecommendationengineV1beta1PredictRequest.

        Optional. Filter for restricting prediction results. Accepts values for tags and the `filterOutOfStockItems` flag. * Tag expressions. Restricts predictions to items that match all of the specified tags. Boolean operators `OR` and `NOT` are supported if the expression is enclosed in parentheses, and must be separated from the tag values by a space. `-\"tagA\"` is also supported and is equivalent to `NOT \"tagA\"`. Tag values must be double quoted UTF-8 encoded strings with a size limit of 1 KiB. * filterOutOfStockItems. Restricts predictions to items that do not have a stockState value of OUT_OF_STOCK. Examples: * tag=(\"Red\" OR \"Blue\") tag=\"New-Arrival\" tag=(NOT \"promotional\") * filterOutOfStockItems tag=(-\"promotional\") * filterOutOfStockItems If your filter blocks all prediction results, nothing will be returned. If you want generic (unfiltered) popular items to be returned instead, set `strictFiltering` to false in `PredictRequest.params`.

        :return: The filter of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GoogleCloudRecommendationengineV1beta1PredictRequest.

        Optional. Filter for restricting prediction results. Accepts values for tags and the `filterOutOfStockItems` flag. * Tag expressions. Restricts predictions to items that match all of the specified tags. Boolean operators `OR` and `NOT` are supported if the expression is enclosed in parentheses, and must be separated from the tag values by a space. `-\"tagA\"` is also supported and is equivalent to `NOT \"tagA\"`. Tag values must be double quoted UTF-8 encoded strings with a size limit of 1 KiB. * filterOutOfStockItems. Restricts predictions to items that do not have a stockState value of OUT_OF_STOCK. Examples: * tag=(\"Red\" OR \"Blue\") tag=\"New-Arrival\" tag=(NOT \"promotional\") * filterOutOfStockItems tag=(-\"promotional\") * filterOutOfStockItems If your filter blocks all prediction results, nothing will be returned. If you want generic (unfiltered) popular items to be returned instead, set `strictFiltering` to false in `PredictRequest.params`.

        :param filter: The filter of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        :type filter: str
        """

        self._filter = filter

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudRecommendationengineV1beta1PredictRequest.

        Optional. The labels for the predict request. * Label keys can contain lowercase letters, digits and hyphens, must start with a letter, and must end with a letter or digit. * Non-zero label values can contain lowercase letters, digits and hyphens, must start with a letter, and must end with a letter or digit. * No more than 64 labels can be associated with a given request. See https://goo.gl/xmQnxf for more information on and examples of labels.

        :return: The labels of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudRecommendationengineV1beta1PredictRequest.

        Optional. The labels for the predict request. * Label keys can contain lowercase letters, digits and hyphens, must start with a letter, and must end with a letter or digit. * Non-zero label values can contain lowercase letters, digits and hyphens, must start with a letter, and must end with a letter or digit. * No more than 64 labels can be associated with a given request. See https://goo.gl/xmQnxf for more information on and examples of labels.

        :param labels: The labels of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def page_size(self):
        """Gets the page_size of this GoogleCloudRecommendationengineV1beta1PredictRequest.

        Optional. Maximum number of results to return per page. Set this property to the number of prediction results required. If zero, the service will choose a reasonable default.

        :return: The page_size of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this GoogleCloudRecommendationengineV1beta1PredictRequest.

        Optional. Maximum number of results to return per page. Set this property to the number of prediction results required. If zero, the service will choose a reasonable default.

        :param page_size: The page_size of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """Gets the page_token of this GoogleCloudRecommendationengineV1beta1PredictRequest.

        Optional. The previous PredictResponse.next_page_token.

        :return: The page_token of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this GoogleCloudRecommendationengineV1beta1PredictRequest.

        Optional. The previous PredictResponse.next_page_token.

        :param page_token: The page_token of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def params(self):
        """Gets the params of this GoogleCloudRecommendationengineV1beta1PredictRequest.

        Optional. Additional domain specific parameters for the predictions. Allowed values: * `returnCatalogItem`: Boolean. If set to true, the associated catalogItem object will be returned in the `PredictResponse.PredictionResult.itemMetadata` object in the method response. * `returnItemScore`: Boolean. If set to true, the prediction 'score' corresponding to each returned item will be set in the `metadata` field in the prediction response. The given 'score' indicates the probability of an item being clicked/purchased given the user's context and history. * `strictFiltering`: Boolean. True by default. If set to false, the service will return generic (unfiltered) popular items instead of empty if your filter blocks all prediction results. * `priceRerankLevel`: String. Default empty. If set to be non-empty, then it needs to be one of {'no-price-reranking', 'low-price-reranking', 'medium-price-reranking', 'high-price-reranking'}. This gives request level control and adjust prediction results based on product price. * `diversityLevel`: String. Default empty. If set to be non-empty, then it needs to be one of {'no-diversity', 'low-diversity', 'medium-diversity', 'high-diversity', 'auto-diversity'}. This gives request level control and adjust prediction results based on product category.

        :return: The params of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        :rtype: Dict[str, object]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this GoogleCloudRecommendationengineV1beta1PredictRequest.

        Optional. Additional domain specific parameters for the predictions. Allowed values: * `returnCatalogItem`: Boolean. If set to true, the associated catalogItem object will be returned in the `PredictResponse.PredictionResult.itemMetadata` object in the method response. * `returnItemScore`: Boolean. If set to true, the prediction 'score' corresponding to each returned item will be set in the `metadata` field in the prediction response. The given 'score' indicates the probability of an item being clicked/purchased given the user's context and history. * `strictFiltering`: Boolean. True by default. If set to false, the service will return generic (unfiltered) popular items instead of empty if your filter blocks all prediction results. * `priceRerankLevel`: String. Default empty. If set to be non-empty, then it needs to be one of {'no-price-reranking', 'low-price-reranking', 'medium-price-reranking', 'high-price-reranking'}. This gives request level control and adjust prediction results based on product price. * `diversityLevel`: String. Default empty. If set to be non-empty, then it needs to be one of {'no-diversity', 'low-diversity', 'medium-diversity', 'high-diversity', 'auto-diversity'}. This gives request level control and adjust prediction results based on product category.

        :param params: The params of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        :type params: Dict[str, object]
        """

        self._params = params

    @property
    def user_event(self):
        """Gets the user_event of this GoogleCloudRecommendationengineV1beta1PredictRequest.


        :return: The user_event of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        :rtype: GoogleCloudRecommendationengineV1beta1UserEvent
        """
        return self._user_event

    @user_event.setter
    def user_event(self, user_event):
        """Sets the user_event of this GoogleCloudRecommendationengineV1beta1PredictRequest.


        :param user_event: The user_event of this GoogleCloudRecommendationengineV1beta1PredictRequest.
        :type user_event: GoogleCloudRecommendationengineV1beta1UserEvent
        """

        self._user_event = user_event
