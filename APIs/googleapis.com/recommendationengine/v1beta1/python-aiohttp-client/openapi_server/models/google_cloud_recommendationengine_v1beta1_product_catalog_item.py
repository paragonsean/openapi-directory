# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_recommendationengine_v1beta1_image import GoogleCloudRecommendationengineV1beta1Image
from openapi_server.models.google_cloud_recommendationengine_v1beta1_product_catalog_item_exact_price import GoogleCloudRecommendationengineV1beta1ProductCatalogItemExactPrice
from openapi_server.models.google_cloud_recommendationengine_v1beta1_product_catalog_item_price_range import GoogleCloudRecommendationengineV1beta1ProductCatalogItemPriceRange
from openapi_server import util


class GoogleCloudRecommendationengineV1beta1ProductCatalogItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_quantity: str=None, canonical_product_uri: str=None, costs: Dict[str, float]=None, currency_code: str=None, exact_price: GoogleCloudRecommendationengineV1beta1ProductCatalogItemExactPrice=None, images: List[GoogleCloudRecommendationengineV1beta1Image]=None, price_range: GoogleCloudRecommendationengineV1beta1ProductCatalogItemPriceRange=None, stock_state: str=None):
        """GoogleCloudRecommendationengineV1beta1ProductCatalogItem - a model defined in OpenAPI

        :param available_quantity: The available_quantity of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :param canonical_product_uri: The canonical_product_uri of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :param costs: The costs of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :param currency_code: The currency_code of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :param exact_price: The exact_price of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :param images: The images of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :param price_range: The price_range of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :param stock_state: The stock_state of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        """
        self.openapi_types = {
            'available_quantity': str,
            'canonical_product_uri': str,
            'costs': Dict[str, float],
            'currency_code': str,
            'exact_price': GoogleCloudRecommendationengineV1beta1ProductCatalogItemExactPrice,
            'images': List[GoogleCloudRecommendationengineV1beta1Image],
            'price_range': GoogleCloudRecommendationengineV1beta1ProductCatalogItemPriceRange,
            'stock_state': str
        }

        self.attribute_map = {
            'available_quantity': 'availableQuantity',
            'canonical_product_uri': 'canonicalProductUri',
            'costs': 'costs',
            'currency_code': 'currencyCode',
            'exact_price': 'exactPrice',
            'images': 'images',
            'price_range': 'priceRange',
            'stock_state': 'stockState'
        }

        self._available_quantity = available_quantity
        self._canonical_product_uri = canonical_product_uri
        self._costs = costs
        self._currency_code = currency_code
        self._exact_price = exact_price
        self._images = images
        self._price_range = price_range
        self._stock_state = stock_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRecommendationengineV1beta1ProductCatalogItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRecommendationengineV1beta1ProductCatalogItem of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_quantity(self):
        """Gets the available_quantity of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.

        Optional. The available quantity of the item.

        :return: The available_quantity of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :rtype: str
        """
        return self._available_quantity

    @available_quantity.setter
    def available_quantity(self, available_quantity):
        """Sets the available_quantity of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.

        Optional. The available quantity of the item.

        :param available_quantity: The available_quantity of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :type available_quantity: str
        """

        self._available_quantity = available_quantity

    @property
    def canonical_product_uri(self):
        """Gets the canonical_product_uri of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.

        Optional. Canonical URL directly linking to the item detail page with a length limit of 5 KiB..

        :return: The canonical_product_uri of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :rtype: str
        """
        return self._canonical_product_uri

    @canonical_product_uri.setter
    def canonical_product_uri(self, canonical_product_uri):
        """Sets the canonical_product_uri of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.

        Optional. Canonical URL directly linking to the item detail page with a length limit of 5 KiB..

        :param canonical_product_uri: The canonical_product_uri of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :type canonical_product_uri: str
        """

        self._canonical_product_uri = canonical_product_uri

    @property
    def costs(self):
        """Gets the costs of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.

        Optional. A map to pass the costs associated with the product. For example: {\"manufacturing\": 45.5} The profit of selling this item is computed like so: * If 'exactPrice' is provided, profit = displayPrice - sum(costs) * If 'priceRange' is provided, profit = minPrice - sum(costs)

        :return: The costs of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :rtype: Dict[str, float]
        """
        return self._costs

    @costs.setter
    def costs(self, costs):
        """Sets the costs of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.

        Optional. A map to pass the costs associated with the product. For example: {\"manufacturing\": 45.5} The profit of selling this item is computed like so: * If 'exactPrice' is provided, profit = displayPrice - sum(costs) * If 'priceRange' is provided, profit = minPrice - sum(costs)

        :param costs: The costs of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :type costs: Dict[str, float]
        """

        self._costs = costs

    @property
    def currency_code(self):
        """Gets the currency_code of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.

        Optional. Only required if the price is set. Currency code for price/costs. Use three-character ISO-4217 code.

        :return: The currency_code of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.

        Optional. Only required if the price is set. Currency code for price/costs. Use three-character ISO-4217 code.

        :param currency_code: The currency_code of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def exact_price(self):
        """Gets the exact_price of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.


        :return: The exact_price of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :rtype: GoogleCloudRecommendationengineV1beta1ProductCatalogItemExactPrice
        """
        return self._exact_price

    @exact_price.setter
    def exact_price(self, exact_price):
        """Sets the exact_price of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.


        :param exact_price: The exact_price of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :type exact_price: GoogleCloudRecommendationengineV1beta1ProductCatalogItemExactPrice
        """

        self._exact_price = exact_price

    @property
    def images(self):
        """Gets the images of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.

        Optional. Product images for the catalog item.

        :return: The images of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :rtype: List[GoogleCloudRecommendationengineV1beta1Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.

        Optional. Product images for the catalog item.

        :param images: The images of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :type images: List[GoogleCloudRecommendationengineV1beta1Image]
        """

        self._images = images

    @property
    def price_range(self):
        """Gets the price_range of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.


        :return: The price_range of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :rtype: GoogleCloudRecommendationengineV1beta1ProductCatalogItemPriceRange
        """
        return self._price_range

    @price_range.setter
    def price_range(self, price_range):
        """Sets the price_range of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.


        :param price_range: The price_range of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :type price_range: GoogleCloudRecommendationengineV1beta1ProductCatalogItemPriceRange
        """

        self._price_range = price_range

    @property
    def stock_state(self):
        """Gets the stock_state of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.

        Optional. Online stock state of the catalog item. Default is `IN_STOCK`.

        :return: The stock_state of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :rtype: str
        """
        return self._stock_state

    @stock_state.setter
    def stock_state(self, stock_state):
        """Sets the stock_state of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.

        Optional. Online stock state of the catalog item. Default is `IN_STOCK`.

        :param stock_state: The stock_state of this GoogleCloudRecommendationengineV1beta1ProductCatalogItem.
        :type stock_state: str
        """
        allowed_values = ["STOCK_STATE_UNSPECIFIED", "IN_STOCK", "OUT_OF_STOCK", "PREORDER", "BACKORDER"]  # noqa: E501
        if stock_state not in allowed_values:
            raise ValueError(
                "Invalid value for `stock_state` ({0}), must be one of {1}"
                .format(stock_state, allowed_values)
            )

        self._stock_state = stock_state
