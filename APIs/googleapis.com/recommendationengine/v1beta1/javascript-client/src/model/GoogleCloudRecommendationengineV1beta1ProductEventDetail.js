/**
 * Recommendations AI (Beta)
 * Note that we now highly recommend new customers to use Retail API, which incorporates the GA version of the Recommendations AI funtionalities. To enable Retail API, please visit https://console.cloud.google.com/apis/library/retail.googleapis.com. The Recommendations AI service enables customers to build end-to-end personalized recommendation systems without requiring a high level of expertise in machine learning, recommendation system, or Google Cloud.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy from './GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy';
import GoogleCloudRecommendationengineV1beta1ProductDetail from './GoogleCloudRecommendationengineV1beta1ProductDetail';
import GoogleCloudRecommendationengineV1beta1PurchaseTransaction from './GoogleCloudRecommendationengineV1beta1PurchaseTransaction';

/**
 * The GoogleCloudRecommendationengineV1beta1ProductEventDetail model module.
 * @module model/GoogleCloudRecommendationengineV1beta1ProductEventDetail
 * @version v1beta1
 */
class GoogleCloudRecommendationengineV1beta1ProductEventDetail {
    /**
     * Constructs a new <code>GoogleCloudRecommendationengineV1beta1ProductEventDetail</code>.
     * ProductEventDetail captures user event information specific to retail products.
     * @alias module:model/GoogleCloudRecommendationengineV1beta1ProductEventDetail
     */
    constructor() { 
        
        GoogleCloudRecommendationengineV1beta1ProductEventDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudRecommendationengineV1beta1ProductEventDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudRecommendationengineV1beta1ProductEventDetail} obj Optional instance to populate.
     * @return {module:model/GoogleCloudRecommendationengineV1beta1ProductEventDetail} The populated <code>GoogleCloudRecommendationengineV1beta1ProductEventDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudRecommendationengineV1beta1ProductEventDetail();

            if (data.hasOwnProperty('cartId')) {
                obj['cartId'] = ApiClient.convertToType(data['cartId'], 'String');
            }
            if (data.hasOwnProperty('listId')) {
                obj['listId'] = ApiClient.convertToType(data['listId'], 'String');
            }
            if (data.hasOwnProperty('pageCategories')) {
                obj['pageCategories'] = ApiClient.convertToType(data['pageCategories'], [GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy]);
            }
            if (data.hasOwnProperty('productDetails')) {
                obj['productDetails'] = ApiClient.convertToType(data['productDetails'], [GoogleCloudRecommendationengineV1beta1ProductDetail]);
            }
            if (data.hasOwnProperty('purchaseTransaction')) {
                obj['purchaseTransaction'] = GoogleCloudRecommendationengineV1beta1PurchaseTransaction.constructFromObject(data['purchaseTransaction']);
            }
            if (data.hasOwnProperty('searchQuery')) {
                obj['searchQuery'] = ApiClient.convertToType(data['searchQuery'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudRecommendationengineV1beta1ProductEventDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudRecommendationengineV1beta1ProductEventDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cartId'] && !(typeof data['cartId'] === 'string' || data['cartId'] instanceof String)) {
            throw new Error("Expected the field `cartId` to be a primitive type in the JSON string but got " + data['cartId']);
        }
        // ensure the json data is a string
        if (data['listId'] && !(typeof data['listId'] === 'string' || data['listId'] instanceof String)) {
            throw new Error("Expected the field `listId` to be a primitive type in the JSON string but got " + data['listId']);
        }
        if (data['pageCategories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pageCategories'])) {
                throw new Error("Expected the field `pageCategories` to be an array in the JSON data but got " + data['pageCategories']);
            }
            // validate the optional field `pageCategories` (array)
            for (const item of data['pageCategories']) {
                GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy.validateJSON(item);
            };
        }
        if (data['productDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['productDetails'])) {
                throw new Error("Expected the field `productDetails` to be an array in the JSON data but got " + data['productDetails']);
            }
            // validate the optional field `productDetails` (array)
            for (const item of data['productDetails']) {
                GoogleCloudRecommendationengineV1beta1ProductDetail.validateJSON(item);
            };
        }
        // validate the optional field `purchaseTransaction`
        if (data['purchaseTransaction']) { // data not null
          GoogleCloudRecommendationengineV1beta1PurchaseTransaction.validateJSON(data['purchaseTransaction']);
        }
        // ensure the json data is a string
        if (data['searchQuery'] && !(typeof data['searchQuery'] === 'string' || data['searchQuery'] instanceof String)) {
            throw new Error("Expected the field `searchQuery` to be a primitive type in the JSON string but got " + data['searchQuery']);
        }

        return true;
    }


}



/**
 * Optional. The id or name of the associated shopping cart. This id is used to associate multiple items added or present in the cart before purchase. This can only be set for `add-to-cart`, `remove-from-cart`, `checkout-start`, `purchase-complete`, or `shopping-cart-page-view` events.
 * @member {String} cartId
 */
GoogleCloudRecommendationengineV1beta1ProductEventDetail.prototype['cartId'] = undefined;

/**
 * Required for `add-to-list` and `remove-from-list` events. The id or name of the list that the item is being added to or removed from. Other event types should not set this field.
 * @member {String} listId
 */
GoogleCloudRecommendationengineV1beta1ProductEventDetail.prototype['listId'] = undefined;

/**
 * Required for `category-page-view` events. At least one of search_query or page_categories is required for `search` events. Other event types should not set this field. The categories associated with a category page. Category pages include special pages such as sales or promotions. For instance, a special sale page may have the category hierarchy: categories : [\"Sales\", \"2017 Black Friday Deals\"].
 * @member {Array.<module:model/GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy>} pageCategories
 */
GoogleCloudRecommendationengineV1beta1ProductEventDetail.prototype['pageCategories'] = undefined;

/**
 * The main product details related to the event. This field is required for the following event types: * `add-to-cart` * `add-to-list` * `checkout-start` * `detail-page-view` * `purchase-complete` * `refund` * `remove-from-cart` * `remove-from-list` This field is optional for the following event types: * `page-visit` * `shopping-cart-page-view` - note that 'product_details' should be set for this unless the shopping cart is empty. * `search` (highly encouraged) In a `search` event, this field represents the products returned to the end user on the current page (the end user may have not finished broswing the whole page yet). When a new page is returned to the end user, after pagination/filtering/ordering even for the same query, a new SEARCH event with different product_details is desired. The end user may have not finished broswing the whole page yet. This field is not allowed for the following event types: * `category-page-view` * `home-page-view`
 * @member {Array.<module:model/GoogleCloudRecommendationengineV1beta1ProductDetail>} productDetails
 */
GoogleCloudRecommendationengineV1beta1ProductEventDetail.prototype['productDetails'] = undefined;

/**
 * @member {module:model/GoogleCloudRecommendationengineV1beta1PurchaseTransaction} purchaseTransaction
 */
GoogleCloudRecommendationengineV1beta1ProductEventDetail.prototype['purchaseTransaction'] = undefined;

/**
 * At least one of search_query or page_categories is required for `search` events. Other event types should not set this field. The user's search query as UTF-8 encoded text with a length limit of 5 KiB.
 * @member {String} searchQuery
 */
GoogleCloudRecommendationengineV1beta1ProductEventDetail.prototype['searchQuery'] = undefined;






export default GoogleCloudRecommendationengineV1beta1ProductEventDetail;

