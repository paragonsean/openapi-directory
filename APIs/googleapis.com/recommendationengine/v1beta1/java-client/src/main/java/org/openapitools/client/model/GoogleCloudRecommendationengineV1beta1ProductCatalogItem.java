/*
 * Recommendations AI (Beta)
 * Note that we now highly recommend new customers to use Retail API, which incorporates the GA version of the Recommendations AI funtionalities. To enable Retail API, please visit https://console.cloud.google.com/apis/library/retail.googleapis.com. The Recommendations AI service enables customers to build end-to-end personalized recommendation systems without requiring a high level of expertise in machine learning, recommendation system, or Google Cloud.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudRecommendationengineV1beta1Image;
import org.openapitools.client.model.GoogleCloudRecommendationengineV1beta1ProductCatalogItemExactPrice;
import org.openapitools.client.model.GoogleCloudRecommendationengineV1beta1ProductCatalogItemPriceRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProductCatalogItem captures item metadata specific to retail products.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:25.887548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRecommendationengineV1beta1ProductCatalogItem {
  public static final String SERIALIZED_NAME_AVAILABLE_QUANTITY = "availableQuantity";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_QUANTITY)
  private String availableQuantity;

  public static final String SERIALIZED_NAME_CANONICAL_PRODUCT_URI = "canonicalProductUri";
  @SerializedName(SERIALIZED_NAME_CANONICAL_PRODUCT_URI)
  private String canonicalProductUri;

  public static final String SERIALIZED_NAME_COSTS = "costs";
  @SerializedName(SERIALIZED_NAME_COSTS)
  private Map<String, Float> costs = new HashMap<>();

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_EXACT_PRICE = "exactPrice";
  @SerializedName(SERIALIZED_NAME_EXACT_PRICE)
  private GoogleCloudRecommendationengineV1beta1ProductCatalogItemExactPrice exactPrice;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<GoogleCloudRecommendationengineV1beta1Image> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE_RANGE = "priceRange";
  @SerializedName(SERIALIZED_NAME_PRICE_RANGE)
  private GoogleCloudRecommendationengineV1beta1ProductCatalogItemPriceRange priceRange;

  /**
   * Optional. Online stock state of the catalog item. Default is &#x60;IN_STOCK&#x60;.
   */
  @JsonAdapter(StockStateEnum.Adapter.class)
  public enum StockStateEnum {
    STOCK_STATE_UNSPECIFIED("STOCK_STATE_UNSPECIFIED"),
    
    IN_STOCK("IN_STOCK"),
    
    OUT_OF_STOCK("OUT_OF_STOCK"),
    
    PREORDER("PREORDER"),
    
    BACKORDER("BACKORDER");

    private String value;

    StockStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StockStateEnum fromValue(String value) {
      for (StockStateEnum b : StockStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StockStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StockStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StockStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StockStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StockStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STOCK_STATE = "stockState";
  @SerializedName(SERIALIZED_NAME_STOCK_STATE)
  private StockStateEnum stockState;

  public GoogleCloudRecommendationengineV1beta1ProductCatalogItem() {
  }

  public GoogleCloudRecommendationengineV1beta1ProductCatalogItem availableQuantity(String availableQuantity) {
    this.availableQuantity = availableQuantity;
    return this;
  }

  /**
   * Optional. The available quantity of the item.
   * @return availableQuantity
   */
  @javax.annotation.Nullable
  public String getAvailableQuantity() {
    return availableQuantity;
  }

  public void setAvailableQuantity(String availableQuantity) {
    this.availableQuantity = availableQuantity;
  }


  public GoogleCloudRecommendationengineV1beta1ProductCatalogItem canonicalProductUri(String canonicalProductUri) {
    this.canonicalProductUri = canonicalProductUri;
    return this;
  }

  /**
   * Optional. Canonical URL directly linking to the item detail page with a length limit of 5 KiB..
   * @return canonicalProductUri
   */
  @javax.annotation.Nullable
  public String getCanonicalProductUri() {
    return canonicalProductUri;
  }

  public void setCanonicalProductUri(String canonicalProductUri) {
    this.canonicalProductUri = canonicalProductUri;
  }


  public GoogleCloudRecommendationengineV1beta1ProductCatalogItem costs(Map<String, Float> costs) {
    this.costs = costs;
    return this;
  }

  public GoogleCloudRecommendationengineV1beta1ProductCatalogItem putCostsItem(String key, Float costsItem) {
    if (this.costs == null) {
      this.costs = new HashMap<>();
    }
    this.costs.put(key, costsItem);
    return this;
  }

  /**
   * Optional. A map to pass the costs associated with the product. For example: {\&quot;manufacturing\&quot;: 45.5} The profit of selling this item is computed like so: * If &#39;exactPrice&#39; is provided, profit &#x3D; displayPrice - sum(costs) * If &#39;priceRange&#39; is provided, profit &#x3D; minPrice - sum(costs)
   * @return costs
   */
  @javax.annotation.Nullable
  public Map<String, Float> getCosts() {
    return costs;
  }

  public void setCosts(Map<String, Float> costs) {
    this.costs = costs;
  }


  public GoogleCloudRecommendationengineV1beta1ProductCatalogItem currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Optional. Only required if the price is set. Currency code for price/costs. Use three-character ISO-4217 code.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public GoogleCloudRecommendationengineV1beta1ProductCatalogItem exactPrice(GoogleCloudRecommendationengineV1beta1ProductCatalogItemExactPrice exactPrice) {
    this.exactPrice = exactPrice;
    return this;
  }

  /**
   * Get exactPrice
   * @return exactPrice
   */
  @javax.annotation.Nullable
  public GoogleCloudRecommendationengineV1beta1ProductCatalogItemExactPrice getExactPrice() {
    return exactPrice;
  }

  public void setExactPrice(GoogleCloudRecommendationengineV1beta1ProductCatalogItemExactPrice exactPrice) {
    this.exactPrice = exactPrice;
  }


  public GoogleCloudRecommendationengineV1beta1ProductCatalogItem images(List<GoogleCloudRecommendationengineV1beta1Image> images) {
    this.images = images;
    return this;
  }

  public GoogleCloudRecommendationengineV1beta1ProductCatalogItem addImagesItem(GoogleCloudRecommendationengineV1beta1Image imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * Optional. Product images for the catalog item.
   * @return images
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRecommendationengineV1beta1Image> getImages() {
    return images;
  }

  public void setImages(List<GoogleCloudRecommendationengineV1beta1Image> images) {
    this.images = images;
  }


  public GoogleCloudRecommendationengineV1beta1ProductCatalogItem priceRange(GoogleCloudRecommendationengineV1beta1ProductCatalogItemPriceRange priceRange) {
    this.priceRange = priceRange;
    return this;
  }

  /**
   * Get priceRange
   * @return priceRange
   */
  @javax.annotation.Nullable
  public GoogleCloudRecommendationengineV1beta1ProductCatalogItemPriceRange getPriceRange() {
    return priceRange;
  }

  public void setPriceRange(GoogleCloudRecommendationengineV1beta1ProductCatalogItemPriceRange priceRange) {
    this.priceRange = priceRange;
  }


  public GoogleCloudRecommendationengineV1beta1ProductCatalogItem stockState(StockStateEnum stockState) {
    this.stockState = stockState;
    return this;
  }

  /**
   * Optional. Online stock state of the catalog item. Default is &#x60;IN_STOCK&#x60;.
   * @return stockState
   */
  @javax.annotation.Nullable
  public StockStateEnum getStockState() {
    return stockState;
  }

  public void setStockState(StockStateEnum stockState) {
    this.stockState = stockState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRecommendationengineV1beta1ProductCatalogItem googleCloudRecommendationengineV1beta1ProductCatalogItem = (GoogleCloudRecommendationengineV1beta1ProductCatalogItem) o;
    return Objects.equals(this.availableQuantity, googleCloudRecommendationengineV1beta1ProductCatalogItem.availableQuantity) &&
        Objects.equals(this.canonicalProductUri, googleCloudRecommendationengineV1beta1ProductCatalogItem.canonicalProductUri) &&
        Objects.equals(this.costs, googleCloudRecommendationengineV1beta1ProductCatalogItem.costs) &&
        Objects.equals(this.currencyCode, googleCloudRecommendationengineV1beta1ProductCatalogItem.currencyCode) &&
        Objects.equals(this.exactPrice, googleCloudRecommendationengineV1beta1ProductCatalogItem.exactPrice) &&
        Objects.equals(this.images, googleCloudRecommendationengineV1beta1ProductCatalogItem.images) &&
        Objects.equals(this.priceRange, googleCloudRecommendationengineV1beta1ProductCatalogItem.priceRange) &&
        Objects.equals(this.stockState, googleCloudRecommendationengineV1beta1ProductCatalogItem.stockState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableQuantity, canonicalProductUri, costs, currencyCode, exactPrice, images, priceRange, stockState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRecommendationengineV1beta1ProductCatalogItem {\n");
    sb.append("    availableQuantity: ").append(toIndentedString(availableQuantity)).append("\n");
    sb.append("    canonicalProductUri: ").append(toIndentedString(canonicalProductUri)).append("\n");
    sb.append("    costs: ").append(toIndentedString(costs)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    exactPrice: ").append(toIndentedString(exactPrice)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    priceRange: ").append(toIndentedString(priceRange)).append("\n");
    sb.append("    stockState: ").append(toIndentedString(stockState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableQuantity");
    openapiFields.add("canonicalProductUri");
    openapiFields.add("costs");
    openapiFields.add("currencyCode");
    openapiFields.add("exactPrice");
    openapiFields.add("images");
    openapiFields.add("priceRange");
    openapiFields.add("stockState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRecommendationengineV1beta1ProductCatalogItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRecommendationengineV1beta1ProductCatalogItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRecommendationengineV1beta1ProductCatalogItem is not found in the empty JSON string", GoogleCloudRecommendationengineV1beta1ProductCatalogItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRecommendationengineV1beta1ProductCatalogItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRecommendationengineV1beta1ProductCatalogItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("availableQuantity") != null && !jsonObj.get("availableQuantity").isJsonNull()) && !jsonObj.get("availableQuantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableQuantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availableQuantity").toString()));
      }
      if ((jsonObj.get("canonicalProductUri") != null && !jsonObj.get("canonicalProductUri").isJsonNull()) && !jsonObj.get("canonicalProductUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canonicalProductUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canonicalProductUri").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      // validate the optional field `exactPrice`
      if (jsonObj.get("exactPrice") != null && !jsonObj.get("exactPrice").isJsonNull()) {
        GoogleCloudRecommendationengineV1beta1ProductCatalogItemExactPrice.validateJsonElement(jsonObj.get("exactPrice"));
      }
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
        if (jsonArrayimages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
          }

          // validate the optional field `images` (array)
          for (int i = 0; i < jsonArrayimages.size(); i++) {
            GoogleCloudRecommendationengineV1beta1Image.validateJsonElement(jsonArrayimages.get(i));
          };
        }
      }
      // validate the optional field `priceRange`
      if (jsonObj.get("priceRange") != null && !jsonObj.get("priceRange").isJsonNull()) {
        GoogleCloudRecommendationengineV1beta1ProductCatalogItemPriceRange.validateJsonElement(jsonObj.get("priceRange"));
      }
      if ((jsonObj.get("stockState") != null && !jsonObj.get("stockState").isJsonNull()) && !jsonObj.get("stockState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stockState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stockState").toString()));
      }
      // validate the optional field `stockState`
      if (jsonObj.get("stockState") != null && !jsonObj.get("stockState").isJsonNull()) {
        StockStateEnum.validateJsonElement(jsonObj.get("stockState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRecommendationengineV1beta1ProductCatalogItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRecommendationengineV1beta1ProductCatalogItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRecommendationengineV1beta1ProductCatalogItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRecommendationengineV1beta1ProductCatalogItem.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRecommendationengineV1beta1ProductCatalogItem>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRecommendationengineV1beta1ProductCatalogItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRecommendationengineV1beta1ProductCatalogItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRecommendationengineV1beta1ProductCatalogItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRecommendationengineV1beta1ProductCatalogItem
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRecommendationengineV1beta1ProductCatalogItem
   */
  public static GoogleCloudRecommendationengineV1beta1ProductCatalogItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRecommendationengineV1beta1ProductCatalogItem.class);
  }

  /**
   * Convert an instance of GoogleCloudRecommendationengineV1beta1ProductCatalogItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

