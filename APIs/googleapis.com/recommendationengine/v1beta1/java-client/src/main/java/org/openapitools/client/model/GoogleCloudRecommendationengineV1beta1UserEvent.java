/*
 * Recommendations AI (Beta)
 * Note that we now highly recommend new customers to use Retail API, which incorporates the GA version of the Recommendations AI funtionalities. To enable Retail API, please visit https://console.cloud.google.com/apis/library/retail.googleapis.com. The Recommendations AI service enables customers to build end-to-end personalized recommendation systems without requiring a high level of expertise in machine learning, recommendation system, or Google Cloud.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudRecommendationengineV1beta1EventDetail;
import org.openapitools.client.model.GoogleCloudRecommendationengineV1beta1ProductEventDetail;
import org.openapitools.client.model.GoogleCloudRecommendationengineV1beta1UserInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserEvent captures all metadata information recommendation engine needs to know about how end users interact with customers&#39; website.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:25.887548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRecommendationengineV1beta1UserEvent {
  public static final String SERIALIZED_NAME_EVENT_DETAIL = "eventDetail";
  @SerializedName(SERIALIZED_NAME_EVENT_DETAIL)
  private GoogleCloudRecommendationengineV1beta1EventDetail eventDetail;

  /**
   * Optional. This field should *not* be set when using JavaScript pixel or the Recommendations AI Tag. Defaults to &#x60;EVENT_SOURCE_UNSPECIFIED&#x60;.
   */
  @JsonAdapter(EventSourceEnum.Adapter.class)
  public enum EventSourceEnum {
    EVENT_SOURCE_UNSPECIFIED("EVENT_SOURCE_UNSPECIFIED"),
    
    AUTOML("AUTOML"),
    
    ECOMMERCE("ECOMMERCE"),
    
    BATCH_UPLOAD("BATCH_UPLOAD");

    private String value;

    EventSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventSourceEnum fromValue(String value) {
      for (EventSourceEnum b : EventSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT_SOURCE = "eventSource";
  @SerializedName(SERIALIZED_NAME_EVENT_SOURCE)
  private EventSourceEnum eventSource;

  public static final String SERIALIZED_NAME_EVENT_TIME = "eventTime";
  @SerializedName(SERIALIZED_NAME_EVENT_TIME)
  private String eventTime;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_PRODUCT_EVENT_DETAIL = "productEventDetail";
  @SerializedName(SERIALIZED_NAME_PRODUCT_EVENT_DETAIL)
  private GoogleCloudRecommendationengineV1beta1ProductEventDetail productEventDetail;

  public static final String SERIALIZED_NAME_USER_INFO = "userInfo";
  @SerializedName(SERIALIZED_NAME_USER_INFO)
  private GoogleCloudRecommendationengineV1beta1UserInfo userInfo;

  public GoogleCloudRecommendationengineV1beta1UserEvent() {
  }

  public GoogleCloudRecommendationengineV1beta1UserEvent eventDetail(GoogleCloudRecommendationengineV1beta1EventDetail eventDetail) {
    this.eventDetail = eventDetail;
    return this;
  }

  /**
   * Get eventDetail
   * @return eventDetail
   */
  @javax.annotation.Nullable
  public GoogleCloudRecommendationengineV1beta1EventDetail getEventDetail() {
    return eventDetail;
  }

  public void setEventDetail(GoogleCloudRecommendationengineV1beta1EventDetail eventDetail) {
    this.eventDetail = eventDetail;
  }


  public GoogleCloudRecommendationengineV1beta1UserEvent eventSource(EventSourceEnum eventSource) {
    this.eventSource = eventSource;
    return this;
  }

  /**
   * Optional. This field should *not* be set when using JavaScript pixel or the Recommendations AI Tag. Defaults to &#x60;EVENT_SOURCE_UNSPECIFIED&#x60;.
   * @return eventSource
   */
  @javax.annotation.Nullable
  public EventSourceEnum getEventSource() {
    return eventSource;
  }

  public void setEventSource(EventSourceEnum eventSource) {
    this.eventSource = eventSource;
  }


  public GoogleCloudRecommendationengineV1beta1UserEvent eventTime(String eventTime) {
    this.eventTime = eventTime;
    return this;
  }

  /**
   * Optional. Only required for ImportUserEvents method. Timestamp of user event created.
   * @return eventTime
   */
  @javax.annotation.Nullable
  public String getEventTime() {
    return eventTime;
  }

  public void setEventTime(String eventTime) {
    this.eventTime = eventTime;
  }


  public GoogleCloudRecommendationengineV1beta1UserEvent eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Required. User event type. Allowed values are: * &#x60;add-to-cart&#x60; Products being added to cart. * &#x60;add-to-list&#x60; Items being added to a list (shopping list, favorites etc). * &#x60;category-page-view&#x60; Special pages such as sale or promotion pages viewed. * &#x60;checkout-start&#x60; User starting a checkout process. * &#x60;detail-page-view&#x60; Products detail page viewed. * &#x60;home-page-view&#x60; Homepage viewed. * &#x60;page-visit&#x60; Generic page visits not included in the event types above. * &#x60;purchase-complete&#x60; User finishing a purchase. * &#x60;refund&#x60; Purchased items being refunded or returned. * &#x60;remove-from-cart&#x60; Products being removed from cart. * &#x60;remove-from-list&#x60; Items being removed from a list. * &#x60;search&#x60; Product search. * &#x60;shopping-cart-page-view&#x60; User viewing a shopping cart. * &#x60;impression&#x60; List of items displayed. Used by Google Tag Manager.
   * @return eventType
   */
  @javax.annotation.Nullable
  public String getEventType() {
    return eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public GoogleCloudRecommendationengineV1beta1UserEvent productEventDetail(GoogleCloudRecommendationengineV1beta1ProductEventDetail productEventDetail) {
    this.productEventDetail = productEventDetail;
    return this;
  }

  /**
   * Get productEventDetail
   * @return productEventDetail
   */
  @javax.annotation.Nullable
  public GoogleCloudRecommendationengineV1beta1ProductEventDetail getProductEventDetail() {
    return productEventDetail;
  }

  public void setProductEventDetail(GoogleCloudRecommendationengineV1beta1ProductEventDetail productEventDetail) {
    this.productEventDetail = productEventDetail;
  }


  public GoogleCloudRecommendationengineV1beta1UserEvent userInfo(GoogleCloudRecommendationengineV1beta1UserInfo userInfo) {
    this.userInfo = userInfo;
    return this;
  }

  /**
   * Get userInfo
   * @return userInfo
   */
  @javax.annotation.Nullable
  public GoogleCloudRecommendationengineV1beta1UserInfo getUserInfo() {
    return userInfo;
  }

  public void setUserInfo(GoogleCloudRecommendationengineV1beta1UserInfo userInfo) {
    this.userInfo = userInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRecommendationengineV1beta1UserEvent googleCloudRecommendationengineV1beta1UserEvent = (GoogleCloudRecommendationengineV1beta1UserEvent) o;
    return Objects.equals(this.eventDetail, googleCloudRecommendationengineV1beta1UserEvent.eventDetail) &&
        Objects.equals(this.eventSource, googleCloudRecommendationengineV1beta1UserEvent.eventSource) &&
        Objects.equals(this.eventTime, googleCloudRecommendationengineV1beta1UserEvent.eventTime) &&
        Objects.equals(this.eventType, googleCloudRecommendationengineV1beta1UserEvent.eventType) &&
        Objects.equals(this.productEventDetail, googleCloudRecommendationengineV1beta1UserEvent.productEventDetail) &&
        Objects.equals(this.userInfo, googleCloudRecommendationengineV1beta1UserEvent.userInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventDetail, eventSource, eventTime, eventType, productEventDetail, userInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRecommendationengineV1beta1UserEvent {\n");
    sb.append("    eventDetail: ").append(toIndentedString(eventDetail)).append("\n");
    sb.append("    eventSource: ").append(toIndentedString(eventSource)).append("\n");
    sb.append("    eventTime: ").append(toIndentedString(eventTime)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    productEventDetail: ").append(toIndentedString(productEventDetail)).append("\n");
    sb.append("    userInfo: ").append(toIndentedString(userInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventDetail");
    openapiFields.add("eventSource");
    openapiFields.add("eventTime");
    openapiFields.add("eventType");
    openapiFields.add("productEventDetail");
    openapiFields.add("userInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRecommendationengineV1beta1UserEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRecommendationengineV1beta1UserEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRecommendationengineV1beta1UserEvent is not found in the empty JSON string", GoogleCloudRecommendationengineV1beta1UserEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRecommendationengineV1beta1UserEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRecommendationengineV1beta1UserEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `eventDetail`
      if (jsonObj.get("eventDetail") != null && !jsonObj.get("eventDetail").isJsonNull()) {
        GoogleCloudRecommendationengineV1beta1EventDetail.validateJsonElement(jsonObj.get("eventDetail"));
      }
      if ((jsonObj.get("eventSource") != null && !jsonObj.get("eventSource").isJsonNull()) && !jsonObj.get("eventSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventSource").toString()));
      }
      // validate the optional field `eventSource`
      if (jsonObj.get("eventSource") != null && !jsonObj.get("eventSource").isJsonNull()) {
        EventSourceEnum.validateJsonElement(jsonObj.get("eventSource"));
      }
      if ((jsonObj.get("eventTime") != null && !jsonObj.get("eventTime").isJsonNull()) && !jsonObj.get("eventTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventTime").toString()));
      }
      if ((jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) && !jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      // validate the optional field `productEventDetail`
      if (jsonObj.get("productEventDetail") != null && !jsonObj.get("productEventDetail").isJsonNull()) {
        GoogleCloudRecommendationengineV1beta1ProductEventDetail.validateJsonElement(jsonObj.get("productEventDetail"));
      }
      // validate the optional field `userInfo`
      if (jsonObj.get("userInfo") != null && !jsonObj.get("userInfo").isJsonNull()) {
        GoogleCloudRecommendationengineV1beta1UserInfo.validateJsonElement(jsonObj.get("userInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRecommendationengineV1beta1UserEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRecommendationengineV1beta1UserEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRecommendationengineV1beta1UserEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRecommendationengineV1beta1UserEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRecommendationengineV1beta1UserEvent>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRecommendationengineV1beta1UserEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRecommendationengineV1beta1UserEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRecommendationengineV1beta1UserEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRecommendationengineV1beta1UserEvent
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRecommendationengineV1beta1UserEvent
   */
  public static GoogleCloudRecommendationengineV1beta1UserEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRecommendationengineV1beta1UserEvent.class);
  }

  /**
   * Convert an instance of GoogleCloudRecommendationengineV1beta1UserEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

