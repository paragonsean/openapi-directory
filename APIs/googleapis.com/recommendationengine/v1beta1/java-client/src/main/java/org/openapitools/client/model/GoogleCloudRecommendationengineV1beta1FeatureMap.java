/*
 * Recommendations AI (Beta)
 * Note that we now highly recommend new customers to use Retail API, which incorporates the GA version of the Recommendations AI funtionalities. To enable Retail API, please visit https://console.cloud.google.com/apis/library/retail.googleapis.com. The Recommendations AI service enables customers to build end-to-end personalized recommendation systems without requiring a high level of expertise in machine learning, recommendation system, or Google Cloud.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudRecommendationengineV1beta1FeatureMapFloatList;
import org.openapitools.client.model.GoogleCloudRecommendationengineV1beta1FeatureMapStringList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FeatureMap represents extra features that customers want to include in the recommendation model for catalogs/user events as categorical/numerical features.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:25.887548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRecommendationengineV1beta1FeatureMap {
  public static final String SERIALIZED_NAME_CATEGORICAL_FEATURES = "categoricalFeatures";
  @SerializedName(SERIALIZED_NAME_CATEGORICAL_FEATURES)
  private Map<String, GoogleCloudRecommendationengineV1beta1FeatureMapStringList> categoricalFeatures = new HashMap<>();

  public static final String SERIALIZED_NAME_NUMERICAL_FEATURES = "numericalFeatures";
  @SerializedName(SERIALIZED_NAME_NUMERICAL_FEATURES)
  private Map<String, GoogleCloudRecommendationengineV1beta1FeatureMapFloatList> numericalFeatures = new HashMap<>();

  public GoogleCloudRecommendationengineV1beta1FeatureMap() {
  }

  public GoogleCloudRecommendationengineV1beta1FeatureMap categoricalFeatures(Map<String, GoogleCloudRecommendationengineV1beta1FeatureMapStringList> categoricalFeatures) {
    this.categoricalFeatures = categoricalFeatures;
    return this;
  }

  public GoogleCloudRecommendationengineV1beta1FeatureMap putCategoricalFeaturesItem(String key, GoogleCloudRecommendationengineV1beta1FeatureMapStringList categoricalFeaturesItem) {
    if (this.categoricalFeatures == null) {
      this.categoricalFeatures = new HashMap<>();
    }
    this.categoricalFeatures.put(key, categoricalFeaturesItem);
    return this;
  }

  /**
   * Categorical features that can take on one of a limited number of possible values. Some examples would be the brand/maker of a product, or country of a customer. Feature names and values must be UTF-8 encoded strings. For example: &#x60;{ \&quot;colors\&quot;: {\&quot;value\&quot;: [\&quot;yellow\&quot;, \&quot;green\&quot;]}, \&quot;sizes\&quot;: {\&quot;value\&quot;:[\&quot;S\&quot;, \&quot;M\&quot;]}&#x60;
   * @return categoricalFeatures
   */
  @javax.annotation.Nullable
  public Map<String, GoogleCloudRecommendationengineV1beta1FeatureMapStringList> getCategoricalFeatures() {
    return categoricalFeatures;
  }

  public void setCategoricalFeatures(Map<String, GoogleCloudRecommendationengineV1beta1FeatureMapStringList> categoricalFeatures) {
    this.categoricalFeatures = categoricalFeatures;
  }


  public GoogleCloudRecommendationengineV1beta1FeatureMap numericalFeatures(Map<String, GoogleCloudRecommendationengineV1beta1FeatureMapFloatList> numericalFeatures) {
    this.numericalFeatures = numericalFeatures;
    return this;
  }

  public GoogleCloudRecommendationengineV1beta1FeatureMap putNumericalFeaturesItem(String key, GoogleCloudRecommendationengineV1beta1FeatureMapFloatList numericalFeaturesItem) {
    if (this.numericalFeatures == null) {
      this.numericalFeatures = new HashMap<>();
    }
    this.numericalFeatures.put(key, numericalFeaturesItem);
    return this;
  }

  /**
   * Numerical features. Some examples would be the height/weight of a product, or age of a customer. Feature names must be UTF-8 encoded strings. For example: &#x60;{ \&quot;lengths_cm\&quot;: {\&quot;value\&quot;:[2.3, 15.4]}, \&quot;heights_cm\&quot;: {\&quot;value\&quot;:[8.1, 6.4]} }&#x60;
   * @return numericalFeatures
   */
  @javax.annotation.Nullable
  public Map<String, GoogleCloudRecommendationengineV1beta1FeatureMapFloatList> getNumericalFeatures() {
    return numericalFeatures;
  }

  public void setNumericalFeatures(Map<String, GoogleCloudRecommendationengineV1beta1FeatureMapFloatList> numericalFeatures) {
    this.numericalFeatures = numericalFeatures;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRecommendationengineV1beta1FeatureMap googleCloudRecommendationengineV1beta1FeatureMap = (GoogleCloudRecommendationengineV1beta1FeatureMap) o;
    return Objects.equals(this.categoricalFeatures, googleCloudRecommendationengineV1beta1FeatureMap.categoricalFeatures) &&
        Objects.equals(this.numericalFeatures, googleCloudRecommendationengineV1beta1FeatureMap.numericalFeatures);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoricalFeatures, numericalFeatures);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRecommendationengineV1beta1FeatureMap {\n");
    sb.append("    categoricalFeatures: ").append(toIndentedString(categoricalFeatures)).append("\n");
    sb.append("    numericalFeatures: ").append(toIndentedString(numericalFeatures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoricalFeatures");
    openapiFields.add("numericalFeatures");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRecommendationengineV1beta1FeatureMap
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRecommendationengineV1beta1FeatureMap.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRecommendationengineV1beta1FeatureMap is not found in the empty JSON string", GoogleCloudRecommendationengineV1beta1FeatureMap.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRecommendationengineV1beta1FeatureMap.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRecommendationengineV1beta1FeatureMap` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRecommendationengineV1beta1FeatureMap.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRecommendationengineV1beta1FeatureMap' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRecommendationengineV1beta1FeatureMap> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRecommendationengineV1beta1FeatureMap.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRecommendationengineV1beta1FeatureMap>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRecommendationengineV1beta1FeatureMap value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRecommendationengineV1beta1FeatureMap read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRecommendationengineV1beta1FeatureMap given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRecommendationengineV1beta1FeatureMap
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRecommendationengineV1beta1FeatureMap
   */
  public static GoogleCloudRecommendationengineV1beta1FeatureMap fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRecommendationengineV1beta1FeatureMap.class);
  }

  /**
   * Convert an instance of GoogleCloudRecommendationengineV1beta1FeatureMap to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

