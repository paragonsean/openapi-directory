/*
 * Recommendations AI (Beta)
 * Note that we now highly recommend new customers to use Retail API, which incorporates the GA version of the Recommendations AI funtionalities. To enable Retail API, please visit https://console.cloud.google.com/apis/library/retail.googleapis.com. The Recommendations AI service enables customers to build end-to-end personalized recommendation systems without requiring a high level of expertise in machine learning, recommendation system, or Google Cloud.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A transaction represents the entire purchase transaction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:25.887548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRecommendationengineV1beta1PurchaseTransaction {
  public static final String SERIALIZED_NAME_COSTS = "costs";
  @SerializedName(SERIALIZED_NAME_COSTS)
  private Map<String, Float> costs = new HashMap<>();

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REVENUE = "revenue";
  @SerializedName(SERIALIZED_NAME_REVENUE)
  private Float revenue;

  public static final String SERIALIZED_NAME_TAXES = "taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  private Map<String, Float> taxes = new HashMap<>();

  public GoogleCloudRecommendationengineV1beta1PurchaseTransaction() {
  }

  public GoogleCloudRecommendationengineV1beta1PurchaseTransaction costs(Map<String, Float> costs) {
    this.costs = costs;
    return this;
  }

  public GoogleCloudRecommendationengineV1beta1PurchaseTransaction putCostsItem(String key, Float costsItem) {
    if (this.costs == null) {
      this.costs = new HashMap<>();
    }
    this.costs.put(key, costsItem);
    return this;
  }

  /**
   * Optional. All the costs associated with the product. These can be manufacturing costs, shipping expenses not borne by the end user, or any other costs. Total product cost such that profit &#x3D; revenue - (sum(taxes) + sum(costs)) If product_cost is not set, then profit &#x3D; revenue - tax - shipping - sum(CatalogItem.costs). If CatalogItem.cost is not specified for one of the items, CatalogItem.cost based profit *cannot* be calculated for this Transaction.
   * @return costs
   */
  @javax.annotation.Nullable
  public Map<String, Float> getCosts() {
    return costs;
  }

  public void setCosts(Map<String, Float> costs) {
    this.costs = costs;
  }


  public GoogleCloudRecommendationengineV1beta1PurchaseTransaction currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Required. Currency code. Use three-character ISO-4217 code. This field is not required if the event type is &#x60;refund&#x60;.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public GoogleCloudRecommendationengineV1beta1PurchaseTransaction id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Optional. The transaction ID with a length limit of 128 bytes.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GoogleCloudRecommendationengineV1beta1PurchaseTransaction revenue(Float revenue) {
    this.revenue = revenue;
    return this;
  }

  /**
   * Required. Total revenue or grand total associated with the transaction. This value include shipping, tax, or other adjustments to total revenue that you want to include as part of your revenue calculations. This field is not required if the event type is &#x60;refund&#x60;.
   * @return revenue
   */
  @javax.annotation.Nullable
  public Float getRevenue() {
    return revenue;
  }

  public void setRevenue(Float revenue) {
    this.revenue = revenue;
  }


  public GoogleCloudRecommendationengineV1beta1PurchaseTransaction taxes(Map<String, Float> taxes) {
    this.taxes = taxes;
    return this;
  }

  public GoogleCloudRecommendationengineV1beta1PurchaseTransaction putTaxesItem(String key, Float taxesItem) {
    if (this.taxes == null) {
      this.taxes = new HashMap<>();
    }
    this.taxes.put(key, taxesItem);
    return this;
  }

  /**
   * Optional. All the taxes associated with the transaction.
   * @return taxes
   */
  @javax.annotation.Nullable
  public Map<String, Float> getTaxes() {
    return taxes;
  }

  public void setTaxes(Map<String, Float> taxes) {
    this.taxes = taxes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRecommendationengineV1beta1PurchaseTransaction googleCloudRecommendationengineV1beta1PurchaseTransaction = (GoogleCloudRecommendationengineV1beta1PurchaseTransaction) o;
    return Objects.equals(this.costs, googleCloudRecommendationengineV1beta1PurchaseTransaction.costs) &&
        Objects.equals(this.currencyCode, googleCloudRecommendationengineV1beta1PurchaseTransaction.currencyCode) &&
        Objects.equals(this.id, googleCloudRecommendationengineV1beta1PurchaseTransaction.id) &&
        Objects.equals(this.revenue, googleCloudRecommendationengineV1beta1PurchaseTransaction.revenue) &&
        Objects.equals(this.taxes, googleCloudRecommendationengineV1beta1PurchaseTransaction.taxes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(costs, currencyCode, id, revenue, taxes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRecommendationengineV1beta1PurchaseTransaction {\n");
    sb.append("    costs: ").append(toIndentedString(costs)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    revenue: ").append(toIndentedString(revenue)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("costs");
    openapiFields.add("currencyCode");
    openapiFields.add("id");
    openapiFields.add("revenue");
    openapiFields.add("taxes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRecommendationengineV1beta1PurchaseTransaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRecommendationengineV1beta1PurchaseTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRecommendationengineV1beta1PurchaseTransaction is not found in the empty JSON string", GoogleCloudRecommendationengineV1beta1PurchaseTransaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRecommendationengineV1beta1PurchaseTransaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRecommendationengineV1beta1PurchaseTransaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRecommendationengineV1beta1PurchaseTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRecommendationengineV1beta1PurchaseTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRecommendationengineV1beta1PurchaseTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRecommendationengineV1beta1PurchaseTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRecommendationengineV1beta1PurchaseTransaction>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRecommendationengineV1beta1PurchaseTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRecommendationengineV1beta1PurchaseTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRecommendationengineV1beta1PurchaseTransaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRecommendationengineV1beta1PurchaseTransaction
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRecommendationengineV1beta1PurchaseTransaction
   */
  public static GoogleCloudRecommendationengineV1beta1PurchaseTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRecommendationengineV1beta1PurchaseTransaction.class);
  }

  /**
   * Convert an instance of GoogleCloudRecommendationengineV1beta1PurchaseTransaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

