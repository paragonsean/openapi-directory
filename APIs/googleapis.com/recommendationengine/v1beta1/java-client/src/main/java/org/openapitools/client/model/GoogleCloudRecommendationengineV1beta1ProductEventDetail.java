/*
 * Recommendations AI (Beta)
 * Note that we now highly recommend new customers to use Retail API, which incorporates the GA version of the Recommendations AI funtionalities. To enable Retail API, please visit https://console.cloud.google.com/apis/library/retail.googleapis.com. The Recommendations AI service enables customers to build end-to-end personalized recommendation systems without requiring a high level of expertise in machine learning, recommendation system, or Google Cloud.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy;
import org.openapitools.client.model.GoogleCloudRecommendationengineV1beta1ProductDetail;
import org.openapitools.client.model.GoogleCloudRecommendationengineV1beta1PurchaseTransaction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProductEventDetail captures user event information specific to retail products.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:25.887548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRecommendationengineV1beta1ProductEventDetail {
  public static final String SERIALIZED_NAME_CART_ID = "cartId";
  @SerializedName(SERIALIZED_NAME_CART_ID)
  private String cartId;

  public static final String SERIALIZED_NAME_LIST_ID = "listId";
  @SerializedName(SERIALIZED_NAME_LIST_ID)
  private String listId;

  public static final String SERIALIZED_NAME_PAGE_CATEGORIES = "pageCategories";
  @SerializedName(SERIALIZED_NAME_PAGE_CATEGORIES)
  private List<GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy> pageCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCT_DETAILS = "productDetails";
  @SerializedName(SERIALIZED_NAME_PRODUCT_DETAILS)
  private List<GoogleCloudRecommendationengineV1beta1ProductDetail> productDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_PURCHASE_TRANSACTION = "purchaseTransaction";
  @SerializedName(SERIALIZED_NAME_PURCHASE_TRANSACTION)
  private GoogleCloudRecommendationengineV1beta1PurchaseTransaction purchaseTransaction;

  public static final String SERIALIZED_NAME_SEARCH_QUERY = "searchQuery";
  @SerializedName(SERIALIZED_NAME_SEARCH_QUERY)
  private String searchQuery;

  public GoogleCloudRecommendationengineV1beta1ProductEventDetail() {
  }

  public GoogleCloudRecommendationengineV1beta1ProductEventDetail cartId(String cartId) {
    this.cartId = cartId;
    return this;
  }

  /**
   * Optional. The id or name of the associated shopping cart. This id is used to associate multiple items added or present in the cart before purchase. This can only be set for &#x60;add-to-cart&#x60;, &#x60;remove-from-cart&#x60;, &#x60;checkout-start&#x60;, &#x60;purchase-complete&#x60;, or &#x60;shopping-cart-page-view&#x60; events.
   * @return cartId
   */
  @javax.annotation.Nullable
  public String getCartId() {
    return cartId;
  }

  public void setCartId(String cartId) {
    this.cartId = cartId;
  }


  public GoogleCloudRecommendationengineV1beta1ProductEventDetail listId(String listId) {
    this.listId = listId;
    return this;
  }

  /**
   * Required for &#x60;add-to-list&#x60; and &#x60;remove-from-list&#x60; events. The id or name of the list that the item is being added to or removed from. Other event types should not set this field.
   * @return listId
   */
  @javax.annotation.Nullable
  public String getListId() {
    return listId;
  }

  public void setListId(String listId) {
    this.listId = listId;
  }


  public GoogleCloudRecommendationengineV1beta1ProductEventDetail pageCategories(List<GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy> pageCategories) {
    this.pageCategories = pageCategories;
    return this;
  }

  public GoogleCloudRecommendationengineV1beta1ProductEventDetail addPageCategoriesItem(GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy pageCategoriesItem) {
    if (this.pageCategories == null) {
      this.pageCategories = new ArrayList<>();
    }
    this.pageCategories.add(pageCategoriesItem);
    return this;
  }

  /**
   * Required for &#x60;category-page-view&#x60; events. At least one of search_query or page_categories is required for &#x60;search&#x60; events. Other event types should not set this field. The categories associated with a category page. Category pages include special pages such as sales or promotions. For instance, a special sale page may have the category hierarchy: categories : [\&quot;Sales\&quot;, \&quot;2017 Black Friday Deals\&quot;].
   * @return pageCategories
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy> getPageCategories() {
    return pageCategories;
  }

  public void setPageCategories(List<GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy> pageCategories) {
    this.pageCategories = pageCategories;
  }


  public GoogleCloudRecommendationengineV1beta1ProductEventDetail productDetails(List<GoogleCloudRecommendationengineV1beta1ProductDetail> productDetails) {
    this.productDetails = productDetails;
    return this;
  }

  public GoogleCloudRecommendationengineV1beta1ProductEventDetail addProductDetailsItem(GoogleCloudRecommendationengineV1beta1ProductDetail productDetailsItem) {
    if (this.productDetails == null) {
      this.productDetails = new ArrayList<>();
    }
    this.productDetails.add(productDetailsItem);
    return this;
  }

  /**
   * The main product details related to the event. This field is required for the following event types: * &#x60;add-to-cart&#x60; * &#x60;add-to-list&#x60; * &#x60;checkout-start&#x60; * &#x60;detail-page-view&#x60; * &#x60;purchase-complete&#x60; * &#x60;refund&#x60; * &#x60;remove-from-cart&#x60; * &#x60;remove-from-list&#x60; This field is optional for the following event types: * &#x60;page-visit&#x60; * &#x60;shopping-cart-page-view&#x60; - note that &#39;product_details&#39; should be set for this unless the shopping cart is empty. * &#x60;search&#x60; (highly encouraged) In a &#x60;search&#x60; event, this field represents the products returned to the end user on the current page (the end user may have not finished broswing the whole page yet). When a new page is returned to the end user, after pagination/filtering/ordering even for the same query, a new SEARCH event with different product_details is desired. The end user may have not finished broswing the whole page yet. This field is not allowed for the following event types: * &#x60;category-page-view&#x60; * &#x60;home-page-view&#x60;
   * @return productDetails
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRecommendationengineV1beta1ProductDetail> getProductDetails() {
    return productDetails;
  }

  public void setProductDetails(List<GoogleCloudRecommendationengineV1beta1ProductDetail> productDetails) {
    this.productDetails = productDetails;
  }


  public GoogleCloudRecommendationengineV1beta1ProductEventDetail purchaseTransaction(GoogleCloudRecommendationengineV1beta1PurchaseTransaction purchaseTransaction) {
    this.purchaseTransaction = purchaseTransaction;
    return this;
  }

  /**
   * Get purchaseTransaction
   * @return purchaseTransaction
   */
  @javax.annotation.Nullable
  public GoogleCloudRecommendationengineV1beta1PurchaseTransaction getPurchaseTransaction() {
    return purchaseTransaction;
  }

  public void setPurchaseTransaction(GoogleCloudRecommendationengineV1beta1PurchaseTransaction purchaseTransaction) {
    this.purchaseTransaction = purchaseTransaction;
  }


  public GoogleCloudRecommendationengineV1beta1ProductEventDetail searchQuery(String searchQuery) {
    this.searchQuery = searchQuery;
    return this;
  }

  /**
   * At least one of search_query or page_categories is required for &#x60;search&#x60; events. Other event types should not set this field. The user&#39;s search query as UTF-8 encoded text with a length limit of 5 KiB.
   * @return searchQuery
   */
  @javax.annotation.Nullable
  public String getSearchQuery() {
    return searchQuery;
  }

  public void setSearchQuery(String searchQuery) {
    this.searchQuery = searchQuery;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRecommendationengineV1beta1ProductEventDetail googleCloudRecommendationengineV1beta1ProductEventDetail = (GoogleCloudRecommendationengineV1beta1ProductEventDetail) o;
    return Objects.equals(this.cartId, googleCloudRecommendationengineV1beta1ProductEventDetail.cartId) &&
        Objects.equals(this.listId, googleCloudRecommendationengineV1beta1ProductEventDetail.listId) &&
        Objects.equals(this.pageCategories, googleCloudRecommendationengineV1beta1ProductEventDetail.pageCategories) &&
        Objects.equals(this.productDetails, googleCloudRecommendationengineV1beta1ProductEventDetail.productDetails) &&
        Objects.equals(this.purchaseTransaction, googleCloudRecommendationengineV1beta1ProductEventDetail.purchaseTransaction) &&
        Objects.equals(this.searchQuery, googleCloudRecommendationengineV1beta1ProductEventDetail.searchQuery);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cartId, listId, pageCategories, productDetails, purchaseTransaction, searchQuery);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRecommendationengineV1beta1ProductEventDetail {\n");
    sb.append("    cartId: ").append(toIndentedString(cartId)).append("\n");
    sb.append("    listId: ").append(toIndentedString(listId)).append("\n");
    sb.append("    pageCategories: ").append(toIndentedString(pageCategories)).append("\n");
    sb.append("    productDetails: ").append(toIndentedString(productDetails)).append("\n");
    sb.append("    purchaseTransaction: ").append(toIndentedString(purchaseTransaction)).append("\n");
    sb.append("    searchQuery: ").append(toIndentedString(searchQuery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cartId");
    openapiFields.add("listId");
    openapiFields.add("pageCategories");
    openapiFields.add("productDetails");
    openapiFields.add("purchaseTransaction");
    openapiFields.add("searchQuery");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRecommendationengineV1beta1ProductEventDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRecommendationengineV1beta1ProductEventDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRecommendationengineV1beta1ProductEventDetail is not found in the empty JSON string", GoogleCloudRecommendationengineV1beta1ProductEventDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRecommendationengineV1beta1ProductEventDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRecommendationengineV1beta1ProductEventDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cartId") != null && !jsonObj.get("cartId").isJsonNull()) && !jsonObj.get("cartId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cartId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cartId").toString()));
      }
      if ((jsonObj.get("listId") != null && !jsonObj.get("listId").isJsonNull()) && !jsonObj.get("listId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listId").toString()));
      }
      if (jsonObj.get("pageCategories") != null && !jsonObj.get("pageCategories").isJsonNull()) {
        JsonArray jsonArraypageCategories = jsonObj.getAsJsonArray("pageCategories");
        if (jsonArraypageCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pageCategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pageCategories` to be an array in the JSON string but got `%s`", jsonObj.get("pageCategories").toString()));
          }

          // validate the optional field `pageCategories` (array)
          for (int i = 0; i < jsonArraypageCategories.size(); i++) {
            GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy.validateJsonElement(jsonArraypageCategories.get(i));
          };
        }
      }
      if (jsonObj.get("productDetails") != null && !jsonObj.get("productDetails").isJsonNull()) {
        JsonArray jsonArrayproductDetails = jsonObj.getAsJsonArray("productDetails");
        if (jsonArrayproductDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("productDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `productDetails` to be an array in the JSON string but got `%s`", jsonObj.get("productDetails").toString()));
          }

          // validate the optional field `productDetails` (array)
          for (int i = 0; i < jsonArrayproductDetails.size(); i++) {
            GoogleCloudRecommendationengineV1beta1ProductDetail.validateJsonElement(jsonArrayproductDetails.get(i));
          };
        }
      }
      // validate the optional field `purchaseTransaction`
      if (jsonObj.get("purchaseTransaction") != null && !jsonObj.get("purchaseTransaction").isJsonNull()) {
        GoogleCloudRecommendationengineV1beta1PurchaseTransaction.validateJsonElement(jsonObj.get("purchaseTransaction"));
      }
      if ((jsonObj.get("searchQuery") != null && !jsonObj.get("searchQuery").isJsonNull()) && !jsonObj.get("searchQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchQuery").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRecommendationengineV1beta1ProductEventDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRecommendationengineV1beta1ProductEventDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRecommendationengineV1beta1ProductEventDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRecommendationengineV1beta1ProductEventDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRecommendationengineV1beta1ProductEventDetail>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRecommendationengineV1beta1ProductEventDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRecommendationengineV1beta1ProductEventDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRecommendationengineV1beta1ProductEventDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRecommendationengineV1beta1ProductEventDetail
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRecommendationengineV1beta1ProductEventDetail
   */
  public static GoogleCloudRecommendationengineV1beta1ProductEventDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRecommendationengineV1beta1ProductEventDetail.class);
  }

  /**
   * Convert an instance of GoogleCloudRecommendationengineV1beta1ProductEventDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

