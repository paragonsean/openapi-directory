/*
 * Recommendations AI (Beta)
 * Note that we now highly recommend new customers to use Retail API, which incorporates the GA version of the Recommendations AI funtionalities. To enable Retail API, please visit https://console.cloud.google.com/apis/library/retail.googleapis.com. The Recommendations AI service enables customers to build end-to-end personalized recommendation systems without requiring a high level of expertise in machine learning, recommendation system, or Google Cloud.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudRecommendationengineV1beta1FeatureMap;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Detailed product information associated with a user event.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:25.887548-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRecommendationengineV1beta1ProductDetail {
  public static final String SERIALIZED_NAME_AVAILABLE_QUANTITY = "availableQuantity";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_QUANTITY)
  private Integer availableQuantity;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_DISPLAY_PRICE = "displayPrice";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PRICE)
  private Float displayPrice;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ITEM_ATTRIBUTES = "itemAttributes";
  @SerializedName(SERIALIZED_NAME_ITEM_ATTRIBUTES)
  private GoogleCloudRecommendationengineV1beta1FeatureMap itemAttributes;

  public static final String SERIALIZED_NAME_ORIGINAL_PRICE = "originalPrice";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_PRICE)
  private Float originalPrice;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  /**
   * Optional. Item stock state. If provided, this overrides the stock state in Catalog for items in this event.
   */
  @JsonAdapter(StockStateEnum.Adapter.class)
  public enum StockStateEnum {
    STOCK_STATE_UNSPECIFIED("STOCK_STATE_UNSPECIFIED"),
    
    IN_STOCK("IN_STOCK"),
    
    OUT_OF_STOCK("OUT_OF_STOCK"),
    
    PREORDER("PREORDER"),
    
    BACKORDER("BACKORDER");

    private String value;

    StockStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StockStateEnum fromValue(String value) {
      for (StockStateEnum b : StockStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StockStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StockStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StockStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StockStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StockStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STOCK_STATE = "stockState";
  @SerializedName(SERIALIZED_NAME_STOCK_STATE)
  private StockStateEnum stockState;

  public GoogleCloudRecommendationengineV1beta1ProductDetail() {
  }

  public GoogleCloudRecommendationengineV1beta1ProductDetail availableQuantity(Integer availableQuantity) {
    this.availableQuantity = availableQuantity;
    return this;
  }

  /**
   * Optional. Quantity of the products in stock when a user event happens. Optional. If provided, this overrides the available quantity in Catalog for this event. and can only be set if &#x60;stock_status&#x60; is set to &#x60;IN_STOCK&#x60;. Note that if an item is out of stock, you must set the &#x60;stock_state&#x60; field to be &#x60;OUT_OF_STOCK&#x60;. Leaving this field unspecified / as zero is not sufficient to mark the item out of stock.
   * @return availableQuantity
   */
  @javax.annotation.Nullable
  public Integer getAvailableQuantity() {
    return availableQuantity;
  }

  public void setAvailableQuantity(Integer availableQuantity) {
    this.availableQuantity = availableQuantity;
  }


  public GoogleCloudRecommendationengineV1beta1ProductDetail currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Optional. Currency code for price/costs. Use three-character ISO-4217 code. Required only if originalPrice or displayPrice is set.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public GoogleCloudRecommendationengineV1beta1ProductDetail displayPrice(Float displayPrice) {
    this.displayPrice = displayPrice;
    return this;
  }

  /**
   * Optional. Display price of the product (e.g. discounted price). If provided, this will override the display price in Catalog for this product.
   * @return displayPrice
   */
  @javax.annotation.Nullable
  public Float getDisplayPrice() {
    return displayPrice;
  }

  public void setDisplayPrice(Float displayPrice) {
    this.displayPrice = displayPrice;
  }


  public GoogleCloudRecommendationengineV1beta1ProductDetail id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Required. Catalog item ID. UTF-8 encoded string with a length limit of 128 characters.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GoogleCloudRecommendationengineV1beta1ProductDetail itemAttributes(GoogleCloudRecommendationengineV1beta1FeatureMap itemAttributes) {
    this.itemAttributes = itemAttributes;
    return this;
  }

  /**
   * Get itemAttributes
   * @return itemAttributes
   */
  @javax.annotation.Nullable
  public GoogleCloudRecommendationengineV1beta1FeatureMap getItemAttributes() {
    return itemAttributes;
  }

  public void setItemAttributes(GoogleCloudRecommendationengineV1beta1FeatureMap itemAttributes) {
    this.itemAttributes = itemAttributes;
  }


  public GoogleCloudRecommendationengineV1beta1ProductDetail originalPrice(Float originalPrice) {
    this.originalPrice = originalPrice;
    return this;
  }

  /**
   * Optional. Original price of the product. If provided, this will override the original price in Catalog for this product.
   * @return originalPrice
   */
  @javax.annotation.Nullable
  public Float getOriginalPrice() {
    return originalPrice;
  }

  public void setOriginalPrice(Float originalPrice) {
    this.originalPrice = originalPrice;
  }


  public GoogleCloudRecommendationengineV1beta1ProductDetail quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Optional. Quantity of the product associated with the user event. For example, this field will be 2 if two products are added to the shopping cart for &#x60;add-to-cart&#x60; event. Required for &#x60;add-to-cart&#x60;, &#x60;add-to-list&#x60;, &#x60;remove-from-cart&#x60;, &#x60;checkout-start&#x60;, &#x60;purchase-complete&#x60;, &#x60;refund&#x60; event types.
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public GoogleCloudRecommendationengineV1beta1ProductDetail stockState(StockStateEnum stockState) {
    this.stockState = stockState;
    return this;
  }

  /**
   * Optional. Item stock state. If provided, this overrides the stock state in Catalog for items in this event.
   * @return stockState
   */
  @javax.annotation.Nullable
  public StockStateEnum getStockState() {
    return stockState;
  }

  public void setStockState(StockStateEnum stockState) {
    this.stockState = stockState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRecommendationengineV1beta1ProductDetail googleCloudRecommendationengineV1beta1ProductDetail = (GoogleCloudRecommendationengineV1beta1ProductDetail) o;
    return Objects.equals(this.availableQuantity, googleCloudRecommendationengineV1beta1ProductDetail.availableQuantity) &&
        Objects.equals(this.currencyCode, googleCloudRecommendationengineV1beta1ProductDetail.currencyCode) &&
        Objects.equals(this.displayPrice, googleCloudRecommendationengineV1beta1ProductDetail.displayPrice) &&
        Objects.equals(this.id, googleCloudRecommendationengineV1beta1ProductDetail.id) &&
        Objects.equals(this.itemAttributes, googleCloudRecommendationengineV1beta1ProductDetail.itemAttributes) &&
        Objects.equals(this.originalPrice, googleCloudRecommendationengineV1beta1ProductDetail.originalPrice) &&
        Objects.equals(this.quantity, googleCloudRecommendationengineV1beta1ProductDetail.quantity) &&
        Objects.equals(this.stockState, googleCloudRecommendationengineV1beta1ProductDetail.stockState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableQuantity, currencyCode, displayPrice, id, itemAttributes, originalPrice, quantity, stockState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRecommendationengineV1beta1ProductDetail {\n");
    sb.append("    availableQuantity: ").append(toIndentedString(availableQuantity)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    displayPrice: ").append(toIndentedString(displayPrice)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    itemAttributes: ").append(toIndentedString(itemAttributes)).append("\n");
    sb.append("    originalPrice: ").append(toIndentedString(originalPrice)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    stockState: ").append(toIndentedString(stockState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableQuantity");
    openapiFields.add("currencyCode");
    openapiFields.add("displayPrice");
    openapiFields.add("id");
    openapiFields.add("itemAttributes");
    openapiFields.add("originalPrice");
    openapiFields.add("quantity");
    openapiFields.add("stockState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRecommendationengineV1beta1ProductDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRecommendationengineV1beta1ProductDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRecommendationengineV1beta1ProductDetail is not found in the empty JSON string", GoogleCloudRecommendationengineV1beta1ProductDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRecommendationengineV1beta1ProductDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRecommendationengineV1beta1ProductDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `itemAttributes`
      if (jsonObj.get("itemAttributes") != null && !jsonObj.get("itemAttributes").isJsonNull()) {
        GoogleCloudRecommendationengineV1beta1FeatureMap.validateJsonElement(jsonObj.get("itemAttributes"));
      }
      if ((jsonObj.get("stockState") != null && !jsonObj.get("stockState").isJsonNull()) && !jsonObj.get("stockState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stockState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stockState").toString()));
      }
      // validate the optional field `stockState`
      if (jsonObj.get("stockState") != null && !jsonObj.get("stockState").isJsonNull()) {
        StockStateEnum.validateJsonElement(jsonObj.get("stockState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRecommendationengineV1beta1ProductDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRecommendationengineV1beta1ProductDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRecommendationengineV1beta1ProductDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRecommendationengineV1beta1ProductDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRecommendationengineV1beta1ProductDetail>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRecommendationengineV1beta1ProductDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRecommendationengineV1beta1ProductDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRecommendationengineV1beta1ProductDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRecommendationengineV1beta1ProductDetail
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRecommendationengineV1beta1ProductDetail
   */
  public static GoogleCloudRecommendationengineV1beta1ProductDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRecommendationengineV1beta1ProductDetail.class);
  }

  /**
   * Convert an instance of GoogleCloudRecommendationengineV1beta1ProductDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

