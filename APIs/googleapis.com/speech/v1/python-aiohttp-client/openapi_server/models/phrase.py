# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Phrase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boost: float=None, value: str=None):
        """Phrase - a model defined in OpenAPI

        :param boost: The boost of this Phrase.
        :param value: The value of this Phrase.
        """
        self.openapi_types = {
            'boost': float,
            'value': str
        }

        self.attribute_map = {
            'boost': 'boost',
            'value': 'value'
        }

        self._boost = boost
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Phrase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Phrase of this Phrase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boost(self):
        """Gets the boost of this Phrase.

        Hint Boost. Overrides the boost set at the phrase set level. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 and 20. We recommend using a binary search approach to finding the optimal value for your use case as well as adding phrases both with and without boost to your requests.

        :return: The boost of this Phrase.
        :rtype: float
        """
        return self._boost

    @boost.setter
    def boost(self, boost):
        """Sets the boost of this Phrase.

        Hint Boost. Overrides the boost set at the phrase set level. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 and 20. We recommend using a binary search approach to finding the optimal value for your use case as well as adding phrases both with and without boost to your requests.

        :param boost: The boost of this Phrase.
        :type boost: float
        """

        self._boost = boost

    @property
    def value(self):
        """Gets the value of this Phrase.

        The phrase itself.

        :return: The value of this Phrase.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Phrase.

        The phrase itself.

        :param value: The value of this Phrase.
        :type value: str
        """

        self._value = value
