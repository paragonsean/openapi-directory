# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ABNFGrammar(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abnf_strings: List[str]=None):
        """ABNFGrammar - a model defined in OpenAPI

        :param abnf_strings: The abnf_strings of this ABNFGrammar.
        """
        self.openapi_types = {
            'abnf_strings': List[str]
        }

        self.attribute_map = {
            'abnf_strings': 'abnfStrings'
        }

        self._abnf_strings = abnf_strings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ABNFGrammar':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ABNFGrammar of this ABNFGrammar.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abnf_strings(self):
        """Gets the abnf_strings of this ABNFGrammar.

        All declarations and rules of an ABNF grammar broken up into multiple strings that will end up concatenated.

        :return: The abnf_strings of this ABNFGrammar.
        :rtype: List[str]
        """
        return self._abnf_strings

    @abnf_strings.setter
    def abnf_strings(self, abnf_strings):
        """Sets the abnf_strings of this ABNFGrammar.

        All declarations and rules of an ABNF grammar broken up into multiple strings that will end up concatenated.

        :param abnf_strings: The abnf_strings of this ABNFGrammar.
        :type abnf_strings: List[str]
        """

        self._abnf_strings = abnf_strings
