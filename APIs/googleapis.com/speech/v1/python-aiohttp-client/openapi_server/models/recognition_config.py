# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recognition_metadata import RecognitionMetadata
from openapi_server.models.speaker_diarization_config import SpeakerDiarizationConfig
from openapi_server.models.speech_adaptation import SpeechAdaptation
from openapi_server.models.speech_context import SpeechContext
from openapi_server.models.transcript_normalization import TranscriptNormalization
from openapi_server import util


class RecognitionConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adaptation: SpeechAdaptation=None, alternative_language_codes: List[str]=None, audio_channel_count: int=None, diarization_config: SpeakerDiarizationConfig=None, enable_automatic_punctuation: bool=None, enable_separate_recognition_per_channel: bool=None, enable_spoken_emojis: bool=None, enable_spoken_punctuation: bool=None, enable_word_confidence: bool=None, enable_word_time_offsets: bool=None, encoding: str=None, language_code: str=None, max_alternatives: int=None, metadata: RecognitionMetadata=None, model: str=None, profanity_filter: bool=None, sample_rate_hertz: int=None, speech_contexts: List[SpeechContext]=None, transcript_normalization: TranscriptNormalization=None, use_enhanced: bool=None):
        """RecognitionConfig - a model defined in OpenAPI

        :param adaptation: The adaptation of this RecognitionConfig.
        :param alternative_language_codes: The alternative_language_codes of this RecognitionConfig.
        :param audio_channel_count: The audio_channel_count of this RecognitionConfig.
        :param diarization_config: The diarization_config of this RecognitionConfig.
        :param enable_automatic_punctuation: The enable_automatic_punctuation of this RecognitionConfig.
        :param enable_separate_recognition_per_channel: The enable_separate_recognition_per_channel of this RecognitionConfig.
        :param enable_spoken_emojis: The enable_spoken_emojis of this RecognitionConfig.
        :param enable_spoken_punctuation: The enable_spoken_punctuation of this RecognitionConfig.
        :param enable_word_confidence: The enable_word_confidence of this RecognitionConfig.
        :param enable_word_time_offsets: The enable_word_time_offsets of this RecognitionConfig.
        :param encoding: The encoding of this RecognitionConfig.
        :param language_code: The language_code of this RecognitionConfig.
        :param max_alternatives: The max_alternatives of this RecognitionConfig.
        :param metadata: The metadata of this RecognitionConfig.
        :param model: The model of this RecognitionConfig.
        :param profanity_filter: The profanity_filter of this RecognitionConfig.
        :param sample_rate_hertz: The sample_rate_hertz of this RecognitionConfig.
        :param speech_contexts: The speech_contexts of this RecognitionConfig.
        :param transcript_normalization: The transcript_normalization of this RecognitionConfig.
        :param use_enhanced: The use_enhanced of this RecognitionConfig.
        """
        self.openapi_types = {
            'adaptation': SpeechAdaptation,
            'alternative_language_codes': List[str],
            'audio_channel_count': int,
            'diarization_config': SpeakerDiarizationConfig,
            'enable_automatic_punctuation': bool,
            'enable_separate_recognition_per_channel': bool,
            'enable_spoken_emojis': bool,
            'enable_spoken_punctuation': bool,
            'enable_word_confidence': bool,
            'enable_word_time_offsets': bool,
            'encoding': str,
            'language_code': str,
            'max_alternatives': int,
            'metadata': RecognitionMetadata,
            'model': str,
            'profanity_filter': bool,
            'sample_rate_hertz': int,
            'speech_contexts': List[SpeechContext],
            'transcript_normalization': TranscriptNormalization,
            'use_enhanced': bool
        }

        self.attribute_map = {
            'adaptation': 'adaptation',
            'alternative_language_codes': 'alternativeLanguageCodes',
            'audio_channel_count': 'audioChannelCount',
            'diarization_config': 'diarizationConfig',
            'enable_automatic_punctuation': 'enableAutomaticPunctuation',
            'enable_separate_recognition_per_channel': 'enableSeparateRecognitionPerChannel',
            'enable_spoken_emojis': 'enableSpokenEmojis',
            'enable_spoken_punctuation': 'enableSpokenPunctuation',
            'enable_word_confidence': 'enableWordConfidence',
            'enable_word_time_offsets': 'enableWordTimeOffsets',
            'encoding': 'encoding',
            'language_code': 'languageCode',
            'max_alternatives': 'maxAlternatives',
            'metadata': 'metadata',
            'model': 'model',
            'profanity_filter': 'profanityFilter',
            'sample_rate_hertz': 'sampleRateHertz',
            'speech_contexts': 'speechContexts',
            'transcript_normalization': 'transcriptNormalization',
            'use_enhanced': 'useEnhanced'
        }

        self._adaptation = adaptation
        self._alternative_language_codes = alternative_language_codes
        self._audio_channel_count = audio_channel_count
        self._diarization_config = diarization_config
        self._enable_automatic_punctuation = enable_automatic_punctuation
        self._enable_separate_recognition_per_channel = enable_separate_recognition_per_channel
        self._enable_spoken_emojis = enable_spoken_emojis
        self._enable_spoken_punctuation = enable_spoken_punctuation
        self._enable_word_confidence = enable_word_confidence
        self._enable_word_time_offsets = enable_word_time_offsets
        self._encoding = encoding
        self._language_code = language_code
        self._max_alternatives = max_alternatives
        self._metadata = metadata
        self._model = model
        self._profanity_filter = profanity_filter
        self._sample_rate_hertz = sample_rate_hertz
        self._speech_contexts = speech_contexts
        self._transcript_normalization = transcript_normalization
        self._use_enhanced = use_enhanced

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecognitionConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecognitionConfig of this RecognitionConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adaptation(self):
        """Gets the adaptation of this RecognitionConfig.


        :return: The adaptation of this RecognitionConfig.
        :rtype: SpeechAdaptation
        """
        return self._adaptation

    @adaptation.setter
    def adaptation(self, adaptation):
        """Sets the adaptation of this RecognitionConfig.


        :param adaptation: The adaptation of this RecognitionConfig.
        :type adaptation: SpeechAdaptation
        """

        self._adaptation = adaptation

    @property
    def alternative_language_codes(self):
        """Gets the alternative_language_codes of this RecognitionConfig.

        A list of up to 3 additional [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tags, listing possible alternative languages of the supplied audio. See [Language Support](https://cloud.google.com/speech-to-text/docs/languages) for a list of the currently supported language codes. If alternative languages are listed, recognition result will contain recognition in the most likely language detected including the main language_code. The recognition result will include the language tag of the language detected in the audio. Note: This feature is only supported for Voice Command and Voice Search use cases and performance may vary for other use cases (e.g., phone call transcription).

        :return: The alternative_language_codes of this RecognitionConfig.
        :rtype: List[str]
        """
        return self._alternative_language_codes

    @alternative_language_codes.setter
    def alternative_language_codes(self, alternative_language_codes):
        """Sets the alternative_language_codes of this RecognitionConfig.

        A list of up to 3 additional [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tags, listing possible alternative languages of the supplied audio. See [Language Support](https://cloud.google.com/speech-to-text/docs/languages) for a list of the currently supported language codes. If alternative languages are listed, recognition result will contain recognition in the most likely language detected including the main language_code. The recognition result will include the language tag of the language detected in the audio. Note: This feature is only supported for Voice Command and Voice Search use cases and performance may vary for other use cases (e.g., phone call transcription).

        :param alternative_language_codes: The alternative_language_codes of this RecognitionConfig.
        :type alternative_language_codes: List[str]
        """

        self._alternative_language_codes = alternative_language_codes

    @property
    def audio_channel_count(self):
        """Gets the audio_channel_count of this RecognitionConfig.

        The number of channels in the input audio data. ONLY set this for MULTI-CHANNEL recognition. Valid values for LINEAR16, OGG_OPUS and FLAC are `1`-`8`. Valid value for MULAW, AMR, AMR_WB and SPEEX_WITH_HEADER_BYTE is only `1`. If `0` or omitted, defaults to one channel (mono). Note: We only recognize the first channel by default. To perform independent recognition on each channel set `enable_separate_recognition_per_channel` to 'true'.

        :return: The audio_channel_count of this RecognitionConfig.
        :rtype: int
        """
        return self._audio_channel_count

    @audio_channel_count.setter
    def audio_channel_count(self, audio_channel_count):
        """Sets the audio_channel_count of this RecognitionConfig.

        The number of channels in the input audio data. ONLY set this for MULTI-CHANNEL recognition. Valid values for LINEAR16, OGG_OPUS and FLAC are `1`-`8`. Valid value for MULAW, AMR, AMR_WB and SPEEX_WITH_HEADER_BYTE is only `1`. If `0` or omitted, defaults to one channel (mono). Note: We only recognize the first channel by default. To perform independent recognition on each channel set `enable_separate_recognition_per_channel` to 'true'.

        :param audio_channel_count: The audio_channel_count of this RecognitionConfig.
        :type audio_channel_count: int
        """

        self._audio_channel_count = audio_channel_count

    @property
    def diarization_config(self):
        """Gets the diarization_config of this RecognitionConfig.


        :return: The diarization_config of this RecognitionConfig.
        :rtype: SpeakerDiarizationConfig
        """
        return self._diarization_config

    @diarization_config.setter
    def diarization_config(self, diarization_config):
        """Sets the diarization_config of this RecognitionConfig.


        :param diarization_config: The diarization_config of this RecognitionConfig.
        :type diarization_config: SpeakerDiarizationConfig
        """

        self._diarization_config = diarization_config

    @property
    def enable_automatic_punctuation(self):
        """Gets the enable_automatic_punctuation of this RecognitionConfig.

        If 'true', adds punctuation to recognition result hypotheses. This feature is only available in select languages. Setting this for requests in other languages has no effect at all. The default 'false' value does not add punctuation to result hypotheses.

        :return: The enable_automatic_punctuation of this RecognitionConfig.
        :rtype: bool
        """
        return self._enable_automatic_punctuation

    @enable_automatic_punctuation.setter
    def enable_automatic_punctuation(self, enable_automatic_punctuation):
        """Sets the enable_automatic_punctuation of this RecognitionConfig.

        If 'true', adds punctuation to recognition result hypotheses. This feature is only available in select languages. Setting this for requests in other languages has no effect at all. The default 'false' value does not add punctuation to result hypotheses.

        :param enable_automatic_punctuation: The enable_automatic_punctuation of this RecognitionConfig.
        :type enable_automatic_punctuation: bool
        """

        self._enable_automatic_punctuation = enable_automatic_punctuation

    @property
    def enable_separate_recognition_per_channel(self):
        """Gets the enable_separate_recognition_per_channel of this RecognitionConfig.

        This needs to be set to `true` explicitly and `audio_channel_count` > 1 to get each channel recognized separately. The recognition result will contain a `channel_tag` field to state which channel that result belongs to. If this is not true, we will only recognize the first channel. The request is billed cumulatively for all channels recognized: `audio_channel_count` multiplied by the length of the audio.

        :return: The enable_separate_recognition_per_channel of this RecognitionConfig.
        :rtype: bool
        """
        return self._enable_separate_recognition_per_channel

    @enable_separate_recognition_per_channel.setter
    def enable_separate_recognition_per_channel(self, enable_separate_recognition_per_channel):
        """Sets the enable_separate_recognition_per_channel of this RecognitionConfig.

        This needs to be set to `true` explicitly and `audio_channel_count` > 1 to get each channel recognized separately. The recognition result will contain a `channel_tag` field to state which channel that result belongs to. If this is not true, we will only recognize the first channel. The request is billed cumulatively for all channels recognized: `audio_channel_count` multiplied by the length of the audio.

        :param enable_separate_recognition_per_channel: The enable_separate_recognition_per_channel of this RecognitionConfig.
        :type enable_separate_recognition_per_channel: bool
        """

        self._enable_separate_recognition_per_channel = enable_separate_recognition_per_channel

    @property
    def enable_spoken_emojis(self):
        """Gets the enable_spoken_emojis of this RecognitionConfig.

        The spoken emoji behavior for the call If not set, uses default behavior based on model of choice If 'true', adds spoken emoji formatting for the request. This will replace spoken emojis with the corresponding Unicode symbols in the final transcript. If 'false', spoken emojis are not replaced.

        :return: The enable_spoken_emojis of this RecognitionConfig.
        :rtype: bool
        """
        return self._enable_spoken_emojis

    @enable_spoken_emojis.setter
    def enable_spoken_emojis(self, enable_spoken_emojis):
        """Sets the enable_spoken_emojis of this RecognitionConfig.

        The spoken emoji behavior for the call If not set, uses default behavior based on model of choice If 'true', adds spoken emoji formatting for the request. This will replace spoken emojis with the corresponding Unicode symbols in the final transcript. If 'false', spoken emojis are not replaced.

        :param enable_spoken_emojis: The enable_spoken_emojis of this RecognitionConfig.
        :type enable_spoken_emojis: bool
        """

        self._enable_spoken_emojis = enable_spoken_emojis

    @property
    def enable_spoken_punctuation(self):
        """Gets the enable_spoken_punctuation of this RecognitionConfig.

        The spoken punctuation behavior for the call If not set, uses default behavior based on model of choice e.g. command_and_search will enable spoken punctuation by default If 'true', replaces spoken punctuation with the corresponding symbols in the request. For example, \"how are you question mark\" becomes \"how are you?\". See https://cloud.google.com/speech-to-text/docs/spoken-punctuation for support. If 'false', spoken punctuation is not replaced.

        :return: The enable_spoken_punctuation of this RecognitionConfig.
        :rtype: bool
        """
        return self._enable_spoken_punctuation

    @enable_spoken_punctuation.setter
    def enable_spoken_punctuation(self, enable_spoken_punctuation):
        """Sets the enable_spoken_punctuation of this RecognitionConfig.

        The spoken punctuation behavior for the call If not set, uses default behavior based on model of choice e.g. command_and_search will enable spoken punctuation by default If 'true', replaces spoken punctuation with the corresponding symbols in the request. For example, \"how are you question mark\" becomes \"how are you?\". See https://cloud.google.com/speech-to-text/docs/spoken-punctuation for support. If 'false', spoken punctuation is not replaced.

        :param enable_spoken_punctuation: The enable_spoken_punctuation of this RecognitionConfig.
        :type enable_spoken_punctuation: bool
        """

        self._enable_spoken_punctuation = enable_spoken_punctuation

    @property
    def enable_word_confidence(self):
        """Gets the enable_word_confidence of this RecognitionConfig.

        If `true`, the top result includes a list of words and the confidence for those words. If `false`, no word-level confidence information is returned. The default is `false`.

        :return: The enable_word_confidence of this RecognitionConfig.
        :rtype: bool
        """
        return self._enable_word_confidence

    @enable_word_confidence.setter
    def enable_word_confidence(self, enable_word_confidence):
        """Sets the enable_word_confidence of this RecognitionConfig.

        If `true`, the top result includes a list of words and the confidence for those words. If `false`, no word-level confidence information is returned. The default is `false`.

        :param enable_word_confidence: The enable_word_confidence of this RecognitionConfig.
        :type enable_word_confidence: bool
        """

        self._enable_word_confidence = enable_word_confidence

    @property
    def enable_word_time_offsets(self):
        """Gets the enable_word_time_offsets of this RecognitionConfig.

        If `true`, the top result includes a list of words and the start and end time offsets (timestamps) for those words. If `false`, no word-level time offset information is returned. The default is `false`.

        :return: The enable_word_time_offsets of this RecognitionConfig.
        :rtype: bool
        """
        return self._enable_word_time_offsets

    @enable_word_time_offsets.setter
    def enable_word_time_offsets(self, enable_word_time_offsets):
        """Sets the enable_word_time_offsets of this RecognitionConfig.

        If `true`, the top result includes a list of words and the start and end time offsets (timestamps) for those words. If `false`, no word-level time offset information is returned. The default is `false`.

        :param enable_word_time_offsets: The enable_word_time_offsets of this RecognitionConfig.
        :type enable_word_time_offsets: bool
        """

        self._enable_word_time_offsets = enable_word_time_offsets

    @property
    def encoding(self):
        """Gets the encoding of this RecognitionConfig.

        Encoding of audio data sent in all `RecognitionAudio` messages. This field is optional for `FLAC` and `WAV` audio files and required for all other audio formats. For details, see AudioEncoding.

        :return: The encoding of this RecognitionConfig.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this RecognitionConfig.

        Encoding of audio data sent in all `RecognitionAudio` messages. This field is optional for `FLAC` and `WAV` audio files and required for all other audio formats. For details, see AudioEncoding.

        :param encoding: The encoding of this RecognitionConfig.
        :type encoding: str
        """
        allowed_values = ["ENCODING_UNSPECIFIED", "LINEAR16", "FLAC", "MULAW", "AMR", "AMR_WB", "OGG_OPUS", "SPEEX_WITH_HEADER_BYTE", "MP3", "WEBM_OPUS"]  # noqa: E501
        if encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding` ({0}), must be one of {1}"
                .format(encoding, allowed_values)
            )

        self._encoding = encoding

    @property
    def language_code(self):
        """Gets the language_code of this RecognitionConfig.

        Required. The language of the supplied audio as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: \"en-US\". See [Language Support](https://cloud.google.com/speech-to-text/docs/languages) for a list of the currently supported language codes.

        :return: The language_code of this RecognitionConfig.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this RecognitionConfig.

        Required. The language of the supplied audio as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: \"en-US\". See [Language Support](https://cloud.google.com/speech-to-text/docs/languages) for a list of the currently supported language codes.

        :param language_code: The language_code of this RecognitionConfig.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def max_alternatives(self):
        """Gets the max_alternatives of this RecognitionConfig.

        Maximum number of recognition hypotheses to be returned. Specifically, the maximum number of `SpeechRecognitionAlternative` messages within each `SpeechRecognitionResult`. The server may return fewer than `max_alternatives`. Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of one. If omitted, will return a maximum of one.

        :return: The max_alternatives of this RecognitionConfig.
        :rtype: int
        """
        return self._max_alternatives

    @max_alternatives.setter
    def max_alternatives(self, max_alternatives):
        """Sets the max_alternatives of this RecognitionConfig.

        Maximum number of recognition hypotheses to be returned. Specifically, the maximum number of `SpeechRecognitionAlternative` messages within each `SpeechRecognitionResult`. The server may return fewer than `max_alternatives`. Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of one. If omitted, will return a maximum of one.

        :param max_alternatives: The max_alternatives of this RecognitionConfig.
        :type max_alternatives: int
        """

        self._max_alternatives = max_alternatives

    @property
    def metadata(self):
        """Gets the metadata of this RecognitionConfig.


        :return: The metadata of this RecognitionConfig.
        :rtype: RecognitionMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this RecognitionConfig.


        :param metadata: The metadata of this RecognitionConfig.
        :type metadata: RecognitionMetadata
        """

        self._metadata = metadata

    @property
    def model(self):
        """Gets the model of this RecognitionConfig.

        Which model to select for the given request. Select the model best suited to your domain to get best results. If a model is not explicitly specified, then we auto-select a model based on the parameters in the RecognitionConfig. *Model* *Description* latest_long Best for long form content like media or conversation. latest_short Best for short form content like commands or single shot directed speech. command_and_search Best for short queries such as voice commands or voice search. phone_call Best for audio that originated from a phone call (typically recorded at an 8khz sampling rate). video Best for audio that originated from video or includes multiple speakers. Ideally the audio is recorded at a 16khz or greater sampling rate. This is a premium model that costs more than the standard rate. default Best for audio that is not one of the specific audio models. For example, long-form audio. Ideally the audio is high-fidelity, recorded at a 16khz or greater sampling rate. medical_conversation Best for audio that originated from a conversation between a medical provider and patient. medical_dictation Best for audio that originated from dictation notes by a medical provider. 

        :return: The model of this RecognitionConfig.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this RecognitionConfig.

        Which model to select for the given request. Select the model best suited to your domain to get best results. If a model is not explicitly specified, then we auto-select a model based on the parameters in the RecognitionConfig. *Model* *Description* latest_long Best for long form content like media or conversation. latest_short Best for short form content like commands or single shot directed speech. command_and_search Best for short queries such as voice commands or voice search. phone_call Best for audio that originated from a phone call (typically recorded at an 8khz sampling rate). video Best for audio that originated from video or includes multiple speakers. Ideally the audio is recorded at a 16khz or greater sampling rate. This is a premium model that costs more than the standard rate. default Best for audio that is not one of the specific audio models. For example, long-form audio. Ideally the audio is high-fidelity, recorded at a 16khz or greater sampling rate. medical_conversation Best for audio that originated from a conversation between a medical provider and patient. medical_dictation Best for audio that originated from dictation notes by a medical provider. 

        :param model: The model of this RecognitionConfig.
        :type model: str
        """

        self._model = model

    @property
    def profanity_filter(self):
        """Gets the profanity_filter of this RecognitionConfig.

        If set to `true`, the server will attempt to filter out profanities, replacing all but the initial character in each filtered word with asterisks, e.g. \"f***\". If set to `false` or omitted, profanities won't be filtered out.

        :return: The profanity_filter of this RecognitionConfig.
        :rtype: bool
        """
        return self._profanity_filter

    @profanity_filter.setter
    def profanity_filter(self, profanity_filter):
        """Sets the profanity_filter of this RecognitionConfig.

        If set to `true`, the server will attempt to filter out profanities, replacing all but the initial character in each filtered word with asterisks, e.g. \"f***\". If set to `false` or omitted, profanities won't be filtered out.

        :param profanity_filter: The profanity_filter of this RecognitionConfig.
        :type profanity_filter: bool
        """

        self._profanity_filter = profanity_filter

    @property
    def sample_rate_hertz(self):
        """Gets the sample_rate_hertz of this RecognitionConfig.

        Sample rate in Hertz of the audio data sent in all `RecognitionAudio` messages. Valid values are: 8000-48000. 16000 is optimal. For best results, set the sampling rate of the audio source to 16000 Hz. If that's not possible, use the native sample rate of the audio source (instead of re-sampling). This field is optional for FLAC and WAV audio files, but is required for all other audio formats. For details, see AudioEncoding.

        :return: The sample_rate_hertz of this RecognitionConfig.
        :rtype: int
        """
        return self._sample_rate_hertz

    @sample_rate_hertz.setter
    def sample_rate_hertz(self, sample_rate_hertz):
        """Sets the sample_rate_hertz of this RecognitionConfig.

        Sample rate in Hertz of the audio data sent in all `RecognitionAudio` messages. Valid values are: 8000-48000. 16000 is optimal. For best results, set the sampling rate of the audio source to 16000 Hz. If that's not possible, use the native sample rate of the audio source (instead of re-sampling). This field is optional for FLAC and WAV audio files, but is required for all other audio formats. For details, see AudioEncoding.

        :param sample_rate_hertz: The sample_rate_hertz of this RecognitionConfig.
        :type sample_rate_hertz: int
        """

        self._sample_rate_hertz = sample_rate_hertz

    @property
    def speech_contexts(self):
        """Gets the speech_contexts of this RecognitionConfig.

        Array of SpeechContext. A means to provide context to assist the speech recognition. For more information, see [speech adaptation](https://cloud.google.com/speech-to-text/docs/adaptation).

        :return: The speech_contexts of this RecognitionConfig.
        :rtype: List[SpeechContext]
        """
        return self._speech_contexts

    @speech_contexts.setter
    def speech_contexts(self, speech_contexts):
        """Sets the speech_contexts of this RecognitionConfig.

        Array of SpeechContext. A means to provide context to assist the speech recognition. For more information, see [speech adaptation](https://cloud.google.com/speech-to-text/docs/adaptation).

        :param speech_contexts: The speech_contexts of this RecognitionConfig.
        :type speech_contexts: List[SpeechContext]
        """

        self._speech_contexts = speech_contexts

    @property
    def transcript_normalization(self):
        """Gets the transcript_normalization of this RecognitionConfig.


        :return: The transcript_normalization of this RecognitionConfig.
        :rtype: TranscriptNormalization
        """
        return self._transcript_normalization

    @transcript_normalization.setter
    def transcript_normalization(self, transcript_normalization):
        """Sets the transcript_normalization of this RecognitionConfig.


        :param transcript_normalization: The transcript_normalization of this RecognitionConfig.
        :type transcript_normalization: TranscriptNormalization
        """

        self._transcript_normalization = transcript_normalization

    @property
    def use_enhanced(self):
        """Gets the use_enhanced of this RecognitionConfig.

        Set to true to use an enhanced model for speech recognition. If `use_enhanced` is set to true and the `model` field is not set, then an appropriate enhanced model is chosen if an enhanced model exists for the audio. If `use_enhanced` is true and an enhanced version of the specified model does not exist, then the speech is recognized using the standard version of the specified model.

        :return: The use_enhanced of this RecognitionConfig.
        :rtype: bool
        """
        return self._use_enhanced

    @use_enhanced.setter
    def use_enhanced(self, use_enhanced):
        """Sets the use_enhanced of this RecognitionConfig.

        Set to true to use an enhanced model for speech recognition. If `use_enhanced` is set to true and the `model` field is not set, then an appropriate enhanced model is chosen if an enhanced model exists for the audio. If `use_enhanced` is true and an enhanced version of the specified model does not exist, then the speech is recognized using the standard version of the specified model.

        :param use_enhanced: The use_enhanced of this RecognitionConfig.
        :type use_enhanced: bool
        """

        self._use_enhanced = use_enhanced
