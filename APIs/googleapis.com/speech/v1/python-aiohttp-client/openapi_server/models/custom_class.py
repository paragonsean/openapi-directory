# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.class_item import ClassItem
from openapi_server import util


class CustomClass(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, custom_class_id: str=None, delete_time: str=None, display_name: str=None, etag: str=None, expire_time: str=None, items: List[ClassItem]=None, kms_key_name: str=None, kms_key_version_name: str=None, name: str=None, reconciling: bool=None, state: str=None, uid: str=None):
        """CustomClass - a model defined in OpenAPI

        :param annotations: The annotations of this CustomClass.
        :param custom_class_id: The custom_class_id of this CustomClass.
        :param delete_time: The delete_time of this CustomClass.
        :param display_name: The display_name of this CustomClass.
        :param etag: The etag of this CustomClass.
        :param expire_time: The expire_time of this CustomClass.
        :param items: The items of this CustomClass.
        :param kms_key_name: The kms_key_name of this CustomClass.
        :param kms_key_version_name: The kms_key_version_name of this CustomClass.
        :param name: The name of this CustomClass.
        :param reconciling: The reconciling of this CustomClass.
        :param state: The state of this CustomClass.
        :param uid: The uid of this CustomClass.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'custom_class_id': str,
            'delete_time': str,
            'display_name': str,
            'etag': str,
            'expire_time': str,
            'items': List[ClassItem],
            'kms_key_name': str,
            'kms_key_version_name': str,
            'name': str,
            'reconciling': bool,
            'state': str,
            'uid': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'custom_class_id': 'customClassId',
            'delete_time': 'deleteTime',
            'display_name': 'displayName',
            'etag': 'etag',
            'expire_time': 'expireTime',
            'items': 'items',
            'kms_key_name': 'kmsKeyName',
            'kms_key_version_name': 'kmsKeyVersionName',
            'name': 'name',
            'reconciling': 'reconciling',
            'state': 'state',
            'uid': 'uid'
        }

        self._annotations = annotations
        self._custom_class_id = custom_class_id
        self._delete_time = delete_time
        self._display_name = display_name
        self._etag = etag
        self._expire_time = expire_time
        self._items = items
        self._kms_key_name = kms_key_name
        self._kms_key_version_name = kms_key_version_name
        self._name = name
        self._reconciling = reconciling
        self._state = state
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomClass of this CustomClass.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this CustomClass.

        Output only. Allows users to store small amounts of arbitrary data. Both the key and the value must be 63 characters or less each. At most 100 annotations. This field is not used.

        :return: The annotations of this CustomClass.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this CustomClass.

        Output only. Allows users to store small amounts of arbitrary data. Both the key and the value must be 63 characters or less each. At most 100 annotations. This field is not used.

        :param annotations: The annotations of this CustomClass.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def custom_class_id(self):
        """Gets the custom_class_id of this CustomClass.

        If this custom class is a resource, the custom_class_id is the resource id of the CustomClass. Case sensitive.

        :return: The custom_class_id of this CustomClass.
        :rtype: str
        """
        return self._custom_class_id

    @custom_class_id.setter
    def custom_class_id(self, custom_class_id):
        """Sets the custom_class_id of this CustomClass.

        If this custom class is a resource, the custom_class_id is the resource id of the CustomClass. Case sensitive.

        :param custom_class_id: The custom_class_id of this CustomClass.
        :type custom_class_id: str
        """

        self._custom_class_id = custom_class_id

    @property
    def delete_time(self):
        """Gets the delete_time of this CustomClass.

        Output only. The time at which this resource was requested for deletion. This field is not used.

        :return: The delete_time of this CustomClass.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this CustomClass.

        Output only. The time at which this resource was requested for deletion. This field is not used.

        :param delete_time: The delete_time of this CustomClass.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def display_name(self):
        """Gets the display_name of this CustomClass.

        Output only. User-settable, human-readable name for the CustomClass. Must be 63 characters or less. This field is not used.

        :return: The display_name of this CustomClass.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CustomClass.

        Output only. User-settable, human-readable name for the CustomClass. Must be 63 characters or less. This field is not used.

        :param display_name: The display_name of this CustomClass.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this CustomClass.

        Output only. This checksum is computed by the server based on the value of other fields. This may be sent on update, undelete, and delete requests to ensure the client has an up-to-date value before proceeding. This field is not used.

        :return: The etag of this CustomClass.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this CustomClass.

        Output only. This checksum is computed by the server based on the value of other fields. This may be sent on update, undelete, and delete requests to ensure the client has an up-to-date value before proceeding. This field is not used.

        :param etag: The etag of this CustomClass.
        :type etag: str
        """

        self._etag = etag

    @property
    def expire_time(self):
        """Gets the expire_time of this CustomClass.

        Output only. The time at which this resource will be purged. This field is not used.

        :return: The expire_time of this CustomClass.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this CustomClass.

        Output only. The time at which this resource will be purged. This field is not used.

        :param expire_time: The expire_time of this CustomClass.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def items(self):
        """Gets the items of this CustomClass.

        A collection of class items.

        :return: The items of this CustomClass.
        :rtype: List[ClassItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this CustomClass.

        A collection of class items.

        :param items: The items of this CustomClass.
        :type items: List[ClassItem]
        """

        self._items = items

    @property
    def kms_key_name(self):
        """Gets the kms_key_name of this CustomClass.

        Output only. The [KMS key name](https://cloud.google.com/kms/docs/resource-hierarchy#keys) with which the content of the ClassItem is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.

        :return: The kms_key_name of this CustomClass.
        :rtype: str
        """
        return self._kms_key_name

    @kms_key_name.setter
    def kms_key_name(self, kms_key_name):
        """Sets the kms_key_name of this CustomClass.

        Output only. The [KMS key name](https://cloud.google.com/kms/docs/resource-hierarchy#keys) with which the content of the ClassItem is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.

        :param kms_key_name: The kms_key_name of this CustomClass.
        :type kms_key_name: str
        """

        self._kms_key_name = kms_key_name

    @property
    def kms_key_version_name(self):
        """Gets the kms_key_version_name of this CustomClass.

        Output only. The [KMS key version name](https://cloud.google.com/kms/docs/resource-hierarchy#key_versions) with which content of the ClassItem is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{crypto_key_version}`.

        :return: The kms_key_version_name of this CustomClass.
        :rtype: str
        """
        return self._kms_key_version_name

    @kms_key_version_name.setter
    def kms_key_version_name(self, kms_key_version_name):
        """Sets the kms_key_version_name of this CustomClass.

        Output only. The [KMS key version name](https://cloud.google.com/kms/docs/resource-hierarchy#key_versions) with which content of the ClassItem is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{crypto_key_version}`.

        :param kms_key_version_name: The kms_key_version_name of this CustomClass.
        :type kms_key_version_name: str
        """

        self._kms_key_version_name = kms_key_version_name

    @property
    def name(self):
        """Gets the name of this CustomClass.

        The resource name of the custom class.

        :return: The name of this CustomClass.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomClass.

        The resource name of the custom class.

        :param name: The name of this CustomClass.
        :type name: str
        """

        self._name = name

    @property
    def reconciling(self):
        """Gets the reconciling of this CustomClass.

        Output only. Whether or not this CustomClass is in the process of being updated. This field is not used.

        :return: The reconciling of this CustomClass.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this CustomClass.

        Output only. Whether or not this CustomClass is in the process of being updated. This field is not used.

        :param reconciling: The reconciling of this CustomClass.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def state(self):
        """Gets the state of this CustomClass.

        Output only. The CustomClass lifecycle state. This field is not used.

        :return: The state of this CustomClass.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CustomClass.

        Output only. The CustomClass lifecycle state. This field is not used.

        :param state: The state of this CustomClass.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "DELETED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def uid(self):
        """Gets the uid of this CustomClass.

        Output only. System-assigned unique identifier for the CustomClass. This field is not used.

        :return: The uid of this CustomClass.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this CustomClass.

        Output only. System-assigned unique identifier for the CustomClass. This field is not used.

        :param uid: The uid of this CustomClass.
        :type uid: str
        """

        self._uid = uid
