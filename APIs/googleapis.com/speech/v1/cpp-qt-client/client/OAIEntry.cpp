/**
 * Cloud Speech-to-Text API
 * Converts audio to text by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntry::OAIEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntry::OAIEntry() {
    this->initializeModel();
}

OAIEntry::~OAIEntry() {}

void OAIEntry::initializeModel() {

    m_case_sensitive_isSet = false;
    m_case_sensitive_isValid = false;

    m_replace_isSet = false;
    m_replace_isValid = false;

    m_search_isSet = false;
    m_search_isValid = false;
}

void OAIEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntry::fromJsonObject(QJsonObject json) {

    m_case_sensitive_isValid = ::OpenAPI::fromJsonValue(m_case_sensitive, json[QString("caseSensitive")]);
    m_case_sensitive_isSet = !json[QString("caseSensitive")].isNull() && m_case_sensitive_isValid;

    m_replace_isValid = ::OpenAPI::fromJsonValue(m_replace, json[QString("replace")]);
    m_replace_isSet = !json[QString("replace")].isNull() && m_replace_isValid;

    m_search_isValid = ::OpenAPI::fromJsonValue(m_search, json[QString("search")]);
    m_search_isSet = !json[QString("search")].isNull() && m_search_isValid;
}

QString OAIEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_case_sensitive_isSet) {
        obj.insert(QString("caseSensitive"), ::OpenAPI::toJsonValue(m_case_sensitive));
    }
    if (m_replace_isSet) {
        obj.insert(QString("replace"), ::OpenAPI::toJsonValue(m_replace));
    }
    if (m_search_isSet) {
        obj.insert(QString("search"), ::OpenAPI::toJsonValue(m_search));
    }
    return obj;
}

bool OAIEntry::isCaseSensitive() const {
    return m_case_sensitive;
}
void OAIEntry::setCaseSensitive(const bool &case_sensitive) {
    m_case_sensitive = case_sensitive;
    m_case_sensitive_isSet = true;
}

bool OAIEntry::is_case_sensitive_Set() const{
    return m_case_sensitive_isSet;
}

bool OAIEntry::is_case_sensitive_Valid() const{
    return m_case_sensitive_isValid;
}

QString OAIEntry::getReplace() const {
    return m_replace;
}
void OAIEntry::setReplace(const QString &replace) {
    m_replace = replace;
    m_replace_isSet = true;
}

bool OAIEntry::is_replace_Set() const{
    return m_replace_isSet;
}

bool OAIEntry::is_replace_Valid() const{
    return m_replace_isValid;
}

QString OAIEntry::getSearch() const {
    return m_search;
}
void OAIEntry::setSearch(const QString &search) {
    m_search = search;
    m_search_isSet = true;
}

bool OAIEntry::is_search_Set() const{
    return m_search_isSet;
}

bool OAIEntry::is_search_Valid() const{
    return m_search_isValid;
}

bool OAIEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_case_sensitive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
