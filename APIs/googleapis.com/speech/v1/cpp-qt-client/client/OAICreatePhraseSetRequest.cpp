/**
 * Cloud Speech-to-Text API
 * Converts audio to text by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePhraseSetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePhraseSetRequest::OAICreatePhraseSetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePhraseSetRequest::OAICreatePhraseSetRequest() {
    this->initializeModel();
}

OAICreatePhraseSetRequest::~OAICreatePhraseSetRequest() {}

void OAICreatePhraseSetRequest::initializeModel() {

    m_phrase_set_isSet = false;
    m_phrase_set_isValid = false;

    m_phrase_set_id_isSet = false;
    m_phrase_set_id_isValid = false;
}

void OAICreatePhraseSetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePhraseSetRequest::fromJsonObject(QJsonObject json) {

    m_phrase_set_isValid = ::OpenAPI::fromJsonValue(m_phrase_set, json[QString("phraseSet")]);
    m_phrase_set_isSet = !json[QString("phraseSet")].isNull() && m_phrase_set_isValid;

    m_phrase_set_id_isValid = ::OpenAPI::fromJsonValue(m_phrase_set_id, json[QString("phraseSetId")]);
    m_phrase_set_id_isSet = !json[QString("phraseSetId")].isNull() && m_phrase_set_id_isValid;
}

QString OAICreatePhraseSetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePhraseSetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_phrase_set.isSet()) {
        obj.insert(QString("phraseSet"), ::OpenAPI::toJsonValue(m_phrase_set));
    }
    if (m_phrase_set_id_isSet) {
        obj.insert(QString("phraseSetId"), ::OpenAPI::toJsonValue(m_phrase_set_id));
    }
    return obj;
}

OAIPhraseSet OAICreatePhraseSetRequest::getPhraseSet() const {
    return m_phrase_set;
}
void OAICreatePhraseSetRequest::setPhraseSet(const OAIPhraseSet &phrase_set) {
    m_phrase_set = phrase_set;
    m_phrase_set_isSet = true;
}

bool OAICreatePhraseSetRequest::is_phrase_set_Set() const{
    return m_phrase_set_isSet;
}

bool OAICreatePhraseSetRequest::is_phrase_set_Valid() const{
    return m_phrase_set_isValid;
}

QString OAICreatePhraseSetRequest::getPhraseSetId() const {
    return m_phrase_set_id;
}
void OAICreatePhraseSetRequest::setPhraseSetId(const QString &phrase_set_id) {
    m_phrase_set_id = phrase_set_id;
    m_phrase_set_id_isSet = true;
}

bool OAICreatePhraseSetRequest::is_phrase_set_id_Set() const{
    return m_phrase_set_id_isSet;
}

bool OAICreatePhraseSetRequest::is_phrase_set_id_Valid() const{
    return m_phrase_set_id_isValid;
}

bool OAICreatePhraseSetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_phrase_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phrase_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePhraseSetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
