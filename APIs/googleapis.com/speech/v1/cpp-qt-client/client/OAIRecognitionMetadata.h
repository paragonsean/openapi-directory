/**
 * Cloud Speech-to-Text API
 * Converts audio to text by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRecognitionMetadata.h
 *
 * Description of audio data to be recognized.
 */

#ifndef OAIRecognitionMetadata_H
#define OAIRecognitionMetadata_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRecognitionMetadata : public OAIObject {
public:
    OAIRecognitionMetadata();
    OAIRecognitionMetadata(QString json);
    ~OAIRecognitionMetadata() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAudioTopic() const;
    void setAudioTopic(const QString &audio_topic);
    bool is_audio_topic_Set() const;
    bool is_audio_topic_Valid() const;

    qint32 getIndustryNaicsCodeOfAudio() const;
    void setIndustryNaicsCodeOfAudio(const qint32 &industry_naics_code_of_audio);
    bool is_industry_naics_code_of_audio_Set() const;
    bool is_industry_naics_code_of_audio_Valid() const;

    QString getInteractionType() const;
    void setInteractionType(const QString &interaction_type);
    bool is_interaction_type_Set() const;
    bool is_interaction_type_Valid() const;

    QString getMicrophoneDistance() const;
    void setMicrophoneDistance(const QString &microphone_distance);
    bool is_microphone_distance_Set() const;
    bool is_microphone_distance_Valid() const;

    QString getOriginalMediaType() const;
    void setOriginalMediaType(const QString &original_media_type);
    bool is_original_media_type_Set() const;
    bool is_original_media_type_Valid() const;

    QString getOriginalMimeType() const;
    void setOriginalMimeType(const QString &original_mime_type);
    bool is_original_mime_type_Set() const;
    bool is_original_mime_type_Valid() const;

    QString getRecordingDeviceName() const;
    void setRecordingDeviceName(const QString &recording_device_name);
    bool is_recording_device_name_Set() const;
    bool is_recording_device_name_Valid() const;

    QString getRecordingDeviceType() const;
    void setRecordingDeviceType(const QString &recording_device_type);
    bool is_recording_device_type_Set() const;
    bool is_recording_device_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_audio_topic;
    bool m_audio_topic_isSet;
    bool m_audio_topic_isValid;

    qint32 m_industry_naics_code_of_audio;
    bool m_industry_naics_code_of_audio_isSet;
    bool m_industry_naics_code_of_audio_isValid;

    QString m_interaction_type;
    bool m_interaction_type_isSet;
    bool m_interaction_type_isValid;

    QString m_microphone_distance;
    bool m_microphone_distance_isSet;
    bool m_microphone_distance_isValid;

    QString m_original_media_type;
    bool m_original_media_type_isSet;
    bool m_original_media_type_isValid;

    QString m_original_mime_type;
    bool m_original_mime_type_isSet;
    bool m_original_mime_type_isValid;

    QString m_recording_device_name;
    bool m_recording_device_name_isSet;
    bool m_recording_device_name_isValid;

    QString m_recording_device_type;
    bool m_recording_device_type_isSet;
    bool m_recording_device_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRecognitionMetadata)

#endif // OAIRecognitionMetadata_H
