/**
 * Cloud Speech-to-Text API
 * Converts audio to text by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpeakerDiarizationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpeakerDiarizationConfig::OAISpeakerDiarizationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpeakerDiarizationConfig::OAISpeakerDiarizationConfig() {
    this->initializeModel();
}

OAISpeakerDiarizationConfig::~OAISpeakerDiarizationConfig() {}

void OAISpeakerDiarizationConfig::initializeModel() {

    m_enable_speaker_diarization_isSet = false;
    m_enable_speaker_diarization_isValid = false;

    m_max_speaker_count_isSet = false;
    m_max_speaker_count_isValid = false;

    m_min_speaker_count_isSet = false;
    m_min_speaker_count_isValid = false;

    m_speaker_tag_isSet = false;
    m_speaker_tag_isValid = false;
}

void OAISpeakerDiarizationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpeakerDiarizationConfig::fromJsonObject(QJsonObject json) {

    m_enable_speaker_diarization_isValid = ::OpenAPI::fromJsonValue(m_enable_speaker_diarization, json[QString("enableSpeakerDiarization")]);
    m_enable_speaker_diarization_isSet = !json[QString("enableSpeakerDiarization")].isNull() && m_enable_speaker_diarization_isValid;

    m_max_speaker_count_isValid = ::OpenAPI::fromJsonValue(m_max_speaker_count, json[QString("maxSpeakerCount")]);
    m_max_speaker_count_isSet = !json[QString("maxSpeakerCount")].isNull() && m_max_speaker_count_isValid;

    m_min_speaker_count_isValid = ::OpenAPI::fromJsonValue(m_min_speaker_count, json[QString("minSpeakerCount")]);
    m_min_speaker_count_isSet = !json[QString("minSpeakerCount")].isNull() && m_min_speaker_count_isValid;

    m_speaker_tag_isValid = ::OpenAPI::fromJsonValue(m_speaker_tag, json[QString("speakerTag")]);
    m_speaker_tag_isSet = !json[QString("speakerTag")].isNull() && m_speaker_tag_isValid;
}

QString OAISpeakerDiarizationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpeakerDiarizationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_speaker_diarization_isSet) {
        obj.insert(QString("enableSpeakerDiarization"), ::OpenAPI::toJsonValue(m_enable_speaker_diarization));
    }
    if (m_max_speaker_count_isSet) {
        obj.insert(QString("maxSpeakerCount"), ::OpenAPI::toJsonValue(m_max_speaker_count));
    }
    if (m_min_speaker_count_isSet) {
        obj.insert(QString("minSpeakerCount"), ::OpenAPI::toJsonValue(m_min_speaker_count));
    }
    if (m_speaker_tag_isSet) {
        obj.insert(QString("speakerTag"), ::OpenAPI::toJsonValue(m_speaker_tag));
    }
    return obj;
}

bool OAISpeakerDiarizationConfig::isEnableSpeakerDiarization() const {
    return m_enable_speaker_diarization;
}
void OAISpeakerDiarizationConfig::setEnableSpeakerDiarization(const bool &enable_speaker_diarization) {
    m_enable_speaker_diarization = enable_speaker_diarization;
    m_enable_speaker_diarization_isSet = true;
}

bool OAISpeakerDiarizationConfig::is_enable_speaker_diarization_Set() const{
    return m_enable_speaker_diarization_isSet;
}

bool OAISpeakerDiarizationConfig::is_enable_speaker_diarization_Valid() const{
    return m_enable_speaker_diarization_isValid;
}

qint32 OAISpeakerDiarizationConfig::getMaxSpeakerCount() const {
    return m_max_speaker_count;
}
void OAISpeakerDiarizationConfig::setMaxSpeakerCount(const qint32 &max_speaker_count) {
    m_max_speaker_count = max_speaker_count;
    m_max_speaker_count_isSet = true;
}

bool OAISpeakerDiarizationConfig::is_max_speaker_count_Set() const{
    return m_max_speaker_count_isSet;
}

bool OAISpeakerDiarizationConfig::is_max_speaker_count_Valid() const{
    return m_max_speaker_count_isValid;
}

qint32 OAISpeakerDiarizationConfig::getMinSpeakerCount() const {
    return m_min_speaker_count;
}
void OAISpeakerDiarizationConfig::setMinSpeakerCount(const qint32 &min_speaker_count) {
    m_min_speaker_count = min_speaker_count;
    m_min_speaker_count_isSet = true;
}

bool OAISpeakerDiarizationConfig::is_min_speaker_count_Set() const{
    return m_min_speaker_count_isSet;
}

bool OAISpeakerDiarizationConfig::is_min_speaker_count_Valid() const{
    return m_min_speaker_count_isValid;
}

qint32 OAISpeakerDiarizationConfig::getSpeakerTag() const {
    return m_speaker_tag;
}
void OAISpeakerDiarizationConfig::setSpeakerTag(const qint32 &speaker_tag) {
    m_speaker_tag = speaker_tag;
    m_speaker_tag_isSet = true;
}

bool OAISpeakerDiarizationConfig::is_speaker_tag_Set() const{
    return m_speaker_tag_isSet;
}

bool OAISpeakerDiarizationConfig::is_speaker_tag_Valid() const{
    return m_speaker_tag_isValid;
}

bool OAISpeakerDiarizationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_speaker_diarization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_speaker_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_speaker_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speaker_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpeakerDiarizationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
