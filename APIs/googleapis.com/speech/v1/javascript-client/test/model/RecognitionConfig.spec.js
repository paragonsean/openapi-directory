/**
 * Cloud Speech-to-Text API
 * Converts audio to text by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudSpeechToTextApi);
  }
}(this, function(expect, CloudSpeechToTextApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudSpeechToTextApi.RecognitionConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RecognitionConfig', function() {
    it('should create an instance of RecognitionConfig', function() {
      // uncomment below and update the code to test RecognitionConfig
      //var instance = new CloudSpeechToTextApi.RecognitionConfig();
      //expect(instance).to.be.a(CloudSpeechToTextApi.RecognitionConfig);
    });

    it('should have the property adaptation (base name: "adaptation")', function() {
      // uncomment below and update the code to test the property adaptation
      //var instance = new CloudSpeechToTextApi.RecognitionConfig();
      //expect(instance).to.be();
    });

    it('should have the property alternativeLanguageCodes (base name: "alternativeLanguageCodes")', function() {
      // uncomment below and update the code to test the property alternativeLanguageCodes
      //var instance = new CloudSpeechToTextApi.RecognitionConfig();
      //expect(instance).to.be();
    });

    it('should have the property audioChannelCount (base name: "audioChannelCount")', function() {
      // uncomment below and update the code to test the property audioChannelCount
      //var instance = new CloudSpeechToTextApi.RecognitionConfig();
      //expect(instance).to.be();
    });

    it('should have the property diarizationConfig (base name: "diarizationConfig")', function() {
      // uncomment below and update the code to test the property diarizationConfig
      //var instance = new CloudSpeechToTextApi.RecognitionConfig();
      //expect(instance).to.be();
    });

    it('should have the property enableAutomaticPunctuation (base name: "enableAutomaticPunctuation")', function() {
      // uncomment below and update the code to test the property enableAutomaticPunctuation
      //var instance = new CloudSpeechToTextApi.RecognitionConfig();
      //expect(instance).to.be();
    });

    it('should have the property enableSeparateRecognitionPerChannel (base name: "enableSeparateRecognitionPerChannel")', function() {
      // uncomment below and update the code to test the property enableSeparateRecognitionPerChannel
      //var instance = new CloudSpeechToTextApi.RecognitionConfig();
      //expect(instance).to.be();
    });

    it('should have the property enableSpokenEmojis (base name: "enableSpokenEmojis")', function() {
      // uncomment below and update the code to test the property enableSpokenEmojis
      //var instance = new CloudSpeechToTextApi.RecognitionConfig();
      //expect(instance).to.be();
    });

    it('should have the property enableSpokenPunctuation (base name: "enableSpokenPunctuation")', function() {
      // uncomment below and update the code to test the property enableSpokenPunctuation
      //var instance = new CloudSpeechToTextApi.RecognitionConfig();
      //expect(instance).to.be();
    });

    it('should have the property enableWordConfidence (base name: "enableWordConfidence")', function() {
      // uncomment below and update the code to test the property enableWordConfidence
      //var instance = new CloudSpeechToTextApi.RecognitionConfig();
      //expect(instance).to.be();
    });

    it('should have the property enableWordTimeOffsets (base name: "enableWordTimeOffsets")', function() {
      // uncomment below and update the code to test the property enableWordTimeOffsets
      //var instance = new CloudSpeechToTextApi.RecognitionConfig();
      //expect(instance).to.be();
    });

    it('should have the property encoding (base name: "encoding")', function() {
      // uncomment below and update the code to test the property encoding
      //var instance = new CloudSpeechToTextApi.RecognitionConfig();
      //expect(instance).to.be();
    });

    it('should have the property languageCode (base name: "languageCode")', function() {
      // uncomment below and update the code to test the property languageCode
      //var instance = new CloudSpeechToTextApi.RecognitionConfig();
      //expect(instance).to.be();
    });

    it('should have the property maxAlternatives (base name: "maxAlternatives")', function() {
      // uncomment below and update the code to test the property maxAlternatives
      //var instance = new CloudSpeechToTextApi.RecognitionConfig();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new CloudSpeechToTextApi.RecognitionConfig();
      //expect(instance).to.be();
    });

    it('should have the property model (base name: "model")', function() {
      // uncomment below and update the code to test the property model
      //var instance = new CloudSpeechToTextApi.RecognitionConfig();
      //expect(instance).to.be();
    });

    it('should have the property profanityFilter (base name: "profanityFilter")', function() {
      // uncomment below and update the code to test the property profanityFilter
      //var instance = new CloudSpeechToTextApi.RecognitionConfig();
      //expect(instance).to.be();
    });

    it('should have the property sampleRateHertz (base name: "sampleRateHertz")', function() {
      // uncomment below and update the code to test the property sampleRateHertz
      //var instance = new CloudSpeechToTextApi.RecognitionConfig();
      //expect(instance).to.be();
    });

    it('should have the property speechContexts (base name: "speechContexts")', function() {
      // uncomment below and update the code to test the property speechContexts
      //var instance = new CloudSpeechToTextApi.RecognitionConfig();
      //expect(instance).to.be();
    });

    it('should have the property transcriptNormalization (base name: "transcriptNormalization")', function() {
      // uncomment below and update the code to test the property transcriptNormalization
      //var instance = new CloudSpeechToTextApi.RecognitionConfig();
      //expect(instance).to.be();
    });

    it('should have the property useEnhanced (base name: "useEnhanced")', function() {
      // uncomment below and update the code to test the property useEnhanced
      //var instance = new CloudSpeechToTextApi.RecognitionConfig();
      //expect(instance).to.be();
    });

  });

}));
