/**
 * Cloud Speech-to-Text API
 * Converts audio to text by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RecognitionMetadata model module.
 * @module model/RecognitionMetadata
 * @version v1
 */
class RecognitionMetadata {
    /**
     * Constructs a new <code>RecognitionMetadata</code>.
     * Description of audio data to be recognized.
     * @alias module:model/RecognitionMetadata
     */
    constructor() { 
        
        RecognitionMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RecognitionMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecognitionMetadata} obj Optional instance to populate.
     * @return {module:model/RecognitionMetadata} The populated <code>RecognitionMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecognitionMetadata();

            if (data.hasOwnProperty('audioTopic')) {
                obj['audioTopic'] = ApiClient.convertToType(data['audioTopic'], 'String');
            }
            if (data.hasOwnProperty('industryNaicsCodeOfAudio')) {
                obj['industryNaicsCodeOfAudio'] = ApiClient.convertToType(data['industryNaicsCodeOfAudio'], 'Number');
            }
            if (data.hasOwnProperty('interactionType')) {
                obj['interactionType'] = ApiClient.convertToType(data['interactionType'], 'String');
            }
            if (data.hasOwnProperty('microphoneDistance')) {
                obj['microphoneDistance'] = ApiClient.convertToType(data['microphoneDistance'], 'String');
            }
            if (data.hasOwnProperty('originalMediaType')) {
                obj['originalMediaType'] = ApiClient.convertToType(data['originalMediaType'], 'String');
            }
            if (data.hasOwnProperty('originalMimeType')) {
                obj['originalMimeType'] = ApiClient.convertToType(data['originalMimeType'], 'String');
            }
            if (data.hasOwnProperty('recordingDeviceName')) {
                obj['recordingDeviceName'] = ApiClient.convertToType(data['recordingDeviceName'], 'String');
            }
            if (data.hasOwnProperty('recordingDeviceType')) {
                obj['recordingDeviceType'] = ApiClient.convertToType(data['recordingDeviceType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecognitionMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecognitionMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['audioTopic'] && !(typeof data['audioTopic'] === 'string' || data['audioTopic'] instanceof String)) {
            throw new Error("Expected the field `audioTopic` to be a primitive type in the JSON string but got " + data['audioTopic']);
        }
        // ensure the json data is a string
        if (data['interactionType'] && !(typeof data['interactionType'] === 'string' || data['interactionType'] instanceof String)) {
            throw new Error("Expected the field `interactionType` to be a primitive type in the JSON string but got " + data['interactionType']);
        }
        // ensure the json data is a string
        if (data['microphoneDistance'] && !(typeof data['microphoneDistance'] === 'string' || data['microphoneDistance'] instanceof String)) {
            throw new Error("Expected the field `microphoneDistance` to be a primitive type in the JSON string but got " + data['microphoneDistance']);
        }
        // ensure the json data is a string
        if (data['originalMediaType'] && !(typeof data['originalMediaType'] === 'string' || data['originalMediaType'] instanceof String)) {
            throw new Error("Expected the field `originalMediaType` to be a primitive type in the JSON string but got " + data['originalMediaType']);
        }
        // ensure the json data is a string
        if (data['originalMimeType'] && !(typeof data['originalMimeType'] === 'string' || data['originalMimeType'] instanceof String)) {
            throw new Error("Expected the field `originalMimeType` to be a primitive type in the JSON string but got " + data['originalMimeType']);
        }
        // ensure the json data is a string
        if (data['recordingDeviceName'] && !(typeof data['recordingDeviceName'] === 'string' || data['recordingDeviceName'] instanceof String)) {
            throw new Error("Expected the field `recordingDeviceName` to be a primitive type in the JSON string but got " + data['recordingDeviceName']);
        }
        // ensure the json data is a string
        if (data['recordingDeviceType'] && !(typeof data['recordingDeviceType'] === 'string' || data['recordingDeviceType'] instanceof String)) {
            throw new Error("Expected the field `recordingDeviceType` to be a primitive type in the JSON string but got " + data['recordingDeviceType']);
        }

        return true;
    }


}



/**
 * Description of the content. Eg. \"Recordings of federal supreme court hearings from 2012\".
 * @member {String} audioTopic
 */
RecognitionMetadata.prototype['audioTopic'] = undefined;

/**
 * The industry vertical to which this speech recognition request most closely applies. This is most indicative of the topics contained in the audio. Use the 6-digit NAICS code to identify the industry vertical - see https://www.naics.com/search/.
 * @member {Number} industryNaicsCodeOfAudio
 */
RecognitionMetadata.prototype['industryNaicsCodeOfAudio'] = undefined;

/**
 * The use case most closely describing the audio content to be recognized.
 * @member {module:model/RecognitionMetadata.InteractionTypeEnum} interactionType
 */
RecognitionMetadata.prototype['interactionType'] = undefined;

/**
 * The audio type that most closely describes the audio being recognized.
 * @member {module:model/RecognitionMetadata.MicrophoneDistanceEnum} microphoneDistance
 */
RecognitionMetadata.prototype['microphoneDistance'] = undefined;

/**
 * The original media the speech was recorded on.
 * @member {module:model/RecognitionMetadata.OriginalMediaTypeEnum} originalMediaType
 */
RecognitionMetadata.prototype['originalMediaType'] = undefined;

/**
 * Mime type of the original audio file. For example `audio/m4a`, `audio/x-alaw-basic`, `audio/mp3`, `audio/3gpp`. A list of possible audio mime types is maintained at http://www.iana.org/assignments/media-types/media-types.xhtml#audio
 * @member {String} originalMimeType
 */
RecognitionMetadata.prototype['originalMimeType'] = undefined;

/**
 * The device used to make the recording. Examples 'Nexus 5X' or 'Polycom SoundStation IP 6000' or 'POTS' or 'VoIP' or 'Cardioid Microphone'.
 * @member {String} recordingDeviceName
 */
RecognitionMetadata.prototype['recordingDeviceName'] = undefined;

/**
 * The type of device the speech was recorded with.
 * @member {module:model/RecognitionMetadata.RecordingDeviceTypeEnum} recordingDeviceType
 */
RecognitionMetadata.prototype['recordingDeviceType'] = undefined;





/**
 * Allowed values for the <code>interactionType</code> property.
 * @enum {String}
 * @readonly
 */
RecognitionMetadata['InteractionTypeEnum'] = {

    /**
     * value: "INTERACTION_TYPE_UNSPECIFIED"
     * @const
     */
    "INTERACTION_TYPE_UNSPECIFIED": "INTERACTION_TYPE_UNSPECIFIED",

    /**
     * value: "DISCUSSION"
     * @const
     */
    "DISCUSSION": "DISCUSSION",

    /**
     * value: "PRESENTATION"
     * @const
     */
    "PRESENTATION": "PRESENTATION",

    /**
     * value: "PHONE_CALL"
     * @const
     */
    "PHONE_CALL": "PHONE_CALL",

    /**
     * value: "VOICEMAIL"
     * @const
     */
    "VOICEMAIL": "VOICEMAIL",

    /**
     * value: "PROFESSIONALLY_PRODUCED"
     * @const
     */
    "PROFESSIONALLY_PRODUCED": "PROFESSIONALLY_PRODUCED",

    /**
     * value: "VOICE_SEARCH"
     * @const
     */
    "VOICE_SEARCH": "VOICE_SEARCH",

    /**
     * value: "VOICE_COMMAND"
     * @const
     */
    "VOICE_COMMAND": "VOICE_COMMAND",

    /**
     * value: "DICTATION"
     * @const
     */
    "DICTATION": "DICTATION"
};


/**
 * Allowed values for the <code>microphoneDistance</code> property.
 * @enum {String}
 * @readonly
 */
RecognitionMetadata['MicrophoneDistanceEnum'] = {

    /**
     * value: "MICROPHONE_DISTANCE_UNSPECIFIED"
     * @const
     */
    "MICROPHONE_DISTANCE_UNSPECIFIED": "MICROPHONE_DISTANCE_UNSPECIFIED",

    /**
     * value: "NEARFIELD"
     * @const
     */
    "NEARFIELD": "NEARFIELD",

    /**
     * value: "MIDFIELD"
     * @const
     */
    "MIDFIELD": "MIDFIELD",

    /**
     * value: "FARFIELD"
     * @const
     */
    "FARFIELD": "FARFIELD"
};


/**
 * Allowed values for the <code>originalMediaType</code> property.
 * @enum {String}
 * @readonly
 */
RecognitionMetadata['OriginalMediaTypeEnum'] = {

    /**
     * value: "ORIGINAL_MEDIA_TYPE_UNSPECIFIED"
     * @const
     */
    "ORIGINAL_MEDIA_TYPE_UNSPECIFIED": "ORIGINAL_MEDIA_TYPE_UNSPECIFIED",

    /**
     * value: "AUDIO"
     * @const
     */
    "AUDIO": "AUDIO",

    /**
     * value: "VIDEO"
     * @const
     */
    "VIDEO": "VIDEO"
};


/**
 * Allowed values for the <code>recordingDeviceType</code> property.
 * @enum {String}
 * @readonly
 */
RecognitionMetadata['RecordingDeviceTypeEnum'] = {

    /**
     * value: "RECORDING_DEVICE_TYPE_UNSPECIFIED"
     * @const
     */
    "RECORDING_DEVICE_TYPE_UNSPECIFIED": "RECORDING_DEVICE_TYPE_UNSPECIFIED",

    /**
     * value: "SMARTPHONE"
     * @const
     */
    "SMARTPHONE": "SMARTPHONE",

    /**
     * value: "PC"
     * @const
     */
    "PC": "PC",

    /**
     * value: "PHONE_LINE"
     * @const
     */
    "PHONE_LINE": "PHONE_LINE",

    /**
     * value: "VEHICLE"
     * @const
     */
    "VEHICLE": "VEHICLE",

    /**
     * value: "OTHER_OUTDOOR_DEVICE"
     * @const
     */
    "OTHER_OUTDOOR_DEVICE": "OTHER_OUTDOOR_DEVICE",

    /**
     * value: "OTHER_INDOOR_DEVICE"
     * @const
     */
    "OTHER_INDOOR_DEVICE": "OTHER_INDOOR_DEVICE"
};



export default RecognitionMetadata;

