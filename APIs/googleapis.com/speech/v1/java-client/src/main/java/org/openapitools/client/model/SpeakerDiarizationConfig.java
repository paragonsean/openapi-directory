/*
 * Cloud Speech-to-Text API
 * Converts audio to text by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Config to enable speaker diarization.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:53.441209-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SpeakerDiarizationConfig {
  public static final String SERIALIZED_NAME_ENABLE_SPEAKER_DIARIZATION = "enableSpeakerDiarization";
  @SerializedName(SERIALIZED_NAME_ENABLE_SPEAKER_DIARIZATION)
  private Boolean enableSpeakerDiarization;

  public static final String SERIALIZED_NAME_MAX_SPEAKER_COUNT = "maxSpeakerCount";
  @SerializedName(SERIALIZED_NAME_MAX_SPEAKER_COUNT)
  private Integer maxSpeakerCount;

  public static final String SERIALIZED_NAME_MIN_SPEAKER_COUNT = "minSpeakerCount";
  @SerializedName(SERIALIZED_NAME_MIN_SPEAKER_COUNT)
  private Integer minSpeakerCount;

  public static final String SERIALIZED_NAME_SPEAKER_TAG = "speakerTag";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SPEAKER_TAG)
  private Integer speakerTag;

  public SpeakerDiarizationConfig() {
  }

  public SpeakerDiarizationConfig(
     Integer speakerTag
  ) {
    this();
    this.speakerTag = speakerTag;
  }

  public SpeakerDiarizationConfig enableSpeakerDiarization(Boolean enableSpeakerDiarization) {
    this.enableSpeakerDiarization = enableSpeakerDiarization;
    return this;
  }

  /**
   * If &#39;true&#39;, enables speaker detection for each recognized word in the top alternative of the recognition result using a speaker_label provided in the WordInfo.
   * @return enableSpeakerDiarization
   */
  @javax.annotation.Nullable
  public Boolean getEnableSpeakerDiarization() {
    return enableSpeakerDiarization;
  }

  public void setEnableSpeakerDiarization(Boolean enableSpeakerDiarization) {
    this.enableSpeakerDiarization = enableSpeakerDiarization;
  }


  public SpeakerDiarizationConfig maxSpeakerCount(Integer maxSpeakerCount) {
    this.maxSpeakerCount = maxSpeakerCount;
    return this;
  }

  /**
   * Maximum number of speakers in the conversation. This range gives you more flexibility by allowing the system to automatically determine the correct number of speakers. If not set, the default value is 6.
   * @return maxSpeakerCount
   */
  @javax.annotation.Nullable
  public Integer getMaxSpeakerCount() {
    return maxSpeakerCount;
  }

  public void setMaxSpeakerCount(Integer maxSpeakerCount) {
    this.maxSpeakerCount = maxSpeakerCount;
  }


  public SpeakerDiarizationConfig minSpeakerCount(Integer minSpeakerCount) {
    this.minSpeakerCount = minSpeakerCount;
    return this;
  }

  /**
   * Minimum number of speakers in the conversation. This range gives you more flexibility by allowing the system to automatically determine the correct number of speakers. If not set, the default value is 2.
   * @return minSpeakerCount
   */
  @javax.annotation.Nullable
  public Integer getMinSpeakerCount() {
    return minSpeakerCount;
  }

  public void setMinSpeakerCount(Integer minSpeakerCount) {
    this.minSpeakerCount = minSpeakerCount;
  }


  /**
   * Output only. Unused.
   * @return speakerTag
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getSpeakerTag() {
    return speakerTag;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpeakerDiarizationConfig speakerDiarizationConfig = (SpeakerDiarizationConfig) o;
    return Objects.equals(this.enableSpeakerDiarization, speakerDiarizationConfig.enableSpeakerDiarization) &&
        Objects.equals(this.maxSpeakerCount, speakerDiarizationConfig.maxSpeakerCount) &&
        Objects.equals(this.minSpeakerCount, speakerDiarizationConfig.minSpeakerCount) &&
        Objects.equals(this.speakerTag, speakerDiarizationConfig.speakerTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableSpeakerDiarization, maxSpeakerCount, minSpeakerCount, speakerTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpeakerDiarizationConfig {\n");
    sb.append("    enableSpeakerDiarization: ").append(toIndentedString(enableSpeakerDiarization)).append("\n");
    sb.append("    maxSpeakerCount: ").append(toIndentedString(maxSpeakerCount)).append("\n");
    sb.append("    minSpeakerCount: ").append(toIndentedString(minSpeakerCount)).append("\n");
    sb.append("    speakerTag: ").append(toIndentedString(speakerTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enableSpeakerDiarization");
    openapiFields.add("maxSpeakerCount");
    openapiFields.add("minSpeakerCount");
    openapiFields.add("speakerTag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SpeakerDiarizationConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SpeakerDiarizationConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SpeakerDiarizationConfig is not found in the empty JSON string", SpeakerDiarizationConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SpeakerDiarizationConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SpeakerDiarizationConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SpeakerDiarizationConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SpeakerDiarizationConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SpeakerDiarizationConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SpeakerDiarizationConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<SpeakerDiarizationConfig>() {
           @Override
           public void write(JsonWriter out, SpeakerDiarizationConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SpeakerDiarizationConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SpeakerDiarizationConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SpeakerDiarizationConfig
   * @throws IOException if the JSON string is invalid with respect to SpeakerDiarizationConfig
   */
  public static SpeakerDiarizationConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SpeakerDiarizationConfig.class);
  }

  /**
   * Convert an instance of SpeakerDiarizationConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

