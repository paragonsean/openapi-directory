# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WordInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: float=None, end_offset: str=None, speaker_tag: int=None, start_offset: str=None, word: str=None):
        """WordInfo - a model defined in OpenAPI

        :param confidence: The confidence of this WordInfo.
        :param end_offset: The end_offset of this WordInfo.
        :param speaker_tag: The speaker_tag of this WordInfo.
        :param start_offset: The start_offset of this WordInfo.
        :param word: The word of this WordInfo.
        """
        self.openapi_types = {
            'confidence': float,
            'end_offset': str,
            'speaker_tag': int,
            'start_offset': str,
            'word': str
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'end_offset': 'endOffset',
            'speaker_tag': 'speakerTag',
            'start_offset': 'startOffset',
            'word': 'word'
        }

        self._confidence = confidence
        self._end_offset = end_offset
        self._speaker_tag = speaker_tag
        self._start_offset = start_offset
        self._word = word

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WordInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WordInfo of this WordInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this WordInfo.

        Output only. The confidence estimate between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. This field is set only for the top alternative of a non-streaming result or, of a streaming result where `is_final=true`. This field is not guaranteed to be accurate and users should not rely on it to be always provided. The default of 0.0 is a sentinel value indicating `confidence` was not set.

        :return: The confidence of this WordInfo.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this WordInfo.

        Output only. The confidence estimate between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. This field is set only for the top alternative of a non-streaming result or, of a streaming result where `is_final=true`. This field is not guaranteed to be accurate and users should not rely on it to be always provided. The default of 0.0 is a sentinel value indicating `confidence` was not set.

        :param confidence: The confidence of this WordInfo.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def end_offset(self):
        """Gets the end_offset of this WordInfo.

        Output only. Time offset relative to the beginning of the audio, and corresponding to the end of the spoken word. This field is only set if `enable_word_time_offsets=true` and only in the top hypothesis. This is an experimental feature and the accuracy of the time offset can vary.

        :return: The end_offset of this WordInfo.
        :rtype: str
        """
        return self._end_offset

    @end_offset.setter
    def end_offset(self, end_offset):
        """Sets the end_offset of this WordInfo.

        Output only. Time offset relative to the beginning of the audio, and corresponding to the end of the spoken word. This field is only set if `enable_word_time_offsets=true` and only in the top hypothesis. This is an experimental feature and the accuracy of the time offset can vary.

        :param end_offset: The end_offset of this WordInfo.
        :type end_offset: str
        """

        self._end_offset = end_offset

    @property
    def speaker_tag(self):
        """Gets the speaker_tag of this WordInfo.

        Output only. A distinct integer value is assigned for every speaker within the audio. This field specifies which one of those speakers was detected to have spoken this word. Value ranges from `1` to `diarization_config.max_speaker_count` . `speaker_tag` is set if `diarization_config.enable_speaker_diarization` = `true` and only in the top alternative.

        :return: The speaker_tag of this WordInfo.
        :rtype: int
        """
        return self._speaker_tag

    @speaker_tag.setter
    def speaker_tag(self, speaker_tag):
        """Sets the speaker_tag of this WordInfo.

        Output only. A distinct integer value is assigned for every speaker within the audio. This field specifies which one of those speakers was detected to have spoken this word. Value ranges from `1` to `diarization_config.max_speaker_count` . `speaker_tag` is set if `diarization_config.enable_speaker_diarization` = `true` and only in the top alternative.

        :param speaker_tag: The speaker_tag of this WordInfo.
        :type speaker_tag: int
        """

        self._speaker_tag = speaker_tag

    @property
    def start_offset(self):
        """Gets the start_offset of this WordInfo.

        Output only. Time offset relative to the beginning of the audio, and corresponding to the start of the spoken word. This field is only set if `enable_word_time_offsets=true` and only in the top hypothesis. This is an experimental feature and the accuracy of the time offset can vary.

        :return: The start_offset of this WordInfo.
        :rtype: str
        """
        return self._start_offset

    @start_offset.setter
    def start_offset(self, start_offset):
        """Sets the start_offset of this WordInfo.

        Output only. Time offset relative to the beginning of the audio, and corresponding to the start of the spoken word. This field is only set if `enable_word_time_offsets=true` and only in the top hypothesis. This is an experimental feature and the accuracy of the time offset can vary.

        :param start_offset: The start_offset of this WordInfo.
        :type start_offset: str
        """

        self._start_offset = start_offset

    @property
    def word(self):
        """Gets the word of this WordInfo.

        Output only. The word corresponding to this set of information.

        :return: The word of this WordInfo.
        :rtype: str
        """
        return self._word

    @word.setter
    def word(self, word):
        """Sets the word of this WordInfo.

        Output only. The word corresponding to this set of information.

        :param word: The word of this WordInfo.
        :type word: str
        """

        self._word = word
