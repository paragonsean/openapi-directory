# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LongRunningRecognizeMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_update_time: str=None, progress_percent: int=None, start_time: str=None, uri: str=None):
        """LongRunningRecognizeMetadata - a model defined in OpenAPI

        :param last_update_time: The last_update_time of this LongRunningRecognizeMetadata.
        :param progress_percent: The progress_percent of this LongRunningRecognizeMetadata.
        :param start_time: The start_time of this LongRunningRecognizeMetadata.
        :param uri: The uri of this LongRunningRecognizeMetadata.
        """
        self.openapi_types = {
            'last_update_time': str,
            'progress_percent': int,
            'start_time': str,
            'uri': str
        }

        self.attribute_map = {
            'last_update_time': 'lastUpdateTime',
            'progress_percent': 'progressPercent',
            'start_time': 'startTime',
            'uri': 'uri'
        }

        self._last_update_time = last_update_time
        self._progress_percent = progress_percent
        self._start_time = start_time
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LongRunningRecognizeMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LongRunningRecognizeMetadata of this LongRunningRecognizeMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_update_time(self):
        """Gets the last_update_time of this LongRunningRecognizeMetadata.

        Output only. Time of the most recent processing update.

        :return: The last_update_time of this LongRunningRecognizeMetadata.
        :rtype: str
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this LongRunningRecognizeMetadata.

        Output only. Time of the most recent processing update.

        :param last_update_time: The last_update_time of this LongRunningRecognizeMetadata.
        :type last_update_time: str
        """

        self._last_update_time = last_update_time

    @property
    def progress_percent(self):
        """Gets the progress_percent of this LongRunningRecognizeMetadata.

        Output only. Approximate percentage of audio processed thus far. Guaranteed to be 100 when the audio is fully processed and the results are available.

        :return: The progress_percent of this LongRunningRecognizeMetadata.
        :rtype: int
        """
        return self._progress_percent

    @progress_percent.setter
    def progress_percent(self, progress_percent):
        """Sets the progress_percent of this LongRunningRecognizeMetadata.

        Output only. Approximate percentage of audio processed thus far. Guaranteed to be 100 when the audio is fully processed and the results are available.

        :param progress_percent: The progress_percent of this LongRunningRecognizeMetadata.
        :type progress_percent: int
        """

        self._progress_percent = progress_percent

    @property
    def start_time(self):
        """Gets the start_time of this LongRunningRecognizeMetadata.

        Output only. Time when the request was received.

        :return: The start_time of this LongRunningRecognizeMetadata.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this LongRunningRecognizeMetadata.

        Output only. Time when the request was received.

        :param start_time: The start_time of this LongRunningRecognizeMetadata.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def uri(self):
        """Gets the uri of this LongRunningRecognizeMetadata.

        The URI of the audio file being transcribed. Empty if the audio was sent as byte content.

        :return: The uri of this LongRunningRecognizeMetadata.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this LongRunningRecognizeMetadata.

        The URI of the audio file being transcribed. Empty if the audio was sent as byte content.

        :param uri: The uri of this LongRunningRecognizeMetadata.
        :type uri: str
        """

        self._uri = uri
