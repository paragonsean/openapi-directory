# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.speech_recognition_alternative import SpeechRecognitionAlternative
from openapi_server import util


class SpeechRecognitionResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternatives: List[SpeechRecognitionAlternative]=None, channel_tag: int=None, language_code: str=None):
        """SpeechRecognitionResult - a model defined in OpenAPI

        :param alternatives: The alternatives of this SpeechRecognitionResult.
        :param channel_tag: The channel_tag of this SpeechRecognitionResult.
        :param language_code: The language_code of this SpeechRecognitionResult.
        """
        self.openapi_types = {
            'alternatives': List[SpeechRecognitionAlternative],
            'channel_tag': int,
            'language_code': str
        }

        self.attribute_map = {
            'alternatives': 'alternatives',
            'channel_tag': 'channelTag',
            'language_code': 'languageCode'
        }

        self._alternatives = alternatives
        self._channel_tag = channel_tag
        self._language_code = language_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpeechRecognitionResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpeechRecognitionResult of this SpeechRecognitionResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternatives(self):
        """Gets the alternatives of this SpeechRecognitionResult.

        Output only. May contain one or more recognition hypotheses (up to the maximum specified in `max_alternatives`). These alternatives are ordered in terms of accuracy, with the top (first) alternative being the most probable, as ranked by the recognizer.

        :return: The alternatives of this SpeechRecognitionResult.
        :rtype: List[SpeechRecognitionAlternative]
        """
        return self._alternatives

    @alternatives.setter
    def alternatives(self, alternatives):
        """Sets the alternatives of this SpeechRecognitionResult.

        Output only. May contain one or more recognition hypotheses (up to the maximum specified in `max_alternatives`). These alternatives are ordered in terms of accuracy, with the top (first) alternative being the most probable, as ranked by the recognizer.

        :param alternatives: The alternatives of this SpeechRecognitionResult.
        :type alternatives: List[SpeechRecognitionAlternative]
        """

        self._alternatives = alternatives

    @property
    def channel_tag(self):
        """Gets the channel_tag of this SpeechRecognitionResult.

        Output only. For multi-channel audio, this is the channel number corresponding to the recognized result for the audio from that channel. For `audio_channel_count` = N, its output values can range from `1` to `N`.

        :return: The channel_tag of this SpeechRecognitionResult.
        :rtype: int
        """
        return self._channel_tag

    @channel_tag.setter
    def channel_tag(self, channel_tag):
        """Sets the channel_tag of this SpeechRecognitionResult.

        Output only. For multi-channel audio, this is the channel number corresponding to the recognized result for the audio from that channel. For `audio_channel_count` = N, its output values can range from `1` to `N`.

        :param channel_tag: The channel_tag of this SpeechRecognitionResult.
        :type channel_tag: int
        """

        self._channel_tag = channel_tag

    @property
    def language_code(self):
        """Gets the language_code of this SpeechRecognitionResult.

        Output only. The [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag of the language in this result. This language code was detected to have the most likelihood of being spoken in the audio.

        :return: The language_code of this SpeechRecognitionResult.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this SpeechRecognitionResult.

        Output only. The [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag of the language in this result. This language code was detected to have the most likelihood of being spoken in the audio.

        :param language_code: The language_code of this SpeechRecognitionResult.
        :type language_code: str
        """

        self._language_code = language_code
