/*
 * Cloud Speech-to-Text API
 * Converts audio to text by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SpeechRecognitionAlternative;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A speech recognition result corresponding to a portion of the audio.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:52.680102-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SpeechRecognitionResult {
  public static final String SERIALIZED_NAME_ALTERNATIVES = "alternatives";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVES)
  private List<SpeechRecognitionAlternative> alternatives = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHANNEL_TAG = "channelTag";
  @SerializedName(SERIALIZED_NAME_CHANNEL_TAG)
  private Integer channelTag;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_RESULT_END_TIME = "resultEndTime";
  @SerializedName(SERIALIZED_NAME_RESULT_END_TIME)
  private String resultEndTime;

  public SpeechRecognitionResult() {
  }

  public SpeechRecognitionResult(
     String languageCode
  ) {
    this();
    this.languageCode = languageCode;
  }

  public SpeechRecognitionResult alternatives(List<SpeechRecognitionAlternative> alternatives) {
    this.alternatives = alternatives;
    return this;
  }

  public SpeechRecognitionResult addAlternativesItem(SpeechRecognitionAlternative alternativesItem) {
    if (this.alternatives == null) {
      this.alternatives = new ArrayList<>();
    }
    this.alternatives.add(alternativesItem);
    return this;
  }

  /**
   * May contain one or more recognition hypotheses (up to the maximum specified in &#x60;max_alternatives&#x60;). These alternatives are ordered in terms of accuracy, with the top (first) alternative being the most probable, as ranked by the recognizer.
   * @return alternatives
   */
  @javax.annotation.Nullable
  public List<SpeechRecognitionAlternative> getAlternatives() {
    return alternatives;
  }

  public void setAlternatives(List<SpeechRecognitionAlternative> alternatives) {
    this.alternatives = alternatives;
  }


  public SpeechRecognitionResult channelTag(Integer channelTag) {
    this.channelTag = channelTag;
    return this;
  }

  /**
   * For multi-channel audio, this is the channel number corresponding to the recognized result for the audio from that channel. For audio_channel_count &#x3D; N, its output values can range from &#39;1&#39; to &#39;N&#39;.
   * @return channelTag
   */
  @javax.annotation.Nullable
  public Integer getChannelTag() {
    return channelTag;
  }

  public void setChannelTag(Integer channelTag) {
    this.channelTag = channelTag;
  }


  /**
   * Output only. The [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag of the language in this result. This language code was detected to have the most likelihood of being spoken in the audio.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }



  public SpeechRecognitionResult resultEndTime(String resultEndTime) {
    this.resultEndTime = resultEndTime;
    return this;
  }

  /**
   * Time offset of the end of this result relative to the beginning of the audio.
   * @return resultEndTime
   */
  @javax.annotation.Nullable
  public String getResultEndTime() {
    return resultEndTime;
  }

  public void setResultEndTime(String resultEndTime) {
    this.resultEndTime = resultEndTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpeechRecognitionResult speechRecognitionResult = (SpeechRecognitionResult) o;
    return Objects.equals(this.alternatives, speechRecognitionResult.alternatives) &&
        Objects.equals(this.channelTag, speechRecognitionResult.channelTag) &&
        Objects.equals(this.languageCode, speechRecognitionResult.languageCode) &&
        Objects.equals(this.resultEndTime, speechRecognitionResult.resultEndTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternatives, channelTag, languageCode, resultEndTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpeechRecognitionResult {\n");
    sb.append("    alternatives: ").append(toIndentedString(alternatives)).append("\n");
    sb.append("    channelTag: ").append(toIndentedString(channelTag)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    resultEndTime: ").append(toIndentedString(resultEndTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternatives");
    openapiFields.add("channelTag");
    openapiFields.add("languageCode");
    openapiFields.add("resultEndTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SpeechRecognitionResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SpeechRecognitionResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SpeechRecognitionResult is not found in the empty JSON string", SpeechRecognitionResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SpeechRecognitionResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SpeechRecognitionResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("alternatives") != null && !jsonObj.get("alternatives").isJsonNull()) {
        JsonArray jsonArrayalternatives = jsonObj.getAsJsonArray("alternatives");
        if (jsonArrayalternatives != null) {
          // ensure the json data is an array
          if (!jsonObj.get("alternatives").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `alternatives` to be an array in the JSON string but got `%s`", jsonObj.get("alternatives").toString()));
          }

          // validate the optional field `alternatives` (array)
          for (int i = 0; i < jsonArrayalternatives.size(); i++) {
            SpeechRecognitionAlternative.validateJsonElement(jsonArrayalternatives.get(i));
          };
        }
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      if ((jsonObj.get("resultEndTime") != null && !jsonObj.get("resultEndTime").isJsonNull()) && !jsonObj.get("resultEndTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultEndTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultEndTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SpeechRecognitionResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SpeechRecognitionResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SpeechRecognitionResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SpeechRecognitionResult.class));

       return (TypeAdapter<T>) new TypeAdapter<SpeechRecognitionResult>() {
           @Override
           public void write(JsonWriter out, SpeechRecognitionResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SpeechRecognitionResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SpeechRecognitionResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SpeechRecognitionResult
   * @throws IOException if the JSON string is invalid with respect to SpeechRecognitionResult
   */
  public static SpeechRecognitionResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SpeechRecognitionResult.class);
  }

  /**
   * Convert an instance of SpeechRecognitionResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

