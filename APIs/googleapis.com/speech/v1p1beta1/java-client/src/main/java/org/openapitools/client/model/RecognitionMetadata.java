/*
 * Cloud Speech-to-Text API
 * Converts audio to text by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Description of audio data to be recognized.
 * @deprecated
 */
@Deprecated
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:52.680102-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecognitionMetadata {
  public static final String SERIALIZED_NAME_AUDIO_TOPIC = "audioTopic";
  @SerializedName(SERIALIZED_NAME_AUDIO_TOPIC)
  private String audioTopic;

  public static final String SERIALIZED_NAME_INDUSTRY_NAICS_CODE_OF_AUDIO = "industryNaicsCodeOfAudio";
  @SerializedName(SERIALIZED_NAME_INDUSTRY_NAICS_CODE_OF_AUDIO)
  private Integer industryNaicsCodeOfAudio;

  /**
   * The use case most closely describing the audio content to be recognized.
   */
  @JsonAdapter(InteractionTypeEnum.Adapter.class)
  public enum InteractionTypeEnum {
    INTERACTION_TYPE_UNSPECIFIED("INTERACTION_TYPE_UNSPECIFIED"),
    
    DISCUSSION("DISCUSSION"),
    
    PRESENTATION("PRESENTATION"),
    
    PHONE_CALL("PHONE_CALL"),
    
    VOICEMAIL("VOICEMAIL"),
    
    PROFESSIONALLY_PRODUCED("PROFESSIONALLY_PRODUCED"),
    
    VOICE_SEARCH("VOICE_SEARCH"),
    
    VOICE_COMMAND("VOICE_COMMAND"),
    
    DICTATION("DICTATION");

    private String value;

    InteractionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InteractionTypeEnum fromValue(String value) {
      for (InteractionTypeEnum b : InteractionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InteractionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InteractionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InteractionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InteractionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InteractionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTERACTION_TYPE = "interactionType";
  @SerializedName(SERIALIZED_NAME_INTERACTION_TYPE)
  private InteractionTypeEnum interactionType;

  /**
   * The audio type that most closely describes the audio being recognized.
   */
  @JsonAdapter(MicrophoneDistanceEnum.Adapter.class)
  public enum MicrophoneDistanceEnum {
    MICROPHONE_DISTANCE_UNSPECIFIED("MICROPHONE_DISTANCE_UNSPECIFIED"),
    
    NEARFIELD("NEARFIELD"),
    
    MIDFIELD("MIDFIELD"),
    
    FARFIELD("FARFIELD");

    private String value;

    MicrophoneDistanceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MicrophoneDistanceEnum fromValue(String value) {
      for (MicrophoneDistanceEnum b : MicrophoneDistanceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MicrophoneDistanceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MicrophoneDistanceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MicrophoneDistanceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MicrophoneDistanceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MicrophoneDistanceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MICROPHONE_DISTANCE = "microphoneDistance";
  @SerializedName(SERIALIZED_NAME_MICROPHONE_DISTANCE)
  private MicrophoneDistanceEnum microphoneDistance;

  public static final String SERIALIZED_NAME_OBFUSCATED_ID = "obfuscatedId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_OBFUSCATED_ID)
  private String obfuscatedId;

  /**
   * The original media the speech was recorded on.
   */
  @JsonAdapter(OriginalMediaTypeEnum.Adapter.class)
  public enum OriginalMediaTypeEnum {
    ORIGINAL_MEDIA_TYPE_UNSPECIFIED("ORIGINAL_MEDIA_TYPE_UNSPECIFIED"),
    
    AUDIO("AUDIO"),
    
    VIDEO("VIDEO");

    private String value;

    OriginalMediaTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OriginalMediaTypeEnum fromValue(String value) {
      for (OriginalMediaTypeEnum b : OriginalMediaTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OriginalMediaTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OriginalMediaTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OriginalMediaTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OriginalMediaTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OriginalMediaTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORIGINAL_MEDIA_TYPE = "originalMediaType";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_MEDIA_TYPE)
  private OriginalMediaTypeEnum originalMediaType;

  public static final String SERIALIZED_NAME_ORIGINAL_MIME_TYPE = "originalMimeType";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_MIME_TYPE)
  private String originalMimeType;

  public static final String SERIALIZED_NAME_RECORDING_DEVICE_NAME = "recordingDeviceName";
  @SerializedName(SERIALIZED_NAME_RECORDING_DEVICE_NAME)
  private String recordingDeviceName;

  /**
   * The type of device the speech was recorded with.
   */
  @JsonAdapter(RecordingDeviceTypeEnum.Adapter.class)
  public enum RecordingDeviceTypeEnum {
    RECORDING_DEVICE_TYPE_UNSPECIFIED("RECORDING_DEVICE_TYPE_UNSPECIFIED"),
    
    SMARTPHONE("SMARTPHONE"),
    
    PC("PC"),
    
    PHONE_LINE("PHONE_LINE"),
    
    VEHICLE("VEHICLE"),
    
    OTHER_OUTDOOR_DEVICE("OTHER_OUTDOOR_DEVICE"),
    
    OTHER_INDOOR_DEVICE("OTHER_INDOOR_DEVICE");

    private String value;

    RecordingDeviceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecordingDeviceTypeEnum fromValue(String value) {
      for (RecordingDeviceTypeEnum b : RecordingDeviceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecordingDeviceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecordingDeviceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecordingDeviceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecordingDeviceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecordingDeviceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECORDING_DEVICE_TYPE = "recordingDeviceType";
  @SerializedName(SERIALIZED_NAME_RECORDING_DEVICE_TYPE)
  private RecordingDeviceTypeEnum recordingDeviceType;

  public RecognitionMetadata() {
  }

  public RecognitionMetadata audioTopic(String audioTopic) {
    this.audioTopic = audioTopic;
    return this;
  }

  /**
   * Description of the content. Eg. \&quot;Recordings of federal supreme court hearings from 2012\&quot;.
   * @return audioTopic
   */
  @javax.annotation.Nullable
  public String getAudioTopic() {
    return audioTopic;
  }

  public void setAudioTopic(String audioTopic) {
    this.audioTopic = audioTopic;
  }


  public RecognitionMetadata industryNaicsCodeOfAudio(Integer industryNaicsCodeOfAudio) {
    this.industryNaicsCodeOfAudio = industryNaicsCodeOfAudio;
    return this;
  }

  /**
   * The industry vertical to which this speech recognition request most closely applies. This is most indicative of the topics contained in the audio. Use the 6-digit NAICS code to identify the industry vertical - see https://www.naics.com/search/.
   * @return industryNaicsCodeOfAudio
   */
  @javax.annotation.Nullable
  public Integer getIndustryNaicsCodeOfAudio() {
    return industryNaicsCodeOfAudio;
  }

  public void setIndustryNaicsCodeOfAudio(Integer industryNaicsCodeOfAudio) {
    this.industryNaicsCodeOfAudio = industryNaicsCodeOfAudio;
  }


  public RecognitionMetadata interactionType(InteractionTypeEnum interactionType) {
    this.interactionType = interactionType;
    return this;
  }

  /**
   * The use case most closely describing the audio content to be recognized.
   * @return interactionType
   */
  @javax.annotation.Nullable
  public InteractionTypeEnum getInteractionType() {
    return interactionType;
  }

  public void setInteractionType(InteractionTypeEnum interactionType) {
    this.interactionType = interactionType;
  }


  public RecognitionMetadata microphoneDistance(MicrophoneDistanceEnum microphoneDistance) {
    this.microphoneDistance = microphoneDistance;
    return this;
  }

  /**
   * The audio type that most closely describes the audio being recognized.
   * @return microphoneDistance
   */
  @javax.annotation.Nullable
  public MicrophoneDistanceEnum getMicrophoneDistance() {
    return microphoneDistance;
  }

  public void setMicrophoneDistance(MicrophoneDistanceEnum microphoneDistance) {
    this.microphoneDistance = microphoneDistance;
  }


  @Deprecated
  public RecognitionMetadata obfuscatedId(String obfuscatedId) {
    this.obfuscatedId = obfuscatedId;
    return this;
  }

  /**
   * Obfuscated (privacy-protected) ID of the user, to identify number of unique users using the service.
   * @return obfuscatedId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getObfuscatedId() {
    return obfuscatedId;
  }

  @Deprecated
  public void setObfuscatedId(String obfuscatedId) {
    this.obfuscatedId = obfuscatedId;
  }


  public RecognitionMetadata originalMediaType(OriginalMediaTypeEnum originalMediaType) {
    this.originalMediaType = originalMediaType;
    return this;
  }

  /**
   * The original media the speech was recorded on.
   * @return originalMediaType
   */
  @javax.annotation.Nullable
  public OriginalMediaTypeEnum getOriginalMediaType() {
    return originalMediaType;
  }

  public void setOriginalMediaType(OriginalMediaTypeEnum originalMediaType) {
    this.originalMediaType = originalMediaType;
  }


  public RecognitionMetadata originalMimeType(String originalMimeType) {
    this.originalMimeType = originalMimeType;
    return this;
  }

  /**
   * Mime type of the original audio file. For example &#x60;audio/m4a&#x60;, &#x60;audio/x-alaw-basic&#x60;, &#x60;audio/mp3&#x60;, &#x60;audio/3gpp&#x60;. A list of possible audio mime types is maintained at http://www.iana.org/assignments/media-types/media-types.xhtml#audio
   * @return originalMimeType
   */
  @javax.annotation.Nullable
  public String getOriginalMimeType() {
    return originalMimeType;
  }

  public void setOriginalMimeType(String originalMimeType) {
    this.originalMimeType = originalMimeType;
  }


  public RecognitionMetadata recordingDeviceName(String recordingDeviceName) {
    this.recordingDeviceName = recordingDeviceName;
    return this;
  }

  /**
   * The device used to make the recording. Examples &#39;Nexus 5X&#39; or &#39;Polycom SoundStation IP 6000&#39; or &#39;POTS&#39; or &#39;VoIP&#39; or &#39;Cardioid Microphone&#39;.
   * @return recordingDeviceName
   */
  @javax.annotation.Nullable
  public String getRecordingDeviceName() {
    return recordingDeviceName;
  }

  public void setRecordingDeviceName(String recordingDeviceName) {
    this.recordingDeviceName = recordingDeviceName;
  }


  public RecognitionMetadata recordingDeviceType(RecordingDeviceTypeEnum recordingDeviceType) {
    this.recordingDeviceType = recordingDeviceType;
    return this;
  }

  /**
   * The type of device the speech was recorded with.
   * @return recordingDeviceType
   */
  @javax.annotation.Nullable
  public RecordingDeviceTypeEnum getRecordingDeviceType() {
    return recordingDeviceType;
  }

  public void setRecordingDeviceType(RecordingDeviceTypeEnum recordingDeviceType) {
    this.recordingDeviceType = recordingDeviceType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecognitionMetadata recognitionMetadata = (RecognitionMetadata) o;
    return Objects.equals(this.audioTopic, recognitionMetadata.audioTopic) &&
        Objects.equals(this.industryNaicsCodeOfAudio, recognitionMetadata.industryNaicsCodeOfAudio) &&
        Objects.equals(this.interactionType, recognitionMetadata.interactionType) &&
        Objects.equals(this.microphoneDistance, recognitionMetadata.microphoneDistance) &&
        Objects.equals(this.obfuscatedId, recognitionMetadata.obfuscatedId) &&
        Objects.equals(this.originalMediaType, recognitionMetadata.originalMediaType) &&
        Objects.equals(this.originalMimeType, recognitionMetadata.originalMimeType) &&
        Objects.equals(this.recordingDeviceName, recognitionMetadata.recordingDeviceName) &&
        Objects.equals(this.recordingDeviceType, recognitionMetadata.recordingDeviceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioTopic, industryNaicsCodeOfAudio, interactionType, microphoneDistance, obfuscatedId, originalMediaType, originalMimeType, recordingDeviceName, recordingDeviceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecognitionMetadata {\n");
    sb.append("    audioTopic: ").append(toIndentedString(audioTopic)).append("\n");
    sb.append("    industryNaicsCodeOfAudio: ").append(toIndentedString(industryNaicsCodeOfAudio)).append("\n");
    sb.append("    interactionType: ").append(toIndentedString(interactionType)).append("\n");
    sb.append("    microphoneDistance: ").append(toIndentedString(microphoneDistance)).append("\n");
    sb.append("    obfuscatedId: ").append(toIndentedString(obfuscatedId)).append("\n");
    sb.append("    originalMediaType: ").append(toIndentedString(originalMediaType)).append("\n");
    sb.append("    originalMimeType: ").append(toIndentedString(originalMimeType)).append("\n");
    sb.append("    recordingDeviceName: ").append(toIndentedString(recordingDeviceName)).append("\n");
    sb.append("    recordingDeviceType: ").append(toIndentedString(recordingDeviceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audioTopic");
    openapiFields.add("industryNaicsCodeOfAudio");
    openapiFields.add("interactionType");
    openapiFields.add("microphoneDistance");
    openapiFields.add("obfuscatedId");
    openapiFields.add("originalMediaType");
    openapiFields.add("originalMimeType");
    openapiFields.add("recordingDeviceName");
    openapiFields.add("recordingDeviceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecognitionMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecognitionMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecognitionMetadata is not found in the empty JSON string", RecognitionMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecognitionMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecognitionMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("audioTopic") != null && !jsonObj.get("audioTopic").isJsonNull()) && !jsonObj.get("audioTopic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audioTopic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audioTopic").toString()));
      }
      if ((jsonObj.get("interactionType") != null && !jsonObj.get("interactionType").isJsonNull()) && !jsonObj.get("interactionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interactionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interactionType").toString()));
      }
      // validate the optional field `interactionType`
      if (jsonObj.get("interactionType") != null && !jsonObj.get("interactionType").isJsonNull()) {
        InteractionTypeEnum.validateJsonElement(jsonObj.get("interactionType"));
      }
      if ((jsonObj.get("microphoneDistance") != null && !jsonObj.get("microphoneDistance").isJsonNull()) && !jsonObj.get("microphoneDistance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `microphoneDistance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("microphoneDistance").toString()));
      }
      // validate the optional field `microphoneDistance`
      if (jsonObj.get("microphoneDistance") != null && !jsonObj.get("microphoneDistance").isJsonNull()) {
        MicrophoneDistanceEnum.validateJsonElement(jsonObj.get("microphoneDistance"));
      }
      if ((jsonObj.get("obfuscatedId") != null && !jsonObj.get("obfuscatedId").isJsonNull()) && !jsonObj.get("obfuscatedId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `obfuscatedId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("obfuscatedId").toString()));
      }
      if ((jsonObj.get("originalMediaType") != null && !jsonObj.get("originalMediaType").isJsonNull()) && !jsonObj.get("originalMediaType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalMediaType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalMediaType").toString()));
      }
      // validate the optional field `originalMediaType`
      if (jsonObj.get("originalMediaType") != null && !jsonObj.get("originalMediaType").isJsonNull()) {
        OriginalMediaTypeEnum.validateJsonElement(jsonObj.get("originalMediaType"));
      }
      if ((jsonObj.get("originalMimeType") != null && !jsonObj.get("originalMimeType").isJsonNull()) && !jsonObj.get("originalMimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalMimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalMimeType").toString()));
      }
      if ((jsonObj.get("recordingDeviceName") != null && !jsonObj.get("recordingDeviceName").isJsonNull()) && !jsonObj.get("recordingDeviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordingDeviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recordingDeviceName").toString()));
      }
      if ((jsonObj.get("recordingDeviceType") != null && !jsonObj.get("recordingDeviceType").isJsonNull()) && !jsonObj.get("recordingDeviceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordingDeviceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recordingDeviceType").toString()));
      }
      // validate the optional field `recordingDeviceType`
      if (jsonObj.get("recordingDeviceType") != null && !jsonObj.get("recordingDeviceType").isJsonNull()) {
        RecordingDeviceTypeEnum.validateJsonElement(jsonObj.get("recordingDeviceType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecognitionMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecognitionMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecognitionMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecognitionMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<RecognitionMetadata>() {
           @Override
           public void write(JsonWriter out, RecognitionMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecognitionMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecognitionMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecognitionMetadata
   * @throws IOException if the JSON string is invalid with respect to RecognitionMetadata
   */
  public static RecognitionMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecognitionMetadata.class);
  }

  /**
   * Convert an instance of RecognitionMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

