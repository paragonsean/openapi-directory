/**
 * Cloud Speech-to-Text API
 * Converts audio to text by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Entry from './Entry';

/**
 * The TranscriptNormalization model module.
 * @module model/TranscriptNormalization
 * @version v1p1beta1
 */
class TranscriptNormalization {
    /**
     * Constructs a new <code>TranscriptNormalization</code>.
     * Transcription normalization configuration. Use transcription normalization to automatically replace parts of the transcript with phrases of your choosing. For StreamingRecognize, this normalization only applies to stable partial transcripts (stability &gt; 0.8) and final transcripts.
     * @alias module:model/TranscriptNormalization
     */
    constructor() { 
        
        TranscriptNormalization.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TranscriptNormalization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TranscriptNormalization} obj Optional instance to populate.
     * @return {module:model/TranscriptNormalization} The populated <code>TranscriptNormalization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TranscriptNormalization();

            if (data.hasOwnProperty('entries')) {
                obj['entries'] = ApiClient.convertToType(data['entries'], [Entry]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TranscriptNormalization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TranscriptNormalization</code>.
     */
    static validateJSON(data) {
        if (data['entries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entries'])) {
                throw new Error("Expected the field `entries` to be an array in the JSON data but got " + data['entries']);
            }
            // validate the optional field `entries` (array)
            for (const item of data['entries']) {
                Entry.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A list of replacement entries. We will perform replacement with one entry at a time. For example, the second entry in [\"cat\" => \"dog\", \"mountain cat\" => \"mountain dog\"] will never be applied because we will always process the first entry before it. At most 100 entries.
 * @member {Array.<module:model/Entry>} entries
 */
TranscriptNormalization.prototype['entries'] = undefined;






export default TranscriptNormalization;

