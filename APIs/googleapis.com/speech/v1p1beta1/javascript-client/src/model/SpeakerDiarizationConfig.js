/**
 * Cloud Speech-to-Text API
 * Converts audio to text by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SpeakerDiarizationConfig model module.
 * @module model/SpeakerDiarizationConfig
 * @version v1p1beta1
 */
class SpeakerDiarizationConfig {
    /**
     * Constructs a new <code>SpeakerDiarizationConfig</code>.
     * Config to enable speaker diarization.
     * @alias module:model/SpeakerDiarizationConfig
     */
    constructor() { 
        
        SpeakerDiarizationConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SpeakerDiarizationConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SpeakerDiarizationConfig} obj Optional instance to populate.
     * @return {module:model/SpeakerDiarizationConfig} The populated <code>SpeakerDiarizationConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SpeakerDiarizationConfig();

            if (data.hasOwnProperty('enableSpeakerDiarization')) {
                obj['enableSpeakerDiarization'] = ApiClient.convertToType(data['enableSpeakerDiarization'], 'Boolean');
            }
            if (data.hasOwnProperty('maxSpeakerCount')) {
                obj['maxSpeakerCount'] = ApiClient.convertToType(data['maxSpeakerCount'], 'Number');
            }
            if (data.hasOwnProperty('minSpeakerCount')) {
                obj['minSpeakerCount'] = ApiClient.convertToType(data['minSpeakerCount'], 'Number');
            }
            if (data.hasOwnProperty('speakerTag')) {
                obj['speakerTag'] = ApiClient.convertToType(data['speakerTag'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SpeakerDiarizationConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SpeakerDiarizationConfig</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * If 'true', enables speaker detection for each recognized word in the top alternative of the recognition result using a speaker_label provided in the WordInfo.
 * @member {Boolean} enableSpeakerDiarization
 */
SpeakerDiarizationConfig.prototype['enableSpeakerDiarization'] = undefined;

/**
 * Maximum number of speakers in the conversation. This range gives you more flexibility by allowing the system to automatically determine the correct number of speakers. If not set, the default value is 6.
 * @member {Number} maxSpeakerCount
 */
SpeakerDiarizationConfig.prototype['maxSpeakerCount'] = undefined;

/**
 * Minimum number of speakers in the conversation. This range gives you more flexibility by allowing the system to automatically determine the correct number of speakers. If not set, the default value is 2.
 * @member {Number} minSpeakerCount
 */
SpeakerDiarizationConfig.prototype['minSpeakerCount'] = undefined;

/**
 * Output only. Unused.
 * @member {Number} speakerTag
 */
SpeakerDiarizationConfig.prototype['speakerTag'] = undefined;






export default SpeakerDiarizationConfig;

