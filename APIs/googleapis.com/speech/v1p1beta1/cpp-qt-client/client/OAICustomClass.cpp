/**
 * Cloud Speech-to-Text API
 * Converts audio to text by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomClass.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomClass::OAICustomClass(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomClass::OAICustomClass() {
    this->initializeModel();
}

OAICustomClass::~OAICustomClass() {}

void OAICustomClass::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_custom_class_id_isSet = false;
    m_custom_class_id_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_kms_key_name_isSet = false;
    m_kms_key_name_isValid = false;

    m_kms_key_version_name_isSet = false;
    m_kms_key_version_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reconciling_isSet = false;
    m_reconciling_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAICustomClass::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomClass::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_custom_class_id_isValid = ::OpenAPI::fromJsonValue(m_custom_class_id, json[QString("customClassId")]);
    m_custom_class_id_isSet = !json[QString("customClassId")].isNull() && m_custom_class_id_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_kms_key_name_isValid = ::OpenAPI::fromJsonValue(m_kms_key_name, json[QString("kmsKeyName")]);
    m_kms_key_name_isSet = !json[QString("kmsKeyName")].isNull() && m_kms_key_name_isValid;

    m_kms_key_version_name_isValid = ::OpenAPI::fromJsonValue(m_kms_key_version_name, json[QString("kmsKeyVersionName")]);
    m_kms_key_version_name_isSet = !json[QString("kmsKeyVersionName")].isNull() && m_kms_key_version_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reconciling_isValid = ::OpenAPI::fromJsonValue(m_reconciling, json[QString("reconciling")]);
    m_reconciling_isSet = !json[QString("reconciling")].isNull() && m_reconciling_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAICustomClass::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomClass::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_custom_class_id_isSet) {
        obj.insert(QString("customClassId"), ::OpenAPI::toJsonValue(m_custom_class_id));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_kms_key_name_isSet) {
        obj.insert(QString("kmsKeyName"), ::OpenAPI::toJsonValue(m_kms_key_name));
    }
    if (m_kms_key_version_name_isSet) {
        obj.insert(QString("kmsKeyVersionName"), ::OpenAPI::toJsonValue(m_kms_key_version_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reconciling_isSet) {
        obj.insert(QString("reconciling"), ::OpenAPI::toJsonValue(m_reconciling));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

QMap<QString, QString> OAICustomClass::getAnnotations() const {
    return m_annotations;
}
void OAICustomClass::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAICustomClass::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAICustomClass::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QString OAICustomClass::getCustomClassId() const {
    return m_custom_class_id;
}
void OAICustomClass::setCustomClassId(const QString &custom_class_id) {
    m_custom_class_id = custom_class_id;
    m_custom_class_id_isSet = true;
}

bool OAICustomClass::is_custom_class_id_Set() const{
    return m_custom_class_id_isSet;
}

bool OAICustomClass::is_custom_class_id_Valid() const{
    return m_custom_class_id_isValid;
}

QString OAICustomClass::getDeleteTime() const {
    return m_delete_time;
}
void OAICustomClass::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAICustomClass::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAICustomClass::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

QString OAICustomClass::getDisplayName() const {
    return m_display_name;
}
void OAICustomClass::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICustomClass::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICustomClass::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAICustomClass::getEtag() const {
    return m_etag;
}
void OAICustomClass::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAICustomClass::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAICustomClass::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAICustomClass::getExpireTime() const {
    return m_expire_time;
}
void OAICustomClass::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAICustomClass::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAICustomClass::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QList<OAIClassItem> OAICustomClass::getItems() const {
    return m_items;
}
void OAICustomClass::setItems(const QList<OAIClassItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAICustomClass::is_items_Set() const{
    return m_items_isSet;
}

bool OAICustomClass::is_items_Valid() const{
    return m_items_isValid;
}

QString OAICustomClass::getKmsKeyName() const {
    return m_kms_key_name;
}
void OAICustomClass::setKmsKeyName(const QString &kms_key_name) {
    m_kms_key_name = kms_key_name;
    m_kms_key_name_isSet = true;
}

bool OAICustomClass::is_kms_key_name_Set() const{
    return m_kms_key_name_isSet;
}

bool OAICustomClass::is_kms_key_name_Valid() const{
    return m_kms_key_name_isValid;
}

QString OAICustomClass::getKmsKeyVersionName() const {
    return m_kms_key_version_name;
}
void OAICustomClass::setKmsKeyVersionName(const QString &kms_key_version_name) {
    m_kms_key_version_name = kms_key_version_name;
    m_kms_key_version_name_isSet = true;
}

bool OAICustomClass::is_kms_key_version_name_Set() const{
    return m_kms_key_version_name_isSet;
}

bool OAICustomClass::is_kms_key_version_name_Valid() const{
    return m_kms_key_version_name_isValid;
}

QString OAICustomClass::getName() const {
    return m_name;
}
void OAICustomClass::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomClass::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomClass::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICustomClass::isReconciling() const {
    return m_reconciling;
}
void OAICustomClass::setReconciling(const bool &reconciling) {
    m_reconciling = reconciling;
    m_reconciling_isSet = true;
}

bool OAICustomClass::is_reconciling_Set() const{
    return m_reconciling_isSet;
}

bool OAICustomClass::is_reconciling_Valid() const{
    return m_reconciling_isValid;
}

QString OAICustomClass::getState() const {
    return m_state;
}
void OAICustomClass::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICustomClass::is_state_Set() const{
    return m_state_isSet;
}

bool OAICustomClass::is_state_Valid() const{
    return m_state_isValid;
}

QString OAICustomClass::getUid() const {
    return m_uid;
}
void OAICustomClass::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAICustomClass::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAICustomClass::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAICustomClass::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_class_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_version_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomClass::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
