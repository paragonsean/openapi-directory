/**
 * Cloud Speech-to-Text API
 * Converts audio to text by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecognitionMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecognitionMetadata::OAIRecognitionMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecognitionMetadata::OAIRecognitionMetadata() {
    this->initializeModel();
}

OAIRecognitionMetadata::~OAIRecognitionMetadata() {}

void OAIRecognitionMetadata::initializeModel() {

    m_audio_topic_isSet = false;
    m_audio_topic_isValid = false;

    m_industry_naics_code_of_audio_isSet = false;
    m_industry_naics_code_of_audio_isValid = false;

    m_interaction_type_isSet = false;
    m_interaction_type_isValid = false;

    m_microphone_distance_isSet = false;
    m_microphone_distance_isValid = false;

    m_obfuscated_id_isSet = false;
    m_obfuscated_id_isValid = false;

    m_original_media_type_isSet = false;
    m_original_media_type_isValid = false;

    m_original_mime_type_isSet = false;
    m_original_mime_type_isValid = false;

    m_recording_device_name_isSet = false;
    m_recording_device_name_isValid = false;

    m_recording_device_type_isSet = false;
    m_recording_device_type_isValid = false;
}

void OAIRecognitionMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecognitionMetadata::fromJsonObject(QJsonObject json) {

    m_audio_topic_isValid = ::OpenAPI::fromJsonValue(m_audio_topic, json[QString("audioTopic")]);
    m_audio_topic_isSet = !json[QString("audioTopic")].isNull() && m_audio_topic_isValid;

    m_industry_naics_code_of_audio_isValid = ::OpenAPI::fromJsonValue(m_industry_naics_code_of_audio, json[QString("industryNaicsCodeOfAudio")]);
    m_industry_naics_code_of_audio_isSet = !json[QString("industryNaicsCodeOfAudio")].isNull() && m_industry_naics_code_of_audio_isValid;

    m_interaction_type_isValid = ::OpenAPI::fromJsonValue(m_interaction_type, json[QString("interactionType")]);
    m_interaction_type_isSet = !json[QString("interactionType")].isNull() && m_interaction_type_isValid;

    m_microphone_distance_isValid = ::OpenAPI::fromJsonValue(m_microphone_distance, json[QString("microphoneDistance")]);
    m_microphone_distance_isSet = !json[QString("microphoneDistance")].isNull() && m_microphone_distance_isValid;

    m_obfuscated_id_isValid = ::OpenAPI::fromJsonValue(m_obfuscated_id, json[QString("obfuscatedId")]);
    m_obfuscated_id_isSet = !json[QString("obfuscatedId")].isNull() && m_obfuscated_id_isValid;

    m_original_media_type_isValid = ::OpenAPI::fromJsonValue(m_original_media_type, json[QString("originalMediaType")]);
    m_original_media_type_isSet = !json[QString("originalMediaType")].isNull() && m_original_media_type_isValid;

    m_original_mime_type_isValid = ::OpenAPI::fromJsonValue(m_original_mime_type, json[QString("originalMimeType")]);
    m_original_mime_type_isSet = !json[QString("originalMimeType")].isNull() && m_original_mime_type_isValid;

    m_recording_device_name_isValid = ::OpenAPI::fromJsonValue(m_recording_device_name, json[QString("recordingDeviceName")]);
    m_recording_device_name_isSet = !json[QString("recordingDeviceName")].isNull() && m_recording_device_name_isValid;

    m_recording_device_type_isValid = ::OpenAPI::fromJsonValue(m_recording_device_type, json[QString("recordingDeviceType")]);
    m_recording_device_type_isSet = !json[QString("recordingDeviceType")].isNull() && m_recording_device_type_isValid;
}

QString OAIRecognitionMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecognitionMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_topic_isSet) {
        obj.insert(QString("audioTopic"), ::OpenAPI::toJsonValue(m_audio_topic));
    }
    if (m_industry_naics_code_of_audio_isSet) {
        obj.insert(QString("industryNaicsCodeOfAudio"), ::OpenAPI::toJsonValue(m_industry_naics_code_of_audio));
    }
    if (m_interaction_type_isSet) {
        obj.insert(QString("interactionType"), ::OpenAPI::toJsonValue(m_interaction_type));
    }
    if (m_microphone_distance_isSet) {
        obj.insert(QString("microphoneDistance"), ::OpenAPI::toJsonValue(m_microphone_distance));
    }
    if (m_obfuscated_id_isSet) {
        obj.insert(QString("obfuscatedId"), ::OpenAPI::toJsonValue(m_obfuscated_id));
    }
    if (m_original_media_type_isSet) {
        obj.insert(QString("originalMediaType"), ::OpenAPI::toJsonValue(m_original_media_type));
    }
    if (m_original_mime_type_isSet) {
        obj.insert(QString("originalMimeType"), ::OpenAPI::toJsonValue(m_original_mime_type));
    }
    if (m_recording_device_name_isSet) {
        obj.insert(QString("recordingDeviceName"), ::OpenAPI::toJsonValue(m_recording_device_name));
    }
    if (m_recording_device_type_isSet) {
        obj.insert(QString("recordingDeviceType"), ::OpenAPI::toJsonValue(m_recording_device_type));
    }
    return obj;
}

QString OAIRecognitionMetadata::getAudioTopic() const {
    return m_audio_topic;
}
void OAIRecognitionMetadata::setAudioTopic(const QString &audio_topic) {
    m_audio_topic = audio_topic;
    m_audio_topic_isSet = true;
}

bool OAIRecognitionMetadata::is_audio_topic_Set() const{
    return m_audio_topic_isSet;
}

bool OAIRecognitionMetadata::is_audio_topic_Valid() const{
    return m_audio_topic_isValid;
}

qint32 OAIRecognitionMetadata::getIndustryNaicsCodeOfAudio() const {
    return m_industry_naics_code_of_audio;
}
void OAIRecognitionMetadata::setIndustryNaicsCodeOfAudio(const qint32 &industry_naics_code_of_audio) {
    m_industry_naics_code_of_audio = industry_naics_code_of_audio;
    m_industry_naics_code_of_audio_isSet = true;
}

bool OAIRecognitionMetadata::is_industry_naics_code_of_audio_Set() const{
    return m_industry_naics_code_of_audio_isSet;
}

bool OAIRecognitionMetadata::is_industry_naics_code_of_audio_Valid() const{
    return m_industry_naics_code_of_audio_isValid;
}

QString OAIRecognitionMetadata::getInteractionType() const {
    return m_interaction_type;
}
void OAIRecognitionMetadata::setInteractionType(const QString &interaction_type) {
    m_interaction_type = interaction_type;
    m_interaction_type_isSet = true;
}

bool OAIRecognitionMetadata::is_interaction_type_Set() const{
    return m_interaction_type_isSet;
}

bool OAIRecognitionMetadata::is_interaction_type_Valid() const{
    return m_interaction_type_isValid;
}

QString OAIRecognitionMetadata::getMicrophoneDistance() const {
    return m_microphone_distance;
}
void OAIRecognitionMetadata::setMicrophoneDistance(const QString &microphone_distance) {
    m_microphone_distance = microphone_distance;
    m_microphone_distance_isSet = true;
}

bool OAIRecognitionMetadata::is_microphone_distance_Set() const{
    return m_microphone_distance_isSet;
}

bool OAIRecognitionMetadata::is_microphone_distance_Valid() const{
    return m_microphone_distance_isValid;
}

QString OAIRecognitionMetadata::getObfuscatedId() const {
    return m_obfuscated_id;
}
void OAIRecognitionMetadata::setObfuscatedId(const QString &obfuscated_id) {
    m_obfuscated_id = obfuscated_id;
    m_obfuscated_id_isSet = true;
}

bool OAIRecognitionMetadata::is_obfuscated_id_Set() const{
    return m_obfuscated_id_isSet;
}

bool OAIRecognitionMetadata::is_obfuscated_id_Valid() const{
    return m_obfuscated_id_isValid;
}

QString OAIRecognitionMetadata::getOriginalMediaType() const {
    return m_original_media_type;
}
void OAIRecognitionMetadata::setOriginalMediaType(const QString &original_media_type) {
    m_original_media_type = original_media_type;
    m_original_media_type_isSet = true;
}

bool OAIRecognitionMetadata::is_original_media_type_Set() const{
    return m_original_media_type_isSet;
}

bool OAIRecognitionMetadata::is_original_media_type_Valid() const{
    return m_original_media_type_isValid;
}

QString OAIRecognitionMetadata::getOriginalMimeType() const {
    return m_original_mime_type;
}
void OAIRecognitionMetadata::setOriginalMimeType(const QString &original_mime_type) {
    m_original_mime_type = original_mime_type;
    m_original_mime_type_isSet = true;
}

bool OAIRecognitionMetadata::is_original_mime_type_Set() const{
    return m_original_mime_type_isSet;
}

bool OAIRecognitionMetadata::is_original_mime_type_Valid() const{
    return m_original_mime_type_isValid;
}

QString OAIRecognitionMetadata::getRecordingDeviceName() const {
    return m_recording_device_name;
}
void OAIRecognitionMetadata::setRecordingDeviceName(const QString &recording_device_name) {
    m_recording_device_name = recording_device_name;
    m_recording_device_name_isSet = true;
}

bool OAIRecognitionMetadata::is_recording_device_name_Set() const{
    return m_recording_device_name_isSet;
}

bool OAIRecognitionMetadata::is_recording_device_name_Valid() const{
    return m_recording_device_name_isValid;
}

QString OAIRecognitionMetadata::getRecordingDeviceType() const {
    return m_recording_device_type;
}
void OAIRecognitionMetadata::setRecordingDeviceType(const QString &recording_device_type) {
    m_recording_device_type = recording_device_type;
    m_recording_device_type_isSet = true;
}

bool OAIRecognitionMetadata::is_recording_device_type_Set() const{
    return m_recording_device_type_isSet;
}

bool OAIRecognitionMetadata::is_recording_device_type_Valid() const{
    return m_recording_device_type_isValid;
}

bool OAIRecognitionMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_industry_naics_code_of_audio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interaction_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_microphone_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_obfuscated_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recording_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recording_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecognitionMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
