/**
 * Cloud Speech-to-Text API
 * Converts audio to text by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWordInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWordInfo::OAIWordInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWordInfo::OAIWordInfo() {
    this->initializeModel();
}

OAIWordInfo::~OAIWordInfo() {}

void OAIWordInfo::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_speaker_label_isSet = false;
    m_speaker_label_isValid = false;

    m_speaker_tag_isSet = false;
    m_speaker_tag_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_word_isSet = false;
    m_word_isValid = false;
}

void OAIWordInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWordInfo::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_speaker_label_isValid = ::OpenAPI::fromJsonValue(m_speaker_label, json[QString("speakerLabel")]);
    m_speaker_label_isSet = !json[QString("speakerLabel")].isNull() && m_speaker_label_isValid;

    m_speaker_tag_isValid = ::OpenAPI::fromJsonValue(m_speaker_tag, json[QString("speakerTag")]);
    m_speaker_tag_isSet = !json[QString("speakerTag")].isNull() && m_speaker_tag_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_word_isValid = ::OpenAPI::fromJsonValue(m_word, json[QString("word")]);
    m_word_isSet = !json[QString("word")].isNull() && m_word_isValid;
}

QString OAIWordInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWordInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_speaker_label_isSet) {
        obj.insert(QString("speakerLabel"), ::OpenAPI::toJsonValue(m_speaker_label));
    }
    if (m_speaker_tag_isSet) {
        obj.insert(QString("speakerTag"), ::OpenAPI::toJsonValue(m_speaker_tag));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_word_isSet) {
        obj.insert(QString("word"), ::OpenAPI::toJsonValue(m_word));
    }
    return obj;
}

float OAIWordInfo::getConfidence() const {
    return m_confidence;
}
void OAIWordInfo::setConfidence(const float &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIWordInfo::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIWordInfo::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAIWordInfo::getEndTime() const {
    return m_end_time;
}
void OAIWordInfo::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIWordInfo::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIWordInfo::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIWordInfo::getSpeakerLabel() const {
    return m_speaker_label;
}
void OAIWordInfo::setSpeakerLabel(const QString &speaker_label) {
    m_speaker_label = speaker_label;
    m_speaker_label_isSet = true;
}

bool OAIWordInfo::is_speaker_label_Set() const{
    return m_speaker_label_isSet;
}

bool OAIWordInfo::is_speaker_label_Valid() const{
    return m_speaker_label_isValid;
}

qint32 OAIWordInfo::getSpeakerTag() const {
    return m_speaker_tag;
}
void OAIWordInfo::setSpeakerTag(const qint32 &speaker_tag) {
    m_speaker_tag = speaker_tag;
    m_speaker_tag_isSet = true;
}

bool OAIWordInfo::is_speaker_tag_Set() const{
    return m_speaker_tag_isSet;
}

bool OAIWordInfo::is_speaker_tag_Valid() const{
    return m_speaker_tag_isValid;
}

QString OAIWordInfo::getStartTime() const {
    return m_start_time;
}
void OAIWordInfo::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIWordInfo::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIWordInfo::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIWordInfo::getWord() const {
    return m_word;
}
void OAIWordInfo::setWord(const QString &word) {
    m_word = word;
    m_word_isSet = true;
}

bool OAIWordInfo::is_word_Set() const{
    return m_word_isSet;
}

bool OAIWordInfo::is_word_Valid() const{
    return m_word_isValid;
}

bool OAIWordInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speaker_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speaker_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWordInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
