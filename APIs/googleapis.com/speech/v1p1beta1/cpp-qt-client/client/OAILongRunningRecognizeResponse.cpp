/**
 * Cloud Speech-to-Text API
 * Converts audio to text by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILongRunningRecognizeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILongRunningRecognizeResponse::OAILongRunningRecognizeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILongRunningRecognizeResponse::OAILongRunningRecognizeResponse() {
    this->initializeModel();
}

OAILongRunningRecognizeResponse::~OAILongRunningRecognizeResponse() {}

void OAILongRunningRecognizeResponse::initializeModel() {

    m_output_config_isSet = false;
    m_output_config_isValid = false;

    m_output_error_isSet = false;
    m_output_error_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_speech_adaptation_info_isSet = false;
    m_speech_adaptation_info_isValid = false;

    m_total_billed_time_isSet = false;
    m_total_billed_time_isValid = false;
}

void OAILongRunningRecognizeResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILongRunningRecognizeResponse::fromJsonObject(QJsonObject json) {

    m_output_config_isValid = ::OpenAPI::fromJsonValue(m_output_config, json[QString("outputConfig")]);
    m_output_config_isSet = !json[QString("outputConfig")].isNull() && m_output_config_isValid;

    m_output_error_isValid = ::OpenAPI::fromJsonValue(m_output_error, json[QString("outputError")]);
    m_output_error_isSet = !json[QString("outputError")].isNull() && m_output_error_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_speech_adaptation_info_isValid = ::OpenAPI::fromJsonValue(m_speech_adaptation_info, json[QString("speechAdaptationInfo")]);
    m_speech_adaptation_info_isSet = !json[QString("speechAdaptationInfo")].isNull() && m_speech_adaptation_info_isValid;

    m_total_billed_time_isValid = ::OpenAPI::fromJsonValue(m_total_billed_time, json[QString("totalBilledTime")]);
    m_total_billed_time_isSet = !json[QString("totalBilledTime")].isNull() && m_total_billed_time_isValid;
}

QString OAILongRunningRecognizeResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILongRunningRecognizeResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_output_config.isSet()) {
        obj.insert(QString("outputConfig"), ::OpenAPI::toJsonValue(m_output_config));
    }
    if (m_output_error.isSet()) {
        obj.insert(QString("outputError"), ::OpenAPI::toJsonValue(m_output_error));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_speech_adaptation_info.isSet()) {
        obj.insert(QString("speechAdaptationInfo"), ::OpenAPI::toJsonValue(m_speech_adaptation_info));
    }
    if (m_total_billed_time_isSet) {
        obj.insert(QString("totalBilledTime"), ::OpenAPI::toJsonValue(m_total_billed_time));
    }
    return obj;
}

OAITranscriptOutputConfig OAILongRunningRecognizeResponse::getOutputConfig() const {
    return m_output_config;
}
void OAILongRunningRecognizeResponse::setOutputConfig(const OAITranscriptOutputConfig &output_config) {
    m_output_config = output_config;
    m_output_config_isSet = true;
}

bool OAILongRunningRecognizeResponse::is_output_config_Set() const{
    return m_output_config_isSet;
}

bool OAILongRunningRecognizeResponse::is_output_config_Valid() const{
    return m_output_config_isValid;
}

OAIStatus OAILongRunningRecognizeResponse::getOutputError() const {
    return m_output_error;
}
void OAILongRunningRecognizeResponse::setOutputError(const OAIStatus &output_error) {
    m_output_error = output_error;
    m_output_error_isSet = true;
}

bool OAILongRunningRecognizeResponse::is_output_error_Set() const{
    return m_output_error_isSet;
}

bool OAILongRunningRecognizeResponse::is_output_error_Valid() const{
    return m_output_error_isValid;
}

QString OAILongRunningRecognizeResponse::getRequestId() const {
    return m_request_id;
}
void OAILongRunningRecognizeResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAILongRunningRecognizeResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAILongRunningRecognizeResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QList<OAISpeechRecognitionResult> OAILongRunningRecognizeResponse::getResults() const {
    return m_results;
}
void OAILongRunningRecognizeResponse::setResults(const QList<OAISpeechRecognitionResult> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAILongRunningRecognizeResponse::is_results_Set() const{
    return m_results_isSet;
}

bool OAILongRunningRecognizeResponse::is_results_Valid() const{
    return m_results_isValid;
}

OAISpeechAdaptationInfo OAILongRunningRecognizeResponse::getSpeechAdaptationInfo() const {
    return m_speech_adaptation_info;
}
void OAILongRunningRecognizeResponse::setSpeechAdaptationInfo(const OAISpeechAdaptationInfo &speech_adaptation_info) {
    m_speech_adaptation_info = speech_adaptation_info;
    m_speech_adaptation_info_isSet = true;
}

bool OAILongRunningRecognizeResponse::is_speech_adaptation_info_Set() const{
    return m_speech_adaptation_info_isSet;
}

bool OAILongRunningRecognizeResponse::is_speech_adaptation_info_Valid() const{
    return m_speech_adaptation_info_isValid;
}

QString OAILongRunningRecognizeResponse::getTotalBilledTime() const {
    return m_total_billed_time;
}
void OAILongRunningRecognizeResponse::setTotalBilledTime(const QString &total_billed_time) {
    m_total_billed_time = total_billed_time;
    m_total_billed_time_isSet = true;
}

bool OAILongRunningRecognizeResponse::is_total_billed_time_Set() const{
    return m_total_billed_time_isSet;
}

bool OAILongRunningRecognizeResponse::is_total_billed_time_Valid() const{
    return m_total_billed_time_isValid;
}

bool OAILongRunningRecognizeResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_output_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_speech_adaptation_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_billed_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILongRunningRecognizeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
