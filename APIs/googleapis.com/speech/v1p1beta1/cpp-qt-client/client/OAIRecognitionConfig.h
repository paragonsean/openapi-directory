/**
 * Cloud Speech-to-Text API
 * Converts audio to text by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRecognitionConfig.h
 *
 * Provides information to the recognizer that specifies how to process the request.
 */

#ifndef OAIRecognitionConfig_H
#define OAIRecognitionConfig_H

#include <QJsonObject>

#include "OAIRecognitionMetadata.h"
#include "OAISpeakerDiarizationConfig.h"
#include "OAISpeechAdaptation.h"
#include "OAISpeechContext.h"
#include "OAITranscriptNormalization.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISpeechAdaptation;
class OAISpeakerDiarizationConfig;
class OAIRecognitionMetadata;
class OAISpeechContext;
class OAITranscriptNormalization;

class OAIRecognitionConfig : public OAIObject {
public:
    OAIRecognitionConfig();
    OAIRecognitionConfig(QString json);
    ~OAIRecognitionConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISpeechAdaptation getAdaptation() const;
    void setAdaptation(const OAISpeechAdaptation &adaptation);
    bool is_adaptation_Set() const;
    bool is_adaptation_Valid() const;

    QList<QString> getAlternativeLanguageCodes() const;
    void setAlternativeLanguageCodes(const QList<QString> &alternative_language_codes);
    bool is_alternative_language_codes_Set() const;
    bool is_alternative_language_codes_Valid() const;

    qint32 getAudioChannelCount() const;
    void setAudioChannelCount(const qint32 &audio_channel_count);
    bool is_audio_channel_count_Set() const;
    bool is_audio_channel_count_Valid() const;

    OAISpeakerDiarizationConfig getDiarizationConfig() const;
    void setDiarizationConfig(const OAISpeakerDiarizationConfig &diarization_config);
    bool is_diarization_config_Set() const;
    bool is_diarization_config_Valid() const;

    Q_DECL_DEPRECATED qint32 getDiarizationSpeakerCount() const;
    Q_DECL_DEPRECATED void setDiarizationSpeakerCount(const qint32 &diarization_speaker_count);
    Q_DECL_DEPRECATED bool is_diarization_speaker_count_Set() const;
    Q_DECL_DEPRECATED bool is_diarization_speaker_count_Valid() const;

    bool isEnableAutomaticPunctuation() const;
    void setEnableAutomaticPunctuation(const bool &enable_automatic_punctuation);
    bool is_enable_automatic_punctuation_Set() const;
    bool is_enable_automatic_punctuation_Valid() const;

    bool isEnableSeparateRecognitionPerChannel() const;
    void setEnableSeparateRecognitionPerChannel(const bool &enable_separate_recognition_per_channel);
    bool is_enable_separate_recognition_per_channel_Set() const;
    bool is_enable_separate_recognition_per_channel_Valid() const;

    Q_DECL_DEPRECATED bool isEnableSpeakerDiarization() const;
    Q_DECL_DEPRECATED void setEnableSpeakerDiarization(const bool &enable_speaker_diarization);
    Q_DECL_DEPRECATED bool is_enable_speaker_diarization_Set() const;
    Q_DECL_DEPRECATED bool is_enable_speaker_diarization_Valid() const;

    bool isEnableSpokenEmojis() const;
    void setEnableSpokenEmojis(const bool &enable_spoken_emojis);
    bool is_enable_spoken_emojis_Set() const;
    bool is_enable_spoken_emojis_Valid() const;

    bool isEnableSpokenPunctuation() const;
    void setEnableSpokenPunctuation(const bool &enable_spoken_punctuation);
    bool is_enable_spoken_punctuation_Set() const;
    bool is_enable_spoken_punctuation_Valid() const;

    bool isEnableWordConfidence() const;
    void setEnableWordConfidence(const bool &enable_word_confidence);
    bool is_enable_word_confidence_Set() const;
    bool is_enable_word_confidence_Valid() const;

    bool isEnableWordTimeOffsets() const;
    void setEnableWordTimeOffsets(const bool &enable_word_time_offsets);
    bool is_enable_word_time_offsets_Set() const;
    bool is_enable_word_time_offsets_Valid() const;

    QString getEncoding() const;
    void setEncoding(const QString &encoding);
    bool is_encoding_Set() const;
    bool is_encoding_Valid() const;

    QString getLanguageCode() const;
    void setLanguageCode(const QString &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    qint32 getMaxAlternatives() const;
    void setMaxAlternatives(const qint32 &max_alternatives);
    bool is_max_alternatives_Set() const;
    bool is_max_alternatives_Valid() const;

    Q_DECL_DEPRECATED OAIRecognitionMetadata getMetadata() const;
    Q_DECL_DEPRECATED void setMetadata(const OAIRecognitionMetadata &metadata);
    Q_DECL_DEPRECATED bool is_metadata_Set() const;
    Q_DECL_DEPRECATED bool is_metadata_Valid() const;

    QString getModel() const;
    void setModel(const QString &model);
    bool is_model_Set() const;
    bool is_model_Valid() const;

    bool isProfanityFilter() const;
    void setProfanityFilter(const bool &profanity_filter);
    bool is_profanity_filter_Set() const;
    bool is_profanity_filter_Valid() const;

    qint32 getSampleRateHertz() const;
    void setSampleRateHertz(const qint32 &sample_rate_hertz);
    bool is_sample_rate_hertz_Set() const;
    bool is_sample_rate_hertz_Valid() const;

    QList<OAISpeechContext> getSpeechContexts() const;
    void setSpeechContexts(const QList<OAISpeechContext> &speech_contexts);
    bool is_speech_contexts_Set() const;
    bool is_speech_contexts_Valid() const;

    OAITranscriptNormalization getTranscriptNormalization() const;
    void setTranscriptNormalization(const OAITranscriptNormalization &transcript_normalization);
    bool is_transcript_normalization_Set() const;
    bool is_transcript_normalization_Valid() const;

    bool isUseEnhanced() const;
    void setUseEnhanced(const bool &use_enhanced);
    bool is_use_enhanced_Set() const;
    bool is_use_enhanced_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISpeechAdaptation m_adaptation;
    bool m_adaptation_isSet;
    bool m_adaptation_isValid;

    QList<QString> m_alternative_language_codes;
    bool m_alternative_language_codes_isSet;
    bool m_alternative_language_codes_isValid;

    qint32 m_audio_channel_count;
    bool m_audio_channel_count_isSet;
    bool m_audio_channel_count_isValid;

    OAISpeakerDiarizationConfig m_diarization_config;
    bool m_diarization_config_isSet;
    bool m_diarization_config_isValid;

    qint32 m_diarization_speaker_count;
    bool m_diarization_speaker_count_isSet;
    bool m_diarization_speaker_count_isValid;

    bool m_enable_automatic_punctuation;
    bool m_enable_automatic_punctuation_isSet;
    bool m_enable_automatic_punctuation_isValid;

    bool m_enable_separate_recognition_per_channel;
    bool m_enable_separate_recognition_per_channel_isSet;
    bool m_enable_separate_recognition_per_channel_isValid;

    bool m_enable_speaker_diarization;
    bool m_enable_speaker_diarization_isSet;
    bool m_enable_speaker_diarization_isValid;

    bool m_enable_spoken_emojis;
    bool m_enable_spoken_emojis_isSet;
    bool m_enable_spoken_emojis_isValid;

    bool m_enable_spoken_punctuation;
    bool m_enable_spoken_punctuation_isSet;
    bool m_enable_spoken_punctuation_isValid;

    bool m_enable_word_confidence;
    bool m_enable_word_confidence_isSet;
    bool m_enable_word_confidence_isValid;

    bool m_enable_word_time_offsets;
    bool m_enable_word_time_offsets_isSet;
    bool m_enable_word_time_offsets_isValid;

    QString m_encoding;
    bool m_encoding_isSet;
    bool m_encoding_isValid;

    QString m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    qint32 m_max_alternatives;
    bool m_max_alternatives_isSet;
    bool m_max_alternatives_isValid;

    OAIRecognitionMetadata m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    QString m_model;
    bool m_model_isSet;
    bool m_model_isValid;

    bool m_profanity_filter;
    bool m_profanity_filter_isSet;
    bool m_profanity_filter_isValid;

    qint32 m_sample_rate_hertz;
    bool m_sample_rate_hertz_isSet;
    bool m_sample_rate_hertz_isValid;

    QList<OAISpeechContext> m_speech_contexts;
    bool m_speech_contexts_isSet;
    bool m_speech_contexts_isValid;

    OAITranscriptNormalization m_transcript_normalization;
    bool m_transcript_normalization_isSet;
    bool m_transcript_normalization_isValid;

    bool m_use_enhanced;
    bool m_use_enhanced_isSet;
    bool m_use_enhanced_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRecognitionConfig)

#endif // OAIRecognitionConfig_H
