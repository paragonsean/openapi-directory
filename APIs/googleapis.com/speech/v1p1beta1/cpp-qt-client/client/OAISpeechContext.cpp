/**
 * Cloud Speech-to-Text API
 * Converts audio to text by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpeechContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpeechContext::OAISpeechContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpeechContext::OAISpeechContext() {
    this->initializeModel();
}

OAISpeechContext::~OAISpeechContext() {}

void OAISpeechContext::initializeModel() {

    m_boost_isSet = false;
    m_boost_isValid = false;

    m_phrases_isSet = false;
    m_phrases_isValid = false;
}

void OAISpeechContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpeechContext::fromJsonObject(QJsonObject json) {

    m_boost_isValid = ::OpenAPI::fromJsonValue(m_boost, json[QString("boost")]);
    m_boost_isSet = !json[QString("boost")].isNull() && m_boost_isValid;

    m_phrases_isValid = ::OpenAPI::fromJsonValue(m_phrases, json[QString("phrases")]);
    m_phrases_isSet = !json[QString("phrases")].isNull() && m_phrases_isValid;
}

QString OAISpeechContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpeechContext::asJsonObject() const {
    QJsonObject obj;
    if (m_boost_isSet) {
        obj.insert(QString("boost"), ::OpenAPI::toJsonValue(m_boost));
    }
    if (m_phrases.size() > 0) {
        obj.insert(QString("phrases"), ::OpenAPI::toJsonValue(m_phrases));
    }
    return obj;
}

float OAISpeechContext::getBoost() const {
    return m_boost;
}
void OAISpeechContext::setBoost(const float &boost) {
    m_boost = boost;
    m_boost_isSet = true;
}

bool OAISpeechContext::is_boost_Set() const{
    return m_boost_isSet;
}

bool OAISpeechContext::is_boost_Valid() const{
    return m_boost_isValid;
}

QList<QString> OAISpeechContext::getPhrases() const {
    return m_phrases;
}
void OAISpeechContext::setPhrases(const QList<QString> &phrases) {
    m_phrases = phrases;
    m_phrases_isSet = true;
}

bool OAISpeechContext::is_phrases_Set() const{
    return m_phrases_isSet;
}

bool OAISpeechContext::is_phrases_Valid() const{
    return m_phrases_isValid;
}

bool OAISpeechContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phrases.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpeechContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
