/**
 * Cloud Speech-to-Text API
 * Converts audio to text by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhraseSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhraseSet::OAIPhraseSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhraseSet::OAIPhraseSet() {
    this->initializeModel();
}

OAIPhraseSet::~OAIPhraseSet() {}

void OAIPhraseSet::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_boost_isSet = false;
    m_boost_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_kms_key_name_isSet = false;
    m_kms_key_name_isValid = false;

    m_kms_key_version_name_isSet = false;
    m_kms_key_version_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phrases_isSet = false;
    m_phrases_isValid = false;

    m_reconciling_isSet = false;
    m_reconciling_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIPhraseSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhraseSet::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_boost_isValid = ::OpenAPI::fromJsonValue(m_boost, json[QString("boost")]);
    m_boost_isSet = !json[QString("boost")].isNull() && m_boost_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_kms_key_name_isValid = ::OpenAPI::fromJsonValue(m_kms_key_name, json[QString("kmsKeyName")]);
    m_kms_key_name_isSet = !json[QString("kmsKeyName")].isNull() && m_kms_key_name_isValid;

    m_kms_key_version_name_isValid = ::OpenAPI::fromJsonValue(m_kms_key_version_name, json[QString("kmsKeyVersionName")]);
    m_kms_key_version_name_isSet = !json[QString("kmsKeyVersionName")].isNull() && m_kms_key_version_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phrases_isValid = ::OpenAPI::fromJsonValue(m_phrases, json[QString("phrases")]);
    m_phrases_isSet = !json[QString("phrases")].isNull() && m_phrases_isValid;

    m_reconciling_isValid = ::OpenAPI::fromJsonValue(m_reconciling, json[QString("reconciling")]);
    m_reconciling_isSet = !json[QString("reconciling")].isNull() && m_reconciling_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIPhraseSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhraseSet::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_boost_isSet) {
        obj.insert(QString("boost"), ::OpenAPI::toJsonValue(m_boost));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_kms_key_name_isSet) {
        obj.insert(QString("kmsKeyName"), ::OpenAPI::toJsonValue(m_kms_key_name));
    }
    if (m_kms_key_version_name_isSet) {
        obj.insert(QString("kmsKeyVersionName"), ::OpenAPI::toJsonValue(m_kms_key_version_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phrases.size() > 0) {
        obj.insert(QString("phrases"), ::OpenAPI::toJsonValue(m_phrases));
    }
    if (m_reconciling_isSet) {
        obj.insert(QString("reconciling"), ::OpenAPI::toJsonValue(m_reconciling));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

QMap<QString, QString> OAIPhraseSet::getAnnotations() const {
    return m_annotations;
}
void OAIPhraseSet::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIPhraseSet::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIPhraseSet::is_annotations_Valid() const{
    return m_annotations_isValid;
}

float OAIPhraseSet::getBoost() const {
    return m_boost;
}
void OAIPhraseSet::setBoost(const float &boost) {
    m_boost = boost;
    m_boost_isSet = true;
}

bool OAIPhraseSet::is_boost_Set() const{
    return m_boost_isSet;
}

bool OAIPhraseSet::is_boost_Valid() const{
    return m_boost_isValid;
}

QString OAIPhraseSet::getDeleteTime() const {
    return m_delete_time;
}
void OAIPhraseSet::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAIPhraseSet::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAIPhraseSet::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

QString OAIPhraseSet::getDisplayName() const {
    return m_display_name;
}
void OAIPhraseSet::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPhraseSet::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPhraseSet::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIPhraseSet::getEtag() const {
    return m_etag;
}
void OAIPhraseSet::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIPhraseSet::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIPhraseSet::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIPhraseSet::getExpireTime() const {
    return m_expire_time;
}
void OAIPhraseSet::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIPhraseSet::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIPhraseSet::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAIPhraseSet::getKmsKeyName() const {
    return m_kms_key_name;
}
void OAIPhraseSet::setKmsKeyName(const QString &kms_key_name) {
    m_kms_key_name = kms_key_name;
    m_kms_key_name_isSet = true;
}

bool OAIPhraseSet::is_kms_key_name_Set() const{
    return m_kms_key_name_isSet;
}

bool OAIPhraseSet::is_kms_key_name_Valid() const{
    return m_kms_key_name_isValid;
}

QString OAIPhraseSet::getKmsKeyVersionName() const {
    return m_kms_key_version_name;
}
void OAIPhraseSet::setKmsKeyVersionName(const QString &kms_key_version_name) {
    m_kms_key_version_name = kms_key_version_name;
    m_kms_key_version_name_isSet = true;
}

bool OAIPhraseSet::is_kms_key_version_name_Set() const{
    return m_kms_key_version_name_isSet;
}

bool OAIPhraseSet::is_kms_key_version_name_Valid() const{
    return m_kms_key_version_name_isValid;
}

QString OAIPhraseSet::getName() const {
    return m_name;
}
void OAIPhraseSet::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPhraseSet::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPhraseSet::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPhrase> OAIPhraseSet::getPhrases() const {
    return m_phrases;
}
void OAIPhraseSet::setPhrases(const QList<OAIPhrase> &phrases) {
    m_phrases = phrases;
    m_phrases_isSet = true;
}

bool OAIPhraseSet::is_phrases_Set() const{
    return m_phrases_isSet;
}

bool OAIPhraseSet::is_phrases_Valid() const{
    return m_phrases_isValid;
}

bool OAIPhraseSet::isReconciling() const {
    return m_reconciling;
}
void OAIPhraseSet::setReconciling(const bool &reconciling) {
    m_reconciling = reconciling;
    m_reconciling_isSet = true;
}

bool OAIPhraseSet::is_reconciling_Set() const{
    return m_reconciling_isSet;
}

bool OAIPhraseSet::is_reconciling_Valid() const{
    return m_reconciling_isValid;
}

QString OAIPhraseSet::getState() const {
    return m_state;
}
void OAIPhraseSet::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPhraseSet::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPhraseSet::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIPhraseSet::getUid() const {
    return m_uid;
}
void OAIPhraseSet::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIPhraseSet::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIPhraseSet::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIPhraseSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_boost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_version_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phrases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhraseSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
