/**
 * Cloud Speech-to-Text API
 * Converts audio to text by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISpeakerDiarizationConfig.h
 *
 * Config to enable speaker diarization.
 */

#ifndef OAISpeakerDiarizationConfig_H
#define OAISpeakerDiarizationConfig_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISpeakerDiarizationConfig : public OAIObject {
public:
    OAISpeakerDiarizationConfig();
    OAISpeakerDiarizationConfig(QString json);
    ~OAISpeakerDiarizationConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isEnableSpeakerDiarization() const;
    void setEnableSpeakerDiarization(const bool &enable_speaker_diarization);
    bool is_enable_speaker_diarization_Set() const;
    bool is_enable_speaker_diarization_Valid() const;

    qint32 getMaxSpeakerCount() const;
    void setMaxSpeakerCount(const qint32 &max_speaker_count);
    bool is_max_speaker_count_Set() const;
    bool is_max_speaker_count_Valid() const;

    qint32 getMinSpeakerCount() const;
    void setMinSpeakerCount(const qint32 &min_speaker_count);
    bool is_min_speaker_count_Set() const;
    bool is_min_speaker_count_Valid() const;

    Q_DECL_DEPRECATED qint32 getSpeakerTag() const;
    Q_DECL_DEPRECATED void setSpeakerTag(const qint32 &speaker_tag);
    Q_DECL_DEPRECATED bool is_speaker_tag_Set() const;
    Q_DECL_DEPRECATED bool is_speaker_tag_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_enable_speaker_diarization;
    bool m_enable_speaker_diarization_isSet;
    bool m_enable_speaker_diarization_isValid;

    qint32 m_max_speaker_count;
    bool m_max_speaker_count_isSet;
    bool m_max_speaker_count_isValid;

    qint32 m_min_speaker_count;
    bool m_min_speaker_count_isSet;
    bool m_min_speaker_count_isValid;

    qint32 m_speaker_tag;
    bool m_speaker_tag_isSet;
    bool m_speaker_tag_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISpeakerDiarizationConfig)

#endif // OAISpeakerDiarizationConfig_H
