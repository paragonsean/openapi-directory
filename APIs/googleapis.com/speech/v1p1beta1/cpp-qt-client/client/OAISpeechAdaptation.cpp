/**
 * Cloud Speech-to-Text API
 * Converts audio to text by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpeechAdaptation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpeechAdaptation::OAISpeechAdaptation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpeechAdaptation::OAISpeechAdaptation() {
    this->initializeModel();
}

OAISpeechAdaptation::~OAISpeechAdaptation() {}

void OAISpeechAdaptation::initializeModel() {

    m_abnf_grammar_isSet = false;
    m_abnf_grammar_isValid = false;

    m_custom_classes_isSet = false;
    m_custom_classes_isValid = false;

    m_phrase_set_references_isSet = false;
    m_phrase_set_references_isValid = false;

    m_phrase_sets_isSet = false;
    m_phrase_sets_isValid = false;
}

void OAISpeechAdaptation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpeechAdaptation::fromJsonObject(QJsonObject json) {

    m_abnf_grammar_isValid = ::OpenAPI::fromJsonValue(m_abnf_grammar, json[QString("abnfGrammar")]);
    m_abnf_grammar_isSet = !json[QString("abnfGrammar")].isNull() && m_abnf_grammar_isValid;

    m_custom_classes_isValid = ::OpenAPI::fromJsonValue(m_custom_classes, json[QString("customClasses")]);
    m_custom_classes_isSet = !json[QString("customClasses")].isNull() && m_custom_classes_isValid;

    m_phrase_set_references_isValid = ::OpenAPI::fromJsonValue(m_phrase_set_references, json[QString("phraseSetReferences")]);
    m_phrase_set_references_isSet = !json[QString("phraseSetReferences")].isNull() && m_phrase_set_references_isValid;

    m_phrase_sets_isValid = ::OpenAPI::fromJsonValue(m_phrase_sets, json[QString("phraseSets")]);
    m_phrase_sets_isSet = !json[QString("phraseSets")].isNull() && m_phrase_sets_isValid;
}

QString OAISpeechAdaptation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpeechAdaptation::asJsonObject() const {
    QJsonObject obj;
    if (m_abnf_grammar.isSet()) {
        obj.insert(QString("abnfGrammar"), ::OpenAPI::toJsonValue(m_abnf_grammar));
    }
    if (m_custom_classes.size() > 0) {
        obj.insert(QString("customClasses"), ::OpenAPI::toJsonValue(m_custom_classes));
    }
    if (m_phrase_set_references.size() > 0) {
        obj.insert(QString("phraseSetReferences"), ::OpenAPI::toJsonValue(m_phrase_set_references));
    }
    if (m_phrase_sets.size() > 0) {
        obj.insert(QString("phraseSets"), ::OpenAPI::toJsonValue(m_phrase_sets));
    }
    return obj;
}

OAIABNFGrammar OAISpeechAdaptation::getAbnfGrammar() const {
    return m_abnf_grammar;
}
void OAISpeechAdaptation::setAbnfGrammar(const OAIABNFGrammar &abnf_grammar) {
    m_abnf_grammar = abnf_grammar;
    m_abnf_grammar_isSet = true;
}

bool OAISpeechAdaptation::is_abnf_grammar_Set() const{
    return m_abnf_grammar_isSet;
}

bool OAISpeechAdaptation::is_abnf_grammar_Valid() const{
    return m_abnf_grammar_isValid;
}

QList<OAICustomClass> OAISpeechAdaptation::getCustomClasses() const {
    return m_custom_classes;
}
void OAISpeechAdaptation::setCustomClasses(const QList<OAICustomClass> &custom_classes) {
    m_custom_classes = custom_classes;
    m_custom_classes_isSet = true;
}

bool OAISpeechAdaptation::is_custom_classes_Set() const{
    return m_custom_classes_isSet;
}

bool OAISpeechAdaptation::is_custom_classes_Valid() const{
    return m_custom_classes_isValid;
}

QList<QString> OAISpeechAdaptation::getPhraseSetReferences() const {
    return m_phrase_set_references;
}
void OAISpeechAdaptation::setPhraseSetReferences(const QList<QString> &phrase_set_references) {
    m_phrase_set_references = phrase_set_references;
    m_phrase_set_references_isSet = true;
}

bool OAISpeechAdaptation::is_phrase_set_references_Set() const{
    return m_phrase_set_references_isSet;
}

bool OAISpeechAdaptation::is_phrase_set_references_Valid() const{
    return m_phrase_set_references_isValid;
}

QList<OAIPhraseSet> OAISpeechAdaptation::getPhraseSets() const {
    return m_phrase_sets;
}
void OAISpeechAdaptation::setPhraseSets(const QList<OAIPhraseSet> &phrase_sets) {
    m_phrase_sets = phrase_sets;
    m_phrase_sets_isSet = true;
}

bool OAISpeechAdaptation::is_phrase_sets_Set() const{
    return m_phrase_sets_isSet;
}

bool OAISpeechAdaptation::is_phrase_sets_Valid() const{
    return m_phrase_sets_isValid;
}

bool OAISpeechAdaptation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abnf_grammar.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_classes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_phrase_set_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_phrase_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpeechAdaptation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
