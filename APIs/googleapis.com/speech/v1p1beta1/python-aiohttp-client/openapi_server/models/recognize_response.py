# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.speech_adaptation_info import SpeechAdaptationInfo
from openapi_server.models.speech_recognition_result import SpeechRecognitionResult
from openapi_server import util


class RecognizeResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, request_id: str=None, results: List[SpeechRecognitionResult]=None, speech_adaptation_info: SpeechAdaptationInfo=None, total_billed_time: str=None, using_legacy_models: bool=None):
        """RecognizeResponse - a model defined in OpenAPI

        :param request_id: The request_id of this RecognizeResponse.
        :param results: The results of this RecognizeResponse.
        :param speech_adaptation_info: The speech_adaptation_info of this RecognizeResponse.
        :param total_billed_time: The total_billed_time of this RecognizeResponse.
        :param using_legacy_models: The using_legacy_models of this RecognizeResponse.
        """
        self.openapi_types = {
            'request_id': str,
            'results': List[SpeechRecognitionResult],
            'speech_adaptation_info': SpeechAdaptationInfo,
            'total_billed_time': str,
            'using_legacy_models': bool
        }

        self.attribute_map = {
            'request_id': 'requestId',
            'results': 'results',
            'speech_adaptation_info': 'speechAdaptationInfo',
            'total_billed_time': 'totalBilledTime',
            'using_legacy_models': 'usingLegacyModels'
        }

        self._request_id = request_id
        self._results = results
        self._speech_adaptation_info = speech_adaptation_info
        self._total_billed_time = total_billed_time
        self._using_legacy_models = using_legacy_models

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecognizeResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecognizeResponse of this RecognizeResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_id(self):
        """Gets the request_id of this RecognizeResponse.

        The ID associated with the request. This is a unique ID specific only to the given request.

        :return: The request_id of this RecognizeResponse.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this RecognizeResponse.

        The ID associated with the request. This is a unique ID specific only to the given request.

        :param request_id: The request_id of this RecognizeResponse.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def results(self):
        """Gets the results of this RecognizeResponse.

        Sequential list of transcription results corresponding to sequential portions of audio.

        :return: The results of this RecognizeResponse.
        :rtype: List[SpeechRecognitionResult]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this RecognizeResponse.

        Sequential list of transcription results corresponding to sequential portions of audio.

        :param results: The results of this RecognizeResponse.
        :type results: List[SpeechRecognitionResult]
        """

        self._results = results

    @property
    def speech_adaptation_info(self):
        """Gets the speech_adaptation_info of this RecognizeResponse.


        :return: The speech_adaptation_info of this RecognizeResponse.
        :rtype: SpeechAdaptationInfo
        """
        return self._speech_adaptation_info

    @speech_adaptation_info.setter
    def speech_adaptation_info(self, speech_adaptation_info):
        """Sets the speech_adaptation_info of this RecognizeResponse.


        :param speech_adaptation_info: The speech_adaptation_info of this RecognizeResponse.
        :type speech_adaptation_info: SpeechAdaptationInfo
        """

        self._speech_adaptation_info = speech_adaptation_info

    @property
    def total_billed_time(self):
        """Gets the total_billed_time of this RecognizeResponse.

        When available, billed audio seconds for the corresponding request.

        :return: The total_billed_time of this RecognizeResponse.
        :rtype: str
        """
        return self._total_billed_time

    @total_billed_time.setter
    def total_billed_time(self, total_billed_time):
        """Sets the total_billed_time of this RecognizeResponse.

        When available, billed audio seconds for the corresponding request.

        :param total_billed_time: The total_billed_time of this RecognizeResponse.
        :type total_billed_time: str
        """

        self._total_billed_time = total_billed_time

    @property
    def using_legacy_models(self):
        """Gets the using_legacy_models of this RecognizeResponse.

        Whether request used legacy asr models (was not automatically migrated to use conformer models).

        :return: The using_legacy_models of this RecognizeResponse.
        :rtype: bool
        """
        return self._using_legacy_models

    @using_legacy_models.setter
    def using_legacy_models(self, using_legacy_models):
        """Sets the using_legacy_models of this RecognizeResponse.

        Whether request used legacy asr models (was not automatically migrated to use conformer models).

        :param using_legacy_models: The using_legacy_models of this RecognizeResponse.
        :type using_legacy_models: bool
        """

        self._using_legacy_models = using_legacy_models
