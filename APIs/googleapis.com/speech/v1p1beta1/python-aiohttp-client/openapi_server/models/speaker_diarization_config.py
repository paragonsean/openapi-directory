# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SpeakerDiarizationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_speaker_diarization: bool=None, max_speaker_count: int=None, min_speaker_count: int=None, speaker_tag: int=None):
        """SpeakerDiarizationConfig - a model defined in OpenAPI

        :param enable_speaker_diarization: The enable_speaker_diarization of this SpeakerDiarizationConfig.
        :param max_speaker_count: The max_speaker_count of this SpeakerDiarizationConfig.
        :param min_speaker_count: The min_speaker_count of this SpeakerDiarizationConfig.
        :param speaker_tag: The speaker_tag of this SpeakerDiarizationConfig.
        """
        self.openapi_types = {
            'enable_speaker_diarization': bool,
            'max_speaker_count': int,
            'min_speaker_count': int,
            'speaker_tag': int
        }

        self.attribute_map = {
            'enable_speaker_diarization': 'enableSpeakerDiarization',
            'max_speaker_count': 'maxSpeakerCount',
            'min_speaker_count': 'minSpeakerCount',
            'speaker_tag': 'speakerTag'
        }

        self._enable_speaker_diarization = enable_speaker_diarization
        self._max_speaker_count = max_speaker_count
        self._min_speaker_count = min_speaker_count
        self._speaker_tag = speaker_tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpeakerDiarizationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpeakerDiarizationConfig of this SpeakerDiarizationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_speaker_diarization(self):
        """Gets the enable_speaker_diarization of this SpeakerDiarizationConfig.

        If 'true', enables speaker detection for each recognized word in the top alternative of the recognition result using a speaker_label provided in the WordInfo.

        :return: The enable_speaker_diarization of this SpeakerDiarizationConfig.
        :rtype: bool
        """
        return self._enable_speaker_diarization

    @enable_speaker_diarization.setter
    def enable_speaker_diarization(self, enable_speaker_diarization):
        """Sets the enable_speaker_diarization of this SpeakerDiarizationConfig.

        If 'true', enables speaker detection for each recognized word in the top alternative of the recognition result using a speaker_label provided in the WordInfo.

        :param enable_speaker_diarization: The enable_speaker_diarization of this SpeakerDiarizationConfig.
        :type enable_speaker_diarization: bool
        """

        self._enable_speaker_diarization = enable_speaker_diarization

    @property
    def max_speaker_count(self):
        """Gets the max_speaker_count of this SpeakerDiarizationConfig.

        Maximum number of speakers in the conversation. This range gives you more flexibility by allowing the system to automatically determine the correct number of speakers. If not set, the default value is 6.

        :return: The max_speaker_count of this SpeakerDiarizationConfig.
        :rtype: int
        """
        return self._max_speaker_count

    @max_speaker_count.setter
    def max_speaker_count(self, max_speaker_count):
        """Sets the max_speaker_count of this SpeakerDiarizationConfig.

        Maximum number of speakers in the conversation. This range gives you more flexibility by allowing the system to automatically determine the correct number of speakers. If not set, the default value is 6.

        :param max_speaker_count: The max_speaker_count of this SpeakerDiarizationConfig.
        :type max_speaker_count: int
        """

        self._max_speaker_count = max_speaker_count

    @property
    def min_speaker_count(self):
        """Gets the min_speaker_count of this SpeakerDiarizationConfig.

        Minimum number of speakers in the conversation. This range gives you more flexibility by allowing the system to automatically determine the correct number of speakers. If not set, the default value is 2.

        :return: The min_speaker_count of this SpeakerDiarizationConfig.
        :rtype: int
        """
        return self._min_speaker_count

    @min_speaker_count.setter
    def min_speaker_count(self, min_speaker_count):
        """Sets the min_speaker_count of this SpeakerDiarizationConfig.

        Minimum number of speakers in the conversation. This range gives you more flexibility by allowing the system to automatically determine the correct number of speakers. If not set, the default value is 2.

        :param min_speaker_count: The min_speaker_count of this SpeakerDiarizationConfig.
        :type min_speaker_count: int
        """

        self._min_speaker_count = min_speaker_count

    @property
    def speaker_tag(self):
        """Gets the speaker_tag of this SpeakerDiarizationConfig.

        Output only. Unused.

        :return: The speaker_tag of this SpeakerDiarizationConfig.
        :rtype: int
        """
        return self._speaker_tag

    @speaker_tag.setter
    def speaker_tag(self, speaker_tag):
        """Sets the speaker_tag of this SpeakerDiarizationConfig.

        Output only. Unused.

        :param speaker_tag: The speaker_tag of this SpeakerDiarizationConfig.
        :type speaker_tag: int
        """

        self._speaker_tag = speaker_tag
