# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.phrase import Phrase
from openapi_server import util


class PhraseSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, boost: float=None, delete_time: str=None, display_name: str=None, etag: str=None, expire_time: str=None, kms_key_name: str=None, kms_key_version_name: str=None, name: str=None, phrases: List[Phrase]=None, reconciling: bool=None, state: str=None, uid: str=None):
        """PhraseSet - a model defined in OpenAPI

        :param annotations: The annotations of this PhraseSet.
        :param boost: The boost of this PhraseSet.
        :param delete_time: The delete_time of this PhraseSet.
        :param display_name: The display_name of this PhraseSet.
        :param etag: The etag of this PhraseSet.
        :param expire_time: The expire_time of this PhraseSet.
        :param kms_key_name: The kms_key_name of this PhraseSet.
        :param kms_key_version_name: The kms_key_version_name of this PhraseSet.
        :param name: The name of this PhraseSet.
        :param phrases: The phrases of this PhraseSet.
        :param reconciling: The reconciling of this PhraseSet.
        :param state: The state of this PhraseSet.
        :param uid: The uid of this PhraseSet.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'boost': float,
            'delete_time': str,
            'display_name': str,
            'etag': str,
            'expire_time': str,
            'kms_key_name': str,
            'kms_key_version_name': str,
            'name': str,
            'phrases': List[Phrase],
            'reconciling': bool,
            'state': str,
            'uid': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'boost': 'boost',
            'delete_time': 'deleteTime',
            'display_name': 'displayName',
            'etag': 'etag',
            'expire_time': 'expireTime',
            'kms_key_name': 'kmsKeyName',
            'kms_key_version_name': 'kmsKeyVersionName',
            'name': 'name',
            'phrases': 'phrases',
            'reconciling': 'reconciling',
            'state': 'state',
            'uid': 'uid'
        }

        self._annotations = annotations
        self._boost = boost
        self._delete_time = delete_time
        self._display_name = display_name
        self._etag = etag
        self._expire_time = expire_time
        self._kms_key_name = kms_key_name
        self._kms_key_version_name = kms_key_version_name
        self._name = name
        self._phrases = phrases
        self._reconciling = reconciling
        self._state = state
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PhraseSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PhraseSet of this PhraseSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this PhraseSet.

        Output only. Allows users to store small amounts of arbitrary data. Both the key and the value must be 63 characters or less each. At most 100 annotations. This field is not used.

        :return: The annotations of this PhraseSet.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this PhraseSet.

        Output only. Allows users to store small amounts of arbitrary data. Both the key and the value must be 63 characters or less each. At most 100 annotations. This field is not used.

        :param annotations: The annotations of this PhraseSet.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def boost(self):
        """Gets the boost of this PhraseSet.

        Hint Boost. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost values would correspond to anti-biasing. Anti-biasing is not enabled, so negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 (exclusive) and 20. We recommend using a binary search approach to finding the optimal value for your use case as well as adding phrases both with and without boost to your requests.

        :return: The boost of this PhraseSet.
        :rtype: float
        """
        return self._boost

    @boost.setter
    def boost(self, boost):
        """Sets the boost of this PhraseSet.

        Hint Boost. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost values would correspond to anti-biasing. Anti-biasing is not enabled, so negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 (exclusive) and 20. We recommend using a binary search approach to finding the optimal value for your use case as well as adding phrases both with and without boost to your requests.

        :param boost: The boost of this PhraseSet.
        :type boost: float
        """

        self._boost = boost

    @property
    def delete_time(self):
        """Gets the delete_time of this PhraseSet.

        Output only. The time at which this resource was requested for deletion. This field is not used.

        :return: The delete_time of this PhraseSet.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this PhraseSet.

        Output only. The time at which this resource was requested for deletion. This field is not used.

        :param delete_time: The delete_time of this PhraseSet.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def display_name(self):
        """Gets the display_name of this PhraseSet.

        Output only. User-settable, human-readable name for the PhraseSet. Must be 63 characters or less. This field is not used.

        :return: The display_name of this PhraseSet.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PhraseSet.

        Output only. User-settable, human-readable name for the PhraseSet. Must be 63 characters or less. This field is not used.

        :param display_name: The display_name of this PhraseSet.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this PhraseSet.

        Output only. This checksum is computed by the server based on the value of other fields. This may be sent on update, undelete, and delete requests to ensure the client has an up-to-date value before proceeding. This field is not used.

        :return: The etag of this PhraseSet.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this PhraseSet.

        Output only. This checksum is computed by the server based on the value of other fields. This may be sent on update, undelete, and delete requests to ensure the client has an up-to-date value before proceeding. This field is not used.

        :param etag: The etag of this PhraseSet.
        :type etag: str
        """

        self._etag = etag

    @property
    def expire_time(self):
        """Gets the expire_time of this PhraseSet.

        Output only. The time at which this resource will be purged. This field is not used.

        :return: The expire_time of this PhraseSet.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this PhraseSet.

        Output only. The time at which this resource will be purged. This field is not used.

        :param expire_time: The expire_time of this PhraseSet.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def kms_key_name(self):
        """Gets the kms_key_name of this PhraseSet.

        Output only. The [KMS key name](https://cloud.google.com/kms/docs/resource-hierarchy#keys) with which the content of the PhraseSet is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.

        :return: The kms_key_name of this PhraseSet.
        :rtype: str
        """
        return self._kms_key_name

    @kms_key_name.setter
    def kms_key_name(self, kms_key_name):
        """Sets the kms_key_name of this PhraseSet.

        Output only. The [KMS key name](https://cloud.google.com/kms/docs/resource-hierarchy#keys) with which the content of the PhraseSet is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.

        :param kms_key_name: The kms_key_name of this PhraseSet.
        :type kms_key_name: str
        """

        self._kms_key_name = kms_key_name

    @property
    def kms_key_version_name(self):
        """Gets the kms_key_version_name of this PhraseSet.

        Output only. The [KMS key version name](https://cloud.google.com/kms/docs/resource-hierarchy#key_versions) with which content of the PhraseSet is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{crypto_key_version}`.

        :return: The kms_key_version_name of this PhraseSet.
        :rtype: str
        """
        return self._kms_key_version_name

    @kms_key_version_name.setter
    def kms_key_version_name(self, kms_key_version_name):
        """Sets the kms_key_version_name of this PhraseSet.

        Output only. The [KMS key version name](https://cloud.google.com/kms/docs/resource-hierarchy#key_versions) with which content of the PhraseSet is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{crypto_key_version}`.

        :param kms_key_version_name: The kms_key_version_name of this PhraseSet.
        :type kms_key_version_name: str
        """

        self._kms_key_version_name = kms_key_version_name

    @property
    def name(self):
        """Gets the name of this PhraseSet.

        The resource name of the phrase set.

        :return: The name of this PhraseSet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PhraseSet.

        The resource name of the phrase set.

        :param name: The name of this PhraseSet.
        :type name: str
        """

        self._name = name

    @property
    def phrases(self):
        """Gets the phrases of this PhraseSet.

        A list of word and phrases.

        :return: The phrases of this PhraseSet.
        :rtype: List[Phrase]
        """
        return self._phrases

    @phrases.setter
    def phrases(self, phrases):
        """Sets the phrases of this PhraseSet.

        A list of word and phrases.

        :param phrases: The phrases of this PhraseSet.
        :type phrases: List[Phrase]
        """

        self._phrases = phrases

    @property
    def reconciling(self):
        """Gets the reconciling of this PhraseSet.

        Output only. Whether or not this PhraseSet is in the process of being updated. This field is not used.

        :return: The reconciling of this PhraseSet.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this PhraseSet.

        Output only. Whether or not this PhraseSet is in the process of being updated. This field is not used.

        :param reconciling: The reconciling of this PhraseSet.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def state(self):
        """Gets the state of this PhraseSet.

        Output only. The CustomClass lifecycle state. This field is not used.

        :return: The state of this PhraseSet.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PhraseSet.

        Output only. The CustomClass lifecycle state. This field is not used.

        :param state: The state of this PhraseSet.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "DELETED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def uid(self):
        """Gets the uid of this PhraseSet.

        Output only. System-assigned unique identifier for the PhraseSet. This field is not used.

        :return: The uid of this PhraseSet.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this PhraseSet.

        Output only. System-assigned unique identifier for the PhraseSet. This field is not used.

        :param uid: The uid of this PhraseSet.
        :type uid: str
        """

        self._uid = uid
