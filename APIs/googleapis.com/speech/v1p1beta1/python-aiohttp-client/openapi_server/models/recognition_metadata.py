# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RecognitionMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_topic: str=None, industry_naics_code_of_audio: int=None, interaction_type: str=None, microphone_distance: str=None, obfuscated_id: str=None, original_media_type: str=None, original_mime_type: str=None, recording_device_name: str=None, recording_device_type: str=None):
        """RecognitionMetadata - a model defined in OpenAPI

        :param audio_topic: The audio_topic of this RecognitionMetadata.
        :param industry_naics_code_of_audio: The industry_naics_code_of_audio of this RecognitionMetadata.
        :param interaction_type: The interaction_type of this RecognitionMetadata.
        :param microphone_distance: The microphone_distance of this RecognitionMetadata.
        :param obfuscated_id: The obfuscated_id of this RecognitionMetadata.
        :param original_media_type: The original_media_type of this RecognitionMetadata.
        :param original_mime_type: The original_mime_type of this RecognitionMetadata.
        :param recording_device_name: The recording_device_name of this RecognitionMetadata.
        :param recording_device_type: The recording_device_type of this RecognitionMetadata.
        """
        self.openapi_types = {
            'audio_topic': str,
            'industry_naics_code_of_audio': int,
            'interaction_type': str,
            'microphone_distance': str,
            'obfuscated_id': str,
            'original_media_type': str,
            'original_mime_type': str,
            'recording_device_name': str,
            'recording_device_type': str
        }

        self.attribute_map = {
            'audio_topic': 'audioTopic',
            'industry_naics_code_of_audio': 'industryNaicsCodeOfAudio',
            'interaction_type': 'interactionType',
            'microphone_distance': 'microphoneDistance',
            'obfuscated_id': 'obfuscatedId',
            'original_media_type': 'originalMediaType',
            'original_mime_type': 'originalMimeType',
            'recording_device_name': 'recordingDeviceName',
            'recording_device_type': 'recordingDeviceType'
        }

        self._audio_topic = audio_topic
        self._industry_naics_code_of_audio = industry_naics_code_of_audio
        self._interaction_type = interaction_type
        self._microphone_distance = microphone_distance
        self._obfuscated_id = obfuscated_id
        self._original_media_type = original_media_type
        self._original_mime_type = original_mime_type
        self._recording_device_name = recording_device_name
        self._recording_device_type = recording_device_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecognitionMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecognitionMetadata of this RecognitionMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_topic(self):
        """Gets the audio_topic of this RecognitionMetadata.

        Description of the content. Eg. \"Recordings of federal supreme court hearings from 2012\".

        :return: The audio_topic of this RecognitionMetadata.
        :rtype: str
        """
        return self._audio_topic

    @audio_topic.setter
    def audio_topic(self, audio_topic):
        """Sets the audio_topic of this RecognitionMetadata.

        Description of the content. Eg. \"Recordings of federal supreme court hearings from 2012\".

        :param audio_topic: The audio_topic of this RecognitionMetadata.
        :type audio_topic: str
        """

        self._audio_topic = audio_topic

    @property
    def industry_naics_code_of_audio(self):
        """Gets the industry_naics_code_of_audio of this RecognitionMetadata.

        The industry vertical to which this speech recognition request most closely applies. This is most indicative of the topics contained in the audio. Use the 6-digit NAICS code to identify the industry vertical - see https://www.naics.com/search/.

        :return: The industry_naics_code_of_audio of this RecognitionMetadata.
        :rtype: int
        """
        return self._industry_naics_code_of_audio

    @industry_naics_code_of_audio.setter
    def industry_naics_code_of_audio(self, industry_naics_code_of_audio):
        """Sets the industry_naics_code_of_audio of this RecognitionMetadata.

        The industry vertical to which this speech recognition request most closely applies. This is most indicative of the topics contained in the audio. Use the 6-digit NAICS code to identify the industry vertical - see https://www.naics.com/search/.

        :param industry_naics_code_of_audio: The industry_naics_code_of_audio of this RecognitionMetadata.
        :type industry_naics_code_of_audio: int
        """

        self._industry_naics_code_of_audio = industry_naics_code_of_audio

    @property
    def interaction_type(self):
        """Gets the interaction_type of this RecognitionMetadata.

        The use case most closely describing the audio content to be recognized.

        :return: The interaction_type of this RecognitionMetadata.
        :rtype: str
        """
        return self._interaction_type

    @interaction_type.setter
    def interaction_type(self, interaction_type):
        """Sets the interaction_type of this RecognitionMetadata.

        The use case most closely describing the audio content to be recognized.

        :param interaction_type: The interaction_type of this RecognitionMetadata.
        :type interaction_type: str
        """
        allowed_values = ["INTERACTION_TYPE_UNSPECIFIED", "DISCUSSION", "PRESENTATION", "PHONE_CALL", "VOICEMAIL", "PROFESSIONALLY_PRODUCED", "VOICE_SEARCH", "VOICE_COMMAND", "DICTATION"]  # noqa: E501
        if interaction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `interaction_type` ({0}), must be one of {1}"
                .format(interaction_type, allowed_values)
            )

        self._interaction_type = interaction_type

    @property
    def microphone_distance(self):
        """Gets the microphone_distance of this RecognitionMetadata.

        The audio type that most closely describes the audio being recognized.

        :return: The microphone_distance of this RecognitionMetadata.
        :rtype: str
        """
        return self._microphone_distance

    @microphone_distance.setter
    def microphone_distance(self, microphone_distance):
        """Sets the microphone_distance of this RecognitionMetadata.

        The audio type that most closely describes the audio being recognized.

        :param microphone_distance: The microphone_distance of this RecognitionMetadata.
        :type microphone_distance: str
        """
        allowed_values = ["MICROPHONE_DISTANCE_UNSPECIFIED", "NEARFIELD", "MIDFIELD", "FARFIELD"]  # noqa: E501
        if microphone_distance not in allowed_values:
            raise ValueError(
                "Invalid value for `microphone_distance` ({0}), must be one of {1}"
                .format(microphone_distance, allowed_values)
            )

        self._microphone_distance = microphone_distance

    @property
    def obfuscated_id(self):
        """Gets the obfuscated_id of this RecognitionMetadata.

        Obfuscated (privacy-protected) ID of the user, to identify number of unique users using the service.

        :return: The obfuscated_id of this RecognitionMetadata.
        :rtype: str
        """
        return self._obfuscated_id

    @obfuscated_id.setter
    def obfuscated_id(self, obfuscated_id):
        """Sets the obfuscated_id of this RecognitionMetadata.

        Obfuscated (privacy-protected) ID of the user, to identify number of unique users using the service.

        :param obfuscated_id: The obfuscated_id of this RecognitionMetadata.
        :type obfuscated_id: str
        """

        self._obfuscated_id = obfuscated_id

    @property
    def original_media_type(self):
        """Gets the original_media_type of this RecognitionMetadata.

        The original media the speech was recorded on.

        :return: The original_media_type of this RecognitionMetadata.
        :rtype: str
        """
        return self._original_media_type

    @original_media_type.setter
    def original_media_type(self, original_media_type):
        """Sets the original_media_type of this RecognitionMetadata.

        The original media the speech was recorded on.

        :param original_media_type: The original_media_type of this RecognitionMetadata.
        :type original_media_type: str
        """
        allowed_values = ["ORIGINAL_MEDIA_TYPE_UNSPECIFIED", "AUDIO", "VIDEO"]  # noqa: E501
        if original_media_type not in allowed_values:
            raise ValueError(
                "Invalid value for `original_media_type` ({0}), must be one of {1}"
                .format(original_media_type, allowed_values)
            )

        self._original_media_type = original_media_type

    @property
    def original_mime_type(self):
        """Gets the original_mime_type of this RecognitionMetadata.

        Mime type of the original audio file. For example `audio/m4a`, `audio/x-alaw-basic`, `audio/mp3`, `audio/3gpp`. A list of possible audio mime types is maintained at http://www.iana.org/assignments/media-types/media-types.xhtml#audio

        :return: The original_mime_type of this RecognitionMetadata.
        :rtype: str
        """
        return self._original_mime_type

    @original_mime_type.setter
    def original_mime_type(self, original_mime_type):
        """Sets the original_mime_type of this RecognitionMetadata.

        Mime type of the original audio file. For example `audio/m4a`, `audio/x-alaw-basic`, `audio/mp3`, `audio/3gpp`. A list of possible audio mime types is maintained at http://www.iana.org/assignments/media-types/media-types.xhtml#audio

        :param original_mime_type: The original_mime_type of this RecognitionMetadata.
        :type original_mime_type: str
        """

        self._original_mime_type = original_mime_type

    @property
    def recording_device_name(self):
        """Gets the recording_device_name of this RecognitionMetadata.

        The device used to make the recording. Examples 'Nexus 5X' or 'Polycom SoundStation IP 6000' or 'POTS' or 'VoIP' or 'Cardioid Microphone'.

        :return: The recording_device_name of this RecognitionMetadata.
        :rtype: str
        """
        return self._recording_device_name

    @recording_device_name.setter
    def recording_device_name(self, recording_device_name):
        """Sets the recording_device_name of this RecognitionMetadata.

        The device used to make the recording. Examples 'Nexus 5X' or 'Polycom SoundStation IP 6000' or 'POTS' or 'VoIP' or 'Cardioid Microphone'.

        :param recording_device_name: The recording_device_name of this RecognitionMetadata.
        :type recording_device_name: str
        """

        self._recording_device_name = recording_device_name

    @property
    def recording_device_type(self):
        """Gets the recording_device_type of this RecognitionMetadata.

        The type of device the speech was recorded with.

        :return: The recording_device_type of this RecognitionMetadata.
        :rtype: str
        """
        return self._recording_device_type

    @recording_device_type.setter
    def recording_device_type(self, recording_device_type):
        """Sets the recording_device_type of this RecognitionMetadata.

        The type of device the speech was recorded with.

        :param recording_device_type: The recording_device_type of this RecognitionMetadata.
        :type recording_device_type: str
        """
        allowed_values = ["RECORDING_DEVICE_TYPE_UNSPECIFIED", "SMARTPHONE", "PC", "PHONE_LINE", "VEHICLE", "OTHER_OUTDOOR_DEVICE", "OTHER_INDOOR_DEVICE"]  # noqa: E501
        if recording_device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `recording_device_type` ({0}), must be one of {1}"
                .format(recording_device_type, allowed_values)
            )

        self._recording_device_type = recording_device_type
