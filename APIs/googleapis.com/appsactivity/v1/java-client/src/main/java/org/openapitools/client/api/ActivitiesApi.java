/*
 * Drive Activity API
 * Provides a historical view of activity.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListActivitiesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActivitiesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ActivitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActivitiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appsactivityActivitiesList
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param driveAncestorId Identifies the Drive folder containing the items for which to return activities. (optional)
     * @param driveFileId Identifies the Drive item to return activities for. (optional)
     * @param groupingStrategy Indicates the strategy to use when grouping singleEvents items in the associated combinedEvent object. (optional)
     * @param pageSize The maximum number of events to return on a page. The response includes a continuation token if there are more events. (optional)
     * @param pageToken A token to retrieve a specific page of results. (optional)
     * @param source The Google service from which to return activities. Possible values of source are:  - drive.google.com (optional)
     * @param userId The ID used for ACL checks (does not filter the resulting event list by the assigned value). Use the special value me to indicate the currently authenticated user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsactivityActivitiesListCall(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String driveAncestorId, String driveFileId, String groupingStrategy, Integer pageSize, String pageToken, String source, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/activities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (driveAncestorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drive.ancestorId", driveAncestorId));
        }

        if (driveFileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drive.fileId", driveFileId));
        }

        if (groupingStrategy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupingStrategy", groupingStrategy));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsactivityActivitiesListValidateBeforeCall(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String driveAncestorId, String driveFileId, String groupingStrategy, Integer pageSize, String pageToken, String source, String userId, final ApiCallback _callback) throws ApiException {
        return appsactivityActivitiesListCall(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, driveAncestorId, driveFileId, groupingStrategy, pageSize, pageToken, source, userId, _callback);

    }

    /**
     * 
     * Returns a list of activities visible to the current logged in user. Visible activities are determined by the visibility settings of the object that was acted on, e.g. Drive files a user can see. An activity is a record of past events. Multiple events may be merged if they are similar. A request is scoped to activities from a given Google service using the source parameter.
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param driveAncestorId Identifies the Drive folder containing the items for which to return activities. (optional)
     * @param driveFileId Identifies the Drive item to return activities for. (optional)
     * @param groupingStrategy Indicates the strategy to use when grouping singleEvents items in the associated combinedEvent object. (optional)
     * @param pageSize The maximum number of events to return on a page. The response includes a continuation token if there are more events. (optional)
     * @param pageToken A token to retrieve a specific page of results. (optional)
     * @param source The Google service from which to return activities. Possible values of source are:  - drive.google.com (optional)
     * @param userId The ID used for ACL checks (does not filter the resulting event list by the assigned value). Use the special value me to indicate the currently authenticated user. (optional)
     * @return ListActivitiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ListActivitiesResponse appsactivityActivitiesList(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String driveAncestorId, String driveFileId, String groupingStrategy, Integer pageSize, String pageToken, String source, String userId) throws ApiException {
        ApiResponse<ListActivitiesResponse> localVarResp = appsactivityActivitiesListWithHttpInfo(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, driveAncestorId, driveFileId, groupingStrategy, pageSize, pageToken, source, userId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of activities visible to the current logged in user. Visible activities are determined by the visibility settings of the object that was acted on, e.g. Drive files a user can see. An activity is a record of past events. Multiple events may be merged if they are similar. A request is scoped to activities from a given Google service using the source parameter.
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param driveAncestorId Identifies the Drive folder containing the items for which to return activities. (optional)
     * @param driveFileId Identifies the Drive item to return activities for. (optional)
     * @param groupingStrategy Indicates the strategy to use when grouping singleEvents items in the associated combinedEvent object. (optional)
     * @param pageSize The maximum number of events to return on a page. The response includes a continuation token if there are more events. (optional)
     * @param pageToken A token to retrieve a specific page of results. (optional)
     * @param source The Google service from which to return activities. Possible values of source are:  - drive.google.com (optional)
     * @param userId The ID used for ACL checks (does not filter the resulting event list by the assigned value). Use the special value me to indicate the currently authenticated user. (optional)
     * @return ApiResponse&lt;ListActivitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListActivitiesResponse> appsactivityActivitiesListWithHttpInfo(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String driveAncestorId, String driveFileId, String groupingStrategy, Integer pageSize, String pageToken, String source, String userId) throws ApiException {
        okhttp3.Call localVarCall = appsactivityActivitiesListValidateBeforeCall(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, driveAncestorId, driveFileId, groupingStrategy, pageSize, pageToken, source, userId, null);
        Type localVarReturnType = new TypeToken<ListActivitiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of activities visible to the current logged in user. Visible activities are determined by the visibility settings of the object that was acted on, e.g. Drive files a user can see. An activity is a record of past events. Multiple events may be merged if they are similar. A request is scoped to activities from a given Google service using the source parameter.
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param driveAncestorId Identifies the Drive folder containing the items for which to return activities. (optional)
     * @param driveFileId Identifies the Drive item to return activities for. (optional)
     * @param groupingStrategy Indicates the strategy to use when grouping singleEvents items in the associated combinedEvent object. (optional)
     * @param pageSize The maximum number of events to return on a page. The response includes a continuation token if there are more events. (optional)
     * @param pageToken A token to retrieve a specific page of results. (optional)
     * @param source The Google service from which to return activities. Possible values of source are:  - drive.google.com (optional)
     * @param userId The ID used for ACL checks (does not filter the resulting event list by the assigned value). Use the special value me to indicate the currently authenticated user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsactivityActivitiesListAsync(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String driveAncestorId, String driveFileId, String groupingStrategy, Integer pageSize, String pageToken, String source, String userId, final ApiCallback<ListActivitiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsactivityActivitiesListValidateBeforeCall(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, driveAncestorId, driveFileId, groupingStrategy, pageSize, pageToken, source, userId, _callback);
        Type localVarReturnType = new TypeToken<ListActivitiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
