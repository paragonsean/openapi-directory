/*
 * Drive Activity API
 * Provides a historical view of activity.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Move;
import org.openapitools.client.model.PermissionChange;
import org.openapitools.client.model.Rename;
import org.openapitools.client.model.Target;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the changes associated with an action taken by a user.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:23.451111-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Event {
  /**
   * Gets or Sets additionalEventTypes
   */
  @JsonAdapter(AdditionalEventTypesEnum.Adapter.class)
  public enum AdditionalEventTypesEnum {
    COMMENT("comment"),
    
    CREATE("create"),
    
    EDIT("edit"),
    
    EMPTY_TRASH("emptyTrash"),
    
    MOVE("move"),
    
    PERMISSION_CHANGE("permissionChange"),
    
    RENAME("rename"),
    
    TRASH("trash"),
    
    UNKNOWN("unknown"),
    
    UNTRASH("untrash"),
    
    UPLOAD("upload");

    private String value;

    AdditionalEventTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdditionalEventTypesEnum fromValue(String value) {
      for (AdditionalEventTypesEnum b : AdditionalEventTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdditionalEventTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdditionalEventTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdditionalEventTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdditionalEventTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdditionalEventTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADDITIONAL_EVENT_TYPES = "additionalEventTypes";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_EVENT_TYPES)
  private List<AdditionalEventTypesEnum> additionalEventTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENT_TIME_MILLIS = "eventTimeMillis";
  @SerializedName(SERIALIZED_NAME_EVENT_TIME_MILLIS)
  private String eventTimeMillis;

  public static final String SERIALIZED_NAME_FROM_USER_DELETION = "fromUserDeletion";
  @SerializedName(SERIALIZED_NAME_FROM_USER_DELETION)
  private Boolean fromUserDeletion;

  public static final String SERIALIZED_NAME_MOVE = "move";
  @SerializedName(SERIALIZED_NAME_MOVE)
  private Move move;

  public static final String SERIALIZED_NAME_PERMISSION_CHANGES = "permissionChanges";
  @SerializedName(SERIALIZED_NAME_PERMISSION_CHANGES)
  private List<PermissionChange> permissionChanges = new ArrayList<>();

  /**
   * The main type of event that occurred.
   */
  @JsonAdapter(PrimaryEventTypeEnum.Adapter.class)
  public enum PrimaryEventTypeEnum {
    COMMENT("comment"),
    
    CREATE("create"),
    
    EDIT("edit"),
    
    EMPTY_TRASH("emptyTrash"),
    
    MOVE("move"),
    
    PERMISSION_CHANGE("permissionChange"),
    
    RENAME("rename"),
    
    TRASH("trash"),
    
    UNKNOWN("unknown"),
    
    UNTRASH("untrash"),
    
    UPLOAD("upload");

    private String value;

    PrimaryEventTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrimaryEventTypeEnum fromValue(String value) {
      for (PrimaryEventTypeEnum b : PrimaryEventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrimaryEventTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrimaryEventTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrimaryEventTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrimaryEventTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PrimaryEventTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRIMARY_EVENT_TYPE = "primaryEventType";
  @SerializedName(SERIALIZED_NAME_PRIMARY_EVENT_TYPE)
  private PrimaryEventTypeEnum primaryEventType;

  public static final String SERIALIZED_NAME_RENAME = "rename";
  @SerializedName(SERIALIZED_NAME_RENAME)
  private Rename rename;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private Target target;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public Event() {
  }

  public Event additionalEventTypes(List<AdditionalEventTypesEnum> additionalEventTypes) {
    this.additionalEventTypes = additionalEventTypes;
    return this;
  }

  public Event addAdditionalEventTypesItem(AdditionalEventTypesEnum additionalEventTypesItem) {
    if (this.additionalEventTypes == null) {
      this.additionalEventTypes = new ArrayList<>();
    }
    this.additionalEventTypes.add(additionalEventTypesItem);
    return this;
  }

  /**
   * Additional event types. Some events may have multiple types when multiple actions are part of a single event. For example, creating a document, renaming it, and sharing it may be part of a single file-creation event.
   * @return additionalEventTypes
   */
  @javax.annotation.Nullable
  public List<AdditionalEventTypesEnum> getAdditionalEventTypes() {
    return additionalEventTypes;
  }

  public void setAdditionalEventTypes(List<AdditionalEventTypesEnum> additionalEventTypes) {
    this.additionalEventTypes = additionalEventTypes;
  }


  public Event eventTimeMillis(String eventTimeMillis) {
    this.eventTimeMillis = eventTimeMillis;
    return this;
  }

  /**
   * The time at which the event occurred formatted as Unix time in milliseconds.
   * @return eventTimeMillis
   */
  @javax.annotation.Nullable
  public String getEventTimeMillis() {
    return eventTimeMillis;
  }

  public void setEventTimeMillis(String eventTimeMillis) {
    this.eventTimeMillis = eventTimeMillis;
  }


  public Event fromUserDeletion(Boolean fromUserDeletion) {
    this.fromUserDeletion = fromUserDeletion;
    return this;
  }

  /**
   * Whether this event is caused by a user being deleted.
   * @return fromUserDeletion
   */
  @javax.annotation.Nullable
  public Boolean getFromUserDeletion() {
    return fromUserDeletion;
  }

  public void setFromUserDeletion(Boolean fromUserDeletion) {
    this.fromUserDeletion = fromUserDeletion;
  }


  public Event move(Move move) {
    this.move = move;
    return this;
  }

  /**
   * Get move
   * @return move
   */
  @javax.annotation.Nullable
  public Move getMove() {
    return move;
  }

  public void setMove(Move move) {
    this.move = move;
  }


  public Event permissionChanges(List<PermissionChange> permissionChanges) {
    this.permissionChanges = permissionChanges;
    return this;
  }

  public Event addPermissionChangesItem(PermissionChange permissionChangesItem) {
    if (this.permissionChanges == null) {
      this.permissionChanges = new ArrayList<>();
    }
    this.permissionChanges.add(permissionChangesItem);
    return this;
  }

  /**
   * Extra information for permissionChange type events, such as the user or group the new permission applies to.
   * @return permissionChanges
   */
  @javax.annotation.Nullable
  public List<PermissionChange> getPermissionChanges() {
    return permissionChanges;
  }

  public void setPermissionChanges(List<PermissionChange> permissionChanges) {
    this.permissionChanges = permissionChanges;
  }


  public Event primaryEventType(PrimaryEventTypeEnum primaryEventType) {
    this.primaryEventType = primaryEventType;
    return this;
  }

  /**
   * The main type of event that occurred.
   * @return primaryEventType
   */
  @javax.annotation.Nullable
  public PrimaryEventTypeEnum getPrimaryEventType() {
    return primaryEventType;
  }

  public void setPrimaryEventType(PrimaryEventTypeEnum primaryEventType) {
    this.primaryEventType = primaryEventType;
  }


  public Event rename(Rename rename) {
    this.rename = rename;
    return this;
  }

  /**
   * Get rename
   * @return rename
   */
  @javax.annotation.Nullable
  public Rename getRename() {
    return rename;
  }

  public void setRename(Rename rename) {
    this.rename = rename;
  }


  public Event target(Target target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nullable
  public Target getTarget() {
    return target;
  }

  public void setTarget(Target target) {
    this.target = target;
  }


  public Event user(User user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.additionalEventTypes, event.additionalEventTypes) &&
        Objects.equals(this.eventTimeMillis, event.eventTimeMillis) &&
        Objects.equals(this.fromUserDeletion, event.fromUserDeletion) &&
        Objects.equals(this.move, event.move) &&
        Objects.equals(this.permissionChanges, event.permissionChanges) &&
        Objects.equals(this.primaryEventType, event.primaryEventType) &&
        Objects.equals(this.rename, event.rename) &&
        Objects.equals(this.target, event.target) &&
        Objects.equals(this.user, event.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalEventTypes, eventTimeMillis, fromUserDeletion, move, permissionChanges, primaryEventType, rename, target, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    additionalEventTypes: ").append(toIndentedString(additionalEventTypes)).append("\n");
    sb.append("    eventTimeMillis: ").append(toIndentedString(eventTimeMillis)).append("\n");
    sb.append("    fromUserDeletion: ").append(toIndentedString(fromUserDeletion)).append("\n");
    sb.append("    move: ").append(toIndentedString(move)).append("\n");
    sb.append("    permissionChanges: ").append(toIndentedString(permissionChanges)).append("\n");
    sb.append("    primaryEventType: ").append(toIndentedString(primaryEventType)).append("\n");
    sb.append("    rename: ").append(toIndentedString(rename)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalEventTypes");
    openapiFields.add("eventTimeMillis");
    openapiFields.add("fromUserDeletion");
    openapiFields.add("move");
    openapiFields.add("permissionChanges");
    openapiFields.add("primaryEventType");
    openapiFields.add("rename");
    openapiFields.add("target");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Event
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Event is not found in the empty JSON string", Event.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Event.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Event` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("additionalEventTypes") != null && !jsonObj.get("additionalEventTypes").isJsonNull() && !jsonObj.get("additionalEventTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalEventTypes` to be an array in the JSON string but got `%s`", jsonObj.get("additionalEventTypes").toString()));
      }
      if ((jsonObj.get("eventTimeMillis") != null && !jsonObj.get("eventTimeMillis").isJsonNull()) && !jsonObj.get("eventTimeMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventTimeMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventTimeMillis").toString()));
      }
      // validate the optional field `move`
      if (jsonObj.get("move") != null && !jsonObj.get("move").isJsonNull()) {
        Move.validateJsonElement(jsonObj.get("move"));
      }
      if (jsonObj.get("permissionChanges") != null && !jsonObj.get("permissionChanges").isJsonNull()) {
        JsonArray jsonArraypermissionChanges = jsonObj.getAsJsonArray("permissionChanges");
        if (jsonArraypermissionChanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("permissionChanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `permissionChanges` to be an array in the JSON string but got `%s`", jsonObj.get("permissionChanges").toString()));
          }

          // validate the optional field `permissionChanges` (array)
          for (int i = 0; i < jsonArraypermissionChanges.size(); i++) {
            PermissionChange.validateJsonElement(jsonArraypermissionChanges.get(i));
          };
        }
      }
      if ((jsonObj.get("primaryEventType") != null && !jsonObj.get("primaryEventType").isJsonNull()) && !jsonObj.get("primaryEventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryEventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryEventType").toString()));
      }
      // validate the optional field `primaryEventType`
      if (jsonObj.get("primaryEventType") != null && !jsonObj.get("primaryEventType").isJsonNull()) {
        PrimaryEventTypeEnum.validateJsonElement(jsonObj.get("primaryEventType"));
      }
      // validate the optional field `rename`
      if (jsonObj.get("rename") != null && !jsonObj.get("rename").isJsonNull()) {
        Rename.validateJsonElement(jsonObj.get("rename"));
      }
      // validate the optional field `target`
      if (jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) {
        Target.validateJsonElement(jsonObj.get("target"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Event.class));

       return (TypeAdapter<T>) new TypeAdapter<Event>() {
           @Override
           public void write(JsonWriter out, Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Event read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Event given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Event
   * @throws IOException if the JSON string is invalid with respect to Event
   */
  public static Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Event.class);
  }

  /**
   * Convert an instance of Event to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

