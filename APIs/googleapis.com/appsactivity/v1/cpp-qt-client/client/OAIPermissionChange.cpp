/**
 * Drive Activity API
 * Provides a historical view of activity.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermissionChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermissionChange::OAIPermissionChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermissionChange::OAIPermissionChange() {
    this->initializeModel();
}

OAIPermissionChange::~OAIPermissionChange() {}

void OAIPermissionChange::initializeModel() {

    m_added_permissions_isSet = false;
    m_added_permissions_isValid = false;

    m_removed_permissions_isSet = false;
    m_removed_permissions_isValid = false;
}

void OAIPermissionChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermissionChange::fromJsonObject(QJsonObject json) {

    m_added_permissions_isValid = ::OpenAPI::fromJsonValue(m_added_permissions, json[QString("addedPermissions")]);
    m_added_permissions_isSet = !json[QString("addedPermissions")].isNull() && m_added_permissions_isValid;

    m_removed_permissions_isValid = ::OpenAPI::fromJsonValue(m_removed_permissions, json[QString("removedPermissions")]);
    m_removed_permissions_isSet = !json[QString("removedPermissions")].isNull() && m_removed_permissions_isValid;
}

QString OAIPermissionChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermissionChange::asJsonObject() const {
    QJsonObject obj;
    if (m_added_permissions.size() > 0) {
        obj.insert(QString("addedPermissions"), ::OpenAPI::toJsonValue(m_added_permissions));
    }
    if (m_removed_permissions.size() > 0) {
        obj.insert(QString("removedPermissions"), ::OpenAPI::toJsonValue(m_removed_permissions));
    }
    return obj;
}

QList<OAIPermission> OAIPermissionChange::getAddedPermissions() const {
    return m_added_permissions;
}
void OAIPermissionChange::setAddedPermissions(const QList<OAIPermission> &added_permissions) {
    m_added_permissions = added_permissions;
    m_added_permissions_isSet = true;
}

bool OAIPermissionChange::is_added_permissions_Set() const{
    return m_added_permissions_isSet;
}

bool OAIPermissionChange::is_added_permissions_Valid() const{
    return m_added_permissions_isValid;
}

QList<OAIPermission> OAIPermissionChange::getRemovedPermissions() const {
    return m_removed_permissions;
}
void OAIPermissionChange::setRemovedPermissions(const QList<OAIPermission> &removed_permissions) {
    m_removed_permissions = removed_permissions;
    m_removed_permissions_isSet = true;
}

bool OAIPermissionChange::is_removed_permissions_Set() const{
    return m_removed_permissions_isSet;
}

bool OAIPermissionChange::is_removed_permissions_Valid() const{
    return m_removed_permissions_isValid;
}

bool OAIPermissionChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_removed_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermissionChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
