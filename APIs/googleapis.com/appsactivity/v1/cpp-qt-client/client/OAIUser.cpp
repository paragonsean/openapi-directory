/**
 * Drive Activity API
 * Provides a historical view of activity.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_is_deleted_isSet = false;
    m_is_deleted_isValid = false;

    m_is_me_isSet = false;
    m_is_me_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_permission_id_isSet = false;
    m_permission_id_isValid = false;

    m_photo_isSet = false;
    m_photo_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_is_deleted_isValid = ::OpenAPI::fromJsonValue(m_is_deleted, json[QString("isDeleted")]);
    m_is_deleted_isSet = !json[QString("isDeleted")].isNull() && m_is_deleted_isValid;

    m_is_me_isValid = ::OpenAPI::fromJsonValue(m_is_me, json[QString("isMe")]);
    m_is_me_isSet = !json[QString("isMe")].isNull() && m_is_me_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_permission_id_isValid = ::OpenAPI::fromJsonValue(m_permission_id, json[QString("permissionId")]);
    m_permission_id_isSet = !json[QString("permissionId")].isNull() && m_permission_id_isValid;

    m_photo_isValid = ::OpenAPI::fromJsonValue(m_photo, json[QString("photo")]);
    m_photo_isSet = !json[QString("photo")].isNull() && m_photo_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_is_deleted_isSet) {
        obj.insert(QString("isDeleted"), ::OpenAPI::toJsonValue(m_is_deleted));
    }
    if (m_is_me_isSet) {
        obj.insert(QString("isMe"), ::OpenAPI::toJsonValue(m_is_me));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_permission_id_isSet) {
        obj.insert(QString("permissionId"), ::OpenAPI::toJsonValue(m_permission_id));
    }
    if (m_photo.isSet()) {
        obj.insert(QString("photo"), ::OpenAPI::toJsonValue(m_photo));
    }
    return obj;
}

bool OAIUser::isIsDeleted() const {
    return m_is_deleted;
}
void OAIUser::setIsDeleted(const bool &is_deleted) {
    m_is_deleted = is_deleted;
    m_is_deleted_isSet = true;
}

bool OAIUser::is_is_deleted_Set() const{
    return m_is_deleted_isSet;
}

bool OAIUser::is_is_deleted_Valid() const{
    return m_is_deleted_isValid;
}

bool OAIUser::isIsMe() const {
    return m_is_me;
}
void OAIUser::setIsMe(const bool &is_me) {
    m_is_me = is_me;
    m_is_me_isSet = true;
}

bool OAIUser::is_is_me_Set() const{
    return m_is_me_isSet;
}

bool OAIUser::is_is_me_Valid() const{
    return m_is_me_isValid;
}

QString OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUser::getPermissionId() const {
    return m_permission_id;
}
void OAIUser::setPermissionId(const QString &permission_id) {
    m_permission_id = permission_id;
    m_permission_id_isSet = true;
}

bool OAIUser::is_permission_id_Set() const{
    return m_permission_id_isSet;
}

bool OAIUser::is_permission_id_Valid() const{
    return m_permission_id_isValid;
}

OAIPhoto OAIUser::getPhoto() const {
    return m_photo;
}
void OAIUser::setPhoto(const OAIPhoto &photo) {
    m_photo = photo;
    m_photo_isSet = true;
}

bool OAIUser::is_photo_Set() const{
    return m_photo_isSet;
}

bool OAIUser::is_photo_Valid() const{
    return m_photo_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_me_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
