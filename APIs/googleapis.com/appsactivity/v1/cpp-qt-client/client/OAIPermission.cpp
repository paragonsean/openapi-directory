/**
 * Drive Activity API
 * Provides a historical view of activity.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermission::OAIPermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermission::OAIPermission() {
    this->initializeModel();
}

OAIPermission::~OAIPermission() {}

void OAIPermission::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_permission_id_isSet = false;
    m_permission_id_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_with_link_isSet = false;
    m_with_link_isValid = false;
}

void OAIPermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermission::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_permission_id_isValid = ::OpenAPI::fromJsonValue(m_permission_id, json[QString("permissionId")]);
    m_permission_id_isSet = !json[QString("permissionId")].isNull() && m_permission_id_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_with_link_isValid = ::OpenAPI::fromJsonValue(m_with_link, json[QString("withLink")]);
    m_with_link_isSet = !json[QString("withLink")].isNull() && m_with_link_isValid;
}

QString OAIPermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermission::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_permission_id_isSet) {
        obj.insert(QString("permissionId"), ::OpenAPI::toJsonValue(m_permission_id));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_with_link_isSet) {
        obj.insert(QString("withLink"), ::OpenAPI::toJsonValue(m_with_link));
    }
    return obj;
}

QString OAIPermission::getName() const {
    return m_name;
}
void OAIPermission::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPermission::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPermission::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPermission::getPermissionId() const {
    return m_permission_id;
}
void OAIPermission::setPermissionId(const QString &permission_id) {
    m_permission_id = permission_id;
    m_permission_id_isSet = true;
}

bool OAIPermission::is_permission_id_Set() const{
    return m_permission_id_isSet;
}

bool OAIPermission::is_permission_id_Valid() const{
    return m_permission_id_isValid;
}

QString OAIPermission::getRole() const {
    return m_role;
}
void OAIPermission::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIPermission::is_role_Set() const{
    return m_role_isSet;
}

bool OAIPermission::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIPermission::getType() const {
    return m_type;
}
void OAIPermission::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPermission::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPermission::is_type_Valid() const{
    return m_type_isValid;
}

OAIUser OAIPermission::getUser() const {
    return m_user;
}
void OAIPermission::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIPermission::is_user_Set() const{
    return m_user_isSet;
}

bool OAIPermission::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIPermission::isWithLink() const {
    return m_with_link;
}
void OAIPermission::setWithLink(const bool &with_link) {
    m_with_link = with_link;
    m_with_link_isSet = true;
}

bool OAIPermission::is_with_link_Set() const{
    return m_with_link_isSet;
}

bool OAIPermission::is_with_link_Valid() const{
    return m_with_link_isValid;
}

bool OAIPermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_with_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
