/**
 * Drive Activity API
 * Provides a historical view of activity.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivity::OAIActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivity::OAIActivity() {
    this->initializeModel();
}

OAIActivity::~OAIActivity() {}

void OAIActivity::initializeModel() {

    m_combined_event_isSet = false;
    m_combined_event_isValid = false;

    m_single_events_isSet = false;
    m_single_events_isValid = false;
}

void OAIActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivity::fromJsonObject(QJsonObject json) {

    m_combined_event_isValid = ::OpenAPI::fromJsonValue(m_combined_event, json[QString("combinedEvent")]);
    m_combined_event_isSet = !json[QString("combinedEvent")].isNull() && m_combined_event_isValid;

    m_single_events_isValid = ::OpenAPI::fromJsonValue(m_single_events, json[QString("singleEvents")]);
    m_single_events_isSet = !json[QString("singleEvents")].isNull() && m_single_events_isValid;
}

QString OAIActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_combined_event.isSet()) {
        obj.insert(QString("combinedEvent"), ::OpenAPI::toJsonValue(m_combined_event));
    }
    if (m_single_events.size() > 0) {
        obj.insert(QString("singleEvents"), ::OpenAPI::toJsonValue(m_single_events));
    }
    return obj;
}

OAIEvent OAIActivity::getCombinedEvent() const {
    return m_combined_event;
}
void OAIActivity::setCombinedEvent(const OAIEvent &combined_event) {
    m_combined_event = combined_event;
    m_combined_event_isSet = true;
}

bool OAIActivity::is_combined_event_Set() const{
    return m_combined_event_isSet;
}

bool OAIActivity::is_combined_event_Valid() const{
    return m_combined_event_isValid;
}

QList<OAIEvent> OAIActivity::getSingleEvents() const {
    return m_single_events;
}
void OAIActivity::setSingleEvents(const QList<OAIEvent> &single_events) {
    m_single_events = single_events;
    m_single_events_isSet = true;
}

bool OAIActivity::is_single_events_Set() const{
    return m_single_events_isSet;
}

bool OAIActivity::is_single_events_Valid() const{
    return m_single_events_isValid;
}

bool OAIActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_combined_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
