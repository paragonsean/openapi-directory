/**
 * Drive Activity API
 * Provides a historical view of activity.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_additional_event_types_isSet = false;
    m_additional_event_types_isValid = false;

    m_event_time_millis_isSet = false;
    m_event_time_millis_isValid = false;

    m_from_user_deletion_isSet = false;
    m_from_user_deletion_isValid = false;

    m_move_isSet = false;
    m_move_isValid = false;

    m_permission_changes_isSet = false;
    m_permission_changes_isValid = false;

    m_primary_event_type_isSet = false;
    m_primary_event_type_isValid = false;

    m_rename_isSet = false;
    m_rename_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_additional_event_types_isValid = ::OpenAPI::fromJsonValue(m_additional_event_types, json[QString("additionalEventTypes")]);
    m_additional_event_types_isSet = !json[QString("additionalEventTypes")].isNull() && m_additional_event_types_isValid;

    m_event_time_millis_isValid = ::OpenAPI::fromJsonValue(m_event_time_millis, json[QString("eventTimeMillis")]);
    m_event_time_millis_isSet = !json[QString("eventTimeMillis")].isNull() && m_event_time_millis_isValid;

    m_from_user_deletion_isValid = ::OpenAPI::fromJsonValue(m_from_user_deletion, json[QString("fromUserDeletion")]);
    m_from_user_deletion_isSet = !json[QString("fromUserDeletion")].isNull() && m_from_user_deletion_isValid;

    m_move_isValid = ::OpenAPI::fromJsonValue(m_move, json[QString("move")]);
    m_move_isSet = !json[QString("move")].isNull() && m_move_isValid;

    m_permission_changes_isValid = ::OpenAPI::fromJsonValue(m_permission_changes, json[QString("permissionChanges")]);
    m_permission_changes_isSet = !json[QString("permissionChanges")].isNull() && m_permission_changes_isValid;

    m_primary_event_type_isValid = ::OpenAPI::fromJsonValue(m_primary_event_type, json[QString("primaryEventType")]);
    m_primary_event_type_isSet = !json[QString("primaryEventType")].isNull() && m_primary_event_type_isValid;

    m_rename_isValid = ::OpenAPI::fromJsonValue(m_rename, json[QString("rename")]);
    m_rename_isSet = !json[QString("rename")].isNull() && m_rename_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_event_types.size() > 0) {
        obj.insert(QString("additionalEventTypes"), ::OpenAPI::toJsonValue(m_additional_event_types));
    }
    if (m_event_time_millis_isSet) {
        obj.insert(QString("eventTimeMillis"), ::OpenAPI::toJsonValue(m_event_time_millis));
    }
    if (m_from_user_deletion_isSet) {
        obj.insert(QString("fromUserDeletion"), ::OpenAPI::toJsonValue(m_from_user_deletion));
    }
    if (m_move.isSet()) {
        obj.insert(QString("move"), ::OpenAPI::toJsonValue(m_move));
    }
    if (m_permission_changes.size() > 0) {
        obj.insert(QString("permissionChanges"), ::OpenAPI::toJsonValue(m_permission_changes));
    }
    if (m_primary_event_type_isSet) {
        obj.insert(QString("primaryEventType"), ::OpenAPI::toJsonValue(m_primary_event_type));
    }
    if (m_rename.isSet()) {
        obj.insert(QString("rename"), ::OpenAPI::toJsonValue(m_rename));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QList<QString> OAIEvent::getAdditionalEventTypes() const {
    return m_additional_event_types;
}
void OAIEvent::setAdditionalEventTypes(const QList<QString> &additional_event_types) {
    m_additional_event_types = additional_event_types;
    m_additional_event_types_isSet = true;
}

bool OAIEvent::is_additional_event_types_Set() const{
    return m_additional_event_types_isSet;
}

bool OAIEvent::is_additional_event_types_Valid() const{
    return m_additional_event_types_isValid;
}

QString OAIEvent::getEventTimeMillis() const {
    return m_event_time_millis;
}
void OAIEvent::setEventTimeMillis(const QString &event_time_millis) {
    m_event_time_millis = event_time_millis;
    m_event_time_millis_isSet = true;
}

bool OAIEvent::is_event_time_millis_Set() const{
    return m_event_time_millis_isSet;
}

bool OAIEvent::is_event_time_millis_Valid() const{
    return m_event_time_millis_isValid;
}

bool OAIEvent::isFromUserDeletion() const {
    return m_from_user_deletion;
}
void OAIEvent::setFromUserDeletion(const bool &from_user_deletion) {
    m_from_user_deletion = from_user_deletion;
    m_from_user_deletion_isSet = true;
}

bool OAIEvent::is_from_user_deletion_Set() const{
    return m_from_user_deletion_isSet;
}

bool OAIEvent::is_from_user_deletion_Valid() const{
    return m_from_user_deletion_isValid;
}

OAIMove OAIEvent::getMove() const {
    return m_move;
}
void OAIEvent::setMove(const OAIMove &move) {
    m_move = move;
    m_move_isSet = true;
}

bool OAIEvent::is_move_Set() const{
    return m_move_isSet;
}

bool OAIEvent::is_move_Valid() const{
    return m_move_isValid;
}

QList<OAIPermissionChange> OAIEvent::getPermissionChanges() const {
    return m_permission_changes;
}
void OAIEvent::setPermissionChanges(const QList<OAIPermissionChange> &permission_changes) {
    m_permission_changes = permission_changes;
    m_permission_changes_isSet = true;
}

bool OAIEvent::is_permission_changes_Set() const{
    return m_permission_changes_isSet;
}

bool OAIEvent::is_permission_changes_Valid() const{
    return m_permission_changes_isValid;
}

QString OAIEvent::getPrimaryEventType() const {
    return m_primary_event_type;
}
void OAIEvent::setPrimaryEventType(const QString &primary_event_type) {
    m_primary_event_type = primary_event_type;
    m_primary_event_type_isSet = true;
}

bool OAIEvent::is_primary_event_type_Set() const{
    return m_primary_event_type_isSet;
}

bool OAIEvent::is_primary_event_type_Valid() const{
    return m_primary_event_type_isValid;
}

OAIRename OAIEvent::getRename() const {
    return m_rename;
}
void OAIEvent::setRename(const OAIRename &rename) {
    m_rename = rename;
    m_rename_isSet = true;
}

bool OAIEvent::is_rename_Set() const{
    return m_rename_isSet;
}

bool OAIEvent::is_rename_Valid() const{
    return m_rename_isValid;
}

OAITarget OAIEvent::getTarget() const {
    return m_target;
}
void OAIEvent::setTarget(const OAITarget &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIEvent::is_target_Set() const{
    return m_target_isSet;
}

bool OAIEvent::is_target_Valid() const{
    return m_target_isValid;
}

OAIUser OAIEvent::getUser() const {
    return m_user;
}
void OAIEvent::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIEvent::is_user_Set() const{
    return m_user_isSet;
}

bool OAIEvent::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_event_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_time_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_user_deletion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_move.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_changes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rename.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
