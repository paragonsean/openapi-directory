# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class Permission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, permission_id: str=None, role: str=None, type: str=None, user: User=None, with_link: bool=None):
        """Permission - a model defined in OpenAPI

        :param name: The name of this Permission.
        :param permission_id: The permission_id of this Permission.
        :param role: The role of this Permission.
        :param type: The type of this Permission.
        :param user: The user of this Permission.
        :param with_link: The with_link of this Permission.
        """
        self.openapi_types = {
            'name': str,
            'permission_id': str,
            'role': str,
            'type': str,
            'user': User,
            'with_link': bool
        }

        self.attribute_map = {
            'name': 'name',
            'permission_id': 'permissionId',
            'role': 'role',
            'type': 'type',
            'user': 'user',
            'with_link': 'withLink'
        }

        self._name = name
        self._permission_id = permission_id
        self._role = role
        self._type = type
        self._user = user
        self._with_link = with_link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Permission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Permission of this Permission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Permission.

        The name of the user or group the permission applies to.

        :return: The name of this Permission.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Permission.

        The name of the user or group the permission applies to.

        :param name: The name of this Permission.
        :type name: str
        """

        self._name = name

    @property
    def permission_id(self):
        """Gets the permission_id of this Permission.

        The ID for this permission. Corresponds to the Drive API's permission ID returned as part of the Drive Permissions resource.

        :return: The permission_id of this Permission.
        :rtype: str
        """
        return self._permission_id

    @permission_id.setter
    def permission_id(self, permission_id):
        """Sets the permission_id of this Permission.

        The ID for this permission. Corresponds to the Drive API's permission ID returned as part of the Drive Permissions resource.

        :param permission_id: The permission_id of this Permission.
        :type permission_id: str
        """

        self._permission_id = permission_id

    @property
    def role(self):
        """Gets the role of this Permission.

        Indicates the Google Drive permissions role. The role determines a user's ability to read, write, or comment on the file.

        :return: The role of this Permission.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Permission.

        Indicates the Google Drive permissions role. The role determines a user's ability to read, write, or comment on the file.

        :param role: The role of this Permission.
        :type role: str
        """
        allowed_values = ["commenter", "fileOrganizer", "owner", "publishedReader", "reader", "writer"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def type(self):
        """Gets the type of this Permission.

        Indicates how widely permissions are granted.

        :return: The type of this Permission.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Permission.

        Indicates how widely permissions are granted.

        :param type: The type of this Permission.
        :type type: str
        """
        allowed_values = ["anyone", "domain", "group", "user"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user(self):
        """Gets the user of this Permission.


        :return: The user of this Permission.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Permission.


        :param user: The user of this Permission.
        :type user: User
        """

        self._user = user

    @property
    def with_link(self):
        """Gets the with_link of this Permission.

        Whether the permission requires a link to the file.

        :return: The with_link of this Permission.
        :rtype: bool
        """
        return self._with_link

    @with_link.setter
    def with_link(self, with_link):
        """Sets the with_link of this Permission.

        Whether the permission requires a link to the file.

        :param with_link: The with_link of this Permission.
        :type with_link: bool
        """

        self._with_link = with_link
