# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.photo import Photo
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_deleted: bool=None, is_me: bool=None, name: str=None, permission_id: str=None, photo: Photo=None):
        """User - a model defined in OpenAPI

        :param is_deleted: The is_deleted of this User.
        :param is_me: The is_me of this User.
        :param name: The name of this User.
        :param permission_id: The permission_id of this User.
        :param photo: The photo of this User.
        """
        self.openapi_types = {
            'is_deleted': bool,
            'is_me': bool,
            'name': str,
            'permission_id': str,
            'photo': Photo
        }

        self.attribute_map = {
            'is_deleted': 'isDeleted',
            'is_me': 'isMe',
            'name': 'name',
            'permission_id': 'permissionId',
            'photo': 'photo'
        }

        self._is_deleted = is_deleted
        self._is_me = is_me
        self._name = name
        self._permission_id = permission_id
        self._photo = photo

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_deleted(self):
        """Gets the is_deleted of this User.

        A boolean which indicates whether the specified User was deleted. If true, name, photo and permission_id will be omitted.

        :return: The is_deleted of this User.
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this User.

        A boolean which indicates whether the specified User was deleted. If true, name, photo and permission_id will be omitted.

        :param is_deleted: The is_deleted of this User.
        :type is_deleted: bool
        """

        self._is_deleted = is_deleted

    @property
    def is_me(self):
        """Gets the is_me of this User.

        Whether the user is the authenticated user.

        :return: The is_me of this User.
        :rtype: bool
        """
        return self._is_me

    @is_me.setter
    def is_me(self, is_me):
        """Sets the is_me of this User.

        Whether the user is the authenticated user.

        :param is_me: The is_me of this User.
        :type is_me: bool
        """

        self._is_me = is_me

    @property
    def name(self):
        """Gets the name of this User.

        The displayable name of the user.

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        The displayable name of the user.

        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def permission_id(self):
        """Gets the permission_id of this User.

        The permission ID associated with this user. Equivalent to the Drive API's permission ID for this user, returned as part of the Drive Permissions resource.

        :return: The permission_id of this User.
        :rtype: str
        """
        return self._permission_id

    @permission_id.setter
    def permission_id(self, permission_id):
        """Sets the permission_id of this User.

        The permission ID associated with this user. Equivalent to the Drive API's permission ID for this user, returned as part of the Drive Permissions resource.

        :param permission_id: The permission_id of this User.
        :type permission_id: str
        """

        self._permission_id = permission_id

    @property
    def photo(self):
        """Gets the photo of this User.


        :return: The photo of this User.
        :rtype: Photo
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this User.


        :param photo: The photo of this User.
        :type photo: Photo
        """

        self._photo = photo
