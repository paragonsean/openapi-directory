# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Parent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, is_root: bool=None, title: str=None):
        """Parent - a model defined in OpenAPI

        :param id: The id of this Parent.
        :param is_root: The is_root of this Parent.
        :param title: The title of this Parent.
        """
        self.openapi_types = {
            'id': str,
            'is_root': bool,
            'title': str
        }

        self.attribute_map = {
            'id': 'id',
            'is_root': 'isRoot',
            'title': 'title'
        }

        self._id = id
        self._is_root = is_root
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Parent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Parent of this Parent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Parent.

        The parent's ID.

        :return: The id of this Parent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Parent.

        The parent's ID.

        :param id: The id of this Parent.
        :type id: str
        """

        self._id = id

    @property
    def is_root(self):
        """Gets the is_root of this Parent.

        Whether this is the root folder.

        :return: The is_root of this Parent.
        :rtype: bool
        """
        return self._is_root

    @is_root.setter
    def is_root(self, is_root):
        """Sets the is_root of this Parent.

        Whether this is the root folder.

        :param is_root: The is_root of this Parent.
        :type is_root: bool
        """

        self._is_root = is_root

    @property
    def title(self):
        """Gets the title of this Parent.

        The parent's title.

        :return: The title of this Parent.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Parent.

        The parent's title.

        :param title: The title of this Parent.
        :type title: str
        """

        self._title = title
