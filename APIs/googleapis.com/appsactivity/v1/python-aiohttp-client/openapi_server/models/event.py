# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.move import Move
from openapi_server.models.permission_change import PermissionChange
from openapi_server.models.rename import Rename
from openapi_server.models.target import Target
from openapi_server.models.user import User
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_event_types: List[str]=None, event_time_millis: str=None, from_user_deletion: bool=None, move: Move=None, permission_changes: List[PermissionChange]=None, primary_event_type: str=None, rename: Rename=None, target: Target=None, user: User=None):
        """Event - a model defined in OpenAPI

        :param additional_event_types: The additional_event_types of this Event.
        :param event_time_millis: The event_time_millis of this Event.
        :param from_user_deletion: The from_user_deletion of this Event.
        :param move: The move of this Event.
        :param permission_changes: The permission_changes of this Event.
        :param primary_event_type: The primary_event_type of this Event.
        :param rename: The rename of this Event.
        :param target: The target of this Event.
        :param user: The user of this Event.
        """
        self.openapi_types = {
            'additional_event_types': List[str],
            'event_time_millis': str,
            'from_user_deletion': bool,
            'move': Move,
            'permission_changes': List[PermissionChange],
            'primary_event_type': str,
            'rename': Rename,
            'target': Target,
            'user': User
        }

        self.attribute_map = {
            'additional_event_types': 'additionalEventTypes',
            'event_time_millis': 'eventTimeMillis',
            'from_user_deletion': 'fromUserDeletion',
            'move': 'move',
            'permission_changes': 'permissionChanges',
            'primary_event_type': 'primaryEventType',
            'rename': 'rename',
            'target': 'target',
            'user': 'user'
        }

        self._additional_event_types = additional_event_types
        self._event_time_millis = event_time_millis
        self._from_user_deletion = from_user_deletion
        self._move = move
        self._permission_changes = permission_changes
        self._primary_event_type = primary_event_type
        self._rename = rename
        self._target = target
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_event_types(self):
        """Gets the additional_event_types of this Event.

        Additional event types. Some events may have multiple types when multiple actions are part of a single event. For example, creating a document, renaming it, and sharing it may be part of a single file-creation event.

        :return: The additional_event_types of this Event.
        :rtype: List[str]
        """
        return self._additional_event_types

    @additional_event_types.setter
    def additional_event_types(self, additional_event_types):
        """Sets the additional_event_types of this Event.

        Additional event types. Some events may have multiple types when multiple actions are part of a single event. For example, creating a document, renaming it, and sharing it may be part of a single file-creation event.

        :param additional_event_types: The additional_event_types of this Event.
        :type additional_event_types: List[str]
        """
        allowed_values = ["comment", "create", "edit", "emptyTrash", "move", "permissionChange", "rename", "trash", "unknown", "untrash", "upload"]  # noqa: E501
        if not set(additional_event_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `additional_event_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(additional_event_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._additional_event_types = additional_event_types

    @property
    def event_time_millis(self):
        """Gets the event_time_millis of this Event.

        The time at which the event occurred formatted as Unix time in milliseconds.

        :return: The event_time_millis of this Event.
        :rtype: str
        """
        return self._event_time_millis

    @event_time_millis.setter
    def event_time_millis(self, event_time_millis):
        """Sets the event_time_millis of this Event.

        The time at which the event occurred formatted as Unix time in milliseconds.

        :param event_time_millis: The event_time_millis of this Event.
        :type event_time_millis: str
        """

        self._event_time_millis = event_time_millis

    @property
    def from_user_deletion(self):
        """Gets the from_user_deletion of this Event.

        Whether this event is caused by a user being deleted.

        :return: The from_user_deletion of this Event.
        :rtype: bool
        """
        return self._from_user_deletion

    @from_user_deletion.setter
    def from_user_deletion(self, from_user_deletion):
        """Sets the from_user_deletion of this Event.

        Whether this event is caused by a user being deleted.

        :param from_user_deletion: The from_user_deletion of this Event.
        :type from_user_deletion: bool
        """

        self._from_user_deletion = from_user_deletion

    @property
    def move(self):
        """Gets the move of this Event.


        :return: The move of this Event.
        :rtype: Move
        """
        return self._move

    @move.setter
    def move(self, move):
        """Sets the move of this Event.


        :param move: The move of this Event.
        :type move: Move
        """

        self._move = move

    @property
    def permission_changes(self):
        """Gets the permission_changes of this Event.

        Extra information for permissionChange type events, such as the user or group the new permission applies to.

        :return: The permission_changes of this Event.
        :rtype: List[PermissionChange]
        """
        return self._permission_changes

    @permission_changes.setter
    def permission_changes(self, permission_changes):
        """Sets the permission_changes of this Event.

        Extra information for permissionChange type events, such as the user or group the new permission applies to.

        :param permission_changes: The permission_changes of this Event.
        :type permission_changes: List[PermissionChange]
        """

        self._permission_changes = permission_changes

    @property
    def primary_event_type(self):
        """Gets the primary_event_type of this Event.

        The main type of event that occurred.

        :return: The primary_event_type of this Event.
        :rtype: str
        """
        return self._primary_event_type

    @primary_event_type.setter
    def primary_event_type(self, primary_event_type):
        """Sets the primary_event_type of this Event.

        The main type of event that occurred.

        :param primary_event_type: The primary_event_type of this Event.
        :type primary_event_type: str
        """
        allowed_values = ["comment", "create", "edit", "emptyTrash", "move", "permissionChange", "rename", "trash", "unknown", "untrash", "upload"]  # noqa: E501
        if primary_event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `primary_event_type` ({0}), must be one of {1}"
                .format(primary_event_type, allowed_values)
            )

        self._primary_event_type = primary_event_type

    @property
    def rename(self):
        """Gets the rename of this Event.


        :return: The rename of this Event.
        :rtype: Rename
        """
        return self._rename

    @rename.setter
    def rename(self, rename):
        """Sets the rename of this Event.


        :param rename: The rename of this Event.
        :type rename: Rename
        """

        self._rename = rename

    @property
    def target(self):
        """Gets the target of this Event.


        :return: The target of this Event.
        :rtype: Target
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Event.


        :param target: The target of this Event.
        :type target: Target
        """

        self._target = target

    @property
    def user(self):
        """Gets the user of this Event.


        :return: The user of this Event.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Event.


        :param user: The user of this Event.
        :type user: User
        """

        self._user = user
