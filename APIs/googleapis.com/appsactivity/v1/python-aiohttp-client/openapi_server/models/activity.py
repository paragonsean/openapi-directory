# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event import Event
from openapi_server import util


class Activity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, combined_event: Event=None, single_events: List[Event]=None):
        """Activity - a model defined in OpenAPI

        :param combined_event: The combined_event of this Activity.
        :param single_events: The single_events of this Activity.
        """
        self.openapi_types = {
            'combined_event': Event,
            'single_events': List[Event]
        }

        self.attribute_map = {
            'combined_event': 'combinedEvent',
            'single_events': 'singleEvents'
        }

        self._combined_event = combined_event
        self._single_events = single_events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Activity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Activity of this Activity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def combined_event(self):
        """Gets the combined_event of this Activity.


        :return: The combined_event of this Activity.
        :rtype: Event
        """
        return self._combined_event

    @combined_event.setter
    def combined_event(self, combined_event):
        """Sets the combined_event of this Activity.


        :param combined_event: The combined_event of this Activity.
        :type combined_event: Event
        """

        self._combined_event = combined_event

    @property
    def single_events(self):
        """Gets the single_events of this Activity.

        A list of all the Events that make up the Activity.

        :return: The single_events of this Activity.
        :rtype: List[Event]
        """
        return self._single_events

    @single_events.setter
    def single_events(self, single_events):
        """Sets the single_events of this Activity.

        A list of all the Events that make up the Activity.

        :param single_events: The single_events of this Activity.
        :type single_events: List[Event]
        """

        self._single_events = single_events
