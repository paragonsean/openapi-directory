/**
 * Drive Activity API
 * Provides a historical view of activity.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import User from './User';

/**
 * The Permission model module.
 * @module model/Permission
 * @version v1
 */
class Permission {
    /**
     * Constructs a new <code>Permission</code>.
     * Contains information about the permissions and type of access allowed with regards to a Google Drive object. This is a subset of the fields contained in a corresponding Drive Permissions object.
     * @alias module:model/Permission
     */
    constructor() { 
        
        Permission.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Permission</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Permission} obj Optional instance to populate.
     * @return {module:model/Permission} The populated <code>Permission</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Permission();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('permissionId')) {
                obj['permissionId'] = ApiClient.convertToType(data['permissionId'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('withLink')) {
                obj['withLink'] = ApiClient.convertToType(data['withLink'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Permission</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Permission</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['permissionId'] && !(typeof data['permissionId'] === 'string' || data['permissionId'] instanceof String)) {
            throw new Error("Expected the field `permissionId` to be a primitive type in the JSON string but got " + data['permissionId']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * The name of the user or group the permission applies to.
 * @member {String} name
 */
Permission.prototype['name'] = undefined;

/**
 * The ID for this permission. Corresponds to the Drive API's permission ID returned as part of the Drive Permissions resource.
 * @member {String} permissionId
 */
Permission.prototype['permissionId'] = undefined;

/**
 * Indicates the Google Drive permissions role. The role determines a user's ability to read, write, or comment on the file.
 * @member {module:model/Permission.RoleEnum} role
 */
Permission.prototype['role'] = undefined;

/**
 * Indicates how widely permissions are granted.
 * @member {module:model/Permission.TypeEnum} type
 */
Permission.prototype['type'] = undefined;

/**
 * @member {module:model/User} user
 */
Permission.prototype['user'] = undefined;

/**
 * Whether the permission requires a link to the file.
 * @member {Boolean} withLink
 */
Permission.prototype['withLink'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
Permission['RoleEnum'] = {

    /**
     * value: "commenter"
     * @const
     */
    "commenter": "commenter",

    /**
     * value: "fileOrganizer"
     * @const
     */
    "fileOrganizer": "fileOrganizer",

    /**
     * value: "owner"
     * @const
     */
    "owner": "owner",

    /**
     * value: "publishedReader"
     * @const
     */
    "publishedReader": "publishedReader",

    /**
     * value: "reader"
     * @const
     */
    "reader": "reader",

    /**
     * value: "writer"
     * @const
     */
    "writer": "writer"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Permission['TypeEnum'] = {

    /**
     * value: "anyone"
     * @const
     */
    "anyone": "anyone",

    /**
     * value: "domain"
     * @const
     */
    "domain": "domain",

    /**
     * value: "group"
     * @const
     */
    "group": "group",

    /**
     * value: "user"
     * @const
     */
    "user": "user"
};



export default Permission;

