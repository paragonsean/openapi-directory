/**
 * Drive Activity API
 * Provides a historical view of activity.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Move from './Move';
import PermissionChange from './PermissionChange';
import Rename from './Rename';
import Target from './Target';
import User from './User';

/**
 * The Event model module.
 * @module model/Event
 * @version v1
 */
class Event {
    /**
     * Constructs a new <code>Event</code>.
     * Represents the changes associated with an action taken by a user.
     * @alias module:model/Event
     */
    constructor() { 
        
        Event.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Event} obj Optional instance to populate.
     * @return {module:model/Event} The populated <code>Event</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Event();

            if (data.hasOwnProperty('additionalEventTypes')) {
                obj['additionalEventTypes'] = ApiClient.convertToType(data['additionalEventTypes'], ['String']);
            }
            if (data.hasOwnProperty('eventTimeMillis')) {
                obj['eventTimeMillis'] = ApiClient.convertToType(data['eventTimeMillis'], 'String');
            }
            if (data.hasOwnProperty('fromUserDeletion')) {
                obj['fromUserDeletion'] = ApiClient.convertToType(data['fromUserDeletion'], 'Boolean');
            }
            if (data.hasOwnProperty('move')) {
                obj['move'] = Move.constructFromObject(data['move']);
            }
            if (data.hasOwnProperty('permissionChanges')) {
                obj['permissionChanges'] = ApiClient.convertToType(data['permissionChanges'], [PermissionChange]);
            }
            if (data.hasOwnProperty('primaryEventType')) {
                obj['primaryEventType'] = ApiClient.convertToType(data['primaryEventType'], 'String');
            }
            if (data.hasOwnProperty('rename')) {
                obj['rename'] = Rename.constructFromObject(data['rename']);
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = Target.constructFromObject(data['target']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Event</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Event</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['additionalEventTypes'])) {
            throw new Error("Expected the field `additionalEventTypes` to be an array in the JSON data but got " + data['additionalEventTypes']);
        }
        // ensure the json data is a string
        if (data['eventTimeMillis'] && !(typeof data['eventTimeMillis'] === 'string' || data['eventTimeMillis'] instanceof String)) {
            throw new Error("Expected the field `eventTimeMillis` to be a primitive type in the JSON string but got " + data['eventTimeMillis']);
        }
        // validate the optional field `move`
        if (data['move']) { // data not null
          Move.validateJSON(data['move']);
        }
        if (data['permissionChanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['permissionChanges'])) {
                throw new Error("Expected the field `permissionChanges` to be an array in the JSON data but got " + data['permissionChanges']);
            }
            // validate the optional field `permissionChanges` (array)
            for (const item of data['permissionChanges']) {
                PermissionChange.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['primaryEventType'] && !(typeof data['primaryEventType'] === 'string' || data['primaryEventType'] instanceof String)) {
            throw new Error("Expected the field `primaryEventType` to be a primitive type in the JSON string but got " + data['primaryEventType']);
        }
        // validate the optional field `rename`
        if (data['rename']) { // data not null
          Rename.validateJSON(data['rename']);
        }
        // validate the optional field `target`
        if (data['target']) { // data not null
          Target.validateJSON(data['target']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * Additional event types. Some events may have multiple types when multiple actions are part of a single event. For example, creating a document, renaming it, and sharing it may be part of a single file-creation event.
 * @member {Array.<module:model/Event.AdditionalEventTypesEnum>} additionalEventTypes
 */
Event.prototype['additionalEventTypes'] = undefined;

/**
 * The time at which the event occurred formatted as Unix time in milliseconds.
 * @member {String} eventTimeMillis
 */
Event.prototype['eventTimeMillis'] = undefined;

/**
 * Whether this event is caused by a user being deleted.
 * @member {Boolean} fromUserDeletion
 */
Event.prototype['fromUserDeletion'] = undefined;

/**
 * @member {module:model/Move} move
 */
Event.prototype['move'] = undefined;

/**
 * Extra information for permissionChange type events, such as the user or group the new permission applies to.
 * @member {Array.<module:model/PermissionChange>} permissionChanges
 */
Event.prototype['permissionChanges'] = undefined;

/**
 * The main type of event that occurred.
 * @member {module:model/Event.PrimaryEventTypeEnum} primaryEventType
 */
Event.prototype['primaryEventType'] = undefined;

/**
 * @member {module:model/Rename} rename
 */
Event.prototype['rename'] = undefined;

/**
 * @member {module:model/Target} target
 */
Event.prototype['target'] = undefined;

/**
 * @member {module:model/User} user
 */
Event.prototype['user'] = undefined;





/**
 * Allowed values for the <code>additionalEventTypes</code> property.
 * @enum {String}
 * @readonly
 */
Event['AdditionalEventTypesEnum'] = {

    /**
     * value: "comment"
     * @const
     */
    "comment": "comment",

    /**
     * value: "create"
     * @const
     */
    "create": "create",

    /**
     * value: "edit"
     * @const
     */
    "edit": "edit",

    /**
     * value: "emptyTrash"
     * @const
     */
    "emptyTrash": "emptyTrash",

    /**
     * value: "move"
     * @const
     */
    "move": "move",

    /**
     * value: "permissionChange"
     * @const
     */
    "permissionChange": "permissionChange",

    /**
     * value: "rename"
     * @const
     */
    "rename": "rename",

    /**
     * value: "trash"
     * @const
     */
    "trash": "trash",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "untrash"
     * @const
     */
    "untrash": "untrash",

    /**
     * value: "upload"
     * @const
     */
    "upload": "upload"
};


/**
 * Allowed values for the <code>primaryEventType</code> property.
 * @enum {String}
 * @readonly
 */
Event['PrimaryEventTypeEnum'] = {

    /**
     * value: "comment"
     * @const
     */
    "comment": "comment",

    /**
     * value: "create"
     * @const
     */
    "create": "create",

    /**
     * value: "edit"
     * @const
     */
    "edit": "edit",

    /**
     * value: "emptyTrash"
     * @const
     */
    "emptyTrash": "emptyTrash",

    /**
     * value: "move"
     * @const
     */
    "move": "move",

    /**
     * value: "permissionChange"
     * @const
     */
    "permissionChange": "permissionChange",

    /**
     * value: "rename"
     * @const
     */
    "rename": "rename",

    /**
     * value: "trash"
     * @const
     */
    "trash": "trash",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "untrash"
     * @const
     */
    "untrash": "untrash",

    /**
     * value: "upload"
     * @const
     */
    "upload": "upload"
};



export default Event;

