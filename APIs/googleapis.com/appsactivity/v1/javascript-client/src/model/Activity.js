/**
 * Drive Activity API
 * Provides a historical view of activity.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Event from './Event';

/**
 * The Activity model module.
 * @module model/Activity
 * @version v1
 */
class Activity {
    /**
     * Constructs a new <code>Activity</code>.
     * An Activity resource is a combined view of multiple events. An activity has a list of individual events and a combined view of the common fields among all events.
     * @alias module:model/Activity
     */
    constructor() { 
        
        Activity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Activity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Activity} obj Optional instance to populate.
     * @return {module:model/Activity} The populated <code>Activity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Activity();

            if (data.hasOwnProperty('combinedEvent')) {
                obj['combinedEvent'] = Event.constructFromObject(data['combinedEvent']);
            }
            if (data.hasOwnProperty('singleEvents')) {
                obj['singleEvents'] = ApiClient.convertToType(data['singleEvents'], [Event]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Activity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Activity</code>.
     */
    static validateJSON(data) {
        // validate the optional field `combinedEvent`
        if (data['combinedEvent']) { // data not null
          Event.validateJSON(data['combinedEvent']);
        }
        if (data['singleEvents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['singleEvents'])) {
                throw new Error("Expected the field `singleEvents` to be an array in the JSON data but got " + data['singleEvents']);
            }
            // validate the optional field `singleEvents` (array)
            for (const item of data['singleEvents']) {
                Event.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/Event} combinedEvent
 */
Activity.prototype['combinedEvent'] = undefined;

/**
 * A list of all the Events that make up the Activity.
 * @member {Array.<module:model/Event>} singleEvents
 */
Activity.prototype['singleEvents'] = undefined;






export default Activity;

