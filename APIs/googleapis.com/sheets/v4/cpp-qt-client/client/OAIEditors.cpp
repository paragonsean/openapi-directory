/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEditors.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEditors::OAIEditors(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEditors::OAIEditors() {
    this->initializeModel();
}

OAIEditors::~OAIEditors() {}

void OAIEditors::initializeModel() {

    m_domain_users_can_edit_isSet = false;
    m_domain_users_can_edit_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIEditors::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEditors::fromJsonObject(QJsonObject json) {

    m_domain_users_can_edit_isValid = ::OpenAPI::fromJsonValue(m_domain_users_can_edit, json[QString("domainUsersCanEdit")]);
    m_domain_users_can_edit_isSet = !json[QString("domainUsersCanEdit")].isNull() && m_domain_users_can_edit_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIEditors::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEditors::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_users_can_edit_isSet) {
        obj.insert(QString("domainUsersCanEdit"), ::OpenAPI::toJsonValue(m_domain_users_can_edit));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

bool OAIEditors::isDomainUsersCanEdit() const {
    return m_domain_users_can_edit;
}
void OAIEditors::setDomainUsersCanEdit(const bool &domain_users_can_edit) {
    m_domain_users_can_edit = domain_users_can_edit;
    m_domain_users_can_edit_isSet = true;
}

bool OAIEditors::is_domain_users_can_edit_Set() const{
    return m_domain_users_can_edit_isSet;
}

bool OAIEditors::is_domain_users_can_edit_Valid() const{
    return m_domain_users_can_edit_isValid;
}

QList<QString> OAIEditors::getGroups() const {
    return m_groups;
}
void OAIEditors::setGroups(const QList<QString> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIEditors::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIEditors::is_groups_Valid() const{
    return m_groups_isValid;
}

QList<QString> OAIEditors::getUsers() const {
    return m_users;
}
void OAIEditors::setUsers(const QList<QString> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIEditors::is_users_Set() const{
    return m_users_isSet;
}

bool OAIEditors::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIEditors::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_users_can_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEditors::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
