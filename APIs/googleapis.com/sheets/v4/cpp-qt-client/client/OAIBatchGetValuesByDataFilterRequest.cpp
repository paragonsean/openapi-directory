/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetValuesByDataFilterRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetValuesByDataFilterRequest::OAIBatchGetValuesByDataFilterRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetValuesByDataFilterRequest::OAIBatchGetValuesByDataFilterRequest() {
    this->initializeModel();
}

OAIBatchGetValuesByDataFilterRequest::~OAIBatchGetValuesByDataFilterRequest() {}

void OAIBatchGetValuesByDataFilterRequest::initializeModel() {

    m_data_filters_isSet = false;
    m_data_filters_isValid = false;

    m_date_time_render_option_isSet = false;
    m_date_time_render_option_isValid = false;

    m_major_dimension_isSet = false;
    m_major_dimension_isValid = false;

    m_value_render_option_isSet = false;
    m_value_render_option_isValid = false;
}

void OAIBatchGetValuesByDataFilterRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetValuesByDataFilterRequest::fromJsonObject(QJsonObject json) {

    m_data_filters_isValid = ::OpenAPI::fromJsonValue(m_data_filters, json[QString("dataFilters")]);
    m_data_filters_isSet = !json[QString("dataFilters")].isNull() && m_data_filters_isValid;

    m_date_time_render_option_isValid = ::OpenAPI::fromJsonValue(m_date_time_render_option, json[QString("dateTimeRenderOption")]);
    m_date_time_render_option_isSet = !json[QString("dateTimeRenderOption")].isNull() && m_date_time_render_option_isValid;

    m_major_dimension_isValid = ::OpenAPI::fromJsonValue(m_major_dimension, json[QString("majorDimension")]);
    m_major_dimension_isSet = !json[QString("majorDimension")].isNull() && m_major_dimension_isValid;

    m_value_render_option_isValid = ::OpenAPI::fromJsonValue(m_value_render_option, json[QString("valueRenderOption")]);
    m_value_render_option_isSet = !json[QString("valueRenderOption")].isNull() && m_value_render_option_isValid;
}

QString OAIBatchGetValuesByDataFilterRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetValuesByDataFilterRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_data_filters.size() > 0) {
        obj.insert(QString("dataFilters"), ::OpenAPI::toJsonValue(m_data_filters));
    }
    if (m_date_time_render_option_isSet) {
        obj.insert(QString("dateTimeRenderOption"), ::OpenAPI::toJsonValue(m_date_time_render_option));
    }
    if (m_major_dimension_isSet) {
        obj.insert(QString("majorDimension"), ::OpenAPI::toJsonValue(m_major_dimension));
    }
    if (m_value_render_option_isSet) {
        obj.insert(QString("valueRenderOption"), ::OpenAPI::toJsonValue(m_value_render_option));
    }
    return obj;
}

QList<OAIDataFilter> OAIBatchGetValuesByDataFilterRequest::getDataFilters() const {
    return m_data_filters;
}
void OAIBatchGetValuesByDataFilterRequest::setDataFilters(const QList<OAIDataFilter> &data_filters) {
    m_data_filters = data_filters;
    m_data_filters_isSet = true;
}

bool OAIBatchGetValuesByDataFilterRequest::is_data_filters_Set() const{
    return m_data_filters_isSet;
}

bool OAIBatchGetValuesByDataFilterRequest::is_data_filters_Valid() const{
    return m_data_filters_isValid;
}

QString OAIBatchGetValuesByDataFilterRequest::getDateTimeRenderOption() const {
    return m_date_time_render_option;
}
void OAIBatchGetValuesByDataFilterRequest::setDateTimeRenderOption(const QString &date_time_render_option) {
    m_date_time_render_option = date_time_render_option;
    m_date_time_render_option_isSet = true;
}

bool OAIBatchGetValuesByDataFilterRequest::is_date_time_render_option_Set() const{
    return m_date_time_render_option_isSet;
}

bool OAIBatchGetValuesByDataFilterRequest::is_date_time_render_option_Valid() const{
    return m_date_time_render_option_isValid;
}

QString OAIBatchGetValuesByDataFilterRequest::getMajorDimension() const {
    return m_major_dimension;
}
void OAIBatchGetValuesByDataFilterRequest::setMajorDimension(const QString &major_dimension) {
    m_major_dimension = major_dimension;
    m_major_dimension_isSet = true;
}

bool OAIBatchGetValuesByDataFilterRequest::is_major_dimension_Set() const{
    return m_major_dimension_isSet;
}

bool OAIBatchGetValuesByDataFilterRequest::is_major_dimension_Valid() const{
    return m_major_dimension_isValid;
}

QString OAIBatchGetValuesByDataFilterRequest::getValueRenderOption() const {
    return m_value_render_option;
}
void OAIBatchGetValuesByDataFilterRequest::setValueRenderOption(const QString &value_render_option) {
    m_value_render_option = value_render_option;
    m_value_render_option_isSet = true;
}

bool OAIBatchGetValuesByDataFilterRequest::is_value_render_option_Set() const{
    return m_value_render_option_isSet;
}

bool OAIBatchGetValuesByDataFilterRequest::is_value_render_option_Valid() const{
    return m_value_render_option_isValid;
}

bool OAIBatchGetValuesByDataFilterRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_render_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_major_dimension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_render_option_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetValuesByDataFilterRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
