/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlicerSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlicerSpec::OAISlicerSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlicerSpec::OAISlicerSpec() {
    this->initializeModel();
}

OAISlicerSpec::~OAISlicerSpec() {}

void OAISlicerSpec::initializeModel() {

    m_apply_to_pivot_tables_isSet = false;
    m_apply_to_pivot_tables_isValid = false;

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_background_color_style_isSet = false;
    m_background_color_style_isValid = false;

    m_column_index_isSet = false;
    m_column_index_isValid = false;

    m_data_range_isSet = false;
    m_data_range_isValid = false;

    m_filter_criteria_isSet = false;
    m_filter_criteria_isValid = false;

    m_horizontal_alignment_isSet = false;
    m_horizontal_alignment_isValid = false;

    m_text_format_isSet = false;
    m_text_format_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAISlicerSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlicerSpec::fromJsonObject(QJsonObject json) {

    m_apply_to_pivot_tables_isValid = ::OpenAPI::fromJsonValue(m_apply_to_pivot_tables, json[QString("applyToPivotTables")]);
    m_apply_to_pivot_tables_isSet = !json[QString("applyToPivotTables")].isNull() && m_apply_to_pivot_tables_isValid;

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("backgroundColor")]);
    m_background_color_isSet = !json[QString("backgroundColor")].isNull() && m_background_color_isValid;

    m_background_color_style_isValid = ::OpenAPI::fromJsonValue(m_background_color_style, json[QString("backgroundColorStyle")]);
    m_background_color_style_isSet = !json[QString("backgroundColorStyle")].isNull() && m_background_color_style_isValid;

    m_column_index_isValid = ::OpenAPI::fromJsonValue(m_column_index, json[QString("columnIndex")]);
    m_column_index_isSet = !json[QString("columnIndex")].isNull() && m_column_index_isValid;

    m_data_range_isValid = ::OpenAPI::fromJsonValue(m_data_range, json[QString("dataRange")]);
    m_data_range_isSet = !json[QString("dataRange")].isNull() && m_data_range_isValid;

    m_filter_criteria_isValid = ::OpenAPI::fromJsonValue(m_filter_criteria, json[QString("filterCriteria")]);
    m_filter_criteria_isSet = !json[QString("filterCriteria")].isNull() && m_filter_criteria_isValid;

    m_horizontal_alignment_isValid = ::OpenAPI::fromJsonValue(m_horizontal_alignment, json[QString("horizontalAlignment")]);
    m_horizontal_alignment_isSet = !json[QString("horizontalAlignment")].isNull() && m_horizontal_alignment_isValid;

    m_text_format_isValid = ::OpenAPI::fromJsonValue(m_text_format, json[QString("textFormat")]);
    m_text_format_isSet = !json[QString("textFormat")].isNull() && m_text_format_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAISlicerSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlicerSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_apply_to_pivot_tables_isSet) {
        obj.insert(QString("applyToPivotTables"), ::OpenAPI::toJsonValue(m_apply_to_pivot_tables));
    }
    if (m_background_color.isSet()) {
        obj.insert(QString("backgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_background_color_style.isSet()) {
        obj.insert(QString("backgroundColorStyle"), ::OpenAPI::toJsonValue(m_background_color_style));
    }
    if (m_column_index_isSet) {
        obj.insert(QString("columnIndex"), ::OpenAPI::toJsonValue(m_column_index));
    }
    if (m_data_range.isSet()) {
        obj.insert(QString("dataRange"), ::OpenAPI::toJsonValue(m_data_range));
    }
    if (m_filter_criteria.isSet()) {
        obj.insert(QString("filterCriteria"), ::OpenAPI::toJsonValue(m_filter_criteria));
    }
    if (m_horizontal_alignment_isSet) {
        obj.insert(QString("horizontalAlignment"), ::OpenAPI::toJsonValue(m_horizontal_alignment));
    }
    if (m_text_format.isSet()) {
        obj.insert(QString("textFormat"), ::OpenAPI::toJsonValue(m_text_format));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

bool OAISlicerSpec::isApplyToPivotTables() const {
    return m_apply_to_pivot_tables;
}
void OAISlicerSpec::setApplyToPivotTables(const bool &apply_to_pivot_tables) {
    m_apply_to_pivot_tables = apply_to_pivot_tables;
    m_apply_to_pivot_tables_isSet = true;
}

bool OAISlicerSpec::is_apply_to_pivot_tables_Set() const{
    return m_apply_to_pivot_tables_isSet;
}

bool OAISlicerSpec::is_apply_to_pivot_tables_Valid() const{
    return m_apply_to_pivot_tables_isValid;
}

OAIColor OAISlicerSpec::getBackgroundColor() const {
    return m_background_color;
}
void OAISlicerSpec::setBackgroundColor(const OAIColor &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAISlicerSpec::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAISlicerSpec::is_background_color_Valid() const{
    return m_background_color_isValid;
}

OAIColorStyle OAISlicerSpec::getBackgroundColorStyle() const {
    return m_background_color_style;
}
void OAISlicerSpec::setBackgroundColorStyle(const OAIColorStyle &background_color_style) {
    m_background_color_style = background_color_style;
    m_background_color_style_isSet = true;
}

bool OAISlicerSpec::is_background_color_style_Set() const{
    return m_background_color_style_isSet;
}

bool OAISlicerSpec::is_background_color_style_Valid() const{
    return m_background_color_style_isValid;
}

qint32 OAISlicerSpec::getColumnIndex() const {
    return m_column_index;
}
void OAISlicerSpec::setColumnIndex(const qint32 &column_index) {
    m_column_index = column_index;
    m_column_index_isSet = true;
}

bool OAISlicerSpec::is_column_index_Set() const{
    return m_column_index_isSet;
}

bool OAISlicerSpec::is_column_index_Valid() const{
    return m_column_index_isValid;
}

OAIGridRange OAISlicerSpec::getDataRange() const {
    return m_data_range;
}
void OAISlicerSpec::setDataRange(const OAIGridRange &data_range) {
    m_data_range = data_range;
    m_data_range_isSet = true;
}

bool OAISlicerSpec::is_data_range_Set() const{
    return m_data_range_isSet;
}

bool OAISlicerSpec::is_data_range_Valid() const{
    return m_data_range_isValid;
}

OAIFilterCriteria OAISlicerSpec::getFilterCriteria() const {
    return m_filter_criteria;
}
void OAISlicerSpec::setFilterCriteria(const OAIFilterCriteria &filter_criteria) {
    m_filter_criteria = filter_criteria;
    m_filter_criteria_isSet = true;
}

bool OAISlicerSpec::is_filter_criteria_Set() const{
    return m_filter_criteria_isSet;
}

bool OAISlicerSpec::is_filter_criteria_Valid() const{
    return m_filter_criteria_isValid;
}

QString OAISlicerSpec::getHorizontalAlignment() const {
    return m_horizontal_alignment;
}
void OAISlicerSpec::setHorizontalAlignment(const QString &horizontal_alignment) {
    m_horizontal_alignment = horizontal_alignment;
    m_horizontal_alignment_isSet = true;
}

bool OAISlicerSpec::is_horizontal_alignment_Set() const{
    return m_horizontal_alignment_isSet;
}

bool OAISlicerSpec::is_horizontal_alignment_Valid() const{
    return m_horizontal_alignment_isValid;
}

OAITextFormat OAISlicerSpec::getTextFormat() const {
    return m_text_format;
}
void OAISlicerSpec::setTextFormat(const OAITextFormat &text_format) {
    m_text_format = text_format;
    m_text_format_isSet = true;
}

bool OAISlicerSpec::is_text_format_Set() const{
    return m_text_format_isSet;
}

bool OAISlicerSpec::is_text_format_Valid() const{
    return m_text_format_isValid;
}

QString OAISlicerSpec::getTitle() const {
    return m_title;
}
void OAISlicerSpec::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISlicerSpec::is_title_Set() const{
    return m_title_isSet;
}

bool OAISlicerSpec::is_title_Valid() const{
    return m_title_isValid;
}

bool OAISlicerSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apply_to_pivot_tables_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_horizontal_alignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlicerSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
