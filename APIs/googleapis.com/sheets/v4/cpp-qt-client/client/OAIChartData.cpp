/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChartData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChartData::OAIChartData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChartData::OAIChartData() {
    this->initializeModel();
}

OAIChartData::~OAIChartData() {}

void OAIChartData::initializeModel() {

    m_aggregate_type_isSet = false;
    m_aggregate_type_isValid = false;

    m_column_reference_isSet = false;
    m_column_reference_isValid = false;

    m_group_rule_isSet = false;
    m_group_rule_isValid = false;

    m_source_range_isSet = false;
    m_source_range_isValid = false;
}

void OAIChartData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChartData::fromJsonObject(QJsonObject json) {

    m_aggregate_type_isValid = ::OpenAPI::fromJsonValue(m_aggregate_type, json[QString("aggregateType")]);
    m_aggregate_type_isSet = !json[QString("aggregateType")].isNull() && m_aggregate_type_isValid;

    m_column_reference_isValid = ::OpenAPI::fromJsonValue(m_column_reference, json[QString("columnReference")]);
    m_column_reference_isSet = !json[QString("columnReference")].isNull() && m_column_reference_isValid;

    m_group_rule_isValid = ::OpenAPI::fromJsonValue(m_group_rule, json[QString("groupRule")]);
    m_group_rule_isSet = !json[QString("groupRule")].isNull() && m_group_rule_isValid;

    m_source_range_isValid = ::OpenAPI::fromJsonValue(m_source_range, json[QString("sourceRange")]);
    m_source_range_isSet = !json[QString("sourceRange")].isNull() && m_source_range_isValid;
}

QString OAIChartData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChartData::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregate_type_isSet) {
        obj.insert(QString("aggregateType"), ::OpenAPI::toJsonValue(m_aggregate_type));
    }
    if (m_column_reference.isSet()) {
        obj.insert(QString("columnReference"), ::OpenAPI::toJsonValue(m_column_reference));
    }
    if (m_group_rule.isSet()) {
        obj.insert(QString("groupRule"), ::OpenAPI::toJsonValue(m_group_rule));
    }
    if (m_source_range.isSet()) {
        obj.insert(QString("sourceRange"), ::OpenAPI::toJsonValue(m_source_range));
    }
    return obj;
}

QString OAIChartData::getAggregateType() const {
    return m_aggregate_type;
}
void OAIChartData::setAggregateType(const QString &aggregate_type) {
    m_aggregate_type = aggregate_type;
    m_aggregate_type_isSet = true;
}

bool OAIChartData::is_aggregate_type_Set() const{
    return m_aggregate_type_isSet;
}

bool OAIChartData::is_aggregate_type_Valid() const{
    return m_aggregate_type_isValid;
}

OAIDataSourceColumnReference OAIChartData::getColumnReference() const {
    return m_column_reference;
}
void OAIChartData::setColumnReference(const OAIDataSourceColumnReference &column_reference) {
    m_column_reference = column_reference;
    m_column_reference_isSet = true;
}

bool OAIChartData::is_column_reference_Set() const{
    return m_column_reference_isSet;
}

bool OAIChartData::is_column_reference_Valid() const{
    return m_column_reference_isValid;
}

OAIChartGroupRule OAIChartData::getGroupRule() const {
    return m_group_rule;
}
void OAIChartData::setGroupRule(const OAIChartGroupRule &group_rule) {
    m_group_rule = group_rule;
    m_group_rule_isSet = true;
}

bool OAIChartData::is_group_rule_Set() const{
    return m_group_rule_isSet;
}

bool OAIChartData::is_group_rule_Valid() const{
    return m_group_rule_isValid;
}

OAIChartSourceRange OAIChartData::getSourceRange() const {
    return m_source_range;
}
void OAIChartData::setSourceRange(const OAIChartSourceRange &source_range) {
    m_source_range = source_range;
    m_source_range_isSet = true;
}

bool OAIChartData::is_source_range_Set() const{
    return m_source_range_isSet;
}

bool OAIChartData::is_source_range_Valid() const{
    return m_source_range_isValid;
}

bool OAIChartData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregate_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChartData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
