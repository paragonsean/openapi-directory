/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISheetProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISheetProperties::OAISheetProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISheetProperties::OAISheetProperties() {
    this->initializeModel();
}

OAISheetProperties::~OAISheetProperties() {}

void OAISheetProperties::initializeModel() {

    m_data_source_sheet_properties_isSet = false;
    m_data_source_sheet_properties_isValid = false;

    m_grid_properties_isSet = false;
    m_grid_properties_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_right_to_left_isSet = false;
    m_right_to_left_isValid = false;

    m_sheet_id_isSet = false;
    m_sheet_id_isValid = false;

    m_sheet_type_isSet = false;
    m_sheet_type_isValid = false;

    m_tab_color_isSet = false;
    m_tab_color_isValid = false;

    m_tab_color_style_isSet = false;
    m_tab_color_style_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAISheetProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISheetProperties::fromJsonObject(QJsonObject json) {

    m_data_source_sheet_properties_isValid = ::OpenAPI::fromJsonValue(m_data_source_sheet_properties, json[QString("dataSourceSheetProperties")]);
    m_data_source_sheet_properties_isSet = !json[QString("dataSourceSheetProperties")].isNull() && m_data_source_sheet_properties_isValid;

    m_grid_properties_isValid = ::OpenAPI::fromJsonValue(m_grid_properties, json[QString("gridProperties")]);
    m_grid_properties_isSet = !json[QString("gridProperties")].isNull() && m_grid_properties_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_right_to_left_isValid = ::OpenAPI::fromJsonValue(m_right_to_left, json[QString("rightToLeft")]);
    m_right_to_left_isSet = !json[QString("rightToLeft")].isNull() && m_right_to_left_isValid;

    m_sheet_id_isValid = ::OpenAPI::fromJsonValue(m_sheet_id, json[QString("sheetId")]);
    m_sheet_id_isSet = !json[QString("sheetId")].isNull() && m_sheet_id_isValid;

    m_sheet_type_isValid = ::OpenAPI::fromJsonValue(m_sheet_type, json[QString("sheetType")]);
    m_sheet_type_isSet = !json[QString("sheetType")].isNull() && m_sheet_type_isValid;

    m_tab_color_isValid = ::OpenAPI::fromJsonValue(m_tab_color, json[QString("tabColor")]);
    m_tab_color_isSet = !json[QString("tabColor")].isNull() && m_tab_color_isValid;

    m_tab_color_style_isValid = ::OpenAPI::fromJsonValue(m_tab_color_style, json[QString("tabColorStyle")]);
    m_tab_color_style_isSet = !json[QString("tabColorStyle")].isNull() && m_tab_color_style_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAISheetProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISheetProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_sheet_properties.isSet()) {
        obj.insert(QString("dataSourceSheetProperties"), ::OpenAPI::toJsonValue(m_data_source_sheet_properties));
    }
    if (m_grid_properties.isSet()) {
        obj.insert(QString("gridProperties"), ::OpenAPI::toJsonValue(m_grid_properties));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_right_to_left_isSet) {
        obj.insert(QString("rightToLeft"), ::OpenAPI::toJsonValue(m_right_to_left));
    }
    if (m_sheet_id_isSet) {
        obj.insert(QString("sheetId"), ::OpenAPI::toJsonValue(m_sheet_id));
    }
    if (m_sheet_type_isSet) {
        obj.insert(QString("sheetType"), ::OpenAPI::toJsonValue(m_sheet_type));
    }
    if (m_tab_color.isSet()) {
        obj.insert(QString("tabColor"), ::OpenAPI::toJsonValue(m_tab_color));
    }
    if (m_tab_color_style.isSet()) {
        obj.insert(QString("tabColorStyle"), ::OpenAPI::toJsonValue(m_tab_color_style));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

OAIDataSourceSheetProperties OAISheetProperties::getDataSourceSheetProperties() const {
    return m_data_source_sheet_properties;
}
void OAISheetProperties::setDataSourceSheetProperties(const OAIDataSourceSheetProperties &data_source_sheet_properties) {
    m_data_source_sheet_properties = data_source_sheet_properties;
    m_data_source_sheet_properties_isSet = true;
}

bool OAISheetProperties::is_data_source_sheet_properties_Set() const{
    return m_data_source_sheet_properties_isSet;
}

bool OAISheetProperties::is_data_source_sheet_properties_Valid() const{
    return m_data_source_sheet_properties_isValid;
}

OAIGridProperties OAISheetProperties::getGridProperties() const {
    return m_grid_properties;
}
void OAISheetProperties::setGridProperties(const OAIGridProperties &grid_properties) {
    m_grid_properties = grid_properties;
    m_grid_properties_isSet = true;
}

bool OAISheetProperties::is_grid_properties_Set() const{
    return m_grid_properties_isSet;
}

bool OAISheetProperties::is_grid_properties_Valid() const{
    return m_grid_properties_isValid;
}

bool OAISheetProperties::isHidden() const {
    return m_hidden;
}
void OAISheetProperties::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAISheetProperties::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAISheetProperties::is_hidden_Valid() const{
    return m_hidden_isValid;
}

qint32 OAISheetProperties::getIndex() const {
    return m_index;
}
void OAISheetProperties::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAISheetProperties::is_index_Set() const{
    return m_index_isSet;
}

bool OAISheetProperties::is_index_Valid() const{
    return m_index_isValid;
}

bool OAISheetProperties::isRightToLeft() const {
    return m_right_to_left;
}
void OAISheetProperties::setRightToLeft(const bool &right_to_left) {
    m_right_to_left = right_to_left;
    m_right_to_left_isSet = true;
}

bool OAISheetProperties::is_right_to_left_Set() const{
    return m_right_to_left_isSet;
}

bool OAISheetProperties::is_right_to_left_Valid() const{
    return m_right_to_left_isValid;
}

qint32 OAISheetProperties::getSheetId() const {
    return m_sheet_id;
}
void OAISheetProperties::setSheetId(const qint32 &sheet_id) {
    m_sheet_id = sheet_id;
    m_sheet_id_isSet = true;
}

bool OAISheetProperties::is_sheet_id_Set() const{
    return m_sheet_id_isSet;
}

bool OAISheetProperties::is_sheet_id_Valid() const{
    return m_sheet_id_isValid;
}

QString OAISheetProperties::getSheetType() const {
    return m_sheet_type;
}
void OAISheetProperties::setSheetType(const QString &sheet_type) {
    m_sheet_type = sheet_type;
    m_sheet_type_isSet = true;
}

bool OAISheetProperties::is_sheet_type_Set() const{
    return m_sheet_type_isSet;
}

bool OAISheetProperties::is_sheet_type_Valid() const{
    return m_sheet_type_isValid;
}

OAIColor OAISheetProperties::getTabColor() const {
    return m_tab_color;
}
void OAISheetProperties::setTabColor(const OAIColor &tab_color) {
    m_tab_color = tab_color;
    m_tab_color_isSet = true;
}

bool OAISheetProperties::is_tab_color_Set() const{
    return m_tab_color_isSet;
}

bool OAISheetProperties::is_tab_color_Valid() const{
    return m_tab_color_isValid;
}

OAIColorStyle OAISheetProperties::getTabColorStyle() const {
    return m_tab_color_style;
}
void OAISheetProperties::setTabColorStyle(const OAIColorStyle &tab_color_style) {
    m_tab_color_style = tab_color_style;
    m_tab_color_style_isSet = true;
}

bool OAISheetProperties::is_tab_color_style_Set() const{
    return m_tab_color_style_isSet;
}

bool OAISheetProperties::is_tab_color_style_Valid() const{
    return m_tab_color_style_isValid;
}

QString OAISheetProperties::getTitle() const {
    return m_title;
}
void OAISheetProperties::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISheetProperties::is_title_Set() const{
    return m_title_isSet;
}

bool OAISheetProperties::is_title_Valid() const{
    return m_title_isValid;
}

bool OAISheetProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_sheet_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_grid_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_to_left_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheet_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tab_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tab_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISheetProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
