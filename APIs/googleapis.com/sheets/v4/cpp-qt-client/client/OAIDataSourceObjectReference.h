/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDataSourceObjectReference.h
 *
 * Reference to a data source object.
 */

#ifndef OAIDataSourceObjectReference_H
#define OAIDataSourceObjectReference_H

#include <QJsonObject>

#include "OAIGridCoordinate.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGridCoordinate;

class OAIDataSourceObjectReference : public OAIObject {
public:
    OAIDataSourceObjectReference();
    OAIDataSourceObjectReference(QString json);
    ~OAIDataSourceObjectReference() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getChartId() const;
    void setChartId(const qint32 &chart_id);
    bool is_chart_id_Set() const;
    bool is_chart_id_Valid() const;

    OAIGridCoordinate getDataSourceFormulaCell() const;
    void setDataSourceFormulaCell(const OAIGridCoordinate &data_source_formula_cell);
    bool is_data_source_formula_cell_Set() const;
    bool is_data_source_formula_cell_Valid() const;

    OAIGridCoordinate getDataSourcePivotTableAnchorCell() const;
    void setDataSourcePivotTableAnchorCell(const OAIGridCoordinate &data_source_pivot_table_anchor_cell);
    bool is_data_source_pivot_table_anchor_cell_Set() const;
    bool is_data_source_pivot_table_anchor_cell_Valid() const;

    OAIGridCoordinate getDataSourceTableAnchorCell() const;
    void setDataSourceTableAnchorCell(const OAIGridCoordinate &data_source_table_anchor_cell);
    bool is_data_source_table_anchor_cell_Set() const;
    bool is_data_source_table_anchor_cell_Valid() const;

    QString getSheetId() const;
    void setSheetId(const QString &sheet_id);
    bool is_sheet_id_Set() const;
    bool is_sheet_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_chart_id;
    bool m_chart_id_isSet;
    bool m_chart_id_isValid;

    OAIGridCoordinate m_data_source_formula_cell;
    bool m_data_source_formula_cell_isSet;
    bool m_data_source_formula_cell_isValid;

    OAIGridCoordinate m_data_source_pivot_table_anchor_cell;
    bool m_data_source_pivot_table_anchor_cell_isSet;
    bool m_data_source_pivot_table_anchor_cell_isValid;

    OAIGridCoordinate m_data_source_table_anchor_cell;
    bool m_data_source_table_anchor_cell_isSet;
    bool m_data_source_table_anchor_cell_isValid;

    QString m_sheet_id;
    bool m_sheet_id_isSet;
    bool m_sheet_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDataSourceObjectReference)

#endif // OAIDataSourceObjectReference_H
