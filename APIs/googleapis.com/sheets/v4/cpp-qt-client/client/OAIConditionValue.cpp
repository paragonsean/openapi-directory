/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConditionValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConditionValue::OAIConditionValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConditionValue::OAIConditionValue() {
    this->initializeModel();
}

OAIConditionValue::~OAIConditionValue() {}

void OAIConditionValue::initializeModel() {

    m_relative_date_isSet = false;
    m_relative_date_isValid = false;

    m_user_entered_value_isSet = false;
    m_user_entered_value_isValid = false;
}

void OAIConditionValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConditionValue::fromJsonObject(QJsonObject json) {

    m_relative_date_isValid = ::OpenAPI::fromJsonValue(m_relative_date, json[QString("relativeDate")]);
    m_relative_date_isSet = !json[QString("relativeDate")].isNull() && m_relative_date_isValid;

    m_user_entered_value_isValid = ::OpenAPI::fromJsonValue(m_user_entered_value, json[QString("userEnteredValue")]);
    m_user_entered_value_isSet = !json[QString("userEnteredValue")].isNull() && m_user_entered_value_isValid;
}

QString OAIConditionValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConditionValue::asJsonObject() const {
    QJsonObject obj;
    if (m_relative_date_isSet) {
        obj.insert(QString("relativeDate"), ::OpenAPI::toJsonValue(m_relative_date));
    }
    if (m_user_entered_value_isSet) {
        obj.insert(QString("userEnteredValue"), ::OpenAPI::toJsonValue(m_user_entered_value));
    }
    return obj;
}

QString OAIConditionValue::getRelativeDate() const {
    return m_relative_date;
}
void OAIConditionValue::setRelativeDate(const QString &relative_date) {
    m_relative_date = relative_date;
    m_relative_date_isSet = true;
}

bool OAIConditionValue::is_relative_date_Set() const{
    return m_relative_date_isSet;
}

bool OAIConditionValue::is_relative_date_Valid() const{
    return m_relative_date_isValid;
}

QString OAIConditionValue::getUserEnteredValue() const {
    return m_user_entered_value;
}
void OAIConditionValue::setUserEnteredValue(const QString &user_entered_value) {
    m_user_entered_value = user_entered_value;
    m_user_entered_value_isSet = true;
}

bool OAIConditionValue::is_user_entered_value_Set() const{
    return m_user_entered_value_isSet;
}

bool OAIConditionValue::is_user_entered_value_Valid() const{
    return m_user_entered_value_isValid;
}

bool OAIConditionValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_relative_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_entered_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConditionValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
