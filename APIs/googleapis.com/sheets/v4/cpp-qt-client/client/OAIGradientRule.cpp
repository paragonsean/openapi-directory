/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGradientRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGradientRule::OAIGradientRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGradientRule::OAIGradientRule() {
    this->initializeModel();
}

OAIGradientRule::~OAIGradientRule() {}

void OAIGradientRule::initializeModel() {

    m_maxpoint_isSet = false;
    m_maxpoint_isValid = false;

    m_midpoint_isSet = false;
    m_midpoint_isValid = false;

    m_minpoint_isSet = false;
    m_minpoint_isValid = false;
}

void OAIGradientRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGradientRule::fromJsonObject(QJsonObject json) {

    m_maxpoint_isValid = ::OpenAPI::fromJsonValue(m_maxpoint, json[QString("maxpoint")]);
    m_maxpoint_isSet = !json[QString("maxpoint")].isNull() && m_maxpoint_isValid;

    m_midpoint_isValid = ::OpenAPI::fromJsonValue(m_midpoint, json[QString("midpoint")]);
    m_midpoint_isSet = !json[QString("midpoint")].isNull() && m_midpoint_isValid;

    m_minpoint_isValid = ::OpenAPI::fromJsonValue(m_minpoint, json[QString("minpoint")]);
    m_minpoint_isSet = !json[QString("minpoint")].isNull() && m_minpoint_isValid;
}

QString OAIGradientRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGradientRule::asJsonObject() const {
    QJsonObject obj;
    if (m_maxpoint.isSet()) {
        obj.insert(QString("maxpoint"), ::OpenAPI::toJsonValue(m_maxpoint));
    }
    if (m_midpoint.isSet()) {
        obj.insert(QString("midpoint"), ::OpenAPI::toJsonValue(m_midpoint));
    }
    if (m_minpoint.isSet()) {
        obj.insert(QString("minpoint"), ::OpenAPI::toJsonValue(m_minpoint));
    }
    return obj;
}

OAIInterpolationPoint OAIGradientRule::getMaxpoint() const {
    return m_maxpoint;
}
void OAIGradientRule::setMaxpoint(const OAIInterpolationPoint &maxpoint) {
    m_maxpoint = maxpoint;
    m_maxpoint_isSet = true;
}

bool OAIGradientRule::is_maxpoint_Set() const{
    return m_maxpoint_isSet;
}

bool OAIGradientRule::is_maxpoint_Valid() const{
    return m_maxpoint_isValid;
}

OAIInterpolationPoint OAIGradientRule::getMidpoint() const {
    return m_midpoint;
}
void OAIGradientRule::setMidpoint(const OAIInterpolationPoint &midpoint) {
    m_midpoint = midpoint;
    m_midpoint_isSet = true;
}

bool OAIGradientRule::is_midpoint_Set() const{
    return m_midpoint_isSet;
}

bool OAIGradientRule::is_midpoint_Valid() const{
    return m_midpoint_isValid;
}

OAIInterpolationPoint OAIGradientRule::getMinpoint() const {
    return m_minpoint;
}
void OAIGradientRule::setMinpoint(const OAIInterpolationPoint &minpoint) {
    m_minpoint = minpoint;
    m_minpoint_isSet = true;
}

bool OAIGradientRule::is_minpoint_Set() const{
    return m_minpoint_isSet;
}

bool OAIGradientRule::is_minpoint_Valid() const{
    return m_minpoint_isValid;
}

bool OAIGradientRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_maxpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_midpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_minpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGradientRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
