/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChartHistogramRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChartHistogramRule::OAIChartHistogramRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChartHistogramRule::OAIChartHistogramRule() {
    this->initializeModel();
}

OAIChartHistogramRule::~OAIChartHistogramRule() {}

void OAIChartHistogramRule::initializeModel() {

    m_interval_size_isSet = false;
    m_interval_size_isValid = false;

    m_max_value_isSet = false;
    m_max_value_isValid = false;

    m_min_value_isSet = false;
    m_min_value_isValid = false;
}

void OAIChartHistogramRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChartHistogramRule::fromJsonObject(QJsonObject json) {

    m_interval_size_isValid = ::OpenAPI::fromJsonValue(m_interval_size, json[QString("intervalSize")]);
    m_interval_size_isSet = !json[QString("intervalSize")].isNull() && m_interval_size_isValid;

    m_max_value_isValid = ::OpenAPI::fromJsonValue(m_max_value, json[QString("maxValue")]);
    m_max_value_isSet = !json[QString("maxValue")].isNull() && m_max_value_isValid;

    m_min_value_isValid = ::OpenAPI::fromJsonValue(m_min_value, json[QString("minValue")]);
    m_min_value_isSet = !json[QString("minValue")].isNull() && m_min_value_isValid;
}

QString OAIChartHistogramRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChartHistogramRule::asJsonObject() const {
    QJsonObject obj;
    if (m_interval_size_isSet) {
        obj.insert(QString("intervalSize"), ::OpenAPI::toJsonValue(m_interval_size));
    }
    if (m_max_value_isSet) {
        obj.insert(QString("maxValue"), ::OpenAPI::toJsonValue(m_max_value));
    }
    if (m_min_value_isSet) {
        obj.insert(QString("minValue"), ::OpenAPI::toJsonValue(m_min_value));
    }
    return obj;
}

double OAIChartHistogramRule::getIntervalSize() const {
    return m_interval_size;
}
void OAIChartHistogramRule::setIntervalSize(const double &interval_size) {
    m_interval_size = interval_size;
    m_interval_size_isSet = true;
}

bool OAIChartHistogramRule::is_interval_size_Set() const{
    return m_interval_size_isSet;
}

bool OAIChartHistogramRule::is_interval_size_Valid() const{
    return m_interval_size_isValid;
}

double OAIChartHistogramRule::getMaxValue() const {
    return m_max_value;
}
void OAIChartHistogramRule::setMaxValue(const double &max_value) {
    m_max_value = max_value;
    m_max_value_isSet = true;
}

bool OAIChartHistogramRule::is_max_value_Set() const{
    return m_max_value_isSet;
}

bool OAIChartHistogramRule::is_max_value_Valid() const{
    return m_max_value_isValid;
}

double OAIChartHistogramRule::getMinValue() const {
    return m_min_value;
}
void OAIChartHistogramRule::setMinValue(const double &min_value) {
    m_min_value = min_value;
    m_min_value_isSet = true;
}

bool OAIChartHistogramRule::is_min_value_Set() const{
    return m_min_value_isSet;
}

bool OAIChartHistogramRule::is_min_value_Valid() const{
    return m_min_value_isValid;
}

bool OAIChartHistogramRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interval_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChartHistogramRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
