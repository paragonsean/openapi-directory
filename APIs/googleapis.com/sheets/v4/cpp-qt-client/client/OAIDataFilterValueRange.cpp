/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataFilterValueRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataFilterValueRange::OAIDataFilterValueRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataFilterValueRange::OAIDataFilterValueRange() {
    this->initializeModel();
}

OAIDataFilterValueRange::~OAIDataFilterValueRange() {}

void OAIDataFilterValueRange::initializeModel() {

    m_data_filter_isSet = false;
    m_data_filter_isValid = false;

    m_major_dimension_isSet = false;
    m_major_dimension_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIDataFilterValueRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataFilterValueRange::fromJsonObject(QJsonObject json) {

    m_data_filter_isValid = ::OpenAPI::fromJsonValue(m_data_filter, json[QString("dataFilter")]);
    m_data_filter_isSet = !json[QString("dataFilter")].isNull() && m_data_filter_isValid;

    m_major_dimension_isValid = ::OpenAPI::fromJsonValue(m_major_dimension, json[QString("majorDimension")]);
    m_major_dimension_isSet = !json[QString("majorDimension")].isNull() && m_major_dimension_isValid;

    if(json["values"].isArray()){
        auto arr = json["values"].toArray();
        m_values_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QJsonValue> item;
                m_values_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_values_isSet = !jval.isNull() && m_values_isValid;
                m_values.push_back(item);
            }
        }
    }
}

QString OAIDataFilterValueRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataFilterValueRange::asJsonObject() const {
    QJsonObject obj;
    if (m_data_filter.isSet()) {
        obj.insert(QString("dataFilter"), ::OpenAPI::toJsonValue(m_data_filter));
    }
    if (m_major_dimension_isSet) {
        obj.insert(QString("majorDimension"), ::OpenAPI::toJsonValue(m_major_dimension));
    }
    if (m_values.size() > 0) {
        
        obj.insert(QString("values"), toJsonValue(m_values));
    }
    return obj;
}

OAIDataFilter OAIDataFilterValueRange::getDataFilter() const {
    return m_data_filter;
}
void OAIDataFilterValueRange::setDataFilter(const OAIDataFilter &data_filter) {
    m_data_filter = data_filter;
    m_data_filter_isSet = true;
}

bool OAIDataFilterValueRange::is_data_filter_Set() const{
    return m_data_filter_isSet;
}

bool OAIDataFilterValueRange::is_data_filter_Valid() const{
    return m_data_filter_isValid;
}

QString OAIDataFilterValueRange::getMajorDimension() const {
    return m_major_dimension;
}
void OAIDataFilterValueRange::setMajorDimension(const QString &major_dimension) {
    m_major_dimension = major_dimension;
    m_major_dimension_isSet = true;
}

bool OAIDataFilterValueRange::is_major_dimension_Set() const{
    return m_major_dimension_isSet;
}

bool OAIDataFilterValueRange::is_major_dimension_Valid() const{
    return m_major_dimension_isValid;
}

QList<QList<QJsonValue>> OAIDataFilterValueRange::getValues() const {
    return m_values;
}
void OAIDataFilterValueRange::setValues(const QList<QList<QJsonValue>> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIDataFilterValueRange::is_values_Set() const{
    return m_values_isSet;
}

bool OAIDataFilterValueRange::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIDataFilterValueRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_major_dimension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataFilterValueRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
