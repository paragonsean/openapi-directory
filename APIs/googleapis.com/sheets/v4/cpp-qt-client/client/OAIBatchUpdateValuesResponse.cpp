/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchUpdateValuesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchUpdateValuesResponse::OAIBatchUpdateValuesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchUpdateValuesResponse::OAIBatchUpdateValuesResponse() {
    this->initializeModel();
}

OAIBatchUpdateValuesResponse::~OAIBatchUpdateValuesResponse() {}

void OAIBatchUpdateValuesResponse::initializeModel() {

    m_responses_isSet = false;
    m_responses_isValid = false;

    m_spreadsheet_id_isSet = false;
    m_spreadsheet_id_isValid = false;

    m_total_updated_cells_isSet = false;
    m_total_updated_cells_isValid = false;

    m_total_updated_columns_isSet = false;
    m_total_updated_columns_isValid = false;

    m_total_updated_rows_isSet = false;
    m_total_updated_rows_isValid = false;

    m_total_updated_sheets_isSet = false;
    m_total_updated_sheets_isValid = false;
}

void OAIBatchUpdateValuesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchUpdateValuesResponse::fromJsonObject(QJsonObject json) {

    m_responses_isValid = ::OpenAPI::fromJsonValue(m_responses, json[QString("responses")]);
    m_responses_isSet = !json[QString("responses")].isNull() && m_responses_isValid;

    m_spreadsheet_id_isValid = ::OpenAPI::fromJsonValue(m_spreadsheet_id, json[QString("spreadsheetId")]);
    m_spreadsheet_id_isSet = !json[QString("spreadsheetId")].isNull() && m_spreadsheet_id_isValid;

    m_total_updated_cells_isValid = ::OpenAPI::fromJsonValue(m_total_updated_cells, json[QString("totalUpdatedCells")]);
    m_total_updated_cells_isSet = !json[QString("totalUpdatedCells")].isNull() && m_total_updated_cells_isValid;

    m_total_updated_columns_isValid = ::OpenAPI::fromJsonValue(m_total_updated_columns, json[QString("totalUpdatedColumns")]);
    m_total_updated_columns_isSet = !json[QString("totalUpdatedColumns")].isNull() && m_total_updated_columns_isValid;

    m_total_updated_rows_isValid = ::OpenAPI::fromJsonValue(m_total_updated_rows, json[QString("totalUpdatedRows")]);
    m_total_updated_rows_isSet = !json[QString("totalUpdatedRows")].isNull() && m_total_updated_rows_isValid;

    m_total_updated_sheets_isValid = ::OpenAPI::fromJsonValue(m_total_updated_sheets, json[QString("totalUpdatedSheets")]);
    m_total_updated_sheets_isSet = !json[QString("totalUpdatedSheets")].isNull() && m_total_updated_sheets_isValid;
}

QString OAIBatchUpdateValuesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchUpdateValuesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_responses.size() > 0) {
        obj.insert(QString("responses"), ::OpenAPI::toJsonValue(m_responses));
    }
    if (m_spreadsheet_id_isSet) {
        obj.insert(QString("spreadsheetId"), ::OpenAPI::toJsonValue(m_spreadsheet_id));
    }
    if (m_total_updated_cells_isSet) {
        obj.insert(QString("totalUpdatedCells"), ::OpenAPI::toJsonValue(m_total_updated_cells));
    }
    if (m_total_updated_columns_isSet) {
        obj.insert(QString("totalUpdatedColumns"), ::OpenAPI::toJsonValue(m_total_updated_columns));
    }
    if (m_total_updated_rows_isSet) {
        obj.insert(QString("totalUpdatedRows"), ::OpenAPI::toJsonValue(m_total_updated_rows));
    }
    if (m_total_updated_sheets_isSet) {
        obj.insert(QString("totalUpdatedSheets"), ::OpenAPI::toJsonValue(m_total_updated_sheets));
    }
    return obj;
}

QList<OAIUpdateValuesResponse> OAIBatchUpdateValuesResponse::getResponses() const {
    return m_responses;
}
void OAIBatchUpdateValuesResponse::setResponses(const QList<OAIUpdateValuesResponse> &responses) {
    m_responses = responses;
    m_responses_isSet = true;
}

bool OAIBatchUpdateValuesResponse::is_responses_Set() const{
    return m_responses_isSet;
}

bool OAIBatchUpdateValuesResponse::is_responses_Valid() const{
    return m_responses_isValid;
}

QString OAIBatchUpdateValuesResponse::getSpreadsheetId() const {
    return m_spreadsheet_id;
}
void OAIBatchUpdateValuesResponse::setSpreadsheetId(const QString &spreadsheet_id) {
    m_spreadsheet_id = spreadsheet_id;
    m_spreadsheet_id_isSet = true;
}

bool OAIBatchUpdateValuesResponse::is_spreadsheet_id_Set() const{
    return m_spreadsheet_id_isSet;
}

bool OAIBatchUpdateValuesResponse::is_spreadsheet_id_Valid() const{
    return m_spreadsheet_id_isValid;
}

qint32 OAIBatchUpdateValuesResponse::getTotalUpdatedCells() const {
    return m_total_updated_cells;
}
void OAIBatchUpdateValuesResponse::setTotalUpdatedCells(const qint32 &total_updated_cells) {
    m_total_updated_cells = total_updated_cells;
    m_total_updated_cells_isSet = true;
}

bool OAIBatchUpdateValuesResponse::is_total_updated_cells_Set() const{
    return m_total_updated_cells_isSet;
}

bool OAIBatchUpdateValuesResponse::is_total_updated_cells_Valid() const{
    return m_total_updated_cells_isValid;
}

qint32 OAIBatchUpdateValuesResponse::getTotalUpdatedColumns() const {
    return m_total_updated_columns;
}
void OAIBatchUpdateValuesResponse::setTotalUpdatedColumns(const qint32 &total_updated_columns) {
    m_total_updated_columns = total_updated_columns;
    m_total_updated_columns_isSet = true;
}

bool OAIBatchUpdateValuesResponse::is_total_updated_columns_Set() const{
    return m_total_updated_columns_isSet;
}

bool OAIBatchUpdateValuesResponse::is_total_updated_columns_Valid() const{
    return m_total_updated_columns_isValid;
}

qint32 OAIBatchUpdateValuesResponse::getTotalUpdatedRows() const {
    return m_total_updated_rows;
}
void OAIBatchUpdateValuesResponse::setTotalUpdatedRows(const qint32 &total_updated_rows) {
    m_total_updated_rows = total_updated_rows;
    m_total_updated_rows_isSet = true;
}

bool OAIBatchUpdateValuesResponse::is_total_updated_rows_Set() const{
    return m_total_updated_rows_isSet;
}

bool OAIBatchUpdateValuesResponse::is_total_updated_rows_Valid() const{
    return m_total_updated_rows_isValid;
}

qint32 OAIBatchUpdateValuesResponse::getTotalUpdatedSheets() const {
    return m_total_updated_sheets;
}
void OAIBatchUpdateValuesResponse::setTotalUpdatedSheets(const qint32 &total_updated_sheets) {
    m_total_updated_sheets = total_updated_sheets;
    m_total_updated_sheets_isSet = true;
}

bool OAIBatchUpdateValuesResponse::is_total_updated_sheets_Set() const{
    return m_total_updated_sheets_isSet;
}

bool OAIBatchUpdateValuesResponse::is_total_updated_sheets_Valid() const{
    return m_total_updated_sheets_isValid;
}

bool OAIBatchUpdateValuesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_responses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_spreadsheet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_updated_cells_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_updated_columns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_updated_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_updated_sheets_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchUpdateValuesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
