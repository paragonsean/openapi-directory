/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBasicChartSeries.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBasicChartSeries::OAIBasicChartSeries(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBasicChartSeries::OAIBasicChartSeries() {
    this->initializeModel();
}

OAIBasicChartSeries::~OAIBasicChartSeries() {}

void OAIBasicChartSeries::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_color_style_isSet = false;
    m_color_style_isValid = false;

    m_data_label_isSet = false;
    m_data_label_isValid = false;

    m_line_style_isSet = false;
    m_line_style_isValid = false;

    m_point_style_isSet = false;
    m_point_style_isValid = false;

    m_series_isSet = false;
    m_series_isValid = false;

    m_style_overrides_isSet = false;
    m_style_overrides_isValid = false;

    m_target_axis_isSet = false;
    m_target_axis_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIBasicChartSeries::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBasicChartSeries::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_color_style_isValid = ::OpenAPI::fromJsonValue(m_color_style, json[QString("colorStyle")]);
    m_color_style_isSet = !json[QString("colorStyle")].isNull() && m_color_style_isValid;

    m_data_label_isValid = ::OpenAPI::fromJsonValue(m_data_label, json[QString("dataLabel")]);
    m_data_label_isSet = !json[QString("dataLabel")].isNull() && m_data_label_isValid;

    m_line_style_isValid = ::OpenAPI::fromJsonValue(m_line_style, json[QString("lineStyle")]);
    m_line_style_isSet = !json[QString("lineStyle")].isNull() && m_line_style_isValid;

    m_point_style_isValid = ::OpenAPI::fromJsonValue(m_point_style, json[QString("pointStyle")]);
    m_point_style_isSet = !json[QString("pointStyle")].isNull() && m_point_style_isValid;

    m_series_isValid = ::OpenAPI::fromJsonValue(m_series, json[QString("series")]);
    m_series_isSet = !json[QString("series")].isNull() && m_series_isValid;

    m_style_overrides_isValid = ::OpenAPI::fromJsonValue(m_style_overrides, json[QString("styleOverrides")]);
    m_style_overrides_isSet = !json[QString("styleOverrides")].isNull() && m_style_overrides_isValid;

    m_target_axis_isValid = ::OpenAPI::fromJsonValue(m_target_axis, json[QString("targetAxis")]);
    m_target_axis_isSet = !json[QString("targetAxis")].isNull() && m_target_axis_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIBasicChartSeries::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBasicChartSeries::asJsonObject() const {
    QJsonObject obj;
    if (m_color.isSet()) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_color_style.isSet()) {
        obj.insert(QString("colorStyle"), ::OpenAPI::toJsonValue(m_color_style));
    }
    if (m_data_label.isSet()) {
        obj.insert(QString("dataLabel"), ::OpenAPI::toJsonValue(m_data_label));
    }
    if (m_line_style.isSet()) {
        obj.insert(QString("lineStyle"), ::OpenAPI::toJsonValue(m_line_style));
    }
    if (m_point_style.isSet()) {
        obj.insert(QString("pointStyle"), ::OpenAPI::toJsonValue(m_point_style));
    }
    if (m_series.isSet()) {
        obj.insert(QString("series"), ::OpenAPI::toJsonValue(m_series));
    }
    if (m_style_overrides.size() > 0) {
        obj.insert(QString("styleOverrides"), ::OpenAPI::toJsonValue(m_style_overrides));
    }
    if (m_target_axis_isSet) {
        obj.insert(QString("targetAxis"), ::OpenAPI::toJsonValue(m_target_axis));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIColor OAIBasicChartSeries::getColor() const {
    return m_color;
}
void OAIBasicChartSeries::setColor(const OAIColor &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIBasicChartSeries::is_color_Set() const{
    return m_color_isSet;
}

bool OAIBasicChartSeries::is_color_Valid() const{
    return m_color_isValid;
}

OAIColorStyle OAIBasicChartSeries::getColorStyle() const {
    return m_color_style;
}
void OAIBasicChartSeries::setColorStyle(const OAIColorStyle &color_style) {
    m_color_style = color_style;
    m_color_style_isSet = true;
}

bool OAIBasicChartSeries::is_color_style_Set() const{
    return m_color_style_isSet;
}

bool OAIBasicChartSeries::is_color_style_Valid() const{
    return m_color_style_isValid;
}

OAIDataLabel OAIBasicChartSeries::getDataLabel() const {
    return m_data_label;
}
void OAIBasicChartSeries::setDataLabel(const OAIDataLabel &data_label) {
    m_data_label = data_label;
    m_data_label_isSet = true;
}

bool OAIBasicChartSeries::is_data_label_Set() const{
    return m_data_label_isSet;
}

bool OAIBasicChartSeries::is_data_label_Valid() const{
    return m_data_label_isValid;
}

OAILineStyle OAIBasicChartSeries::getLineStyle() const {
    return m_line_style;
}
void OAIBasicChartSeries::setLineStyle(const OAILineStyle &line_style) {
    m_line_style = line_style;
    m_line_style_isSet = true;
}

bool OAIBasicChartSeries::is_line_style_Set() const{
    return m_line_style_isSet;
}

bool OAIBasicChartSeries::is_line_style_Valid() const{
    return m_line_style_isValid;
}

OAIPointStyle OAIBasicChartSeries::getPointStyle() const {
    return m_point_style;
}
void OAIBasicChartSeries::setPointStyle(const OAIPointStyle &point_style) {
    m_point_style = point_style;
    m_point_style_isSet = true;
}

bool OAIBasicChartSeries::is_point_style_Set() const{
    return m_point_style_isSet;
}

bool OAIBasicChartSeries::is_point_style_Valid() const{
    return m_point_style_isValid;
}

OAIChartData OAIBasicChartSeries::getSeries() const {
    return m_series;
}
void OAIBasicChartSeries::setSeries(const OAIChartData &series) {
    m_series = series;
    m_series_isSet = true;
}

bool OAIBasicChartSeries::is_series_Set() const{
    return m_series_isSet;
}

bool OAIBasicChartSeries::is_series_Valid() const{
    return m_series_isValid;
}

QList<OAIBasicSeriesDataPointStyleOverride> OAIBasicChartSeries::getStyleOverrides() const {
    return m_style_overrides;
}
void OAIBasicChartSeries::setStyleOverrides(const QList<OAIBasicSeriesDataPointStyleOverride> &style_overrides) {
    m_style_overrides = style_overrides;
    m_style_overrides_isSet = true;
}

bool OAIBasicChartSeries::is_style_overrides_Set() const{
    return m_style_overrides_isSet;
}

bool OAIBasicChartSeries::is_style_overrides_Valid() const{
    return m_style_overrides_isValid;
}

QString OAIBasicChartSeries::getTargetAxis() const {
    return m_target_axis;
}
void OAIBasicChartSeries::setTargetAxis(const QString &target_axis) {
    m_target_axis = target_axis;
    m_target_axis_isSet = true;
}

bool OAIBasicChartSeries::is_target_axis_Set() const{
    return m_target_axis_isSet;
}

bool OAIBasicChartSeries::is_target_axis_Valid() const{
    return m_target_axis_isValid;
}

QString OAIBasicChartSeries::getType() const {
    return m_type;
}
void OAIBasicChartSeries::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBasicChartSeries::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBasicChartSeries::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIBasicChartSeries::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_style_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_axis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBasicChartSeries::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
