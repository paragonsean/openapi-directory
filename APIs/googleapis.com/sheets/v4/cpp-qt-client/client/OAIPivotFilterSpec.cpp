/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotFilterSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotFilterSpec::OAIPivotFilterSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotFilterSpec::OAIPivotFilterSpec() {
    this->initializeModel();
}

OAIPivotFilterSpec::~OAIPivotFilterSpec() {}

void OAIPivotFilterSpec::initializeModel() {

    m_column_offset_index_isSet = false;
    m_column_offset_index_isValid = false;

    m_data_source_column_reference_isSet = false;
    m_data_source_column_reference_isValid = false;

    m_filter_criteria_isSet = false;
    m_filter_criteria_isValid = false;
}

void OAIPivotFilterSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotFilterSpec::fromJsonObject(QJsonObject json) {

    m_column_offset_index_isValid = ::OpenAPI::fromJsonValue(m_column_offset_index, json[QString("columnOffsetIndex")]);
    m_column_offset_index_isSet = !json[QString("columnOffsetIndex")].isNull() && m_column_offset_index_isValid;

    m_data_source_column_reference_isValid = ::OpenAPI::fromJsonValue(m_data_source_column_reference, json[QString("dataSourceColumnReference")]);
    m_data_source_column_reference_isSet = !json[QString("dataSourceColumnReference")].isNull() && m_data_source_column_reference_isValid;

    m_filter_criteria_isValid = ::OpenAPI::fromJsonValue(m_filter_criteria, json[QString("filterCriteria")]);
    m_filter_criteria_isSet = !json[QString("filterCriteria")].isNull() && m_filter_criteria_isValid;
}

QString OAIPivotFilterSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotFilterSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_column_offset_index_isSet) {
        obj.insert(QString("columnOffsetIndex"), ::OpenAPI::toJsonValue(m_column_offset_index));
    }
    if (m_data_source_column_reference.isSet()) {
        obj.insert(QString("dataSourceColumnReference"), ::OpenAPI::toJsonValue(m_data_source_column_reference));
    }
    if (m_filter_criteria.isSet()) {
        obj.insert(QString("filterCriteria"), ::OpenAPI::toJsonValue(m_filter_criteria));
    }
    return obj;
}

qint32 OAIPivotFilterSpec::getColumnOffsetIndex() const {
    return m_column_offset_index;
}
void OAIPivotFilterSpec::setColumnOffsetIndex(const qint32 &column_offset_index) {
    m_column_offset_index = column_offset_index;
    m_column_offset_index_isSet = true;
}

bool OAIPivotFilterSpec::is_column_offset_index_Set() const{
    return m_column_offset_index_isSet;
}

bool OAIPivotFilterSpec::is_column_offset_index_Valid() const{
    return m_column_offset_index_isValid;
}

OAIDataSourceColumnReference OAIPivotFilterSpec::getDataSourceColumnReference() const {
    return m_data_source_column_reference;
}
void OAIPivotFilterSpec::setDataSourceColumnReference(const OAIDataSourceColumnReference &data_source_column_reference) {
    m_data_source_column_reference = data_source_column_reference;
    m_data_source_column_reference_isSet = true;
}

bool OAIPivotFilterSpec::is_data_source_column_reference_Set() const{
    return m_data_source_column_reference_isSet;
}

bool OAIPivotFilterSpec::is_data_source_column_reference_Valid() const{
    return m_data_source_column_reference_isValid;
}

OAIPivotFilterCriteria OAIPivotFilterSpec::getFilterCriteria() const {
    return m_filter_criteria;
}
void OAIPivotFilterSpec::setFilterCriteria(const OAIPivotFilterCriteria &filter_criteria) {
    m_filter_criteria = filter_criteria;
    m_filter_criteria_isSet = true;
}

bool OAIPivotFilterSpec::is_filter_criteria_Set() const{
    return m_filter_criteria_isSet;
}

bool OAIPivotFilterSpec::is_filter_criteria_Valid() const{
    return m_filter_criteria_isValid;
}

bool OAIPivotFilterSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_offset_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_column_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotFilterSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
