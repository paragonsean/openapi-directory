/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeveloperMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeveloperMetadata::OAIDeveloperMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeveloperMetadata::OAIDeveloperMetadata() {
    this->initializeModel();
}

OAIDeveloperMetadata::~OAIDeveloperMetadata() {}

void OAIDeveloperMetadata::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_metadata_id_isSet = false;
    m_metadata_id_isValid = false;

    m_metadata_key_isSet = false;
    m_metadata_key_isValid = false;

    m_metadata_value_isSet = false;
    m_metadata_value_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIDeveloperMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeveloperMetadata::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_metadata_id_isValid = ::OpenAPI::fromJsonValue(m_metadata_id, json[QString("metadataId")]);
    m_metadata_id_isSet = !json[QString("metadataId")].isNull() && m_metadata_id_isValid;

    m_metadata_key_isValid = ::OpenAPI::fromJsonValue(m_metadata_key, json[QString("metadataKey")]);
    m_metadata_key_isSet = !json[QString("metadataKey")].isNull() && m_metadata_key_isValid;

    m_metadata_value_isValid = ::OpenAPI::fromJsonValue(m_metadata_value, json[QString("metadataValue")]);
    m_metadata_value_isSet = !json[QString("metadataValue")].isNull() && m_metadata_value_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIDeveloperMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeveloperMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metadata_id_isSet) {
        obj.insert(QString("metadataId"), ::OpenAPI::toJsonValue(m_metadata_id));
    }
    if (m_metadata_key_isSet) {
        obj.insert(QString("metadataKey"), ::OpenAPI::toJsonValue(m_metadata_key));
    }
    if (m_metadata_value_isSet) {
        obj.insert(QString("metadataValue"), ::OpenAPI::toJsonValue(m_metadata_value));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

OAIDeveloperMetadataLocation OAIDeveloperMetadata::getLocation() const {
    return m_location;
}
void OAIDeveloperMetadata::setLocation(const OAIDeveloperMetadataLocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIDeveloperMetadata::is_location_Set() const{
    return m_location_isSet;
}

bool OAIDeveloperMetadata::is_location_Valid() const{
    return m_location_isValid;
}

qint32 OAIDeveloperMetadata::getMetadataId() const {
    return m_metadata_id;
}
void OAIDeveloperMetadata::setMetadataId(const qint32 &metadata_id) {
    m_metadata_id = metadata_id;
    m_metadata_id_isSet = true;
}

bool OAIDeveloperMetadata::is_metadata_id_Set() const{
    return m_metadata_id_isSet;
}

bool OAIDeveloperMetadata::is_metadata_id_Valid() const{
    return m_metadata_id_isValid;
}

QString OAIDeveloperMetadata::getMetadataKey() const {
    return m_metadata_key;
}
void OAIDeveloperMetadata::setMetadataKey(const QString &metadata_key) {
    m_metadata_key = metadata_key;
    m_metadata_key_isSet = true;
}

bool OAIDeveloperMetadata::is_metadata_key_Set() const{
    return m_metadata_key_isSet;
}

bool OAIDeveloperMetadata::is_metadata_key_Valid() const{
    return m_metadata_key_isValid;
}

QString OAIDeveloperMetadata::getMetadataValue() const {
    return m_metadata_value;
}
void OAIDeveloperMetadata::setMetadataValue(const QString &metadata_value) {
    m_metadata_value = metadata_value;
    m_metadata_value_isSet = true;
}

bool OAIDeveloperMetadata::is_metadata_value_Set() const{
    return m_metadata_value_isSet;
}

bool OAIDeveloperMetadata::is_metadata_value_Valid() const{
    return m_metadata_value_isValid;
}

QString OAIDeveloperMetadata::getVisibility() const {
    return m_visibility;
}
void OAIDeveloperMetadata::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIDeveloperMetadata::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIDeveloperMetadata::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIDeveloperMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeveloperMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
