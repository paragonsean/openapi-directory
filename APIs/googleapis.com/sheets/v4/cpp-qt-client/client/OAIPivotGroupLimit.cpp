/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotGroupLimit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotGroupLimit::OAIPivotGroupLimit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotGroupLimit::OAIPivotGroupLimit() {
    this->initializeModel();
}

OAIPivotGroupLimit::~OAIPivotGroupLimit() {}

void OAIPivotGroupLimit::initializeModel() {

    m_apply_order_isSet = false;
    m_apply_order_isValid = false;

    m_count_limit_isSet = false;
    m_count_limit_isValid = false;
}

void OAIPivotGroupLimit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotGroupLimit::fromJsonObject(QJsonObject json) {

    m_apply_order_isValid = ::OpenAPI::fromJsonValue(m_apply_order, json[QString("applyOrder")]);
    m_apply_order_isSet = !json[QString("applyOrder")].isNull() && m_apply_order_isValid;

    m_count_limit_isValid = ::OpenAPI::fromJsonValue(m_count_limit, json[QString("countLimit")]);
    m_count_limit_isSet = !json[QString("countLimit")].isNull() && m_count_limit_isValid;
}

QString OAIPivotGroupLimit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotGroupLimit::asJsonObject() const {
    QJsonObject obj;
    if (m_apply_order_isSet) {
        obj.insert(QString("applyOrder"), ::OpenAPI::toJsonValue(m_apply_order));
    }
    if (m_count_limit_isSet) {
        obj.insert(QString("countLimit"), ::OpenAPI::toJsonValue(m_count_limit));
    }
    return obj;
}

qint32 OAIPivotGroupLimit::getApplyOrder() const {
    return m_apply_order;
}
void OAIPivotGroupLimit::setApplyOrder(const qint32 &apply_order) {
    m_apply_order = apply_order;
    m_apply_order_isSet = true;
}

bool OAIPivotGroupLimit::is_apply_order_Set() const{
    return m_apply_order_isSet;
}

bool OAIPivotGroupLimit::is_apply_order_Valid() const{
    return m_apply_order_isValid;
}

qint32 OAIPivotGroupLimit::getCountLimit() const {
    return m_count_limit;
}
void OAIPivotGroupLimit::setCountLimit(const qint32 &count_limit) {
    m_count_limit = count_limit;
    m_count_limit_isSet = true;
}

bool OAIPivotGroupLimit::is_count_limit_Set() const{
    return m_count_limit_isSet;
}

bool OAIPivotGroupLimit::is_count_limit_Valid() const{
    return m_count_limit_isValid;
}

bool OAIPivotGroupLimit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apply_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotGroupLimit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
