/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICellData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICellData::OAICellData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICellData::OAICellData() {
    this->initializeModel();
}

OAICellData::~OAICellData() {}

void OAICellData::initializeModel() {

    m_data_source_formula_isSet = false;
    m_data_source_formula_isValid = false;

    m_data_source_table_isSet = false;
    m_data_source_table_isValid = false;

    m_data_validation_isSet = false;
    m_data_validation_isValid = false;

    m_effective_format_isSet = false;
    m_effective_format_isValid = false;

    m_effective_value_isSet = false;
    m_effective_value_isValid = false;

    m_formatted_value_isSet = false;
    m_formatted_value_isValid = false;

    m_hyperlink_isSet = false;
    m_hyperlink_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_pivot_table_isSet = false;
    m_pivot_table_isValid = false;

    m_text_format_runs_isSet = false;
    m_text_format_runs_isValid = false;

    m_user_entered_format_isSet = false;
    m_user_entered_format_isValid = false;

    m_user_entered_value_isSet = false;
    m_user_entered_value_isValid = false;
}

void OAICellData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICellData::fromJsonObject(QJsonObject json) {

    m_data_source_formula_isValid = ::OpenAPI::fromJsonValue(m_data_source_formula, json[QString("dataSourceFormula")]);
    m_data_source_formula_isSet = !json[QString("dataSourceFormula")].isNull() && m_data_source_formula_isValid;

    m_data_source_table_isValid = ::OpenAPI::fromJsonValue(m_data_source_table, json[QString("dataSourceTable")]);
    m_data_source_table_isSet = !json[QString("dataSourceTable")].isNull() && m_data_source_table_isValid;

    m_data_validation_isValid = ::OpenAPI::fromJsonValue(m_data_validation, json[QString("dataValidation")]);
    m_data_validation_isSet = !json[QString("dataValidation")].isNull() && m_data_validation_isValid;

    m_effective_format_isValid = ::OpenAPI::fromJsonValue(m_effective_format, json[QString("effectiveFormat")]);
    m_effective_format_isSet = !json[QString("effectiveFormat")].isNull() && m_effective_format_isValid;

    m_effective_value_isValid = ::OpenAPI::fromJsonValue(m_effective_value, json[QString("effectiveValue")]);
    m_effective_value_isSet = !json[QString("effectiveValue")].isNull() && m_effective_value_isValid;

    m_formatted_value_isValid = ::OpenAPI::fromJsonValue(m_formatted_value, json[QString("formattedValue")]);
    m_formatted_value_isSet = !json[QString("formattedValue")].isNull() && m_formatted_value_isValid;

    m_hyperlink_isValid = ::OpenAPI::fromJsonValue(m_hyperlink, json[QString("hyperlink")]);
    m_hyperlink_isSet = !json[QString("hyperlink")].isNull() && m_hyperlink_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_pivot_table_isValid = ::OpenAPI::fromJsonValue(m_pivot_table, json[QString("pivotTable")]);
    m_pivot_table_isSet = !json[QString("pivotTable")].isNull() && m_pivot_table_isValid;

    m_text_format_runs_isValid = ::OpenAPI::fromJsonValue(m_text_format_runs, json[QString("textFormatRuns")]);
    m_text_format_runs_isSet = !json[QString("textFormatRuns")].isNull() && m_text_format_runs_isValid;

    m_user_entered_format_isValid = ::OpenAPI::fromJsonValue(m_user_entered_format, json[QString("userEnteredFormat")]);
    m_user_entered_format_isSet = !json[QString("userEnteredFormat")].isNull() && m_user_entered_format_isValid;

    m_user_entered_value_isValid = ::OpenAPI::fromJsonValue(m_user_entered_value, json[QString("userEnteredValue")]);
    m_user_entered_value_isSet = !json[QString("userEnteredValue")].isNull() && m_user_entered_value_isValid;
}

QString OAICellData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICellData::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_formula.isSet()) {
        obj.insert(QString("dataSourceFormula"), ::OpenAPI::toJsonValue(m_data_source_formula));
    }
    if (m_data_source_table.isSet()) {
        obj.insert(QString("dataSourceTable"), ::OpenAPI::toJsonValue(m_data_source_table));
    }
    if (m_data_validation.isSet()) {
        obj.insert(QString("dataValidation"), ::OpenAPI::toJsonValue(m_data_validation));
    }
    if (m_effective_format.isSet()) {
        obj.insert(QString("effectiveFormat"), ::OpenAPI::toJsonValue(m_effective_format));
    }
    if (m_effective_value.isSet()) {
        obj.insert(QString("effectiveValue"), ::OpenAPI::toJsonValue(m_effective_value));
    }
    if (m_formatted_value_isSet) {
        obj.insert(QString("formattedValue"), ::OpenAPI::toJsonValue(m_formatted_value));
    }
    if (m_hyperlink_isSet) {
        obj.insert(QString("hyperlink"), ::OpenAPI::toJsonValue(m_hyperlink));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_pivot_table.isSet()) {
        obj.insert(QString("pivotTable"), ::OpenAPI::toJsonValue(m_pivot_table));
    }
    if (m_text_format_runs.size() > 0) {
        obj.insert(QString("textFormatRuns"), ::OpenAPI::toJsonValue(m_text_format_runs));
    }
    if (m_user_entered_format.isSet()) {
        obj.insert(QString("userEnteredFormat"), ::OpenAPI::toJsonValue(m_user_entered_format));
    }
    if (m_user_entered_value.isSet()) {
        obj.insert(QString("userEnteredValue"), ::OpenAPI::toJsonValue(m_user_entered_value));
    }
    return obj;
}

OAIDataSourceFormula OAICellData::getDataSourceFormula() const {
    return m_data_source_formula;
}
void OAICellData::setDataSourceFormula(const OAIDataSourceFormula &data_source_formula) {
    m_data_source_formula = data_source_formula;
    m_data_source_formula_isSet = true;
}

bool OAICellData::is_data_source_formula_Set() const{
    return m_data_source_formula_isSet;
}

bool OAICellData::is_data_source_formula_Valid() const{
    return m_data_source_formula_isValid;
}

OAIDataSourceTable OAICellData::getDataSourceTable() const {
    return m_data_source_table;
}
void OAICellData::setDataSourceTable(const OAIDataSourceTable &data_source_table) {
    m_data_source_table = data_source_table;
    m_data_source_table_isSet = true;
}

bool OAICellData::is_data_source_table_Set() const{
    return m_data_source_table_isSet;
}

bool OAICellData::is_data_source_table_Valid() const{
    return m_data_source_table_isValid;
}

OAIDataValidationRule OAICellData::getDataValidation() const {
    return m_data_validation;
}
void OAICellData::setDataValidation(const OAIDataValidationRule &data_validation) {
    m_data_validation = data_validation;
    m_data_validation_isSet = true;
}

bool OAICellData::is_data_validation_Set() const{
    return m_data_validation_isSet;
}

bool OAICellData::is_data_validation_Valid() const{
    return m_data_validation_isValid;
}

OAICellFormat OAICellData::getEffectiveFormat() const {
    return m_effective_format;
}
void OAICellData::setEffectiveFormat(const OAICellFormat &effective_format) {
    m_effective_format = effective_format;
    m_effective_format_isSet = true;
}

bool OAICellData::is_effective_format_Set() const{
    return m_effective_format_isSet;
}

bool OAICellData::is_effective_format_Valid() const{
    return m_effective_format_isValid;
}

OAIExtendedValue OAICellData::getEffectiveValue() const {
    return m_effective_value;
}
void OAICellData::setEffectiveValue(const OAIExtendedValue &effective_value) {
    m_effective_value = effective_value;
    m_effective_value_isSet = true;
}

bool OAICellData::is_effective_value_Set() const{
    return m_effective_value_isSet;
}

bool OAICellData::is_effective_value_Valid() const{
    return m_effective_value_isValid;
}

QString OAICellData::getFormattedValue() const {
    return m_formatted_value;
}
void OAICellData::setFormattedValue(const QString &formatted_value) {
    m_formatted_value = formatted_value;
    m_formatted_value_isSet = true;
}

bool OAICellData::is_formatted_value_Set() const{
    return m_formatted_value_isSet;
}

bool OAICellData::is_formatted_value_Valid() const{
    return m_formatted_value_isValid;
}

QString OAICellData::getHyperlink() const {
    return m_hyperlink;
}
void OAICellData::setHyperlink(const QString &hyperlink) {
    m_hyperlink = hyperlink;
    m_hyperlink_isSet = true;
}

bool OAICellData::is_hyperlink_Set() const{
    return m_hyperlink_isSet;
}

bool OAICellData::is_hyperlink_Valid() const{
    return m_hyperlink_isValid;
}

QString OAICellData::getNote() const {
    return m_note;
}
void OAICellData::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAICellData::is_note_Set() const{
    return m_note_isSet;
}

bool OAICellData::is_note_Valid() const{
    return m_note_isValid;
}

OAIPivotTable OAICellData::getPivotTable() const {
    return m_pivot_table;
}
void OAICellData::setPivotTable(const OAIPivotTable &pivot_table) {
    m_pivot_table = pivot_table;
    m_pivot_table_isSet = true;
}

bool OAICellData::is_pivot_table_Set() const{
    return m_pivot_table_isSet;
}

bool OAICellData::is_pivot_table_Valid() const{
    return m_pivot_table_isValid;
}

QList<OAITextFormatRun> OAICellData::getTextFormatRuns() const {
    return m_text_format_runs;
}
void OAICellData::setTextFormatRuns(const QList<OAITextFormatRun> &text_format_runs) {
    m_text_format_runs = text_format_runs;
    m_text_format_runs_isSet = true;
}

bool OAICellData::is_text_format_runs_Set() const{
    return m_text_format_runs_isSet;
}

bool OAICellData::is_text_format_runs_Valid() const{
    return m_text_format_runs_isValid;
}

OAICellFormat OAICellData::getUserEnteredFormat() const {
    return m_user_entered_format;
}
void OAICellData::setUserEnteredFormat(const OAICellFormat &user_entered_format) {
    m_user_entered_format = user_entered_format;
    m_user_entered_format_isSet = true;
}

bool OAICellData::is_user_entered_format_Set() const{
    return m_user_entered_format_isSet;
}

bool OAICellData::is_user_entered_format_Valid() const{
    return m_user_entered_format_isValid;
}

OAIExtendedValue OAICellData::getUserEnteredValue() const {
    return m_user_entered_value;
}
void OAICellData::setUserEnteredValue(const OAIExtendedValue &user_entered_value) {
    m_user_entered_value = user_entered_value;
    m_user_entered_value_isSet = true;
}

bool OAICellData::is_user_entered_value_Set() const{
    return m_user_entered_value_isSet;
}

bool OAICellData::is_user_entered_value_Valid() const{
    return m_user_entered_value_isValid;
}

bool OAICellData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_formula.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_validation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hyperlink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pivot_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_format_runs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_entered_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_entered_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICellData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
