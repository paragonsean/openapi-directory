/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDeveloperMetadataRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDeveloperMetadataRequest::OAIUpdateDeveloperMetadataRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDeveloperMetadataRequest::OAIUpdateDeveloperMetadataRequest() {
    this->initializeModel();
}

OAIUpdateDeveloperMetadataRequest::~OAIUpdateDeveloperMetadataRequest() {}

void OAIUpdateDeveloperMetadataRequest::initializeModel() {

    m_data_filters_isSet = false;
    m_data_filters_isValid = false;

    m_developer_metadata_isSet = false;
    m_developer_metadata_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;
}

void OAIUpdateDeveloperMetadataRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDeveloperMetadataRequest::fromJsonObject(QJsonObject json) {

    m_data_filters_isValid = ::OpenAPI::fromJsonValue(m_data_filters, json[QString("dataFilters")]);
    m_data_filters_isSet = !json[QString("dataFilters")].isNull() && m_data_filters_isValid;

    m_developer_metadata_isValid = ::OpenAPI::fromJsonValue(m_developer_metadata, json[QString("developerMetadata")]);
    m_developer_metadata_isSet = !json[QString("developerMetadata")].isNull() && m_developer_metadata_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;
}

QString OAIUpdateDeveloperMetadataRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDeveloperMetadataRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_data_filters.size() > 0) {
        obj.insert(QString("dataFilters"), ::OpenAPI::toJsonValue(m_data_filters));
    }
    if (m_developer_metadata.isSet()) {
        obj.insert(QString("developerMetadata"), ::OpenAPI::toJsonValue(m_developer_metadata));
    }
    if (m_fields_isSet) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    return obj;
}

QList<OAIDataFilter> OAIUpdateDeveloperMetadataRequest::getDataFilters() const {
    return m_data_filters;
}
void OAIUpdateDeveloperMetadataRequest::setDataFilters(const QList<OAIDataFilter> &data_filters) {
    m_data_filters = data_filters;
    m_data_filters_isSet = true;
}

bool OAIUpdateDeveloperMetadataRequest::is_data_filters_Set() const{
    return m_data_filters_isSet;
}

bool OAIUpdateDeveloperMetadataRequest::is_data_filters_Valid() const{
    return m_data_filters_isValid;
}

OAIDeveloperMetadata OAIUpdateDeveloperMetadataRequest::getDeveloperMetadata() const {
    return m_developer_metadata;
}
void OAIUpdateDeveloperMetadataRequest::setDeveloperMetadata(const OAIDeveloperMetadata &developer_metadata) {
    m_developer_metadata = developer_metadata;
    m_developer_metadata_isSet = true;
}

bool OAIUpdateDeveloperMetadataRequest::is_developer_metadata_Set() const{
    return m_developer_metadata_isSet;
}

bool OAIUpdateDeveloperMetadataRequest::is_developer_metadata_Valid() const{
    return m_developer_metadata_isValid;
}

QString OAIUpdateDeveloperMetadataRequest::getFields() const {
    return m_fields;
}
void OAIUpdateDeveloperMetadataRequest::setFields(const QString &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIUpdateDeveloperMetadataRequest::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIUpdateDeveloperMetadataRequest::is_fields_Valid() const{
    return m_fields_isValid;
}

bool OAIUpdateDeveloperMetadataRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDeveloperMetadataRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
