/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextFormat::OAITextFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextFormat::OAITextFormat() {
    this->initializeModel();
}

OAITextFormat::~OAITextFormat() {}

void OAITextFormat::initializeModel() {

    m_bold_isSet = false;
    m_bold_isValid = false;

    m_font_family_isSet = false;
    m_font_family_isValid = false;

    m_font_size_isSet = false;
    m_font_size_isValid = false;

    m_foreground_color_isSet = false;
    m_foreground_color_isValid = false;

    m_foreground_color_style_isSet = false;
    m_foreground_color_style_isValid = false;

    m_italic_isSet = false;
    m_italic_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_strikethrough_isSet = false;
    m_strikethrough_isValid = false;

    m_underline_isSet = false;
    m_underline_isValid = false;
}

void OAITextFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextFormat::fromJsonObject(QJsonObject json) {

    m_bold_isValid = ::OpenAPI::fromJsonValue(m_bold, json[QString("bold")]);
    m_bold_isSet = !json[QString("bold")].isNull() && m_bold_isValid;

    m_font_family_isValid = ::OpenAPI::fromJsonValue(m_font_family, json[QString("fontFamily")]);
    m_font_family_isSet = !json[QString("fontFamily")].isNull() && m_font_family_isValid;

    m_font_size_isValid = ::OpenAPI::fromJsonValue(m_font_size, json[QString("fontSize")]);
    m_font_size_isSet = !json[QString("fontSize")].isNull() && m_font_size_isValid;

    m_foreground_color_isValid = ::OpenAPI::fromJsonValue(m_foreground_color, json[QString("foregroundColor")]);
    m_foreground_color_isSet = !json[QString("foregroundColor")].isNull() && m_foreground_color_isValid;

    m_foreground_color_style_isValid = ::OpenAPI::fromJsonValue(m_foreground_color_style, json[QString("foregroundColorStyle")]);
    m_foreground_color_style_isSet = !json[QString("foregroundColorStyle")].isNull() && m_foreground_color_style_isValid;

    m_italic_isValid = ::OpenAPI::fromJsonValue(m_italic, json[QString("italic")]);
    m_italic_isSet = !json[QString("italic")].isNull() && m_italic_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_strikethrough_isValid = ::OpenAPI::fromJsonValue(m_strikethrough, json[QString("strikethrough")]);
    m_strikethrough_isSet = !json[QString("strikethrough")].isNull() && m_strikethrough_isValid;

    m_underline_isValid = ::OpenAPI::fromJsonValue(m_underline, json[QString("underline")]);
    m_underline_isSet = !json[QString("underline")].isNull() && m_underline_isValid;
}

QString OAITextFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_bold_isSet) {
        obj.insert(QString("bold"), ::OpenAPI::toJsonValue(m_bold));
    }
    if (m_font_family_isSet) {
        obj.insert(QString("fontFamily"), ::OpenAPI::toJsonValue(m_font_family));
    }
    if (m_font_size_isSet) {
        obj.insert(QString("fontSize"), ::OpenAPI::toJsonValue(m_font_size));
    }
    if (m_foreground_color.isSet()) {
        obj.insert(QString("foregroundColor"), ::OpenAPI::toJsonValue(m_foreground_color));
    }
    if (m_foreground_color_style.isSet()) {
        obj.insert(QString("foregroundColorStyle"), ::OpenAPI::toJsonValue(m_foreground_color_style));
    }
    if (m_italic_isSet) {
        obj.insert(QString("italic"), ::OpenAPI::toJsonValue(m_italic));
    }
    if (m_link.isSet()) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_strikethrough_isSet) {
        obj.insert(QString("strikethrough"), ::OpenAPI::toJsonValue(m_strikethrough));
    }
    if (m_underline_isSet) {
        obj.insert(QString("underline"), ::OpenAPI::toJsonValue(m_underline));
    }
    return obj;
}

bool OAITextFormat::isBold() const {
    return m_bold;
}
void OAITextFormat::setBold(const bool &bold) {
    m_bold = bold;
    m_bold_isSet = true;
}

bool OAITextFormat::is_bold_Set() const{
    return m_bold_isSet;
}

bool OAITextFormat::is_bold_Valid() const{
    return m_bold_isValid;
}

QString OAITextFormat::getFontFamily() const {
    return m_font_family;
}
void OAITextFormat::setFontFamily(const QString &font_family) {
    m_font_family = font_family;
    m_font_family_isSet = true;
}

bool OAITextFormat::is_font_family_Set() const{
    return m_font_family_isSet;
}

bool OAITextFormat::is_font_family_Valid() const{
    return m_font_family_isValid;
}

qint32 OAITextFormat::getFontSize() const {
    return m_font_size;
}
void OAITextFormat::setFontSize(const qint32 &font_size) {
    m_font_size = font_size;
    m_font_size_isSet = true;
}

bool OAITextFormat::is_font_size_Set() const{
    return m_font_size_isSet;
}

bool OAITextFormat::is_font_size_Valid() const{
    return m_font_size_isValid;
}

OAIColor OAITextFormat::getForegroundColor() const {
    return m_foreground_color;
}
void OAITextFormat::setForegroundColor(const OAIColor &foreground_color) {
    m_foreground_color = foreground_color;
    m_foreground_color_isSet = true;
}

bool OAITextFormat::is_foreground_color_Set() const{
    return m_foreground_color_isSet;
}

bool OAITextFormat::is_foreground_color_Valid() const{
    return m_foreground_color_isValid;
}

OAIColorStyle OAITextFormat::getForegroundColorStyle() const {
    return m_foreground_color_style;
}
void OAITextFormat::setForegroundColorStyle(const OAIColorStyle &foreground_color_style) {
    m_foreground_color_style = foreground_color_style;
    m_foreground_color_style_isSet = true;
}

bool OAITextFormat::is_foreground_color_style_Set() const{
    return m_foreground_color_style_isSet;
}

bool OAITextFormat::is_foreground_color_style_Valid() const{
    return m_foreground_color_style_isValid;
}

bool OAITextFormat::isItalic() const {
    return m_italic;
}
void OAITextFormat::setItalic(const bool &italic) {
    m_italic = italic;
    m_italic_isSet = true;
}

bool OAITextFormat::is_italic_Set() const{
    return m_italic_isSet;
}

bool OAITextFormat::is_italic_Valid() const{
    return m_italic_isValid;
}

OAILink OAITextFormat::getLink() const {
    return m_link;
}
void OAITextFormat::setLink(const OAILink &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAITextFormat::is_link_Set() const{
    return m_link_isSet;
}

bool OAITextFormat::is_link_Valid() const{
    return m_link_isValid;
}

bool OAITextFormat::isStrikethrough() const {
    return m_strikethrough;
}
void OAITextFormat::setStrikethrough(const bool &strikethrough) {
    m_strikethrough = strikethrough;
    m_strikethrough_isSet = true;
}

bool OAITextFormat::is_strikethrough_Set() const{
    return m_strikethrough_isSet;
}

bool OAITextFormat::is_strikethrough_Valid() const{
    return m_strikethrough_isValid;
}

bool OAITextFormat::isUnderline() const {
    return m_underline;
}
void OAITextFormat::setUnderline(const bool &underline) {
    m_underline = underline;
    m_underline_isSet = true;
}

bool OAITextFormat::is_underline_Set() const{
    return m_underline_isSet;
}

bool OAITextFormat::is_underline_Valid() const{
    return m_underline_isValid;
}

bool OAITextFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foreground_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_foreground_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_italic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_strikethrough_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_underline_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
