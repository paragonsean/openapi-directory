/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaterfallChartSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaterfallChartSpec::OAIWaterfallChartSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaterfallChartSpec::OAIWaterfallChartSpec() {
    this->initializeModel();
}

OAIWaterfallChartSpec::~OAIWaterfallChartSpec() {}

void OAIWaterfallChartSpec::initializeModel() {

    m_connector_line_style_isSet = false;
    m_connector_line_style_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_first_value_is_total_isSet = false;
    m_first_value_is_total_isValid = false;

    m_hide_connector_lines_isSet = false;
    m_hide_connector_lines_isValid = false;

    m_series_isSet = false;
    m_series_isValid = false;

    m_stacked_type_isSet = false;
    m_stacked_type_isValid = false;

    m_total_data_label_isSet = false;
    m_total_data_label_isValid = false;
}

void OAIWaterfallChartSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaterfallChartSpec::fromJsonObject(QJsonObject json) {

    m_connector_line_style_isValid = ::OpenAPI::fromJsonValue(m_connector_line_style, json[QString("connectorLineStyle")]);
    m_connector_line_style_isSet = !json[QString("connectorLineStyle")].isNull() && m_connector_line_style_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_first_value_is_total_isValid = ::OpenAPI::fromJsonValue(m_first_value_is_total, json[QString("firstValueIsTotal")]);
    m_first_value_is_total_isSet = !json[QString("firstValueIsTotal")].isNull() && m_first_value_is_total_isValid;

    m_hide_connector_lines_isValid = ::OpenAPI::fromJsonValue(m_hide_connector_lines, json[QString("hideConnectorLines")]);
    m_hide_connector_lines_isSet = !json[QString("hideConnectorLines")].isNull() && m_hide_connector_lines_isValid;

    m_series_isValid = ::OpenAPI::fromJsonValue(m_series, json[QString("series")]);
    m_series_isSet = !json[QString("series")].isNull() && m_series_isValid;

    m_stacked_type_isValid = ::OpenAPI::fromJsonValue(m_stacked_type, json[QString("stackedType")]);
    m_stacked_type_isSet = !json[QString("stackedType")].isNull() && m_stacked_type_isValid;

    m_total_data_label_isValid = ::OpenAPI::fromJsonValue(m_total_data_label, json[QString("totalDataLabel")]);
    m_total_data_label_isSet = !json[QString("totalDataLabel")].isNull() && m_total_data_label_isValid;
}

QString OAIWaterfallChartSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaterfallChartSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_connector_line_style.isSet()) {
        obj.insert(QString("connectorLineStyle"), ::OpenAPI::toJsonValue(m_connector_line_style));
    }
    if (m_domain.isSet()) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_first_value_is_total_isSet) {
        obj.insert(QString("firstValueIsTotal"), ::OpenAPI::toJsonValue(m_first_value_is_total));
    }
    if (m_hide_connector_lines_isSet) {
        obj.insert(QString("hideConnectorLines"), ::OpenAPI::toJsonValue(m_hide_connector_lines));
    }
    if (m_series.size() > 0) {
        obj.insert(QString("series"), ::OpenAPI::toJsonValue(m_series));
    }
    if (m_stacked_type_isSet) {
        obj.insert(QString("stackedType"), ::OpenAPI::toJsonValue(m_stacked_type));
    }
    if (m_total_data_label.isSet()) {
        obj.insert(QString("totalDataLabel"), ::OpenAPI::toJsonValue(m_total_data_label));
    }
    return obj;
}

OAILineStyle OAIWaterfallChartSpec::getConnectorLineStyle() const {
    return m_connector_line_style;
}
void OAIWaterfallChartSpec::setConnectorLineStyle(const OAILineStyle &connector_line_style) {
    m_connector_line_style = connector_line_style;
    m_connector_line_style_isSet = true;
}

bool OAIWaterfallChartSpec::is_connector_line_style_Set() const{
    return m_connector_line_style_isSet;
}

bool OAIWaterfallChartSpec::is_connector_line_style_Valid() const{
    return m_connector_line_style_isValid;
}

OAIWaterfallChartDomain OAIWaterfallChartSpec::getDomain() const {
    return m_domain;
}
void OAIWaterfallChartSpec::setDomain(const OAIWaterfallChartDomain &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIWaterfallChartSpec::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIWaterfallChartSpec::is_domain_Valid() const{
    return m_domain_isValid;
}

bool OAIWaterfallChartSpec::isFirstValueIsTotal() const {
    return m_first_value_is_total;
}
void OAIWaterfallChartSpec::setFirstValueIsTotal(const bool &first_value_is_total) {
    m_first_value_is_total = first_value_is_total;
    m_first_value_is_total_isSet = true;
}

bool OAIWaterfallChartSpec::is_first_value_is_total_Set() const{
    return m_first_value_is_total_isSet;
}

bool OAIWaterfallChartSpec::is_first_value_is_total_Valid() const{
    return m_first_value_is_total_isValid;
}

bool OAIWaterfallChartSpec::isHideConnectorLines() const {
    return m_hide_connector_lines;
}
void OAIWaterfallChartSpec::setHideConnectorLines(const bool &hide_connector_lines) {
    m_hide_connector_lines = hide_connector_lines;
    m_hide_connector_lines_isSet = true;
}

bool OAIWaterfallChartSpec::is_hide_connector_lines_Set() const{
    return m_hide_connector_lines_isSet;
}

bool OAIWaterfallChartSpec::is_hide_connector_lines_Valid() const{
    return m_hide_connector_lines_isValid;
}

QList<OAIWaterfallChartSeries> OAIWaterfallChartSpec::getSeries() const {
    return m_series;
}
void OAIWaterfallChartSpec::setSeries(const QList<OAIWaterfallChartSeries> &series) {
    m_series = series;
    m_series_isSet = true;
}

bool OAIWaterfallChartSpec::is_series_Set() const{
    return m_series_isSet;
}

bool OAIWaterfallChartSpec::is_series_Valid() const{
    return m_series_isValid;
}

QString OAIWaterfallChartSpec::getStackedType() const {
    return m_stacked_type;
}
void OAIWaterfallChartSpec::setStackedType(const QString &stacked_type) {
    m_stacked_type = stacked_type;
    m_stacked_type_isSet = true;
}

bool OAIWaterfallChartSpec::is_stacked_type_Set() const{
    return m_stacked_type_isSet;
}

bool OAIWaterfallChartSpec::is_stacked_type_Valid() const{
    return m_stacked_type_isValid;
}

OAIDataLabel OAIWaterfallChartSpec::getTotalDataLabel() const {
    return m_total_data_label;
}
void OAIWaterfallChartSpec::setTotalDataLabel(const OAIDataLabel &total_data_label) {
    m_total_data_label = total_data_label;
    m_total_data_label_isSet = true;
}

bool OAIWaterfallChartSpec::is_total_data_label_Set() const{
    return m_total_data_label_isSet;
}

bool OAIWaterfallChartSpec::is_total_data_label_Valid() const{
    return m_total_data_label_isValid;
}

bool OAIWaterfallChartSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connector_line_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_value_is_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_connector_lines_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stacked_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_data_label.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaterfallChartSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
