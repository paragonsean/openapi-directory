/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotGroupRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotGroupRule::OAIPivotGroupRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotGroupRule::OAIPivotGroupRule() {
    this->initializeModel();
}

OAIPivotGroupRule::~OAIPivotGroupRule() {}

void OAIPivotGroupRule::initializeModel() {

    m_date_time_rule_isSet = false;
    m_date_time_rule_isValid = false;

    m_histogram_rule_isSet = false;
    m_histogram_rule_isValid = false;

    m_manual_rule_isSet = false;
    m_manual_rule_isValid = false;
}

void OAIPivotGroupRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotGroupRule::fromJsonObject(QJsonObject json) {

    m_date_time_rule_isValid = ::OpenAPI::fromJsonValue(m_date_time_rule, json[QString("dateTimeRule")]);
    m_date_time_rule_isSet = !json[QString("dateTimeRule")].isNull() && m_date_time_rule_isValid;

    m_histogram_rule_isValid = ::OpenAPI::fromJsonValue(m_histogram_rule, json[QString("histogramRule")]);
    m_histogram_rule_isSet = !json[QString("histogramRule")].isNull() && m_histogram_rule_isValid;

    m_manual_rule_isValid = ::OpenAPI::fromJsonValue(m_manual_rule, json[QString("manualRule")]);
    m_manual_rule_isSet = !json[QString("manualRule")].isNull() && m_manual_rule_isValid;
}

QString OAIPivotGroupRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotGroupRule::asJsonObject() const {
    QJsonObject obj;
    if (m_date_time_rule.isSet()) {
        obj.insert(QString("dateTimeRule"), ::OpenAPI::toJsonValue(m_date_time_rule));
    }
    if (m_histogram_rule.isSet()) {
        obj.insert(QString("histogramRule"), ::OpenAPI::toJsonValue(m_histogram_rule));
    }
    if (m_manual_rule.isSet()) {
        obj.insert(QString("manualRule"), ::OpenAPI::toJsonValue(m_manual_rule));
    }
    return obj;
}

OAIDateTimeRule OAIPivotGroupRule::getDateTimeRule() const {
    return m_date_time_rule;
}
void OAIPivotGroupRule::setDateTimeRule(const OAIDateTimeRule &date_time_rule) {
    m_date_time_rule = date_time_rule;
    m_date_time_rule_isSet = true;
}

bool OAIPivotGroupRule::is_date_time_rule_Set() const{
    return m_date_time_rule_isSet;
}

bool OAIPivotGroupRule::is_date_time_rule_Valid() const{
    return m_date_time_rule_isValid;
}

OAIHistogramRule OAIPivotGroupRule::getHistogramRule() const {
    return m_histogram_rule;
}
void OAIPivotGroupRule::setHistogramRule(const OAIHistogramRule &histogram_rule) {
    m_histogram_rule = histogram_rule;
    m_histogram_rule_isSet = true;
}

bool OAIPivotGroupRule::is_histogram_rule_Set() const{
    return m_histogram_rule_isSet;
}

bool OAIPivotGroupRule::is_histogram_rule_Valid() const{
    return m_histogram_rule_isValid;
}

OAIManualRule OAIPivotGroupRule::getManualRule() const {
    return m_manual_rule;
}
void OAIPivotGroupRule::setManualRule(const OAIManualRule &manual_rule) {
    m_manual_rule = manual_rule;
    m_manual_rule_isSet = true;
}

bool OAIPivotGroupRule::is_manual_rule_Set() const{
    return m_manual_rule_isSet;
}

bool OAIPivotGroupRule::is_manual_rule_Valid() const{
    return m_manual_rule_isValid;
}

bool OAIPivotGroupRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_time_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_histogram_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotGroupRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
