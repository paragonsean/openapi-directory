/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataLabel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataLabel::OAIDataLabel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataLabel::OAIDataLabel() {
    this->initializeModel();
}

OAIDataLabel::~OAIDataLabel() {}

void OAIDataLabel::initializeModel() {

    m_custom_label_data_isSet = false;
    m_custom_label_data_isValid = false;

    m_placement_isSet = false;
    m_placement_isValid = false;

    m_text_format_isSet = false;
    m_text_format_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDataLabel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataLabel::fromJsonObject(QJsonObject json) {

    m_custom_label_data_isValid = ::OpenAPI::fromJsonValue(m_custom_label_data, json[QString("customLabelData")]);
    m_custom_label_data_isSet = !json[QString("customLabelData")].isNull() && m_custom_label_data_isValid;

    m_placement_isValid = ::OpenAPI::fromJsonValue(m_placement, json[QString("placement")]);
    m_placement_isSet = !json[QString("placement")].isNull() && m_placement_isValid;

    m_text_format_isValid = ::OpenAPI::fromJsonValue(m_text_format, json[QString("textFormat")]);
    m_text_format_isSet = !json[QString("textFormat")].isNull() && m_text_format_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDataLabel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataLabel::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_label_data.isSet()) {
        obj.insert(QString("customLabelData"), ::OpenAPI::toJsonValue(m_custom_label_data));
    }
    if (m_placement_isSet) {
        obj.insert(QString("placement"), ::OpenAPI::toJsonValue(m_placement));
    }
    if (m_text_format.isSet()) {
        obj.insert(QString("textFormat"), ::OpenAPI::toJsonValue(m_text_format));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIChartData OAIDataLabel::getCustomLabelData() const {
    return m_custom_label_data;
}
void OAIDataLabel::setCustomLabelData(const OAIChartData &custom_label_data) {
    m_custom_label_data = custom_label_data;
    m_custom_label_data_isSet = true;
}

bool OAIDataLabel::is_custom_label_data_Set() const{
    return m_custom_label_data_isSet;
}

bool OAIDataLabel::is_custom_label_data_Valid() const{
    return m_custom_label_data_isValid;
}

QString OAIDataLabel::getPlacement() const {
    return m_placement;
}
void OAIDataLabel::setPlacement(const QString &placement) {
    m_placement = placement;
    m_placement_isSet = true;
}

bool OAIDataLabel::is_placement_Set() const{
    return m_placement_isSet;
}

bool OAIDataLabel::is_placement_Valid() const{
    return m_placement_isValid;
}

OAITextFormat OAIDataLabel::getTextFormat() const {
    return m_text_format;
}
void OAIDataLabel::setTextFormat(const OAITextFormat &text_format) {
    m_text_format = text_format;
    m_text_format_isSet = true;
}

bool OAIDataLabel::is_text_format_Set() const{
    return m_text_format_isSet;
}

bool OAIDataLabel::is_text_format_Valid() const{
    return m_text_format_isValid;
}

QString OAIDataLabel::getType() const {
    return m_type;
}
void OAIDataLabel::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDataLabel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDataLabel::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDataLabel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_label_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataLabel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
