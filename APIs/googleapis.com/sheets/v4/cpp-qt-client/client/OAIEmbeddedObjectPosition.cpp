/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmbeddedObjectPosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmbeddedObjectPosition::OAIEmbeddedObjectPosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmbeddedObjectPosition::OAIEmbeddedObjectPosition() {
    this->initializeModel();
}

OAIEmbeddedObjectPosition::~OAIEmbeddedObjectPosition() {}

void OAIEmbeddedObjectPosition::initializeModel() {

    m_new_sheet_isSet = false;
    m_new_sheet_isValid = false;

    m_overlay_position_isSet = false;
    m_overlay_position_isValid = false;

    m_sheet_id_isSet = false;
    m_sheet_id_isValid = false;
}

void OAIEmbeddedObjectPosition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmbeddedObjectPosition::fromJsonObject(QJsonObject json) {

    m_new_sheet_isValid = ::OpenAPI::fromJsonValue(m_new_sheet, json[QString("newSheet")]);
    m_new_sheet_isSet = !json[QString("newSheet")].isNull() && m_new_sheet_isValid;

    m_overlay_position_isValid = ::OpenAPI::fromJsonValue(m_overlay_position, json[QString("overlayPosition")]);
    m_overlay_position_isSet = !json[QString("overlayPosition")].isNull() && m_overlay_position_isValid;

    m_sheet_id_isValid = ::OpenAPI::fromJsonValue(m_sheet_id, json[QString("sheetId")]);
    m_sheet_id_isSet = !json[QString("sheetId")].isNull() && m_sheet_id_isValid;
}

QString OAIEmbeddedObjectPosition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmbeddedObjectPosition::asJsonObject() const {
    QJsonObject obj;
    if (m_new_sheet_isSet) {
        obj.insert(QString("newSheet"), ::OpenAPI::toJsonValue(m_new_sheet));
    }
    if (m_overlay_position.isSet()) {
        obj.insert(QString("overlayPosition"), ::OpenAPI::toJsonValue(m_overlay_position));
    }
    if (m_sheet_id_isSet) {
        obj.insert(QString("sheetId"), ::OpenAPI::toJsonValue(m_sheet_id));
    }
    return obj;
}

bool OAIEmbeddedObjectPosition::isNewSheet() const {
    return m_new_sheet;
}
void OAIEmbeddedObjectPosition::setNewSheet(const bool &new_sheet) {
    m_new_sheet = new_sheet;
    m_new_sheet_isSet = true;
}

bool OAIEmbeddedObjectPosition::is_new_sheet_Set() const{
    return m_new_sheet_isSet;
}

bool OAIEmbeddedObjectPosition::is_new_sheet_Valid() const{
    return m_new_sheet_isValid;
}

OAIOverlayPosition OAIEmbeddedObjectPosition::getOverlayPosition() const {
    return m_overlay_position;
}
void OAIEmbeddedObjectPosition::setOverlayPosition(const OAIOverlayPosition &overlay_position) {
    m_overlay_position = overlay_position;
    m_overlay_position_isSet = true;
}

bool OAIEmbeddedObjectPosition::is_overlay_position_Set() const{
    return m_overlay_position_isSet;
}

bool OAIEmbeddedObjectPosition::is_overlay_position_Valid() const{
    return m_overlay_position_isValid;
}

qint32 OAIEmbeddedObjectPosition::getSheetId() const {
    return m_sheet_id;
}
void OAIEmbeddedObjectPosition::setSheetId(const qint32 &sheet_id) {
    m_sheet_id = sheet_id;
    m_sheet_id_isSet = true;
}

bool OAIEmbeddedObjectPosition::is_sheet_id_Set() const{
    return m_sheet_id_isSet;
}

bool OAIEmbeddedObjectPosition::is_sheet_id_Valid() const{
    return m_sheet_id_isValid;
}

bool OAIEmbeddedObjectPosition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_new_sheet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overlay_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheet_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmbeddedObjectPosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
