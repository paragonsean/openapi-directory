/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRefreshDataSourceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRefreshDataSourceRequest::OAIRefreshDataSourceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRefreshDataSourceRequest::OAIRefreshDataSourceRequest() {
    this->initializeModel();
}

OAIRefreshDataSourceRequest::~OAIRefreshDataSourceRequest() {}

void OAIRefreshDataSourceRequest::initializeModel() {

    m_data_source_id_isSet = false;
    m_data_source_id_isValid = false;

    m_force_isSet = false;
    m_force_isValid = false;

    m_is_all_isSet = false;
    m_is_all_isValid = false;

    m_references_isSet = false;
    m_references_isValid = false;
}

void OAIRefreshDataSourceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRefreshDataSourceRequest::fromJsonObject(QJsonObject json) {

    m_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_id, json[QString("dataSourceId")]);
    m_data_source_id_isSet = !json[QString("dataSourceId")].isNull() && m_data_source_id_isValid;

    m_force_isValid = ::OpenAPI::fromJsonValue(m_force, json[QString("force")]);
    m_force_isSet = !json[QString("force")].isNull() && m_force_isValid;

    m_is_all_isValid = ::OpenAPI::fromJsonValue(m_is_all, json[QString("isAll")]);
    m_is_all_isSet = !json[QString("isAll")].isNull() && m_is_all_isValid;

    m_references_isValid = ::OpenAPI::fromJsonValue(m_references, json[QString("references")]);
    m_references_isSet = !json[QString("references")].isNull() && m_references_isValid;
}

QString OAIRefreshDataSourceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRefreshDataSourceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_id_isSet) {
        obj.insert(QString("dataSourceId"), ::OpenAPI::toJsonValue(m_data_source_id));
    }
    if (m_force_isSet) {
        obj.insert(QString("force"), ::OpenAPI::toJsonValue(m_force));
    }
    if (m_is_all_isSet) {
        obj.insert(QString("isAll"), ::OpenAPI::toJsonValue(m_is_all));
    }
    if (m_references.isSet()) {
        obj.insert(QString("references"), ::OpenAPI::toJsonValue(m_references));
    }
    return obj;
}

QString OAIRefreshDataSourceRequest::getDataSourceId() const {
    return m_data_source_id;
}
void OAIRefreshDataSourceRequest::setDataSourceId(const QString &data_source_id) {
    m_data_source_id = data_source_id;
    m_data_source_id_isSet = true;
}

bool OAIRefreshDataSourceRequest::is_data_source_id_Set() const{
    return m_data_source_id_isSet;
}

bool OAIRefreshDataSourceRequest::is_data_source_id_Valid() const{
    return m_data_source_id_isValid;
}

bool OAIRefreshDataSourceRequest::isForce() const {
    return m_force;
}
void OAIRefreshDataSourceRequest::setForce(const bool &force) {
    m_force = force;
    m_force_isSet = true;
}

bool OAIRefreshDataSourceRequest::is_force_Set() const{
    return m_force_isSet;
}

bool OAIRefreshDataSourceRequest::is_force_Valid() const{
    return m_force_isValid;
}

bool OAIRefreshDataSourceRequest::isIsAll() const {
    return m_is_all;
}
void OAIRefreshDataSourceRequest::setIsAll(const bool &is_all) {
    m_is_all = is_all;
    m_is_all_isSet = true;
}

bool OAIRefreshDataSourceRequest::is_is_all_Set() const{
    return m_is_all_isSet;
}

bool OAIRefreshDataSourceRequest::is_is_all_Valid() const{
    return m_is_all_isValid;
}

OAIDataSourceObjectReferences OAIRefreshDataSourceRequest::getReferences() const {
    return m_references;
}
void OAIRefreshDataSourceRequest::setReferences(const OAIDataSourceObjectReferences &references) {
    m_references = references;
    m_references_isSet = true;
}

bool OAIRefreshDataSourceRequest::is_references_Set() const{
    return m_references_isSet;
}

bool OAIRefreshDataSourceRequest::is_references_Valid() const{
    return m_references_isValid;
}

bool OAIRefreshDataSourceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_all_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_references.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRefreshDataSourceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
