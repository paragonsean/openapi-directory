/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeveloperMetadataLookup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeveloperMetadataLookup::OAIDeveloperMetadataLookup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeveloperMetadataLookup::OAIDeveloperMetadataLookup() {
    this->initializeModel();
}

OAIDeveloperMetadataLookup::~OAIDeveloperMetadataLookup() {}

void OAIDeveloperMetadataLookup::initializeModel() {

    m_location_matching_strategy_isSet = false;
    m_location_matching_strategy_isValid = false;

    m_location_type_isSet = false;
    m_location_type_isValid = false;

    m_metadata_id_isSet = false;
    m_metadata_id_isValid = false;

    m_metadata_key_isSet = false;
    m_metadata_key_isValid = false;

    m_metadata_location_isSet = false;
    m_metadata_location_isValid = false;

    m_metadata_value_isSet = false;
    m_metadata_value_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIDeveloperMetadataLookup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeveloperMetadataLookup::fromJsonObject(QJsonObject json) {

    m_location_matching_strategy_isValid = ::OpenAPI::fromJsonValue(m_location_matching_strategy, json[QString("locationMatchingStrategy")]);
    m_location_matching_strategy_isSet = !json[QString("locationMatchingStrategy")].isNull() && m_location_matching_strategy_isValid;

    m_location_type_isValid = ::OpenAPI::fromJsonValue(m_location_type, json[QString("locationType")]);
    m_location_type_isSet = !json[QString("locationType")].isNull() && m_location_type_isValid;

    m_metadata_id_isValid = ::OpenAPI::fromJsonValue(m_metadata_id, json[QString("metadataId")]);
    m_metadata_id_isSet = !json[QString("metadataId")].isNull() && m_metadata_id_isValid;

    m_metadata_key_isValid = ::OpenAPI::fromJsonValue(m_metadata_key, json[QString("metadataKey")]);
    m_metadata_key_isSet = !json[QString("metadataKey")].isNull() && m_metadata_key_isValid;

    m_metadata_location_isValid = ::OpenAPI::fromJsonValue(m_metadata_location, json[QString("metadataLocation")]);
    m_metadata_location_isSet = !json[QString("metadataLocation")].isNull() && m_metadata_location_isValid;

    m_metadata_value_isValid = ::OpenAPI::fromJsonValue(m_metadata_value, json[QString("metadataValue")]);
    m_metadata_value_isSet = !json[QString("metadataValue")].isNull() && m_metadata_value_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIDeveloperMetadataLookup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeveloperMetadataLookup::asJsonObject() const {
    QJsonObject obj;
    if (m_location_matching_strategy_isSet) {
        obj.insert(QString("locationMatchingStrategy"), ::OpenAPI::toJsonValue(m_location_matching_strategy));
    }
    if (m_location_type_isSet) {
        obj.insert(QString("locationType"), ::OpenAPI::toJsonValue(m_location_type));
    }
    if (m_metadata_id_isSet) {
        obj.insert(QString("metadataId"), ::OpenAPI::toJsonValue(m_metadata_id));
    }
    if (m_metadata_key_isSet) {
        obj.insert(QString("metadataKey"), ::OpenAPI::toJsonValue(m_metadata_key));
    }
    if (m_metadata_location.isSet()) {
        obj.insert(QString("metadataLocation"), ::OpenAPI::toJsonValue(m_metadata_location));
    }
    if (m_metadata_value_isSet) {
        obj.insert(QString("metadataValue"), ::OpenAPI::toJsonValue(m_metadata_value));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QString OAIDeveloperMetadataLookup::getLocationMatchingStrategy() const {
    return m_location_matching_strategy;
}
void OAIDeveloperMetadataLookup::setLocationMatchingStrategy(const QString &location_matching_strategy) {
    m_location_matching_strategy = location_matching_strategy;
    m_location_matching_strategy_isSet = true;
}

bool OAIDeveloperMetadataLookup::is_location_matching_strategy_Set() const{
    return m_location_matching_strategy_isSet;
}

bool OAIDeveloperMetadataLookup::is_location_matching_strategy_Valid() const{
    return m_location_matching_strategy_isValid;
}

QString OAIDeveloperMetadataLookup::getLocationType() const {
    return m_location_type;
}
void OAIDeveloperMetadataLookup::setLocationType(const QString &location_type) {
    m_location_type = location_type;
    m_location_type_isSet = true;
}

bool OAIDeveloperMetadataLookup::is_location_type_Set() const{
    return m_location_type_isSet;
}

bool OAIDeveloperMetadataLookup::is_location_type_Valid() const{
    return m_location_type_isValid;
}

qint32 OAIDeveloperMetadataLookup::getMetadataId() const {
    return m_metadata_id;
}
void OAIDeveloperMetadataLookup::setMetadataId(const qint32 &metadata_id) {
    m_metadata_id = metadata_id;
    m_metadata_id_isSet = true;
}

bool OAIDeveloperMetadataLookup::is_metadata_id_Set() const{
    return m_metadata_id_isSet;
}

bool OAIDeveloperMetadataLookup::is_metadata_id_Valid() const{
    return m_metadata_id_isValid;
}

QString OAIDeveloperMetadataLookup::getMetadataKey() const {
    return m_metadata_key;
}
void OAIDeveloperMetadataLookup::setMetadataKey(const QString &metadata_key) {
    m_metadata_key = metadata_key;
    m_metadata_key_isSet = true;
}

bool OAIDeveloperMetadataLookup::is_metadata_key_Set() const{
    return m_metadata_key_isSet;
}

bool OAIDeveloperMetadataLookup::is_metadata_key_Valid() const{
    return m_metadata_key_isValid;
}

OAIDeveloperMetadataLocation OAIDeveloperMetadataLookup::getMetadataLocation() const {
    return m_metadata_location;
}
void OAIDeveloperMetadataLookup::setMetadataLocation(const OAIDeveloperMetadataLocation &metadata_location) {
    m_metadata_location = metadata_location;
    m_metadata_location_isSet = true;
}

bool OAIDeveloperMetadataLookup::is_metadata_location_Set() const{
    return m_metadata_location_isSet;
}

bool OAIDeveloperMetadataLookup::is_metadata_location_Valid() const{
    return m_metadata_location_isValid;
}

QString OAIDeveloperMetadataLookup::getMetadataValue() const {
    return m_metadata_value;
}
void OAIDeveloperMetadataLookup::setMetadataValue(const QString &metadata_value) {
    m_metadata_value = metadata_value;
    m_metadata_value_isSet = true;
}

bool OAIDeveloperMetadataLookup::is_metadata_value_Set() const{
    return m_metadata_value_isSet;
}

bool OAIDeveloperMetadataLookup::is_metadata_value_Valid() const{
    return m_metadata_value_isValid;
}

QString OAIDeveloperMetadataLookup::getVisibility() const {
    return m_visibility;
}
void OAIDeveloperMetadataLookup::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIDeveloperMetadataLookup::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIDeveloperMetadataLookup::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIDeveloperMetadataLookup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_matching_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeveloperMetadataLookup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
