/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateEmbeddedObjectBorderRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateEmbeddedObjectBorderRequest::OAIUpdateEmbeddedObjectBorderRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateEmbeddedObjectBorderRequest::OAIUpdateEmbeddedObjectBorderRequest() {
    this->initializeModel();
}

OAIUpdateEmbeddedObjectBorderRequest::~OAIUpdateEmbeddedObjectBorderRequest() {}

void OAIUpdateEmbeddedObjectBorderRequest::initializeModel() {

    m_border_isSet = false;
    m_border_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;
}

void OAIUpdateEmbeddedObjectBorderRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateEmbeddedObjectBorderRequest::fromJsonObject(QJsonObject json) {

    m_border_isValid = ::OpenAPI::fromJsonValue(m_border, json[QString("border")]);
    m_border_isSet = !json[QString("border")].isNull() && m_border_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;
}

QString OAIUpdateEmbeddedObjectBorderRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateEmbeddedObjectBorderRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_border.isSet()) {
        obj.insert(QString("border"), ::OpenAPI::toJsonValue(m_border));
    }
    if (m_fields_isSet) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    return obj;
}

OAIEmbeddedObjectBorder OAIUpdateEmbeddedObjectBorderRequest::getBorder() const {
    return m_border;
}
void OAIUpdateEmbeddedObjectBorderRequest::setBorder(const OAIEmbeddedObjectBorder &border) {
    m_border = border;
    m_border_isSet = true;
}

bool OAIUpdateEmbeddedObjectBorderRequest::is_border_Set() const{
    return m_border_isSet;
}

bool OAIUpdateEmbeddedObjectBorderRequest::is_border_Valid() const{
    return m_border_isValid;
}

QString OAIUpdateEmbeddedObjectBorderRequest::getFields() const {
    return m_fields;
}
void OAIUpdateEmbeddedObjectBorderRequest::setFields(const QString &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIUpdateEmbeddedObjectBorderRequest::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIUpdateEmbeddedObjectBorderRequest::is_fields_Valid() const{
    return m_fields_isValid;
}

qint32 OAIUpdateEmbeddedObjectBorderRequest::getObjectId() const {
    return m_object_id;
}
void OAIUpdateEmbeddedObjectBorderRequest::setObjectId(const qint32 &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIUpdateEmbeddedObjectBorderRequest::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIUpdateEmbeddedObjectBorderRequest::is_object_id_Valid() const{
    return m_object_id_isValid;
}

bool OAIUpdateEmbeddedObjectBorderRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_border.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateEmbeddedObjectBorderRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
