/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISlicerSpec.h
 *
 * The specifications of a slicer.
 */

#ifndef OAISlicerSpec_H
#define OAISlicerSpec_H

#include <QJsonObject>

#include "OAIColor.h"
#include "OAIColorStyle.h"
#include "OAIFilterCriteria.h"
#include "OAIGridRange.h"
#include "OAITextFormat.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIColor;
class OAIColorStyle;
class OAIGridRange;
class OAIFilterCriteria;
class OAITextFormat;

class OAISlicerSpec : public OAIObject {
public:
    OAISlicerSpec();
    OAISlicerSpec(QString json);
    ~OAISlicerSpec() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isApplyToPivotTables() const;
    void setApplyToPivotTables(const bool &apply_to_pivot_tables);
    bool is_apply_to_pivot_tables_Set() const;
    bool is_apply_to_pivot_tables_Valid() const;

    OAIColor getBackgroundColor() const;
    void setBackgroundColor(const OAIColor &background_color);
    bool is_background_color_Set() const;
    bool is_background_color_Valid() const;

    OAIColorStyle getBackgroundColorStyle() const;
    void setBackgroundColorStyle(const OAIColorStyle &background_color_style);
    bool is_background_color_style_Set() const;
    bool is_background_color_style_Valid() const;

    qint32 getColumnIndex() const;
    void setColumnIndex(const qint32 &column_index);
    bool is_column_index_Set() const;
    bool is_column_index_Valid() const;

    OAIGridRange getDataRange() const;
    void setDataRange(const OAIGridRange &data_range);
    bool is_data_range_Set() const;
    bool is_data_range_Valid() const;

    OAIFilterCriteria getFilterCriteria() const;
    void setFilterCriteria(const OAIFilterCriteria &filter_criteria);
    bool is_filter_criteria_Set() const;
    bool is_filter_criteria_Valid() const;

    QString getHorizontalAlignment() const;
    void setHorizontalAlignment(const QString &horizontal_alignment);
    bool is_horizontal_alignment_Set() const;
    bool is_horizontal_alignment_Valid() const;

    OAITextFormat getTextFormat() const;
    void setTextFormat(const OAITextFormat &text_format);
    bool is_text_format_Set() const;
    bool is_text_format_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_apply_to_pivot_tables;
    bool m_apply_to_pivot_tables_isSet;
    bool m_apply_to_pivot_tables_isValid;

    OAIColor m_background_color;
    bool m_background_color_isSet;
    bool m_background_color_isValid;

    OAIColorStyle m_background_color_style;
    bool m_background_color_style_isSet;
    bool m_background_color_style_isValid;

    qint32 m_column_index;
    bool m_column_index_isSet;
    bool m_column_index_isValid;

    OAIGridRange m_data_range;
    bool m_data_range_isSet;
    bool m_data_range_isValid;

    OAIFilterCriteria m_filter_criteria;
    bool m_filter_criteria_isSet;
    bool m_filter_criteria_isValid;

    QString m_horizontal_alignment;
    bool m_horizontal_alignment_isSet;
    bool m_horizontal_alignment_isValid;

    OAITextFormat m_text_format;
    bool m_text_format_isSet;
    bool m_text_format_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISlicerSpec)

#endif // OAISlicerSpec_H
