/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITextFormat.h
 *
 * The format of a run of text in a cell. Absent values indicate that the field isn&#39;t specified.
 */

#ifndef OAITextFormat_H
#define OAITextFormat_H

#include <QJsonObject>

#include "OAIColor.h"
#include "OAIColorStyle.h"
#include "OAILink.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIColor;
class OAIColorStyle;
class OAILink;

class OAITextFormat : public OAIObject {
public:
    OAITextFormat();
    OAITextFormat(QString json);
    ~OAITextFormat() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isBold() const;
    void setBold(const bool &bold);
    bool is_bold_Set() const;
    bool is_bold_Valid() const;

    QString getFontFamily() const;
    void setFontFamily(const QString &font_family);
    bool is_font_family_Set() const;
    bool is_font_family_Valid() const;

    qint32 getFontSize() const;
    void setFontSize(const qint32 &font_size);
    bool is_font_size_Set() const;
    bool is_font_size_Valid() const;

    OAIColor getForegroundColor() const;
    void setForegroundColor(const OAIColor &foreground_color);
    bool is_foreground_color_Set() const;
    bool is_foreground_color_Valid() const;

    OAIColorStyle getForegroundColorStyle() const;
    void setForegroundColorStyle(const OAIColorStyle &foreground_color_style);
    bool is_foreground_color_style_Set() const;
    bool is_foreground_color_style_Valid() const;

    bool isItalic() const;
    void setItalic(const bool &italic);
    bool is_italic_Set() const;
    bool is_italic_Valid() const;

    OAILink getLink() const;
    void setLink(const OAILink &link);
    bool is_link_Set() const;
    bool is_link_Valid() const;

    bool isStrikethrough() const;
    void setStrikethrough(const bool &strikethrough);
    bool is_strikethrough_Set() const;
    bool is_strikethrough_Valid() const;

    bool isUnderline() const;
    void setUnderline(const bool &underline);
    bool is_underline_Set() const;
    bool is_underline_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_bold;
    bool m_bold_isSet;
    bool m_bold_isValid;

    QString m_font_family;
    bool m_font_family_isSet;
    bool m_font_family_isValid;

    qint32 m_font_size;
    bool m_font_size_isSet;
    bool m_font_size_isValid;

    OAIColor m_foreground_color;
    bool m_foreground_color_isSet;
    bool m_foreground_color_isValid;

    OAIColorStyle m_foreground_color_style;
    bool m_foreground_color_style_isSet;
    bool m_foreground_color_style_isValid;

    bool m_italic;
    bool m_italic_isSet;
    bool m_italic_isValid;

    OAILink m_link;
    bool m_link_isSet;
    bool m_link_isValid;

    bool m_strikethrough;
    bool m_strikethrough_isSet;
    bool m_strikethrough_isValid;

    bool m_underline;
    bool m_underline_isSet;
    bool m_underline_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITextFormat)

#endif // OAITextFormat_H
