/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaterfallChartSeries.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaterfallChartSeries::OAIWaterfallChartSeries(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaterfallChartSeries::OAIWaterfallChartSeries() {
    this->initializeModel();
}

OAIWaterfallChartSeries::~OAIWaterfallChartSeries() {}

void OAIWaterfallChartSeries::initializeModel() {

    m_custom_subtotals_isSet = false;
    m_custom_subtotals_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_data_label_isSet = false;
    m_data_label_isValid = false;

    m_hide_trailing_subtotal_isSet = false;
    m_hide_trailing_subtotal_isValid = false;

    m_negative_columns_style_isSet = false;
    m_negative_columns_style_isValid = false;

    m_positive_columns_style_isSet = false;
    m_positive_columns_style_isValid = false;

    m_subtotal_columns_style_isSet = false;
    m_subtotal_columns_style_isValid = false;
}

void OAIWaterfallChartSeries::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaterfallChartSeries::fromJsonObject(QJsonObject json) {

    m_custom_subtotals_isValid = ::OpenAPI::fromJsonValue(m_custom_subtotals, json[QString("customSubtotals")]);
    m_custom_subtotals_isSet = !json[QString("customSubtotals")].isNull() && m_custom_subtotals_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_data_label_isValid = ::OpenAPI::fromJsonValue(m_data_label, json[QString("dataLabel")]);
    m_data_label_isSet = !json[QString("dataLabel")].isNull() && m_data_label_isValid;

    m_hide_trailing_subtotal_isValid = ::OpenAPI::fromJsonValue(m_hide_trailing_subtotal, json[QString("hideTrailingSubtotal")]);
    m_hide_trailing_subtotal_isSet = !json[QString("hideTrailingSubtotal")].isNull() && m_hide_trailing_subtotal_isValid;

    m_negative_columns_style_isValid = ::OpenAPI::fromJsonValue(m_negative_columns_style, json[QString("negativeColumnsStyle")]);
    m_negative_columns_style_isSet = !json[QString("negativeColumnsStyle")].isNull() && m_negative_columns_style_isValid;

    m_positive_columns_style_isValid = ::OpenAPI::fromJsonValue(m_positive_columns_style, json[QString("positiveColumnsStyle")]);
    m_positive_columns_style_isSet = !json[QString("positiveColumnsStyle")].isNull() && m_positive_columns_style_isValid;

    m_subtotal_columns_style_isValid = ::OpenAPI::fromJsonValue(m_subtotal_columns_style, json[QString("subtotalColumnsStyle")]);
    m_subtotal_columns_style_isSet = !json[QString("subtotalColumnsStyle")].isNull() && m_subtotal_columns_style_isValid;
}

QString OAIWaterfallChartSeries::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaterfallChartSeries::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_subtotals.size() > 0) {
        obj.insert(QString("customSubtotals"), ::OpenAPI::toJsonValue(m_custom_subtotals));
    }
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_data_label.isSet()) {
        obj.insert(QString("dataLabel"), ::OpenAPI::toJsonValue(m_data_label));
    }
    if (m_hide_trailing_subtotal_isSet) {
        obj.insert(QString("hideTrailingSubtotal"), ::OpenAPI::toJsonValue(m_hide_trailing_subtotal));
    }
    if (m_negative_columns_style.isSet()) {
        obj.insert(QString("negativeColumnsStyle"), ::OpenAPI::toJsonValue(m_negative_columns_style));
    }
    if (m_positive_columns_style.isSet()) {
        obj.insert(QString("positiveColumnsStyle"), ::OpenAPI::toJsonValue(m_positive_columns_style));
    }
    if (m_subtotal_columns_style.isSet()) {
        obj.insert(QString("subtotalColumnsStyle"), ::OpenAPI::toJsonValue(m_subtotal_columns_style));
    }
    return obj;
}

QList<OAIWaterfallChartCustomSubtotal> OAIWaterfallChartSeries::getCustomSubtotals() const {
    return m_custom_subtotals;
}
void OAIWaterfallChartSeries::setCustomSubtotals(const QList<OAIWaterfallChartCustomSubtotal> &custom_subtotals) {
    m_custom_subtotals = custom_subtotals;
    m_custom_subtotals_isSet = true;
}

bool OAIWaterfallChartSeries::is_custom_subtotals_Set() const{
    return m_custom_subtotals_isSet;
}

bool OAIWaterfallChartSeries::is_custom_subtotals_Valid() const{
    return m_custom_subtotals_isValid;
}

OAIChartData OAIWaterfallChartSeries::getData() const {
    return m_data;
}
void OAIWaterfallChartSeries::setData(const OAIChartData &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIWaterfallChartSeries::is_data_Set() const{
    return m_data_isSet;
}

bool OAIWaterfallChartSeries::is_data_Valid() const{
    return m_data_isValid;
}

OAIDataLabel OAIWaterfallChartSeries::getDataLabel() const {
    return m_data_label;
}
void OAIWaterfallChartSeries::setDataLabel(const OAIDataLabel &data_label) {
    m_data_label = data_label;
    m_data_label_isSet = true;
}

bool OAIWaterfallChartSeries::is_data_label_Set() const{
    return m_data_label_isSet;
}

bool OAIWaterfallChartSeries::is_data_label_Valid() const{
    return m_data_label_isValid;
}

bool OAIWaterfallChartSeries::isHideTrailingSubtotal() const {
    return m_hide_trailing_subtotal;
}
void OAIWaterfallChartSeries::setHideTrailingSubtotal(const bool &hide_trailing_subtotal) {
    m_hide_trailing_subtotal = hide_trailing_subtotal;
    m_hide_trailing_subtotal_isSet = true;
}

bool OAIWaterfallChartSeries::is_hide_trailing_subtotal_Set() const{
    return m_hide_trailing_subtotal_isSet;
}

bool OAIWaterfallChartSeries::is_hide_trailing_subtotal_Valid() const{
    return m_hide_trailing_subtotal_isValid;
}

OAIWaterfallChartColumnStyle OAIWaterfallChartSeries::getNegativeColumnsStyle() const {
    return m_negative_columns_style;
}
void OAIWaterfallChartSeries::setNegativeColumnsStyle(const OAIWaterfallChartColumnStyle &negative_columns_style) {
    m_negative_columns_style = negative_columns_style;
    m_negative_columns_style_isSet = true;
}

bool OAIWaterfallChartSeries::is_negative_columns_style_Set() const{
    return m_negative_columns_style_isSet;
}

bool OAIWaterfallChartSeries::is_negative_columns_style_Valid() const{
    return m_negative_columns_style_isValid;
}

OAIWaterfallChartColumnStyle OAIWaterfallChartSeries::getPositiveColumnsStyle() const {
    return m_positive_columns_style;
}
void OAIWaterfallChartSeries::setPositiveColumnsStyle(const OAIWaterfallChartColumnStyle &positive_columns_style) {
    m_positive_columns_style = positive_columns_style;
    m_positive_columns_style_isSet = true;
}

bool OAIWaterfallChartSeries::is_positive_columns_style_Set() const{
    return m_positive_columns_style_isSet;
}

bool OAIWaterfallChartSeries::is_positive_columns_style_Valid() const{
    return m_positive_columns_style_isValid;
}

OAIWaterfallChartColumnStyle OAIWaterfallChartSeries::getSubtotalColumnsStyle() const {
    return m_subtotal_columns_style;
}
void OAIWaterfallChartSeries::setSubtotalColumnsStyle(const OAIWaterfallChartColumnStyle &subtotal_columns_style) {
    m_subtotal_columns_style = subtotal_columns_style;
    m_subtotal_columns_style_isSet = true;
}

bool OAIWaterfallChartSeries::is_subtotal_columns_style_Set() const{
    return m_subtotal_columns_style_isSet;
}

bool OAIWaterfallChartSeries::is_subtotal_columns_style_Valid() const{
    return m_subtotal_columns_style_isValid;
}

bool OAIWaterfallChartSeries::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_subtotals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_trailing_subtotal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negative_columns_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_positive_columns_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtotal_columns_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaterfallChartSeries::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
