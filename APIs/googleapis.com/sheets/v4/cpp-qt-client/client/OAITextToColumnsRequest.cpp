/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextToColumnsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextToColumnsRequest::OAITextToColumnsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextToColumnsRequest::OAITextToColumnsRequest() {
    this->initializeModel();
}

OAITextToColumnsRequest::~OAITextToColumnsRequest() {}

void OAITextToColumnsRequest::initializeModel() {

    m_delimiter_isSet = false;
    m_delimiter_isValid = false;

    m_delimiter_type_isSet = false;
    m_delimiter_type_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAITextToColumnsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextToColumnsRequest::fromJsonObject(QJsonObject json) {

    m_delimiter_isValid = ::OpenAPI::fromJsonValue(m_delimiter, json[QString("delimiter")]);
    m_delimiter_isSet = !json[QString("delimiter")].isNull() && m_delimiter_isValid;

    m_delimiter_type_isValid = ::OpenAPI::fromJsonValue(m_delimiter_type, json[QString("delimiterType")]);
    m_delimiter_type_isSet = !json[QString("delimiterType")].isNull() && m_delimiter_type_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAITextToColumnsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextToColumnsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_delimiter_isSet) {
        obj.insert(QString("delimiter"), ::OpenAPI::toJsonValue(m_delimiter));
    }
    if (m_delimiter_type_isSet) {
        obj.insert(QString("delimiterType"), ::OpenAPI::toJsonValue(m_delimiter_type));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAITextToColumnsRequest::getDelimiter() const {
    return m_delimiter;
}
void OAITextToColumnsRequest::setDelimiter(const QString &delimiter) {
    m_delimiter = delimiter;
    m_delimiter_isSet = true;
}

bool OAITextToColumnsRequest::is_delimiter_Set() const{
    return m_delimiter_isSet;
}

bool OAITextToColumnsRequest::is_delimiter_Valid() const{
    return m_delimiter_isValid;
}

QString OAITextToColumnsRequest::getDelimiterType() const {
    return m_delimiter_type;
}
void OAITextToColumnsRequest::setDelimiterType(const QString &delimiter_type) {
    m_delimiter_type = delimiter_type;
    m_delimiter_type_isSet = true;
}

bool OAITextToColumnsRequest::is_delimiter_type_Set() const{
    return m_delimiter_type_isSet;
}

bool OAITextToColumnsRequest::is_delimiter_type_Valid() const{
    return m_delimiter_type_isValid;
}

OAIGridRange OAITextToColumnsRequest::getSource() const {
    return m_source;
}
void OAITextToColumnsRequest::setSource(const OAIGridRange &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAITextToColumnsRequest::is_source_Set() const{
    return m_source_isSet;
}

bool OAITextToColumnsRequest::is_source_Valid() const{
    return m_source_isValid;
}

bool OAITextToColumnsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delimiter_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextToColumnsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
