/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponse::OAIResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponse::OAIResponse() {
    this->initializeModel();
}

OAIResponse::~OAIResponse() {}

void OAIResponse::initializeModel() {

    m_add_banding_isSet = false;
    m_add_banding_isValid = false;

    m_add_chart_isSet = false;
    m_add_chart_isValid = false;

    m_add_data_source_isSet = false;
    m_add_data_source_isValid = false;

    m_add_dimension_group_isSet = false;
    m_add_dimension_group_isValid = false;

    m_add_filter_view_isSet = false;
    m_add_filter_view_isValid = false;

    m_add_named_range_isSet = false;
    m_add_named_range_isValid = false;

    m_add_protected_range_isSet = false;
    m_add_protected_range_isValid = false;

    m_add_sheet_isSet = false;
    m_add_sheet_isValid = false;

    m_add_slicer_isSet = false;
    m_add_slicer_isValid = false;

    m_create_developer_metadata_isSet = false;
    m_create_developer_metadata_isValid = false;

    m_delete_conditional_format_rule_isSet = false;
    m_delete_conditional_format_rule_isValid = false;

    m_delete_developer_metadata_isSet = false;
    m_delete_developer_metadata_isValid = false;

    m_delete_dimension_group_isSet = false;
    m_delete_dimension_group_isValid = false;

    m_delete_duplicates_isSet = false;
    m_delete_duplicates_isValid = false;

    m_duplicate_filter_view_isSet = false;
    m_duplicate_filter_view_isValid = false;

    m_duplicate_sheet_isSet = false;
    m_duplicate_sheet_isValid = false;

    m_find_replace_isSet = false;
    m_find_replace_isValid = false;

    m_refresh_data_source_isSet = false;
    m_refresh_data_source_isValid = false;

    m_trim_whitespace_isSet = false;
    m_trim_whitespace_isValid = false;

    m_update_conditional_format_rule_isSet = false;
    m_update_conditional_format_rule_isValid = false;

    m_update_data_source_isSet = false;
    m_update_data_source_isValid = false;

    m_update_developer_metadata_isSet = false;
    m_update_developer_metadata_isValid = false;

    m_update_embedded_object_position_isSet = false;
    m_update_embedded_object_position_isValid = false;
}

void OAIResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponse::fromJsonObject(QJsonObject json) {

    m_add_banding_isValid = ::OpenAPI::fromJsonValue(m_add_banding, json[QString("addBanding")]);
    m_add_banding_isSet = !json[QString("addBanding")].isNull() && m_add_banding_isValid;

    m_add_chart_isValid = ::OpenAPI::fromJsonValue(m_add_chart, json[QString("addChart")]);
    m_add_chart_isSet = !json[QString("addChart")].isNull() && m_add_chart_isValid;

    m_add_data_source_isValid = ::OpenAPI::fromJsonValue(m_add_data_source, json[QString("addDataSource")]);
    m_add_data_source_isSet = !json[QString("addDataSource")].isNull() && m_add_data_source_isValid;

    m_add_dimension_group_isValid = ::OpenAPI::fromJsonValue(m_add_dimension_group, json[QString("addDimensionGroup")]);
    m_add_dimension_group_isSet = !json[QString("addDimensionGroup")].isNull() && m_add_dimension_group_isValid;

    m_add_filter_view_isValid = ::OpenAPI::fromJsonValue(m_add_filter_view, json[QString("addFilterView")]);
    m_add_filter_view_isSet = !json[QString("addFilterView")].isNull() && m_add_filter_view_isValid;

    m_add_named_range_isValid = ::OpenAPI::fromJsonValue(m_add_named_range, json[QString("addNamedRange")]);
    m_add_named_range_isSet = !json[QString("addNamedRange")].isNull() && m_add_named_range_isValid;

    m_add_protected_range_isValid = ::OpenAPI::fromJsonValue(m_add_protected_range, json[QString("addProtectedRange")]);
    m_add_protected_range_isSet = !json[QString("addProtectedRange")].isNull() && m_add_protected_range_isValid;

    m_add_sheet_isValid = ::OpenAPI::fromJsonValue(m_add_sheet, json[QString("addSheet")]);
    m_add_sheet_isSet = !json[QString("addSheet")].isNull() && m_add_sheet_isValid;

    m_add_slicer_isValid = ::OpenAPI::fromJsonValue(m_add_slicer, json[QString("addSlicer")]);
    m_add_slicer_isSet = !json[QString("addSlicer")].isNull() && m_add_slicer_isValid;

    m_create_developer_metadata_isValid = ::OpenAPI::fromJsonValue(m_create_developer_metadata, json[QString("createDeveloperMetadata")]);
    m_create_developer_metadata_isSet = !json[QString("createDeveloperMetadata")].isNull() && m_create_developer_metadata_isValid;

    m_delete_conditional_format_rule_isValid = ::OpenAPI::fromJsonValue(m_delete_conditional_format_rule, json[QString("deleteConditionalFormatRule")]);
    m_delete_conditional_format_rule_isSet = !json[QString("deleteConditionalFormatRule")].isNull() && m_delete_conditional_format_rule_isValid;

    m_delete_developer_metadata_isValid = ::OpenAPI::fromJsonValue(m_delete_developer_metadata, json[QString("deleteDeveloperMetadata")]);
    m_delete_developer_metadata_isSet = !json[QString("deleteDeveloperMetadata")].isNull() && m_delete_developer_metadata_isValid;

    m_delete_dimension_group_isValid = ::OpenAPI::fromJsonValue(m_delete_dimension_group, json[QString("deleteDimensionGroup")]);
    m_delete_dimension_group_isSet = !json[QString("deleteDimensionGroup")].isNull() && m_delete_dimension_group_isValid;

    m_delete_duplicates_isValid = ::OpenAPI::fromJsonValue(m_delete_duplicates, json[QString("deleteDuplicates")]);
    m_delete_duplicates_isSet = !json[QString("deleteDuplicates")].isNull() && m_delete_duplicates_isValid;

    m_duplicate_filter_view_isValid = ::OpenAPI::fromJsonValue(m_duplicate_filter_view, json[QString("duplicateFilterView")]);
    m_duplicate_filter_view_isSet = !json[QString("duplicateFilterView")].isNull() && m_duplicate_filter_view_isValid;

    m_duplicate_sheet_isValid = ::OpenAPI::fromJsonValue(m_duplicate_sheet, json[QString("duplicateSheet")]);
    m_duplicate_sheet_isSet = !json[QString("duplicateSheet")].isNull() && m_duplicate_sheet_isValid;

    m_find_replace_isValid = ::OpenAPI::fromJsonValue(m_find_replace, json[QString("findReplace")]);
    m_find_replace_isSet = !json[QString("findReplace")].isNull() && m_find_replace_isValid;

    m_refresh_data_source_isValid = ::OpenAPI::fromJsonValue(m_refresh_data_source, json[QString("refreshDataSource")]);
    m_refresh_data_source_isSet = !json[QString("refreshDataSource")].isNull() && m_refresh_data_source_isValid;

    m_trim_whitespace_isValid = ::OpenAPI::fromJsonValue(m_trim_whitespace, json[QString("trimWhitespace")]);
    m_trim_whitespace_isSet = !json[QString("trimWhitespace")].isNull() && m_trim_whitespace_isValid;

    m_update_conditional_format_rule_isValid = ::OpenAPI::fromJsonValue(m_update_conditional_format_rule, json[QString("updateConditionalFormatRule")]);
    m_update_conditional_format_rule_isSet = !json[QString("updateConditionalFormatRule")].isNull() && m_update_conditional_format_rule_isValid;

    m_update_data_source_isValid = ::OpenAPI::fromJsonValue(m_update_data_source, json[QString("updateDataSource")]);
    m_update_data_source_isSet = !json[QString("updateDataSource")].isNull() && m_update_data_source_isValid;

    m_update_developer_metadata_isValid = ::OpenAPI::fromJsonValue(m_update_developer_metadata, json[QString("updateDeveloperMetadata")]);
    m_update_developer_metadata_isSet = !json[QString("updateDeveloperMetadata")].isNull() && m_update_developer_metadata_isValid;

    m_update_embedded_object_position_isValid = ::OpenAPI::fromJsonValue(m_update_embedded_object_position, json[QString("updateEmbeddedObjectPosition")]);
    m_update_embedded_object_position_isSet = !json[QString("updateEmbeddedObjectPosition")].isNull() && m_update_embedded_object_position_isValid;
}

QString OAIResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_add_banding.isSet()) {
        obj.insert(QString("addBanding"), ::OpenAPI::toJsonValue(m_add_banding));
    }
    if (m_add_chart.isSet()) {
        obj.insert(QString("addChart"), ::OpenAPI::toJsonValue(m_add_chart));
    }
    if (m_add_data_source.isSet()) {
        obj.insert(QString("addDataSource"), ::OpenAPI::toJsonValue(m_add_data_source));
    }
    if (m_add_dimension_group.isSet()) {
        obj.insert(QString("addDimensionGroup"), ::OpenAPI::toJsonValue(m_add_dimension_group));
    }
    if (m_add_filter_view.isSet()) {
        obj.insert(QString("addFilterView"), ::OpenAPI::toJsonValue(m_add_filter_view));
    }
    if (m_add_named_range.isSet()) {
        obj.insert(QString("addNamedRange"), ::OpenAPI::toJsonValue(m_add_named_range));
    }
    if (m_add_protected_range.isSet()) {
        obj.insert(QString("addProtectedRange"), ::OpenAPI::toJsonValue(m_add_protected_range));
    }
    if (m_add_sheet.isSet()) {
        obj.insert(QString("addSheet"), ::OpenAPI::toJsonValue(m_add_sheet));
    }
    if (m_add_slicer.isSet()) {
        obj.insert(QString("addSlicer"), ::OpenAPI::toJsonValue(m_add_slicer));
    }
    if (m_create_developer_metadata.isSet()) {
        obj.insert(QString("createDeveloperMetadata"), ::OpenAPI::toJsonValue(m_create_developer_metadata));
    }
    if (m_delete_conditional_format_rule.isSet()) {
        obj.insert(QString("deleteConditionalFormatRule"), ::OpenAPI::toJsonValue(m_delete_conditional_format_rule));
    }
    if (m_delete_developer_metadata.isSet()) {
        obj.insert(QString("deleteDeveloperMetadata"), ::OpenAPI::toJsonValue(m_delete_developer_metadata));
    }
    if (m_delete_dimension_group.isSet()) {
        obj.insert(QString("deleteDimensionGroup"), ::OpenAPI::toJsonValue(m_delete_dimension_group));
    }
    if (m_delete_duplicates.isSet()) {
        obj.insert(QString("deleteDuplicates"), ::OpenAPI::toJsonValue(m_delete_duplicates));
    }
    if (m_duplicate_filter_view.isSet()) {
        obj.insert(QString("duplicateFilterView"), ::OpenAPI::toJsonValue(m_duplicate_filter_view));
    }
    if (m_duplicate_sheet.isSet()) {
        obj.insert(QString("duplicateSheet"), ::OpenAPI::toJsonValue(m_duplicate_sheet));
    }
    if (m_find_replace.isSet()) {
        obj.insert(QString("findReplace"), ::OpenAPI::toJsonValue(m_find_replace));
    }
    if (m_refresh_data_source.isSet()) {
        obj.insert(QString("refreshDataSource"), ::OpenAPI::toJsonValue(m_refresh_data_source));
    }
    if (m_trim_whitespace.isSet()) {
        obj.insert(QString("trimWhitespace"), ::OpenAPI::toJsonValue(m_trim_whitespace));
    }
    if (m_update_conditional_format_rule.isSet()) {
        obj.insert(QString("updateConditionalFormatRule"), ::OpenAPI::toJsonValue(m_update_conditional_format_rule));
    }
    if (m_update_data_source.isSet()) {
        obj.insert(QString("updateDataSource"), ::OpenAPI::toJsonValue(m_update_data_source));
    }
    if (m_update_developer_metadata.isSet()) {
        obj.insert(QString("updateDeveloperMetadata"), ::OpenAPI::toJsonValue(m_update_developer_metadata));
    }
    if (m_update_embedded_object_position.isSet()) {
        obj.insert(QString("updateEmbeddedObjectPosition"), ::OpenAPI::toJsonValue(m_update_embedded_object_position));
    }
    return obj;
}

OAIAddBandingResponse OAIResponse::getAddBanding() const {
    return m_add_banding;
}
void OAIResponse::setAddBanding(const OAIAddBandingResponse &add_banding) {
    m_add_banding = add_banding;
    m_add_banding_isSet = true;
}

bool OAIResponse::is_add_banding_Set() const{
    return m_add_banding_isSet;
}

bool OAIResponse::is_add_banding_Valid() const{
    return m_add_banding_isValid;
}

OAIAddChartResponse OAIResponse::getAddChart() const {
    return m_add_chart;
}
void OAIResponse::setAddChart(const OAIAddChartResponse &add_chart) {
    m_add_chart = add_chart;
    m_add_chart_isSet = true;
}

bool OAIResponse::is_add_chart_Set() const{
    return m_add_chart_isSet;
}

bool OAIResponse::is_add_chart_Valid() const{
    return m_add_chart_isValid;
}

OAIAddDataSourceResponse OAIResponse::getAddDataSource() const {
    return m_add_data_source;
}
void OAIResponse::setAddDataSource(const OAIAddDataSourceResponse &add_data_source) {
    m_add_data_source = add_data_source;
    m_add_data_source_isSet = true;
}

bool OAIResponse::is_add_data_source_Set() const{
    return m_add_data_source_isSet;
}

bool OAIResponse::is_add_data_source_Valid() const{
    return m_add_data_source_isValid;
}

OAIAddDimensionGroupResponse OAIResponse::getAddDimensionGroup() const {
    return m_add_dimension_group;
}
void OAIResponse::setAddDimensionGroup(const OAIAddDimensionGroupResponse &add_dimension_group) {
    m_add_dimension_group = add_dimension_group;
    m_add_dimension_group_isSet = true;
}

bool OAIResponse::is_add_dimension_group_Set() const{
    return m_add_dimension_group_isSet;
}

bool OAIResponse::is_add_dimension_group_Valid() const{
    return m_add_dimension_group_isValid;
}

OAIAddFilterViewResponse OAIResponse::getAddFilterView() const {
    return m_add_filter_view;
}
void OAIResponse::setAddFilterView(const OAIAddFilterViewResponse &add_filter_view) {
    m_add_filter_view = add_filter_view;
    m_add_filter_view_isSet = true;
}

bool OAIResponse::is_add_filter_view_Set() const{
    return m_add_filter_view_isSet;
}

bool OAIResponse::is_add_filter_view_Valid() const{
    return m_add_filter_view_isValid;
}

OAIAddNamedRangeResponse OAIResponse::getAddNamedRange() const {
    return m_add_named_range;
}
void OAIResponse::setAddNamedRange(const OAIAddNamedRangeResponse &add_named_range) {
    m_add_named_range = add_named_range;
    m_add_named_range_isSet = true;
}

bool OAIResponse::is_add_named_range_Set() const{
    return m_add_named_range_isSet;
}

bool OAIResponse::is_add_named_range_Valid() const{
    return m_add_named_range_isValid;
}

OAIAddProtectedRangeResponse OAIResponse::getAddProtectedRange() const {
    return m_add_protected_range;
}
void OAIResponse::setAddProtectedRange(const OAIAddProtectedRangeResponse &add_protected_range) {
    m_add_protected_range = add_protected_range;
    m_add_protected_range_isSet = true;
}

bool OAIResponse::is_add_protected_range_Set() const{
    return m_add_protected_range_isSet;
}

bool OAIResponse::is_add_protected_range_Valid() const{
    return m_add_protected_range_isValid;
}

OAIAddSheetResponse OAIResponse::getAddSheet() const {
    return m_add_sheet;
}
void OAIResponse::setAddSheet(const OAIAddSheetResponse &add_sheet) {
    m_add_sheet = add_sheet;
    m_add_sheet_isSet = true;
}

bool OAIResponse::is_add_sheet_Set() const{
    return m_add_sheet_isSet;
}

bool OAIResponse::is_add_sheet_Valid() const{
    return m_add_sheet_isValid;
}

OAIAddSlicerResponse OAIResponse::getAddSlicer() const {
    return m_add_slicer;
}
void OAIResponse::setAddSlicer(const OAIAddSlicerResponse &add_slicer) {
    m_add_slicer = add_slicer;
    m_add_slicer_isSet = true;
}

bool OAIResponse::is_add_slicer_Set() const{
    return m_add_slicer_isSet;
}

bool OAIResponse::is_add_slicer_Valid() const{
    return m_add_slicer_isValid;
}

OAICreateDeveloperMetadataResponse OAIResponse::getCreateDeveloperMetadata() const {
    return m_create_developer_metadata;
}
void OAIResponse::setCreateDeveloperMetadata(const OAICreateDeveloperMetadataResponse &create_developer_metadata) {
    m_create_developer_metadata = create_developer_metadata;
    m_create_developer_metadata_isSet = true;
}

bool OAIResponse::is_create_developer_metadata_Set() const{
    return m_create_developer_metadata_isSet;
}

bool OAIResponse::is_create_developer_metadata_Valid() const{
    return m_create_developer_metadata_isValid;
}

OAIDeleteConditionalFormatRuleResponse OAIResponse::getDeleteConditionalFormatRule() const {
    return m_delete_conditional_format_rule;
}
void OAIResponse::setDeleteConditionalFormatRule(const OAIDeleteConditionalFormatRuleResponse &delete_conditional_format_rule) {
    m_delete_conditional_format_rule = delete_conditional_format_rule;
    m_delete_conditional_format_rule_isSet = true;
}

bool OAIResponse::is_delete_conditional_format_rule_Set() const{
    return m_delete_conditional_format_rule_isSet;
}

bool OAIResponse::is_delete_conditional_format_rule_Valid() const{
    return m_delete_conditional_format_rule_isValid;
}

OAIDeleteDeveloperMetadataResponse OAIResponse::getDeleteDeveloperMetadata() const {
    return m_delete_developer_metadata;
}
void OAIResponse::setDeleteDeveloperMetadata(const OAIDeleteDeveloperMetadataResponse &delete_developer_metadata) {
    m_delete_developer_metadata = delete_developer_metadata;
    m_delete_developer_metadata_isSet = true;
}

bool OAIResponse::is_delete_developer_metadata_Set() const{
    return m_delete_developer_metadata_isSet;
}

bool OAIResponse::is_delete_developer_metadata_Valid() const{
    return m_delete_developer_metadata_isValid;
}

OAIDeleteDimensionGroupResponse OAIResponse::getDeleteDimensionGroup() const {
    return m_delete_dimension_group;
}
void OAIResponse::setDeleteDimensionGroup(const OAIDeleteDimensionGroupResponse &delete_dimension_group) {
    m_delete_dimension_group = delete_dimension_group;
    m_delete_dimension_group_isSet = true;
}

bool OAIResponse::is_delete_dimension_group_Set() const{
    return m_delete_dimension_group_isSet;
}

bool OAIResponse::is_delete_dimension_group_Valid() const{
    return m_delete_dimension_group_isValid;
}

OAIDeleteDuplicatesResponse OAIResponse::getDeleteDuplicates() const {
    return m_delete_duplicates;
}
void OAIResponse::setDeleteDuplicates(const OAIDeleteDuplicatesResponse &delete_duplicates) {
    m_delete_duplicates = delete_duplicates;
    m_delete_duplicates_isSet = true;
}

bool OAIResponse::is_delete_duplicates_Set() const{
    return m_delete_duplicates_isSet;
}

bool OAIResponse::is_delete_duplicates_Valid() const{
    return m_delete_duplicates_isValid;
}

OAIDuplicateFilterViewResponse OAIResponse::getDuplicateFilterView() const {
    return m_duplicate_filter_view;
}
void OAIResponse::setDuplicateFilterView(const OAIDuplicateFilterViewResponse &duplicate_filter_view) {
    m_duplicate_filter_view = duplicate_filter_view;
    m_duplicate_filter_view_isSet = true;
}

bool OAIResponse::is_duplicate_filter_view_Set() const{
    return m_duplicate_filter_view_isSet;
}

bool OAIResponse::is_duplicate_filter_view_Valid() const{
    return m_duplicate_filter_view_isValid;
}

OAIDuplicateSheetResponse OAIResponse::getDuplicateSheet() const {
    return m_duplicate_sheet;
}
void OAIResponse::setDuplicateSheet(const OAIDuplicateSheetResponse &duplicate_sheet) {
    m_duplicate_sheet = duplicate_sheet;
    m_duplicate_sheet_isSet = true;
}

bool OAIResponse::is_duplicate_sheet_Set() const{
    return m_duplicate_sheet_isSet;
}

bool OAIResponse::is_duplicate_sheet_Valid() const{
    return m_duplicate_sheet_isValid;
}

OAIFindReplaceResponse OAIResponse::getFindReplace() const {
    return m_find_replace;
}
void OAIResponse::setFindReplace(const OAIFindReplaceResponse &find_replace) {
    m_find_replace = find_replace;
    m_find_replace_isSet = true;
}

bool OAIResponse::is_find_replace_Set() const{
    return m_find_replace_isSet;
}

bool OAIResponse::is_find_replace_Valid() const{
    return m_find_replace_isValid;
}

OAIRefreshDataSourceResponse OAIResponse::getRefreshDataSource() const {
    return m_refresh_data_source;
}
void OAIResponse::setRefreshDataSource(const OAIRefreshDataSourceResponse &refresh_data_source) {
    m_refresh_data_source = refresh_data_source;
    m_refresh_data_source_isSet = true;
}

bool OAIResponse::is_refresh_data_source_Set() const{
    return m_refresh_data_source_isSet;
}

bool OAIResponse::is_refresh_data_source_Valid() const{
    return m_refresh_data_source_isValid;
}

OAITrimWhitespaceResponse OAIResponse::getTrimWhitespace() const {
    return m_trim_whitespace;
}
void OAIResponse::setTrimWhitespace(const OAITrimWhitespaceResponse &trim_whitespace) {
    m_trim_whitespace = trim_whitespace;
    m_trim_whitespace_isSet = true;
}

bool OAIResponse::is_trim_whitespace_Set() const{
    return m_trim_whitespace_isSet;
}

bool OAIResponse::is_trim_whitespace_Valid() const{
    return m_trim_whitespace_isValid;
}

OAIUpdateConditionalFormatRuleResponse OAIResponse::getUpdateConditionalFormatRule() const {
    return m_update_conditional_format_rule;
}
void OAIResponse::setUpdateConditionalFormatRule(const OAIUpdateConditionalFormatRuleResponse &update_conditional_format_rule) {
    m_update_conditional_format_rule = update_conditional_format_rule;
    m_update_conditional_format_rule_isSet = true;
}

bool OAIResponse::is_update_conditional_format_rule_Set() const{
    return m_update_conditional_format_rule_isSet;
}

bool OAIResponse::is_update_conditional_format_rule_Valid() const{
    return m_update_conditional_format_rule_isValid;
}

OAIUpdateDataSourceResponse OAIResponse::getUpdateDataSource() const {
    return m_update_data_source;
}
void OAIResponse::setUpdateDataSource(const OAIUpdateDataSourceResponse &update_data_source) {
    m_update_data_source = update_data_source;
    m_update_data_source_isSet = true;
}

bool OAIResponse::is_update_data_source_Set() const{
    return m_update_data_source_isSet;
}

bool OAIResponse::is_update_data_source_Valid() const{
    return m_update_data_source_isValid;
}

OAIUpdateDeveloperMetadataResponse OAIResponse::getUpdateDeveloperMetadata() const {
    return m_update_developer_metadata;
}
void OAIResponse::setUpdateDeveloperMetadata(const OAIUpdateDeveloperMetadataResponse &update_developer_metadata) {
    m_update_developer_metadata = update_developer_metadata;
    m_update_developer_metadata_isSet = true;
}

bool OAIResponse::is_update_developer_metadata_Set() const{
    return m_update_developer_metadata_isSet;
}

bool OAIResponse::is_update_developer_metadata_Valid() const{
    return m_update_developer_metadata_isValid;
}

OAIUpdateEmbeddedObjectPositionResponse OAIResponse::getUpdateEmbeddedObjectPosition() const {
    return m_update_embedded_object_position;
}
void OAIResponse::setUpdateEmbeddedObjectPosition(const OAIUpdateEmbeddedObjectPositionResponse &update_embedded_object_position) {
    m_update_embedded_object_position = update_embedded_object_position;
    m_update_embedded_object_position_isSet = true;
}

bool OAIResponse::is_update_embedded_object_position_Set() const{
    return m_update_embedded_object_position_isSet;
}

bool OAIResponse::is_update_embedded_object_position_Valid() const{
    return m_update_embedded_object_position_isValid;
}

bool OAIResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_banding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_dimension_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_filter_view.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_named_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_protected_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_sheet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_slicer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_developer_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_conditional_format_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_developer_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_dimension_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_duplicates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_filter_view.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_sheet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_find_replace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trim_whitespace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_conditional_format_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_developer_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_embedded_object_position.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
