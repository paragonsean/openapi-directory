/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSpreadsheetByDataFilterRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSpreadsheetByDataFilterRequest::OAIGetSpreadsheetByDataFilterRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSpreadsheetByDataFilterRequest::OAIGetSpreadsheetByDataFilterRequest() {
    this->initializeModel();
}

OAIGetSpreadsheetByDataFilterRequest::~OAIGetSpreadsheetByDataFilterRequest() {}

void OAIGetSpreadsheetByDataFilterRequest::initializeModel() {

    m_data_filters_isSet = false;
    m_data_filters_isValid = false;

    m_include_grid_data_isSet = false;
    m_include_grid_data_isValid = false;
}

void OAIGetSpreadsheetByDataFilterRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSpreadsheetByDataFilterRequest::fromJsonObject(QJsonObject json) {

    m_data_filters_isValid = ::OpenAPI::fromJsonValue(m_data_filters, json[QString("dataFilters")]);
    m_data_filters_isSet = !json[QString("dataFilters")].isNull() && m_data_filters_isValid;

    m_include_grid_data_isValid = ::OpenAPI::fromJsonValue(m_include_grid_data, json[QString("includeGridData")]);
    m_include_grid_data_isSet = !json[QString("includeGridData")].isNull() && m_include_grid_data_isValid;
}

QString OAIGetSpreadsheetByDataFilterRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSpreadsheetByDataFilterRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_data_filters.size() > 0) {
        obj.insert(QString("dataFilters"), ::OpenAPI::toJsonValue(m_data_filters));
    }
    if (m_include_grid_data_isSet) {
        obj.insert(QString("includeGridData"), ::OpenAPI::toJsonValue(m_include_grid_data));
    }
    return obj;
}

QList<OAIDataFilter> OAIGetSpreadsheetByDataFilterRequest::getDataFilters() const {
    return m_data_filters;
}
void OAIGetSpreadsheetByDataFilterRequest::setDataFilters(const QList<OAIDataFilter> &data_filters) {
    m_data_filters = data_filters;
    m_data_filters_isSet = true;
}

bool OAIGetSpreadsheetByDataFilterRequest::is_data_filters_Set() const{
    return m_data_filters_isSet;
}

bool OAIGetSpreadsheetByDataFilterRequest::is_data_filters_Valid() const{
    return m_data_filters_isValid;
}

bool OAIGetSpreadsheetByDataFilterRequest::isIncludeGridData() const {
    return m_include_grid_data;
}
void OAIGetSpreadsheetByDataFilterRequest::setIncludeGridData(const bool &include_grid_data) {
    m_include_grid_data = include_grid_data;
    m_include_grid_data_isSet = true;
}

bool OAIGetSpreadsheetByDataFilterRequest::is_include_grid_data_Set() const{
    return m_include_grid_data_isSet;
}

bool OAIGetSpreadsheetByDataFilterRequest::is_include_grid_data_Valid() const{
    return m_include_grid_data_isValid;
}

bool OAIGetSpreadsheetByDataFilterRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_grid_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSpreadsheetByDataFilterRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
