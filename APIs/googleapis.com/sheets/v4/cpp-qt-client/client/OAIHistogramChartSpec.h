/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHistogramChartSpec.h
 *
 * A histogram chart. A histogram chart groups data items into bins, displaying each bin as a column of stacked items. Histograms are used to display the distribution of a dataset. Each column of items represents a range into which those items fall. The number of bins can be chosen automatically or specified explicitly.
 */

#ifndef OAIHistogramChartSpec_H
#define OAIHistogramChartSpec_H

#include <QJsonObject>

#include "OAIHistogramSeries.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHistogramSeries;

class OAIHistogramChartSpec : public OAIObject {
public:
    OAIHistogramChartSpec();
    OAIHistogramChartSpec(QString json);
    ~OAIHistogramChartSpec() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getBucketSize() const;
    void setBucketSize(const double &bucket_size);
    bool is_bucket_size_Set() const;
    bool is_bucket_size_Valid() const;

    QString getLegendPosition() const;
    void setLegendPosition(const QString &legend_position);
    bool is_legend_position_Set() const;
    bool is_legend_position_Valid() const;

    double getOutlierPercentile() const;
    void setOutlierPercentile(const double &outlier_percentile);
    bool is_outlier_percentile_Set() const;
    bool is_outlier_percentile_Valid() const;

    QList<OAIHistogramSeries> getSeries() const;
    void setSeries(const QList<OAIHistogramSeries> &series);
    bool is_series_Set() const;
    bool is_series_Valid() const;

    bool isShowItemDividers() const;
    void setShowItemDividers(const bool &show_item_dividers);
    bool is_show_item_dividers_Set() const;
    bool is_show_item_dividers_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_bucket_size;
    bool m_bucket_size_isSet;
    bool m_bucket_size_isValid;

    QString m_legend_position;
    bool m_legend_position_isSet;
    bool m_legend_position_isValid;

    double m_outlier_percentile;
    bool m_outlier_percentile_isSet;
    bool m_outlier_percentile_isValid;

    QList<OAIHistogramSeries> m_series;
    bool m_series_isSet;
    bool m_series_isValid;

    bool m_show_item_dividers;
    bool m_show_item_dividers_isSet;
    bool m_show_item_dividers_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHistogramChartSpec)

#endif // OAIHistogramChartSpec_H
