/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrgChartSpec.h
 *
 * An org chart. Org charts require a unique set of labels in labels and may optionally include parent_labels and tooltips. parent_labels contain, for each node, the label identifying the parent node. tooltips contain, for each node, an optional tooltip. For example, to describe an OrgChart with Alice as the CEO, Bob as the President (reporting to Alice) and Cathy as VP of Sales (also reporting to Alice), have labels contain \&quot;Alice\&quot;, \&quot;Bob\&quot;, \&quot;Cathy\&quot;, parent_labels contain \&quot;\&quot;, \&quot;Alice\&quot;, \&quot;Alice\&quot; and tooltips contain \&quot;CEO\&quot;, \&quot;President\&quot;, \&quot;VP Sales\&quot;.
 */

#ifndef OAIOrgChartSpec_H
#define OAIOrgChartSpec_H

#include <QJsonObject>

#include "OAIChartData.h"
#include "OAIColor.h"
#include "OAIColorStyle.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIChartData;
class OAIColor;
class OAIColorStyle;

class OAIOrgChartSpec : public OAIObject {
public:
    OAIOrgChartSpec();
    OAIOrgChartSpec(QString json);
    ~OAIOrgChartSpec() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIChartData getLabels() const;
    void setLabels(const OAIChartData &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    OAIColor getNodeColor() const;
    void setNodeColor(const OAIColor &node_color);
    bool is_node_color_Set() const;
    bool is_node_color_Valid() const;

    OAIColorStyle getNodeColorStyle() const;
    void setNodeColorStyle(const OAIColorStyle &node_color_style);
    bool is_node_color_style_Set() const;
    bool is_node_color_style_Valid() const;

    QString getNodeSize() const;
    void setNodeSize(const QString &node_size);
    bool is_node_size_Set() const;
    bool is_node_size_Valid() const;

    OAIChartData getParentLabels() const;
    void setParentLabels(const OAIChartData &parent_labels);
    bool is_parent_labels_Set() const;
    bool is_parent_labels_Valid() const;

    OAIColor getSelectedNodeColor() const;
    void setSelectedNodeColor(const OAIColor &selected_node_color);
    bool is_selected_node_color_Set() const;
    bool is_selected_node_color_Valid() const;

    OAIColorStyle getSelectedNodeColorStyle() const;
    void setSelectedNodeColorStyle(const OAIColorStyle &selected_node_color_style);
    bool is_selected_node_color_style_Set() const;
    bool is_selected_node_color_style_Valid() const;

    OAIChartData getTooltips() const;
    void setTooltips(const OAIChartData &tooltips);
    bool is_tooltips_Set() const;
    bool is_tooltips_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIChartData m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    OAIColor m_node_color;
    bool m_node_color_isSet;
    bool m_node_color_isValid;

    OAIColorStyle m_node_color_style;
    bool m_node_color_style_isSet;
    bool m_node_color_style_isValid;

    QString m_node_size;
    bool m_node_size_isSet;
    bool m_node_size_isValid;

    OAIChartData m_parent_labels;
    bool m_parent_labels_isSet;
    bool m_parent_labels_isValid;

    OAIColor m_selected_node_color;
    bool m_selected_node_color_isSet;
    bool m_selected_node_color_isValid;

    OAIColorStyle m_selected_node_color_style;
    bool m_selected_node_color_style_isSet;
    bool m_selected_node_color_style_isValid;

    OAIChartData m_tooltips;
    bool m_tooltips_isSet;
    bool m_tooltips_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOrgChartSpec)

#endif // OAIOrgChartSpec_H
