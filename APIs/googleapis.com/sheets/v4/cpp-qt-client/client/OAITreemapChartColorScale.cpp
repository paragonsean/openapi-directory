/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITreemapChartColorScale.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITreemapChartColorScale::OAITreemapChartColorScale(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITreemapChartColorScale::OAITreemapChartColorScale() {
    this->initializeModel();
}

OAITreemapChartColorScale::~OAITreemapChartColorScale() {}

void OAITreemapChartColorScale::initializeModel() {

    m_max_value_color_isSet = false;
    m_max_value_color_isValid = false;

    m_max_value_color_style_isSet = false;
    m_max_value_color_style_isValid = false;

    m_mid_value_color_isSet = false;
    m_mid_value_color_isValid = false;

    m_mid_value_color_style_isSet = false;
    m_mid_value_color_style_isValid = false;

    m_min_value_color_isSet = false;
    m_min_value_color_isValid = false;

    m_min_value_color_style_isSet = false;
    m_min_value_color_style_isValid = false;

    m_no_data_color_isSet = false;
    m_no_data_color_isValid = false;

    m_no_data_color_style_isSet = false;
    m_no_data_color_style_isValid = false;
}

void OAITreemapChartColorScale::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITreemapChartColorScale::fromJsonObject(QJsonObject json) {

    m_max_value_color_isValid = ::OpenAPI::fromJsonValue(m_max_value_color, json[QString("maxValueColor")]);
    m_max_value_color_isSet = !json[QString("maxValueColor")].isNull() && m_max_value_color_isValid;

    m_max_value_color_style_isValid = ::OpenAPI::fromJsonValue(m_max_value_color_style, json[QString("maxValueColorStyle")]);
    m_max_value_color_style_isSet = !json[QString("maxValueColorStyle")].isNull() && m_max_value_color_style_isValid;

    m_mid_value_color_isValid = ::OpenAPI::fromJsonValue(m_mid_value_color, json[QString("midValueColor")]);
    m_mid_value_color_isSet = !json[QString("midValueColor")].isNull() && m_mid_value_color_isValid;

    m_mid_value_color_style_isValid = ::OpenAPI::fromJsonValue(m_mid_value_color_style, json[QString("midValueColorStyle")]);
    m_mid_value_color_style_isSet = !json[QString("midValueColorStyle")].isNull() && m_mid_value_color_style_isValid;

    m_min_value_color_isValid = ::OpenAPI::fromJsonValue(m_min_value_color, json[QString("minValueColor")]);
    m_min_value_color_isSet = !json[QString("minValueColor")].isNull() && m_min_value_color_isValid;

    m_min_value_color_style_isValid = ::OpenAPI::fromJsonValue(m_min_value_color_style, json[QString("minValueColorStyle")]);
    m_min_value_color_style_isSet = !json[QString("minValueColorStyle")].isNull() && m_min_value_color_style_isValid;

    m_no_data_color_isValid = ::OpenAPI::fromJsonValue(m_no_data_color, json[QString("noDataColor")]);
    m_no_data_color_isSet = !json[QString("noDataColor")].isNull() && m_no_data_color_isValid;

    m_no_data_color_style_isValid = ::OpenAPI::fromJsonValue(m_no_data_color_style, json[QString("noDataColorStyle")]);
    m_no_data_color_style_isSet = !json[QString("noDataColorStyle")].isNull() && m_no_data_color_style_isValid;
}

QString OAITreemapChartColorScale::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITreemapChartColorScale::asJsonObject() const {
    QJsonObject obj;
    if (m_max_value_color.isSet()) {
        obj.insert(QString("maxValueColor"), ::OpenAPI::toJsonValue(m_max_value_color));
    }
    if (m_max_value_color_style.isSet()) {
        obj.insert(QString("maxValueColorStyle"), ::OpenAPI::toJsonValue(m_max_value_color_style));
    }
    if (m_mid_value_color.isSet()) {
        obj.insert(QString("midValueColor"), ::OpenAPI::toJsonValue(m_mid_value_color));
    }
    if (m_mid_value_color_style.isSet()) {
        obj.insert(QString("midValueColorStyle"), ::OpenAPI::toJsonValue(m_mid_value_color_style));
    }
    if (m_min_value_color.isSet()) {
        obj.insert(QString("minValueColor"), ::OpenAPI::toJsonValue(m_min_value_color));
    }
    if (m_min_value_color_style.isSet()) {
        obj.insert(QString("minValueColorStyle"), ::OpenAPI::toJsonValue(m_min_value_color_style));
    }
    if (m_no_data_color.isSet()) {
        obj.insert(QString("noDataColor"), ::OpenAPI::toJsonValue(m_no_data_color));
    }
    if (m_no_data_color_style.isSet()) {
        obj.insert(QString("noDataColorStyle"), ::OpenAPI::toJsonValue(m_no_data_color_style));
    }
    return obj;
}

OAIColor OAITreemapChartColorScale::getMaxValueColor() const {
    return m_max_value_color;
}
void OAITreemapChartColorScale::setMaxValueColor(const OAIColor &max_value_color) {
    m_max_value_color = max_value_color;
    m_max_value_color_isSet = true;
}

bool OAITreemapChartColorScale::is_max_value_color_Set() const{
    return m_max_value_color_isSet;
}

bool OAITreemapChartColorScale::is_max_value_color_Valid() const{
    return m_max_value_color_isValid;
}

OAIColorStyle OAITreemapChartColorScale::getMaxValueColorStyle() const {
    return m_max_value_color_style;
}
void OAITreemapChartColorScale::setMaxValueColorStyle(const OAIColorStyle &max_value_color_style) {
    m_max_value_color_style = max_value_color_style;
    m_max_value_color_style_isSet = true;
}

bool OAITreemapChartColorScale::is_max_value_color_style_Set() const{
    return m_max_value_color_style_isSet;
}

bool OAITreemapChartColorScale::is_max_value_color_style_Valid() const{
    return m_max_value_color_style_isValid;
}

OAIColor OAITreemapChartColorScale::getMidValueColor() const {
    return m_mid_value_color;
}
void OAITreemapChartColorScale::setMidValueColor(const OAIColor &mid_value_color) {
    m_mid_value_color = mid_value_color;
    m_mid_value_color_isSet = true;
}

bool OAITreemapChartColorScale::is_mid_value_color_Set() const{
    return m_mid_value_color_isSet;
}

bool OAITreemapChartColorScale::is_mid_value_color_Valid() const{
    return m_mid_value_color_isValid;
}

OAIColorStyle OAITreemapChartColorScale::getMidValueColorStyle() const {
    return m_mid_value_color_style;
}
void OAITreemapChartColorScale::setMidValueColorStyle(const OAIColorStyle &mid_value_color_style) {
    m_mid_value_color_style = mid_value_color_style;
    m_mid_value_color_style_isSet = true;
}

bool OAITreemapChartColorScale::is_mid_value_color_style_Set() const{
    return m_mid_value_color_style_isSet;
}

bool OAITreemapChartColorScale::is_mid_value_color_style_Valid() const{
    return m_mid_value_color_style_isValid;
}

OAIColor OAITreemapChartColorScale::getMinValueColor() const {
    return m_min_value_color;
}
void OAITreemapChartColorScale::setMinValueColor(const OAIColor &min_value_color) {
    m_min_value_color = min_value_color;
    m_min_value_color_isSet = true;
}

bool OAITreemapChartColorScale::is_min_value_color_Set() const{
    return m_min_value_color_isSet;
}

bool OAITreemapChartColorScale::is_min_value_color_Valid() const{
    return m_min_value_color_isValid;
}

OAIColorStyle OAITreemapChartColorScale::getMinValueColorStyle() const {
    return m_min_value_color_style;
}
void OAITreemapChartColorScale::setMinValueColorStyle(const OAIColorStyle &min_value_color_style) {
    m_min_value_color_style = min_value_color_style;
    m_min_value_color_style_isSet = true;
}

bool OAITreemapChartColorScale::is_min_value_color_style_Set() const{
    return m_min_value_color_style_isSet;
}

bool OAITreemapChartColorScale::is_min_value_color_style_Valid() const{
    return m_min_value_color_style_isValid;
}

OAIColor OAITreemapChartColorScale::getNoDataColor() const {
    return m_no_data_color;
}
void OAITreemapChartColorScale::setNoDataColor(const OAIColor &no_data_color) {
    m_no_data_color = no_data_color;
    m_no_data_color_isSet = true;
}

bool OAITreemapChartColorScale::is_no_data_color_Set() const{
    return m_no_data_color_isSet;
}

bool OAITreemapChartColorScale::is_no_data_color_Valid() const{
    return m_no_data_color_isValid;
}

OAIColorStyle OAITreemapChartColorScale::getNoDataColorStyle() const {
    return m_no_data_color_style;
}
void OAITreemapChartColorScale::setNoDataColorStyle(const OAIColorStyle &no_data_color_style) {
    m_no_data_color_style = no_data_color_style;
    m_no_data_color_style_isSet = true;
}

bool OAITreemapChartColorScale::is_no_data_color_style_Set() const{
    return m_no_data_color_style_isSet;
}

bool OAITreemapChartColorScale::is_no_data_color_style_Valid() const{
    return m_no_data_color_style_isValid;
}

bool OAITreemapChartColorScale::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_value_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_value_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mid_value_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mid_value_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_value_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_value_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_data_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_data_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITreemapChartColorScale::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
