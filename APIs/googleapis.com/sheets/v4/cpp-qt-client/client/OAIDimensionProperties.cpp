/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDimensionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDimensionProperties::OAIDimensionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDimensionProperties::OAIDimensionProperties() {
    this->initializeModel();
}

OAIDimensionProperties::~OAIDimensionProperties() {}

void OAIDimensionProperties::initializeModel() {

    m_data_source_column_reference_isSet = false;
    m_data_source_column_reference_isValid = false;

    m_developer_metadata_isSet = false;
    m_developer_metadata_isValid = false;

    m_hidden_by_filter_isSet = false;
    m_hidden_by_filter_isValid = false;

    m_hidden_by_user_isSet = false;
    m_hidden_by_user_isValid = false;

    m_pixel_size_isSet = false;
    m_pixel_size_isValid = false;
}

void OAIDimensionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDimensionProperties::fromJsonObject(QJsonObject json) {

    m_data_source_column_reference_isValid = ::OpenAPI::fromJsonValue(m_data_source_column_reference, json[QString("dataSourceColumnReference")]);
    m_data_source_column_reference_isSet = !json[QString("dataSourceColumnReference")].isNull() && m_data_source_column_reference_isValid;

    m_developer_metadata_isValid = ::OpenAPI::fromJsonValue(m_developer_metadata, json[QString("developerMetadata")]);
    m_developer_metadata_isSet = !json[QString("developerMetadata")].isNull() && m_developer_metadata_isValid;

    m_hidden_by_filter_isValid = ::OpenAPI::fromJsonValue(m_hidden_by_filter, json[QString("hiddenByFilter")]);
    m_hidden_by_filter_isSet = !json[QString("hiddenByFilter")].isNull() && m_hidden_by_filter_isValid;

    m_hidden_by_user_isValid = ::OpenAPI::fromJsonValue(m_hidden_by_user, json[QString("hiddenByUser")]);
    m_hidden_by_user_isSet = !json[QString("hiddenByUser")].isNull() && m_hidden_by_user_isValid;

    m_pixel_size_isValid = ::OpenAPI::fromJsonValue(m_pixel_size, json[QString("pixelSize")]);
    m_pixel_size_isSet = !json[QString("pixelSize")].isNull() && m_pixel_size_isValid;
}

QString OAIDimensionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDimensionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_column_reference.isSet()) {
        obj.insert(QString("dataSourceColumnReference"), ::OpenAPI::toJsonValue(m_data_source_column_reference));
    }
    if (m_developer_metadata.size() > 0) {
        obj.insert(QString("developerMetadata"), ::OpenAPI::toJsonValue(m_developer_metadata));
    }
    if (m_hidden_by_filter_isSet) {
        obj.insert(QString("hiddenByFilter"), ::OpenAPI::toJsonValue(m_hidden_by_filter));
    }
    if (m_hidden_by_user_isSet) {
        obj.insert(QString("hiddenByUser"), ::OpenAPI::toJsonValue(m_hidden_by_user));
    }
    if (m_pixel_size_isSet) {
        obj.insert(QString("pixelSize"), ::OpenAPI::toJsonValue(m_pixel_size));
    }
    return obj;
}

OAIDataSourceColumnReference OAIDimensionProperties::getDataSourceColumnReference() const {
    return m_data_source_column_reference;
}
void OAIDimensionProperties::setDataSourceColumnReference(const OAIDataSourceColumnReference &data_source_column_reference) {
    m_data_source_column_reference = data_source_column_reference;
    m_data_source_column_reference_isSet = true;
}

bool OAIDimensionProperties::is_data_source_column_reference_Set() const{
    return m_data_source_column_reference_isSet;
}

bool OAIDimensionProperties::is_data_source_column_reference_Valid() const{
    return m_data_source_column_reference_isValid;
}

QList<OAIDeveloperMetadata> OAIDimensionProperties::getDeveloperMetadata() const {
    return m_developer_metadata;
}
void OAIDimensionProperties::setDeveloperMetadata(const QList<OAIDeveloperMetadata> &developer_metadata) {
    m_developer_metadata = developer_metadata;
    m_developer_metadata_isSet = true;
}

bool OAIDimensionProperties::is_developer_metadata_Set() const{
    return m_developer_metadata_isSet;
}

bool OAIDimensionProperties::is_developer_metadata_Valid() const{
    return m_developer_metadata_isValid;
}

bool OAIDimensionProperties::isHiddenByFilter() const {
    return m_hidden_by_filter;
}
void OAIDimensionProperties::setHiddenByFilter(const bool &hidden_by_filter) {
    m_hidden_by_filter = hidden_by_filter;
    m_hidden_by_filter_isSet = true;
}

bool OAIDimensionProperties::is_hidden_by_filter_Set() const{
    return m_hidden_by_filter_isSet;
}

bool OAIDimensionProperties::is_hidden_by_filter_Valid() const{
    return m_hidden_by_filter_isValid;
}

bool OAIDimensionProperties::isHiddenByUser() const {
    return m_hidden_by_user;
}
void OAIDimensionProperties::setHiddenByUser(const bool &hidden_by_user) {
    m_hidden_by_user = hidden_by_user;
    m_hidden_by_user_isSet = true;
}

bool OAIDimensionProperties::is_hidden_by_user_Set() const{
    return m_hidden_by_user_isSet;
}

bool OAIDimensionProperties::is_hidden_by_user_Valid() const{
    return m_hidden_by_user_isValid;
}

qint32 OAIDimensionProperties::getPixelSize() const {
    return m_pixel_size;
}
void OAIDimensionProperties::setPixelSize(const qint32 &pixel_size) {
    m_pixel_size = pixel_size;
    m_pixel_size_isSet = true;
}

bool OAIDimensionProperties::is_pixel_size_Set() const{
    return m_pixel_size_isSet;
}

bool OAIDimensionProperties::is_pixel_size_Valid() const{
    return m_pixel_size_isValid;
}

bool OAIDimensionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_column_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_by_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_by_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pixel_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDimensionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
