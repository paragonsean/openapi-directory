/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpreadsheetProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpreadsheetProperties::OAISpreadsheetProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpreadsheetProperties::OAISpreadsheetProperties() {
    this->initializeModel();
}

OAISpreadsheetProperties::~OAISpreadsheetProperties() {}

void OAISpreadsheetProperties::initializeModel() {

    m_auto_recalc_isSet = false;
    m_auto_recalc_isValid = false;

    m_default_format_isSet = false;
    m_default_format_isValid = false;

    m_iterative_calculation_settings_isSet = false;
    m_iterative_calculation_settings_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_spreadsheet_theme_isSet = false;
    m_spreadsheet_theme_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAISpreadsheetProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpreadsheetProperties::fromJsonObject(QJsonObject json) {

    m_auto_recalc_isValid = ::OpenAPI::fromJsonValue(m_auto_recalc, json[QString("autoRecalc")]);
    m_auto_recalc_isSet = !json[QString("autoRecalc")].isNull() && m_auto_recalc_isValid;

    m_default_format_isValid = ::OpenAPI::fromJsonValue(m_default_format, json[QString("defaultFormat")]);
    m_default_format_isSet = !json[QString("defaultFormat")].isNull() && m_default_format_isValid;

    m_iterative_calculation_settings_isValid = ::OpenAPI::fromJsonValue(m_iterative_calculation_settings, json[QString("iterativeCalculationSettings")]);
    m_iterative_calculation_settings_isSet = !json[QString("iterativeCalculationSettings")].isNull() && m_iterative_calculation_settings_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_spreadsheet_theme_isValid = ::OpenAPI::fromJsonValue(m_spreadsheet_theme, json[QString("spreadsheetTheme")]);
    m_spreadsheet_theme_isSet = !json[QString("spreadsheetTheme")].isNull() && m_spreadsheet_theme_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAISpreadsheetProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpreadsheetProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_recalc_isSet) {
        obj.insert(QString("autoRecalc"), ::OpenAPI::toJsonValue(m_auto_recalc));
    }
    if (m_default_format.isSet()) {
        obj.insert(QString("defaultFormat"), ::OpenAPI::toJsonValue(m_default_format));
    }
    if (m_iterative_calculation_settings.isSet()) {
        obj.insert(QString("iterativeCalculationSettings"), ::OpenAPI::toJsonValue(m_iterative_calculation_settings));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_spreadsheet_theme.isSet()) {
        obj.insert(QString("spreadsheetTheme"), ::OpenAPI::toJsonValue(m_spreadsheet_theme));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAISpreadsheetProperties::getAutoRecalc() const {
    return m_auto_recalc;
}
void OAISpreadsheetProperties::setAutoRecalc(const QString &auto_recalc) {
    m_auto_recalc = auto_recalc;
    m_auto_recalc_isSet = true;
}

bool OAISpreadsheetProperties::is_auto_recalc_Set() const{
    return m_auto_recalc_isSet;
}

bool OAISpreadsheetProperties::is_auto_recalc_Valid() const{
    return m_auto_recalc_isValid;
}

OAICellFormat OAISpreadsheetProperties::getDefaultFormat() const {
    return m_default_format;
}
void OAISpreadsheetProperties::setDefaultFormat(const OAICellFormat &default_format) {
    m_default_format = default_format;
    m_default_format_isSet = true;
}

bool OAISpreadsheetProperties::is_default_format_Set() const{
    return m_default_format_isSet;
}

bool OAISpreadsheetProperties::is_default_format_Valid() const{
    return m_default_format_isValid;
}

OAIIterativeCalculationSettings OAISpreadsheetProperties::getIterativeCalculationSettings() const {
    return m_iterative_calculation_settings;
}
void OAISpreadsheetProperties::setIterativeCalculationSettings(const OAIIterativeCalculationSettings &iterative_calculation_settings) {
    m_iterative_calculation_settings = iterative_calculation_settings;
    m_iterative_calculation_settings_isSet = true;
}

bool OAISpreadsheetProperties::is_iterative_calculation_settings_Set() const{
    return m_iterative_calculation_settings_isSet;
}

bool OAISpreadsheetProperties::is_iterative_calculation_settings_Valid() const{
    return m_iterative_calculation_settings_isValid;
}

QString OAISpreadsheetProperties::getLocale() const {
    return m_locale;
}
void OAISpreadsheetProperties::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAISpreadsheetProperties::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAISpreadsheetProperties::is_locale_Valid() const{
    return m_locale_isValid;
}

OAISpreadsheetTheme OAISpreadsheetProperties::getSpreadsheetTheme() const {
    return m_spreadsheet_theme;
}
void OAISpreadsheetProperties::setSpreadsheetTheme(const OAISpreadsheetTheme &spreadsheet_theme) {
    m_spreadsheet_theme = spreadsheet_theme;
    m_spreadsheet_theme_isSet = true;
}

bool OAISpreadsheetProperties::is_spreadsheet_theme_Set() const{
    return m_spreadsheet_theme_isSet;
}

bool OAISpreadsheetProperties::is_spreadsheet_theme_Valid() const{
    return m_spreadsheet_theme_isValid;
}

QString OAISpreadsheetProperties::getTimeZone() const {
    return m_time_zone;
}
void OAISpreadsheetProperties::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAISpreadsheetProperties::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAISpreadsheetProperties::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QString OAISpreadsheetProperties::getTitle() const {
    return m_title;
}
void OAISpreadsheetProperties::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISpreadsheetProperties::is_title_Set() const{
    return m_title_isSet;
}

bool OAISpreadsheetProperties::is_title_Valid() const{
    return m_title_isValid;
}

bool OAISpreadsheetProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_recalc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iterative_calculation_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spreadsheet_theme.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpreadsheetProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
