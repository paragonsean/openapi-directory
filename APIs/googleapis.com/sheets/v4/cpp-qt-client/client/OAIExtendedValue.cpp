/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtendedValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtendedValue::OAIExtendedValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtendedValue::OAIExtendedValue() {
    this->initializeModel();
}

OAIExtendedValue::~OAIExtendedValue() {}

void OAIExtendedValue::initializeModel() {

    m_bool_value_isSet = false;
    m_bool_value_isValid = false;

    m_error_value_isSet = false;
    m_error_value_isValid = false;

    m_formula_value_isSet = false;
    m_formula_value_isValid = false;

    m_number_value_isSet = false;
    m_number_value_isValid = false;

    m_string_value_isSet = false;
    m_string_value_isValid = false;
}

void OAIExtendedValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtendedValue::fromJsonObject(QJsonObject json) {

    m_bool_value_isValid = ::OpenAPI::fromJsonValue(m_bool_value, json[QString("boolValue")]);
    m_bool_value_isSet = !json[QString("boolValue")].isNull() && m_bool_value_isValid;

    m_error_value_isValid = ::OpenAPI::fromJsonValue(m_error_value, json[QString("errorValue")]);
    m_error_value_isSet = !json[QString("errorValue")].isNull() && m_error_value_isValid;

    m_formula_value_isValid = ::OpenAPI::fromJsonValue(m_formula_value, json[QString("formulaValue")]);
    m_formula_value_isSet = !json[QString("formulaValue")].isNull() && m_formula_value_isValid;

    m_number_value_isValid = ::OpenAPI::fromJsonValue(m_number_value, json[QString("numberValue")]);
    m_number_value_isSet = !json[QString("numberValue")].isNull() && m_number_value_isValid;

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("stringValue")]);
    m_string_value_isSet = !json[QString("stringValue")].isNull() && m_string_value_isValid;
}

QString OAIExtendedValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtendedValue::asJsonObject() const {
    QJsonObject obj;
    if (m_bool_value_isSet) {
        obj.insert(QString("boolValue"), ::OpenAPI::toJsonValue(m_bool_value));
    }
    if (m_error_value.isSet()) {
        obj.insert(QString("errorValue"), ::OpenAPI::toJsonValue(m_error_value));
    }
    if (m_formula_value_isSet) {
        obj.insert(QString("formulaValue"), ::OpenAPI::toJsonValue(m_formula_value));
    }
    if (m_number_value_isSet) {
        obj.insert(QString("numberValue"), ::OpenAPI::toJsonValue(m_number_value));
    }
    if (m_string_value_isSet) {
        obj.insert(QString("stringValue"), ::OpenAPI::toJsonValue(m_string_value));
    }
    return obj;
}

bool OAIExtendedValue::isBoolValue() const {
    return m_bool_value;
}
void OAIExtendedValue::setBoolValue(const bool &bool_value) {
    m_bool_value = bool_value;
    m_bool_value_isSet = true;
}

bool OAIExtendedValue::is_bool_value_Set() const{
    return m_bool_value_isSet;
}

bool OAIExtendedValue::is_bool_value_Valid() const{
    return m_bool_value_isValid;
}

OAIErrorValue OAIExtendedValue::getErrorValue() const {
    return m_error_value;
}
void OAIExtendedValue::setErrorValue(const OAIErrorValue &error_value) {
    m_error_value = error_value;
    m_error_value_isSet = true;
}

bool OAIExtendedValue::is_error_value_Set() const{
    return m_error_value_isSet;
}

bool OAIExtendedValue::is_error_value_Valid() const{
    return m_error_value_isValid;
}

QString OAIExtendedValue::getFormulaValue() const {
    return m_formula_value;
}
void OAIExtendedValue::setFormulaValue(const QString &formula_value) {
    m_formula_value = formula_value;
    m_formula_value_isSet = true;
}

bool OAIExtendedValue::is_formula_value_Set() const{
    return m_formula_value_isSet;
}

bool OAIExtendedValue::is_formula_value_Valid() const{
    return m_formula_value_isValid;
}

double OAIExtendedValue::getNumberValue() const {
    return m_number_value;
}
void OAIExtendedValue::setNumberValue(const double &number_value) {
    m_number_value = number_value;
    m_number_value_isSet = true;
}

bool OAIExtendedValue::is_number_value_Set() const{
    return m_number_value_isSet;
}

bool OAIExtendedValue::is_number_value_Valid() const{
    return m_number_value_isValid;
}

QString OAIExtendedValue::getStringValue() const {
    return m_string_value;
}
void OAIExtendedValue::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAIExtendedValue::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAIExtendedValue::is_string_value_Valid() const{
    return m_string_value_isValid;
}

bool OAIExtendedValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bool_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_formula_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtendedValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
