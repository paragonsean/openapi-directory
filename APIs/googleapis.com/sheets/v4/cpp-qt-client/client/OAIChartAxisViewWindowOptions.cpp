/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChartAxisViewWindowOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChartAxisViewWindowOptions::OAIChartAxisViewWindowOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChartAxisViewWindowOptions::OAIChartAxisViewWindowOptions() {
    this->initializeModel();
}

OAIChartAxisViewWindowOptions::~OAIChartAxisViewWindowOptions() {}

void OAIChartAxisViewWindowOptions::initializeModel() {

    m_view_window_max_isSet = false;
    m_view_window_max_isValid = false;

    m_view_window_min_isSet = false;
    m_view_window_min_isValid = false;

    m_view_window_mode_isSet = false;
    m_view_window_mode_isValid = false;
}

void OAIChartAxisViewWindowOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChartAxisViewWindowOptions::fromJsonObject(QJsonObject json) {

    m_view_window_max_isValid = ::OpenAPI::fromJsonValue(m_view_window_max, json[QString("viewWindowMax")]);
    m_view_window_max_isSet = !json[QString("viewWindowMax")].isNull() && m_view_window_max_isValid;

    m_view_window_min_isValid = ::OpenAPI::fromJsonValue(m_view_window_min, json[QString("viewWindowMin")]);
    m_view_window_min_isSet = !json[QString("viewWindowMin")].isNull() && m_view_window_min_isValid;

    m_view_window_mode_isValid = ::OpenAPI::fromJsonValue(m_view_window_mode, json[QString("viewWindowMode")]);
    m_view_window_mode_isSet = !json[QString("viewWindowMode")].isNull() && m_view_window_mode_isValid;
}

QString OAIChartAxisViewWindowOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChartAxisViewWindowOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_view_window_max_isSet) {
        obj.insert(QString("viewWindowMax"), ::OpenAPI::toJsonValue(m_view_window_max));
    }
    if (m_view_window_min_isSet) {
        obj.insert(QString("viewWindowMin"), ::OpenAPI::toJsonValue(m_view_window_min));
    }
    if (m_view_window_mode_isSet) {
        obj.insert(QString("viewWindowMode"), ::OpenAPI::toJsonValue(m_view_window_mode));
    }
    return obj;
}

double OAIChartAxisViewWindowOptions::getViewWindowMax() const {
    return m_view_window_max;
}
void OAIChartAxisViewWindowOptions::setViewWindowMax(const double &view_window_max) {
    m_view_window_max = view_window_max;
    m_view_window_max_isSet = true;
}

bool OAIChartAxisViewWindowOptions::is_view_window_max_Set() const{
    return m_view_window_max_isSet;
}

bool OAIChartAxisViewWindowOptions::is_view_window_max_Valid() const{
    return m_view_window_max_isValid;
}

double OAIChartAxisViewWindowOptions::getViewWindowMin() const {
    return m_view_window_min;
}
void OAIChartAxisViewWindowOptions::setViewWindowMin(const double &view_window_min) {
    m_view_window_min = view_window_min;
    m_view_window_min_isSet = true;
}

bool OAIChartAxisViewWindowOptions::is_view_window_min_Set() const{
    return m_view_window_min_isSet;
}

bool OAIChartAxisViewWindowOptions::is_view_window_min_Valid() const{
    return m_view_window_min_isValid;
}

QString OAIChartAxisViewWindowOptions::getViewWindowMode() const {
    return m_view_window_mode;
}
void OAIChartAxisViewWindowOptions::setViewWindowMode(const QString &view_window_mode) {
    m_view_window_mode = view_window_mode;
    m_view_window_mode_isSet = true;
}

bool OAIChartAxisViewWindowOptions::is_view_window_mode_Set() const{
    return m_view_window_mode_isSet;
}

bool OAIChartAxisViewWindowOptions::is_view_window_mode_Valid() const{
    return m_view_window_mode_isValid;
}

bool OAIChartAxisViewWindowOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_view_window_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_window_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_window_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChartAxisViewWindowOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
