/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScorecardChartSpec.h
 *
 * A scorecard chart. Scorecard charts are used to highlight key performance indicators, known as KPIs, on the spreadsheet. A scorecard chart can represent things like total sales, average cost, or a top selling item. You can specify a single data value, or aggregate over a range of data. Percentage or absolute difference from a baseline value can be highlighted, like changes over time.
 */

#ifndef OAIScorecardChartSpec_H
#define OAIScorecardChartSpec_H

#include <QJsonObject>

#include "OAIBaselineValueFormat.h"
#include "OAIChartCustomNumberFormatOptions.h"
#include "OAIChartData.h"
#include "OAIKeyValueFormat.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIChartData;
class OAIBaselineValueFormat;
class OAIChartCustomNumberFormatOptions;
class OAIKeyValueFormat;

class OAIScorecardChartSpec : public OAIObject {
public:
    OAIScorecardChartSpec();
    OAIScorecardChartSpec(QString json);
    ~OAIScorecardChartSpec() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAggregateType() const;
    void setAggregateType(const QString &aggregate_type);
    bool is_aggregate_type_Set() const;
    bool is_aggregate_type_Valid() const;

    OAIChartData getBaselineValueData() const;
    void setBaselineValueData(const OAIChartData &baseline_value_data);
    bool is_baseline_value_data_Set() const;
    bool is_baseline_value_data_Valid() const;

    OAIBaselineValueFormat getBaselineValueFormat() const;
    void setBaselineValueFormat(const OAIBaselineValueFormat &baseline_value_format);
    bool is_baseline_value_format_Set() const;
    bool is_baseline_value_format_Valid() const;

    OAIChartCustomNumberFormatOptions getCustomFormatOptions() const;
    void setCustomFormatOptions(const OAIChartCustomNumberFormatOptions &custom_format_options);
    bool is_custom_format_options_Set() const;
    bool is_custom_format_options_Valid() const;

    OAIChartData getKeyValueData() const;
    void setKeyValueData(const OAIChartData &key_value_data);
    bool is_key_value_data_Set() const;
    bool is_key_value_data_Valid() const;

    OAIKeyValueFormat getKeyValueFormat() const;
    void setKeyValueFormat(const OAIKeyValueFormat &key_value_format);
    bool is_key_value_format_Set() const;
    bool is_key_value_format_Valid() const;

    QString getNumberFormatSource() const;
    void setNumberFormatSource(const QString &number_format_source);
    bool is_number_format_source_Set() const;
    bool is_number_format_source_Valid() const;

    double getScaleFactor() const;
    void setScaleFactor(const double &scale_factor);
    bool is_scale_factor_Set() const;
    bool is_scale_factor_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_aggregate_type;
    bool m_aggregate_type_isSet;
    bool m_aggregate_type_isValid;

    OAIChartData m_baseline_value_data;
    bool m_baseline_value_data_isSet;
    bool m_baseline_value_data_isValid;

    OAIBaselineValueFormat m_baseline_value_format;
    bool m_baseline_value_format_isSet;
    bool m_baseline_value_format_isValid;

    OAIChartCustomNumberFormatOptions m_custom_format_options;
    bool m_custom_format_options_isSet;
    bool m_custom_format_options_isValid;

    OAIChartData m_key_value_data;
    bool m_key_value_data_isSet;
    bool m_key_value_data_isValid;

    OAIKeyValueFormat m_key_value_format;
    bool m_key_value_format_isSet;
    bool m_key_value_format_isValid;

    QString m_number_format_source;
    bool m_number_format_source_isSet;
    bool m_number_format_source_isValid;

    double m_scale_factor;
    bool m_scale_factor_isSet;
    bool m_scale_factor_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScorecardChartSpec)

#endif // OAIScorecardChartSpec_H
