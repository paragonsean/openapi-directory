/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBandingProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBandingProperties::OAIBandingProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBandingProperties::OAIBandingProperties() {
    this->initializeModel();
}

OAIBandingProperties::~OAIBandingProperties() {}

void OAIBandingProperties::initializeModel() {

    m_first_band_color_isSet = false;
    m_first_band_color_isValid = false;

    m_first_band_color_style_isSet = false;
    m_first_band_color_style_isValid = false;

    m_footer_color_isSet = false;
    m_footer_color_isValid = false;

    m_footer_color_style_isSet = false;
    m_footer_color_style_isValid = false;

    m_header_color_isSet = false;
    m_header_color_isValid = false;

    m_header_color_style_isSet = false;
    m_header_color_style_isValid = false;

    m_second_band_color_isSet = false;
    m_second_band_color_isValid = false;

    m_second_band_color_style_isSet = false;
    m_second_band_color_style_isValid = false;
}

void OAIBandingProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBandingProperties::fromJsonObject(QJsonObject json) {

    m_first_band_color_isValid = ::OpenAPI::fromJsonValue(m_first_band_color, json[QString("firstBandColor")]);
    m_first_band_color_isSet = !json[QString("firstBandColor")].isNull() && m_first_band_color_isValid;

    m_first_band_color_style_isValid = ::OpenAPI::fromJsonValue(m_first_band_color_style, json[QString("firstBandColorStyle")]);
    m_first_band_color_style_isSet = !json[QString("firstBandColorStyle")].isNull() && m_first_band_color_style_isValid;

    m_footer_color_isValid = ::OpenAPI::fromJsonValue(m_footer_color, json[QString("footerColor")]);
    m_footer_color_isSet = !json[QString("footerColor")].isNull() && m_footer_color_isValid;

    m_footer_color_style_isValid = ::OpenAPI::fromJsonValue(m_footer_color_style, json[QString("footerColorStyle")]);
    m_footer_color_style_isSet = !json[QString("footerColorStyle")].isNull() && m_footer_color_style_isValid;

    m_header_color_isValid = ::OpenAPI::fromJsonValue(m_header_color, json[QString("headerColor")]);
    m_header_color_isSet = !json[QString("headerColor")].isNull() && m_header_color_isValid;

    m_header_color_style_isValid = ::OpenAPI::fromJsonValue(m_header_color_style, json[QString("headerColorStyle")]);
    m_header_color_style_isSet = !json[QString("headerColorStyle")].isNull() && m_header_color_style_isValid;

    m_second_band_color_isValid = ::OpenAPI::fromJsonValue(m_second_band_color, json[QString("secondBandColor")]);
    m_second_band_color_isSet = !json[QString("secondBandColor")].isNull() && m_second_band_color_isValid;

    m_second_band_color_style_isValid = ::OpenAPI::fromJsonValue(m_second_band_color_style, json[QString("secondBandColorStyle")]);
    m_second_band_color_style_isSet = !json[QString("secondBandColorStyle")].isNull() && m_second_band_color_style_isValid;
}

QString OAIBandingProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBandingProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_first_band_color.isSet()) {
        obj.insert(QString("firstBandColor"), ::OpenAPI::toJsonValue(m_first_band_color));
    }
    if (m_first_band_color_style.isSet()) {
        obj.insert(QString("firstBandColorStyle"), ::OpenAPI::toJsonValue(m_first_band_color_style));
    }
    if (m_footer_color.isSet()) {
        obj.insert(QString("footerColor"), ::OpenAPI::toJsonValue(m_footer_color));
    }
    if (m_footer_color_style.isSet()) {
        obj.insert(QString("footerColorStyle"), ::OpenAPI::toJsonValue(m_footer_color_style));
    }
    if (m_header_color.isSet()) {
        obj.insert(QString("headerColor"), ::OpenAPI::toJsonValue(m_header_color));
    }
    if (m_header_color_style.isSet()) {
        obj.insert(QString("headerColorStyle"), ::OpenAPI::toJsonValue(m_header_color_style));
    }
    if (m_second_band_color.isSet()) {
        obj.insert(QString("secondBandColor"), ::OpenAPI::toJsonValue(m_second_band_color));
    }
    if (m_second_band_color_style.isSet()) {
        obj.insert(QString("secondBandColorStyle"), ::OpenAPI::toJsonValue(m_second_band_color_style));
    }
    return obj;
}

OAIColor OAIBandingProperties::getFirstBandColor() const {
    return m_first_band_color;
}
void OAIBandingProperties::setFirstBandColor(const OAIColor &first_band_color) {
    m_first_band_color = first_band_color;
    m_first_band_color_isSet = true;
}

bool OAIBandingProperties::is_first_band_color_Set() const{
    return m_first_band_color_isSet;
}

bool OAIBandingProperties::is_first_band_color_Valid() const{
    return m_first_band_color_isValid;
}

OAIColorStyle OAIBandingProperties::getFirstBandColorStyle() const {
    return m_first_band_color_style;
}
void OAIBandingProperties::setFirstBandColorStyle(const OAIColorStyle &first_band_color_style) {
    m_first_band_color_style = first_band_color_style;
    m_first_band_color_style_isSet = true;
}

bool OAIBandingProperties::is_first_band_color_style_Set() const{
    return m_first_band_color_style_isSet;
}

bool OAIBandingProperties::is_first_band_color_style_Valid() const{
    return m_first_band_color_style_isValid;
}

OAIColor OAIBandingProperties::getFooterColor() const {
    return m_footer_color;
}
void OAIBandingProperties::setFooterColor(const OAIColor &footer_color) {
    m_footer_color = footer_color;
    m_footer_color_isSet = true;
}

bool OAIBandingProperties::is_footer_color_Set() const{
    return m_footer_color_isSet;
}

bool OAIBandingProperties::is_footer_color_Valid() const{
    return m_footer_color_isValid;
}

OAIColorStyle OAIBandingProperties::getFooterColorStyle() const {
    return m_footer_color_style;
}
void OAIBandingProperties::setFooterColorStyle(const OAIColorStyle &footer_color_style) {
    m_footer_color_style = footer_color_style;
    m_footer_color_style_isSet = true;
}

bool OAIBandingProperties::is_footer_color_style_Set() const{
    return m_footer_color_style_isSet;
}

bool OAIBandingProperties::is_footer_color_style_Valid() const{
    return m_footer_color_style_isValid;
}

OAIColor OAIBandingProperties::getHeaderColor() const {
    return m_header_color;
}
void OAIBandingProperties::setHeaderColor(const OAIColor &header_color) {
    m_header_color = header_color;
    m_header_color_isSet = true;
}

bool OAIBandingProperties::is_header_color_Set() const{
    return m_header_color_isSet;
}

bool OAIBandingProperties::is_header_color_Valid() const{
    return m_header_color_isValid;
}

OAIColorStyle OAIBandingProperties::getHeaderColorStyle() const {
    return m_header_color_style;
}
void OAIBandingProperties::setHeaderColorStyle(const OAIColorStyle &header_color_style) {
    m_header_color_style = header_color_style;
    m_header_color_style_isSet = true;
}

bool OAIBandingProperties::is_header_color_style_Set() const{
    return m_header_color_style_isSet;
}

bool OAIBandingProperties::is_header_color_style_Valid() const{
    return m_header_color_style_isValid;
}

OAIColor OAIBandingProperties::getSecondBandColor() const {
    return m_second_band_color;
}
void OAIBandingProperties::setSecondBandColor(const OAIColor &second_band_color) {
    m_second_band_color = second_band_color;
    m_second_band_color_isSet = true;
}

bool OAIBandingProperties::is_second_band_color_Set() const{
    return m_second_band_color_isSet;
}

bool OAIBandingProperties::is_second_band_color_Valid() const{
    return m_second_band_color_isValid;
}

OAIColorStyle OAIBandingProperties::getSecondBandColorStyle() const {
    return m_second_band_color_style;
}
void OAIBandingProperties::setSecondBandColorStyle(const OAIColorStyle &second_band_color_style) {
    m_second_band_color_style = second_band_color_style;
    m_second_band_color_style_isSet = true;
}

bool OAIBandingProperties::is_second_band_color_style_Set() const{
    return m_second_band_color_style_isSet;
}

bool OAIBandingProperties::is_second_band_color_style_Valid() const{
    return m_second_band_color_style_isValid;
}

bool OAIBandingProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_band_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_band_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_footer_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_footer_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_band_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_band_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBandingProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
