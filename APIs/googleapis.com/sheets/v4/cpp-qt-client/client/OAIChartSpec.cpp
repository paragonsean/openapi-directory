/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChartSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChartSpec::OAIChartSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChartSpec::OAIChartSpec() {
    this->initializeModel();
}

OAIChartSpec::~OAIChartSpec() {}

void OAIChartSpec::initializeModel() {

    m_alt_text_isSet = false;
    m_alt_text_isValid = false;

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_background_color_style_isSet = false;
    m_background_color_style_isValid = false;

    m_basic_chart_isSet = false;
    m_basic_chart_isValid = false;

    m_bubble_chart_isSet = false;
    m_bubble_chart_isValid = false;

    m_candlestick_chart_isSet = false;
    m_candlestick_chart_isValid = false;

    m_data_source_chart_properties_isSet = false;
    m_data_source_chart_properties_isValid = false;

    m_filter_specs_isSet = false;
    m_filter_specs_isValid = false;

    m_font_name_isSet = false;
    m_font_name_isValid = false;

    m_hidden_dimension_strategy_isSet = false;
    m_hidden_dimension_strategy_isValid = false;

    m_histogram_chart_isSet = false;
    m_histogram_chart_isValid = false;

    m_maximized_isSet = false;
    m_maximized_isValid = false;

    m_org_chart_isSet = false;
    m_org_chart_isValid = false;

    m_pie_chart_isSet = false;
    m_pie_chart_isValid = false;

    m_scorecard_chart_isSet = false;
    m_scorecard_chart_isValid = false;

    m_sort_specs_isSet = false;
    m_sort_specs_isValid = false;

    m_subtitle_isSet = false;
    m_subtitle_isValid = false;

    m_subtitle_text_format_isSet = false;
    m_subtitle_text_format_isValid = false;

    m_subtitle_text_position_isSet = false;
    m_subtitle_text_position_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_title_text_format_isSet = false;
    m_title_text_format_isValid = false;

    m_title_text_position_isSet = false;
    m_title_text_position_isValid = false;

    m_treemap_chart_isSet = false;
    m_treemap_chart_isValid = false;

    m_waterfall_chart_isSet = false;
    m_waterfall_chart_isValid = false;
}

void OAIChartSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChartSpec::fromJsonObject(QJsonObject json) {

    m_alt_text_isValid = ::OpenAPI::fromJsonValue(m_alt_text, json[QString("altText")]);
    m_alt_text_isSet = !json[QString("altText")].isNull() && m_alt_text_isValid;

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("backgroundColor")]);
    m_background_color_isSet = !json[QString("backgroundColor")].isNull() && m_background_color_isValid;

    m_background_color_style_isValid = ::OpenAPI::fromJsonValue(m_background_color_style, json[QString("backgroundColorStyle")]);
    m_background_color_style_isSet = !json[QString("backgroundColorStyle")].isNull() && m_background_color_style_isValid;

    m_basic_chart_isValid = ::OpenAPI::fromJsonValue(m_basic_chart, json[QString("basicChart")]);
    m_basic_chart_isSet = !json[QString("basicChart")].isNull() && m_basic_chart_isValid;

    m_bubble_chart_isValid = ::OpenAPI::fromJsonValue(m_bubble_chart, json[QString("bubbleChart")]);
    m_bubble_chart_isSet = !json[QString("bubbleChart")].isNull() && m_bubble_chart_isValid;

    m_candlestick_chart_isValid = ::OpenAPI::fromJsonValue(m_candlestick_chart, json[QString("candlestickChart")]);
    m_candlestick_chart_isSet = !json[QString("candlestickChart")].isNull() && m_candlestick_chart_isValid;

    m_data_source_chart_properties_isValid = ::OpenAPI::fromJsonValue(m_data_source_chart_properties, json[QString("dataSourceChartProperties")]);
    m_data_source_chart_properties_isSet = !json[QString("dataSourceChartProperties")].isNull() && m_data_source_chart_properties_isValid;

    m_filter_specs_isValid = ::OpenAPI::fromJsonValue(m_filter_specs, json[QString("filterSpecs")]);
    m_filter_specs_isSet = !json[QString("filterSpecs")].isNull() && m_filter_specs_isValid;

    m_font_name_isValid = ::OpenAPI::fromJsonValue(m_font_name, json[QString("fontName")]);
    m_font_name_isSet = !json[QString("fontName")].isNull() && m_font_name_isValid;

    m_hidden_dimension_strategy_isValid = ::OpenAPI::fromJsonValue(m_hidden_dimension_strategy, json[QString("hiddenDimensionStrategy")]);
    m_hidden_dimension_strategy_isSet = !json[QString("hiddenDimensionStrategy")].isNull() && m_hidden_dimension_strategy_isValid;

    m_histogram_chart_isValid = ::OpenAPI::fromJsonValue(m_histogram_chart, json[QString("histogramChart")]);
    m_histogram_chart_isSet = !json[QString("histogramChart")].isNull() && m_histogram_chart_isValid;

    m_maximized_isValid = ::OpenAPI::fromJsonValue(m_maximized, json[QString("maximized")]);
    m_maximized_isSet = !json[QString("maximized")].isNull() && m_maximized_isValid;

    m_org_chart_isValid = ::OpenAPI::fromJsonValue(m_org_chart, json[QString("orgChart")]);
    m_org_chart_isSet = !json[QString("orgChart")].isNull() && m_org_chart_isValid;

    m_pie_chart_isValid = ::OpenAPI::fromJsonValue(m_pie_chart, json[QString("pieChart")]);
    m_pie_chart_isSet = !json[QString("pieChart")].isNull() && m_pie_chart_isValid;

    m_scorecard_chart_isValid = ::OpenAPI::fromJsonValue(m_scorecard_chart, json[QString("scorecardChart")]);
    m_scorecard_chart_isSet = !json[QString("scorecardChart")].isNull() && m_scorecard_chart_isValid;

    m_sort_specs_isValid = ::OpenAPI::fromJsonValue(m_sort_specs, json[QString("sortSpecs")]);
    m_sort_specs_isSet = !json[QString("sortSpecs")].isNull() && m_sort_specs_isValid;

    m_subtitle_isValid = ::OpenAPI::fromJsonValue(m_subtitle, json[QString("subtitle")]);
    m_subtitle_isSet = !json[QString("subtitle")].isNull() && m_subtitle_isValid;

    m_subtitle_text_format_isValid = ::OpenAPI::fromJsonValue(m_subtitle_text_format, json[QString("subtitleTextFormat")]);
    m_subtitle_text_format_isSet = !json[QString("subtitleTextFormat")].isNull() && m_subtitle_text_format_isValid;

    m_subtitle_text_position_isValid = ::OpenAPI::fromJsonValue(m_subtitle_text_position, json[QString("subtitleTextPosition")]);
    m_subtitle_text_position_isSet = !json[QString("subtitleTextPosition")].isNull() && m_subtitle_text_position_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_title_text_format_isValid = ::OpenAPI::fromJsonValue(m_title_text_format, json[QString("titleTextFormat")]);
    m_title_text_format_isSet = !json[QString("titleTextFormat")].isNull() && m_title_text_format_isValid;

    m_title_text_position_isValid = ::OpenAPI::fromJsonValue(m_title_text_position, json[QString("titleTextPosition")]);
    m_title_text_position_isSet = !json[QString("titleTextPosition")].isNull() && m_title_text_position_isValid;

    m_treemap_chart_isValid = ::OpenAPI::fromJsonValue(m_treemap_chart, json[QString("treemapChart")]);
    m_treemap_chart_isSet = !json[QString("treemapChart")].isNull() && m_treemap_chart_isValid;

    m_waterfall_chart_isValid = ::OpenAPI::fromJsonValue(m_waterfall_chart, json[QString("waterfallChart")]);
    m_waterfall_chart_isSet = !json[QString("waterfallChart")].isNull() && m_waterfall_chart_isValid;
}

QString OAIChartSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChartSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_alt_text_isSet) {
        obj.insert(QString("altText"), ::OpenAPI::toJsonValue(m_alt_text));
    }
    if (m_background_color.isSet()) {
        obj.insert(QString("backgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_background_color_style.isSet()) {
        obj.insert(QString("backgroundColorStyle"), ::OpenAPI::toJsonValue(m_background_color_style));
    }
    if (m_basic_chart.isSet()) {
        obj.insert(QString("basicChart"), ::OpenAPI::toJsonValue(m_basic_chart));
    }
    if (m_bubble_chart.isSet()) {
        obj.insert(QString("bubbleChart"), ::OpenAPI::toJsonValue(m_bubble_chart));
    }
    if (m_candlestick_chart.isSet()) {
        obj.insert(QString("candlestickChart"), ::OpenAPI::toJsonValue(m_candlestick_chart));
    }
    if (m_data_source_chart_properties.isSet()) {
        obj.insert(QString("dataSourceChartProperties"), ::OpenAPI::toJsonValue(m_data_source_chart_properties));
    }
    if (m_filter_specs.size() > 0) {
        obj.insert(QString("filterSpecs"), ::OpenAPI::toJsonValue(m_filter_specs));
    }
    if (m_font_name_isSet) {
        obj.insert(QString("fontName"), ::OpenAPI::toJsonValue(m_font_name));
    }
    if (m_hidden_dimension_strategy_isSet) {
        obj.insert(QString("hiddenDimensionStrategy"), ::OpenAPI::toJsonValue(m_hidden_dimension_strategy));
    }
    if (m_histogram_chart.isSet()) {
        obj.insert(QString("histogramChart"), ::OpenAPI::toJsonValue(m_histogram_chart));
    }
    if (m_maximized_isSet) {
        obj.insert(QString("maximized"), ::OpenAPI::toJsonValue(m_maximized));
    }
    if (m_org_chart.isSet()) {
        obj.insert(QString("orgChart"), ::OpenAPI::toJsonValue(m_org_chart));
    }
    if (m_pie_chart.isSet()) {
        obj.insert(QString("pieChart"), ::OpenAPI::toJsonValue(m_pie_chart));
    }
    if (m_scorecard_chart.isSet()) {
        obj.insert(QString("scorecardChart"), ::OpenAPI::toJsonValue(m_scorecard_chart));
    }
    if (m_sort_specs.size() > 0) {
        obj.insert(QString("sortSpecs"), ::OpenAPI::toJsonValue(m_sort_specs));
    }
    if (m_subtitle_isSet) {
        obj.insert(QString("subtitle"), ::OpenAPI::toJsonValue(m_subtitle));
    }
    if (m_subtitle_text_format.isSet()) {
        obj.insert(QString("subtitleTextFormat"), ::OpenAPI::toJsonValue(m_subtitle_text_format));
    }
    if (m_subtitle_text_position.isSet()) {
        obj.insert(QString("subtitleTextPosition"), ::OpenAPI::toJsonValue(m_subtitle_text_position));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_title_text_format.isSet()) {
        obj.insert(QString("titleTextFormat"), ::OpenAPI::toJsonValue(m_title_text_format));
    }
    if (m_title_text_position.isSet()) {
        obj.insert(QString("titleTextPosition"), ::OpenAPI::toJsonValue(m_title_text_position));
    }
    if (m_treemap_chart.isSet()) {
        obj.insert(QString("treemapChart"), ::OpenAPI::toJsonValue(m_treemap_chart));
    }
    if (m_waterfall_chart.isSet()) {
        obj.insert(QString("waterfallChart"), ::OpenAPI::toJsonValue(m_waterfall_chart));
    }
    return obj;
}

QString OAIChartSpec::getAltText() const {
    return m_alt_text;
}
void OAIChartSpec::setAltText(const QString &alt_text) {
    m_alt_text = alt_text;
    m_alt_text_isSet = true;
}

bool OAIChartSpec::is_alt_text_Set() const{
    return m_alt_text_isSet;
}

bool OAIChartSpec::is_alt_text_Valid() const{
    return m_alt_text_isValid;
}

OAIColor OAIChartSpec::getBackgroundColor() const {
    return m_background_color;
}
void OAIChartSpec::setBackgroundColor(const OAIColor &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAIChartSpec::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAIChartSpec::is_background_color_Valid() const{
    return m_background_color_isValid;
}

OAIColorStyle OAIChartSpec::getBackgroundColorStyle() const {
    return m_background_color_style;
}
void OAIChartSpec::setBackgroundColorStyle(const OAIColorStyle &background_color_style) {
    m_background_color_style = background_color_style;
    m_background_color_style_isSet = true;
}

bool OAIChartSpec::is_background_color_style_Set() const{
    return m_background_color_style_isSet;
}

bool OAIChartSpec::is_background_color_style_Valid() const{
    return m_background_color_style_isValid;
}

OAIBasicChartSpec OAIChartSpec::getBasicChart() const {
    return m_basic_chart;
}
void OAIChartSpec::setBasicChart(const OAIBasicChartSpec &basic_chart) {
    m_basic_chart = basic_chart;
    m_basic_chart_isSet = true;
}

bool OAIChartSpec::is_basic_chart_Set() const{
    return m_basic_chart_isSet;
}

bool OAIChartSpec::is_basic_chart_Valid() const{
    return m_basic_chart_isValid;
}

OAIBubbleChartSpec OAIChartSpec::getBubbleChart() const {
    return m_bubble_chart;
}
void OAIChartSpec::setBubbleChart(const OAIBubbleChartSpec &bubble_chart) {
    m_bubble_chart = bubble_chart;
    m_bubble_chart_isSet = true;
}

bool OAIChartSpec::is_bubble_chart_Set() const{
    return m_bubble_chart_isSet;
}

bool OAIChartSpec::is_bubble_chart_Valid() const{
    return m_bubble_chart_isValid;
}

OAICandlestickChartSpec OAIChartSpec::getCandlestickChart() const {
    return m_candlestick_chart;
}
void OAIChartSpec::setCandlestickChart(const OAICandlestickChartSpec &candlestick_chart) {
    m_candlestick_chart = candlestick_chart;
    m_candlestick_chart_isSet = true;
}

bool OAIChartSpec::is_candlestick_chart_Set() const{
    return m_candlestick_chart_isSet;
}

bool OAIChartSpec::is_candlestick_chart_Valid() const{
    return m_candlestick_chart_isValid;
}

OAIDataSourceChartProperties OAIChartSpec::getDataSourceChartProperties() const {
    return m_data_source_chart_properties;
}
void OAIChartSpec::setDataSourceChartProperties(const OAIDataSourceChartProperties &data_source_chart_properties) {
    m_data_source_chart_properties = data_source_chart_properties;
    m_data_source_chart_properties_isSet = true;
}

bool OAIChartSpec::is_data_source_chart_properties_Set() const{
    return m_data_source_chart_properties_isSet;
}

bool OAIChartSpec::is_data_source_chart_properties_Valid() const{
    return m_data_source_chart_properties_isValid;
}

QList<OAIFilterSpec> OAIChartSpec::getFilterSpecs() const {
    return m_filter_specs;
}
void OAIChartSpec::setFilterSpecs(const QList<OAIFilterSpec> &filter_specs) {
    m_filter_specs = filter_specs;
    m_filter_specs_isSet = true;
}

bool OAIChartSpec::is_filter_specs_Set() const{
    return m_filter_specs_isSet;
}

bool OAIChartSpec::is_filter_specs_Valid() const{
    return m_filter_specs_isValid;
}

QString OAIChartSpec::getFontName() const {
    return m_font_name;
}
void OAIChartSpec::setFontName(const QString &font_name) {
    m_font_name = font_name;
    m_font_name_isSet = true;
}

bool OAIChartSpec::is_font_name_Set() const{
    return m_font_name_isSet;
}

bool OAIChartSpec::is_font_name_Valid() const{
    return m_font_name_isValid;
}

QString OAIChartSpec::getHiddenDimensionStrategy() const {
    return m_hidden_dimension_strategy;
}
void OAIChartSpec::setHiddenDimensionStrategy(const QString &hidden_dimension_strategy) {
    m_hidden_dimension_strategy = hidden_dimension_strategy;
    m_hidden_dimension_strategy_isSet = true;
}

bool OAIChartSpec::is_hidden_dimension_strategy_Set() const{
    return m_hidden_dimension_strategy_isSet;
}

bool OAIChartSpec::is_hidden_dimension_strategy_Valid() const{
    return m_hidden_dimension_strategy_isValid;
}

OAIHistogramChartSpec OAIChartSpec::getHistogramChart() const {
    return m_histogram_chart;
}
void OAIChartSpec::setHistogramChart(const OAIHistogramChartSpec &histogram_chart) {
    m_histogram_chart = histogram_chart;
    m_histogram_chart_isSet = true;
}

bool OAIChartSpec::is_histogram_chart_Set() const{
    return m_histogram_chart_isSet;
}

bool OAIChartSpec::is_histogram_chart_Valid() const{
    return m_histogram_chart_isValid;
}

bool OAIChartSpec::isMaximized() const {
    return m_maximized;
}
void OAIChartSpec::setMaximized(const bool &maximized) {
    m_maximized = maximized;
    m_maximized_isSet = true;
}

bool OAIChartSpec::is_maximized_Set() const{
    return m_maximized_isSet;
}

bool OAIChartSpec::is_maximized_Valid() const{
    return m_maximized_isValid;
}

OAIOrgChartSpec OAIChartSpec::getOrgChart() const {
    return m_org_chart;
}
void OAIChartSpec::setOrgChart(const OAIOrgChartSpec &org_chart) {
    m_org_chart = org_chart;
    m_org_chart_isSet = true;
}

bool OAIChartSpec::is_org_chart_Set() const{
    return m_org_chart_isSet;
}

bool OAIChartSpec::is_org_chart_Valid() const{
    return m_org_chart_isValid;
}

OAIPieChartSpec OAIChartSpec::getPieChart() const {
    return m_pie_chart;
}
void OAIChartSpec::setPieChart(const OAIPieChartSpec &pie_chart) {
    m_pie_chart = pie_chart;
    m_pie_chart_isSet = true;
}

bool OAIChartSpec::is_pie_chart_Set() const{
    return m_pie_chart_isSet;
}

bool OAIChartSpec::is_pie_chart_Valid() const{
    return m_pie_chart_isValid;
}

OAIScorecardChartSpec OAIChartSpec::getScorecardChart() const {
    return m_scorecard_chart;
}
void OAIChartSpec::setScorecardChart(const OAIScorecardChartSpec &scorecard_chart) {
    m_scorecard_chart = scorecard_chart;
    m_scorecard_chart_isSet = true;
}

bool OAIChartSpec::is_scorecard_chart_Set() const{
    return m_scorecard_chart_isSet;
}

bool OAIChartSpec::is_scorecard_chart_Valid() const{
    return m_scorecard_chart_isValid;
}

QList<OAISortSpec> OAIChartSpec::getSortSpecs() const {
    return m_sort_specs;
}
void OAIChartSpec::setSortSpecs(const QList<OAISortSpec> &sort_specs) {
    m_sort_specs = sort_specs;
    m_sort_specs_isSet = true;
}

bool OAIChartSpec::is_sort_specs_Set() const{
    return m_sort_specs_isSet;
}

bool OAIChartSpec::is_sort_specs_Valid() const{
    return m_sort_specs_isValid;
}

QString OAIChartSpec::getSubtitle() const {
    return m_subtitle;
}
void OAIChartSpec::setSubtitle(const QString &subtitle) {
    m_subtitle = subtitle;
    m_subtitle_isSet = true;
}

bool OAIChartSpec::is_subtitle_Set() const{
    return m_subtitle_isSet;
}

bool OAIChartSpec::is_subtitle_Valid() const{
    return m_subtitle_isValid;
}

OAITextFormat OAIChartSpec::getSubtitleTextFormat() const {
    return m_subtitle_text_format;
}
void OAIChartSpec::setSubtitleTextFormat(const OAITextFormat &subtitle_text_format) {
    m_subtitle_text_format = subtitle_text_format;
    m_subtitle_text_format_isSet = true;
}

bool OAIChartSpec::is_subtitle_text_format_Set() const{
    return m_subtitle_text_format_isSet;
}

bool OAIChartSpec::is_subtitle_text_format_Valid() const{
    return m_subtitle_text_format_isValid;
}

OAITextPosition OAIChartSpec::getSubtitleTextPosition() const {
    return m_subtitle_text_position;
}
void OAIChartSpec::setSubtitleTextPosition(const OAITextPosition &subtitle_text_position) {
    m_subtitle_text_position = subtitle_text_position;
    m_subtitle_text_position_isSet = true;
}

bool OAIChartSpec::is_subtitle_text_position_Set() const{
    return m_subtitle_text_position_isSet;
}

bool OAIChartSpec::is_subtitle_text_position_Valid() const{
    return m_subtitle_text_position_isValid;
}

QString OAIChartSpec::getTitle() const {
    return m_title;
}
void OAIChartSpec::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIChartSpec::is_title_Set() const{
    return m_title_isSet;
}

bool OAIChartSpec::is_title_Valid() const{
    return m_title_isValid;
}

OAITextFormat OAIChartSpec::getTitleTextFormat() const {
    return m_title_text_format;
}
void OAIChartSpec::setTitleTextFormat(const OAITextFormat &title_text_format) {
    m_title_text_format = title_text_format;
    m_title_text_format_isSet = true;
}

bool OAIChartSpec::is_title_text_format_Set() const{
    return m_title_text_format_isSet;
}

bool OAIChartSpec::is_title_text_format_Valid() const{
    return m_title_text_format_isValid;
}

OAITextPosition OAIChartSpec::getTitleTextPosition() const {
    return m_title_text_position;
}
void OAIChartSpec::setTitleTextPosition(const OAITextPosition &title_text_position) {
    m_title_text_position = title_text_position;
    m_title_text_position_isSet = true;
}

bool OAIChartSpec::is_title_text_position_Set() const{
    return m_title_text_position_isSet;
}

bool OAIChartSpec::is_title_text_position_Valid() const{
    return m_title_text_position_isValid;
}

OAITreemapChartSpec OAIChartSpec::getTreemapChart() const {
    return m_treemap_chart;
}
void OAIChartSpec::setTreemapChart(const OAITreemapChartSpec &treemap_chart) {
    m_treemap_chart = treemap_chart;
    m_treemap_chart_isSet = true;
}

bool OAIChartSpec::is_treemap_chart_Set() const{
    return m_treemap_chart_isSet;
}

bool OAIChartSpec::is_treemap_chart_Valid() const{
    return m_treemap_chart_isValid;
}

OAIWaterfallChartSpec OAIChartSpec::getWaterfallChart() const {
    return m_waterfall_chart;
}
void OAIChartSpec::setWaterfallChart(const OAIWaterfallChartSpec &waterfall_chart) {
    m_waterfall_chart = waterfall_chart;
    m_waterfall_chart_isSet = true;
}

bool OAIChartSpec::is_waterfall_chart_Set() const{
    return m_waterfall_chart_isSet;
}

bool OAIChartSpec::is_waterfall_chart_Valid() const{
    return m_waterfall_chart_isValid;
}

bool OAIChartSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alt_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_basic_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bubble_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_candlestick_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_chart_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_dimension_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_histogram_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pie_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scorecard_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_text_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_text_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_text_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_text_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_treemap_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_waterfall_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChartSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
