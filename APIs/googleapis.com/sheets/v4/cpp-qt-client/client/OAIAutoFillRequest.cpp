/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoFillRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoFillRequest::OAIAutoFillRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoFillRequest::OAIAutoFillRequest() {
    this->initializeModel();
}

OAIAutoFillRequest::~OAIAutoFillRequest() {}

void OAIAutoFillRequest::initializeModel() {

    m_range_isSet = false;
    m_range_isValid = false;

    m_source_and_destination_isSet = false;
    m_source_and_destination_isValid = false;

    m_use_alternate_series_isSet = false;
    m_use_alternate_series_isValid = false;
}

void OAIAutoFillRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoFillRequest::fromJsonObject(QJsonObject json) {

    m_range_isValid = ::OpenAPI::fromJsonValue(m_range, json[QString("range")]);
    m_range_isSet = !json[QString("range")].isNull() && m_range_isValid;

    m_source_and_destination_isValid = ::OpenAPI::fromJsonValue(m_source_and_destination, json[QString("sourceAndDestination")]);
    m_source_and_destination_isSet = !json[QString("sourceAndDestination")].isNull() && m_source_and_destination_isValid;

    m_use_alternate_series_isValid = ::OpenAPI::fromJsonValue(m_use_alternate_series, json[QString("useAlternateSeries")]);
    m_use_alternate_series_isSet = !json[QString("useAlternateSeries")].isNull() && m_use_alternate_series_isValid;
}

QString OAIAutoFillRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoFillRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_range.isSet()) {
        obj.insert(QString("range"), ::OpenAPI::toJsonValue(m_range));
    }
    if (m_source_and_destination.isSet()) {
        obj.insert(QString("sourceAndDestination"), ::OpenAPI::toJsonValue(m_source_and_destination));
    }
    if (m_use_alternate_series_isSet) {
        obj.insert(QString("useAlternateSeries"), ::OpenAPI::toJsonValue(m_use_alternate_series));
    }
    return obj;
}

OAIGridRange OAIAutoFillRequest::getRange() const {
    return m_range;
}
void OAIAutoFillRequest::setRange(const OAIGridRange &range) {
    m_range = range;
    m_range_isSet = true;
}

bool OAIAutoFillRequest::is_range_Set() const{
    return m_range_isSet;
}

bool OAIAutoFillRequest::is_range_Valid() const{
    return m_range_isValid;
}

OAISourceAndDestination OAIAutoFillRequest::getSourceAndDestination() const {
    return m_source_and_destination;
}
void OAIAutoFillRequest::setSourceAndDestination(const OAISourceAndDestination &source_and_destination) {
    m_source_and_destination = source_and_destination;
    m_source_and_destination_isSet = true;
}

bool OAIAutoFillRequest::is_source_and_destination_Set() const{
    return m_source_and_destination_isSet;
}

bool OAIAutoFillRequest::is_source_and_destination_Valid() const{
    return m_source_and_destination_isValid;
}

bool OAIAutoFillRequest::isUseAlternateSeries() const {
    return m_use_alternate_series;
}
void OAIAutoFillRequest::setUseAlternateSeries(const bool &use_alternate_series) {
    m_use_alternate_series = use_alternate_series;
    m_use_alternate_series_isSet = true;
}

bool OAIAutoFillRequest::is_use_alternate_series_Set() const{
    return m_use_alternate_series_isSet;
}

bool OAIAutoFillRequest::is_use_alternate_series_Valid() const{
    return m_use_alternate_series_isValid;
}

bool OAIAutoFillRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_and_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_alternate_series_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoFillRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
