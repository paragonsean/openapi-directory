/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICellFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICellFormat::OAICellFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICellFormat::OAICellFormat() {
    this->initializeModel();
}

OAICellFormat::~OAICellFormat() {}

void OAICellFormat::initializeModel() {

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_background_color_style_isSet = false;
    m_background_color_style_isValid = false;

    m_borders_isSet = false;
    m_borders_isValid = false;

    m_horizontal_alignment_isSet = false;
    m_horizontal_alignment_isValid = false;

    m_hyperlink_display_type_isSet = false;
    m_hyperlink_display_type_isValid = false;

    m_number_format_isSet = false;
    m_number_format_isValid = false;

    m_padding_isSet = false;
    m_padding_isValid = false;

    m_text_direction_isSet = false;
    m_text_direction_isValid = false;

    m_text_format_isSet = false;
    m_text_format_isValid = false;

    m_text_rotation_isSet = false;
    m_text_rotation_isValid = false;

    m_vertical_alignment_isSet = false;
    m_vertical_alignment_isValid = false;

    m_wrap_strategy_isSet = false;
    m_wrap_strategy_isValid = false;
}

void OAICellFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICellFormat::fromJsonObject(QJsonObject json) {

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("backgroundColor")]);
    m_background_color_isSet = !json[QString("backgroundColor")].isNull() && m_background_color_isValid;

    m_background_color_style_isValid = ::OpenAPI::fromJsonValue(m_background_color_style, json[QString("backgroundColorStyle")]);
    m_background_color_style_isSet = !json[QString("backgroundColorStyle")].isNull() && m_background_color_style_isValid;

    m_borders_isValid = ::OpenAPI::fromJsonValue(m_borders, json[QString("borders")]);
    m_borders_isSet = !json[QString("borders")].isNull() && m_borders_isValid;

    m_horizontal_alignment_isValid = ::OpenAPI::fromJsonValue(m_horizontal_alignment, json[QString("horizontalAlignment")]);
    m_horizontal_alignment_isSet = !json[QString("horizontalAlignment")].isNull() && m_horizontal_alignment_isValid;

    m_hyperlink_display_type_isValid = ::OpenAPI::fromJsonValue(m_hyperlink_display_type, json[QString("hyperlinkDisplayType")]);
    m_hyperlink_display_type_isSet = !json[QString("hyperlinkDisplayType")].isNull() && m_hyperlink_display_type_isValid;

    m_number_format_isValid = ::OpenAPI::fromJsonValue(m_number_format, json[QString("numberFormat")]);
    m_number_format_isSet = !json[QString("numberFormat")].isNull() && m_number_format_isValid;

    m_padding_isValid = ::OpenAPI::fromJsonValue(m_padding, json[QString("padding")]);
    m_padding_isSet = !json[QString("padding")].isNull() && m_padding_isValid;

    m_text_direction_isValid = ::OpenAPI::fromJsonValue(m_text_direction, json[QString("textDirection")]);
    m_text_direction_isSet = !json[QString("textDirection")].isNull() && m_text_direction_isValid;

    m_text_format_isValid = ::OpenAPI::fromJsonValue(m_text_format, json[QString("textFormat")]);
    m_text_format_isSet = !json[QString("textFormat")].isNull() && m_text_format_isValid;

    m_text_rotation_isValid = ::OpenAPI::fromJsonValue(m_text_rotation, json[QString("textRotation")]);
    m_text_rotation_isSet = !json[QString("textRotation")].isNull() && m_text_rotation_isValid;

    m_vertical_alignment_isValid = ::OpenAPI::fromJsonValue(m_vertical_alignment, json[QString("verticalAlignment")]);
    m_vertical_alignment_isSet = !json[QString("verticalAlignment")].isNull() && m_vertical_alignment_isValid;

    m_wrap_strategy_isValid = ::OpenAPI::fromJsonValue(m_wrap_strategy, json[QString("wrapStrategy")]);
    m_wrap_strategy_isSet = !json[QString("wrapStrategy")].isNull() && m_wrap_strategy_isValid;
}

QString OAICellFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICellFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_background_color.isSet()) {
        obj.insert(QString("backgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_background_color_style.isSet()) {
        obj.insert(QString("backgroundColorStyle"), ::OpenAPI::toJsonValue(m_background_color_style));
    }
    if (m_borders.isSet()) {
        obj.insert(QString("borders"), ::OpenAPI::toJsonValue(m_borders));
    }
    if (m_horizontal_alignment_isSet) {
        obj.insert(QString("horizontalAlignment"), ::OpenAPI::toJsonValue(m_horizontal_alignment));
    }
    if (m_hyperlink_display_type_isSet) {
        obj.insert(QString("hyperlinkDisplayType"), ::OpenAPI::toJsonValue(m_hyperlink_display_type));
    }
    if (m_number_format.isSet()) {
        obj.insert(QString("numberFormat"), ::OpenAPI::toJsonValue(m_number_format));
    }
    if (m_padding.isSet()) {
        obj.insert(QString("padding"), ::OpenAPI::toJsonValue(m_padding));
    }
    if (m_text_direction_isSet) {
        obj.insert(QString("textDirection"), ::OpenAPI::toJsonValue(m_text_direction));
    }
    if (m_text_format.isSet()) {
        obj.insert(QString("textFormat"), ::OpenAPI::toJsonValue(m_text_format));
    }
    if (m_text_rotation.isSet()) {
        obj.insert(QString("textRotation"), ::OpenAPI::toJsonValue(m_text_rotation));
    }
    if (m_vertical_alignment_isSet) {
        obj.insert(QString("verticalAlignment"), ::OpenAPI::toJsonValue(m_vertical_alignment));
    }
    if (m_wrap_strategy_isSet) {
        obj.insert(QString("wrapStrategy"), ::OpenAPI::toJsonValue(m_wrap_strategy));
    }
    return obj;
}

OAIColor OAICellFormat::getBackgroundColor() const {
    return m_background_color;
}
void OAICellFormat::setBackgroundColor(const OAIColor &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAICellFormat::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAICellFormat::is_background_color_Valid() const{
    return m_background_color_isValid;
}

OAIColorStyle OAICellFormat::getBackgroundColorStyle() const {
    return m_background_color_style;
}
void OAICellFormat::setBackgroundColorStyle(const OAIColorStyle &background_color_style) {
    m_background_color_style = background_color_style;
    m_background_color_style_isSet = true;
}

bool OAICellFormat::is_background_color_style_Set() const{
    return m_background_color_style_isSet;
}

bool OAICellFormat::is_background_color_style_Valid() const{
    return m_background_color_style_isValid;
}

OAIBorders OAICellFormat::getBorders() const {
    return m_borders;
}
void OAICellFormat::setBorders(const OAIBorders &borders) {
    m_borders = borders;
    m_borders_isSet = true;
}

bool OAICellFormat::is_borders_Set() const{
    return m_borders_isSet;
}

bool OAICellFormat::is_borders_Valid() const{
    return m_borders_isValid;
}

QString OAICellFormat::getHorizontalAlignment() const {
    return m_horizontal_alignment;
}
void OAICellFormat::setHorizontalAlignment(const QString &horizontal_alignment) {
    m_horizontal_alignment = horizontal_alignment;
    m_horizontal_alignment_isSet = true;
}

bool OAICellFormat::is_horizontal_alignment_Set() const{
    return m_horizontal_alignment_isSet;
}

bool OAICellFormat::is_horizontal_alignment_Valid() const{
    return m_horizontal_alignment_isValid;
}

QString OAICellFormat::getHyperlinkDisplayType() const {
    return m_hyperlink_display_type;
}
void OAICellFormat::setHyperlinkDisplayType(const QString &hyperlink_display_type) {
    m_hyperlink_display_type = hyperlink_display_type;
    m_hyperlink_display_type_isSet = true;
}

bool OAICellFormat::is_hyperlink_display_type_Set() const{
    return m_hyperlink_display_type_isSet;
}

bool OAICellFormat::is_hyperlink_display_type_Valid() const{
    return m_hyperlink_display_type_isValid;
}

OAINumberFormat OAICellFormat::getNumberFormat() const {
    return m_number_format;
}
void OAICellFormat::setNumberFormat(const OAINumberFormat &number_format) {
    m_number_format = number_format;
    m_number_format_isSet = true;
}

bool OAICellFormat::is_number_format_Set() const{
    return m_number_format_isSet;
}

bool OAICellFormat::is_number_format_Valid() const{
    return m_number_format_isValid;
}

OAIPadding OAICellFormat::getPadding() const {
    return m_padding;
}
void OAICellFormat::setPadding(const OAIPadding &padding) {
    m_padding = padding;
    m_padding_isSet = true;
}

bool OAICellFormat::is_padding_Set() const{
    return m_padding_isSet;
}

bool OAICellFormat::is_padding_Valid() const{
    return m_padding_isValid;
}

QString OAICellFormat::getTextDirection() const {
    return m_text_direction;
}
void OAICellFormat::setTextDirection(const QString &text_direction) {
    m_text_direction = text_direction;
    m_text_direction_isSet = true;
}

bool OAICellFormat::is_text_direction_Set() const{
    return m_text_direction_isSet;
}

bool OAICellFormat::is_text_direction_Valid() const{
    return m_text_direction_isValid;
}

OAITextFormat OAICellFormat::getTextFormat() const {
    return m_text_format;
}
void OAICellFormat::setTextFormat(const OAITextFormat &text_format) {
    m_text_format = text_format;
    m_text_format_isSet = true;
}

bool OAICellFormat::is_text_format_Set() const{
    return m_text_format_isSet;
}

bool OAICellFormat::is_text_format_Valid() const{
    return m_text_format_isValid;
}

OAITextRotation OAICellFormat::getTextRotation() const {
    return m_text_rotation;
}
void OAICellFormat::setTextRotation(const OAITextRotation &text_rotation) {
    m_text_rotation = text_rotation;
    m_text_rotation_isSet = true;
}

bool OAICellFormat::is_text_rotation_Set() const{
    return m_text_rotation_isSet;
}

bool OAICellFormat::is_text_rotation_Valid() const{
    return m_text_rotation_isValid;
}

QString OAICellFormat::getVerticalAlignment() const {
    return m_vertical_alignment;
}
void OAICellFormat::setVerticalAlignment(const QString &vertical_alignment) {
    m_vertical_alignment = vertical_alignment;
    m_vertical_alignment_isSet = true;
}

bool OAICellFormat::is_vertical_alignment_Set() const{
    return m_vertical_alignment_isSet;
}

bool OAICellFormat::is_vertical_alignment_Valid() const{
    return m_vertical_alignment_isValid;
}

QString OAICellFormat::getWrapStrategy() const {
    return m_wrap_strategy;
}
void OAICellFormat::setWrapStrategy(const QString &wrap_strategy) {
    m_wrap_strategy = wrap_strategy;
    m_wrap_strategy_isSet = true;
}

bool OAICellFormat::is_wrap_strategy_Set() const{
    return m_wrap_strategy_isSet;
}

bool OAICellFormat::is_wrap_strategy_Valid() const{
    return m_wrap_strategy_isValid;
}

bool OAICellFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_borders.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_horizontal_alignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hyperlink_display_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_padding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_rotation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertical_alignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wrap_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICellFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
