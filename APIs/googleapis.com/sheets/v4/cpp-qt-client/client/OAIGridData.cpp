/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGridData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGridData::OAIGridData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGridData::OAIGridData() {
    this->initializeModel();
}

OAIGridData::~OAIGridData() {}

void OAIGridData::initializeModel() {

    m_column_metadata_isSet = false;
    m_column_metadata_isValid = false;

    m_row_data_isSet = false;
    m_row_data_isValid = false;

    m_row_metadata_isSet = false;
    m_row_metadata_isValid = false;

    m_start_column_isSet = false;
    m_start_column_isValid = false;

    m_start_row_isSet = false;
    m_start_row_isValid = false;
}

void OAIGridData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGridData::fromJsonObject(QJsonObject json) {

    m_column_metadata_isValid = ::OpenAPI::fromJsonValue(m_column_metadata, json[QString("columnMetadata")]);
    m_column_metadata_isSet = !json[QString("columnMetadata")].isNull() && m_column_metadata_isValid;

    m_row_data_isValid = ::OpenAPI::fromJsonValue(m_row_data, json[QString("rowData")]);
    m_row_data_isSet = !json[QString("rowData")].isNull() && m_row_data_isValid;

    m_row_metadata_isValid = ::OpenAPI::fromJsonValue(m_row_metadata, json[QString("rowMetadata")]);
    m_row_metadata_isSet = !json[QString("rowMetadata")].isNull() && m_row_metadata_isValid;

    m_start_column_isValid = ::OpenAPI::fromJsonValue(m_start_column, json[QString("startColumn")]);
    m_start_column_isSet = !json[QString("startColumn")].isNull() && m_start_column_isValid;

    m_start_row_isValid = ::OpenAPI::fromJsonValue(m_start_row, json[QString("startRow")]);
    m_start_row_isSet = !json[QString("startRow")].isNull() && m_start_row_isValid;
}

QString OAIGridData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGridData::asJsonObject() const {
    QJsonObject obj;
    if (m_column_metadata.size() > 0) {
        obj.insert(QString("columnMetadata"), ::OpenAPI::toJsonValue(m_column_metadata));
    }
    if (m_row_data.size() > 0) {
        obj.insert(QString("rowData"), ::OpenAPI::toJsonValue(m_row_data));
    }
    if (m_row_metadata.size() > 0) {
        obj.insert(QString("rowMetadata"), ::OpenAPI::toJsonValue(m_row_metadata));
    }
    if (m_start_column_isSet) {
        obj.insert(QString("startColumn"), ::OpenAPI::toJsonValue(m_start_column));
    }
    if (m_start_row_isSet) {
        obj.insert(QString("startRow"), ::OpenAPI::toJsonValue(m_start_row));
    }
    return obj;
}

QList<OAIDimensionProperties> OAIGridData::getColumnMetadata() const {
    return m_column_metadata;
}
void OAIGridData::setColumnMetadata(const QList<OAIDimensionProperties> &column_metadata) {
    m_column_metadata = column_metadata;
    m_column_metadata_isSet = true;
}

bool OAIGridData::is_column_metadata_Set() const{
    return m_column_metadata_isSet;
}

bool OAIGridData::is_column_metadata_Valid() const{
    return m_column_metadata_isValid;
}

QList<OAIRowData> OAIGridData::getRowData() const {
    return m_row_data;
}
void OAIGridData::setRowData(const QList<OAIRowData> &row_data) {
    m_row_data = row_data;
    m_row_data_isSet = true;
}

bool OAIGridData::is_row_data_Set() const{
    return m_row_data_isSet;
}

bool OAIGridData::is_row_data_Valid() const{
    return m_row_data_isValid;
}

QList<OAIDimensionProperties> OAIGridData::getRowMetadata() const {
    return m_row_metadata;
}
void OAIGridData::setRowMetadata(const QList<OAIDimensionProperties> &row_metadata) {
    m_row_metadata = row_metadata;
    m_row_metadata_isSet = true;
}

bool OAIGridData::is_row_metadata_Set() const{
    return m_row_metadata_isSet;
}

bool OAIGridData::is_row_metadata_Valid() const{
    return m_row_metadata_isValid;
}

qint32 OAIGridData::getStartColumn() const {
    return m_start_column;
}
void OAIGridData::setStartColumn(const qint32 &start_column) {
    m_start_column = start_column;
    m_start_column_isSet = true;
}

bool OAIGridData::is_start_column_Set() const{
    return m_start_column_isSet;
}

bool OAIGridData::is_start_column_Valid() const{
    return m_start_column_isValid;
}

qint32 OAIGridData::getStartRow() const {
    return m_start_row;
}
void OAIGridData::setStartRow(const qint32 &start_row) {
    m_start_row = start_row;
    m_start_row_isSet = true;
}

bool OAIGridData::is_start_row_Set() const{
    return m_start_row_isSet;
}

bool OAIGridData::is_start_row_Valid() const{
    return m_start_row_isValid;
}

bool OAIGridData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_row_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGridData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
