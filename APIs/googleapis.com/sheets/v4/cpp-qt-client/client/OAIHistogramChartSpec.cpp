/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistogramChartSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistogramChartSpec::OAIHistogramChartSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistogramChartSpec::OAIHistogramChartSpec() {
    this->initializeModel();
}

OAIHistogramChartSpec::~OAIHistogramChartSpec() {}

void OAIHistogramChartSpec::initializeModel() {

    m_bucket_size_isSet = false;
    m_bucket_size_isValid = false;

    m_legend_position_isSet = false;
    m_legend_position_isValid = false;

    m_outlier_percentile_isSet = false;
    m_outlier_percentile_isValid = false;

    m_series_isSet = false;
    m_series_isValid = false;

    m_show_item_dividers_isSet = false;
    m_show_item_dividers_isValid = false;
}

void OAIHistogramChartSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistogramChartSpec::fromJsonObject(QJsonObject json) {

    m_bucket_size_isValid = ::OpenAPI::fromJsonValue(m_bucket_size, json[QString("bucketSize")]);
    m_bucket_size_isSet = !json[QString("bucketSize")].isNull() && m_bucket_size_isValid;

    m_legend_position_isValid = ::OpenAPI::fromJsonValue(m_legend_position, json[QString("legendPosition")]);
    m_legend_position_isSet = !json[QString("legendPosition")].isNull() && m_legend_position_isValid;

    m_outlier_percentile_isValid = ::OpenAPI::fromJsonValue(m_outlier_percentile, json[QString("outlierPercentile")]);
    m_outlier_percentile_isSet = !json[QString("outlierPercentile")].isNull() && m_outlier_percentile_isValid;

    m_series_isValid = ::OpenAPI::fromJsonValue(m_series, json[QString("series")]);
    m_series_isSet = !json[QString("series")].isNull() && m_series_isValid;

    m_show_item_dividers_isValid = ::OpenAPI::fromJsonValue(m_show_item_dividers, json[QString("showItemDividers")]);
    m_show_item_dividers_isSet = !json[QString("showItemDividers")].isNull() && m_show_item_dividers_isValid;
}

QString OAIHistogramChartSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistogramChartSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_size_isSet) {
        obj.insert(QString("bucketSize"), ::OpenAPI::toJsonValue(m_bucket_size));
    }
    if (m_legend_position_isSet) {
        obj.insert(QString("legendPosition"), ::OpenAPI::toJsonValue(m_legend_position));
    }
    if (m_outlier_percentile_isSet) {
        obj.insert(QString("outlierPercentile"), ::OpenAPI::toJsonValue(m_outlier_percentile));
    }
    if (m_series.size() > 0) {
        obj.insert(QString("series"), ::OpenAPI::toJsonValue(m_series));
    }
    if (m_show_item_dividers_isSet) {
        obj.insert(QString("showItemDividers"), ::OpenAPI::toJsonValue(m_show_item_dividers));
    }
    return obj;
}

double OAIHistogramChartSpec::getBucketSize() const {
    return m_bucket_size;
}
void OAIHistogramChartSpec::setBucketSize(const double &bucket_size) {
    m_bucket_size = bucket_size;
    m_bucket_size_isSet = true;
}

bool OAIHistogramChartSpec::is_bucket_size_Set() const{
    return m_bucket_size_isSet;
}

bool OAIHistogramChartSpec::is_bucket_size_Valid() const{
    return m_bucket_size_isValid;
}

QString OAIHistogramChartSpec::getLegendPosition() const {
    return m_legend_position;
}
void OAIHistogramChartSpec::setLegendPosition(const QString &legend_position) {
    m_legend_position = legend_position;
    m_legend_position_isSet = true;
}

bool OAIHistogramChartSpec::is_legend_position_Set() const{
    return m_legend_position_isSet;
}

bool OAIHistogramChartSpec::is_legend_position_Valid() const{
    return m_legend_position_isValid;
}

double OAIHistogramChartSpec::getOutlierPercentile() const {
    return m_outlier_percentile;
}
void OAIHistogramChartSpec::setOutlierPercentile(const double &outlier_percentile) {
    m_outlier_percentile = outlier_percentile;
    m_outlier_percentile_isSet = true;
}

bool OAIHistogramChartSpec::is_outlier_percentile_Set() const{
    return m_outlier_percentile_isSet;
}

bool OAIHistogramChartSpec::is_outlier_percentile_Valid() const{
    return m_outlier_percentile_isValid;
}

QList<OAIHistogramSeries> OAIHistogramChartSpec::getSeries() const {
    return m_series;
}
void OAIHistogramChartSpec::setSeries(const QList<OAIHistogramSeries> &series) {
    m_series = series;
    m_series_isSet = true;
}

bool OAIHistogramChartSpec::is_series_Set() const{
    return m_series_isSet;
}

bool OAIHistogramChartSpec::is_series_Valid() const{
    return m_series_isValid;
}

bool OAIHistogramChartSpec::isShowItemDividers() const {
    return m_show_item_dividers;
}
void OAIHistogramChartSpec::setShowItemDividers(const bool &show_item_dividers) {
    m_show_item_dividers = show_item_dividers;
    m_show_item_dividers_isSet = true;
}

bool OAIHistogramChartSpec::is_show_item_dividers_Set() const{
    return m_show_item_dividers_isSet;
}

bool OAIHistogramChartSpec::is_show_item_dividers_Valid() const{
    return m_show_item_dividers_isValid;
}

bool OAIHistogramChartSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlier_percentile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_item_dividers_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistogramChartSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
