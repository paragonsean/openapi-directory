/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataValidationRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataValidationRule::OAIDataValidationRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataValidationRule::OAIDataValidationRule() {
    this->initializeModel();
}

OAIDataValidationRule::~OAIDataValidationRule() {}

void OAIDataValidationRule::initializeModel() {

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_input_message_isSet = false;
    m_input_message_isValid = false;

    m_show_custom_ui_isSet = false;
    m_show_custom_ui_isValid = false;

    m_strict_isSet = false;
    m_strict_isValid = false;
}

void OAIDataValidationRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataValidationRule::fromJsonObject(QJsonObject json) {

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_input_message_isValid = ::OpenAPI::fromJsonValue(m_input_message, json[QString("inputMessage")]);
    m_input_message_isSet = !json[QString("inputMessage")].isNull() && m_input_message_isValid;

    m_show_custom_ui_isValid = ::OpenAPI::fromJsonValue(m_show_custom_ui, json[QString("showCustomUi")]);
    m_show_custom_ui_isSet = !json[QString("showCustomUi")].isNull() && m_show_custom_ui_isValid;

    m_strict_isValid = ::OpenAPI::fromJsonValue(m_strict, json[QString("strict")]);
    m_strict_isSet = !json[QString("strict")].isNull() && m_strict_isValid;
}

QString OAIDataValidationRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataValidationRule::asJsonObject() const {
    QJsonObject obj;
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_input_message_isSet) {
        obj.insert(QString("inputMessage"), ::OpenAPI::toJsonValue(m_input_message));
    }
    if (m_show_custom_ui_isSet) {
        obj.insert(QString("showCustomUi"), ::OpenAPI::toJsonValue(m_show_custom_ui));
    }
    if (m_strict_isSet) {
        obj.insert(QString("strict"), ::OpenAPI::toJsonValue(m_strict));
    }
    return obj;
}

OAIBooleanCondition OAIDataValidationRule::getCondition() const {
    return m_condition;
}
void OAIDataValidationRule::setCondition(const OAIBooleanCondition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIDataValidationRule::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIDataValidationRule::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAIDataValidationRule::getInputMessage() const {
    return m_input_message;
}
void OAIDataValidationRule::setInputMessage(const QString &input_message) {
    m_input_message = input_message;
    m_input_message_isSet = true;
}

bool OAIDataValidationRule::is_input_message_Set() const{
    return m_input_message_isSet;
}

bool OAIDataValidationRule::is_input_message_Valid() const{
    return m_input_message_isValid;
}

bool OAIDataValidationRule::isShowCustomUi() const {
    return m_show_custom_ui;
}
void OAIDataValidationRule::setShowCustomUi(const bool &show_custom_ui) {
    m_show_custom_ui = show_custom_ui;
    m_show_custom_ui_isSet = true;
}

bool OAIDataValidationRule::is_show_custom_ui_Set() const{
    return m_show_custom_ui_isSet;
}

bool OAIDataValidationRule::is_show_custom_ui_Valid() const{
    return m_show_custom_ui_isValid;
}

bool OAIDataValidationRule::isStrict() const {
    return m_strict;
}
void OAIDataValidationRule::setStrict(const bool &strict) {
    m_strict = strict;
    m_strict_isSet = true;
}

bool OAIDataValidationRule::is_strict_Set() const{
    return m_strict_isSet;
}

bool OAIDataValidationRule::is_strict_Valid() const{
    return m_strict_isValid;
}

bool OAIDataValidationRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_custom_ui_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strict_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataValidationRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
