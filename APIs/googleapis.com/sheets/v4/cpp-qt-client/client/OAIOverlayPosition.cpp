/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOverlayPosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOverlayPosition::OAIOverlayPosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOverlayPosition::OAIOverlayPosition() {
    this->initializeModel();
}

OAIOverlayPosition::~OAIOverlayPosition() {}

void OAIOverlayPosition::initializeModel() {

    m_anchor_cell_isSet = false;
    m_anchor_cell_isValid = false;

    m_height_pixels_isSet = false;
    m_height_pixels_isValid = false;

    m_offset_x_pixels_isSet = false;
    m_offset_x_pixels_isValid = false;

    m_offset_y_pixels_isSet = false;
    m_offset_y_pixels_isValid = false;

    m_width_pixels_isSet = false;
    m_width_pixels_isValid = false;
}

void OAIOverlayPosition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOverlayPosition::fromJsonObject(QJsonObject json) {

    m_anchor_cell_isValid = ::OpenAPI::fromJsonValue(m_anchor_cell, json[QString("anchorCell")]);
    m_anchor_cell_isSet = !json[QString("anchorCell")].isNull() && m_anchor_cell_isValid;

    m_height_pixels_isValid = ::OpenAPI::fromJsonValue(m_height_pixels, json[QString("heightPixels")]);
    m_height_pixels_isSet = !json[QString("heightPixels")].isNull() && m_height_pixels_isValid;

    m_offset_x_pixels_isValid = ::OpenAPI::fromJsonValue(m_offset_x_pixels, json[QString("offsetXPixels")]);
    m_offset_x_pixels_isSet = !json[QString("offsetXPixels")].isNull() && m_offset_x_pixels_isValid;

    m_offset_y_pixels_isValid = ::OpenAPI::fromJsonValue(m_offset_y_pixels, json[QString("offsetYPixels")]);
    m_offset_y_pixels_isSet = !json[QString("offsetYPixels")].isNull() && m_offset_y_pixels_isValid;

    m_width_pixels_isValid = ::OpenAPI::fromJsonValue(m_width_pixels, json[QString("widthPixels")]);
    m_width_pixels_isSet = !json[QString("widthPixels")].isNull() && m_width_pixels_isValid;
}

QString OAIOverlayPosition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOverlayPosition::asJsonObject() const {
    QJsonObject obj;
    if (m_anchor_cell.isSet()) {
        obj.insert(QString("anchorCell"), ::OpenAPI::toJsonValue(m_anchor_cell));
    }
    if (m_height_pixels_isSet) {
        obj.insert(QString("heightPixels"), ::OpenAPI::toJsonValue(m_height_pixels));
    }
    if (m_offset_x_pixels_isSet) {
        obj.insert(QString("offsetXPixels"), ::OpenAPI::toJsonValue(m_offset_x_pixels));
    }
    if (m_offset_y_pixels_isSet) {
        obj.insert(QString("offsetYPixels"), ::OpenAPI::toJsonValue(m_offset_y_pixels));
    }
    if (m_width_pixels_isSet) {
        obj.insert(QString("widthPixels"), ::OpenAPI::toJsonValue(m_width_pixels));
    }
    return obj;
}

OAIGridCoordinate OAIOverlayPosition::getAnchorCell() const {
    return m_anchor_cell;
}
void OAIOverlayPosition::setAnchorCell(const OAIGridCoordinate &anchor_cell) {
    m_anchor_cell = anchor_cell;
    m_anchor_cell_isSet = true;
}

bool OAIOverlayPosition::is_anchor_cell_Set() const{
    return m_anchor_cell_isSet;
}

bool OAIOverlayPosition::is_anchor_cell_Valid() const{
    return m_anchor_cell_isValid;
}

qint32 OAIOverlayPosition::getHeightPixels() const {
    return m_height_pixels;
}
void OAIOverlayPosition::setHeightPixels(const qint32 &height_pixels) {
    m_height_pixels = height_pixels;
    m_height_pixels_isSet = true;
}

bool OAIOverlayPosition::is_height_pixels_Set() const{
    return m_height_pixels_isSet;
}

bool OAIOverlayPosition::is_height_pixels_Valid() const{
    return m_height_pixels_isValid;
}

qint32 OAIOverlayPosition::getOffsetXPixels() const {
    return m_offset_x_pixels;
}
void OAIOverlayPosition::setOffsetXPixels(const qint32 &offset_x_pixels) {
    m_offset_x_pixels = offset_x_pixels;
    m_offset_x_pixels_isSet = true;
}

bool OAIOverlayPosition::is_offset_x_pixels_Set() const{
    return m_offset_x_pixels_isSet;
}

bool OAIOverlayPosition::is_offset_x_pixels_Valid() const{
    return m_offset_x_pixels_isValid;
}

qint32 OAIOverlayPosition::getOffsetYPixels() const {
    return m_offset_y_pixels;
}
void OAIOverlayPosition::setOffsetYPixels(const qint32 &offset_y_pixels) {
    m_offset_y_pixels = offset_y_pixels;
    m_offset_y_pixels_isSet = true;
}

bool OAIOverlayPosition::is_offset_y_pixels_Set() const{
    return m_offset_y_pixels_isSet;
}

bool OAIOverlayPosition::is_offset_y_pixels_Valid() const{
    return m_offset_y_pixels_isValid;
}

qint32 OAIOverlayPosition::getWidthPixels() const {
    return m_width_pixels;
}
void OAIOverlayPosition::setWidthPixels(const qint32 &width_pixels) {
    m_width_pixels = width_pixels;
    m_width_pixels_isSet = true;
}

bool OAIOverlayPosition::is_width_pixels_Set() const{
    return m_width_pixels_isSet;
}

bool OAIOverlayPosition::is_width_pixels_Valid() const{
    return m_width_pixels_isValid;
}

bool OAIOverlayPosition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anchor_cell.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_pixels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_x_pixels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_y_pixels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_pixels_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOverlayPosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
