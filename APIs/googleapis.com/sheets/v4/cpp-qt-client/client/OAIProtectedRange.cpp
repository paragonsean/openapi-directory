/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProtectedRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProtectedRange::OAIProtectedRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProtectedRange::OAIProtectedRange() {
    this->initializeModel();
}

OAIProtectedRange::~OAIProtectedRange() {}

void OAIProtectedRange::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_editors_isSet = false;
    m_editors_isValid = false;

    m_named_range_id_isSet = false;
    m_named_range_id_isValid = false;

    m_protected_range_id_isSet = false;
    m_protected_range_id_isValid = false;

    m_range_isSet = false;
    m_range_isValid = false;

    m_requesting_user_can_edit_isSet = false;
    m_requesting_user_can_edit_isValid = false;

    m_unprotected_ranges_isSet = false;
    m_unprotected_ranges_isValid = false;

    m_warning_only_isSet = false;
    m_warning_only_isValid = false;
}

void OAIProtectedRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProtectedRange::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_editors_isValid = ::OpenAPI::fromJsonValue(m_editors, json[QString("editors")]);
    m_editors_isSet = !json[QString("editors")].isNull() && m_editors_isValid;

    m_named_range_id_isValid = ::OpenAPI::fromJsonValue(m_named_range_id, json[QString("namedRangeId")]);
    m_named_range_id_isSet = !json[QString("namedRangeId")].isNull() && m_named_range_id_isValid;

    m_protected_range_id_isValid = ::OpenAPI::fromJsonValue(m_protected_range_id, json[QString("protectedRangeId")]);
    m_protected_range_id_isSet = !json[QString("protectedRangeId")].isNull() && m_protected_range_id_isValid;

    m_range_isValid = ::OpenAPI::fromJsonValue(m_range, json[QString("range")]);
    m_range_isSet = !json[QString("range")].isNull() && m_range_isValid;

    m_requesting_user_can_edit_isValid = ::OpenAPI::fromJsonValue(m_requesting_user_can_edit, json[QString("requestingUserCanEdit")]);
    m_requesting_user_can_edit_isSet = !json[QString("requestingUserCanEdit")].isNull() && m_requesting_user_can_edit_isValid;

    m_unprotected_ranges_isValid = ::OpenAPI::fromJsonValue(m_unprotected_ranges, json[QString("unprotectedRanges")]);
    m_unprotected_ranges_isSet = !json[QString("unprotectedRanges")].isNull() && m_unprotected_ranges_isValid;

    m_warning_only_isValid = ::OpenAPI::fromJsonValue(m_warning_only, json[QString("warningOnly")]);
    m_warning_only_isSet = !json[QString("warningOnly")].isNull() && m_warning_only_isValid;
}

QString OAIProtectedRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProtectedRange::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_editors.isSet()) {
        obj.insert(QString("editors"), ::OpenAPI::toJsonValue(m_editors));
    }
    if (m_named_range_id_isSet) {
        obj.insert(QString("namedRangeId"), ::OpenAPI::toJsonValue(m_named_range_id));
    }
    if (m_protected_range_id_isSet) {
        obj.insert(QString("protectedRangeId"), ::OpenAPI::toJsonValue(m_protected_range_id));
    }
    if (m_range.isSet()) {
        obj.insert(QString("range"), ::OpenAPI::toJsonValue(m_range));
    }
    if (m_requesting_user_can_edit_isSet) {
        obj.insert(QString("requestingUserCanEdit"), ::OpenAPI::toJsonValue(m_requesting_user_can_edit));
    }
    if (m_unprotected_ranges.size() > 0) {
        obj.insert(QString("unprotectedRanges"), ::OpenAPI::toJsonValue(m_unprotected_ranges));
    }
    if (m_warning_only_isSet) {
        obj.insert(QString("warningOnly"), ::OpenAPI::toJsonValue(m_warning_only));
    }
    return obj;
}

QString OAIProtectedRange::getDescription() const {
    return m_description;
}
void OAIProtectedRange::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProtectedRange::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProtectedRange::is_description_Valid() const{
    return m_description_isValid;
}

OAIEditors OAIProtectedRange::getEditors() const {
    return m_editors;
}
void OAIProtectedRange::setEditors(const OAIEditors &editors) {
    m_editors = editors;
    m_editors_isSet = true;
}

bool OAIProtectedRange::is_editors_Set() const{
    return m_editors_isSet;
}

bool OAIProtectedRange::is_editors_Valid() const{
    return m_editors_isValid;
}

QString OAIProtectedRange::getNamedRangeId() const {
    return m_named_range_id;
}
void OAIProtectedRange::setNamedRangeId(const QString &named_range_id) {
    m_named_range_id = named_range_id;
    m_named_range_id_isSet = true;
}

bool OAIProtectedRange::is_named_range_id_Set() const{
    return m_named_range_id_isSet;
}

bool OAIProtectedRange::is_named_range_id_Valid() const{
    return m_named_range_id_isValid;
}

qint32 OAIProtectedRange::getProtectedRangeId() const {
    return m_protected_range_id;
}
void OAIProtectedRange::setProtectedRangeId(const qint32 &protected_range_id) {
    m_protected_range_id = protected_range_id;
    m_protected_range_id_isSet = true;
}

bool OAIProtectedRange::is_protected_range_id_Set() const{
    return m_protected_range_id_isSet;
}

bool OAIProtectedRange::is_protected_range_id_Valid() const{
    return m_protected_range_id_isValid;
}

OAIGridRange OAIProtectedRange::getRange() const {
    return m_range;
}
void OAIProtectedRange::setRange(const OAIGridRange &range) {
    m_range = range;
    m_range_isSet = true;
}

bool OAIProtectedRange::is_range_Set() const{
    return m_range_isSet;
}

bool OAIProtectedRange::is_range_Valid() const{
    return m_range_isValid;
}

bool OAIProtectedRange::isRequestingUserCanEdit() const {
    return m_requesting_user_can_edit;
}
void OAIProtectedRange::setRequestingUserCanEdit(const bool &requesting_user_can_edit) {
    m_requesting_user_can_edit = requesting_user_can_edit;
    m_requesting_user_can_edit_isSet = true;
}

bool OAIProtectedRange::is_requesting_user_can_edit_Set() const{
    return m_requesting_user_can_edit_isSet;
}

bool OAIProtectedRange::is_requesting_user_can_edit_Valid() const{
    return m_requesting_user_can_edit_isValid;
}

QList<OAIGridRange> OAIProtectedRange::getUnprotectedRanges() const {
    return m_unprotected_ranges;
}
void OAIProtectedRange::setUnprotectedRanges(const QList<OAIGridRange> &unprotected_ranges) {
    m_unprotected_ranges = unprotected_ranges;
    m_unprotected_ranges_isSet = true;
}

bool OAIProtectedRange::is_unprotected_ranges_Set() const{
    return m_unprotected_ranges_isSet;
}

bool OAIProtectedRange::is_unprotected_ranges_Valid() const{
    return m_unprotected_ranges_isValid;
}

bool OAIProtectedRange::isWarningOnly() const {
    return m_warning_only;
}
void OAIProtectedRange::setWarningOnly(const bool &warning_only) {
    m_warning_only = warning_only;
    m_warning_only_isSet = true;
}

bool OAIProtectedRange::is_warning_only_Set() const{
    return m_warning_only_isSet;
}

bool OAIProtectedRange::is_warning_only_Valid() const{
    return m_warning_only_isValid;
}

bool OAIProtectedRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_editors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_named_range_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_range_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requesting_user_can_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unprotected_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProtectedRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
