/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateValuesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateValuesResponse::OAIUpdateValuesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateValuesResponse::OAIUpdateValuesResponse() {
    this->initializeModel();
}

OAIUpdateValuesResponse::~OAIUpdateValuesResponse() {}

void OAIUpdateValuesResponse::initializeModel() {

    m_spreadsheet_id_isSet = false;
    m_spreadsheet_id_isValid = false;

    m_updated_cells_isSet = false;
    m_updated_cells_isValid = false;

    m_updated_columns_isSet = false;
    m_updated_columns_isValid = false;

    m_updated_data_isSet = false;
    m_updated_data_isValid = false;

    m_updated_range_isSet = false;
    m_updated_range_isValid = false;

    m_updated_rows_isSet = false;
    m_updated_rows_isValid = false;
}

void OAIUpdateValuesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateValuesResponse::fromJsonObject(QJsonObject json) {

    m_spreadsheet_id_isValid = ::OpenAPI::fromJsonValue(m_spreadsheet_id, json[QString("spreadsheetId")]);
    m_spreadsheet_id_isSet = !json[QString("spreadsheetId")].isNull() && m_spreadsheet_id_isValid;

    m_updated_cells_isValid = ::OpenAPI::fromJsonValue(m_updated_cells, json[QString("updatedCells")]);
    m_updated_cells_isSet = !json[QString("updatedCells")].isNull() && m_updated_cells_isValid;

    m_updated_columns_isValid = ::OpenAPI::fromJsonValue(m_updated_columns, json[QString("updatedColumns")]);
    m_updated_columns_isSet = !json[QString("updatedColumns")].isNull() && m_updated_columns_isValid;

    m_updated_data_isValid = ::OpenAPI::fromJsonValue(m_updated_data, json[QString("updatedData")]);
    m_updated_data_isSet = !json[QString("updatedData")].isNull() && m_updated_data_isValid;

    m_updated_range_isValid = ::OpenAPI::fromJsonValue(m_updated_range, json[QString("updatedRange")]);
    m_updated_range_isSet = !json[QString("updatedRange")].isNull() && m_updated_range_isValid;

    m_updated_rows_isValid = ::OpenAPI::fromJsonValue(m_updated_rows, json[QString("updatedRows")]);
    m_updated_rows_isSet = !json[QString("updatedRows")].isNull() && m_updated_rows_isValid;
}

QString OAIUpdateValuesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateValuesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_spreadsheet_id_isSet) {
        obj.insert(QString("spreadsheetId"), ::OpenAPI::toJsonValue(m_spreadsheet_id));
    }
    if (m_updated_cells_isSet) {
        obj.insert(QString("updatedCells"), ::OpenAPI::toJsonValue(m_updated_cells));
    }
    if (m_updated_columns_isSet) {
        obj.insert(QString("updatedColumns"), ::OpenAPI::toJsonValue(m_updated_columns));
    }
    if (m_updated_data.isSet()) {
        obj.insert(QString("updatedData"), ::OpenAPI::toJsonValue(m_updated_data));
    }
    if (m_updated_range_isSet) {
        obj.insert(QString("updatedRange"), ::OpenAPI::toJsonValue(m_updated_range));
    }
    if (m_updated_rows_isSet) {
        obj.insert(QString("updatedRows"), ::OpenAPI::toJsonValue(m_updated_rows));
    }
    return obj;
}

QString OAIUpdateValuesResponse::getSpreadsheetId() const {
    return m_spreadsheet_id;
}
void OAIUpdateValuesResponse::setSpreadsheetId(const QString &spreadsheet_id) {
    m_spreadsheet_id = spreadsheet_id;
    m_spreadsheet_id_isSet = true;
}

bool OAIUpdateValuesResponse::is_spreadsheet_id_Set() const{
    return m_spreadsheet_id_isSet;
}

bool OAIUpdateValuesResponse::is_spreadsheet_id_Valid() const{
    return m_spreadsheet_id_isValid;
}

qint32 OAIUpdateValuesResponse::getUpdatedCells() const {
    return m_updated_cells;
}
void OAIUpdateValuesResponse::setUpdatedCells(const qint32 &updated_cells) {
    m_updated_cells = updated_cells;
    m_updated_cells_isSet = true;
}

bool OAIUpdateValuesResponse::is_updated_cells_Set() const{
    return m_updated_cells_isSet;
}

bool OAIUpdateValuesResponse::is_updated_cells_Valid() const{
    return m_updated_cells_isValid;
}

qint32 OAIUpdateValuesResponse::getUpdatedColumns() const {
    return m_updated_columns;
}
void OAIUpdateValuesResponse::setUpdatedColumns(const qint32 &updated_columns) {
    m_updated_columns = updated_columns;
    m_updated_columns_isSet = true;
}

bool OAIUpdateValuesResponse::is_updated_columns_Set() const{
    return m_updated_columns_isSet;
}

bool OAIUpdateValuesResponse::is_updated_columns_Valid() const{
    return m_updated_columns_isValid;
}

OAIValueRange OAIUpdateValuesResponse::getUpdatedData() const {
    return m_updated_data;
}
void OAIUpdateValuesResponse::setUpdatedData(const OAIValueRange &updated_data) {
    m_updated_data = updated_data;
    m_updated_data_isSet = true;
}

bool OAIUpdateValuesResponse::is_updated_data_Set() const{
    return m_updated_data_isSet;
}

bool OAIUpdateValuesResponse::is_updated_data_Valid() const{
    return m_updated_data_isValid;
}

QString OAIUpdateValuesResponse::getUpdatedRange() const {
    return m_updated_range;
}
void OAIUpdateValuesResponse::setUpdatedRange(const QString &updated_range) {
    m_updated_range = updated_range;
    m_updated_range_isSet = true;
}

bool OAIUpdateValuesResponse::is_updated_range_Set() const{
    return m_updated_range_isSet;
}

bool OAIUpdateValuesResponse::is_updated_range_Valid() const{
    return m_updated_range_isValid;
}

qint32 OAIUpdateValuesResponse::getUpdatedRows() const {
    return m_updated_rows;
}
void OAIUpdateValuesResponse::setUpdatedRows(const qint32 &updated_rows) {
    m_updated_rows = updated_rows;
    m_updated_rows_isSet = true;
}

bool OAIUpdateValuesResponse::is_updated_rows_Set() const{
    return m_updated_rows_isSet;
}

bool OAIUpdateValuesResponse::is_updated_rows_Valid() const{
    return m_updated_rows_isValid;
}

bool OAIUpdateValuesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_spreadsheet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_cells_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_columns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_rows_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateValuesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
