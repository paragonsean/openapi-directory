/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmbeddedObjectBorder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmbeddedObjectBorder::OAIEmbeddedObjectBorder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmbeddedObjectBorder::OAIEmbeddedObjectBorder() {
    this->initializeModel();
}

OAIEmbeddedObjectBorder::~OAIEmbeddedObjectBorder() {}

void OAIEmbeddedObjectBorder::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_color_style_isSet = false;
    m_color_style_isValid = false;
}

void OAIEmbeddedObjectBorder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmbeddedObjectBorder::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_color_style_isValid = ::OpenAPI::fromJsonValue(m_color_style, json[QString("colorStyle")]);
    m_color_style_isSet = !json[QString("colorStyle")].isNull() && m_color_style_isValid;
}

QString OAIEmbeddedObjectBorder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmbeddedObjectBorder::asJsonObject() const {
    QJsonObject obj;
    if (m_color.isSet()) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_color_style.isSet()) {
        obj.insert(QString("colorStyle"), ::OpenAPI::toJsonValue(m_color_style));
    }
    return obj;
}

OAIColor OAIEmbeddedObjectBorder::getColor() const {
    return m_color;
}
void OAIEmbeddedObjectBorder::setColor(const OAIColor &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIEmbeddedObjectBorder::is_color_Set() const{
    return m_color_isSet;
}

bool OAIEmbeddedObjectBorder::is_color_Valid() const{
    return m_color_isValid;
}

OAIColorStyle OAIEmbeddedObjectBorder::getColorStyle() const {
    return m_color_style;
}
void OAIEmbeddedObjectBorder::setColorStyle(const OAIColorStyle &color_style) {
    m_color_style = color_style;
    m_color_style_isSet = true;
}

bool OAIEmbeddedObjectBorder::is_color_style_Set() const{
    return m_color_style_isSet;
}

bool OAIEmbeddedObjectBorder::is_color_style_Valid() const{
    return m_color_style_isValid;
}

bool OAIEmbeddedObjectBorder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmbeddedObjectBorder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
