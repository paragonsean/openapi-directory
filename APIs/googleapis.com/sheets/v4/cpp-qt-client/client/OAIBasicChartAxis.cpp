/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBasicChartAxis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBasicChartAxis::OAIBasicChartAxis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBasicChartAxis::OAIBasicChartAxis() {
    this->initializeModel();
}

OAIBasicChartAxis::~OAIBasicChartAxis() {}

void OAIBasicChartAxis::initializeModel() {

    m_format_isSet = false;
    m_format_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_title_text_position_isSet = false;
    m_title_text_position_isValid = false;

    m_view_window_options_isSet = false;
    m_view_window_options_isValid = false;
}

void OAIBasicChartAxis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBasicChartAxis::fromJsonObject(QJsonObject json) {

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_title_text_position_isValid = ::OpenAPI::fromJsonValue(m_title_text_position, json[QString("titleTextPosition")]);
    m_title_text_position_isSet = !json[QString("titleTextPosition")].isNull() && m_title_text_position_isValid;

    m_view_window_options_isValid = ::OpenAPI::fromJsonValue(m_view_window_options, json[QString("viewWindowOptions")]);
    m_view_window_options_isSet = !json[QString("viewWindowOptions")].isNull() && m_view_window_options_isValid;
}

QString OAIBasicChartAxis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBasicChartAxis::asJsonObject() const {
    QJsonObject obj;
    if (m_format.isSet()) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_title_text_position.isSet()) {
        obj.insert(QString("titleTextPosition"), ::OpenAPI::toJsonValue(m_title_text_position));
    }
    if (m_view_window_options.isSet()) {
        obj.insert(QString("viewWindowOptions"), ::OpenAPI::toJsonValue(m_view_window_options));
    }
    return obj;
}

OAITextFormat OAIBasicChartAxis::getFormat() const {
    return m_format;
}
void OAIBasicChartAxis::setFormat(const OAITextFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIBasicChartAxis::is_format_Set() const{
    return m_format_isSet;
}

bool OAIBasicChartAxis::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIBasicChartAxis::getPosition() const {
    return m_position;
}
void OAIBasicChartAxis::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIBasicChartAxis::is_position_Set() const{
    return m_position_isSet;
}

bool OAIBasicChartAxis::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIBasicChartAxis::getTitle() const {
    return m_title;
}
void OAIBasicChartAxis::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIBasicChartAxis::is_title_Set() const{
    return m_title_isSet;
}

bool OAIBasicChartAxis::is_title_Valid() const{
    return m_title_isValid;
}

OAITextPosition OAIBasicChartAxis::getTitleTextPosition() const {
    return m_title_text_position;
}
void OAIBasicChartAxis::setTitleTextPosition(const OAITextPosition &title_text_position) {
    m_title_text_position = title_text_position;
    m_title_text_position_isSet = true;
}

bool OAIBasicChartAxis::is_title_text_position_Set() const{
    return m_title_text_position_isSet;
}

bool OAIBasicChartAxis::is_title_text_position_Valid() const{
    return m_title_text_position_isValid;
}

OAIChartAxisViewWindowOptions OAIBasicChartAxis::getViewWindowOptions() const {
    return m_view_window_options;
}
void OAIBasicChartAxis::setViewWindowOptions(const OAIChartAxisViewWindowOptions &view_window_options) {
    m_view_window_options = view_window_options;
    m_view_window_options_isSet = true;
}

bool OAIBasicChartAxis::is_view_window_options_Set() const{
    return m_view_window_options_isSet;
}

bool OAIBasicChartAxis::is_view_window_options_Valid() const{
    return m_view_window_options_isValid;
}

bool OAIBasicChartAxis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_text_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_window_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBasicChartAxis::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
