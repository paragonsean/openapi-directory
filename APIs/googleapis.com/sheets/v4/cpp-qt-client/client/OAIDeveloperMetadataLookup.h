/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeveloperMetadataLookup.h
 *
 * Selects DeveloperMetadata that matches all of the specified fields. For example, if only a metadata ID is specified this considers the DeveloperMetadata with that particular unique ID. If a metadata key is specified, this considers all developer metadata with that key. If a key, visibility, and location type are all specified, this considers all developer metadata with that key and visibility that are associated with a location of that type. In general, this selects all DeveloperMetadata that matches the intersection of all the specified fields; any field or combination of fields may be specified.
 */

#ifndef OAIDeveloperMetadataLookup_H
#define OAIDeveloperMetadataLookup_H

#include <QJsonObject>

#include "OAIDeveloperMetadataLocation.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDeveloperMetadataLocation;

class OAIDeveloperMetadataLookup : public OAIObject {
public:
    OAIDeveloperMetadataLookup();
    OAIDeveloperMetadataLookup(QString json);
    ~OAIDeveloperMetadataLookup() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLocationMatchingStrategy() const;
    void setLocationMatchingStrategy(const QString &location_matching_strategy);
    bool is_location_matching_strategy_Set() const;
    bool is_location_matching_strategy_Valid() const;

    QString getLocationType() const;
    void setLocationType(const QString &location_type);
    bool is_location_type_Set() const;
    bool is_location_type_Valid() const;

    qint32 getMetadataId() const;
    void setMetadataId(const qint32 &metadata_id);
    bool is_metadata_id_Set() const;
    bool is_metadata_id_Valid() const;

    QString getMetadataKey() const;
    void setMetadataKey(const QString &metadata_key);
    bool is_metadata_key_Set() const;
    bool is_metadata_key_Valid() const;

    OAIDeveloperMetadataLocation getMetadataLocation() const;
    void setMetadataLocation(const OAIDeveloperMetadataLocation &metadata_location);
    bool is_metadata_location_Set() const;
    bool is_metadata_location_Valid() const;

    QString getMetadataValue() const;
    void setMetadataValue(const QString &metadata_value);
    bool is_metadata_value_Set() const;
    bool is_metadata_value_Valid() const;

    QString getVisibility() const;
    void setVisibility(const QString &visibility);
    bool is_visibility_Set() const;
    bool is_visibility_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_location_matching_strategy;
    bool m_location_matching_strategy_isSet;
    bool m_location_matching_strategy_isValid;

    QString m_location_type;
    bool m_location_type_isSet;
    bool m_location_type_isValid;

    qint32 m_metadata_id;
    bool m_metadata_id_isSet;
    bool m_metadata_id_isValid;

    QString m_metadata_key;
    bool m_metadata_key_isSet;
    bool m_metadata_key_isValid;

    OAIDeveloperMetadataLocation m_metadata_location;
    bool m_metadata_location_isSet;
    bool m_metadata_location_isValid;

    QString m_metadata_value;
    bool m_metadata_value_isSet;
    bool m_metadata_value_isValid;

    QString m_visibility;
    bool m_visibility_isSet;
    bool m_visibility_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeveloperMetadataLookup)

#endif // OAIDeveloperMetadataLookup_H
