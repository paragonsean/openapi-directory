/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrgChartSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrgChartSpec::OAIOrgChartSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrgChartSpec::OAIOrgChartSpec() {
    this->initializeModel();
}

OAIOrgChartSpec::~OAIOrgChartSpec() {}

void OAIOrgChartSpec::initializeModel() {

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_node_color_isSet = false;
    m_node_color_isValid = false;

    m_node_color_style_isSet = false;
    m_node_color_style_isValid = false;

    m_node_size_isSet = false;
    m_node_size_isValid = false;

    m_parent_labels_isSet = false;
    m_parent_labels_isValid = false;

    m_selected_node_color_isSet = false;
    m_selected_node_color_isValid = false;

    m_selected_node_color_style_isSet = false;
    m_selected_node_color_style_isValid = false;

    m_tooltips_isSet = false;
    m_tooltips_isValid = false;
}

void OAIOrgChartSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrgChartSpec::fromJsonObject(QJsonObject json) {

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_node_color_isValid = ::OpenAPI::fromJsonValue(m_node_color, json[QString("nodeColor")]);
    m_node_color_isSet = !json[QString("nodeColor")].isNull() && m_node_color_isValid;

    m_node_color_style_isValid = ::OpenAPI::fromJsonValue(m_node_color_style, json[QString("nodeColorStyle")]);
    m_node_color_style_isSet = !json[QString("nodeColorStyle")].isNull() && m_node_color_style_isValid;

    m_node_size_isValid = ::OpenAPI::fromJsonValue(m_node_size, json[QString("nodeSize")]);
    m_node_size_isSet = !json[QString("nodeSize")].isNull() && m_node_size_isValid;

    m_parent_labels_isValid = ::OpenAPI::fromJsonValue(m_parent_labels, json[QString("parentLabels")]);
    m_parent_labels_isSet = !json[QString("parentLabels")].isNull() && m_parent_labels_isValid;

    m_selected_node_color_isValid = ::OpenAPI::fromJsonValue(m_selected_node_color, json[QString("selectedNodeColor")]);
    m_selected_node_color_isSet = !json[QString("selectedNodeColor")].isNull() && m_selected_node_color_isValid;

    m_selected_node_color_style_isValid = ::OpenAPI::fromJsonValue(m_selected_node_color_style, json[QString("selectedNodeColorStyle")]);
    m_selected_node_color_style_isSet = !json[QString("selectedNodeColorStyle")].isNull() && m_selected_node_color_style_isValid;

    m_tooltips_isValid = ::OpenAPI::fromJsonValue(m_tooltips, json[QString("tooltips")]);
    m_tooltips_isSet = !json[QString("tooltips")].isNull() && m_tooltips_isValid;
}

QString OAIOrgChartSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrgChartSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_labels.isSet()) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_node_color.isSet()) {
        obj.insert(QString("nodeColor"), ::OpenAPI::toJsonValue(m_node_color));
    }
    if (m_node_color_style.isSet()) {
        obj.insert(QString("nodeColorStyle"), ::OpenAPI::toJsonValue(m_node_color_style));
    }
    if (m_node_size_isSet) {
        obj.insert(QString("nodeSize"), ::OpenAPI::toJsonValue(m_node_size));
    }
    if (m_parent_labels.isSet()) {
        obj.insert(QString("parentLabels"), ::OpenAPI::toJsonValue(m_parent_labels));
    }
    if (m_selected_node_color.isSet()) {
        obj.insert(QString("selectedNodeColor"), ::OpenAPI::toJsonValue(m_selected_node_color));
    }
    if (m_selected_node_color_style.isSet()) {
        obj.insert(QString("selectedNodeColorStyle"), ::OpenAPI::toJsonValue(m_selected_node_color_style));
    }
    if (m_tooltips.isSet()) {
        obj.insert(QString("tooltips"), ::OpenAPI::toJsonValue(m_tooltips));
    }
    return obj;
}

OAIChartData OAIOrgChartSpec::getLabels() const {
    return m_labels;
}
void OAIOrgChartSpec::setLabels(const OAIChartData &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIOrgChartSpec::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIOrgChartSpec::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIColor OAIOrgChartSpec::getNodeColor() const {
    return m_node_color;
}
void OAIOrgChartSpec::setNodeColor(const OAIColor &node_color) {
    m_node_color = node_color;
    m_node_color_isSet = true;
}

bool OAIOrgChartSpec::is_node_color_Set() const{
    return m_node_color_isSet;
}

bool OAIOrgChartSpec::is_node_color_Valid() const{
    return m_node_color_isValid;
}

OAIColorStyle OAIOrgChartSpec::getNodeColorStyle() const {
    return m_node_color_style;
}
void OAIOrgChartSpec::setNodeColorStyle(const OAIColorStyle &node_color_style) {
    m_node_color_style = node_color_style;
    m_node_color_style_isSet = true;
}

bool OAIOrgChartSpec::is_node_color_style_Set() const{
    return m_node_color_style_isSet;
}

bool OAIOrgChartSpec::is_node_color_style_Valid() const{
    return m_node_color_style_isValid;
}

QString OAIOrgChartSpec::getNodeSize() const {
    return m_node_size;
}
void OAIOrgChartSpec::setNodeSize(const QString &node_size) {
    m_node_size = node_size;
    m_node_size_isSet = true;
}

bool OAIOrgChartSpec::is_node_size_Set() const{
    return m_node_size_isSet;
}

bool OAIOrgChartSpec::is_node_size_Valid() const{
    return m_node_size_isValid;
}

OAIChartData OAIOrgChartSpec::getParentLabels() const {
    return m_parent_labels;
}
void OAIOrgChartSpec::setParentLabels(const OAIChartData &parent_labels) {
    m_parent_labels = parent_labels;
    m_parent_labels_isSet = true;
}

bool OAIOrgChartSpec::is_parent_labels_Set() const{
    return m_parent_labels_isSet;
}

bool OAIOrgChartSpec::is_parent_labels_Valid() const{
    return m_parent_labels_isValid;
}

OAIColor OAIOrgChartSpec::getSelectedNodeColor() const {
    return m_selected_node_color;
}
void OAIOrgChartSpec::setSelectedNodeColor(const OAIColor &selected_node_color) {
    m_selected_node_color = selected_node_color;
    m_selected_node_color_isSet = true;
}

bool OAIOrgChartSpec::is_selected_node_color_Set() const{
    return m_selected_node_color_isSet;
}

bool OAIOrgChartSpec::is_selected_node_color_Valid() const{
    return m_selected_node_color_isValid;
}

OAIColorStyle OAIOrgChartSpec::getSelectedNodeColorStyle() const {
    return m_selected_node_color_style;
}
void OAIOrgChartSpec::setSelectedNodeColorStyle(const OAIColorStyle &selected_node_color_style) {
    m_selected_node_color_style = selected_node_color_style;
    m_selected_node_color_style_isSet = true;
}

bool OAIOrgChartSpec::is_selected_node_color_style_Set() const{
    return m_selected_node_color_style_isSet;
}

bool OAIOrgChartSpec::is_selected_node_color_style_Valid() const{
    return m_selected_node_color_style_isValid;
}

OAIChartData OAIOrgChartSpec::getTooltips() const {
    return m_tooltips;
}
void OAIOrgChartSpec::setTooltips(const OAIChartData &tooltips) {
    m_tooltips = tooltips;
    m_tooltips_isSet = true;
}

bool OAIOrgChartSpec::is_tooltips_Set() const{
    return m_tooltips_isSet;
}

bool OAIOrgChartSpec::is_tooltips_Valid() const{
    return m_tooltips_isValid;
}

bool OAIOrgChartSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_node_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_node_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tooltips.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrgChartSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
