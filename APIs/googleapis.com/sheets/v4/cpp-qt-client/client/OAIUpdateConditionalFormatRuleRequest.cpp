/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateConditionalFormatRuleRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateConditionalFormatRuleRequest::OAIUpdateConditionalFormatRuleRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateConditionalFormatRuleRequest::OAIUpdateConditionalFormatRuleRequest() {
    this->initializeModel();
}

OAIUpdateConditionalFormatRuleRequest::~OAIUpdateConditionalFormatRuleRequest() {}

void OAIUpdateConditionalFormatRuleRequest::initializeModel() {

    m_index_isSet = false;
    m_index_isValid = false;

    m_new_index_isSet = false;
    m_new_index_isValid = false;

    m_rule_isSet = false;
    m_rule_isValid = false;

    m_sheet_id_isSet = false;
    m_sheet_id_isValid = false;
}

void OAIUpdateConditionalFormatRuleRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateConditionalFormatRuleRequest::fromJsonObject(QJsonObject json) {

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_new_index_isValid = ::OpenAPI::fromJsonValue(m_new_index, json[QString("newIndex")]);
    m_new_index_isSet = !json[QString("newIndex")].isNull() && m_new_index_isValid;

    m_rule_isValid = ::OpenAPI::fromJsonValue(m_rule, json[QString("rule")]);
    m_rule_isSet = !json[QString("rule")].isNull() && m_rule_isValid;

    m_sheet_id_isValid = ::OpenAPI::fromJsonValue(m_sheet_id, json[QString("sheetId")]);
    m_sheet_id_isSet = !json[QString("sheetId")].isNull() && m_sheet_id_isValid;
}

QString OAIUpdateConditionalFormatRuleRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateConditionalFormatRuleRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_new_index_isSet) {
        obj.insert(QString("newIndex"), ::OpenAPI::toJsonValue(m_new_index));
    }
    if (m_rule.isSet()) {
        obj.insert(QString("rule"), ::OpenAPI::toJsonValue(m_rule));
    }
    if (m_sheet_id_isSet) {
        obj.insert(QString("sheetId"), ::OpenAPI::toJsonValue(m_sheet_id));
    }
    return obj;
}

qint32 OAIUpdateConditionalFormatRuleRequest::getIndex() const {
    return m_index;
}
void OAIUpdateConditionalFormatRuleRequest::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIUpdateConditionalFormatRuleRequest::is_index_Set() const{
    return m_index_isSet;
}

bool OAIUpdateConditionalFormatRuleRequest::is_index_Valid() const{
    return m_index_isValid;
}

qint32 OAIUpdateConditionalFormatRuleRequest::getNewIndex() const {
    return m_new_index;
}
void OAIUpdateConditionalFormatRuleRequest::setNewIndex(const qint32 &new_index) {
    m_new_index = new_index;
    m_new_index_isSet = true;
}

bool OAIUpdateConditionalFormatRuleRequest::is_new_index_Set() const{
    return m_new_index_isSet;
}

bool OAIUpdateConditionalFormatRuleRequest::is_new_index_Valid() const{
    return m_new_index_isValid;
}

OAIConditionalFormatRule OAIUpdateConditionalFormatRuleRequest::getRule() const {
    return m_rule;
}
void OAIUpdateConditionalFormatRuleRequest::setRule(const OAIConditionalFormatRule &rule) {
    m_rule = rule;
    m_rule_isSet = true;
}

bool OAIUpdateConditionalFormatRuleRequest::is_rule_Set() const{
    return m_rule_isSet;
}

bool OAIUpdateConditionalFormatRuleRequest::is_rule_Valid() const{
    return m_rule_isValid;
}

qint32 OAIUpdateConditionalFormatRuleRequest::getSheetId() const {
    return m_sheet_id;
}
void OAIUpdateConditionalFormatRuleRequest::setSheetId(const qint32 &sheet_id) {
    m_sheet_id = sheet_id;
    m_sheet_id_isSet = true;
}

bool OAIUpdateConditionalFormatRuleRequest::is_sheet_id_Set() const{
    return m_sheet_id_isSet;
}

bool OAIUpdateConditionalFormatRuleRequest::is_sheet_id_Valid() const{
    return m_sheet_id_isValid;
}

bool OAIUpdateConditionalFormatRuleRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheet_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateConditionalFormatRuleRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
