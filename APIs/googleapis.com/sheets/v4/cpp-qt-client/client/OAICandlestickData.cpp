/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICandlestickData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICandlestickData::OAICandlestickData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICandlestickData::OAICandlestickData() {
    this->initializeModel();
}

OAICandlestickData::~OAICandlestickData() {}

void OAICandlestickData::initializeModel() {

    m_close_series_isSet = false;
    m_close_series_isValid = false;

    m_high_series_isSet = false;
    m_high_series_isValid = false;

    m_low_series_isSet = false;
    m_low_series_isValid = false;

    m_open_series_isSet = false;
    m_open_series_isValid = false;
}

void OAICandlestickData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICandlestickData::fromJsonObject(QJsonObject json) {

    m_close_series_isValid = ::OpenAPI::fromJsonValue(m_close_series, json[QString("closeSeries")]);
    m_close_series_isSet = !json[QString("closeSeries")].isNull() && m_close_series_isValid;

    m_high_series_isValid = ::OpenAPI::fromJsonValue(m_high_series, json[QString("highSeries")]);
    m_high_series_isSet = !json[QString("highSeries")].isNull() && m_high_series_isValid;

    m_low_series_isValid = ::OpenAPI::fromJsonValue(m_low_series, json[QString("lowSeries")]);
    m_low_series_isSet = !json[QString("lowSeries")].isNull() && m_low_series_isValid;

    m_open_series_isValid = ::OpenAPI::fromJsonValue(m_open_series, json[QString("openSeries")]);
    m_open_series_isSet = !json[QString("openSeries")].isNull() && m_open_series_isValid;
}

QString OAICandlestickData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICandlestickData::asJsonObject() const {
    QJsonObject obj;
    if (m_close_series.isSet()) {
        obj.insert(QString("closeSeries"), ::OpenAPI::toJsonValue(m_close_series));
    }
    if (m_high_series.isSet()) {
        obj.insert(QString("highSeries"), ::OpenAPI::toJsonValue(m_high_series));
    }
    if (m_low_series.isSet()) {
        obj.insert(QString("lowSeries"), ::OpenAPI::toJsonValue(m_low_series));
    }
    if (m_open_series.isSet()) {
        obj.insert(QString("openSeries"), ::OpenAPI::toJsonValue(m_open_series));
    }
    return obj;
}

OAICandlestickSeries OAICandlestickData::getCloseSeries() const {
    return m_close_series;
}
void OAICandlestickData::setCloseSeries(const OAICandlestickSeries &close_series) {
    m_close_series = close_series;
    m_close_series_isSet = true;
}

bool OAICandlestickData::is_close_series_Set() const{
    return m_close_series_isSet;
}

bool OAICandlestickData::is_close_series_Valid() const{
    return m_close_series_isValid;
}

OAICandlestickSeries OAICandlestickData::getHighSeries() const {
    return m_high_series;
}
void OAICandlestickData::setHighSeries(const OAICandlestickSeries &high_series) {
    m_high_series = high_series;
    m_high_series_isSet = true;
}

bool OAICandlestickData::is_high_series_Set() const{
    return m_high_series_isSet;
}

bool OAICandlestickData::is_high_series_Valid() const{
    return m_high_series_isValid;
}

OAICandlestickSeries OAICandlestickData::getLowSeries() const {
    return m_low_series;
}
void OAICandlestickData::setLowSeries(const OAICandlestickSeries &low_series) {
    m_low_series = low_series;
    m_low_series_isSet = true;
}

bool OAICandlestickData::is_low_series_Set() const{
    return m_low_series_isSet;
}

bool OAICandlestickData::is_low_series_Valid() const{
    return m_low_series_isValid;
}

OAICandlestickSeries OAICandlestickData::getOpenSeries() const {
    return m_open_series;
}
void OAICandlestickData::setOpenSeries(const OAICandlestickSeries &open_series) {
    m_open_series = open_series;
    m_open_series_isSet = true;
}

bool OAICandlestickData::is_open_series_Set() const{
    return m_open_series_isSet;
}

bool OAICandlestickData::is_open_series_Valid() const{
    return m_open_series_isValid;
}

bool OAICandlestickData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_close_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_series.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICandlestickData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
