/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSource::OAIDataSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSource::OAIDataSource() {
    this->initializeModel();
}

OAIDataSource::~OAIDataSource() {}

void OAIDataSource::initializeModel() {

    m_calculated_columns_isSet = false;
    m_calculated_columns_isValid = false;

    m_data_source_id_isSet = false;
    m_data_source_id_isValid = false;

    m_sheet_id_isSet = false;
    m_sheet_id_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;
}

void OAIDataSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSource::fromJsonObject(QJsonObject json) {

    m_calculated_columns_isValid = ::OpenAPI::fromJsonValue(m_calculated_columns, json[QString("calculatedColumns")]);
    m_calculated_columns_isSet = !json[QString("calculatedColumns")].isNull() && m_calculated_columns_isValid;

    m_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_id, json[QString("dataSourceId")]);
    m_data_source_id_isSet = !json[QString("dataSourceId")].isNull() && m_data_source_id_isValid;

    m_sheet_id_isValid = ::OpenAPI::fromJsonValue(m_sheet_id, json[QString("sheetId")]);
    m_sheet_id_isSet = !json[QString("sheetId")].isNull() && m_sheet_id_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;
}

QString OAIDataSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSource::asJsonObject() const {
    QJsonObject obj;
    if (m_calculated_columns.size() > 0) {
        obj.insert(QString("calculatedColumns"), ::OpenAPI::toJsonValue(m_calculated_columns));
    }
    if (m_data_source_id_isSet) {
        obj.insert(QString("dataSourceId"), ::OpenAPI::toJsonValue(m_data_source_id));
    }
    if (m_sheet_id_isSet) {
        obj.insert(QString("sheetId"), ::OpenAPI::toJsonValue(m_sheet_id));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    return obj;
}

QList<OAIDataSourceColumn> OAIDataSource::getCalculatedColumns() const {
    return m_calculated_columns;
}
void OAIDataSource::setCalculatedColumns(const QList<OAIDataSourceColumn> &calculated_columns) {
    m_calculated_columns = calculated_columns;
    m_calculated_columns_isSet = true;
}

bool OAIDataSource::is_calculated_columns_Set() const{
    return m_calculated_columns_isSet;
}

bool OAIDataSource::is_calculated_columns_Valid() const{
    return m_calculated_columns_isValid;
}

QString OAIDataSource::getDataSourceId() const {
    return m_data_source_id;
}
void OAIDataSource::setDataSourceId(const QString &data_source_id) {
    m_data_source_id = data_source_id;
    m_data_source_id_isSet = true;
}

bool OAIDataSource::is_data_source_id_Set() const{
    return m_data_source_id_isSet;
}

bool OAIDataSource::is_data_source_id_Valid() const{
    return m_data_source_id_isValid;
}

qint32 OAIDataSource::getSheetId() const {
    return m_sheet_id;
}
void OAIDataSource::setSheetId(const qint32 &sheet_id) {
    m_sheet_id = sheet_id;
    m_sheet_id_isSet = true;
}

bool OAIDataSource::is_sheet_id_Set() const{
    return m_sheet_id_isSet;
}

bool OAIDataSource::is_sheet_id_Valid() const{
    return m_sheet_id_isValid;
}

OAIDataSourceSpec OAIDataSource::getSpec() const {
    return m_spec;
}
void OAIDataSource::setSpec(const OAIDataSourceSpec &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAIDataSource::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAIDataSource::is_spec_Valid() const{
    return m_spec_isValid;
}

bool OAIDataSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calculated_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
