/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBubbleChartSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBubbleChartSpec::OAIBubbleChartSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBubbleChartSpec::OAIBubbleChartSpec() {
    this->initializeModel();
}

OAIBubbleChartSpec::~OAIBubbleChartSpec() {}

void OAIBubbleChartSpec::initializeModel() {

    m_bubble_border_color_isSet = false;
    m_bubble_border_color_isValid = false;

    m_bubble_border_color_style_isSet = false;
    m_bubble_border_color_style_isValid = false;

    m_bubble_labels_isSet = false;
    m_bubble_labels_isValid = false;

    m_bubble_max_radius_size_isSet = false;
    m_bubble_max_radius_size_isValid = false;

    m_bubble_min_radius_size_isSet = false;
    m_bubble_min_radius_size_isValid = false;

    m_bubble_opacity_isSet = false;
    m_bubble_opacity_isValid = false;

    m_bubble_sizes_isSet = false;
    m_bubble_sizes_isValid = false;

    m_bubble_text_style_isSet = false;
    m_bubble_text_style_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_group_ids_isSet = false;
    m_group_ids_isValid = false;

    m_legend_position_isSet = false;
    m_legend_position_isValid = false;

    m_series_isSet = false;
    m_series_isValid = false;
}

void OAIBubbleChartSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBubbleChartSpec::fromJsonObject(QJsonObject json) {

    m_bubble_border_color_isValid = ::OpenAPI::fromJsonValue(m_bubble_border_color, json[QString("bubbleBorderColor")]);
    m_bubble_border_color_isSet = !json[QString("bubbleBorderColor")].isNull() && m_bubble_border_color_isValid;

    m_bubble_border_color_style_isValid = ::OpenAPI::fromJsonValue(m_bubble_border_color_style, json[QString("bubbleBorderColorStyle")]);
    m_bubble_border_color_style_isSet = !json[QString("bubbleBorderColorStyle")].isNull() && m_bubble_border_color_style_isValid;

    m_bubble_labels_isValid = ::OpenAPI::fromJsonValue(m_bubble_labels, json[QString("bubbleLabels")]);
    m_bubble_labels_isSet = !json[QString("bubbleLabels")].isNull() && m_bubble_labels_isValid;

    m_bubble_max_radius_size_isValid = ::OpenAPI::fromJsonValue(m_bubble_max_radius_size, json[QString("bubbleMaxRadiusSize")]);
    m_bubble_max_radius_size_isSet = !json[QString("bubbleMaxRadiusSize")].isNull() && m_bubble_max_radius_size_isValid;

    m_bubble_min_radius_size_isValid = ::OpenAPI::fromJsonValue(m_bubble_min_radius_size, json[QString("bubbleMinRadiusSize")]);
    m_bubble_min_radius_size_isSet = !json[QString("bubbleMinRadiusSize")].isNull() && m_bubble_min_radius_size_isValid;

    m_bubble_opacity_isValid = ::OpenAPI::fromJsonValue(m_bubble_opacity, json[QString("bubbleOpacity")]);
    m_bubble_opacity_isSet = !json[QString("bubbleOpacity")].isNull() && m_bubble_opacity_isValid;

    m_bubble_sizes_isValid = ::OpenAPI::fromJsonValue(m_bubble_sizes, json[QString("bubbleSizes")]);
    m_bubble_sizes_isSet = !json[QString("bubbleSizes")].isNull() && m_bubble_sizes_isValid;

    m_bubble_text_style_isValid = ::OpenAPI::fromJsonValue(m_bubble_text_style, json[QString("bubbleTextStyle")]);
    m_bubble_text_style_isSet = !json[QString("bubbleTextStyle")].isNull() && m_bubble_text_style_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_group_ids_isValid = ::OpenAPI::fromJsonValue(m_group_ids, json[QString("groupIds")]);
    m_group_ids_isSet = !json[QString("groupIds")].isNull() && m_group_ids_isValid;

    m_legend_position_isValid = ::OpenAPI::fromJsonValue(m_legend_position, json[QString("legendPosition")]);
    m_legend_position_isSet = !json[QString("legendPosition")].isNull() && m_legend_position_isValid;

    m_series_isValid = ::OpenAPI::fromJsonValue(m_series, json[QString("series")]);
    m_series_isSet = !json[QString("series")].isNull() && m_series_isValid;
}

QString OAIBubbleChartSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBubbleChartSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_bubble_border_color.isSet()) {
        obj.insert(QString("bubbleBorderColor"), ::OpenAPI::toJsonValue(m_bubble_border_color));
    }
    if (m_bubble_border_color_style.isSet()) {
        obj.insert(QString("bubbleBorderColorStyle"), ::OpenAPI::toJsonValue(m_bubble_border_color_style));
    }
    if (m_bubble_labels.isSet()) {
        obj.insert(QString("bubbleLabels"), ::OpenAPI::toJsonValue(m_bubble_labels));
    }
    if (m_bubble_max_radius_size_isSet) {
        obj.insert(QString("bubbleMaxRadiusSize"), ::OpenAPI::toJsonValue(m_bubble_max_radius_size));
    }
    if (m_bubble_min_radius_size_isSet) {
        obj.insert(QString("bubbleMinRadiusSize"), ::OpenAPI::toJsonValue(m_bubble_min_radius_size));
    }
    if (m_bubble_opacity_isSet) {
        obj.insert(QString("bubbleOpacity"), ::OpenAPI::toJsonValue(m_bubble_opacity));
    }
    if (m_bubble_sizes.isSet()) {
        obj.insert(QString("bubbleSizes"), ::OpenAPI::toJsonValue(m_bubble_sizes));
    }
    if (m_bubble_text_style.isSet()) {
        obj.insert(QString("bubbleTextStyle"), ::OpenAPI::toJsonValue(m_bubble_text_style));
    }
    if (m_domain.isSet()) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_group_ids.isSet()) {
        obj.insert(QString("groupIds"), ::OpenAPI::toJsonValue(m_group_ids));
    }
    if (m_legend_position_isSet) {
        obj.insert(QString("legendPosition"), ::OpenAPI::toJsonValue(m_legend_position));
    }
    if (m_series.isSet()) {
        obj.insert(QString("series"), ::OpenAPI::toJsonValue(m_series));
    }
    return obj;
}

OAIColor OAIBubbleChartSpec::getBubbleBorderColor() const {
    return m_bubble_border_color;
}
void OAIBubbleChartSpec::setBubbleBorderColor(const OAIColor &bubble_border_color) {
    m_bubble_border_color = bubble_border_color;
    m_bubble_border_color_isSet = true;
}

bool OAIBubbleChartSpec::is_bubble_border_color_Set() const{
    return m_bubble_border_color_isSet;
}

bool OAIBubbleChartSpec::is_bubble_border_color_Valid() const{
    return m_bubble_border_color_isValid;
}

OAIColorStyle OAIBubbleChartSpec::getBubbleBorderColorStyle() const {
    return m_bubble_border_color_style;
}
void OAIBubbleChartSpec::setBubbleBorderColorStyle(const OAIColorStyle &bubble_border_color_style) {
    m_bubble_border_color_style = bubble_border_color_style;
    m_bubble_border_color_style_isSet = true;
}

bool OAIBubbleChartSpec::is_bubble_border_color_style_Set() const{
    return m_bubble_border_color_style_isSet;
}

bool OAIBubbleChartSpec::is_bubble_border_color_style_Valid() const{
    return m_bubble_border_color_style_isValid;
}

OAIChartData OAIBubbleChartSpec::getBubbleLabels() const {
    return m_bubble_labels;
}
void OAIBubbleChartSpec::setBubbleLabels(const OAIChartData &bubble_labels) {
    m_bubble_labels = bubble_labels;
    m_bubble_labels_isSet = true;
}

bool OAIBubbleChartSpec::is_bubble_labels_Set() const{
    return m_bubble_labels_isSet;
}

bool OAIBubbleChartSpec::is_bubble_labels_Valid() const{
    return m_bubble_labels_isValid;
}

qint32 OAIBubbleChartSpec::getBubbleMaxRadiusSize() const {
    return m_bubble_max_radius_size;
}
void OAIBubbleChartSpec::setBubbleMaxRadiusSize(const qint32 &bubble_max_radius_size) {
    m_bubble_max_radius_size = bubble_max_radius_size;
    m_bubble_max_radius_size_isSet = true;
}

bool OAIBubbleChartSpec::is_bubble_max_radius_size_Set() const{
    return m_bubble_max_radius_size_isSet;
}

bool OAIBubbleChartSpec::is_bubble_max_radius_size_Valid() const{
    return m_bubble_max_radius_size_isValid;
}

qint32 OAIBubbleChartSpec::getBubbleMinRadiusSize() const {
    return m_bubble_min_radius_size;
}
void OAIBubbleChartSpec::setBubbleMinRadiusSize(const qint32 &bubble_min_radius_size) {
    m_bubble_min_radius_size = bubble_min_radius_size;
    m_bubble_min_radius_size_isSet = true;
}

bool OAIBubbleChartSpec::is_bubble_min_radius_size_Set() const{
    return m_bubble_min_radius_size_isSet;
}

bool OAIBubbleChartSpec::is_bubble_min_radius_size_Valid() const{
    return m_bubble_min_radius_size_isValid;
}

float OAIBubbleChartSpec::getBubbleOpacity() const {
    return m_bubble_opacity;
}
void OAIBubbleChartSpec::setBubbleOpacity(const float &bubble_opacity) {
    m_bubble_opacity = bubble_opacity;
    m_bubble_opacity_isSet = true;
}

bool OAIBubbleChartSpec::is_bubble_opacity_Set() const{
    return m_bubble_opacity_isSet;
}

bool OAIBubbleChartSpec::is_bubble_opacity_Valid() const{
    return m_bubble_opacity_isValid;
}

OAIChartData OAIBubbleChartSpec::getBubbleSizes() const {
    return m_bubble_sizes;
}
void OAIBubbleChartSpec::setBubbleSizes(const OAIChartData &bubble_sizes) {
    m_bubble_sizes = bubble_sizes;
    m_bubble_sizes_isSet = true;
}

bool OAIBubbleChartSpec::is_bubble_sizes_Set() const{
    return m_bubble_sizes_isSet;
}

bool OAIBubbleChartSpec::is_bubble_sizes_Valid() const{
    return m_bubble_sizes_isValid;
}

OAITextFormat OAIBubbleChartSpec::getBubbleTextStyle() const {
    return m_bubble_text_style;
}
void OAIBubbleChartSpec::setBubbleTextStyle(const OAITextFormat &bubble_text_style) {
    m_bubble_text_style = bubble_text_style;
    m_bubble_text_style_isSet = true;
}

bool OAIBubbleChartSpec::is_bubble_text_style_Set() const{
    return m_bubble_text_style_isSet;
}

bool OAIBubbleChartSpec::is_bubble_text_style_Valid() const{
    return m_bubble_text_style_isValid;
}

OAIChartData OAIBubbleChartSpec::getDomain() const {
    return m_domain;
}
void OAIBubbleChartSpec::setDomain(const OAIChartData &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIBubbleChartSpec::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIBubbleChartSpec::is_domain_Valid() const{
    return m_domain_isValid;
}

OAIChartData OAIBubbleChartSpec::getGroupIds() const {
    return m_group_ids;
}
void OAIBubbleChartSpec::setGroupIds(const OAIChartData &group_ids) {
    m_group_ids = group_ids;
    m_group_ids_isSet = true;
}

bool OAIBubbleChartSpec::is_group_ids_Set() const{
    return m_group_ids_isSet;
}

bool OAIBubbleChartSpec::is_group_ids_Valid() const{
    return m_group_ids_isValid;
}

QString OAIBubbleChartSpec::getLegendPosition() const {
    return m_legend_position;
}
void OAIBubbleChartSpec::setLegendPosition(const QString &legend_position) {
    m_legend_position = legend_position;
    m_legend_position_isSet = true;
}

bool OAIBubbleChartSpec::is_legend_position_Set() const{
    return m_legend_position_isSet;
}

bool OAIBubbleChartSpec::is_legend_position_Valid() const{
    return m_legend_position_isValid;
}

OAIChartData OAIBubbleChartSpec::getSeries() const {
    return m_series;
}
void OAIBubbleChartSpec::setSeries(const OAIChartData &series) {
    m_series = series;
    m_series_isSet = true;
}

bool OAIBubbleChartSpec::is_series_Set() const{
    return m_series_isSet;
}

bool OAIBubbleChartSpec::is_series_Valid() const{
    return m_series_isValid;
}

bool OAIBubbleChartSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bubble_border_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bubble_border_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bubble_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bubble_max_radius_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bubble_min_radius_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bubble_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bubble_sizes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bubble_text_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBubbleChartSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
