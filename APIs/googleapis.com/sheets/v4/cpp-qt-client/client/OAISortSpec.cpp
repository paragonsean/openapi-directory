/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISortSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISortSpec::OAISortSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISortSpec::OAISortSpec() {
    this->initializeModel();
}

OAISortSpec::~OAISortSpec() {}

void OAISortSpec::initializeModel() {

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_background_color_style_isSet = false;
    m_background_color_style_isValid = false;

    m_data_source_column_reference_isSet = false;
    m_data_source_column_reference_isValid = false;

    m_dimension_index_isSet = false;
    m_dimension_index_isValid = false;

    m_foreground_color_isSet = false;
    m_foreground_color_isValid = false;

    m_foreground_color_style_isSet = false;
    m_foreground_color_style_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAISortSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISortSpec::fromJsonObject(QJsonObject json) {

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("backgroundColor")]);
    m_background_color_isSet = !json[QString("backgroundColor")].isNull() && m_background_color_isValid;

    m_background_color_style_isValid = ::OpenAPI::fromJsonValue(m_background_color_style, json[QString("backgroundColorStyle")]);
    m_background_color_style_isSet = !json[QString("backgroundColorStyle")].isNull() && m_background_color_style_isValid;

    m_data_source_column_reference_isValid = ::OpenAPI::fromJsonValue(m_data_source_column_reference, json[QString("dataSourceColumnReference")]);
    m_data_source_column_reference_isSet = !json[QString("dataSourceColumnReference")].isNull() && m_data_source_column_reference_isValid;

    m_dimension_index_isValid = ::OpenAPI::fromJsonValue(m_dimension_index, json[QString("dimensionIndex")]);
    m_dimension_index_isSet = !json[QString("dimensionIndex")].isNull() && m_dimension_index_isValid;

    m_foreground_color_isValid = ::OpenAPI::fromJsonValue(m_foreground_color, json[QString("foregroundColor")]);
    m_foreground_color_isSet = !json[QString("foregroundColor")].isNull() && m_foreground_color_isValid;

    m_foreground_color_style_isValid = ::OpenAPI::fromJsonValue(m_foreground_color_style, json[QString("foregroundColorStyle")]);
    m_foreground_color_style_isSet = !json[QString("foregroundColorStyle")].isNull() && m_foreground_color_style_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;
}

QString OAISortSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISortSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_background_color.isSet()) {
        obj.insert(QString("backgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_background_color_style.isSet()) {
        obj.insert(QString("backgroundColorStyle"), ::OpenAPI::toJsonValue(m_background_color_style));
    }
    if (m_data_source_column_reference.isSet()) {
        obj.insert(QString("dataSourceColumnReference"), ::OpenAPI::toJsonValue(m_data_source_column_reference));
    }
    if (m_dimension_index_isSet) {
        obj.insert(QString("dimensionIndex"), ::OpenAPI::toJsonValue(m_dimension_index));
    }
    if (m_foreground_color.isSet()) {
        obj.insert(QString("foregroundColor"), ::OpenAPI::toJsonValue(m_foreground_color));
    }
    if (m_foreground_color_style.isSet()) {
        obj.insert(QString("foregroundColorStyle"), ::OpenAPI::toJsonValue(m_foreground_color_style));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

OAIColor OAISortSpec::getBackgroundColor() const {
    return m_background_color;
}
void OAISortSpec::setBackgroundColor(const OAIColor &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAISortSpec::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAISortSpec::is_background_color_Valid() const{
    return m_background_color_isValid;
}

OAIColorStyle OAISortSpec::getBackgroundColorStyle() const {
    return m_background_color_style;
}
void OAISortSpec::setBackgroundColorStyle(const OAIColorStyle &background_color_style) {
    m_background_color_style = background_color_style;
    m_background_color_style_isSet = true;
}

bool OAISortSpec::is_background_color_style_Set() const{
    return m_background_color_style_isSet;
}

bool OAISortSpec::is_background_color_style_Valid() const{
    return m_background_color_style_isValid;
}

OAIDataSourceColumnReference OAISortSpec::getDataSourceColumnReference() const {
    return m_data_source_column_reference;
}
void OAISortSpec::setDataSourceColumnReference(const OAIDataSourceColumnReference &data_source_column_reference) {
    m_data_source_column_reference = data_source_column_reference;
    m_data_source_column_reference_isSet = true;
}

bool OAISortSpec::is_data_source_column_reference_Set() const{
    return m_data_source_column_reference_isSet;
}

bool OAISortSpec::is_data_source_column_reference_Valid() const{
    return m_data_source_column_reference_isValid;
}

qint32 OAISortSpec::getDimensionIndex() const {
    return m_dimension_index;
}
void OAISortSpec::setDimensionIndex(const qint32 &dimension_index) {
    m_dimension_index = dimension_index;
    m_dimension_index_isSet = true;
}

bool OAISortSpec::is_dimension_index_Set() const{
    return m_dimension_index_isSet;
}

bool OAISortSpec::is_dimension_index_Valid() const{
    return m_dimension_index_isValid;
}

OAIColor OAISortSpec::getForegroundColor() const {
    return m_foreground_color;
}
void OAISortSpec::setForegroundColor(const OAIColor &foreground_color) {
    m_foreground_color = foreground_color;
    m_foreground_color_isSet = true;
}

bool OAISortSpec::is_foreground_color_Set() const{
    return m_foreground_color_isSet;
}

bool OAISortSpec::is_foreground_color_Valid() const{
    return m_foreground_color_isValid;
}

OAIColorStyle OAISortSpec::getForegroundColorStyle() const {
    return m_foreground_color_style;
}
void OAISortSpec::setForegroundColorStyle(const OAIColorStyle &foreground_color_style) {
    m_foreground_color_style = foreground_color_style;
    m_foreground_color_style_isSet = true;
}

bool OAISortSpec::is_foreground_color_style_Set() const{
    return m_foreground_color_style_isSet;
}

bool OAISortSpec::is_foreground_color_style_Valid() const{
    return m_foreground_color_style_isValid;
}

QString OAISortSpec::getSortOrder() const {
    return m_sort_order;
}
void OAISortSpec::setSortOrder(const QString &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAISortSpec::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAISortSpec::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAISortSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_column_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foreground_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_foreground_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISortSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
