/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchUpdateValuesByDataFilterRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchUpdateValuesByDataFilterRequest::OAIBatchUpdateValuesByDataFilterRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchUpdateValuesByDataFilterRequest::OAIBatchUpdateValuesByDataFilterRequest() {
    this->initializeModel();
}

OAIBatchUpdateValuesByDataFilterRequest::~OAIBatchUpdateValuesByDataFilterRequest() {}

void OAIBatchUpdateValuesByDataFilterRequest::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_include_values_in_response_isSet = false;
    m_include_values_in_response_isValid = false;

    m_response_date_time_render_option_isSet = false;
    m_response_date_time_render_option_isValid = false;

    m_response_value_render_option_isSet = false;
    m_response_value_render_option_isValid = false;

    m_value_input_option_isSet = false;
    m_value_input_option_isValid = false;
}

void OAIBatchUpdateValuesByDataFilterRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchUpdateValuesByDataFilterRequest::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_include_values_in_response_isValid = ::OpenAPI::fromJsonValue(m_include_values_in_response, json[QString("includeValuesInResponse")]);
    m_include_values_in_response_isSet = !json[QString("includeValuesInResponse")].isNull() && m_include_values_in_response_isValid;

    m_response_date_time_render_option_isValid = ::OpenAPI::fromJsonValue(m_response_date_time_render_option, json[QString("responseDateTimeRenderOption")]);
    m_response_date_time_render_option_isSet = !json[QString("responseDateTimeRenderOption")].isNull() && m_response_date_time_render_option_isValid;

    m_response_value_render_option_isValid = ::OpenAPI::fromJsonValue(m_response_value_render_option, json[QString("responseValueRenderOption")]);
    m_response_value_render_option_isSet = !json[QString("responseValueRenderOption")].isNull() && m_response_value_render_option_isValid;

    m_value_input_option_isValid = ::OpenAPI::fromJsonValue(m_value_input_option, json[QString("valueInputOption")]);
    m_value_input_option_isSet = !json[QString("valueInputOption")].isNull() && m_value_input_option_isValid;
}

QString OAIBatchUpdateValuesByDataFilterRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchUpdateValuesByDataFilterRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_include_values_in_response_isSet) {
        obj.insert(QString("includeValuesInResponse"), ::OpenAPI::toJsonValue(m_include_values_in_response));
    }
    if (m_response_date_time_render_option_isSet) {
        obj.insert(QString("responseDateTimeRenderOption"), ::OpenAPI::toJsonValue(m_response_date_time_render_option));
    }
    if (m_response_value_render_option_isSet) {
        obj.insert(QString("responseValueRenderOption"), ::OpenAPI::toJsonValue(m_response_value_render_option));
    }
    if (m_value_input_option_isSet) {
        obj.insert(QString("valueInputOption"), ::OpenAPI::toJsonValue(m_value_input_option));
    }
    return obj;
}

QList<OAIDataFilterValueRange> OAIBatchUpdateValuesByDataFilterRequest::getData() const {
    return m_data;
}
void OAIBatchUpdateValuesByDataFilterRequest::setData(const QList<OAIDataFilterValueRange> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIBatchUpdateValuesByDataFilterRequest::is_data_Set() const{
    return m_data_isSet;
}

bool OAIBatchUpdateValuesByDataFilterRequest::is_data_Valid() const{
    return m_data_isValid;
}

bool OAIBatchUpdateValuesByDataFilterRequest::isIncludeValuesInResponse() const {
    return m_include_values_in_response;
}
void OAIBatchUpdateValuesByDataFilterRequest::setIncludeValuesInResponse(const bool &include_values_in_response) {
    m_include_values_in_response = include_values_in_response;
    m_include_values_in_response_isSet = true;
}

bool OAIBatchUpdateValuesByDataFilterRequest::is_include_values_in_response_Set() const{
    return m_include_values_in_response_isSet;
}

bool OAIBatchUpdateValuesByDataFilterRequest::is_include_values_in_response_Valid() const{
    return m_include_values_in_response_isValid;
}

QString OAIBatchUpdateValuesByDataFilterRequest::getResponseDateTimeRenderOption() const {
    return m_response_date_time_render_option;
}
void OAIBatchUpdateValuesByDataFilterRequest::setResponseDateTimeRenderOption(const QString &response_date_time_render_option) {
    m_response_date_time_render_option = response_date_time_render_option;
    m_response_date_time_render_option_isSet = true;
}

bool OAIBatchUpdateValuesByDataFilterRequest::is_response_date_time_render_option_Set() const{
    return m_response_date_time_render_option_isSet;
}

bool OAIBatchUpdateValuesByDataFilterRequest::is_response_date_time_render_option_Valid() const{
    return m_response_date_time_render_option_isValid;
}

QString OAIBatchUpdateValuesByDataFilterRequest::getResponseValueRenderOption() const {
    return m_response_value_render_option;
}
void OAIBatchUpdateValuesByDataFilterRequest::setResponseValueRenderOption(const QString &response_value_render_option) {
    m_response_value_render_option = response_value_render_option;
    m_response_value_render_option_isSet = true;
}

bool OAIBatchUpdateValuesByDataFilterRequest::is_response_value_render_option_Set() const{
    return m_response_value_render_option_isSet;
}

bool OAIBatchUpdateValuesByDataFilterRequest::is_response_value_render_option_Valid() const{
    return m_response_value_render_option_isValid;
}

QString OAIBatchUpdateValuesByDataFilterRequest::getValueInputOption() const {
    return m_value_input_option;
}
void OAIBatchUpdateValuesByDataFilterRequest::setValueInputOption(const QString &value_input_option) {
    m_value_input_option = value_input_option;
    m_value_input_option_isSet = true;
}

bool OAIBatchUpdateValuesByDataFilterRequest::is_value_input_option_Set() const{
    return m_value_input_option_isSet;
}

bool OAIBatchUpdateValuesByDataFilterRequest::is_value_input_option_Valid() const{
    return m_value_input_option_isValid;
}

bool OAIBatchUpdateValuesByDataFilterRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_values_in_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_date_time_render_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_value_render_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_input_option_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchUpdateValuesByDataFilterRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
