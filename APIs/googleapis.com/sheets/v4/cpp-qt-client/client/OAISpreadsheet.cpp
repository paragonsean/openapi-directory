/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpreadsheet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpreadsheet::OAISpreadsheet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpreadsheet::OAISpreadsheet() {
    this->initializeModel();
}

OAISpreadsheet::~OAISpreadsheet() {}

void OAISpreadsheet::initializeModel() {

    m_data_source_schedules_isSet = false;
    m_data_source_schedules_isValid = false;

    m_data_sources_isSet = false;
    m_data_sources_isValid = false;

    m_developer_metadata_isSet = false;
    m_developer_metadata_isValid = false;

    m_named_ranges_isSet = false;
    m_named_ranges_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_sheets_isSet = false;
    m_sheets_isValid = false;

    m_spreadsheet_id_isSet = false;
    m_spreadsheet_id_isValid = false;

    m_spreadsheet_url_isSet = false;
    m_spreadsheet_url_isValid = false;
}

void OAISpreadsheet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpreadsheet::fromJsonObject(QJsonObject json) {

    m_data_source_schedules_isValid = ::OpenAPI::fromJsonValue(m_data_source_schedules, json[QString("dataSourceSchedules")]);
    m_data_source_schedules_isSet = !json[QString("dataSourceSchedules")].isNull() && m_data_source_schedules_isValid;

    m_data_sources_isValid = ::OpenAPI::fromJsonValue(m_data_sources, json[QString("dataSources")]);
    m_data_sources_isSet = !json[QString("dataSources")].isNull() && m_data_sources_isValid;

    m_developer_metadata_isValid = ::OpenAPI::fromJsonValue(m_developer_metadata, json[QString("developerMetadata")]);
    m_developer_metadata_isSet = !json[QString("developerMetadata")].isNull() && m_developer_metadata_isValid;

    m_named_ranges_isValid = ::OpenAPI::fromJsonValue(m_named_ranges, json[QString("namedRanges")]);
    m_named_ranges_isSet = !json[QString("namedRanges")].isNull() && m_named_ranges_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_sheets_isValid = ::OpenAPI::fromJsonValue(m_sheets, json[QString("sheets")]);
    m_sheets_isSet = !json[QString("sheets")].isNull() && m_sheets_isValid;

    m_spreadsheet_id_isValid = ::OpenAPI::fromJsonValue(m_spreadsheet_id, json[QString("spreadsheetId")]);
    m_spreadsheet_id_isSet = !json[QString("spreadsheetId")].isNull() && m_spreadsheet_id_isValid;

    m_spreadsheet_url_isValid = ::OpenAPI::fromJsonValue(m_spreadsheet_url, json[QString("spreadsheetUrl")]);
    m_spreadsheet_url_isSet = !json[QString("spreadsheetUrl")].isNull() && m_spreadsheet_url_isValid;
}

QString OAISpreadsheet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpreadsheet::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_schedules.size() > 0) {
        obj.insert(QString("dataSourceSchedules"), ::OpenAPI::toJsonValue(m_data_source_schedules));
    }
    if (m_data_sources.size() > 0) {
        obj.insert(QString("dataSources"), ::OpenAPI::toJsonValue(m_data_sources));
    }
    if (m_developer_metadata.size() > 0) {
        obj.insert(QString("developerMetadata"), ::OpenAPI::toJsonValue(m_developer_metadata));
    }
    if (m_named_ranges.size() > 0) {
        obj.insert(QString("namedRanges"), ::OpenAPI::toJsonValue(m_named_ranges));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_sheets.size() > 0) {
        obj.insert(QString("sheets"), ::OpenAPI::toJsonValue(m_sheets));
    }
    if (m_spreadsheet_id_isSet) {
        obj.insert(QString("spreadsheetId"), ::OpenAPI::toJsonValue(m_spreadsheet_id));
    }
    if (m_spreadsheet_url_isSet) {
        obj.insert(QString("spreadsheetUrl"), ::OpenAPI::toJsonValue(m_spreadsheet_url));
    }
    return obj;
}

QList<OAIDataSourceRefreshSchedule> OAISpreadsheet::getDataSourceSchedules() const {
    return m_data_source_schedules;
}
void OAISpreadsheet::setDataSourceSchedules(const QList<OAIDataSourceRefreshSchedule> &data_source_schedules) {
    m_data_source_schedules = data_source_schedules;
    m_data_source_schedules_isSet = true;
}

bool OAISpreadsheet::is_data_source_schedules_Set() const{
    return m_data_source_schedules_isSet;
}

bool OAISpreadsheet::is_data_source_schedules_Valid() const{
    return m_data_source_schedules_isValid;
}

QList<OAIDataSource> OAISpreadsheet::getDataSources() const {
    return m_data_sources;
}
void OAISpreadsheet::setDataSources(const QList<OAIDataSource> &data_sources) {
    m_data_sources = data_sources;
    m_data_sources_isSet = true;
}

bool OAISpreadsheet::is_data_sources_Set() const{
    return m_data_sources_isSet;
}

bool OAISpreadsheet::is_data_sources_Valid() const{
    return m_data_sources_isValid;
}

QList<OAIDeveloperMetadata> OAISpreadsheet::getDeveloperMetadata() const {
    return m_developer_metadata;
}
void OAISpreadsheet::setDeveloperMetadata(const QList<OAIDeveloperMetadata> &developer_metadata) {
    m_developer_metadata = developer_metadata;
    m_developer_metadata_isSet = true;
}

bool OAISpreadsheet::is_developer_metadata_Set() const{
    return m_developer_metadata_isSet;
}

bool OAISpreadsheet::is_developer_metadata_Valid() const{
    return m_developer_metadata_isValid;
}

QList<OAINamedRange> OAISpreadsheet::getNamedRanges() const {
    return m_named_ranges;
}
void OAISpreadsheet::setNamedRanges(const QList<OAINamedRange> &named_ranges) {
    m_named_ranges = named_ranges;
    m_named_ranges_isSet = true;
}

bool OAISpreadsheet::is_named_ranges_Set() const{
    return m_named_ranges_isSet;
}

bool OAISpreadsheet::is_named_ranges_Valid() const{
    return m_named_ranges_isValid;
}

OAISpreadsheetProperties OAISpreadsheet::getProperties() const {
    return m_properties;
}
void OAISpreadsheet::setProperties(const OAISpreadsheetProperties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAISpreadsheet::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAISpreadsheet::is_properties_Valid() const{
    return m_properties_isValid;
}

QList<OAISheet> OAISpreadsheet::getSheets() const {
    return m_sheets;
}
void OAISpreadsheet::setSheets(const QList<OAISheet> &sheets) {
    m_sheets = sheets;
    m_sheets_isSet = true;
}

bool OAISpreadsheet::is_sheets_Set() const{
    return m_sheets_isSet;
}

bool OAISpreadsheet::is_sheets_Valid() const{
    return m_sheets_isValid;
}

QString OAISpreadsheet::getSpreadsheetId() const {
    return m_spreadsheet_id;
}
void OAISpreadsheet::setSpreadsheetId(const QString &spreadsheet_id) {
    m_spreadsheet_id = spreadsheet_id;
    m_spreadsheet_id_isSet = true;
}

bool OAISpreadsheet::is_spreadsheet_id_Set() const{
    return m_spreadsheet_id_isSet;
}

bool OAISpreadsheet::is_spreadsheet_id_Valid() const{
    return m_spreadsheet_id_isValid;
}

QString OAISpreadsheet::getSpreadsheetUrl() const {
    return m_spreadsheet_url;
}
void OAISpreadsheet::setSpreadsheetUrl(const QString &spreadsheet_url) {
    m_spreadsheet_url = spreadsheet_url;
    m_spreadsheet_url_isSet = true;
}

bool OAISpreadsheet::is_spreadsheet_url_Set() const{
    return m_spreadsheet_url_isSet;
}

bool OAISpreadsheet::is_spreadsheet_url_Valid() const{
    return m_spreadsheet_url_isValid;
}

bool OAISpreadsheet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_schedules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_named_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_spreadsheet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spreadsheet_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpreadsheet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
