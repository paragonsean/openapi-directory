/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPointStyle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPointStyle::OAIPointStyle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPointStyle::OAIPointStyle() {
    this->initializeModel();
}

OAIPointStyle::~OAIPointStyle() {}

void OAIPointStyle::initializeModel() {

    m_shape_isSet = false;
    m_shape_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAIPointStyle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPointStyle::fromJsonObject(QJsonObject json) {

    m_shape_isValid = ::OpenAPI::fromJsonValue(m_shape, json[QString("shape")]);
    m_shape_isSet = !json[QString("shape")].isNull() && m_shape_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;
}

QString OAIPointStyle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPointStyle::asJsonObject() const {
    QJsonObject obj;
    if (m_shape_isSet) {
        obj.insert(QString("shape"), ::OpenAPI::toJsonValue(m_shape));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

QString OAIPointStyle::getShape() const {
    return m_shape;
}
void OAIPointStyle::setShape(const QString &shape) {
    m_shape = shape;
    m_shape_isSet = true;
}

bool OAIPointStyle::is_shape_Set() const{
    return m_shape_isSet;
}

bool OAIPointStyle::is_shape_Valid() const{
    return m_shape_isValid;
}

double OAIPointStyle::getSize() const {
    return m_size;
}
void OAIPointStyle::setSize(const double &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIPointStyle::is_size_Set() const{
    return m_size_isSet;
}

bool OAIPointStyle::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIPointStyle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_shape_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPointStyle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
