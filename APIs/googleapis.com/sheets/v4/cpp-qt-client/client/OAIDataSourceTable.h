/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDataSourceTable.h
 *
 * A data source table, which allows the user to import a static table of data from the DataSource into Sheets. This is also known as \&quot;Extract\&quot; in the Sheets editor.
 */

#ifndef OAIDataSourceTable_H
#define OAIDataSourceTable_H

#include <QJsonObject>

#include "OAIDataExecutionStatus.h"
#include "OAIDataSourceColumnReference.h"
#include "OAIFilterSpec.h"
#include "OAISortSpec.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDataSourceColumnReference;
class OAIDataExecutionStatus;
class OAIFilterSpec;
class OAISortSpec;

class OAIDataSourceTable : public OAIObject {
public:
    OAIDataSourceTable();
    OAIDataSourceTable(QString json);
    ~OAIDataSourceTable() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getColumnSelectionType() const;
    void setColumnSelectionType(const QString &column_selection_type);
    bool is_column_selection_type_Set() const;
    bool is_column_selection_type_Valid() const;

    QList<OAIDataSourceColumnReference> getColumns() const;
    void setColumns(const QList<OAIDataSourceColumnReference> &columns);
    bool is_columns_Set() const;
    bool is_columns_Valid() const;

    OAIDataExecutionStatus getDataExecutionStatus() const;
    void setDataExecutionStatus(const OAIDataExecutionStatus &data_execution_status);
    bool is_data_execution_status_Set() const;
    bool is_data_execution_status_Valid() const;

    QString getDataSourceId() const;
    void setDataSourceId(const QString &data_source_id);
    bool is_data_source_id_Set() const;
    bool is_data_source_id_Valid() const;

    QList<OAIFilterSpec> getFilterSpecs() const;
    void setFilterSpecs(const QList<OAIFilterSpec> &filter_specs);
    bool is_filter_specs_Set() const;
    bool is_filter_specs_Valid() const;

    qint32 getRowLimit() const;
    void setRowLimit(const qint32 &row_limit);
    bool is_row_limit_Set() const;
    bool is_row_limit_Valid() const;

    QList<OAISortSpec> getSortSpecs() const;
    void setSortSpecs(const QList<OAISortSpec> &sort_specs);
    bool is_sort_specs_Set() const;
    bool is_sort_specs_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_column_selection_type;
    bool m_column_selection_type_isSet;
    bool m_column_selection_type_isValid;

    QList<OAIDataSourceColumnReference> m_columns;
    bool m_columns_isSet;
    bool m_columns_isValid;

    OAIDataExecutionStatus m_data_execution_status;
    bool m_data_execution_status_isSet;
    bool m_data_execution_status_isValid;

    QString m_data_source_id;
    bool m_data_source_id_isSet;
    bool m_data_source_id_isValid;

    QList<OAIFilterSpec> m_filter_specs;
    bool m_filter_specs_isSet;
    bool m_filter_specs_isValid;

    qint32 m_row_limit;
    bool m_row_limit_isSet;
    bool m_row_limit_isValid;

    QList<OAISortSpec> m_sort_specs;
    bool m_sort_specs_isSet;
    bool m_sort_specs_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDataSourceTable)

#endif // OAIDataSourceTable_H
