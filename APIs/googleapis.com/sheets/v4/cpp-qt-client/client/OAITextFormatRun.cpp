/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextFormatRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextFormatRun::OAITextFormatRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextFormatRun::OAITextFormatRun() {
    this->initializeModel();
}

OAITextFormatRun::~OAITextFormatRun() {}

void OAITextFormatRun::initializeModel() {

    m_format_isSet = false;
    m_format_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;
}

void OAITextFormatRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextFormatRun::fromJsonObject(QJsonObject json) {

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(m_start_index, json[QString("startIndex")]);
    m_start_index_isSet = !json[QString("startIndex")].isNull() && m_start_index_isValid;
}

QString OAITextFormatRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextFormatRun::asJsonObject() const {
    QJsonObject obj;
    if (m_format.isSet()) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("startIndex"), ::OpenAPI::toJsonValue(m_start_index));
    }
    return obj;
}

OAITextFormat OAITextFormatRun::getFormat() const {
    return m_format;
}
void OAITextFormatRun::setFormat(const OAITextFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAITextFormatRun::is_format_Set() const{
    return m_format_isSet;
}

bool OAITextFormatRun::is_format_Valid() const{
    return m_format_isValid;
}

qint32 OAITextFormatRun::getStartIndex() const {
    return m_start_index;
}
void OAITextFormatRun::setStartIndex(const qint32 &start_index) {
    m_start_index = start_index;
    m_start_index_isSet = true;
}

bool OAITextFormatRun::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAITextFormatRun::is_start_index_Valid() const{
    return m_start_index_isValid;
}

bool OAITextFormatRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextFormatRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
