/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterView::OAIFilterView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterView::OAIFilterView() {
    this->initializeModel();
}

OAIFilterView::~OAIFilterView() {}

void OAIFilterView::initializeModel() {

    m_criteria_isSet = false;
    m_criteria_isValid = false;

    m_filter_specs_isSet = false;
    m_filter_specs_isValid = false;

    m_filter_view_id_isSet = false;
    m_filter_view_id_isValid = false;

    m_named_range_id_isSet = false;
    m_named_range_id_isValid = false;

    m_range_isSet = false;
    m_range_isValid = false;

    m_sort_specs_isSet = false;
    m_sort_specs_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIFilterView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterView::fromJsonObject(QJsonObject json) {

    m_criteria_isValid = ::OpenAPI::fromJsonValue(m_criteria, json[QString("criteria")]);
    m_criteria_isSet = !json[QString("criteria")].isNull() && m_criteria_isValid;

    m_filter_specs_isValid = ::OpenAPI::fromJsonValue(m_filter_specs, json[QString("filterSpecs")]);
    m_filter_specs_isSet = !json[QString("filterSpecs")].isNull() && m_filter_specs_isValid;

    m_filter_view_id_isValid = ::OpenAPI::fromJsonValue(m_filter_view_id, json[QString("filterViewId")]);
    m_filter_view_id_isSet = !json[QString("filterViewId")].isNull() && m_filter_view_id_isValid;

    m_named_range_id_isValid = ::OpenAPI::fromJsonValue(m_named_range_id, json[QString("namedRangeId")]);
    m_named_range_id_isSet = !json[QString("namedRangeId")].isNull() && m_named_range_id_isValid;

    m_range_isValid = ::OpenAPI::fromJsonValue(m_range, json[QString("range")]);
    m_range_isSet = !json[QString("range")].isNull() && m_range_isValid;

    m_sort_specs_isValid = ::OpenAPI::fromJsonValue(m_sort_specs, json[QString("sortSpecs")]);
    m_sort_specs_isSet = !json[QString("sortSpecs")].isNull() && m_sort_specs_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIFilterView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterView::asJsonObject() const {
    QJsonObject obj;
    if (m_criteria.size() > 0) {
        obj.insert(QString("criteria"), ::OpenAPI::toJsonValue(m_criteria));
    }
    if (m_filter_specs.size() > 0) {
        obj.insert(QString("filterSpecs"), ::OpenAPI::toJsonValue(m_filter_specs));
    }
    if (m_filter_view_id_isSet) {
        obj.insert(QString("filterViewId"), ::OpenAPI::toJsonValue(m_filter_view_id));
    }
    if (m_named_range_id_isSet) {
        obj.insert(QString("namedRangeId"), ::OpenAPI::toJsonValue(m_named_range_id));
    }
    if (m_range.isSet()) {
        obj.insert(QString("range"), ::OpenAPI::toJsonValue(m_range));
    }
    if (m_sort_specs.size() > 0) {
        obj.insert(QString("sortSpecs"), ::OpenAPI::toJsonValue(m_sort_specs));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QMap<QString, OAIFilterCriteria> OAIFilterView::getCriteria() const {
    return m_criteria;
}
void OAIFilterView::setCriteria(const QMap<QString, OAIFilterCriteria> &criteria) {
    m_criteria = criteria;
    m_criteria_isSet = true;
}

bool OAIFilterView::is_criteria_Set() const{
    return m_criteria_isSet;
}

bool OAIFilterView::is_criteria_Valid() const{
    return m_criteria_isValid;
}

QList<OAIFilterSpec> OAIFilterView::getFilterSpecs() const {
    return m_filter_specs;
}
void OAIFilterView::setFilterSpecs(const QList<OAIFilterSpec> &filter_specs) {
    m_filter_specs = filter_specs;
    m_filter_specs_isSet = true;
}

bool OAIFilterView::is_filter_specs_Set() const{
    return m_filter_specs_isSet;
}

bool OAIFilterView::is_filter_specs_Valid() const{
    return m_filter_specs_isValid;
}

qint32 OAIFilterView::getFilterViewId() const {
    return m_filter_view_id;
}
void OAIFilterView::setFilterViewId(const qint32 &filter_view_id) {
    m_filter_view_id = filter_view_id;
    m_filter_view_id_isSet = true;
}

bool OAIFilterView::is_filter_view_id_Set() const{
    return m_filter_view_id_isSet;
}

bool OAIFilterView::is_filter_view_id_Valid() const{
    return m_filter_view_id_isValid;
}

QString OAIFilterView::getNamedRangeId() const {
    return m_named_range_id;
}
void OAIFilterView::setNamedRangeId(const QString &named_range_id) {
    m_named_range_id = named_range_id;
    m_named_range_id_isSet = true;
}

bool OAIFilterView::is_named_range_id_Set() const{
    return m_named_range_id_isSet;
}

bool OAIFilterView::is_named_range_id_Valid() const{
    return m_named_range_id_isValid;
}

OAIGridRange OAIFilterView::getRange() const {
    return m_range;
}
void OAIFilterView::setRange(const OAIGridRange &range) {
    m_range = range;
    m_range_isSet = true;
}

bool OAIFilterView::is_range_Set() const{
    return m_range_isSet;
}

bool OAIFilterView::is_range_Valid() const{
    return m_range_isValid;
}

QList<OAISortSpec> OAIFilterView::getSortSpecs() const {
    return m_sort_specs;
}
void OAIFilterView::setSortSpecs(const QList<OAISortSpec> &sort_specs) {
    m_sort_specs = sort_specs;
    m_sort_specs_isSet = true;
}

bool OAIFilterView::is_sort_specs_Set() const{
    return m_sort_specs_isSet;
}

bool OAIFilterView::is_sort_specs_Valid() const{
    return m_sort_specs_isValid;
}

QString OAIFilterView::getTitle() const {
    return m_title;
}
void OAIFilterView::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIFilterView::is_title_Set() const{
    return m_title_isSet;
}

bool OAIFilterView::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIFilterView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_criteria.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_view_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_named_range_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterView::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
