/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBaselineValueFormat.h
 *
 * Formatting options for baseline value.
 */

#ifndef OAIBaselineValueFormat_H
#define OAIBaselineValueFormat_H

#include <QJsonObject>

#include "OAIColor.h"
#include "OAIColorStyle.h"
#include "OAITextFormat.h"
#include "OAITextPosition.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIColor;
class OAIColorStyle;
class OAITextPosition;
class OAITextFormat;

class OAIBaselineValueFormat : public OAIObject {
public:
    OAIBaselineValueFormat();
    OAIBaselineValueFormat(QString json);
    ~OAIBaselineValueFormat() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getComparisonType() const;
    void setComparisonType(const QString &comparison_type);
    bool is_comparison_type_Set() const;
    bool is_comparison_type_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIColor getNegativeColor() const;
    void setNegativeColor(const OAIColor &negative_color);
    bool is_negative_color_Set() const;
    bool is_negative_color_Valid() const;

    OAIColorStyle getNegativeColorStyle() const;
    void setNegativeColorStyle(const OAIColorStyle &negative_color_style);
    bool is_negative_color_style_Set() const;
    bool is_negative_color_style_Valid() const;

    OAITextPosition getPosition() const;
    void setPosition(const OAITextPosition &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    OAIColor getPositiveColor() const;
    void setPositiveColor(const OAIColor &positive_color);
    bool is_positive_color_Set() const;
    bool is_positive_color_Valid() const;

    OAIColorStyle getPositiveColorStyle() const;
    void setPositiveColorStyle(const OAIColorStyle &positive_color_style);
    bool is_positive_color_style_Set() const;
    bool is_positive_color_style_Valid() const;

    OAITextFormat getTextFormat() const;
    void setTextFormat(const OAITextFormat &text_format);
    bool is_text_format_Set() const;
    bool is_text_format_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_comparison_type;
    bool m_comparison_type_isSet;
    bool m_comparison_type_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIColor m_negative_color;
    bool m_negative_color_isSet;
    bool m_negative_color_isValid;

    OAIColorStyle m_negative_color_style;
    bool m_negative_color_style_isSet;
    bool m_negative_color_style_isValid;

    OAITextPosition m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    OAIColor m_positive_color;
    bool m_positive_color_isSet;
    bool m_positive_color_isValid;

    OAIColorStyle m_positive_color_style;
    bool m_positive_color_style_isSet;
    bool m_positive_color_style_isValid;

    OAITextFormat m_text_format;
    bool m_text_format_isSet;
    bool m_text_format_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBaselineValueFormat)

#endif // OAIBaselineValueFormat_H
