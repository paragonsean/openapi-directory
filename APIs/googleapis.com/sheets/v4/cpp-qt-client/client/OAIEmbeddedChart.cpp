/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmbeddedChart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmbeddedChart::OAIEmbeddedChart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmbeddedChart::OAIEmbeddedChart() {
    this->initializeModel();
}

OAIEmbeddedChart::~OAIEmbeddedChart() {}

void OAIEmbeddedChart::initializeModel() {

    m_border_isSet = false;
    m_border_isValid = false;

    m_chart_id_isSet = false;
    m_chart_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;
}

void OAIEmbeddedChart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmbeddedChart::fromJsonObject(QJsonObject json) {

    m_border_isValid = ::OpenAPI::fromJsonValue(m_border, json[QString("border")]);
    m_border_isSet = !json[QString("border")].isNull() && m_border_isValid;

    m_chart_id_isValid = ::OpenAPI::fromJsonValue(m_chart_id, json[QString("chartId")]);
    m_chart_id_isSet = !json[QString("chartId")].isNull() && m_chart_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;
}

QString OAIEmbeddedChart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmbeddedChart::asJsonObject() const {
    QJsonObject obj;
    if (m_border.isSet()) {
        obj.insert(QString("border"), ::OpenAPI::toJsonValue(m_border));
    }
    if (m_chart_id_isSet) {
        obj.insert(QString("chartId"), ::OpenAPI::toJsonValue(m_chart_id));
    }
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    return obj;
}

OAIEmbeddedObjectBorder OAIEmbeddedChart::getBorder() const {
    return m_border;
}
void OAIEmbeddedChart::setBorder(const OAIEmbeddedObjectBorder &border) {
    m_border = border;
    m_border_isSet = true;
}

bool OAIEmbeddedChart::is_border_Set() const{
    return m_border_isSet;
}

bool OAIEmbeddedChart::is_border_Valid() const{
    return m_border_isValid;
}

qint32 OAIEmbeddedChart::getChartId() const {
    return m_chart_id;
}
void OAIEmbeddedChart::setChartId(const qint32 &chart_id) {
    m_chart_id = chart_id;
    m_chart_id_isSet = true;
}

bool OAIEmbeddedChart::is_chart_id_Set() const{
    return m_chart_id_isSet;
}

bool OAIEmbeddedChart::is_chart_id_Valid() const{
    return m_chart_id_isValid;
}

OAIEmbeddedObjectPosition OAIEmbeddedChart::getPosition() const {
    return m_position;
}
void OAIEmbeddedChart::setPosition(const OAIEmbeddedObjectPosition &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIEmbeddedChart::is_position_Set() const{
    return m_position_isSet;
}

bool OAIEmbeddedChart::is_position_Valid() const{
    return m_position_isValid;
}

OAIChartSpec OAIEmbeddedChart::getSpec() const {
    return m_spec;
}
void OAIEmbeddedChart::setSpec(const OAIChartSpec &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAIEmbeddedChart::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAIEmbeddedChart::is_spec_Valid() const{
    return m_spec_isValid;
}

bool OAIEmbeddedChart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_border.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_chart_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmbeddedChart::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
