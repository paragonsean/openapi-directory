/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterCriteria::OAIFilterCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterCriteria::OAIFilterCriteria() {
    this->initializeModel();
}

OAIFilterCriteria::~OAIFilterCriteria() {}

void OAIFilterCriteria::initializeModel() {

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_hidden_values_isSet = false;
    m_hidden_values_isValid = false;

    m_visible_background_color_isSet = false;
    m_visible_background_color_isValid = false;

    m_visible_background_color_style_isSet = false;
    m_visible_background_color_style_isValid = false;

    m_visible_foreground_color_isSet = false;
    m_visible_foreground_color_isValid = false;

    m_visible_foreground_color_style_isSet = false;
    m_visible_foreground_color_style_isValid = false;
}

void OAIFilterCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterCriteria::fromJsonObject(QJsonObject json) {

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_hidden_values_isValid = ::OpenAPI::fromJsonValue(m_hidden_values, json[QString("hiddenValues")]);
    m_hidden_values_isSet = !json[QString("hiddenValues")].isNull() && m_hidden_values_isValid;

    m_visible_background_color_isValid = ::OpenAPI::fromJsonValue(m_visible_background_color, json[QString("visibleBackgroundColor")]);
    m_visible_background_color_isSet = !json[QString("visibleBackgroundColor")].isNull() && m_visible_background_color_isValid;

    m_visible_background_color_style_isValid = ::OpenAPI::fromJsonValue(m_visible_background_color_style, json[QString("visibleBackgroundColorStyle")]);
    m_visible_background_color_style_isSet = !json[QString("visibleBackgroundColorStyle")].isNull() && m_visible_background_color_style_isValid;

    m_visible_foreground_color_isValid = ::OpenAPI::fromJsonValue(m_visible_foreground_color, json[QString("visibleForegroundColor")]);
    m_visible_foreground_color_isSet = !json[QString("visibleForegroundColor")].isNull() && m_visible_foreground_color_isValid;

    m_visible_foreground_color_style_isValid = ::OpenAPI::fromJsonValue(m_visible_foreground_color_style, json[QString("visibleForegroundColorStyle")]);
    m_visible_foreground_color_style_isSet = !json[QString("visibleForegroundColorStyle")].isNull() && m_visible_foreground_color_style_isValid;
}

QString OAIFilterCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_hidden_values.size() > 0) {
        obj.insert(QString("hiddenValues"), ::OpenAPI::toJsonValue(m_hidden_values));
    }
    if (m_visible_background_color.isSet()) {
        obj.insert(QString("visibleBackgroundColor"), ::OpenAPI::toJsonValue(m_visible_background_color));
    }
    if (m_visible_background_color_style.isSet()) {
        obj.insert(QString("visibleBackgroundColorStyle"), ::OpenAPI::toJsonValue(m_visible_background_color_style));
    }
    if (m_visible_foreground_color.isSet()) {
        obj.insert(QString("visibleForegroundColor"), ::OpenAPI::toJsonValue(m_visible_foreground_color));
    }
    if (m_visible_foreground_color_style.isSet()) {
        obj.insert(QString("visibleForegroundColorStyle"), ::OpenAPI::toJsonValue(m_visible_foreground_color_style));
    }
    return obj;
}

OAIBooleanCondition OAIFilterCriteria::getCondition() const {
    return m_condition;
}
void OAIFilterCriteria::setCondition(const OAIBooleanCondition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIFilterCriteria::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIFilterCriteria::is_condition_Valid() const{
    return m_condition_isValid;
}

QList<QString> OAIFilterCriteria::getHiddenValues() const {
    return m_hidden_values;
}
void OAIFilterCriteria::setHiddenValues(const QList<QString> &hidden_values) {
    m_hidden_values = hidden_values;
    m_hidden_values_isSet = true;
}

bool OAIFilterCriteria::is_hidden_values_Set() const{
    return m_hidden_values_isSet;
}

bool OAIFilterCriteria::is_hidden_values_Valid() const{
    return m_hidden_values_isValid;
}

OAIColor OAIFilterCriteria::getVisibleBackgroundColor() const {
    return m_visible_background_color;
}
void OAIFilterCriteria::setVisibleBackgroundColor(const OAIColor &visible_background_color) {
    m_visible_background_color = visible_background_color;
    m_visible_background_color_isSet = true;
}

bool OAIFilterCriteria::is_visible_background_color_Set() const{
    return m_visible_background_color_isSet;
}

bool OAIFilterCriteria::is_visible_background_color_Valid() const{
    return m_visible_background_color_isValid;
}

OAIColorStyle OAIFilterCriteria::getVisibleBackgroundColorStyle() const {
    return m_visible_background_color_style;
}
void OAIFilterCriteria::setVisibleBackgroundColorStyle(const OAIColorStyle &visible_background_color_style) {
    m_visible_background_color_style = visible_background_color_style;
    m_visible_background_color_style_isSet = true;
}

bool OAIFilterCriteria::is_visible_background_color_style_Set() const{
    return m_visible_background_color_style_isSet;
}

bool OAIFilterCriteria::is_visible_background_color_style_Valid() const{
    return m_visible_background_color_style_isValid;
}

OAIColor OAIFilterCriteria::getVisibleForegroundColor() const {
    return m_visible_foreground_color;
}
void OAIFilterCriteria::setVisibleForegroundColor(const OAIColor &visible_foreground_color) {
    m_visible_foreground_color = visible_foreground_color;
    m_visible_foreground_color_isSet = true;
}

bool OAIFilterCriteria::is_visible_foreground_color_Set() const{
    return m_visible_foreground_color_isSet;
}

bool OAIFilterCriteria::is_visible_foreground_color_Valid() const{
    return m_visible_foreground_color_isValid;
}

OAIColorStyle OAIFilterCriteria::getVisibleForegroundColorStyle() const {
    return m_visible_foreground_color_style;
}
void OAIFilterCriteria::setVisibleForegroundColorStyle(const OAIColorStyle &visible_foreground_color_style) {
    m_visible_foreground_color_style = visible_foreground_color_style;
    m_visible_foreground_color_style_isSet = true;
}

bool OAIFilterCriteria::is_visible_foreground_color_style_Set() const{
    return m_visible_foreground_color_style_isSet;
}

bool OAIFilterCriteria::is_visible_foreground_color_style_Valid() const{
    return m_visible_foreground_color_style_isValid;
}

bool OAIFilterCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_background_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_background_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_foreground_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_foreground_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
