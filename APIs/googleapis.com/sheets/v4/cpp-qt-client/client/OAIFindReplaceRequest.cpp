/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFindReplaceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFindReplaceRequest::OAIFindReplaceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFindReplaceRequest::OAIFindReplaceRequest() {
    this->initializeModel();
}

OAIFindReplaceRequest::~OAIFindReplaceRequest() {}

void OAIFindReplaceRequest::initializeModel() {

    m_all_sheets_isSet = false;
    m_all_sheets_isValid = false;

    m_find_isSet = false;
    m_find_isValid = false;

    m_include_formulas_isSet = false;
    m_include_formulas_isValid = false;

    m_match_case_isSet = false;
    m_match_case_isValid = false;

    m_match_entire_cell_isSet = false;
    m_match_entire_cell_isValid = false;

    m_range_isSet = false;
    m_range_isValid = false;

    m_replacement_isSet = false;
    m_replacement_isValid = false;

    m_search_by_regex_isSet = false;
    m_search_by_regex_isValid = false;

    m_sheet_id_isSet = false;
    m_sheet_id_isValid = false;
}

void OAIFindReplaceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFindReplaceRequest::fromJsonObject(QJsonObject json) {

    m_all_sheets_isValid = ::OpenAPI::fromJsonValue(m_all_sheets, json[QString("allSheets")]);
    m_all_sheets_isSet = !json[QString("allSheets")].isNull() && m_all_sheets_isValid;

    m_find_isValid = ::OpenAPI::fromJsonValue(m_find, json[QString("find")]);
    m_find_isSet = !json[QString("find")].isNull() && m_find_isValid;

    m_include_formulas_isValid = ::OpenAPI::fromJsonValue(m_include_formulas, json[QString("includeFormulas")]);
    m_include_formulas_isSet = !json[QString("includeFormulas")].isNull() && m_include_formulas_isValid;

    m_match_case_isValid = ::OpenAPI::fromJsonValue(m_match_case, json[QString("matchCase")]);
    m_match_case_isSet = !json[QString("matchCase")].isNull() && m_match_case_isValid;

    m_match_entire_cell_isValid = ::OpenAPI::fromJsonValue(m_match_entire_cell, json[QString("matchEntireCell")]);
    m_match_entire_cell_isSet = !json[QString("matchEntireCell")].isNull() && m_match_entire_cell_isValid;

    m_range_isValid = ::OpenAPI::fromJsonValue(m_range, json[QString("range")]);
    m_range_isSet = !json[QString("range")].isNull() && m_range_isValid;

    m_replacement_isValid = ::OpenAPI::fromJsonValue(m_replacement, json[QString("replacement")]);
    m_replacement_isSet = !json[QString("replacement")].isNull() && m_replacement_isValid;

    m_search_by_regex_isValid = ::OpenAPI::fromJsonValue(m_search_by_regex, json[QString("searchByRegex")]);
    m_search_by_regex_isSet = !json[QString("searchByRegex")].isNull() && m_search_by_regex_isValid;

    m_sheet_id_isValid = ::OpenAPI::fromJsonValue(m_sheet_id, json[QString("sheetId")]);
    m_sheet_id_isSet = !json[QString("sheetId")].isNull() && m_sheet_id_isValid;
}

QString OAIFindReplaceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFindReplaceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_all_sheets_isSet) {
        obj.insert(QString("allSheets"), ::OpenAPI::toJsonValue(m_all_sheets));
    }
    if (m_find_isSet) {
        obj.insert(QString("find"), ::OpenAPI::toJsonValue(m_find));
    }
    if (m_include_formulas_isSet) {
        obj.insert(QString("includeFormulas"), ::OpenAPI::toJsonValue(m_include_formulas));
    }
    if (m_match_case_isSet) {
        obj.insert(QString("matchCase"), ::OpenAPI::toJsonValue(m_match_case));
    }
    if (m_match_entire_cell_isSet) {
        obj.insert(QString("matchEntireCell"), ::OpenAPI::toJsonValue(m_match_entire_cell));
    }
    if (m_range.isSet()) {
        obj.insert(QString("range"), ::OpenAPI::toJsonValue(m_range));
    }
    if (m_replacement_isSet) {
        obj.insert(QString("replacement"), ::OpenAPI::toJsonValue(m_replacement));
    }
    if (m_search_by_regex_isSet) {
        obj.insert(QString("searchByRegex"), ::OpenAPI::toJsonValue(m_search_by_regex));
    }
    if (m_sheet_id_isSet) {
        obj.insert(QString("sheetId"), ::OpenAPI::toJsonValue(m_sheet_id));
    }
    return obj;
}

bool OAIFindReplaceRequest::isAllSheets() const {
    return m_all_sheets;
}
void OAIFindReplaceRequest::setAllSheets(const bool &all_sheets) {
    m_all_sheets = all_sheets;
    m_all_sheets_isSet = true;
}

bool OAIFindReplaceRequest::is_all_sheets_Set() const{
    return m_all_sheets_isSet;
}

bool OAIFindReplaceRequest::is_all_sheets_Valid() const{
    return m_all_sheets_isValid;
}

QString OAIFindReplaceRequest::getFind() const {
    return m_find;
}
void OAIFindReplaceRequest::setFind(const QString &find) {
    m_find = find;
    m_find_isSet = true;
}

bool OAIFindReplaceRequest::is_find_Set() const{
    return m_find_isSet;
}

bool OAIFindReplaceRequest::is_find_Valid() const{
    return m_find_isValid;
}

bool OAIFindReplaceRequest::isIncludeFormulas() const {
    return m_include_formulas;
}
void OAIFindReplaceRequest::setIncludeFormulas(const bool &include_formulas) {
    m_include_formulas = include_formulas;
    m_include_formulas_isSet = true;
}

bool OAIFindReplaceRequest::is_include_formulas_Set() const{
    return m_include_formulas_isSet;
}

bool OAIFindReplaceRequest::is_include_formulas_Valid() const{
    return m_include_formulas_isValid;
}

bool OAIFindReplaceRequest::isMatchCase() const {
    return m_match_case;
}
void OAIFindReplaceRequest::setMatchCase(const bool &match_case) {
    m_match_case = match_case;
    m_match_case_isSet = true;
}

bool OAIFindReplaceRequest::is_match_case_Set() const{
    return m_match_case_isSet;
}

bool OAIFindReplaceRequest::is_match_case_Valid() const{
    return m_match_case_isValid;
}

bool OAIFindReplaceRequest::isMatchEntireCell() const {
    return m_match_entire_cell;
}
void OAIFindReplaceRequest::setMatchEntireCell(const bool &match_entire_cell) {
    m_match_entire_cell = match_entire_cell;
    m_match_entire_cell_isSet = true;
}

bool OAIFindReplaceRequest::is_match_entire_cell_Set() const{
    return m_match_entire_cell_isSet;
}

bool OAIFindReplaceRequest::is_match_entire_cell_Valid() const{
    return m_match_entire_cell_isValid;
}

OAIGridRange OAIFindReplaceRequest::getRange() const {
    return m_range;
}
void OAIFindReplaceRequest::setRange(const OAIGridRange &range) {
    m_range = range;
    m_range_isSet = true;
}

bool OAIFindReplaceRequest::is_range_Set() const{
    return m_range_isSet;
}

bool OAIFindReplaceRequest::is_range_Valid() const{
    return m_range_isValid;
}

QString OAIFindReplaceRequest::getReplacement() const {
    return m_replacement;
}
void OAIFindReplaceRequest::setReplacement(const QString &replacement) {
    m_replacement = replacement;
    m_replacement_isSet = true;
}

bool OAIFindReplaceRequest::is_replacement_Set() const{
    return m_replacement_isSet;
}

bool OAIFindReplaceRequest::is_replacement_Valid() const{
    return m_replacement_isValid;
}

bool OAIFindReplaceRequest::isSearchByRegex() const {
    return m_search_by_regex;
}
void OAIFindReplaceRequest::setSearchByRegex(const bool &search_by_regex) {
    m_search_by_regex = search_by_regex;
    m_search_by_regex_isSet = true;
}

bool OAIFindReplaceRequest::is_search_by_regex_Set() const{
    return m_search_by_regex_isSet;
}

bool OAIFindReplaceRequest::is_search_by_regex_Valid() const{
    return m_search_by_regex_isValid;
}

qint32 OAIFindReplaceRequest::getSheetId() const {
    return m_sheet_id;
}
void OAIFindReplaceRequest::setSheetId(const qint32 &sheet_id) {
    m_sheet_id = sheet_id;
    m_sheet_id_isSet = true;
}

bool OAIFindReplaceRequest::is_sheet_id_Set() const{
    return m_sheet_id_isSet;
}

bool OAIFindReplaceRequest::is_sheet_id_Valid() const{
    return m_sheet_id_isValid;
}

bool OAIFindReplaceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_sheets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_find_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_formulas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_case_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_entire_cell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replacement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_by_regex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheet_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFindReplaceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
