/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceRefreshSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceRefreshSchedule::OAIDataSourceRefreshSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceRefreshSchedule::OAIDataSourceRefreshSchedule() {
    this->initializeModel();
}

OAIDataSourceRefreshSchedule::~OAIDataSourceRefreshSchedule() {}

void OAIDataSourceRefreshSchedule::initializeModel() {

    m_daily_schedule_isSet = false;
    m_daily_schedule_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_monthly_schedule_isSet = false;
    m_monthly_schedule_isValid = false;

    m_next_run_isSet = false;
    m_next_run_isValid = false;

    m_refresh_scope_isSet = false;
    m_refresh_scope_isValid = false;

    m_weekly_schedule_isSet = false;
    m_weekly_schedule_isValid = false;
}

void OAIDataSourceRefreshSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSourceRefreshSchedule::fromJsonObject(QJsonObject json) {

    m_daily_schedule_isValid = ::OpenAPI::fromJsonValue(m_daily_schedule, json[QString("dailySchedule")]);
    m_daily_schedule_isSet = !json[QString("dailySchedule")].isNull() && m_daily_schedule_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_monthly_schedule_isValid = ::OpenAPI::fromJsonValue(m_monthly_schedule, json[QString("monthlySchedule")]);
    m_monthly_schedule_isSet = !json[QString("monthlySchedule")].isNull() && m_monthly_schedule_isValid;

    m_next_run_isValid = ::OpenAPI::fromJsonValue(m_next_run, json[QString("nextRun")]);
    m_next_run_isSet = !json[QString("nextRun")].isNull() && m_next_run_isValid;

    m_refresh_scope_isValid = ::OpenAPI::fromJsonValue(m_refresh_scope, json[QString("refreshScope")]);
    m_refresh_scope_isSet = !json[QString("refreshScope")].isNull() && m_refresh_scope_isValid;

    m_weekly_schedule_isValid = ::OpenAPI::fromJsonValue(m_weekly_schedule, json[QString("weeklySchedule")]);
    m_weekly_schedule_isSet = !json[QString("weeklySchedule")].isNull() && m_weekly_schedule_isValid;
}

QString OAIDataSourceRefreshSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSourceRefreshSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_daily_schedule.isSet()) {
        obj.insert(QString("dailySchedule"), ::OpenAPI::toJsonValue(m_daily_schedule));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_monthly_schedule.isSet()) {
        obj.insert(QString("monthlySchedule"), ::OpenAPI::toJsonValue(m_monthly_schedule));
    }
    if (m_next_run.isSet()) {
        obj.insert(QString("nextRun"), ::OpenAPI::toJsonValue(m_next_run));
    }
    if (m_refresh_scope_isSet) {
        obj.insert(QString("refreshScope"), ::OpenAPI::toJsonValue(m_refresh_scope));
    }
    if (m_weekly_schedule.isSet()) {
        obj.insert(QString("weeklySchedule"), ::OpenAPI::toJsonValue(m_weekly_schedule));
    }
    return obj;
}

OAIDataSourceRefreshDailySchedule OAIDataSourceRefreshSchedule::getDailySchedule() const {
    return m_daily_schedule;
}
void OAIDataSourceRefreshSchedule::setDailySchedule(const OAIDataSourceRefreshDailySchedule &daily_schedule) {
    m_daily_schedule = daily_schedule;
    m_daily_schedule_isSet = true;
}

bool OAIDataSourceRefreshSchedule::is_daily_schedule_Set() const{
    return m_daily_schedule_isSet;
}

bool OAIDataSourceRefreshSchedule::is_daily_schedule_Valid() const{
    return m_daily_schedule_isValid;
}

bool OAIDataSourceRefreshSchedule::isEnabled() const {
    return m_enabled;
}
void OAIDataSourceRefreshSchedule::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIDataSourceRefreshSchedule::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIDataSourceRefreshSchedule::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIDataSourceRefreshMonthlySchedule OAIDataSourceRefreshSchedule::getMonthlySchedule() const {
    return m_monthly_schedule;
}
void OAIDataSourceRefreshSchedule::setMonthlySchedule(const OAIDataSourceRefreshMonthlySchedule &monthly_schedule) {
    m_monthly_schedule = monthly_schedule;
    m_monthly_schedule_isSet = true;
}

bool OAIDataSourceRefreshSchedule::is_monthly_schedule_Set() const{
    return m_monthly_schedule_isSet;
}

bool OAIDataSourceRefreshSchedule::is_monthly_schedule_Valid() const{
    return m_monthly_schedule_isValid;
}

OAIInterval OAIDataSourceRefreshSchedule::getNextRun() const {
    return m_next_run;
}
void OAIDataSourceRefreshSchedule::setNextRun(const OAIInterval &next_run) {
    m_next_run = next_run;
    m_next_run_isSet = true;
}

bool OAIDataSourceRefreshSchedule::is_next_run_Set() const{
    return m_next_run_isSet;
}

bool OAIDataSourceRefreshSchedule::is_next_run_Valid() const{
    return m_next_run_isValid;
}

QString OAIDataSourceRefreshSchedule::getRefreshScope() const {
    return m_refresh_scope;
}
void OAIDataSourceRefreshSchedule::setRefreshScope(const QString &refresh_scope) {
    m_refresh_scope = refresh_scope;
    m_refresh_scope_isSet = true;
}

bool OAIDataSourceRefreshSchedule::is_refresh_scope_Set() const{
    return m_refresh_scope_isSet;
}

bool OAIDataSourceRefreshSchedule::is_refresh_scope_Valid() const{
    return m_refresh_scope_isValid;
}

OAIDataSourceRefreshWeeklySchedule OAIDataSourceRefreshSchedule::getWeeklySchedule() const {
    return m_weekly_schedule;
}
void OAIDataSourceRefreshSchedule::setWeeklySchedule(const OAIDataSourceRefreshWeeklySchedule &weekly_schedule) {
    m_weekly_schedule = weekly_schedule;
    m_weekly_schedule_isSet = true;
}

bool OAIDataSourceRefreshSchedule::is_weekly_schedule_Set() const{
    return m_weekly_schedule_isSet;
}

bool OAIDataSourceRefreshSchedule::is_weekly_schedule_Valid() const{
    return m_weekly_schedule_isValid;
}

bool OAIDataSourceRefreshSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_daily_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_run.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSourceRefreshSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
