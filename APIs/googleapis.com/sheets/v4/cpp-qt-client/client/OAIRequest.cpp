/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequest::OAIRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequest::OAIRequest() {
    this->initializeModel();
}

OAIRequest::~OAIRequest() {}

void OAIRequest::initializeModel() {

    m_add_banding_isSet = false;
    m_add_banding_isValid = false;

    m_add_chart_isSet = false;
    m_add_chart_isValid = false;

    m_add_conditional_format_rule_isSet = false;
    m_add_conditional_format_rule_isValid = false;

    m_add_data_source_isSet = false;
    m_add_data_source_isValid = false;

    m_add_dimension_group_isSet = false;
    m_add_dimension_group_isValid = false;

    m_add_filter_view_isSet = false;
    m_add_filter_view_isValid = false;

    m_add_named_range_isSet = false;
    m_add_named_range_isValid = false;

    m_add_protected_range_isSet = false;
    m_add_protected_range_isValid = false;

    m_add_sheet_isSet = false;
    m_add_sheet_isValid = false;

    m_add_slicer_isSet = false;
    m_add_slicer_isValid = false;

    m_append_cells_isSet = false;
    m_append_cells_isValid = false;

    m_append_dimension_isSet = false;
    m_append_dimension_isValid = false;

    m_auto_fill_isSet = false;
    m_auto_fill_isValid = false;

    m_auto_resize_dimensions_isSet = false;
    m_auto_resize_dimensions_isValid = false;

    m_clear_basic_filter_isSet = false;
    m_clear_basic_filter_isValid = false;

    m_copy_paste_isSet = false;
    m_copy_paste_isValid = false;

    m_create_developer_metadata_isSet = false;
    m_create_developer_metadata_isValid = false;

    m_cut_paste_isSet = false;
    m_cut_paste_isValid = false;

    m_delete_banding_isSet = false;
    m_delete_banding_isValid = false;

    m_delete_conditional_format_rule_isSet = false;
    m_delete_conditional_format_rule_isValid = false;

    m_delete_data_source_isSet = false;
    m_delete_data_source_isValid = false;

    m_delete_developer_metadata_isSet = false;
    m_delete_developer_metadata_isValid = false;

    m_delete_dimension_isSet = false;
    m_delete_dimension_isValid = false;

    m_delete_dimension_group_isSet = false;
    m_delete_dimension_group_isValid = false;

    m_delete_duplicates_isSet = false;
    m_delete_duplicates_isValid = false;

    m_delete_embedded_object_isSet = false;
    m_delete_embedded_object_isValid = false;

    m_delete_filter_view_isSet = false;
    m_delete_filter_view_isValid = false;

    m_delete_named_range_isSet = false;
    m_delete_named_range_isValid = false;

    m_delete_protected_range_isSet = false;
    m_delete_protected_range_isValid = false;

    m_delete_range_isSet = false;
    m_delete_range_isValid = false;

    m_delete_sheet_isSet = false;
    m_delete_sheet_isValid = false;

    m_duplicate_filter_view_isSet = false;
    m_duplicate_filter_view_isValid = false;

    m_duplicate_sheet_isSet = false;
    m_duplicate_sheet_isValid = false;

    m_find_replace_isSet = false;
    m_find_replace_isValid = false;

    m_insert_dimension_isSet = false;
    m_insert_dimension_isValid = false;

    m_insert_range_isSet = false;
    m_insert_range_isValid = false;

    m_merge_cells_isSet = false;
    m_merge_cells_isValid = false;

    m_move_dimension_isSet = false;
    m_move_dimension_isValid = false;

    m_paste_data_isSet = false;
    m_paste_data_isValid = false;

    m_randomize_range_isSet = false;
    m_randomize_range_isValid = false;

    m_refresh_data_source_isSet = false;
    m_refresh_data_source_isValid = false;

    m_repeat_cell_isSet = false;
    m_repeat_cell_isValid = false;

    m_set_basic_filter_isSet = false;
    m_set_basic_filter_isValid = false;

    m_set_data_validation_isSet = false;
    m_set_data_validation_isValid = false;

    m_sort_range_isSet = false;
    m_sort_range_isValid = false;

    m_text_to_columns_isSet = false;
    m_text_to_columns_isValid = false;

    m_trim_whitespace_isSet = false;
    m_trim_whitespace_isValid = false;

    m_unmerge_cells_isSet = false;
    m_unmerge_cells_isValid = false;

    m_update_banding_isSet = false;
    m_update_banding_isValid = false;

    m_update_borders_isSet = false;
    m_update_borders_isValid = false;

    m_update_cells_isSet = false;
    m_update_cells_isValid = false;

    m_update_chart_spec_isSet = false;
    m_update_chart_spec_isValid = false;

    m_update_conditional_format_rule_isSet = false;
    m_update_conditional_format_rule_isValid = false;

    m_update_data_source_isSet = false;
    m_update_data_source_isValid = false;

    m_update_developer_metadata_isSet = false;
    m_update_developer_metadata_isValid = false;

    m_update_dimension_group_isSet = false;
    m_update_dimension_group_isValid = false;

    m_update_dimension_properties_isSet = false;
    m_update_dimension_properties_isValid = false;

    m_update_embedded_object_border_isSet = false;
    m_update_embedded_object_border_isValid = false;

    m_update_embedded_object_position_isSet = false;
    m_update_embedded_object_position_isValid = false;

    m_update_filter_view_isSet = false;
    m_update_filter_view_isValid = false;

    m_update_named_range_isSet = false;
    m_update_named_range_isValid = false;

    m_update_protected_range_isSet = false;
    m_update_protected_range_isValid = false;

    m_update_sheet_properties_isSet = false;
    m_update_sheet_properties_isValid = false;

    m_update_slicer_spec_isSet = false;
    m_update_slicer_spec_isValid = false;

    m_update_spreadsheet_properties_isSet = false;
    m_update_spreadsheet_properties_isValid = false;
}

void OAIRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequest::fromJsonObject(QJsonObject json) {

    m_add_banding_isValid = ::OpenAPI::fromJsonValue(m_add_banding, json[QString("addBanding")]);
    m_add_banding_isSet = !json[QString("addBanding")].isNull() && m_add_banding_isValid;

    m_add_chart_isValid = ::OpenAPI::fromJsonValue(m_add_chart, json[QString("addChart")]);
    m_add_chart_isSet = !json[QString("addChart")].isNull() && m_add_chart_isValid;

    m_add_conditional_format_rule_isValid = ::OpenAPI::fromJsonValue(m_add_conditional_format_rule, json[QString("addConditionalFormatRule")]);
    m_add_conditional_format_rule_isSet = !json[QString("addConditionalFormatRule")].isNull() && m_add_conditional_format_rule_isValid;

    m_add_data_source_isValid = ::OpenAPI::fromJsonValue(m_add_data_source, json[QString("addDataSource")]);
    m_add_data_source_isSet = !json[QString("addDataSource")].isNull() && m_add_data_source_isValid;

    m_add_dimension_group_isValid = ::OpenAPI::fromJsonValue(m_add_dimension_group, json[QString("addDimensionGroup")]);
    m_add_dimension_group_isSet = !json[QString("addDimensionGroup")].isNull() && m_add_dimension_group_isValid;

    m_add_filter_view_isValid = ::OpenAPI::fromJsonValue(m_add_filter_view, json[QString("addFilterView")]);
    m_add_filter_view_isSet = !json[QString("addFilterView")].isNull() && m_add_filter_view_isValid;

    m_add_named_range_isValid = ::OpenAPI::fromJsonValue(m_add_named_range, json[QString("addNamedRange")]);
    m_add_named_range_isSet = !json[QString("addNamedRange")].isNull() && m_add_named_range_isValid;

    m_add_protected_range_isValid = ::OpenAPI::fromJsonValue(m_add_protected_range, json[QString("addProtectedRange")]);
    m_add_protected_range_isSet = !json[QString("addProtectedRange")].isNull() && m_add_protected_range_isValid;

    m_add_sheet_isValid = ::OpenAPI::fromJsonValue(m_add_sheet, json[QString("addSheet")]);
    m_add_sheet_isSet = !json[QString("addSheet")].isNull() && m_add_sheet_isValid;

    m_add_slicer_isValid = ::OpenAPI::fromJsonValue(m_add_slicer, json[QString("addSlicer")]);
    m_add_slicer_isSet = !json[QString("addSlicer")].isNull() && m_add_slicer_isValid;

    m_append_cells_isValid = ::OpenAPI::fromJsonValue(m_append_cells, json[QString("appendCells")]);
    m_append_cells_isSet = !json[QString("appendCells")].isNull() && m_append_cells_isValid;

    m_append_dimension_isValid = ::OpenAPI::fromJsonValue(m_append_dimension, json[QString("appendDimension")]);
    m_append_dimension_isSet = !json[QString("appendDimension")].isNull() && m_append_dimension_isValid;

    m_auto_fill_isValid = ::OpenAPI::fromJsonValue(m_auto_fill, json[QString("autoFill")]);
    m_auto_fill_isSet = !json[QString("autoFill")].isNull() && m_auto_fill_isValid;

    m_auto_resize_dimensions_isValid = ::OpenAPI::fromJsonValue(m_auto_resize_dimensions, json[QString("autoResizeDimensions")]);
    m_auto_resize_dimensions_isSet = !json[QString("autoResizeDimensions")].isNull() && m_auto_resize_dimensions_isValid;

    m_clear_basic_filter_isValid = ::OpenAPI::fromJsonValue(m_clear_basic_filter, json[QString("clearBasicFilter")]);
    m_clear_basic_filter_isSet = !json[QString("clearBasicFilter")].isNull() && m_clear_basic_filter_isValid;

    m_copy_paste_isValid = ::OpenAPI::fromJsonValue(m_copy_paste, json[QString("copyPaste")]);
    m_copy_paste_isSet = !json[QString("copyPaste")].isNull() && m_copy_paste_isValid;

    m_create_developer_metadata_isValid = ::OpenAPI::fromJsonValue(m_create_developer_metadata, json[QString("createDeveloperMetadata")]);
    m_create_developer_metadata_isSet = !json[QString("createDeveloperMetadata")].isNull() && m_create_developer_metadata_isValid;

    m_cut_paste_isValid = ::OpenAPI::fromJsonValue(m_cut_paste, json[QString("cutPaste")]);
    m_cut_paste_isSet = !json[QString("cutPaste")].isNull() && m_cut_paste_isValid;

    m_delete_banding_isValid = ::OpenAPI::fromJsonValue(m_delete_banding, json[QString("deleteBanding")]);
    m_delete_banding_isSet = !json[QString("deleteBanding")].isNull() && m_delete_banding_isValid;

    m_delete_conditional_format_rule_isValid = ::OpenAPI::fromJsonValue(m_delete_conditional_format_rule, json[QString("deleteConditionalFormatRule")]);
    m_delete_conditional_format_rule_isSet = !json[QString("deleteConditionalFormatRule")].isNull() && m_delete_conditional_format_rule_isValid;

    m_delete_data_source_isValid = ::OpenAPI::fromJsonValue(m_delete_data_source, json[QString("deleteDataSource")]);
    m_delete_data_source_isSet = !json[QString("deleteDataSource")].isNull() && m_delete_data_source_isValid;

    m_delete_developer_metadata_isValid = ::OpenAPI::fromJsonValue(m_delete_developer_metadata, json[QString("deleteDeveloperMetadata")]);
    m_delete_developer_metadata_isSet = !json[QString("deleteDeveloperMetadata")].isNull() && m_delete_developer_metadata_isValid;

    m_delete_dimension_isValid = ::OpenAPI::fromJsonValue(m_delete_dimension, json[QString("deleteDimension")]);
    m_delete_dimension_isSet = !json[QString("deleteDimension")].isNull() && m_delete_dimension_isValid;

    m_delete_dimension_group_isValid = ::OpenAPI::fromJsonValue(m_delete_dimension_group, json[QString("deleteDimensionGroup")]);
    m_delete_dimension_group_isSet = !json[QString("deleteDimensionGroup")].isNull() && m_delete_dimension_group_isValid;

    m_delete_duplicates_isValid = ::OpenAPI::fromJsonValue(m_delete_duplicates, json[QString("deleteDuplicates")]);
    m_delete_duplicates_isSet = !json[QString("deleteDuplicates")].isNull() && m_delete_duplicates_isValid;

    m_delete_embedded_object_isValid = ::OpenAPI::fromJsonValue(m_delete_embedded_object, json[QString("deleteEmbeddedObject")]);
    m_delete_embedded_object_isSet = !json[QString("deleteEmbeddedObject")].isNull() && m_delete_embedded_object_isValid;

    m_delete_filter_view_isValid = ::OpenAPI::fromJsonValue(m_delete_filter_view, json[QString("deleteFilterView")]);
    m_delete_filter_view_isSet = !json[QString("deleteFilterView")].isNull() && m_delete_filter_view_isValid;

    m_delete_named_range_isValid = ::OpenAPI::fromJsonValue(m_delete_named_range, json[QString("deleteNamedRange")]);
    m_delete_named_range_isSet = !json[QString("deleteNamedRange")].isNull() && m_delete_named_range_isValid;

    m_delete_protected_range_isValid = ::OpenAPI::fromJsonValue(m_delete_protected_range, json[QString("deleteProtectedRange")]);
    m_delete_protected_range_isSet = !json[QString("deleteProtectedRange")].isNull() && m_delete_protected_range_isValid;

    m_delete_range_isValid = ::OpenAPI::fromJsonValue(m_delete_range, json[QString("deleteRange")]);
    m_delete_range_isSet = !json[QString("deleteRange")].isNull() && m_delete_range_isValid;

    m_delete_sheet_isValid = ::OpenAPI::fromJsonValue(m_delete_sheet, json[QString("deleteSheet")]);
    m_delete_sheet_isSet = !json[QString("deleteSheet")].isNull() && m_delete_sheet_isValid;

    m_duplicate_filter_view_isValid = ::OpenAPI::fromJsonValue(m_duplicate_filter_view, json[QString("duplicateFilterView")]);
    m_duplicate_filter_view_isSet = !json[QString("duplicateFilterView")].isNull() && m_duplicate_filter_view_isValid;

    m_duplicate_sheet_isValid = ::OpenAPI::fromJsonValue(m_duplicate_sheet, json[QString("duplicateSheet")]);
    m_duplicate_sheet_isSet = !json[QString("duplicateSheet")].isNull() && m_duplicate_sheet_isValid;

    m_find_replace_isValid = ::OpenAPI::fromJsonValue(m_find_replace, json[QString("findReplace")]);
    m_find_replace_isSet = !json[QString("findReplace")].isNull() && m_find_replace_isValid;

    m_insert_dimension_isValid = ::OpenAPI::fromJsonValue(m_insert_dimension, json[QString("insertDimension")]);
    m_insert_dimension_isSet = !json[QString("insertDimension")].isNull() && m_insert_dimension_isValid;

    m_insert_range_isValid = ::OpenAPI::fromJsonValue(m_insert_range, json[QString("insertRange")]);
    m_insert_range_isSet = !json[QString("insertRange")].isNull() && m_insert_range_isValid;

    m_merge_cells_isValid = ::OpenAPI::fromJsonValue(m_merge_cells, json[QString("mergeCells")]);
    m_merge_cells_isSet = !json[QString("mergeCells")].isNull() && m_merge_cells_isValid;

    m_move_dimension_isValid = ::OpenAPI::fromJsonValue(m_move_dimension, json[QString("moveDimension")]);
    m_move_dimension_isSet = !json[QString("moveDimension")].isNull() && m_move_dimension_isValid;

    m_paste_data_isValid = ::OpenAPI::fromJsonValue(m_paste_data, json[QString("pasteData")]);
    m_paste_data_isSet = !json[QString("pasteData")].isNull() && m_paste_data_isValid;

    m_randomize_range_isValid = ::OpenAPI::fromJsonValue(m_randomize_range, json[QString("randomizeRange")]);
    m_randomize_range_isSet = !json[QString("randomizeRange")].isNull() && m_randomize_range_isValid;

    m_refresh_data_source_isValid = ::OpenAPI::fromJsonValue(m_refresh_data_source, json[QString("refreshDataSource")]);
    m_refresh_data_source_isSet = !json[QString("refreshDataSource")].isNull() && m_refresh_data_source_isValid;

    m_repeat_cell_isValid = ::OpenAPI::fromJsonValue(m_repeat_cell, json[QString("repeatCell")]);
    m_repeat_cell_isSet = !json[QString("repeatCell")].isNull() && m_repeat_cell_isValid;

    m_set_basic_filter_isValid = ::OpenAPI::fromJsonValue(m_set_basic_filter, json[QString("setBasicFilter")]);
    m_set_basic_filter_isSet = !json[QString("setBasicFilter")].isNull() && m_set_basic_filter_isValid;

    m_set_data_validation_isValid = ::OpenAPI::fromJsonValue(m_set_data_validation, json[QString("setDataValidation")]);
    m_set_data_validation_isSet = !json[QString("setDataValidation")].isNull() && m_set_data_validation_isValid;

    m_sort_range_isValid = ::OpenAPI::fromJsonValue(m_sort_range, json[QString("sortRange")]);
    m_sort_range_isSet = !json[QString("sortRange")].isNull() && m_sort_range_isValid;

    m_text_to_columns_isValid = ::OpenAPI::fromJsonValue(m_text_to_columns, json[QString("textToColumns")]);
    m_text_to_columns_isSet = !json[QString("textToColumns")].isNull() && m_text_to_columns_isValid;

    m_trim_whitespace_isValid = ::OpenAPI::fromJsonValue(m_trim_whitespace, json[QString("trimWhitespace")]);
    m_trim_whitespace_isSet = !json[QString("trimWhitespace")].isNull() && m_trim_whitespace_isValid;

    m_unmerge_cells_isValid = ::OpenAPI::fromJsonValue(m_unmerge_cells, json[QString("unmergeCells")]);
    m_unmerge_cells_isSet = !json[QString("unmergeCells")].isNull() && m_unmerge_cells_isValid;

    m_update_banding_isValid = ::OpenAPI::fromJsonValue(m_update_banding, json[QString("updateBanding")]);
    m_update_banding_isSet = !json[QString("updateBanding")].isNull() && m_update_banding_isValid;

    m_update_borders_isValid = ::OpenAPI::fromJsonValue(m_update_borders, json[QString("updateBorders")]);
    m_update_borders_isSet = !json[QString("updateBorders")].isNull() && m_update_borders_isValid;

    m_update_cells_isValid = ::OpenAPI::fromJsonValue(m_update_cells, json[QString("updateCells")]);
    m_update_cells_isSet = !json[QString("updateCells")].isNull() && m_update_cells_isValid;

    m_update_chart_spec_isValid = ::OpenAPI::fromJsonValue(m_update_chart_spec, json[QString("updateChartSpec")]);
    m_update_chart_spec_isSet = !json[QString("updateChartSpec")].isNull() && m_update_chart_spec_isValid;

    m_update_conditional_format_rule_isValid = ::OpenAPI::fromJsonValue(m_update_conditional_format_rule, json[QString("updateConditionalFormatRule")]);
    m_update_conditional_format_rule_isSet = !json[QString("updateConditionalFormatRule")].isNull() && m_update_conditional_format_rule_isValid;

    m_update_data_source_isValid = ::OpenAPI::fromJsonValue(m_update_data_source, json[QString("updateDataSource")]);
    m_update_data_source_isSet = !json[QString("updateDataSource")].isNull() && m_update_data_source_isValid;

    m_update_developer_metadata_isValid = ::OpenAPI::fromJsonValue(m_update_developer_metadata, json[QString("updateDeveloperMetadata")]);
    m_update_developer_metadata_isSet = !json[QString("updateDeveloperMetadata")].isNull() && m_update_developer_metadata_isValid;

    m_update_dimension_group_isValid = ::OpenAPI::fromJsonValue(m_update_dimension_group, json[QString("updateDimensionGroup")]);
    m_update_dimension_group_isSet = !json[QString("updateDimensionGroup")].isNull() && m_update_dimension_group_isValid;

    m_update_dimension_properties_isValid = ::OpenAPI::fromJsonValue(m_update_dimension_properties, json[QString("updateDimensionProperties")]);
    m_update_dimension_properties_isSet = !json[QString("updateDimensionProperties")].isNull() && m_update_dimension_properties_isValid;

    m_update_embedded_object_border_isValid = ::OpenAPI::fromJsonValue(m_update_embedded_object_border, json[QString("updateEmbeddedObjectBorder")]);
    m_update_embedded_object_border_isSet = !json[QString("updateEmbeddedObjectBorder")].isNull() && m_update_embedded_object_border_isValid;

    m_update_embedded_object_position_isValid = ::OpenAPI::fromJsonValue(m_update_embedded_object_position, json[QString("updateEmbeddedObjectPosition")]);
    m_update_embedded_object_position_isSet = !json[QString("updateEmbeddedObjectPosition")].isNull() && m_update_embedded_object_position_isValid;

    m_update_filter_view_isValid = ::OpenAPI::fromJsonValue(m_update_filter_view, json[QString("updateFilterView")]);
    m_update_filter_view_isSet = !json[QString("updateFilterView")].isNull() && m_update_filter_view_isValid;

    m_update_named_range_isValid = ::OpenAPI::fromJsonValue(m_update_named_range, json[QString("updateNamedRange")]);
    m_update_named_range_isSet = !json[QString("updateNamedRange")].isNull() && m_update_named_range_isValid;

    m_update_protected_range_isValid = ::OpenAPI::fromJsonValue(m_update_protected_range, json[QString("updateProtectedRange")]);
    m_update_protected_range_isSet = !json[QString("updateProtectedRange")].isNull() && m_update_protected_range_isValid;

    m_update_sheet_properties_isValid = ::OpenAPI::fromJsonValue(m_update_sheet_properties, json[QString("updateSheetProperties")]);
    m_update_sheet_properties_isSet = !json[QString("updateSheetProperties")].isNull() && m_update_sheet_properties_isValid;

    m_update_slicer_spec_isValid = ::OpenAPI::fromJsonValue(m_update_slicer_spec, json[QString("updateSlicerSpec")]);
    m_update_slicer_spec_isSet = !json[QString("updateSlicerSpec")].isNull() && m_update_slicer_spec_isValid;

    m_update_spreadsheet_properties_isValid = ::OpenAPI::fromJsonValue(m_update_spreadsheet_properties, json[QString("updateSpreadsheetProperties")]);
    m_update_spreadsheet_properties_isSet = !json[QString("updateSpreadsheetProperties")].isNull() && m_update_spreadsheet_properties_isValid;
}

QString OAIRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_add_banding.isSet()) {
        obj.insert(QString("addBanding"), ::OpenAPI::toJsonValue(m_add_banding));
    }
    if (m_add_chart.isSet()) {
        obj.insert(QString("addChart"), ::OpenAPI::toJsonValue(m_add_chart));
    }
    if (m_add_conditional_format_rule.isSet()) {
        obj.insert(QString("addConditionalFormatRule"), ::OpenAPI::toJsonValue(m_add_conditional_format_rule));
    }
    if (m_add_data_source.isSet()) {
        obj.insert(QString("addDataSource"), ::OpenAPI::toJsonValue(m_add_data_source));
    }
    if (m_add_dimension_group.isSet()) {
        obj.insert(QString("addDimensionGroup"), ::OpenAPI::toJsonValue(m_add_dimension_group));
    }
    if (m_add_filter_view.isSet()) {
        obj.insert(QString("addFilterView"), ::OpenAPI::toJsonValue(m_add_filter_view));
    }
    if (m_add_named_range.isSet()) {
        obj.insert(QString("addNamedRange"), ::OpenAPI::toJsonValue(m_add_named_range));
    }
    if (m_add_protected_range.isSet()) {
        obj.insert(QString("addProtectedRange"), ::OpenAPI::toJsonValue(m_add_protected_range));
    }
    if (m_add_sheet.isSet()) {
        obj.insert(QString("addSheet"), ::OpenAPI::toJsonValue(m_add_sheet));
    }
    if (m_add_slicer.isSet()) {
        obj.insert(QString("addSlicer"), ::OpenAPI::toJsonValue(m_add_slicer));
    }
    if (m_append_cells.isSet()) {
        obj.insert(QString("appendCells"), ::OpenAPI::toJsonValue(m_append_cells));
    }
    if (m_append_dimension.isSet()) {
        obj.insert(QString("appendDimension"), ::OpenAPI::toJsonValue(m_append_dimension));
    }
    if (m_auto_fill.isSet()) {
        obj.insert(QString("autoFill"), ::OpenAPI::toJsonValue(m_auto_fill));
    }
    if (m_auto_resize_dimensions.isSet()) {
        obj.insert(QString("autoResizeDimensions"), ::OpenAPI::toJsonValue(m_auto_resize_dimensions));
    }
    if (m_clear_basic_filter.isSet()) {
        obj.insert(QString("clearBasicFilter"), ::OpenAPI::toJsonValue(m_clear_basic_filter));
    }
    if (m_copy_paste.isSet()) {
        obj.insert(QString("copyPaste"), ::OpenAPI::toJsonValue(m_copy_paste));
    }
    if (m_create_developer_metadata.isSet()) {
        obj.insert(QString("createDeveloperMetadata"), ::OpenAPI::toJsonValue(m_create_developer_metadata));
    }
    if (m_cut_paste.isSet()) {
        obj.insert(QString("cutPaste"), ::OpenAPI::toJsonValue(m_cut_paste));
    }
    if (m_delete_banding.isSet()) {
        obj.insert(QString("deleteBanding"), ::OpenAPI::toJsonValue(m_delete_banding));
    }
    if (m_delete_conditional_format_rule.isSet()) {
        obj.insert(QString("deleteConditionalFormatRule"), ::OpenAPI::toJsonValue(m_delete_conditional_format_rule));
    }
    if (m_delete_data_source.isSet()) {
        obj.insert(QString("deleteDataSource"), ::OpenAPI::toJsonValue(m_delete_data_source));
    }
    if (m_delete_developer_metadata.isSet()) {
        obj.insert(QString("deleteDeveloperMetadata"), ::OpenAPI::toJsonValue(m_delete_developer_metadata));
    }
    if (m_delete_dimension.isSet()) {
        obj.insert(QString("deleteDimension"), ::OpenAPI::toJsonValue(m_delete_dimension));
    }
    if (m_delete_dimension_group.isSet()) {
        obj.insert(QString("deleteDimensionGroup"), ::OpenAPI::toJsonValue(m_delete_dimension_group));
    }
    if (m_delete_duplicates.isSet()) {
        obj.insert(QString("deleteDuplicates"), ::OpenAPI::toJsonValue(m_delete_duplicates));
    }
    if (m_delete_embedded_object.isSet()) {
        obj.insert(QString("deleteEmbeddedObject"), ::OpenAPI::toJsonValue(m_delete_embedded_object));
    }
    if (m_delete_filter_view.isSet()) {
        obj.insert(QString("deleteFilterView"), ::OpenAPI::toJsonValue(m_delete_filter_view));
    }
    if (m_delete_named_range.isSet()) {
        obj.insert(QString("deleteNamedRange"), ::OpenAPI::toJsonValue(m_delete_named_range));
    }
    if (m_delete_protected_range.isSet()) {
        obj.insert(QString("deleteProtectedRange"), ::OpenAPI::toJsonValue(m_delete_protected_range));
    }
    if (m_delete_range.isSet()) {
        obj.insert(QString("deleteRange"), ::OpenAPI::toJsonValue(m_delete_range));
    }
    if (m_delete_sheet.isSet()) {
        obj.insert(QString("deleteSheet"), ::OpenAPI::toJsonValue(m_delete_sheet));
    }
    if (m_duplicate_filter_view.isSet()) {
        obj.insert(QString("duplicateFilterView"), ::OpenAPI::toJsonValue(m_duplicate_filter_view));
    }
    if (m_duplicate_sheet.isSet()) {
        obj.insert(QString("duplicateSheet"), ::OpenAPI::toJsonValue(m_duplicate_sheet));
    }
    if (m_find_replace.isSet()) {
        obj.insert(QString("findReplace"), ::OpenAPI::toJsonValue(m_find_replace));
    }
    if (m_insert_dimension.isSet()) {
        obj.insert(QString("insertDimension"), ::OpenAPI::toJsonValue(m_insert_dimension));
    }
    if (m_insert_range.isSet()) {
        obj.insert(QString("insertRange"), ::OpenAPI::toJsonValue(m_insert_range));
    }
    if (m_merge_cells.isSet()) {
        obj.insert(QString("mergeCells"), ::OpenAPI::toJsonValue(m_merge_cells));
    }
    if (m_move_dimension.isSet()) {
        obj.insert(QString("moveDimension"), ::OpenAPI::toJsonValue(m_move_dimension));
    }
    if (m_paste_data.isSet()) {
        obj.insert(QString("pasteData"), ::OpenAPI::toJsonValue(m_paste_data));
    }
    if (m_randomize_range.isSet()) {
        obj.insert(QString("randomizeRange"), ::OpenAPI::toJsonValue(m_randomize_range));
    }
    if (m_refresh_data_source.isSet()) {
        obj.insert(QString("refreshDataSource"), ::OpenAPI::toJsonValue(m_refresh_data_source));
    }
    if (m_repeat_cell.isSet()) {
        obj.insert(QString("repeatCell"), ::OpenAPI::toJsonValue(m_repeat_cell));
    }
    if (m_set_basic_filter.isSet()) {
        obj.insert(QString("setBasicFilter"), ::OpenAPI::toJsonValue(m_set_basic_filter));
    }
    if (m_set_data_validation.isSet()) {
        obj.insert(QString("setDataValidation"), ::OpenAPI::toJsonValue(m_set_data_validation));
    }
    if (m_sort_range.isSet()) {
        obj.insert(QString("sortRange"), ::OpenAPI::toJsonValue(m_sort_range));
    }
    if (m_text_to_columns.isSet()) {
        obj.insert(QString("textToColumns"), ::OpenAPI::toJsonValue(m_text_to_columns));
    }
    if (m_trim_whitespace.isSet()) {
        obj.insert(QString("trimWhitespace"), ::OpenAPI::toJsonValue(m_trim_whitespace));
    }
    if (m_unmerge_cells.isSet()) {
        obj.insert(QString("unmergeCells"), ::OpenAPI::toJsonValue(m_unmerge_cells));
    }
    if (m_update_banding.isSet()) {
        obj.insert(QString("updateBanding"), ::OpenAPI::toJsonValue(m_update_banding));
    }
    if (m_update_borders.isSet()) {
        obj.insert(QString("updateBorders"), ::OpenAPI::toJsonValue(m_update_borders));
    }
    if (m_update_cells.isSet()) {
        obj.insert(QString("updateCells"), ::OpenAPI::toJsonValue(m_update_cells));
    }
    if (m_update_chart_spec.isSet()) {
        obj.insert(QString("updateChartSpec"), ::OpenAPI::toJsonValue(m_update_chart_spec));
    }
    if (m_update_conditional_format_rule.isSet()) {
        obj.insert(QString("updateConditionalFormatRule"), ::OpenAPI::toJsonValue(m_update_conditional_format_rule));
    }
    if (m_update_data_source.isSet()) {
        obj.insert(QString("updateDataSource"), ::OpenAPI::toJsonValue(m_update_data_source));
    }
    if (m_update_developer_metadata.isSet()) {
        obj.insert(QString("updateDeveloperMetadata"), ::OpenAPI::toJsonValue(m_update_developer_metadata));
    }
    if (m_update_dimension_group.isSet()) {
        obj.insert(QString("updateDimensionGroup"), ::OpenAPI::toJsonValue(m_update_dimension_group));
    }
    if (m_update_dimension_properties.isSet()) {
        obj.insert(QString("updateDimensionProperties"), ::OpenAPI::toJsonValue(m_update_dimension_properties));
    }
    if (m_update_embedded_object_border.isSet()) {
        obj.insert(QString("updateEmbeddedObjectBorder"), ::OpenAPI::toJsonValue(m_update_embedded_object_border));
    }
    if (m_update_embedded_object_position.isSet()) {
        obj.insert(QString("updateEmbeddedObjectPosition"), ::OpenAPI::toJsonValue(m_update_embedded_object_position));
    }
    if (m_update_filter_view.isSet()) {
        obj.insert(QString("updateFilterView"), ::OpenAPI::toJsonValue(m_update_filter_view));
    }
    if (m_update_named_range.isSet()) {
        obj.insert(QString("updateNamedRange"), ::OpenAPI::toJsonValue(m_update_named_range));
    }
    if (m_update_protected_range.isSet()) {
        obj.insert(QString("updateProtectedRange"), ::OpenAPI::toJsonValue(m_update_protected_range));
    }
    if (m_update_sheet_properties.isSet()) {
        obj.insert(QString("updateSheetProperties"), ::OpenAPI::toJsonValue(m_update_sheet_properties));
    }
    if (m_update_slicer_spec.isSet()) {
        obj.insert(QString("updateSlicerSpec"), ::OpenAPI::toJsonValue(m_update_slicer_spec));
    }
    if (m_update_spreadsheet_properties.isSet()) {
        obj.insert(QString("updateSpreadsheetProperties"), ::OpenAPI::toJsonValue(m_update_spreadsheet_properties));
    }
    return obj;
}

OAIAddBandingRequest OAIRequest::getAddBanding() const {
    return m_add_banding;
}
void OAIRequest::setAddBanding(const OAIAddBandingRequest &add_banding) {
    m_add_banding = add_banding;
    m_add_banding_isSet = true;
}

bool OAIRequest::is_add_banding_Set() const{
    return m_add_banding_isSet;
}

bool OAIRequest::is_add_banding_Valid() const{
    return m_add_banding_isValid;
}

OAIAddChartRequest OAIRequest::getAddChart() const {
    return m_add_chart;
}
void OAIRequest::setAddChart(const OAIAddChartRequest &add_chart) {
    m_add_chart = add_chart;
    m_add_chart_isSet = true;
}

bool OAIRequest::is_add_chart_Set() const{
    return m_add_chart_isSet;
}

bool OAIRequest::is_add_chart_Valid() const{
    return m_add_chart_isValid;
}

OAIAddConditionalFormatRuleRequest OAIRequest::getAddConditionalFormatRule() const {
    return m_add_conditional_format_rule;
}
void OAIRequest::setAddConditionalFormatRule(const OAIAddConditionalFormatRuleRequest &add_conditional_format_rule) {
    m_add_conditional_format_rule = add_conditional_format_rule;
    m_add_conditional_format_rule_isSet = true;
}

bool OAIRequest::is_add_conditional_format_rule_Set() const{
    return m_add_conditional_format_rule_isSet;
}

bool OAIRequest::is_add_conditional_format_rule_Valid() const{
    return m_add_conditional_format_rule_isValid;
}

OAIAddDataSourceRequest OAIRequest::getAddDataSource() const {
    return m_add_data_source;
}
void OAIRequest::setAddDataSource(const OAIAddDataSourceRequest &add_data_source) {
    m_add_data_source = add_data_source;
    m_add_data_source_isSet = true;
}

bool OAIRequest::is_add_data_source_Set() const{
    return m_add_data_source_isSet;
}

bool OAIRequest::is_add_data_source_Valid() const{
    return m_add_data_source_isValid;
}

OAIAddDimensionGroupRequest OAIRequest::getAddDimensionGroup() const {
    return m_add_dimension_group;
}
void OAIRequest::setAddDimensionGroup(const OAIAddDimensionGroupRequest &add_dimension_group) {
    m_add_dimension_group = add_dimension_group;
    m_add_dimension_group_isSet = true;
}

bool OAIRequest::is_add_dimension_group_Set() const{
    return m_add_dimension_group_isSet;
}

bool OAIRequest::is_add_dimension_group_Valid() const{
    return m_add_dimension_group_isValid;
}

OAIAddFilterViewRequest OAIRequest::getAddFilterView() const {
    return m_add_filter_view;
}
void OAIRequest::setAddFilterView(const OAIAddFilterViewRequest &add_filter_view) {
    m_add_filter_view = add_filter_view;
    m_add_filter_view_isSet = true;
}

bool OAIRequest::is_add_filter_view_Set() const{
    return m_add_filter_view_isSet;
}

bool OAIRequest::is_add_filter_view_Valid() const{
    return m_add_filter_view_isValid;
}

OAIAddNamedRangeRequest OAIRequest::getAddNamedRange() const {
    return m_add_named_range;
}
void OAIRequest::setAddNamedRange(const OAIAddNamedRangeRequest &add_named_range) {
    m_add_named_range = add_named_range;
    m_add_named_range_isSet = true;
}

bool OAIRequest::is_add_named_range_Set() const{
    return m_add_named_range_isSet;
}

bool OAIRequest::is_add_named_range_Valid() const{
    return m_add_named_range_isValid;
}

OAIAddProtectedRangeRequest OAIRequest::getAddProtectedRange() const {
    return m_add_protected_range;
}
void OAIRequest::setAddProtectedRange(const OAIAddProtectedRangeRequest &add_protected_range) {
    m_add_protected_range = add_protected_range;
    m_add_protected_range_isSet = true;
}

bool OAIRequest::is_add_protected_range_Set() const{
    return m_add_protected_range_isSet;
}

bool OAIRequest::is_add_protected_range_Valid() const{
    return m_add_protected_range_isValid;
}

OAIAddSheetRequest OAIRequest::getAddSheet() const {
    return m_add_sheet;
}
void OAIRequest::setAddSheet(const OAIAddSheetRequest &add_sheet) {
    m_add_sheet = add_sheet;
    m_add_sheet_isSet = true;
}

bool OAIRequest::is_add_sheet_Set() const{
    return m_add_sheet_isSet;
}

bool OAIRequest::is_add_sheet_Valid() const{
    return m_add_sheet_isValid;
}

OAIAddSlicerRequest OAIRequest::getAddSlicer() const {
    return m_add_slicer;
}
void OAIRequest::setAddSlicer(const OAIAddSlicerRequest &add_slicer) {
    m_add_slicer = add_slicer;
    m_add_slicer_isSet = true;
}

bool OAIRequest::is_add_slicer_Set() const{
    return m_add_slicer_isSet;
}

bool OAIRequest::is_add_slicer_Valid() const{
    return m_add_slicer_isValid;
}

OAIAppendCellsRequest OAIRequest::getAppendCells() const {
    return m_append_cells;
}
void OAIRequest::setAppendCells(const OAIAppendCellsRequest &append_cells) {
    m_append_cells = append_cells;
    m_append_cells_isSet = true;
}

bool OAIRequest::is_append_cells_Set() const{
    return m_append_cells_isSet;
}

bool OAIRequest::is_append_cells_Valid() const{
    return m_append_cells_isValid;
}

OAIAppendDimensionRequest OAIRequest::getAppendDimension() const {
    return m_append_dimension;
}
void OAIRequest::setAppendDimension(const OAIAppendDimensionRequest &append_dimension) {
    m_append_dimension = append_dimension;
    m_append_dimension_isSet = true;
}

bool OAIRequest::is_append_dimension_Set() const{
    return m_append_dimension_isSet;
}

bool OAIRequest::is_append_dimension_Valid() const{
    return m_append_dimension_isValid;
}

OAIAutoFillRequest OAIRequest::getAutoFill() const {
    return m_auto_fill;
}
void OAIRequest::setAutoFill(const OAIAutoFillRequest &auto_fill) {
    m_auto_fill = auto_fill;
    m_auto_fill_isSet = true;
}

bool OAIRequest::is_auto_fill_Set() const{
    return m_auto_fill_isSet;
}

bool OAIRequest::is_auto_fill_Valid() const{
    return m_auto_fill_isValid;
}

OAIAutoResizeDimensionsRequest OAIRequest::getAutoResizeDimensions() const {
    return m_auto_resize_dimensions;
}
void OAIRequest::setAutoResizeDimensions(const OAIAutoResizeDimensionsRequest &auto_resize_dimensions) {
    m_auto_resize_dimensions = auto_resize_dimensions;
    m_auto_resize_dimensions_isSet = true;
}

bool OAIRequest::is_auto_resize_dimensions_Set() const{
    return m_auto_resize_dimensions_isSet;
}

bool OAIRequest::is_auto_resize_dimensions_Valid() const{
    return m_auto_resize_dimensions_isValid;
}

OAIClearBasicFilterRequest OAIRequest::getClearBasicFilter() const {
    return m_clear_basic_filter;
}
void OAIRequest::setClearBasicFilter(const OAIClearBasicFilterRequest &clear_basic_filter) {
    m_clear_basic_filter = clear_basic_filter;
    m_clear_basic_filter_isSet = true;
}

bool OAIRequest::is_clear_basic_filter_Set() const{
    return m_clear_basic_filter_isSet;
}

bool OAIRequest::is_clear_basic_filter_Valid() const{
    return m_clear_basic_filter_isValid;
}

OAICopyPasteRequest OAIRequest::getCopyPaste() const {
    return m_copy_paste;
}
void OAIRequest::setCopyPaste(const OAICopyPasteRequest &copy_paste) {
    m_copy_paste = copy_paste;
    m_copy_paste_isSet = true;
}

bool OAIRequest::is_copy_paste_Set() const{
    return m_copy_paste_isSet;
}

bool OAIRequest::is_copy_paste_Valid() const{
    return m_copy_paste_isValid;
}

OAICreateDeveloperMetadataRequest OAIRequest::getCreateDeveloperMetadata() const {
    return m_create_developer_metadata;
}
void OAIRequest::setCreateDeveloperMetadata(const OAICreateDeveloperMetadataRequest &create_developer_metadata) {
    m_create_developer_metadata = create_developer_metadata;
    m_create_developer_metadata_isSet = true;
}

bool OAIRequest::is_create_developer_metadata_Set() const{
    return m_create_developer_metadata_isSet;
}

bool OAIRequest::is_create_developer_metadata_Valid() const{
    return m_create_developer_metadata_isValid;
}

OAICutPasteRequest OAIRequest::getCutPaste() const {
    return m_cut_paste;
}
void OAIRequest::setCutPaste(const OAICutPasteRequest &cut_paste) {
    m_cut_paste = cut_paste;
    m_cut_paste_isSet = true;
}

bool OAIRequest::is_cut_paste_Set() const{
    return m_cut_paste_isSet;
}

bool OAIRequest::is_cut_paste_Valid() const{
    return m_cut_paste_isValid;
}

OAIDeleteBandingRequest OAIRequest::getDeleteBanding() const {
    return m_delete_banding;
}
void OAIRequest::setDeleteBanding(const OAIDeleteBandingRequest &delete_banding) {
    m_delete_banding = delete_banding;
    m_delete_banding_isSet = true;
}

bool OAIRequest::is_delete_banding_Set() const{
    return m_delete_banding_isSet;
}

bool OAIRequest::is_delete_banding_Valid() const{
    return m_delete_banding_isValid;
}

OAIDeleteConditionalFormatRuleRequest OAIRequest::getDeleteConditionalFormatRule() const {
    return m_delete_conditional_format_rule;
}
void OAIRequest::setDeleteConditionalFormatRule(const OAIDeleteConditionalFormatRuleRequest &delete_conditional_format_rule) {
    m_delete_conditional_format_rule = delete_conditional_format_rule;
    m_delete_conditional_format_rule_isSet = true;
}

bool OAIRequest::is_delete_conditional_format_rule_Set() const{
    return m_delete_conditional_format_rule_isSet;
}

bool OAIRequest::is_delete_conditional_format_rule_Valid() const{
    return m_delete_conditional_format_rule_isValid;
}

OAIDeleteDataSourceRequest OAIRequest::getDeleteDataSource() const {
    return m_delete_data_source;
}
void OAIRequest::setDeleteDataSource(const OAIDeleteDataSourceRequest &delete_data_source) {
    m_delete_data_source = delete_data_source;
    m_delete_data_source_isSet = true;
}

bool OAIRequest::is_delete_data_source_Set() const{
    return m_delete_data_source_isSet;
}

bool OAIRequest::is_delete_data_source_Valid() const{
    return m_delete_data_source_isValid;
}

OAIDeleteDeveloperMetadataRequest OAIRequest::getDeleteDeveloperMetadata() const {
    return m_delete_developer_metadata;
}
void OAIRequest::setDeleteDeveloperMetadata(const OAIDeleteDeveloperMetadataRequest &delete_developer_metadata) {
    m_delete_developer_metadata = delete_developer_metadata;
    m_delete_developer_metadata_isSet = true;
}

bool OAIRequest::is_delete_developer_metadata_Set() const{
    return m_delete_developer_metadata_isSet;
}

bool OAIRequest::is_delete_developer_metadata_Valid() const{
    return m_delete_developer_metadata_isValid;
}

OAIDeleteDimensionRequest OAIRequest::getDeleteDimension() const {
    return m_delete_dimension;
}
void OAIRequest::setDeleteDimension(const OAIDeleteDimensionRequest &delete_dimension) {
    m_delete_dimension = delete_dimension;
    m_delete_dimension_isSet = true;
}

bool OAIRequest::is_delete_dimension_Set() const{
    return m_delete_dimension_isSet;
}

bool OAIRequest::is_delete_dimension_Valid() const{
    return m_delete_dimension_isValid;
}

OAIDeleteDimensionGroupRequest OAIRequest::getDeleteDimensionGroup() const {
    return m_delete_dimension_group;
}
void OAIRequest::setDeleteDimensionGroup(const OAIDeleteDimensionGroupRequest &delete_dimension_group) {
    m_delete_dimension_group = delete_dimension_group;
    m_delete_dimension_group_isSet = true;
}

bool OAIRequest::is_delete_dimension_group_Set() const{
    return m_delete_dimension_group_isSet;
}

bool OAIRequest::is_delete_dimension_group_Valid() const{
    return m_delete_dimension_group_isValid;
}

OAIDeleteDuplicatesRequest OAIRequest::getDeleteDuplicates() const {
    return m_delete_duplicates;
}
void OAIRequest::setDeleteDuplicates(const OAIDeleteDuplicatesRequest &delete_duplicates) {
    m_delete_duplicates = delete_duplicates;
    m_delete_duplicates_isSet = true;
}

bool OAIRequest::is_delete_duplicates_Set() const{
    return m_delete_duplicates_isSet;
}

bool OAIRequest::is_delete_duplicates_Valid() const{
    return m_delete_duplicates_isValid;
}

OAIDeleteEmbeddedObjectRequest OAIRequest::getDeleteEmbeddedObject() const {
    return m_delete_embedded_object;
}
void OAIRequest::setDeleteEmbeddedObject(const OAIDeleteEmbeddedObjectRequest &delete_embedded_object) {
    m_delete_embedded_object = delete_embedded_object;
    m_delete_embedded_object_isSet = true;
}

bool OAIRequest::is_delete_embedded_object_Set() const{
    return m_delete_embedded_object_isSet;
}

bool OAIRequest::is_delete_embedded_object_Valid() const{
    return m_delete_embedded_object_isValid;
}

OAIDeleteFilterViewRequest OAIRequest::getDeleteFilterView() const {
    return m_delete_filter_view;
}
void OAIRequest::setDeleteFilterView(const OAIDeleteFilterViewRequest &delete_filter_view) {
    m_delete_filter_view = delete_filter_view;
    m_delete_filter_view_isSet = true;
}

bool OAIRequest::is_delete_filter_view_Set() const{
    return m_delete_filter_view_isSet;
}

bool OAIRequest::is_delete_filter_view_Valid() const{
    return m_delete_filter_view_isValid;
}

OAIDeleteNamedRangeRequest OAIRequest::getDeleteNamedRange() const {
    return m_delete_named_range;
}
void OAIRequest::setDeleteNamedRange(const OAIDeleteNamedRangeRequest &delete_named_range) {
    m_delete_named_range = delete_named_range;
    m_delete_named_range_isSet = true;
}

bool OAIRequest::is_delete_named_range_Set() const{
    return m_delete_named_range_isSet;
}

bool OAIRequest::is_delete_named_range_Valid() const{
    return m_delete_named_range_isValid;
}

OAIDeleteProtectedRangeRequest OAIRequest::getDeleteProtectedRange() const {
    return m_delete_protected_range;
}
void OAIRequest::setDeleteProtectedRange(const OAIDeleteProtectedRangeRequest &delete_protected_range) {
    m_delete_protected_range = delete_protected_range;
    m_delete_protected_range_isSet = true;
}

bool OAIRequest::is_delete_protected_range_Set() const{
    return m_delete_protected_range_isSet;
}

bool OAIRequest::is_delete_protected_range_Valid() const{
    return m_delete_protected_range_isValid;
}

OAIDeleteRangeRequest OAIRequest::getDeleteRange() const {
    return m_delete_range;
}
void OAIRequest::setDeleteRange(const OAIDeleteRangeRequest &delete_range) {
    m_delete_range = delete_range;
    m_delete_range_isSet = true;
}

bool OAIRequest::is_delete_range_Set() const{
    return m_delete_range_isSet;
}

bool OAIRequest::is_delete_range_Valid() const{
    return m_delete_range_isValid;
}

OAIDeleteSheetRequest OAIRequest::getDeleteSheet() const {
    return m_delete_sheet;
}
void OAIRequest::setDeleteSheet(const OAIDeleteSheetRequest &delete_sheet) {
    m_delete_sheet = delete_sheet;
    m_delete_sheet_isSet = true;
}

bool OAIRequest::is_delete_sheet_Set() const{
    return m_delete_sheet_isSet;
}

bool OAIRequest::is_delete_sheet_Valid() const{
    return m_delete_sheet_isValid;
}

OAIDuplicateFilterViewRequest OAIRequest::getDuplicateFilterView() const {
    return m_duplicate_filter_view;
}
void OAIRequest::setDuplicateFilterView(const OAIDuplicateFilterViewRequest &duplicate_filter_view) {
    m_duplicate_filter_view = duplicate_filter_view;
    m_duplicate_filter_view_isSet = true;
}

bool OAIRequest::is_duplicate_filter_view_Set() const{
    return m_duplicate_filter_view_isSet;
}

bool OAIRequest::is_duplicate_filter_view_Valid() const{
    return m_duplicate_filter_view_isValid;
}

OAIDuplicateSheetRequest OAIRequest::getDuplicateSheet() const {
    return m_duplicate_sheet;
}
void OAIRequest::setDuplicateSheet(const OAIDuplicateSheetRequest &duplicate_sheet) {
    m_duplicate_sheet = duplicate_sheet;
    m_duplicate_sheet_isSet = true;
}

bool OAIRequest::is_duplicate_sheet_Set() const{
    return m_duplicate_sheet_isSet;
}

bool OAIRequest::is_duplicate_sheet_Valid() const{
    return m_duplicate_sheet_isValid;
}

OAIFindReplaceRequest OAIRequest::getFindReplace() const {
    return m_find_replace;
}
void OAIRequest::setFindReplace(const OAIFindReplaceRequest &find_replace) {
    m_find_replace = find_replace;
    m_find_replace_isSet = true;
}

bool OAIRequest::is_find_replace_Set() const{
    return m_find_replace_isSet;
}

bool OAIRequest::is_find_replace_Valid() const{
    return m_find_replace_isValid;
}

OAIInsertDimensionRequest OAIRequest::getInsertDimension() const {
    return m_insert_dimension;
}
void OAIRequest::setInsertDimension(const OAIInsertDimensionRequest &insert_dimension) {
    m_insert_dimension = insert_dimension;
    m_insert_dimension_isSet = true;
}

bool OAIRequest::is_insert_dimension_Set() const{
    return m_insert_dimension_isSet;
}

bool OAIRequest::is_insert_dimension_Valid() const{
    return m_insert_dimension_isValid;
}

OAIInsertRangeRequest OAIRequest::getInsertRange() const {
    return m_insert_range;
}
void OAIRequest::setInsertRange(const OAIInsertRangeRequest &insert_range) {
    m_insert_range = insert_range;
    m_insert_range_isSet = true;
}

bool OAIRequest::is_insert_range_Set() const{
    return m_insert_range_isSet;
}

bool OAIRequest::is_insert_range_Valid() const{
    return m_insert_range_isValid;
}

OAIMergeCellsRequest OAIRequest::getMergeCells() const {
    return m_merge_cells;
}
void OAIRequest::setMergeCells(const OAIMergeCellsRequest &merge_cells) {
    m_merge_cells = merge_cells;
    m_merge_cells_isSet = true;
}

bool OAIRequest::is_merge_cells_Set() const{
    return m_merge_cells_isSet;
}

bool OAIRequest::is_merge_cells_Valid() const{
    return m_merge_cells_isValid;
}

OAIMoveDimensionRequest OAIRequest::getMoveDimension() const {
    return m_move_dimension;
}
void OAIRequest::setMoveDimension(const OAIMoveDimensionRequest &move_dimension) {
    m_move_dimension = move_dimension;
    m_move_dimension_isSet = true;
}

bool OAIRequest::is_move_dimension_Set() const{
    return m_move_dimension_isSet;
}

bool OAIRequest::is_move_dimension_Valid() const{
    return m_move_dimension_isValid;
}

OAIPasteDataRequest OAIRequest::getPasteData() const {
    return m_paste_data;
}
void OAIRequest::setPasteData(const OAIPasteDataRequest &paste_data) {
    m_paste_data = paste_data;
    m_paste_data_isSet = true;
}

bool OAIRequest::is_paste_data_Set() const{
    return m_paste_data_isSet;
}

bool OAIRequest::is_paste_data_Valid() const{
    return m_paste_data_isValid;
}

OAIRandomizeRangeRequest OAIRequest::getRandomizeRange() const {
    return m_randomize_range;
}
void OAIRequest::setRandomizeRange(const OAIRandomizeRangeRequest &randomize_range) {
    m_randomize_range = randomize_range;
    m_randomize_range_isSet = true;
}

bool OAIRequest::is_randomize_range_Set() const{
    return m_randomize_range_isSet;
}

bool OAIRequest::is_randomize_range_Valid() const{
    return m_randomize_range_isValid;
}

OAIRefreshDataSourceRequest OAIRequest::getRefreshDataSource() const {
    return m_refresh_data_source;
}
void OAIRequest::setRefreshDataSource(const OAIRefreshDataSourceRequest &refresh_data_source) {
    m_refresh_data_source = refresh_data_source;
    m_refresh_data_source_isSet = true;
}

bool OAIRequest::is_refresh_data_source_Set() const{
    return m_refresh_data_source_isSet;
}

bool OAIRequest::is_refresh_data_source_Valid() const{
    return m_refresh_data_source_isValid;
}

OAIRepeatCellRequest OAIRequest::getRepeatCell() const {
    return m_repeat_cell;
}
void OAIRequest::setRepeatCell(const OAIRepeatCellRequest &repeat_cell) {
    m_repeat_cell = repeat_cell;
    m_repeat_cell_isSet = true;
}

bool OAIRequest::is_repeat_cell_Set() const{
    return m_repeat_cell_isSet;
}

bool OAIRequest::is_repeat_cell_Valid() const{
    return m_repeat_cell_isValid;
}

OAISetBasicFilterRequest OAIRequest::getSetBasicFilter() const {
    return m_set_basic_filter;
}
void OAIRequest::setSetBasicFilter(const OAISetBasicFilterRequest &set_basic_filter) {
    m_set_basic_filter = set_basic_filter;
    m_set_basic_filter_isSet = true;
}

bool OAIRequest::is_set_basic_filter_Set() const{
    return m_set_basic_filter_isSet;
}

bool OAIRequest::is_set_basic_filter_Valid() const{
    return m_set_basic_filter_isValid;
}

OAISetDataValidationRequest OAIRequest::getSetDataValidation() const {
    return m_set_data_validation;
}
void OAIRequest::setSetDataValidation(const OAISetDataValidationRequest &set_data_validation) {
    m_set_data_validation = set_data_validation;
    m_set_data_validation_isSet = true;
}

bool OAIRequest::is_set_data_validation_Set() const{
    return m_set_data_validation_isSet;
}

bool OAIRequest::is_set_data_validation_Valid() const{
    return m_set_data_validation_isValid;
}

OAISortRangeRequest OAIRequest::getSortRange() const {
    return m_sort_range;
}
void OAIRequest::setSortRange(const OAISortRangeRequest &sort_range) {
    m_sort_range = sort_range;
    m_sort_range_isSet = true;
}

bool OAIRequest::is_sort_range_Set() const{
    return m_sort_range_isSet;
}

bool OAIRequest::is_sort_range_Valid() const{
    return m_sort_range_isValid;
}

OAITextToColumnsRequest OAIRequest::getTextToColumns() const {
    return m_text_to_columns;
}
void OAIRequest::setTextToColumns(const OAITextToColumnsRequest &text_to_columns) {
    m_text_to_columns = text_to_columns;
    m_text_to_columns_isSet = true;
}

bool OAIRequest::is_text_to_columns_Set() const{
    return m_text_to_columns_isSet;
}

bool OAIRequest::is_text_to_columns_Valid() const{
    return m_text_to_columns_isValid;
}

OAITrimWhitespaceRequest OAIRequest::getTrimWhitespace() const {
    return m_trim_whitespace;
}
void OAIRequest::setTrimWhitespace(const OAITrimWhitespaceRequest &trim_whitespace) {
    m_trim_whitespace = trim_whitespace;
    m_trim_whitespace_isSet = true;
}

bool OAIRequest::is_trim_whitespace_Set() const{
    return m_trim_whitespace_isSet;
}

bool OAIRequest::is_trim_whitespace_Valid() const{
    return m_trim_whitespace_isValid;
}

OAIUnmergeCellsRequest OAIRequest::getUnmergeCells() const {
    return m_unmerge_cells;
}
void OAIRequest::setUnmergeCells(const OAIUnmergeCellsRequest &unmerge_cells) {
    m_unmerge_cells = unmerge_cells;
    m_unmerge_cells_isSet = true;
}

bool OAIRequest::is_unmerge_cells_Set() const{
    return m_unmerge_cells_isSet;
}

bool OAIRequest::is_unmerge_cells_Valid() const{
    return m_unmerge_cells_isValid;
}

OAIUpdateBandingRequest OAIRequest::getUpdateBanding() const {
    return m_update_banding;
}
void OAIRequest::setUpdateBanding(const OAIUpdateBandingRequest &update_banding) {
    m_update_banding = update_banding;
    m_update_banding_isSet = true;
}

bool OAIRequest::is_update_banding_Set() const{
    return m_update_banding_isSet;
}

bool OAIRequest::is_update_banding_Valid() const{
    return m_update_banding_isValid;
}

OAIUpdateBordersRequest OAIRequest::getUpdateBorders() const {
    return m_update_borders;
}
void OAIRequest::setUpdateBorders(const OAIUpdateBordersRequest &update_borders) {
    m_update_borders = update_borders;
    m_update_borders_isSet = true;
}

bool OAIRequest::is_update_borders_Set() const{
    return m_update_borders_isSet;
}

bool OAIRequest::is_update_borders_Valid() const{
    return m_update_borders_isValid;
}

OAIUpdateCellsRequest OAIRequest::getUpdateCells() const {
    return m_update_cells;
}
void OAIRequest::setUpdateCells(const OAIUpdateCellsRequest &update_cells) {
    m_update_cells = update_cells;
    m_update_cells_isSet = true;
}

bool OAIRequest::is_update_cells_Set() const{
    return m_update_cells_isSet;
}

bool OAIRequest::is_update_cells_Valid() const{
    return m_update_cells_isValid;
}

OAIUpdateChartSpecRequest OAIRequest::getUpdateChartSpec() const {
    return m_update_chart_spec;
}
void OAIRequest::setUpdateChartSpec(const OAIUpdateChartSpecRequest &update_chart_spec) {
    m_update_chart_spec = update_chart_spec;
    m_update_chart_spec_isSet = true;
}

bool OAIRequest::is_update_chart_spec_Set() const{
    return m_update_chart_spec_isSet;
}

bool OAIRequest::is_update_chart_spec_Valid() const{
    return m_update_chart_spec_isValid;
}

OAIUpdateConditionalFormatRuleRequest OAIRequest::getUpdateConditionalFormatRule() const {
    return m_update_conditional_format_rule;
}
void OAIRequest::setUpdateConditionalFormatRule(const OAIUpdateConditionalFormatRuleRequest &update_conditional_format_rule) {
    m_update_conditional_format_rule = update_conditional_format_rule;
    m_update_conditional_format_rule_isSet = true;
}

bool OAIRequest::is_update_conditional_format_rule_Set() const{
    return m_update_conditional_format_rule_isSet;
}

bool OAIRequest::is_update_conditional_format_rule_Valid() const{
    return m_update_conditional_format_rule_isValid;
}

OAIUpdateDataSourceRequest OAIRequest::getUpdateDataSource() const {
    return m_update_data_source;
}
void OAIRequest::setUpdateDataSource(const OAIUpdateDataSourceRequest &update_data_source) {
    m_update_data_source = update_data_source;
    m_update_data_source_isSet = true;
}

bool OAIRequest::is_update_data_source_Set() const{
    return m_update_data_source_isSet;
}

bool OAIRequest::is_update_data_source_Valid() const{
    return m_update_data_source_isValid;
}

OAIUpdateDeveloperMetadataRequest OAIRequest::getUpdateDeveloperMetadata() const {
    return m_update_developer_metadata;
}
void OAIRequest::setUpdateDeveloperMetadata(const OAIUpdateDeveloperMetadataRequest &update_developer_metadata) {
    m_update_developer_metadata = update_developer_metadata;
    m_update_developer_metadata_isSet = true;
}

bool OAIRequest::is_update_developer_metadata_Set() const{
    return m_update_developer_metadata_isSet;
}

bool OAIRequest::is_update_developer_metadata_Valid() const{
    return m_update_developer_metadata_isValid;
}

OAIUpdateDimensionGroupRequest OAIRequest::getUpdateDimensionGroup() const {
    return m_update_dimension_group;
}
void OAIRequest::setUpdateDimensionGroup(const OAIUpdateDimensionGroupRequest &update_dimension_group) {
    m_update_dimension_group = update_dimension_group;
    m_update_dimension_group_isSet = true;
}

bool OAIRequest::is_update_dimension_group_Set() const{
    return m_update_dimension_group_isSet;
}

bool OAIRequest::is_update_dimension_group_Valid() const{
    return m_update_dimension_group_isValid;
}

OAIUpdateDimensionPropertiesRequest OAIRequest::getUpdateDimensionProperties() const {
    return m_update_dimension_properties;
}
void OAIRequest::setUpdateDimensionProperties(const OAIUpdateDimensionPropertiesRequest &update_dimension_properties) {
    m_update_dimension_properties = update_dimension_properties;
    m_update_dimension_properties_isSet = true;
}

bool OAIRequest::is_update_dimension_properties_Set() const{
    return m_update_dimension_properties_isSet;
}

bool OAIRequest::is_update_dimension_properties_Valid() const{
    return m_update_dimension_properties_isValid;
}

OAIUpdateEmbeddedObjectBorderRequest OAIRequest::getUpdateEmbeddedObjectBorder() const {
    return m_update_embedded_object_border;
}
void OAIRequest::setUpdateEmbeddedObjectBorder(const OAIUpdateEmbeddedObjectBorderRequest &update_embedded_object_border) {
    m_update_embedded_object_border = update_embedded_object_border;
    m_update_embedded_object_border_isSet = true;
}

bool OAIRequest::is_update_embedded_object_border_Set() const{
    return m_update_embedded_object_border_isSet;
}

bool OAIRequest::is_update_embedded_object_border_Valid() const{
    return m_update_embedded_object_border_isValid;
}

OAIUpdateEmbeddedObjectPositionRequest OAIRequest::getUpdateEmbeddedObjectPosition() const {
    return m_update_embedded_object_position;
}
void OAIRequest::setUpdateEmbeddedObjectPosition(const OAIUpdateEmbeddedObjectPositionRequest &update_embedded_object_position) {
    m_update_embedded_object_position = update_embedded_object_position;
    m_update_embedded_object_position_isSet = true;
}

bool OAIRequest::is_update_embedded_object_position_Set() const{
    return m_update_embedded_object_position_isSet;
}

bool OAIRequest::is_update_embedded_object_position_Valid() const{
    return m_update_embedded_object_position_isValid;
}

OAIUpdateFilterViewRequest OAIRequest::getUpdateFilterView() const {
    return m_update_filter_view;
}
void OAIRequest::setUpdateFilterView(const OAIUpdateFilterViewRequest &update_filter_view) {
    m_update_filter_view = update_filter_view;
    m_update_filter_view_isSet = true;
}

bool OAIRequest::is_update_filter_view_Set() const{
    return m_update_filter_view_isSet;
}

bool OAIRequest::is_update_filter_view_Valid() const{
    return m_update_filter_view_isValid;
}

OAIUpdateNamedRangeRequest OAIRequest::getUpdateNamedRange() const {
    return m_update_named_range;
}
void OAIRequest::setUpdateNamedRange(const OAIUpdateNamedRangeRequest &update_named_range) {
    m_update_named_range = update_named_range;
    m_update_named_range_isSet = true;
}

bool OAIRequest::is_update_named_range_Set() const{
    return m_update_named_range_isSet;
}

bool OAIRequest::is_update_named_range_Valid() const{
    return m_update_named_range_isValid;
}

OAIUpdateProtectedRangeRequest OAIRequest::getUpdateProtectedRange() const {
    return m_update_protected_range;
}
void OAIRequest::setUpdateProtectedRange(const OAIUpdateProtectedRangeRequest &update_protected_range) {
    m_update_protected_range = update_protected_range;
    m_update_protected_range_isSet = true;
}

bool OAIRequest::is_update_protected_range_Set() const{
    return m_update_protected_range_isSet;
}

bool OAIRequest::is_update_protected_range_Valid() const{
    return m_update_protected_range_isValid;
}

OAIUpdateSheetPropertiesRequest OAIRequest::getUpdateSheetProperties() const {
    return m_update_sheet_properties;
}
void OAIRequest::setUpdateSheetProperties(const OAIUpdateSheetPropertiesRequest &update_sheet_properties) {
    m_update_sheet_properties = update_sheet_properties;
    m_update_sheet_properties_isSet = true;
}

bool OAIRequest::is_update_sheet_properties_Set() const{
    return m_update_sheet_properties_isSet;
}

bool OAIRequest::is_update_sheet_properties_Valid() const{
    return m_update_sheet_properties_isValid;
}

OAIUpdateSlicerSpecRequest OAIRequest::getUpdateSlicerSpec() const {
    return m_update_slicer_spec;
}
void OAIRequest::setUpdateSlicerSpec(const OAIUpdateSlicerSpecRequest &update_slicer_spec) {
    m_update_slicer_spec = update_slicer_spec;
    m_update_slicer_spec_isSet = true;
}

bool OAIRequest::is_update_slicer_spec_Set() const{
    return m_update_slicer_spec_isSet;
}

bool OAIRequest::is_update_slicer_spec_Valid() const{
    return m_update_slicer_spec_isValid;
}

OAIUpdateSpreadsheetPropertiesRequest OAIRequest::getUpdateSpreadsheetProperties() const {
    return m_update_spreadsheet_properties;
}
void OAIRequest::setUpdateSpreadsheetProperties(const OAIUpdateSpreadsheetPropertiesRequest &update_spreadsheet_properties) {
    m_update_spreadsheet_properties = update_spreadsheet_properties;
    m_update_spreadsheet_properties_isSet = true;
}

bool OAIRequest::is_update_spreadsheet_properties_Set() const{
    return m_update_spreadsheet_properties_isSet;
}

bool OAIRequest::is_update_spreadsheet_properties_Valid() const{
    return m_update_spreadsheet_properties_isValid;
}

bool OAIRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_banding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_conditional_format_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_dimension_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_filter_view.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_named_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_protected_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_sheet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_slicer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_append_cells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_append_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_fill.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_resize_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clear_basic_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_paste.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_developer_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cut_paste.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_banding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_conditional_format_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_developer_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_dimension_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_duplicates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_embedded_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_filter_view.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_named_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_protected_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_sheet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_filter_view.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_sheet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_find_replace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_cells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_move_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_paste_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_randomize_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat_cell.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_basic_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_data_validation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_to_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trim_whitespace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unmerge_cells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_banding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_borders.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_cells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_chart_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_conditional_format_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_developer_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_dimension_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_dimension_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_embedded_object_border.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_embedded_object_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_filter_view.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_named_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_protected_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_sheet_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_slicer_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_spreadsheet_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
