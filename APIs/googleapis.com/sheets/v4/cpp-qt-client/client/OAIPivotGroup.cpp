/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotGroup::OAIPivotGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotGroup::OAIPivotGroup() {
    this->initializeModel();
}

OAIPivotGroup::~OAIPivotGroup() {}

void OAIPivotGroup::initializeModel() {

    m_data_source_column_reference_isSet = false;
    m_data_source_column_reference_isValid = false;

    m_group_limit_isSet = false;
    m_group_limit_isValid = false;

    m_group_rule_isSet = false;
    m_group_rule_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_repeat_headings_isSet = false;
    m_repeat_headings_isValid = false;

    m_show_totals_isSet = false;
    m_show_totals_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_source_column_offset_isSet = false;
    m_source_column_offset_isValid = false;

    m_value_bucket_isSet = false;
    m_value_bucket_isValid = false;

    m_value_metadata_isSet = false;
    m_value_metadata_isValid = false;
}

void OAIPivotGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotGroup::fromJsonObject(QJsonObject json) {

    m_data_source_column_reference_isValid = ::OpenAPI::fromJsonValue(m_data_source_column_reference, json[QString("dataSourceColumnReference")]);
    m_data_source_column_reference_isSet = !json[QString("dataSourceColumnReference")].isNull() && m_data_source_column_reference_isValid;

    m_group_limit_isValid = ::OpenAPI::fromJsonValue(m_group_limit, json[QString("groupLimit")]);
    m_group_limit_isSet = !json[QString("groupLimit")].isNull() && m_group_limit_isValid;

    m_group_rule_isValid = ::OpenAPI::fromJsonValue(m_group_rule, json[QString("groupRule")]);
    m_group_rule_isSet = !json[QString("groupRule")].isNull() && m_group_rule_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_repeat_headings_isValid = ::OpenAPI::fromJsonValue(m_repeat_headings, json[QString("repeatHeadings")]);
    m_repeat_headings_isSet = !json[QString("repeatHeadings")].isNull() && m_repeat_headings_isValid;

    m_show_totals_isValid = ::OpenAPI::fromJsonValue(m_show_totals, json[QString("showTotals")]);
    m_show_totals_isSet = !json[QString("showTotals")].isNull() && m_show_totals_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;

    m_source_column_offset_isValid = ::OpenAPI::fromJsonValue(m_source_column_offset, json[QString("sourceColumnOffset")]);
    m_source_column_offset_isSet = !json[QString("sourceColumnOffset")].isNull() && m_source_column_offset_isValid;

    m_value_bucket_isValid = ::OpenAPI::fromJsonValue(m_value_bucket, json[QString("valueBucket")]);
    m_value_bucket_isSet = !json[QString("valueBucket")].isNull() && m_value_bucket_isValid;

    m_value_metadata_isValid = ::OpenAPI::fromJsonValue(m_value_metadata, json[QString("valueMetadata")]);
    m_value_metadata_isSet = !json[QString("valueMetadata")].isNull() && m_value_metadata_isValid;
}

QString OAIPivotGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_column_reference.isSet()) {
        obj.insert(QString("dataSourceColumnReference"), ::OpenAPI::toJsonValue(m_data_source_column_reference));
    }
    if (m_group_limit.isSet()) {
        obj.insert(QString("groupLimit"), ::OpenAPI::toJsonValue(m_group_limit));
    }
    if (m_group_rule.isSet()) {
        obj.insert(QString("groupRule"), ::OpenAPI::toJsonValue(m_group_rule));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_repeat_headings_isSet) {
        obj.insert(QString("repeatHeadings"), ::OpenAPI::toJsonValue(m_repeat_headings));
    }
    if (m_show_totals_isSet) {
        obj.insert(QString("showTotals"), ::OpenAPI::toJsonValue(m_show_totals));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_source_column_offset_isSet) {
        obj.insert(QString("sourceColumnOffset"), ::OpenAPI::toJsonValue(m_source_column_offset));
    }
    if (m_value_bucket.isSet()) {
        obj.insert(QString("valueBucket"), ::OpenAPI::toJsonValue(m_value_bucket));
    }
    if (m_value_metadata.size() > 0) {
        obj.insert(QString("valueMetadata"), ::OpenAPI::toJsonValue(m_value_metadata));
    }
    return obj;
}

OAIDataSourceColumnReference OAIPivotGroup::getDataSourceColumnReference() const {
    return m_data_source_column_reference;
}
void OAIPivotGroup::setDataSourceColumnReference(const OAIDataSourceColumnReference &data_source_column_reference) {
    m_data_source_column_reference = data_source_column_reference;
    m_data_source_column_reference_isSet = true;
}

bool OAIPivotGroup::is_data_source_column_reference_Set() const{
    return m_data_source_column_reference_isSet;
}

bool OAIPivotGroup::is_data_source_column_reference_Valid() const{
    return m_data_source_column_reference_isValid;
}

OAIPivotGroupLimit OAIPivotGroup::getGroupLimit() const {
    return m_group_limit;
}
void OAIPivotGroup::setGroupLimit(const OAIPivotGroupLimit &group_limit) {
    m_group_limit = group_limit;
    m_group_limit_isSet = true;
}

bool OAIPivotGroup::is_group_limit_Set() const{
    return m_group_limit_isSet;
}

bool OAIPivotGroup::is_group_limit_Valid() const{
    return m_group_limit_isValid;
}

OAIPivotGroupRule OAIPivotGroup::getGroupRule() const {
    return m_group_rule;
}
void OAIPivotGroup::setGroupRule(const OAIPivotGroupRule &group_rule) {
    m_group_rule = group_rule;
    m_group_rule_isSet = true;
}

bool OAIPivotGroup::is_group_rule_Set() const{
    return m_group_rule_isSet;
}

bool OAIPivotGroup::is_group_rule_Valid() const{
    return m_group_rule_isValid;
}

QString OAIPivotGroup::getLabel() const {
    return m_label;
}
void OAIPivotGroup::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIPivotGroup::is_label_Set() const{
    return m_label_isSet;
}

bool OAIPivotGroup::is_label_Valid() const{
    return m_label_isValid;
}

bool OAIPivotGroup::isRepeatHeadings() const {
    return m_repeat_headings;
}
void OAIPivotGroup::setRepeatHeadings(const bool &repeat_headings) {
    m_repeat_headings = repeat_headings;
    m_repeat_headings_isSet = true;
}

bool OAIPivotGroup::is_repeat_headings_Set() const{
    return m_repeat_headings_isSet;
}

bool OAIPivotGroup::is_repeat_headings_Valid() const{
    return m_repeat_headings_isValid;
}

bool OAIPivotGroup::isShowTotals() const {
    return m_show_totals;
}
void OAIPivotGroup::setShowTotals(const bool &show_totals) {
    m_show_totals = show_totals;
    m_show_totals_isSet = true;
}

bool OAIPivotGroup::is_show_totals_Set() const{
    return m_show_totals_isSet;
}

bool OAIPivotGroup::is_show_totals_Valid() const{
    return m_show_totals_isValid;
}

QString OAIPivotGroup::getSortOrder() const {
    return m_sort_order;
}
void OAIPivotGroup::setSortOrder(const QString &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIPivotGroup::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIPivotGroup::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

qint32 OAIPivotGroup::getSourceColumnOffset() const {
    return m_source_column_offset;
}
void OAIPivotGroup::setSourceColumnOffset(const qint32 &source_column_offset) {
    m_source_column_offset = source_column_offset;
    m_source_column_offset_isSet = true;
}

bool OAIPivotGroup::is_source_column_offset_Set() const{
    return m_source_column_offset_isSet;
}

bool OAIPivotGroup::is_source_column_offset_Valid() const{
    return m_source_column_offset_isValid;
}

OAIPivotGroupSortValueBucket OAIPivotGroup::getValueBucket() const {
    return m_value_bucket;
}
void OAIPivotGroup::setValueBucket(const OAIPivotGroupSortValueBucket &value_bucket) {
    m_value_bucket = value_bucket;
    m_value_bucket_isSet = true;
}

bool OAIPivotGroup::is_value_bucket_Set() const{
    return m_value_bucket_isSet;
}

bool OAIPivotGroup::is_value_bucket_Valid() const{
    return m_value_bucket_isValid;
}

QList<OAIPivotGroupValueMetadata> OAIPivotGroup::getValueMetadata() const {
    return m_value_metadata;
}
void OAIPivotGroup::setValueMetadata(const QList<OAIPivotGroupValueMetadata> &value_metadata) {
    m_value_metadata = value_metadata;
    m_value_metadata_isSet = true;
}

bool OAIPivotGroup::is_value_metadata_Set() const{
    return m_value_metadata_isSet;
}

bool OAIPivotGroup::is_value_metadata_Valid() const{
    return m_value_metadata_isValid;
}

bool OAIPivotGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_column_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat_headings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_totals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_column_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_bucket.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
