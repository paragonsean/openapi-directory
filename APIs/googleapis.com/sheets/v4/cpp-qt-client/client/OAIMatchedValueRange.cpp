/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatchedValueRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatchedValueRange::OAIMatchedValueRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatchedValueRange::OAIMatchedValueRange() {
    this->initializeModel();
}

OAIMatchedValueRange::~OAIMatchedValueRange() {}

void OAIMatchedValueRange::initializeModel() {

    m_data_filters_isSet = false;
    m_data_filters_isValid = false;

    m_value_range_isSet = false;
    m_value_range_isValid = false;
}

void OAIMatchedValueRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatchedValueRange::fromJsonObject(QJsonObject json) {

    m_data_filters_isValid = ::OpenAPI::fromJsonValue(m_data_filters, json[QString("dataFilters")]);
    m_data_filters_isSet = !json[QString("dataFilters")].isNull() && m_data_filters_isValid;

    m_value_range_isValid = ::OpenAPI::fromJsonValue(m_value_range, json[QString("valueRange")]);
    m_value_range_isSet = !json[QString("valueRange")].isNull() && m_value_range_isValid;
}

QString OAIMatchedValueRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatchedValueRange::asJsonObject() const {
    QJsonObject obj;
    if (m_data_filters.size() > 0) {
        obj.insert(QString("dataFilters"), ::OpenAPI::toJsonValue(m_data_filters));
    }
    if (m_value_range.isSet()) {
        obj.insert(QString("valueRange"), ::OpenAPI::toJsonValue(m_value_range));
    }
    return obj;
}

QList<OAIDataFilter> OAIMatchedValueRange::getDataFilters() const {
    return m_data_filters;
}
void OAIMatchedValueRange::setDataFilters(const QList<OAIDataFilter> &data_filters) {
    m_data_filters = data_filters;
    m_data_filters_isSet = true;
}

bool OAIMatchedValueRange::is_data_filters_Set() const{
    return m_data_filters_isSet;
}

bool OAIMatchedValueRange::is_data_filters_Valid() const{
    return m_data_filters_isValid;
}

OAIValueRange OAIMatchedValueRange::getValueRange() const {
    return m_value_range;
}
void OAIMatchedValueRange::setValueRange(const OAIValueRange &value_range) {
    m_value_range = value_range;
    m_value_range_isSet = true;
}

bool OAIMatchedValueRange::is_value_range_Set() const{
    return m_value_range_isSet;
}

bool OAIMatchedValueRange::is_value_range_Valid() const{
    return m_value_range_isValid;
}

bool OAIMatchedValueRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatchedValueRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
