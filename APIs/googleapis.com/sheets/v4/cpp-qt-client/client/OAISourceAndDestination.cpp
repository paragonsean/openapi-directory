/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceAndDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceAndDestination::OAISourceAndDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceAndDestination::OAISourceAndDestination() {
    this->initializeModel();
}

OAISourceAndDestination::~OAISourceAndDestination() {}

void OAISourceAndDestination::initializeModel() {

    m_dimension_isSet = false;
    m_dimension_isValid = false;

    m_fill_length_isSet = false;
    m_fill_length_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAISourceAndDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceAndDestination::fromJsonObject(QJsonObject json) {

    m_dimension_isValid = ::OpenAPI::fromJsonValue(m_dimension, json[QString("dimension")]);
    m_dimension_isSet = !json[QString("dimension")].isNull() && m_dimension_isValid;

    m_fill_length_isValid = ::OpenAPI::fromJsonValue(m_fill_length, json[QString("fillLength")]);
    m_fill_length_isSet = !json[QString("fillLength")].isNull() && m_fill_length_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAISourceAndDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceAndDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_isSet) {
        obj.insert(QString("dimension"), ::OpenAPI::toJsonValue(m_dimension));
    }
    if (m_fill_length_isSet) {
        obj.insert(QString("fillLength"), ::OpenAPI::toJsonValue(m_fill_length));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAISourceAndDestination::getDimension() const {
    return m_dimension;
}
void OAISourceAndDestination::setDimension(const QString &dimension) {
    m_dimension = dimension;
    m_dimension_isSet = true;
}

bool OAISourceAndDestination::is_dimension_Set() const{
    return m_dimension_isSet;
}

bool OAISourceAndDestination::is_dimension_Valid() const{
    return m_dimension_isValid;
}

qint32 OAISourceAndDestination::getFillLength() const {
    return m_fill_length;
}
void OAISourceAndDestination::setFillLength(const qint32 &fill_length) {
    m_fill_length = fill_length;
    m_fill_length_isSet = true;
}

bool OAISourceAndDestination::is_fill_length_Set() const{
    return m_fill_length_isSet;
}

bool OAISourceAndDestination::is_fill_length_Valid() const{
    return m_fill_length_isValid;
}

OAIGridRange OAISourceAndDestination::getSource() const {
    return m_source;
}
void OAISourceAndDestination::setSource(const OAIGridRange &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAISourceAndDestination::is_source_Set() const{
    return m_source_isSet;
}

bool OAISourceAndDestination::is_source_Valid() const{
    return m_source_isValid;
}

bool OAISourceAndDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceAndDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
