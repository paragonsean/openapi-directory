/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceTable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceTable::OAIDataSourceTable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceTable::OAIDataSourceTable() {
    this->initializeModel();
}

OAIDataSourceTable::~OAIDataSourceTable() {}

void OAIDataSourceTable::initializeModel() {

    m_column_selection_type_isSet = false;
    m_column_selection_type_isValid = false;

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_data_execution_status_isSet = false;
    m_data_execution_status_isValid = false;

    m_data_source_id_isSet = false;
    m_data_source_id_isValid = false;

    m_filter_specs_isSet = false;
    m_filter_specs_isValid = false;

    m_row_limit_isSet = false;
    m_row_limit_isValid = false;

    m_sort_specs_isSet = false;
    m_sort_specs_isValid = false;
}

void OAIDataSourceTable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSourceTable::fromJsonObject(QJsonObject json) {

    m_column_selection_type_isValid = ::OpenAPI::fromJsonValue(m_column_selection_type, json[QString("columnSelectionType")]);
    m_column_selection_type_isSet = !json[QString("columnSelectionType")].isNull() && m_column_selection_type_isValid;

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_data_execution_status_isValid = ::OpenAPI::fromJsonValue(m_data_execution_status, json[QString("dataExecutionStatus")]);
    m_data_execution_status_isSet = !json[QString("dataExecutionStatus")].isNull() && m_data_execution_status_isValid;

    m_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_id, json[QString("dataSourceId")]);
    m_data_source_id_isSet = !json[QString("dataSourceId")].isNull() && m_data_source_id_isValid;

    m_filter_specs_isValid = ::OpenAPI::fromJsonValue(m_filter_specs, json[QString("filterSpecs")]);
    m_filter_specs_isSet = !json[QString("filterSpecs")].isNull() && m_filter_specs_isValid;

    m_row_limit_isValid = ::OpenAPI::fromJsonValue(m_row_limit, json[QString("rowLimit")]);
    m_row_limit_isSet = !json[QString("rowLimit")].isNull() && m_row_limit_isValid;

    m_sort_specs_isValid = ::OpenAPI::fromJsonValue(m_sort_specs, json[QString("sortSpecs")]);
    m_sort_specs_isSet = !json[QString("sortSpecs")].isNull() && m_sort_specs_isValid;
}

QString OAIDataSourceTable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSourceTable::asJsonObject() const {
    QJsonObject obj;
    if (m_column_selection_type_isSet) {
        obj.insert(QString("columnSelectionType"), ::OpenAPI::toJsonValue(m_column_selection_type));
    }
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_data_execution_status.isSet()) {
        obj.insert(QString("dataExecutionStatus"), ::OpenAPI::toJsonValue(m_data_execution_status));
    }
    if (m_data_source_id_isSet) {
        obj.insert(QString("dataSourceId"), ::OpenAPI::toJsonValue(m_data_source_id));
    }
    if (m_filter_specs.size() > 0) {
        obj.insert(QString("filterSpecs"), ::OpenAPI::toJsonValue(m_filter_specs));
    }
    if (m_row_limit_isSet) {
        obj.insert(QString("rowLimit"), ::OpenAPI::toJsonValue(m_row_limit));
    }
    if (m_sort_specs.size() > 0) {
        obj.insert(QString("sortSpecs"), ::OpenAPI::toJsonValue(m_sort_specs));
    }
    return obj;
}

QString OAIDataSourceTable::getColumnSelectionType() const {
    return m_column_selection_type;
}
void OAIDataSourceTable::setColumnSelectionType(const QString &column_selection_type) {
    m_column_selection_type = column_selection_type;
    m_column_selection_type_isSet = true;
}

bool OAIDataSourceTable::is_column_selection_type_Set() const{
    return m_column_selection_type_isSet;
}

bool OAIDataSourceTable::is_column_selection_type_Valid() const{
    return m_column_selection_type_isValid;
}

QList<OAIDataSourceColumnReference> OAIDataSourceTable::getColumns() const {
    return m_columns;
}
void OAIDataSourceTable::setColumns(const QList<OAIDataSourceColumnReference> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIDataSourceTable::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIDataSourceTable::is_columns_Valid() const{
    return m_columns_isValid;
}

OAIDataExecutionStatus OAIDataSourceTable::getDataExecutionStatus() const {
    return m_data_execution_status;
}
void OAIDataSourceTable::setDataExecutionStatus(const OAIDataExecutionStatus &data_execution_status) {
    m_data_execution_status = data_execution_status;
    m_data_execution_status_isSet = true;
}

bool OAIDataSourceTable::is_data_execution_status_Set() const{
    return m_data_execution_status_isSet;
}

bool OAIDataSourceTable::is_data_execution_status_Valid() const{
    return m_data_execution_status_isValid;
}

QString OAIDataSourceTable::getDataSourceId() const {
    return m_data_source_id;
}
void OAIDataSourceTable::setDataSourceId(const QString &data_source_id) {
    m_data_source_id = data_source_id;
    m_data_source_id_isSet = true;
}

bool OAIDataSourceTable::is_data_source_id_Set() const{
    return m_data_source_id_isSet;
}

bool OAIDataSourceTable::is_data_source_id_Valid() const{
    return m_data_source_id_isValid;
}

QList<OAIFilterSpec> OAIDataSourceTable::getFilterSpecs() const {
    return m_filter_specs;
}
void OAIDataSourceTable::setFilterSpecs(const QList<OAIFilterSpec> &filter_specs) {
    m_filter_specs = filter_specs;
    m_filter_specs_isSet = true;
}

bool OAIDataSourceTable::is_filter_specs_Set() const{
    return m_filter_specs_isSet;
}

bool OAIDataSourceTable::is_filter_specs_Valid() const{
    return m_filter_specs_isValid;
}

qint32 OAIDataSourceTable::getRowLimit() const {
    return m_row_limit;
}
void OAIDataSourceTable::setRowLimit(const qint32 &row_limit) {
    m_row_limit = row_limit;
    m_row_limit_isSet = true;
}

bool OAIDataSourceTable::is_row_limit_Set() const{
    return m_row_limit_isSet;
}

bool OAIDataSourceTable::is_row_limit_Valid() const{
    return m_row_limit_isValid;
}

QList<OAISortSpec> OAIDataSourceTable::getSortSpecs() const {
    return m_sort_specs;
}
void OAIDataSourceTable::setSortSpecs(const QList<OAISortSpec> &sort_specs) {
    m_sort_specs = sort_specs;
    m_sort_specs_isSet = true;
}

bool OAIDataSourceTable::is_sort_specs_Set() const{
    return m_sort_specs_isSet;
}

bool OAIDataSourceTable::is_sort_specs_Valid() const{
    return m_sort_specs_isValid;
}

bool OAIDataSourceTable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_selection_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_execution_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSourceTable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
