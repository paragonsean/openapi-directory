/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotFilterCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotFilterCriteria::OAIPivotFilterCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotFilterCriteria::OAIPivotFilterCriteria() {
    this->initializeModel();
}

OAIPivotFilterCriteria::~OAIPivotFilterCriteria() {}

void OAIPivotFilterCriteria::initializeModel() {

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_visible_by_default_isSet = false;
    m_visible_by_default_isValid = false;

    m_visible_values_isSet = false;
    m_visible_values_isValid = false;
}

void OAIPivotFilterCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotFilterCriteria::fromJsonObject(QJsonObject json) {

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_visible_by_default_isValid = ::OpenAPI::fromJsonValue(m_visible_by_default, json[QString("visibleByDefault")]);
    m_visible_by_default_isSet = !json[QString("visibleByDefault")].isNull() && m_visible_by_default_isValid;

    m_visible_values_isValid = ::OpenAPI::fromJsonValue(m_visible_values, json[QString("visibleValues")]);
    m_visible_values_isSet = !json[QString("visibleValues")].isNull() && m_visible_values_isValid;
}

QString OAIPivotFilterCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotFilterCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_visible_by_default_isSet) {
        obj.insert(QString("visibleByDefault"), ::OpenAPI::toJsonValue(m_visible_by_default));
    }
    if (m_visible_values.size() > 0) {
        obj.insert(QString("visibleValues"), ::OpenAPI::toJsonValue(m_visible_values));
    }
    return obj;
}

OAIBooleanCondition OAIPivotFilterCriteria::getCondition() const {
    return m_condition;
}
void OAIPivotFilterCriteria::setCondition(const OAIBooleanCondition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIPivotFilterCriteria::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIPivotFilterCriteria::is_condition_Valid() const{
    return m_condition_isValid;
}

bool OAIPivotFilterCriteria::isVisibleByDefault() const {
    return m_visible_by_default;
}
void OAIPivotFilterCriteria::setVisibleByDefault(const bool &visible_by_default) {
    m_visible_by_default = visible_by_default;
    m_visible_by_default_isSet = true;
}

bool OAIPivotFilterCriteria::is_visible_by_default_Set() const{
    return m_visible_by_default_isSet;
}

bool OAIPivotFilterCriteria::is_visible_by_default_Valid() const{
    return m_visible_by_default_isValid;
}

QList<QString> OAIPivotFilterCriteria::getVisibleValues() const {
    return m_visible_values;
}
void OAIPivotFilterCriteria::setVisibleValues(const QList<QString> &visible_values) {
    m_visible_values = visible_values;
    m_visible_values_isSet = true;
}

bool OAIPivotFilterCriteria::is_visible_values_Set() const{
    return m_visible_values_isSet;
}

bool OAIPivotFilterCriteria::is_visible_values_Valid() const{
    return m_visible_values_isValid;
}

bool OAIPivotFilterCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_by_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotFilterCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
