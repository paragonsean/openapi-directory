/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISheet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISheet::OAISheet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISheet::OAISheet() {
    this->initializeModel();
}

OAISheet::~OAISheet() {}

void OAISheet::initializeModel() {

    m_banded_ranges_isSet = false;
    m_banded_ranges_isValid = false;

    m_basic_filter_isSet = false;
    m_basic_filter_isValid = false;

    m_charts_isSet = false;
    m_charts_isValid = false;

    m_column_groups_isSet = false;
    m_column_groups_isValid = false;

    m_conditional_formats_isSet = false;
    m_conditional_formats_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_developer_metadata_isSet = false;
    m_developer_metadata_isValid = false;

    m_filter_views_isSet = false;
    m_filter_views_isValid = false;

    m_merges_isSet = false;
    m_merges_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_protected_ranges_isSet = false;
    m_protected_ranges_isValid = false;

    m_row_groups_isSet = false;
    m_row_groups_isValid = false;

    m_slicers_isSet = false;
    m_slicers_isValid = false;
}

void OAISheet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISheet::fromJsonObject(QJsonObject json) {

    m_banded_ranges_isValid = ::OpenAPI::fromJsonValue(m_banded_ranges, json[QString("bandedRanges")]);
    m_banded_ranges_isSet = !json[QString("bandedRanges")].isNull() && m_banded_ranges_isValid;

    m_basic_filter_isValid = ::OpenAPI::fromJsonValue(m_basic_filter, json[QString("basicFilter")]);
    m_basic_filter_isSet = !json[QString("basicFilter")].isNull() && m_basic_filter_isValid;

    m_charts_isValid = ::OpenAPI::fromJsonValue(m_charts, json[QString("charts")]);
    m_charts_isSet = !json[QString("charts")].isNull() && m_charts_isValid;

    m_column_groups_isValid = ::OpenAPI::fromJsonValue(m_column_groups, json[QString("columnGroups")]);
    m_column_groups_isSet = !json[QString("columnGroups")].isNull() && m_column_groups_isValid;

    m_conditional_formats_isValid = ::OpenAPI::fromJsonValue(m_conditional_formats, json[QString("conditionalFormats")]);
    m_conditional_formats_isSet = !json[QString("conditionalFormats")].isNull() && m_conditional_formats_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_developer_metadata_isValid = ::OpenAPI::fromJsonValue(m_developer_metadata, json[QString("developerMetadata")]);
    m_developer_metadata_isSet = !json[QString("developerMetadata")].isNull() && m_developer_metadata_isValid;

    m_filter_views_isValid = ::OpenAPI::fromJsonValue(m_filter_views, json[QString("filterViews")]);
    m_filter_views_isSet = !json[QString("filterViews")].isNull() && m_filter_views_isValid;

    m_merges_isValid = ::OpenAPI::fromJsonValue(m_merges, json[QString("merges")]);
    m_merges_isSet = !json[QString("merges")].isNull() && m_merges_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_protected_ranges_isValid = ::OpenAPI::fromJsonValue(m_protected_ranges, json[QString("protectedRanges")]);
    m_protected_ranges_isSet = !json[QString("protectedRanges")].isNull() && m_protected_ranges_isValid;

    m_row_groups_isValid = ::OpenAPI::fromJsonValue(m_row_groups, json[QString("rowGroups")]);
    m_row_groups_isSet = !json[QString("rowGroups")].isNull() && m_row_groups_isValid;

    m_slicers_isValid = ::OpenAPI::fromJsonValue(m_slicers, json[QString("slicers")]);
    m_slicers_isSet = !json[QString("slicers")].isNull() && m_slicers_isValid;
}

QString OAISheet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISheet::asJsonObject() const {
    QJsonObject obj;
    if (m_banded_ranges.size() > 0) {
        obj.insert(QString("bandedRanges"), ::OpenAPI::toJsonValue(m_banded_ranges));
    }
    if (m_basic_filter.isSet()) {
        obj.insert(QString("basicFilter"), ::OpenAPI::toJsonValue(m_basic_filter));
    }
    if (m_charts.size() > 0) {
        obj.insert(QString("charts"), ::OpenAPI::toJsonValue(m_charts));
    }
    if (m_column_groups.size() > 0) {
        obj.insert(QString("columnGroups"), ::OpenAPI::toJsonValue(m_column_groups));
    }
    if (m_conditional_formats.size() > 0) {
        obj.insert(QString("conditionalFormats"), ::OpenAPI::toJsonValue(m_conditional_formats));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_developer_metadata.size() > 0) {
        obj.insert(QString("developerMetadata"), ::OpenAPI::toJsonValue(m_developer_metadata));
    }
    if (m_filter_views.size() > 0) {
        obj.insert(QString("filterViews"), ::OpenAPI::toJsonValue(m_filter_views));
    }
    if (m_merges.size() > 0) {
        obj.insert(QString("merges"), ::OpenAPI::toJsonValue(m_merges));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_protected_ranges.size() > 0) {
        obj.insert(QString("protectedRanges"), ::OpenAPI::toJsonValue(m_protected_ranges));
    }
    if (m_row_groups.size() > 0) {
        obj.insert(QString("rowGroups"), ::OpenAPI::toJsonValue(m_row_groups));
    }
    if (m_slicers.size() > 0) {
        obj.insert(QString("slicers"), ::OpenAPI::toJsonValue(m_slicers));
    }
    return obj;
}

QList<OAIBandedRange> OAISheet::getBandedRanges() const {
    return m_banded_ranges;
}
void OAISheet::setBandedRanges(const QList<OAIBandedRange> &banded_ranges) {
    m_banded_ranges = banded_ranges;
    m_banded_ranges_isSet = true;
}

bool OAISheet::is_banded_ranges_Set() const{
    return m_banded_ranges_isSet;
}

bool OAISheet::is_banded_ranges_Valid() const{
    return m_banded_ranges_isValid;
}

OAIBasicFilter OAISheet::getBasicFilter() const {
    return m_basic_filter;
}
void OAISheet::setBasicFilter(const OAIBasicFilter &basic_filter) {
    m_basic_filter = basic_filter;
    m_basic_filter_isSet = true;
}

bool OAISheet::is_basic_filter_Set() const{
    return m_basic_filter_isSet;
}

bool OAISheet::is_basic_filter_Valid() const{
    return m_basic_filter_isValid;
}

QList<OAIEmbeddedChart> OAISheet::getCharts() const {
    return m_charts;
}
void OAISheet::setCharts(const QList<OAIEmbeddedChart> &charts) {
    m_charts = charts;
    m_charts_isSet = true;
}

bool OAISheet::is_charts_Set() const{
    return m_charts_isSet;
}

bool OAISheet::is_charts_Valid() const{
    return m_charts_isValid;
}

QList<OAIDimensionGroup> OAISheet::getColumnGroups() const {
    return m_column_groups;
}
void OAISheet::setColumnGroups(const QList<OAIDimensionGroup> &column_groups) {
    m_column_groups = column_groups;
    m_column_groups_isSet = true;
}

bool OAISheet::is_column_groups_Set() const{
    return m_column_groups_isSet;
}

bool OAISheet::is_column_groups_Valid() const{
    return m_column_groups_isValid;
}

QList<OAIConditionalFormatRule> OAISheet::getConditionalFormats() const {
    return m_conditional_formats;
}
void OAISheet::setConditionalFormats(const QList<OAIConditionalFormatRule> &conditional_formats) {
    m_conditional_formats = conditional_formats;
    m_conditional_formats_isSet = true;
}

bool OAISheet::is_conditional_formats_Set() const{
    return m_conditional_formats_isSet;
}

bool OAISheet::is_conditional_formats_Valid() const{
    return m_conditional_formats_isValid;
}

QList<OAIGridData> OAISheet::getData() const {
    return m_data;
}
void OAISheet::setData(const QList<OAIGridData> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAISheet::is_data_Set() const{
    return m_data_isSet;
}

bool OAISheet::is_data_Valid() const{
    return m_data_isValid;
}

QList<OAIDeveloperMetadata> OAISheet::getDeveloperMetadata() const {
    return m_developer_metadata;
}
void OAISheet::setDeveloperMetadata(const QList<OAIDeveloperMetadata> &developer_metadata) {
    m_developer_metadata = developer_metadata;
    m_developer_metadata_isSet = true;
}

bool OAISheet::is_developer_metadata_Set() const{
    return m_developer_metadata_isSet;
}

bool OAISheet::is_developer_metadata_Valid() const{
    return m_developer_metadata_isValid;
}

QList<OAIFilterView> OAISheet::getFilterViews() const {
    return m_filter_views;
}
void OAISheet::setFilterViews(const QList<OAIFilterView> &filter_views) {
    m_filter_views = filter_views;
    m_filter_views_isSet = true;
}

bool OAISheet::is_filter_views_Set() const{
    return m_filter_views_isSet;
}

bool OAISheet::is_filter_views_Valid() const{
    return m_filter_views_isValid;
}

QList<OAIGridRange> OAISheet::getMerges() const {
    return m_merges;
}
void OAISheet::setMerges(const QList<OAIGridRange> &merges) {
    m_merges = merges;
    m_merges_isSet = true;
}

bool OAISheet::is_merges_Set() const{
    return m_merges_isSet;
}

bool OAISheet::is_merges_Valid() const{
    return m_merges_isValid;
}

OAISheetProperties OAISheet::getProperties() const {
    return m_properties;
}
void OAISheet::setProperties(const OAISheetProperties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAISheet::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAISheet::is_properties_Valid() const{
    return m_properties_isValid;
}

QList<OAIProtectedRange> OAISheet::getProtectedRanges() const {
    return m_protected_ranges;
}
void OAISheet::setProtectedRanges(const QList<OAIProtectedRange> &protected_ranges) {
    m_protected_ranges = protected_ranges;
    m_protected_ranges_isSet = true;
}

bool OAISheet::is_protected_ranges_Set() const{
    return m_protected_ranges_isSet;
}

bool OAISheet::is_protected_ranges_Valid() const{
    return m_protected_ranges_isValid;
}

QList<OAIDimensionGroup> OAISheet::getRowGroups() const {
    return m_row_groups;
}
void OAISheet::setRowGroups(const QList<OAIDimensionGroup> &row_groups) {
    m_row_groups = row_groups;
    m_row_groups_isSet = true;
}

bool OAISheet::is_row_groups_Set() const{
    return m_row_groups_isSet;
}

bool OAISheet::is_row_groups_Valid() const{
    return m_row_groups_isValid;
}

QList<OAISlicer> OAISheet::getSlicers() const {
    return m_slicers;
}
void OAISheet::setSlicers(const QList<OAISlicer> &slicers) {
    m_slicers = slicers;
    m_slicers_isSet = true;
}

bool OAISheet::is_slicers_Set() const{
    return m_slicers_isSet;
}

bool OAISheet::is_slicers_Valid() const{
    return m_slicers_isValid;
}

bool OAISheet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_banded_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_basic_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_charts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditional_formats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_views.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_merges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_slicers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISheet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
