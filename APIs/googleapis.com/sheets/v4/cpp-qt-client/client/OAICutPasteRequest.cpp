/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICutPasteRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICutPasteRequest::OAICutPasteRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICutPasteRequest::OAICutPasteRequest() {
    this->initializeModel();
}

OAICutPasteRequest::~OAICutPasteRequest() {}

void OAICutPasteRequest::initializeModel() {

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_paste_type_isSet = false;
    m_paste_type_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAICutPasteRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICutPasteRequest::fromJsonObject(QJsonObject json) {

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_paste_type_isValid = ::OpenAPI::fromJsonValue(m_paste_type, json[QString("pasteType")]);
    m_paste_type_isSet = !json[QString("pasteType")].isNull() && m_paste_type_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAICutPasteRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICutPasteRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_paste_type_isSet) {
        obj.insert(QString("pasteType"), ::OpenAPI::toJsonValue(m_paste_type));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

OAIGridCoordinate OAICutPasteRequest::getDestination() const {
    return m_destination;
}
void OAICutPasteRequest::setDestination(const OAIGridCoordinate &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAICutPasteRequest::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAICutPasteRequest::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAICutPasteRequest::getPasteType() const {
    return m_paste_type;
}
void OAICutPasteRequest::setPasteType(const QString &paste_type) {
    m_paste_type = paste_type;
    m_paste_type_isSet = true;
}

bool OAICutPasteRequest::is_paste_type_Set() const{
    return m_paste_type_isSet;
}

bool OAICutPasteRequest::is_paste_type_Valid() const{
    return m_paste_type_isValid;
}

OAIGridRange OAICutPasteRequest::getSource() const {
    return m_source;
}
void OAICutPasteRequest::setSource(const OAIGridRange &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAICutPasteRequest::is_source_Set() const{
    return m_source_isSet;
}

bool OAICutPasteRequest::is_source_Valid() const{
    return m_source_isValid;
}

bool OAICutPasteRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_paste_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICutPasteRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
