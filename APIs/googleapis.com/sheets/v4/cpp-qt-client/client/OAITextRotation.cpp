/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextRotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextRotation::OAITextRotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextRotation::OAITextRotation() {
    this->initializeModel();
}

OAITextRotation::~OAITextRotation() {}

void OAITextRotation::initializeModel() {

    m_angle_isSet = false;
    m_angle_isValid = false;

    m_vertical_isSet = false;
    m_vertical_isValid = false;
}

void OAITextRotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextRotation::fromJsonObject(QJsonObject json) {

    m_angle_isValid = ::OpenAPI::fromJsonValue(m_angle, json[QString("angle")]);
    m_angle_isSet = !json[QString("angle")].isNull() && m_angle_isValid;

    m_vertical_isValid = ::OpenAPI::fromJsonValue(m_vertical, json[QString("vertical")]);
    m_vertical_isSet = !json[QString("vertical")].isNull() && m_vertical_isValid;
}

QString OAITextRotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextRotation::asJsonObject() const {
    QJsonObject obj;
    if (m_angle_isSet) {
        obj.insert(QString("angle"), ::OpenAPI::toJsonValue(m_angle));
    }
    if (m_vertical_isSet) {
        obj.insert(QString("vertical"), ::OpenAPI::toJsonValue(m_vertical));
    }
    return obj;
}

qint32 OAITextRotation::getAngle() const {
    return m_angle;
}
void OAITextRotation::setAngle(const qint32 &angle) {
    m_angle = angle;
    m_angle_isSet = true;
}

bool OAITextRotation::is_angle_Set() const{
    return m_angle_isSet;
}

bool OAITextRotation::is_angle_Valid() const{
    return m_angle_isValid;
}

bool OAITextRotation::isVertical() const {
    return m_vertical;
}
void OAITextRotation::setVertical(const bool &vertical) {
    m_vertical = vertical;
    m_vertical_isSet = true;
}

bool OAITextRotation::is_vertical_Set() const{
    return m_vertical_isSet;
}

bool OAITextRotation::is_vertical_Valid() const{
    return m_vertical_isValid;
}

bool OAITextRotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertical_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextRotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
