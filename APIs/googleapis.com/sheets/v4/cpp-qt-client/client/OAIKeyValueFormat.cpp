/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyValueFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyValueFormat::OAIKeyValueFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyValueFormat::OAIKeyValueFormat() {
    this->initializeModel();
}

OAIKeyValueFormat::~OAIKeyValueFormat() {}

void OAIKeyValueFormat::initializeModel() {

    m_position_isSet = false;
    m_position_isValid = false;

    m_text_format_isSet = false;
    m_text_format_isValid = false;
}

void OAIKeyValueFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyValueFormat::fromJsonObject(QJsonObject json) {

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_text_format_isValid = ::OpenAPI::fromJsonValue(m_text_format, json[QString("textFormat")]);
    m_text_format_isSet = !json[QString("textFormat")].isNull() && m_text_format_isValid;
}

QString OAIKeyValueFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyValueFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_text_format.isSet()) {
        obj.insert(QString("textFormat"), ::OpenAPI::toJsonValue(m_text_format));
    }
    return obj;
}

OAITextPosition OAIKeyValueFormat::getPosition() const {
    return m_position;
}
void OAIKeyValueFormat::setPosition(const OAITextPosition &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIKeyValueFormat::is_position_Set() const{
    return m_position_isSet;
}

bool OAIKeyValueFormat::is_position_Valid() const{
    return m_position_isValid;
}

OAITextFormat OAIKeyValueFormat::getTextFormat() const {
    return m_text_format;
}
void OAIKeyValueFormat::setTextFormat(const OAITextFormat &text_format) {
    m_text_format = text_format;
    m_text_format_isSet = true;
}

bool OAIKeyValueFormat::is_text_format_Set() const{
    return m_text_format_isSet;
}

bool OAIKeyValueFormat::is_text_format_Valid() const{
    return m_text_format_isValid;
}

bool OAIKeyValueFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyValueFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
