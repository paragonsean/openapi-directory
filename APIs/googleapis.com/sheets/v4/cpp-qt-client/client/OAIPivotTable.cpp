/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotTable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotTable::OAIPivotTable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotTable::OAIPivotTable() {
    this->initializeModel();
}

OAIPivotTable::~OAIPivotTable() {}

void OAIPivotTable::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_criteria_isSet = false;
    m_criteria_isValid = false;

    m_data_execution_status_isSet = false;
    m_data_execution_status_isValid = false;

    m_data_source_id_isSet = false;
    m_data_source_id_isValid = false;

    m_filter_specs_isSet = false;
    m_filter_specs_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_value_layout_isSet = false;
    m_value_layout_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIPivotTable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotTable::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_criteria_isValid = ::OpenAPI::fromJsonValue(m_criteria, json[QString("criteria")]);
    m_criteria_isSet = !json[QString("criteria")].isNull() && m_criteria_isValid;

    m_data_execution_status_isValid = ::OpenAPI::fromJsonValue(m_data_execution_status, json[QString("dataExecutionStatus")]);
    m_data_execution_status_isSet = !json[QString("dataExecutionStatus")].isNull() && m_data_execution_status_isValid;

    m_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_id, json[QString("dataSourceId")]);
    m_data_source_id_isSet = !json[QString("dataSourceId")].isNull() && m_data_source_id_isValid;

    m_filter_specs_isValid = ::OpenAPI::fromJsonValue(m_filter_specs, json[QString("filterSpecs")]);
    m_filter_specs_isSet = !json[QString("filterSpecs")].isNull() && m_filter_specs_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_value_layout_isValid = ::OpenAPI::fromJsonValue(m_value_layout, json[QString("valueLayout")]);
    m_value_layout_isSet = !json[QString("valueLayout")].isNull() && m_value_layout_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIPivotTable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotTable::asJsonObject() const {
    QJsonObject obj;
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_criteria.size() > 0) {
        obj.insert(QString("criteria"), ::OpenAPI::toJsonValue(m_criteria));
    }
    if (m_data_execution_status.isSet()) {
        obj.insert(QString("dataExecutionStatus"), ::OpenAPI::toJsonValue(m_data_execution_status));
    }
    if (m_data_source_id_isSet) {
        obj.insert(QString("dataSourceId"), ::OpenAPI::toJsonValue(m_data_source_id));
    }
    if (m_filter_specs.size() > 0) {
        obj.insert(QString("filterSpecs"), ::OpenAPI::toJsonValue(m_filter_specs));
    }
    if (m_rows.size() > 0) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_value_layout_isSet) {
        obj.insert(QString("valueLayout"), ::OpenAPI::toJsonValue(m_value_layout));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QList<OAIPivotGroup> OAIPivotTable::getColumns() const {
    return m_columns;
}
void OAIPivotTable::setColumns(const QList<OAIPivotGroup> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIPivotTable::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIPivotTable::is_columns_Valid() const{
    return m_columns_isValid;
}

QMap<QString, OAIPivotFilterCriteria> OAIPivotTable::getCriteria() const {
    return m_criteria;
}
void OAIPivotTable::setCriteria(const QMap<QString, OAIPivotFilterCriteria> &criteria) {
    m_criteria = criteria;
    m_criteria_isSet = true;
}

bool OAIPivotTable::is_criteria_Set() const{
    return m_criteria_isSet;
}

bool OAIPivotTable::is_criteria_Valid() const{
    return m_criteria_isValid;
}

OAIDataExecutionStatus OAIPivotTable::getDataExecutionStatus() const {
    return m_data_execution_status;
}
void OAIPivotTable::setDataExecutionStatus(const OAIDataExecutionStatus &data_execution_status) {
    m_data_execution_status = data_execution_status;
    m_data_execution_status_isSet = true;
}

bool OAIPivotTable::is_data_execution_status_Set() const{
    return m_data_execution_status_isSet;
}

bool OAIPivotTable::is_data_execution_status_Valid() const{
    return m_data_execution_status_isValid;
}

QString OAIPivotTable::getDataSourceId() const {
    return m_data_source_id;
}
void OAIPivotTable::setDataSourceId(const QString &data_source_id) {
    m_data_source_id = data_source_id;
    m_data_source_id_isSet = true;
}

bool OAIPivotTable::is_data_source_id_Set() const{
    return m_data_source_id_isSet;
}

bool OAIPivotTable::is_data_source_id_Valid() const{
    return m_data_source_id_isValid;
}

QList<OAIPivotFilterSpec> OAIPivotTable::getFilterSpecs() const {
    return m_filter_specs;
}
void OAIPivotTable::setFilterSpecs(const QList<OAIPivotFilterSpec> &filter_specs) {
    m_filter_specs = filter_specs;
    m_filter_specs_isSet = true;
}

bool OAIPivotTable::is_filter_specs_Set() const{
    return m_filter_specs_isSet;
}

bool OAIPivotTable::is_filter_specs_Valid() const{
    return m_filter_specs_isValid;
}

QList<OAIPivotGroup> OAIPivotTable::getRows() const {
    return m_rows;
}
void OAIPivotTable::setRows(const QList<OAIPivotGroup> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIPivotTable::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIPivotTable::is_rows_Valid() const{
    return m_rows_isValid;
}

OAIGridRange OAIPivotTable::getSource() const {
    return m_source;
}
void OAIPivotTable::setSource(const OAIGridRange &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIPivotTable::is_source_Set() const{
    return m_source_isSet;
}

bool OAIPivotTable::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIPivotTable::getValueLayout() const {
    return m_value_layout;
}
void OAIPivotTable::setValueLayout(const QString &value_layout) {
    m_value_layout = value_layout;
    m_value_layout_isSet = true;
}

bool OAIPivotTable::is_value_layout_Set() const{
    return m_value_layout_isSet;
}

bool OAIPivotTable::is_value_layout_Valid() const{
    return m_value_layout_isValid;
}

QList<OAIPivotValue> OAIPivotTable::getValues() const {
    return m_values;
}
void OAIPivotTable::setValues(const QList<OAIPivotValue> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIPivotTable::is_values_Set() const{
    return m_values_isSet;
}

bool OAIPivotTable::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIPivotTable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_criteria.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_execution_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_layout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotTable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
