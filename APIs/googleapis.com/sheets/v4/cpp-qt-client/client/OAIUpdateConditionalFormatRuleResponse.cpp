/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateConditionalFormatRuleResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateConditionalFormatRuleResponse::OAIUpdateConditionalFormatRuleResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateConditionalFormatRuleResponse::OAIUpdateConditionalFormatRuleResponse() {
    this->initializeModel();
}

OAIUpdateConditionalFormatRuleResponse::~OAIUpdateConditionalFormatRuleResponse() {}

void OAIUpdateConditionalFormatRuleResponse::initializeModel() {

    m_new_index_isSet = false;
    m_new_index_isValid = false;

    m_new_rule_isSet = false;
    m_new_rule_isValid = false;

    m_old_index_isSet = false;
    m_old_index_isValid = false;

    m_old_rule_isSet = false;
    m_old_rule_isValid = false;
}

void OAIUpdateConditionalFormatRuleResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateConditionalFormatRuleResponse::fromJsonObject(QJsonObject json) {

    m_new_index_isValid = ::OpenAPI::fromJsonValue(m_new_index, json[QString("newIndex")]);
    m_new_index_isSet = !json[QString("newIndex")].isNull() && m_new_index_isValid;

    m_new_rule_isValid = ::OpenAPI::fromJsonValue(m_new_rule, json[QString("newRule")]);
    m_new_rule_isSet = !json[QString("newRule")].isNull() && m_new_rule_isValid;

    m_old_index_isValid = ::OpenAPI::fromJsonValue(m_old_index, json[QString("oldIndex")]);
    m_old_index_isSet = !json[QString("oldIndex")].isNull() && m_old_index_isValid;

    m_old_rule_isValid = ::OpenAPI::fromJsonValue(m_old_rule, json[QString("oldRule")]);
    m_old_rule_isSet = !json[QString("oldRule")].isNull() && m_old_rule_isValid;
}

QString OAIUpdateConditionalFormatRuleResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateConditionalFormatRuleResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_new_index_isSet) {
        obj.insert(QString("newIndex"), ::OpenAPI::toJsonValue(m_new_index));
    }
    if (m_new_rule.isSet()) {
        obj.insert(QString("newRule"), ::OpenAPI::toJsonValue(m_new_rule));
    }
    if (m_old_index_isSet) {
        obj.insert(QString("oldIndex"), ::OpenAPI::toJsonValue(m_old_index));
    }
    if (m_old_rule.isSet()) {
        obj.insert(QString("oldRule"), ::OpenAPI::toJsonValue(m_old_rule));
    }
    return obj;
}

qint32 OAIUpdateConditionalFormatRuleResponse::getNewIndex() const {
    return m_new_index;
}
void OAIUpdateConditionalFormatRuleResponse::setNewIndex(const qint32 &new_index) {
    m_new_index = new_index;
    m_new_index_isSet = true;
}

bool OAIUpdateConditionalFormatRuleResponse::is_new_index_Set() const{
    return m_new_index_isSet;
}

bool OAIUpdateConditionalFormatRuleResponse::is_new_index_Valid() const{
    return m_new_index_isValid;
}

OAIConditionalFormatRule OAIUpdateConditionalFormatRuleResponse::getNewRule() const {
    return m_new_rule;
}
void OAIUpdateConditionalFormatRuleResponse::setNewRule(const OAIConditionalFormatRule &new_rule) {
    m_new_rule = new_rule;
    m_new_rule_isSet = true;
}

bool OAIUpdateConditionalFormatRuleResponse::is_new_rule_Set() const{
    return m_new_rule_isSet;
}

bool OAIUpdateConditionalFormatRuleResponse::is_new_rule_Valid() const{
    return m_new_rule_isValid;
}

qint32 OAIUpdateConditionalFormatRuleResponse::getOldIndex() const {
    return m_old_index;
}
void OAIUpdateConditionalFormatRuleResponse::setOldIndex(const qint32 &old_index) {
    m_old_index = old_index;
    m_old_index_isSet = true;
}

bool OAIUpdateConditionalFormatRuleResponse::is_old_index_Set() const{
    return m_old_index_isSet;
}

bool OAIUpdateConditionalFormatRuleResponse::is_old_index_Valid() const{
    return m_old_index_isValid;
}

OAIConditionalFormatRule OAIUpdateConditionalFormatRuleResponse::getOldRule() const {
    return m_old_rule;
}
void OAIUpdateConditionalFormatRuleResponse::setOldRule(const OAIConditionalFormatRule &old_rule) {
    m_old_rule = old_rule;
    m_old_rule_isSet = true;
}

bool OAIUpdateConditionalFormatRuleResponse::is_old_rule_Set() const{
    return m_old_rule_isSet;
}

bool OAIUpdateConditionalFormatRuleResponse::is_old_rule_Valid() const{
    return m_old_rule_isValid;
}

bool OAIUpdateConditionalFormatRuleResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_new_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateConditionalFormatRuleResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
