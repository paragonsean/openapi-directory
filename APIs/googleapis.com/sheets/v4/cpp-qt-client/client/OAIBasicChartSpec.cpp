/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBasicChartSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBasicChartSpec::OAIBasicChartSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBasicChartSpec::OAIBasicChartSpec() {
    this->initializeModel();
}

OAIBasicChartSpec::~OAIBasicChartSpec() {}

void OAIBasicChartSpec::initializeModel() {

    m_axis_isSet = false;
    m_axis_isValid = false;

    m_chart_type_isSet = false;
    m_chart_type_isValid = false;

    m_compare_mode_isSet = false;
    m_compare_mode_isValid = false;

    m_domains_isSet = false;
    m_domains_isValid = false;

    m_header_count_isSet = false;
    m_header_count_isValid = false;

    m_interpolate_nulls_isSet = false;
    m_interpolate_nulls_isValid = false;

    m_legend_position_isSet = false;
    m_legend_position_isValid = false;

    m_line_smoothing_isSet = false;
    m_line_smoothing_isValid = false;

    m_series_isSet = false;
    m_series_isValid = false;

    m_stacked_type_isSet = false;
    m_stacked_type_isValid = false;

    m_three_dimensional_isSet = false;
    m_three_dimensional_isValid = false;

    m_total_data_label_isSet = false;
    m_total_data_label_isValid = false;
}

void OAIBasicChartSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBasicChartSpec::fromJsonObject(QJsonObject json) {

    m_axis_isValid = ::OpenAPI::fromJsonValue(m_axis, json[QString("axis")]);
    m_axis_isSet = !json[QString("axis")].isNull() && m_axis_isValid;

    m_chart_type_isValid = ::OpenAPI::fromJsonValue(m_chart_type, json[QString("chartType")]);
    m_chart_type_isSet = !json[QString("chartType")].isNull() && m_chart_type_isValid;

    m_compare_mode_isValid = ::OpenAPI::fromJsonValue(m_compare_mode, json[QString("compareMode")]);
    m_compare_mode_isSet = !json[QString("compareMode")].isNull() && m_compare_mode_isValid;

    m_domains_isValid = ::OpenAPI::fromJsonValue(m_domains, json[QString("domains")]);
    m_domains_isSet = !json[QString("domains")].isNull() && m_domains_isValid;

    m_header_count_isValid = ::OpenAPI::fromJsonValue(m_header_count, json[QString("headerCount")]);
    m_header_count_isSet = !json[QString("headerCount")].isNull() && m_header_count_isValid;

    m_interpolate_nulls_isValid = ::OpenAPI::fromJsonValue(m_interpolate_nulls, json[QString("interpolateNulls")]);
    m_interpolate_nulls_isSet = !json[QString("interpolateNulls")].isNull() && m_interpolate_nulls_isValid;

    m_legend_position_isValid = ::OpenAPI::fromJsonValue(m_legend_position, json[QString("legendPosition")]);
    m_legend_position_isSet = !json[QString("legendPosition")].isNull() && m_legend_position_isValid;

    m_line_smoothing_isValid = ::OpenAPI::fromJsonValue(m_line_smoothing, json[QString("lineSmoothing")]);
    m_line_smoothing_isSet = !json[QString("lineSmoothing")].isNull() && m_line_smoothing_isValid;

    m_series_isValid = ::OpenAPI::fromJsonValue(m_series, json[QString("series")]);
    m_series_isSet = !json[QString("series")].isNull() && m_series_isValid;

    m_stacked_type_isValid = ::OpenAPI::fromJsonValue(m_stacked_type, json[QString("stackedType")]);
    m_stacked_type_isSet = !json[QString("stackedType")].isNull() && m_stacked_type_isValid;

    m_three_dimensional_isValid = ::OpenAPI::fromJsonValue(m_three_dimensional, json[QString("threeDimensional")]);
    m_three_dimensional_isSet = !json[QString("threeDimensional")].isNull() && m_three_dimensional_isValid;

    m_total_data_label_isValid = ::OpenAPI::fromJsonValue(m_total_data_label, json[QString("totalDataLabel")]);
    m_total_data_label_isSet = !json[QString("totalDataLabel")].isNull() && m_total_data_label_isValid;
}

QString OAIBasicChartSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBasicChartSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_axis.size() > 0) {
        obj.insert(QString("axis"), ::OpenAPI::toJsonValue(m_axis));
    }
    if (m_chart_type_isSet) {
        obj.insert(QString("chartType"), ::OpenAPI::toJsonValue(m_chart_type));
    }
    if (m_compare_mode_isSet) {
        obj.insert(QString("compareMode"), ::OpenAPI::toJsonValue(m_compare_mode));
    }
    if (m_domains.size() > 0) {
        obj.insert(QString("domains"), ::OpenAPI::toJsonValue(m_domains));
    }
    if (m_header_count_isSet) {
        obj.insert(QString("headerCount"), ::OpenAPI::toJsonValue(m_header_count));
    }
    if (m_interpolate_nulls_isSet) {
        obj.insert(QString("interpolateNulls"), ::OpenAPI::toJsonValue(m_interpolate_nulls));
    }
    if (m_legend_position_isSet) {
        obj.insert(QString("legendPosition"), ::OpenAPI::toJsonValue(m_legend_position));
    }
    if (m_line_smoothing_isSet) {
        obj.insert(QString("lineSmoothing"), ::OpenAPI::toJsonValue(m_line_smoothing));
    }
    if (m_series.size() > 0) {
        obj.insert(QString("series"), ::OpenAPI::toJsonValue(m_series));
    }
    if (m_stacked_type_isSet) {
        obj.insert(QString("stackedType"), ::OpenAPI::toJsonValue(m_stacked_type));
    }
    if (m_three_dimensional_isSet) {
        obj.insert(QString("threeDimensional"), ::OpenAPI::toJsonValue(m_three_dimensional));
    }
    if (m_total_data_label.isSet()) {
        obj.insert(QString("totalDataLabel"), ::OpenAPI::toJsonValue(m_total_data_label));
    }
    return obj;
}

QList<OAIBasicChartAxis> OAIBasicChartSpec::getAxis() const {
    return m_axis;
}
void OAIBasicChartSpec::setAxis(const QList<OAIBasicChartAxis> &axis) {
    m_axis = axis;
    m_axis_isSet = true;
}

bool OAIBasicChartSpec::is_axis_Set() const{
    return m_axis_isSet;
}

bool OAIBasicChartSpec::is_axis_Valid() const{
    return m_axis_isValid;
}

QString OAIBasicChartSpec::getChartType() const {
    return m_chart_type;
}
void OAIBasicChartSpec::setChartType(const QString &chart_type) {
    m_chart_type = chart_type;
    m_chart_type_isSet = true;
}

bool OAIBasicChartSpec::is_chart_type_Set() const{
    return m_chart_type_isSet;
}

bool OAIBasicChartSpec::is_chart_type_Valid() const{
    return m_chart_type_isValid;
}

QString OAIBasicChartSpec::getCompareMode() const {
    return m_compare_mode;
}
void OAIBasicChartSpec::setCompareMode(const QString &compare_mode) {
    m_compare_mode = compare_mode;
    m_compare_mode_isSet = true;
}

bool OAIBasicChartSpec::is_compare_mode_Set() const{
    return m_compare_mode_isSet;
}

bool OAIBasicChartSpec::is_compare_mode_Valid() const{
    return m_compare_mode_isValid;
}

QList<OAIBasicChartDomain> OAIBasicChartSpec::getDomains() const {
    return m_domains;
}
void OAIBasicChartSpec::setDomains(const QList<OAIBasicChartDomain> &domains) {
    m_domains = domains;
    m_domains_isSet = true;
}

bool OAIBasicChartSpec::is_domains_Set() const{
    return m_domains_isSet;
}

bool OAIBasicChartSpec::is_domains_Valid() const{
    return m_domains_isValid;
}

qint32 OAIBasicChartSpec::getHeaderCount() const {
    return m_header_count;
}
void OAIBasicChartSpec::setHeaderCount(const qint32 &header_count) {
    m_header_count = header_count;
    m_header_count_isSet = true;
}

bool OAIBasicChartSpec::is_header_count_Set() const{
    return m_header_count_isSet;
}

bool OAIBasicChartSpec::is_header_count_Valid() const{
    return m_header_count_isValid;
}

bool OAIBasicChartSpec::isInterpolateNulls() const {
    return m_interpolate_nulls;
}
void OAIBasicChartSpec::setInterpolateNulls(const bool &interpolate_nulls) {
    m_interpolate_nulls = interpolate_nulls;
    m_interpolate_nulls_isSet = true;
}

bool OAIBasicChartSpec::is_interpolate_nulls_Set() const{
    return m_interpolate_nulls_isSet;
}

bool OAIBasicChartSpec::is_interpolate_nulls_Valid() const{
    return m_interpolate_nulls_isValid;
}

QString OAIBasicChartSpec::getLegendPosition() const {
    return m_legend_position;
}
void OAIBasicChartSpec::setLegendPosition(const QString &legend_position) {
    m_legend_position = legend_position;
    m_legend_position_isSet = true;
}

bool OAIBasicChartSpec::is_legend_position_Set() const{
    return m_legend_position_isSet;
}

bool OAIBasicChartSpec::is_legend_position_Valid() const{
    return m_legend_position_isValid;
}

bool OAIBasicChartSpec::isLineSmoothing() const {
    return m_line_smoothing;
}
void OAIBasicChartSpec::setLineSmoothing(const bool &line_smoothing) {
    m_line_smoothing = line_smoothing;
    m_line_smoothing_isSet = true;
}

bool OAIBasicChartSpec::is_line_smoothing_Set() const{
    return m_line_smoothing_isSet;
}

bool OAIBasicChartSpec::is_line_smoothing_Valid() const{
    return m_line_smoothing_isValid;
}

QList<OAIBasicChartSeries> OAIBasicChartSpec::getSeries() const {
    return m_series;
}
void OAIBasicChartSpec::setSeries(const QList<OAIBasicChartSeries> &series) {
    m_series = series;
    m_series_isSet = true;
}

bool OAIBasicChartSpec::is_series_Set() const{
    return m_series_isSet;
}

bool OAIBasicChartSpec::is_series_Valid() const{
    return m_series_isValid;
}

QString OAIBasicChartSpec::getStackedType() const {
    return m_stacked_type;
}
void OAIBasicChartSpec::setStackedType(const QString &stacked_type) {
    m_stacked_type = stacked_type;
    m_stacked_type_isSet = true;
}

bool OAIBasicChartSpec::is_stacked_type_Set() const{
    return m_stacked_type_isSet;
}

bool OAIBasicChartSpec::is_stacked_type_Valid() const{
    return m_stacked_type_isValid;
}

bool OAIBasicChartSpec::isThreeDimensional() const {
    return m_three_dimensional;
}
void OAIBasicChartSpec::setThreeDimensional(const bool &three_dimensional) {
    m_three_dimensional = three_dimensional;
    m_three_dimensional_isSet = true;
}

bool OAIBasicChartSpec::is_three_dimensional_Set() const{
    return m_three_dimensional_isSet;
}

bool OAIBasicChartSpec::is_three_dimensional_Valid() const{
    return m_three_dimensional_isValid;
}

OAIDataLabel OAIBasicChartSpec::getTotalDataLabel() const {
    return m_total_data_label;
}
void OAIBasicChartSpec::setTotalDataLabel(const OAIDataLabel &total_data_label) {
    m_total_data_label = total_data_label;
    m_total_data_label_isSet = true;
}

bool OAIBasicChartSpec::is_total_data_label_Set() const{
    return m_total_data_label_isSet;
}

bool OAIBasicChartSpec::is_total_data_label_Valid() const{
    return m_total_data_label_isValid;
}

bool OAIBasicChartSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_axis.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_chart_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compare_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interpolate_nulls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_smoothing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stacked_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_dimensional_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_data_label.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBasicChartSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
