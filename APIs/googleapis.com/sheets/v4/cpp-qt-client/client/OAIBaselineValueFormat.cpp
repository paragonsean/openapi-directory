/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBaselineValueFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBaselineValueFormat::OAIBaselineValueFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBaselineValueFormat::OAIBaselineValueFormat() {
    this->initializeModel();
}

OAIBaselineValueFormat::~OAIBaselineValueFormat() {}

void OAIBaselineValueFormat::initializeModel() {

    m_comparison_type_isSet = false;
    m_comparison_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_negative_color_isSet = false;
    m_negative_color_isValid = false;

    m_negative_color_style_isSet = false;
    m_negative_color_style_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_positive_color_isSet = false;
    m_positive_color_isValid = false;

    m_positive_color_style_isSet = false;
    m_positive_color_style_isValid = false;

    m_text_format_isSet = false;
    m_text_format_isValid = false;
}

void OAIBaselineValueFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBaselineValueFormat::fromJsonObject(QJsonObject json) {

    m_comparison_type_isValid = ::OpenAPI::fromJsonValue(m_comparison_type, json[QString("comparisonType")]);
    m_comparison_type_isSet = !json[QString("comparisonType")].isNull() && m_comparison_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_negative_color_isValid = ::OpenAPI::fromJsonValue(m_negative_color, json[QString("negativeColor")]);
    m_negative_color_isSet = !json[QString("negativeColor")].isNull() && m_negative_color_isValid;

    m_negative_color_style_isValid = ::OpenAPI::fromJsonValue(m_negative_color_style, json[QString("negativeColorStyle")]);
    m_negative_color_style_isSet = !json[QString("negativeColorStyle")].isNull() && m_negative_color_style_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_positive_color_isValid = ::OpenAPI::fromJsonValue(m_positive_color, json[QString("positiveColor")]);
    m_positive_color_isSet = !json[QString("positiveColor")].isNull() && m_positive_color_isValid;

    m_positive_color_style_isValid = ::OpenAPI::fromJsonValue(m_positive_color_style, json[QString("positiveColorStyle")]);
    m_positive_color_style_isSet = !json[QString("positiveColorStyle")].isNull() && m_positive_color_style_isValid;

    m_text_format_isValid = ::OpenAPI::fromJsonValue(m_text_format, json[QString("textFormat")]);
    m_text_format_isSet = !json[QString("textFormat")].isNull() && m_text_format_isValid;
}

QString OAIBaselineValueFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBaselineValueFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_comparison_type_isSet) {
        obj.insert(QString("comparisonType"), ::OpenAPI::toJsonValue(m_comparison_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_negative_color.isSet()) {
        obj.insert(QString("negativeColor"), ::OpenAPI::toJsonValue(m_negative_color));
    }
    if (m_negative_color_style.isSet()) {
        obj.insert(QString("negativeColorStyle"), ::OpenAPI::toJsonValue(m_negative_color_style));
    }
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_positive_color.isSet()) {
        obj.insert(QString("positiveColor"), ::OpenAPI::toJsonValue(m_positive_color));
    }
    if (m_positive_color_style.isSet()) {
        obj.insert(QString("positiveColorStyle"), ::OpenAPI::toJsonValue(m_positive_color_style));
    }
    if (m_text_format.isSet()) {
        obj.insert(QString("textFormat"), ::OpenAPI::toJsonValue(m_text_format));
    }
    return obj;
}

QString OAIBaselineValueFormat::getComparisonType() const {
    return m_comparison_type;
}
void OAIBaselineValueFormat::setComparisonType(const QString &comparison_type) {
    m_comparison_type = comparison_type;
    m_comparison_type_isSet = true;
}

bool OAIBaselineValueFormat::is_comparison_type_Set() const{
    return m_comparison_type_isSet;
}

bool OAIBaselineValueFormat::is_comparison_type_Valid() const{
    return m_comparison_type_isValid;
}

QString OAIBaselineValueFormat::getDescription() const {
    return m_description;
}
void OAIBaselineValueFormat::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBaselineValueFormat::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBaselineValueFormat::is_description_Valid() const{
    return m_description_isValid;
}

OAIColor OAIBaselineValueFormat::getNegativeColor() const {
    return m_negative_color;
}
void OAIBaselineValueFormat::setNegativeColor(const OAIColor &negative_color) {
    m_negative_color = negative_color;
    m_negative_color_isSet = true;
}

bool OAIBaselineValueFormat::is_negative_color_Set() const{
    return m_negative_color_isSet;
}

bool OAIBaselineValueFormat::is_negative_color_Valid() const{
    return m_negative_color_isValid;
}

OAIColorStyle OAIBaselineValueFormat::getNegativeColorStyle() const {
    return m_negative_color_style;
}
void OAIBaselineValueFormat::setNegativeColorStyle(const OAIColorStyle &negative_color_style) {
    m_negative_color_style = negative_color_style;
    m_negative_color_style_isSet = true;
}

bool OAIBaselineValueFormat::is_negative_color_style_Set() const{
    return m_negative_color_style_isSet;
}

bool OAIBaselineValueFormat::is_negative_color_style_Valid() const{
    return m_negative_color_style_isValid;
}

OAITextPosition OAIBaselineValueFormat::getPosition() const {
    return m_position;
}
void OAIBaselineValueFormat::setPosition(const OAITextPosition &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIBaselineValueFormat::is_position_Set() const{
    return m_position_isSet;
}

bool OAIBaselineValueFormat::is_position_Valid() const{
    return m_position_isValid;
}

OAIColor OAIBaselineValueFormat::getPositiveColor() const {
    return m_positive_color;
}
void OAIBaselineValueFormat::setPositiveColor(const OAIColor &positive_color) {
    m_positive_color = positive_color;
    m_positive_color_isSet = true;
}

bool OAIBaselineValueFormat::is_positive_color_Set() const{
    return m_positive_color_isSet;
}

bool OAIBaselineValueFormat::is_positive_color_Valid() const{
    return m_positive_color_isValid;
}

OAIColorStyle OAIBaselineValueFormat::getPositiveColorStyle() const {
    return m_positive_color_style;
}
void OAIBaselineValueFormat::setPositiveColorStyle(const OAIColorStyle &positive_color_style) {
    m_positive_color_style = positive_color_style;
    m_positive_color_style_isSet = true;
}

bool OAIBaselineValueFormat::is_positive_color_style_Set() const{
    return m_positive_color_style_isSet;
}

bool OAIBaselineValueFormat::is_positive_color_style_Valid() const{
    return m_positive_color_style_isValid;
}

OAITextFormat OAIBaselineValueFormat::getTextFormat() const {
    return m_text_format;
}
void OAIBaselineValueFormat::setTextFormat(const OAITextFormat &text_format) {
    m_text_format = text_format;
    m_text_format_isSet = true;
}

bool OAIBaselineValueFormat::is_text_format_Set() const{
    return m_text_format_isSet;
}

bool OAIBaselineValueFormat::is_text_format_Valid() const{
    return m_text_format_isValid;
}

bool OAIBaselineValueFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comparison_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negative_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_negative_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_positive_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_positive_color_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBaselineValueFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
