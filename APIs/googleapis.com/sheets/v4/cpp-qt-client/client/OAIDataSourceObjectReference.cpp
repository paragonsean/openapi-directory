/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceObjectReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceObjectReference::OAIDataSourceObjectReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceObjectReference::OAIDataSourceObjectReference() {
    this->initializeModel();
}

OAIDataSourceObjectReference::~OAIDataSourceObjectReference() {}

void OAIDataSourceObjectReference::initializeModel() {

    m_chart_id_isSet = false;
    m_chart_id_isValid = false;

    m_data_source_formula_cell_isSet = false;
    m_data_source_formula_cell_isValid = false;

    m_data_source_pivot_table_anchor_cell_isSet = false;
    m_data_source_pivot_table_anchor_cell_isValid = false;

    m_data_source_table_anchor_cell_isSet = false;
    m_data_source_table_anchor_cell_isValid = false;

    m_sheet_id_isSet = false;
    m_sheet_id_isValid = false;
}

void OAIDataSourceObjectReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSourceObjectReference::fromJsonObject(QJsonObject json) {

    m_chart_id_isValid = ::OpenAPI::fromJsonValue(m_chart_id, json[QString("chartId")]);
    m_chart_id_isSet = !json[QString("chartId")].isNull() && m_chart_id_isValid;

    m_data_source_formula_cell_isValid = ::OpenAPI::fromJsonValue(m_data_source_formula_cell, json[QString("dataSourceFormulaCell")]);
    m_data_source_formula_cell_isSet = !json[QString("dataSourceFormulaCell")].isNull() && m_data_source_formula_cell_isValid;

    m_data_source_pivot_table_anchor_cell_isValid = ::OpenAPI::fromJsonValue(m_data_source_pivot_table_anchor_cell, json[QString("dataSourcePivotTableAnchorCell")]);
    m_data_source_pivot_table_anchor_cell_isSet = !json[QString("dataSourcePivotTableAnchorCell")].isNull() && m_data_source_pivot_table_anchor_cell_isValid;

    m_data_source_table_anchor_cell_isValid = ::OpenAPI::fromJsonValue(m_data_source_table_anchor_cell, json[QString("dataSourceTableAnchorCell")]);
    m_data_source_table_anchor_cell_isSet = !json[QString("dataSourceTableAnchorCell")].isNull() && m_data_source_table_anchor_cell_isValid;

    m_sheet_id_isValid = ::OpenAPI::fromJsonValue(m_sheet_id, json[QString("sheetId")]);
    m_sheet_id_isSet = !json[QString("sheetId")].isNull() && m_sheet_id_isValid;
}

QString OAIDataSourceObjectReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSourceObjectReference::asJsonObject() const {
    QJsonObject obj;
    if (m_chart_id_isSet) {
        obj.insert(QString("chartId"), ::OpenAPI::toJsonValue(m_chart_id));
    }
    if (m_data_source_formula_cell.isSet()) {
        obj.insert(QString("dataSourceFormulaCell"), ::OpenAPI::toJsonValue(m_data_source_formula_cell));
    }
    if (m_data_source_pivot_table_anchor_cell.isSet()) {
        obj.insert(QString("dataSourcePivotTableAnchorCell"), ::OpenAPI::toJsonValue(m_data_source_pivot_table_anchor_cell));
    }
    if (m_data_source_table_anchor_cell.isSet()) {
        obj.insert(QString("dataSourceTableAnchorCell"), ::OpenAPI::toJsonValue(m_data_source_table_anchor_cell));
    }
    if (m_sheet_id_isSet) {
        obj.insert(QString("sheetId"), ::OpenAPI::toJsonValue(m_sheet_id));
    }
    return obj;
}

qint32 OAIDataSourceObjectReference::getChartId() const {
    return m_chart_id;
}
void OAIDataSourceObjectReference::setChartId(const qint32 &chart_id) {
    m_chart_id = chart_id;
    m_chart_id_isSet = true;
}

bool OAIDataSourceObjectReference::is_chart_id_Set() const{
    return m_chart_id_isSet;
}

bool OAIDataSourceObjectReference::is_chart_id_Valid() const{
    return m_chart_id_isValid;
}

OAIGridCoordinate OAIDataSourceObjectReference::getDataSourceFormulaCell() const {
    return m_data_source_formula_cell;
}
void OAIDataSourceObjectReference::setDataSourceFormulaCell(const OAIGridCoordinate &data_source_formula_cell) {
    m_data_source_formula_cell = data_source_formula_cell;
    m_data_source_formula_cell_isSet = true;
}

bool OAIDataSourceObjectReference::is_data_source_formula_cell_Set() const{
    return m_data_source_formula_cell_isSet;
}

bool OAIDataSourceObjectReference::is_data_source_formula_cell_Valid() const{
    return m_data_source_formula_cell_isValid;
}

OAIGridCoordinate OAIDataSourceObjectReference::getDataSourcePivotTableAnchorCell() const {
    return m_data_source_pivot_table_anchor_cell;
}
void OAIDataSourceObjectReference::setDataSourcePivotTableAnchorCell(const OAIGridCoordinate &data_source_pivot_table_anchor_cell) {
    m_data_source_pivot_table_anchor_cell = data_source_pivot_table_anchor_cell;
    m_data_source_pivot_table_anchor_cell_isSet = true;
}

bool OAIDataSourceObjectReference::is_data_source_pivot_table_anchor_cell_Set() const{
    return m_data_source_pivot_table_anchor_cell_isSet;
}

bool OAIDataSourceObjectReference::is_data_source_pivot_table_anchor_cell_Valid() const{
    return m_data_source_pivot_table_anchor_cell_isValid;
}

OAIGridCoordinate OAIDataSourceObjectReference::getDataSourceTableAnchorCell() const {
    return m_data_source_table_anchor_cell;
}
void OAIDataSourceObjectReference::setDataSourceTableAnchorCell(const OAIGridCoordinate &data_source_table_anchor_cell) {
    m_data_source_table_anchor_cell = data_source_table_anchor_cell;
    m_data_source_table_anchor_cell_isSet = true;
}

bool OAIDataSourceObjectReference::is_data_source_table_anchor_cell_Set() const{
    return m_data_source_table_anchor_cell_isSet;
}

bool OAIDataSourceObjectReference::is_data_source_table_anchor_cell_Valid() const{
    return m_data_source_table_anchor_cell_isValid;
}

QString OAIDataSourceObjectReference::getSheetId() const {
    return m_sheet_id;
}
void OAIDataSourceObjectReference::setSheetId(const QString &sheet_id) {
    m_sheet_id = sheet_id;
    m_sheet_id_isSet = true;
}

bool OAIDataSourceObjectReference::is_sheet_id_Set() const{
    return m_sheet_id_isSet;
}

bool OAIDataSourceObjectReference::is_sheet_id_Valid() const{
    return m_sheet_id_isValid;
}

bool OAIDataSourceObjectReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chart_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_formula_cell.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_pivot_table_anchor_cell.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_table_anchor_cell.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheet_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSourceObjectReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
