/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPieChartSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPieChartSpec::OAIPieChartSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPieChartSpec::OAIPieChartSpec() {
    this->initializeModel();
}

OAIPieChartSpec::~OAIPieChartSpec() {}

void OAIPieChartSpec::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_legend_position_isSet = false;
    m_legend_position_isValid = false;

    m_pie_hole_isSet = false;
    m_pie_hole_isValid = false;

    m_series_isSet = false;
    m_series_isValid = false;

    m_three_dimensional_isSet = false;
    m_three_dimensional_isValid = false;
}

void OAIPieChartSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPieChartSpec::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_legend_position_isValid = ::OpenAPI::fromJsonValue(m_legend_position, json[QString("legendPosition")]);
    m_legend_position_isSet = !json[QString("legendPosition")].isNull() && m_legend_position_isValid;

    m_pie_hole_isValid = ::OpenAPI::fromJsonValue(m_pie_hole, json[QString("pieHole")]);
    m_pie_hole_isSet = !json[QString("pieHole")].isNull() && m_pie_hole_isValid;

    m_series_isValid = ::OpenAPI::fromJsonValue(m_series, json[QString("series")]);
    m_series_isSet = !json[QString("series")].isNull() && m_series_isValid;

    m_three_dimensional_isValid = ::OpenAPI::fromJsonValue(m_three_dimensional, json[QString("threeDimensional")]);
    m_three_dimensional_isSet = !json[QString("threeDimensional")].isNull() && m_three_dimensional_isValid;
}

QString OAIPieChartSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPieChartSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_domain.isSet()) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_legend_position_isSet) {
        obj.insert(QString("legendPosition"), ::OpenAPI::toJsonValue(m_legend_position));
    }
    if (m_pie_hole_isSet) {
        obj.insert(QString("pieHole"), ::OpenAPI::toJsonValue(m_pie_hole));
    }
    if (m_series.isSet()) {
        obj.insert(QString("series"), ::OpenAPI::toJsonValue(m_series));
    }
    if (m_three_dimensional_isSet) {
        obj.insert(QString("threeDimensional"), ::OpenAPI::toJsonValue(m_three_dimensional));
    }
    return obj;
}

OAIChartData OAIPieChartSpec::getDomain() const {
    return m_domain;
}
void OAIPieChartSpec::setDomain(const OAIChartData &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIPieChartSpec::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIPieChartSpec::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIPieChartSpec::getLegendPosition() const {
    return m_legend_position;
}
void OAIPieChartSpec::setLegendPosition(const QString &legend_position) {
    m_legend_position = legend_position;
    m_legend_position_isSet = true;
}

bool OAIPieChartSpec::is_legend_position_Set() const{
    return m_legend_position_isSet;
}

bool OAIPieChartSpec::is_legend_position_Valid() const{
    return m_legend_position_isValid;
}

double OAIPieChartSpec::getPieHole() const {
    return m_pie_hole;
}
void OAIPieChartSpec::setPieHole(const double &pie_hole) {
    m_pie_hole = pie_hole;
    m_pie_hole_isSet = true;
}

bool OAIPieChartSpec::is_pie_hole_Set() const{
    return m_pie_hole_isSet;
}

bool OAIPieChartSpec::is_pie_hole_Valid() const{
    return m_pie_hole_isValid;
}

OAIChartData OAIPieChartSpec::getSeries() const {
    return m_series;
}
void OAIPieChartSpec::setSeries(const OAIChartData &series) {
    m_series = series;
    m_series_isSet = true;
}

bool OAIPieChartSpec::is_series_Set() const{
    return m_series_isSet;
}

bool OAIPieChartSpec::is_series_Valid() const{
    return m_series_isValid;
}

bool OAIPieChartSpec::isThreeDimensional() const {
    return m_three_dimensional;
}
void OAIPieChartSpec::setThreeDimensional(const bool &three_dimensional) {
    m_three_dimensional = three_dimensional;
    m_three_dimensional_isSet = true;
}

bool OAIPieChartSpec::is_three_dimensional_Set() const{
    return m_three_dimensional_isSet;
}

bool OAIPieChartSpec::is_three_dimensional_Valid() const{
    return m_three_dimensional_isValid;
}

bool OAIPieChartSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pie_hole_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_dimensional_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPieChartSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
