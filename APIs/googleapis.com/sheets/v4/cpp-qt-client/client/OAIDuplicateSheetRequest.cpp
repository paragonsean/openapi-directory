/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDuplicateSheetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDuplicateSheetRequest::OAIDuplicateSheetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDuplicateSheetRequest::OAIDuplicateSheetRequest() {
    this->initializeModel();
}

OAIDuplicateSheetRequest::~OAIDuplicateSheetRequest() {}

void OAIDuplicateSheetRequest::initializeModel() {

    m_insert_sheet_index_isSet = false;
    m_insert_sheet_index_isValid = false;

    m_new_sheet_id_isSet = false;
    m_new_sheet_id_isValid = false;

    m_new_sheet_name_isSet = false;
    m_new_sheet_name_isValid = false;

    m_source_sheet_id_isSet = false;
    m_source_sheet_id_isValid = false;
}

void OAIDuplicateSheetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDuplicateSheetRequest::fromJsonObject(QJsonObject json) {

    m_insert_sheet_index_isValid = ::OpenAPI::fromJsonValue(m_insert_sheet_index, json[QString("insertSheetIndex")]);
    m_insert_sheet_index_isSet = !json[QString("insertSheetIndex")].isNull() && m_insert_sheet_index_isValid;

    m_new_sheet_id_isValid = ::OpenAPI::fromJsonValue(m_new_sheet_id, json[QString("newSheetId")]);
    m_new_sheet_id_isSet = !json[QString("newSheetId")].isNull() && m_new_sheet_id_isValid;

    m_new_sheet_name_isValid = ::OpenAPI::fromJsonValue(m_new_sheet_name, json[QString("newSheetName")]);
    m_new_sheet_name_isSet = !json[QString("newSheetName")].isNull() && m_new_sheet_name_isValid;

    m_source_sheet_id_isValid = ::OpenAPI::fromJsonValue(m_source_sheet_id, json[QString("sourceSheetId")]);
    m_source_sheet_id_isSet = !json[QString("sourceSheetId")].isNull() && m_source_sheet_id_isValid;
}

QString OAIDuplicateSheetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDuplicateSheetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_insert_sheet_index_isSet) {
        obj.insert(QString("insertSheetIndex"), ::OpenAPI::toJsonValue(m_insert_sheet_index));
    }
    if (m_new_sheet_id_isSet) {
        obj.insert(QString("newSheetId"), ::OpenAPI::toJsonValue(m_new_sheet_id));
    }
    if (m_new_sheet_name_isSet) {
        obj.insert(QString("newSheetName"), ::OpenAPI::toJsonValue(m_new_sheet_name));
    }
    if (m_source_sheet_id_isSet) {
        obj.insert(QString("sourceSheetId"), ::OpenAPI::toJsonValue(m_source_sheet_id));
    }
    return obj;
}

qint32 OAIDuplicateSheetRequest::getInsertSheetIndex() const {
    return m_insert_sheet_index;
}
void OAIDuplicateSheetRequest::setInsertSheetIndex(const qint32 &insert_sheet_index) {
    m_insert_sheet_index = insert_sheet_index;
    m_insert_sheet_index_isSet = true;
}

bool OAIDuplicateSheetRequest::is_insert_sheet_index_Set() const{
    return m_insert_sheet_index_isSet;
}

bool OAIDuplicateSheetRequest::is_insert_sheet_index_Valid() const{
    return m_insert_sheet_index_isValid;
}

qint32 OAIDuplicateSheetRequest::getNewSheetId() const {
    return m_new_sheet_id;
}
void OAIDuplicateSheetRequest::setNewSheetId(const qint32 &new_sheet_id) {
    m_new_sheet_id = new_sheet_id;
    m_new_sheet_id_isSet = true;
}

bool OAIDuplicateSheetRequest::is_new_sheet_id_Set() const{
    return m_new_sheet_id_isSet;
}

bool OAIDuplicateSheetRequest::is_new_sheet_id_Valid() const{
    return m_new_sheet_id_isValid;
}

QString OAIDuplicateSheetRequest::getNewSheetName() const {
    return m_new_sheet_name;
}
void OAIDuplicateSheetRequest::setNewSheetName(const QString &new_sheet_name) {
    m_new_sheet_name = new_sheet_name;
    m_new_sheet_name_isSet = true;
}

bool OAIDuplicateSheetRequest::is_new_sheet_name_Set() const{
    return m_new_sheet_name_isSet;
}

bool OAIDuplicateSheetRequest::is_new_sheet_name_Valid() const{
    return m_new_sheet_name_isValid;
}

qint32 OAIDuplicateSheetRequest::getSourceSheetId() const {
    return m_source_sheet_id;
}
void OAIDuplicateSheetRequest::setSourceSheetId(const qint32 &source_sheet_id) {
    m_source_sheet_id = source_sheet_id;
    m_source_sheet_id_isSet = true;
}

bool OAIDuplicateSheetRequest::is_source_sheet_id_Set() const{
    return m_source_sheet_id_isSet;
}

bool OAIDuplicateSheetRequest::is_source_sheet_id_Valid() const{
    return m_source_sheet_id_isValid;
}

bool OAIDuplicateSheetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_insert_sheet_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_sheet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_sheet_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_sheet_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDuplicateSheetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
