/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGridProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGridProperties::OAIGridProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGridProperties::OAIGridProperties() {
    this->initializeModel();
}

OAIGridProperties::~OAIGridProperties() {}

void OAIGridProperties::initializeModel() {

    m_column_count_isSet = false;
    m_column_count_isValid = false;

    m_column_group_control_after_isSet = false;
    m_column_group_control_after_isValid = false;

    m_frozen_column_count_isSet = false;
    m_frozen_column_count_isValid = false;

    m_frozen_row_count_isSet = false;
    m_frozen_row_count_isValid = false;

    m_hide_gridlines_isSet = false;
    m_hide_gridlines_isValid = false;

    m_row_count_isSet = false;
    m_row_count_isValid = false;

    m_row_group_control_after_isSet = false;
    m_row_group_control_after_isValid = false;
}

void OAIGridProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGridProperties::fromJsonObject(QJsonObject json) {

    m_column_count_isValid = ::OpenAPI::fromJsonValue(m_column_count, json[QString("columnCount")]);
    m_column_count_isSet = !json[QString("columnCount")].isNull() && m_column_count_isValid;

    m_column_group_control_after_isValid = ::OpenAPI::fromJsonValue(m_column_group_control_after, json[QString("columnGroupControlAfter")]);
    m_column_group_control_after_isSet = !json[QString("columnGroupControlAfter")].isNull() && m_column_group_control_after_isValid;

    m_frozen_column_count_isValid = ::OpenAPI::fromJsonValue(m_frozen_column_count, json[QString("frozenColumnCount")]);
    m_frozen_column_count_isSet = !json[QString("frozenColumnCount")].isNull() && m_frozen_column_count_isValid;

    m_frozen_row_count_isValid = ::OpenAPI::fromJsonValue(m_frozen_row_count, json[QString("frozenRowCount")]);
    m_frozen_row_count_isSet = !json[QString("frozenRowCount")].isNull() && m_frozen_row_count_isValid;

    m_hide_gridlines_isValid = ::OpenAPI::fromJsonValue(m_hide_gridlines, json[QString("hideGridlines")]);
    m_hide_gridlines_isSet = !json[QString("hideGridlines")].isNull() && m_hide_gridlines_isValid;

    m_row_count_isValid = ::OpenAPI::fromJsonValue(m_row_count, json[QString("rowCount")]);
    m_row_count_isSet = !json[QString("rowCount")].isNull() && m_row_count_isValid;

    m_row_group_control_after_isValid = ::OpenAPI::fromJsonValue(m_row_group_control_after, json[QString("rowGroupControlAfter")]);
    m_row_group_control_after_isSet = !json[QString("rowGroupControlAfter")].isNull() && m_row_group_control_after_isValid;
}

QString OAIGridProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGridProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_column_count_isSet) {
        obj.insert(QString("columnCount"), ::OpenAPI::toJsonValue(m_column_count));
    }
    if (m_column_group_control_after_isSet) {
        obj.insert(QString("columnGroupControlAfter"), ::OpenAPI::toJsonValue(m_column_group_control_after));
    }
    if (m_frozen_column_count_isSet) {
        obj.insert(QString("frozenColumnCount"), ::OpenAPI::toJsonValue(m_frozen_column_count));
    }
    if (m_frozen_row_count_isSet) {
        obj.insert(QString("frozenRowCount"), ::OpenAPI::toJsonValue(m_frozen_row_count));
    }
    if (m_hide_gridlines_isSet) {
        obj.insert(QString("hideGridlines"), ::OpenAPI::toJsonValue(m_hide_gridlines));
    }
    if (m_row_count_isSet) {
        obj.insert(QString("rowCount"), ::OpenAPI::toJsonValue(m_row_count));
    }
    if (m_row_group_control_after_isSet) {
        obj.insert(QString("rowGroupControlAfter"), ::OpenAPI::toJsonValue(m_row_group_control_after));
    }
    return obj;
}

qint32 OAIGridProperties::getColumnCount() const {
    return m_column_count;
}
void OAIGridProperties::setColumnCount(const qint32 &column_count) {
    m_column_count = column_count;
    m_column_count_isSet = true;
}

bool OAIGridProperties::is_column_count_Set() const{
    return m_column_count_isSet;
}

bool OAIGridProperties::is_column_count_Valid() const{
    return m_column_count_isValid;
}

bool OAIGridProperties::isColumnGroupControlAfter() const {
    return m_column_group_control_after;
}
void OAIGridProperties::setColumnGroupControlAfter(const bool &column_group_control_after) {
    m_column_group_control_after = column_group_control_after;
    m_column_group_control_after_isSet = true;
}

bool OAIGridProperties::is_column_group_control_after_Set() const{
    return m_column_group_control_after_isSet;
}

bool OAIGridProperties::is_column_group_control_after_Valid() const{
    return m_column_group_control_after_isValid;
}

qint32 OAIGridProperties::getFrozenColumnCount() const {
    return m_frozen_column_count;
}
void OAIGridProperties::setFrozenColumnCount(const qint32 &frozen_column_count) {
    m_frozen_column_count = frozen_column_count;
    m_frozen_column_count_isSet = true;
}

bool OAIGridProperties::is_frozen_column_count_Set() const{
    return m_frozen_column_count_isSet;
}

bool OAIGridProperties::is_frozen_column_count_Valid() const{
    return m_frozen_column_count_isValid;
}

qint32 OAIGridProperties::getFrozenRowCount() const {
    return m_frozen_row_count;
}
void OAIGridProperties::setFrozenRowCount(const qint32 &frozen_row_count) {
    m_frozen_row_count = frozen_row_count;
    m_frozen_row_count_isSet = true;
}

bool OAIGridProperties::is_frozen_row_count_Set() const{
    return m_frozen_row_count_isSet;
}

bool OAIGridProperties::is_frozen_row_count_Valid() const{
    return m_frozen_row_count_isValid;
}

bool OAIGridProperties::isHideGridlines() const {
    return m_hide_gridlines;
}
void OAIGridProperties::setHideGridlines(const bool &hide_gridlines) {
    m_hide_gridlines = hide_gridlines;
    m_hide_gridlines_isSet = true;
}

bool OAIGridProperties::is_hide_gridlines_Set() const{
    return m_hide_gridlines_isSet;
}

bool OAIGridProperties::is_hide_gridlines_Valid() const{
    return m_hide_gridlines_isValid;
}

qint32 OAIGridProperties::getRowCount() const {
    return m_row_count;
}
void OAIGridProperties::setRowCount(const qint32 &row_count) {
    m_row_count = row_count;
    m_row_count_isSet = true;
}

bool OAIGridProperties::is_row_count_Set() const{
    return m_row_count_isSet;
}

bool OAIGridProperties::is_row_count_Valid() const{
    return m_row_count_isValid;
}

bool OAIGridProperties::isRowGroupControlAfter() const {
    return m_row_group_control_after;
}
void OAIGridProperties::setRowGroupControlAfter(const bool &row_group_control_after) {
    m_row_group_control_after = row_group_control_after;
    m_row_group_control_after_isSet = true;
}

bool OAIGridProperties::is_row_group_control_after_Set() const{
    return m_row_group_control_after_isSet;
}

bool OAIGridProperties::is_row_group_control_after_Valid() const{
    return m_row_group_control_after_isValid;
}

bool OAIGridProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_group_control_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frozen_column_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frozen_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_gridlines_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_group_control_after_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGridProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
