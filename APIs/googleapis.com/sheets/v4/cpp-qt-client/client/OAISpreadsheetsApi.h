/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISpreadsheetsApi_H
#define OAI_OAISpreadsheetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppendValuesResponse.h"
#include "OAIBatchClearValuesByDataFilterRequest.h"
#include "OAIBatchClearValuesByDataFilterResponse.h"
#include "OAIBatchClearValuesRequest.h"
#include "OAIBatchClearValuesResponse.h"
#include "OAIBatchGetValuesByDataFilterRequest.h"
#include "OAIBatchGetValuesByDataFilterResponse.h"
#include "OAIBatchGetValuesResponse.h"
#include "OAIBatchUpdateSpreadsheetRequest.h"
#include "OAIBatchUpdateSpreadsheetResponse.h"
#include "OAIBatchUpdateValuesByDataFilterRequest.h"
#include "OAIBatchUpdateValuesByDataFilterResponse.h"
#include "OAIBatchUpdateValuesRequest.h"
#include "OAIBatchUpdateValuesResponse.h"
#include "OAIClearValuesResponse.h"
#include "OAICopySheetToAnotherSpreadsheetRequest.h"
#include "OAIDeveloperMetadata.h"
#include "OAIGetSpreadsheetByDataFilterRequest.h"
#include "OAIObject.h"
#include "OAISearchDeveloperMetadataRequest.h"
#include "OAISearchDeveloperMetadataResponse.h"
#include "OAISheetProperties.h"
#include "OAISpreadsheet.h"
#include "OAIUpdateValuesResponse.h"
#include "OAIValueRange.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISpreadsheetsApi : public QObject {
    Q_OBJECT

public:
    OAISpreadsheetsApi(const int timeOut = 0);
    ~OAISpreadsheetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  spreadsheet_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_batch_update_spreadsheet_request OAIBatchUpdateSpreadsheetRequest [optional]
    */
    virtual void sheets_spreadsheets_batchUpdate(const QString &spreadsheet_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBatchUpdateSpreadsheetRequest> &oai_batch_update_spreadsheet_request = ::OpenAPI::OptionalParam<OAIBatchUpdateSpreadsheetRequest>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_spreadsheet OAISpreadsheet [optional]
    */
    virtual void sheets_spreadsheets_create(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISpreadsheet> &oai_spreadsheet = ::OpenAPI::OptionalParam<OAISpreadsheet>());

    /**
    * @param[in]  spreadsheet_id QString [required]
    * @param[in]  metadata_id qint32 [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void sheets_spreadsheets_developerMetadata_get(const QString &spreadsheet_id, const qint32 &metadata_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  spreadsheet_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_search_developer_metadata_request OAISearchDeveloperMetadataRequest [optional]
    */
    virtual void sheets_spreadsheets_developerMetadata_search(const QString &spreadsheet_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISearchDeveloperMetadataRequest> &oai_search_developer_metadata_request = ::OpenAPI::OptionalParam<OAISearchDeveloperMetadataRequest>());

    /**
    * @param[in]  spreadsheet_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  include_grid_data bool [optional]
    * @param[in]  ranges QList<QString> [optional]
    */
    virtual void sheets_spreadsheets_get(const QString &spreadsheet_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_grid_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &ranges = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  spreadsheet_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_get_spreadsheet_by_data_filter_request OAIGetSpreadsheetByDataFilterRequest [optional]
    */
    virtual void sheets_spreadsheets_getByDataFilter(const QString &spreadsheet_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetSpreadsheetByDataFilterRequest> &oai_get_spreadsheet_by_data_filter_request = ::OpenAPI::OptionalParam<OAIGetSpreadsheetByDataFilterRequest>());

    /**
    * @param[in]  spreadsheet_id QString [required]
    * @param[in]  sheet_id qint32 [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_copy_sheet_to_another_spreadsheet_request OAICopySheetToAnotherSpreadsheetRequest [optional]
    */
    virtual void sheets_spreadsheets_sheets_copyTo(const QString &spreadsheet_id, const qint32 &sheet_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICopySheetToAnotherSpreadsheetRequest> &oai_copy_sheet_to_another_spreadsheet_request = ::OpenAPI::OptionalParam<OAICopySheetToAnotherSpreadsheetRequest>());

    /**
    * @param[in]  spreadsheet_id QString [required]
    * @param[in]  range QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  include_values_in_response bool [optional]
    * @param[in]  insert_data_option QString [optional]
    * @param[in]  response_date_time_render_option QString [optional]
    * @param[in]  response_value_render_option QString [optional]
    * @param[in]  value_input_option QString [optional]
    * @param[in]  oai_value_range OAIValueRange [optional]
    */
    virtual void sheets_spreadsheets_values_append(const QString &spreadsheet_id, const QString &range, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_values_in_response = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &insert_data_option = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_date_time_render_option = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_value_render_option = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &value_input_option = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIValueRange> &oai_value_range = ::OpenAPI::OptionalParam<OAIValueRange>());

    /**
    * @param[in]  spreadsheet_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_batch_clear_values_request OAIBatchClearValuesRequest [optional]
    */
    virtual void sheets_spreadsheets_values_batchClear(const QString &spreadsheet_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBatchClearValuesRequest> &oai_batch_clear_values_request = ::OpenAPI::OptionalParam<OAIBatchClearValuesRequest>());

    /**
    * @param[in]  spreadsheet_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_batch_clear_values_by_data_filter_request OAIBatchClearValuesByDataFilterRequest [optional]
    */
    virtual void sheets_spreadsheets_values_batchClearByDataFilter(const QString &spreadsheet_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBatchClearValuesByDataFilterRequest> &oai_batch_clear_values_by_data_filter_request = ::OpenAPI::OptionalParam<OAIBatchClearValuesByDataFilterRequest>());

    /**
    * @param[in]  spreadsheet_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  date_time_render_option QString [optional]
    * @param[in]  major_dimension QString [optional]
    * @param[in]  ranges QList<QString> [optional]
    * @param[in]  value_render_option QString [optional]
    */
    virtual void sheets_spreadsheets_values_batchGet(const QString &spreadsheet_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_time_render_option = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &major_dimension = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &ranges = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &value_render_option = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  spreadsheet_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_batch_get_values_by_data_filter_request OAIBatchGetValuesByDataFilterRequest [optional]
    */
    virtual void sheets_spreadsheets_values_batchGetByDataFilter(const QString &spreadsheet_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBatchGetValuesByDataFilterRequest> &oai_batch_get_values_by_data_filter_request = ::OpenAPI::OptionalParam<OAIBatchGetValuesByDataFilterRequest>());

    /**
    * @param[in]  spreadsheet_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_batch_update_values_request OAIBatchUpdateValuesRequest [optional]
    */
    virtual void sheets_spreadsheets_values_batchUpdate(const QString &spreadsheet_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBatchUpdateValuesRequest> &oai_batch_update_values_request = ::OpenAPI::OptionalParam<OAIBatchUpdateValuesRequest>());

    /**
    * @param[in]  spreadsheet_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_batch_update_values_by_data_filter_request OAIBatchUpdateValuesByDataFilterRequest [optional]
    */
    virtual void sheets_spreadsheets_values_batchUpdateByDataFilter(const QString &spreadsheet_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBatchUpdateValuesByDataFilterRequest> &oai_batch_update_values_by_data_filter_request = ::OpenAPI::OptionalParam<OAIBatchUpdateValuesByDataFilterRequest>());

    /**
    * @param[in]  spreadsheet_id QString [required]
    * @param[in]  range QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void sheets_spreadsheets_values_clear(const QString &spreadsheet_id, const QString &range, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  spreadsheet_id QString [required]
    * @param[in]  range QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  date_time_render_option QString [optional]
    * @param[in]  major_dimension QString [optional]
    * @param[in]  value_render_option QString [optional]
    */
    virtual void sheets_spreadsheets_values_get(const QString &spreadsheet_id, const QString &range, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_time_render_option = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &major_dimension = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &value_render_option = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  spreadsheet_id QString [required]
    * @param[in]  range QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  include_values_in_response bool [optional]
    * @param[in]  response_date_time_render_option QString [optional]
    * @param[in]  response_value_render_option QString [optional]
    * @param[in]  value_input_option QString [optional]
    * @param[in]  oai_value_range OAIValueRange [optional]
    */
    virtual void sheets_spreadsheets_values_update(const QString &spreadsheet_id, const QString &range, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_values_in_response = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &response_date_time_render_option = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_value_render_option = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &value_input_option = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIValueRange> &oai_value_range = ::OpenAPI::OptionalParam<OAIValueRange>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void sheets_spreadsheets_batchUpdateCallback(OAIHttpRequestWorker *worker);
    void sheets_spreadsheets_createCallback(OAIHttpRequestWorker *worker);
    void sheets_spreadsheets_developerMetadata_getCallback(OAIHttpRequestWorker *worker);
    void sheets_spreadsheets_developerMetadata_searchCallback(OAIHttpRequestWorker *worker);
    void sheets_spreadsheets_getCallback(OAIHttpRequestWorker *worker);
    void sheets_spreadsheets_getByDataFilterCallback(OAIHttpRequestWorker *worker);
    void sheets_spreadsheets_sheets_copyToCallback(OAIHttpRequestWorker *worker);
    void sheets_spreadsheets_values_appendCallback(OAIHttpRequestWorker *worker);
    void sheets_spreadsheets_values_batchClearCallback(OAIHttpRequestWorker *worker);
    void sheets_spreadsheets_values_batchClearByDataFilterCallback(OAIHttpRequestWorker *worker);
    void sheets_spreadsheets_values_batchGetCallback(OAIHttpRequestWorker *worker);
    void sheets_spreadsheets_values_batchGetByDataFilterCallback(OAIHttpRequestWorker *worker);
    void sheets_spreadsheets_values_batchUpdateCallback(OAIHttpRequestWorker *worker);
    void sheets_spreadsheets_values_batchUpdateByDataFilterCallback(OAIHttpRequestWorker *worker);
    void sheets_spreadsheets_values_clearCallback(OAIHttpRequestWorker *worker);
    void sheets_spreadsheets_values_getCallback(OAIHttpRequestWorker *worker);
    void sheets_spreadsheets_values_updateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void sheets_spreadsheets_batchUpdateSignal(OAIBatchUpdateSpreadsheetResponse summary);
    void sheets_spreadsheets_createSignal(OAISpreadsheet summary);
    void sheets_spreadsheets_developerMetadata_getSignal(OAIDeveloperMetadata summary);
    void sheets_spreadsheets_developerMetadata_searchSignal(OAISearchDeveloperMetadataResponse summary);
    void sheets_spreadsheets_getSignal(OAISpreadsheet summary);
    void sheets_spreadsheets_getByDataFilterSignal(OAISpreadsheet summary);
    void sheets_spreadsheets_sheets_copyToSignal(OAISheetProperties summary);
    void sheets_spreadsheets_values_appendSignal(OAIAppendValuesResponse summary);
    void sheets_spreadsheets_values_batchClearSignal(OAIBatchClearValuesResponse summary);
    void sheets_spreadsheets_values_batchClearByDataFilterSignal(OAIBatchClearValuesByDataFilterResponse summary);
    void sheets_spreadsheets_values_batchGetSignal(OAIBatchGetValuesResponse summary);
    void sheets_spreadsheets_values_batchGetByDataFilterSignal(OAIBatchGetValuesByDataFilterResponse summary);
    void sheets_spreadsheets_values_batchUpdateSignal(OAIBatchUpdateValuesResponse summary);
    void sheets_spreadsheets_values_batchUpdateByDataFilterSignal(OAIBatchUpdateValuesByDataFilterResponse summary);
    void sheets_spreadsheets_values_clearSignal(OAIClearValuesResponse summary);
    void sheets_spreadsheets_values_getSignal(OAIValueRange summary);
    void sheets_spreadsheets_values_updateSignal(OAIUpdateValuesResponse summary);


    void sheets_spreadsheets_batchUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBatchUpdateSpreadsheetResponse summary);
    void sheets_spreadsheets_createSignalFull(OAIHttpRequestWorker *worker, OAISpreadsheet summary);
    void sheets_spreadsheets_developerMetadata_getSignalFull(OAIHttpRequestWorker *worker, OAIDeveloperMetadata summary);
    void sheets_spreadsheets_developerMetadata_searchSignalFull(OAIHttpRequestWorker *worker, OAISearchDeveloperMetadataResponse summary);
    void sheets_spreadsheets_getSignalFull(OAIHttpRequestWorker *worker, OAISpreadsheet summary);
    void sheets_spreadsheets_getByDataFilterSignalFull(OAIHttpRequestWorker *worker, OAISpreadsheet summary);
    void sheets_spreadsheets_sheets_copyToSignalFull(OAIHttpRequestWorker *worker, OAISheetProperties summary);
    void sheets_spreadsheets_values_appendSignalFull(OAIHttpRequestWorker *worker, OAIAppendValuesResponse summary);
    void sheets_spreadsheets_values_batchClearSignalFull(OAIHttpRequestWorker *worker, OAIBatchClearValuesResponse summary);
    void sheets_spreadsheets_values_batchClearByDataFilterSignalFull(OAIHttpRequestWorker *worker, OAIBatchClearValuesByDataFilterResponse summary);
    void sheets_spreadsheets_values_batchGetSignalFull(OAIHttpRequestWorker *worker, OAIBatchGetValuesResponse summary);
    void sheets_spreadsheets_values_batchGetByDataFilterSignalFull(OAIHttpRequestWorker *worker, OAIBatchGetValuesByDataFilterResponse summary);
    void sheets_spreadsheets_values_batchUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBatchUpdateValuesResponse summary);
    void sheets_spreadsheets_values_batchUpdateByDataFilterSignalFull(OAIHttpRequestWorker *worker, OAIBatchUpdateValuesByDataFilterResponse summary);
    void sheets_spreadsheets_values_clearSignalFull(OAIHttpRequestWorker *worker, OAIClearValuesResponse summary);
    void sheets_spreadsheets_values_getSignalFull(OAIHttpRequestWorker *worker, OAIValueRange summary);
    void sheets_spreadsheets_values_updateSignalFull(OAIHttpRequestWorker *worker, OAIUpdateValuesResponse summary);

    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_batchUpdateSignalError() instead")
    void sheets_spreadsheets_batchUpdateSignalE(OAIBatchUpdateSpreadsheetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_batchUpdateSignalError(OAIBatchUpdateSpreadsheetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_createSignalError() instead")
    void sheets_spreadsheets_createSignalE(OAISpreadsheet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_createSignalError(OAISpreadsheet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_developerMetadata_getSignalError() instead")
    void sheets_spreadsheets_developerMetadata_getSignalE(OAIDeveloperMetadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_developerMetadata_getSignalError(OAIDeveloperMetadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_developerMetadata_searchSignalError() instead")
    void sheets_spreadsheets_developerMetadata_searchSignalE(OAISearchDeveloperMetadataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_developerMetadata_searchSignalError(OAISearchDeveloperMetadataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_getSignalError() instead")
    void sheets_spreadsheets_getSignalE(OAISpreadsheet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_getSignalError(OAISpreadsheet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_getByDataFilterSignalError() instead")
    void sheets_spreadsheets_getByDataFilterSignalE(OAISpreadsheet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_getByDataFilterSignalError(OAISpreadsheet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_sheets_copyToSignalError() instead")
    void sheets_spreadsheets_sheets_copyToSignalE(OAISheetProperties summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_sheets_copyToSignalError(OAISheetProperties summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_values_appendSignalError() instead")
    void sheets_spreadsheets_values_appendSignalE(OAIAppendValuesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_values_appendSignalError(OAIAppendValuesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_values_batchClearSignalError() instead")
    void sheets_spreadsheets_values_batchClearSignalE(OAIBatchClearValuesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_values_batchClearSignalError(OAIBatchClearValuesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_values_batchClearByDataFilterSignalError() instead")
    void sheets_spreadsheets_values_batchClearByDataFilterSignalE(OAIBatchClearValuesByDataFilterResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_values_batchClearByDataFilterSignalError(OAIBatchClearValuesByDataFilterResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_values_batchGetSignalError() instead")
    void sheets_spreadsheets_values_batchGetSignalE(OAIBatchGetValuesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_values_batchGetSignalError(OAIBatchGetValuesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_values_batchGetByDataFilterSignalError() instead")
    void sheets_spreadsheets_values_batchGetByDataFilterSignalE(OAIBatchGetValuesByDataFilterResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_values_batchGetByDataFilterSignalError(OAIBatchGetValuesByDataFilterResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_values_batchUpdateSignalError() instead")
    void sheets_spreadsheets_values_batchUpdateSignalE(OAIBatchUpdateValuesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_values_batchUpdateSignalError(OAIBatchUpdateValuesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_values_batchUpdateByDataFilterSignalError() instead")
    void sheets_spreadsheets_values_batchUpdateByDataFilterSignalE(OAIBatchUpdateValuesByDataFilterResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_values_batchUpdateByDataFilterSignalError(OAIBatchUpdateValuesByDataFilterResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_values_clearSignalError() instead")
    void sheets_spreadsheets_values_clearSignalE(OAIClearValuesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_values_clearSignalError(OAIClearValuesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_values_getSignalError() instead")
    void sheets_spreadsheets_values_getSignalE(OAIValueRange summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_values_getSignalError(OAIValueRange summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_values_updateSignalError() instead")
    void sheets_spreadsheets_values_updateSignalE(OAIUpdateValuesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_values_updateSignalError(OAIUpdateValuesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_batchUpdateSignalErrorFull() instead")
    void sheets_spreadsheets_batchUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_batchUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_createSignalErrorFull() instead")
    void sheets_spreadsheets_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_developerMetadata_getSignalErrorFull() instead")
    void sheets_spreadsheets_developerMetadata_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_developerMetadata_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_developerMetadata_searchSignalErrorFull() instead")
    void sheets_spreadsheets_developerMetadata_searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_developerMetadata_searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_getSignalErrorFull() instead")
    void sheets_spreadsheets_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_getByDataFilterSignalErrorFull() instead")
    void sheets_spreadsheets_getByDataFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_getByDataFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_sheets_copyToSignalErrorFull() instead")
    void sheets_spreadsheets_sheets_copyToSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_sheets_copyToSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_values_appendSignalErrorFull() instead")
    void sheets_spreadsheets_values_appendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_values_appendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_values_batchClearSignalErrorFull() instead")
    void sheets_spreadsheets_values_batchClearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_values_batchClearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_values_batchClearByDataFilterSignalErrorFull() instead")
    void sheets_spreadsheets_values_batchClearByDataFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_values_batchClearByDataFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_values_batchGetSignalErrorFull() instead")
    void sheets_spreadsheets_values_batchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_values_batchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_values_batchGetByDataFilterSignalErrorFull() instead")
    void sheets_spreadsheets_values_batchGetByDataFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_values_batchGetByDataFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_values_batchUpdateSignalErrorFull() instead")
    void sheets_spreadsheets_values_batchUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_values_batchUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_values_batchUpdateByDataFilterSignalErrorFull() instead")
    void sheets_spreadsheets_values_batchUpdateByDataFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_values_batchUpdateByDataFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_values_clearSignalErrorFull() instead")
    void sheets_spreadsheets_values_clearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_values_clearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_values_getSignalErrorFull() instead")
    void sheets_spreadsheets_values_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_values_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sheets_spreadsheets_values_updateSignalErrorFull() instead")
    void sheets_spreadsheets_values_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sheets_spreadsheets_values_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
