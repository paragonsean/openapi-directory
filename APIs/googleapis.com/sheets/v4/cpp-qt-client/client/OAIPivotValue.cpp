/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotValue::OAIPivotValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotValue::OAIPivotValue() {
    this->initializeModel();
}

OAIPivotValue::~OAIPivotValue() {}

void OAIPivotValue::initializeModel() {

    m_calculated_display_type_isSet = false;
    m_calculated_display_type_isValid = false;

    m_data_source_column_reference_isSet = false;
    m_data_source_column_reference_isValid = false;

    m_formula_isSet = false;
    m_formula_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_source_column_offset_isSet = false;
    m_source_column_offset_isValid = false;

    m_summarize_function_isSet = false;
    m_summarize_function_isValid = false;
}

void OAIPivotValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotValue::fromJsonObject(QJsonObject json) {

    m_calculated_display_type_isValid = ::OpenAPI::fromJsonValue(m_calculated_display_type, json[QString("calculatedDisplayType")]);
    m_calculated_display_type_isSet = !json[QString("calculatedDisplayType")].isNull() && m_calculated_display_type_isValid;

    m_data_source_column_reference_isValid = ::OpenAPI::fromJsonValue(m_data_source_column_reference, json[QString("dataSourceColumnReference")]);
    m_data_source_column_reference_isSet = !json[QString("dataSourceColumnReference")].isNull() && m_data_source_column_reference_isValid;

    m_formula_isValid = ::OpenAPI::fromJsonValue(m_formula, json[QString("formula")]);
    m_formula_isSet = !json[QString("formula")].isNull() && m_formula_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_source_column_offset_isValid = ::OpenAPI::fromJsonValue(m_source_column_offset, json[QString("sourceColumnOffset")]);
    m_source_column_offset_isSet = !json[QString("sourceColumnOffset")].isNull() && m_source_column_offset_isValid;

    m_summarize_function_isValid = ::OpenAPI::fromJsonValue(m_summarize_function, json[QString("summarizeFunction")]);
    m_summarize_function_isSet = !json[QString("summarizeFunction")].isNull() && m_summarize_function_isValid;
}

QString OAIPivotValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotValue::asJsonObject() const {
    QJsonObject obj;
    if (m_calculated_display_type_isSet) {
        obj.insert(QString("calculatedDisplayType"), ::OpenAPI::toJsonValue(m_calculated_display_type));
    }
    if (m_data_source_column_reference.isSet()) {
        obj.insert(QString("dataSourceColumnReference"), ::OpenAPI::toJsonValue(m_data_source_column_reference));
    }
    if (m_formula_isSet) {
        obj.insert(QString("formula"), ::OpenAPI::toJsonValue(m_formula));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_source_column_offset_isSet) {
        obj.insert(QString("sourceColumnOffset"), ::OpenAPI::toJsonValue(m_source_column_offset));
    }
    if (m_summarize_function_isSet) {
        obj.insert(QString("summarizeFunction"), ::OpenAPI::toJsonValue(m_summarize_function));
    }
    return obj;
}

QString OAIPivotValue::getCalculatedDisplayType() const {
    return m_calculated_display_type;
}
void OAIPivotValue::setCalculatedDisplayType(const QString &calculated_display_type) {
    m_calculated_display_type = calculated_display_type;
    m_calculated_display_type_isSet = true;
}

bool OAIPivotValue::is_calculated_display_type_Set() const{
    return m_calculated_display_type_isSet;
}

bool OAIPivotValue::is_calculated_display_type_Valid() const{
    return m_calculated_display_type_isValid;
}

OAIDataSourceColumnReference OAIPivotValue::getDataSourceColumnReference() const {
    return m_data_source_column_reference;
}
void OAIPivotValue::setDataSourceColumnReference(const OAIDataSourceColumnReference &data_source_column_reference) {
    m_data_source_column_reference = data_source_column_reference;
    m_data_source_column_reference_isSet = true;
}

bool OAIPivotValue::is_data_source_column_reference_Set() const{
    return m_data_source_column_reference_isSet;
}

bool OAIPivotValue::is_data_source_column_reference_Valid() const{
    return m_data_source_column_reference_isValid;
}

QString OAIPivotValue::getFormula() const {
    return m_formula;
}
void OAIPivotValue::setFormula(const QString &formula) {
    m_formula = formula;
    m_formula_isSet = true;
}

bool OAIPivotValue::is_formula_Set() const{
    return m_formula_isSet;
}

bool OAIPivotValue::is_formula_Valid() const{
    return m_formula_isValid;
}

QString OAIPivotValue::getName() const {
    return m_name;
}
void OAIPivotValue::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPivotValue::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPivotValue::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPivotValue::getSourceColumnOffset() const {
    return m_source_column_offset;
}
void OAIPivotValue::setSourceColumnOffset(const qint32 &source_column_offset) {
    m_source_column_offset = source_column_offset;
    m_source_column_offset_isSet = true;
}

bool OAIPivotValue::is_source_column_offset_Set() const{
    return m_source_column_offset_isSet;
}

bool OAIPivotValue::is_source_column_offset_Valid() const{
    return m_source_column_offset_isValid;
}

QString OAIPivotValue::getSummarizeFunction() const {
    return m_summarize_function;
}
void OAIPivotValue::setSummarizeFunction(const QString &summarize_function) {
    m_summarize_function = summarize_function;
    m_summarize_function_isSet = true;
}

bool OAIPivotValue::is_summarize_function_Set() const{
    return m_summarize_function_isSet;
}

bool OAIPivotValue::is_summarize_function_Valid() const{
    return m_summarize_function_isValid;
}

bool OAIPivotValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calculated_display_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_column_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_formula_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_column_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summarize_function_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
