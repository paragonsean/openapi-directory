/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGridRange.h
 *
 * A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if &#x60;\&quot;Sheet1\&quot;&#x60; is sheet ID 123456, then: &#x60;Sheet1!A1:A1 &#x3D;&#x3D; sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1&#x60; &#x60;Sheet1!A3:B4 &#x3D;&#x3D; sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2&#x60; &#x60;Sheet1!A:B &#x3D;&#x3D; sheet_id: 123456, start_column_index: 0, end_column_index: 2&#x60; &#x60;Sheet1!A5:B &#x3D;&#x3D; sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2&#x60; &#x60;Sheet1 &#x3D;&#x3D; sheet_id: 123456&#x60; The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as &#x60;#REF!&#x60;.
 */

#ifndef OAIGridRange_H
#define OAIGridRange_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGridRange : public OAIObject {
public:
    OAIGridRange();
    OAIGridRange(QString json);
    ~OAIGridRange() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getEndColumnIndex() const;
    void setEndColumnIndex(const qint32 &end_column_index);
    bool is_end_column_index_Set() const;
    bool is_end_column_index_Valid() const;

    qint32 getEndRowIndex() const;
    void setEndRowIndex(const qint32 &end_row_index);
    bool is_end_row_index_Set() const;
    bool is_end_row_index_Valid() const;

    qint32 getSheetId() const;
    void setSheetId(const qint32 &sheet_id);
    bool is_sheet_id_Set() const;
    bool is_sheet_id_Valid() const;

    qint32 getStartColumnIndex() const;
    void setStartColumnIndex(const qint32 &start_column_index);
    bool is_start_column_index_Set() const;
    bool is_start_column_index_Valid() const;

    qint32 getStartRowIndex() const;
    void setStartRowIndex(const qint32 &start_row_index);
    bool is_start_row_index_Set() const;
    bool is_start_row_index_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_end_column_index;
    bool m_end_column_index_isSet;
    bool m_end_column_index_isValid;

    qint32 m_end_row_index;
    bool m_end_row_index_isSet;
    bool m_end_row_index_isValid;

    qint32 m_sheet_id;
    bool m_sheet_id_isSet;
    bool m_sheet_id_isValid;

    qint32 m_start_column_index;
    bool m_start_column_index_isSet;
    bool m_start_column_index_isValid;

    qint32 m_start_row_index;
    bool m_start_row_index_isSet;
    bool m_start_row_index_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGridRange)

#endif // OAIGridRange_H
