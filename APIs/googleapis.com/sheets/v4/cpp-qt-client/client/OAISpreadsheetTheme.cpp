/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpreadsheetTheme.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpreadsheetTheme::OAISpreadsheetTheme(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpreadsheetTheme::OAISpreadsheetTheme() {
    this->initializeModel();
}

OAISpreadsheetTheme::~OAISpreadsheetTheme() {}

void OAISpreadsheetTheme::initializeModel() {

    m_primary_font_family_isSet = false;
    m_primary_font_family_isValid = false;

    m_theme_colors_isSet = false;
    m_theme_colors_isValid = false;
}

void OAISpreadsheetTheme::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpreadsheetTheme::fromJsonObject(QJsonObject json) {

    m_primary_font_family_isValid = ::OpenAPI::fromJsonValue(m_primary_font_family, json[QString("primaryFontFamily")]);
    m_primary_font_family_isSet = !json[QString("primaryFontFamily")].isNull() && m_primary_font_family_isValid;

    m_theme_colors_isValid = ::OpenAPI::fromJsonValue(m_theme_colors, json[QString("themeColors")]);
    m_theme_colors_isSet = !json[QString("themeColors")].isNull() && m_theme_colors_isValid;
}

QString OAISpreadsheetTheme::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpreadsheetTheme::asJsonObject() const {
    QJsonObject obj;
    if (m_primary_font_family_isSet) {
        obj.insert(QString("primaryFontFamily"), ::OpenAPI::toJsonValue(m_primary_font_family));
    }
    if (m_theme_colors.size() > 0) {
        obj.insert(QString("themeColors"), ::OpenAPI::toJsonValue(m_theme_colors));
    }
    return obj;
}

QString OAISpreadsheetTheme::getPrimaryFontFamily() const {
    return m_primary_font_family;
}
void OAISpreadsheetTheme::setPrimaryFontFamily(const QString &primary_font_family) {
    m_primary_font_family = primary_font_family;
    m_primary_font_family_isSet = true;
}

bool OAISpreadsheetTheme::is_primary_font_family_Set() const{
    return m_primary_font_family_isSet;
}

bool OAISpreadsheetTheme::is_primary_font_family_Valid() const{
    return m_primary_font_family_isValid;
}

QList<OAIThemeColorPair> OAISpreadsheetTheme::getThemeColors() const {
    return m_theme_colors;
}
void OAISpreadsheetTheme::setThemeColors(const QList<OAIThemeColorPair> &theme_colors) {
    m_theme_colors = theme_colors;
    m_theme_colors_isSet = true;
}

bool OAISpreadsheetTheme::is_theme_colors_Set() const{
    return m_theme_colors_isSet;
}

bool OAISpreadsheetTheme::is_theme_colors_Valid() const{
    return m_theme_colors_isValid;
}

bool OAISpreadsheetTheme::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_primary_font_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpreadsheetTheme::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
