/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeveloperMetadataLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeveloperMetadataLocation::OAIDeveloperMetadataLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeveloperMetadataLocation::OAIDeveloperMetadataLocation() {
    this->initializeModel();
}

OAIDeveloperMetadataLocation::~OAIDeveloperMetadataLocation() {}

void OAIDeveloperMetadataLocation::initializeModel() {

    m_dimension_range_isSet = false;
    m_dimension_range_isValid = false;

    m_location_type_isSet = false;
    m_location_type_isValid = false;

    m_sheet_id_isSet = false;
    m_sheet_id_isValid = false;

    m_spreadsheet_isSet = false;
    m_spreadsheet_isValid = false;
}

void OAIDeveloperMetadataLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeveloperMetadataLocation::fromJsonObject(QJsonObject json) {

    m_dimension_range_isValid = ::OpenAPI::fromJsonValue(m_dimension_range, json[QString("dimensionRange")]);
    m_dimension_range_isSet = !json[QString("dimensionRange")].isNull() && m_dimension_range_isValid;

    m_location_type_isValid = ::OpenAPI::fromJsonValue(m_location_type, json[QString("locationType")]);
    m_location_type_isSet = !json[QString("locationType")].isNull() && m_location_type_isValid;

    m_sheet_id_isValid = ::OpenAPI::fromJsonValue(m_sheet_id, json[QString("sheetId")]);
    m_sheet_id_isSet = !json[QString("sheetId")].isNull() && m_sheet_id_isValid;

    m_spreadsheet_isValid = ::OpenAPI::fromJsonValue(m_spreadsheet, json[QString("spreadsheet")]);
    m_spreadsheet_isSet = !json[QString("spreadsheet")].isNull() && m_spreadsheet_isValid;
}

QString OAIDeveloperMetadataLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeveloperMetadataLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_range.isSet()) {
        obj.insert(QString("dimensionRange"), ::OpenAPI::toJsonValue(m_dimension_range));
    }
    if (m_location_type_isSet) {
        obj.insert(QString("locationType"), ::OpenAPI::toJsonValue(m_location_type));
    }
    if (m_sheet_id_isSet) {
        obj.insert(QString("sheetId"), ::OpenAPI::toJsonValue(m_sheet_id));
    }
    if (m_spreadsheet_isSet) {
        obj.insert(QString("spreadsheet"), ::OpenAPI::toJsonValue(m_spreadsheet));
    }
    return obj;
}

OAIDimensionRange OAIDeveloperMetadataLocation::getDimensionRange() const {
    return m_dimension_range;
}
void OAIDeveloperMetadataLocation::setDimensionRange(const OAIDimensionRange &dimension_range) {
    m_dimension_range = dimension_range;
    m_dimension_range_isSet = true;
}

bool OAIDeveloperMetadataLocation::is_dimension_range_Set() const{
    return m_dimension_range_isSet;
}

bool OAIDeveloperMetadataLocation::is_dimension_range_Valid() const{
    return m_dimension_range_isValid;
}

QString OAIDeveloperMetadataLocation::getLocationType() const {
    return m_location_type;
}
void OAIDeveloperMetadataLocation::setLocationType(const QString &location_type) {
    m_location_type = location_type;
    m_location_type_isSet = true;
}

bool OAIDeveloperMetadataLocation::is_location_type_Set() const{
    return m_location_type_isSet;
}

bool OAIDeveloperMetadataLocation::is_location_type_Valid() const{
    return m_location_type_isValid;
}

qint32 OAIDeveloperMetadataLocation::getSheetId() const {
    return m_sheet_id;
}
void OAIDeveloperMetadataLocation::setSheetId(const qint32 &sheet_id) {
    m_sheet_id = sheet_id;
    m_sheet_id_isSet = true;
}

bool OAIDeveloperMetadataLocation::is_sheet_id_Set() const{
    return m_sheet_id_isSet;
}

bool OAIDeveloperMetadataLocation::is_sheet_id_Valid() const{
    return m_sheet_id_isValid;
}

bool OAIDeveloperMetadataLocation::isSpreadsheet() const {
    return m_spreadsheet;
}
void OAIDeveloperMetadataLocation::setSpreadsheet(const bool &spreadsheet) {
    m_spreadsheet = spreadsheet;
    m_spreadsheet_isSet = true;
}

bool OAIDeveloperMetadataLocation::is_spreadsheet_Set() const{
    return m_spreadsheet_isSet;
}

bool OAIDeveloperMetadataLocation::is_spreadsheet_Valid() const{
    return m_spreadsheet_isValid;
}

bool OAIDeveloperMetadataLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spreadsheet_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeveloperMetadataLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
