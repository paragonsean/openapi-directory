/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScorecardChartSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScorecardChartSpec::OAIScorecardChartSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScorecardChartSpec::OAIScorecardChartSpec() {
    this->initializeModel();
}

OAIScorecardChartSpec::~OAIScorecardChartSpec() {}

void OAIScorecardChartSpec::initializeModel() {

    m_aggregate_type_isSet = false;
    m_aggregate_type_isValid = false;

    m_baseline_value_data_isSet = false;
    m_baseline_value_data_isValid = false;

    m_baseline_value_format_isSet = false;
    m_baseline_value_format_isValid = false;

    m_custom_format_options_isSet = false;
    m_custom_format_options_isValid = false;

    m_key_value_data_isSet = false;
    m_key_value_data_isValid = false;

    m_key_value_format_isSet = false;
    m_key_value_format_isValid = false;

    m_number_format_source_isSet = false;
    m_number_format_source_isValid = false;

    m_scale_factor_isSet = false;
    m_scale_factor_isValid = false;
}

void OAIScorecardChartSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScorecardChartSpec::fromJsonObject(QJsonObject json) {

    m_aggregate_type_isValid = ::OpenAPI::fromJsonValue(m_aggregate_type, json[QString("aggregateType")]);
    m_aggregate_type_isSet = !json[QString("aggregateType")].isNull() && m_aggregate_type_isValid;

    m_baseline_value_data_isValid = ::OpenAPI::fromJsonValue(m_baseline_value_data, json[QString("baselineValueData")]);
    m_baseline_value_data_isSet = !json[QString("baselineValueData")].isNull() && m_baseline_value_data_isValid;

    m_baseline_value_format_isValid = ::OpenAPI::fromJsonValue(m_baseline_value_format, json[QString("baselineValueFormat")]);
    m_baseline_value_format_isSet = !json[QString("baselineValueFormat")].isNull() && m_baseline_value_format_isValid;

    m_custom_format_options_isValid = ::OpenAPI::fromJsonValue(m_custom_format_options, json[QString("customFormatOptions")]);
    m_custom_format_options_isSet = !json[QString("customFormatOptions")].isNull() && m_custom_format_options_isValid;

    m_key_value_data_isValid = ::OpenAPI::fromJsonValue(m_key_value_data, json[QString("keyValueData")]);
    m_key_value_data_isSet = !json[QString("keyValueData")].isNull() && m_key_value_data_isValid;

    m_key_value_format_isValid = ::OpenAPI::fromJsonValue(m_key_value_format, json[QString("keyValueFormat")]);
    m_key_value_format_isSet = !json[QString("keyValueFormat")].isNull() && m_key_value_format_isValid;

    m_number_format_source_isValid = ::OpenAPI::fromJsonValue(m_number_format_source, json[QString("numberFormatSource")]);
    m_number_format_source_isSet = !json[QString("numberFormatSource")].isNull() && m_number_format_source_isValid;

    m_scale_factor_isValid = ::OpenAPI::fromJsonValue(m_scale_factor, json[QString("scaleFactor")]);
    m_scale_factor_isSet = !json[QString("scaleFactor")].isNull() && m_scale_factor_isValid;
}

QString OAIScorecardChartSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScorecardChartSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregate_type_isSet) {
        obj.insert(QString("aggregateType"), ::OpenAPI::toJsonValue(m_aggregate_type));
    }
    if (m_baseline_value_data.isSet()) {
        obj.insert(QString("baselineValueData"), ::OpenAPI::toJsonValue(m_baseline_value_data));
    }
    if (m_baseline_value_format.isSet()) {
        obj.insert(QString("baselineValueFormat"), ::OpenAPI::toJsonValue(m_baseline_value_format));
    }
    if (m_custom_format_options.isSet()) {
        obj.insert(QString("customFormatOptions"), ::OpenAPI::toJsonValue(m_custom_format_options));
    }
    if (m_key_value_data.isSet()) {
        obj.insert(QString("keyValueData"), ::OpenAPI::toJsonValue(m_key_value_data));
    }
    if (m_key_value_format.isSet()) {
        obj.insert(QString("keyValueFormat"), ::OpenAPI::toJsonValue(m_key_value_format));
    }
    if (m_number_format_source_isSet) {
        obj.insert(QString("numberFormatSource"), ::OpenAPI::toJsonValue(m_number_format_source));
    }
    if (m_scale_factor_isSet) {
        obj.insert(QString("scaleFactor"), ::OpenAPI::toJsonValue(m_scale_factor));
    }
    return obj;
}

QString OAIScorecardChartSpec::getAggregateType() const {
    return m_aggregate_type;
}
void OAIScorecardChartSpec::setAggregateType(const QString &aggregate_type) {
    m_aggregate_type = aggregate_type;
    m_aggregate_type_isSet = true;
}

bool OAIScorecardChartSpec::is_aggregate_type_Set() const{
    return m_aggregate_type_isSet;
}

bool OAIScorecardChartSpec::is_aggregate_type_Valid() const{
    return m_aggregate_type_isValid;
}

OAIChartData OAIScorecardChartSpec::getBaselineValueData() const {
    return m_baseline_value_data;
}
void OAIScorecardChartSpec::setBaselineValueData(const OAIChartData &baseline_value_data) {
    m_baseline_value_data = baseline_value_data;
    m_baseline_value_data_isSet = true;
}

bool OAIScorecardChartSpec::is_baseline_value_data_Set() const{
    return m_baseline_value_data_isSet;
}

bool OAIScorecardChartSpec::is_baseline_value_data_Valid() const{
    return m_baseline_value_data_isValid;
}

OAIBaselineValueFormat OAIScorecardChartSpec::getBaselineValueFormat() const {
    return m_baseline_value_format;
}
void OAIScorecardChartSpec::setBaselineValueFormat(const OAIBaselineValueFormat &baseline_value_format) {
    m_baseline_value_format = baseline_value_format;
    m_baseline_value_format_isSet = true;
}

bool OAIScorecardChartSpec::is_baseline_value_format_Set() const{
    return m_baseline_value_format_isSet;
}

bool OAIScorecardChartSpec::is_baseline_value_format_Valid() const{
    return m_baseline_value_format_isValid;
}

OAIChartCustomNumberFormatOptions OAIScorecardChartSpec::getCustomFormatOptions() const {
    return m_custom_format_options;
}
void OAIScorecardChartSpec::setCustomFormatOptions(const OAIChartCustomNumberFormatOptions &custom_format_options) {
    m_custom_format_options = custom_format_options;
    m_custom_format_options_isSet = true;
}

bool OAIScorecardChartSpec::is_custom_format_options_Set() const{
    return m_custom_format_options_isSet;
}

bool OAIScorecardChartSpec::is_custom_format_options_Valid() const{
    return m_custom_format_options_isValid;
}

OAIChartData OAIScorecardChartSpec::getKeyValueData() const {
    return m_key_value_data;
}
void OAIScorecardChartSpec::setKeyValueData(const OAIChartData &key_value_data) {
    m_key_value_data = key_value_data;
    m_key_value_data_isSet = true;
}

bool OAIScorecardChartSpec::is_key_value_data_Set() const{
    return m_key_value_data_isSet;
}

bool OAIScorecardChartSpec::is_key_value_data_Valid() const{
    return m_key_value_data_isValid;
}

OAIKeyValueFormat OAIScorecardChartSpec::getKeyValueFormat() const {
    return m_key_value_format;
}
void OAIScorecardChartSpec::setKeyValueFormat(const OAIKeyValueFormat &key_value_format) {
    m_key_value_format = key_value_format;
    m_key_value_format_isSet = true;
}

bool OAIScorecardChartSpec::is_key_value_format_Set() const{
    return m_key_value_format_isSet;
}

bool OAIScorecardChartSpec::is_key_value_format_Valid() const{
    return m_key_value_format_isValid;
}

QString OAIScorecardChartSpec::getNumberFormatSource() const {
    return m_number_format_source;
}
void OAIScorecardChartSpec::setNumberFormatSource(const QString &number_format_source) {
    m_number_format_source = number_format_source;
    m_number_format_source_isSet = true;
}

bool OAIScorecardChartSpec::is_number_format_source_Set() const{
    return m_number_format_source_isSet;
}

bool OAIScorecardChartSpec::is_number_format_source_Valid() const{
    return m_number_format_source_isValid;
}

double OAIScorecardChartSpec::getScaleFactor() const {
    return m_scale_factor;
}
void OAIScorecardChartSpec::setScaleFactor(const double &scale_factor) {
    m_scale_factor = scale_factor;
    m_scale_factor_isSet = true;
}

bool OAIScorecardChartSpec::is_scale_factor_Set() const{
    return m_scale_factor_isSet;
}

bool OAIScorecardChartSpec::is_scale_factor_Valid() const{
    return m_scale_factor_isValid;
}

bool OAIScorecardChartSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregate_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_baseline_value_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_baseline_value_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_format_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_value_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_value_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_format_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_factor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScorecardChartSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
