/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPasteDataRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPasteDataRequest::OAIPasteDataRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPasteDataRequest::OAIPasteDataRequest() {
    this->initializeModel();
}

OAIPasteDataRequest::~OAIPasteDataRequest() {}

void OAIPasteDataRequest::initializeModel() {

    m_coordinate_isSet = false;
    m_coordinate_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_delimiter_isSet = false;
    m_delimiter_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPasteDataRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPasteDataRequest::fromJsonObject(QJsonObject json) {

    m_coordinate_isValid = ::OpenAPI::fromJsonValue(m_coordinate, json[QString("coordinate")]);
    m_coordinate_isSet = !json[QString("coordinate")].isNull() && m_coordinate_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_delimiter_isValid = ::OpenAPI::fromJsonValue(m_delimiter, json[QString("delimiter")]);
    m_delimiter_isSet = !json[QString("delimiter")].isNull() && m_delimiter_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPasteDataRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPasteDataRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_coordinate.isSet()) {
        obj.insert(QString("coordinate"), ::OpenAPI::toJsonValue(m_coordinate));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_delimiter_isSet) {
        obj.insert(QString("delimiter"), ::OpenAPI::toJsonValue(m_delimiter));
    }
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIGridCoordinate OAIPasteDataRequest::getCoordinate() const {
    return m_coordinate;
}
void OAIPasteDataRequest::setCoordinate(const OAIGridCoordinate &coordinate) {
    m_coordinate = coordinate;
    m_coordinate_isSet = true;
}

bool OAIPasteDataRequest::is_coordinate_Set() const{
    return m_coordinate_isSet;
}

bool OAIPasteDataRequest::is_coordinate_Valid() const{
    return m_coordinate_isValid;
}

QString OAIPasteDataRequest::getData() const {
    return m_data;
}
void OAIPasteDataRequest::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIPasteDataRequest::is_data_Set() const{
    return m_data_isSet;
}

bool OAIPasteDataRequest::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIPasteDataRequest::getDelimiter() const {
    return m_delimiter;
}
void OAIPasteDataRequest::setDelimiter(const QString &delimiter) {
    m_delimiter = delimiter;
    m_delimiter_isSet = true;
}

bool OAIPasteDataRequest::is_delimiter_Set() const{
    return m_delimiter_isSet;
}

bool OAIPasteDataRequest::is_delimiter_Valid() const{
    return m_delimiter_isValid;
}

bool OAIPasteDataRequest::isHtml() const {
    return m_html;
}
void OAIPasteDataRequest::setHtml(const bool &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIPasteDataRequest::is_html_Set() const{
    return m_html_isSet;
}

bool OAIPasteDataRequest::is_html_Valid() const{
    return m_html_isValid;
}

QString OAIPasteDataRequest::getType() const {
    return m_type;
}
void OAIPasteDataRequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPasteDataRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPasteDataRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPasteDataRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coordinate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPasteDataRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
