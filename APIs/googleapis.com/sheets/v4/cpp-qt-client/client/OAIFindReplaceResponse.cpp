/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFindReplaceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFindReplaceResponse::OAIFindReplaceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFindReplaceResponse::OAIFindReplaceResponse() {
    this->initializeModel();
}

OAIFindReplaceResponse::~OAIFindReplaceResponse() {}

void OAIFindReplaceResponse::initializeModel() {

    m_formulas_changed_isSet = false;
    m_formulas_changed_isValid = false;

    m_occurrences_changed_isSet = false;
    m_occurrences_changed_isValid = false;

    m_rows_changed_isSet = false;
    m_rows_changed_isValid = false;

    m_sheets_changed_isSet = false;
    m_sheets_changed_isValid = false;

    m_values_changed_isSet = false;
    m_values_changed_isValid = false;
}

void OAIFindReplaceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFindReplaceResponse::fromJsonObject(QJsonObject json) {

    m_formulas_changed_isValid = ::OpenAPI::fromJsonValue(m_formulas_changed, json[QString("formulasChanged")]);
    m_formulas_changed_isSet = !json[QString("formulasChanged")].isNull() && m_formulas_changed_isValid;

    m_occurrences_changed_isValid = ::OpenAPI::fromJsonValue(m_occurrences_changed, json[QString("occurrencesChanged")]);
    m_occurrences_changed_isSet = !json[QString("occurrencesChanged")].isNull() && m_occurrences_changed_isValid;

    m_rows_changed_isValid = ::OpenAPI::fromJsonValue(m_rows_changed, json[QString("rowsChanged")]);
    m_rows_changed_isSet = !json[QString("rowsChanged")].isNull() && m_rows_changed_isValid;

    m_sheets_changed_isValid = ::OpenAPI::fromJsonValue(m_sheets_changed, json[QString("sheetsChanged")]);
    m_sheets_changed_isSet = !json[QString("sheetsChanged")].isNull() && m_sheets_changed_isValid;

    m_values_changed_isValid = ::OpenAPI::fromJsonValue(m_values_changed, json[QString("valuesChanged")]);
    m_values_changed_isSet = !json[QString("valuesChanged")].isNull() && m_values_changed_isValid;
}

QString OAIFindReplaceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFindReplaceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_formulas_changed_isSet) {
        obj.insert(QString("formulasChanged"), ::OpenAPI::toJsonValue(m_formulas_changed));
    }
    if (m_occurrences_changed_isSet) {
        obj.insert(QString("occurrencesChanged"), ::OpenAPI::toJsonValue(m_occurrences_changed));
    }
    if (m_rows_changed_isSet) {
        obj.insert(QString("rowsChanged"), ::OpenAPI::toJsonValue(m_rows_changed));
    }
    if (m_sheets_changed_isSet) {
        obj.insert(QString("sheetsChanged"), ::OpenAPI::toJsonValue(m_sheets_changed));
    }
    if (m_values_changed_isSet) {
        obj.insert(QString("valuesChanged"), ::OpenAPI::toJsonValue(m_values_changed));
    }
    return obj;
}

qint32 OAIFindReplaceResponse::getFormulasChanged() const {
    return m_formulas_changed;
}
void OAIFindReplaceResponse::setFormulasChanged(const qint32 &formulas_changed) {
    m_formulas_changed = formulas_changed;
    m_formulas_changed_isSet = true;
}

bool OAIFindReplaceResponse::is_formulas_changed_Set() const{
    return m_formulas_changed_isSet;
}

bool OAIFindReplaceResponse::is_formulas_changed_Valid() const{
    return m_formulas_changed_isValid;
}

qint32 OAIFindReplaceResponse::getOccurrencesChanged() const {
    return m_occurrences_changed;
}
void OAIFindReplaceResponse::setOccurrencesChanged(const qint32 &occurrences_changed) {
    m_occurrences_changed = occurrences_changed;
    m_occurrences_changed_isSet = true;
}

bool OAIFindReplaceResponse::is_occurrences_changed_Set() const{
    return m_occurrences_changed_isSet;
}

bool OAIFindReplaceResponse::is_occurrences_changed_Valid() const{
    return m_occurrences_changed_isValid;
}

qint32 OAIFindReplaceResponse::getRowsChanged() const {
    return m_rows_changed;
}
void OAIFindReplaceResponse::setRowsChanged(const qint32 &rows_changed) {
    m_rows_changed = rows_changed;
    m_rows_changed_isSet = true;
}

bool OAIFindReplaceResponse::is_rows_changed_Set() const{
    return m_rows_changed_isSet;
}

bool OAIFindReplaceResponse::is_rows_changed_Valid() const{
    return m_rows_changed_isValid;
}

qint32 OAIFindReplaceResponse::getSheetsChanged() const {
    return m_sheets_changed;
}
void OAIFindReplaceResponse::setSheetsChanged(const qint32 &sheets_changed) {
    m_sheets_changed = sheets_changed;
    m_sheets_changed_isSet = true;
}

bool OAIFindReplaceResponse::is_sheets_changed_Set() const{
    return m_sheets_changed_isSet;
}

bool OAIFindReplaceResponse::is_sheets_changed_Valid() const{
    return m_sheets_changed_isValid;
}

qint32 OAIFindReplaceResponse::getValuesChanged() const {
    return m_values_changed;
}
void OAIFindReplaceResponse::setValuesChanged(const qint32 &values_changed) {
    m_values_changed = values_changed;
    m_values_changed_isSet = true;
}

bool OAIFindReplaceResponse::is_values_changed_Set() const{
    return m_values_changed_isSet;
}

bool OAIFindReplaceResponse::is_values_changed_Valid() const{
    return m_values_changed_isValid;
}

bool OAIFindReplaceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_formulas_changed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occurrences_changed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows_changed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheets_changed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values_changed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFindReplaceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
