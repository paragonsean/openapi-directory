# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_filter import DataFilter
from openapi_server import util


class BatchClearValuesByDataFilterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_filters: List[DataFilter]=None):
        """BatchClearValuesByDataFilterRequest - a model defined in OpenAPI

        :param data_filters: The data_filters of this BatchClearValuesByDataFilterRequest.
        """
        self.openapi_types = {
            'data_filters': List[DataFilter]
        }

        self.attribute_map = {
            'data_filters': 'dataFilters'
        }

        self._data_filters = data_filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchClearValuesByDataFilterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchClearValuesByDataFilterRequest of this BatchClearValuesByDataFilterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_filters(self):
        """Gets the data_filters of this BatchClearValuesByDataFilterRequest.

        The DataFilters used to determine which ranges to clear.

        :return: The data_filters of this BatchClearValuesByDataFilterRequest.
        :rtype: List[DataFilter]
        """
        return self._data_filters

    @data_filters.setter
    def data_filters(self, data_filters):
        """Sets the data_filters of this BatchClearValuesByDataFilterRequest.

        The DataFilters used to determine which ranges to clear.

        :param data_filters: The data_filters of this BatchClearValuesByDataFilterRequest.
        :type data_filters: List[DataFilter]
        """

        self._data_filters = data_filters
