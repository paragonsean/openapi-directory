# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.boolean_condition import BooleanCondition
from openapi_server.models.color import Color
from openapi_server.models.color_style import ColorStyle
from openapi_server import util


class FilterCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition: BooleanCondition=None, hidden_values: List[str]=None, visible_background_color: Color=None, visible_background_color_style: ColorStyle=None, visible_foreground_color: Color=None, visible_foreground_color_style: ColorStyle=None):
        """FilterCriteria - a model defined in OpenAPI

        :param condition: The condition of this FilterCriteria.
        :param hidden_values: The hidden_values of this FilterCriteria.
        :param visible_background_color: The visible_background_color of this FilterCriteria.
        :param visible_background_color_style: The visible_background_color_style of this FilterCriteria.
        :param visible_foreground_color: The visible_foreground_color of this FilterCriteria.
        :param visible_foreground_color_style: The visible_foreground_color_style of this FilterCriteria.
        """
        self.openapi_types = {
            'condition': BooleanCondition,
            'hidden_values': List[str],
            'visible_background_color': Color,
            'visible_background_color_style': ColorStyle,
            'visible_foreground_color': Color,
            'visible_foreground_color_style': ColorStyle
        }

        self.attribute_map = {
            'condition': 'condition',
            'hidden_values': 'hiddenValues',
            'visible_background_color': 'visibleBackgroundColor',
            'visible_background_color_style': 'visibleBackgroundColorStyle',
            'visible_foreground_color': 'visibleForegroundColor',
            'visible_foreground_color_style': 'visibleForegroundColorStyle'
        }

        self._condition = condition
        self._hidden_values = hidden_values
        self._visible_background_color = visible_background_color
        self._visible_background_color_style = visible_background_color_style
        self._visible_foreground_color = visible_foreground_color
        self._visible_foreground_color_style = visible_foreground_color_style

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FilterCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FilterCriteria of this FilterCriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self):
        """Gets the condition of this FilterCriteria.


        :return: The condition of this FilterCriteria.
        :rtype: BooleanCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this FilterCriteria.


        :param condition: The condition of this FilterCriteria.
        :type condition: BooleanCondition
        """

        self._condition = condition

    @property
    def hidden_values(self):
        """Gets the hidden_values of this FilterCriteria.

        Values that should be hidden.

        :return: The hidden_values of this FilterCriteria.
        :rtype: List[str]
        """
        return self._hidden_values

    @hidden_values.setter
    def hidden_values(self, hidden_values):
        """Sets the hidden_values of this FilterCriteria.

        Values that should be hidden.

        :param hidden_values: The hidden_values of this FilterCriteria.
        :type hidden_values: List[str]
        """

        self._hidden_values = hidden_values

    @property
    def visible_background_color(self):
        """Gets the visible_background_color of this FilterCriteria.


        :return: The visible_background_color of this FilterCriteria.
        :rtype: Color
        """
        return self._visible_background_color

    @visible_background_color.setter
    def visible_background_color(self, visible_background_color):
        """Sets the visible_background_color of this FilterCriteria.


        :param visible_background_color: The visible_background_color of this FilterCriteria.
        :type visible_background_color: Color
        """

        self._visible_background_color = visible_background_color

    @property
    def visible_background_color_style(self):
        """Gets the visible_background_color_style of this FilterCriteria.


        :return: The visible_background_color_style of this FilterCriteria.
        :rtype: ColorStyle
        """
        return self._visible_background_color_style

    @visible_background_color_style.setter
    def visible_background_color_style(self, visible_background_color_style):
        """Sets the visible_background_color_style of this FilterCriteria.


        :param visible_background_color_style: The visible_background_color_style of this FilterCriteria.
        :type visible_background_color_style: ColorStyle
        """

        self._visible_background_color_style = visible_background_color_style

    @property
    def visible_foreground_color(self):
        """Gets the visible_foreground_color of this FilterCriteria.


        :return: The visible_foreground_color of this FilterCriteria.
        :rtype: Color
        """
        return self._visible_foreground_color

    @visible_foreground_color.setter
    def visible_foreground_color(self, visible_foreground_color):
        """Sets the visible_foreground_color of this FilterCriteria.


        :param visible_foreground_color: The visible_foreground_color of this FilterCriteria.
        :type visible_foreground_color: Color
        """

        self._visible_foreground_color = visible_foreground_color

    @property
    def visible_foreground_color_style(self):
        """Gets the visible_foreground_color_style of this FilterCriteria.


        :return: The visible_foreground_color_style of this FilterCriteria.
        :rtype: ColorStyle
        """
        return self._visible_foreground_color_style

    @visible_foreground_color_style.setter
    def visible_foreground_color_style(self, visible_foreground_color_style):
        """Sets the visible_foreground_color_style of this FilterCriteria.


        :param visible_foreground_color_style: The visible_foreground_color_style of this FilterCriteria.
        :type visible_foreground_color_style: ColorStyle
        """

        self._visible_foreground_color_style = visible_foreground_color_style
