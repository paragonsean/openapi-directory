# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PointStyle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, shape: str=None, size: float=None):
        """PointStyle - a model defined in OpenAPI

        :param shape: The shape of this PointStyle.
        :param size: The size of this PointStyle.
        """
        self.openapi_types = {
            'shape': str,
            'size': float
        }

        self.attribute_map = {
            'shape': 'shape',
            'size': 'size'
        }

        self._shape = shape
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PointStyle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PointStyle of this PointStyle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def shape(self):
        """Gets the shape of this PointStyle.

        The point shape. If empty or unspecified, a default shape is used.

        :return: The shape of this PointStyle.
        :rtype: str
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this PointStyle.

        The point shape. If empty or unspecified, a default shape is used.

        :param shape: The shape of this PointStyle.
        :type shape: str
        """
        allowed_values = ["POINT_SHAPE_UNSPECIFIED", "CIRCLE", "DIAMOND", "HEXAGON", "PENTAGON", "SQUARE", "STAR", "TRIANGLE", "X_MARK"]  # noqa: E501
        if shape not in allowed_values:
            raise ValueError(
                "Invalid value for `shape` ({0}), must be one of {1}"
                .format(shape, allowed_values)
            )

        self._shape = shape

    @property
    def size(self):
        """Gets the size of this PointStyle.

        The point size. If empty, a default size is used.

        :return: The size of this PointStyle.
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PointStyle.

        The point size. If empty, a default size is used.

        :param size: The size of this PointStyle.
        :type size: float
        """

        self._size = size
