# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chart_data import ChartData
from openapi_server.models.color import Color
from openapi_server.models.color_style import ColorStyle
from openapi_server.models.text_format import TextFormat
from openapi_server.models.treemap_chart_color_scale import TreemapChartColorScale
from openapi_server import util


class TreemapChartSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color_data: ChartData=None, color_scale: TreemapChartColorScale=None, header_color: Color=None, header_color_style: ColorStyle=None, hide_tooltips: bool=None, hinted_levels: int=None, labels: ChartData=None, levels: int=None, max_value: float=None, min_value: float=None, parent_labels: ChartData=None, size_data: ChartData=None, text_format: TextFormat=None):
        """TreemapChartSpec - a model defined in OpenAPI

        :param color_data: The color_data of this TreemapChartSpec.
        :param color_scale: The color_scale of this TreemapChartSpec.
        :param header_color: The header_color of this TreemapChartSpec.
        :param header_color_style: The header_color_style of this TreemapChartSpec.
        :param hide_tooltips: The hide_tooltips of this TreemapChartSpec.
        :param hinted_levels: The hinted_levels of this TreemapChartSpec.
        :param labels: The labels of this TreemapChartSpec.
        :param levels: The levels of this TreemapChartSpec.
        :param max_value: The max_value of this TreemapChartSpec.
        :param min_value: The min_value of this TreemapChartSpec.
        :param parent_labels: The parent_labels of this TreemapChartSpec.
        :param size_data: The size_data of this TreemapChartSpec.
        :param text_format: The text_format of this TreemapChartSpec.
        """
        self.openapi_types = {
            'color_data': ChartData,
            'color_scale': TreemapChartColorScale,
            'header_color': Color,
            'header_color_style': ColorStyle,
            'hide_tooltips': bool,
            'hinted_levels': int,
            'labels': ChartData,
            'levels': int,
            'max_value': float,
            'min_value': float,
            'parent_labels': ChartData,
            'size_data': ChartData,
            'text_format': TextFormat
        }

        self.attribute_map = {
            'color_data': 'colorData',
            'color_scale': 'colorScale',
            'header_color': 'headerColor',
            'header_color_style': 'headerColorStyle',
            'hide_tooltips': 'hideTooltips',
            'hinted_levels': 'hintedLevels',
            'labels': 'labels',
            'levels': 'levels',
            'max_value': 'maxValue',
            'min_value': 'minValue',
            'parent_labels': 'parentLabels',
            'size_data': 'sizeData',
            'text_format': 'textFormat'
        }

        self._color_data = color_data
        self._color_scale = color_scale
        self._header_color = header_color
        self._header_color_style = header_color_style
        self._hide_tooltips = hide_tooltips
        self._hinted_levels = hinted_levels
        self._labels = labels
        self._levels = levels
        self._max_value = max_value
        self._min_value = min_value
        self._parent_labels = parent_labels
        self._size_data = size_data
        self._text_format = text_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TreemapChartSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TreemapChartSpec of this TreemapChartSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color_data(self):
        """Gets the color_data of this TreemapChartSpec.


        :return: The color_data of this TreemapChartSpec.
        :rtype: ChartData
        """
        return self._color_data

    @color_data.setter
    def color_data(self, color_data):
        """Sets the color_data of this TreemapChartSpec.


        :param color_data: The color_data of this TreemapChartSpec.
        :type color_data: ChartData
        """

        self._color_data = color_data

    @property
    def color_scale(self):
        """Gets the color_scale of this TreemapChartSpec.


        :return: The color_scale of this TreemapChartSpec.
        :rtype: TreemapChartColorScale
        """
        return self._color_scale

    @color_scale.setter
    def color_scale(self, color_scale):
        """Sets the color_scale of this TreemapChartSpec.


        :param color_scale: The color_scale of this TreemapChartSpec.
        :type color_scale: TreemapChartColorScale
        """

        self._color_scale = color_scale

    @property
    def header_color(self):
        """Gets the header_color of this TreemapChartSpec.


        :return: The header_color of this TreemapChartSpec.
        :rtype: Color
        """
        return self._header_color

    @header_color.setter
    def header_color(self, header_color):
        """Sets the header_color of this TreemapChartSpec.


        :param header_color: The header_color of this TreemapChartSpec.
        :type header_color: Color
        """

        self._header_color = header_color

    @property
    def header_color_style(self):
        """Gets the header_color_style of this TreemapChartSpec.


        :return: The header_color_style of this TreemapChartSpec.
        :rtype: ColorStyle
        """
        return self._header_color_style

    @header_color_style.setter
    def header_color_style(self, header_color_style):
        """Sets the header_color_style of this TreemapChartSpec.


        :param header_color_style: The header_color_style of this TreemapChartSpec.
        :type header_color_style: ColorStyle
        """

        self._header_color_style = header_color_style

    @property
    def hide_tooltips(self):
        """Gets the hide_tooltips of this TreemapChartSpec.

        True to hide tooltips.

        :return: The hide_tooltips of this TreemapChartSpec.
        :rtype: bool
        """
        return self._hide_tooltips

    @hide_tooltips.setter
    def hide_tooltips(self, hide_tooltips):
        """Sets the hide_tooltips of this TreemapChartSpec.

        True to hide tooltips.

        :param hide_tooltips: The hide_tooltips of this TreemapChartSpec.
        :type hide_tooltips: bool
        """

        self._hide_tooltips = hide_tooltips

    @property
    def hinted_levels(self):
        """Gets the hinted_levels of this TreemapChartSpec.

        The number of additional data levels beyond the labeled levels to be shown on the treemap chart. These levels are not interactive and are shown without their labels. Defaults to 0 if not specified.

        :return: The hinted_levels of this TreemapChartSpec.
        :rtype: int
        """
        return self._hinted_levels

    @hinted_levels.setter
    def hinted_levels(self, hinted_levels):
        """Sets the hinted_levels of this TreemapChartSpec.

        The number of additional data levels beyond the labeled levels to be shown on the treemap chart. These levels are not interactive and are shown without their labels. Defaults to 0 if not specified.

        :param hinted_levels: The hinted_levels of this TreemapChartSpec.
        :type hinted_levels: int
        """

        self._hinted_levels = hinted_levels

    @property
    def labels(self):
        """Gets the labels of this TreemapChartSpec.


        :return: The labels of this TreemapChartSpec.
        :rtype: ChartData
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this TreemapChartSpec.


        :param labels: The labels of this TreemapChartSpec.
        :type labels: ChartData
        """

        self._labels = labels

    @property
    def levels(self):
        """Gets the levels of this TreemapChartSpec.

        The number of data levels to show on the treemap chart. These levels are interactive and are shown with their labels. Defaults to 2 if not specified.

        :return: The levels of this TreemapChartSpec.
        :rtype: int
        """
        return self._levels

    @levels.setter
    def levels(self, levels):
        """Sets the levels of this TreemapChartSpec.

        The number of data levels to show on the treemap chart. These levels are interactive and are shown with their labels. Defaults to 2 if not specified.

        :param levels: The levels of this TreemapChartSpec.
        :type levels: int
        """

        self._levels = levels

    @property
    def max_value(self):
        """Gets the max_value of this TreemapChartSpec.

        The maximum possible data value. Cells with values greater than this will have the same color as cells with this value. If not specified, defaults to the actual maximum value from color_data, or the maximum value from size_data if color_data is not specified.

        :return: The max_value of this TreemapChartSpec.
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this TreemapChartSpec.

        The maximum possible data value. Cells with values greater than this will have the same color as cells with this value. If not specified, defaults to the actual maximum value from color_data, or the maximum value from size_data if color_data is not specified.

        :param max_value: The max_value of this TreemapChartSpec.
        :type max_value: float
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this TreemapChartSpec.

        The minimum possible data value. Cells with values less than this will have the same color as cells with this value. If not specified, defaults to the actual minimum value from color_data, or the minimum value from size_data if color_data is not specified.

        :return: The min_value of this TreemapChartSpec.
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this TreemapChartSpec.

        The minimum possible data value. Cells with values less than this will have the same color as cells with this value. If not specified, defaults to the actual minimum value from color_data, or the minimum value from size_data if color_data is not specified.

        :param min_value: The min_value of this TreemapChartSpec.
        :type min_value: float
        """

        self._min_value = min_value

    @property
    def parent_labels(self):
        """Gets the parent_labels of this TreemapChartSpec.


        :return: The parent_labels of this TreemapChartSpec.
        :rtype: ChartData
        """
        return self._parent_labels

    @parent_labels.setter
    def parent_labels(self, parent_labels):
        """Sets the parent_labels of this TreemapChartSpec.


        :param parent_labels: The parent_labels of this TreemapChartSpec.
        :type parent_labels: ChartData
        """

        self._parent_labels = parent_labels

    @property
    def size_data(self):
        """Gets the size_data of this TreemapChartSpec.


        :return: The size_data of this TreemapChartSpec.
        :rtype: ChartData
        """
        return self._size_data

    @size_data.setter
    def size_data(self, size_data):
        """Sets the size_data of this TreemapChartSpec.


        :param size_data: The size_data of this TreemapChartSpec.
        :type size_data: ChartData
        """

        self._size_data = size_data

    @property
    def text_format(self):
        """Gets the text_format of this TreemapChartSpec.


        :return: The text_format of this TreemapChartSpec.
        :rtype: TextFormat
        """
        return self._text_format

    @text_format.setter
    def text_format(self, text_format):
        """Sets the text_format of this TreemapChartSpec.


        :param text_format: The text_format of this TreemapChartSpec.
        :type text_format: TextFormat
        """

        self._text_format = text_format
