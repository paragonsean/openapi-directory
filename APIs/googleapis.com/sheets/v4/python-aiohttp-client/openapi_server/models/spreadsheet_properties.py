# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cell_format import CellFormat
from openapi_server.models.iterative_calculation_settings import IterativeCalculationSettings
from openapi_server.models.spreadsheet_theme import SpreadsheetTheme
from openapi_server import util


class SpreadsheetProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_recalc: str=None, default_format: CellFormat=None, iterative_calculation_settings: IterativeCalculationSettings=None, locale: str=None, spreadsheet_theme: SpreadsheetTheme=None, time_zone: str=None, title: str=None):
        """SpreadsheetProperties - a model defined in OpenAPI

        :param auto_recalc: The auto_recalc of this SpreadsheetProperties.
        :param default_format: The default_format of this SpreadsheetProperties.
        :param iterative_calculation_settings: The iterative_calculation_settings of this SpreadsheetProperties.
        :param locale: The locale of this SpreadsheetProperties.
        :param spreadsheet_theme: The spreadsheet_theme of this SpreadsheetProperties.
        :param time_zone: The time_zone of this SpreadsheetProperties.
        :param title: The title of this SpreadsheetProperties.
        """
        self.openapi_types = {
            'auto_recalc': str,
            'default_format': CellFormat,
            'iterative_calculation_settings': IterativeCalculationSettings,
            'locale': str,
            'spreadsheet_theme': SpreadsheetTheme,
            'time_zone': str,
            'title': str
        }

        self.attribute_map = {
            'auto_recalc': 'autoRecalc',
            'default_format': 'defaultFormat',
            'iterative_calculation_settings': 'iterativeCalculationSettings',
            'locale': 'locale',
            'spreadsheet_theme': 'spreadsheetTheme',
            'time_zone': 'timeZone',
            'title': 'title'
        }

        self._auto_recalc = auto_recalc
        self._default_format = default_format
        self._iterative_calculation_settings = iterative_calculation_settings
        self._locale = locale
        self._spreadsheet_theme = spreadsheet_theme
        self._time_zone = time_zone
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpreadsheetProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpreadsheetProperties of this SpreadsheetProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_recalc(self):
        """Gets the auto_recalc of this SpreadsheetProperties.

        The amount of time to wait before volatile functions are recalculated.

        :return: The auto_recalc of this SpreadsheetProperties.
        :rtype: str
        """
        return self._auto_recalc

    @auto_recalc.setter
    def auto_recalc(self, auto_recalc):
        """Sets the auto_recalc of this SpreadsheetProperties.

        The amount of time to wait before volatile functions are recalculated.

        :param auto_recalc: The auto_recalc of this SpreadsheetProperties.
        :type auto_recalc: str
        """
        allowed_values = ["RECALCULATION_INTERVAL_UNSPECIFIED", "ON_CHANGE", "MINUTE", "HOUR"]  # noqa: E501
        if auto_recalc not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_recalc` ({0}), must be one of {1}"
                .format(auto_recalc, allowed_values)
            )

        self._auto_recalc = auto_recalc

    @property
    def default_format(self):
        """Gets the default_format of this SpreadsheetProperties.


        :return: The default_format of this SpreadsheetProperties.
        :rtype: CellFormat
        """
        return self._default_format

    @default_format.setter
    def default_format(self, default_format):
        """Sets the default_format of this SpreadsheetProperties.


        :param default_format: The default_format of this SpreadsheetProperties.
        :type default_format: CellFormat
        """

        self._default_format = default_format

    @property
    def iterative_calculation_settings(self):
        """Gets the iterative_calculation_settings of this SpreadsheetProperties.


        :return: The iterative_calculation_settings of this SpreadsheetProperties.
        :rtype: IterativeCalculationSettings
        """
        return self._iterative_calculation_settings

    @iterative_calculation_settings.setter
    def iterative_calculation_settings(self, iterative_calculation_settings):
        """Sets the iterative_calculation_settings of this SpreadsheetProperties.


        :param iterative_calculation_settings: The iterative_calculation_settings of this SpreadsheetProperties.
        :type iterative_calculation_settings: IterativeCalculationSettings
        """

        self._iterative_calculation_settings = iterative_calculation_settings

    @property
    def locale(self):
        """Gets the locale of this SpreadsheetProperties.

        The locale of the spreadsheet in one of the following formats: * an ISO 639-1 language code such as `en` * an ISO 639-2 language code such as `fil`, if no 639-1 code exists * a combination of the ISO language code and country code, such as `en_US` Note: when updating this field, not all locales/languages are supported.

        :return: The locale of this SpreadsheetProperties.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this SpreadsheetProperties.

        The locale of the spreadsheet in one of the following formats: * an ISO 639-1 language code such as `en` * an ISO 639-2 language code such as `fil`, if no 639-1 code exists * a combination of the ISO language code and country code, such as `en_US` Note: when updating this field, not all locales/languages are supported.

        :param locale: The locale of this SpreadsheetProperties.
        :type locale: str
        """

        self._locale = locale

    @property
    def spreadsheet_theme(self):
        """Gets the spreadsheet_theme of this SpreadsheetProperties.


        :return: The spreadsheet_theme of this SpreadsheetProperties.
        :rtype: SpreadsheetTheme
        """
        return self._spreadsheet_theme

    @spreadsheet_theme.setter
    def spreadsheet_theme(self, spreadsheet_theme):
        """Sets the spreadsheet_theme of this SpreadsheetProperties.


        :param spreadsheet_theme: The spreadsheet_theme of this SpreadsheetProperties.
        :type spreadsheet_theme: SpreadsheetTheme
        """

        self._spreadsheet_theme = spreadsheet_theme

    @property
    def time_zone(self):
        """Gets the time_zone of this SpreadsheetProperties.

        The time zone of the spreadsheet, in CLDR format such as `America/New_York`. If the time zone isn't recognized, this may be a custom time zone such as `GMT-07:00`.

        :return: The time_zone of this SpreadsheetProperties.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this SpreadsheetProperties.

        The time zone of the spreadsheet, in CLDR format such as `America/New_York`. If the time zone isn't recognized, this may be a custom time zone such as `GMT-07:00`.

        :param time_zone: The time_zone of this SpreadsheetProperties.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def title(self):
        """Gets the title of this SpreadsheetProperties.

        The title of the spreadsheet.

        :return: The title of this SpreadsheetProperties.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SpreadsheetProperties.

        The title of the spreadsheet.

        :param title: The title of this SpreadsheetProperties.
        :type title: str
        """

        self._title = title
