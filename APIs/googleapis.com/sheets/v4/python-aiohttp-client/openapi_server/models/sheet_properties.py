# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.color import Color
from openapi_server.models.color_style import ColorStyle
from openapi_server.models.data_source_sheet_properties import DataSourceSheetProperties
from openapi_server.models.grid_properties import GridProperties
from openapi_server import util


class SheetProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source_sheet_properties: DataSourceSheetProperties=None, grid_properties: GridProperties=None, hidden: bool=None, index: int=None, right_to_left: bool=None, sheet_id: int=None, sheet_type: str=None, tab_color: Color=None, tab_color_style: ColorStyle=None, title: str=None):
        """SheetProperties - a model defined in OpenAPI

        :param data_source_sheet_properties: The data_source_sheet_properties of this SheetProperties.
        :param grid_properties: The grid_properties of this SheetProperties.
        :param hidden: The hidden of this SheetProperties.
        :param index: The index of this SheetProperties.
        :param right_to_left: The right_to_left of this SheetProperties.
        :param sheet_id: The sheet_id of this SheetProperties.
        :param sheet_type: The sheet_type of this SheetProperties.
        :param tab_color: The tab_color of this SheetProperties.
        :param tab_color_style: The tab_color_style of this SheetProperties.
        :param title: The title of this SheetProperties.
        """
        self.openapi_types = {
            'data_source_sheet_properties': DataSourceSheetProperties,
            'grid_properties': GridProperties,
            'hidden': bool,
            'index': int,
            'right_to_left': bool,
            'sheet_id': int,
            'sheet_type': str,
            'tab_color': Color,
            'tab_color_style': ColorStyle,
            'title': str
        }

        self.attribute_map = {
            'data_source_sheet_properties': 'dataSourceSheetProperties',
            'grid_properties': 'gridProperties',
            'hidden': 'hidden',
            'index': 'index',
            'right_to_left': 'rightToLeft',
            'sheet_id': 'sheetId',
            'sheet_type': 'sheetType',
            'tab_color': 'tabColor',
            'tab_color_style': 'tabColorStyle',
            'title': 'title'
        }

        self._data_source_sheet_properties = data_source_sheet_properties
        self._grid_properties = grid_properties
        self._hidden = hidden
        self._index = index
        self._right_to_left = right_to_left
        self._sheet_id = sheet_id
        self._sheet_type = sheet_type
        self._tab_color = tab_color
        self._tab_color_style = tab_color_style
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SheetProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SheetProperties of this SheetProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source_sheet_properties(self):
        """Gets the data_source_sheet_properties of this SheetProperties.


        :return: The data_source_sheet_properties of this SheetProperties.
        :rtype: DataSourceSheetProperties
        """
        return self._data_source_sheet_properties

    @data_source_sheet_properties.setter
    def data_source_sheet_properties(self, data_source_sheet_properties):
        """Sets the data_source_sheet_properties of this SheetProperties.


        :param data_source_sheet_properties: The data_source_sheet_properties of this SheetProperties.
        :type data_source_sheet_properties: DataSourceSheetProperties
        """

        self._data_source_sheet_properties = data_source_sheet_properties

    @property
    def grid_properties(self):
        """Gets the grid_properties of this SheetProperties.


        :return: The grid_properties of this SheetProperties.
        :rtype: GridProperties
        """
        return self._grid_properties

    @grid_properties.setter
    def grid_properties(self, grid_properties):
        """Sets the grid_properties of this SheetProperties.


        :param grid_properties: The grid_properties of this SheetProperties.
        :type grid_properties: GridProperties
        """

        self._grid_properties = grid_properties

    @property
    def hidden(self):
        """Gets the hidden of this SheetProperties.

        True if the sheet is hidden in the UI, false if it's visible.

        :return: The hidden of this SheetProperties.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this SheetProperties.

        True if the sheet is hidden in the UI, false if it's visible.

        :param hidden: The hidden of this SheetProperties.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def index(self):
        """Gets the index of this SheetProperties.

        The index of the sheet within the spreadsheet. When adding or updating sheet properties, if this field is excluded then the sheet is added or moved to the end of the sheet list. When updating sheet indices or inserting sheets, movement is considered in \"before the move\" indexes. For example, if there were three sheets (S1, S2, S3) in order to move S1 ahead of S2 the index would have to be set to 2. A sheet index update request is ignored if the requested index is identical to the sheets current index or if the requested new index is equal to the current sheet index + 1.

        :return: The index of this SheetProperties.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this SheetProperties.

        The index of the sheet within the spreadsheet. When adding or updating sheet properties, if this field is excluded then the sheet is added or moved to the end of the sheet list. When updating sheet indices or inserting sheets, movement is considered in \"before the move\" indexes. For example, if there were three sheets (S1, S2, S3) in order to move S1 ahead of S2 the index would have to be set to 2. A sheet index update request is ignored if the requested index is identical to the sheets current index or if the requested new index is equal to the current sheet index + 1.

        :param index: The index of this SheetProperties.
        :type index: int
        """

        self._index = index

    @property
    def right_to_left(self):
        """Gets the right_to_left of this SheetProperties.

        True if the sheet is an RTL sheet instead of an LTR sheet.

        :return: The right_to_left of this SheetProperties.
        :rtype: bool
        """
        return self._right_to_left

    @right_to_left.setter
    def right_to_left(self, right_to_left):
        """Sets the right_to_left of this SheetProperties.

        True if the sheet is an RTL sheet instead of an LTR sheet.

        :param right_to_left: The right_to_left of this SheetProperties.
        :type right_to_left: bool
        """

        self._right_to_left = right_to_left

    @property
    def sheet_id(self):
        """Gets the sheet_id of this SheetProperties.

        The ID of the sheet. Must be non-negative. This field cannot be changed once set.

        :return: The sheet_id of this SheetProperties.
        :rtype: int
        """
        return self._sheet_id

    @sheet_id.setter
    def sheet_id(self, sheet_id):
        """Sets the sheet_id of this SheetProperties.

        The ID of the sheet. Must be non-negative. This field cannot be changed once set.

        :param sheet_id: The sheet_id of this SheetProperties.
        :type sheet_id: int
        """

        self._sheet_id = sheet_id

    @property
    def sheet_type(self):
        """Gets the sheet_type of this SheetProperties.

        The type of sheet. Defaults to GRID. This field cannot be changed once set.

        :return: The sheet_type of this SheetProperties.
        :rtype: str
        """
        return self._sheet_type

    @sheet_type.setter
    def sheet_type(self, sheet_type):
        """Sets the sheet_type of this SheetProperties.

        The type of sheet. Defaults to GRID. This field cannot be changed once set.

        :param sheet_type: The sheet_type of this SheetProperties.
        :type sheet_type: str
        """
        allowed_values = ["SHEET_TYPE_UNSPECIFIED", "GRID", "OBJECT", "DATA_SOURCE"]  # noqa: E501
        if sheet_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sheet_type` ({0}), must be one of {1}"
                .format(sheet_type, allowed_values)
            )

        self._sheet_type = sheet_type

    @property
    def tab_color(self):
        """Gets the tab_color of this SheetProperties.


        :return: The tab_color of this SheetProperties.
        :rtype: Color
        """
        return self._tab_color

    @tab_color.setter
    def tab_color(self, tab_color):
        """Sets the tab_color of this SheetProperties.


        :param tab_color: The tab_color of this SheetProperties.
        :type tab_color: Color
        """

        self._tab_color = tab_color

    @property
    def tab_color_style(self):
        """Gets the tab_color_style of this SheetProperties.


        :return: The tab_color_style of this SheetProperties.
        :rtype: ColorStyle
        """
        return self._tab_color_style

    @tab_color_style.setter
    def tab_color_style(self, tab_color_style):
        """Sets the tab_color_style of this SheetProperties.


        :param tab_color_style: The tab_color_style of this SheetProperties.
        :type tab_color_style: ColorStyle
        """

        self._tab_color_style = tab_color_style

    @property
    def title(self):
        """Gets the title of this SheetProperties.

        The name of the sheet.

        :return: The title of this SheetProperties.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SheetProperties.

        The name of the sheet.

        :param title: The title of this SheetProperties.
        :type title: str
        """

        self._title = title
