# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataExecutionStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_code: str=None, error_message: str=None, last_refresh_time: str=None, state: str=None):
        """DataExecutionStatus - a model defined in OpenAPI

        :param error_code: The error_code of this DataExecutionStatus.
        :param error_message: The error_message of this DataExecutionStatus.
        :param last_refresh_time: The last_refresh_time of this DataExecutionStatus.
        :param state: The state of this DataExecutionStatus.
        """
        self.openapi_types = {
            'error_code': str,
            'error_message': str,
            'last_refresh_time': str,
            'state': str
        }

        self.attribute_map = {
            'error_code': 'errorCode',
            'error_message': 'errorMessage',
            'last_refresh_time': 'lastRefreshTime',
            'state': 'state'
        }

        self._error_code = error_code
        self._error_message = error_message
        self._last_refresh_time = last_refresh_time
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataExecutionStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataExecutionStatus of this DataExecutionStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_code(self):
        """Gets the error_code of this DataExecutionStatus.

        The error code.

        :return: The error_code of this DataExecutionStatus.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this DataExecutionStatus.

        The error code.

        :param error_code: The error_code of this DataExecutionStatus.
        :type error_code: str
        """
        allowed_values = ["DATA_EXECUTION_ERROR_CODE_UNSPECIFIED", "TIMED_OUT", "TOO_MANY_ROWS", "TOO_MANY_COLUMNS", "TOO_MANY_CELLS", "ENGINE", "PARAMETER_INVALID", "UNSUPPORTED_DATA_TYPE", "DUPLICATE_COLUMN_NAMES", "INTERRUPTED", "CONCURRENT_QUERY", "OTHER", "TOO_MANY_CHARS_PER_CELL", "DATA_NOT_FOUND", "PERMISSION_DENIED", "MISSING_COLUMN_ALIAS", "OBJECT_NOT_FOUND", "OBJECT_IN_ERROR_STATE", "OBJECT_SPEC_INVALID"]  # noqa: E501
        if error_code not in allowed_values:
            raise ValueError(
                "Invalid value for `error_code` ({0}), must be one of {1}"
                .format(error_code, allowed_values)
            )

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this DataExecutionStatus.

        The error message, which may be empty.

        :return: The error_message of this DataExecutionStatus.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this DataExecutionStatus.

        The error message, which may be empty.

        :param error_message: The error_message of this DataExecutionStatus.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def last_refresh_time(self):
        """Gets the last_refresh_time of this DataExecutionStatus.

        Gets the time the data last successfully refreshed.

        :return: The last_refresh_time of this DataExecutionStatus.
        :rtype: str
        """
        return self._last_refresh_time

    @last_refresh_time.setter
    def last_refresh_time(self, last_refresh_time):
        """Sets the last_refresh_time of this DataExecutionStatus.

        Gets the time the data last successfully refreshed.

        :param last_refresh_time: The last_refresh_time of this DataExecutionStatus.
        :type last_refresh_time: str
        """

        self._last_refresh_time = last_refresh_time

    @property
    def state(self):
        """Gets the state of this DataExecutionStatus.

        The state of the data execution.

        :return: The state of this DataExecutionStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DataExecutionStatus.

        The state of the data execution.

        :param state: The state of this DataExecutionStatus.
        :type state: str
        """
        allowed_values = ["DATA_EXECUTION_STATE_UNSPECIFIED", "NOT_STARTED", "RUNNING", "SUCCEEDED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
