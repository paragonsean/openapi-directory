# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.grid_coordinate import GridCoordinate
from openapi_server import util


class OverlayPosition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anchor_cell: GridCoordinate=None, height_pixels: int=None, offset_x_pixels: int=None, offset_y_pixels: int=None, width_pixels: int=None):
        """OverlayPosition - a model defined in OpenAPI

        :param anchor_cell: The anchor_cell of this OverlayPosition.
        :param height_pixels: The height_pixels of this OverlayPosition.
        :param offset_x_pixels: The offset_x_pixels of this OverlayPosition.
        :param offset_y_pixels: The offset_y_pixels of this OverlayPosition.
        :param width_pixels: The width_pixels of this OverlayPosition.
        """
        self.openapi_types = {
            'anchor_cell': GridCoordinate,
            'height_pixels': int,
            'offset_x_pixels': int,
            'offset_y_pixels': int,
            'width_pixels': int
        }

        self.attribute_map = {
            'anchor_cell': 'anchorCell',
            'height_pixels': 'heightPixels',
            'offset_x_pixels': 'offsetXPixels',
            'offset_y_pixels': 'offsetYPixels',
            'width_pixels': 'widthPixels'
        }

        self._anchor_cell = anchor_cell
        self._height_pixels = height_pixels
        self._offset_x_pixels = offset_x_pixels
        self._offset_y_pixels = offset_y_pixels
        self._width_pixels = width_pixels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OverlayPosition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OverlayPosition of this OverlayPosition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anchor_cell(self):
        """Gets the anchor_cell of this OverlayPosition.


        :return: The anchor_cell of this OverlayPosition.
        :rtype: GridCoordinate
        """
        return self._anchor_cell

    @anchor_cell.setter
    def anchor_cell(self, anchor_cell):
        """Sets the anchor_cell of this OverlayPosition.


        :param anchor_cell: The anchor_cell of this OverlayPosition.
        :type anchor_cell: GridCoordinate
        """

        self._anchor_cell = anchor_cell

    @property
    def height_pixels(self):
        """Gets the height_pixels of this OverlayPosition.

        The height of the object, in pixels. Defaults to 371.

        :return: The height_pixels of this OverlayPosition.
        :rtype: int
        """
        return self._height_pixels

    @height_pixels.setter
    def height_pixels(self, height_pixels):
        """Sets the height_pixels of this OverlayPosition.

        The height of the object, in pixels. Defaults to 371.

        :param height_pixels: The height_pixels of this OverlayPosition.
        :type height_pixels: int
        """

        self._height_pixels = height_pixels

    @property
    def offset_x_pixels(self):
        """Gets the offset_x_pixels of this OverlayPosition.

        The horizontal offset, in pixels, that the object is offset from the anchor cell.

        :return: The offset_x_pixels of this OverlayPosition.
        :rtype: int
        """
        return self._offset_x_pixels

    @offset_x_pixels.setter
    def offset_x_pixels(self, offset_x_pixels):
        """Sets the offset_x_pixels of this OverlayPosition.

        The horizontal offset, in pixels, that the object is offset from the anchor cell.

        :param offset_x_pixels: The offset_x_pixels of this OverlayPosition.
        :type offset_x_pixels: int
        """

        self._offset_x_pixels = offset_x_pixels

    @property
    def offset_y_pixels(self):
        """Gets the offset_y_pixels of this OverlayPosition.

        The vertical offset, in pixels, that the object is offset from the anchor cell.

        :return: The offset_y_pixels of this OverlayPosition.
        :rtype: int
        """
        return self._offset_y_pixels

    @offset_y_pixels.setter
    def offset_y_pixels(self, offset_y_pixels):
        """Sets the offset_y_pixels of this OverlayPosition.

        The vertical offset, in pixels, that the object is offset from the anchor cell.

        :param offset_y_pixels: The offset_y_pixels of this OverlayPosition.
        :type offset_y_pixels: int
        """

        self._offset_y_pixels = offset_y_pixels

    @property
    def width_pixels(self):
        """Gets the width_pixels of this OverlayPosition.

        The width of the object, in pixels. Defaults to 600.

        :return: The width_pixels of this OverlayPosition.
        :rtype: int
        """
        return self._width_pixels

    @width_pixels.setter
    def width_pixels(self, width_pixels):
        """Sets the width_pixels of this OverlayPosition.

        The width of the object, in pixels. Defaults to 600.

        :param width_pixels: The width_pixels of this OverlayPosition.
        :type width_pixels: int
        """

        self._width_pixels = width_pixels
