# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.boolean_condition import BooleanCondition
from openapi_server import util


class DataValidationRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition: BooleanCondition=None, input_message: str=None, show_custom_ui: bool=None, strict: bool=None):
        """DataValidationRule - a model defined in OpenAPI

        :param condition: The condition of this DataValidationRule.
        :param input_message: The input_message of this DataValidationRule.
        :param show_custom_ui: The show_custom_ui of this DataValidationRule.
        :param strict: The strict of this DataValidationRule.
        """
        self.openapi_types = {
            'condition': BooleanCondition,
            'input_message': str,
            'show_custom_ui': bool,
            'strict': bool
        }

        self.attribute_map = {
            'condition': 'condition',
            'input_message': 'inputMessage',
            'show_custom_ui': 'showCustomUi',
            'strict': 'strict'
        }

        self._condition = condition
        self._input_message = input_message
        self._show_custom_ui = show_custom_ui
        self._strict = strict

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataValidationRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataValidationRule of this DataValidationRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self):
        """Gets the condition of this DataValidationRule.


        :return: The condition of this DataValidationRule.
        :rtype: BooleanCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this DataValidationRule.


        :param condition: The condition of this DataValidationRule.
        :type condition: BooleanCondition
        """

        self._condition = condition

    @property
    def input_message(self):
        """Gets the input_message of this DataValidationRule.

        A message to show the user when adding data to the cell.

        :return: The input_message of this DataValidationRule.
        :rtype: str
        """
        return self._input_message

    @input_message.setter
    def input_message(self, input_message):
        """Sets the input_message of this DataValidationRule.

        A message to show the user when adding data to the cell.

        :param input_message: The input_message of this DataValidationRule.
        :type input_message: str
        """

        self._input_message = input_message

    @property
    def show_custom_ui(self):
        """Gets the show_custom_ui of this DataValidationRule.

        True if the UI should be customized based on the kind of condition. If true, \"List\" conditions will show a dropdown.

        :return: The show_custom_ui of this DataValidationRule.
        :rtype: bool
        """
        return self._show_custom_ui

    @show_custom_ui.setter
    def show_custom_ui(self, show_custom_ui):
        """Sets the show_custom_ui of this DataValidationRule.

        True if the UI should be customized based on the kind of condition. If true, \"List\" conditions will show a dropdown.

        :param show_custom_ui: The show_custom_ui of this DataValidationRule.
        :type show_custom_ui: bool
        """

        self._show_custom_ui = show_custom_ui

    @property
    def strict(self):
        """Gets the strict of this DataValidationRule.

        True if invalid data should be rejected.

        :return: The strict of this DataValidationRule.
        :rtype: bool
        """
        return self._strict

    @strict.setter
    def strict(self, strict):
        """Sets the strict of this DataValidationRule.

        True if invalid data should be rejected.

        :param strict: The strict of this DataValidationRule.
        :type strict: bool
        """

        self._strict = strict
