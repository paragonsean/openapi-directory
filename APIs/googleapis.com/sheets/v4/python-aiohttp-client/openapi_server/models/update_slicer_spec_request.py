# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.slicer_spec import SlicerSpec
from openapi_server import util


class UpdateSlicerSpecRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: str=None, slicer_id: int=None, spec: SlicerSpec=None):
        """UpdateSlicerSpecRequest - a model defined in OpenAPI

        :param fields: The fields of this UpdateSlicerSpecRequest.
        :param slicer_id: The slicer_id of this UpdateSlicerSpecRequest.
        :param spec: The spec of this UpdateSlicerSpecRequest.
        """
        self.openapi_types = {
            'fields': str,
            'slicer_id': int,
            'spec': SlicerSpec
        }

        self.attribute_map = {
            'fields': 'fields',
            'slicer_id': 'slicerId',
            'spec': 'spec'
        }

        self._fields = fields
        self._slicer_id = slicer_id
        self._spec = spec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSlicerSpecRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSlicerSpecRequest of this UpdateSlicerSpecRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this UpdateSlicerSpecRequest.

        The fields that should be updated. At least one field must be specified. The root `SlicerSpec` is implied and should not be specified. A single \"*\"` can be used as short-hand for listing every field.

        :return: The fields of this UpdateSlicerSpecRequest.
        :rtype: str
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this UpdateSlicerSpecRequest.

        The fields that should be updated. At least one field must be specified. The root `SlicerSpec` is implied and should not be specified. A single \"*\"` can be used as short-hand for listing every field.

        :param fields: The fields of this UpdateSlicerSpecRequest.
        :type fields: str
        """

        self._fields = fields

    @property
    def slicer_id(self):
        """Gets the slicer_id of this UpdateSlicerSpecRequest.

        The id of the slicer to update.

        :return: The slicer_id of this UpdateSlicerSpecRequest.
        :rtype: int
        """
        return self._slicer_id

    @slicer_id.setter
    def slicer_id(self, slicer_id):
        """Sets the slicer_id of this UpdateSlicerSpecRequest.

        The id of the slicer to update.

        :param slicer_id: The slicer_id of this UpdateSlicerSpecRequest.
        :type slicer_id: int
        """

        self._slicer_id = slicer_id

    @property
    def spec(self):
        """Gets the spec of this UpdateSlicerSpecRequest.


        :return: The spec of this UpdateSlicerSpecRequest.
        :rtype: SlicerSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this UpdateSlicerSpecRequest.


        :param spec: The spec of this UpdateSlicerSpecRequest.
        :type spec: SlicerSpec
        """

        self._spec = spec
