# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.condition_value import ConditionValue
from openapi_server import util


class BooleanCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, values: List[ConditionValue]=None):
        """BooleanCondition - a model defined in OpenAPI

        :param type: The type of this BooleanCondition.
        :param values: The values of this BooleanCondition.
        """
        self.openapi_types = {
            'type': str,
            'values': List[ConditionValue]
        }

        self.attribute_map = {
            'type': 'type',
            'values': 'values'
        }

        self._type = type
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BooleanCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BooleanCondition of this BooleanCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this BooleanCondition.

        The type of condition.

        :return: The type of this BooleanCondition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BooleanCondition.

        The type of condition.

        :param type: The type of this BooleanCondition.
        :type type: str
        """
        allowed_values = ["CONDITION_TYPE_UNSPECIFIED", "NUMBER_GREATER", "NUMBER_GREATER_THAN_EQ", "NUMBER_LESS", "NUMBER_LESS_THAN_EQ", "NUMBER_EQ", "NUMBER_NOT_EQ", "NUMBER_BETWEEN", "NUMBER_NOT_BETWEEN", "TEXT_CONTAINS", "TEXT_NOT_CONTAINS", "TEXT_STARTS_WITH", "TEXT_ENDS_WITH", "TEXT_EQ", "TEXT_IS_EMAIL", "TEXT_IS_URL", "DATE_EQ", "DATE_BEFORE", "DATE_AFTER", "DATE_ON_OR_BEFORE", "DATE_ON_OR_AFTER", "DATE_BETWEEN", "DATE_NOT_BETWEEN", "DATE_IS_VALID", "ONE_OF_RANGE", "ONE_OF_LIST", "BLANK", "NOT_BLANK", "CUSTOM_FORMULA", "BOOLEAN", "TEXT_NOT_EQ", "DATE_NOT_EQ", "FILTER_EXPRESSION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def values(self):
        """Gets the values of this BooleanCondition.

        The values of the condition. The number of supported values depends on the condition type. Some support zero values, others one or two values, and ConditionType.ONE_OF_LIST supports an arbitrary number of values.

        :return: The values of this BooleanCondition.
        :rtype: List[ConditionValue]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this BooleanCondition.

        The values of the condition. The number of supported values depends on the condition type. Some support zero values, others one or two values, and ConditionType.ONE_OF_LIST supports an arbitrary number of values.

        :param values: The values of this BooleanCondition.
        :type values: List[ConditionValue]
        """

        self._values = values
