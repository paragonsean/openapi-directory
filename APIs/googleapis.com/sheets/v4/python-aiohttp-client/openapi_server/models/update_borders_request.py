# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.border import Border
from openapi_server.models.grid_range import GridRange
from openapi_server import util


class UpdateBordersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bottom: Border=None, inner_horizontal: Border=None, inner_vertical: Border=None, left: Border=None, range: GridRange=None, right: Border=None, top: Border=None):
        """UpdateBordersRequest - a model defined in OpenAPI

        :param bottom: The bottom of this UpdateBordersRequest.
        :param inner_horizontal: The inner_horizontal of this UpdateBordersRequest.
        :param inner_vertical: The inner_vertical of this UpdateBordersRequest.
        :param left: The left of this UpdateBordersRequest.
        :param range: The range of this UpdateBordersRequest.
        :param right: The right of this UpdateBordersRequest.
        :param top: The top of this UpdateBordersRequest.
        """
        self.openapi_types = {
            'bottom': Border,
            'inner_horizontal': Border,
            'inner_vertical': Border,
            'left': Border,
            'range': GridRange,
            'right': Border,
            'top': Border
        }

        self.attribute_map = {
            'bottom': 'bottom',
            'inner_horizontal': 'innerHorizontal',
            'inner_vertical': 'innerVertical',
            'left': 'left',
            'range': 'range',
            'right': 'right',
            'top': 'top'
        }

        self._bottom = bottom
        self._inner_horizontal = inner_horizontal
        self._inner_vertical = inner_vertical
        self._left = left
        self._range = range
        self._right = right
        self._top = top

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateBordersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateBordersRequest of this UpdateBordersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bottom(self):
        """Gets the bottom of this UpdateBordersRequest.


        :return: The bottom of this UpdateBordersRequest.
        :rtype: Border
        """
        return self._bottom

    @bottom.setter
    def bottom(self, bottom):
        """Sets the bottom of this UpdateBordersRequest.


        :param bottom: The bottom of this UpdateBordersRequest.
        :type bottom: Border
        """

        self._bottom = bottom

    @property
    def inner_horizontal(self):
        """Gets the inner_horizontal of this UpdateBordersRequest.


        :return: The inner_horizontal of this UpdateBordersRequest.
        :rtype: Border
        """
        return self._inner_horizontal

    @inner_horizontal.setter
    def inner_horizontal(self, inner_horizontal):
        """Sets the inner_horizontal of this UpdateBordersRequest.


        :param inner_horizontal: The inner_horizontal of this UpdateBordersRequest.
        :type inner_horizontal: Border
        """

        self._inner_horizontal = inner_horizontal

    @property
    def inner_vertical(self):
        """Gets the inner_vertical of this UpdateBordersRequest.


        :return: The inner_vertical of this UpdateBordersRequest.
        :rtype: Border
        """
        return self._inner_vertical

    @inner_vertical.setter
    def inner_vertical(self, inner_vertical):
        """Sets the inner_vertical of this UpdateBordersRequest.


        :param inner_vertical: The inner_vertical of this UpdateBordersRequest.
        :type inner_vertical: Border
        """

        self._inner_vertical = inner_vertical

    @property
    def left(self):
        """Gets the left of this UpdateBordersRequest.


        :return: The left of this UpdateBordersRequest.
        :rtype: Border
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this UpdateBordersRequest.


        :param left: The left of this UpdateBordersRequest.
        :type left: Border
        """

        self._left = left

    @property
    def range(self):
        """Gets the range of this UpdateBordersRequest.


        :return: The range of this UpdateBordersRequest.
        :rtype: GridRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this UpdateBordersRequest.


        :param range: The range of this UpdateBordersRequest.
        :type range: GridRange
        """

        self._range = range

    @property
    def right(self):
        """Gets the right of this UpdateBordersRequest.


        :return: The right of this UpdateBordersRequest.
        :rtype: Border
        """
        return self._right

    @right.setter
    def right(self, right):
        """Sets the right of this UpdateBordersRequest.


        :param right: The right of this UpdateBordersRequest.
        :type right: Border
        """

        self._right = right

    @property
    def top(self):
        """Gets the top of this UpdateBordersRequest.


        :return: The top of this UpdateBordersRequest.
        :rtype: Border
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this UpdateBordersRequest.


        :param top: The top of this UpdateBordersRequest.
        :type top: Border
        """

        self._top = top
