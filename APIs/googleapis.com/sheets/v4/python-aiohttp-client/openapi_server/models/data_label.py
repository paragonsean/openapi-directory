# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chart_data import ChartData
from openapi_server.models.text_format import TextFormat
from openapi_server import util


class DataLabel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_label_data: ChartData=None, placement: str=None, text_format: TextFormat=None, type: str=None):
        """DataLabel - a model defined in OpenAPI

        :param custom_label_data: The custom_label_data of this DataLabel.
        :param placement: The placement of this DataLabel.
        :param text_format: The text_format of this DataLabel.
        :param type: The type of this DataLabel.
        """
        self.openapi_types = {
            'custom_label_data': ChartData,
            'placement': str,
            'text_format': TextFormat,
            'type': str
        }

        self.attribute_map = {
            'custom_label_data': 'customLabelData',
            'placement': 'placement',
            'text_format': 'textFormat',
            'type': 'type'
        }

        self._custom_label_data = custom_label_data
        self._placement = placement
        self._text_format = text_format
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataLabel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataLabel of this DataLabel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_label_data(self):
        """Gets the custom_label_data of this DataLabel.


        :return: The custom_label_data of this DataLabel.
        :rtype: ChartData
        """
        return self._custom_label_data

    @custom_label_data.setter
    def custom_label_data(self, custom_label_data):
        """Sets the custom_label_data of this DataLabel.


        :param custom_label_data: The custom_label_data of this DataLabel.
        :type custom_label_data: ChartData
        """

        self._custom_label_data = custom_label_data

    @property
    def placement(self):
        """Gets the placement of this DataLabel.

        The placement of the data label relative to the labeled data.

        :return: The placement of this DataLabel.
        :rtype: str
        """
        return self._placement

    @placement.setter
    def placement(self, placement):
        """Sets the placement of this DataLabel.

        The placement of the data label relative to the labeled data.

        :param placement: The placement of this DataLabel.
        :type placement: str
        """
        allowed_values = ["DATA_LABEL_PLACEMENT_UNSPECIFIED", "CENTER", "LEFT", "RIGHT", "ABOVE", "BELOW", "INSIDE_END", "INSIDE_BASE", "OUTSIDE_END"]  # noqa: E501
        if placement not in allowed_values:
            raise ValueError(
                "Invalid value for `placement` ({0}), must be one of {1}"
                .format(placement, allowed_values)
            )

        self._placement = placement

    @property
    def text_format(self):
        """Gets the text_format of this DataLabel.


        :return: The text_format of this DataLabel.
        :rtype: TextFormat
        """
        return self._text_format

    @text_format.setter
    def text_format(self, text_format):
        """Sets the text_format of this DataLabel.


        :param text_format: The text_format of this DataLabel.
        :type text_format: TextFormat
        """

        self._text_format = text_format

    @property
    def type(self):
        """Gets the type of this DataLabel.

        The type of the data label.

        :return: The type of this DataLabel.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataLabel.

        The type of the data label.

        :param type: The type of this DataLabel.
        :type type: str
        """
        allowed_values = ["DATA_LABEL_TYPE_UNSPECIFIED", "NONE", "DATA", "CUSTOM"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
