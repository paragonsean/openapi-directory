# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.color import Color
from openapi_server.models.color_style import ColorStyle
from openapi_server.models.link import Link
from openapi_server import util


class TextFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bold: bool=None, font_family: str=None, font_size: int=None, foreground_color: Color=None, foreground_color_style: ColorStyle=None, italic: bool=None, link: Link=None, strikethrough: bool=None, underline: bool=None):
        """TextFormat - a model defined in OpenAPI

        :param bold: The bold of this TextFormat.
        :param font_family: The font_family of this TextFormat.
        :param font_size: The font_size of this TextFormat.
        :param foreground_color: The foreground_color of this TextFormat.
        :param foreground_color_style: The foreground_color_style of this TextFormat.
        :param italic: The italic of this TextFormat.
        :param link: The link of this TextFormat.
        :param strikethrough: The strikethrough of this TextFormat.
        :param underline: The underline of this TextFormat.
        """
        self.openapi_types = {
            'bold': bool,
            'font_family': str,
            'font_size': int,
            'foreground_color': Color,
            'foreground_color_style': ColorStyle,
            'italic': bool,
            'link': Link,
            'strikethrough': bool,
            'underline': bool
        }

        self.attribute_map = {
            'bold': 'bold',
            'font_family': 'fontFamily',
            'font_size': 'fontSize',
            'foreground_color': 'foregroundColor',
            'foreground_color_style': 'foregroundColorStyle',
            'italic': 'italic',
            'link': 'link',
            'strikethrough': 'strikethrough',
            'underline': 'underline'
        }

        self._bold = bold
        self._font_family = font_family
        self._font_size = font_size
        self._foreground_color = foreground_color
        self._foreground_color_style = foreground_color_style
        self._italic = italic
        self._link = link
        self._strikethrough = strikethrough
        self._underline = underline

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextFormat of this TextFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bold(self):
        """Gets the bold of this TextFormat.

        True if the text is bold.

        :return: The bold of this TextFormat.
        :rtype: bool
        """
        return self._bold

    @bold.setter
    def bold(self, bold):
        """Sets the bold of this TextFormat.

        True if the text is bold.

        :param bold: The bold of this TextFormat.
        :type bold: bool
        """

        self._bold = bold

    @property
    def font_family(self):
        """Gets the font_family of this TextFormat.

        The font family.

        :return: The font_family of this TextFormat.
        :rtype: str
        """
        return self._font_family

    @font_family.setter
    def font_family(self, font_family):
        """Sets the font_family of this TextFormat.

        The font family.

        :param font_family: The font_family of this TextFormat.
        :type font_family: str
        """

        self._font_family = font_family

    @property
    def font_size(self):
        """Gets the font_size of this TextFormat.

        The size of the font.

        :return: The font_size of this TextFormat.
        :rtype: int
        """
        return self._font_size

    @font_size.setter
    def font_size(self, font_size):
        """Sets the font_size of this TextFormat.

        The size of the font.

        :param font_size: The font_size of this TextFormat.
        :type font_size: int
        """

        self._font_size = font_size

    @property
    def foreground_color(self):
        """Gets the foreground_color of this TextFormat.


        :return: The foreground_color of this TextFormat.
        :rtype: Color
        """
        return self._foreground_color

    @foreground_color.setter
    def foreground_color(self, foreground_color):
        """Sets the foreground_color of this TextFormat.


        :param foreground_color: The foreground_color of this TextFormat.
        :type foreground_color: Color
        """

        self._foreground_color = foreground_color

    @property
    def foreground_color_style(self):
        """Gets the foreground_color_style of this TextFormat.


        :return: The foreground_color_style of this TextFormat.
        :rtype: ColorStyle
        """
        return self._foreground_color_style

    @foreground_color_style.setter
    def foreground_color_style(self, foreground_color_style):
        """Sets the foreground_color_style of this TextFormat.


        :param foreground_color_style: The foreground_color_style of this TextFormat.
        :type foreground_color_style: ColorStyle
        """

        self._foreground_color_style = foreground_color_style

    @property
    def italic(self):
        """Gets the italic of this TextFormat.

        True if the text is italicized.

        :return: The italic of this TextFormat.
        :rtype: bool
        """
        return self._italic

    @italic.setter
    def italic(self, italic):
        """Sets the italic of this TextFormat.

        True if the text is italicized.

        :param italic: The italic of this TextFormat.
        :type italic: bool
        """

        self._italic = italic

    @property
    def link(self):
        """Gets the link of this TextFormat.


        :return: The link of this TextFormat.
        :rtype: Link
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this TextFormat.


        :param link: The link of this TextFormat.
        :type link: Link
        """

        self._link = link

    @property
    def strikethrough(self):
        """Gets the strikethrough of this TextFormat.

        True if the text has a strikethrough.

        :return: The strikethrough of this TextFormat.
        :rtype: bool
        """
        return self._strikethrough

    @strikethrough.setter
    def strikethrough(self, strikethrough):
        """Sets the strikethrough of this TextFormat.

        True if the text has a strikethrough.

        :param strikethrough: The strikethrough of this TextFormat.
        :type strikethrough: bool
        """

        self._strikethrough = strikethrough

    @property
    def underline(self):
        """Gets the underline of this TextFormat.

        True if the text is underlined.

        :return: The underline of this TextFormat.
        :rtype: bool
        """
        return self._underline

    @underline.setter
    def underline(self, underline):
        """Sets the underline of this TextFormat.

        True if the text is underlined.

        :param underline: The underline of this TextFormat.
        :type underline: bool
        """

        self._underline = underline
