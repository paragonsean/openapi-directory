# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter_criteria import FilterCriteria
from openapi_server.models.filter_spec import FilterSpec
from openapi_server.models.grid_range import GridRange
from openapi_server.models.sort_spec import SortSpec
from openapi_server import util


class FilterView(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, criteria: Dict[str, FilterCriteria]=None, filter_specs: List[FilterSpec]=None, filter_view_id: int=None, named_range_id: str=None, range: GridRange=None, sort_specs: List[SortSpec]=None, title: str=None):
        """FilterView - a model defined in OpenAPI

        :param criteria: The criteria of this FilterView.
        :param filter_specs: The filter_specs of this FilterView.
        :param filter_view_id: The filter_view_id of this FilterView.
        :param named_range_id: The named_range_id of this FilterView.
        :param range: The range of this FilterView.
        :param sort_specs: The sort_specs of this FilterView.
        :param title: The title of this FilterView.
        """
        self.openapi_types = {
            'criteria': Dict[str, FilterCriteria],
            'filter_specs': List[FilterSpec],
            'filter_view_id': int,
            'named_range_id': str,
            'range': GridRange,
            'sort_specs': List[SortSpec],
            'title': str
        }

        self.attribute_map = {
            'criteria': 'criteria',
            'filter_specs': 'filterSpecs',
            'filter_view_id': 'filterViewId',
            'named_range_id': 'namedRangeId',
            'range': 'range',
            'sort_specs': 'sortSpecs',
            'title': 'title'
        }

        self._criteria = criteria
        self._filter_specs = filter_specs
        self._filter_view_id = filter_view_id
        self._named_range_id = named_range_id
        self._range = range
        self._sort_specs = sort_specs
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FilterView':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FilterView of this FilterView.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def criteria(self):
        """Gets the criteria of this FilterView.

        The criteria for showing/hiding values per column. The map's key is the column index, and the value is the criteria for that column. This field is deprecated in favor of filter_specs.

        :return: The criteria of this FilterView.
        :rtype: Dict[str, FilterCriteria]
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this FilterView.

        The criteria for showing/hiding values per column. The map's key is the column index, and the value is the criteria for that column. This field is deprecated in favor of filter_specs.

        :param criteria: The criteria of this FilterView.
        :type criteria: Dict[str, FilterCriteria]
        """

        self._criteria = criteria

    @property
    def filter_specs(self):
        """Gets the filter_specs of this FilterView.

        The filter criteria for showing/hiding values per column. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.

        :return: The filter_specs of this FilterView.
        :rtype: List[FilterSpec]
        """
        return self._filter_specs

    @filter_specs.setter
    def filter_specs(self, filter_specs):
        """Sets the filter_specs of this FilterView.

        The filter criteria for showing/hiding values per column. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.

        :param filter_specs: The filter_specs of this FilterView.
        :type filter_specs: List[FilterSpec]
        """

        self._filter_specs = filter_specs

    @property
    def filter_view_id(self):
        """Gets the filter_view_id of this FilterView.

        The ID of the filter view.

        :return: The filter_view_id of this FilterView.
        :rtype: int
        """
        return self._filter_view_id

    @filter_view_id.setter
    def filter_view_id(self, filter_view_id):
        """Sets the filter_view_id of this FilterView.

        The ID of the filter view.

        :param filter_view_id: The filter_view_id of this FilterView.
        :type filter_view_id: int
        """

        self._filter_view_id = filter_view_id

    @property
    def named_range_id(self):
        """Gets the named_range_id of this FilterView.

        The named range this filter view is backed by, if any. When writing, only one of range or named_range_id may be set.

        :return: The named_range_id of this FilterView.
        :rtype: str
        """
        return self._named_range_id

    @named_range_id.setter
    def named_range_id(self, named_range_id):
        """Sets the named_range_id of this FilterView.

        The named range this filter view is backed by, if any. When writing, only one of range or named_range_id may be set.

        :param named_range_id: The named_range_id of this FilterView.
        :type named_range_id: str
        """

        self._named_range_id = named_range_id

    @property
    def range(self):
        """Gets the range of this FilterView.


        :return: The range of this FilterView.
        :rtype: GridRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this FilterView.


        :param range: The range of this FilterView.
        :type range: GridRange
        """

        self._range = range

    @property
    def sort_specs(self):
        """Gets the sort_specs of this FilterView.

        The sort order per column. Later specifications are used when values are equal in the earlier specifications.

        :return: The sort_specs of this FilterView.
        :rtype: List[SortSpec]
        """
        return self._sort_specs

    @sort_specs.setter
    def sort_specs(self, sort_specs):
        """Sets the sort_specs of this FilterView.

        The sort order per column. Later specifications are used when values are equal in the earlier specifications.

        :param sort_specs: The sort_specs of this FilterView.
        :type sort_specs: List[SortSpec]
        """

        self._sort_specs = sort_specs

    @property
    def title(self):
        """Gets the title of this FilterView.

        The name of the filter view.

        :return: The title of this FilterView.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this FilterView.

        The name of the filter view.

        :param title: The title of this FilterView.
        :type title: str
        """

        self._title = title
