# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_value import ErrorValue
from openapi_server import util


class ExtendedValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bool_value: bool=None, error_value: ErrorValue=None, formula_value: str=None, number_value: float=None, string_value: str=None):
        """ExtendedValue - a model defined in OpenAPI

        :param bool_value: The bool_value of this ExtendedValue.
        :param error_value: The error_value of this ExtendedValue.
        :param formula_value: The formula_value of this ExtendedValue.
        :param number_value: The number_value of this ExtendedValue.
        :param string_value: The string_value of this ExtendedValue.
        """
        self.openapi_types = {
            'bool_value': bool,
            'error_value': ErrorValue,
            'formula_value': str,
            'number_value': float,
            'string_value': str
        }

        self.attribute_map = {
            'bool_value': 'boolValue',
            'error_value': 'errorValue',
            'formula_value': 'formulaValue',
            'number_value': 'numberValue',
            'string_value': 'stringValue'
        }

        self._bool_value = bool_value
        self._error_value = error_value
        self._formula_value = formula_value
        self._number_value = number_value
        self._string_value = string_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtendedValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExtendedValue of this ExtendedValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bool_value(self):
        """Gets the bool_value of this ExtendedValue.

        Represents a boolean value.

        :return: The bool_value of this ExtendedValue.
        :rtype: bool
        """
        return self._bool_value

    @bool_value.setter
    def bool_value(self, bool_value):
        """Sets the bool_value of this ExtendedValue.

        Represents a boolean value.

        :param bool_value: The bool_value of this ExtendedValue.
        :type bool_value: bool
        """

        self._bool_value = bool_value

    @property
    def error_value(self):
        """Gets the error_value of this ExtendedValue.


        :return: The error_value of this ExtendedValue.
        :rtype: ErrorValue
        """
        return self._error_value

    @error_value.setter
    def error_value(self, error_value):
        """Sets the error_value of this ExtendedValue.


        :param error_value: The error_value of this ExtendedValue.
        :type error_value: ErrorValue
        """

        self._error_value = error_value

    @property
    def formula_value(self):
        """Gets the formula_value of this ExtendedValue.

        Represents a formula.

        :return: The formula_value of this ExtendedValue.
        :rtype: str
        """
        return self._formula_value

    @formula_value.setter
    def formula_value(self, formula_value):
        """Sets the formula_value of this ExtendedValue.

        Represents a formula.

        :param formula_value: The formula_value of this ExtendedValue.
        :type formula_value: str
        """

        self._formula_value = formula_value

    @property
    def number_value(self):
        """Gets the number_value of this ExtendedValue.

        Represents a double value. Note: Dates, Times and DateTimes are represented as doubles in SERIAL_NUMBER format.

        :return: The number_value of this ExtendedValue.
        :rtype: float
        """
        return self._number_value

    @number_value.setter
    def number_value(self, number_value):
        """Sets the number_value of this ExtendedValue.

        Represents a double value. Note: Dates, Times and DateTimes are represented as doubles in SERIAL_NUMBER format.

        :param number_value: The number_value of this ExtendedValue.
        :type number_value: float
        """

        self._number_value = number_value

    @property
    def string_value(self):
        """Gets the string_value of this ExtendedValue.

        Represents a string value. Leading single quotes are not included. For example, if the user typed `'123` into the UI, this would be represented as a `stringValue` of `\"123\"`.

        :return: The string_value of this ExtendedValue.
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this ExtendedValue.

        Represents a string value. Leading single quotes are not included. For example, if the user typed `'123` into the UI, this would be represented as a `stringValue` of `\"123\"`.

        :param string_value: The string_value of this ExtendedValue.
        :type string_value: str
        """

        self._string_value = string_value
