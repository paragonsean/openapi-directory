# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_source_refresh_daily_schedule import DataSourceRefreshDailySchedule
from openapi_server.models.data_source_refresh_monthly_schedule import DataSourceRefreshMonthlySchedule
from openapi_server.models.data_source_refresh_weekly_schedule import DataSourceRefreshWeeklySchedule
from openapi_server.models.interval import Interval
from openapi_server import util


class DataSourceRefreshSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, daily_schedule: DataSourceRefreshDailySchedule=None, enabled: bool=None, monthly_schedule: DataSourceRefreshMonthlySchedule=None, next_run: Interval=None, refresh_scope: str=None, weekly_schedule: DataSourceRefreshWeeklySchedule=None):
        """DataSourceRefreshSchedule - a model defined in OpenAPI

        :param daily_schedule: The daily_schedule of this DataSourceRefreshSchedule.
        :param enabled: The enabled of this DataSourceRefreshSchedule.
        :param monthly_schedule: The monthly_schedule of this DataSourceRefreshSchedule.
        :param next_run: The next_run of this DataSourceRefreshSchedule.
        :param refresh_scope: The refresh_scope of this DataSourceRefreshSchedule.
        :param weekly_schedule: The weekly_schedule of this DataSourceRefreshSchedule.
        """
        self.openapi_types = {
            'daily_schedule': DataSourceRefreshDailySchedule,
            'enabled': bool,
            'monthly_schedule': DataSourceRefreshMonthlySchedule,
            'next_run': Interval,
            'refresh_scope': str,
            'weekly_schedule': DataSourceRefreshWeeklySchedule
        }

        self.attribute_map = {
            'daily_schedule': 'dailySchedule',
            'enabled': 'enabled',
            'monthly_schedule': 'monthlySchedule',
            'next_run': 'nextRun',
            'refresh_scope': 'refreshScope',
            'weekly_schedule': 'weeklySchedule'
        }

        self._daily_schedule = daily_schedule
        self._enabled = enabled
        self._monthly_schedule = monthly_schedule
        self._next_run = next_run
        self._refresh_scope = refresh_scope
        self._weekly_schedule = weekly_schedule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSourceRefreshSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSourceRefreshSchedule of this DataSourceRefreshSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def daily_schedule(self):
        """Gets the daily_schedule of this DataSourceRefreshSchedule.


        :return: The daily_schedule of this DataSourceRefreshSchedule.
        :rtype: DataSourceRefreshDailySchedule
        """
        return self._daily_schedule

    @daily_schedule.setter
    def daily_schedule(self, daily_schedule):
        """Sets the daily_schedule of this DataSourceRefreshSchedule.


        :param daily_schedule: The daily_schedule of this DataSourceRefreshSchedule.
        :type daily_schedule: DataSourceRefreshDailySchedule
        """

        self._daily_schedule = daily_schedule

    @property
    def enabled(self):
        """Gets the enabled of this DataSourceRefreshSchedule.

        True if the refresh schedule is enabled, or false otherwise.

        :return: The enabled of this DataSourceRefreshSchedule.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DataSourceRefreshSchedule.

        True if the refresh schedule is enabled, or false otherwise.

        :param enabled: The enabled of this DataSourceRefreshSchedule.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def monthly_schedule(self):
        """Gets the monthly_schedule of this DataSourceRefreshSchedule.


        :return: The monthly_schedule of this DataSourceRefreshSchedule.
        :rtype: DataSourceRefreshMonthlySchedule
        """
        return self._monthly_schedule

    @monthly_schedule.setter
    def monthly_schedule(self, monthly_schedule):
        """Sets the monthly_schedule of this DataSourceRefreshSchedule.


        :param monthly_schedule: The monthly_schedule of this DataSourceRefreshSchedule.
        :type monthly_schedule: DataSourceRefreshMonthlySchedule
        """

        self._monthly_schedule = monthly_schedule

    @property
    def next_run(self):
        """Gets the next_run of this DataSourceRefreshSchedule.


        :return: The next_run of this DataSourceRefreshSchedule.
        :rtype: Interval
        """
        return self._next_run

    @next_run.setter
    def next_run(self, next_run):
        """Sets the next_run of this DataSourceRefreshSchedule.


        :param next_run: The next_run of this DataSourceRefreshSchedule.
        :type next_run: Interval
        """

        self._next_run = next_run

    @property
    def refresh_scope(self):
        """Gets the refresh_scope of this DataSourceRefreshSchedule.

        The scope of the refresh. Must be ALL_DATA_SOURCES.

        :return: The refresh_scope of this DataSourceRefreshSchedule.
        :rtype: str
        """
        return self._refresh_scope

    @refresh_scope.setter
    def refresh_scope(self, refresh_scope):
        """Sets the refresh_scope of this DataSourceRefreshSchedule.

        The scope of the refresh. Must be ALL_DATA_SOURCES.

        :param refresh_scope: The refresh_scope of this DataSourceRefreshSchedule.
        :type refresh_scope: str
        """
        allowed_values = ["DATA_SOURCE_REFRESH_SCOPE_UNSPECIFIED", "ALL_DATA_SOURCES"]  # noqa: E501
        if refresh_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `refresh_scope` ({0}), must be one of {1}"
                .format(refresh_scope, allowed_values)
            )

        self._refresh_scope = refresh_scope

    @property
    def weekly_schedule(self):
        """Gets the weekly_schedule of this DataSourceRefreshSchedule.


        :return: The weekly_schedule of this DataSourceRefreshSchedule.
        :rtype: DataSourceRefreshWeeklySchedule
        """
        return self._weekly_schedule

    @weekly_schedule.setter
    def weekly_schedule(self, weekly_schedule):
        """Sets the weekly_schedule of this DataSourceRefreshSchedule.


        :param weekly_schedule: The weekly_schedule of this DataSourceRefreshSchedule.
        :type weekly_schedule: DataSourceRefreshWeeklySchedule
        """

        self._weekly_schedule = weekly_schedule
