# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_values_response import UpdateValuesResponse
from openapi_server import util


class AppendValuesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, spreadsheet_id: str=None, table_range: str=None, updates: UpdateValuesResponse=None):
        """AppendValuesResponse - a model defined in OpenAPI

        :param spreadsheet_id: The spreadsheet_id of this AppendValuesResponse.
        :param table_range: The table_range of this AppendValuesResponse.
        :param updates: The updates of this AppendValuesResponse.
        """
        self.openapi_types = {
            'spreadsheet_id': str,
            'table_range': str,
            'updates': UpdateValuesResponse
        }

        self.attribute_map = {
            'spreadsheet_id': 'spreadsheetId',
            'table_range': 'tableRange',
            'updates': 'updates'
        }

        self._spreadsheet_id = spreadsheet_id
        self._table_range = table_range
        self._updates = updates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppendValuesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppendValuesResponse of this AppendValuesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def spreadsheet_id(self):
        """Gets the spreadsheet_id of this AppendValuesResponse.

        The spreadsheet the updates were applied to.

        :return: The spreadsheet_id of this AppendValuesResponse.
        :rtype: str
        """
        return self._spreadsheet_id

    @spreadsheet_id.setter
    def spreadsheet_id(self, spreadsheet_id):
        """Sets the spreadsheet_id of this AppendValuesResponse.

        The spreadsheet the updates were applied to.

        :param spreadsheet_id: The spreadsheet_id of this AppendValuesResponse.
        :type spreadsheet_id: str
        """

        self._spreadsheet_id = spreadsheet_id

    @property
    def table_range(self):
        """Gets the table_range of this AppendValuesResponse.

        The range (in A1 notation) of the table that values are being appended to (before the values were appended). Empty if no table was found.

        :return: The table_range of this AppendValuesResponse.
        :rtype: str
        """
        return self._table_range

    @table_range.setter
    def table_range(self, table_range):
        """Sets the table_range of this AppendValuesResponse.

        The range (in A1 notation) of the table that values are being appended to (before the values were appended). Empty if no table was found.

        :param table_range: The table_range of this AppendValuesResponse.
        :type table_range: str
        """

        self._table_range = table_range

    @property
    def updates(self):
        """Gets the updates of this AppendValuesResponse.


        :return: The updates of this AppendValuesResponse.
        :rtype: UpdateValuesResponse
        """
        return self._updates

    @updates.setter
    def updates(self, updates):
        """Sets the updates of this AppendValuesResponse.


        :param updates: The updates of this AppendValuesResponse.
        :type updates: UpdateValuesResponse
        """

        self._updates = updates
