# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension_range import DimensionRange
from openapi_server import util


class MoveDimensionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_index: int=None, source: DimensionRange=None):
        """MoveDimensionRequest - a model defined in OpenAPI

        :param destination_index: The destination_index of this MoveDimensionRequest.
        :param source: The source of this MoveDimensionRequest.
        """
        self.openapi_types = {
            'destination_index': int,
            'source': DimensionRange
        }

        self.attribute_map = {
            'destination_index': 'destinationIndex',
            'source': 'source'
        }

        self._destination_index = destination_index
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MoveDimensionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MoveDimensionRequest of this MoveDimensionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_index(self):
        """Gets the destination_index of this MoveDimensionRequest.

        The zero-based start index of where to move the source data to, based on the coordinates *before* the source data is removed from the grid. Existing data will be shifted down or right (depending on the dimension) to make room for the moved dimensions. The source dimensions are removed from the grid, so the the data may end up in a different index than specified. For example, given `A1..A5` of `0, 1, 2, 3, 4` and wanting to move `\"1\"` and `\"2\"` to between `\"3\"` and `\"4\"`, the source would be `ROWS [1..3)`,and the destination index would be `\"4\"` (the zero-based index of row 5). The end result would be `A1..A5` of `0, 3, 1, 2, 4`.

        :return: The destination_index of this MoveDimensionRequest.
        :rtype: int
        """
        return self._destination_index

    @destination_index.setter
    def destination_index(self, destination_index):
        """Sets the destination_index of this MoveDimensionRequest.

        The zero-based start index of where to move the source data to, based on the coordinates *before* the source data is removed from the grid. Existing data will be shifted down or right (depending on the dimension) to make room for the moved dimensions. The source dimensions are removed from the grid, so the the data may end up in a different index than specified. For example, given `A1..A5` of `0, 1, 2, 3, 4` and wanting to move `\"1\"` and `\"2\"` to between `\"3\"` and `\"4\"`, the source would be `ROWS [1..3)`,and the destination index would be `\"4\"` (the zero-based index of row 5). The end result would be `A1..A5` of `0, 3, 1, 2, 4`.

        :param destination_index: The destination_index of this MoveDimensionRequest.
        :type destination_index: int
        """

        self._destination_index = destination_index

    @property
    def source(self):
        """Gets the source of this MoveDimensionRequest.


        :return: The source of this MoveDimensionRequest.
        :rtype: DimensionRange
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this MoveDimensionRequest.


        :param source: The source of this MoveDimensionRequest.
        :type source: DimensionRange
        """

        self._source = source
