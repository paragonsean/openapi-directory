# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.row_data import RowData
from openapi_server import util


class AppendCellsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: str=None, rows: List[RowData]=None, sheet_id: int=None):
        """AppendCellsRequest - a model defined in OpenAPI

        :param fields: The fields of this AppendCellsRequest.
        :param rows: The rows of this AppendCellsRequest.
        :param sheet_id: The sheet_id of this AppendCellsRequest.
        """
        self.openapi_types = {
            'fields': str,
            'rows': List[RowData],
            'sheet_id': int
        }

        self.attribute_map = {
            'fields': 'fields',
            'rows': 'rows',
            'sheet_id': 'sheetId'
        }

        self._fields = fields
        self._rows = rows
        self._sheet_id = sheet_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppendCellsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppendCellsRequest of this AppendCellsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this AppendCellsRequest.

        The fields of CellData that should be updated. At least one field must be specified. The root is the CellData; 'row.values.' should not be specified. A single `\"*\"` can be used as short-hand for listing every field.

        :return: The fields of this AppendCellsRequest.
        :rtype: str
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this AppendCellsRequest.

        The fields of CellData that should be updated. At least one field must be specified. The root is the CellData; 'row.values.' should not be specified. A single `\"*\"` can be used as short-hand for listing every field.

        :param fields: The fields of this AppendCellsRequest.
        :type fields: str
        """

        self._fields = fields

    @property
    def rows(self):
        """Gets the rows of this AppendCellsRequest.

        The data to append.

        :return: The rows of this AppendCellsRequest.
        :rtype: List[RowData]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this AppendCellsRequest.

        The data to append.

        :param rows: The rows of this AppendCellsRequest.
        :type rows: List[RowData]
        """

        self._rows = rows

    @property
    def sheet_id(self):
        """Gets the sheet_id of this AppendCellsRequest.

        The sheet ID to append the data to.

        :return: The sheet_id of this AppendCellsRequest.
        :rtype: int
        """
        return self._sheet_id

    @sheet_id.setter
    def sheet_id(self, sheet_id):
        """Sets the sheet_id of this AppendCellsRequest.

        The sheet ID to append the data to.

        :param sheet_id: The sheet_id of this AppendCellsRequest.
        :type sheet_id: int
        """

        self._sheet_id = sheet_id
