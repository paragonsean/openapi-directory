# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.candlestick_series import CandlestickSeries
from openapi_server import util


class CandlestickData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, close_series: CandlestickSeries=None, high_series: CandlestickSeries=None, low_series: CandlestickSeries=None, open_series: CandlestickSeries=None):
        """CandlestickData - a model defined in OpenAPI

        :param close_series: The close_series of this CandlestickData.
        :param high_series: The high_series of this CandlestickData.
        :param low_series: The low_series of this CandlestickData.
        :param open_series: The open_series of this CandlestickData.
        """
        self.openapi_types = {
            'close_series': CandlestickSeries,
            'high_series': CandlestickSeries,
            'low_series': CandlestickSeries,
            'open_series': CandlestickSeries
        }

        self.attribute_map = {
            'close_series': 'closeSeries',
            'high_series': 'highSeries',
            'low_series': 'lowSeries',
            'open_series': 'openSeries'
        }

        self._close_series = close_series
        self._high_series = high_series
        self._low_series = low_series
        self._open_series = open_series

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CandlestickData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CandlestickData of this CandlestickData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def close_series(self):
        """Gets the close_series of this CandlestickData.


        :return: The close_series of this CandlestickData.
        :rtype: CandlestickSeries
        """
        return self._close_series

    @close_series.setter
    def close_series(self, close_series):
        """Sets the close_series of this CandlestickData.


        :param close_series: The close_series of this CandlestickData.
        :type close_series: CandlestickSeries
        """

        self._close_series = close_series

    @property
    def high_series(self):
        """Gets the high_series of this CandlestickData.


        :return: The high_series of this CandlestickData.
        :rtype: CandlestickSeries
        """
        return self._high_series

    @high_series.setter
    def high_series(self, high_series):
        """Sets the high_series of this CandlestickData.


        :param high_series: The high_series of this CandlestickData.
        :type high_series: CandlestickSeries
        """

        self._high_series = high_series

    @property
    def low_series(self):
        """Gets the low_series of this CandlestickData.


        :return: The low_series of this CandlestickData.
        :rtype: CandlestickSeries
        """
        return self._low_series

    @low_series.setter
    def low_series(self, low_series):
        """Sets the low_series of this CandlestickData.


        :param low_series: The low_series of this CandlestickData.
        :type low_series: CandlestickSeries
        """

        self._low_series = low_series

    @property
    def open_series(self):
        """Gets the open_series of this CandlestickData.


        :return: The open_series of this CandlestickData.
        :rtype: CandlestickSeries
        """
        return self._open_series

    @open_series.setter
    def open_series(self, open_series):
        """Sets the open_series of this CandlestickData.


        :param open_series: The open_series of this CandlestickData.
        :type open_series: CandlestickSeries
        """

        self._open_series = open_series
