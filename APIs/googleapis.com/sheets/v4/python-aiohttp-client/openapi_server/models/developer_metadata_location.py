# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension_range import DimensionRange
from openapi_server import util


class DeveloperMetadataLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimension_range: DimensionRange=None, location_type: str=None, sheet_id: int=None, spreadsheet: bool=None):
        """DeveloperMetadataLocation - a model defined in OpenAPI

        :param dimension_range: The dimension_range of this DeveloperMetadataLocation.
        :param location_type: The location_type of this DeveloperMetadataLocation.
        :param sheet_id: The sheet_id of this DeveloperMetadataLocation.
        :param spreadsheet: The spreadsheet of this DeveloperMetadataLocation.
        """
        self.openapi_types = {
            'dimension_range': DimensionRange,
            'location_type': str,
            'sheet_id': int,
            'spreadsheet': bool
        }

        self.attribute_map = {
            'dimension_range': 'dimensionRange',
            'location_type': 'locationType',
            'sheet_id': 'sheetId',
            'spreadsheet': 'spreadsheet'
        }

        self._dimension_range = dimension_range
        self._location_type = location_type
        self._sheet_id = sheet_id
        self._spreadsheet = spreadsheet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeveloperMetadataLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeveloperMetadataLocation of this DeveloperMetadataLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimension_range(self):
        """Gets the dimension_range of this DeveloperMetadataLocation.


        :return: The dimension_range of this DeveloperMetadataLocation.
        :rtype: DimensionRange
        """
        return self._dimension_range

    @dimension_range.setter
    def dimension_range(self, dimension_range):
        """Sets the dimension_range of this DeveloperMetadataLocation.


        :param dimension_range: The dimension_range of this DeveloperMetadataLocation.
        :type dimension_range: DimensionRange
        """

        self._dimension_range = dimension_range

    @property
    def location_type(self):
        """Gets the location_type of this DeveloperMetadataLocation.

        The type of location this object represents. This field is read-only.

        :return: The location_type of this DeveloperMetadataLocation.
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this DeveloperMetadataLocation.

        The type of location this object represents. This field is read-only.

        :param location_type: The location_type of this DeveloperMetadataLocation.
        :type location_type: str
        """
        allowed_values = ["DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED", "ROW", "COLUMN", "SHEET", "SPREADSHEET"]  # noqa: E501
        if location_type not in allowed_values:
            raise ValueError(
                "Invalid value for `location_type` ({0}), must be one of {1}"
                .format(location_type, allowed_values)
            )

        self._location_type = location_type

    @property
    def sheet_id(self):
        """Gets the sheet_id of this DeveloperMetadataLocation.

        The ID of the sheet when metadata is associated with an entire sheet.

        :return: The sheet_id of this DeveloperMetadataLocation.
        :rtype: int
        """
        return self._sheet_id

    @sheet_id.setter
    def sheet_id(self, sheet_id):
        """Sets the sheet_id of this DeveloperMetadataLocation.

        The ID of the sheet when metadata is associated with an entire sheet.

        :param sheet_id: The sheet_id of this DeveloperMetadataLocation.
        :type sheet_id: int
        """

        self._sheet_id = sheet_id

    @property
    def spreadsheet(self):
        """Gets the spreadsheet of this DeveloperMetadataLocation.

        True when metadata is associated with an entire spreadsheet.

        :return: The spreadsheet of this DeveloperMetadataLocation.
        :rtype: bool
        """
        return self._spreadsheet

    @spreadsheet.setter
    def spreadsheet(self, spreadsheet):
        """Sets the spreadsheet of this DeveloperMetadataLocation.

        True when metadata is associated with an entire spreadsheet.

        :param spreadsheet: The spreadsheet of this DeveloperMetadataLocation.
        :type spreadsheet: bool
        """

        self._spreadsheet = spreadsheet
