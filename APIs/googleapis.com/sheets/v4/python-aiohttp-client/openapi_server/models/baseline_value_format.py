# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.color import Color
from openapi_server.models.color_style import ColorStyle
from openapi_server.models.text_format import TextFormat
from openapi_server.models.text_position import TextPosition
from openapi_server import util


class BaselineValueFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comparison_type: str=None, description: str=None, negative_color: Color=None, negative_color_style: ColorStyle=None, position: TextPosition=None, positive_color: Color=None, positive_color_style: ColorStyle=None, text_format: TextFormat=None):
        """BaselineValueFormat - a model defined in OpenAPI

        :param comparison_type: The comparison_type of this BaselineValueFormat.
        :param description: The description of this BaselineValueFormat.
        :param negative_color: The negative_color of this BaselineValueFormat.
        :param negative_color_style: The negative_color_style of this BaselineValueFormat.
        :param position: The position of this BaselineValueFormat.
        :param positive_color: The positive_color of this BaselineValueFormat.
        :param positive_color_style: The positive_color_style of this BaselineValueFormat.
        :param text_format: The text_format of this BaselineValueFormat.
        """
        self.openapi_types = {
            'comparison_type': str,
            'description': str,
            'negative_color': Color,
            'negative_color_style': ColorStyle,
            'position': TextPosition,
            'positive_color': Color,
            'positive_color_style': ColorStyle,
            'text_format': TextFormat
        }

        self.attribute_map = {
            'comparison_type': 'comparisonType',
            'description': 'description',
            'negative_color': 'negativeColor',
            'negative_color_style': 'negativeColorStyle',
            'position': 'position',
            'positive_color': 'positiveColor',
            'positive_color_style': 'positiveColorStyle',
            'text_format': 'textFormat'
        }

        self._comparison_type = comparison_type
        self._description = description
        self._negative_color = negative_color
        self._negative_color_style = negative_color_style
        self._position = position
        self._positive_color = positive_color
        self._positive_color_style = positive_color_style
        self._text_format = text_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BaselineValueFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BaselineValueFormat of this BaselineValueFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comparison_type(self):
        """Gets the comparison_type of this BaselineValueFormat.

        The comparison type of key value with baseline value.

        :return: The comparison_type of this BaselineValueFormat.
        :rtype: str
        """
        return self._comparison_type

    @comparison_type.setter
    def comparison_type(self, comparison_type):
        """Sets the comparison_type of this BaselineValueFormat.

        The comparison type of key value with baseline value.

        :param comparison_type: The comparison_type of this BaselineValueFormat.
        :type comparison_type: str
        """
        allowed_values = ["COMPARISON_TYPE_UNDEFINED", "ABSOLUTE_DIFFERENCE", "PERCENTAGE_DIFFERENCE"]  # noqa: E501
        if comparison_type not in allowed_values:
            raise ValueError(
                "Invalid value for `comparison_type` ({0}), must be one of {1}"
                .format(comparison_type, allowed_values)
            )

        self._comparison_type = comparison_type

    @property
    def description(self):
        """Gets the description of this BaselineValueFormat.

        Description which is appended after the baseline value. This field is optional.

        :return: The description of this BaselineValueFormat.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BaselineValueFormat.

        Description which is appended after the baseline value. This field is optional.

        :param description: The description of this BaselineValueFormat.
        :type description: str
        """

        self._description = description

    @property
    def negative_color(self):
        """Gets the negative_color of this BaselineValueFormat.


        :return: The negative_color of this BaselineValueFormat.
        :rtype: Color
        """
        return self._negative_color

    @negative_color.setter
    def negative_color(self, negative_color):
        """Sets the negative_color of this BaselineValueFormat.


        :param negative_color: The negative_color of this BaselineValueFormat.
        :type negative_color: Color
        """

        self._negative_color = negative_color

    @property
    def negative_color_style(self):
        """Gets the negative_color_style of this BaselineValueFormat.


        :return: The negative_color_style of this BaselineValueFormat.
        :rtype: ColorStyle
        """
        return self._negative_color_style

    @negative_color_style.setter
    def negative_color_style(self, negative_color_style):
        """Sets the negative_color_style of this BaselineValueFormat.


        :param negative_color_style: The negative_color_style of this BaselineValueFormat.
        :type negative_color_style: ColorStyle
        """

        self._negative_color_style = negative_color_style

    @property
    def position(self):
        """Gets the position of this BaselineValueFormat.


        :return: The position of this BaselineValueFormat.
        :rtype: TextPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this BaselineValueFormat.


        :param position: The position of this BaselineValueFormat.
        :type position: TextPosition
        """

        self._position = position

    @property
    def positive_color(self):
        """Gets the positive_color of this BaselineValueFormat.


        :return: The positive_color of this BaselineValueFormat.
        :rtype: Color
        """
        return self._positive_color

    @positive_color.setter
    def positive_color(self, positive_color):
        """Sets the positive_color of this BaselineValueFormat.


        :param positive_color: The positive_color of this BaselineValueFormat.
        :type positive_color: Color
        """

        self._positive_color = positive_color

    @property
    def positive_color_style(self):
        """Gets the positive_color_style of this BaselineValueFormat.


        :return: The positive_color_style of this BaselineValueFormat.
        :rtype: ColorStyle
        """
        return self._positive_color_style

    @positive_color_style.setter
    def positive_color_style(self, positive_color_style):
        """Sets the positive_color_style of this BaselineValueFormat.


        :param positive_color_style: The positive_color_style of this BaselineValueFormat.
        :type positive_color_style: ColorStyle
        """

        self._positive_color_style = positive_color_style

    @property
    def text_format(self):
        """Gets the text_format of this BaselineValueFormat.


        :return: The text_format of this BaselineValueFormat.
        :rtype: TextFormat
        """
        return self._text_format

    @text_format.setter
    def text_format(self, text_format):
        """Sets the text_format of this BaselineValueFormat.


        :param text_format: The text_format of this BaselineValueFormat.
        :type text_format: TextFormat
        """

        self._text_format = text_format
