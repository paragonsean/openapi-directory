# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_values_by_data_filter_response import UpdateValuesByDataFilterResponse
from openapi_server import util


class BatchUpdateValuesByDataFilterResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, responses: List[UpdateValuesByDataFilterResponse]=None, spreadsheet_id: str=None, total_updated_cells: int=None, total_updated_columns: int=None, total_updated_rows: int=None, total_updated_sheets: int=None):
        """BatchUpdateValuesByDataFilterResponse - a model defined in OpenAPI

        :param responses: The responses of this BatchUpdateValuesByDataFilterResponse.
        :param spreadsheet_id: The spreadsheet_id of this BatchUpdateValuesByDataFilterResponse.
        :param total_updated_cells: The total_updated_cells of this BatchUpdateValuesByDataFilterResponse.
        :param total_updated_columns: The total_updated_columns of this BatchUpdateValuesByDataFilterResponse.
        :param total_updated_rows: The total_updated_rows of this BatchUpdateValuesByDataFilterResponse.
        :param total_updated_sheets: The total_updated_sheets of this BatchUpdateValuesByDataFilterResponse.
        """
        self.openapi_types = {
            'responses': List[UpdateValuesByDataFilterResponse],
            'spreadsheet_id': str,
            'total_updated_cells': int,
            'total_updated_columns': int,
            'total_updated_rows': int,
            'total_updated_sheets': int
        }

        self.attribute_map = {
            'responses': 'responses',
            'spreadsheet_id': 'spreadsheetId',
            'total_updated_cells': 'totalUpdatedCells',
            'total_updated_columns': 'totalUpdatedColumns',
            'total_updated_rows': 'totalUpdatedRows',
            'total_updated_sheets': 'totalUpdatedSheets'
        }

        self._responses = responses
        self._spreadsheet_id = spreadsheet_id
        self._total_updated_cells = total_updated_cells
        self._total_updated_columns = total_updated_columns
        self._total_updated_rows = total_updated_rows
        self._total_updated_sheets = total_updated_sheets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchUpdateValuesByDataFilterResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchUpdateValuesByDataFilterResponse of this BatchUpdateValuesByDataFilterResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def responses(self):
        """Gets the responses of this BatchUpdateValuesByDataFilterResponse.

        The response for each range updated.

        :return: The responses of this BatchUpdateValuesByDataFilterResponse.
        :rtype: List[UpdateValuesByDataFilterResponse]
        """
        return self._responses

    @responses.setter
    def responses(self, responses):
        """Sets the responses of this BatchUpdateValuesByDataFilterResponse.

        The response for each range updated.

        :param responses: The responses of this BatchUpdateValuesByDataFilterResponse.
        :type responses: List[UpdateValuesByDataFilterResponse]
        """

        self._responses = responses

    @property
    def spreadsheet_id(self):
        """Gets the spreadsheet_id of this BatchUpdateValuesByDataFilterResponse.

        The spreadsheet the updates were applied to.

        :return: The spreadsheet_id of this BatchUpdateValuesByDataFilterResponse.
        :rtype: str
        """
        return self._spreadsheet_id

    @spreadsheet_id.setter
    def spreadsheet_id(self, spreadsheet_id):
        """Sets the spreadsheet_id of this BatchUpdateValuesByDataFilterResponse.

        The spreadsheet the updates were applied to.

        :param spreadsheet_id: The spreadsheet_id of this BatchUpdateValuesByDataFilterResponse.
        :type spreadsheet_id: str
        """

        self._spreadsheet_id = spreadsheet_id

    @property
    def total_updated_cells(self):
        """Gets the total_updated_cells of this BatchUpdateValuesByDataFilterResponse.

        The total number of cells updated.

        :return: The total_updated_cells of this BatchUpdateValuesByDataFilterResponse.
        :rtype: int
        """
        return self._total_updated_cells

    @total_updated_cells.setter
    def total_updated_cells(self, total_updated_cells):
        """Sets the total_updated_cells of this BatchUpdateValuesByDataFilterResponse.

        The total number of cells updated.

        :param total_updated_cells: The total_updated_cells of this BatchUpdateValuesByDataFilterResponse.
        :type total_updated_cells: int
        """

        self._total_updated_cells = total_updated_cells

    @property
    def total_updated_columns(self):
        """Gets the total_updated_columns of this BatchUpdateValuesByDataFilterResponse.

        The total number of columns where at least one cell in the column was updated.

        :return: The total_updated_columns of this BatchUpdateValuesByDataFilterResponse.
        :rtype: int
        """
        return self._total_updated_columns

    @total_updated_columns.setter
    def total_updated_columns(self, total_updated_columns):
        """Sets the total_updated_columns of this BatchUpdateValuesByDataFilterResponse.

        The total number of columns where at least one cell in the column was updated.

        :param total_updated_columns: The total_updated_columns of this BatchUpdateValuesByDataFilterResponse.
        :type total_updated_columns: int
        """

        self._total_updated_columns = total_updated_columns

    @property
    def total_updated_rows(self):
        """Gets the total_updated_rows of this BatchUpdateValuesByDataFilterResponse.

        The total number of rows where at least one cell in the row was updated.

        :return: The total_updated_rows of this BatchUpdateValuesByDataFilterResponse.
        :rtype: int
        """
        return self._total_updated_rows

    @total_updated_rows.setter
    def total_updated_rows(self, total_updated_rows):
        """Sets the total_updated_rows of this BatchUpdateValuesByDataFilterResponse.

        The total number of rows where at least one cell in the row was updated.

        :param total_updated_rows: The total_updated_rows of this BatchUpdateValuesByDataFilterResponse.
        :type total_updated_rows: int
        """

        self._total_updated_rows = total_updated_rows

    @property
    def total_updated_sheets(self):
        """Gets the total_updated_sheets of this BatchUpdateValuesByDataFilterResponse.

        The total number of sheets where at least one cell in the sheet was updated.

        :return: The total_updated_sheets of this BatchUpdateValuesByDataFilterResponse.
        :rtype: int
        """
        return self._total_updated_sheets

    @total_updated_sheets.setter
    def total_updated_sheets(self, total_updated_sheets):
        """Sets the total_updated_sheets of this BatchUpdateValuesByDataFilterResponse.

        The total number of sheets where at least one cell in the sheet was updated.

        :param total_updated_sheets: The total_updated_sheets of this BatchUpdateValuesByDataFilterResponse.
        :type total_updated_sheets: int
        """

        self._total_updated_sheets = total_updated_sheets
