# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_source_column import DataSourceColumn
from openapi_server.models.data_source_spec import DataSourceSpec
from openapi_server import util


class DataSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calculated_columns: List[DataSourceColumn]=None, data_source_id: str=None, sheet_id: int=None, spec: DataSourceSpec=None):
        """DataSource - a model defined in OpenAPI

        :param calculated_columns: The calculated_columns of this DataSource.
        :param data_source_id: The data_source_id of this DataSource.
        :param sheet_id: The sheet_id of this DataSource.
        :param spec: The spec of this DataSource.
        """
        self.openapi_types = {
            'calculated_columns': List[DataSourceColumn],
            'data_source_id': str,
            'sheet_id': int,
            'spec': DataSourceSpec
        }

        self.attribute_map = {
            'calculated_columns': 'calculatedColumns',
            'data_source_id': 'dataSourceId',
            'sheet_id': 'sheetId',
            'spec': 'spec'
        }

        self._calculated_columns = calculated_columns
        self._data_source_id = data_source_id
        self._sheet_id = sheet_id
        self._spec = spec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSource of this DataSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calculated_columns(self):
        """Gets the calculated_columns of this DataSource.

        All calculated columns in the data source.

        :return: The calculated_columns of this DataSource.
        :rtype: List[DataSourceColumn]
        """
        return self._calculated_columns

    @calculated_columns.setter
    def calculated_columns(self, calculated_columns):
        """Sets the calculated_columns of this DataSource.

        All calculated columns in the data source.

        :param calculated_columns: The calculated_columns of this DataSource.
        :type calculated_columns: List[DataSourceColumn]
        """

        self._calculated_columns = calculated_columns

    @property
    def data_source_id(self):
        """Gets the data_source_id of this DataSource.

        The spreadsheet-scoped unique ID that identifies the data source. Example: 1080547365.

        :return: The data_source_id of this DataSource.
        :rtype: str
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """Sets the data_source_id of this DataSource.

        The spreadsheet-scoped unique ID that identifies the data source. Example: 1080547365.

        :param data_source_id: The data_source_id of this DataSource.
        :type data_source_id: str
        """

        self._data_source_id = data_source_id

    @property
    def sheet_id(self):
        """Gets the sheet_id of this DataSource.

        The ID of the Sheet connected with the data source. The field cannot be changed once set. When creating a data source, an associated DATA_SOURCE sheet is also created, if the field is not specified, the ID of the created sheet will be randomly generated.

        :return: The sheet_id of this DataSource.
        :rtype: int
        """
        return self._sheet_id

    @sheet_id.setter
    def sheet_id(self, sheet_id):
        """Sets the sheet_id of this DataSource.

        The ID of the Sheet connected with the data source. The field cannot be changed once set. When creating a data source, an associated DATA_SOURCE sheet is also created, if the field is not specified, the ID of the created sheet will be randomly generated.

        :param sheet_id: The sheet_id of this DataSource.
        :type sheet_id: int
        """

        self._sheet_id = sheet_id

    @property
    def spec(self):
        """Gets the spec of this DataSource.


        :return: The spec of this DataSource.
        :rtype: DataSourceSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this DataSource.


        :param spec: The spec of this DataSource.
        :type spec: DataSourceSpec
        """

        self._spec = spec
