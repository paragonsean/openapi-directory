# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_source_column_reference import DataSourceColumnReference
from openapi_server.models.developer_metadata import DeveloperMetadata
from openapi_server import util


class DimensionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source_column_reference: DataSourceColumnReference=None, developer_metadata: List[DeveloperMetadata]=None, hidden_by_filter: bool=None, hidden_by_user: bool=None, pixel_size: int=None):
        """DimensionProperties - a model defined in OpenAPI

        :param data_source_column_reference: The data_source_column_reference of this DimensionProperties.
        :param developer_metadata: The developer_metadata of this DimensionProperties.
        :param hidden_by_filter: The hidden_by_filter of this DimensionProperties.
        :param hidden_by_user: The hidden_by_user of this DimensionProperties.
        :param pixel_size: The pixel_size of this DimensionProperties.
        """
        self.openapi_types = {
            'data_source_column_reference': DataSourceColumnReference,
            'developer_metadata': List[DeveloperMetadata],
            'hidden_by_filter': bool,
            'hidden_by_user': bool,
            'pixel_size': int
        }

        self.attribute_map = {
            'data_source_column_reference': 'dataSourceColumnReference',
            'developer_metadata': 'developerMetadata',
            'hidden_by_filter': 'hiddenByFilter',
            'hidden_by_user': 'hiddenByUser',
            'pixel_size': 'pixelSize'
        }

        self._data_source_column_reference = data_source_column_reference
        self._developer_metadata = developer_metadata
        self._hidden_by_filter = hidden_by_filter
        self._hidden_by_user = hidden_by_user
        self._pixel_size = pixel_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DimensionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DimensionProperties of this DimensionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source_column_reference(self):
        """Gets the data_source_column_reference of this DimensionProperties.


        :return: The data_source_column_reference of this DimensionProperties.
        :rtype: DataSourceColumnReference
        """
        return self._data_source_column_reference

    @data_source_column_reference.setter
    def data_source_column_reference(self, data_source_column_reference):
        """Sets the data_source_column_reference of this DimensionProperties.


        :param data_source_column_reference: The data_source_column_reference of this DimensionProperties.
        :type data_source_column_reference: DataSourceColumnReference
        """

        self._data_source_column_reference = data_source_column_reference

    @property
    def developer_metadata(self):
        """Gets the developer_metadata of this DimensionProperties.

        The developer metadata associated with a single row or column.

        :return: The developer_metadata of this DimensionProperties.
        :rtype: List[DeveloperMetadata]
        """
        return self._developer_metadata

    @developer_metadata.setter
    def developer_metadata(self, developer_metadata):
        """Sets the developer_metadata of this DimensionProperties.

        The developer metadata associated with a single row or column.

        :param developer_metadata: The developer_metadata of this DimensionProperties.
        :type developer_metadata: List[DeveloperMetadata]
        """

        self._developer_metadata = developer_metadata

    @property
    def hidden_by_filter(self):
        """Gets the hidden_by_filter of this DimensionProperties.

        True if this dimension is being filtered. This field is read-only.

        :return: The hidden_by_filter of this DimensionProperties.
        :rtype: bool
        """
        return self._hidden_by_filter

    @hidden_by_filter.setter
    def hidden_by_filter(self, hidden_by_filter):
        """Sets the hidden_by_filter of this DimensionProperties.

        True if this dimension is being filtered. This field is read-only.

        :param hidden_by_filter: The hidden_by_filter of this DimensionProperties.
        :type hidden_by_filter: bool
        """

        self._hidden_by_filter = hidden_by_filter

    @property
    def hidden_by_user(self):
        """Gets the hidden_by_user of this DimensionProperties.

        True if this dimension is explicitly hidden.

        :return: The hidden_by_user of this DimensionProperties.
        :rtype: bool
        """
        return self._hidden_by_user

    @hidden_by_user.setter
    def hidden_by_user(self, hidden_by_user):
        """Sets the hidden_by_user of this DimensionProperties.

        True if this dimension is explicitly hidden.

        :param hidden_by_user: The hidden_by_user of this DimensionProperties.
        :type hidden_by_user: bool
        """

        self._hidden_by_user = hidden_by_user

    @property
    def pixel_size(self):
        """Gets the pixel_size of this DimensionProperties.

        The height (if a row) or width (if a column) of the dimension in pixels.

        :return: The pixel_size of this DimensionProperties.
        :rtype: int
        """
        return self._pixel_size

    @pixel_size.setter
    def pixel_size(self, pixel_size):
        """Sets the pixel_size of this DimensionProperties.

        The height (if a row) or width (if a column) of the dimension in pixels.

        :param pixel_size: The pixel_size of this DimensionProperties.
        :type pixel_size: int
        """

        self._pixel_size = pixel_size
