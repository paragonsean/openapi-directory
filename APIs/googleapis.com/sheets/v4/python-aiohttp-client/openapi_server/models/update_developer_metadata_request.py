# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_filter import DataFilter
from openapi_server.models.developer_metadata import DeveloperMetadata
from openapi_server import util


class UpdateDeveloperMetadataRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_filters: List[DataFilter]=None, developer_metadata: DeveloperMetadata=None, fields: str=None):
        """UpdateDeveloperMetadataRequest - a model defined in OpenAPI

        :param data_filters: The data_filters of this UpdateDeveloperMetadataRequest.
        :param developer_metadata: The developer_metadata of this UpdateDeveloperMetadataRequest.
        :param fields: The fields of this UpdateDeveloperMetadataRequest.
        """
        self.openapi_types = {
            'data_filters': List[DataFilter],
            'developer_metadata': DeveloperMetadata,
            'fields': str
        }

        self.attribute_map = {
            'data_filters': 'dataFilters',
            'developer_metadata': 'developerMetadata',
            'fields': 'fields'
        }

        self._data_filters = data_filters
        self._developer_metadata = developer_metadata
        self._fields = fields

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDeveloperMetadataRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDeveloperMetadataRequest of this UpdateDeveloperMetadataRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_filters(self):
        """Gets the data_filters of this UpdateDeveloperMetadataRequest.

        The filters matching the developer metadata entries to update.

        :return: The data_filters of this UpdateDeveloperMetadataRequest.
        :rtype: List[DataFilter]
        """
        return self._data_filters

    @data_filters.setter
    def data_filters(self, data_filters):
        """Sets the data_filters of this UpdateDeveloperMetadataRequest.

        The filters matching the developer metadata entries to update.

        :param data_filters: The data_filters of this UpdateDeveloperMetadataRequest.
        :type data_filters: List[DataFilter]
        """

        self._data_filters = data_filters

    @property
    def developer_metadata(self):
        """Gets the developer_metadata of this UpdateDeveloperMetadataRequest.


        :return: The developer_metadata of this UpdateDeveloperMetadataRequest.
        :rtype: DeveloperMetadata
        """
        return self._developer_metadata

    @developer_metadata.setter
    def developer_metadata(self, developer_metadata):
        """Sets the developer_metadata of this UpdateDeveloperMetadataRequest.


        :param developer_metadata: The developer_metadata of this UpdateDeveloperMetadataRequest.
        :type developer_metadata: DeveloperMetadata
        """

        self._developer_metadata = developer_metadata

    @property
    def fields(self):
        """Gets the fields of this UpdateDeveloperMetadataRequest.

        The fields that should be updated. At least one field must be specified. The root `developerMetadata` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field.

        :return: The fields of this UpdateDeveloperMetadataRequest.
        :rtype: str
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this UpdateDeveloperMetadataRequest.

        The fields that should be updated. At least one field must be specified. The root `developerMetadata` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field.

        :param fields: The fields of this UpdateDeveloperMetadataRequest.
        :type fields: str
        """

        self._fields = fields
