# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cell_data import CellData
from openapi_server.models.grid_range import GridRange
from openapi_server import util


class RepeatCellRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cell: CellData=None, fields: str=None, range: GridRange=None):
        """RepeatCellRequest - a model defined in OpenAPI

        :param cell: The cell of this RepeatCellRequest.
        :param fields: The fields of this RepeatCellRequest.
        :param range: The range of this RepeatCellRequest.
        """
        self.openapi_types = {
            'cell': CellData,
            'fields': str,
            'range': GridRange
        }

        self.attribute_map = {
            'cell': 'cell',
            'fields': 'fields',
            'range': 'range'
        }

        self._cell = cell
        self._fields = fields
        self._range = range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepeatCellRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepeatCellRequest of this RepeatCellRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cell(self):
        """Gets the cell of this RepeatCellRequest.


        :return: The cell of this RepeatCellRequest.
        :rtype: CellData
        """
        return self._cell

    @cell.setter
    def cell(self, cell):
        """Sets the cell of this RepeatCellRequest.


        :param cell: The cell of this RepeatCellRequest.
        :type cell: CellData
        """

        self._cell = cell

    @property
    def fields(self):
        """Gets the fields of this RepeatCellRequest.

        The fields that should be updated. At least one field must be specified. The root `cell` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field.

        :return: The fields of this RepeatCellRequest.
        :rtype: str
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this RepeatCellRequest.

        The fields that should be updated. At least one field must be specified. The root `cell` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field.

        :param fields: The fields of this RepeatCellRequest.
        :type fields: str
        """

        self._fields = fields

    @property
    def range(self):
        """Gets the range of this RepeatCellRequest.


        :return: The range of this RepeatCellRequest.
        :rtype: GridRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this RepeatCellRequest.


        :param range: The range of this RepeatCellRequest.
        :type range: GridRange
        """

        self._range = range
