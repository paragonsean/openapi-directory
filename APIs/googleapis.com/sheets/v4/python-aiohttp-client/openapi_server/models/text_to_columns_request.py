# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.grid_range import GridRange
from openapi_server import util


class TextToColumnsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delimiter: str=None, delimiter_type: str=None, source: GridRange=None):
        """TextToColumnsRequest - a model defined in OpenAPI

        :param delimiter: The delimiter of this TextToColumnsRequest.
        :param delimiter_type: The delimiter_type of this TextToColumnsRequest.
        :param source: The source of this TextToColumnsRequest.
        """
        self.openapi_types = {
            'delimiter': str,
            'delimiter_type': str,
            'source': GridRange
        }

        self.attribute_map = {
            'delimiter': 'delimiter',
            'delimiter_type': 'delimiterType',
            'source': 'source'
        }

        self._delimiter = delimiter
        self._delimiter_type = delimiter_type
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextToColumnsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextToColumnsRequest of this TextToColumnsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delimiter(self):
        """Gets the delimiter of this TextToColumnsRequest.

        The delimiter to use. Used only if delimiterType is CUSTOM.

        :return: The delimiter of this TextToColumnsRequest.
        :rtype: str
        """
        return self._delimiter

    @delimiter.setter
    def delimiter(self, delimiter):
        """Sets the delimiter of this TextToColumnsRequest.

        The delimiter to use. Used only if delimiterType is CUSTOM.

        :param delimiter: The delimiter of this TextToColumnsRequest.
        :type delimiter: str
        """

        self._delimiter = delimiter

    @property
    def delimiter_type(self):
        """Gets the delimiter_type of this TextToColumnsRequest.

        The delimiter type to use.

        :return: The delimiter_type of this TextToColumnsRequest.
        :rtype: str
        """
        return self._delimiter_type

    @delimiter_type.setter
    def delimiter_type(self, delimiter_type):
        """Sets the delimiter_type of this TextToColumnsRequest.

        The delimiter type to use.

        :param delimiter_type: The delimiter_type of this TextToColumnsRequest.
        :type delimiter_type: str
        """
        allowed_values = ["DELIMITER_TYPE_UNSPECIFIED", "COMMA", "SEMICOLON", "PERIOD", "SPACE", "CUSTOM", "AUTODETECT"]  # noqa: E501
        if delimiter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `delimiter_type` ({0}), must be one of {1}"
                .format(delimiter_type, allowed_values)
            )

        self._delimiter_type = delimiter_type

    @property
    def source(self):
        """Gets the source of this TextToColumnsRequest.


        :return: The source of this TextToColumnsRequest.
        :rtype: GridRange
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TextToColumnsRequest.


        :param source: The source of this TextToColumnsRequest.
        :type source: GridRange
        """

        self._source = source
