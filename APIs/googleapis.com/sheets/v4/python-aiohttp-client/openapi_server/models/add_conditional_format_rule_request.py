# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conditional_format_rule import ConditionalFormatRule
from openapi_server import util


class AddConditionalFormatRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index: int=None, rule: ConditionalFormatRule=None):
        """AddConditionalFormatRuleRequest - a model defined in OpenAPI

        :param index: The index of this AddConditionalFormatRuleRequest.
        :param rule: The rule of this AddConditionalFormatRuleRequest.
        """
        self.openapi_types = {
            'index': int,
            'rule': ConditionalFormatRule
        }

        self.attribute_map = {
            'index': 'index',
            'rule': 'rule'
        }

        self._index = index
        self._rule = rule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddConditionalFormatRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddConditionalFormatRuleRequest of this AddConditionalFormatRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index(self):
        """Gets the index of this AddConditionalFormatRuleRequest.

        The zero-based index where the rule should be inserted.

        :return: The index of this AddConditionalFormatRuleRequest.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this AddConditionalFormatRuleRequest.

        The zero-based index where the rule should be inserted.

        :param index: The index of this AddConditionalFormatRuleRequest.
        :type index: int
        """

        self._index = index

    @property
    def rule(self):
        """Gets the rule of this AddConditionalFormatRuleRequest.


        :return: The rule of this AddConditionalFormatRuleRequest.
        :rtype: ConditionalFormatRule
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this AddConditionalFormatRuleRequest.


        :param rule: The rule of this AddConditionalFormatRuleRequest.
        :type rule: ConditionalFormatRule
        """

        self._rule = rule
