# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppendDimensionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimension: str=None, length: int=None, sheet_id: int=None):
        """AppendDimensionRequest - a model defined in OpenAPI

        :param dimension: The dimension of this AppendDimensionRequest.
        :param length: The length of this AppendDimensionRequest.
        :param sheet_id: The sheet_id of this AppendDimensionRequest.
        """
        self.openapi_types = {
            'dimension': str,
            'length': int,
            'sheet_id': int
        }

        self.attribute_map = {
            'dimension': 'dimension',
            'length': 'length',
            'sheet_id': 'sheetId'
        }

        self._dimension = dimension
        self._length = length
        self._sheet_id = sheet_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppendDimensionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppendDimensionRequest of this AppendDimensionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimension(self):
        """Gets the dimension of this AppendDimensionRequest.

        Whether rows or columns should be appended.

        :return: The dimension of this AppendDimensionRequest.
        :rtype: str
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this AppendDimensionRequest.

        Whether rows or columns should be appended.

        :param dimension: The dimension of this AppendDimensionRequest.
        :type dimension: str
        """
        allowed_values = ["DIMENSION_UNSPECIFIED", "ROWS", "COLUMNS"]  # noqa: E501
        if dimension not in allowed_values:
            raise ValueError(
                "Invalid value for `dimension` ({0}), must be one of {1}"
                .format(dimension, allowed_values)
            )

        self._dimension = dimension

    @property
    def length(self):
        """Gets the length of this AppendDimensionRequest.

        The number of rows or columns to append.

        :return: The length of this AppendDimensionRequest.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this AppendDimensionRequest.

        The number of rows or columns to append.

        :param length: The length of this AppendDimensionRequest.
        :type length: int
        """

        self._length = length

    @property
    def sheet_id(self):
        """Gets the sheet_id of this AppendDimensionRequest.

        The sheet to append rows or columns to.

        :return: The sheet_id of this AppendDimensionRequest.
        :rtype: int
        """
        return self._sheet_id

    @sheet_id.setter
    def sheet_id(self, sheet_id):
        """Sets the sheet_id of this AppendDimensionRequest.

        The sheet to append rows or columns to.

        :param sheet_id: The sheet_id of this AppendDimensionRequest.
        :type sheet_id: int
        """

        self._sheet_id = sheet_id
