# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_execution_status import DataExecutionStatus
from openapi_server.models.data_source_column_reference import DataSourceColumnReference
from openapi_server.models.filter_spec import FilterSpec
from openapi_server.models.sort_spec import SortSpec
from openapi_server import util


class DataSourceTable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_selection_type: str=None, columns: List[DataSourceColumnReference]=None, data_execution_status: DataExecutionStatus=None, data_source_id: str=None, filter_specs: List[FilterSpec]=None, row_limit: int=None, sort_specs: List[SortSpec]=None):
        """DataSourceTable - a model defined in OpenAPI

        :param column_selection_type: The column_selection_type of this DataSourceTable.
        :param columns: The columns of this DataSourceTable.
        :param data_execution_status: The data_execution_status of this DataSourceTable.
        :param data_source_id: The data_source_id of this DataSourceTable.
        :param filter_specs: The filter_specs of this DataSourceTable.
        :param row_limit: The row_limit of this DataSourceTable.
        :param sort_specs: The sort_specs of this DataSourceTable.
        """
        self.openapi_types = {
            'column_selection_type': str,
            'columns': List[DataSourceColumnReference],
            'data_execution_status': DataExecutionStatus,
            'data_source_id': str,
            'filter_specs': List[FilterSpec],
            'row_limit': int,
            'sort_specs': List[SortSpec]
        }

        self.attribute_map = {
            'column_selection_type': 'columnSelectionType',
            'columns': 'columns',
            'data_execution_status': 'dataExecutionStatus',
            'data_source_id': 'dataSourceId',
            'filter_specs': 'filterSpecs',
            'row_limit': 'rowLimit',
            'sort_specs': 'sortSpecs'
        }

        self._column_selection_type = column_selection_type
        self._columns = columns
        self._data_execution_status = data_execution_status
        self._data_source_id = data_source_id
        self._filter_specs = filter_specs
        self._row_limit = row_limit
        self._sort_specs = sort_specs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSourceTable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSourceTable of this DataSourceTable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_selection_type(self):
        """Gets the column_selection_type of this DataSourceTable.

        The type to select columns for the data source table. Defaults to SELECTED.

        :return: The column_selection_type of this DataSourceTable.
        :rtype: str
        """
        return self._column_selection_type

    @column_selection_type.setter
    def column_selection_type(self, column_selection_type):
        """Sets the column_selection_type of this DataSourceTable.

        The type to select columns for the data source table. Defaults to SELECTED.

        :param column_selection_type: The column_selection_type of this DataSourceTable.
        :type column_selection_type: str
        """
        allowed_values = ["DATA_SOURCE_TABLE_COLUMN_SELECTION_TYPE_UNSPECIFIED", "SELECTED", "SYNC_ALL"]  # noqa: E501
        if column_selection_type not in allowed_values:
            raise ValueError(
                "Invalid value for `column_selection_type` ({0}), must be one of {1}"
                .format(column_selection_type, allowed_values)
            )

        self._column_selection_type = column_selection_type

    @property
    def columns(self):
        """Gets the columns of this DataSourceTable.

        Columns selected for the data source table. The column_selection_type must be SELECTED.

        :return: The columns of this DataSourceTable.
        :rtype: List[DataSourceColumnReference]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this DataSourceTable.

        Columns selected for the data source table. The column_selection_type must be SELECTED.

        :param columns: The columns of this DataSourceTable.
        :type columns: List[DataSourceColumnReference]
        """

        self._columns = columns

    @property
    def data_execution_status(self):
        """Gets the data_execution_status of this DataSourceTable.


        :return: The data_execution_status of this DataSourceTable.
        :rtype: DataExecutionStatus
        """
        return self._data_execution_status

    @data_execution_status.setter
    def data_execution_status(self, data_execution_status):
        """Sets the data_execution_status of this DataSourceTable.


        :param data_execution_status: The data_execution_status of this DataSourceTable.
        :type data_execution_status: DataExecutionStatus
        """

        self._data_execution_status = data_execution_status

    @property
    def data_source_id(self):
        """Gets the data_source_id of this DataSourceTable.

        The ID of the data source the data source table is associated with.

        :return: The data_source_id of this DataSourceTable.
        :rtype: str
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """Sets the data_source_id of this DataSourceTable.

        The ID of the data source the data source table is associated with.

        :param data_source_id: The data_source_id of this DataSourceTable.
        :type data_source_id: str
        """

        self._data_source_id = data_source_id

    @property
    def filter_specs(self):
        """Gets the filter_specs of this DataSourceTable.

        Filter specifications in the data source table.

        :return: The filter_specs of this DataSourceTable.
        :rtype: List[FilterSpec]
        """
        return self._filter_specs

    @filter_specs.setter
    def filter_specs(self, filter_specs):
        """Sets the filter_specs of this DataSourceTable.

        Filter specifications in the data source table.

        :param filter_specs: The filter_specs of this DataSourceTable.
        :type filter_specs: List[FilterSpec]
        """

        self._filter_specs = filter_specs

    @property
    def row_limit(self):
        """Gets the row_limit of this DataSourceTable.

        The limit of rows to return. If not set, a default limit is applied. Please refer to the Sheets editor for the default and max limit.

        :return: The row_limit of this DataSourceTable.
        :rtype: int
        """
        return self._row_limit

    @row_limit.setter
    def row_limit(self, row_limit):
        """Sets the row_limit of this DataSourceTable.

        The limit of rows to return. If not set, a default limit is applied. Please refer to the Sheets editor for the default and max limit.

        :param row_limit: The row_limit of this DataSourceTable.
        :type row_limit: int
        """

        self._row_limit = row_limit

    @property
    def sort_specs(self):
        """Gets the sort_specs of this DataSourceTable.

        Sort specifications in the data source table. The result of the data source table is sorted based on the sort specifications in order.

        :return: The sort_specs of this DataSourceTable.
        :rtype: List[SortSpec]
        """
        return self._sort_specs

    @sort_specs.setter
    def sort_specs(self, sort_specs):
        """Sets the sort_specs of this DataSourceTable.

        Sort specifications in the data source table. The result of the data source table is sorted based on the sort specifications in order.

        :param sort_specs: The sort_specs of this DataSourceTable.
        :type sort_specs: List[SortSpec]
        """

        self._sort_specs = sort_specs
