# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conditional_format_rule import ConditionalFormatRule
from openapi_server import util


class UpdateConditionalFormatRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index: int=None, new_index: int=None, rule: ConditionalFormatRule=None, sheet_id: int=None):
        """UpdateConditionalFormatRuleRequest - a model defined in OpenAPI

        :param index: The index of this UpdateConditionalFormatRuleRequest.
        :param new_index: The new_index of this UpdateConditionalFormatRuleRequest.
        :param rule: The rule of this UpdateConditionalFormatRuleRequest.
        :param sheet_id: The sheet_id of this UpdateConditionalFormatRuleRequest.
        """
        self.openapi_types = {
            'index': int,
            'new_index': int,
            'rule': ConditionalFormatRule,
            'sheet_id': int
        }

        self.attribute_map = {
            'index': 'index',
            'new_index': 'newIndex',
            'rule': 'rule',
            'sheet_id': 'sheetId'
        }

        self._index = index
        self._new_index = new_index
        self._rule = rule
        self._sheet_id = sheet_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateConditionalFormatRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateConditionalFormatRuleRequest of this UpdateConditionalFormatRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index(self):
        """Gets the index of this UpdateConditionalFormatRuleRequest.

        The zero-based index of the rule that should be replaced or moved.

        :return: The index of this UpdateConditionalFormatRuleRequest.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this UpdateConditionalFormatRuleRequest.

        The zero-based index of the rule that should be replaced or moved.

        :param index: The index of this UpdateConditionalFormatRuleRequest.
        :type index: int
        """

        self._index = index

    @property
    def new_index(self):
        """Gets the new_index of this UpdateConditionalFormatRuleRequest.

        The zero-based new index the rule should end up at.

        :return: The new_index of this UpdateConditionalFormatRuleRequest.
        :rtype: int
        """
        return self._new_index

    @new_index.setter
    def new_index(self, new_index):
        """Sets the new_index of this UpdateConditionalFormatRuleRequest.

        The zero-based new index the rule should end up at.

        :param new_index: The new_index of this UpdateConditionalFormatRuleRequest.
        :type new_index: int
        """

        self._new_index = new_index

    @property
    def rule(self):
        """Gets the rule of this UpdateConditionalFormatRuleRequest.


        :return: The rule of this UpdateConditionalFormatRuleRequest.
        :rtype: ConditionalFormatRule
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this UpdateConditionalFormatRuleRequest.


        :param rule: The rule of this UpdateConditionalFormatRuleRequest.
        :type rule: ConditionalFormatRule
        """

        self._rule = rule

    @property
    def sheet_id(self):
        """Gets the sheet_id of this UpdateConditionalFormatRuleRequest.

        The sheet of the rule to move. Required if new_index is set, unused otherwise.

        :return: The sheet_id of this UpdateConditionalFormatRuleRequest.
        :rtype: int
        """
        return self._sheet_id

    @sheet_id.setter
    def sheet_id(self, sheet_id):
        """Sets the sheet_id of this UpdateConditionalFormatRuleRequest.

        The sheet of the rule to move. Required if new_index is set, unused otherwise.

        :param sheet_id: The sheet_id of this UpdateConditionalFormatRuleRequest.
        :type sheet_id: int
        """

        self._sheet_id = sheet_id
