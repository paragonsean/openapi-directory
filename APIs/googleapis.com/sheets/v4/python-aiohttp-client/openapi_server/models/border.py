# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.color import Color
from openapi_server.models.color_style import ColorStyle
from openapi_server import util


class Border(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: Color=None, color_style: ColorStyle=None, style: str=None, width: int=None):
        """Border - a model defined in OpenAPI

        :param color: The color of this Border.
        :param color_style: The color_style of this Border.
        :param style: The style of this Border.
        :param width: The width of this Border.
        """
        self.openapi_types = {
            'color': Color,
            'color_style': ColorStyle,
            'style': str,
            'width': int
        }

        self.attribute_map = {
            'color': 'color',
            'color_style': 'colorStyle',
            'style': 'style',
            'width': 'width'
        }

        self._color = color
        self._color_style = color_style
        self._style = style
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Border':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Border of this Border.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this Border.


        :return: The color of this Border.
        :rtype: Color
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Border.


        :param color: The color of this Border.
        :type color: Color
        """

        self._color = color

    @property
    def color_style(self):
        """Gets the color_style of this Border.


        :return: The color_style of this Border.
        :rtype: ColorStyle
        """
        return self._color_style

    @color_style.setter
    def color_style(self, color_style):
        """Sets the color_style of this Border.


        :param color_style: The color_style of this Border.
        :type color_style: ColorStyle
        """

        self._color_style = color_style

    @property
    def style(self):
        """Gets the style of this Border.

        The style of the border.

        :return: The style of this Border.
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this Border.

        The style of the border.

        :param style: The style of this Border.
        :type style: str
        """
        allowed_values = ["STYLE_UNSPECIFIED", "DOTTED", "DASHED", "SOLID", "SOLID_MEDIUM", "SOLID_THICK", "NONE", "DOUBLE"]  # noqa: E501
        if style not in allowed_values:
            raise ValueError(
                "Invalid value for `style` ({0}), must be one of {1}"
                .format(style, allowed_values)
            )

        self._style = style

    @property
    def width(self):
        """Gets the width of this Border.

        The width of the border, in pixels. Deprecated; the width is determined by the \"style\" field.

        :return: The width of this Border.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Border.

        The width of the border, in pixels. Deprecated; the width is determined by the \"style\" field.

        :param width: The width of this Border.
        :type width: int
        """

        self._width = width
