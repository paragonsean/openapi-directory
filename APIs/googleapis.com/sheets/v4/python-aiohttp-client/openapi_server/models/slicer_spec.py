# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.color import Color
from openapi_server.models.color_style import ColorStyle
from openapi_server.models.filter_criteria import FilterCriteria
from openapi_server.models.grid_range import GridRange
from openapi_server.models.text_format import TextFormat
from openapi_server import util


class SlicerSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apply_to_pivot_tables: bool=None, background_color: Color=None, background_color_style: ColorStyle=None, column_index: int=None, data_range: GridRange=None, filter_criteria: FilterCriteria=None, horizontal_alignment: str=None, text_format: TextFormat=None, title: str=None):
        """SlicerSpec - a model defined in OpenAPI

        :param apply_to_pivot_tables: The apply_to_pivot_tables of this SlicerSpec.
        :param background_color: The background_color of this SlicerSpec.
        :param background_color_style: The background_color_style of this SlicerSpec.
        :param column_index: The column_index of this SlicerSpec.
        :param data_range: The data_range of this SlicerSpec.
        :param filter_criteria: The filter_criteria of this SlicerSpec.
        :param horizontal_alignment: The horizontal_alignment of this SlicerSpec.
        :param text_format: The text_format of this SlicerSpec.
        :param title: The title of this SlicerSpec.
        """
        self.openapi_types = {
            'apply_to_pivot_tables': bool,
            'background_color': Color,
            'background_color_style': ColorStyle,
            'column_index': int,
            'data_range': GridRange,
            'filter_criteria': FilterCriteria,
            'horizontal_alignment': str,
            'text_format': TextFormat,
            'title': str
        }

        self.attribute_map = {
            'apply_to_pivot_tables': 'applyToPivotTables',
            'background_color': 'backgroundColor',
            'background_color_style': 'backgroundColorStyle',
            'column_index': 'columnIndex',
            'data_range': 'dataRange',
            'filter_criteria': 'filterCriteria',
            'horizontal_alignment': 'horizontalAlignment',
            'text_format': 'textFormat',
            'title': 'title'
        }

        self._apply_to_pivot_tables = apply_to_pivot_tables
        self._background_color = background_color
        self._background_color_style = background_color_style
        self._column_index = column_index
        self._data_range = data_range
        self._filter_criteria = filter_criteria
        self._horizontal_alignment = horizontal_alignment
        self._text_format = text_format
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SlicerSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SlicerSpec of this SlicerSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apply_to_pivot_tables(self):
        """Gets the apply_to_pivot_tables of this SlicerSpec.

        True if the filter should apply to pivot tables. If not set, default to `True`.

        :return: The apply_to_pivot_tables of this SlicerSpec.
        :rtype: bool
        """
        return self._apply_to_pivot_tables

    @apply_to_pivot_tables.setter
    def apply_to_pivot_tables(self, apply_to_pivot_tables):
        """Sets the apply_to_pivot_tables of this SlicerSpec.

        True if the filter should apply to pivot tables. If not set, default to `True`.

        :param apply_to_pivot_tables: The apply_to_pivot_tables of this SlicerSpec.
        :type apply_to_pivot_tables: bool
        """

        self._apply_to_pivot_tables = apply_to_pivot_tables

    @property
    def background_color(self):
        """Gets the background_color of this SlicerSpec.


        :return: The background_color of this SlicerSpec.
        :rtype: Color
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this SlicerSpec.


        :param background_color: The background_color of this SlicerSpec.
        :type background_color: Color
        """

        self._background_color = background_color

    @property
    def background_color_style(self):
        """Gets the background_color_style of this SlicerSpec.


        :return: The background_color_style of this SlicerSpec.
        :rtype: ColorStyle
        """
        return self._background_color_style

    @background_color_style.setter
    def background_color_style(self, background_color_style):
        """Sets the background_color_style of this SlicerSpec.


        :param background_color_style: The background_color_style of this SlicerSpec.
        :type background_color_style: ColorStyle
        """

        self._background_color_style = background_color_style

    @property
    def column_index(self):
        """Gets the column_index of this SlicerSpec.

        The zero-based column index in the data table on which the filter is applied to.

        :return: The column_index of this SlicerSpec.
        :rtype: int
        """
        return self._column_index

    @column_index.setter
    def column_index(self, column_index):
        """Sets the column_index of this SlicerSpec.

        The zero-based column index in the data table on which the filter is applied to.

        :param column_index: The column_index of this SlicerSpec.
        :type column_index: int
        """

        self._column_index = column_index

    @property
    def data_range(self):
        """Gets the data_range of this SlicerSpec.


        :return: The data_range of this SlicerSpec.
        :rtype: GridRange
        """
        return self._data_range

    @data_range.setter
    def data_range(self, data_range):
        """Sets the data_range of this SlicerSpec.


        :param data_range: The data_range of this SlicerSpec.
        :type data_range: GridRange
        """

        self._data_range = data_range

    @property
    def filter_criteria(self):
        """Gets the filter_criteria of this SlicerSpec.


        :return: The filter_criteria of this SlicerSpec.
        :rtype: FilterCriteria
        """
        return self._filter_criteria

    @filter_criteria.setter
    def filter_criteria(self, filter_criteria):
        """Sets the filter_criteria of this SlicerSpec.


        :param filter_criteria: The filter_criteria of this SlicerSpec.
        :type filter_criteria: FilterCriteria
        """

        self._filter_criteria = filter_criteria

    @property
    def horizontal_alignment(self):
        """Gets the horizontal_alignment of this SlicerSpec.

        The horizontal alignment of title in the slicer. If unspecified, defaults to `LEFT`

        :return: The horizontal_alignment of this SlicerSpec.
        :rtype: str
        """
        return self._horizontal_alignment

    @horizontal_alignment.setter
    def horizontal_alignment(self, horizontal_alignment):
        """Sets the horizontal_alignment of this SlicerSpec.

        The horizontal alignment of title in the slicer. If unspecified, defaults to `LEFT`

        :param horizontal_alignment: The horizontal_alignment of this SlicerSpec.
        :type horizontal_alignment: str
        """
        allowed_values = ["HORIZONTAL_ALIGN_UNSPECIFIED", "LEFT", "CENTER", "RIGHT"]  # noqa: E501
        if horizontal_alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `horizontal_alignment` ({0}), must be one of {1}"
                .format(horizontal_alignment, allowed_values)
            )

        self._horizontal_alignment = horizontal_alignment

    @property
    def text_format(self):
        """Gets the text_format of this SlicerSpec.


        :return: The text_format of this SlicerSpec.
        :rtype: TextFormat
        """
        return self._text_format

    @text_format.setter
    def text_format(self, text_format):
        """Sets the text_format of this SlicerSpec.


        :param text_format: The text_format of this SlicerSpec.
        :type text_format: TextFormat
        """

        self._text_format = text_format

    @property
    def title(self):
        """Gets the title of this SlicerSpec.

        The title of the slicer.

        :return: The title of this SlicerSpec.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SlicerSpec.

        The title of the slicer.

        :param title: The title of this SlicerSpec.
        :type title: str
        """

        self._title = title
