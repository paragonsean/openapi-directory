# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.grid_range import GridRange
from openapi_server import util


class SourceAndDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimension: str=None, fill_length: int=None, source: GridRange=None):
        """SourceAndDestination - a model defined in OpenAPI

        :param dimension: The dimension of this SourceAndDestination.
        :param fill_length: The fill_length of this SourceAndDestination.
        :param source: The source of this SourceAndDestination.
        """
        self.openapi_types = {
            'dimension': str,
            'fill_length': int,
            'source': GridRange
        }

        self.attribute_map = {
            'dimension': 'dimension',
            'fill_length': 'fillLength',
            'source': 'source'
        }

        self._dimension = dimension
        self._fill_length = fill_length
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceAndDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceAndDestination of this SourceAndDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimension(self):
        """Gets the dimension of this SourceAndDestination.

        The dimension that data should be filled into.

        :return: The dimension of this SourceAndDestination.
        :rtype: str
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this SourceAndDestination.

        The dimension that data should be filled into.

        :param dimension: The dimension of this SourceAndDestination.
        :type dimension: str
        """
        allowed_values = ["DIMENSION_UNSPECIFIED", "ROWS", "COLUMNS"]  # noqa: E501
        if dimension not in allowed_values:
            raise ValueError(
                "Invalid value for `dimension` ({0}), must be one of {1}"
                .format(dimension, allowed_values)
            )

        self._dimension = dimension

    @property
    def fill_length(self):
        """Gets the fill_length of this SourceAndDestination.

        The number of rows or columns that data should be filled into. Positive numbers expand beyond the last row or last column of the source. Negative numbers expand before the first row or first column of the source.

        :return: The fill_length of this SourceAndDestination.
        :rtype: int
        """
        return self._fill_length

    @fill_length.setter
    def fill_length(self, fill_length):
        """Sets the fill_length of this SourceAndDestination.

        The number of rows or columns that data should be filled into. Positive numbers expand beyond the last row or last column of the source. Negative numbers expand before the first row or first column of the source.

        :param fill_length: The fill_length of this SourceAndDestination.
        :type fill_length: int
        """

        self._fill_length = fill_length

    @property
    def source(self):
        """Gets the source of this SourceAndDestination.


        :return: The source of this SourceAndDestination.
        :rtype: GridRange
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SourceAndDestination.


        :param source: The source of this SourceAndDestination.
        :type source: GridRange
        """

        self._source = source
