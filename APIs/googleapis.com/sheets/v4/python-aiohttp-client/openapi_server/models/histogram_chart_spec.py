# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.histogram_series import HistogramSeries
from openapi_server import util


class HistogramChartSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_size: float=None, legend_position: str=None, outlier_percentile: float=None, series: List[HistogramSeries]=None, show_item_dividers: bool=None):
        """HistogramChartSpec - a model defined in OpenAPI

        :param bucket_size: The bucket_size of this HistogramChartSpec.
        :param legend_position: The legend_position of this HistogramChartSpec.
        :param outlier_percentile: The outlier_percentile of this HistogramChartSpec.
        :param series: The series of this HistogramChartSpec.
        :param show_item_dividers: The show_item_dividers of this HistogramChartSpec.
        """
        self.openapi_types = {
            'bucket_size': float,
            'legend_position': str,
            'outlier_percentile': float,
            'series': List[HistogramSeries],
            'show_item_dividers': bool
        }

        self.attribute_map = {
            'bucket_size': 'bucketSize',
            'legend_position': 'legendPosition',
            'outlier_percentile': 'outlierPercentile',
            'series': 'series',
            'show_item_dividers': 'showItemDividers'
        }

        self._bucket_size = bucket_size
        self._legend_position = legend_position
        self._outlier_percentile = outlier_percentile
        self._series = series
        self._show_item_dividers = show_item_dividers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistogramChartSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistogramChartSpec of this HistogramChartSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_size(self):
        """Gets the bucket_size of this HistogramChartSpec.

        By default the bucket size (the range of values stacked in a single column) is chosen automatically, but it may be overridden here. E.g., A bucket size of 1.5 results in buckets from 0 - 1.5, 1.5 - 3.0, etc. Cannot be negative. This field is optional.

        :return: The bucket_size of this HistogramChartSpec.
        :rtype: float
        """
        return self._bucket_size

    @bucket_size.setter
    def bucket_size(self, bucket_size):
        """Sets the bucket_size of this HistogramChartSpec.

        By default the bucket size (the range of values stacked in a single column) is chosen automatically, but it may be overridden here. E.g., A bucket size of 1.5 results in buckets from 0 - 1.5, 1.5 - 3.0, etc. Cannot be negative. This field is optional.

        :param bucket_size: The bucket_size of this HistogramChartSpec.
        :type bucket_size: float
        """

        self._bucket_size = bucket_size

    @property
    def legend_position(self):
        """Gets the legend_position of this HistogramChartSpec.

        The position of the chart legend.

        :return: The legend_position of this HistogramChartSpec.
        :rtype: str
        """
        return self._legend_position

    @legend_position.setter
    def legend_position(self, legend_position):
        """Sets the legend_position of this HistogramChartSpec.

        The position of the chart legend.

        :param legend_position: The legend_position of this HistogramChartSpec.
        :type legend_position: str
        """
        allowed_values = ["HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED", "BOTTOM_LEGEND", "LEFT_LEGEND", "RIGHT_LEGEND", "TOP_LEGEND", "NO_LEGEND", "INSIDE_LEGEND"]  # noqa: E501
        if legend_position not in allowed_values:
            raise ValueError(
                "Invalid value for `legend_position` ({0}), must be one of {1}"
                .format(legend_position, allowed_values)
            )

        self._legend_position = legend_position

    @property
    def outlier_percentile(self):
        """Gets the outlier_percentile of this HistogramChartSpec.

        The outlier percentile is used to ensure that outliers do not adversely affect the calculation of bucket sizes. For example, setting an outlier percentile of 0.05 indicates that the top and bottom 5% of values when calculating buckets. The values are still included in the chart, they will be added to the first or last buckets instead of their own buckets. Must be between 0.0 and 0.5.

        :return: The outlier_percentile of this HistogramChartSpec.
        :rtype: float
        """
        return self._outlier_percentile

    @outlier_percentile.setter
    def outlier_percentile(self, outlier_percentile):
        """Sets the outlier_percentile of this HistogramChartSpec.

        The outlier percentile is used to ensure that outliers do not adversely affect the calculation of bucket sizes. For example, setting an outlier percentile of 0.05 indicates that the top and bottom 5% of values when calculating buckets. The values are still included in the chart, they will be added to the first or last buckets instead of their own buckets. Must be between 0.0 and 0.5.

        :param outlier_percentile: The outlier_percentile of this HistogramChartSpec.
        :type outlier_percentile: float
        """

        self._outlier_percentile = outlier_percentile

    @property
    def series(self):
        """Gets the series of this HistogramChartSpec.

        The series for a histogram may be either a single series of values to be bucketed or multiple series, each of the same length, containing the name of the series followed by the values to be bucketed for that series.

        :return: The series of this HistogramChartSpec.
        :rtype: List[HistogramSeries]
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this HistogramChartSpec.

        The series for a histogram may be either a single series of values to be bucketed or multiple series, each of the same length, containing the name of the series followed by the values to be bucketed for that series.

        :param series: The series of this HistogramChartSpec.
        :type series: List[HistogramSeries]
        """

        self._series = series

    @property
    def show_item_dividers(self):
        """Gets the show_item_dividers of this HistogramChartSpec.

        Whether horizontal divider lines should be displayed between items in each column.

        :return: The show_item_dividers of this HistogramChartSpec.
        :rtype: bool
        """
        return self._show_item_dividers

    @show_item_dividers.setter
    def show_item_dividers(self, show_item_dividers):
        """Sets the show_item_dividers of this HistogramChartSpec.

        Whether horizontal divider lines should be displayed between items in each column.

        :param show_item_dividers: The show_item_dividers of this HistogramChartSpec.
        :type show_item_dividers: bool
        """

        self._show_item_dividers = show_item_dividers
