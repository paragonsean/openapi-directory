# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_execution_status import DataExecutionStatus
from openapi_server.models.data_source_column import DataSourceColumn
from openapi_server import util


class DataSourceSheetProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, columns: List[DataSourceColumn]=None, data_execution_status: DataExecutionStatus=None, data_source_id: str=None):
        """DataSourceSheetProperties - a model defined in OpenAPI

        :param columns: The columns of this DataSourceSheetProperties.
        :param data_execution_status: The data_execution_status of this DataSourceSheetProperties.
        :param data_source_id: The data_source_id of this DataSourceSheetProperties.
        """
        self.openapi_types = {
            'columns': List[DataSourceColumn],
            'data_execution_status': DataExecutionStatus,
            'data_source_id': str
        }

        self.attribute_map = {
            'columns': 'columns',
            'data_execution_status': 'dataExecutionStatus',
            'data_source_id': 'dataSourceId'
        }

        self._columns = columns
        self._data_execution_status = data_execution_status
        self._data_source_id = data_source_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSourceSheetProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSourceSheetProperties of this DataSourceSheetProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def columns(self):
        """Gets the columns of this DataSourceSheetProperties.

        The columns displayed on the sheet, corresponding to the values in RowData.

        :return: The columns of this DataSourceSheetProperties.
        :rtype: List[DataSourceColumn]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this DataSourceSheetProperties.

        The columns displayed on the sheet, corresponding to the values in RowData.

        :param columns: The columns of this DataSourceSheetProperties.
        :type columns: List[DataSourceColumn]
        """

        self._columns = columns

    @property
    def data_execution_status(self):
        """Gets the data_execution_status of this DataSourceSheetProperties.


        :return: The data_execution_status of this DataSourceSheetProperties.
        :rtype: DataExecutionStatus
        """
        return self._data_execution_status

    @data_execution_status.setter
    def data_execution_status(self, data_execution_status):
        """Sets the data_execution_status of this DataSourceSheetProperties.


        :param data_execution_status: The data_execution_status of this DataSourceSheetProperties.
        :type data_execution_status: DataExecutionStatus
        """

        self._data_execution_status = data_execution_status

    @property
    def data_source_id(self):
        """Gets the data_source_id of this DataSourceSheetProperties.

        ID of the DataSource the sheet is connected to.

        :return: The data_source_id of this DataSourceSheetProperties.
        :rtype: str
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """Sets the data_source_id of this DataSourceSheetProperties.

        ID of the DataSource the sheet is connected to.

        :param data_source_id: The data_source_id of this DataSourceSheetProperties.
        :type data_source_id: str
        """

        self._data_source_id = data_source_id
