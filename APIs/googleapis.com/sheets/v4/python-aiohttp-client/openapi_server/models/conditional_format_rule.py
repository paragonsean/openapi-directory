# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.boolean_rule import BooleanRule
from openapi_server.models.gradient_rule import GradientRule
from openapi_server.models.grid_range import GridRange
from openapi_server import util


class ConditionalFormatRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boolean_rule: BooleanRule=None, gradient_rule: GradientRule=None, ranges: List[GridRange]=None):
        """ConditionalFormatRule - a model defined in OpenAPI

        :param boolean_rule: The boolean_rule of this ConditionalFormatRule.
        :param gradient_rule: The gradient_rule of this ConditionalFormatRule.
        :param ranges: The ranges of this ConditionalFormatRule.
        """
        self.openapi_types = {
            'boolean_rule': BooleanRule,
            'gradient_rule': GradientRule,
            'ranges': List[GridRange]
        }

        self.attribute_map = {
            'boolean_rule': 'booleanRule',
            'gradient_rule': 'gradientRule',
            'ranges': 'ranges'
        }

        self._boolean_rule = boolean_rule
        self._gradient_rule = gradient_rule
        self._ranges = ranges

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConditionalFormatRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConditionalFormatRule of this ConditionalFormatRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boolean_rule(self):
        """Gets the boolean_rule of this ConditionalFormatRule.


        :return: The boolean_rule of this ConditionalFormatRule.
        :rtype: BooleanRule
        """
        return self._boolean_rule

    @boolean_rule.setter
    def boolean_rule(self, boolean_rule):
        """Sets the boolean_rule of this ConditionalFormatRule.


        :param boolean_rule: The boolean_rule of this ConditionalFormatRule.
        :type boolean_rule: BooleanRule
        """

        self._boolean_rule = boolean_rule

    @property
    def gradient_rule(self):
        """Gets the gradient_rule of this ConditionalFormatRule.


        :return: The gradient_rule of this ConditionalFormatRule.
        :rtype: GradientRule
        """
        return self._gradient_rule

    @gradient_rule.setter
    def gradient_rule(self, gradient_rule):
        """Sets the gradient_rule of this ConditionalFormatRule.


        :param gradient_rule: The gradient_rule of this ConditionalFormatRule.
        :type gradient_rule: GradientRule
        """

        self._gradient_rule = gradient_rule

    @property
    def ranges(self):
        """Gets the ranges of this ConditionalFormatRule.

        The ranges that are formatted if the condition is true. All the ranges must be on the same grid.

        :return: The ranges of this ConditionalFormatRule.
        :rtype: List[GridRange]
        """
        return self._ranges

    @ranges.setter
    def ranges(self, ranges):
        """Sets the ranges of this ConditionalFormatRule.

        The ranges that are formatted if the condition is true. All the ranges must be on the same grid.

        :param ranges: The ranges of this ConditionalFormatRule.
        :type ranges: List[GridRange]
        """

        self._ranges = ranges
