# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.baseline_value_format import BaselineValueFormat
from openapi_server.models.chart_custom_number_format_options import ChartCustomNumberFormatOptions
from openapi_server.models.chart_data import ChartData
from openapi_server.models.key_value_format import KeyValueFormat
from openapi_server import util


class ScorecardChartSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregate_type: str=None, baseline_value_data: ChartData=None, baseline_value_format: BaselineValueFormat=None, custom_format_options: ChartCustomNumberFormatOptions=None, key_value_data: ChartData=None, key_value_format: KeyValueFormat=None, number_format_source: str=None, scale_factor: float=None):
        """ScorecardChartSpec - a model defined in OpenAPI

        :param aggregate_type: The aggregate_type of this ScorecardChartSpec.
        :param baseline_value_data: The baseline_value_data of this ScorecardChartSpec.
        :param baseline_value_format: The baseline_value_format of this ScorecardChartSpec.
        :param custom_format_options: The custom_format_options of this ScorecardChartSpec.
        :param key_value_data: The key_value_data of this ScorecardChartSpec.
        :param key_value_format: The key_value_format of this ScorecardChartSpec.
        :param number_format_source: The number_format_source of this ScorecardChartSpec.
        :param scale_factor: The scale_factor of this ScorecardChartSpec.
        """
        self.openapi_types = {
            'aggregate_type': str,
            'baseline_value_data': ChartData,
            'baseline_value_format': BaselineValueFormat,
            'custom_format_options': ChartCustomNumberFormatOptions,
            'key_value_data': ChartData,
            'key_value_format': KeyValueFormat,
            'number_format_source': str,
            'scale_factor': float
        }

        self.attribute_map = {
            'aggregate_type': 'aggregateType',
            'baseline_value_data': 'baselineValueData',
            'baseline_value_format': 'baselineValueFormat',
            'custom_format_options': 'customFormatOptions',
            'key_value_data': 'keyValueData',
            'key_value_format': 'keyValueFormat',
            'number_format_source': 'numberFormatSource',
            'scale_factor': 'scaleFactor'
        }

        self._aggregate_type = aggregate_type
        self._baseline_value_data = baseline_value_data
        self._baseline_value_format = baseline_value_format
        self._custom_format_options = custom_format_options
        self._key_value_data = key_value_data
        self._key_value_format = key_value_format
        self._number_format_source = number_format_source
        self._scale_factor = scale_factor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScorecardChartSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScorecardChartSpec of this ScorecardChartSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregate_type(self):
        """Gets the aggregate_type of this ScorecardChartSpec.

        The aggregation type for key and baseline chart data in scorecard chart. This field is not supported for data source charts. Use the ChartData.aggregateType field of the key_value_data or baseline_value_data instead for data source charts. This field is optional.

        :return: The aggregate_type of this ScorecardChartSpec.
        :rtype: str
        """
        return self._aggregate_type

    @aggregate_type.setter
    def aggregate_type(self, aggregate_type):
        """Sets the aggregate_type of this ScorecardChartSpec.

        The aggregation type for key and baseline chart data in scorecard chart. This field is not supported for data source charts. Use the ChartData.aggregateType field of the key_value_data or baseline_value_data instead for data source charts. This field is optional.

        :param aggregate_type: The aggregate_type of this ScorecardChartSpec.
        :type aggregate_type: str
        """
        allowed_values = ["CHART_AGGREGATE_TYPE_UNSPECIFIED", "AVERAGE", "COUNT", "MAX", "MEDIAN", "MIN", "SUM"]  # noqa: E501
        if aggregate_type not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregate_type` ({0}), must be one of {1}"
                .format(aggregate_type, allowed_values)
            )

        self._aggregate_type = aggregate_type

    @property
    def baseline_value_data(self):
        """Gets the baseline_value_data of this ScorecardChartSpec.


        :return: The baseline_value_data of this ScorecardChartSpec.
        :rtype: ChartData
        """
        return self._baseline_value_data

    @baseline_value_data.setter
    def baseline_value_data(self, baseline_value_data):
        """Sets the baseline_value_data of this ScorecardChartSpec.


        :param baseline_value_data: The baseline_value_data of this ScorecardChartSpec.
        :type baseline_value_data: ChartData
        """

        self._baseline_value_data = baseline_value_data

    @property
    def baseline_value_format(self):
        """Gets the baseline_value_format of this ScorecardChartSpec.


        :return: The baseline_value_format of this ScorecardChartSpec.
        :rtype: BaselineValueFormat
        """
        return self._baseline_value_format

    @baseline_value_format.setter
    def baseline_value_format(self, baseline_value_format):
        """Sets the baseline_value_format of this ScorecardChartSpec.


        :param baseline_value_format: The baseline_value_format of this ScorecardChartSpec.
        :type baseline_value_format: BaselineValueFormat
        """

        self._baseline_value_format = baseline_value_format

    @property
    def custom_format_options(self):
        """Gets the custom_format_options of this ScorecardChartSpec.


        :return: The custom_format_options of this ScorecardChartSpec.
        :rtype: ChartCustomNumberFormatOptions
        """
        return self._custom_format_options

    @custom_format_options.setter
    def custom_format_options(self, custom_format_options):
        """Sets the custom_format_options of this ScorecardChartSpec.


        :param custom_format_options: The custom_format_options of this ScorecardChartSpec.
        :type custom_format_options: ChartCustomNumberFormatOptions
        """

        self._custom_format_options = custom_format_options

    @property
    def key_value_data(self):
        """Gets the key_value_data of this ScorecardChartSpec.


        :return: The key_value_data of this ScorecardChartSpec.
        :rtype: ChartData
        """
        return self._key_value_data

    @key_value_data.setter
    def key_value_data(self, key_value_data):
        """Sets the key_value_data of this ScorecardChartSpec.


        :param key_value_data: The key_value_data of this ScorecardChartSpec.
        :type key_value_data: ChartData
        """

        self._key_value_data = key_value_data

    @property
    def key_value_format(self):
        """Gets the key_value_format of this ScorecardChartSpec.


        :return: The key_value_format of this ScorecardChartSpec.
        :rtype: KeyValueFormat
        """
        return self._key_value_format

    @key_value_format.setter
    def key_value_format(self, key_value_format):
        """Sets the key_value_format of this ScorecardChartSpec.


        :param key_value_format: The key_value_format of this ScorecardChartSpec.
        :type key_value_format: KeyValueFormat
        """

        self._key_value_format = key_value_format

    @property
    def number_format_source(self):
        """Gets the number_format_source of this ScorecardChartSpec.

        The number format source used in the scorecard chart. This field is optional.

        :return: The number_format_source of this ScorecardChartSpec.
        :rtype: str
        """
        return self._number_format_source

    @number_format_source.setter
    def number_format_source(self, number_format_source):
        """Sets the number_format_source of this ScorecardChartSpec.

        The number format source used in the scorecard chart. This field is optional.

        :param number_format_source: The number_format_source of this ScorecardChartSpec.
        :type number_format_source: str
        """
        allowed_values = ["CHART_NUMBER_FORMAT_SOURCE_UNDEFINED", "FROM_DATA", "CUSTOM"]  # noqa: E501
        if number_format_source not in allowed_values:
            raise ValueError(
                "Invalid value for `number_format_source` ({0}), must be one of {1}"
                .format(number_format_source, allowed_values)
            )

        self._number_format_source = number_format_source

    @property
    def scale_factor(self):
        """Gets the scale_factor of this ScorecardChartSpec.

        Value to scale scorecard key and baseline value. For example, a factor of 10 can be used to divide all values in the chart by 10. This field is optional.

        :return: The scale_factor of this ScorecardChartSpec.
        :rtype: float
        """
        return self._scale_factor

    @scale_factor.setter
    def scale_factor(self, scale_factor):
        """Sets the scale_factor of this ScorecardChartSpec.

        Value to scale scorecard key and baseline value. For example, a factor of 10 can be used to divide all values in the chart by 10. This field is optional.

        :param scale_factor: The scale_factor of this ScorecardChartSpec.
        :type scale_factor: float
        """

        self._scale_factor = scale_factor
