# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_source_column_reference import DataSourceColumnReference
from openapi_server.models.pivot_group_limit import PivotGroupLimit
from openapi_server.models.pivot_group_rule import PivotGroupRule
from openapi_server.models.pivot_group_sort_value_bucket import PivotGroupSortValueBucket
from openapi_server.models.pivot_group_value_metadata import PivotGroupValueMetadata
from openapi_server import util


class PivotGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source_column_reference: DataSourceColumnReference=None, group_limit: PivotGroupLimit=None, group_rule: PivotGroupRule=None, label: str=None, repeat_headings: bool=None, show_totals: bool=None, sort_order: str=None, source_column_offset: int=None, value_bucket: PivotGroupSortValueBucket=None, value_metadata: List[PivotGroupValueMetadata]=None):
        """PivotGroup - a model defined in OpenAPI

        :param data_source_column_reference: The data_source_column_reference of this PivotGroup.
        :param group_limit: The group_limit of this PivotGroup.
        :param group_rule: The group_rule of this PivotGroup.
        :param label: The label of this PivotGroup.
        :param repeat_headings: The repeat_headings of this PivotGroup.
        :param show_totals: The show_totals of this PivotGroup.
        :param sort_order: The sort_order of this PivotGroup.
        :param source_column_offset: The source_column_offset of this PivotGroup.
        :param value_bucket: The value_bucket of this PivotGroup.
        :param value_metadata: The value_metadata of this PivotGroup.
        """
        self.openapi_types = {
            'data_source_column_reference': DataSourceColumnReference,
            'group_limit': PivotGroupLimit,
            'group_rule': PivotGroupRule,
            'label': str,
            'repeat_headings': bool,
            'show_totals': bool,
            'sort_order': str,
            'source_column_offset': int,
            'value_bucket': PivotGroupSortValueBucket,
            'value_metadata': List[PivotGroupValueMetadata]
        }

        self.attribute_map = {
            'data_source_column_reference': 'dataSourceColumnReference',
            'group_limit': 'groupLimit',
            'group_rule': 'groupRule',
            'label': 'label',
            'repeat_headings': 'repeatHeadings',
            'show_totals': 'showTotals',
            'sort_order': 'sortOrder',
            'source_column_offset': 'sourceColumnOffset',
            'value_bucket': 'valueBucket',
            'value_metadata': 'valueMetadata'
        }

        self._data_source_column_reference = data_source_column_reference
        self._group_limit = group_limit
        self._group_rule = group_rule
        self._label = label
        self._repeat_headings = repeat_headings
        self._show_totals = show_totals
        self._sort_order = sort_order
        self._source_column_offset = source_column_offset
        self._value_bucket = value_bucket
        self._value_metadata = value_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PivotGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PivotGroup of this PivotGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source_column_reference(self):
        """Gets the data_source_column_reference of this PivotGroup.


        :return: The data_source_column_reference of this PivotGroup.
        :rtype: DataSourceColumnReference
        """
        return self._data_source_column_reference

    @data_source_column_reference.setter
    def data_source_column_reference(self, data_source_column_reference):
        """Sets the data_source_column_reference of this PivotGroup.


        :param data_source_column_reference: The data_source_column_reference of this PivotGroup.
        :type data_source_column_reference: DataSourceColumnReference
        """

        self._data_source_column_reference = data_source_column_reference

    @property
    def group_limit(self):
        """Gets the group_limit of this PivotGroup.


        :return: The group_limit of this PivotGroup.
        :rtype: PivotGroupLimit
        """
        return self._group_limit

    @group_limit.setter
    def group_limit(self, group_limit):
        """Sets the group_limit of this PivotGroup.


        :param group_limit: The group_limit of this PivotGroup.
        :type group_limit: PivotGroupLimit
        """

        self._group_limit = group_limit

    @property
    def group_rule(self):
        """Gets the group_rule of this PivotGroup.


        :return: The group_rule of this PivotGroup.
        :rtype: PivotGroupRule
        """
        return self._group_rule

    @group_rule.setter
    def group_rule(self, group_rule):
        """Sets the group_rule of this PivotGroup.


        :param group_rule: The group_rule of this PivotGroup.
        :type group_rule: PivotGroupRule
        """

        self._group_rule = group_rule

    @property
    def label(self):
        """Gets the label of this PivotGroup.

        The labels to use for the row/column groups which can be customized. For example, in the following pivot table, the row label is `Region` (which could be renamed to `State`) and the column label is `Product` (which could be renamed `Item`). Pivot tables created before December 2017 do not have header labels. If you'd like to add header labels to an existing pivot table, please delete the existing pivot table and then create a new pivot table with same parameters. +--------------+---------+-------+ | SUM of Units | Product | | | Region | Pen | Paper | +--------------+---------+-------+ | New York | 345 | 98 | | Oregon | 234 | 123 | | Tennessee | 531 | 415 | +--------------+---------+-------+ | Grand Total | 1110 | 636 | +--------------+---------+-------+

        :return: The label of this PivotGroup.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this PivotGroup.

        The labels to use for the row/column groups which can be customized. For example, in the following pivot table, the row label is `Region` (which could be renamed to `State`) and the column label is `Product` (which could be renamed `Item`). Pivot tables created before December 2017 do not have header labels. If you'd like to add header labels to an existing pivot table, please delete the existing pivot table and then create a new pivot table with same parameters. +--------------+---------+-------+ | SUM of Units | Product | | | Region | Pen | Paper | +--------------+---------+-------+ | New York | 345 | 98 | | Oregon | 234 | 123 | | Tennessee | 531 | 415 | +--------------+---------+-------+ | Grand Total | 1110 | 636 | +--------------+---------+-------+

        :param label: The label of this PivotGroup.
        :type label: str
        """

        self._label = label

    @property
    def repeat_headings(self):
        """Gets the repeat_headings of this PivotGroup.

        True if the headings in this pivot group should be repeated. This is only valid for row groupings and is ignored by columns. By default, we minimize repetition of headings by not showing higher level headings where they are the same. For example, even though the third row below corresponds to \"Q1 Mar\", \"Q1\" is not shown because it is redundant with previous rows. Setting repeat_headings to true would cause \"Q1\" to be repeated for \"Feb\" and \"Mar\". +--------------+ | Q1 | Jan | | | Feb | | | Mar | +--------+-----+ | Q1 Total | +--------------+

        :return: The repeat_headings of this PivotGroup.
        :rtype: bool
        """
        return self._repeat_headings

    @repeat_headings.setter
    def repeat_headings(self, repeat_headings):
        """Sets the repeat_headings of this PivotGroup.

        True if the headings in this pivot group should be repeated. This is only valid for row groupings and is ignored by columns. By default, we minimize repetition of headings by not showing higher level headings where they are the same. For example, even though the third row below corresponds to \"Q1 Mar\", \"Q1\" is not shown because it is redundant with previous rows. Setting repeat_headings to true would cause \"Q1\" to be repeated for \"Feb\" and \"Mar\". +--------------+ | Q1 | Jan | | | Feb | | | Mar | +--------+-----+ | Q1 Total | +--------------+

        :param repeat_headings: The repeat_headings of this PivotGroup.
        :type repeat_headings: bool
        """

        self._repeat_headings = repeat_headings

    @property
    def show_totals(self):
        """Gets the show_totals of this PivotGroup.

        True if the pivot table should include the totals for this grouping.

        :return: The show_totals of this PivotGroup.
        :rtype: bool
        """
        return self._show_totals

    @show_totals.setter
    def show_totals(self, show_totals):
        """Sets the show_totals of this PivotGroup.

        True if the pivot table should include the totals for this grouping.

        :param show_totals: The show_totals of this PivotGroup.
        :type show_totals: bool
        """

        self._show_totals = show_totals

    @property
    def sort_order(self):
        """Gets the sort_order of this PivotGroup.

        The order the values in this group should be sorted.

        :return: The sort_order of this PivotGroup.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this PivotGroup.

        The order the values in this group should be sorted.

        :param sort_order: The sort_order of this PivotGroup.
        :type sort_order: str
        """
        allowed_values = ["SORT_ORDER_UNSPECIFIED", "ASCENDING", "DESCENDING"]  # noqa: E501
        if sort_order not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order

    @property
    def source_column_offset(self):
        """Gets the source_column_offset of this PivotGroup.

        The column offset of the source range that this grouping is based on. For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0` means this group refers to column `C`, whereas the offset `1` would refer to column `D`.

        :return: The source_column_offset of this PivotGroup.
        :rtype: int
        """
        return self._source_column_offset

    @source_column_offset.setter
    def source_column_offset(self, source_column_offset):
        """Sets the source_column_offset of this PivotGroup.

        The column offset of the source range that this grouping is based on. For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0` means this group refers to column `C`, whereas the offset `1` would refer to column `D`.

        :param source_column_offset: The source_column_offset of this PivotGroup.
        :type source_column_offset: int
        """

        self._source_column_offset = source_column_offset

    @property
    def value_bucket(self):
        """Gets the value_bucket of this PivotGroup.


        :return: The value_bucket of this PivotGroup.
        :rtype: PivotGroupSortValueBucket
        """
        return self._value_bucket

    @value_bucket.setter
    def value_bucket(self, value_bucket):
        """Sets the value_bucket of this PivotGroup.


        :param value_bucket: The value_bucket of this PivotGroup.
        :type value_bucket: PivotGroupSortValueBucket
        """

        self._value_bucket = value_bucket

    @property
    def value_metadata(self):
        """Gets the value_metadata of this PivotGroup.

        Metadata about values in the grouping.

        :return: The value_metadata of this PivotGroup.
        :rtype: List[PivotGroupValueMetadata]
        """
        return self._value_metadata

    @value_metadata.setter
    def value_metadata(self, value_metadata):
        """Sets the value_metadata of this PivotGroup.

        Metadata about values in the grouping.

        :param value_metadata: The value_metadata of this PivotGroup.
        :type value_metadata: List[PivotGroupValueMetadata]
        """

        self._value_metadata = value_metadata
