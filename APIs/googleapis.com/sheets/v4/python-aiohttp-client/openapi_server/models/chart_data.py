# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chart_group_rule import ChartGroupRule
from openapi_server.models.chart_source_range import ChartSourceRange
from openapi_server.models.data_source_column_reference import DataSourceColumnReference
from openapi_server import util


class ChartData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregate_type: str=None, column_reference: DataSourceColumnReference=None, group_rule: ChartGroupRule=None, source_range: ChartSourceRange=None):
        """ChartData - a model defined in OpenAPI

        :param aggregate_type: The aggregate_type of this ChartData.
        :param column_reference: The column_reference of this ChartData.
        :param group_rule: The group_rule of this ChartData.
        :param source_range: The source_range of this ChartData.
        """
        self.openapi_types = {
            'aggregate_type': str,
            'column_reference': DataSourceColumnReference,
            'group_rule': ChartGroupRule,
            'source_range': ChartSourceRange
        }

        self.attribute_map = {
            'aggregate_type': 'aggregateType',
            'column_reference': 'columnReference',
            'group_rule': 'groupRule',
            'source_range': 'sourceRange'
        }

        self._aggregate_type = aggregate_type
        self._column_reference = column_reference
        self._group_rule = group_rule
        self._source_range = source_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartData of this ChartData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregate_type(self):
        """Gets the aggregate_type of this ChartData.

        The aggregation type for the series of a data source chart. Only supported for data source charts.

        :return: The aggregate_type of this ChartData.
        :rtype: str
        """
        return self._aggregate_type

    @aggregate_type.setter
    def aggregate_type(self, aggregate_type):
        """Sets the aggregate_type of this ChartData.

        The aggregation type for the series of a data source chart. Only supported for data source charts.

        :param aggregate_type: The aggregate_type of this ChartData.
        :type aggregate_type: str
        """
        allowed_values = ["CHART_AGGREGATE_TYPE_UNSPECIFIED", "AVERAGE", "COUNT", "MAX", "MEDIAN", "MIN", "SUM"]  # noqa: E501
        if aggregate_type not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregate_type` ({0}), must be one of {1}"
                .format(aggregate_type, allowed_values)
            )

        self._aggregate_type = aggregate_type

    @property
    def column_reference(self):
        """Gets the column_reference of this ChartData.


        :return: The column_reference of this ChartData.
        :rtype: DataSourceColumnReference
        """
        return self._column_reference

    @column_reference.setter
    def column_reference(self, column_reference):
        """Sets the column_reference of this ChartData.


        :param column_reference: The column_reference of this ChartData.
        :type column_reference: DataSourceColumnReference
        """

        self._column_reference = column_reference

    @property
    def group_rule(self):
        """Gets the group_rule of this ChartData.


        :return: The group_rule of this ChartData.
        :rtype: ChartGroupRule
        """
        return self._group_rule

    @group_rule.setter
    def group_rule(self, group_rule):
        """Sets the group_rule of this ChartData.


        :param group_rule: The group_rule of this ChartData.
        :type group_rule: ChartGroupRule
        """

        self._group_rule = group_rule

    @property
    def source_range(self):
        """Gets the source_range of this ChartData.


        :return: The source_range of this ChartData.
        :rtype: ChartSourceRange
        """
        return self._source_range

    @source_range.setter
    def source_range(self, source_range):
        """Sets the source_range of this ChartData.


        :param source_range: The source_range of this ChartData.
        :type source_range: ChartSourceRange
        """

        self._source_range = source_range
