# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cell_format import CellFormat
from openapi_server.models.data_source_formula import DataSourceFormula
from openapi_server.models.data_source_table import DataSourceTable
from openapi_server.models.data_validation_rule import DataValidationRule
from openapi_server.models.extended_value import ExtendedValue
from openapi_server.models.pivot_table import PivotTable
from openapi_server.models.text_format_run import TextFormatRun
from openapi_server import util


class CellData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source_formula: DataSourceFormula=None, data_source_table: DataSourceTable=None, data_validation: DataValidationRule=None, effective_format: CellFormat=None, effective_value: ExtendedValue=None, formatted_value: str=None, hyperlink: str=None, note: str=None, pivot_table: PivotTable=None, text_format_runs: List[TextFormatRun]=None, user_entered_format: CellFormat=None, user_entered_value: ExtendedValue=None):
        """CellData - a model defined in OpenAPI

        :param data_source_formula: The data_source_formula of this CellData.
        :param data_source_table: The data_source_table of this CellData.
        :param data_validation: The data_validation of this CellData.
        :param effective_format: The effective_format of this CellData.
        :param effective_value: The effective_value of this CellData.
        :param formatted_value: The formatted_value of this CellData.
        :param hyperlink: The hyperlink of this CellData.
        :param note: The note of this CellData.
        :param pivot_table: The pivot_table of this CellData.
        :param text_format_runs: The text_format_runs of this CellData.
        :param user_entered_format: The user_entered_format of this CellData.
        :param user_entered_value: The user_entered_value of this CellData.
        """
        self.openapi_types = {
            'data_source_formula': DataSourceFormula,
            'data_source_table': DataSourceTable,
            'data_validation': DataValidationRule,
            'effective_format': CellFormat,
            'effective_value': ExtendedValue,
            'formatted_value': str,
            'hyperlink': str,
            'note': str,
            'pivot_table': PivotTable,
            'text_format_runs': List[TextFormatRun],
            'user_entered_format': CellFormat,
            'user_entered_value': ExtendedValue
        }

        self.attribute_map = {
            'data_source_formula': 'dataSourceFormula',
            'data_source_table': 'dataSourceTable',
            'data_validation': 'dataValidation',
            'effective_format': 'effectiveFormat',
            'effective_value': 'effectiveValue',
            'formatted_value': 'formattedValue',
            'hyperlink': 'hyperlink',
            'note': 'note',
            'pivot_table': 'pivotTable',
            'text_format_runs': 'textFormatRuns',
            'user_entered_format': 'userEnteredFormat',
            'user_entered_value': 'userEnteredValue'
        }

        self._data_source_formula = data_source_formula
        self._data_source_table = data_source_table
        self._data_validation = data_validation
        self._effective_format = effective_format
        self._effective_value = effective_value
        self._formatted_value = formatted_value
        self._hyperlink = hyperlink
        self._note = note
        self._pivot_table = pivot_table
        self._text_format_runs = text_format_runs
        self._user_entered_format = user_entered_format
        self._user_entered_value = user_entered_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CellData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CellData of this CellData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source_formula(self):
        """Gets the data_source_formula of this CellData.


        :return: The data_source_formula of this CellData.
        :rtype: DataSourceFormula
        """
        return self._data_source_formula

    @data_source_formula.setter
    def data_source_formula(self, data_source_formula):
        """Sets the data_source_formula of this CellData.


        :param data_source_formula: The data_source_formula of this CellData.
        :type data_source_formula: DataSourceFormula
        """

        self._data_source_formula = data_source_formula

    @property
    def data_source_table(self):
        """Gets the data_source_table of this CellData.


        :return: The data_source_table of this CellData.
        :rtype: DataSourceTable
        """
        return self._data_source_table

    @data_source_table.setter
    def data_source_table(self, data_source_table):
        """Sets the data_source_table of this CellData.


        :param data_source_table: The data_source_table of this CellData.
        :type data_source_table: DataSourceTable
        """

        self._data_source_table = data_source_table

    @property
    def data_validation(self):
        """Gets the data_validation of this CellData.


        :return: The data_validation of this CellData.
        :rtype: DataValidationRule
        """
        return self._data_validation

    @data_validation.setter
    def data_validation(self, data_validation):
        """Sets the data_validation of this CellData.


        :param data_validation: The data_validation of this CellData.
        :type data_validation: DataValidationRule
        """

        self._data_validation = data_validation

    @property
    def effective_format(self):
        """Gets the effective_format of this CellData.


        :return: The effective_format of this CellData.
        :rtype: CellFormat
        """
        return self._effective_format

    @effective_format.setter
    def effective_format(self, effective_format):
        """Sets the effective_format of this CellData.


        :param effective_format: The effective_format of this CellData.
        :type effective_format: CellFormat
        """

        self._effective_format = effective_format

    @property
    def effective_value(self):
        """Gets the effective_value of this CellData.


        :return: The effective_value of this CellData.
        :rtype: ExtendedValue
        """
        return self._effective_value

    @effective_value.setter
    def effective_value(self, effective_value):
        """Sets the effective_value of this CellData.


        :param effective_value: The effective_value of this CellData.
        :type effective_value: ExtendedValue
        """

        self._effective_value = effective_value

    @property
    def formatted_value(self):
        """Gets the formatted_value of this CellData.

        The formatted value of the cell. This is the value as it's shown to the user. This field is read-only.

        :return: The formatted_value of this CellData.
        :rtype: str
        """
        return self._formatted_value

    @formatted_value.setter
    def formatted_value(self, formatted_value):
        """Sets the formatted_value of this CellData.

        The formatted value of the cell. This is the value as it's shown to the user. This field is read-only.

        :param formatted_value: The formatted_value of this CellData.
        :type formatted_value: str
        """

        self._formatted_value = formatted_value

    @property
    def hyperlink(self):
        """Gets the hyperlink of this CellData.

        A hyperlink this cell points to, if any. If the cell contains multiple hyperlinks, this field will be empty. This field is read-only. To set it, use a `=HYPERLINK` formula in the userEnteredValue.formulaValue field. A cell-level link can also be set from the userEnteredFormat.textFormat field. Alternatively, set a hyperlink in the textFormatRun.format.link field that spans the entire cell.

        :return: The hyperlink of this CellData.
        :rtype: str
        """
        return self._hyperlink

    @hyperlink.setter
    def hyperlink(self, hyperlink):
        """Sets the hyperlink of this CellData.

        A hyperlink this cell points to, if any. If the cell contains multiple hyperlinks, this field will be empty. This field is read-only. To set it, use a `=HYPERLINK` formula in the userEnteredValue.formulaValue field. A cell-level link can also be set from the userEnteredFormat.textFormat field. Alternatively, set a hyperlink in the textFormatRun.format.link field that spans the entire cell.

        :param hyperlink: The hyperlink of this CellData.
        :type hyperlink: str
        """

        self._hyperlink = hyperlink

    @property
    def note(self):
        """Gets the note of this CellData.

        Any note on the cell.

        :return: The note of this CellData.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this CellData.

        Any note on the cell.

        :param note: The note of this CellData.
        :type note: str
        """

        self._note = note

    @property
    def pivot_table(self):
        """Gets the pivot_table of this CellData.


        :return: The pivot_table of this CellData.
        :rtype: PivotTable
        """
        return self._pivot_table

    @pivot_table.setter
    def pivot_table(self, pivot_table):
        """Sets the pivot_table of this CellData.


        :param pivot_table: The pivot_table of this CellData.
        :type pivot_table: PivotTable
        """

        self._pivot_table = pivot_table

    @property
    def text_format_runs(self):
        """Gets the text_format_runs of this CellData.

        Runs of rich text applied to subsections of the cell. Runs are only valid on user entered strings, not formulas, bools, or numbers. Properties of a run start at a specific index in the text and continue until the next run. Runs will inherit the properties of the cell unless explicitly changed. When writing, the new runs will overwrite any prior runs. When writing a new user_entered_value, previous runs are erased.

        :return: The text_format_runs of this CellData.
        :rtype: List[TextFormatRun]
        """
        return self._text_format_runs

    @text_format_runs.setter
    def text_format_runs(self, text_format_runs):
        """Sets the text_format_runs of this CellData.

        Runs of rich text applied to subsections of the cell. Runs are only valid on user entered strings, not formulas, bools, or numbers. Properties of a run start at a specific index in the text and continue until the next run. Runs will inherit the properties of the cell unless explicitly changed. When writing, the new runs will overwrite any prior runs. When writing a new user_entered_value, previous runs are erased.

        :param text_format_runs: The text_format_runs of this CellData.
        :type text_format_runs: List[TextFormatRun]
        """

        self._text_format_runs = text_format_runs

    @property
    def user_entered_format(self):
        """Gets the user_entered_format of this CellData.


        :return: The user_entered_format of this CellData.
        :rtype: CellFormat
        """
        return self._user_entered_format

    @user_entered_format.setter
    def user_entered_format(self, user_entered_format):
        """Sets the user_entered_format of this CellData.


        :param user_entered_format: The user_entered_format of this CellData.
        :type user_entered_format: CellFormat
        """

        self._user_entered_format = user_entered_format

    @property
    def user_entered_value(self):
        """Gets the user_entered_value of this CellData.


        :return: The user_entered_value of this CellData.
        :rtype: ExtendedValue
        """
        return self._user_entered_value

    @user_entered_value.setter
    def user_entered_value(self, user_entered_value):
        """Sets the user_entered_value of this CellData.


        :param user_entered_value: The user_entered_value of this CellData.
        :type user_entered_value: ExtendedValue
        """

        self._user_entered_value = user_entered_value
