# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_filter import DataFilter
from openapi_server import util


class DataFilterValueRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_filter: DataFilter=None, major_dimension: str=None, values: List[List[object]]=None):
        """DataFilterValueRange - a model defined in OpenAPI

        :param data_filter: The data_filter of this DataFilterValueRange.
        :param major_dimension: The major_dimension of this DataFilterValueRange.
        :param values: The values of this DataFilterValueRange.
        """
        self.openapi_types = {
            'data_filter': DataFilter,
            'major_dimension': str,
            'values': List[List[object]]
        }

        self.attribute_map = {
            'data_filter': 'dataFilter',
            'major_dimension': 'majorDimension',
            'values': 'values'
        }

        self._data_filter = data_filter
        self._major_dimension = major_dimension
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataFilterValueRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataFilterValueRange of this DataFilterValueRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_filter(self):
        """Gets the data_filter of this DataFilterValueRange.


        :return: The data_filter of this DataFilterValueRange.
        :rtype: DataFilter
        """
        return self._data_filter

    @data_filter.setter
    def data_filter(self, data_filter):
        """Sets the data_filter of this DataFilterValueRange.


        :param data_filter: The data_filter of this DataFilterValueRange.
        :type data_filter: DataFilter
        """

        self._data_filter = data_filter

    @property
    def major_dimension(self):
        """Gets the major_dimension of this DataFilterValueRange.

        The major dimension of the values.

        :return: The major_dimension of this DataFilterValueRange.
        :rtype: str
        """
        return self._major_dimension

    @major_dimension.setter
    def major_dimension(self, major_dimension):
        """Sets the major_dimension of this DataFilterValueRange.

        The major dimension of the values.

        :param major_dimension: The major_dimension of this DataFilterValueRange.
        :type major_dimension: str
        """
        allowed_values = ["DIMENSION_UNSPECIFIED", "ROWS", "COLUMNS"]  # noqa: E501
        if major_dimension not in allowed_values:
            raise ValueError(
                "Invalid value for `major_dimension` ({0}), must be one of {1}"
                .format(major_dimension, allowed_values)
            )

        self._major_dimension = major_dimension

    @property
    def values(self):
        """Gets the values of this DataFilterValueRange.

        The data to be written. If the provided values exceed any of the ranges matched by the data filter then the request fails. If the provided values are less than the matched ranges only the specified values are written, existing values in the matched ranges remain unaffected.

        :return: The values of this DataFilterValueRange.
        :rtype: List[List[object]]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this DataFilterValueRange.

        The data to be written. If the provided values exceed any of the ranges matched by the data filter then the request fails. If the provided values are less than the matched ranges only the specified values are written, existing values in the matched ranges remain unaffected.

        :param values: The values of this DataFilterValueRange.
        :type values: List[List[object]]
        """

        self._values = values
