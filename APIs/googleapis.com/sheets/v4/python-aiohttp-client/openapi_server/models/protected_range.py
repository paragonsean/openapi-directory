# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.editors import Editors
from openapi_server.models.grid_range import GridRange
from openapi_server import util


class ProtectedRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, editors: Editors=None, named_range_id: str=None, protected_range_id: int=None, range: GridRange=None, requesting_user_can_edit: bool=None, unprotected_ranges: List[GridRange]=None, warning_only: bool=None):
        """ProtectedRange - a model defined in OpenAPI

        :param description: The description of this ProtectedRange.
        :param editors: The editors of this ProtectedRange.
        :param named_range_id: The named_range_id of this ProtectedRange.
        :param protected_range_id: The protected_range_id of this ProtectedRange.
        :param range: The range of this ProtectedRange.
        :param requesting_user_can_edit: The requesting_user_can_edit of this ProtectedRange.
        :param unprotected_ranges: The unprotected_ranges of this ProtectedRange.
        :param warning_only: The warning_only of this ProtectedRange.
        """
        self.openapi_types = {
            'description': str,
            'editors': Editors,
            'named_range_id': str,
            'protected_range_id': int,
            'range': GridRange,
            'requesting_user_can_edit': bool,
            'unprotected_ranges': List[GridRange],
            'warning_only': bool
        }

        self.attribute_map = {
            'description': 'description',
            'editors': 'editors',
            'named_range_id': 'namedRangeId',
            'protected_range_id': 'protectedRangeId',
            'range': 'range',
            'requesting_user_can_edit': 'requestingUserCanEdit',
            'unprotected_ranges': 'unprotectedRanges',
            'warning_only': 'warningOnly'
        }

        self._description = description
        self._editors = editors
        self._named_range_id = named_range_id
        self._protected_range_id = protected_range_id
        self._range = range
        self._requesting_user_can_edit = requesting_user_can_edit
        self._unprotected_ranges = unprotected_ranges
        self._warning_only = warning_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProtectedRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProtectedRange of this ProtectedRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ProtectedRange.

        The description of this protected range.

        :return: The description of this ProtectedRange.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProtectedRange.

        The description of this protected range.

        :param description: The description of this ProtectedRange.
        :type description: str
        """

        self._description = description

    @property
    def editors(self):
        """Gets the editors of this ProtectedRange.


        :return: The editors of this ProtectedRange.
        :rtype: Editors
        """
        return self._editors

    @editors.setter
    def editors(self, editors):
        """Sets the editors of this ProtectedRange.


        :param editors: The editors of this ProtectedRange.
        :type editors: Editors
        """

        self._editors = editors

    @property
    def named_range_id(self):
        """Gets the named_range_id of this ProtectedRange.

        The named range this protected range is backed by, if any. When writing, only one of range or named_range_id may be set.

        :return: The named_range_id of this ProtectedRange.
        :rtype: str
        """
        return self._named_range_id

    @named_range_id.setter
    def named_range_id(self, named_range_id):
        """Sets the named_range_id of this ProtectedRange.

        The named range this protected range is backed by, if any. When writing, only one of range or named_range_id may be set.

        :param named_range_id: The named_range_id of this ProtectedRange.
        :type named_range_id: str
        """

        self._named_range_id = named_range_id

    @property
    def protected_range_id(self):
        """Gets the protected_range_id of this ProtectedRange.

        The ID of the protected range. This field is read-only.

        :return: The protected_range_id of this ProtectedRange.
        :rtype: int
        """
        return self._protected_range_id

    @protected_range_id.setter
    def protected_range_id(self, protected_range_id):
        """Sets the protected_range_id of this ProtectedRange.

        The ID of the protected range. This field is read-only.

        :param protected_range_id: The protected_range_id of this ProtectedRange.
        :type protected_range_id: int
        """

        self._protected_range_id = protected_range_id

    @property
    def range(self):
        """Gets the range of this ProtectedRange.


        :return: The range of this ProtectedRange.
        :rtype: GridRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this ProtectedRange.


        :param range: The range of this ProtectedRange.
        :type range: GridRange
        """

        self._range = range

    @property
    def requesting_user_can_edit(self):
        """Gets the requesting_user_can_edit of this ProtectedRange.

        True if the user who requested this protected range can edit the protected area. This field is read-only.

        :return: The requesting_user_can_edit of this ProtectedRange.
        :rtype: bool
        """
        return self._requesting_user_can_edit

    @requesting_user_can_edit.setter
    def requesting_user_can_edit(self, requesting_user_can_edit):
        """Sets the requesting_user_can_edit of this ProtectedRange.

        True if the user who requested this protected range can edit the protected area. This field is read-only.

        :param requesting_user_can_edit: The requesting_user_can_edit of this ProtectedRange.
        :type requesting_user_can_edit: bool
        """

        self._requesting_user_can_edit = requesting_user_can_edit

    @property
    def unprotected_ranges(self):
        """Gets the unprotected_ranges of this ProtectedRange.

        The list of unprotected ranges within a protected sheet. Unprotected ranges are only supported on protected sheets.

        :return: The unprotected_ranges of this ProtectedRange.
        :rtype: List[GridRange]
        """
        return self._unprotected_ranges

    @unprotected_ranges.setter
    def unprotected_ranges(self, unprotected_ranges):
        """Sets the unprotected_ranges of this ProtectedRange.

        The list of unprotected ranges within a protected sheet. Unprotected ranges are only supported on protected sheets.

        :param unprotected_ranges: The unprotected_ranges of this ProtectedRange.
        :type unprotected_ranges: List[GridRange]
        """

        self._unprotected_ranges = unprotected_ranges

    @property
    def warning_only(self):
        """Gets the warning_only of this ProtectedRange.

        True if this protected range will show a warning when editing. Warning-based protection means that every user can edit data in the protected range, except editing will prompt a warning asking the user to confirm the edit. When writing: if this field is true, then editors are ignored. Additionally, if this field is changed from true to false and the `editors` field is not set (nor included in the field mask), then the editors will be set to all the editors in the document.

        :return: The warning_only of this ProtectedRange.
        :rtype: bool
        """
        return self._warning_only

    @warning_only.setter
    def warning_only(self, warning_only):
        """Sets the warning_only of this ProtectedRange.

        True if this protected range will show a warning when editing. Warning-based protection means that every user can edit data in the protected range, except editing will prompt a warning asking the user to confirm the edit. When writing: if this field is true, then editors are ignored. Additionally, if this field is changed from true to false and the `editors` field is not set (nor included in the field mask), then the editors will be set to all the editors in the document.

        :param warning_only: The warning_only of this ProtectedRange.
        :type warning_only: bool
        """

        self._warning_only = warning_only
