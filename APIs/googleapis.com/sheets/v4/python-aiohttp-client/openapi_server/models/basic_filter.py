# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter_criteria import FilterCriteria
from openapi_server.models.filter_spec import FilterSpec
from openapi_server.models.grid_range import GridRange
from openapi_server.models.sort_spec import SortSpec
from openapi_server import util


class BasicFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, criteria: Dict[str, FilterCriteria]=None, filter_specs: List[FilterSpec]=None, range: GridRange=None, sort_specs: List[SortSpec]=None):
        """BasicFilter - a model defined in OpenAPI

        :param criteria: The criteria of this BasicFilter.
        :param filter_specs: The filter_specs of this BasicFilter.
        :param range: The range of this BasicFilter.
        :param sort_specs: The sort_specs of this BasicFilter.
        """
        self.openapi_types = {
            'criteria': Dict[str, FilterCriteria],
            'filter_specs': List[FilterSpec],
            'range': GridRange,
            'sort_specs': List[SortSpec]
        }

        self.attribute_map = {
            'criteria': 'criteria',
            'filter_specs': 'filterSpecs',
            'range': 'range',
            'sort_specs': 'sortSpecs'
        }

        self._criteria = criteria
        self._filter_specs = filter_specs
        self._range = range
        self._sort_specs = sort_specs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BasicFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BasicFilter of this BasicFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def criteria(self):
        """Gets the criteria of this BasicFilter.

        The criteria for showing/hiding values per column. The map's key is the column index, and the value is the criteria for that column. This field is deprecated in favor of filter_specs.

        :return: The criteria of this BasicFilter.
        :rtype: Dict[str, FilterCriteria]
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this BasicFilter.

        The criteria for showing/hiding values per column. The map's key is the column index, and the value is the criteria for that column. This field is deprecated in favor of filter_specs.

        :param criteria: The criteria of this BasicFilter.
        :type criteria: Dict[str, FilterCriteria]
        """

        self._criteria = criteria

    @property
    def filter_specs(self):
        """Gets the filter_specs of this BasicFilter.

        The filter criteria per column. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.

        :return: The filter_specs of this BasicFilter.
        :rtype: List[FilterSpec]
        """
        return self._filter_specs

    @filter_specs.setter
    def filter_specs(self, filter_specs):
        """Sets the filter_specs of this BasicFilter.

        The filter criteria per column. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.

        :param filter_specs: The filter_specs of this BasicFilter.
        :type filter_specs: List[FilterSpec]
        """

        self._filter_specs = filter_specs

    @property
    def range(self):
        """Gets the range of this BasicFilter.


        :return: The range of this BasicFilter.
        :rtype: GridRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this BasicFilter.


        :param range: The range of this BasicFilter.
        :type range: GridRange
        """

        self._range = range

    @property
    def sort_specs(self):
        """Gets the sort_specs of this BasicFilter.

        The sort order per column. Later specifications are used when values are equal in the earlier specifications.

        :return: The sort_specs of this BasicFilter.
        :rtype: List[SortSpec]
        """
        return self._sort_specs

    @sort_specs.setter
    def sort_specs(self, sort_specs):
        """Sets the sort_specs of this BasicFilter.

        The sort order per column. Later specifications are used when values are equal in the earlier specifications.

        :param sort_specs: The sort_specs of this BasicFilter.
        :type sort_specs: List[SortSpec]
        """

        self._sort_specs = sort_specs
