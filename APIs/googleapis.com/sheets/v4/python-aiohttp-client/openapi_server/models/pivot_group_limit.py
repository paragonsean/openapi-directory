# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PivotGroupLimit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apply_order: int=None, count_limit: int=None):
        """PivotGroupLimit - a model defined in OpenAPI

        :param apply_order: The apply_order of this PivotGroupLimit.
        :param count_limit: The count_limit of this PivotGroupLimit.
        """
        self.openapi_types = {
            'apply_order': int,
            'count_limit': int
        }

        self.attribute_map = {
            'apply_order': 'applyOrder',
            'count_limit': 'countLimit'
        }

        self._apply_order = apply_order
        self._count_limit = count_limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PivotGroupLimit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PivotGroupLimit of this PivotGroupLimit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apply_order(self):
        """Gets the apply_order of this PivotGroupLimit.

        The order in which the group limit is applied to the pivot table. Pivot group limits are applied from lower to higher order number. Order numbers are normalized to consecutive integers from 0. For write request, to fully customize the applying orders, all pivot group limits should have this field set with an unique number. Otherwise, the order is determined by the index in the PivotTable.rows list and then the PivotTable.columns list.

        :return: The apply_order of this PivotGroupLimit.
        :rtype: int
        """
        return self._apply_order

    @apply_order.setter
    def apply_order(self, apply_order):
        """Sets the apply_order of this PivotGroupLimit.

        The order in which the group limit is applied to the pivot table. Pivot group limits are applied from lower to higher order number. Order numbers are normalized to consecutive integers from 0. For write request, to fully customize the applying orders, all pivot group limits should have this field set with an unique number. Otherwise, the order is determined by the index in the PivotTable.rows list and then the PivotTable.columns list.

        :param apply_order: The apply_order of this PivotGroupLimit.
        :type apply_order: int
        """

        self._apply_order = apply_order

    @property
    def count_limit(self):
        """Gets the count_limit of this PivotGroupLimit.

        The count limit.

        :return: The count_limit of this PivotGroupLimit.
        :rtype: int
        """
        return self._count_limit

    @count_limit.setter
    def count_limit(self, count_limit):
        """Sets the count_limit of this PivotGroupLimit.

        The count limit.

        :param count_limit: The count_limit of this PivotGroupLimit.
        :type count_limit: int
        """

        self._count_limit = count_limit
