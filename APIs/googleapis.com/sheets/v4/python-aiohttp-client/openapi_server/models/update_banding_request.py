# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.banded_range import BandedRange
from openapi_server import util


class UpdateBandingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, banded_range: BandedRange=None, fields: str=None):
        """UpdateBandingRequest - a model defined in OpenAPI

        :param banded_range: The banded_range of this UpdateBandingRequest.
        :param fields: The fields of this UpdateBandingRequest.
        """
        self.openapi_types = {
            'banded_range': BandedRange,
            'fields': str
        }

        self.attribute_map = {
            'banded_range': 'bandedRange',
            'fields': 'fields'
        }

        self._banded_range = banded_range
        self._fields = fields

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateBandingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateBandingRequest of this UpdateBandingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def banded_range(self):
        """Gets the banded_range of this UpdateBandingRequest.


        :return: The banded_range of this UpdateBandingRequest.
        :rtype: BandedRange
        """
        return self._banded_range

    @banded_range.setter
    def banded_range(self, banded_range):
        """Sets the banded_range of this UpdateBandingRequest.


        :param banded_range: The banded_range of this UpdateBandingRequest.
        :type banded_range: BandedRange
        """

        self._banded_range = banded_range

    @property
    def fields(self):
        """Gets the fields of this UpdateBandingRequest.

        The fields that should be updated. At least one field must be specified. The root `bandedRange` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field.

        :return: The fields of this UpdateBandingRequest.
        :rtype: str
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this UpdateBandingRequest.

        The fields that should be updated. At least one field must be specified. The root `bandedRange` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field.

        :param fields: The fields of this UpdateBandingRequest.
        :type fields: str
        """

        self._fields = fields
