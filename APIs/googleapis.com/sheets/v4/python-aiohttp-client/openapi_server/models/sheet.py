# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.banded_range import BandedRange
from openapi_server.models.basic_filter import BasicFilter
from openapi_server.models.conditional_format_rule import ConditionalFormatRule
from openapi_server.models.developer_metadata import DeveloperMetadata
from openapi_server.models.dimension_group import DimensionGroup
from openapi_server.models.embedded_chart import EmbeddedChart
from openapi_server.models.filter_view import FilterView
from openapi_server.models.grid_data import GridData
from openapi_server.models.grid_range import GridRange
from openapi_server.models.protected_range import ProtectedRange
from openapi_server.models.sheet_properties import SheetProperties
from openapi_server.models.slicer import Slicer
from openapi_server import util


class Sheet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, banded_ranges: List[BandedRange]=None, basic_filter: BasicFilter=None, charts: List[EmbeddedChart]=None, column_groups: List[DimensionGroup]=None, conditional_formats: List[ConditionalFormatRule]=None, data: List[GridData]=None, developer_metadata: List[DeveloperMetadata]=None, filter_views: List[FilterView]=None, merges: List[GridRange]=None, properties: SheetProperties=None, protected_ranges: List[ProtectedRange]=None, row_groups: List[DimensionGroup]=None, slicers: List[Slicer]=None):
        """Sheet - a model defined in OpenAPI

        :param banded_ranges: The banded_ranges of this Sheet.
        :param basic_filter: The basic_filter of this Sheet.
        :param charts: The charts of this Sheet.
        :param column_groups: The column_groups of this Sheet.
        :param conditional_formats: The conditional_formats of this Sheet.
        :param data: The data of this Sheet.
        :param developer_metadata: The developer_metadata of this Sheet.
        :param filter_views: The filter_views of this Sheet.
        :param merges: The merges of this Sheet.
        :param properties: The properties of this Sheet.
        :param protected_ranges: The protected_ranges of this Sheet.
        :param row_groups: The row_groups of this Sheet.
        :param slicers: The slicers of this Sheet.
        """
        self.openapi_types = {
            'banded_ranges': List[BandedRange],
            'basic_filter': BasicFilter,
            'charts': List[EmbeddedChart],
            'column_groups': List[DimensionGroup],
            'conditional_formats': List[ConditionalFormatRule],
            'data': List[GridData],
            'developer_metadata': List[DeveloperMetadata],
            'filter_views': List[FilterView],
            'merges': List[GridRange],
            'properties': SheetProperties,
            'protected_ranges': List[ProtectedRange],
            'row_groups': List[DimensionGroup],
            'slicers': List[Slicer]
        }

        self.attribute_map = {
            'banded_ranges': 'bandedRanges',
            'basic_filter': 'basicFilter',
            'charts': 'charts',
            'column_groups': 'columnGroups',
            'conditional_formats': 'conditionalFormats',
            'data': 'data',
            'developer_metadata': 'developerMetadata',
            'filter_views': 'filterViews',
            'merges': 'merges',
            'properties': 'properties',
            'protected_ranges': 'protectedRanges',
            'row_groups': 'rowGroups',
            'slicers': 'slicers'
        }

        self._banded_ranges = banded_ranges
        self._basic_filter = basic_filter
        self._charts = charts
        self._column_groups = column_groups
        self._conditional_formats = conditional_formats
        self._data = data
        self._developer_metadata = developer_metadata
        self._filter_views = filter_views
        self._merges = merges
        self._properties = properties
        self._protected_ranges = protected_ranges
        self._row_groups = row_groups
        self._slicers = slicers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sheet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sheet of this Sheet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def banded_ranges(self):
        """Gets the banded_ranges of this Sheet.

        The banded (alternating colors) ranges on this sheet.

        :return: The banded_ranges of this Sheet.
        :rtype: List[BandedRange]
        """
        return self._banded_ranges

    @banded_ranges.setter
    def banded_ranges(self, banded_ranges):
        """Sets the banded_ranges of this Sheet.

        The banded (alternating colors) ranges on this sheet.

        :param banded_ranges: The banded_ranges of this Sheet.
        :type banded_ranges: List[BandedRange]
        """

        self._banded_ranges = banded_ranges

    @property
    def basic_filter(self):
        """Gets the basic_filter of this Sheet.


        :return: The basic_filter of this Sheet.
        :rtype: BasicFilter
        """
        return self._basic_filter

    @basic_filter.setter
    def basic_filter(self, basic_filter):
        """Sets the basic_filter of this Sheet.


        :param basic_filter: The basic_filter of this Sheet.
        :type basic_filter: BasicFilter
        """

        self._basic_filter = basic_filter

    @property
    def charts(self):
        """Gets the charts of this Sheet.

        The specifications of every chart on this sheet.

        :return: The charts of this Sheet.
        :rtype: List[EmbeddedChart]
        """
        return self._charts

    @charts.setter
    def charts(self, charts):
        """Sets the charts of this Sheet.

        The specifications of every chart on this sheet.

        :param charts: The charts of this Sheet.
        :type charts: List[EmbeddedChart]
        """

        self._charts = charts

    @property
    def column_groups(self):
        """Gets the column_groups of this Sheet.

        All column groups on this sheet, ordered by increasing range start index, then by group depth.

        :return: The column_groups of this Sheet.
        :rtype: List[DimensionGroup]
        """
        return self._column_groups

    @column_groups.setter
    def column_groups(self, column_groups):
        """Sets the column_groups of this Sheet.

        All column groups on this sheet, ordered by increasing range start index, then by group depth.

        :param column_groups: The column_groups of this Sheet.
        :type column_groups: List[DimensionGroup]
        """

        self._column_groups = column_groups

    @property
    def conditional_formats(self):
        """Gets the conditional_formats of this Sheet.

        The conditional format rules in this sheet.

        :return: The conditional_formats of this Sheet.
        :rtype: List[ConditionalFormatRule]
        """
        return self._conditional_formats

    @conditional_formats.setter
    def conditional_formats(self, conditional_formats):
        """Sets the conditional_formats of this Sheet.

        The conditional format rules in this sheet.

        :param conditional_formats: The conditional_formats of this Sheet.
        :type conditional_formats: List[ConditionalFormatRule]
        """

        self._conditional_formats = conditional_formats

    @property
    def data(self):
        """Gets the data of this Sheet.

        Data in the grid, if this is a grid sheet. The number of GridData objects returned is dependent on the number of ranges requested on this sheet. For example, if this is representing `Sheet1`, and the spreadsheet was requested with ranges `Sheet1!A1:C10` and `Sheet1!D15:E20`, then the first GridData will have a startRow/startColumn of `0`, while the second one will have `startRow 14` (zero-based row 15), and `startColumn 3` (zero-based column D). For a DATA_SOURCE sheet, you can not request a specific range, the GridData contains all the values.

        :return: The data of this Sheet.
        :rtype: List[GridData]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Sheet.

        Data in the grid, if this is a grid sheet. The number of GridData objects returned is dependent on the number of ranges requested on this sheet. For example, if this is representing `Sheet1`, and the spreadsheet was requested with ranges `Sheet1!A1:C10` and `Sheet1!D15:E20`, then the first GridData will have a startRow/startColumn of `0`, while the second one will have `startRow 14` (zero-based row 15), and `startColumn 3` (zero-based column D). For a DATA_SOURCE sheet, you can not request a specific range, the GridData contains all the values.

        :param data: The data of this Sheet.
        :type data: List[GridData]
        """

        self._data = data

    @property
    def developer_metadata(self):
        """Gets the developer_metadata of this Sheet.

        The developer metadata associated with a sheet.

        :return: The developer_metadata of this Sheet.
        :rtype: List[DeveloperMetadata]
        """
        return self._developer_metadata

    @developer_metadata.setter
    def developer_metadata(self, developer_metadata):
        """Sets the developer_metadata of this Sheet.

        The developer metadata associated with a sheet.

        :param developer_metadata: The developer_metadata of this Sheet.
        :type developer_metadata: List[DeveloperMetadata]
        """

        self._developer_metadata = developer_metadata

    @property
    def filter_views(self):
        """Gets the filter_views of this Sheet.

        The filter views in this sheet.

        :return: The filter_views of this Sheet.
        :rtype: List[FilterView]
        """
        return self._filter_views

    @filter_views.setter
    def filter_views(self, filter_views):
        """Sets the filter_views of this Sheet.

        The filter views in this sheet.

        :param filter_views: The filter_views of this Sheet.
        :type filter_views: List[FilterView]
        """

        self._filter_views = filter_views

    @property
    def merges(self):
        """Gets the merges of this Sheet.

        The ranges that are merged together.

        :return: The merges of this Sheet.
        :rtype: List[GridRange]
        """
        return self._merges

    @merges.setter
    def merges(self, merges):
        """Sets the merges of this Sheet.

        The ranges that are merged together.

        :param merges: The merges of this Sheet.
        :type merges: List[GridRange]
        """

        self._merges = merges

    @property
    def properties(self):
        """Gets the properties of this Sheet.


        :return: The properties of this Sheet.
        :rtype: SheetProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Sheet.


        :param properties: The properties of this Sheet.
        :type properties: SheetProperties
        """

        self._properties = properties

    @property
    def protected_ranges(self):
        """Gets the protected_ranges of this Sheet.

        The protected ranges in this sheet.

        :return: The protected_ranges of this Sheet.
        :rtype: List[ProtectedRange]
        """
        return self._protected_ranges

    @protected_ranges.setter
    def protected_ranges(self, protected_ranges):
        """Sets the protected_ranges of this Sheet.

        The protected ranges in this sheet.

        :param protected_ranges: The protected_ranges of this Sheet.
        :type protected_ranges: List[ProtectedRange]
        """

        self._protected_ranges = protected_ranges

    @property
    def row_groups(self):
        """Gets the row_groups of this Sheet.

        All row groups on this sheet, ordered by increasing range start index, then by group depth.

        :return: The row_groups of this Sheet.
        :rtype: List[DimensionGroup]
        """
        return self._row_groups

    @row_groups.setter
    def row_groups(self, row_groups):
        """Sets the row_groups of this Sheet.

        All row groups on this sheet, ordered by increasing range start index, then by group depth.

        :param row_groups: The row_groups of this Sheet.
        :type row_groups: List[DimensionGroup]
        """

        self._row_groups = row_groups

    @property
    def slicers(self):
        """Gets the slicers of this Sheet.

        The slicers on this sheet.

        :return: The slicers of this Sheet.
        :rtype: List[Slicer]
        """
        return self._slicers

    @slicers.setter
    def slicers(self, slicers):
        """Sets the slicers of this Sheet.

        The slicers on this sheet.

        :param slicers: The slicers of this Sheet.
        :type slicers: List[Slicer]
        """

        self._slicers = slicers
