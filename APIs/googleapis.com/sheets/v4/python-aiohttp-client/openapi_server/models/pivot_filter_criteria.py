# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.boolean_condition import BooleanCondition
from openapi_server import util


class PivotFilterCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition: BooleanCondition=None, visible_by_default: bool=None, visible_values: List[str]=None):
        """PivotFilterCriteria - a model defined in OpenAPI

        :param condition: The condition of this PivotFilterCriteria.
        :param visible_by_default: The visible_by_default of this PivotFilterCriteria.
        :param visible_values: The visible_values of this PivotFilterCriteria.
        """
        self.openapi_types = {
            'condition': BooleanCondition,
            'visible_by_default': bool,
            'visible_values': List[str]
        }

        self.attribute_map = {
            'condition': 'condition',
            'visible_by_default': 'visibleByDefault',
            'visible_values': 'visibleValues'
        }

        self._condition = condition
        self._visible_by_default = visible_by_default
        self._visible_values = visible_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PivotFilterCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PivotFilterCriteria of this PivotFilterCriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self):
        """Gets the condition of this PivotFilterCriteria.


        :return: The condition of this PivotFilterCriteria.
        :rtype: BooleanCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this PivotFilterCriteria.


        :param condition: The condition of this PivotFilterCriteria.
        :type condition: BooleanCondition
        """

        self._condition = condition

    @property
    def visible_by_default(self):
        """Gets the visible_by_default of this PivotFilterCriteria.

        Whether values are visible by default. If true, the visible_values are ignored, all values that meet condition (if specified) are shown. If false, values that are both in visible_values and meet condition are shown.

        :return: The visible_by_default of this PivotFilterCriteria.
        :rtype: bool
        """
        return self._visible_by_default

    @visible_by_default.setter
    def visible_by_default(self, visible_by_default):
        """Sets the visible_by_default of this PivotFilterCriteria.

        Whether values are visible by default. If true, the visible_values are ignored, all values that meet condition (if specified) are shown. If false, values that are both in visible_values and meet condition are shown.

        :param visible_by_default: The visible_by_default of this PivotFilterCriteria.
        :type visible_by_default: bool
        """

        self._visible_by_default = visible_by_default

    @property
    def visible_values(self):
        """Gets the visible_values of this PivotFilterCriteria.

        Values that should be included. Values not listed here are excluded.

        :return: The visible_values of this PivotFilterCriteria.
        :rtype: List[str]
        """
        return self._visible_values

    @visible_values.setter
    def visible_values(self, visible_values):
        """Sets the visible_values of this PivotFilterCriteria.

        Values that should be included. Values not listed here are excluded.

        :param visible_values: The visible_values of this PivotFilterCriteria.
        :type visible_values: List[str]
        """

        self._visible_values = visible_values
