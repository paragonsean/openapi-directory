# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.color import Color
from openapi_server.models.color_style import ColorStyle
from openapi_server import util


class InterpolationPoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: Color=None, color_style: ColorStyle=None, type: str=None, value: str=None):
        """InterpolationPoint - a model defined in OpenAPI

        :param color: The color of this InterpolationPoint.
        :param color_style: The color_style of this InterpolationPoint.
        :param type: The type of this InterpolationPoint.
        :param value: The value of this InterpolationPoint.
        """
        self.openapi_types = {
            'color': Color,
            'color_style': ColorStyle,
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'color': 'color',
            'color_style': 'colorStyle',
            'type': 'type',
            'value': 'value'
        }

        self._color = color
        self._color_style = color_style
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InterpolationPoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InterpolationPoint of this InterpolationPoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this InterpolationPoint.


        :return: The color of this InterpolationPoint.
        :rtype: Color
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this InterpolationPoint.


        :param color: The color of this InterpolationPoint.
        :type color: Color
        """

        self._color = color

    @property
    def color_style(self):
        """Gets the color_style of this InterpolationPoint.


        :return: The color_style of this InterpolationPoint.
        :rtype: ColorStyle
        """
        return self._color_style

    @color_style.setter
    def color_style(self, color_style):
        """Sets the color_style of this InterpolationPoint.


        :param color_style: The color_style of this InterpolationPoint.
        :type color_style: ColorStyle
        """

        self._color_style = color_style

    @property
    def type(self):
        """Gets the type of this InterpolationPoint.

        How the value should be interpreted.

        :return: The type of this InterpolationPoint.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InterpolationPoint.

        How the value should be interpreted.

        :param type: The type of this InterpolationPoint.
        :type type: str
        """
        allowed_values = ["INTERPOLATION_POINT_TYPE_UNSPECIFIED", "MIN", "MAX", "NUMBER", "PERCENT", "PERCENTILE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this InterpolationPoint.

        The value this interpolation point uses. May be a formula. Unused if type is MIN or MAX.

        :return: The value of this InterpolationPoint.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InterpolationPoint.

        The value this interpolation point uses. May be a formula. Unused if type is MIN or MAX.

        :param value: The value of this InterpolationPoint.
        :type value: str
        """

        self._value = value
