# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.developer_metadata_location import DeveloperMetadataLocation
from openapi_server import util


class DeveloperMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: DeveloperMetadataLocation=None, metadata_id: int=None, metadata_key: str=None, metadata_value: str=None, visibility: str=None):
        """DeveloperMetadata - a model defined in OpenAPI

        :param location: The location of this DeveloperMetadata.
        :param metadata_id: The metadata_id of this DeveloperMetadata.
        :param metadata_key: The metadata_key of this DeveloperMetadata.
        :param metadata_value: The metadata_value of this DeveloperMetadata.
        :param visibility: The visibility of this DeveloperMetadata.
        """
        self.openapi_types = {
            'location': DeveloperMetadataLocation,
            'metadata_id': int,
            'metadata_key': str,
            'metadata_value': str,
            'visibility': str
        }

        self.attribute_map = {
            'location': 'location',
            'metadata_id': 'metadataId',
            'metadata_key': 'metadataKey',
            'metadata_value': 'metadataValue',
            'visibility': 'visibility'
        }

        self._location = location
        self._metadata_id = metadata_id
        self._metadata_key = metadata_key
        self._metadata_value = metadata_value
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeveloperMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeveloperMetadata of this DeveloperMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this DeveloperMetadata.


        :return: The location of this DeveloperMetadata.
        :rtype: DeveloperMetadataLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DeveloperMetadata.


        :param location: The location of this DeveloperMetadata.
        :type location: DeveloperMetadataLocation
        """

        self._location = location

    @property
    def metadata_id(self):
        """Gets the metadata_id of this DeveloperMetadata.

        The spreadsheet-scoped unique ID that identifies the metadata. IDs may be specified when metadata is created, otherwise one will be randomly generated and assigned. Must be positive.

        :return: The metadata_id of this DeveloperMetadata.
        :rtype: int
        """
        return self._metadata_id

    @metadata_id.setter
    def metadata_id(self, metadata_id):
        """Sets the metadata_id of this DeveloperMetadata.

        The spreadsheet-scoped unique ID that identifies the metadata. IDs may be specified when metadata is created, otherwise one will be randomly generated and assigned. Must be positive.

        :param metadata_id: The metadata_id of this DeveloperMetadata.
        :type metadata_id: int
        """

        self._metadata_id = metadata_id

    @property
    def metadata_key(self):
        """Gets the metadata_key of this DeveloperMetadata.

        The metadata key. There may be multiple metadata in a spreadsheet with the same key. Developer metadata must always have a key specified.

        :return: The metadata_key of this DeveloperMetadata.
        :rtype: str
        """
        return self._metadata_key

    @metadata_key.setter
    def metadata_key(self, metadata_key):
        """Sets the metadata_key of this DeveloperMetadata.

        The metadata key. There may be multiple metadata in a spreadsheet with the same key. Developer metadata must always have a key specified.

        :param metadata_key: The metadata_key of this DeveloperMetadata.
        :type metadata_key: str
        """

        self._metadata_key = metadata_key

    @property
    def metadata_value(self):
        """Gets the metadata_value of this DeveloperMetadata.

        Data associated with the metadata's key.

        :return: The metadata_value of this DeveloperMetadata.
        :rtype: str
        """
        return self._metadata_value

    @metadata_value.setter
    def metadata_value(self, metadata_value):
        """Sets the metadata_value of this DeveloperMetadata.

        Data associated with the metadata's key.

        :param metadata_value: The metadata_value of this DeveloperMetadata.
        :type metadata_value: str
        """

        self._metadata_value = metadata_value

    @property
    def visibility(self):
        """Gets the visibility of this DeveloperMetadata.

        The metadata visibility. Developer metadata must always have a visibility specified.

        :return: The visibility of this DeveloperMetadata.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this DeveloperMetadata.

        The metadata visibility. Developer metadata must always have a visibility specified.

        :param visibility: The visibility of this DeveloperMetadata.
        :type visibility: str
        """
        allowed_values = ["DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED", "DOCUMENT", "PROJECT"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
