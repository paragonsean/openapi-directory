# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChartAxisViewWindowOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, view_window_max: float=None, view_window_min: float=None, view_window_mode: str=None):
        """ChartAxisViewWindowOptions - a model defined in OpenAPI

        :param view_window_max: The view_window_max of this ChartAxisViewWindowOptions.
        :param view_window_min: The view_window_min of this ChartAxisViewWindowOptions.
        :param view_window_mode: The view_window_mode of this ChartAxisViewWindowOptions.
        """
        self.openapi_types = {
            'view_window_max': float,
            'view_window_min': float,
            'view_window_mode': str
        }

        self.attribute_map = {
            'view_window_max': 'viewWindowMax',
            'view_window_min': 'viewWindowMin',
            'view_window_mode': 'viewWindowMode'
        }

        self._view_window_max = view_window_max
        self._view_window_min = view_window_min
        self._view_window_mode = view_window_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartAxisViewWindowOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartAxisViewWindowOptions of this ChartAxisViewWindowOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def view_window_max(self):
        """Gets the view_window_max of this ChartAxisViewWindowOptions.

        The maximum numeric value to be shown in this view window. If unset, will automatically determine a maximum value that looks good for the data.

        :return: The view_window_max of this ChartAxisViewWindowOptions.
        :rtype: float
        """
        return self._view_window_max

    @view_window_max.setter
    def view_window_max(self, view_window_max):
        """Sets the view_window_max of this ChartAxisViewWindowOptions.

        The maximum numeric value to be shown in this view window. If unset, will automatically determine a maximum value that looks good for the data.

        :param view_window_max: The view_window_max of this ChartAxisViewWindowOptions.
        :type view_window_max: float
        """

        self._view_window_max = view_window_max

    @property
    def view_window_min(self):
        """Gets the view_window_min of this ChartAxisViewWindowOptions.

        The minimum numeric value to be shown in this view window. If unset, will automatically determine a minimum value that looks good for the data.

        :return: The view_window_min of this ChartAxisViewWindowOptions.
        :rtype: float
        """
        return self._view_window_min

    @view_window_min.setter
    def view_window_min(self, view_window_min):
        """Sets the view_window_min of this ChartAxisViewWindowOptions.

        The minimum numeric value to be shown in this view window. If unset, will automatically determine a minimum value that looks good for the data.

        :param view_window_min: The view_window_min of this ChartAxisViewWindowOptions.
        :type view_window_min: float
        """

        self._view_window_min = view_window_min

    @property
    def view_window_mode(self):
        """Gets the view_window_mode of this ChartAxisViewWindowOptions.

        The view window's mode.

        :return: The view_window_mode of this ChartAxisViewWindowOptions.
        :rtype: str
        """
        return self._view_window_mode

    @view_window_mode.setter
    def view_window_mode(self, view_window_mode):
        """Sets the view_window_mode of this ChartAxisViewWindowOptions.

        The view window's mode.

        :param view_window_mode: The view_window_mode of this ChartAxisViewWindowOptions.
        :type view_window_mode: str
        """
        allowed_values = ["DEFAULT_VIEW_WINDOW_MODE", "VIEW_WINDOW_MODE_UNSUPPORTED", "EXPLICIT", "PRETTY"]  # noqa: E501
        if view_window_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `view_window_mode` ({0}), must be one of {1}"
                .format(view_window_mode, allowed_values)
            )

        self._view_window_mode = view_window_mode
