# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.grid_range import GridRange
from openapi_server import util


class InsertRangeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, range: GridRange=None, shift_dimension: str=None):
        """InsertRangeRequest - a model defined in OpenAPI

        :param range: The range of this InsertRangeRequest.
        :param shift_dimension: The shift_dimension of this InsertRangeRequest.
        """
        self.openapi_types = {
            'range': GridRange,
            'shift_dimension': str
        }

        self.attribute_map = {
            'range': 'range',
            'shift_dimension': 'shiftDimension'
        }

        self._range = range
        self._shift_dimension = shift_dimension

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InsertRangeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InsertRangeRequest of this InsertRangeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def range(self):
        """Gets the range of this InsertRangeRequest.


        :return: The range of this InsertRangeRequest.
        :rtype: GridRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this InsertRangeRequest.


        :param range: The range of this InsertRangeRequest.
        :type range: GridRange
        """

        self._range = range

    @property
    def shift_dimension(self):
        """Gets the shift_dimension of this InsertRangeRequest.

        The dimension which will be shifted when inserting cells. If ROWS, existing cells will be shifted down. If COLUMNS, existing cells will be shifted right.

        :return: The shift_dimension of this InsertRangeRequest.
        :rtype: str
        """
        return self._shift_dimension

    @shift_dimension.setter
    def shift_dimension(self, shift_dimension):
        """Sets the shift_dimension of this InsertRangeRequest.

        The dimension which will be shifted when inserting cells. If ROWS, existing cells will be shifted down. If COLUMNS, existing cells will be shifted right.

        :param shift_dimension: The shift_dimension of this InsertRangeRequest.
        :type shift_dimension: str
        """
        allowed_values = ["DIMENSION_UNSPECIFIED", "ROWS", "COLUMNS"]  # noqa: E501
        if shift_dimension not in allowed_values:
            raise ValueError(
                "Invalid value for `shift_dimension` ({0}), must be one of {1}"
                .format(shift_dimension, allowed_values)
            )

        self._shift_dimension = shift_dimension
