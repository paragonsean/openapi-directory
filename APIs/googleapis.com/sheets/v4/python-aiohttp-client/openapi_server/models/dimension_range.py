# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DimensionRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimension: str=None, end_index: int=None, sheet_id: int=None, start_index: int=None):
        """DimensionRange - a model defined in OpenAPI

        :param dimension: The dimension of this DimensionRange.
        :param end_index: The end_index of this DimensionRange.
        :param sheet_id: The sheet_id of this DimensionRange.
        :param start_index: The start_index of this DimensionRange.
        """
        self.openapi_types = {
            'dimension': str,
            'end_index': int,
            'sheet_id': int,
            'start_index': int
        }

        self.attribute_map = {
            'dimension': 'dimension',
            'end_index': 'endIndex',
            'sheet_id': 'sheetId',
            'start_index': 'startIndex'
        }

        self._dimension = dimension
        self._end_index = end_index
        self._sheet_id = sheet_id
        self._start_index = start_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DimensionRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DimensionRange of this DimensionRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimension(self):
        """Gets the dimension of this DimensionRange.

        The dimension of the span.

        :return: The dimension of this DimensionRange.
        :rtype: str
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this DimensionRange.

        The dimension of the span.

        :param dimension: The dimension of this DimensionRange.
        :type dimension: str
        """
        allowed_values = ["DIMENSION_UNSPECIFIED", "ROWS", "COLUMNS"]  # noqa: E501
        if dimension not in allowed_values:
            raise ValueError(
                "Invalid value for `dimension` ({0}), must be one of {1}"
                .format(dimension, allowed_values)
            )

        self._dimension = dimension

    @property
    def end_index(self):
        """Gets the end_index of this DimensionRange.

        The end (exclusive) of the span, or not set if unbounded.

        :return: The end_index of this DimensionRange.
        :rtype: int
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """Sets the end_index of this DimensionRange.

        The end (exclusive) of the span, or not set if unbounded.

        :param end_index: The end_index of this DimensionRange.
        :type end_index: int
        """

        self._end_index = end_index

    @property
    def sheet_id(self):
        """Gets the sheet_id of this DimensionRange.

        The sheet this span is on.

        :return: The sheet_id of this DimensionRange.
        :rtype: int
        """
        return self._sheet_id

    @sheet_id.setter
    def sheet_id(self, sheet_id):
        """Sets the sheet_id of this DimensionRange.

        The sheet this span is on.

        :param sheet_id: The sheet_id of this DimensionRange.
        :type sheet_id: int
        """

        self._sheet_id = sheet_id

    @property
    def start_index(self):
        """Gets the start_index of this DimensionRange.

        The start (inclusive) of the span, or not set if unbounded.

        :return: The start_index of this DimensionRange.
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this DimensionRange.

        The start (inclusive) of the span, or not set if unbounded.

        :param start_index: The start_index of this DimensionRange.
        :type start_index: int
        """

        self._start_index = start_index
