# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_label import DataLabel
from openapi_server.models.line_style import LineStyle
from openapi_server.models.waterfall_chart_domain import WaterfallChartDomain
from openapi_server.models.waterfall_chart_series import WaterfallChartSeries
from openapi_server import util


class WaterfallChartSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_line_style: LineStyle=None, domain: WaterfallChartDomain=None, first_value_is_total: bool=None, hide_connector_lines: bool=None, series: List[WaterfallChartSeries]=None, stacked_type: str=None, total_data_label: DataLabel=None):
        """WaterfallChartSpec - a model defined in OpenAPI

        :param connector_line_style: The connector_line_style of this WaterfallChartSpec.
        :param domain: The domain of this WaterfallChartSpec.
        :param first_value_is_total: The first_value_is_total of this WaterfallChartSpec.
        :param hide_connector_lines: The hide_connector_lines of this WaterfallChartSpec.
        :param series: The series of this WaterfallChartSpec.
        :param stacked_type: The stacked_type of this WaterfallChartSpec.
        :param total_data_label: The total_data_label of this WaterfallChartSpec.
        """
        self.openapi_types = {
            'connector_line_style': LineStyle,
            'domain': WaterfallChartDomain,
            'first_value_is_total': bool,
            'hide_connector_lines': bool,
            'series': List[WaterfallChartSeries],
            'stacked_type': str,
            'total_data_label': DataLabel
        }

        self.attribute_map = {
            'connector_line_style': 'connectorLineStyle',
            'domain': 'domain',
            'first_value_is_total': 'firstValueIsTotal',
            'hide_connector_lines': 'hideConnectorLines',
            'series': 'series',
            'stacked_type': 'stackedType',
            'total_data_label': 'totalDataLabel'
        }

        self._connector_line_style = connector_line_style
        self._domain = domain
        self._first_value_is_total = first_value_is_total
        self._hide_connector_lines = hide_connector_lines
        self._series = series
        self._stacked_type = stacked_type
        self._total_data_label = total_data_label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WaterfallChartSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WaterfallChartSpec of this WaterfallChartSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_line_style(self):
        """Gets the connector_line_style of this WaterfallChartSpec.


        :return: The connector_line_style of this WaterfallChartSpec.
        :rtype: LineStyle
        """
        return self._connector_line_style

    @connector_line_style.setter
    def connector_line_style(self, connector_line_style):
        """Sets the connector_line_style of this WaterfallChartSpec.


        :param connector_line_style: The connector_line_style of this WaterfallChartSpec.
        :type connector_line_style: LineStyle
        """

        self._connector_line_style = connector_line_style

    @property
    def domain(self):
        """Gets the domain of this WaterfallChartSpec.


        :return: The domain of this WaterfallChartSpec.
        :rtype: WaterfallChartDomain
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this WaterfallChartSpec.


        :param domain: The domain of this WaterfallChartSpec.
        :type domain: WaterfallChartDomain
        """

        self._domain = domain

    @property
    def first_value_is_total(self):
        """Gets the first_value_is_total of this WaterfallChartSpec.

        True to interpret the first value as a total.

        :return: The first_value_is_total of this WaterfallChartSpec.
        :rtype: bool
        """
        return self._first_value_is_total

    @first_value_is_total.setter
    def first_value_is_total(self, first_value_is_total):
        """Sets the first_value_is_total of this WaterfallChartSpec.

        True to interpret the first value as a total.

        :param first_value_is_total: The first_value_is_total of this WaterfallChartSpec.
        :type first_value_is_total: bool
        """

        self._first_value_is_total = first_value_is_total

    @property
    def hide_connector_lines(self):
        """Gets the hide_connector_lines of this WaterfallChartSpec.

        True to hide connector lines between columns.

        :return: The hide_connector_lines of this WaterfallChartSpec.
        :rtype: bool
        """
        return self._hide_connector_lines

    @hide_connector_lines.setter
    def hide_connector_lines(self, hide_connector_lines):
        """Sets the hide_connector_lines of this WaterfallChartSpec.

        True to hide connector lines between columns.

        :param hide_connector_lines: The hide_connector_lines of this WaterfallChartSpec.
        :type hide_connector_lines: bool
        """

        self._hide_connector_lines = hide_connector_lines

    @property
    def series(self):
        """Gets the series of this WaterfallChartSpec.

        The data this waterfall chart is visualizing.

        :return: The series of this WaterfallChartSpec.
        :rtype: List[WaterfallChartSeries]
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this WaterfallChartSpec.

        The data this waterfall chart is visualizing.

        :param series: The series of this WaterfallChartSpec.
        :type series: List[WaterfallChartSeries]
        """

        self._series = series

    @property
    def stacked_type(self):
        """Gets the stacked_type of this WaterfallChartSpec.

        The stacked type.

        :return: The stacked_type of this WaterfallChartSpec.
        :rtype: str
        """
        return self._stacked_type

    @stacked_type.setter
    def stacked_type(self, stacked_type):
        """Sets the stacked_type of this WaterfallChartSpec.

        The stacked type.

        :param stacked_type: The stacked_type of this WaterfallChartSpec.
        :type stacked_type: str
        """
        allowed_values = ["WATERFALL_STACKED_TYPE_UNSPECIFIED", "STACKED", "SEQUENTIAL"]  # noqa: E501
        if stacked_type not in allowed_values:
            raise ValueError(
                "Invalid value for `stacked_type` ({0}), must be one of {1}"
                .format(stacked_type, allowed_values)
            )

        self._stacked_type = stacked_type

    @property
    def total_data_label(self):
        """Gets the total_data_label of this WaterfallChartSpec.


        :return: The total_data_label of this WaterfallChartSpec.
        :rtype: DataLabel
        """
        return self._total_data_label

    @total_data_label.setter
    def total_data_label(self, total_data_label):
        """Sets the total_data_label of this WaterfallChartSpec.


        :param total_data_label: The total_data_label of this WaterfallChartSpec.
        :type total_data_label: DataLabel
        """

        self._total_data_label = total_data_label
