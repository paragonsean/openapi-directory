# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.borders import Borders
from openapi_server.models.color import Color
from openapi_server.models.color_style import ColorStyle
from openapi_server.models.number_format import NumberFormat
from openapi_server.models.padding import Padding
from openapi_server.models.text_format import TextFormat
from openapi_server.models.text_rotation import TextRotation
from openapi_server import util


class CellFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background_color: Color=None, background_color_style: ColorStyle=None, borders: Borders=None, horizontal_alignment: str=None, hyperlink_display_type: str=None, number_format: NumberFormat=None, padding: Padding=None, text_direction: str=None, text_format: TextFormat=None, text_rotation: TextRotation=None, vertical_alignment: str=None, wrap_strategy: str=None):
        """CellFormat - a model defined in OpenAPI

        :param background_color: The background_color of this CellFormat.
        :param background_color_style: The background_color_style of this CellFormat.
        :param borders: The borders of this CellFormat.
        :param horizontal_alignment: The horizontal_alignment of this CellFormat.
        :param hyperlink_display_type: The hyperlink_display_type of this CellFormat.
        :param number_format: The number_format of this CellFormat.
        :param padding: The padding of this CellFormat.
        :param text_direction: The text_direction of this CellFormat.
        :param text_format: The text_format of this CellFormat.
        :param text_rotation: The text_rotation of this CellFormat.
        :param vertical_alignment: The vertical_alignment of this CellFormat.
        :param wrap_strategy: The wrap_strategy of this CellFormat.
        """
        self.openapi_types = {
            'background_color': Color,
            'background_color_style': ColorStyle,
            'borders': Borders,
            'horizontal_alignment': str,
            'hyperlink_display_type': str,
            'number_format': NumberFormat,
            'padding': Padding,
            'text_direction': str,
            'text_format': TextFormat,
            'text_rotation': TextRotation,
            'vertical_alignment': str,
            'wrap_strategy': str
        }

        self.attribute_map = {
            'background_color': 'backgroundColor',
            'background_color_style': 'backgroundColorStyle',
            'borders': 'borders',
            'horizontal_alignment': 'horizontalAlignment',
            'hyperlink_display_type': 'hyperlinkDisplayType',
            'number_format': 'numberFormat',
            'padding': 'padding',
            'text_direction': 'textDirection',
            'text_format': 'textFormat',
            'text_rotation': 'textRotation',
            'vertical_alignment': 'verticalAlignment',
            'wrap_strategy': 'wrapStrategy'
        }

        self._background_color = background_color
        self._background_color_style = background_color_style
        self._borders = borders
        self._horizontal_alignment = horizontal_alignment
        self._hyperlink_display_type = hyperlink_display_type
        self._number_format = number_format
        self._padding = padding
        self._text_direction = text_direction
        self._text_format = text_format
        self._text_rotation = text_rotation
        self._vertical_alignment = vertical_alignment
        self._wrap_strategy = wrap_strategy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CellFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CellFormat of this CellFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background_color(self):
        """Gets the background_color of this CellFormat.


        :return: The background_color of this CellFormat.
        :rtype: Color
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this CellFormat.


        :param background_color: The background_color of this CellFormat.
        :type background_color: Color
        """

        self._background_color = background_color

    @property
    def background_color_style(self):
        """Gets the background_color_style of this CellFormat.


        :return: The background_color_style of this CellFormat.
        :rtype: ColorStyle
        """
        return self._background_color_style

    @background_color_style.setter
    def background_color_style(self, background_color_style):
        """Sets the background_color_style of this CellFormat.


        :param background_color_style: The background_color_style of this CellFormat.
        :type background_color_style: ColorStyle
        """

        self._background_color_style = background_color_style

    @property
    def borders(self):
        """Gets the borders of this CellFormat.


        :return: The borders of this CellFormat.
        :rtype: Borders
        """
        return self._borders

    @borders.setter
    def borders(self, borders):
        """Sets the borders of this CellFormat.


        :param borders: The borders of this CellFormat.
        :type borders: Borders
        """

        self._borders = borders

    @property
    def horizontal_alignment(self):
        """Gets the horizontal_alignment of this CellFormat.

        The horizontal alignment of the value in the cell.

        :return: The horizontal_alignment of this CellFormat.
        :rtype: str
        """
        return self._horizontal_alignment

    @horizontal_alignment.setter
    def horizontal_alignment(self, horizontal_alignment):
        """Sets the horizontal_alignment of this CellFormat.

        The horizontal alignment of the value in the cell.

        :param horizontal_alignment: The horizontal_alignment of this CellFormat.
        :type horizontal_alignment: str
        """
        allowed_values = ["HORIZONTAL_ALIGN_UNSPECIFIED", "LEFT", "CENTER", "RIGHT"]  # noqa: E501
        if horizontal_alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `horizontal_alignment` ({0}), must be one of {1}"
                .format(horizontal_alignment, allowed_values)
            )

        self._horizontal_alignment = horizontal_alignment

    @property
    def hyperlink_display_type(self):
        """Gets the hyperlink_display_type of this CellFormat.

        If one exists, how a hyperlink should be displayed in the cell.

        :return: The hyperlink_display_type of this CellFormat.
        :rtype: str
        """
        return self._hyperlink_display_type

    @hyperlink_display_type.setter
    def hyperlink_display_type(self, hyperlink_display_type):
        """Sets the hyperlink_display_type of this CellFormat.

        If one exists, how a hyperlink should be displayed in the cell.

        :param hyperlink_display_type: The hyperlink_display_type of this CellFormat.
        :type hyperlink_display_type: str
        """
        allowed_values = ["HYPERLINK_DISPLAY_TYPE_UNSPECIFIED", "LINKED", "PLAIN_TEXT"]  # noqa: E501
        if hyperlink_display_type not in allowed_values:
            raise ValueError(
                "Invalid value for `hyperlink_display_type` ({0}), must be one of {1}"
                .format(hyperlink_display_type, allowed_values)
            )

        self._hyperlink_display_type = hyperlink_display_type

    @property
    def number_format(self):
        """Gets the number_format of this CellFormat.


        :return: The number_format of this CellFormat.
        :rtype: NumberFormat
        """
        return self._number_format

    @number_format.setter
    def number_format(self, number_format):
        """Sets the number_format of this CellFormat.


        :param number_format: The number_format of this CellFormat.
        :type number_format: NumberFormat
        """

        self._number_format = number_format

    @property
    def padding(self):
        """Gets the padding of this CellFormat.


        :return: The padding of this CellFormat.
        :rtype: Padding
        """
        return self._padding

    @padding.setter
    def padding(self, padding):
        """Sets the padding of this CellFormat.


        :param padding: The padding of this CellFormat.
        :type padding: Padding
        """

        self._padding = padding

    @property
    def text_direction(self):
        """Gets the text_direction of this CellFormat.

        The direction of the text in the cell.

        :return: The text_direction of this CellFormat.
        :rtype: str
        """
        return self._text_direction

    @text_direction.setter
    def text_direction(self, text_direction):
        """Sets the text_direction of this CellFormat.

        The direction of the text in the cell.

        :param text_direction: The text_direction of this CellFormat.
        :type text_direction: str
        """
        allowed_values = ["TEXT_DIRECTION_UNSPECIFIED", "LEFT_TO_RIGHT", "RIGHT_TO_LEFT"]  # noqa: E501
        if text_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `text_direction` ({0}), must be one of {1}"
                .format(text_direction, allowed_values)
            )

        self._text_direction = text_direction

    @property
    def text_format(self):
        """Gets the text_format of this CellFormat.


        :return: The text_format of this CellFormat.
        :rtype: TextFormat
        """
        return self._text_format

    @text_format.setter
    def text_format(self, text_format):
        """Sets the text_format of this CellFormat.


        :param text_format: The text_format of this CellFormat.
        :type text_format: TextFormat
        """

        self._text_format = text_format

    @property
    def text_rotation(self):
        """Gets the text_rotation of this CellFormat.


        :return: The text_rotation of this CellFormat.
        :rtype: TextRotation
        """
        return self._text_rotation

    @text_rotation.setter
    def text_rotation(self, text_rotation):
        """Sets the text_rotation of this CellFormat.


        :param text_rotation: The text_rotation of this CellFormat.
        :type text_rotation: TextRotation
        """

        self._text_rotation = text_rotation

    @property
    def vertical_alignment(self):
        """Gets the vertical_alignment of this CellFormat.

        The vertical alignment of the value in the cell.

        :return: The vertical_alignment of this CellFormat.
        :rtype: str
        """
        return self._vertical_alignment

    @vertical_alignment.setter
    def vertical_alignment(self, vertical_alignment):
        """Sets the vertical_alignment of this CellFormat.

        The vertical alignment of the value in the cell.

        :param vertical_alignment: The vertical_alignment of this CellFormat.
        :type vertical_alignment: str
        """
        allowed_values = ["VERTICAL_ALIGN_UNSPECIFIED", "TOP", "MIDDLE", "BOTTOM"]  # noqa: E501
        if vertical_alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `vertical_alignment` ({0}), must be one of {1}"
                .format(vertical_alignment, allowed_values)
            )

        self._vertical_alignment = vertical_alignment

    @property
    def wrap_strategy(self):
        """Gets the wrap_strategy of this CellFormat.

        The wrap strategy for the value in the cell.

        :return: The wrap_strategy of this CellFormat.
        :rtype: str
        """
        return self._wrap_strategy

    @wrap_strategy.setter
    def wrap_strategy(self, wrap_strategy):
        """Sets the wrap_strategy of this CellFormat.

        The wrap strategy for the value in the cell.

        :param wrap_strategy: The wrap_strategy of this CellFormat.
        :type wrap_strategy: str
        """
        allowed_values = ["WRAP_STRATEGY_UNSPECIFIED", "OVERFLOW_CELL", "LEGACY_WRAP", "CLIP", "WRAP"]  # noqa: E501
        if wrap_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `wrap_strategy` ({0}), must be one of {1}"
                .format(wrap_strategy, allowed_values)
            )

        self._wrap_strategy = wrap_strategy
