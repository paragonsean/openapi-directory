# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chart_axis_view_window_options import ChartAxisViewWindowOptions
from openapi_server.models.text_format import TextFormat
from openapi_server.models.text_position import TextPosition
from openapi_server import util


class BasicChartAxis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, format: TextFormat=None, position: str=None, title: str=None, title_text_position: TextPosition=None, view_window_options: ChartAxisViewWindowOptions=None):
        """BasicChartAxis - a model defined in OpenAPI

        :param format: The format of this BasicChartAxis.
        :param position: The position of this BasicChartAxis.
        :param title: The title of this BasicChartAxis.
        :param title_text_position: The title_text_position of this BasicChartAxis.
        :param view_window_options: The view_window_options of this BasicChartAxis.
        """
        self.openapi_types = {
            'format': TextFormat,
            'position': str,
            'title': str,
            'title_text_position': TextPosition,
            'view_window_options': ChartAxisViewWindowOptions
        }

        self.attribute_map = {
            'format': 'format',
            'position': 'position',
            'title': 'title',
            'title_text_position': 'titleTextPosition',
            'view_window_options': 'viewWindowOptions'
        }

        self._format = format
        self._position = position
        self._title = title
        self._title_text_position = title_text_position
        self._view_window_options = view_window_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BasicChartAxis':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BasicChartAxis of this BasicChartAxis.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def format(self):
        """Gets the format of this BasicChartAxis.


        :return: The format of this BasicChartAxis.
        :rtype: TextFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this BasicChartAxis.


        :param format: The format of this BasicChartAxis.
        :type format: TextFormat
        """

        self._format = format

    @property
    def position(self):
        """Gets the position of this BasicChartAxis.

        The position of this axis.

        :return: The position of this BasicChartAxis.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this BasicChartAxis.

        The position of this axis.

        :param position: The position of this BasicChartAxis.
        :type position: str
        """
        allowed_values = ["BASIC_CHART_AXIS_POSITION_UNSPECIFIED", "BOTTOM_AXIS", "LEFT_AXIS", "RIGHT_AXIS"]  # noqa: E501
        if position not in allowed_values:
            raise ValueError(
                "Invalid value for `position` ({0}), must be one of {1}"
                .format(position, allowed_values)
            )

        self._position = position

    @property
    def title(self):
        """Gets the title of this BasicChartAxis.

        The title of this axis. If set, this overrides any title inferred from headers of the data.

        :return: The title of this BasicChartAxis.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BasicChartAxis.

        The title of this axis. If set, this overrides any title inferred from headers of the data.

        :param title: The title of this BasicChartAxis.
        :type title: str
        """

        self._title = title

    @property
    def title_text_position(self):
        """Gets the title_text_position of this BasicChartAxis.


        :return: The title_text_position of this BasicChartAxis.
        :rtype: TextPosition
        """
        return self._title_text_position

    @title_text_position.setter
    def title_text_position(self, title_text_position):
        """Sets the title_text_position of this BasicChartAxis.


        :param title_text_position: The title_text_position of this BasicChartAxis.
        :type title_text_position: TextPosition
        """

        self._title_text_position = title_text_position

    @property
    def view_window_options(self):
        """Gets the view_window_options of this BasicChartAxis.


        :return: The view_window_options of this BasicChartAxis.
        :rtype: ChartAxisViewWindowOptions
        """
        return self._view_window_options

    @view_window_options.setter
    def view_window_options(self, view_window_options):
        """Sets the view_window_options of this BasicChartAxis.


        :param view_window_options: The view_window_options of this BasicChartAxis.
        :type view_window_options: ChartAxisViewWindowOptions
        """

        self._view_window_options = view_window_options
