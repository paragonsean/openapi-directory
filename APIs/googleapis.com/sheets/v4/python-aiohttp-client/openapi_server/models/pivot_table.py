# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_execution_status import DataExecutionStatus
from openapi_server.models.grid_range import GridRange
from openapi_server.models.pivot_filter_criteria import PivotFilterCriteria
from openapi_server.models.pivot_filter_spec import PivotFilterSpec
from openapi_server.models.pivot_group import PivotGroup
from openapi_server.models.pivot_value import PivotValue
from openapi_server import util


class PivotTable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, columns: List[PivotGroup]=None, criteria: Dict[str, PivotFilterCriteria]=None, data_execution_status: DataExecutionStatus=None, data_source_id: str=None, filter_specs: List[PivotFilterSpec]=None, rows: List[PivotGroup]=None, source: GridRange=None, value_layout: str=None, values: List[PivotValue]=None):
        """PivotTable - a model defined in OpenAPI

        :param columns: The columns of this PivotTable.
        :param criteria: The criteria of this PivotTable.
        :param data_execution_status: The data_execution_status of this PivotTable.
        :param data_source_id: The data_source_id of this PivotTable.
        :param filter_specs: The filter_specs of this PivotTable.
        :param rows: The rows of this PivotTable.
        :param source: The source of this PivotTable.
        :param value_layout: The value_layout of this PivotTable.
        :param values: The values of this PivotTable.
        """
        self.openapi_types = {
            'columns': List[PivotGroup],
            'criteria': Dict[str, PivotFilterCriteria],
            'data_execution_status': DataExecutionStatus,
            'data_source_id': str,
            'filter_specs': List[PivotFilterSpec],
            'rows': List[PivotGroup],
            'source': GridRange,
            'value_layout': str,
            'values': List[PivotValue]
        }

        self.attribute_map = {
            'columns': 'columns',
            'criteria': 'criteria',
            'data_execution_status': 'dataExecutionStatus',
            'data_source_id': 'dataSourceId',
            'filter_specs': 'filterSpecs',
            'rows': 'rows',
            'source': 'source',
            'value_layout': 'valueLayout',
            'values': 'values'
        }

        self._columns = columns
        self._criteria = criteria
        self._data_execution_status = data_execution_status
        self._data_source_id = data_source_id
        self._filter_specs = filter_specs
        self._rows = rows
        self._source = source
        self._value_layout = value_layout
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PivotTable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PivotTable of this PivotTable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def columns(self):
        """Gets the columns of this PivotTable.

        Each column grouping in the pivot table.

        :return: The columns of this PivotTable.
        :rtype: List[PivotGroup]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this PivotTable.

        Each column grouping in the pivot table.

        :param columns: The columns of this PivotTable.
        :type columns: List[PivotGroup]
        """

        self._columns = columns

    @property
    def criteria(self):
        """Gets the criteria of this PivotTable.

        An optional mapping of filters per source column offset. The filters are applied before aggregating data into the pivot table. The map's key is the column offset of the source range that you want to filter, and the value is the criteria for that column. For example, if the source was `C10:E15`, a key of `0` will have the filter for column `C`, whereas the key `1` is for column `D`. This field is deprecated in favor of filter_specs.

        :return: The criteria of this PivotTable.
        :rtype: Dict[str, PivotFilterCriteria]
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this PivotTable.

        An optional mapping of filters per source column offset. The filters are applied before aggregating data into the pivot table. The map's key is the column offset of the source range that you want to filter, and the value is the criteria for that column. For example, if the source was `C10:E15`, a key of `0` will have the filter for column `C`, whereas the key `1` is for column `D`. This field is deprecated in favor of filter_specs.

        :param criteria: The criteria of this PivotTable.
        :type criteria: Dict[str, PivotFilterCriteria]
        """

        self._criteria = criteria

    @property
    def data_execution_status(self):
        """Gets the data_execution_status of this PivotTable.


        :return: The data_execution_status of this PivotTable.
        :rtype: DataExecutionStatus
        """
        return self._data_execution_status

    @data_execution_status.setter
    def data_execution_status(self, data_execution_status):
        """Sets the data_execution_status of this PivotTable.


        :param data_execution_status: The data_execution_status of this PivotTable.
        :type data_execution_status: DataExecutionStatus
        """

        self._data_execution_status = data_execution_status

    @property
    def data_source_id(self):
        """Gets the data_source_id of this PivotTable.

        The ID of the data source the pivot table is reading data from.

        :return: The data_source_id of this PivotTable.
        :rtype: str
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """Sets the data_source_id of this PivotTable.

        The ID of the data source the pivot table is reading data from.

        :param data_source_id: The data_source_id of this PivotTable.
        :type data_source_id: str
        """

        self._data_source_id = data_source_id

    @property
    def filter_specs(self):
        """Gets the filter_specs of this PivotTable.

        The filters applied to the source columns before aggregating data for the pivot table. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.

        :return: The filter_specs of this PivotTable.
        :rtype: List[PivotFilterSpec]
        """
        return self._filter_specs

    @filter_specs.setter
    def filter_specs(self, filter_specs):
        """Sets the filter_specs of this PivotTable.

        The filters applied to the source columns before aggregating data for the pivot table. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.

        :param filter_specs: The filter_specs of this PivotTable.
        :type filter_specs: List[PivotFilterSpec]
        """

        self._filter_specs = filter_specs

    @property
    def rows(self):
        """Gets the rows of this PivotTable.

        Each row grouping in the pivot table.

        :return: The rows of this PivotTable.
        :rtype: List[PivotGroup]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this PivotTable.

        Each row grouping in the pivot table.

        :param rows: The rows of this PivotTable.
        :type rows: List[PivotGroup]
        """

        self._rows = rows

    @property
    def source(self):
        """Gets the source of this PivotTable.


        :return: The source of this PivotTable.
        :rtype: GridRange
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this PivotTable.


        :param source: The source of this PivotTable.
        :type source: GridRange
        """

        self._source = source

    @property
    def value_layout(self):
        """Gets the value_layout of this PivotTable.

        Whether values should be listed horizontally (as columns) or vertically (as rows).

        :return: The value_layout of this PivotTable.
        :rtype: str
        """
        return self._value_layout

    @value_layout.setter
    def value_layout(self, value_layout):
        """Sets the value_layout of this PivotTable.

        Whether values should be listed horizontally (as columns) or vertically (as rows).

        :param value_layout: The value_layout of this PivotTable.
        :type value_layout: str
        """
        allowed_values = ["HORIZONTAL", "VERTICAL"]  # noqa: E501
        if value_layout not in allowed_values:
            raise ValueError(
                "Invalid value for `value_layout` ({0}), must be one of {1}"
                .format(value_layout, allowed_values)
            )

        self._value_layout = value_layout

    @property
    def values(self):
        """Gets the values of this PivotTable.

        A list of values to include in the pivot table.

        :return: The values of this PivotTable.
        :rtype: List[PivotValue]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this PivotTable.

        A list of values to include in the pivot table.

        :param values: The values of this PivotTable.
        :type values: List[PivotValue]
        """

        self._values = values
