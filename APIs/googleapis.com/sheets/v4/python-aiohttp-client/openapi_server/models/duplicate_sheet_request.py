# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DuplicateSheetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, insert_sheet_index: int=None, new_sheet_id: int=None, new_sheet_name: str=None, source_sheet_id: int=None):
        """DuplicateSheetRequest - a model defined in OpenAPI

        :param insert_sheet_index: The insert_sheet_index of this DuplicateSheetRequest.
        :param new_sheet_id: The new_sheet_id of this DuplicateSheetRequest.
        :param new_sheet_name: The new_sheet_name of this DuplicateSheetRequest.
        :param source_sheet_id: The source_sheet_id of this DuplicateSheetRequest.
        """
        self.openapi_types = {
            'insert_sheet_index': int,
            'new_sheet_id': int,
            'new_sheet_name': str,
            'source_sheet_id': int
        }

        self.attribute_map = {
            'insert_sheet_index': 'insertSheetIndex',
            'new_sheet_id': 'newSheetId',
            'new_sheet_name': 'newSheetName',
            'source_sheet_id': 'sourceSheetId'
        }

        self._insert_sheet_index = insert_sheet_index
        self._new_sheet_id = new_sheet_id
        self._new_sheet_name = new_sheet_name
        self._source_sheet_id = source_sheet_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DuplicateSheetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DuplicateSheetRequest of this DuplicateSheetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def insert_sheet_index(self):
        """Gets the insert_sheet_index of this DuplicateSheetRequest.

        The zero-based index where the new sheet should be inserted. The index of all sheets after this are incremented.

        :return: The insert_sheet_index of this DuplicateSheetRequest.
        :rtype: int
        """
        return self._insert_sheet_index

    @insert_sheet_index.setter
    def insert_sheet_index(self, insert_sheet_index):
        """Sets the insert_sheet_index of this DuplicateSheetRequest.

        The zero-based index where the new sheet should be inserted. The index of all sheets after this are incremented.

        :param insert_sheet_index: The insert_sheet_index of this DuplicateSheetRequest.
        :type insert_sheet_index: int
        """

        self._insert_sheet_index = insert_sheet_index

    @property
    def new_sheet_id(self):
        """Gets the new_sheet_id of this DuplicateSheetRequest.

        If set, the ID of the new sheet. If not set, an ID is chosen. If set, the ID must not conflict with any existing sheet ID. If set, it must be non-negative.

        :return: The new_sheet_id of this DuplicateSheetRequest.
        :rtype: int
        """
        return self._new_sheet_id

    @new_sheet_id.setter
    def new_sheet_id(self, new_sheet_id):
        """Sets the new_sheet_id of this DuplicateSheetRequest.

        If set, the ID of the new sheet. If not set, an ID is chosen. If set, the ID must not conflict with any existing sheet ID. If set, it must be non-negative.

        :param new_sheet_id: The new_sheet_id of this DuplicateSheetRequest.
        :type new_sheet_id: int
        """

        self._new_sheet_id = new_sheet_id

    @property
    def new_sheet_name(self):
        """Gets the new_sheet_name of this DuplicateSheetRequest.

        The name of the new sheet. If empty, a new name is chosen for you.

        :return: The new_sheet_name of this DuplicateSheetRequest.
        :rtype: str
        """
        return self._new_sheet_name

    @new_sheet_name.setter
    def new_sheet_name(self, new_sheet_name):
        """Sets the new_sheet_name of this DuplicateSheetRequest.

        The name of the new sheet. If empty, a new name is chosen for you.

        :param new_sheet_name: The new_sheet_name of this DuplicateSheetRequest.
        :type new_sheet_name: str
        """

        self._new_sheet_name = new_sheet_name

    @property
    def source_sheet_id(self):
        """Gets the source_sheet_id of this DuplicateSheetRequest.

        The sheet to duplicate. If the source sheet is of DATA_SOURCE type, its backing DataSource is also duplicated and associated with the new copy of the sheet. No data execution is triggered, the grid data of this sheet is also copied over but only available after the batch request completes.

        :return: The source_sheet_id of this DuplicateSheetRequest.
        :rtype: int
        """
        return self._source_sheet_id

    @source_sheet_id.setter
    def source_sheet_id(self, source_sheet_id):
        """Sets the source_sheet_id of this DuplicateSheetRequest.

        The sheet to duplicate. If the source sheet is of DATA_SOURCE type, its backing DataSource is also duplicated and associated with the new copy of the sheet. No data execution is triggered, the grid data of this sheet is also copied over but only available after the batch request completes.

        :param source_sheet_id: The source_sheet_id of this DuplicateSheetRequest.
        :type source_sheet_id: int
        """

        self._source_sheet_id = source_sheet_id
