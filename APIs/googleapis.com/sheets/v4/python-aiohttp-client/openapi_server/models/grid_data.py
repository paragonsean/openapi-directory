# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension_properties import DimensionProperties
from openapi_server.models.row_data import RowData
from openapi_server import util


class GridData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_metadata: List[DimensionProperties]=None, row_data: List[RowData]=None, row_metadata: List[DimensionProperties]=None, start_column: int=None, start_row: int=None):
        """GridData - a model defined in OpenAPI

        :param column_metadata: The column_metadata of this GridData.
        :param row_data: The row_data of this GridData.
        :param row_metadata: The row_metadata of this GridData.
        :param start_column: The start_column of this GridData.
        :param start_row: The start_row of this GridData.
        """
        self.openapi_types = {
            'column_metadata': List[DimensionProperties],
            'row_data': List[RowData],
            'row_metadata': List[DimensionProperties],
            'start_column': int,
            'start_row': int
        }

        self.attribute_map = {
            'column_metadata': 'columnMetadata',
            'row_data': 'rowData',
            'row_metadata': 'rowMetadata',
            'start_column': 'startColumn',
            'start_row': 'startRow'
        }

        self._column_metadata = column_metadata
        self._row_data = row_data
        self._row_metadata = row_metadata
        self._start_column = start_column
        self._start_row = start_row

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GridData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GridData of this GridData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_metadata(self):
        """Gets the column_metadata of this GridData.

        Metadata about the requested columns in the grid, starting with the column in start_column.

        :return: The column_metadata of this GridData.
        :rtype: List[DimensionProperties]
        """
        return self._column_metadata

    @column_metadata.setter
    def column_metadata(self, column_metadata):
        """Sets the column_metadata of this GridData.

        Metadata about the requested columns in the grid, starting with the column in start_column.

        :param column_metadata: The column_metadata of this GridData.
        :type column_metadata: List[DimensionProperties]
        """

        self._column_metadata = column_metadata

    @property
    def row_data(self):
        """Gets the row_data of this GridData.

        The data in the grid, one entry per row, starting with the row in startRow. The values in RowData will correspond to columns starting at start_column.

        :return: The row_data of this GridData.
        :rtype: List[RowData]
        """
        return self._row_data

    @row_data.setter
    def row_data(self, row_data):
        """Sets the row_data of this GridData.

        The data in the grid, one entry per row, starting with the row in startRow. The values in RowData will correspond to columns starting at start_column.

        :param row_data: The row_data of this GridData.
        :type row_data: List[RowData]
        """

        self._row_data = row_data

    @property
    def row_metadata(self):
        """Gets the row_metadata of this GridData.

        Metadata about the requested rows in the grid, starting with the row in start_row.

        :return: The row_metadata of this GridData.
        :rtype: List[DimensionProperties]
        """
        return self._row_metadata

    @row_metadata.setter
    def row_metadata(self, row_metadata):
        """Sets the row_metadata of this GridData.

        Metadata about the requested rows in the grid, starting with the row in start_row.

        :param row_metadata: The row_metadata of this GridData.
        :type row_metadata: List[DimensionProperties]
        """

        self._row_metadata = row_metadata

    @property
    def start_column(self):
        """Gets the start_column of this GridData.

        The first column this GridData refers to, zero-based.

        :return: The start_column of this GridData.
        :rtype: int
        """
        return self._start_column

    @start_column.setter
    def start_column(self, start_column):
        """Sets the start_column of this GridData.

        The first column this GridData refers to, zero-based.

        :param start_column: The start_column of this GridData.
        :type start_column: int
        """

        self._start_column = start_column

    @property
    def start_row(self):
        """Gets the start_row of this GridData.

        The first row this GridData refers to, zero-based.

        :return: The start_row of this GridData.
        :rtype: int
        """
        return self._start_row

    @start_row.setter
    def start_row(self, start_row):
        """Sets the start_row of this GridData.

        The first row this GridData refers to, zero-based.

        :param start_row: The start_row of this GridData.
        :type start_row: int
        """

        self._start_row = start_row
