# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.overlay_position import OverlayPosition
from openapi_server import util


class EmbeddedObjectPosition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_sheet: bool=None, overlay_position: OverlayPosition=None, sheet_id: int=None):
        """EmbeddedObjectPosition - a model defined in OpenAPI

        :param new_sheet: The new_sheet of this EmbeddedObjectPosition.
        :param overlay_position: The overlay_position of this EmbeddedObjectPosition.
        :param sheet_id: The sheet_id of this EmbeddedObjectPosition.
        """
        self.openapi_types = {
            'new_sheet': bool,
            'overlay_position': OverlayPosition,
            'sheet_id': int
        }

        self.attribute_map = {
            'new_sheet': 'newSheet',
            'overlay_position': 'overlayPosition',
            'sheet_id': 'sheetId'
        }

        self._new_sheet = new_sheet
        self._overlay_position = overlay_position
        self._sheet_id = sheet_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmbeddedObjectPosition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmbeddedObjectPosition of this EmbeddedObjectPosition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_sheet(self):
        """Gets the new_sheet of this EmbeddedObjectPosition.

        If true, the embedded object is put on a new sheet whose ID is chosen for you. Used only when writing.

        :return: The new_sheet of this EmbeddedObjectPosition.
        :rtype: bool
        """
        return self._new_sheet

    @new_sheet.setter
    def new_sheet(self, new_sheet):
        """Sets the new_sheet of this EmbeddedObjectPosition.

        If true, the embedded object is put on a new sheet whose ID is chosen for you. Used only when writing.

        :param new_sheet: The new_sheet of this EmbeddedObjectPosition.
        :type new_sheet: bool
        """

        self._new_sheet = new_sheet

    @property
    def overlay_position(self):
        """Gets the overlay_position of this EmbeddedObjectPosition.


        :return: The overlay_position of this EmbeddedObjectPosition.
        :rtype: OverlayPosition
        """
        return self._overlay_position

    @overlay_position.setter
    def overlay_position(self, overlay_position):
        """Sets the overlay_position of this EmbeddedObjectPosition.


        :param overlay_position: The overlay_position of this EmbeddedObjectPosition.
        :type overlay_position: OverlayPosition
        """

        self._overlay_position = overlay_position

    @property
    def sheet_id(self):
        """Gets the sheet_id of this EmbeddedObjectPosition.

        The sheet this is on. Set only if the embedded object is on its own sheet. Must be non-negative.

        :return: The sheet_id of this EmbeddedObjectPosition.
        :rtype: int
        """
        return self._sheet_id

    @sheet_id.setter
    def sheet_id(self, sheet_id):
        """Sets the sheet_id of this EmbeddedObjectPosition.

        The sheet this is on. Set only if the embedded object is on its own sheet. Must be non-negative.

        :param sheet_id: The sheet_id of this EmbeddedObjectPosition.
        :type sheet_id: int
        """

        self._sheet_id = sheet_id
