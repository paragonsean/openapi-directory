# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.color_style import ColorStyle
from openapi_server import util


class ThemeColorPair(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: ColorStyle=None, color_type: str=None):
        """ThemeColorPair - a model defined in OpenAPI

        :param color: The color of this ThemeColorPair.
        :param color_type: The color_type of this ThemeColorPair.
        """
        self.openapi_types = {
            'color': ColorStyle,
            'color_type': str
        }

        self.attribute_map = {
            'color': 'color',
            'color_type': 'colorType'
        }

        self._color = color
        self._color_type = color_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThemeColorPair':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThemeColorPair of this ThemeColorPair.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this ThemeColorPair.


        :return: The color of this ThemeColorPair.
        :rtype: ColorStyle
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ThemeColorPair.


        :param color: The color of this ThemeColorPair.
        :type color: ColorStyle
        """

        self._color = color

    @property
    def color_type(self):
        """Gets the color_type of this ThemeColorPair.

        The type of the spreadsheet theme color.

        :return: The color_type of this ThemeColorPair.
        :rtype: str
        """
        return self._color_type

    @color_type.setter
    def color_type(self, color_type):
        """Sets the color_type of this ThemeColorPair.

        The type of the spreadsheet theme color.

        :param color_type: The color_type of this ThemeColorPair.
        :type color_type: str
        """
        allowed_values = ["THEME_COLOR_TYPE_UNSPECIFIED", "TEXT", "BACKGROUND", "ACCENT1", "ACCENT2", "ACCENT3", "ACCENT4", "ACCENT5", "ACCENT6", "LINK"]  # noqa: E501
        if color_type not in allowed_values:
            raise ValueError(
                "Invalid value for `color_type` ({0}), must be one of {1}"
                .format(color_type, allowed_values)
            )

        self._color_type = color_type
