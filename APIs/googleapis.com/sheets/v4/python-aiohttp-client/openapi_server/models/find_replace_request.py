# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.grid_range import GridRange
from openapi_server import util


class FindReplaceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_sheets: bool=None, find: str=None, include_formulas: bool=None, match_case: bool=None, match_entire_cell: bool=None, range: GridRange=None, replacement: str=None, search_by_regex: bool=None, sheet_id: int=None):
        """FindReplaceRequest - a model defined in OpenAPI

        :param all_sheets: The all_sheets of this FindReplaceRequest.
        :param find: The find of this FindReplaceRequest.
        :param include_formulas: The include_formulas of this FindReplaceRequest.
        :param match_case: The match_case of this FindReplaceRequest.
        :param match_entire_cell: The match_entire_cell of this FindReplaceRequest.
        :param range: The range of this FindReplaceRequest.
        :param replacement: The replacement of this FindReplaceRequest.
        :param search_by_regex: The search_by_regex of this FindReplaceRequest.
        :param sheet_id: The sheet_id of this FindReplaceRequest.
        """
        self.openapi_types = {
            'all_sheets': bool,
            'find': str,
            'include_formulas': bool,
            'match_case': bool,
            'match_entire_cell': bool,
            'range': GridRange,
            'replacement': str,
            'search_by_regex': bool,
            'sheet_id': int
        }

        self.attribute_map = {
            'all_sheets': 'allSheets',
            'find': 'find',
            'include_formulas': 'includeFormulas',
            'match_case': 'matchCase',
            'match_entire_cell': 'matchEntireCell',
            'range': 'range',
            'replacement': 'replacement',
            'search_by_regex': 'searchByRegex',
            'sheet_id': 'sheetId'
        }

        self._all_sheets = all_sheets
        self._find = find
        self._include_formulas = include_formulas
        self._match_case = match_case
        self._match_entire_cell = match_entire_cell
        self._range = range
        self._replacement = replacement
        self._search_by_regex = search_by_regex
        self._sheet_id = sheet_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FindReplaceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FindReplaceRequest of this FindReplaceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_sheets(self):
        """Gets the all_sheets of this FindReplaceRequest.

        True to find/replace over all sheets.

        :return: The all_sheets of this FindReplaceRequest.
        :rtype: bool
        """
        return self._all_sheets

    @all_sheets.setter
    def all_sheets(self, all_sheets):
        """Sets the all_sheets of this FindReplaceRequest.

        True to find/replace over all sheets.

        :param all_sheets: The all_sheets of this FindReplaceRequest.
        :type all_sheets: bool
        """

        self._all_sheets = all_sheets

    @property
    def find(self):
        """Gets the find of this FindReplaceRequest.

        The value to search.

        :return: The find of this FindReplaceRequest.
        :rtype: str
        """
        return self._find

    @find.setter
    def find(self, find):
        """Sets the find of this FindReplaceRequest.

        The value to search.

        :param find: The find of this FindReplaceRequest.
        :type find: str
        """

        self._find = find

    @property
    def include_formulas(self):
        """Gets the include_formulas of this FindReplaceRequest.

        True if the search should include cells with formulas. False to skip cells with formulas.

        :return: The include_formulas of this FindReplaceRequest.
        :rtype: bool
        """
        return self._include_formulas

    @include_formulas.setter
    def include_formulas(self, include_formulas):
        """Sets the include_formulas of this FindReplaceRequest.

        True if the search should include cells with formulas. False to skip cells with formulas.

        :param include_formulas: The include_formulas of this FindReplaceRequest.
        :type include_formulas: bool
        """

        self._include_formulas = include_formulas

    @property
    def match_case(self):
        """Gets the match_case of this FindReplaceRequest.

        True if the search is case sensitive.

        :return: The match_case of this FindReplaceRequest.
        :rtype: bool
        """
        return self._match_case

    @match_case.setter
    def match_case(self, match_case):
        """Sets the match_case of this FindReplaceRequest.

        True if the search is case sensitive.

        :param match_case: The match_case of this FindReplaceRequest.
        :type match_case: bool
        """

        self._match_case = match_case

    @property
    def match_entire_cell(self):
        """Gets the match_entire_cell of this FindReplaceRequest.

        True if the find value should match the entire cell.

        :return: The match_entire_cell of this FindReplaceRequest.
        :rtype: bool
        """
        return self._match_entire_cell

    @match_entire_cell.setter
    def match_entire_cell(self, match_entire_cell):
        """Sets the match_entire_cell of this FindReplaceRequest.

        True if the find value should match the entire cell.

        :param match_entire_cell: The match_entire_cell of this FindReplaceRequest.
        :type match_entire_cell: bool
        """

        self._match_entire_cell = match_entire_cell

    @property
    def range(self):
        """Gets the range of this FindReplaceRequest.


        :return: The range of this FindReplaceRequest.
        :rtype: GridRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this FindReplaceRequest.


        :param range: The range of this FindReplaceRequest.
        :type range: GridRange
        """

        self._range = range

    @property
    def replacement(self):
        """Gets the replacement of this FindReplaceRequest.

        The value to use as the replacement.

        :return: The replacement of this FindReplaceRequest.
        :rtype: str
        """
        return self._replacement

    @replacement.setter
    def replacement(self, replacement):
        """Sets the replacement of this FindReplaceRequest.

        The value to use as the replacement.

        :param replacement: The replacement of this FindReplaceRequest.
        :type replacement: str
        """

        self._replacement = replacement

    @property
    def search_by_regex(self):
        """Gets the search_by_regex of this FindReplaceRequest.

        True if the find value is a regex. The regular expression and replacement should follow Java regex rules at https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html. The replacement string is allowed to refer to capturing groups. For example, if one cell has the contents `\"Google Sheets\"` and another has `\"Google Docs\"`, then searching for `\"o.* (.*)\"` with a replacement of `\"$1 Rocks\"` would change the contents of the cells to `\"GSheets Rocks\"` and `\"GDocs Rocks\"` respectively.

        :return: The search_by_regex of this FindReplaceRequest.
        :rtype: bool
        """
        return self._search_by_regex

    @search_by_regex.setter
    def search_by_regex(self, search_by_regex):
        """Sets the search_by_regex of this FindReplaceRequest.

        True if the find value is a regex. The regular expression and replacement should follow Java regex rules at https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html. The replacement string is allowed to refer to capturing groups. For example, if one cell has the contents `\"Google Sheets\"` and another has `\"Google Docs\"`, then searching for `\"o.* (.*)\"` with a replacement of `\"$1 Rocks\"` would change the contents of the cells to `\"GSheets Rocks\"` and `\"GDocs Rocks\"` respectively.

        :param search_by_regex: The search_by_regex of this FindReplaceRequest.
        :type search_by_regex: bool
        """

        self._search_by_regex = search_by_regex

    @property
    def sheet_id(self):
        """Gets the sheet_id of this FindReplaceRequest.

        The sheet to find/replace over.

        :return: The sheet_id of this FindReplaceRequest.
        :rtype: int
        """
        return self._sheet_id

    @sheet_id.setter
    def sheet_id(self, sheet_id):
        """Sets the sheet_id of this FindReplaceRequest.

        The sheet to find/replace over.

        :param sheet_id: The sheet_id of this FindReplaceRequest.
        :type sheet_id: int
        """

        self._sheet_id = sheet_id
