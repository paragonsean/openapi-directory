# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.grid_coordinate import GridCoordinate
from openapi_server import util


class PasteDataRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coordinate: GridCoordinate=None, data: str=None, delimiter: str=None, html: bool=None, type: str=None):
        """PasteDataRequest - a model defined in OpenAPI

        :param coordinate: The coordinate of this PasteDataRequest.
        :param data: The data of this PasteDataRequest.
        :param delimiter: The delimiter of this PasteDataRequest.
        :param html: The html of this PasteDataRequest.
        :param type: The type of this PasteDataRequest.
        """
        self.openapi_types = {
            'coordinate': GridCoordinate,
            'data': str,
            'delimiter': str,
            'html': bool,
            'type': str
        }

        self.attribute_map = {
            'coordinate': 'coordinate',
            'data': 'data',
            'delimiter': 'delimiter',
            'html': 'html',
            'type': 'type'
        }

        self._coordinate = coordinate
        self._data = data
        self._delimiter = delimiter
        self._html = html
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PasteDataRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PasteDataRequest of this PasteDataRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coordinate(self):
        """Gets the coordinate of this PasteDataRequest.


        :return: The coordinate of this PasteDataRequest.
        :rtype: GridCoordinate
        """
        return self._coordinate

    @coordinate.setter
    def coordinate(self, coordinate):
        """Sets the coordinate of this PasteDataRequest.


        :param coordinate: The coordinate of this PasteDataRequest.
        :type coordinate: GridCoordinate
        """

        self._coordinate = coordinate

    @property
    def data(self):
        """Gets the data of this PasteDataRequest.

        The data to insert.

        :return: The data of this PasteDataRequest.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PasteDataRequest.

        The data to insert.

        :param data: The data of this PasteDataRequest.
        :type data: str
        """

        self._data = data

    @property
    def delimiter(self):
        """Gets the delimiter of this PasteDataRequest.

        The delimiter in the data.

        :return: The delimiter of this PasteDataRequest.
        :rtype: str
        """
        return self._delimiter

    @delimiter.setter
    def delimiter(self, delimiter):
        """Sets the delimiter of this PasteDataRequest.

        The delimiter in the data.

        :param delimiter: The delimiter of this PasteDataRequest.
        :type delimiter: str
        """

        self._delimiter = delimiter

    @property
    def html(self):
        """Gets the html of this PasteDataRequest.

        True if the data is HTML.

        :return: The html of this PasteDataRequest.
        :rtype: bool
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this PasteDataRequest.

        True if the data is HTML.

        :param html: The html of this PasteDataRequest.
        :type html: bool
        """

        self._html = html

    @property
    def type(self):
        """Gets the type of this PasteDataRequest.

        How the data should be pasted.

        :return: The type of this PasteDataRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PasteDataRequest.

        How the data should be pasted.

        :param type: The type of this PasteDataRequest.
        :type type: str
        """
        allowed_values = ["PASTE_NORMAL", "PASTE_VALUES", "PASTE_FORMAT", "PASTE_NO_BORDERS", "PASTE_FORMULA", "PASTE_DATA_VALIDATION", "PASTE_CONDITIONAL_FORMATTING"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
