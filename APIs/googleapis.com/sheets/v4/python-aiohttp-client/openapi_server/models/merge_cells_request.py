# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.grid_range import GridRange
from openapi_server import util


class MergeCellsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merge_type: str=None, range: GridRange=None):
        """MergeCellsRequest - a model defined in OpenAPI

        :param merge_type: The merge_type of this MergeCellsRequest.
        :param range: The range of this MergeCellsRequest.
        """
        self.openapi_types = {
            'merge_type': str,
            'range': GridRange
        }

        self.attribute_map = {
            'merge_type': 'mergeType',
            'range': 'range'
        }

        self._merge_type = merge_type
        self._range = range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MergeCellsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MergeCellsRequest of this MergeCellsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merge_type(self):
        """Gets the merge_type of this MergeCellsRequest.

        How the cells should be merged.

        :return: The merge_type of this MergeCellsRequest.
        :rtype: str
        """
        return self._merge_type

    @merge_type.setter
    def merge_type(self, merge_type):
        """Sets the merge_type of this MergeCellsRequest.

        How the cells should be merged.

        :param merge_type: The merge_type of this MergeCellsRequest.
        :type merge_type: str
        """
        allowed_values = ["MERGE_ALL", "MERGE_COLUMNS", "MERGE_ROWS"]  # noqa: E501
        if merge_type not in allowed_values:
            raise ValueError(
                "Invalid value for `merge_type` ({0}), must be one of {1}"
                .format(merge_type, allowed_values)
            )

        self._merge_type = merge_type

    @property
    def range(self):
        """Gets the range of this MergeCellsRequest.


        :return: The range of this MergeCellsRequest.
        :rtype: GridRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this MergeCellsRequest.


        :param range: The range of this MergeCellsRequest.
        :type range: GridRange
        """

        self._range = range
