# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IterativeCalculationSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, convergence_threshold: float=None, max_iterations: int=None):
        """IterativeCalculationSettings - a model defined in OpenAPI

        :param convergence_threshold: The convergence_threshold of this IterativeCalculationSettings.
        :param max_iterations: The max_iterations of this IterativeCalculationSettings.
        """
        self.openapi_types = {
            'convergence_threshold': float,
            'max_iterations': int
        }

        self.attribute_map = {
            'convergence_threshold': 'convergenceThreshold',
            'max_iterations': 'maxIterations'
        }

        self._convergence_threshold = convergence_threshold
        self._max_iterations = max_iterations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IterativeCalculationSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IterativeCalculationSettings of this IterativeCalculationSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def convergence_threshold(self):
        """Gets the convergence_threshold of this IterativeCalculationSettings.

        When iterative calculation is enabled and successive results differ by less than this threshold value, the calculation rounds stop.

        :return: The convergence_threshold of this IterativeCalculationSettings.
        :rtype: float
        """
        return self._convergence_threshold

    @convergence_threshold.setter
    def convergence_threshold(self, convergence_threshold):
        """Sets the convergence_threshold of this IterativeCalculationSettings.

        When iterative calculation is enabled and successive results differ by less than this threshold value, the calculation rounds stop.

        :param convergence_threshold: The convergence_threshold of this IterativeCalculationSettings.
        :type convergence_threshold: float
        """

        self._convergence_threshold = convergence_threshold

    @property
    def max_iterations(self):
        """Gets the max_iterations of this IterativeCalculationSettings.

        When iterative calculation is enabled, the maximum number of calculation rounds to perform.

        :return: The max_iterations of this IterativeCalculationSettings.
        :rtype: int
        """
        return self._max_iterations

    @max_iterations.setter
    def max_iterations(self, max_iterations):
        """Sets the max_iterations of this IterativeCalculationSettings.

        When iterative calculation is enabled, the maximum number of calculation rounds to perform.

        :param max_iterations: The max_iterations of this IterativeCalculationSettings.
        :type max_iterations: int
        """

        self._max_iterations = max_iterations
