# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.basic_chart_spec import BasicChartSpec
from openapi_server.models.bubble_chart_spec import BubbleChartSpec
from openapi_server.models.candlestick_chart_spec import CandlestickChartSpec
from openapi_server.models.color import Color
from openapi_server.models.color_style import ColorStyle
from openapi_server.models.data_source_chart_properties import DataSourceChartProperties
from openapi_server.models.filter_spec import FilterSpec
from openapi_server.models.histogram_chart_spec import HistogramChartSpec
from openapi_server.models.org_chart_spec import OrgChartSpec
from openapi_server.models.pie_chart_spec import PieChartSpec
from openapi_server.models.scorecard_chart_spec import ScorecardChartSpec
from openapi_server.models.sort_spec import SortSpec
from openapi_server.models.text_format import TextFormat
from openapi_server.models.text_position import TextPosition
from openapi_server.models.treemap_chart_spec import TreemapChartSpec
from openapi_server.models.waterfall_chart_spec import WaterfallChartSpec
from openapi_server import util


class ChartSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alt_text: str=None, background_color: Color=None, background_color_style: ColorStyle=None, basic_chart: BasicChartSpec=None, bubble_chart: BubbleChartSpec=None, candlestick_chart: CandlestickChartSpec=None, data_source_chart_properties: DataSourceChartProperties=None, filter_specs: List[FilterSpec]=None, font_name: str=None, hidden_dimension_strategy: str=None, histogram_chart: HistogramChartSpec=None, maximized: bool=None, org_chart: OrgChartSpec=None, pie_chart: PieChartSpec=None, scorecard_chart: ScorecardChartSpec=None, sort_specs: List[SortSpec]=None, subtitle: str=None, subtitle_text_format: TextFormat=None, subtitle_text_position: TextPosition=None, title: str=None, title_text_format: TextFormat=None, title_text_position: TextPosition=None, treemap_chart: TreemapChartSpec=None, waterfall_chart: WaterfallChartSpec=None):
        """ChartSpec - a model defined in OpenAPI

        :param alt_text: The alt_text of this ChartSpec.
        :param background_color: The background_color of this ChartSpec.
        :param background_color_style: The background_color_style of this ChartSpec.
        :param basic_chart: The basic_chart of this ChartSpec.
        :param bubble_chart: The bubble_chart of this ChartSpec.
        :param candlestick_chart: The candlestick_chart of this ChartSpec.
        :param data_source_chart_properties: The data_source_chart_properties of this ChartSpec.
        :param filter_specs: The filter_specs of this ChartSpec.
        :param font_name: The font_name of this ChartSpec.
        :param hidden_dimension_strategy: The hidden_dimension_strategy of this ChartSpec.
        :param histogram_chart: The histogram_chart of this ChartSpec.
        :param maximized: The maximized of this ChartSpec.
        :param org_chart: The org_chart of this ChartSpec.
        :param pie_chart: The pie_chart of this ChartSpec.
        :param scorecard_chart: The scorecard_chart of this ChartSpec.
        :param sort_specs: The sort_specs of this ChartSpec.
        :param subtitle: The subtitle of this ChartSpec.
        :param subtitle_text_format: The subtitle_text_format of this ChartSpec.
        :param subtitle_text_position: The subtitle_text_position of this ChartSpec.
        :param title: The title of this ChartSpec.
        :param title_text_format: The title_text_format of this ChartSpec.
        :param title_text_position: The title_text_position of this ChartSpec.
        :param treemap_chart: The treemap_chart of this ChartSpec.
        :param waterfall_chart: The waterfall_chart of this ChartSpec.
        """
        self.openapi_types = {
            'alt_text': str,
            'background_color': Color,
            'background_color_style': ColorStyle,
            'basic_chart': BasicChartSpec,
            'bubble_chart': BubbleChartSpec,
            'candlestick_chart': CandlestickChartSpec,
            'data_source_chart_properties': DataSourceChartProperties,
            'filter_specs': List[FilterSpec],
            'font_name': str,
            'hidden_dimension_strategy': str,
            'histogram_chart': HistogramChartSpec,
            'maximized': bool,
            'org_chart': OrgChartSpec,
            'pie_chart': PieChartSpec,
            'scorecard_chart': ScorecardChartSpec,
            'sort_specs': List[SortSpec],
            'subtitle': str,
            'subtitle_text_format': TextFormat,
            'subtitle_text_position': TextPosition,
            'title': str,
            'title_text_format': TextFormat,
            'title_text_position': TextPosition,
            'treemap_chart': TreemapChartSpec,
            'waterfall_chart': WaterfallChartSpec
        }

        self.attribute_map = {
            'alt_text': 'altText',
            'background_color': 'backgroundColor',
            'background_color_style': 'backgroundColorStyle',
            'basic_chart': 'basicChart',
            'bubble_chart': 'bubbleChart',
            'candlestick_chart': 'candlestickChart',
            'data_source_chart_properties': 'dataSourceChartProperties',
            'filter_specs': 'filterSpecs',
            'font_name': 'fontName',
            'hidden_dimension_strategy': 'hiddenDimensionStrategy',
            'histogram_chart': 'histogramChart',
            'maximized': 'maximized',
            'org_chart': 'orgChart',
            'pie_chart': 'pieChart',
            'scorecard_chart': 'scorecardChart',
            'sort_specs': 'sortSpecs',
            'subtitle': 'subtitle',
            'subtitle_text_format': 'subtitleTextFormat',
            'subtitle_text_position': 'subtitleTextPosition',
            'title': 'title',
            'title_text_format': 'titleTextFormat',
            'title_text_position': 'titleTextPosition',
            'treemap_chart': 'treemapChart',
            'waterfall_chart': 'waterfallChart'
        }

        self._alt_text = alt_text
        self._background_color = background_color
        self._background_color_style = background_color_style
        self._basic_chart = basic_chart
        self._bubble_chart = bubble_chart
        self._candlestick_chart = candlestick_chart
        self._data_source_chart_properties = data_source_chart_properties
        self._filter_specs = filter_specs
        self._font_name = font_name
        self._hidden_dimension_strategy = hidden_dimension_strategy
        self._histogram_chart = histogram_chart
        self._maximized = maximized
        self._org_chart = org_chart
        self._pie_chart = pie_chart
        self._scorecard_chart = scorecard_chart
        self._sort_specs = sort_specs
        self._subtitle = subtitle
        self._subtitle_text_format = subtitle_text_format
        self._subtitle_text_position = subtitle_text_position
        self._title = title
        self._title_text_format = title_text_format
        self._title_text_position = title_text_position
        self._treemap_chart = treemap_chart
        self._waterfall_chart = waterfall_chart

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartSpec of this ChartSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alt_text(self):
        """Gets the alt_text of this ChartSpec.

        The alternative text that describes the chart. This is often used for accessibility.

        :return: The alt_text of this ChartSpec.
        :rtype: str
        """
        return self._alt_text

    @alt_text.setter
    def alt_text(self, alt_text):
        """Sets the alt_text of this ChartSpec.

        The alternative text that describes the chart. This is often used for accessibility.

        :param alt_text: The alt_text of this ChartSpec.
        :type alt_text: str
        """

        self._alt_text = alt_text

    @property
    def background_color(self):
        """Gets the background_color of this ChartSpec.


        :return: The background_color of this ChartSpec.
        :rtype: Color
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this ChartSpec.


        :param background_color: The background_color of this ChartSpec.
        :type background_color: Color
        """

        self._background_color = background_color

    @property
    def background_color_style(self):
        """Gets the background_color_style of this ChartSpec.


        :return: The background_color_style of this ChartSpec.
        :rtype: ColorStyle
        """
        return self._background_color_style

    @background_color_style.setter
    def background_color_style(self, background_color_style):
        """Sets the background_color_style of this ChartSpec.


        :param background_color_style: The background_color_style of this ChartSpec.
        :type background_color_style: ColorStyle
        """

        self._background_color_style = background_color_style

    @property
    def basic_chart(self):
        """Gets the basic_chart of this ChartSpec.


        :return: The basic_chart of this ChartSpec.
        :rtype: BasicChartSpec
        """
        return self._basic_chart

    @basic_chart.setter
    def basic_chart(self, basic_chart):
        """Sets the basic_chart of this ChartSpec.


        :param basic_chart: The basic_chart of this ChartSpec.
        :type basic_chart: BasicChartSpec
        """

        self._basic_chart = basic_chart

    @property
    def bubble_chart(self):
        """Gets the bubble_chart of this ChartSpec.


        :return: The bubble_chart of this ChartSpec.
        :rtype: BubbleChartSpec
        """
        return self._bubble_chart

    @bubble_chart.setter
    def bubble_chart(self, bubble_chart):
        """Sets the bubble_chart of this ChartSpec.


        :param bubble_chart: The bubble_chart of this ChartSpec.
        :type bubble_chart: BubbleChartSpec
        """

        self._bubble_chart = bubble_chart

    @property
    def candlestick_chart(self):
        """Gets the candlestick_chart of this ChartSpec.


        :return: The candlestick_chart of this ChartSpec.
        :rtype: CandlestickChartSpec
        """
        return self._candlestick_chart

    @candlestick_chart.setter
    def candlestick_chart(self, candlestick_chart):
        """Sets the candlestick_chart of this ChartSpec.


        :param candlestick_chart: The candlestick_chart of this ChartSpec.
        :type candlestick_chart: CandlestickChartSpec
        """

        self._candlestick_chart = candlestick_chart

    @property
    def data_source_chart_properties(self):
        """Gets the data_source_chart_properties of this ChartSpec.


        :return: The data_source_chart_properties of this ChartSpec.
        :rtype: DataSourceChartProperties
        """
        return self._data_source_chart_properties

    @data_source_chart_properties.setter
    def data_source_chart_properties(self, data_source_chart_properties):
        """Sets the data_source_chart_properties of this ChartSpec.


        :param data_source_chart_properties: The data_source_chart_properties of this ChartSpec.
        :type data_source_chart_properties: DataSourceChartProperties
        """

        self._data_source_chart_properties = data_source_chart_properties

    @property
    def filter_specs(self):
        """Gets the filter_specs of this ChartSpec.

        The filters applied to the source data of the chart. Only supported for data source charts.

        :return: The filter_specs of this ChartSpec.
        :rtype: List[FilterSpec]
        """
        return self._filter_specs

    @filter_specs.setter
    def filter_specs(self, filter_specs):
        """Sets the filter_specs of this ChartSpec.

        The filters applied to the source data of the chart. Only supported for data source charts.

        :param filter_specs: The filter_specs of this ChartSpec.
        :type filter_specs: List[FilterSpec]
        """

        self._filter_specs = filter_specs

    @property
    def font_name(self):
        """Gets the font_name of this ChartSpec.

        The name of the font to use by default for all chart text (e.g. title, axis labels, legend). If a font is specified for a specific part of the chart it will override this font name.

        :return: The font_name of this ChartSpec.
        :rtype: str
        """
        return self._font_name

    @font_name.setter
    def font_name(self, font_name):
        """Sets the font_name of this ChartSpec.

        The name of the font to use by default for all chart text (e.g. title, axis labels, legend). If a font is specified for a specific part of the chart it will override this font name.

        :param font_name: The font_name of this ChartSpec.
        :type font_name: str
        """

        self._font_name = font_name

    @property
    def hidden_dimension_strategy(self):
        """Gets the hidden_dimension_strategy of this ChartSpec.

        Determines how the charts will use hidden rows or columns.

        :return: The hidden_dimension_strategy of this ChartSpec.
        :rtype: str
        """
        return self._hidden_dimension_strategy

    @hidden_dimension_strategy.setter
    def hidden_dimension_strategy(self, hidden_dimension_strategy):
        """Sets the hidden_dimension_strategy of this ChartSpec.

        Determines how the charts will use hidden rows or columns.

        :param hidden_dimension_strategy: The hidden_dimension_strategy of this ChartSpec.
        :type hidden_dimension_strategy: str
        """
        allowed_values = ["CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED", "SKIP_HIDDEN_ROWS_AND_COLUMNS", "SKIP_HIDDEN_ROWS", "SKIP_HIDDEN_COLUMNS", "SHOW_ALL"]  # noqa: E501
        if hidden_dimension_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `hidden_dimension_strategy` ({0}), must be one of {1}"
                .format(hidden_dimension_strategy, allowed_values)
            )

        self._hidden_dimension_strategy = hidden_dimension_strategy

    @property
    def histogram_chart(self):
        """Gets the histogram_chart of this ChartSpec.


        :return: The histogram_chart of this ChartSpec.
        :rtype: HistogramChartSpec
        """
        return self._histogram_chart

    @histogram_chart.setter
    def histogram_chart(self, histogram_chart):
        """Sets the histogram_chart of this ChartSpec.


        :param histogram_chart: The histogram_chart of this ChartSpec.
        :type histogram_chart: HistogramChartSpec
        """

        self._histogram_chart = histogram_chart

    @property
    def maximized(self):
        """Gets the maximized of this ChartSpec.

        True to make a chart fill the entire space in which it's rendered with minimum padding. False to use the default padding. (Not applicable to Geo and Org charts.)

        :return: The maximized of this ChartSpec.
        :rtype: bool
        """
        return self._maximized

    @maximized.setter
    def maximized(self, maximized):
        """Sets the maximized of this ChartSpec.

        True to make a chart fill the entire space in which it's rendered with minimum padding. False to use the default padding. (Not applicable to Geo and Org charts.)

        :param maximized: The maximized of this ChartSpec.
        :type maximized: bool
        """

        self._maximized = maximized

    @property
    def org_chart(self):
        """Gets the org_chart of this ChartSpec.


        :return: The org_chart of this ChartSpec.
        :rtype: OrgChartSpec
        """
        return self._org_chart

    @org_chart.setter
    def org_chart(self, org_chart):
        """Sets the org_chart of this ChartSpec.


        :param org_chart: The org_chart of this ChartSpec.
        :type org_chart: OrgChartSpec
        """

        self._org_chart = org_chart

    @property
    def pie_chart(self):
        """Gets the pie_chart of this ChartSpec.


        :return: The pie_chart of this ChartSpec.
        :rtype: PieChartSpec
        """
        return self._pie_chart

    @pie_chart.setter
    def pie_chart(self, pie_chart):
        """Sets the pie_chart of this ChartSpec.


        :param pie_chart: The pie_chart of this ChartSpec.
        :type pie_chart: PieChartSpec
        """

        self._pie_chart = pie_chart

    @property
    def scorecard_chart(self):
        """Gets the scorecard_chart of this ChartSpec.


        :return: The scorecard_chart of this ChartSpec.
        :rtype: ScorecardChartSpec
        """
        return self._scorecard_chart

    @scorecard_chart.setter
    def scorecard_chart(self, scorecard_chart):
        """Sets the scorecard_chart of this ChartSpec.


        :param scorecard_chart: The scorecard_chart of this ChartSpec.
        :type scorecard_chart: ScorecardChartSpec
        """

        self._scorecard_chart = scorecard_chart

    @property
    def sort_specs(self):
        """Gets the sort_specs of this ChartSpec.

        The order to sort the chart data by. Only a single sort spec is supported. Only supported for data source charts.

        :return: The sort_specs of this ChartSpec.
        :rtype: List[SortSpec]
        """
        return self._sort_specs

    @sort_specs.setter
    def sort_specs(self, sort_specs):
        """Sets the sort_specs of this ChartSpec.

        The order to sort the chart data by. Only a single sort spec is supported. Only supported for data source charts.

        :param sort_specs: The sort_specs of this ChartSpec.
        :type sort_specs: List[SortSpec]
        """

        self._sort_specs = sort_specs

    @property
    def subtitle(self):
        """Gets the subtitle of this ChartSpec.

        The subtitle of the chart.

        :return: The subtitle of this ChartSpec.
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle):
        """Sets the subtitle of this ChartSpec.

        The subtitle of the chart.

        :param subtitle: The subtitle of this ChartSpec.
        :type subtitle: str
        """

        self._subtitle = subtitle

    @property
    def subtitle_text_format(self):
        """Gets the subtitle_text_format of this ChartSpec.


        :return: The subtitle_text_format of this ChartSpec.
        :rtype: TextFormat
        """
        return self._subtitle_text_format

    @subtitle_text_format.setter
    def subtitle_text_format(self, subtitle_text_format):
        """Sets the subtitle_text_format of this ChartSpec.


        :param subtitle_text_format: The subtitle_text_format of this ChartSpec.
        :type subtitle_text_format: TextFormat
        """

        self._subtitle_text_format = subtitle_text_format

    @property
    def subtitle_text_position(self):
        """Gets the subtitle_text_position of this ChartSpec.


        :return: The subtitle_text_position of this ChartSpec.
        :rtype: TextPosition
        """
        return self._subtitle_text_position

    @subtitle_text_position.setter
    def subtitle_text_position(self, subtitle_text_position):
        """Sets the subtitle_text_position of this ChartSpec.


        :param subtitle_text_position: The subtitle_text_position of this ChartSpec.
        :type subtitle_text_position: TextPosition
        """

        self._subtitle_text_position = subtitle_text_position

    @property
    def title(self):
        """Gets the title of this ChartSpec.

        The title of the chart.

        :return: The title of this ChartSpec.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ChartSpec.

        The title of the chart.

        :param title: The title of this ChartSpec.
        :type title: str
        """

        self._title = title

    @property
    def title_text_format(self):
        """Gets the title_text_format of this ChartSpec.


        :return: The title_text_format of this ChartSpec.
        :rtype: TextFormat
        """
        return self._title_text_format

    @title_text_format.setter
    def title_text_format(self, title_text_format):
        """Sets the title_text_format of this ChartSpec.


        :param title_text_format: The title_text_format of this ChartSpec.
        :type title_text_format: TextFormat
        """

        self._title_text_format = title_text_format

    @property
    def title_text_position(self):
        """Gets the title_text_position of this ChartSpec.


        :return: The title_text_position of this ChartSpec.
        :rtype: TextPosition
        """
        return self._title_text_position

    @title_text_position.setter
    def title_text_position(self, title_text_position):
        """Sets the title_text_position of this ChartSpec.


        :param title_text_position: The title_text_position of this ChartSpec.
        :type title_text_position: TextPosition
        """

        self._title_text_position = title_text_position

    @property
    def treemap_chart(self):
        """Gets the treemap_chart of this ChartSpec.


        :return: The treemap_chart of this ChartSpec.
        :rtype: TreemapChartSpec
        """
        return self._treemap_chart

    @treemap_chart.setter
    def treemap_chart(self, treemap_chart):
        """Sets the treemap_chart of this ChartSpec.


        :param treemap_chart: The treemap_chart of this ChartSpec.
        :type treemap_chart: TreemapChartSpec
        """

        self._treemap_chart = treemap_chart

    @property
    def waterfall_chart(self):
        """Gets the waterfall_chart of this ChartSpec.


        :return: The waterfall_chart of this ChartSpec.
        :rtype: WaterfallChartSpec
        """
        return self._waterfall_chart

    @waterfall_chart.setter
    def waterfall_chart(self, waterfall_chart):
        """Sets the waterfall_chart of this ChartSpec.


        :param waterfall_chart: The waterfall_chart of this ChartSpec.
        :type waterfall_chart: WaterfallChartSpec
        """

        self._waterfall_chart = waterfall_chart
