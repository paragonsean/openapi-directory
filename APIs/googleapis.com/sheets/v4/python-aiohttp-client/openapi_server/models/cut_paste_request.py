# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.grid_coordinate import GridCoordinate
from openapi_server.models.grid_range import GridRange
from openapi_server import util


class CutPasteRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination: GridCoordinate=None, paste_type: str=None, source: GridRange=None):
        """CutPasteRequest - a model defined in OpenAPI

        :param destination: The destination of this CutPasteRequest.
        :param paste_type: The paste_type of this CutPasteRequest.
        :param source: The source of this CutPasteRequest.
        """
        self.openapi_types = {
            'destination': GridCoordinate,
            'paste_type': str,
            'source': GridRange
        }

        self.attribute_map = {
            'destination': 'destination',
            'paste_type': 'pasteType',
            'source': 'source'
        }

        self._destination = destination
        self._paste_type = paste_type
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CutPasteRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CutPasteRequest of this CutPasteRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination(self):
        """Gets the destination of this CutPasteRequest.


        :return: The destination of this CutPasteRequest.
        :rtype: GridCoordinate
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this CutPasteRequest.


        :param destination: The destination of this CutPasteRequest.
        :type destination: GridCoordinate
        """

        self._destination = destination

    @property
    def paste_type(self):
        """Gets the paste_type of this CutPasteRequest.

        What kind of data to paste. All the source data will be cut, regardless of what is pasted.

        :return: The paste_type of this CutPasteRequest.
        :rtype: str
        """
        return self._paste_type

    @paste_type.setter
    def paste_type(self, paste_type):
        """Sets the paste_type of this CutPasteRequest.

        What kind of data to paste. All the source data will be cut, regardless of what is pasted.

        :param paste_type: The paste_type of this CutPasteRequest.
        :type paste_type: str
        """
        allowed_values = ["PASTE_NORMAL", "PASTE_VALUES", "PASTE_FORMAT", "PASTE_NO_BORDERS", "PASTE_FORMULA", "PASTE_DATA_VALIDATION", "PASTE_CONDITIONAL_FORMATTING"]  # noqa: E501
        if paste_type not in allowed_values:
            raise ValueError(
                "Invalid value for `paste_type` ({0}), must be one of {1}"
                .format(paste_type, allowed_values)
            )

        self._paste_type = paste_type

    @property
    def source(self):
        """Gets the source of this CutPasteRequest.


        :return: The source of this CutPasteRequest.
        :rtype: GridRange
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CutPasteRequest.


        :param source: The source of this CutPasteRequest.
        :type source: GridRange
        """

        self._source = source
