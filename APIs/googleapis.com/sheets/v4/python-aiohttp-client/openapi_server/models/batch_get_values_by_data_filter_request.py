# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_filter import DataFilter
from openapi_server import util


class BatchGetValuesByDataFilterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_filters: List[DataFilter]=None, date_time_render_option: str=None, major_dimension: str=None, value_render_option: str=None):
        """BatchGetValuesByDataFilterRequest - a model defined in OpenAPI

        :param data_filters: The data_filters of this BatchGetValuesByDataFilterRequest.
        :param date_time_render_option: The date_time_render_option of this BatchGetValuesByDataFilterRequest.
        :param major_dimension: The major_dimension of this BatchGetValuesByDataFilterRequest.
        :param value_render_option: The value_render_option of this BatchGetValuesByDataFilterRequest.
        """
        self.openapi_types = {
            'data_filters': List[DataFilter],
            'date_time_render_option': str,
            'major_dimension': str,
            'value_render_option': str
        }

        self.attribute_map = {
            'data_filters': 'dataFilters',
            'date_time_render_option': 'dateTimeRenderOption',
            'major_dimension': 'majorDimension',
            'value_render_option': 'valueRenderOption'
        }

        self._data_filters = data_filters
        self._date_time_render_option = date_time_render_option
        self._major_dimension = major_dimension
        self._value_render_option = value_render_option

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetValuesByDataFilterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetValuesByDataFilterRequest of this BatchGetValuesByDataFilterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_filters(self):
        """Gets the data_filters of this BatchGetValuesByDataFilterRequest.

        The data filters used to match the ranges of values to retrieve. Ranges that match any of the specified data filters are included in the response.

        :return: The data_filters of this BatchGetValuesByDataFilterRequest.
        :rtype: List[DataFilter]
        """
        return self._data_filters

    @data_filters.setter
    def data_filters(self, data_filters):
        """Sets the data_filters of this BatchGetValuesByDataFilterRequest.

        The data filters used to match the ranges of values to retrieve. Ranges that match any of the specified data filters are included in the response.

        :param data_filters: The data_filters of this BatchGetValuesByDataFilterRequest.
        :type data_filters: List[DataFilter]
        """

        self._data_filters = data_filters

    @property
    def date_time_render_option(self):
        """Gets the date_time_render_option of this BatchGetValuesByDataFilterRequest.

        How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.

        :return: The date_time_render_option of this BatchGetValuesByDataFilterRequest.
        :rtype: str
        """
        return self._date_time_render_option

    @date_time_render_option.setter
    def date_time_render_option(self, date_time_render_option):
        """Sets the date_time_render_option of this BatchGetValuesByDataFilterRequest.

        How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.

        :param date_time_render_option: The date_time_render_option of this BatchGetValuesByDataFilterRequest.
        :type date_time_render_option: str
        """
        allowed_values = ["SERIAL_NUMBER", "FORMATTED_STRING"]  # noqa: E501
        if date_time_render_option not in allowed_values:
            raise ValueError(
                "Invalid value for `date_time_render_option` ({0}), must be one of {1}"
                .format(date_time_render_option, allowed_values)
            )

        self._date_time_render_option = date_time_render_option

    @property
    def major_dimension(self):
        """Gets the major_dimension of this BatchGetValuesByDataFilterRequest.

        The major dimension that results should use. For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then a request that selects that range and sets `majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas a request that sets `majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.

        :return: The major_dimension of this BatchGetValuesByDataFilterRequest.
        :rtype: str
        """
        return self._major_dimension

    @major_dimension.setter
    def major_dimension(self, major_dimension):
        """Sets the major_dimension of this BatchGetValuesByDataFilterRequest.

        The major dimension that results should use. For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then a request that selects that range and sets `majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas a request that sets `majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.

        :param major_dimension: The major_dimension of this BatchGetValuesByDataFilterRequest.
        :type major_dimension: str
        """
        allowed_values = ["DIMENSION_UNSPECIFIED", "ROWS", "COLUMNS"]  # noqa: E501
        if major_dimension not in allowed_values:
            raise ValueError(
                "Invalid value for `major_dimension` ({0}), must be one of {1}"
                .format(major_dimension, allowed_values)
            )

        self._major_dimension = major_dimension

    @property
    def value_render_option(self):
        """Gets the value_render_option of this BatchGetValuesByDataFilterRequest.

        How values should be represented in the output. The default render option is FORMATTED_VALUE.

        :return: The value_render_option of this BatchGetValuesByDataFilterRequest.
        :rtype: str
        """
        return self._value_render_option

    @value_render_option.setter
    def value_render_option(self, value_render_option):
        """Sets the value_render_option of this BatchGetValuesByDataFilterRequest.

        How values should be represented in the output. The default render option is FORMATTED_VALUE.

        :param value_render_option: The value_render_option of this BatchGetValuesByDataFilterRequest.
        :type value_render_option: str
        """
        allowed_values = ["FORMATTED_VALUE", "UNFORMATTED_VALUE", "FORMULA"]  # noqa: E501
        if value_render_option not in allowed_values:
            raise ValueError(
                "Invalid value for `value_render_option` ({0}), must be one of {1}"
                .format(value_render_option, allowed_values)
            )

        self._value_render_option = value_render_option
