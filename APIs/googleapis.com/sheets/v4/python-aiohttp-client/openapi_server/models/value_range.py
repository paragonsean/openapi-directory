# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ValueRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, major_dimension: str=None, range: str=None, values: List[List[object]]=None):
        """ValueRange - a model defined in OpenAPI

        :param major_dimension: The major_dimension of this ValueRange.
        :param range: The range of this ValueRange.
        :param values: The values of this ValueRange.
        """
        self.openapi_types = {
            'major_dimension': str,
            'range': str,
            'values': List[List[object]]
        }

        self.attribute_map = {
            'major_dimension': 'majorDimension',
            'range': 'range',
            'values': 'values'
        }

        self._major_dimension = major_dimension
        self._range = range
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValueRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValueRange of this ValueRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def major_dimension(self):
        """Gets the major_dimension of this ValueRange.

        The major dimension of the values. For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=A1:B2,majorDimension=ROWS` will return `[[1,2],[3,4]]`, whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return `[[1,3],[2,4]]`. For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]` will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS` then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`. When writing, if this field is not set, it defaults to ROWS.

        :return: The major_dimension of this ValueRange.
        :rtype: str
        """
        return self._major_dimension

    @major_dimension.setter
    def major_dimension(self, major_dimension):
        """Sets the major_dimension of this ValueRange.

        The major dimension of the values. For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=A1:B2,majorDimension=ROWS` will return `[[1,2],[3,4]]`, whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return `[[1,3],[2,4]]`. For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]` will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS` then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`. When writing, if this field is not set, it defaults to ROWS.

        :param major_dimension: The major_dimension of this ValueRange.
        :type major_dimension: str
        """
        allowed_values = ["DIMENSION_UNSPECIFIED", "ROWS", "COLUMNS"]  # noqa: E501
        if major_dimension not in allowed_values:
            raise ValueError(
                "Invalid value for `major_dimension` ({0}), must be one of {1}"
                .format(major_dimension, allowed_values)
            )

        self._major_dimension = major_dimension

    @property
    def range(self):
        """Gets the range of this ValueRange.

        The range the values cover, in [A1 notation](/sheets/api/guides/concepts#cell). For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended.

        :return: The range of this ValueRange.
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this ValueRange.

        The range the values cover, in [A1 notation](/sheets/api/guides/concepts#cell). For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended.

        :param range: The range of this ValueRange.
        :type range: str
        """

        self._range = range

    @property
    def values(self):
        """Gets the values of this ValueRange.

        The data that was read or to be written. This is an array of arrays, the outer array representing all the data and each inner array representing a major dimension. Each item in the inner array corresponds with one cell. For output, empty trailing rows and columns will not be included. For input, supported value types are: bool, string, and double. Null values will be skipped. To set a cell to an empty value, set the string value to an empty string.

        :return: The values of this ValueRange.
        :rtype: List[List[object]]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ValueRange.

        The data that was read or to be written. This is an array of arrays, the outer array representing all the data and each inner array representing a major dimension. Each item in the inner array corresponds with one cell. For output, empty trailing rows and columns will not be included. For input, supported value types are: bool, string, and double. Null values will be skipped. To set a cell to an empty value, set the string value to an empty string.

        :param values: The values of this ValueRange.
        :type values: List[List[object]]
        """

        self._values = values
