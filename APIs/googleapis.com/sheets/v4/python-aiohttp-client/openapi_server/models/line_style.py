# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LineStyle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, width: int=None):
        """LineStyle - a model defined in OpenAPI

        :param type: The type of this LineStyle.
        :param width: The width of this LineStyle.
        """
        self.openapi_types = {
            'type': str,
            'width': int
        }

        self.attribute_map = {
            'type': 'type',
            'width': 'width'
        }

        self._type = type
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LineStyle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LineStyle of this LineStyle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this LineStyle.

        The dash type of the line.

        :return: The type of this LineStyle.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LineStyle.

        The dash type of the line.

        :param type: The type of this LineStyle.
        :type type: str
        """
        allowed_values = ["LINE_DASH_TYPE_UNSPECIFIED", "INVISIBLE", "CUSTOM", "SOLID", "DOTTED", "MEDIUM_DASHED", "MEDIUM_DASHED_DOTTED", "LONG_DASHED", "LONG_DASHED_DOTTED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def width(self):
        """Gets the width of this LineStyle.

        The thickness of the line, in px.

        :return: The width of this LineStyle.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this LineStyle.

        The thickness of the line, in px.

        :param width: The width of this LineStyle.
        :type width: int
        """

        self._width = width
