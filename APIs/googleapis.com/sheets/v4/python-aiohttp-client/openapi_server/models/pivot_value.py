# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_source_column_reference import DataSourceColumnReference
from openapi_server import util


class PivotValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calculated_display_type: str=None, data_source_column_reference: DataSourceColumnReference=None, formula: str=None, name: str=None, source_column_offset: int=None, summarize_function: str=None):
        """PivotValue - a model defined in OpenAPI

        :param calculated_display_type: The calculated_display_type of this PivotValue.
        :param data_source_column_reference: The data_source_column_reference of this PivotValue.
        :param formula: The formula of this PivotValue.
        :param name: The name of this PivotValue.
        :param source_column_offset: The source_column_offset of this PivotValue.
        :param summarize_function: The summarize_function of this PivotValue.
        """
        self.openapi_types = {
            'calculated_display_type': str,
            'data_source_column_reference': DataSourceColumnReference,
            'formula': str,
            'name': str,
            'source_column_offset': int,
            'summarize_function': str
        }

        self.attribute_map = {
            'calculated_display_type': 'calculatedDisplayType',
            'data_source_column_reference': 'dataSourceColumnReference',
            'formula': 'formula',
            'name': 'name',
            'source_column_offset': 'sourceColumnOffset',
            'summarize_function': 'summarizeFunction'
        }

        self._calculated_display_type = calculated_display_type
        self._data_source_column_reference = data_source_column_reference
        self._formula = formula
        self._name = name
        self._source_column_offset = source_column_offset
        self._summarize_function = summarize_function

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PivotValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PivotValue of this PivotValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calculated_display_type(self):
        """Gets the calculated_display_type of this PivotValue.

        If specified, indicates that pivot values should be displayed as the result of a calculation with another pivot value. For example, if calculated_display_type is specified as PERCENT_OF_GRAND_TOTAL, all the pivot values are displayed as the percentage of the grand total. In the Sheets editor, this is referred to as \"Show As\" in the value section of a pivot table.

        :return: The calculated_display_type of this PivotValue.
        :rtype: str
        """
        return self._calculated_display_type

    @calculated_display_type.setter
    def calculated_display_type(self, calculated_display_type):
        """Sets the calculated_display_type of this PivotValue.

        If specified, indicates that pivot values should be displayed as the result of a calculation with another pivot value. For example, if calculated_display_type is specified as PERCENT_OF_GRAND_TOTAL, all the pivot values are displayed as the percentage of the grand total. In the Sheets editor, this is referred to as \"Show As\" in the value section of a pivot table.

        :param calculated_display_type: The calculated_display_type of this PivotValue.
        :type calculated_display_type: str
        """
        allowed_values = ["PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED", "PERCENT_OF_ROW_TOTAL", "PERCENT_OF_COLUMN_TOTAL", "PERCENT_OF_GRAND_TOTAL"]  # noqa: E501
        if calculated_display_type not in allowed_values:
            raise ValueError(
                "Invalid value for `calculated_display_type` ({0}), must be one of {1}"
                .format(calculated_display_type, allowed_values)
            )

        self._calculated_display_type = calculated_display_type

    @property
    def data_source_column_reference(self):
        """Gets the data_source_column_reference of this PivotValue.


        :return: The data_source_column_reference of this PivotValue.
        :rtype: DataSourceColumnReference
        """
        return self._data_source_column_reference

    @data_source_column_reference.setter
    def data_source_column_reference(self, data_source_column_reference):
        """Sets the data_source_column_reference of this PivotValue.


        :param data_source_column_reference: The data_source_column_reference of this PivotValue.
        :type data_source_column_reference: DataSourceColumnReference
        """

        self._data_source_column_reference = data_source_column_reference

    @property
    def formula(self):
        """Gets the formula of this PivotValue.

        A custom formula to calculate the value. The formula must start with an `=` character.

        :return: The formula of this PivotValue.
        :rtype: str
        """
        return self._formula

    @formula.setter
    def formula(self, formula):
        """Sets the formula of this PivotValue.

        A custom formula to calculate the value. The formula must start with an `=` character.

        :param formula: The formula of this PivotValue.
        :type formula: str
        """

        self._formula = formula

    @property
    def name(self):
        """Gets the name of this PivotValue.

        A name to use for the value.

        :return: The name of this PivotValue.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PivotValue.

        A name to use for the value.

        :param name: The name of this PivotValue.
        :type name: str
        """

        self._name = name

    @property
    def source_column_offset(self):
        """Gets the source_column_offset of this PivotValue.

        The column offset of the source range that this value reads from. For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0` means this value refers to column `C`, whereas the offset `1` would refer to column `D`.

        :return: The source_column_offset of this PivotValue.
        :rtype: int
        """
        return self._source_column_offset

    @source_column_offset.setter
    def source_column_offset(self, source_column_offset):
        """Sets the source_column_offset of this PivotValue.

        The column offset of the source range that this value reads from. For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0` means this value refers to column `C`, whereas the offset `1` would refer to column `D`.

        :param source_column_offset: The source_column_offset of this PivotValue.
        :type source_column_offset: int
        """

        self._source_column_offset = source_column_offset

    @property
    def summarize_function(self):
        """Gets the summarize_function of this PivotValue.

        A function to summarize the value. If formula is set, the only supported values are SUM and CUSTOM. If sourceColumnOffset is set, then `CUSTOM` is not supported.

        :return: The summarize_function of this PivotValue.
        :rtype: str
        """
        return self._summarize_function

    @summarize_function.setter
    def summarize_function(self, summarize_function):
        """Sets the summarize_function of this PivotValue.

        A function to summarize the value. If formula is set, the only supported values are SUM and CUSTOM. If sourceColumnOffset is set, then `CUSTOM` is not supported.

        :param summarize_function: The summarize_function of this PivotValue.
        :type summarize_function: str
        """
        allowed_values = ["PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED", "SUM", "COUNTA", "COUNT", "COUNTUNIQUE", "AVERAGE", "MAX", "MIN", "MEDIAN", "PRODUCT", "STDEV", "STDEVP", "VAR", "VARP", "CUSTOM"]  # noqa: E501
        if summarize_function not in allowed_values:
            raise ValueError(
                "Invalid value for `summarize_function` ({0}), must be one of {1}"
                .format(summarize_function, allowed_values)
            )

        self._summarize_function = summarize_function
