# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GridProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_count: int=None, column_group_control_after: bool=None, frozen_column_count: int=None, frozen_row_count: int=None, hide_gridlines: bool=None, row_count: int=None, row_group_control_after: bool=None):
        """GridProperties - a model defined in OpenAPI

        :param column_count: The column_count of this GridProperties.
        :param column_group_control_after: The column_group_control_after of this GridProperties.
        :param frozen_column_count: The frozen_column_count of this GridProperties.
        :param frozen_row_count: The frozen_row_count of this GridProperties.
        :param hide_gridlines: The hide_gridlines of this GridProperties.
        :param row_count: The row_count of this GridProperties.
        :param row_group_control_after: The row_group_control_after of this GridProperties.
        """
        self.openapi_types = {
            'column_count': int,
            'column_group_control_after': bool,
            'frozen_column_count': int,
            'frozen_row_count': int,
            'hide_gridlines': bool,
            'row_count': int,
            'row_group_control_after': bool
        }

        self.attribute_map = {
            'column_count': 'columnCount',
            'column_group_control_after': 'columnGroupControlAfter',
            'frozen_column_count': 'frozenColumnCount',
            'frozen_row_count': 'frozenRowCount',
            'hide_gridlines': 'hideGridlines',
            'row_count': 'rowCount',
            'row_group_control_after': 'rowGroupControlAfter'
        }

        self._column_count = column_count
        self._column_group_control_after = column_group_control_after
        self._frozen_column_count = frozen_column_count
        self._frozen_row_count = frozen_row_count
        self._hide_gridlines = hide_gridlines
        self._row_count = row_count
        self._row_group_control_after = row_group_control_after

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GridProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GridProperties of this GridProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_count(self):
        """Gets the column_count of this GridProperties.

        The number of columns in the grid.

        :return: The column_count of this GridProperties.
        :rtype: int
        """
        return self._column_count

    @column_count.setter
    def column_count(self, column_count):
        """Sets the column_count of this GridProperties.

        The number of columns in the grid.

        :param column_count: The column_count of this GridProperties.
        :type column_count: int
        """

        self._column_count = column_count

    @property
    def column_group_control_after(self):
        """Gets the column_group_control_after of this GridProperties.

        True if the column grouping control toggle is shown after the group.

        :return: The column_group_control_after of this GridProperties.
        :rtype: bool
        """
        return self._column_group_control_after

    @column_group_control_after.setter
    def column_group_control_after(self, column_group_control_after):
        """Sets the column_group_control_after of this GridProperties.

        True if the column grouping control toggle is shown after the group.

        :param column_group_control_after: The column_group_control_after of this GridProperties.
        :type column_group_control_after: bool
        """

        self._column_group_control_after = column_group_control_after

    @property
    def frozen_column_count(self):
        """Gets the frozen_column_count of this GridProperties.

        The number of columns that are frozen in the grid.

        :return: The frozen_column_count of this GridProperties.
        :rtype: int
        """
        return self._frozen_column_count

    @frozen_column_count.setter
    def frozen_column_count(self, frozen_column_count):
        """Sets the frozen_column_count of this GridProperties.

        The number of columns that are frozen in the grid.

        :param frozen_column_count: The frozen_column_count of this GridProperties.
        :type frozen_column_count: int
        """

        self._frozen_column_count = frozen_column_count

    @property
    def frozen_row_count(self):
        """Gets the frozen_row_count of this GridProperties.

        The number of rows that are frozen in the grid.

        :return: The frozen_row_count of this GridProperties.
        :rtype: int
        """
        return self._frozen_row_count

    @frozen_row_count.setter
    def frozen_row_count(self, frozen_row_count):
        """Sets the frozen_row_count of this GridProperties.

        The number of rows that are frozen in the grid.

        :param frozen_row_count: The frozen_row_count of this GridProperties.
        :type frozen_row_count: int
        """

        self._frozen_row_count = frozen_row_count

    @property
    def hide_gridlines(self):
        """Gets the hide_gridlines of this GridProperties.

        True if the grid isn't showing gridlines in the UI.

        :return: The hide_gridlines of this GridProperties.
        :rtype: bool
        """
        return self._hide_gridlines

    @hide_gridlines.setter
    def hide_gridlines(self, hide_gridlines):
        """Sets the hide_gridlines of this GridProperties.

        True if the grid isn't showing gridlines in the UI.

        :param hide_gridlines: The hide_gridlines of this GridProperties.
        :type hide_gridlines: bool
        """

        self._hide_gridlines = hide_gridlines

    @property
    def row_count(self):
        """Gets the row_count of this GridProperties.

        The number of rows in the grid.

        :return: The row_count of this GridProperties.
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this GridProperties.

        The number of rows in the grid.

        :param row_count: The row_count of this GridProperties.
        :type row_count: int
        """

        self._row_count = row_count

    @property
    def row_group_control_after(self):
        """Gets the row_group_control_after of this GridProperties.

        True if the row grouping control toggle is shown after the group.

        :return: The row_group_control_after of this GridProperties.
        :rtype: bool
        """
        return self._row_group_control_after

    @row_group_control_after.setter
    def row_group_control_after(self, row_group_control_after):
        """Sets the row_group_control_after of this GridProperties.

        True if the row grouping control toggle is shown after the group.

        :param row_group_control_after: The row_group_control_after of this GridProperties.
        :type row_group_control_after: bool
        """

        self._row_group_control_after = row_group_control_after
