# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NumberFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pattern: str=None, type: str=None):
        """NumberFormat - a model defined in OpenAPI

        :param pattern: The pattern of this NumberFormat.
        :param type: The type of this NumberFormat.
        """
        self.openapi_types = {
            'pattern': str,
            'type': str
        }

        self.attribute_map = {
            'pattern': 'pattern',
            'type': 'type'
        }

        self._pattern = pattern
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NumberFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NumberFormat of this NumberFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pattern(self):
        """Gets the pattern of this NumberFormat.

        Pattern string used for formatting. If not set, a default pattern based on the user's locale will be used if necessary for the given type. See the [Date and Number Formats guide](/sheets/api/guides/formats) for more information about the supported patterns.

        :return: The pattern of this NumberFormat.
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this NumberFormat.

        Pattern string used for formatting. If not set, a default pattern based on the user's locale will be used if necessary for the given type. See the [Date and Number Formats guide](/sheets/api/guides/formats) for more information about the supported patterns.

        :param pattern: The pattern of this NumberFormat.
        :type pattern: str
        """

        self._pattern = pattern

    @property
    def type(self):
        """Gets the type of this NumberFormat.

        The type of the number format. When writing, this field must be set.

        :return: The type of this NumberFormat.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NumberFormat.

        The type of the number format. When writing, this field must be set.

        :param type: The type of this NumberFormat.
        :type type: str
        """
        allowed_values = ["NUMBER_FORMAT_TYPE_UNSPECIFIED", "TEXT", "NUMBER", "PERCENT", "CURRENCY", "DATE", "TIME", "DATE_TIME", "SCIENTIFIC"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
