# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter_view import FilterView
from openapi_server import util


class UpdateFilterViewRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: str=None, filter: FilterView=None):
        """UpdateFilterViewRequest - a model defined in OpenAPI

        :param fields: The fields of this UpdateFilterViewRequest.
        :param filter: The filter of this UpdateFilterViewRequest.
        """
        self.openapi_types = {
            'fields': str,
            'filter': FilterView
        }

        self.attribute_map = {
            'fields': 'fields',
            'filter': 'filter'
        }

        self._fields = fields
        self._filter = filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateFilterViewRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateFilterViewRequest of this UpdateFilterViewRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this UpdateFilterViewRequest.

        The fields that should be updated. At least one field must be specified. The root `filter` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field.

        :return: The fields of this UpdateFilterViewRequest.
        :rtype: str
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this UpdateFilterViewRequest.

        The fields that should be updated. At least one field must be specified. The root `filter` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field.

        :param fields: The fields of this UpdateFilterViewRequest.
        :type fields: str
        """

        self._fields = fields

    @property
    def filter(self):
        """Gets the filter of this UpdateFilterViewRequest.


        :return: The filter of this UpdateFilterViewRequest.
        :rtype: FilterView
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this UpdateFilterViewRequest.


        :param filter: The filter of this UpdateFilterViewRequest.
        :type filter: FilterView
        """

        self._filter = filter
