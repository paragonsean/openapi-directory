# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.basic_series_data_point_style_override import BasicSeriesDataPointStyleOverride
from openapi_server.models.chart_data import ChartData
from openapi_server.models.color import Color
from openapi_server.models.color_style import ColorStyle
from openapi_server.models.data_label import DataLabel
from openapi_server.models.line_style import LineStyle
from openapi_server.models.point_style import PointStyle
from openapi_server import util


class BasicChartSeries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: Color=None, color_style: ColorStyle=None, data_label: DataLabel=None, line_style: LineStyle=None, point_style: PointStyle=None, series: ChartData=None, style_overrides: List[BasicSeriesDataPointStyleOverride]=None, target_axis: str=None, type: str=None):
        """BasicChartSeries - a model defined in OpenAPI

        :param color: The color of this BasicChartSeries.
        :param color_style: The color_style of this BasicChartSeries.
        :param data_label: The data_label of this BasicChartSeries.
        :param line_style: The line_style of this BasicChartSeries.
        :param point_style: The point_style of this BasicChartSeries.
        :param series: The series of this BasicChartSeries.
        :param style_overrides: The style_overrides of this BasicChartSeries.
        :param target_axis: The target_axis of this BasicChartSeries.
        :param type: The type of this BasicChartSeries.
        """
        self.openapi_types = {
            'color': Color,
            'color_style': ColorStyle,
            'data_label': DataLabel,
            'line_style': LineStyle,
            'point_style': PointStyle,
            'series': ChartData,
            'style_overrides': List[BasicSeriesDataPointStyleOverride],
            'target_axis': str,
            'type': str
        }

        self.attribute_map = {
            'color': 'color',
            'color_style': 'colorStyle',
            'data_label': 'dataLabel',
            'line_style': 'lineStyle',
            'point_style': 'pointStyle',
            'series': 'series',
            'style_overrides': 'styleOverrides',
            'target_axis': 'targetAxis',
            'type': 'type'
        }

        self._color = color
        self._color_style = color_style
        self._data_label = data_label
        self._line_style = line_style
        self._point_style = point_style
        self._series = series
        self._style_overrides = style_overrides
        self._target_axis = target_axis
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BasicChartSeries':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BasicChartSeries of this BasicChartSeries.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this BasicChartSeries.


        :return: The color of this BasicChartSeries.
        :rtype: Color
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this BasicChartSeries.


        :param color: The color of this BasicChartSeries.
        :type color: Color
        """

        self._color = color

    @property
    def color_style(self):
        """Gets the color_style of this BasicChartSeries.


        :return: The color_style of this BasicChartSeries.
        :rtype: ColorStyle
        """
        return self._color_style

    @color_style.setter
    def color_style(self, color_style):
        """Sets the color_style of this BasicChartSeries.


        :param color_style: The color_style of this BasicChartSeries.
        :type color_style: ColorStyle
        """

        self._color_style = color_style

    @property
    def data_label(self):
        """Gets the data_label of this BasicChartSeries.


        :return: The data_label of this BasicChartSeries.
        :rtype: DataLabel
        """
        return self._data_label

    @data_label.setter
    def data_label(self, data_label):
        """Sets the data_label of this BasicChartSeries.


        :param data_label: The data_label of this BasicChartSeries.
        :type data_label: DataLabel
        """

        self._data_label = data_label

    @property
    def line_style(self):
        """Gets the line_style of this BasicChartSeries.


        :return: The line_style of this BasicChartSeries.
        :rtype: LineStyle
        """
        return self._line_style

    @line_style.setter
    def line_style(self, line_style):
        """Sets the line_style of this BasicChartSeries.


        :param line_style: The line_style of this BasicChartSeries.
        :type line_style: LineStyle
        """

        self._line_style = line_style

    @property
    def point_style(self):
        """Gets the point_style of this BasicChartSeries.


        :return: The point_style of this BasicChartSeries.
        :rtype: PointStyle
        """
        return self._point_style

    @point_style.setter
    def point_style(self, point_style):
        """Sets the point_style of this BasicChartSeries.


        :param point_style: The point_style of this BasicChartSeries.
        :type point_style: PointStyle
        """

        self._point_style = point_style

    @property
    def series(self):
        """Gets the series of this BasicChartSeries.


        :return: The series of this BasicChartSeries.
        :rtype: ChartData
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this BasicChartSeries.


        :param series: The series of this BasicChartSeries.
        :type series: ChartData
        """

        self._series = series

    @property
    def style_overrides(self):
        """Gets the style_overrides of this BasicChartSeries.

        Style override settings for series data points.

        :return: The style_overrides of this BasicChartSeries.
        :rtype: List[BasicSeriesDataPointStyleOverride]
        """
        return self._style_overrides

    @style_overrides.setter
    def style_overrides(self, style_overrides):
        """Sets the style_overrides of this BasicChartSeries.

        Style override settings for series data points.

        :param style_overrides: The style_overrides of this BasicChartSeries.
        :type style_overrides: List[BasicSeriesDataPointStyleOverride]
        """

        self._style_overrides = style_overrides

    @property
    def target_axis(self):
        """Gets the target_axis of this BasicChartSeries.

        The minor axis that will specify the range of values for this series. For example, if charting stocks over time, the \"Volume\" series may want to be pinned to the right with the prices pinned to the left, because the scale of trading volume is different than the scale of prices. It is an error to specify an axis that isn't a valid minor axis for the chart's type.

        :return: The target_axis of this BasicChartSeries.
        :rtype: str
        """
        return self._target_axis

    @target_axis.setter
    def target_axis(self, target_axis):
        """Sets the target_axis of this BasicChartSeries.

        The minor axis that will specify the range of values for this series. For example, if charting stocks over time, the \"Volume\" series may want to be pinned to the right with the prices pinned to the left, because the scale of trading volume is different than the scale of prices. It is an error to specify an axis that isn't a valid minor axis for the chart's type.

        :param target_axis: The target_axis of this BasicChartSeries.
        :type target_axis: str
        """
        allowed_values = ["BASIC_CHART_AXIS_POSITION_UNSPECIFIED", "BOTTOM_AXIS", "LEFT_AXIS", "RIGHT_AXIS"]  # noqa: E501
        if target_axis not in allowed_values:
            raise ValueError(
                "Invalid value for `target_axis` ({0}), must be one of {1}"
                .format(target_axis, allowed_values)
            )

        self._target_axis = target_axis

    @property
    def type(self):
        """Gets the type of this BasicChartSeries.

        The type of this series. Valid only if the chartType is COMBO. Different types will change the way the series is visualized. Only LINE, AREA, and COLUMN are supported.

        :return: The type of this BasicChartSeries.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BasicChartSeries.

        The type of this series. Valid only if the chartType is COMBO. Different types will change the way the series is visualized. Only LINE, AREA, and COLUMN are supported.

        :param type: The type of this BasicChartSeries.
        :type type: str
        """
        allowed_values = ["BASIC_CHART_TYPE_UNSPECIFIED", "BAR", "LINE", "AREA", "COLUMN", "SCATTER", "COMBO", "STEPPED_AREA"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
