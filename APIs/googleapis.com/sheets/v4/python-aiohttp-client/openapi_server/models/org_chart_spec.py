# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chart_data import ChartData
from openapi_server.models.color import Color
from openapi_server.models.color_style import ColorStyle
from openapi_server import util


class OrgChartSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labels: ChartData=None, node_color: Color=None, node_color_style: ColorStyle=None, node_size: str=None, parent_labels: ChartData=None, selected_node_color: Color=None, selected_node_color_style: ColorStyle=None, tooltips: ChartData=None):
        """OrgChartSpec - a model defined in OpenAPI

        :param labels: The labels of this OrgChartSpec.
        :param node_color: The node_color of this OrgChartSpec.
        :param node_color_style: The node_color_style of this OrgChartSpec.
        :param node_size: The node_size of this OrgChartSpec.
        :param parent_labels: The parent_labels of this OrgChartSpec.
        :param selected_node_color: The selected_node_color of this OrgChartSpec.
        :param selected_node_color_style: The selected_node_color_style of this OrgChartSpec.
        :param tooltips: The tooltips of this OrgChartSpec.
        """
        self.openapi_types = {
            'labels': ChartData,
            'node_color': Color,
            'node_color_style': ColorStyle,
            'node_size': str,
            'parent_labels': ChartData,
            'selected_node_color': Color,
            'selected_node_color_style': ColorStyle,
            'tooltips': ChartData
        }

        self.attribute_map = {
            'labels': 'labels',
            'node_color': 'nodeColor',
            'node_color_style': 'nodeColorStyle',
            'node_size': 'nodeSize',
            'parent_labels': 'parentLabels',
            'selected_node_color': 'selectedNodeColor',
            'selected_node_color_style': 'selectedNodeColorStyle',
            'tooltips': 'tooltips'
        }

        self._labels = labels
        self._node_color = node_color
        self._node_color_style = node_color_style
        self._node_size = node_size
        self._parent_labels = parent_labels
        self._selected_node_color = selected_node_color
        self._selected_node_color_style = selected_node_color_style
        self._tooltips = tooltips

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrgChartSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrgChartSpec of this OrgChartSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labels(self):
        """Gets the labels of this OrgChartSpec.


        :return: The labels of this OrgChartSpec.
        :rtype: ChartData
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this OrgChartSpec.


        :param labels: The labels of this OrgChartSpec.
        :type labels: ChartData
        """

        self._labels = labels

    @property
    def node_color(self):
        """Gets the node_color of this OrgChartSpec.


        :return: The node_color of this OrgChartSpec.
        :rtype: Color
        """
        return self._node_color

    @node_color.setter
    def node_color(self, node_color):
        """Sets the node_color of this OrgChartSpec.


        :param node_color: The node_color of this OrgChartSpec.
        :type node_color: Color
        """

        self._node_color = node_color

    @property
    def node_color_style(self):
        """Gets the node_color_style of this OrgChartSpec.


        :return: The node_color_style of this OrgChartSpec.
        :rtype: ColorStyle
        """
        return self._node_color_style

    @node_color_style.setter
    def node_color_style(self, node_color_style):
        """Sets the node_color_style of this OrgChartSpec.


        :param node_color_style: The node_color_style of this OrgChartSpec.
        :type node_color_style: ColorStyle
        """

        self._node_color_style = node_color_style

    @property
    def node_size(self):
        """Gets the node_size of this OrgChartSpec.

        The size of the org chart nodes.

        :return: The node_size of this OrgChartSpec.
        :rtype: str
        """
        return self._node_size

    @node_size.setter
    def node_size(self, node_size):
        """Sets the node_size of this OrgChartSpec.

        The size of the org chart nodes.

        :param node_size: The node_size of this OrgChartSpec.
        :type node_size: str
        """
        allowed_values = ["ORG_CHART_LABEL_SIZE_UNSPECIFIED", "SMALL", "MEDIUM", "LARGE"]  # noqa: E501
        if node_size not in allowed_values:
            raise ValueError(
                "Invalid value for `node_size` ({0}), must be one of {1}"
                .format(node_size, allowed_values)
            )

        self._node_size = node_size

    @property
    def parent_labels(self):
        """Gets the parent_labels of this OrgChartSpec.


        :return: The parent_labels of this OrgChartSpec.
        :rtype: ChartData
        """
        return self._parent_labels

    @parent_labels.setter
    def parent_labels(self, parent_labels):
        """Sets the parent_labels of this OrgChartSpec.


        :param parent_labels: The parent_labels of this OrgChartSpec.
        :type parent_labels: ChartData
        """

        self._parent_labels = parent_labels

    @property
    def selected_node_color(self):
        """Gets the selected_node_color of this OrgChartSpec.


        :return: The selected_node_color of this OrgChartSpec.
        :rtype: Color
        """
        return self._selected_node_color

    @selected_node_color.setter
    def selected_node_color(self, selected_node_color):
        """Sets the selected_node_color of this OrgChartSpec.


        :param selected_node_color: The selected_node_color of this OrgChartSpec.
        :type selected_node_color: Color
        """

        self._selected_node_color = selected_node_color

    @property
    def selected_node_color_style(self):
        """Gets the selected_node_color_style of this OrgChartSpec.


        :return: The selected_node_color_style of this OrgChartSpec.
        :rtype: ColorStyle
        """
        return self._selected_node_color_style

    @selected_node_color_style.setter
    def selected_node_color_style(self, selected_node_color_style):
        """Sets the selected_node_color_style of this OrgChartSpec.


        :param selected_node_color_style: The selected_node_color_style of this OrgChartSpec.
        :type selected_node_color_style: ColorStyle
        """

        self._selected_node_color_style = selected_node_color_style

    @property
    def tooltips(self):
        """Gets the tooltips of this OrgChartSpec.


        :return: The tooltips of this OrgChartSpec.
        :rtype: ChartData
        """
        return self._tooltips

    @tooltips.setter
    def tooltips(self, tooltips):
        """Sets the tooltips of this OrgChartSpec.


        :param tooltips: The tooltips of this OrgChartSpec.
        :type tooltips: ChartData
        """

        self._tooltips = tooltips
