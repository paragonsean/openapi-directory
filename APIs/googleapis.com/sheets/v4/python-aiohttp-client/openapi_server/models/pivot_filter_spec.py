# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_source_column_reference import DataSourceColumnReference
from openapi_server.models.pivot_filter_criteria import PivotFilterCriteria
from openapi_server import util


class PivotFilterSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_offset_index: int=None, data_source_column_reference: DataSourceColumnReference=None, filter_criteria: PivotFilterCriteria=None):
        """PivotFilterSpec - a model defined in OpenAPI

        :param column_offset_index: The column_offset_index of this PivotFilterSpec.
        :param data_source_column_reference: The data_source_column_reference of this PivotFilterSpec.
        :param filter_criteria: The filter_criteria of this PivotFilterSpec.
        """
        self.openapi_types = {
            'column_offset_index': int,
            'data_source_column_reference': DataSourceColumnReference,
            'filter_criteria': PivotFilterCriteria
        }

        self.attribute_map = {
            'column_offset_index': 'columnOffsetIndex',
            'data_source_column_reference': 'dataSourceColumnReference',
            'filter_criteria': 'filterCriteria'
        }

        self._column_offset_index = column_offset_index
        self._data_source_column_reference = data_source_column_reference
        self._filter_criteria = filter_criteria

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PivotFilterSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PivotFilterSpec of this PivotFilterSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_offset_index(self):
        """Gets the column_offset_index of this PivotFilterSpec.

        The zero-based column offset of the source range.

        :return: The column_offset_index of this PivotFilterSpec.
        :rtype: int
        """
        return self._column_offset_index

    @column_offset_index.setter
    def column_offset_index(self, column_offset_index):
        """Sets the column_offset_index of this PivotFilterSpec.

        The zero-based column offset of the source range.

        :param column_offset_index: The column_offset_index of this PivotFilterSpec.
        :type column_offset_index: int
        """

        self._column_offset_index = column_offset_index

    @property
    def data_source_column_reference(self):
        """Gets the data_source_column_reference of this PivotFilterSpec.


        :return: The data_source_column_reference of this PivotFilterSpec.
        :rtype: DataSourceColumnReference
        """
        return self._data_source_column_reference

    @data_source_column_reference.setter
    def data_source_column_reference(self, data_source_column_reference):
        """Sets the data_source_column_reference of this PivotFilterSpec.


        :param data_source_column_reference: The data_source_column_reference of this PivotFilterSpec.
        :type data_source_column_reference: DataSourceColumnReference
        """

        self._data_source_column_reference = data_source_column_reference

    @property
    def filter_criteria(self):
        """Gets the filter_criteria of this PivotFilterSpec.


        :return: The filter_criteria of this PivotFilterSpec.
        :rtype: PivotFilterCriteria
        """
        return self._filter_criteria

    @filter_criteria.setter
    def filter_criteria(self, filter_criteria):
        """Sets the filter_criteria of this PivotFilterSpec.


        :param filter_criteria: The filter_criteria of this PivotFilterSpec.
        :type filter_criteria: PivotFilterCriteria
        """

        self._filter_criteria = filter_criteria
