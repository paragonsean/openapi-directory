# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.request import Request
from openapi_server import util


class BatchUpdateSpreadsheetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, include_spreadsheet_in_response: bool=None, requests: List[Request]=None, response_include_grid_data: bool=None, response_ranges: List[str]=None):
        """BatchUpdateSpreadsheetRequest - a model defined in OpenAPI

        :param include_spreadsheet_in_response: The include_spreadsheet_in_response of this BatchUpdateSpreadsheetRequest.
        :param requests: The requests of this BatchUpdateSpreadsheetRequest.
        :param response_include_grid_data: The response_include_grid_data of this BatchUpdateSpreadsheetRequest.
        :param response_ranges: The response_ranges of this BatchUpdateSpreadsheetRequest.
        """
        self.openapi_types = {
            'include_spreadsheet_in_response': bool,
            'requests': List[Request],
            'response_include_grid_data': bool,
            'response_ranges': List[str]
        }

        self.attribute_map = {
            'include_spreadsheet_in_response': 'includeSpreadsheetInResponse',
            'requests': 'requests',
            'response_include_grid_data': 'responseIncludeGridData',
            'response_ranges': 'responseRanges'
        }

        self._include_spreadsheet_in_response = include_spreadsheet_in_response
        self._requests = requests
        self._response_include_grid_data = response_include_grid_data
        self._response_ranges = response_ranges

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchUpdateSpreadsheetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchUpdateSpreadsheetRequest of this BatchUpdateSpreadsheetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def include_spreadsheet_in_response(self):
        """Gets the include_spreadsheet_in_response of this BatchUpdateSpreadsheetRequest.

        Determines if the update response should include the spreadsheet resource.

        :return: The include_spreadsheet_in_response of this BatchUpdateSpreadsheetRequest.
        :rtype: bool
        """
        return self._include_spreadsheet_in_response

    @include_spreadsheet_in_response.setter
    def include_spreadsheet_in_response(self, include_spreadsheet_in_response):
        """Sets the include_spreadsheet_in_response of this BatchUpdateSpreadsheetRequest.

        Determines if the update response should include the spreadsheet resource.

        :param include_spreadsheet_in_response: The include_spreadsheet_in_response of this BatchUpdateSpreadsheetRequest.
        :type include_spreadsheet_in_response: bool
        """

        self._include_spreadsheet_in_response = include_spreadsheet_in_response

    @property
    def requests(self):
        """Gets the requests of this BatchUpdateSpreadsheetRequest.

        A list of updates to apply to the spreadsheet. Requests will be applied in the order they are specified. If any request is not valid, no requests will be applied.

        :return: The requests of this BatchUpdateSpreadsheetRequest.
        :rtype: List[Request]
        """
        return self._requests

    @requests.setter
    def requests(self, requests):
        """Sets the requests of this BatchUpdateSpreadsheetRequest.

        A list of updates to apply to the spreadsheet. Requests will be applied in the order they are specified. If any request is not valid, no requests will be applied.

        :param requests: The requests of this BatchUpdateSpreadsheetRequest.
        :type requests: List[Request]
        """

        self._requests = requests

    @property
    def response_include_grid_data(self):
        """Gets the response_include_grid_data of this BatchUpdateSpreadsheetRequest.

        True if grid data should be returned. Meaningful only if include_spreadsheet_in_response is 'true'. This parameter is ignored if a field mask was set in the request.

        :return: The response_include_grid_data of this BatchUpdateSpreadsheetRequest.
        :rtype: bool
        """
        return self._response_include_grid_data

    @response_include_grid_data.setter
    def response_include_grid_data(self, response_include_grid_data):
        """Sets the response_include_grid_data of this BatchUpdateSpreadsheetRequest.

        True if grid data should be returned. Meaningful only if include_spreadsheet_in_response is 'true'. This parameter is ignored if a field mask was set in the request.

        :param response_include_grid_data: The response_include_grid_data of this BatchUpdateSpreadsheetRequest.
        :type response_include_grid_data: bool
        """

        self._response_include_grid_data = response_include_grid_data

    @property
    def response_ranges(self):
        """Gets the response_ranges of this BatchUpdateSpreadsheetRequest.

        Limits the ranges included in the response spreadsheet. Meaningful only if include_spreadsheet_in_response is 'true'.

        :return: The response_ranges of this BatchUpdateSpreadsheetRequest.
        :rtype: List[str]
        """
        return self._response_ranges

    @response_ranges.setter
    def response_ranges(self, response_ranges):
        """Sets the response_ranges of this BatchUpdateSpreadsheetRequest.

        Limits the ranges included in the response spreadsheet. Meaningful only if include_spreadsheet_in_response is 'true'.

        :param response_ranges: The response_ranges of this BatchUpdateSpreadsheetRequest.
        :type response_ranges: List[str]
        """

        self._response_ranges = response_ranges
