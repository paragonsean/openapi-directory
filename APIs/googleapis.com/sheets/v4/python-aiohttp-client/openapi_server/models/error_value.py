# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, type: str=None):
        """ErrorValue - a model defined in OpenAPI

        :param message: The message of this ErrorValue.
        :param type: The type of this ErrorValue.
        """
        self.openapi_types = {
            'message': str,
            'type': str
        }

        self.attribute_map = {
            'message': 'message',
            'type': 'type'
        }

        self._message = message
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorValue of this ErrorValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this ErrorValue.

        A message with more information about the error (in the spreadsheet's locale).

        :return: The message of this ErrorValue.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorValue.

        A message with more information about the error (in the spreadsheet's locale).

        :param message: The message of this ErrorValue.
        :type message: str
        """

        self._message = message

    @property
    def type(self):
        """Gets the type of this ErrorValue.

        The type of error.

        :return: The type of this ErrorValue.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ErrorValue.

        The type of error.

        :param type: The type of this ErrorValue.
        :type type: str
        """
        allowed_values = ["ERROR_TYPE_UNSPECIFIED", "ERROR", "NULL_VALUE", "DIVIDE_BY_ZERO", "VALUE", "REF", "NAME", "NUM", "N_A", "LOADING"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
