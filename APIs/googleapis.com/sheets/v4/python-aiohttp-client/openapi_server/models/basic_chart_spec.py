# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.basic_chart_axis import BasicChartAxis
from openapi_server.models.basic_chart_domain import BasicChartDomain
from openapi_server.models.basic_chart_series import BasicChartSeries
from openapi_server.models.data_label import DataLabel
from openapi_server import util


class BasicChartSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, axis: List[BasicChartAxis]=None, chart_type: str=None, compare_mode: str=None, domains: List[BasicChartDomain]=None, header_count: int=None, interpolate_nulls: bool=None, legend_position: str=None, line_smoothing: bool=None, series: List[BasicChartSeries]=None, stacked_type: str=None, three_dimensional: bool=None, total_data_label: DataLabel=None):
        """BasicChartSpec - a model defined in OpenAPI

        :param axis: The axis of this BasicChartSpec.
        :param chart_type: The chart_type of this BasicChartSpec.
        :param compare_mode: The compare_mode of this BasicChartSpec.
        :param domains: The domains of this BasicChartSpec.
        :param header_count: The header_count of this BasicChartSpec.
        :param interpolate_nulls: The interpolate_nulls of this BasicChartSpec.
        :param legend_position: The legend_position of this BasicChartSpec.
        :param line_smoothing: The line_smoothing of this BasicChartSpec.
        :param series: The series of this BasicChartSpec.
        :param stacked_type: The stacked_type of this BasicChartSpec.
        :param three_dimensional: The three_dimensional of this BasicChartSpec.
        :param total_data_label: The total_data_label of this BasicChartSpec.
        """
        self.openapi_types = {
            'axis': List[BasicChartAxis],
            'chart_type': str,
            'compare_mode': str,
            'domains': List[BasicChartDomain],
            'header_count': int,
            'interpolate_nulls': bool,
            'legend_position': str,
            'line_smoothing': bool,
            'series': List[BasicChartSeries],
            'stacked_type': str,
            'three_dimensional': bool,
            'total_data_label': DataLabel
        }

        self.attribute_map = {
            'axis': 'axis',
            'chart_type': 'chartType',
            'compare_mode': 'compareMode',
            'domains': 'domains',
            'header_count': 'headerCount',
            'interpolate_nulls': 'interpolateNulls',
            'legend_position': 'legendPosition',
            'line_smoothing': 'lineSmoothing',
            'series': 'series',
            'stacked_type': 'stackedType',
            'three_dimensional': 'threeDimensional',
            'total_data_label': 'totalDataLabel'
        }

        self._axis = axis
        self._chart_type = chart_type
        self._compare_mode = compare_mode
        self._domains = domains
        self._header_count = header_count
        self._interpolate_nulls = interpolate_nulls
        self._legend_position = legend_position
        self._line_smoothing = line_smoothing
        self._series = series
        self._stacked_type = stacked_type
        self._three_dimensional = three_dimensional
        self._total_data_label = total_data_label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BasicChartSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BasicChartSpec of this BasicChartSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def axis(self):
        """Gets the axis of this BasicChartSpec.

        The axis on the chart.

        :return: The axis of this BasicChartSpec.
        :rtype: List[BasicChartAxis]
        """
        return self._axis

    @axis.setter
    def axis(self, axis):
        """Sets the axis of this BasicChartSpec.

        The axis on the chart.

        :param axis: The axis of this BasicChartSpec.
        :type axis: List[BasicChartAxis]
        """

        self._axis = axis

    @property
    def chart_type(self):
        """Gets the chart_type of this BasicChartSpec.

        The type of the chart.

        :return: The chart_type of this BasicChartSpec.
        :rtype: str
        """
        return self._chart_type

    @chart_type.setter
    def chart_type(self, chart_type):
        """Sets the chart_type of this BasicChartSpec.

        The type of the chart.

        :param chart_type: The chart_type of this BasicChartSpec.
        :type chart_type: str
        """
        allowed_values = ["BASIC_CHART_TYPE_UNSPECIFIED", "BAR", "LINE", "AREA", "COLUMN", "SCATTER", "COMBO", "STEPPED_AREA"]  # noqa: E501
        if chart_type not in allowed_values:
            raise ValueError(
                "Invalid value for `chart_type` ({0}), must be one of {1}"
                .format(chart_type, allowed_values)
            )

        self._chart_type = chart_type

    @property
    def compare_mode(self):
        """Gets the compare_mode of this BasicChartSpec.

        The behavior of tooltips and data highlighting when hovering on data and chart area.

        :return: The compare_mode of this BasicChartSpec.
        :rtype: str
        """
        return self._compare_mode

    @compare_mode.setter
    def compare_mode(self, compare_mode):
        """Sets the compare_mode of this BasicChartSpec.

        The behavior of tooltips and data highlighting when hovering on data and chart area.

        :param compare_mode: The compare_mode of this BasicChartSpec.
        :type compare_mode: str
        """
        allowed_values = ["BASIC_CHART_COMPARE_MODE_UNSPECIFIED", "DATUM", "CATEGORY"]  # noqa: E501
        if compare_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `compare_mode` ({0}), must be one of {1}"
                .format(compare_mode, allowed_values)
            )

        self._compare_mode = compare_mode

    @property
    def domains(self):
        """Gets the domains of this BasicChartSpec.

        The domain of data this is charting. Only a single domain is supported.

        :return: The domains of this BasicChartSpec.
        :rtype: List[BasicChartDomain]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this BasicChartSpec.

        The domain of data this is charting. Only a single domain is supported.

        :param domains: The domains of this BasicChartSpec.
        :type domains: List[BasicChartDomain]
        """

        self._domains = domains

    @property
    def header_count(self):
        """Gets the header_count of this BasicChartSpec.

        The number of rows or columns in the data that are \"headers\". If not set, Google Sheets will guess how many rows are headers based on the data. (Note that BasicChartAxis.title may override the axis title inferred from the header values.)

        :return: The header_count of this BasicChartSpec.
        :rtype: int
        """
        return self._header_count

    @header_count.setter
    def header_count(self, header_count):
        """Sets the header_count of this BasicChartSpec.

        The number of rows or columns in the data that are \"headers\". If not set, Google Sheets will guess how many rows are headers based on the data. (Note that BasicChartAxis.title may override the axis title inferred from the header values.)

        :param header_count: The header_count of this BasicChartSpec.
        :type header_count: int
        """

        self._header_count = header_count

    @property
    def interpolate_nulls(self):
        """Gets the interpolate_nulls of this BasicChartSpec.

        If some values in a series are missing, gaps may appear in the chart (e.g, segments of lines in a line chart will be missing). To eliminate these gaps set this to true. Applies to Line, Area, and Combo charts.

        :return: The interpolate_nulls of this BasicChartSpec.
        :rtype: bool
        """
        return self._interpolate_nulls

    @interpolate_nulls.setter
    def interpolate_nulls(self, interpolate_nulls):
        """Sets the interpolate_nulls of this BasicChartSpec.

        If some values in a series are missing, gaps may appear in the chart (e.g, segments of lines in a line chart will be missing). To eliminate these gaps set this to true. Applies to Line, Area, and Combo charts.

        :param interpolate_nulls: The interpolate_nulls of this BasicChartSpec.
        :type interpolate_nulls: bool
        """

        self._interpolate_nulls = interpolate_nulls

    @property
    def legend_position(self):
        """Gets the legend_position of this BasicChartSpec.

        The position of the chart legend.

        :return: The legend_position of this BasicChartSpec.
        :rtype: str
        """
        return self._legend_position

    @legend_position.setter
    def legend_position(self, legend_position):
        """Sets the legend_position of this BasicChartSpec.

        The position of the chart legend.

        :param legend_position: The legend_position of this BasicChartSpec.
        :type legend_position: str
        """
        allowed_values = ["BASIC_CHART_LEGEND_POSITION_UNSPECIFIED", "BOTTOM_LEGEND", "LEFT_LEGEND", "RIGHT_LEGEND", "TOP_LEGEND", "NO_LEGEND"]  # noqa: E501
        if legend_position not in allowed_values:
            raise ValueError(
                "Invalid value for `legend_position` ({0}), must be one of {1}"
                .format(legend_position, allowed_values)
            )

        self._legend_position = legend_position

    @property
    def line_smoothing(self):
        """Gets the line_smoothing of this BasicChartSpec.

        Gets whether all lines should be rendered smooth or straight by default. Applies to Line charts.

        :return: The line_smoothing of this BasicChartSpec.
        :rtype: bool
        """
        return self._line_smoothing

    @line_smoothing.setter
    def line_smoothing(self, line_smoothing):
        """Sets the line_smoothing of this BasicChartSpec.

        Gets whether all lines should be rendered smooth or straight by default. Applies to Line charts.

        :param line_smoothing: The line_smoothing of this BasicChartSpec.
        :type line_smoothing: bool
        """

        self._line_smoothing = line_smoothing

    @property
    def series(self):
        """Gets the series of this BasicChartSpec.

        The data this chart is visualizing.

        :return: The series of this BasicChartSpec.
        :rtype: List[BasicChartSeries]
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this BasicChartSpec.

        The data this chart is visualizing.

        :param series: The series of this BasicChartSpec.
        :type series: List[BasicChartSeries]
        """

        self._series = series

    @property
    def stacked_type(self):
        """Gets the stacked_type of this BasicChartSpec.

        The stacked type for charts that support vertical stacking. Applies to Area, Bar, Column, Combo, and Stepped Area charts.

        :return: The stacked_type of this BasicChartSpec.
        :rtype: str
        """
        return self._stacked_type

    @stacked_type.setter
    def stacked_type(self, stacked_type):
        """Sets the stacked_type of this BasicChartSpec.

        The stacked type for charts that support vertical stacking. Applies to Area, Bar, Column, Combo, and Stepped Area charts.

        :param stacked_type: The stacked_type of this BasicChartSpec.
        :type stacked_type: str
        """
        allowed_values = ["BASIC_CHART_STACKED_TYPE_UNSPECIFIED", "NOT_STACKED", "STACKED", "PERCENT_STACKED"]  # noqa: E501
        if stacked_type not in allowed_values:
            raise ValueError(
                "Invalid value for `stacked_type` ({0}), must be one of {1}"
                .format(stacked_type, allowed_values)
            )

        self._stacked_type = stacked_type

    @property
    def three_dimensional(self):
        """Gets the three_dimensional of this BasicChartSpec.

        True to make the chart 3D. Applies to Bar and Column charts.

        :return: The three_dimensional of this BasicChartSpec.
        :rtype: bool
        """
        return self._three_dimensional

    @three_dimensional.setter
    def three_dimensional(self, three_dimensional):
        """Sets the three_dimensional of this BasicChartSpec.

        True to make the chart 3D. Applies to Bar and Column charts.

        :param three_dimensional: The three_dimensional of this BasicChartSpec.
        :type three_dimensional: bool
        """

        self._three_dimensional = three_dimensional

    @property
    def total_data_label(self):
        """Gets the total_data_label of this BasicChartSpec.


        :return: The total_data_label of this BasicChartSpec.
        :rtype: DataLabel
        """
        return self._total_data_label

    @total_data_label.setter
    def total_data_label(self, total_data_label):
        """Sets the total_data_label of this BasicChartSpec.


        :param total_data_label: The total_data_label of this BasicChartSpec.
        :type total_data_label: DataLabel
        """

        self._total_data_label = total_data_label
