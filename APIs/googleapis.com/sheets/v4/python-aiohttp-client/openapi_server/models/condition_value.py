# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConditionValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, relative_date: str=None, user_entered_value: str=None):
        """ConditionValue - a model defined in OpenAPI

        :param relative_date: The relative_date of this ConditionValue.
        :param user_entered_value: The user_entered_value of this ConditionValue.
        """
        self.openapi_types = {
            'relative_date': str,
            'user_entered_value': str
        }

        self.attribute_map = {
            'relative_date': 'relativeDate',
            'user_entered_value': 'userEnteredValue'
        }

        self._relative_date = relative_date
        self._user_entered_value = user_entered_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConditionValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConditionValue of this ConditionValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def relative_date(self):
        """Gets the relative_date of this ConditionValue.

        A relative date (based on the current date). Valid only if the type is DATE_BEFORE, DATE_AFTER, DATE_ON_OR_BEFORE or DATE_ON_OR_AFTER. Relative dates are not supported in data validation. They are supported only in conditional formatting and conditional filters.

        :return: The relative_date of this ConditionValue.
        :rtype: str
        """
        return self._relative_date

    @relative_date.setter
    def relative_date(self, relative_date):
        """Sets the relative_date of this ConditionValue.

        A relative date (based on the current date). Valid only if the type is DATE_BEFORE, DATE_AFTER, DATE_ON_OR_BEFORE or DATE_ON_OR_AFTER. Relative dates are not supported in data validation. They are supported only in conditional formatting and conditional filters.

        :param relative_date: The relative_date of this ConditionValue.
        :type relative_date: str
        """
        allowed_values = ["RELATIVE_DATE_UNSPECIFIED", "PAST_YEAR", "PAST_MONTH", "PAST_WEEK", "YESTERDAY", "TODAY", "TOMORROW"]  # noqa: E501
        if relative_date not in allowed_values:
            raise ValueError(
                "Invalid value for `relative_date` ({0}), must be one of {1}"
                .format(relative_date, allowed_values)
            )

        self._relative_date = relative_date

    @property
    def user_entered_value(self):
        """Gets the user_entered_value of this ConditionValue.

        A value the condition is based on. The value is parsed as if the user typed into a cell. Formulas are supported (and must begin with an `=` or a '+').

        :return: The user_entered_value of this ConditionValue.
        :rtype: str
        """
        return self._user_entered_value

    @user_entered_value.setter
    def user_entered_value(self, user_entered_value):
        """Sets the user_entered_value of this ConditionValue.

        A value the condition is based on. The value is parsed as if the user typed into a cell. Formulas are supported (and must begin with an `=` or a '+').

        :param user_entered_value: The user_entered_value of this ConditionValue.
        :type user_entered_value: str
        """

        self._user_entered_value = user_entered_value
