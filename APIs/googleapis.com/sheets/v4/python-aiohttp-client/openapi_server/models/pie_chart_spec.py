# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chart_data import ChartData
from openapi_server import util


class PieChartSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: ChartData=None, legend_position: str=None, pie_hole: float=None, series: ChartData=None, three_dimensional: bool=None):
        """PieChartSpec - a model defined in OpenAPI

        :param domain: The domain of this PieChartSpec.
        :param legend_position: The legend_position of this PieChartSpec.
        :param pie_hole: The pie_hole of this PieChartSpec.
        :param series: The series of this PieChartSpec.
        :param three_dimensional: The three_dimensional of this PieChartSpec.
        """
        self.openapi_types = {
            'domain': ChartData,
            'legend_position': str,
            'pie_hole': float,
            'series': ChartData,
            'three_dimensional': bool
        }

        self.attribute_map = {
            'domain': 'domain',
            'legend_position': 'legendPosition',
            'pie_hole': 'pieHole',
            'series': 'series',
            'three_dimensional': 'threeDimensional'
        }

        self._domain = domain
        self._legend_position = legend_position
        self._pie_hole = pie_hole
        self._series = series
        self._three_dimensional = three_dimensional

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PieChartSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PieChartSpec of this PieChartSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this PieChartSpec.


        :return: The domain of this PieChartSpec.
        :rtype: ChartData
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this PieChartSpec.


        :param domain: The domain of this PieChartSpec.
        :type domain: ChartData
        """

        self._domain = domain

    @property
    def legend_position(self):
        """Gets the legend_position of this PieChartSpec.

        Where the legend of the pie chart should be drawn.

        :return: The legend_position of this PieChartSpec.
        :rtype: str
        """
        return self._legend_position

    @legend_position.setter
    def legend_position(self, legend_position):
        """Sets the legend_position of this PieChartSpec.

        Where the legend of the pie chart should be drawn.

        :param legend_position: The legend_position of this PieChartSpec.
        :type legend_position: str
        """
        allowed_values = ["PIE_CHART_LEGEND_POSITION_UNSPECIFIED", "BOTTOM_LEGEND", "LEFT_LEGEND", "RIGHT_LEGEND", "TOP_LEGEND", "NO_LEGEND", "LABELED_LEGEND"]  # noqa: E501
        if legend_position not in allowed_values:
            raise ValueError(
                "Invalid value for `legend_position` ({0}), must be one of {1}"
                .format(legend_position, allowed_values)
            )

        self._legend_position = legend_position

    @property
    def pie_hole(self):
        """Gets the pie_hole of this PieChartSpec.

        The size of the hole in the pie chart.

        :return: The pie_hole of this PieChartSpec.
        :rtype: float
        """
        return self._pie_hole

    @pie_hole.setter
    def pie_hole(self, pie_hole):
        """Sets the pie_hole of this PieChartSpec.

        The size of the hole in the pie chart.

        :param pie_hole: The pie_hole of this PieChartSpec.
        :type pie_hole: float
        """

        self._pie_hole = pie_hole

    @property
    def series(self):
        """Gets the series of this PieChartSpec.


        :return: The series of this PieChartSpec.
        :rtype: ChartData
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this PieChartSpec.


        :param series: The series of this PieChartSpec.
        :type series: ChartData
        """

        self._series = series

    @property
    def three_dimensional(self):
        """Gets the three_dimensional of this PieChartSpec.

        True if the pie is three dimensional.

        :return: The three_dimensional of this PieChartSpec.
        :rtype: bool
        """
        return self._three_dimensional

    @three_dimensional.setter
    def three_dimensional(self, three_dimensional):
        """Sets the three_dimensional of this PieChartSpec.

        True if the pie is three dimensional.

        :param three_dimensional: The three_dimensional of this PieChartSpec.
        :type three_dimensional: bool
        """

        self._three_dimensional = three_dimensional
