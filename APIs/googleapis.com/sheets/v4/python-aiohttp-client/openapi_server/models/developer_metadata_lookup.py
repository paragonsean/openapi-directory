# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.developer_metadata_location import DeveloperMetadataLocation
from openapi_server import util


class DeveloperMetadataLookup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location_matching_strategy: str=None, location_type: str=None, metadata_id: int=None, metadata_key: str=None, metadata_location: DeveloperMetadataLocation=None, metadata_value: str=None, visibility: str=None):
        """DeveloperMetadataLookup - a model defined in OpenAPI

        :param location_matching_strategy: The location_matching_strategy of this DeveloperMetadataLookup.
        :param location_type: The location_type of this DeveloperMetadataLookup.
        :param metadata_id: The metadata_id of this DeveloperMetadataLookup.
        :param metadata_key: The metadata_key of this DeveloperMetadataLookup.
        :param metadata_location: The metadata_location of this DeveloperMetadataLookup.
        :param metadata_value: The metadata_value of this DeveloperMetadataLookup.
        :param visibility: The visibility of this DeveloperMetadataLookup.
        """
        self.openapi_types = {
            'location_matching_strategy': str,
            'location_type': str,
            'metadata_id': int,
            'metadata_key': str,
            'metadata_location': DeveloperMetadataLocation,
            'metadata_value': str,
            'visibility': str
        }

        self.attribute_map = {
            'location_matching_strategy': 'locationMatchingStrategy',
            'location_type': 'locationType',
            'metadata_id': 'metadataId',
            'metadata_key': 'metadataKey',
            'metadata_location': 'metadataLocation',
            'metadata_value': 'metadataValue',
            'visibility': 'visibility'
        }

        self._location_matching_strategy = location_matching_strategy
        self._location_type = location_type
        self._metadata_id = metadata_id
        self._metadata_key = metadata_key
        self._metadata_location = metadata_location
        self._metadata_value = metadata_value
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeveloperMetadataLookup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeveloperMetadataLookup of this DeveloperMetadataLookup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location_matching_strategy(self):
        """Gets the location_matching_strategy of this DeveloperMetadataLookup.

        Determines how this lookup matches the location. If this field is specified as EXACT, only developer metadata associated on the exact location specified is matched. If this field is specified to INTERSECTING, developer metadata associated on intersecting locations is also matched. If left unspecified, this field assumes a default value of INTERSECTING. If this field is specified, a metadataLocation must also be specified.

        :return: The location_matching_strategy of this DeveloperMetadataLookup.
        :rtype: str
        """
        return self._location_matching_strategy

    @location_matching_strategy.setter
    def location_matching_strategy(self, location_matching_strategy):
        """Sets the location_matching_strategy of this DeveloperMetadataLookup.

        Determines how this lookup matches the location. If this field is specified as EXACT, only developer metadata associated on the exact location specified is matched. If this field is specified to INTERSECTING, developer metadata associated on intersecting locations is also matched. If left unspecified, this field assumes a default value of INTERSECTING. If this field is specified, a metadataLocation must also be specified.

        :param location_matching_strategy: The location_matching_strategy of this DeveloperMetadataLookup.
        :type location_matching_strategy: str
        """
        allowed_values = ["DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED", "EXACT_LOCATION", "INTERSECTING_LOCATION"]  # noqa: E501
        if location_matching_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `location_matching_strategy` ({0}), must be one of {1}"
                .format(location_matching_strategy, allowed_values)
            )

        self._location_matching_strategy = location_matching_strategy

    @property
    def location_type(self):
        """Gets the location_type of this DeveloperMetadataLookup.

        Limits the selected developer metadata to those entries which are associated with locations of the specified type. For example, when this field is specified as ROW this lookup only considers developer metadata associated on rows. If the field is left unspecified, all location types are considered. This field cannot be specified as SPREADSHEET when the locationMatchingStrategy is specified as INTERSECTING or when the metadataLocation is specified as a non-spreadsheet location: spreadsheet metadata cannot intersect any other developer metadata location. This field also must be left unspecified when the locationMatchingStrategy is specified as EXACT.

        :return: The location_type of this DeveloperMetadataLookup.
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this DeveloperMetadataLookup.

        Limits the selected developer metadata to those entries which are associated with locations of the specified type. For example, when this field is specified as ROW this lookup only considers developer metadata associated on rows. If the field is left unspecified, all location types are considered. This field cannot be specified as SPREADSHEET when the locationMatchingStrategy is specified as INTERSECTING or when the metadataLocation is specified as a non-spreadsheet location: spreadsheet metadata cannot intersect any other developer metadata location. This field also must be left unspecified when the locationMatchingStrategy is specified as EXACT.

        :param location_type: The location_type of this DeveloperMetadataLookup.
        :type location_type: str
        """
        allowed_values = ["DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED", "ROW", "COLUMN", "SHEET", "SPREADSHEET"]  # noqa: E501
        if location_type not in allowed_values:
            raise ValueError(
                "Invalid value for `location_type` ({0}), must be one of {1}"
                .format(location_type, allowed_values)
            )

        self._location_type = location_type

    @property
    def metadata_id(self):
        """Gets the metadata_id of this DeveloperMetadataLookup.

        Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_id.

        :return: The metadata_id of this DeveloperMetadataLookup.
        :rtype: int
        """
        return self._metadata_id

    @metadata_id.setter
    def metadata_id(self, metadata_id):
        """Sets the metadata_id of this DeveloperMetadataLookup.

        Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_id.

        :param metadata_id: The metadata_id of this DeveloperMetadataLookup.
        :type metadata_id: int
        """

        self._metadata_id = metadata_id

    @property
    def metadata_key(self):
        """Gets the metadata_key of this DeveloperMetadataLookup.

        Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_key.

        :return: The metadata_key of this DeveloperMetadataLookup.
        :rtype: str
        """
        return self._metadata_key

    @metadata_key.setter
    def metadata_key(self, metadata_key):
        """Sets the metadata_key of this DeveloperMetadataLookup.

        Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_key.

        :param metadata_key: The metadata_key of this DeveloperMetadataLookup.
        :type metadata_key: str
        """

        self._metadata_key = metadata_key

    @property
    def metadata_location(self):
        """Gets the metadata_location of this DeveloperMetadataLookup.


        :return: The metadata_location of this DeveloperMetadataLookup.
        :rtype: DeveloperMetadataLocation
        """
        return self._metadata_location

    @metadata_location.setter
    def metadata_location(self, metadata_location):
        """Sets the metadata_location of this DeveloperMetadataLookup.


        :param metadata_location: The metadata_location of this DeveloperMetadataLookup.
        :type metadata_location: DeveloperMetadataLocation
        """

        self._metadata_location = metadata_location

    @property
    def metadata_value(self):
        """Gets the metadata_value of this DeveloperMetadataLookup.

        Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_value.

        :return: The metadata_value of this DeveloperMetadataLookup.
        :rtype: str
        """
        return self._metadata_value

    @metadata_value.setter
    def metadata_value(self, metadata_value):
        """Sets the metadata_value of this DeveloperMetadataLookup.

        Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_value.

        :param metadata_value: The metadata_value of this DeveloperMetadataLookup.
        :type metadata_value: str
        """

        self._metadata_value = metadata_value

    @property
    def visibility(self):
        """Gets the visibility of this DeveloperMetadataLookup.

        Limits the selected developer metadata to that which has a matching DeveloperMetadata.visibility. If left unspecified, all developer metadata visibile to the requesting project is considered.

        :return: The visibility of this DeveloperMetadataLookup.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this DeveloperMetadataLookup.

        Limits the selected developer metadata to that which has a matching DeveloperMetadata.visibility. If left unspecified, all developer metadata visibile to the requesting project is considered.

        :param visibility: The visibility of this DeveloperMetadataLookup.
        :type visibility: str
        """
        allowed_values = ["DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED", "DOCUMENT", "PROJECT"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
