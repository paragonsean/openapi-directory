# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChartHistogramRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interval_size: float=None, max_value: float=None, min_value: float=None):
        """ChartHistogramRule - a model defined in OpenAPI

        :param interval_size: The interval_size of this ChartHistogramRule.
        :param max_value: The max_value of this ChartHistogramRule.
        :param min_value: The min_value of this ChartHistogramRule.
        """
        self.openapi_types = {
            'interval_size': float,
            'max_value': float,
            'min_value': float
        }

        self.attribute_map = {
            'interval_size': 'intervalSize',
            'max_value': 'maxValue',
            'min_value': 'minValue'
        }

        self._interval_size = interval_size
        self._max_value = max_value
        self._min_value = min_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartHistogramRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartHistogramRule of this ChartHistogramRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interval_size(self):
        """Gets the interval_size of this ChartHistogramRule.

        The size of the buckets that are created. Must be positive.

        :return: The interval_size of this ChartHistogramRule.
        :rtype: float
        """
        return self._interval_size

    @interval_size.setter
    def interval_size(self, interval_size):
        """Sets the interval_size of this ChartHistogramRule.

        The size of the buckets that are created. Must be positive.

        :param interval_size: The interval_size of this ChartHistogramRule.
        :type interval_size: float
        """

        self._interval_size = interval_size

    @property
    def max_value(self):
        """Gets the max_value of this ChartHistogramRule.

        The maximum value at which items are placed into buckets. Values greater than the maximum are grouped into a single bucket. If omitted, it is determined by the maximum item value.

        :return: The max_value of this ChartHistogramRule.
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this ChartHistogramRule.

        The maximum value at which items are placed into buckets. Values greater than the maximum are grouped into a single bucket. If omitted, it is determined by the maximum item value.

        :param max_value: The max_value of this ChartHistogramRule.
        :type max_value: float
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this ChartHistogramRule.

        The minimum value at which items are placed into buckets. Values that are less than the minimum are grouped into a single bucket. If omitted, it is determined by the minimum item value.

        :return: The min_value of this ChartHistogramRule.
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this ChartHistogramRule.

        The minimum value at which items are placed into buckets. Values that are less than the minimum are grouped into a single bucket. If omitted, it is determined by the minimum item value.

        :param min_value: The min_value of this ChartHistogramRule.
        :type min_value: float
        """

        self._min_value = min_value
