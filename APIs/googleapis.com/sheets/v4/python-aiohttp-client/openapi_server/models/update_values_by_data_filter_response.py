# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_filter import DataFilter
from openapi_server.models.value_range import ValueRange
from openapi_server import util


class UpdateValuesByDataFilterResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_filter: DataFilter=None, updated_cells: int=None, updated_columns: int=None, updated_data: ValueRange=None, updated_range: str=None, updated_rows: int=None):
        """UpdateValuesByDataFilterResponse - a model defined in OpenAPI

        :param data_filter: The data_filter of this UpdateValuesByDataFilterResponse.
        :param updated_cells: The updated_cells of this UpdateValuesByDataFilterResponse.
        :param updated_columns: The updated_columns of this UpdateValuesByDataFilterResponse.
        :param updated_data: The updated_data of this UpdateValuesByDataFilterResponse.
        :param updated_range: The updated_range of this UpdateValuesByDataFilterResponse.
        :param updated_rows: The updated_rows of this UpdateValuesByDataFilterResponse.
        """
        self.openapi_types = {
            'data_filter': DataFilter,
            'updated_cells': int,
            'updated_columns': int,
            'updated_data': ValueRange,
            'updated_range': str,
            'updated_rows': int
        }

        self.attribute_map = {
            'data_filter': 'dataFilter',
            'updated_cells': 'updatedCells',
            'updated_columns': 'updatedColumns',
            'updated_data': 'updatedData',
            'updated_range': 'updatedRange',
            'updated_rows': 'updatedRows'
        }

        self._data_filter = data_filter
        self._updated_cells = updated_cells
        self._updated_columns = updated_columns
        self._updated_data = updated_data
        self._updated_range = updated_range
        self._updated_rows = updated_rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateValuesByDataFilterResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateValuesByDataFilterResponse of this UpdateValuesByDataFilterResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_filter(self):
        """Gets the data_filter of this UpdateValuesByDataFilterResponse.


        :return: The data_filter of this UpdateValuesByDataFilterResponse.
        :rtype: DataFilter
        """
        return self._data_filter

    @data_filter.setter
    def data_filter(self, data_filter):
        """Sets the data_filter of this UpdateValuesByDataFilterResponse.


        :param data_filter: The data_filter of this UpdateValuesByDataFilterResponse.
        :type data_filter: DataFilter
        """

        self._data_filter = data_filter

    @property
    def updated_cells(self):
        """Gets the updated_cells of this UpdateValuesByDataFilterResponse.

        The number of cells updated.

        :return: The updated_cells of this UpdateValuesByDataFilterResponse.
        :rtype: int
        """
        return self._updated_cells

    @updated_cells.setter
    def updated_cells(self, updated_cells):
        """Sets the updated_cells of this UpdateValuesByDataFilterResponse.

        The number of cells updated.

        :param updated_cells: The updated_cells of this UpdateValuesByDataFilterResponse.
        :type updated_cells: int
        """

        self._updated_cells = updated_cells

    @property
    def updated_columns(self):
        """Gets the updated_columns of this UpdateValuesByDataFilterResponse.

        The number of columns where at least one cell in the column was updated.

        :return: The updated_columns of this UpdateValuesByDataFilterResponse.
        :rtype: int
        """
        return self._updated_columns

    @updated_columns.setter
    def updated_columns(self, updated_columns):
        """Sets the updated_columns of this UpdateValuesByDataFilterResponse.

        The number of columns where at least one cell in the column was updated.

        :param updated_columns: The updated_columns of this UpdateValuesByDataFilterResponse.
        :type updated_columns: int
        """

        self._updated_columns = updated_columns

    @property
    def updated_data(self):
        """Gets the updated_data of this UpdateValuesByDataFilterResponse.


        :return: The updated_data of this UpdateValuesByDataFilterResponse.
        :rtype: ValueRange
        """
        return self._updated_data

    @updated_data.setter
    def updated_data(self, updated_data):
        """Sets the updated_data of this UpdateValuesByDataFilterResponse.


        :param updated_data: The updated_data of this UpdateValuesByDataFilterResponse.
        :type updated_data: ValueRange
        """

        self._updated_data = updated_data

    @property
    def updated_range(self):
        """Gets the updated_range of this UpdateValuesByDataFilterResponse.

        The range (in [A1 notation](/sheets/api/guides/concepts#cell)) that updates were applied to.

        :return: The updated_range of this UpdateValuesByDataFilterResponse.
        :rtype: str
        """
        return self._updated_range

    @updated_range.setter
    def updated_range(self, updated_range):
        """Sets the updated_range of this UpdateValuesByDataFilterResponse.

        The range (in [A1 notation](/sheets/api/guides/concepts#cell)) that updates were applied to.

        :param updated_range: The updated_range of this UpdateValuesByDataFilterResponse.
        :type updated_range: str
        """

        self._updated_range = updated_range

    @property
    def updated_rows(self):
        """Gets the updated_rows of this UpdateValuesByDataFilterResponse.

        The number of rows where at least one cell in the row was updated.

        :return: The updated_rows of this UpdateValuesByDataFilterResponse.
        :rtype: int
        """
        return self._updated_rows

    @updated_rows.setter
    def updated_rows(self, updated_rows):
        """Sets the updated_rows of this UpdateValuesByDataFilterResponse.

        The number of rows where at least one cell in the row was updated.

        :param updated_rows: The updated_rows of this UpdateValuesByDataFilterResponse.
        :type updated_rows: int
        """

        self._updated_rows = updated_rows
