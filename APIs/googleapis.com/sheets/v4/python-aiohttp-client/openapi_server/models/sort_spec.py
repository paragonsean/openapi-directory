# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.color import Color
from openapi_server.models.color_style import ColorStyle
from openapi_server.models.data_source_column_reference import DataSourceColumnReference
from openapi_server import util


class SortSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background_color: Color=None, background_color_style: ColorStyle=None, data_source_column_reference: DataSourceColumnReference=None, dimension_index: int=None, foreground_color: Color=None, foreground_color_style: ColorStyle=None, sort_order: str=None):
        """SortSpec - a model defined in OpenAPI

        :param background_color: The background_color of this SortSpec.
        :param background_color_style: The background_color_style of this SortSpec.
        :param data_source_column_reference: The data_source_column_reference of this SortSpec.
        :param dimension_index: The dimension_index of this SortSpec.
        :param foreground_color: The foreground_color of this SortSpec.
        :param foreground_color_style: The foreground_color_style of this SortSpec.
        :param sort_order: The sort_order of this SortSpec.
        """
        self.openapi_types = {
            'background_color': Color,
            'background_color_style': ColorStyle,
            'data_source_column_reference': DataSourceColumnReference,
            'dimension_index': int,
            'foreground_color': Color,
            'foreground_color_style': ColorStyle,
            'sort_order': str
        }

        self.attribute_map = {
            'background_color': 'backgroundColor',
            'background_color_style': 'backgroundColorStyle',
            'data_source_column_reference': 'dataSourceColumnReference',
            'dimension_index': 'dimensionIndex',
            'foreground_color': 'foregroundColor',
            'foreground_color_style': 'foregroundColorStyle',
            'sort_order': 'sortOrder'
        }

        self._background_color = background_color
        self._background_color_style = background_color_style
        self._data_source_column_reference = data_source_column_reference
        self._dimension_index = dimension_index
        self._foreground_color = foreground_color
        self._foreground_color_style = foreground_color_style
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SortSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SortSpec of this SortSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background_color(self):
        """Gets the background_color of this SortSpec.


        :return: The background_color of this SortSpec.
        :rtype: Color
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this SortSpec.


        :param background_color: The background_color of this SortSpec.
        :type background_color: Color
        """

        self._background_color = background_color

    @property
    def background_color_style(self):
        """Gets the background_color_style of this SortSpec.


        :return: The background_color_style of this SortSpec.
        :rtype: ColorStyle
        """
        return self._background_color_style

    @background_color_style.setter
    def background_color_style(self, background_color_style):
        """Sets the background_color_style of this SortSpec.


        :param background_color_style: The background_color_style of this SortSpec.
        :type background_color_style: ColorStyle
        """

        self._background_color_style = background_color_style

    @property
    def data_source_column_reference(self):
        """Gets the data_source_column_reference of this SortSpec.


        :return: The data_source_column_reference of this SortSpec.
        :rtype: DataSourceColumnReference
        """
        return self._data_source_column_reference

    @data_source_column_reference.setter
    def data_source_column_reference(self, data_source_column_reference):
        """Sets the data_source_column_reference of this SortSpec.


        :param data_source_column_reference: The data_source_column_reference of this SortSpec.
        :type data_source_column_reference: DataSourceColumnReference
        """

        self._data_source_column_reference = data_source_column_reference

    @property
    def dimension_index(self):
        """Gets the dimension_index of this SortSpec.

        The dimension the sort should be applied to.

        :return: The dimension_index of this SortSpec.
        :rtype: int
        """
        return self._dimension_index

    @dimension_index.setter
    def dimension_index(self, dimension_index):
        """Sets the dimension_index of this SortSpec.

        The dimension the sort should be applied to.

        :param dimension_index: The dimension_index of this SortSpec.
        :type dimension_index: int
        """

        self._dimension_index = dimension_index

    @property
    def foreground_color(self):
        """Gets the foreground_color of this SortSpec.


        :return: The foreground_color of this SortSpec.
        :rtype: Color
        """
        return self._foreground_color

    @foreground_color.setter
    def foreground_color(self, foreground_color):
        """Sets the foreground_color of this SortSpec.


        :param foreground_color: The foreground_color of this SortSpec.
        :type foreground_color: Color
        """

        self._foreground_color = foreground_color

    @property
    def foreground_color_style(self):
        """Gets the foreground_color_style of this SortSpec.


        :return: The foreground_color_style of this SortSpec.
        :rtype: ColorStyle
        """
        return self._foreground_color_style

    @foreground_color_style.setter
    def foreground_color_style(self, foreground_color_style):
        """Sets the foreground_color_style of this SortSpec.


        :param foreground_color_style: The foreground_color_style of this SortSpec.
        :type foreground_color_style: ColorStyle
        """

        self._foreground_color_style = foreground_color_style

    @property
    def sort_order(self):
        """Gets the sort_order of this SortSpec.

        The order data should be sorted.

        :return: The sort_order of this SortSpec.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this SortSpec.

        The order data should be sorted.

        :param sort_order: The sort_order of this SortSpec.
        :type sort_order: str
        """
        allowed_values = ["SORT_ORDER_UNSPECIFIED", "ASCENDING", "DESCENDING"]  # noqa: E501
        if sort_order not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order
