/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppendValuesResponse;
import org.openapitools.client.model.BatchClearValuesByDataFilterRequest;
import org.openapitools.client.model.BatchClearValuesByDataFilterResponse;
import org.openapitools.client.model.BatchClearValuesRequest;
import org.openapitools.client.model.BatchClearValuesResponse;
import org.openapitools.client.model.BatchGetValuesByDataFilterRequest;
import org.openapitools.client.model.BatchGetValuesByDataFilterResponse;
import org.openapitools.client.model.BatchGetValuesResponse;
import org.openapitools.client.model.BatchUpdateSpreadsheetRequest;
import org.openapitools.client.model.BatchUpdateSpreadsheetResponse;
import org.openapitools.client.model.BatchUpdateValuesByDataFilterRequest;
import org.openapitools.client.model.BatchUpdateValuesByDataFilterResponse;
import org.openapitools.client.model.BatchUpdateValuesRequest;
import org.openapitools.client.model.BatchUpdateValuesResponse;
import org.openapitools.client.model.ClearValuesResponse;
import org.openapitools.client.model.CopySheetToAnotherSpreadsheetRequest;
import org.openapitools.client.model.DeveloperMetadata;
import org.openapitools.client.model.GetSpreadsheetByDataFilterRequest;
import org.openapitools.client.model.SearchDeveloperMetadataRequest;
import org.openapitools.client.model.SearchDeveloperMetadataResponse;
import org.openapitools.client.model.SheetProperties;
import org.openapitools.client.model.Spreadsheet;
import org.openapitools.client.model.UpdateValuesResponse;
import org.openapitools.client.model.ValueRange;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SpreadsheetsApi
 */
@Disabled
public class SpreadsheetsApiTest {

    private final SpreadsheetsApi api = new SpreadsheetsApi();

    /**
     * Applies one or more updates to the spreadsheet. Each request is validated before being applied. If any request is not valid then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. The replies will mirror the requests. For example, if you applied 4 updates and the 3rd one had a reply, then the response will have 2 empty replies, the actual reply, and another empty reply, in that order. Due to the collaborative nature of spreadsheets, it is not guaranteed that the spreadsheet will reflect exactly your changes after this completes, however it is guaranteed that the updates in the request will be applied together atomically. Your changes may be altered with respect to collaborator changes. If there are no collaborators, the spreadsheet should reflect your changes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sheetsSpreadsheetsBatchUpdateTest() throws ApiException {
        String spreadsheetId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchUpdateSpreadsheetRequest batchUpdateSpreadsheetRequest = null;
        BatchUpdateSpreadsheetResponse response = api.sheetsSpreadsheetsBatchUpdate(spreadsheetId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchUpdateSpreadsheetRequest);
        // TODO: test validations
    }

    /**
     * Creates a spreadsheet, returning the newly created spreadsheet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sheetsSpreadsheetsCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Spreadsheet spreadsheet = null;
        Spreadsheet response = api.sheetsSpreadsheetsCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, spreadsheet);
        // TODO: test validations
    }

    /**
     * Returns the developer metadata with the specified ID. The caller must specify the spreadsheet ID and the developer metadata&#39;s unique metadataId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sheetsSpreadsheetsDeveloperMetadataGetTest() throws ApiException {
        String spreadsheetId = null;
        Integer metadataId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DeveloperMetadata response = api.sheetsSpreadsheetsDeveloperMetadataGet(spreadsheetId, metadataId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns all developer metadata matching the specified DataFilter. If the provided DataFilter represents a DeveloperMetadataLookup object, this will return all DeveloperMetadata entries selected by it. If the DataFilter represents a location in a spreadsheet, this will return all developer metadata associated with locations intersecting that region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sheetsSpreadsheetsDeveloperMetadataSearchTest() throws ApiException {
        String spreadsheetId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SearchDeveloperMetadataRequest searchDeveloperMetadataRequest = null;
        SearchDeveloperMetadataResponse response = api.sheetsSpreadsheetsDeveloperMetadataSearch(spreadsheetId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, searchDeveloperMetadataRequest);
        // TODO: test validations
    }

    /**
     * Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. By default, data within grids is not returned. You can include grid data in one of 2 ways: * Specify a [field mask](https://developers.google.com/sheets/api/guides/field-masks) listing your desired fields using the &#x60;fields&#x60; URL parameter in HTTP * Set the includeGridData URL parameter to true. If a field mask is set, the &#x60;includeGridData&#x60; parameter is ignored For large spreadsheets, as a best practice, retrieve only the specific spreadsheet fields that you want. To retrieve only subsets of spreadsheet data, use the ranges URL parameter. Ranges are specified using [A1 notation](/sheets/api/guides/concepts#cell). You can define a single cell (for example, &#x60;A1&#x60;) or multiple cells (for example, &#x60;A1:D5&#x60;). You can also get cells from other sheets within the same spreadsheet (for example, &#x60;Sheet2!A1:C4&#x60;) or retrieve multiple ranges at once (for example, &#x60;?ranges&#x3D;A1:D5&amp;ranges&#x3D;Sheet2!A1:C4&#x60;). Limiting the range returns only the portions of the spreadsheet that intersect the requested ranges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sheetsSpreadsheetsGetTest() throws ApiException {
        String spreadsheetId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean includeGridData = null;
        List<String> ranges = null;
        Spreadsheet response = api.sheetsSpreadsheetsGet(spreadsheetId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeGridData, ranges);
        // TODO: test validations
    }

    /**
     * Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. This method differs from GetSpreadsheet in that it allows selecting which subsets of spreadsheet data to return by specifying a dataFilters parameter. Multiple DataFilters can be specified. Specifying one or more data filters returns the portions of the spreadsheet that intersect ranges matched by any of the filters. By default, data within grids is not returned. You can include grid data one of 2 ways: * Specify a [field mask](https://developers.google.com/sheets/api/guides/field-masks) listing your desired fields using the &#x60;fields&#x60; URL parameter in HTTP * Set the includeGridData parameter to true. If a field mask is set, the &#x60;includeGridData&#x60; parameter is ignored For large spreadsheets, as a best practice, retrieve only the specific spreadsheet fields that you want.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sheetsSpreadsheetsGetByDataFilterTest() throws ApiException {
        String spreadsheetId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GetSpreadsheetByDataFilterRequest getSpreadsheetByDataFilterRequest = null;
        Spreadsheet response = api.sheetsSpreadsheetsGetByDataFilter(spreadsheetId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, getSpreadsheetByDataFilterRequest);
        // TODO: test validations
    }

    /**
     * Copies a single sheet from a spreadsheet to another spreadsheet. Returns the properties of the newly created sheet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sheetsSpreadsheetsSheetsCopyToTest() throws ApiException {
        String spreadsheetId = null;
        Integer sheetId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CopySheetToAnotherSpreadsheetRequest copySheetToAnotherSpreadsheetRequest = null;
        SheetProperties response = api.sheetsSpreadsheetsSheetsCopyTo(spreadsheetId, sheetId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, copySheetToAnotherSpreadsheetRequest);
        // TODO: test validations
    }

    /**
     * Appends values to a spreadsheet. The input range is used to search for existing data and find a \&quot;table\&quot; within that range. Values will be appended to the next row of the table, starting with the first column of the table. See the [guide](/sheets/api/guides/values#appending_values) and [sample code](/sheets/api/samples/writing#append_values) for specific details of how tables are detected and data is appended. The caller must specify the spreadsheet ID, range, and a valueInputOption. The &#x60;valueInputOption&#x60; only controls how the input data will be added to the sheet (column-wise or row-wise), it does not influence what cell the data starts being written to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sheetsSpreadsheetsValuesAppendTest() throws ApiException {
        String spreadsheetId = null;
        String range = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean includeValuesInResponse = null;
        String insertDataOption = null;
        String responseDateTimeRenderOption = null;
        String responseValueRenderOption = null;
        String valueInputOption = null;
        ValueRange valueRange = null;
        AppendValuesResponse response = api.sheetsSpreadsheetsValuesAppend(spreadsheetId, range, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeValuesInResponse, insertDataOption, responseDateTimeRenderOption, responseValueRenderOption, valueInputOption, valueRange);
        // TODO: test validations
    }

    /**
     * Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges. Only values are cleared -- all other properties of the cell (such as formatting and data validation) are kept.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sheetsSpreadsheetsValuesBatchClearTest() throws ApiException {
        String spreadsheetId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchClearValuesRequest batchClearValuesRequest = null;
        BatchClearValuesResponse response = api.sheetsSpreadsheetsValuesBatchClear(spreadsheetId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchClearValuesRequest);
        // TODO: test validations
    }

    /**
     * Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges matching any of the specified data filters will be cleared. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sheetsSpreadsheetsValuesBatchClearByDataFilterTest() throws ApiException {
        String spreadsheetId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchClearValuesByDataFilterRequest batchClearValuesByDataFilterRequest = null;
        BatchClearValuesByDataFilterResponse response = api.sheetsSpreadsheetsValuesBatchClearByDataFilter(spreadsheetId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchClearValuesByDataFilterRequest);
        // TODO: test validations
    }

    /**
     * Returns one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sheetsSpreadsheetsValuesBatchGetTest() throws ApiException {
        String spreadsheetId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String dateTimeRenderOption = null;
        String majorDimension = null;
        List<String> ranges = null;
        String valueRenderOption = null;
        BatchGetValuesResponse response = api.sheetsSpreadsheetsValuesBatchGet(spreadsheetId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dateTimeRenderOption, majorDimension, ranges, valueRenderOption);
        // TODO: test validations
    }

    /**
     * Returns one or more ranges of values that match the specified data filters. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges that match any of the data filters in the request will be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sheetsSpreadsheetsValuesBatchGetByDataFilterTest() throws ApiException {
        String spreadsheetId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchGetValuesByDataFilterRequest batchGetValuesByDataFilterRequest = null;
        BatchGetValuesByDataFilterResponse response = api.sheetsSpreadsheetsValuesBatchGetByDataFilter(spreadsheetId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchGetValuesByDataFilterRequest);
        // TODO: test validations
    }

    /**
     * Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more ValueRanges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sheetsSpreadsheetsValuesBatchUpdateTest() throws ApiException {
        String spreadsheetId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchUpdateValuesRequest batchUpdateValuesRequest = null;
        BatchUpdateValuesResponse response = api.sheetsSpreadsheetsValuesBatchUpdate(spreadsheetId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchUpdateValuesRequest);
        // TODO: test validations
    }

    /**
     * Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more DataFilterValueRanges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sheetsSpreadsheetsValuesBatchUpdateByDataFilterTest() throws ApiException {
        String spreadsheetId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchUpdateValuesByDataFilterRequest batchUpdateValuesByDataFilterRequest = null;
        BatchUpdateValuesByDataFilterResponse response = api.sheetsSpreadsheetsValuesBatchUpdateByDataFilter(spreadsheetId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchUpdateValuesByDataFilterRequest);
        // TODO: test validations
    }

    /**
     * Clears values from a spreadsheet. The caller must specify the spreadsheet ID and range. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sheetsSpreadsheetsValuesClearTest() throws ApiException {
        String spreadsheetId = null;
        String range = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        ClearValuesResponse response = api.sheetsSpreadsheetsValuesClear(spreadsheetId, range, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Returns a range of values from a spreadsheet. The caller must specify the spreadsheet ID and a range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sheetsSpreadsheetsValuesGetTest() throws ApiException {
        String spreadsheetId = null;
        String range = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String dateTimeRenderOption = null;
        String majorDimension = null;
        String valueRenderOption = null;
        ValueRange response = api.sheetsSpreadsheetsValuesGet(spreadsheetId, range, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dateTimeRenderOption, majorDimension, valueRenderOption);
        // TODO: test validations
    }

    /**
     * Sets values in a range of a spreadsheet. The caller must specify the spreadsheet ID, range, and a valueInputOption.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sheetsSpreadsheetsValuesUpdateTest() throws ApiException {
        String spreadsheetId = null;
        String range = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean includeValuesInResponse = null;
        String responseDateTimeRenderOption = null;
        String responseValueRenderOption = null;
        String valueInputOption = null;
        ValueRange valueRange = null;
        UpdateValuesResponse response = api.sheetsSpreadsheetsValuesUpdate(spreadsheetId, range, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeValuesInResponse, responseDateTimeRenderOption, responseValueRenderOption, valueInputOption, valueRange);
        // TODO: test validations
    }

}
