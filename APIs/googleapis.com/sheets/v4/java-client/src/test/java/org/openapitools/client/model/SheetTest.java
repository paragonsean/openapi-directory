/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BandedRange;
import org.openapitools.client.model.BasicFilter;
import org.openapitools.client.model.ConditionalFormatRule;
import org.openapitools.client.model.DeveloperMetadata;
import org.openapitools.client.model.DimensionGroup;
import org.openapitools.client.model.EmbeddedChart;
import org.openapitools.client.model.FilterView;
import org.openapitools.client.model.GridData;
import org.openapitools.client.model.GridRange;
import org.openapitools.client.model.ProtectedRange;
import org.openapitools.client.model.SheetProperties;
import org.openapitools.client.model.Slicer;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Sheet
 */
public class SheetTest {
    private final Sheet model = new Sheet();

    /**
     * Model tests for Sheet
     */
    @Test
    public void testSheet() {
        // TODO: test Sheet
    }

    /**
     * Test the property 'bandedRanges'
     */
    @Test
    public void bandedRangesTest() {
        // TODO: test bandedRanges
    }

    /**
     * Test the property 'basicFilter'
     */
    @Test
    public void basicFilterTest() {
        // TODO: test basicFilter
    }

    /**
     * Test the property 'charts'
     */
    @Test
    public void chartsTest() {
        // TODO: test charts
    }

    /**
     * Test the property 'columnGroups'
     */
    @Test
    public void columnGroupsTest() {
        // TODO: test columnGroups
    }

    /**
     * Test the property 'conditionalFormats'
     */
    @Test
    public void conditionalFormatsTest() {
        // TODO: test conditionalFormats
    }

    /**
     * Test the property 'data'
     */
    @Test
    public void dataTest() {
        // TODO: test data
    }

    /**
     * Test the property 'developerMetadata'
     */
    @Test
    public void developerMetadataTest() {
        // TODO: test developerMetadata
    }

    /**
     * Test the property 'filterViews'
     */
    @Test
    public void filterViewsTest() {
        // TODO: test filterViews
    }

    /**
     * Test the property 'merges'
     */
    @Test
    public void mergesTest() {
        // TODO: test merges
    }

    /**
     * Test the property 'properties'
     */
    @Test
    public void propertiesTest() {
        // TODO: test properties
    }

    /**
     * Test the property 'protectedRanges'
     */
    @Test
    public void protectedRangesTest() {
        // TODO: test protectedRanges
    }

    /**
     * Test the property 'rowGroups'
     */
    @Test
    public void rowGroupsTest() {
        // TODO: test rowGroups
    }

    /**
     * Test the property 'slicers'
     */
    @Test
    public void slicersTest() {
        // TODO: test slicers
    }

}
