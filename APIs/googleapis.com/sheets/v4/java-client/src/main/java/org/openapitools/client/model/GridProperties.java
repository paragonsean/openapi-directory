/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a grid.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GridProperties {
  public static final String SERIALIZED_NAME_COLUMN_COUNT = "columnCount";
  @SerializedName(SERIALIZED_NAME_COLUMN_COUNT)
  private Integer columnCount;

  public static final String SERIALIZED_NAME_COLUMN_GROUP_CONTROL_AFTER = "columnGroupControlAfter";
  @SerializedName(SERIALIZED_NAME_COLUMN_GROUP_CONTROL_AFTER)
  private Boolean columnGroupControlAfter;

  public static final String SERIALIZED_NAME_FROZEN_COLUMN_COUNT = "frozenColumnCount";
  @SerializedName(SERIALIZED_NAME_FROZEN_COLUMN_COUNT)
  private Integer frozenColumnCount;

  public static final String SERIALIZED_NAME_FROZEN_ROW_COUNT = "frozenRowCount";
  @SerializedName(SERIALIZED_NAME_FROZEN_ROW_COUNT)
  private Integer frozenRowCount;

  public static final String SERIALIZED_NAME_HIDE_GRIDLINES = "hideGridlines";
  @SerializedName(SERIALIZED_NAME_HIDE_GRIDLINES)
  private Boolean hideGridlines;

  public static final String SERIALIZED_NAME_ROW_COUNT = "rowCount";
  @SerializedName(SERIALIZED_NAME_ROW_COUNT)
  private Integer rowCount;

  public static final String SERIALIZED_NAME_ROW_GROUP_CONTROL_AFTER = "rowGroupControlAfter";
  @SerializedName(SERIALIZED_NAME_ROW_GROUP_CONTROL_AFTER)
  private Boolean rowGroupControlAfter;

  public GridProperties() {
  }

  public GridProperties columnCount(Integer columnCount) {
    this.columnCount = columnCount;
    return this;
  }

  /**
   * The number of columns in the grid.
   * @return columnCount
   */
  @javax.annotation.Nullable
  public Integer getColumnCount() {
    return columnCount;
  }

  public void setColumnCount(Integer columnCount) {
    this.columnCount = columnCount;
  }


  public GridProperties columnGroupControlAfter(Boolean columnGroupControlAfter) {
    this.columnGroupControlAfter = columnGroupControlAfter;
    return this;
  }

  /**
   * True if the column grouping control toggle is shown after the group.
   * @return columnGroupControlAfter
   */
  @javax.annotation.Nullable
  public Boolean getColumnGroupControlAfter() {
    return columnGroupControlAfter;
  }

  public void setColumnGroupControlAfter(Boolean columnGroupControlAfter) {
    this.columnGroupControlAfter = columnGroupControlAfter;
  }


  public GridProperties frozenColumnCount(Integer frozenColumnCount) {
    this.frozenColumnCount = frozenColumnCount;
    return this;
  }

  /**
   * The number of columns that are frozen in the grid.
   * @return frozenColumnCount
   */
  @javax.annotation.Nullable
  public Integer getFrozenColumnCount() {
    return frozenColumnCount;
  }

  public void setFrozenColumnCount(Integer frozenColumnCount) {
    this.frozenColumnCount = frozenColumnCount;
  }


  public GridProperties frozenRowCount(Integer frozenRowCount) {
    this.frozenRowCount = frozenRowCount;
    return this;
  }

  /**
   * The number of rows that are frozen in the grid.
   * @return frozenRowCount
   */
  @javax.annotation.Nullable
  public Integer getFrozenRowCount() {
    return frozenRowCount;
  }

  public void setFrozenRowCount(Integer frozenRowCount) {
    this.frozenRowCount = frozenRowCount;
  }


  public GridProperties hideGridlines(Boolean hideGridlines) {
    this.hideGridlines = hideGridlines;
    return this;
  }

  /**
   * True if the grid isn&#39;t showing gridlines in the UI.
   * @return hideGridlines
   */
  @javax.annotation.Nullable
  public Boolean getHideGridlines() {
    return hideGridlines;
  }

  public void setHideGridlines(Boolean hideGridlines) {
    this.hideGridlines = hideGridlines;
  }


  public GridProperties rowCount(Integer rowCount) {
    this.rowCount = rowCount;
    return this;
  }

  /**
   * The number of rows in the grid.
   * @return rowCount
   */
  @javax.annotation.Nullable
  public Integer getRowCount() {
    return rowCount;
  }

  public void setRowCount(Integer rowCount) {
    this.rowCount = rowCount;
  }


  public GridProperties rowGroupControlAfter(Boolean rowGroupControlAfter) {
    this.rowGroupControlAfter = rowGroupControlAfter;
    return this;
  }

  /**
   * True if the row grouping control toggle is shown after the group.
   * @return rowGroupControlAfter
   */
  @javax.annotation.Nullable
  public Boolean getRowGroupControlAfter() {
    return rowGroupControlAfter;
  }

  public void setRowGroupControlAfter(Boolean rowGroupControlAfter) {
    this.rowGroupControlAfter = rowGroupControlAfter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GridProperties gridProperties = (GridProperties) o;
    return Objects.equals(this.columnCount, gridProperties.columnCount) &&
        Objects.equals(this.columnGroupControlAfter, gridProperties.columnGroupControlAfter) &&
        Objects.equals(this.frozenColumnCount, gridProperties.frozenColumnCount) &&
        Objects.equals(this.frozenRowCount, gridProperties.frozenRowCount) &&
        Objects.equals(this.hideGridlines, gridProperties.hideGridlines) &&
        Objects.equals(this.rowCount, gridProperties.rowCount) &&
        Objects.equals(this.rowGroupControlAfter, gridProperties.rowGroupControlAfter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnCount, columnGroupControlAfter, frozenColumnCount, frozenRowCount, hideGridlines, rowCount, rowGroupControlAfter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GridProperties {\n");
    sb.append("    columnCount: ").append(toIndentedString(columnCount)).append("\n");
    sb.append("    columnGroupControlAfter: ").append(toIndentedString(columnGroupControlAfter)).append("\n");
    sb.append("    frozenColumnCount: ").append(toIndentedString(frozenColumnCount)).append("\n");
    sb.append("    frozenRowCount: ").append(toIndentedString(frozenRowCount)).append("\n");
    sb.append("    hideGridlines: ").append(toIndentedString(hideGridlines)).append("\n");
    sb.append("    rowCount: ").append(toIndentedString(rowCount)).append("\n");
    sb.append("    rowGroupControlAfter: ").append(toIndentedString(rowGroupControlAfter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columnCount");
    openapiFields.add("columnGroupControlAfter");
    openapiFields.add("frozenColumnCount");
    openapiFields.add("frozenRowCount");
    openapiFields.add("hideGridlines");
    openapiFields.add("rowCount");
    openapiFields.add("rowGroupControlAfter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GridProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GridProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GridProperties is not found in the empty JSON string", GridProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GridProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GridProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GridProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GridProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GridProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GridProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<GridProperties>() {
           @Override
           public void write(JsonWriter out, GridProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GridProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GridProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GridProperties
   * @throws IOException if the JSON string is invalid with respect to GridProperties
   */
  public static GridProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GridProperties.class);
  }

  /**
   * Convert an instance of GridProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

