/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GridRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Splits a column of text into multiple columns, based on a delimiter in each cell.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TextToColumnsRequest {
  public static final String SERIALIZED_NAME_DELIMITER = "delimiter";
  @SerializedName(SERIALIZED_NAME_DELIMITER)
  private String delimiter;

  /**
   * The delimiter type to use.
   */
  @JsonAdapter(DelimiterTypeEnum.Adapter.class)
  public enum DelimiterTypeEnum {
    DELIMITER_TYPE_UNSPECIFIED("DELIMITER_TYPE_UNSPECIFIED"),
    
    COMMA("COMMA"),
    
    SEMICOLON("SEMICOLON"),
    
    PERIOD("PERIOD"),
    
    SPACE("SPACE"),
    
    CUSTOM("CUSTOM"),
    
    AUTODETECT("AUTODETECT");

    private String value;

    DelimiterTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DelimiterTypeEnum fromValue(String value) {
      for (DelimiterTypeEnum b : DelimiterTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DelimiterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DelimiterTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DelimiterTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DelimiterTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DelimiterTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DELIMITER_TYPE = "delimiterType";
  @SerializedName(SERIALIZED_NAME_DELIMITER_TYPE)
  private DelimiterTypeEnum delimiterType;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private GridRange source;

  public TextToColumnsRequest() {
  }

  public TextToColumnsRequest delimiter(String delimiter) {
    this.delimiter = delimiter;
    return this;
  }

  /**
   * The delimiter to use. Used only if delimiterType is CUSTOM.
   * @return delimiter
   */
  @javax.annotation.Nullable
  public String getDelimiter() {
    return delimiter;
  }

  public void setDelimiter(String delimiter) {
    this.delimiter = delimiter;
  }


  public TextToColumnsRequest delimiterType(DelimiterTypeEnum delimiterType) {
    this.delimiterType = delimiterType;
    return this;
  }

  /**
   * The delimiter type to use.
   * @return delimiterType
   */
  @javax.annotation.Nullable
  public DelimiterTypeEnum getDelimiterType() {
    return delimiterType;
  }

  public void setDelimiterType(DelimiterTypeEnum delimiterType) {
    this.delimiterType = delimiterType;
  }


  public TextToColumnsRequest source(GridRange source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public GridRange getSource() {
    return source;
  }

  public void setSource(GridRange source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextToColumnsRequest textToColumnsRequest = (TextToColumnsRequest) o;
    return Objects.equals(this.delimiter, textToColumnsRequest.delimiter) &&
        Objects.equals(this.delimiterType, textToColumnsRequest.delimiterType) &&
        Objects.equals(this.source, textToColumnsRequest.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(delimiter, delimiterType, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextToColumnsRequest {\n");
    sb.append("    delimiter: ").append(toIndentedString(delimiter)).append("\n");
    sb.append("    delimiterType: ").append(toIndentedString(delimiterType)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("delimiter");
    openapiFields.add("delimiterType");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TextToColumnsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TextToColumnsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TextToColumnsRequest is not found in the empty JSON string", TextToColumnsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TextToColumnsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TextToColumnsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("delimiter") != null && !jsonObj.get("delimiter").isJsonNull()) && !jsonObj.get("delimiter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delimiter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delimiter").toString()));
      }
      if ((jsonObj.get("delimiterType") != null && !jsonObj.get("delimiterType").isJsonNull()) && !jsonObj.get("delimiterType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delimiterType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delimiterType").toString()));
      }
      // validate the optional field `delimiterType`
      if (jsonObj.get("delimiterType") != null && !jsonObj.get("delimiterType").isJsonNull()) {
        DelimiterTypeEnum.validateJsonElement(jsonObj.get("delimiterType"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        GridRange.validateJsonElement(jsonObj.get("source"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TextToColumnsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TextToColumnsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TextToColumnsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TextToColumnsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TextToColumnsRequest>() {
           @Override
           public void write(JsonWriter out, TextToColumnsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TextToColumnsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TextToColumnsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TextToColumnsRequest
   * @throws IOException if the JSON string is invalid with respect to TextToColumnsRequest
   */
  public static TextToColumnsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TextToColumnsRequest.class);
  }

  /**
   * Convert an instance of TextToColumnsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

