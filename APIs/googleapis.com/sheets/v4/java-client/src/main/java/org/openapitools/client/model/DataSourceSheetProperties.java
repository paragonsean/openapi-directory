/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataExecutionStatus;
import org.openapitools.client.model.DataSourceColumn;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Additional properties of a DATA_SOURCE sheet.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataSourceSheetProperties {
  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<DataSourceColumn> columns = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_EXECUTION_STATUS = "dataExecutionStatus";
  @SerializedName(SERIALIZED_NAME_DATA_EXECUTION_STATUS)
  private DataExecutionStatus dataExecutionStatus;

  public static final String SERIALIZED_NAME_DATA_SOURCE_ID = "dataSourceId";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_ID)
  private String dataSourceId;

  public DataSourceSheetProperties() {
  }

  public DataSourceSheetProperties columns(List<DataSourceColumn> columns) {
    this.columns = columns;
    return this;
  }

  public DataSourceSheetProperties addColumnsItem(DataSourceColumn columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

  /**
   * The columns displayed on the sheet, corresponding to the values in RowData.
   * @return columns
   */
  @javax.annotation.Nullable
  public List<DataSourceColumn> getColumns() {
    return columns;
  }

  public void setColumns(List<DataSourceColumn> columns) {
    this.columns = columns;
  }


  public DataSourceSheetProperties dataExecutionStatus(DataExecutionStatus dataExecutionStatus) {
    this.dataExecutionStatus = dataExecutionStatus;
    return this;
  }

  /**
   * Get dataExecutionStatus
   * @return dataExecutionStatus
   */
  @javax.annotation.Nullable
  public DataExecutionStatus getDataExecutionStatus() {
    return dataExecutionStatus;
  }

  public void setDataExecutionStatus(DataExecutionStatus dataExecutionStatus) {
    this.dataExecutionStatus = dataExecutionStatus;
  }


  public DataSourceSheetProperties dataSourceId(String dataSourceId) {
    this.dataSourceId = dataSourceId;
    return this;
  }

  /**
   * ID of the DataSource the sheet is connected to.
   * @return dataSourceId
   */
  @javax.annotation.Nullable
  public String getDataSourceId() {
    return dataSourceId;
  }

  public void setDataSourceId(String dataSourceId) {
    this.dataSourceId = dataSourceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSourceSheetProperties dataSourceSheetProperties = (DataSourceSheetProperties) o;
    return Objects.equals(this.columns, dataSourceSheetProperties.columns) &&
        Objects.equals(this.dataExecutionStatus, dataSourceSheetProperties.dataExecutionStatus) &&
        Objects.equals(this.dataSourceId, dataSourceSheetProperties.dataSourceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columns, dataExecutionStatus, dataSourceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSourceSheetProperties {\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    dataExecutionStatus: ").append(toIndentedString(dataExecutionStatus)).append("\n");
    sb.append("    dataSourceId: ").append(toIndentedString(dataSourceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columns");
    openapiFields.add("dataExecutionStatus");
    openapiFields.add("dataSourceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataSourceSheetProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataSourceSheetProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataSourceSheetProperties is not found in the empty JSON string", DataSourceSheetProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataSourceSheetProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataSourceSheetProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("columns") != null && !jsonObj.get("columns").isJsonNull()) {
        JsonArray jsonArraycolumns = jsonObj.getAsJsonArray("columns");
        if (jsonArraycolumns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("columns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
          }

          // validate the optional field `columns` (array)
          for (int i = 0; i < jsonArraycolumns.size(); i++) {
            DataSourceColumn.validateJsonElement(jsonArraycolumns.get(i));
          };
        }
      }
      // validate the optional field `dataExecutionStatus`
      if (jsonObj.get("dataExecutionStatus") != null && !jsonObj.get("dataExecutionStatus").isJsonNull()) {
        DataExecutionStatus.validateJsonElement(jsonObj.get("dataExecutionStatus"));
      }
      if ((jsonObj.get("dataSourceId") != null && !jsonObj.get("dataSourceId").isJsonNull()) && !jsonObj.get("dataSourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSourceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataSourceSheetProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataSourceSheetProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataSourceSheetProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataSourceSheetProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DataSourceSheetProperties>() {
           @Override
           public void write(JsonWriter out, DataSourceSheetProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataSourceSheetProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataSourceSheetProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataSourceSheetProperties
   * @throws IOException if the JSON string is invalid with respect to DataSourceSheetProperties
   */
  public static DataSourceSheetProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataSourceSheetProperties.class);
  }

  /**
   * Convert an instance of DataSourceSheetProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

