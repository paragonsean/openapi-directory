/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChartGroupRule;
import org.openapitools.client.model.ChartSourceRange;
import org.openapitools.client.model.DataSourceColumnReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The data included in a domain or series.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChartData {
  /**
   * The aggregation type for the series of a data source chart. Only supported for data source charts.
   */
  @JsonAdapter(AggregateTypeEnum.Adapter.class)
  public enum AggregateTypeEnum {
    CHART_AGGREGATE_TYPE_UNSPECIFIED("CHART_AGGREGATE_TYPE_UNSPECIFIED"),
    
    AVERAGE("AVERAGE"),
    
    COUNT("COUNT"),
    
    MAX("MAX"),
    
    MEDIAN("MEDIAN"),
    
    MIN("MIN"),
    
    SUM("SUM");

    private String value;

    AggregateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregateTypeEnum fromValue(String value) {
      for (AggregateTypeEnum b : AggregateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AggregateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AggregateTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AggregateTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGGREGATE_TYPE = "aggregateType";
  @SerializedName(SERIALIZED_NAME_AGGREGATE_TYPE)
  private AggregateTypeEnum aggregateType;

  public static final String SERIALIZED_NAME_COLUMN_REFERENCE = "columnReference";
  @SerializedName(SERIALIZED_NAME_COLUMN_REFERENCE)
  private DataSourceColumnReference columnReference;

  public static final String SERIALIZED_NAME_GROUP_RULE = "groupRule";
  @SerializedName(SERIALIZED_NAME_GROUP_RULE)
  private ChartGroupRule groupRule;

  public static final String SERIALIZED_NAME_SOURCE_RANGE = "sourceRange";
  @SerializedName(SERIALIZED_NAME_SOURCE_RANGE)
  private ChartSourceRange sourceRange;

  public ChartData() {
  }

  public ChartData aggregateType(AggregateTypeEnum aggregateType) {
    this.aggregateType = aggregateType;
    return this;
  }

  /**
   * The aggregation type for the series of a data source chart. Only supported for data source charts.
   * @return aggregateType
   */
  @javax.annotation.Nullable
  public AggregateTypeEnum getAggregateType() {
    return aggregateType;
  }

  public void setAggregateType(AggregateTypeEnum aggregateType) {
    this.aggregateType = aggregateType;
  }


  public ChartData columnReference(DataSourceColumnReference columnReference) {
    this.columnReference = columnReference;
    return this;
  }

  /**
   * Get columnReference
   * @return columnReference
   */
  @javax.annotation.Nullable
  public DataSourceColumnReference getColumnReference() {
    return columnReference;
  }

  public void setColumnReference(DataSourceColumnReference columnReference) {
    this.columnReference = columnReference;
  }


  public ChartData groupRule(ChartGroupRule groupRule) {
    this.groupRule = groupRule;
    return this;
  }

  /**
   * Get groupRule
   * @return groupRule
   */
  @javax.annotation.Nullable
  public ChartGroupRule getGroupRule() {
    return groupRule;
  }

  public void setGroupRule(ChartGroupRule groupRule) {
    this.groupRule = groupRule;
  }


  public ChartData sourceRange(ChartSourceRange sourceRange) {
    this.sourceRange = sourceRange;
    return this;
  }

  /**
   * Get sourceRange
   * @return sourceRange
   */
  @javax.annotation.Nullable
  public ChartSourceRange getSourceRange() {
    return sourceRange;
  }

  public void setSourceRange(ChartSourceRange sourceRange) {
    this.sourceRange = sourceRange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartData chartData = (ChartData) o;
    return Objects.equals(this.aggregateType, chartData.aggregateType) &&
        Objects.equals(this.columnReference, chartData.columnReference) &&
        Objects.equals(this.groupRule, chartData.groupRule) &&
        Objects.equals(this.sourceRange, chartData.sourceRange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregateType, columnReference, groupRule, sourceRange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartData {\n");
    sb.append("    aggregateType: ").append(toIndentedString(aggregateType)).append("\n");
    sb.append("    columnReference: ").append(toIndentedString(columnReference)).append("\n");
    sb.append("    groupRule: ").append(toIndentedString(groupRule)).append("\n");
    sb.append("    sourceRange: ").append(toIndentedString(sourceRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregateType");
    openapiFields.add("columnReference");
    openapiFields.add("groupRule");
    openapiFields.add("sourceRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChartData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChartData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChartData is not found in the empty JSON string", ChartData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChartData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChartData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aggregateType") != null && !jsonObj.get("aggregateType").isJsonNull()) && !jsonObj.get("aggregateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregateType").toString()));
      }
      // validate the optional field `aggregateType`
      if (jsonObj.get("aggregateType") != null && !jsonObj.get("aggregateType").isJsonNull()) {
        AggregateTypeEnum.validateJsonElement(jsonObj.get("aggregateType"));
      }
      // validate the optional field `columnReference`
      if (jsonObj.get("columnReference") != null && !jsonObj.get("columnReference").isJsonNull()) {
        DataSourceColumnReference.validateJsonElement(jsonObj.get("columnReference"));
      }
      // validate the optional field `groupRule`
      if (jsonObj.get("groupRule") != null && !jsonObj.get("groupRule").isJsonNull()) {
        ChartGroupRule.validateJsonElement(jsonObj.get("groupRule"));
      }
      // validate the optional field `sourceRange`
      if (jsonObj.get("sourceRange") != null && !jsonObj.get("sourceRange").isJsonNull()) {
        ChartSourceRange.validateJsonElement(jsonObj.get("sourceRange"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChartData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChartData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChartData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChartData.class));

       return (TypeAdapter<T>) new TypeAdapter<ChartData>() {
           @Override
           public void write(JsonWriter out, ChartData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChartData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChartData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChartData
   * @throws IOException if the JSON string is invalid with respect to ChartData
   */
  public static ChartData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChartData.class);
  }

  /**
   * Convert an instance of ChartData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

