/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DimensionProperties;
import org.openapitools.client.model.RowData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data in the grid, as well as metadata about the dimensions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GridData {
  public static final String SERIALIZED_NAME_COLUMN_METADATA = "columnMetadata";
  @SerializedName(SERIALIZED_NAME_COLUMN_METADATA)
  private List<DimensionProperties> columnMetadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROW_DATA = "rowData";
  @SerializedName(SERIALIZED_NAME_ROW_DATA)
  private List<RowData> rowData = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROW_METADATA = "rowMetadata";
  @SerializedName(SERIALIZED_NAME_ROW_METADATA)
  private List<DimensionProperties> rowMetadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_COLUMN = "startColumn";
  @SerializedName(SERIALIZED_NAME_START_COLUMN)
  private Integer startColumn;

  public static final String SERIALIZED_NAME_START_ROW = "startRow";
  @SerializedName(SERIALIZED_NAME_START_ROW)
  private Integer startRow;

  public GridData() {
  }

  public GridData columnMetadata(List<DimensionProperties> columnMetadata) {
    this.columnMetadata = columnMetadata;
    return this;
  }

  public GridData addColumnMetadataItem(DimensionProperties columnMetadataItem) {
    if (this.columnMetadata == null) {
      this.columnMetadata = new ArrayList<>();
    }
    this.columnMetadata.add(columnMetadataItem);
    return this;
  }

  /**
   * Metadata about the requested columns in the grid, starting with the column in start_column.
   * @return columnMetadata
   */
  @javax.annotation.Nullable
  public List<DimensionProperties> getColumnMetadata() {
    return columnMetadata;
  }

  public void setColumnMetadata(List<DimensionProperties> columnMetadata) {
    this.columnMetadata = columnMetadata;
  }


  public GridData rowData(List<RowData> rowData) {
    this.rowData = rowData;
    return this;
  }

  public GridData addRowDataItem(RowData rowDataItem) {
    if (this.rowData == null) {
      this.rowData = new ArrayList<>();
    }
    this.rowData.add(rowDataItem);
    return this;
  }

  /**
   * The data in the grid, one entry per row, starting with the row in startRow. The values in RowData will correspond to columns starting at start_column.
   * @return rowData
   */
  @javax.annotation.Nullable
  public List<RowData> getRowData() {
    return rowData;
  }

  public void setRowData(List<RowData> rowData) {
    this.rowData = rowData;
  }


  public GridData rowMetadata(List<DimensionProperties> rowMetadata) {
    this.rowMetadata = rowMetadata;
    return this;
  }

  public GridData addRowMetadataItem(DimensionProperties rowMetadataItem) {
    if (this.rowMetadata == null) {
      this.rowMetadata = new ArrayList<>();
    }
    this.rowMetadata.add(rowMetadataItem);
    return this;
  }

  /**
   * Metadata about the requested rows in the grid, starting with the row in start_row.
   * @return rowMetadata
   */
  @javax.annotation.Nullable
  public List<DimensionProperties> getRowMetadata() {
    return rowMetadata;
  }

  public void setRowMetadata(List<DimensionProperties> rowMetadata) {
    this.rowMetadata = rowMetadata;
  }


  public GridData startColumn(Integer startColumn) {
    this.startColumn = startColumn;
    return this;
  }

  /**
   * The first column this GridData refers to, zero-based.
   * @return startColumn
   */
  @javax.annotation.Nullable
  public Integer getStartColumn() {
    return startColumn;
  }

  public void setStartColumn(Integer startColumn) {
    this.startColumn = startColumn;
  }


  public GridData startRow(Integer startRow) {
    this.startRow = startRow;
    return this;
  }

  /**
   * The first row this GridData refers to, zero-based.
   * @return startRow
   */
  @javax.annotation.Nullable
  public Integer getStartRow() {
    return startRow;
  }

  public void setStartRow(Integer startRow) {
    this.startRow = startRow;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GridData gridData = (GridData) o;
    return Objects.equals(this.columnMetadata, gridData.columnMetadata) &&
        Objects.equals(this.rowData, gridData.rowData) &&
        Objects.equals(this.rowMetadata, gridData.rowMetadata) &&
        Objects.equals(this.startColumn, gridData.startColumn) &&
        Objects.equals(this.startRow, gridData.startRow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnMetadata, rowData, rowMetadata, startColumn, startRow);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GridData {\n");
    sb.append("    columnMetadata: ").append(toIndentedString(columnMetadata)).append("\n");
    sb.append("    rowData: ").append(toIndentedString(rowData)).append("\n");
    sb.append("    rowMetadata: ").append(toIndentedString(rowMetadata)).append("\n");
    sb.append("    startColumn: ").append(toIndentedString(startColumn)).append("\n");
    sb.append("    startRow: ").append(toIndentedString(startRow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columnMetadata");
    openapiFields.add("rowData");
    openapiFields.add("rowMetadata");
    openapiFields.add("startColumn");
    openapiFields.add("startRow");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GridData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GridData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GridData is not found in the empty JSON string", GridData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GridData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GridData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("columnMetadata") != null && !jsonObj.get("columnMetadata").isJsonNull()) {
        JsonArray jsonArraycolumnMetadata = jsonObj.getAsJsonArray("columnMetadata");
        if (jsonArraycolumnMetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("columnMetadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `columnMetadata` to be an array in the JSON string but got `%s`", jsonObj.get("columnMetadata").toString()));
          }

          // validate the optional field `columnMetadata` (array)
          for (int i = 0; i < jsonArraycolumnMetadata.size(); i++) {
            DimensionProperties.validateJsonElement(jsonArraycolumnMetadata.get(i));
          };
        }
      }
      if (jsonObj.get("rowData") != null && !jsonObj.get("rowData").isJsonNull()) {
        JsonArray jsonArrayrowData = jsonObj.getAsJsonArray("rowData");
        if (jsonArrayrowData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rowData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rowData` to be an array in the JSON string but got `%s`", jsonObj.get("rowData").toString()));
          }

          // validate the optional field `rowData` (array)
          for (int i = 0; i < jsonArrayrowData.size(); i++) {
            RowData.validateJsonElement(jsonArrayrowData.get(i));
          };
        }
      }
      if (jsonObj.get("rowMetadata") != null && !jsonObj.get("rowMetadata").isJsonNull()) {
        JsonArray jsonArrayrowMetadata = jsonObj.getAsJsonArray("rowMetadata");
        if (jsonArrayrowMetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rowMetadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rowMetadata` to be an array in the JSON string but got `%s`", jsonObj.get("rowMetadata").toString()));
          }

          // validate the optional field `rowMetadata` (array)
          for (int i = 0; i < jsonArrayrowMetadata.size(); i++) {
            DimensionProperties.validateJsonElement(jsonArrayrowMetadata.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GridData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GridData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GridData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GridData.class));

       return (TypeAdapter<T>) new TypeAdapter<GridData>() {
           @Override
           public void write(JsonWriter out, GridData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GridData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GridData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GridData
   * @throws IOException if the JSON string is invalid with respect to GridData
   */
  public static GridData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GridData.class);
  }

  /**
   * Convert an instance of GridData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

