/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdateValuesResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response when updating a range of values in a spreadsheet.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppendValuesResponse {
  public static final String SERIALIZED_NAME_SPREADSHEET_ID = "spreadsheetId";
  @SerializedName(SERIALIZED_NAME_SPREADSHEET_ID)
  private String spreadsheetId;

  public static final String SERIALIZED_NAME_TABLE_RANGE = "tableRange";
  @SerializedName(SERIALIZED_NAME_TABLE_RANGE)
  private String tableRange;

  public static final String SERIALIZED_NAME_UPDATES = "updates";
  @SerializedName(SERIALIZED_NAME_UPDATES)
  private UpdateValuesResponse updates;

  public AppendValuesResponse() {
  }

  public AppendValuesResponse spreadsheetId(String spreadsheetId) {
    this.spreadsheetId = spreadsheetId;
    return this;
  }

  /**
   * The spreadsheet the updates were applied to.
   * @return spreadsheetId
   */
  @javax.annotation.Nullable
  public String getSpreadsheetId() {
    return spreadsheetId;
  }

  public void setSpreadsheetId(String spreadsheetId) {
    this.spreadsheetId = spreadsheetId;
  }


  public AppendValuesResponse tableRange(String tableRange) {
    this.tableRange = tableRange;
    return this;
  }

  /**
   * The range (in A1 notation) of the table that values are being appended to (before the values were appended). Empty if no table was found.
   * @return tableRange
   */
  @javax.annotation.Nullable
  public String getTableRange() {
    return tableRange;
  }

  public void setTableRange(String tableRange) {
    this.tableRange = tableRange;
  }


  public AppendValuesResponse updates(UpdateValuesResponse updates) {
    this.updates = updates;
    return this;
  }

  /**
   * Get updates
   * @return updates
   */
  @javax.annotation.Nullable
  public UpdateValuesResponse getUpdates() {
    return updates;
  }

  public void setUpdates(UpdateValuesResponse updates) {
    this.updates = updates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppendValuesResponse appendValuesResponse = (AppendValuesResponse) o;
    return Objects.equals(this.spreadsheetId, appendValuesResponse.spreadsheetId) &&
        Objects.equals(this.tableRange, appendValuesResponse.tableRange) &&
        Objects.equals(this.updates, appendValuesResponse.updates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(spreadsheetId, tableRange, updates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppendValuesResponse {\n");
    sb.append("    spreadsheetId: ").append(toIndentedString(spreadsheetId)).append("\n");
    sb.append("    tableRange: ").append(toIndentedString(tableRange)).append("\n");
    sb.append("    updates: ").append(toIndentedString(updates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("spreadsheetId");
    openapiFields.add("tableRange");
    openapiFields.add("updates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppendValuesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppendValuesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppendValuesResponse is not found in the empty JSON string", AppendValuesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppendValuesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppendValuesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("spreadsheetId") != null && !jsonObj.get("spreadsheetId").isJsonNull()) && !jsonObj.get("spreadsheetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spreadsheetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spreadsheetId").toString()));
      }
      if ((jsonObj.get("tableRange") != null && !jsonObj.get("tableRange").isJsonNull()) && !jsonObj.get("tableRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableRange").toString()));
      }
      // validate the optional field `updates`
      if (jsonObj.get("updates") != null && !jsonObj.get("updates").isJsonNull()) {
        UpdateValuesResponse.validateJsonElement(jsonObj.get("updates"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppendValuesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppendValuesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppendValuesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppendValuesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AppendValuesResponse>() {
           @Override
           public void write(JsonWriter out, AppendValuesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppendValuesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppendValuesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppendValuesResponse
   * @throws IOException if the JSON string is invalid with respect to AppendValuesResponse
   */
  public static AppendValuesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppendValuesResponse.class);
  }

  /**
   * Convert an instance of AppendValuesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

