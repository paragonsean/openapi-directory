/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BooleanCondition;
import org.openapitools.client.model.Color;
import org.openapitools.client.model.ColorStyle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Criteria for showing/hiding rows in a filter or filter view.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FilterCriteria {
  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private BooleanCondition condition;

  public static final String SERIALIZED_NAME_HIDDEN_VALUES = "hiddenValues";
  @SerializedName(SERIALIZED_NAME_HIDDEN_VALUES)
  private List<String> hiddenValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_VISIBLE_BACKGROUND_COLOR = "visibleBackgroundColor";
  @SerializedName(SERIALIZED_NAME_VISIBLE_BACKGROUND_COLOR)
  private Color visibleBackgroundColor;

  public static final String SERIALIZED_NAME_VISIBLE_BACKGROUND_COLOR_STYLE = "visibleBackgroundColorStyle";
  @SerializedName(SERIALIZED_NAME_VISIBLE_BACKGROUND_COLOR_STYLE)
  private ColorStyle visibleBackgroundColorStyle;

  public static final String SERIALIZED_NAME_VISIBLE_FOREGROUND_COLOR = "visibleForegroundColor";
  @SerializedName(SERIALIZED_NAME_VISIBLE_FOREGROUND_COLOR)
  private Color visibleForegroundColor;

  public static final String SERIALIZED_NAME_VISIBLE_FOREGROUND_COLOR_STYLE = "visibleForegroundColorStyle";
  @SerializedName(SERIALIZED_NAME_VISIBLE_FOREGROUND_COLOR_STYLE)
  private ColorStyle visibleForegroundColorStyle;

  public FilterCriteria() {
  }

  public FilterCriteria condition(BooleanCondition condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Get condition
   * @return condition
   */
  @javax.annotation.Nullable
  public BooleanCondition getCondition() {
    return condition;
  }

  public void setCondition(BooleanCondition condition) {
    this.condition = condition;
  }


  public FilterCriteria hiddenValues(List<String> hiddenValues) {
    this.hiddenValues = hiddenValues;
    return this;
  }

  public FilterCriteria addHiddenValuesItem(String hiddenValuesItem) {
    if (this.hiddenValues == null) {
      this.hiddenValues = new ArrayList<>();
    }
    this.hiddenValues.add(hiddenValuesItem);
    return this;
  }

  /**
   * Values that should be hidden.
   * @return hiddenValues
   */
  @javax.annotation.Nullable
  public List<String> getHiddenValues() {
    return hiddenValues;
  }

  public void setHiddenValues(List<String> hiddenValues) {
    this.hiddenValues = hiddenValues;
  }


  public FilterCriteria visibleBackgroundColor(Color visibleBackgroundColor) {
    this.visibleBackgroundColor = visibleBackgroundColor;
    return this;
  }

  /**
   * Get visibleBackgroundColor
   * @return visibleBackgroundColor
   */
  @javax.annotation.Nullable
  public Color getVisibleBackgroundColor() {
    return visibleBackgroundColor;
  }

  public void setVisibleBackgroundColor(Color visibleBackgroundColor) {
    this.visibleBackgroundColor = visibleBackgroundColor;
  }


  public FilterCriteria visibleBackgroundColorStyle(ColorStyle visibleBackgroundColorStyle) {
    this.visibleBackgroundColorStyle = visibleBackgroundColorStyle;
    return this;
  }

  /**
   * Get visibleBackgroundColorStyle
   * @return visibleBackgroundColorStyle
   */
  @javax.annotation.Nullable
  public ColorStyle getVisibleBackgroundColorStyle() {
    return visibleBackgroundColorStyle;
  }

  public void setVisibleBackgroundColorStyle(ColorStyle visibleBackgroundColorStyle) {
    this.visibleBackgroundColorStyle = visibleBackgroundColorStyle;
  }


  public FilterCriteria visibleForegroundColor(Color visibleForegroundColor) {
    this.visibleForegroundColor = visibleForegroundColor;
    return this;
  }

  /**
   * Get visibleForegroundColor
   * @return visibleForegroundColor
   */
  @javax.annotation.Nullable
  public Color getVisibleForegroundColor() {
    return visibleForegroundColor;
  }

  public void setVisibleForegroundColor(Color visibleForegroundColor) {
    this.visibleForegroundColor = visibleForegroundColor;
  }


  public FilterCriteria visibleForegroundColorStyle(ColorStyle visibleForegroundColorStyle) {
    this.visibleForegroundColorStyle = visibleForegroundColorStyle;
    return this;
  }

  /**
   * Get visibleForegroundColorStyle
   * @return visibleForegroundColorStyle
   */
  @javax.annotation.Nullable
  public ColorStyle getVisibleForegroundColorStyle() {
    return visibleForegroundColorStyle;
  }

  public void setVisibleForegroundColorStyle(ColorStyle visibleForegroundColorStyle) {
    this.visibleForegroundColorStyle = visibleForegroundColorStyle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterCriteria filterCriteria = (FilterCriteria) o;
    return Objects.equals(this.condition, filterCriteria.condition) &&
        Objects.equals(this.hiddenValues, filterCriteria.hiddenValues) &&
        Objects.equals(this.visibleBackgroundColor, filterCriteria.visibleBackgroundColor) &&
        Objects.equals(this.visibleBackgroundColorStyle, filterCriteria.visibleBackgroundColorStyle) &&
        Objects.equals(this.visibleForegroundColor, filterCriteria.visibleForegroundColor) &&
        Objects.equals(this.visibleForegroundColorStyle, filterCriteria.visibleForegroundColorStyle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(condition, hiddenValues, visibleBackgroundColor, visibleBackgroundColorStyle, visibleForegroundColor, visibleForegroundColorStyle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterCriteria {\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    hiddenValues: ").append(toIndentedString(hiddenValues)).append("\n");
    sb.append("    visibleBackgroundColor: ").append(toIndentedString(visibleBackgroundColor)).append("\n");
    sb.append("    visibleBackgroundColorStyle: ").append(toIndentedString(visibleBackgroundColorStyle)).append("\n");
    sb.append("    visibleForegroundColor: ").append(toIndentedString(visibleForegroundColor)).append("\n");
    sb.append("    visibleForegroundColorStyle: ").append(toIndentedString(visibleForegroundColorStyle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("condition");
    openapiFields.add("hiddenValues");
    openapiFields.add("visibleBackgroundColor");
    openapiFields.add("visibleBackgroundColorStyle");
    openapiFields.add("visibleForegroundColor");
    openapiFields.add("visibleForegroundColorStyle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FilterCriteria
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FilterCriteria.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FilterCriteria is not found in the empty JSON string", FilterCriteria.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FilterCriteria.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FilterCriteria` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `condition`
      if (jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) {
        BooleanCondition.validateJsonElement(jsonObj.get("condition"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hiddenValues") != null && !jsonObj.get("hiddenValues").isJsonNull() && !jsonObj.get("hiddenValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hiddenValues` to be an array in the JSON string but got `%s`", jsonObj.get("hiddenValues").toString()));
      }
      // validate the optional field `visibleBackgroundColor`
      if (jsonObj.get("visibleBackgroundColor") != null && !jsonObj.get("visibleBackgroundColor").isJsonNull()) {
        Color.validateJsonElement(jsonObj.get("visibleBackgroundColor"));
      }
      // validate the optional field `visibleBackgroundColorStyle`
      if (jsonObj.get("visibleBackgroundColorStyle") != null && !jsonObj.get("visibleBackgroundColorStyle").isJsonNull()) {
        ColorStyle.validateJsonElement(jsonObj.get("visibleBackgroundColorStyle"));
      }
      // validate the optional field `visibleForegroundColor`
      if (jsonObj.get("visibleForegroundColor") != null && !jsonObj.get("visibleForegroundColor").isJsonNull()) {
        Color.validateJsonElement(jsonObj.get("visibleForegroundColor"));
      }
      // validate the optional field `visibleForegroundColorStyle`
      if (jsonObj.get("visibleForegroundColorStyle") != null && !jsonObj.get("visibleForegroundColorStyle").isJsonNull()) {
        ColorStyle.validateJsonElement(jsonObj.get("visibleForegroundColorStyle"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FilterCriteria.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FilterCriteria' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FilterCriteria> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FilterCriteria.class));

       return (TypeAdapter<T>) new TypeAdapter<FilterCriteria>() {
           @Override
           public void write(JsonWriter out, FilterCriteria value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FilterCriteria read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FilterCriteria given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FilterCriteria
   * @throws IOException if the JSON string is invalid with respect to FilterCriteria
   */
  public static FilterCriteria fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FilterCriteria.class);
  }

  /**
   * Convert an instance of FilterCriteria to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

