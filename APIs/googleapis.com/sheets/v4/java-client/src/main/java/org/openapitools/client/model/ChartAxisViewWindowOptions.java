/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The options that define a \&quot;view window\&quot; for a chart (such as the visible values in an axis).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChartAxisViewWindowOptions {
  public static final String SERIALIZED_NAME_VIEW_WINDOW_MAX = "viewWindowMax";
  @SerializedName(SERIALIZED_NAME_VIEW_WINDOW_MAX)
  private Double viewWindowMax;

  public static final String SERIALIZED_NAME_VIEW_WINDOW_MIN = "viewWindowMin";
  @SerializedName(SERIALIZED_NAME_VIEW_WINDOW_MIN)
  private Double viewWindowMin;

  /**
   * The view window&#39;s mode.
   */
  @JsonAdapter(ViewWindowModeEnum.Adapter.class)
  public enum ViewWindowModeEnum {
    DEFAULT_VIEW_WINDOW_MODE("DEFAULT_VIEW_WINDOW_MODE"),
    
    VIEW_WINDOW_MODE_UNSUPPORTED("VIEW_WINDOW_MODE_UNSUPPORTED"),
    
    EXPLICIT("EXPLICIT"),
    
    PRETTY("PRETTY");

    private String value;

    ViewWindowModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViewWindowModeEnum fromValue(String value) {
      for (ViewWindowModeEnum b : ViewWindowModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViewWindowModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewWindowModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViewWindowModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViewWindowModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ViewWindowModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIEW_WINDOW_MODE = "viewWindowMode";
  @SerializedName(SERIALIZED_NAME_VIEW_WINDOW_MODE)
  private ViewWindowModeEnum viewWindowMode;

  public ChartAxisViewWindowOptions() {
  }

  public ChartAxisViewWindowOptions viewWindowMax(Double viewWindowMax) {
    this.viewWindowMax = viewWindowMax;
    return this;
  }

  /**
   * The maximum numeric value to be shown in this view window. If unset, will automatically determine a maximum value that looks good for the data.
   * @return viewWindowMax
   */
  @javax.annotation.Nullable
  public Double getViewWindowMax() {
    return viewWindowMax;
  }

  public void setViewWindowMax(Double viewWindowMax) {
    this.viewWindowMax = viewWindowMax;
  }


  public ChartAxisViewWindowOptions viewWindowMin(Double viewWindowMin) {
    this.viewWindowMin = viewWindowMin;
    return this;
  }

  /**
   * The minimum numeric value to be shown in this view window. If unset, will automatically determine a minimum value that looks good for the data.
   * @return viewWindowMin
   */
  @javax.annotation.Nullable
  public Double getViewWindowMin() {
    return viewWindowMin;
  }

  public void setViewWindowMin(Double viewWindowMin) {
    this.viewWindowMin = viewWindowMin;
  }


  public ChartAxisViewWindowOptions viewWindowMode(ViewWindowModeEnum viewWindowMode) {
    this.viewWindowMode = viewWindowMode;
    return this;
  }

  /**
   * The view window&#39;s mode.
   * @return viewWindowMode
   */
  @javax.annotation.Nullable
  public ViewWindowModeEnum getViewWindowMode() {
    return viewWindowMode;
  }

  public void setViewWindowMode(ViewWindowModeEnum viewWindowMode) {
    this.viewWindowMode = viewWindowMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartAxisViewWindowOptions chartAxisViewWindowOptions = (ChartAxisViewWindowOptions) o;
    return Objects.equals(this.viewWindowMax, chartAxisViewWindowOptions.viewWindowMax) &&
        Objects.equals(this.viewWindowMin, chartAxisViewWindowOptions.viewWindowMin) &&
        Objects.equals(this.viewWindowMode, chartAxisViewWindowOptions.viewWindowMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(viewWindowMax, viewWindowMin, viewWindowMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartAxisViewWindowOptions {\n");
    sb.append("    viewWindowMax: ").append(toIndentedString(viewWindowMax)).append("\n");
    sb.append("    viewWindowMin: ").append(toIndentedString(viewWindowMin)).append("\n");
    sb.append("    viewWindowMode: ").append(toIndentedString(viewWindowMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("viewWindowMax");
    openapiFields.add("viewWindowMin");
    openapiFields.add("viewWindowMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChartAxisViewWindowOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChartAxisViewWindowOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChartAxisViewWindowOptions is not found in the empty JSON string", ChartAxisViewWindowOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChartAxisViewWindowOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChartAxisViewWindowOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("viewWindowMode") != null && !jsonObj.get("viewWindowMode").isJsonNull()) && !jsonObj.get("viewWindowMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewWindowMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewWindowMode").toString()));
      }
      // validate the optional field `viewWindowMode`
      if (jsonObj.get("viewWindowMode") != null && !jsonObj.get("viewWindowMode").isJsonNull()) {
        ViewWindowModeEnum.validateJsonElement(jsonObj.get("viewWindowMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChartAxisViewWindowOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChartAxisViewWindowOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChartAxisViewWindowOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChartAxisViewWindowOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<ChartAxisViewWindowOptions>() {
           @Override
           public void write(JsonWriter out, ChartAxisViewWindowOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChartAxisViewWindowOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChartAxisViewWindowOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChartAxisViewWindowOptions
   * @throws IOException if the JSON string is invalid with respect to ChartAxisViewWindowOptions
   */
  public static ChartAxisViewWindowOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChartAxisViewWindowOptions.class);
  }

  /**
   * Convert an instance of ChartAxisViewWindowOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

