/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Editors;
import org.openapitools.client.model.GridRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A protected range.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProtectedRange {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EDITORS = "editors";
  @SerializedName(SERIALIZED_NAME_EDITORS)
  private Editors editors;

  public static final String SERIALIZED_NAME_NAMED_RANGE_ID = "namedRangeId";
  @SerializedName(SERIALIZED_NAME_NAMED_RANGE_ID)
  private String namedRangeId;

  public static final String SERIALIZED_NAME_PROTECTED_RANGE_ID = "protectedRangeId";
  @SerializedName(SERIALIZED_NAME_PROTECTED_RANGE_ID)
  private Integer protectedRangeId;

  public static final String SERIALIZED_NAME_RANGE = "range";
  @SerializedName(SERIALIZED_NAME_RANGE)
  private GridRange range;

  public static final String SERIALIZED_NAME_REQUESTING_USER_CAN_EDIT = "requestingUserCanEdit";
  @SerializedName(SERIALIZED_NAME_REQUESTING_USER_CAN_EDIT)
  private Boolean requestingUserCanEdit;

  public static final String SERIALIZED_NAME_UNPROTECTED_RANGES = "unprotectedRanges";
  @SerializedName(SERIALIZED_NAME_UNPROTECTED_RANGES)
  private List<GridRange> unprotectedRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_WARNING_ONLY = "warningOnly";
  @SerializedName(SERIALIZED_NAME_WARNING_ONLY)
  private Boolean warningOnly;

  public ProtectedRange() {
  }

  public ProtectedRange description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of this protected range.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ProtectedRange editors(Editors editors) {
    this.editors = editors;
    return this;
  }

  /**
   * Get editors
   * @return editors
   */
  @javax.annotation.Nullable
  public Editors getEditors() {
    return editors;
  }

  public void setEditors(Editors editors) {
    this.editors = editors;
  }


  public ProtectedRange namedRangeId(String namedRangeId) {
    this.namedRangeId = namedRangeId;
    return this;
  }

  /**
   * The named range this protected range is backed by, if any. When writing, only one of range or named_range_id may be set.
   * @return namedRangeId
   */
  @javax.annotation.Nullable
  public String getNamedRangeId() {
    return namedRangeId;
  }

  public void setNamedRangeId(String namedRangeId) {
    this.namedRangeId = namedRangeId;
  }


  public ProtectedRange protectedRangeId(Integer protectedRangeId) {
    this.protectedRangeId = protectedRangeId;
    return this;
  }

  /**
   * The ID of the protected range. This field is read-only.
   * @return protectedRangeId
   */
  @javax.annotation.Nullable
  public Integer getProtectedRangeId() {
    return protectedRangeId;
  }

  public void setProtectedRangeId(Integer protectedRangeId) {
    this.protectedRangeId = protectedRangeId;
  }


  public ProtectedRange range(GridRange range) {
    this.range = range;
    return this;
  }

  /**
   * Get range
   * @return range
   */
  @javax.annotation.Nullable
  public GridRange getRange() {
    return range;
  }

  public void setRange(GridRange range) {
    this.range = range;
  }


  public ProtectedRange requestingUserCanEdit(Boolean requestingUserCanEdit) {
    this.requestingUserCanEdit = requestingUserCanEdit;
    return this;
  }

  /**
   * True if the user who requested this protected range can edit the protected area. This field is read-only.
   * @return requestingUserCanEdit
   */
  @javax.annotation.Nullable
  public Boolean getRequestingUserCanEdit() {
    return requestingUserCanEdit;
  }

  public void setRequestingUserCanEdit(Boolean requestingUserCanEdit) {
    this.requestingUserCanEdit = requestingUserCanEdit;
  }


  public ProtectedRange unprotectedRanges(List<GridRange> unprotectedRanges) {
    this.unprotectedRanges = unprotectedRanges;
    return this;
  }

  public ProtectedRange addUnprotectedRangesItem(GridRange unprotectedRangesItem) {
    if (this.unprotectedRanges == null) {
      this.unprotectedRanges = new ArrayList<>();
    }
    this.unprotectedRanges.add(unprotectedRangesItem);
    return this;
  }

  /**
   * The list of unprotected ranges within a protected sheet. Unprotected ranges are only supported on protected sheets.
   * @return unprotectedRanges
   */
  @javax.annotation.Nullable
  public List<GridRange> getUnprotectedRanges() {
    return unprotectedRanges;
  }

  public void setUnprotectedRanges(List<GridRange> unprotectedRanges) {
    this.unprotectedRanges = unprotectedRanges;
  }


  public ProtectedRange warningOnly(Boolean warningOnly) {
    this.warningOnly = warningOnly;
    return this;
  }

  /**
   * True if this protected range will show a warning when editing. Warning-based protection means that every user can edit data in the protected range, except editing will prompt a warning asking the user to confirm the edit. When writing: if this field is true, then editors are ignored. Additionally, if this field is changed from true to false and the &#x60;editors&#x60; field is not set (nor included in the field mask), then the editors will be set to all the editors in the document.
   * @return warningOnly
   */
  @javax.annotation.Nullable
  public Boolean getWarningOnly() {
    return warningOnly;
  }

  public void setWarningOnly(Boolean warningOnly) {
    this.warningOnly = warningOnly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProtectedRange protectedRange = (ProtectedRange) o;
    return Objects.equals(this.description, protectedRange.description) &&
        Objects.equals(this.editors, protectedRange.editors) &&
        Objects.equals(this.namedRangeId, protectedRange.namedRangeId) &&
        Objects.equals(this.protectedRangeId, protectedRange.protectedRangeId) &&
        Objects.equals(this.range, protectedRange.range) &&
        Objects.equals(this.requestingUserCanEdit, protectedRange.requestingUserCanEdit) &&
        Objects.equals(this.unprotectedRanges, protectedRange.unprotectedRanges) &&
        Objects.equals(this.warningOnly, protectedRange.warningOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, editors, namedRangeId, protectedRangeId, range, requestingUserCanEdit, unprotectedRanges, warningOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProtectedRange {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    editors: ").append(toIndentedString(editors)).append("\n");
    sb.append("    namedRangeId: ").append(toIndentedString(namedRangeId)).append("\n");
    sb.append("    protectedRangeId: ").append(toIndentedString(protectedRangeId)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("    requestingUserCanEdit: ").append(toIndentedString(requestingUserCanEdit)).append("\n");
    sb.append("    unprotectedRanges: ").append(toIndentedString(unprotectedRanges)).append("\n");
    sb.append("    warningOnly: ").append(toIndentedString(warningOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("editors");
    openapiFields.add("namedRangeId");
    openapiFields.add("protectedRangeId");
    openapiFields.add("range");
    openapiFields.add("requestingUserCanEdit");
    openapiFields.add("unprotectedRanges");
    openapiFields.add("warningOnly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProtectedRange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProtectedRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProtectedRange is not found in the empty JSON string", ProtectedRange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProtectedRange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProtectedRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `editors`
      if (jsonObj.get("editors") != null && !jsonObj.get("editors").isJsonNull()) {
        Editors.validateJsonElement(jsonObj.get("editors"));
      }
      if ((jsonObj.get("namedRangeId") != null && !jsonObj.get("namedRangeId").isJsonNull()) && !jsonObj.get("namedRangeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namedRangeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namedRangeId").toString()));
      }
      // validate the optional field `range`
      if (jsonObj.get("range") != null && !jsonObj.get("range").isJsonNull()) {
        GridRange.validateJsonElement(jsonObj.get("range"));
      }
      if (jsonObj.get("unprotectedRanges") != null && !jsonObj.get("unprotectedRanges").isJsonNull()) {
        JsonArray jsonArrayunprotectedRanges = jsonObj.getAsJsonArray("unprotectedRanges");
        if (jsonArrayunprotectedRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unprotectedRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unprotectedRanges` to be an array in the JSON string but got `%s`", jsonObj.get("unprotectedRanges").toString()));
          }

          // validate the optional field `unprotectedRanges` (array)
          for (int i = 0; i < jsonArrayunprotectedRanges.size(); i++) {
            GridRange.validateJsonElement(jsonArrayunprotectedRanges.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProtectedRange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProtectedRange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProtectedRange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProtectedRange.class));

       return (TypeAdapter<T>) new TypeAdapter<ProtectedRange>() {
           @Override
           public void write(JsonWriter out, ProtectedRange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProtectedRange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProtectedRange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProtectedRange
   * @throws IOException if the JSON string is invalid with respect to ProtectedRange
   */
  public static ProtectedRange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProtectedRange.class);
  }

  /**
   * Convert an instance of ProtectedRange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

