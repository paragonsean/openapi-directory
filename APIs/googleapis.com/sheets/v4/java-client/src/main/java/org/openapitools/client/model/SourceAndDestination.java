/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GridRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A combination of a source range and how to extend that source.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceAndDestination {
  /**
   * The dimension that data should be filled into.
   */
  @JsonAdapter(DimensionEnum.Adapter.class)
  public enum DimensionEnum {
    DIMENSION_UNSPECIFIED("DIMENSION_UNSPECIFIED"),
    
    ROWS("ROWS"),
    
    COLUMNS("COLUMNS");

    private String value;

    DimensionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DimensionEnum fromValue(String value) {
      for (DimensionEnum b : DimensionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DimensionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DimensionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DimensionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DimensionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DimensionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIMENSION = "dimension";
  @SerializedName(SERIALIZED_NAME_DIMENSION)
  private DimensionEnum dimension;

  public static final String SERIALIZED_NAME_FILL_LENGTH = "fillLength";
  @SerializedName(SERIALIZED_NAME_FILL_LENGTH)
  private Integer fillLength;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private GridRange source;

  public SourceAndDestination() {
  }

  public SourceAndDestination dimension(DimensionEnum dimension) {
    this.dimension = dimension;
    return this;
  }

  /**
   * The dimension that data should be filled into.
   * @return dimension
   */
  @javax.annotation.Nullable
  public DimensionEnum getDimension() {
    return dimension;
  }

  public void setDimension(DimensionEnum dimension) {
    this.dimension = dimension;
  }


  public SourceAndDestination fillLength(Integer fillLength) {
    this.fillLength = fillLength;
    return this;
  }

  /**
   * The number of rows or columns that data should be filled into. Positive numbers expand beyond the last row or last column of the source. Negative numbers expand before the first row or first column of the source.
   * @return fillLength
   */
  @javax.annotation.Nullable
  public Integer getFillLength() {
    return fillLength;
  }

  public void setFillLength(Integer fillLength) {
    this.fillLength = fillLength;
  }


  public SourceAndDestination source(GridRange source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public GridRange getSource() {
    return source;
  }

  public void setSource(GridRange source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceAndDestination sourceAndDestination = (SourceAndDestination) o;
    return Objects.equals(this.dimension, sourceAndDestination.dimension) &&
        Objects.equals(this.fillLength, sourceAndDestination.fillLength) &&
        Objects.equals(this.source, sourceAndDestination.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimension, fillLength, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceAndDestination {\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    fillLength: ").append(toIndentedString(fillLength)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dimension");
    openapiFields.add("fillLength");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceAndDestination
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceAndDestination.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceAndDestination is not found in the empty JSON string", SourceAndDestination.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceAndDestination.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceAndDestination` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dimension") != null && !jsonObj.get("dimension").isJsonNull()) && !jsonObj.get("dimension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dimension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dimension").toString()));
      }
      // validate the optional field `dimension`
      if (jsonObj.get("dimension") != null && !jsonObj.get("dimension").isJsonNull()) {
        DimensionEnum.validateJsonElement(jsonObj.get("dimension"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        GridRange.validateJsonElement(jsonObj.get("source"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceAndDestination.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceAndDestination' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceAndDestination> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceAndDestination.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceAndDestination>() {
           @Override
           public void write(JsonWriter out, SourceAndDestination value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceAndDestination read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceAndDestination given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceAndDestination
   * @throws IOException if the JSON string is invalid with respect to SourceAndDestination
   */
  public static SourceAndDestination fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceAndDestination.class);
  }

  /**
   * Convert an instance of SourceAndDestination to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

