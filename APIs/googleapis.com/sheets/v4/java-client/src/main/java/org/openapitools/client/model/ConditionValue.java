/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The value of the condition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConditionValue {
  /**
   * A relative date (based on the current date). Valid only if the type is DATE_BEFORE, DATE_AFTER, DATE_ON_OR_BEFORE or DATE_ON_OR_AFTER. Relative dates are not supported in data validation. They are supported only in conditional formatting and conditional filters.
   */
  @JsonAdapter(RelativeDateEnum.Adapter.class)
  public enum RelativeDateEnum {
    RELATIVE_DATE_UNSPECIFIED("RELATIVE_DATE_UNSPECIFIED"),
    
    PAST_YEAR("PAST_YEAR"),
    
    PAST_MONTH("PAST_MONTH"),
    
    PAST_WEEK("PAST_WEEK"),
    
    YESTERDAY("YESTERDAY"),
    
    TODAY("TODAY"),
    
    TOMORROW("TOMORROW");

    private String value;

    RelativeDateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelativeDateEnum fromValue(String value) {
      for (RelativeDateEnum b : RelativeDateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelativeDateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelativeDateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelativeDateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelativeDateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelativeDateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELATIVE_DATE = "relativeDate";
  @SerializedName(SERIALIZED_NAME_RELATIVE_DATE)
  private RelativeDateEnum relativeDate;

  public static final String SERIALIZED_NAME_USER_ENTERED_VALUE = "userEnteredValue";
  @SerializedName(SERIALIZED_NAME_USER_ENTERED_VALUE)
  private String userEnteredValue;

  public ConditionValue() {
  }

  public ConditionValue relativeDate(RelativeDateEnum relativeDate) {
    this.relativeDate = relativeDate;
    return this;
  }

  /**
   * A relative date (based on the current date). Valid only if the type is DATE_BEFORE, DATE_AFTER, DATE_ON_OR_BEFORE or DATE_ON_OR_AFTER. Relative dates are not supported in data validation. They are supported only in conditional formatting and conditional filters.
   * @return relativeDate
   */
  @javax.annotation.Nullable
  public RelativeDateEnum getRelativeDate() {
    return relativeDate;
  }

  public void setRelativeDate(RelativeDateEnum relativeDate) {
    this.relativeDate = relativeDate;
  }


  public ConditionValue userEnteredValue(String userEnteredValue) {
    this.userEnteredValue = userEnteredValue;
    return this;
  }

  /**
   * A value the condition is based on. The value is parsed as if the user typed into a cell. Formulas are supported (and must begin with an &#x60;&#x3D;&#x60; or a &#39;+&#39;).
   * @return userEnteredValue
   */
  @javax.annotation.Nullable
  public String getUserEnteredValue() {
    return userEnteredValue;
  }

  public void setUserEnteredValue(String userEnteredValue) {
    this.userEnteredValue = userEnteredValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConditionValue conditionValue = (ConditionValue) o;
    return Objects.equals(this.relativeDate, conditionValue.relativeDate) &&
        Objects.equals(this.userEnteredValue, conditionValue.userEnteredValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(relativeDate, userEnteredValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConditionValue {\n");
    sb.append("    relativeDate: ").append(toIndentedString(relativeDate)).append("\n");
    sb.append("    userEnteredValue: ").append(toIndentedString(userEnteredValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("relativeDate");
    openapiFields.add("userEnteredValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConditionValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConditionValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConditionValue is not found in the empty JSON string", ConditionValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConditionValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConditionValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("relativeDate") != null && !jsonObj.get("relativeDate").isJsonNull()) && !jsonObj.get("relativeDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relativeDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relativeDate").toString()));
      }
      // validate the optional field `relativeDate`
      if (jsonObj.get("relativeDate") != null && !jsonObj.get("relativeDate").isJsonNull()) {
        RelativeDateEnum.validateJsonElement(jsonObj.get("relativeDate"));
      }
      if ((jsonObj.get("userEnteredValue") != null && !jsonObj.get("userEnteredValue").isJsonNull()) && !jsonObj.get("userEnteredValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userEnteredValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userEnteredValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConditionValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConditionValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConditionValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConditionValue.class));

       return (TypeAdapter<T>) new TypeAdapter<ConditionValue>() {
           @Override
           public void write(JsonWriter out, ConditionValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConditionValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConditionValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConditionValue
   * @throws IOException if the JSON string is invalid with respect to ConditionValue
   */
  public static ConditionValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConditionValue.class);
  }

  /**
   * Convert an instance of ConditionValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

