/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BandedRange;
import org.openapitools.client.model.BasicFilter;
import org.openapitools.client.model.ConditionalFormatRule;
import org.openapitools.client.model.DeveloperMetadata;
import org.openapitools.client.model.DimensionGroup;
import org.openapitools.client.model.EmbeddedChart;
import org.openapitools.client.model.FilterView;
import org.openapitools.client.model.GridData;
import org.openapitools.client.model.GridRange;
import org.openapitools.client.model.ProtectedRange;
import org.openapitools.client.model.SheetProperties;
import org.openapitools.client.model.Slicer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A sheet in a spreadsheet.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Sheet {
  public static final String SERIALIZED_NAME_BANDED_RANGES = "bandedRanges";
  @SerializedName(SERIALIZED_NAME_BANDED_RANGES)
  private List<BandedRange> bandedRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_BASIC_FILTER = "basicFilter";
  @SerializedName(SERIALIZED_NAME_BASIC_FILTER)
  private BasicFilter basicFilter;

  public static final String SERIALIZED_NAME_CHARTS = "charts";
  @SerializedName(SERIALIZED_NAME_CHARTS)
  private List<EmbeddedChart> charts = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLUMN_GROUPS = "columnGroups";
  @SerializedName(SERIALIZED_NAME_COLUMN_GROUPS)
  private List<DimensionGroup> columnGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONDITIONAL_FORMATS = "conditionalFormats";
  @SerializedName(SERIALIZED_NAME_CONDITIONAL_FORMATS)
  private List<ConditionalFormatRule> conditionalFormats = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private List<GridData> data = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEVELOPER_METADATA = "developerMetadata";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_METADATA)
  private List<DeveloperMetadata> developerMetadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTER_VIEWS = "filterViews";
  @SerializedName(SERIALIZED_NAME_FILTER_VIEWS)
  private List<FilterView> filterViews = new ArrayList<>();

  public static final String SERIALIZED_NAME_MERGES = "merges";
  @SerializedName(SERIALIZED_NAME_MERGES)
  private List<GridRange> merges = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private SheetProperties properties;

  public static final String SERIALIZED_NAME_PROTECTED_RANGES = "protectedRanges";
  @SerializedName(SERIALIZED_NAME_PROTECTED_RANGES)
  private List<ProtectedRange> protectedRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROW_GROUPS = "rowGroups";
  @SerializedName(SERIALIZED_NAME_ROW_GROUPS)
  private List<DimensionGroup> rowGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_SLICERS = "slicers";
  @SerializedName(SERIALIZED_NAME_SLICERS)
  private List<Slicer> slicers = new ArrayList<>();

  public Sheet() {
  }

  public Sheet bandedRanges(List<BandedRange> bandedRanges) {
    this.bandedRanges = bandedRanges;
    return this;
  }

  public Sheet addBandedRangesItem(BandedRange bandedRangesItem) {
    if (this.bandedRanges == null) {
      this.bandedRanges = new ArrayList<>();
    }
    this.bandedRanges.add(bandedRangesItem);
    return this;
  }

  /**
   * The banded (alternating colors) ranges on this sheet.
   * @return bandedRanges
   */
  @javax.annotation.Nullable
  public List<BandedRange> getBandedRanges() {
    return bandedRanges;
  }

  public void setBandedRanges(List<BandedRange> bandedRanges) {
    this.bandedRanges = bandedRanges;
  }


  public Sheet basicFilter(BasicFilter basicFilter) {
    this.basicFilter = basicFilter;
    return this;
  }

  /**
   * Get basicFilter
   * @return basicFilter
   */
  @javax.annotation.Nullable
  public BasicFilter getBasicFilter() {
    return basicFilter;
  }

  public void setBasicFilter(BasicFilter basicFilter) {
    this.basicFilter = basicFilter;
  }


  public Sheet charts(List<EmbeddedChart> charts) {
    this.charts = charts;
    return this;
  }

  public Sheet addChartsItem(EmbeddedChart chartsItem) {
    if (this.charts == null) {
      this.charts = new ArrayList<>();
    }
    this.charts.add(chartsItem);
    return this;
  }

  /**
   * The specifications of every chart on this sheet.
   * @return charts
   */
  @javax.annotation.Nullable
  public List<EmbeddedChart> getCharts() {
    return charts;
  }

  public void setCharts(List<EmbeddedChart> charts) {
    this.charts = charts;
  }


  public Sheet columnGroups(List<DimensionGroup> columnGroups) {
    this.columnGroups = columnGroups;
    return this;
  }

  public Sheet addColumnGroupsItem(DimensionGroup columnGroupsItem) {
    if (this.columnGroups == null) {
      this.columnGroups = new ArrayList<>();
    }
    this.columnGroups.add(columnGroupsItem);
    return this;
  }

  /**
   * All column groups on this sheet, ordered by increasing range start index, then by group depth.
   * @return columnGroups
   */
  @javax.annotation.Nullable
  public List<DimensionGroup> getColumnGroups() {
    return columnGroups;
  }

  public void setColumnGroups(List<DimensionGroup> columnGroups) {
    this.columnGroups = columnGroups;
  }


  public Sheet conditionalFormats(List<ConditionalFormatRule> conditionalFormats) {
    this.conditionalFormats = conditionalFormats;
    return this;
  }

  public Sheet addConditionalFormatsItem(ConditionalFormatRule conditionalFormatsItem) {
    if (this.conditionalFormats == null) {
      this.conditionalFormats = new ArrayList<>();
    }
    this.conditionalFormats.add(conditionalFormatsItem);
    return this;
  }

  /**
   * The conditional format rules in this sheet.
   * @return conditionalFormats
   */
  @javax.annotation.Nullable
  public List<ConditionalFormatRule> getConditionalFormats() {
    return conditionalFormats;
  }

  public void setConditionalFormats(List<ConditionalFormatRule> conditionalFormats) {
    this.conditionalFormats = conditionalFormats;
  }


  public Sheet data(List<GridData> data) {
    this.data = data;
    return this;
  }

  public Sheet addDataItem(GridData dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

  /**
   * Data in the grid, if this is a grid sheet. The number of GridData objects returned is dependent on the number of ranges requested on this sheet. For example, if this is representing &#x60;Sheet1&#x60;, and the spreadsheet was requested with ranges &#x60;Sheet1!A1:C10&#x60; and &#x60;Sheet1!D15:E20&#x60;, then the first GridData will have a startRow/startColumn of &#x60;0&#x60;, while the second one will have &#x60;startRow 14&#x60; (zero-based row 15), and &#x60;startColumn 3&#x60; (zero-based column D). For a DATA_SOURCE sheet, you can not request a specific range, the GridData contains all the values.
   * @return data
   */
  @javax.annotation.Nullable
  public List<GridData> getData() {
    return data;
  }

  public void setData(List<GridData> data) {
    this.data = data;
  }


  public Sheet developerMetadata(List<DeveloperMetadata> developerMetadata) {
    this.developerMetadata = developerMetadata;
    return this;
  }

  public Sheet addDeveloperMetadataItem(DeveloperMetadata developerMetadataItem) {
    if (this.developerMetadata == null) {
      this.developerMetadata = new ArrayList<>();
    }
    this.developerMetadata.add(developerMetadataItem);
    return this;
  }

  /**
   * The developer metadata associated with a sheet.
   * @return developerMetadata
   */
  @javax.annotation.Nullable
  public List<DeveloperMetadata> getDeveloperMetadata() {
    return developerMetadata;
  }

  public void setDeveloperMetadata(List<DeveloperMetadata> developerMetadata) {
    this.developerMetadata = developerMetadata;
  }


  public Sheet filterViews(List<FilterView> filterViews) {
    this.filterViews = filterViews;
    return this;
  }

  public Sheet addFilterViewsItem(FilterView filterViewsItem) {
    if (this.filterViews == null) {
      this.filterViews = new ArrayList<>();
    }
    this.filterViews.add(filterViewsItem);
    return this;
  }

  /**
   * The filter views in this sheet.
   * @return filterViews
   */
  @javax.annotation.Nullable
  public List<FilterView> getFilterViews() {
    return filterViews;
  }

  public void setFilterViews(List<FilterView> filterViews) {
    this.filterViews = filterViews;
  }


  public Sheet merges(List<GridRange> merges) {
    this.merges = merges;
    return this;
  }

  public Sheet addMergesItem(GridRange mergesItem) {
    if (this.merges == null) {
      this.merges = new ArrayList<>();
    }
    this.merges.add(mergesItem);
    return this;
  }

  /**
   * The ranges that are merged together.
   * @return merges
   */
  @javax.annotation.Nullable
  public List<GridRange> getMerges() {
    return merges;
  }

  public void setMerges(List<GridRange> merges) {
    this.merges = merges;
  }


  public Sheet properties(SheetProperties properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nullable
  public SheetProperties getProperties() {
    return properties;
  }

  public void setProperties(SheetProperties properties) {
    this.properties = properties;
  }


  public Sheet protectedRanges(List<ProtectedRange> protectedRanges) {
    this.protectedRanges = protectedRanges;
    return this;
  }

  public Sheet addProtectedRangesItem(ProtectedRange protectedRangesItem) {
    if (this.protectedRanges == null) {
      this.protectedRanges = new ArrayList<>();
    }
    this.protectedRanges.add(protectedRangesItem);
    return this;
  }

  /**
   * The protected ranges in this sheet.
   * @return protectedRanges
   */
  @javax.annotation.Nullable
  public List<ProtectedRange> getProtectedRanges() {
    return protectedRanges;
  }

  public void setProtectedRanges(List<ProtectedRange> protectedRanges) {
    this.protectedRanges = protectedRanges;
  }


  public Sheet rowGroups(List<DimensionGroup> rowGroups) {
    this.rowGroups = rowGroups;
    return this;
  }

  public Sheet addRowGroupsItem(DimensionGroup rowGroupsItem) {
    if (this.rowGroups == null) {
      this.rowGroups = new ArrayList<>();
    }
    this.rowGroups.add(rowGroupsItem);
    return this;
  }

  /**
   * All row groups on this sheet, ordered by increasing range start index, then by group depth.
   * @return rowGroups
   */
  @javax.annotation.Nullable
  public List<DimensionGroup> getRowGroups() {
    return rowGroups;
  }

  public void setRowGroups(List<DimensionGroup> rowGroups) {
    this.rowGroups = rowGroups;
  }


  public Sheet slicers(List<Slicer> slicers) {
    this.slicers = slicers;
    return this;
  }

  public Sheet addSlicersItem(Slicer slicersItem) {
    if (this.slicers == null) {
      this.slicers = new ArrayList<>();
    }
    this.slicers.add(slicersItem);
    return this;
  }

  /**
   * The slicers on this sheet.
   * @return slicers
   */
  @javax.annotation.Nullable
  public List<Slicer> getSlicers() {
    return slicers;
  }

  public void setSlicers(List<Slicer> slicers) {
    this.slicers = slicers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sheet sheet = (Sheet) o;
    return Objects.equals(this.bandedRanges, sheet.bandedRanges) &&
        Objects.equals(this.basicFilter, sheet.basicFilter) &&
        Objects.equals(this.charts, sheet.charts) &&
        Objects.equals(this.columnGroups, sheet.columnGroups) &&
        Objects.equals(this.conditionalFormats, sheet.conditionalFormats) &&
        Objects.equals(this.data, sheet.data) &&
        Objects.equals(this.developerMetadata, sheet.developerMetadata) &&
        Objects.equals(this.filterViews, sheet.filterViews) &&
        Objects.equals(this.merges, sheet.merges) &&
        Objects.equals(this.properties, sheet.properties) &&
        Objects.equals(this.protectedRanges, sheet.protectedRanges) &&
        Objects.equals(this.rowGroups, sheet.rowGroups) &&
        Objects.equals(this.slicers, sheet.slicers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bandedRanges, basicFilter, charts, columnGroups, conditionalFormats, data, developerMetadata, filterViews, merges, properties, protectedRanges, rowGroups, slicers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sheet {\n");
    sb.append("    bandedRanges: ").append(toIndentedString(bandedRanges)).append("\n");
    sb.append("    basicFilter: ").append(toIndentedString(basicFilter)).append("\n");
    sb.append("    charts: ").append(toIndentedString(charts)).append("\n");
    sb.append("    columnGroups: ").append(toIndentedString(columnGroups)).append("\n");
    sb.append("    conditionalFormats: ").append(toIndentedString(conditionalFormats)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    developerMetadata: ").append(toIndentedString(developerMetadata)).append("\n");
    sb.append("    filterViews: ").append(toIndentedString(filterViews)).append("\n");
    sb.append("    merges: ").append(toIndentedString(merges)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    protectedRanges: ").append(toIndentedString(protectedRanges)).append("\n");
    sb.append("    rowGroups: ").append(toIndentedString(rowGroups)).append("\n");
    sb.append("    slicers: ").append(toIndentedString(slicers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bandedRanges");
    openapiFields.add("basicFilter");
    openapiFields.add("charts");
    openapiFields.add("columnGroups");
    openapiFields.add("conditionalFormats");
    openapiFields.add("data");
    openapiFields.add("developerMetadata");
    openapiFields.add("filterViews");
    openapiFields.add("merges");
    openapiFields.add("properties");
    openapiFields.add("protectedRanges");
    openapiFields.add("rowGroups");
    openapiFields.add("slicers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Sheet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Sheet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Sheet is not found in the empty JSON string", Sheet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Sheet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Sheet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("bandedRanges") != null && !jsonObj.get("bandedRanges").isJsonNull()) {
        JsonArray jsonArraybandedRanges = jsonObj.getAsJsonArray("bandedRanges");
        if (jsonArraybandedRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bandedRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bandedRanges` to be an array in the JSON string but got `%s`", jsonObj.get("bandedRanges").toString()));
          }

          // validate the optional field `bandedRanges` (array)
          for (int i = 0; i < jsonArraybandedRanges.size(); i++) {
            BandedRange.validateJsonElement(jsonArraybandedRanges.get(i));
          };
        }
      }
      // validate the optional field `basicFilter`
      if (jsonObj.get("basicFilter") != null && !jsonObj.get("basicFilter").isJsonNull()) {
        BasicFilter.validateJsonElement(jsonObj.get("basicFilter"));
      }
      if (jsonObj.get("charts") != null && !jsonObj.get("charts").isJsonNull()) {
        JsonArray jsonArraycharts = jsonObj.getAsJsonArray("charts");
        if (jsonArraycharts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("charts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `charts` to be an array in the JSON string but got `%s`", jsonObj.get("charts").toString()));
          }

          // validate the optional field `charts` (array)
          for (int i = 0; i < jsonArraycharts.size(); i++) {
            EmbeddedChart.validateJsonElement(jsonArraycharts.get(i));
          };
        }
      }
      if (jsonObj.get("columnGroups") != null && !jsonObj.get("columnGroups").isJsonNull()) {
        JsonArray jsonArraycolumnGroups = jsonObj.getAsJsonArray("columnGroups");
        if (jsonArraycolumnGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("columnGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `columnGroups` to be an array in the JSON string but got `%s`", jsonObj.get("columnGroups").toString()));
          }

          // validate the optional field `columnGroups` (array)
          for (int i = 0; i < jsonArraycolumnGroups.size(); i++) {
            DimensionGroup.validateJsonElement(jsonArraycolumnGroups.get(i));
          };
        }
      }
      if (jsonObj.get("conditionalFormats") != null && !jsonObj.get("conditionalFormats").isJsonNull()) {
        JsonArray jsonArrayconditionalFormats = jsonObj.getAsJsonArray("conditionalFormats");
        if (jsonArrayconditionalFormats != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditionalFormats").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditionalFormats` to be an array in the JSON string but got `%s`", jsonObj.get("conditionalFormats").toString()));
          }

          // validate the optional field `conditionalFormats` (array)
          for (int i = 0; i < jsonArrayconditionalFormats.size(); i++) {
            ConditionalFormatRule.validateJsonElement(jsonArrayconditionalFormats.get(i));
          };
        }
      }
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) {
        JsonArray jsonArraydata = jsonObj.getAsJsonArray("data");
        if (jsonArraydata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("data").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `data` to be an array in the JSON string but got `%s`", jsonObj.get("data").toString()));
          }

          // validate the optional field `data` (array)
          for (int i = 0; i < jsonArraydata.size(); i++) {
            GridData.validateJsonElement(jsonArraydata.get(i));
          };
        }
      }
      if (jsonObj.get("developerMetadata") != null && !jsonObj.get("developerMetadata").isJsonNull()) {
        JsonArray jsonArraydeveloperMetadata = jsonObj.getAsJsonArray("developerMetadata");
        if (jsonArraydeveloperMetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("developerMetadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `developerMetadata` to be an array in the JSON string but got `%s`", jsonObj.get("developerMetadata").toString()));
          }

          // validate the optional field `developerMetadata` (array)
          for (int i = 0; i < jsonArraydeveloperMetadata.size(); i++) {
            DeveloperMetadata.validateJsonElement(jsonArraydeveloperMetadata.get(i));
          };
        }
      }
      if (jsonObj.get("filterViews") != null && !jsonObj.get("filterViews").isJsonNull()) {
        JsonArray jsonArrayfilterViews = jsonObj.getAsJsonArray("filterViews");
        if (jsonArrayfilterViews != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filterViews").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filterViews` to be an array in the JSON string but got `%s`", jsonObj.get("filterViews").toString()));
          }

          // validate the optional field `filterViews` (array)
          for (int i = 0; i < jsonArrayfilterViews.size(); i++) {
            FilterView.validateJsonElement(jsonArrayfilterViews.get(i));
          };
        }
      }
      if (jsonObj.get("merges") != null && !jsonObj.get("merges").isJsonNull()) {
        JsonArray jsonArraymerges = jsonObj.getAsJsonArray("merges");
        if (jsonArraymerges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("merges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `merges` to be an array in the JSON string but got `%s`", jsonObj.get("merges").toString()));
          }

          // validate the optional field `merges` (array)
          for (int i = 0; i < jsonArraymerges.size(); i++) {
            GridRange.validateJsonElement(jsonArraymerges.get(i));
          };
        }
      }
      // validate the optional field `properties`
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        SheetProperties.validateJsonElement(jsonObj.get("properties"));
      }
      if (jsonObj.get("protectedRanges") != null && !jsonObj.get("protectedRanges").isJsonNull()) {
        JsonArray jsonArrayprotectedRanges = jsonObj.getAsJsonArray("protectedRanges");
        if (jsonArrayprotectedRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("protectedRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `protectedRanges` to be an array in the JSON string but got `%s`", jsonObj.get("protectedRanges").toString()));
          }

          // validate the optional field `protectedRanges` (array)
          for (int i = 0; i < jsonArrayprotectedRanges.size(); i++) {
            ProtectedRange.validateJsonElement(jsonArrayprotectedRanges.get(i));
          };
        }
      }
      if (jsonObj.get("rowGroups") != null && !jsonObj.get("rowGroups").isJsonNull()) {
        JsonArray jsonArrayrowGroups = jsonObj.getAsJsonArray("rowGroups");
        if (jsonArrayrowGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rowGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rowGroups` to be an array in the JSON string but got `%s`", jsonObj.get("rowGroups").toString()));
          }

          // validate the optional field `rowGroups` (array)
          for (int i = 0; i < jsonArrayrowGroups.size(); i++) {
            DimensionGroup.validateJsonElement(jsonArrayrowGroups.get(i));
          };
        }
      }
      if (jsonObj.get("slicers") != null && !jsonObj.get("slicers").isJsonNull()) {
        JsonArray jsonArrayslicers = jsonObj.getAsJsonArray("slicers");
        if (jsonArrayslicers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("slicers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `slicers` to be an array in the JSON string but got `%s`", jsonObj.get("slicers").toString()));
          }

          // validate the optional field `slicers` (array)
          for (int i = 0; i < jsonArrayslicers.size(); i++) {
            Slicer.validateJsonElement(jsonArrayslicers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Sheet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Sheet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Sheet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Sheet.class));

       return (TypeAdapter<T>) new TypeAdapter<Sheet>() {
           @Override
           public void write(JsonWriter out, Sheet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Sheet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Sheet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Sheet
   * @throws IOException if the JSON string is invalid with respect to Sheet
   */
  public static Sheet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Sheet.class);
  }

  /**
   * Convert an instance of Sheet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

