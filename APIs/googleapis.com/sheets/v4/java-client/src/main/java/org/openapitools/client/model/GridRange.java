/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if &#x60;\&quot;Sheet1\&quot;&#x60; is sheet ID 123456, then: &#x60;Sheet1!A1:A1 &#x3D;&#x3D; sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1&#x60; &#x60;Sheet1!A3:B4 &#x3D;&#x3D; sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2&#x60; &#x60;Sheet1!A:B &#x3D;&#x3D; sheet_id: 123456, start_column_index: 0, end_column_index: 2&#x60; &#x60;Sheet1!A5:B &#x3D;&#x3D; sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2&#x60; &#x60;Sheet1 &#x3D;&#x3D; sheet_id: 123456&#x60; The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as &#x60;#REF!&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GridRange {
  public static final String SERIALIZED_NAME_END_COLUMN_INDEX = "endColumnIndex";
  @SerializedName(SERIALIZED_NAME_END_COLUMN_INDEX)
  private Integer endColumnIndex;

  public static final String SERIALIZED_NAME_END_ROW_INDEX = "endRowIndex";
  @SerializedName(SERIALIZED_NAME_END_ROW_INDEX)
  private Integer endRowIndex;

  public static final String SERIALIZED_NAME_SHEET_ID = "sheetId";
  @SerializedName(SERIALIZED_NAME_SHEET_ID)
  private Integer sheetId;

  public static final String SERIALIZED_NAME_START_COLUMN_INDEX = "startColumnIndex";
  @SerializedName(SERIALIZED_NAME_START_COLUMN_INDEX)
  private Integer startColumnIndex;

  public static final String SERIALIZED_NAME_START_ROW_INDEX = "startRowIndex";
  @SerializedName(SERIALIZED_NAME_START_ROW_INDEX)
  private Integer startRowIndex;

  public GridRange() {
  }

  public GridRange endColumnIndex(Integer endColumnIndex) {
    this.endColumnIndex = endColumnIndex;
    return this;
  }

  /**
   * The end column (exclusive) of the range, or not set if unbounded.
   * @return endColumnIndex
   */
  @javax.annotation.Nullable
  public Integer getEndColumnIndex() {
    return endColumnIndex;
  }

  public void setEndColumnIndex(Integer endColumnIndex) {
    this.endColumnIndex = endColumnIndex;
  }


  public GridRange endRowIndex(Integer endRowIndex) {
    this.endRowIndex = endRowIndex;
    return this;
  }

  /**
   * The end row (exclusive) of the range, or not set if unbounded.
   * @return endRowIndex
   */
  @javax.annotation.Nullable
  public Integer getEndRowIndex() {
    return endRowIndex;
  }

  public void setEndRowIndex(Integer endRowIndex) {
    this.endRowIndex = endRowIndex;
  }


  public GridRange sheetId(Integer sheetId) {
    this.sheetId = sheetId;
    return this;
  }

  /**
   * The sheet this range is on.
   * @return sheetId
   */
  @javax.annotation.Nullable
  public Integer getSheetId() {
    return sheetId;
  }

  public void setSheetId(Integer sheetId) {
    this.sheetId = sheetId;
  }


  public GridRange startColumnIndex(Integer startColumnIndex) {
    this.startColumnIndex = startColumnIndex;
    return this;
  }

  /**
   * The start column (inclusive) of the range, or not set if unbounded.
   * @return startColumnIndex
   */
  @javax.annotation.Nullable
  public Integer getStartColumnIndex() {
    return startColumnIndex;
  }

  public void setStartColumnIndex(Integer startColumnIndex) {
    this.startColumnIndex = startColumnIndex;
  }


  public GridRange startRowIndex(Integer startRowIndex) {
    this.startRowIndex = startRowIndex;
    return this;
  }

  /**
   * The start row (inclusive) of the range, or not set if unbounded.
   * @return startRowIndex
   */
  @javax.annotation.Nullable
  public Integer getStartRowIndex() {
    return startRowIndex;
  }

  public void setStartRowIndex(Integer startRowIndex) {
    this.startRowIndex = startRowIndex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GridRange gridRange = (GridRange) o;
    return Objects.equals(this.endColumnIndex, gridRange.endColumnIndex) &&
        Objects.equals(this.endRowIndex, gridRange.endRowIndex) &&
        Objects.equals(this.sheetId, gridRange.sheetId) &&
        Objects.equals(this.startColumnIndex, gridRange.startColumnIndex) &&
        Objects.equals(this.startRowIndex, gridRange.startRowIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endColumnIndex, endRowIndex, sheetId, startColumnIndex, startRowIndex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GridRange {\n");
    sb.append("    endColumnIndex: ").append(toIndentedString(endColumnIndex)).append("\n");
    sb.append("    endRowIndex: ").append(toIndentedString(endRowIndex)).append("\n");
    sb.append("    sheetId: ").append(toIndentedString(sheetId)).append("\n");
    sb.append("    startColumnIndex: ").append(toIndentedString(startColumnIndex)).append("\n");
    sb.append("    startRowIndex: ").append(toIndentedString(startRowIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endColumnIndex");
    openapiFields.add("endRowIndex");
    openapiFields.add("sheetId");
    openapiFields.add("startColumnIndex");
    openapiFields.add("startRowIndex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GridRange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GridRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GridRange is not found in the empty JSON string", GridRange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GridRange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GridRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GridRange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GridRange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GridRange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GridRange.class));

       return (TypeAdapter<T>) new TypeAdapter<GridRange>() {
           @Override
           public void write(JsonWriter out, GridRange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GridRange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GridRange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GridRange
   * @throws IOException if the JSON string is invalid with respect to GridRange
   */
  public static GridRange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GridRange.class);
  }

  /**
   * Convert an instance of GridRange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

