/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BaselineValueFormat;
import org.openapitools.client.model.ChartCustomNumberFormatOptions;
import org.openapitools.client.model.ChartData;
import org.openapitools.client.model.KeyValueFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A scorecard chart. Scorecard charts are used to highlight key performance indicators, known as KPIs, on the spreadsheet. A scorecard chart can represent things like total sales, average cost, or a top selling item. You can specify a single data value, or aggregate over a range of data. Percentage or absolute difference from a baseline value can be highlighted, like changes over time.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScorecardChartSpec {
  /**
   * The aggregation type for key and baseline chart data in scorecard chart. This field is not supported for data source charts. Use the ChartData.aggregateType field of the key_value_data or baseline_value_data instead for data source charts. This field is optional.
   */
  @JsonAdapter(AggregateTypeEnum.Adapter.class)
  public enum AggregateTypeEnum {
    CHART_AGGREGATE_TYPE_UNSPECIFIED("CHART_AGGREGATE_TYPE_UNSPECIFIED"),
    
    AVERAGE("AVERAGE"),
    
    COUNT("COUNT"),
    
    MAX("MAX"),
    
    MEDIAN("MEDIAN"),
    
    MIN("MIN"),
    
    SUM("SUM");

    private String value;

    AggregateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregateTypeEnum fromValue(String value) {
      for (AggregateTypeEnum b : AggregateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AggregateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AggregateTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AggregateTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGGREGATE_TYPE = "aggregateType";
  @SerializedName(SERIALIZED_NAME_AGGREGATE_TYPE)
  private AggregateTypeEnum aggregateType;

  public static final String SERIALIZED_NAME_BASELINE_VALUE_DATA = "baselineValueData";
  @SerializedName(SERIALIZED_NAME_BASELINE_VALUE_DATA)
  private ChartData baselineValueData;

  public static final String SERIALIZED_NAME_BASELINE_VALUE_FORMAT = "baselineValueFormat";
  @SerializedName(SERIALIZED_NAME_BASELINE_VALUE_FORMAT)
  private BaselineValueFormat baselineValueFormat;

  public static final String SERIALIZED_NAME_CUSTOM_FORMAT_OPTIONS = "customFormatOptions";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FORMAT_OPTIONS)
  private ChartCustomNumberFormatOptions customFormatOptions;

  public static final String SERIALIZED_NAME_KEY_VALUE_DATA = "keyValueData";
  @SerializedName(SERIALIZED_NAME_KEY_VALUE_DATA)
  private ChartData keyValueData;

  public static final String SERIALIZED_NAME_KEY_VALUE_FORMAT = "keyValueFormat";
  @SerializedName(SERIALIZED_NAME_KEY_VALUE_FORMAT)
  private KeyValueFormat keyValueFormat;

  /**
   * The number format source used in the scorecard chart. This field is optional.
   */
  @JsonAdapter(NumberFormatSourceEnum.Adapter.class)
  public enum NumberFormatSourceEnum {
    CHART_NUMBER_FORMAT_SOURCE_UNDEFINED("CHART_NUMBER_FORMAT_SOURCE_UNDEFINED"),
    
    FROM_DATA("FROM_DATA"),
    
    CUSTOM("CUSTOM");

    private String value;

    NumberFormatSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NumberFormatSourceEnum fromValue(String value) {
      for (NumberFormatSourceEnum b : NumberFormatSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NumberFormatSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NumberFormatSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NumberFormatSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NumberFormatSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NumberFormatSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NUMBER_FORMAT_SOURCE = "numberFormatSource";
  @SerializedName(SERIALIZED_NAME_NUMBER_FORMAT_SOURCE)
  private NumberFormatSourceEnum numberFormatSource;

  public static final String SERIALIZED_NAME_SCALE_FACTOR = "scaleFactor";
  @SerializedName(SERIALIZED_NAME_SCALE_FACTOR)
  private Double scaleFactor;

  public ScorecardChartSpec() {
  }

  public ScorecardChartSpec aggregateType(AggregateTypeEnum aggregateType) {
    this.aggregateType = aggregateType;
    return this;
  }

  /**
   * The aggregation type for key and baseline chart data in scorecard chart. This field is not supported for data source charts. Use the ChartData.aggregateType field of the key_value_data or baseline_value_data instead for data source charts. This field is optional.
   * @return aggregateType
   */
  @javax.annotation.Nullable
  public AggregateTypeEnum getAggregateType() {
    return aggregateType;
  }

  public void setAggregateType(AggregateTypeEnum aggregateType) {
    this.aggregateType = aggregateType;
  }


  public ScorecardChartSpec baselineValueData(ChartData baselineValueData) {
    this.baselineValueData = baselineValueData;
    return this;
  }

  /**
   * Get baselineValueData
   * @return baselineValueData
   */
  @javax.annotation.Nullable
  public ChartData getBaselineValueData() {
    return baselineValueData;
  }

  public void setBaselineValueData(ChartData baselineValueData) {
    this.baselineValueData = baselineValueData;
  }


  public ScorecardChartSpec baselineValueFormat(BaselineValueFormat baselineValueFormat) {
    this.baselineValueFormat = baselineValueFormat;
    return this;
  }

  /**
   * Get baselineValueFormat
   * @return baselineValueFormat
   */
  @javax.annotation.Nullable
  public BaselineValueFormat getBaselineValueFormat() {
    return baselineValueFormat;
  }

  public void setBaselineValueFormat(BaselineValueFormat baselineValueFormat) {
    this.baselineValueFormat = baselineValueFormat;
  }


  public ScorecardChartSpec customFormatOptions(ChartCustomNumberFormatOptions customFormatOptions) {
    this.customFormatOptions = customFormatOptions;
    return this;
  }

  /**
   * Get customFormatOptions
   * @return customFormatOptions
   */
  @javax.annotation.Nullable
  public ChartCustomNumberFormatOptions getCustomFormatOptions() {
    return customFormatOptions;
  }

  public void setCustomFormatOptions(ChartCustomNumberFormatOptions customFormatOptions) {
    this.customFormatOptions = customFormatOptions;
  }


  public ScorecardChartSpec keyValueData(ChartData keyValueData) {
    this.keyValueData = keyValueData;
    return this;
  }

  /**
   * Get keyValueData
   * @return keyValueData
   */
  @javax.annotation.Nullable
  public ChartData getKeyValueData() {
    return keyValueData;
  }

  public void setKeyValueData(ChartData keyValueData) {
    this.keyValueData = keyValueData;
  }


  public ScorecardChartSpec keyValueFormat(KeyValueFormat keyValueFormat) {
    this.keyValueFormat = keyValueFormat;
    return this;
  }

  /**
   * Get keyValueFormat
   * @return keyValueFormat
   */
  @javax.annotation.Nullable
  public KeyValueFormat getKeyValueFormat() {
    return keyValueFormat;
  }

  public void setKeyValueFormat(KeyValueFormat keyValueFormat) {
    this.keyValueFormat = keyValueFormat;
  }


  public ScorecardChartSpec numberFormatSource(NumberFormatSourceEnum numberFormatSource) {
    this.numberFormatSource = numberFormatSource;
    return this;
  }

  /**
   * The number format source used in the scorecard chart. This field is optional.
   * @return numberFormatSource
   */
  @javax.annotation.Nullable
  public NumberFormatSourceEnum getNumberFormatSource() {
    return numberFormatSource;
  }

  public void setNumberFormatSource(NumberFormatSourceEnum numberFormatSource) {
    this.numberFormatSource = numberFormatSource;
  }


  public ScorecardChartSpec scaleFactor(Double scaleFactor) {
    this.scaleFactor = scaleFactor;
    return this;
  }

  /**
   * Value to scale scorecard key and baseline value. For example, a factor of 10 can be used to divide all values in the chart by 10. This field is optional.
   * @return scaleFactor
   */
  @javax.annotation.Nullable
  public Double getScaleFactor() {
    return scaleFactor;
  }

  public void setScaleFactor(Double scaleFactor) {
    this.scaleFactor = scaleFactor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScorecardChartSpec scorecardChartSpec = (ScorecardChartSpec) o;
    return Objects.equals(this.aggregateType, scorecardChartSpec.aggregateType) &&
        Objects.equals(this.baselineValueData, scorecardChartSpec.baselineValueData) &&
        Objects.equals(this.baselineValueFormat, scorecardChartSpec.baselineValueFormat) &&
        Objects.equals(this.customFormatOptions, scorecardChartSpec.customFormatOptions) &&
        Objects.equals(this.keyValueData, scorecardChartSpec.keyValueData) &&
        Objects.equals(this.keyValueFormat, scorecardChartSpec.keyValueFormat) &&
        Objects.equals(this.numberFormatSource, scorecardChartSpec.numberFormatSource) &&
        Objects.equals(this.scaleFactor, scorecardChartSpec.scaleFactor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregateType, baselineValueData, baselineValueFormat, customFormatOptions, keyValueData, keyValueFormat, numberFormatSource, scaleFactor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScorecardChartSpec {\n");
    sb.append("    aggregateType: ").append(toIndentedString(aggregateType)).append("\n");
    sb.append("    baselineValueData: ").append(toIndentedString(baselineValueData)).append("\n");
    sb.append("    baselineValueFormat: ").append(toIndentedString(baselineValueFormat)).append("\n");
    sb.append("    customFormatOptions: ").append(toIndentedString(customFormatOptions)).append("\n");
    sb.append("    keyValueData: ").append(toIndentedString(keyValueData)).append("\n");
    sb.append("    keyValueFormat: ").append(toIndentedString(keyValueFormat)).append("\n");
    sb.append("    numberFormatSource: ").append(toIndentedString(numberFormatSource)).append("\n");
    sb.append("    scaleFactor: ").append(toIndentedString(scaleFactor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregateType");
    openapiFields.add("baselineValueData");
    openapiFields.add("baselineValueFormat");
    openapiFields.add("customFormatOptions");
    openapiFields.add("keyValueData");
    openapiFields.add("keyValueFormat");
    openapiFields.add("numberFormatSource");
    openapiFields.add("scaleFactor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScorecardChartSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScorecardChartSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScorecardChartSpec is not found in the empty JSON string", ScorecardChartSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScorecardChartSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScorecardChartSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aggregateType") != null && !jsonObj.get("aggregateType").isJsonNull()) && !jsonObj.get("aggregateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregateType").toString()));
      }
      // validate the optional field `aggregateType`
      if (jsonObj.get("aggregateType") != null && !jsonObj.get("aggregateType").isJsonNull()) {
        AggregateTypeEnum.validateJsonElement(jsonObj.get("aggregateType"));
      }
      // validate the optional field `baselineValueData`
      if (jsonObj.get("baselineValueData") != null && !jsonObj.get("baselineValueData").isJsonNull()) {
        ChartData.validateJsonElement(jsonObj.get("baselineValueData"));
      }
      // validate the optional field `baselineValueFormat`
      if (jsonObj.get("baselineValueFormat") != null && !jsonObj.get("baselineValueFormat").isJsonNull()) {
        BaselineValueFormat.validateJsonElement(jsonObj.get("baselineValueFormat"));
      }
      // validate the optional field `customFormatOptions`
      if (jsonObj.get("customFormatOptions") != null && !jsonObj.get("customFormatOptions").isJsonNull()) {
        ChartCustomNumberFormatOptions.validateJsonElement(jsonObj.get("customFormatOptions"));
      }
      // validate the optional field `keyValueData`
      if (jsonObj.get("keyValueData") != null && !jsonObj.get("keyValueData").isJsonNull()) {
        ChartData.validateJsonElement(jsonObj.get("keyValueData"));
      }
      // validate the optional field `keyValueFormat`
      if (jsonObj.get("keyValueFormat") != null && !jsonObj.get("keyValueFormat").isJsonNull()) {
        KeyValueFormat.validateJsonElement(jsonObj.get("keyValueFormat"));
      }
      if ((jsonObj.get("numberFormatSource") != null && !jsonObj.get("numberFormatSource").isJsonNull()) && !jsonObj.get("numberFormatSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numberFormatSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numberFormatSource").toString()));
      }
      // validate the optional field `numberFormatSource`
      if (jsonObj.get("numberFormatSource") != null && !jsonObj.get("numberFormatSource").isJsonNull()) {
        NumberFormatSourceEnum.validateJsonElement(jsonObj.get("numberFormatSource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScorecardChartSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScorecardChartSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScorecardChartSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScorecardChartSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<ScorecardChartSpec>() {
           @Override
           public void write(JsonWriter out, ScorecardChartSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScorecardChartSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScorecardChartSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScorecardChartSpec
   * @throws IOException if the JSON string is invalid with respect to ScorecardChartSpec
   */
  public static ScorecardChartSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScorecardChartSpec.class);
  }

  /**
   * Convert an instance of ScorecardChartSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

