/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Color;
import org.openapitools.client.model.ColorStyle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A color scale for a treemap chart.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TreemapChartColorScale {
  public static final String SERIALIZED_NAME_MAX_VALUE_COLOR = "maxValueColor";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE_COLOR)
  private Color maxValueColor;

  public static final String SERIALIZED_NAME_MAX_VALUE_COLOR_STYLE = "maxValueColorStyle";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE_COLOR_STYLE)
  private ColorStyle maxValueColorStyle;

  public static final String SERIALIZED_NAME_MID_VALUE_COLOR = "midValueColor";
  @SerializedName(SERIALIZED_NAME_MID_VALUE_COLOR)
  private Color midValueColor;

  public static final String SERIALIZED_NAME_MID_VALUE_COLOR_STYLE = "midValueColorStyle";
  @SerializedName(SERIALIZED_NAME_MID_VALUE_COLOR_STYLE)
  private ColorStyle midValueColorStyle;

  public static final String SERIALIZED_NAME_MIN_VALUE_COLOR = "minValueColor";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE_COLOR)
  private Color minValueColor;

  public static final String SERIALIZED_NAME_MIN_VALUE_COLOR_STYLE = "minValueColorStyle";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE_COLOR_STYLE)
  private ColorStyle minValueColorStyle;

  public static final String SERIALIZED_NAME_NO_DATA_COLOR = "noDataColor";
  @SerializedName(SERIALIZED_NAME_NO_DATA_COLOR)
  private Color noDataColor;

  public static final String SERIALIZED_NAME_NO_DATA_COLOR_STYLE = "noDataColorStyle";
  @SerializedName(SERIALIZED_NAME_NO_DATA_COLOR_STYLE)
  private ColorStyle noDataColorStyle;

  public TreemapChartColorScale() {
  }

  public TreemapChartColorScale maxValueColor(Color maxValueColor) {
    this.maxValueColor = maxValueColor;
    return this;
  }

  /**
   * Get maxValueColor
   * @return maxValueColor
   */
  @javax.annotation.Nullable
  public Color getMaxValueColor() {
    return maxValueColor;
  }

  public void setMaxValueColor(Color maxValueColor) {
    this.maxValueColor = maxValueColor;
  }


  public TreemapChartColorScale maxValueColorStyle(ColorStyle maxValueColorStyle) {
    this.maxValueColorStyle = maxValueColorStyle;
    return this;
  }

  /**
   * Get maxValueColorStyle
   * @return maxValueColorStyle
   */
  @javax.annotation.Nullable
  public ColorStyle getMaxValueColorStyle() {
    return maxValueColorStyle;
  }

  public void setMaxValueColorStyle(ColorStyle maxValueColorStyle) {
    this.maxValueColorStyle = maxValueColorStyle;
  }


  public TreemapChartColorScale midValueColor(Color midValueColor) {
    this.midValueColor = midValueColor;
    return this;
  }

  /**
   * Get midValueColor
   * @return midValueColor
   */
  @javax.annotation.Nullable
  public Color getMidValueColor() {
    return midValueColor;
  }

  public void setMidValueColor(Color midValueColor) {
    this.midValueColor = midValueColor;
  }


  public TreemapChartColorScale midValueColorStyle(ColorStyle midValueColorStyle) {
    this.midValueColorStyle = midValueColorStyle;
    return this;
  }

  /**
   * Get midValueColorStyle
   * @return midValueColorStyle
   */
  @javax.annotation.Nullable
  public ColorStyle getMidValueColorStyle() {
    return midValueColorStyle;
  }

  public void setMidValueColorStyle(ColorStyle midValueColorStyle) {
    this.midValueColorStyle = midValueColorStyle;
  }


  public TreemapChartColorScale minValueColor(Color minValueColor) {
    this.minValueColor = minValueColor;
    return this;
  }

  /**
   * Get minValueColor
   * @return minValueColor
   */
  @javax.annotation.Nullable
  public Color getMinValueColor() {
    return minValueColor;
  }

  public void setMinValueColor(Color minValueColor) {
    this.minValueColor = minValueColor;
  }


  public TreemapChartColorScale minValueColorStyle(ColorStyle minValueColorStyle) {
    this.minValueColorStyle = minValueColorStyle;
    return this;
  }

  /**
   * Get minValueColorStyle
   * @return minValueColorStyle
   */
  @javax.annotation.Nullable
  public ColorStyle getMinValueColorStyle() {
    return minValueColorStyle;
  }

  public void setMinValueColorStyle(ColorStyle minValueColorStyle) {
    this.minValueColorStyle = minValueColorStyle;
  }


  public TreemapChartColorScale noDataColor(Color noDataColor) {
    this.noDataColor = noDataColor;
    return this;
  }

  /**
   * Get noDataColor
   * @return noDataColor
   */
  @javax.annotation.Nullable
  public Color getNoDataColor() {
    return noDataColor;
  }

  public void setNoDataColor(Color noDataColor) {
    this.noDataColor = noDataColor;
  }


  public TreemapChartColorScale noDataColorStyle(ColorStyle noDataColorStyle) {
    this.noDataColorStyle = noDataColorStyle;
    return this;
  }

  /**
   * Get noDataColorStyle
   * @return noDataColorStyle
   */
  @javax.annotation.Nullable
  public ColorStyle getNoDataColorStyle() {
    return noDataColorStyle;
  }

  public void setNoDataColorStyle(ColorStyle noDataColorStyle) {
    this.noDataColorStyle = noDataColorStyle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TreemapChartColorScale treemapChartColorScale = (TreemapChartColorScale) o;
    return Objects.equals(this.maxValueColor, treemapChartColorScale.maxValueColor) &&
        Objects.equals(this.maxValueColorStyle, treemapChartColorScale.maxValueColorStyle) &&
        Objects.equals(this.midValueColor, treemapChartColorScale.midValueColor) &&
        Objects.equals(this.midValueColorStyle, treemapChartColorScale.midValueColorStyle) &&
        Objects.equals(this.minValueColor, treemapChartColorScale.minValueColor) &&
        Objects.equals(this.minValueColorStyle, treemapChartColorScale.minValueColorStyle) &&
        Objects.equals(this.noDataColor, treemapChartColorScale.noDataColor) &&
        Objects.equals(this.noDataColorStyle, treemapChartColorScale.noDataColorStyle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxValueColor, maxValueColorStyle, midValueColor, midValueColorStyle, minValueColor, minValueColorStyle, noDataColor, noDataColorStyle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TreemapChartColorScale {\n");
    sb.append("    maxValueColor: ").append(toIndentedString(maxValueColor)).append("\n");
    sb.append("    maxValueColorStyle: ").append(toIndentedString(maxValueColorStyle)).append("\n");
    sb.append("    midValueColor: ").append(toIndentedString(midValueColor)).append("\n");
    sb.append("    midValueColorStyle: ").append(toIndentedString(midValueColorStyle)).append("\n");
    sb.append("    minValueColor: ").append(toIndentedString(minValueColor)).append("\n");
    sb.append("    minValueColorStyle: ").append(toIndentedString(minValueColorStyle)).append("\n");
    sb.append("    noDataColor: ").append(toIndentedString(noDataColor)).append("\n");
    sb.append("    noDataColorStyle: ").append(toIndentedString(noDataColorStyle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxValueColor");
    openapiFields.add("maxValueColorStyle");
    openapiFields.add("midValueColor");
    openapiFields.add("midValueColorStyle");
    openapiFields.add("minValueColor");
    openapiFields.add("minValueColorStyle");
    openapiFields.add("noDataColor");
    openapiFields.add("noDataColorStyle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TreemapChartColorScale
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TreemapChartColorScale.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TreemapChartColorScale is not found in the empty JSON string", TreemapChartColorScale.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TreemapChartColorScale.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TreemapChartColorScale` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `maxValueColor`
      if (jsonObj.get("maxValueColor") != null && !jsonObj.get("maxValueColor").isJsonNull()) {
        Color.validateJsonElement(jsonObj.get("maxValueColor"));
      }
      // validate the optional field `maxValueColorStyle`
      if (jsonObj.get("maxValueColorStyle") != null && !jsonObj.get("maxValueColorStyle").isJsonNull()) {
        ColorStyle.validateJsonElement(jsonObj.get("maxValueColorStyle"));
      }
      // validate the optional field `midValueColor`
      if (jsonObj.get("midValueColor") != null && !jsonObj.get("midValueColor").isJsonNull()) {
        Color.validateJsonElement(jsonObj.get("midValueColor"));
      }
      // validate the optional field `midValueColorStyle`
      if (jsonObj.get("midValueColorStyle") != null && !jsonObj.get("midValueColorStyle").isJsonNull()) {
        ColorStyle.validateJsonElement(jsonObj.get("midValueColorStyle"));
      }
      // validate the optional field `minValueColor`
      if (jsonObj.get("minValueColor") != null && !jsonObj.get("minValueColor").isJsonNull()) {
        Color.validateJsonElement(jsonObj.get("minValueColor"));
      }
      // validate the optional field `minValueColorStyle`
      if (jsonObj.get("minValueColorStyle") != null && !jsonObj.get("minValueColorStyle").isJsonNull()) {
        ColorStyle.validateJsonElement(jsonObj.get("minValueColorStyle"));
      }
      // validate the optional field `noDataColor`
      if (jsonObj.get("noDataColor") != null && !jsonObj.get("noDataColor").isJsonNull()) {
        Color.validateJsonElement(jsonObj.get("noDataColor"));
      }
      // validate the optional field `noDataColorStyle`
      if (jsonObj.get("noDataColorStyle") != null && !jsonObj.get("noDataColorStyle").isJsonNull()) {
        ColorStyle.validateJsonElement(jsonObj.get("noDataColorStyle"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TreemapChartColorScale.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TreemapChartColorScale' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TreemapChartColorScale> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TreemapChartColorScale.class));

       return (TypeAdapter<T>) new TypeAdapter<TreemapChartColorScale>() {
           @Override
           public void write(JsonWriter out, TreemapChartColorScale value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TreemapChartColorScale read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TreemapChartColorScale given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TreemapChartColorScale
   * @throws IOException if the JSON string is invalid with respect to TreemapChartColorScale
   */
  public static TreemapChartColorScale fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TreemapChartColorScale.class);
  }

  /**
   * Convert an instance of TreemapChartColorScale to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

