/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Borders;
import org.openapitools.client.model.Color;
import org.openapitools.client.model.ColorStyle;
import org.openapitools.client.model.NumberFormat;
import org.openapitools.client.model.Padding;
import org.openapitools.client.model.TextFormat;
import org.openapitools.client.model.TextRotation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The format of a cell.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CellFormat {
  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "backgroundColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private Color backgroundColor;

  public static final String SERIALIZED_NAME_BACKGROUND_COLOR_STYLE = "backgroundColorStyle";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR_STYLE)
  private ColorStyle backgroundColorStyle;

  public static final String SERIALIZED_NAME_BORDERS = "borders";
  @SerializedName(SERIALIZED_NAME_BORDERS)
  private Borders borders;

  /**
   * The horizontal alignment of the value in the cell.
   */
  @JsonAdapter(HorizontalAlignmentEnum.Adapter.class)
  public enum HorizontalAlignmentEnum {
    HORIZONTAL_ALIGN_UNSPECIFIED("HORIZONTAL_ALIGN_UNSPECIFIED"),
    
    LEFT("LEFT"),
    
    CENTER("CENTER"),
    
    RIGHT("RIGHT");

    private String value;

    HorizontalAlignmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HorizontalAlignmentEnum fromValue(String value) {
      for (HorizontalAlignmentEnum b : HorizontalAlignmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HorizontalAlignmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HorizontalAlignmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HorizontalAlignmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HorizontalAlignmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HorizontalAlignmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HORIZONTAL_ALIGNMENT = "horizontalAlignment";
  @SerializedName(SERIALIZED_NAME_HORIZONTAL_ALIGNMENT)
  private HorizontalAlignmentEnum horizontalAlignment;

  /**
   * If one exists, how a hyperlink should be displayed in the cell.
   */
  @JsonAdapter(HyperlinkDisplayTypeEnum.Adapter.class)
  public enum HyperlinkDisplayTypeEnum {
    HYPERLINK_DISPLAY_TYPE_UNSPECIFIED("HYPERLINK_DISPLAY_TYPE_UNSPECIFIED"),
    
    LINKED("LINKED"),
    
    PLAIN_TEXT("PLAIN_TEXT");

    private String value;

    HyperlinkDisplayTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HyperlinkDisplayTypeEnum fromValue(String value) {
      for (HyperlinkDisplayTypeEnum b : HyperlinkDisplayTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HyperlinkDisplayTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HyperlinkDisplayTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HyperlinkDisplayTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HyperlinkDisplayTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HyperlinkDisplayTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HYPERLINK_DISPLAY_TYPE = "hyperlinkDisplayType";
  @SerializedName(SERIALIZED_NAME_HYPERLINK_DISPLAY_TYPE)
  private HyperlinkDisplayTypeEnum hyperlinkDisplayType;

  public static final String SERIALIZED_NAME_NUMBER_FORMAT = "numberFormat";
  @SerializedName(SERIALIZED_NAME_NUMBER_FORMAT)
  private NumberFormat numberFormat;

  public static final String SERIALIZED_NAME_PADDING = "padding";
  @SerializedName(SERIALIZED_NAME_PADDING)
  private Padding padding;

  /**
   * The direction of the text in the cell.
   */
  @JsonAdapter(TextDirectionEnum.Adapter.class)
  public enum TextDirectionEnum {
    TEXT_DIRECTION_UNSPECIFIED("TEXT_DIRECTION_UNSPECIFIED"),
    
    LEFT_TO_RIGHT("LEFT_TO_RIGHT"),
    
    RIGHT_TO_LEFT("RIGHT_TO_LEFT");

    private String value;

    TextDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TextDirectionEnum fromValue(String value) {
      for (TextDirectionEnum b : TextDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TextDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TextDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TextDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TextDirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TextDirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEXT_DIRECTION = "textDirection";
  @SerializedName(SERIALIZED_NAME_TEXT_DIRECTION)
  private TextDirectionEnum textDirection;

  public static final String SERIALIZED_NAME_TEXT_FORMAT = "textFormat";
  @SerializedName(SERIALIZED_NAME_TEXT_FORMAT)
  private TextFormat textFormat;

  public static final String SERIALIZED_NAME_TEXT_ROTATION = "textRotation";
  @SerializedName(SERIALIZED_NAME_TEXT_ROTATION)
  private TextRotation textRotation;

  /**
   * The vertical alignment of the value in the cell.
   */
  @JsonAdapter(VerticalAlignmentEnum.Adapter.class)
  public enum VerticalAlignmentEnum {
    VERTICAL_ALIGN_UNSPECIFIED("VERTICAL_ALIGN_UNSPECIFIED"),
    
    TOP("TOP"),
    
    MIDDLE("MIDDLE"),
    
    BOTTOM("BOTTOM");

    private String value;

    VerticalAlignmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VerticalAlignmentEnum fromValue(String value) {
      for (VerticalAlignmentEnum b : VerticalAlignmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VerticalAlignmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VerticalAlignmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VerticalAlignmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VerticalAlignmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VerticalAlignmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERTICAL_ALIGNMENT = "verticalAlignment";
  @SerializedName(SERIALIZED_NAME_VERTICAL_ALIGNMENT)
  private VerticalAlignmentEnum verticalAlignment;

  /**
   * The wrap strategy for the value in the cell.
   */
  @JsonAdapter(WrapStrategyEnum.Adapter.class)
  public enum WrapStrategyEnum {
    WRAP_STRATEGY_UNSPECIFIED("WRAP_STRATEGY_UNSPECIFIED"),
    
    OVERFLOW_CELL("OVERFLOW_CELL"),
    
    LEGACY_WRAP("LEGACY_WRAP"),
    
    CLIP("CLIP"),
    
    WRAP("WRAP");

    private String value;

    WrapStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WrapStrategyEnum fromValue(String value) {
      for (WrapStrategyEnum b : WrapStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WrapStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WrapStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WrapStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WrapStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WrapStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WRAP_STRATEGY = "wrapStrategy";
  @SerializedName(SERIALIZED_NAME_WRAP_STRATEGY)
  private WrapStrategyEnum wrapStrategy;

  public CellFormat() {
  }

  public CellFormat backgroundColor(Color backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * Get backgroundColor
   * @return backgroundColor
   */
  @javax.annotation.Nullable
  public Color getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(Color backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public CellFormat backgroundColorStyle(ColorStyle backgroundColorStyle) {
    this.backgroundColorStyle = backgroundColorStyle;
    return this;
  }

  /**
   * Get backgroundColorStyle
   * @return backgroundColorStyle
   */
  @javax.annotation.Nullable
  public ColorStyle getBackgroundColorStyle() {
    return backgroundColorStyle;
  }

  public void setBackgroundColorStyle(ColorStyle backgroundColorStyle) {
    this.backgroundColorStyle = backgroundColorStyle;
  }


  public CellFormat borders(Borders borders) {
    this.borders = borders;
    return this;
  }

  /**
   * Get borders
   * @return borders
   */
  @javax.annotation.Nullable
  public Borders getBorders() {
    return borders;
  }

  public void setBorders(Borders borders) {
    this.borders = borders;
  }


  public CellFormat horizontalAlignment(HorizontalAlignmentEnum horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }

  /**
   * The horizontal alignment of the value in the cell.
   * @return horizontalAlignment
   */
  @javax.annotation.Nullable
  public HorizontalAlignmentEnum getHorizontalAlignment() {
    return horizontalAlignment;
  }

  public void setHorizontalAlignment(HorizontalAlignmentEnum horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
  }


  public CellFormat hyperlinkDisplayType(HyperlinkDisplayTypeEnum hyperlinkDisplayType) {
    this.hyperlinkDisplayType = hyperlinkDisplayType;
    return this;
  }

  /**
   * If one exists, how a hyperlink should be displayed in the cell.
   * @return hyperlinkDisplayType
   */
  @javax.annotation.Nullable
  public HyperlinkDisplayTypeEnum getHyperlinkDisplayType() {
    return hyperlinkDisplayType;
  }

  public void setHyperlinkDisplayType(HyperlinkDisplayTypeEnum hyperlinkDisplayType) {
    this.hyperlinkDisplayType = hyperlinkDisplayType;
  }


  public CellFormat numberFormat(NumberFormat numberFormat) {
    this.numberFormat = numberFormat;
    return this;
  }

  /**
   * Get numberFormat
   * @return numberFormat
   */
  @javax.annotation.Nullable
  public NumberFormat getNumberFormat() {
    return numberFormat;
  }

  public void setNumberFormat(NumberFormat numberFormat) {
    this.numberFormat = numberFormat;
  }


  public CellFormat padding(Padding padding) {
    this.padding = padding;
    return this;
  }

  /**
   * Get padding
   * @return padding
   */
  @javax.annotation.Nullable
  public Padding getPadding() {
    return padding;
  }

  public void setPadding(Padding padding) {
    this.padding = padding;
  }


  public CellFormat textDirection(TextDirectionEnum textDirection) {
    this.textDirection = textDirection;
    return this;
  }

  /**
   * The direction of the text in the cell.
   * @return textDirection
   */
  @javax.annotation.Nullable
  public TextDirectionEnum getTextDirection() {
    return textDirection;
  }

  public void setTextDirection(TextDirectionEnum textDirection) {
    this.textDirection = textDirection;
  }


  public CellFormat textFormat(TextFormat textFormat) {
    this.textFormat = textFormat;
    return this;
  }

  /**
   * Get textFormat
   * @return textFormat
   */
  @javax.annotation.Nullable
  public TextFormat getTextFormat() {
    return textFormat;
  }

  public void setTextFormat(TextFormat textFormat) {
    this.textFormat = textFormat;
  }


  public CellFormat textRotation(TextRotation textRotation) {
    this.textRotation = textRotation;
    return this;
  }

  /**
   * Get textRotation
   * @return textRotation
   */
  @javax.annotation.Nullable
  public TextRotation getTextRotation() {
    return textRotation;
  }

  public void setTextRotation(TextRotation textRotation) {
    this.textRotation = textRotation;
  }


  public CellFormat verticalAlignment(VerticalAlignmentEnum verticalAlignment) {
    this.verticalAlignment = verticalAlignment;
    return this;
  }

  /**
   * The vertical alignment of the value in the cell.
   * @return verticalAlignment
   */
  @javax.annotation.Nullable
  public VerticalAlignmentEnum getVerticalAlignment() {
    return verticalAlignment;
  }

  public void setVerticalAlignment(VerticalAlignmentEnum verticalAlignment) {
    this.verticalAlignment = verticalAlignment;
  }


  public CellFormat wrapStrategy(WrapStrategyEnum wrapStrategy) {
    this.wrapStrategy = wrapStrategy;
    return this;
  }

  /**
   * The wrap strategy for the value in the cell.
   * @return wrapStrategy
   */
  @javax.annotation.Nullable
  public WrapStrategyEnum getWrapStrategy() {
    return wrapStrategy;
  }

  public void setWrapStrategy(WrapStrategyEnum wrapStrategy) {
    this.wrapStrategy = wrapStrategy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CellFormat cellFormat = (CellFormat) o;
    return Objects.equals(this.backgroundColor, cellFormat.backgroundColor) &&
        Objects.equals(this.backgroundColorStyle, cellFormat.backgroundColorStyle) &&
        Objects.equals(this.borders, cellFormat.borders) &&
        Objects.equals(this.horizontalAlignment, cellFormat.horizontalAlignment) &&
        Objects.equals(this.hyperlinkDisplayType, cellFormat.hyperlinkDisplayType) &&
        Objects.equals(this.numberFormat, cellFormat.numberFormat) &&
        Objects.equals(this.padding, cellFormat.padding) &&
        Objects.equals(this.textDirection, cellFormat.textDirection) &&
        Objects.equals(this.textFormat, cellFormat.textFormat) &&
        Objects.equals(this.textRotation, cellFormat.textRotation) &&
        Objects.equals(this.verticalAlignment, cellFormat.verticalAlignment) &&
        Objects.equals(this.wrapStrategy, cellFormat.wrapStrategy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColor, backgroundColorStyle, borders, horizontalAlignment, hyperlinkDisplayType, numberFormat, padding, textDirection, textFormat, textRotation, verticalAlignment, wrapStrategy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CellFormat {\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    backgroundColorStyle: ").append(toIndentedString(backgroundColorStyle)).append("\n");
    sb.append("    borders: ").append(toIndentedString(borders)).append("\n");
    sb.append("    horizontalAlignment: ").append(toIndentedString(horizontalAlignment)).append("\n");
    sb.append("    hyperlinkDisplayType: ").append(toIndentedString(hyperlinkDisplayType)).append("\n");
    sb.append("    numberFormat: ").append(toIndentedString(numberFormat)).append("\n");
    sb.append("    padding: ").append(toIndentedString(padding)).append("\n");
    sb.append("    textDirection: ").append(toIndentedString(textDirection)).append("\n");
    sb.append("    textFormat: ").append(toIndentedString(textFormat)).append("\n");
    sb.append("    textRotation: ").append(toIndentedString(textRotation)).append("\n");
    sb.append("    verticalAlignment: ").append(toIndentedString(verticalAlignment)).append("\n");
    sb.append("    wrapStrategy: ").append(toIndentedString(wrapStrategy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backgroundColor");
    openapiFields.add("backgroundColorStyle");
    openapiFields.add("borders");
    openapiFields.add("horizontalAlignment");
    openapiFields.add("hyperlinkDisplayType");
    openapiFields.add("numberFormat");
    openapiFields.add("padding");
    openapiFields.add("textDirection");
    openapiFields.add("textFormat");
    openapiFields.add("textRotation");
    openapiFields.add("verticalAlignment");
    openapiFields.add("wrapStrategy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CellFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CellFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CellFormat is not found in the empty JSON string", CellFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CellFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CellFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backgroundColor`
      if (jsonObj.get("backgroundColor") != null && !jsonObj.get("backgroundColor").isJsonNull()) {
        Color.validateJsonElement(jsonObj.get("backgroundColor"));
      }
      // validate the optional field `backgroundColorStyle`
      if (jsonObj.get("backgroundColorStyle") != null && !jsonObj.get("backgroundColorStyle").isJsonNull()) {
        ColorStyle.validateJsonElement(jsonObj.get("backgroundColorStyle"));
      }
      // validate the optional field `borders`
      if (jsonObj.get("borders") != null && !jsonObj.get("borders").isJsonNull()) {
        Borders.validateJsonElement(jsonObj.get("borders"));
      }
      if ((jsonObj.get("horizontalAlignment") != null && !jsonObj.get("horizontalAlignment").isJsonNull()) && !jsonObj.get("horizontalAlignment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `horizontalAlignment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("horizontalAlignment").toString()));
      }
      // validate the optional field `horizontalAlignment`
      if (jsonObj.get("horizontalAlignment") != null && !jsonObj.get("horizontalAlignment").isJsonNull()) {
        HorizontalAlignmentEnum.validateJsonElement(jsonObj.get("horizontalAlignment"));
      }
      if ((jsonObj.get("hyperlinkDisplayType") != null && !jsonObj.get("hyperlinkDisplayType").isJsonNull()) && !jsonObj.get("hyperlinkDisplayType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hyperlinkDisplayType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hyperlinkDisplayType").toString()));
      }
      // validate the optional field `hyperlinkDisplayType`
      if (jsonObj.get("hyperlinkDisplayType") != null && !jsonObj.get("hyperlinkDisplayType").isJsonNull()) {
        HyperlinkDisplayTypeEnum.validateJsonElement(jsonObj.get("hyperlinkDisplayType"));
      }
      // validate the optional field `numberFormat`
      if (jsonObj.get("numberFormat") != null && !jsonObj.get("numberFormat").isJsonNull()) {
        NumberFormat.validateJsonElement(jsonObj.get("numberFormat"));
      }
      // validate the optional field `padding`
      if (jsonObj.get("padding") != null && !jsonObj.get("padding").isJsonNull()) {
        Padding.validateJsonElement(jsonObj.get("padding"));
      }
      if ((jsonObj.get("textDirection") != null && !jsonObj.get("textDirection").isJsonNull()) && !jsonObj.get("textDirection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textDirection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textDirection").toString()));
      }
      // validate the optional field `textDirection`
      if (jsonObj.get("textDirection") != null && !jsonObj.get("textDirection").isJsonNull()) {
        TextDirectionEnum.validateJsonElement(jsonObj.get("textDirection"));
      }
      // validate the optional field `textFormat`
      if (jsonObj.get("textFormat") != null && !jsonObj.get("textFormat").isJsonNull()) {
        TextFormat.validateJsonElement(jsonObj.get("textFormat"));
      }
      // validate the optional field `textRotation`
      if (jsonObj.get("textRotation") != null && !jsonObj.get("textRotation").isJsonNull()) {
        TextRotation.validateJsonElement(jsonObj.get("textRotation"));
      }
      if ((jsonObj.get("verticalAlignment") != null && !jsonObj.get("verticalAlignment").isJsonNull()) && !jsonObj.get("verticalAlignment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verticalAlignment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verticalAlignment").toString()));
      }
      // validate the optional field `verticalAlignment`
      if (jsonObj.get("verticalAlignment") != null && !jsonObj.get("verticalAlignment").isJsonNull()) {
        VerticalAlignmentEnum.validateJsonElement(jsonObj.get("verticalAlignment"));
      }
      if ((jsonObj.get("wrapStrategy") != null && !jsonObj.get("wrapStrategy").isJsonNull()) && !jsonObj.get("wrapStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wrapStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wrapStrategy").toString()));
      }
      // validate the optional field `wrapStrategy`
      if (jsonObj.get("wrapStrategy") != null && !jsonObj.get("wrapStrategy").isJsonNull()) {
        WrapStrategyEnum.validateJsonElement(jsonObj.get("wrapStrategy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CellFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CellFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CellFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CellFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<CellFormat>() {
           @Override
           public void write(JsonWriter out, CellFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CellFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CellFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CellFormat
   * @throws IOException if the JSON string is invalid with respect to CellFormat
   */
  public static CellFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CellFormat.class);
  }

  /**
   * Convert an instance of CellFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

