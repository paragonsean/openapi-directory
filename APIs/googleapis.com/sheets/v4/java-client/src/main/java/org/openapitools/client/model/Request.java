/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AddBandingRequest;
import org.openapitools.client.model.AddChartRequest;
import org.openapitools.client.model.AddConditionalFormatRuleRequest;
import org.openapitools.client.model.AddDataSourceRequest;
import org.openapitools.client.model.AddDimensionGroupRequest;
import org.openapitools.client.model.AddFilterViewRequest;
import org.openapitools.client.model.AddNamedRangeRequest;
import org.openapitools.client.model.AddProtectedRangeRequest;
import org.openapitools.client.model.AddSheetRequest;
import org.openapitools.client.model.AddSlicerRequest;
import org.openapitools.client.model.AppendCellsRequest;
import org.openapitools.client.model.AppendDimensionRequest;
import org.openapitools.client.model.AutoFillRequest;
import org.openapitools.client.model.AutoResizeDimensionsRequest;
import org.openapitools.client.model.ClearBasicFilterRequest;
import org.openapitools.client.model.CopyPasteRequest;
import org.openapitools.client.model.CreateDeveloperMetadataRequest;
import org.openapitools.client.model.CutPasteRequest;
import org.openapitools.client.model.DeleteBandingRequest;
import org.openapitools.client.model.DeleteConditionalFormatRuleRequest;
import org.openapitools.client.model.DeleteDataSourceRequest;
import org.openapitools.client.model.DeleteDeveloperMetadataRequest;
import org.openapitools.client.model.DeleteDimensionGroupRequest;
import org.openapitools.client.model.DeleteDimensionRequest;
import org.openapitools.client.model.DeleteDuplicatesRequest;
import org.openapitools.client.model.DeleteEmbeddedObjectRequest;
import org.openapitools.client.model.DeleteFilterViewRequest;
import org.openapitools.client.model.DeleteNamedRangeRequest;
import org.openapitools.client.model.DeleteProtectedRangeRequest;
import org.openapitools.client.model.DeleteRangeRequest;
import org.openapitools.client.model.DeleteSheetRequest;
import org.openapitools.client.model.DuplicateFilterViewRequest;
import org.openapitools.client.model.DuplicateSheetRequest;
import org.openapitools.client.model.FindReplaceRequest;
import org.openapitools.client.model.InsertDimensionRequest;
import org.openapitools.client.model.InsertRangeRequest;
import org.openapitools.client.model.MergeCellsRequest;
import org.openapitools.client.model.MoveDimensionRequest;
import org.openapitools.client.model.PasteDataRequest;
import org.openapitools.client.model.RandomizeRangeRequest;
import org.openapitools.client.model.RefreshDataSourceRequest;
import org.openapitools.client.model.RepeatCellRequest;
import org.openapitools.client.model.SetBasicFilterRequest;
import org.openapitools.client.model.SetDataValidationRequest;
import org.openapitools.client.model.SortRangeRequest;
import org.openapitools.client.model.TextToColumnsRequest;
import org.openapitools.client.model.TrimWhitespaceRequest;
import org.openapitools.client.model.UnmergeCellsRequest;
import org.openapitools.client.model.UpdateBandingRequest;
import org.openapitools.client.model.UpdateBordersRequest;
import org.openapitools.client.model.UpdateCellsRequest;
import org.openapitools.client.model.UpdateChartSpecRequest;
import org.openapitools.client.model.UpdateConditionalFormatRuleRequest;
import org.openapitools.client.model.UpdateDataSourceRequest;
import org.openapitools.client.model.UpdateDeveloperMetadataRequest;
import org.openapitools.client.model.UpdateDimensionGroupRequest;
import org.openapitools.client.model.UpdateDimensionPropertiesRequest;
import org.openapitools.client.model.UpdateEmbeddedObjectBorderRequest;
import org.openapitools.client.model.UpdateEmbeddedObjectPositionRequest;
import org.openapitools.client.model.UpdateFilterViewRequest;
import org.openapitools.client.model.UpdateNamedRangeRequest;
import org.openapitools.client.model.UpdateProtectedRangeRequest;
import org.openapitools.client.model.UpdateSheetPropertiesRequest;
import org.openapitools.client.model.UpdateSlicerSpecRequest;
import org.openapitools.client.model.UpdateSpreadsheetPropertiesRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single kind of update to apply to a spreadsheet.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Request {
  public static final String SERIALIZED_NAME_ADD_BANDING = "addBanding";
  @SerializedName(SERIALIZED_NAME_ADD_BANDING)
  private AddBandingRequest addBanding;

  public static final String SERIALIZED_NAME_ADD_CHART = "addChart";
  @SerializedName(SERIALIZED_NAME_ADD_CHART)
  private AddChartRequest addChart;

  public static final String SERIALIZED_NAME_ADD_CONDITIONAL_FORMAT_RULE = "addConditionalFormatRule";
  @SerializedName(SERIALIZED_NAME_ADD_CONDITIONAL_FORMAT_RULE)
  private AddConditionalFormatRuleRequest addConditionalFormatRule;

  public static final String SERIALIZED_NAME_ADD_DATA_SOURCE = "addDataSource";
  @SerializedName(SERIALIZED_NAME_ADD_DATA_SOURCE)
  private AddDataSourceRequest addDataSource;

  public static final String SERIALIZED_NAME_ADD_DIMENSION_GROUP = "addDimensionGroup";
  @SerializedName(SERIALIZED_NAME_ADD_DIMENSION_GROUP)
  private AddDimensionGroupRequest addDimensionGroup;

  public static final String SERIALIZED_NAME_ADD_FILTER_VIEW = "addFilterView";
  @SerializedName(SERIALIZED_NAME_ADD_FILTER_VIEW)
  private AddFilterViewRequest addFilterView;

  public static final String SERIALIZED_NAME_ADD_NAMED_RANGE = "addNamedRange";
  @SerializedName(SERIALIZED_NAME_ADD_NAMED_RANGE)
  private AddNamedRangeRequest addNamedRange;

  public static final String SERIALIZED_NAME_ADD_PROTECTED_RANGE = "addProtectedRange";
  @SerializedName(SERIALIZED_NAME_ADD_PROTECTED_RANGE)
  private AddProtectedRangeRequest addProtectedRange;

  public static final String SERIALIZED_NAME_ADD_SHEET = "addSheet";
  @SerializedName(SERIALIZED_NAME_ADD_SHEET)
  private AddSheetRequest addSheet;

  public static final String SERIALIZED_NAME_ADD_SLICER = "addSlicer";
  @SerializedName(SERIALIZED_NAME_ADD_SLICER)
  private AddSlicerRequest addSlicer;

  public static final String SERIALIZED_NAME_APPEND_CELLS = "appendCells";
  @SerializedName(SERIALIZED_NAME_APPEND_CELLS)
  private AppendCellsRequest appendCells;

  public static final String SERIALIZED_NAME_APPEND_DIMENSION = "appendDimension";
  @SerializedName(SERIALIZED_NAME_APPEND_DIMENSION)
  private AppendDimensionRequest appendDimension;

  public static final String SERIALIZED_NAME_AUTO_FILL = "autoFill";
  @SerializedName(SERIALIZED_NAME_AUTO_FILL)
  private AutoFillRequest autoFill;

  public static final String SERIALIZED_NAME_AUTO_RESIZE_DIMENSIONS = "autoResizeDimensions";
  @SerializedName(SERIALIZED_NAME_AUTO_RESIZE_DIMENSIONS)
  private AutoResizeDimensionsRequest autoResizeDimensions;

  public static final String SERIALIZED_NAME_CLEAR_BASIC_FILTER = "clearBasicFilter";
  @SerializedName(SERIALIZED_NAME_CLEAR_BASIC_FILTER)
  private ClearBasicFilterRequest clearBasicFilter;

  public static final String SERIALIZED_NAME_COPY_PASTE = "copyPaste";
  @SerializedName(SERIALIZED_NAME_COPY_PASTE)
  private CopyPasteRequest copyPaste;

  public static final String SERIALIZED_NAME_CREATE_DEVELOPER_METADATA = "createDeveloperMetadata";
  @SerializedName(SERIALIZED_NAME_CREATE_DEVELOPER_METADATA)
  private CreateDeveloperMetadataRequest createDeveloperMetadata;

  public static final String SERIALIZED_NAME_CUT_PASTE = "cutPaste";
  @SerializedName(SERIALIZED_NAME_CUT_PASTE)
  private CutPasteRequest cutPaste;

  public static final String SERIALIZED_NAME_DELETE_BANDING = "deleteBanding";
  @SerializedName(SERIALIZED_NAME_DELETE_BANDING)
  private DeleteBandingRequest deleteBanding;

  public static final String SERIALIZED_NAME_DELETE_CONDITIONAL_FORMAT_RULE = "deleteConditionalFormatRule";
  @SerializedName(SERIALIZED_NAME_DELETE_CONDITIONAL_FORMAT_RULE)
  private DeleteConditionalFormatRuleRequest deleteConditionalFormatRule;

  public static final String SERIALIZED_NAME_DELETE_DATA_SOURCE = "deleteDataSource";
  @SerializedName(SERIALIZED_NAME_DELETE_DATA_SOURCE)
  private DeleteDataSourceRequest deleteDataSource;

  public static final String SERIALIZED_NAME_DELETE_DEVELOPER_METADATA = "deleteDeveloperMetadata";
  @SerializedName(SERIALIZED_NAME_DELETE_DEVELOPER_METADATA)
  private DeleteDeveloperMetadataRequest deleteDeveloperMetadata;

  public static final String SERIALIZED_NAME_DELETE_DIMENSION = "deleteDimension";
  @SerializedName(SERIALIZED_NAME_DELETE_DIMENSION)
  private DeleteDimensionRequest deleteDimension;

  public static final String SERIALIZED_NAME_DELETE_DIMENSION_GROUP = "deleteDimensionGroup";
  @SerializedName(SERIALIZED_NAME_DELETE_DIMENSION_GROUP)
  private DeleteDimensionGroupRequest deleteDimensionGroup;

  public static final String SERIALIZED_NAME_DELETE_DUPLICATES = "deleteDuplicates";
  @SerializedName(SERIALIZED_NAME_DELETE_DUPLICATES)
  private DeleteDuplicatesRequest deleteDuplicates;

  public static final String SERIALIZED_NAME_DELETE_EMBEDDED_OBJECT = "deleteEmbeddedObject";
  @SerializedName(SERIALIZED_NAME_DELETE_EMBEDDED_OBJECT)
  private DeleteEmbeddedObjectRequest deleteEmbeddedObject;

  public static final String SERIALIZED_NAME_DELETE_FILTER_VIEW = "deleteFilterView";
  @SerializedName(SERIALIZED_NAME_DELETE_FILTER_VIEW)
  private DeleteFilterViewRequest deleteFilterView;

  public static final String SERIALIZED_NAME_DELETE_NAMED_RANGE = "deleteNamedRange";
  @SerializedName(SERIALIZED_NAME_DELETE_NAMED_RANGE)
  private DeleteNamedRangeRequest deleteNamedRange;

  public static final String SERIALIZED_NAME_DELETE_PROTECTED_RANGE = "deleteProtectedRange";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTED_RANGE)
  private DeleteProtectedRangeRequest deleteProtectedRange;

  public static final String SERIALIZED_NAME_DELETE_RANGE = "deleteRange";
  @SerializedName(SERIALIZED_NAME_DELETE_RANGE)
  private DeleteRangeRequest deleteRange;

  public static final String SERIALIZED_NAME_DELETE_SHEET = "deleteSheet";
  @SerializedName(SERIALIZED_NAME_DELETE_SHEET)
  private DeleteSheetRequest deleteSheet;

  public static final String SERIALIZED_NAME_DUPLICATE_FILTER_VIEW = "duplicateFilterView";
  @SerializedName(SERIALIZED_NAME_DUPLICATE_FILTER_VIEW)
  private DuplicateFilterViewRequest duplicateFilterView;

  public static final String SERIALIZED_NAME_DUPLICATE_SHEET = "duplicateSheet";
  @SerializedName(SERIALIZED_NAME_DUPLICATE_SHEET)
  private DuplicateSheetRequest duplicateSheet;

  public static final String SERIALIZED_NAME_FIND_REPLACE = "findReplace";
  @SerializedName(SERIALIZED_NAME_FIND_REPLACE)
  private FindReplaceRequest findReplace;

  public static final String SERIALIZED_NAME_INSERT_DIMENSION = "insertDimension";
  @SerializedName(SERIALIZED_NAME_INSERT_DIMENSION)
  private InsertDimensionRequest insertDimension;

  public static final String SERIALIZED_NAME_INSERT_RANGE = "insertRange";
  @SerializedName(SERIALIZED_NAME_INSERT_RANGE)
  private InsertRangeRequest insertRange;

  public static final String SERIALIZED_NAME_MERGE_CELLS = "mergeCells";
  @SerializedName(SERIALIZED_NAME_MERGE_CELLS)
  private MergeCellsRequest mergeCells;

  public static final String SERIALIZED_NAME_MOVE_DIMENSION = "moveDimension";
  @SerializedName(SERIALIZED_NAME_MOVE_DIMENSION)
  private MoveDimensionRequest moveDimension;

  public static final String SERIALIZED_NAME_PASTE_DATA = "pasteData";
  @SerializedName(SERIALIZED_NAME_PASTE_DATA)
  private PasteDataRequest pasteData;

  public static final String SERIALIZED_NAME_RANDOMIZE_RANGE = "randomizeRange";
  @SerializedName(SERIALIZED_NAME_RANDOMIZE_RANGE)
  private RandomizeRangeRequest randomizeRange;

  public static final String SERIALIZED_NAME_REFRESH_DATA_SOURCE = "refreshDataSource";
  @SerializedName(SERIALIZED_NAME_REFRESH_DATA_SOURCE)
  private RefreshDataSourceRequest refreshDataSource;

  public static final String SERIALIZED_NAME_REPEAT_CELL = "repeatCell";
  @SerializedName(SERIALIZED_NAME_REPEAT_CELL)
  private RepeatCellRequest repeatCell;

  public static final String SERIALIZED_NAME_SET_BASIC_FILTER = "setBasicFilter";
  @SerializedName(SERIALIZED_NAME_SET_BASIC_FILTER)
  private SetBasicFilterRequest setBasicFilter;

  public static final String SERIALIZED_NAME_SET_DATA_VALIDATION = "setDataValidation";
  @SerializedName(SERIALIZED_NAME_SET_DATA_VALIDATION)
  private SetDataValidationRequest setDataValidation;

  public static final String SERIALIZED_NAME_SORT_RANGE = "sortRange";
  @SerializedName(SERIALIZED_NAME_SORT_RANGE)
  private SortRangeRequest sortRange;

  public static final String SERIALIZED_NAME_TEXT_TO_COLUMNS = "textToColumns";
  @SerializedName(SERIALIZED_NAME_TEXT_TO_COLUMNS)
  private TextToColumnsRequest textToColumns;

  public static final String SERIALIZED_NAME_TRIM_WHITESPACE = "trimWhitespace";
  @SerializedName(SERIALIZED_NAME_TRIM_WHITESPACE)
  private TrimWhitespaceRequest trimWhitespace;

  public static final String SERIALIZED_NAME_UNMERGE_CELLS = "unmergeCells";
  @SerializedName(SERIALIZED_NAME_UNMERGE_CELLS)
  private UnmergeCellsRequest unmergeCells;

  public static final String SERIALIZED_NAME_UPDATE_BANDING = "updateBanding";
  @SerializedName(SERIALIZED_NAME_UPDATE_BANDING)
  private UpdateBandingRequest updateBanding;

  public static final String SERIALIZED_NAME_UPDATE_BORDERS = "updateBorders";
  @SerializedName(SERIALIZED_NAME_UPDATE_BORDERS)
  private UpdateBordersRequest updateBorders;

  public static final String SERIALIZED_NAME_UPDATE_CELLS = "updateCells";
  @SerializedName(SERIALIZED_NAME_UPDATE_CELLS)
  private UpdateCellsRequest updateCells;

  public static final String SERIALIZED_NAME_UPDATE_CHART_SPEC = "updateChartSpec";
  @SerializedName(SERIALIZED_NAME_UPDATE_CHART_SPEC)
  private UpdateChartSpecRequest updateChartSpec;

  public static final String SERIALIZED_NAME_UPDATE_CONDITIONAL_FORMAT_RULE = "updateConditionalFormatRule";
  @SerializedName(SERIALIZED_NAME_UPDATE_CONDITIONAL_FORMAT_RULE)
  private UpdateConditionalFormatRuleRequest updateConditionalFormatRule;

  public static final String SERIALIZED_NAME_UPDATE_DATA_SOURCE = "updateDataSource";
  @SerializedName(SERIALIZED_NAME_UPDATE_DATA_SOURCE)
  private UpdateDataSourceRequest updateDataSource;

  public static final String SERIALIZED_NAME_UPDATE_DEVELOPER_METADATA = "updateDeveloperMetadata";
  @SerializedName(SERIALIZED_NAME_UPDATE_DEVELOPER_METADATA)
  private UpdateDeveloperMetadataRequest updateDeveloperMetadata;

  public static final String SERIALIZED_NAME_UPDATE_DIMENSION_GROUP = "updateDimensionGroup";
  @SerializedName(SERIALIZED_NAME_UPDATE_DIMENSION_GROUP)
  private UpdateDimensionGroupRequest updateDimensionGroup;

  public static final String SERIALIZED_NAME_UPDATE_DIMENSION_PROPERTIES = "updateDimensionProperties";
  @SerializedName(SERIALIZED_NAME_UPDATE_DIMENSION_PROPERTIES)
  private UpdateDimensionPropertiesRequest updateDimensionProperties;

  public static final String SERIALIZED_NAME_UPDATE_EMBEDDED_OBJECT_BORDER = "updateEmbeddedObjectBorder";
  @SerializedName(SERIALIZED_NAME_UPDATE_EMBEDDED_OBJECT_BORDER)
  private UpdateEmbeddedObjectBorderRequest updateEmbeddedObjectBorder;

  public static final String SERIALIZED_NAME_UPDATE_EMBEDDED_OBJECT_POSITION = "updateEmbeddedObjectPosition";
  @SerializedName(SERIALIZED_NAME_UPDATE_EMBEDDED_OBJECT_POSITION)
  private UpdateEmbeddedObjectPositionRequest updateEmbeddedObjectPosition;

  public static final String SERIALIZED_NAME_UPDATE_FILTER_VIEW = "updateFilterView";
  @SerializedName(SERIALIZED_NAME_UPDATE_FILTER_VIEW)
  private UpdateFilterViewRequest updateFilterView;

  public static final String SERIALIZED_NAME_UPDATE_NAMED_RANGE = "updateNamedRange";
  @SerializedName(SERIALIZED_NAME_UPDATE_NAMED_RANGE)
  private UpdateNamedRangeRequest updateNamedRange;

  public static final String SERIALIZED_NAME_UPDATE_PROTECTED_RANGE = "updateProtectedRange";
  @SerializedName(SERIALIZED_NAME_UPDATE_PROTECTED_RANGE)
  private UpdateProtectedRangeRequest updateProtectedRange;

  public static final String SERIALIZED_NAME_UPDATE_SHEET_PROPERTIES = "updateSheetProperties";
  @SerializedName(SERIALIZED_NAME_UPDATE_SHEET_PROPERTIES)
  private UpdateSheetPropertiesRequest updateSheetProperties;

  public static final String SERIALIZED_NAME_UPDATE_SLICER_SPEC = "updateSlicerSpec";
  @SerializedName(SERIALIZED_NAME_UPDATE_SLICER_SPEC)
  private UpdateSlicerSpecRequest updateSlicerSpec;

  public static final String SERIALIZED_NAME_UPDATE_SPREADSHEET_PROPERTIES = "updateSpreadsheetProperties";
  @SerializedName(SERIALIZED_NAME_UPDATE_SPREADSHEET_PROPERTIES)
  private UpdateSpreadsheetPropertiesRequest updateSpreadsheetProperties;

  public Request() {
  }

  public Request addBanding(AddBandingRequest addBanding) {
    this.addBanding = addBanding;
    return this;
  }

  /**
   * Get addBanding
   * @return addBanding
   */
  @javax.annotation.Nullable
  public AddBandingRequest getAddBanding() {
    return addBanding;
  }

  public void setAddBanding(AddBandingRequest addBanding) {
    this.addBanding = addBanding;
  }


  public Request addChart(AddChartRequest addChart) {
    this.addChart = addChart;
    return this;
  }

  /**
   * Get addChart
   * @return addChart
   */
  @javax.annotation.Nullable
  public AddChartRequest getAddChart() {
    return addChart;
  }

  public void setAddChart(AddChartRequest addChart) {
    this.addChart = addChart;
  }


  public Request addConditionalFormatRule(AddConditionalFormatRuleRequest addConditionalFormatRule) {
    this.addConditionalFormatRule = addConditionalFormatRule;
    return this;
  }

  /**
   * Get addConditionalFormatRule
   * @return addConditionalFormatRule
   */
  @javax.annotation.Nullable
  public AddConditionalFormatRuleRequest getAddConditionalFormatRule() {
    return addConditionalFormatRule;
  }

  public void setAddConditionalFormatRule(AddConditionalFormatRuleRequest addConditionalFormatRule) {
    this.addConditionalFormatRule = addConditionalFormatRule;
  }


  public Request addDataSource(AddDataSourceRequest addDataSource) {
    this.addDataSource = addDataSource;
    return this;
  }

  /**
   * Get addDataSource
   * @return addDataSource
   */
  @javax.annotation.Nullable
  public AddDataSourceRequest getAddDataSource() {
    return addDataSource;
  }

  public void setAddDataSource(AddDataSourceRequest addDataSource) {
    this.addDataSource = addDataSource;
  }


  public Request addDimensionGroup(AddDimensionGroupRequest addDimensionGroup) {
    this.addDimensionGroup = addDimensionGroup;
    return this;
  }

  /**
   * Get addDimensionGroup
   * @return addDimensionGroup
   */
  @javax.annotation.Nullable
  public AddDimensionGroupRequest getAddDimensionGroup() {
    return addDimensionGroup;
  }

  public void setAddDimensionGroup(AddDimensionGroupRequest addDimensionGroup) {
    this.addDimensionGroup = addDimensionGroup;
  }


  public Request addFilterView(AddFilterViewRequest addFilterView) {
    this.addFilterView = addFilterView;
    return this;
  }

  /**
   * Get addFilterView
   * @return addFilterView
   */
  @javax.annotation.Nullable
  public AddFilterViewRequest getAddFilterView() {
    return addFilterView;
  }

  public void setAddFilterView(AddFilterViewRequest addFilterView) {
    this.addFilterView = addFilterView;
  }


  public Request addNamedRange(AddNamedRangeRequest addNamedRange) {
    this.addNamedRange = addNamedRange;
    return this;
  }

  /**
   * Get addNamedRange
   * @return addNamedRange
   */
  @javax.annotation.Nullable
  public AddNamedRangeRequest getAddNamedRange() {
    return addNamedRange;
  }

  public void setAddNamedRange(AddNamedRangeRequest addNamedRange) {
    this.addNamedRange = addNamedRange;
  }


  public Request addProtectedRange(AddProtectedRangeRequest addProtectedRange) {
    this.addProtectedRange = addProtectedRange;
    return this;
  }

  /**
   * Get addProtectedRange
   * @return addProtectedRange
   */
  @javax.annotation.Nullable
  public AddProtectedRangeRequest getAddProtectedRange() {
    return addProtectedRange;
  }

  public void setAddProtectedRange(AddProtectedRangeRequest addProtectedRange) {
    this.addProtectedRange = addProtectedRange;
  }


  public Request addSheet(AddSheetRequest addSheet) {
    this.addSheet = addSheet;
    return this;
  }

  /**
   * Get addSheet
   * @return addSheet
   */
  @javax.annotation.Nullable
  public AddSheetRequest getAddSheet() {
    return addSheet;
  }

  public void setAddSheet(AddSheetRequest addSheet) {
    this.addSheet = addSheet;
  }


  public Request addSlicer(AddSlicerRequest addSlicer) {
    this.addSlicer = addSlicer;
    return this;
  }

  /**
   * Get addSlicer
   * @return addSlicer
   */
  @javax.annotation.Nullable
  public AddSlicerRequest getAddSlicer() {
    return addSlicer;
  }

  public void setAddSlicer(AddSlicerRequest addSlicer) {
    this.addSlicer = addSlicer;
  }


  public Request appendCells(AppendCellsRequest appendCells) {
    this.appendCells = appendCells;
    return this;
  }

  /**
   * Get appendCells
   * @return appendCells
   */
  @javax.annotation.Nullable
  public AppendCellsRequest getAppendCells() {
    return appendCells;
  }

  public void setAppendCells(AppendCellsRequest appendCells) {
    this.appendCells = appendCells;
  }


  public Request appendDimension(AppendDimensionRequest appendDimension) {
    this.appendDimension = appendDimension;
    return this;
  }

  /**
   * Get appendDimension
   * @return appendDimension
   */
  @javax.annotation.Nullable
  public AppendDimensionRequest getAppendDimension() {
    return appendDimension;
  }

  public void setAppendDimension(AppendDimensionRequest appendDimension) {
    this.appendDimension = appendDimension;
  }


  public Request autoFill(AutoFillRequest autoFill) {
    this.autoFill = autoFill;
    return this;
  }

  /**
   * Get autoFill
   * @return autoFill
   */
  @javax.annotation.Nullable
  public AutoFillRequest getAutoFill() {
    return autoFill;
  }

  public void setAutoFill(AutoFillRequest autoFill) {
    this.autoFill = autoFill;
  }


  public Request autoResizeDimensions(AutoResizeDimensionsRequest autoResizeDimensions) {
    this.autoResizeDimensions = autoResizeDimensions;
    return this;
  }

  /**
   * Get autoResizeDimensions
   * @return autoResizeDimensions
   */
  @javax.annotation.Nullable
  public AutoResizeDimensionsRequest getAutoResizeDimensions() {
    return autoResizeDimensions;
  }

  public void setAutoResizeDimensions(AutoResizeDimensionsRequest autoResizeDimensions) {
    this.autoResizeDimensions = autoResizeDimensions;
  }


  public Request clearBasicFilter(ClearBasicFilterRequest clearBasicFilter) {
    this.clearBasicFilter = clearBasicFilter;
    return this;
  }

  /**
   * Get clearBasicFilter
   * @return clearBasicFilter
   */
  @javax.annotation.Nullable
  public ClearBasicFilterRequest getClearBasicFilter() {
    return clearBasicFilter;
  }

  public void setClearBasicFilter(ClearBasicFilterRequest clearBasicFilter) {
    this.clearBasicFilter = clearBasicFilter;
  }


  public Request copyPaste(CopyPasteRequest copyPaste) {
    this.copyPaste = copyPaste;
    return this;
  }

  /**
   * Get copyPaste
   * @return copyPaste
   */
  @javax.annotation.Nullable
  public CopyPasteRequest getCopyPaste() {
    return copyPaste;
  }

  public void setCopyPaste(CopyPasteRequest copyPaste) {
    this.copyPaste = copyPaste;
  }


  public Request createDeveloperMetadata(CreateDeveloperMetadataRequest createDeveloperMetadata) {
    this.createDeveloperMetadata = createDeveloperMetadata;
    return this;
  }

  /**
   * Get createDeveloperMetadata
   * @return createDeveloperMetadata
   */
  @javax.annotation.Nullable
  public CreateDeveloperMetadataRequest getCreateDeveloperMetadata() {
    return createDeveloperMetadata;
  }

  public void setCreateDeveloperMetadata(CreateDeveloperMetadataRequest createDeveloperMetadata) {
    this.createDeveloperMetadata = createDeveloperMetadata;
  }


  public Request cutPaste(CutPasteRequest cutPaste) {
    this.cutPaste = cutPaste;
    return this;
  }

  /**
   * Get cutPaste
   * @return cutPaste
   */
  @javax.annotation.Nullable
  public CutPasteRequest getCutPaste() {
    return cutPaste;
  }

  public void setCutPaste(CutPasteRequest cutPaste) {
    this.cutPaste = cutPaste;
  }


  public Request deleteBanding(DeleteBandingRequest deleteBanding) {
    this.deleteBanding = deleteBanding;
    return this;
  }

  /**
   * Get deleteBanding
   * @return deleteBanding
   */
  @javax.annotation.Nullable
  public DeleteBandingRequest getDeleteBanding() {
    return deleteBanding;
  }

  public void setDeleteBanding(DeleteBandingRequest deleteBanding) {
    this.deleteBanding = deleteBanding;
  }


  public Request deleteConditionalFormatRule(DeleteConditionalFormatRuleRequest deleteConditionalFormatRule) {
    this.deleteConditionalFormatRule = deleteConditionalFormatRule;
    return this;
  }

  /**
   * Get deleteConditionalFormatRule
   * @return deleteConditionalFormatRule
   */
  @javax.annotation.Nullable
  public DeleteConditionalFormatRuleRequest getDeleteConditionalFormatRule() {
    return deleteConditionalFormatRule;
  }

  public void setDeleteConditionalFormatRule(DeleteConditionalFormatRuleRequest deleteConditionalFormatRule) {
    this.deleteConditionalFormatRule = deleteConditionalFormatRule;
  }


  public Request deleteDataSource(DeleteDataSourceRequest deleteDataSource) {
    this.deleteDataSource = deleteDataSource;
    return this;
  }

  /**
   * Get deleteDataSource
   * @return deleteDataSource
   */
  @javax.annotation.Nullable
  public DeleteDataSourceRequest getDeleteDataSource() {
    return deleteDataSource;
  }

  public void setDeleteDataSource(DeleteDataSourceRequest deleteDataSource) {
    this.deleteDataSource = deleteDataSource;
  }


  public Request deleteDeveloperMetadata(DeleteDeveloperMetadataRequest deleteDeveloperMetadata) {
    this.deleteDeveloperMetadata = deleteDeveloperMetadata;
    return this;
  }

  /**
   * Get deleteDeveloperMetadata
   * @return deleteDeveloperMetadata
   */
  @javax.annotation.Nullable
  public DeleteDeveloperMetadataRequest getDeleteDeveloperMetadata() {
    return deleteDeveloperMetadata;
  }

  public void setDeleteDeveloperMetadata(DeleteDeveloperMetadataRequest deleteDeveloperMetadata) {
    this.deleteDeveloperMetadata = deleteDeveloperMetadata;
  }


  public Request deleteDimension(DeleteDimensionRequest deleteDimension) {
    this.deleteDimension = deleteDimension;
    return this;
  }

  /**
   * Get deleteDimension
   * @return deleteDimension
   */
  @javax.annotation.Nullable
  public DeleteDimensionRequest getDeleteDimension() {
    return deleteDimension;
  }

  public void setDeleteDimension(DeleteDimensionRequest deleteDimension) {
    this.deleteDimension = deleteDimension;
  }


  public Request deleteDimensionGroup(DeleteDimensionGroupRequest deleteDimensionGroup) {
    this.deleteDimensionGroup = deleteDimensionGroup;
    return this;
  }

  /**
   * Get deleteDimensionGroup
   * @return deleteDimensionGroup
   */
  @javax.annotation.Nullable
  public DeleteDimensionGroupRequest getDeleteDimensionGroup() {
    return deleteDimensionGroup;
  }

  public void setDeleteDimensionGroup(DeleteDimensionGroupRequest deleteDimensionGroup) {
    this.deleteDimensionGroup = deleteDimensionGroup;
  }


  public Request deleteDuplicates(DeleteDuplicatesRequest deleteDuplicates) {
    this.deleteDuplicates = deleteDuplicates;
    return this;
  }

  /**
   * Get deleteDuplicates
   * @return deleteDuplicates
   */
  @javax.annotation.Nullable
  public DeleteDuplicatesRequest getDeleteDuplicates() {
    return deleteDuplicates;
  }

  public void setDeleteDuplicates(DeleteDuplicatesRequest deleteDuplicates) {
    this.deleteDuplicates = deleteDuplicates;
  }


  public Request deleteEmbeddedObject(DeleteEmbeddedObjectRequest deleteEmbeddedObject) {
    this.deleteEmbeddedObject = deleteEmbeddedObject;
    return this;
  }

  /**
   * Get deleteEmbeddedObject
   * @return deleteEmbeddedObject
   */
  @javax.annotation.Nullable
  public DeleteEmbeddedObjectRequest getDeleteEmbeddedObject() {
    return deleteEmbeddedObject;
  }

  public void setDeleteEmbeddedObject(DeleteEmbeddedObjectRequest deleteEmbeddedObject) {
    this.deleteEmbeddedObject = deleteEmbeddedObject;
  }


  public Request deleteFilterView(DeleteFilterViewRequest deleteFilterView) {
    this.deleteFilterView = deleteFilterView;
    return this;
  }

  /**
   * Get deleteFilterView
   * @return deleteFilterView
   */
  @javax.annotation.Nullable
  public DeleteFilterViewRequest getDeleteFilterView() {
    return deleteFilterView;
  }

  public void setDeleteFilterView(DeleteFilterViewRequest deleteFilterView) {
    this.deleteFilterView = deleteFilterView;
  }


  public Request deleteNamedRange(DeleteNamedRangeRequest deleteNamedRange) {
    this.deleteNamedRange = deleteNamedRange;
    return this;
  }

  /**
   * Get deleteNamedRange
   * @return deleteNamedRange
   */
  @javax.annotation.Nullable
  public DeleteNamedRangeRequest getDeleteNamedRange() {
    return deleteNamedRange;
  }

  public void setDeleteNamedRange(DeleteNamedRangeRequest deleteNamedRange) {
    this.deleteNamedRange = deleteNamedRange;
  }


  public Request deleteProtectedRange(DeleteProtectedRangeRequest deleteProtectedRange) {
    this.deleteProtectedRange = deleteProtectedRange;
    return this;
  }

  /**
   * Get deleteProtectedRange
   * @return deleteProtectedRange
   */
  @javax.annotation.Nullable
  public DeleteProtectedRangeRequest getDeleteProtectedRange() {
    return deleteProtectedRange;
  }

  public void setDeleteProtectedRange(DeleteProtectedRangeRequest deleteProtectedRange) {
    this.deleteProtectedRange = deleteProtectedRange;
  }


  public Request deleteRange(DeleteRangeRequest deleteRange) {
    this.deleteRange = deleteRange;
    return this;
  }

  /**
   * Get deleteRange
   * @return deleteRange
   */
  @javax.annotation.Nullable
  public DeleteRangeRequest getDeleteRange() {
    return deleteRange;
  }

  public void setDeleteRange(DeleteRangeRequest deleteRange) {
    this.deleteRange = deleteRange;
  }


  public Request deleteSheet(DeleteSheetRequest deleteSheet) {
    this.deleteSheet = deleteSheet;
    return this;
  }

  /**
   * Get deleteSheet
   * @return deleteSheet
   */
  @javax.annotation.Nullable
  public DeleteSheetRequest getDeleteSheet() {
    return deleteSheet;
  }

  public void setDeleteSheet(DeleteSheetRequest deleteSheet) {
    this.deleteSheet = deleteSheet;
  }


  public Request duplicateFilterView(DuplicateFilterViewRequest duplicateFilterView) {
    this.duplicateFilterView = duplicateFilterView;
    return this;
  }

  /**
   * Get duplicateFilterView
   * @return duplicateFilterView
   */
  @javax.annotation.Nullable
  public DuplicateFilterViewRequest getDuplicateFilterView() {
    return duplicateFilterView;
  }

  public void setDuplicateFilterView(DuplicateFilterViewRequest duplicateFilterView) {
    this.duplicateFilterView = duplicateFilterView;
  }


  public Request duplicateSheet(DuplicateSheetRequest duplicateSheet) {
    this.duplicateSheet = duplicateSheet;
    return this;
  }

  /**
   * Get duplicateSheet
   * @return duplicateSheet
   */
  @javax.annotation.Nullable
  public DuplicateSheetRequest getDuplicateSheet() {
    return duplicateSheet;
  }

  public void setDuplicateSheet(DuplicateSheetRequest duplicateSheet) {
    this.duplicateSheet = duplicateSheet;
  }


  public Request findReplace(FindReplaceRequest findReplace) {
    this.findReplace = findReplace;
    return this;
  }

  /**
   * Get findReplace
   * @return findReplace
   */
  @javax.annotation.Nullable
  public FindReplaceRequest getFindReplace() {
    return findReplace;
  }

  public void setFindReplace(FindReplaceRequest findReplace) {
    this.findReplace = findReplace;
  }


  public Request insertDimension(InsertDimensionRequest insertDimension) {
    this.insertDimension = insertDimension;
    return this;
  }

  /**
   * Get insertDimension
   * @return insertDimension
   */
  @javax.annotation.Nullable
  public InsertDimensionRequest getInsertDimension() {
    return insertDimension;
  }

  public void setInsertDimension(InsertDimensionRequest insertDimension) {
    this.insertDimension = insertDimension;
  }


  public Request insertRange(InsertRangeRequest insertRange) {
    this.insertRange = insertRange;
    return this;
  }

  /**
   * Get insertRange
   * @return insertRange
   */
  @javax.annotation.Nullable
  public InsertRangeRequest getInsertRange() {
    return insertRange;
  }

  public void setInsertRange(InsertRangeRequest insertRange) {
    this.insertRange = insertRange;
  }


  public Request mergeCells(MergeCellsRequest mergeCells) {
    this.mergeCells = mergeCells;
    return this;
  }

  /**
   * Get mergeCells
   * @return mergeCells
   */
  @javax.annotation.Nullable
  public MergeCellsRequest getMergeCells() {
    return mergeCells;
  }

  public void setMergeCells(MergeCellsRequest mergeCells) {
    this.mergeCells = mergeCells;
  }


  public Request moveDimension(MoveDimensionRequest moveDimension) {
    this.moveDimension = moveDimension;
    return this;
  }

  /**
   * Get moveDimension
   * @return moveDimension
   */
  @javax.annotation.Nullable
  public MoveDimensionRequest getMoveDimension() {
    return moveDimension;
  }

  public void setMoveDimension(MoveDimensionRequest moveDimension) {
    this.moveDimension = moveDimension;
  }


  public Request pasteData(PasteDataRequest pasteData) {
    this.pasteData = pasteData;
    return this;
  }

  /**
   * Get pasteData
   * @return pasteData
   */
  @javax.annotation.Nullable
  public PasteDataRequest getPasteData() {
    return pasteData;
  }

  public void setPasteData(PasteDataRequest pasteData) {
    this.pasteData = pasteData;
  }


  public Request randomizeRange(RandomizeRangeRequest randomizeRange) {
    this.randomizeRange = randomizeRange;
    return this;
  }

  /**
   * Get randomizeRange
   * @return randomizeRange
   */
  @javax.annotation.Nullable
  public RandomizeRangeRequest getRandomizeRange() {
    return randomizeRange;
  }

  public void setRandomizeRange(RandomizeRangeRequest randomizeRange) {
    this.randomizeRange = randomizeRange;
  }


  public Request refreshDataSource(RefreshDataSourceRequest refreshDataSource) {
    this.refreshDataSource = refreshDataSource;
    return this;
  }

  /**
   * Get refreshDataSource
   * @return refreshDataSource
   */
  @javax.annotation.Nullable
  public RefreshDataSourceRequest getRefreshDataSource() {
    return refreshDataSource;
  }

  public void setRefreshDataSource(RefreshDataSourceRequest refreshDataSource) {
    this.refreshDataSource = refreshDataSource;
  }


  public Request repeatCell(RepeatCellRequest repeatCell) {
    this.repeatCell = repeatCell;
    return this;
  }

  /**
   * Get repeatCell
   * @return repeatCell
   */
  @javax.annotation.Nullable
  public RepeatCellRequest getRepeatCell() {
    return repeatCell;
  }

  public void setRepeatCell(RepeatCellRequest repeatCell) {
    this.repeatCell = repeatCell;
  }


  public Request setBasicFilter(SetBasicFilterRequest setBasicFilter) {
    this.setBasicFilter = setBasicFilter;
    return this;
  }

  /**
   * Get setBasicFilter
   * @return setBasicFilter
   */
  @javax.annotation.Nullable
  public SetBasicFilterRequest getSetBasicFilter() {
    return setBasicFilter;
  }

  public void setSetBasicFilter(SetBasicFilterRequest setBasicFilter) {
    this.setBasicFilter = setBasicFilter;
  }


  public Request setDataValidation(SetDataValidationRequest setDataValidation) {
    this.setDataValidation = setDataValidation;
    return this;
  }

  /**
   * Get setDataValidation
   * @return setDataValidation
   */
  @javax.annotation.Nullable
  public SetDataValidationRequest getSetDataValidation() {
    return setDataValidation;
  }

  public void setSetDataValidation(SetDataValidationRequest setDataValidation) {
    this.setDataValidation = setDataValidation;
  }


  public Request sortRange(SortRangeRequest sortRange) {
    this.sortRange = sortRange;
    return this;
  }

  /**
   * Get sortRange
   * @return sortRange
   */
  @javax.annotation.Nullable
  public SortRangeRequest getSortRange() {
    return sortRange;
  }

  public void setSortRange(SortRangeRequest sortRange) {
    this.sortRange = sortRange;
  }


  public Request textToColumns(TextToColumnsRequest textToColumns) {
    this.textToColumns = textToColumns;
    return this;
  }

  /**
   * Get textToColumns
   * @return textToColumns
   */
  @javax.annotation.Nullable
  public TextToColumnsRequest getTextToColumns() {
    return textToColumns;
  }

  public void setTextToColumns(TextToColumnsRequest textToColumns) {
    this.textToColumns = textToColumns;
  }


  public Request trimWhitespace(TrimWhitespaceRequest trimWhitespace) {
    this.trimWhitespace = trimWhitespace;
    return this;
  }

  /**
   * Get trimWhitespace
   * @return trimWhitespace
   */
  @javax.annotation.Nullable
  public TrimWhitespaceRequest getTrimWhitespace() {
    return trimWhitespace;
  }

  public void setTrimWhitespace(TrimWhitespaceRequest trimWhitespace) {
    this.trimWhitespace = trimWhitespace;
  }


  public Request unmergeCells(UnmergeCellsRequest unmergeCells) {
    this.unmergeCells = unmergeCells;
    return this;
  }

  /**
   * Get unmergeCells
   * @return unmergeCells
   */
  @javax.annotation.Nullable
  public UnmergeCellsRequest getUnmergeCells() {
    return unmergeCells;
  }

  public void setUnmergeCells(UnmergeCellsRequest unmergeCells) {
    this.unmergeCells = unmergeCells;
  }


  public Request updateBanding(UpdateBandingRequest updateBanding) {
    this.updateBanding = updateBanding;
    return this;
  }

  /**
   * Get updateBanding
   * @return updateBanding
   */
  @javax.annotation.Nullable
  public UpdateBandingRequest getUpdateBanding() {
    return updateBanding;
  }

  public void setUpdateBanding(UpdateBandingRequest updateBanding) {
    this.updateBanding = updateBanding;
  }


  public Request updateBorders(UpdateBordersRequest updateBorders) {
    this.updateBorders = updateBorders;
    return this;
  }

  /**
   * Get updateBorders
   * @return updateBorders
   */
  @javax.annotation.Nullable
  public UpdateBordersRequest getUpdateBorders() {
    return updateBorders;
  }

  public void setUpdateBorders(UpdateBordersRequest updateBorders) {
    this.updateBorders = updateBorders;
  }


  public Request updateCells(UpdateCellsRequest updateCells) {
    this.updateCells = updateCells;
    return this;
  }

  /**
   * Get updateCells
   * @return updateCells
   */
  @javax.annotation.Nullable
  public UpdateCellsRequest getUpdateCells() {
    return updateCells;
  }

  public void setUpdateCells(UpdateCellsRequest updateCells) {
    this.updateCells = updateCells;
  }


  public Request updateChartSpec(UpdateChartSpecRequest updateChartSpec) {
    this.updateChartSpec = updateChartSpec;
    return this;
  }

  /**
   * Get updateChartSpec
   * @return updateChartSpec
   */
  @javax.annotation.Nullable
  public UpdateChartSpecRequest getUpdateChartSpec() {
    return updateChartSpec;
  }

  public void setUpdateChartSpec(UpdateChartSpecRequest updateChartSpec) {
    this.updateChartSpec = updateChartSpec;
  }


  public Request updateConditionalFormatRule(UpdateConditionalFormatRuleRequest updateConditionalFormatRule) {
    this.updateConditionalFormatRule = updateConditionalFormatRule;
    return this;
  }

  /**
   * Get updateConditionalFormatRule
   * @return updateConditionalFormatRule
   */
  @javax.annotation.Nullable
  public UpdateConditionalFormatRuleRequest getUpdateConditionalFormatRule() {
    return updateConditionalFormatRule;
  }

  public void setUpdateConditionalFormatRule(UpdateConditionalFormatRuleRequest updateConditionalFormatRule) {
    this.updateConditionalFormatRule = updateConditionalFormatRule;
  }


  public Request updateDataSource(UpdateDataSourceRequest updateDataSource) {
    this.updateDataSource = updateDataSource;
    return this;
  }

  /**
   * Get updateDataSource
   * @return updateDataSource
   */
  @javax.annotation.Nullable
  public UpdateDataSourceRequest getUpdateDataSource() {
    return updateDataSource;
  }

  public void setUpdateDataSource(UpdateDataSourceRequest updateDataSource) {
    this.updateDataSource = updateDataSource;
  }


  public Request updateDeveloperMetadata(UpdateDeveloperMetadataRequest updateDeveloperMetadata) {
    this.updateDeveloperMetadata = updateDeveloperMetadata;
    return this;
  }

  /**
   * Get updateDeveloperMetadata
   * @return updateDeveloperMetadata
   */
  @javax.annotation.Nullable
  public UpdateDeveloperMetadataRequest getUpdateDeveloperMetadata() {
    return updateDeveloperMetadata;
  }

  public void setUpdateDeveloperMetadata(UpdateDeveloperMetadataRequest updateDeveloperMetadata) {
    this.updateDeveloperMetadata = updateDeveloperMetadata;
  }


  public Request updateDimensionGroup(UpdateDimensionGroupRequest updateDimensionGroup) {
    this.updateDimensionGroup = updateDimensionGroup;
    return this;
  }

  /**
   * Get updateDimensionGroup
   * @return updateDimensionGroup
   */
  @javax.annotation.Nullable
  public UpdateDimensionGroupRequest getUpdateDimensionGroup() {
    return updateDimensionGroup;
  }

  public void setUpdateDimensionGroup(UpdateDimensionGroupRequest updateDimensionGroup) {
    this.updateDimensionGroup = updateDimensionGroup;
  }


  public Request updateDimensionProperties(UpdateDimensionPropertiesRequest updateDimensionProperties) {
    this.updateDimensionProperties = updateDimensionProperties;
    return this;
  }

  /**
   * Get updateDimensionProperties
   * @return updateDimensionProperties
   */
  @javax.annotation.Nullable
  public UpdateDimensionPropertiesRequest getUpdateDimensionProperties() {
    return updateDimensionProperties;
  }

  public void setUpdateDimensionProperties(UpdateDimensionPropertiesRequest updateDimensionProperties) {
    this.updateDimensionProperties = updateDimensionProperties;
  }


  public Request updateEmbeddedObjectBorder(UpdateEmbeddedObjectBorderRequest updateEmbeddedObjectBorder) {
    this.updateEmbeddedObjectBorder = updateEmbeddedObjectBorder;
    return this;
  }

  /**
   * Get updateEmbeddedObjectBorder
   * @return updateEmbeddedObjectBorder
   */
  @javax.annotation.Nullable
  public UpdateEmbeddedObjectBorderRequest getUpdateEmbeddedObjectBorder() {
    return updateEmbeddedObjectBorder;
  }

  public void setUpdateEmbeddedObjectBorder(UpdateEmbeddedObjectBorderRequest updateEmbeddedObjectBorder) {
    this.updateEmbeddedObjectBorder = updateEmbeddedObjectBorder;
  }


  public Request updateEmbeddedObjectPosition(UpdateEmbeddedObjectPositionRequest updateEmbeddedObjectPosition) {
    this.updateEmbeddedObjectPosition = updateEmbeddedObjectPosition;
    return this;
  }

  /**
   * Get updateEmbeddedObjectPosition
   * @return updateEmbeddedObjectPosition
   */
  @javax.annotation.Nullable
  public UpdateEmbeddedObjectPositionRequest getUpdateEmbeddedObjectPosition() {
    return updateEmbeddedObjectPosition;
  }

  public void setUpdateEmbeddedObjectPosition(UpdateEmbeddedObjectPositionRequest updateEmbeddedObjectPosition) {
    this.updateEmbeddedObjectPosition = updateEmbeddedObjectPosition;
  }


  public Request updateFilterView(UpdateFilterViewRequest updateFilterView) {
    this.updateFilterView = updateFilterView;
    return this;
  }

  /**
   * Get updateFilterView
   * @return updateFilterView
   */
  @javax.annotation.Nullable
  public UpdateFilterViewRequest getUpdateFilterView() {
    return updateFilterView;
  }

  public void setUpdateFilterView(UpdateFilterViewRequest updateFilterView) {
    this.updateFilterView = updateFilterView;
  }


  public Request updateNamedRange(UpdateNamedRangeRequest updateNamedRange) {
    this.updateNamedRange = updateNamedRange;
    return this;
  }

  /**
   * Get updateNamedRange
   * @return updateNamedRange
   */
  @javax.annotation.Nullable
  public UpdateNamedRangeRequest getUpdateNamedRange() {
    return updateNamedRange;
  }

  public void setUpdateNamedRange(UpdateNamedRangeRequest updateNamedRange) {
    this.updateNamedRange = updateNamedRange;
  }


  public Request updateProtectedRange(UpdateProtectedRangeRequest updateProtectedRange) {
    this.updateProtectedRange = updateProtectedRange;
    return this;
  }

  /**
   * Get updateProtectedRange
   * @return updateProtectedRange
   */
  @javax.annotation.Nullable
  public UpdateProtectedRangeRequest getUpdateProtectedRange() {
    return updateProtectedRange;
  }

  public void setUpdateProtectedRange(UpdateProtectedRangeRequest updateProtectedRange) {
    this.updateProtectedRange = updateProtectedRange;
  }


  public Request updateSheetProperties(UpdateSheetPropertiesRequest updateSheetProperties) {
    this.updateSheetProperties = updateSheetProperties;
    return this;
  }

  /**
   * Get updateSheetProperties
   * @return updateSheetProperties
   */
  @javax.annotation.Nullable
  public UpdateSheetPropertiesRequest getUpdateSheetProperties() {
    return updateSheetProperties;
  }

  public void setUpdateSheetProperties(UpdateSheetPropertiesRequest updateSheetProperties) {
    this.updateSheetProperties = updateSheetProperties;
  }


  public Request updateSlicerSpec(UpdateSlicerSpecRequest updateSlicerSpec) {
    this.updateSlicerSpec = updateSlicerSpec;
    return this;
  }

  /**
   * Get updateSlicerSpec
   * @return updateSlicerSpec
   */
  @javax.annotation.Nullable
  public UpdateSlicerSpecRequest getUpdateSlicerSpec() {
    return updateSlicerSpec;
  }

  public void setUpdateSlicerSpec(UpdateSlicerSpecRequest updateSlicerSpec) {
    this.updateSlicerSpec = updateSlicerSpec;
  }


  public Request updateSpreadsheetProperties(UpdateSpreadsheetPropertiesRequest updateSpreadsheetProperties) {
    this.updateSpreadsheetProperties = updateSpreadsheetProperties;
    return this;
  }

  /**
   * Get updateSpreadsheetProperties
   * @return updateSpreadsheetProperties
   */
  @javax.annotation.Nullable
  public UpdateSpreadsheetPropertiesRequest getUpdateSpreadsheetProperties() {
    return updateSpreadsheetProperties;
  }

  public void setUpdateSpreadsheetProperties(UpdateSpreadsheetPropertiesRequest updateSpreadsheetProperties) {
    this.updateSpreadsheetProperties = updateSpreadsheetProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Request request = (Request) o;
    return Objects.equals(this.addBanding, request.addBanding) &&
        Objects.equals(this.addChart, request.addChart) &&
        Objects.equals(this.addConditionalFormatRule, request.addConditionalFormatRule) &&
        Objects.equals(this.addDataSource, request.addDataSource) &&
        Objects.equals(this.addDimensionGroup, request.addDimensionGroup) &&
        Objects.equals(this.addFilterView, request.addFilterView) &&
        Objects.equals(this.addNamedRange, request.addNamedRange) &&
        Objects.equals(this.addProtectedRange, request.addProtectedRange) &&
        Objects.equals(this.addSheet, request.addSheet) &&
        Objects.equals(this.addSlicer, request.addSlicer) &&
        Objects.equals(this.appendCells, request.appendCells) &&
        Objects.equals(this.appendDimension, request.appendDimension) &&
        Objects.equals(this.autoFill, request.autoFill) &&
        Objects.equals(this.autoResizeDimensions, request.autoResizeDimensions) &&
        Objects.equals(this.clearBasicFilter, request.clearBasicFilter) &&
        Objects.equals(this.copyPaste, request.copyPaste) &&
        Objects.equals(this.createDeveloperMetadata, request.createDeveloperMetadata) &&
        Objects.equals(this.cutPaste, request.cutPaste) &&
        Objects.equals(this.deleteBanding, request.deleteBanding) &&
        Objects.equals(this.deleteConditionalFormatRule, request.deleteConditionalFormatRule) &&
        Objects.equals(this.deleteDataSource, request.deleteDataSource) &&
        Objects.equals(this.deleteDeveloperMetadata, request.deleteDeveloperMetadata) &&
        Objects.equals(this.deleteDimension, request.deleteDimension) &&
        Objects.equals(this.deleteDimensionGroup, request.deleteDimensionGroup) &&
        Objects.equals(this.deleteDuplicates, request.deleteDuplicates) &&
        Objects.equals(this.deleteEmbeddedObject, request.deleteEmbeddedObject) &&
        Objects.equals(this.deleteFilterView, request.deleteFilterView) &&
        Objects.equals(this.deleteNamedRange, request.deleteNamedRange) &&
        Objects.equals(this.deleteProtectedRange, request.deleteProtectedRange) &&
        Objects.equals(this.deleteRange, request.deleteRange) &&
        Objects.equals(this.deleteSheet, request.deleteSheet) &&
        Objects.equals(this.duplicateFilterView, request.duplicateFilterView) &&
        Objects.equals(this.duplicateSheet, request.duplicateSheet) &&
        Objects.equals(this.findReplace, request.findReplace) &&
        Objects.equals(this.insertDimension, request.insertDimension) &&
        Objects.equals(this.insertRange, request.insertRange) &&
        Objects.equals(this.mergeCells, request.mergeCells) &&
        Objects.equals(this.moveDimension, request.moveDimension) &&
        Objects.equals(this.pasteData, request.pasteData) &&
        Objects.equals(this.randomizeRange, request.randomizeRange) &&
        Objects.equals(this.refreshDataSource, request.refreshDataSource) &&
        Objects.equals(this.repeatCell, request.repeatCell) &&
        Objects.equals(this.setBasicFilter, request.setBasicFilter) &&
        Objects.equals(this.setDataValidation, request.setDataValidation) &&
        Objects.equals(this.sortRange, request.sortRange) &&
        Objects.equals(this.textToColumns, request.textToColumns) &&
        Objects.equals(this.trimWhitespace, request.trimWhitespace) &&
        Objects.equals(this.unmergeCells, request.unmergeCells) &&
        Objects.equals(this.updateBanding, request.updateBanding) &&
        Objects.equals(this.updateBorders, request.updateBorders) &&
        Objects.equals(this.updateCells, request.updateCells) &&
        Objects.equals(this.updateChartSpec, request.updateChartSpec) &&
        Objects.equals(this.updateConditionalFormatRule, request.updateConditionalFormatRule) &&
        Objects.equals(this.updateDataSource, request.updateDataSource) &&
        Objects.equals(this.updateDeveloperMetadata, request.updateDeveloperMetadata) &&
        Objects.equals(this.updateDimensionGroup, request.updateDimensionGroup) &&
        Objects.equals(this.updateDimensionProperties, request.updateDimensionProperties) &&
        Objects.equals(this.updateEmbeddedObjectBorder, request.updateEmbeddedObjectBorder) &&
        Objects.equals(this.updateEmbeddedObjectPosition, request.updateEmbeddedObjectPosition) &&
        Objects.equals(this.updateFilterView, request.updateFilterView) &&
        Objects.equals(this.updateNamedRange, request.updateNamedRange) &&
        Objects.equals(this.updateProtectedRange, request.updateProtectedRange) &&
        Objects.equals(this.updateSheetProperties, request.updateSheetProperties) &&
        Objects.equals(this.updateSlicerSpec, request.updateSlicerSpec) &&
        Objects.equals(this.updateSpreadsheetProperties, request.updateSpreadsheetProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addBanding, addChart, addConditionalFormatRule, addDataSource, addDimensionGroup, addFilterView, addNamedRange, addProtectedRange, addSheet, addSlicer, appendCells, appendDimension, autoFill, autoResizeDimensions, clearBasicFilter, copyPaste, createDeveloperMetadata, cutPaste, deleteBanding, deleteConditionalFormatRule, deleteDataSource, deleteDeveloperMetadata, deleteDimension, deleteDimensionGroup, deleteDuplicates, deleteEmbeddedObject, deleteFilterView, deleteNamedRange, deleteProtectedRange, deleteRange, deleteSheet, duplicateFilterView, duplicateSheet, findReplace, insertDimension, insertRange, mergeCells, moveDimension, pasteData, randomizeRange, refreshDataSource, repeatCell, setBasicFilter, setDataValidation, sortRange, textToColumns, trimWhitespace, unmergeCells, updateBanding, updateBorders, updateCells, updateChartSpec, updateConditionalFormatRule, updateDataSource, updateDeveloperMetadata, updateDimensionGroup, updateDimensionProperties, updateEmbeddedObjectBorder, updateEmbeddedObjectPosition, updateFilterView, updateNamedRange, updateProtectedRange, updateSheetProperties, updateSlicerSpec, updateSpreadsheetProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Request {\n");
    sb.append("    addBanding: ").append(toIndentedString(addBanding)).append("\n");
    sb.append("    addChart: ").append(toIndentedString(addChart)).append("\n");
    sb.append("    addConditionalFormatRule: ").append(toIndentedString(addConditionalFormatRule)).append("\n");
    sb.append("    addDataSource: ").append(toIndentedString(addDataSource)).append("\n");
    sb.append("    addDimensionGroup: ").append(toIndentedString(addDimensionGroup)).append("\n");
    sb.append("    addFilterView: ").append(toIndentedString(addFilterView)).append("\n");
    sb.append("    addNamedRange: ").append(toIndentedString(addNamedRange)).append("\n");
    sb.append("    addProtectedRange: ").append(toIndentedString(addProtectedRange)).append("\n");
    sb.append("    addSheet: ").append(toIndentedString(addSheet)).append("\n");
    sb.append("    addSlicer: ").append(toIndentedString(addSlicer)).append("\n");
    sb.append("    appendCells: ").append(toIndentedString(appendCells)).append("\n");
    sb.append("    appendDimension: ").append(toIndentedString(appendDimension)).append("\n");
    sb.append("    autoFill: ").append(toIndentedString(autoFill)).append("\n");
    sb.append("    autoResizeDimensions: ").append(toIndentedString(autoResizeDimensions)).append("\n");
    sb.append("    clearBasicFilter: ").append(toIndentedString(clearBasicFilter)).append("\n");
    sb.append("    copyPaste: ").append(toIndentedString(copyPaste)).append("\n");
    sb.append("    createDeveloperMetadata: ").append(toIndentedString(createDeveloperMetadata)).append("\n");
    sb.append("    cutPaste: ").append(toIndentedString(cutPaste)).append("\n");
    sb.append("    deleteBanding: ").append(toIndentedString(deleteBanding)).append("\n");
    sb.append("    deleteConditionalFormatRule: ").append(toIndentedString(deleteConditionalFormatRule)).append("\n");
    sb.append("    deleteDataSource: ").append(toIndentedString(deleteDataSource)).append("\n");
    sb.append("    deleteDeveloperMetadata: ").append(toIndentedString(deleteDeveloperMetadata)).append("\n");
    sb.append("    deleteDimension: ").append(toIndentedString(deleteDimension)).append("\n");
    sb.append("    deleteDimensionGroup: ").append(toIndentedString(deleteDimensionGroup)).append("\n");
    sb.append("    deleteDuplicates: ").append(toIndentedString(deleteDuplicates)).append("\n");
    sb.append("    deleteEmbeddedObject: ").append(toIndentedString(deleteEmbeddedObject)).append("\n");
    sb.append("    deleteFilterView: ").append(toIndentedString(deleteFilterView)).append("\n");
    sb.append("    deleteNamedRange: ").append(toIndentedString(deleteNamedRange)).append("\n");
    sb.append("    deleteProtectedRange: ").append(toIndentedString(deleteProtectedRange)).append("\n");
    sb.append("    deleteRange: ").append(toIndentedString(deleteRange)).append("\n");
    sb.append("    deleteSheet: ").append(toIndentedString(deleteSheet)).append("\n");
    sb.append("    duplicateFilterView: ").append(toIndentedString(duplicateFilterView)).append("\n");
    sb.append("    duplicateSheet: ").append(toIndentedString(duplicateSheet)).append("\n");
    sb.append("    findReplace: ").append(toIndentedString(findReplace)).append("\n");
    sb.append("    insertDimension: ").append(toIndentedString(insertDimension)).append("\n");
    sb.append("    insertRange: ").append(toIndentedString(insertRange)).append("\n");
    sb.append("    mergeCells: ").append(toIndentedString(mergeCells)).append("\n");
    sb.append("    moveDimension: ").append(toIndentedString(moveDimension)).append("\n");
    sb.append("    pasteData: ").append(toIndentedString(pasteData)).append("\n");
    sb.append("    randomizeRange: ").append(toIndentedString(randomizeRange)).append("\n");
    sb.append("    refreshDataSource: ").append(toIndentedString(refreshDataSource)).append("\n");
    sb.append("    repeatCell: ").append(toIndentedString(repeatCell)).append("\n");
    sb.append("    setBasicFilter: ").append(toIndentedString(setBasicFilter)).append("\n");
    sb.append("    setDataValidation: ").append(toIndentedString(setDataValidation)).append("\n");
    sb.append("    sortRange: ").append(toIndentedString(sortRange)).append("\n");
    sb.append("    textToColumns: ").append(toIndentedString(textToColumns)).append("\n");
    sb.append("    trimWhitespace: ").append(toIndentedString(trimWhitespace)).append("\n");
    sb.append("    unmergeCells: ").append(toIndentedString(unmergeCells)).append("\n");
    sb.append("    updateBanding: ").append(toIndentedString(updateBanding)).append("\n");
    sb.append("    updateBorders: ").append(toIndentedString(updateBorders)).append("\n");
    sb.append("    updateCells: ").append(toIndentedString(updateCells)).append("\n");
    sb.append("    updateChartSpec: ").append(toIndentedString(updateChartSpec)).append("\n");
    sb.append("    updateConditionalFormatRule: ").append(toIndentedString(updateConditionalFormatRule)).append("\n");
    sb.append("    updateDataSource: ").append(toIndentedString(updateDataSource)).append("\n");
    sb.append("    updateDeveloperMetadata: ").append(toIndentedString(updateDeveloperMetadata)).append("\n");
    sb.append("    updateDimensionGroup: ").append(toIndentedString(updateDimensionGroup)).append("\n");
    sb.append("    updateDimensionProperties: ").append(toIndentedString(updateDimensionProperties)).append("\n");
    sb.append("    updateEmbeddedObjectBorder: ").append(toIndentedString(updateEmbeddedObjectBorder)).append("\n");
    sb.append("    updateEmbeddedObjectPosition: ").append(toIndentedString(updateEmbeddedObjectPosition)).append("\n");
    sb.append("    updateFilterView: ").append(toIndentedString(updateFilterView)).append("\n");
    sb.append("    updateNamedRange: ").append(toIndentedString(updateNamedRange)).append("\n");
    sb.append("    updateProtectedRange: ").append(toIndentedString(updateProtectedRange)).append("\n");
    sb.append("    updateSheetProperties: ").append(toIndentedString(updateSheetProperties)).append("\n");
    sb.append("    updateSlicerSpec: ").append(toIndentedString(updateSlicerSpec)).append("\n");
    sb.append("    updateSpreadsheetProperties: ").append(toIndentedString(updateSpreadsheetProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addBanding");
    openapiFields.add("addChart");
    openapiFields.add("addConditionalFormatRule");
    openapiFields.add("addDataSource");
    openapiFields.add("addDimensionGroup");
    openapiFields.add("addFilterView");
    openapiFields.add("addNamedRange");
    openapiFields.add("addProtectedRange");
    openapiFields.add("addSheet");
    openapiFields.add("addSlicer");
    openapiFields.add("appendCells");
    openapiFields.add("appendDimension");
    openapiFields.add("autoFill");
    openapiFields.add("autoResizeDimensions");
    openapiFields.add("clearBasicFilter");
    openapiFields.add("copyPaste");
    openapiFields.add("createDeveloperMetadata");
    openapiFields.add("cutPaste");
    openapiFields.add("deleteBanding");
    openapiFields.add("deleteConditionalFormatRule");
    openapiFields.add("deleteDataSource");
    openapiFields.add("deleteDeveloperMetadata");
    openapiFields.add("deleteDimension");
    openapiFields.add("deleteDimensionGroup");
    openapiFields.add("deleteDuplicates");
    openapiFields.add("deleteEmbeddedObject");
    openapiFields.add("deleteFilterView");
    openapiFields.add("deleteNamedRange");
    openapiFields.add("deleteProtectedRange");
    openapiFields.add("deleteRange");
    openapiFields.add("deleteSheet");
    openapiFields.add("duplicateFilterView");
    openapiFields.add("duplicateSheet");
    openapiFields.add("findReplace");
    openapiFields.add("insertDimension");
    openapiFields.add("insertRange");
    openapiFields.add("mergeCells");
    openapiFields.add("moveDimension");
    openapiFields.add("pasteData");
    openapiFields.add("randomizeRange");
    openapiFields.add("refreshDataSource");
    openapiFields.add("repeatCell");
    openapiFields.add("setBasicFilter");
    openapiFields.add("setDataValidation");
    openapiFields.add("sortRange");
    openapiFields.add("textToColumns");
    openapiFields.add("trimWhitespace");
    openapiFields.add("unmergeCells");
    openapiFields.add("updateBanding");
    openapiFields.add("updateBorders");
    openapiFields.add("updateCells");
    openapiFields.add("updateChartSpec");
    openapiFields.add("updateConditionalFormatRule");
    openapiFields.add("updateDataSource");
    openapiFields.add("updateDeveloperMetadata");
    openapiFields.add("updateDimensionGroup");
    openapiFields.add("updateDimensionProperties");
    openapiFields.add("updateEmbeddedObjectBorder");
    openapiFields.add("updateEmbeddedObjectPosition");
    openapiFields.add("updateFilterView");
    openapiFields.add("updateNamedRange");
    openapiFields.add("updateProtectedRange");
    openapiFields.add("updateSheetProperties");
    openapiFields.add("updateSlicerSpec");
    openapiFields.add("updateSpreadsheetProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Request is not found in the empty JSON string", Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `addBanding`
      if (jsonObj.get("addBanding") != null && !jsonObj.get("addBanding").isJsonNull()) {
        AddBandingRequest.validateJsonElement(jsonObj.get("addBanding"));
      }
      // validate the optional field `addChart`
      if (jsonObj.get("addChart") != null && !jsonObj.get("addChart").isJsonNull()) {
        AddChartRequest.validateJsonElement(jsonObj.get("addChart"));
      }
      // validate the optional field `addConditionalFormatRule`
      if (jsonObj.get("addConditionalFormatRule") != null && !jsonObj.get("addConditionalFormatRule").isJsonNull()) {
        AddConditionalFormatRuleRequest.validateJsonElement(jsonObj.get("addConditionalFormatRule"));
      }
      // validate the optional field `addDataSource`
      if (jsonObj.get("addDataSource") != null && !jsonObj.get("addDataSource").isJsonNull()) {
        AddDataSourceRequest.validateJsonElement(jsonObj.get("addDataSource"));
      }
      // validate the optional field `addDimensionGroup`
      if (jsonObj.get("addDimensionGroup") != null && !jsonObj.get("addDimensionGroup").isJsonNull()) {
        AddDimensionGroupRequest.validateJsonElement(jsonObj.get("addDimensionGroup"));
      }
      // validate the optional field `addFilterView`
      if (jsonObj.get("addFilterView") != null && !jsonObj.get("addFilterView").isJsonNull()) {
        AddFilterViewRequest.validateJsonElement(jsonObj.get("addFilterView"));
      }
      // validate the optional field `addNamedRange`
      if (jsonObj.get("addNamedRange") != null && !jsonObj.get("addNamedRange").isJsonNull()) {
        AddNamedRangeRequest.validateJsonElement(jsonObj.get("addNamedRange"));
      }
      // validate the optional field `addProtectedRange`
      if (jsonObj.get("addProtectedRange") != null && !jsonObj.get("addProtectedRange").isJsonNull()) {
        AddProtectedRangeRequest.validateJsonElement(jsonObj.get("addProtectedRange"));
      }
      // validate the optional field `addSheet`
      if (jsonObj.get("addSheet") != null && !jsonObj.get("addSheet").isJsonNull()) {
        AddSheetRequest.validateJsonElement(jsonObj.get("addSheet"));
      }
      // validate the optional field `addSlicer`
      if (jsonObj.get("addSlicer") != null && !jsonObj.get("addSlicer").isJsonNull()) {
        AddSlicerRequest.validateJsonElement(jsonObj.get("addSlicer"));
      }
      // validate the optional field `appendCells`
      if (jsonObj.get("appendCells") != null && !jsonObj.get("appendCells").isJsonNull()) {
        AppendCellsRequest.validateJsonElement(jsonObj.get("appendCells"));
      }
      // validate the optional field `appendDimension`
      if (jsonObj.get("appendDimension") != null && !jsonObj.get("appendDimension").isJsonNull()) {
        AppendDimensionRequest.validateJsonElement(jsonObj.get("appendDimension"));
      }
      // validate the optional field `autoFill`
      if (jsonObj.get("autoFill") != null && !jsonObj.get("autoFill").isJsonNull()) {
        AutoFillRequest.validateJsonElement(jsonObj.get("autoFill"));
      }
      // validate the optional field `autoResizeDimensions`
      if (jsonObj.get("autoResizeDimensions") != null && !jsonObj.get("autoResizeDimensions").isJsonNull()) {
        AutoResizeDimensionsRequest.validateJsonElement(jsonObj.get("autoResizeDimensions"));
      }
      // validate the optional field `clearBasicFilter`
      if (jsonObj.get("clearBasicFilter") != null && !jsonObj.get("clearBasicFilter").isJsonNull()) {
        ClearBasicFilterRequest.validateJsonElement(jsonObj.get("clearBasicFilter"));
      }
      // validate the optional field `copyPaste`
      if (jsonObj.get("copyPaste") != null && !jsonObj.get("copyPaste").isJsonNull()) {
        CopyPasteRequest.validateJsonElement(jsonObj.get("copyPaste"));
      }
      // validate the optional field `createDeveloperMetadata`
      if (jsonObj.get("createDeveloperMetadata") != null && !jsonObj.get("createDeveloperMetadata").isJsonNull()) {
        CreateDeveloperMetadataRequest.validateJsonElement(jsonObj.get("createDeveloperMetadata"));
      }
      // validate the optional field `cutPaste`
      if (jsonObj.get("cutPaste") != null && !jsonObj.get("cutPaste").isJsonNull()) {
        CutPasteRequest.validateJsonElement(jsonObj.get("cutPaste"));
      }
      // validate the optional field `deleteBanding`
      if (jsonObj.get("deleteBanding") != null && !jsonObj.get("deleteBanding").isJsonNull()) {
        DeleteBandingRequest.validateJsonElement(jsonObj.get("deleteBanding"));
      }
      // validate the optional field `deleteConditionalFormatRule`
      if (jsonObj.get("deleteConditionalFormatRule") != null && !jsonObj.get("deleteConditionalFormatRule").isJsonNull()) {
        DeleteConditionalFormatRuleRequest.validateJsonElement(jsonObj.get("deleteConditionalFormatRule"));
      }
      // validate the optional field `deleteDataSource`
      if (jsonObj.get("deleteDataSource") != null && !jsonObj.get("deleteDataSource").isJsonNull()) {
        DeleteDataSourceRequest.validateJsonElement(jsonObj.get("deleteDataSource"));
      }
      // validate the optional field `deleteDeveloperMetadata`
      if (jsonObj.get("deleteDeveloperMetadata") != null && !jsonObj.get("deleteDeveloperMetadata").isJsonNull()) {
        DeleteDeveloperMetadataRequest.validateJsonElement(jsonObj.get("deleteDeveloperMetadata"));
      }
      // validate the optional field `deleteDimension`
      if (jsonObj.get("deleteDimension") != null && !jsonObj.get("deleteDimension").isJsonNull()) {
        DeleteDimensionRequest.validateJsonElement(jsonObj.get("deleteDimension"));
      }
      // validate the optional field `deleteDimensionGroup`
      if (jsonObj.get("deleteDimensionGroup") != null && !jsonObj.get("deleteDimensionGroup").isJsonNull()) {
        DeleteDimensionGroupRequest.validateJsonElement(jsonObj.get("deleteDimensionGroup"));
      }
      // validate the optional field `deleteDuplicates`
      if (jsonObj.get("deleteDuplicates") != null && !jsonObj.get("deleteDuplicates").isJsonNull()) {
        DeleteDuplicatesRequest.validateJsonElement(jsonObj.get("deleteDuplicates"));
      }
      // validate the optional field `deleteEmbeddedObject`
      if (jsonObj.get("deleteEmbeddedObject") != null && !jsonObj.get("deleteEmbeddedObject").isJsonNull()) {
        DeleteEmbeddedObjectRequest.validateJsonElement(jsonObj.get("deleteEmbeddedObject"));
      }
      // validate the optional field `deleteFilterView`
      if (jsonObj.get("deleteFilterView") != null && !jsonObj.get("deleteFilterView").isJsonNull()) {
        DeleteFilterViewRequest.validateJsonElement(jsonObj.get("deleteFilterView"));
      }
      // validate the optional field `deleteNamedRange`
      if (jsonObj.get("deleteNamedRange") != null && !jsonObj.get("deleteNamedRange").isJsonNull()) {
        DeleteNamedRangeRequest.validateJsonElement(jsonObj.get("deleteNamedRange"));
      }
      // validate the optional field `deleteProtectedRange`
      if (jsonObj.get("deleteProtectedRange") != null && !jsonObj.get("deleteProtectedRange").isJsonNull()) {
        DeleteProtectedRangeRequest.validateJsonElement(jsonObj.get("deleteProtectedRange"));
      }
      // validate the optional field `deleteRange`
      if (jsonObj.get("deleteRange") != null && !jsonObj.get("deleteRange").isJsonNull()) {
        DeleteRangeRequest.validateJsonElement(jsonObj.get("deleteRange"));
      }
      // validate the optional field `deleteSheet`
      if (jsonObj.get("deleteSheet") != null && !jsonObj.get("deleteSheet").isJsonNull()) {
        DeleteSheetRequest.validateJsonElement(jsonObj.get("deleteSheet"));
      }
      // validate the optional field `duplicateFilterView`
      if (jsonObj.get("duplicateFilterView") != null && !jsonObj.get("duplicateFilterView").isJsonNull()) {
        DuplicateFilterViewRequest.validateJsonElement(jsonObj.get("duplicateFilterView"));
      }
      // validate the optional field `duplicateSheet`
      if (jsonObj.get("duplicateSheet") != null && !jsonObj.get("duplicateSheet").isJsonNull()) {
        DuplicateSheetRequest.validateJsonElement(jsonObj.get("duplicateSheet"));
      }
      // validate the optional field `findReplace`
      if (jsonObj.get("findReplace") != null && !jsonObj.get("findReplace").isJsonNull()) {
        FindReplaceRequest.validateJsonElement(jsonObj.get("findReplace"));
      }
      // validate the optional field `insertDimension`
      if (jsonObj.get("insertDimension") != null && !jsonObj.get("insertDimension").isJsonNull()) {
        InsertDimensionRequest.validateJsonElement(jsonObj.get("insertDimension"));
      }
      // validate the optional field `insertRange`
      if (jsonObj.get("insertRange") != null && !jsonObj.get("insertRange").isJsonNull()) {
        InsertRangeRequest.validateJsonElement(jsonObj.get("insertRange"));
      }
      // validate the optional field `mergeCells`
      if (jsonObj.get("mergeCells") != null && !jsonObj.get("mergeCells").isJsonNull()) {
        MergeCellsRequest.validateJsonElement(jsonObj.get("mergeCells"));
      }
      // validate the optional field `moveDimension`
      if (jsonObj.get("moveDimension") != null && !jsonObj.get("moveDimension").isJsonNull()) {
        MoveDimensionRequest.validateJsonElement(jsonObj.get("moveDimension"));
      }
      // validate the optional field `pasteData`
      if (jsonObj.get("pasteData") != null && !jsonObj.get("pasteData").isJsonNull()) {
        PasteDataRequest.validateJsonElement(jsonObj.get("pasteData"));
      }
      // validate the optional field `randomizeRange`
      if (jsonObj.get("randomizeRange") != null && !jsonObj.get("randomizeRange").isJsonNull()) {
        RandomizeRangeRequest.validateJsonElement(jsonObj.get("randomizeRange"));
      }
      // validate the optional field `refreshDataSource`
      if (jsonObj.get("refreshDataSource") != null && !jsonObj.get("refreshDataSource").isJsonNull()) {
        RefreshDataSourceRequest.validateJsonElement(jsonObj.get("refreshDataSource"));
      }
      // validate the optional field `repeatCell`
      if (jsonObj.get("repeatCell") != null && !jsonObj.get("repeatCell").isJsonNull()) {
        RepeatCellRequest.validateJsonElement(jsonObj.get("repeatCell"));
      }
      // validate the optional field `setBasicFilter`
      if (jsonObj.get("setBasicFilter") != null && !jsonObj.get("setBasicFilter").isJsonNull()) {
        SetBasicFilterRequest.validateJsonElement(jsonObj.get("setBasicFilter"));
      }
      // validate the optional field `setDataValidation`
      if (jsonObj.get("setDataValidation") != null && !jsonObj.get("setDataValidation").isJsonNull()) {
        SetDataValidationRequest.validateJsonElement(jsonObj.get("setDataValidation"));
      }
      // validate the optional field `sortRange`
      if (jsonObj.get("sortRange") != null && !jsonObj.get("sortRange").isJsonNull()) {
        SortRangeRequest.validateJsonElement(jsonObj.get("sortRange"));
      }
      // validate the optional field `textToColumns`
      if (jsonObj.get("textToColumns") != null && !jsonObj.get("textToColumns").isJsonNull()) {
        TextToColumnsRequest.validateJsonElement(jsonObj.get("textToColumns"));
      }
      // validate the optional field `trimWhitespace`
      if (jsonObj.get("trimWhitespace") != null && !jsonObj.get("trimWhitespace").isJsonNull()) {
        TrimWhitespaceRequest.validateJsonElement(jsonObj.get("trimWhitespace"));
      }
      // validate the optional field `unmergeCells`
      if (jsonObj.get("unmergeCells") != null && !jsonObj.get("unmergeCells").isJsonNull()) {
        UnmergeCellsRequest.validateJsonElement(jsonObj.get("unmergeCells"));
      }
      // validate the optional field `updateBanding`
      if (jsonObj.get("updateBanding") != null && !jsonObj.get("updateBanding").isJsonNull()) {
        UpdateBandingRequest.validateJsonElement(jsonObj.get("updateBanding"));
      }
      // validate the optional field `updateBorders`
      if (jsonObj.get("updateBorders") != null && !jsonObj.get("updateBorders").isJsonNull()) {
        UpdateBordersRequest.validateJsonElement(jsonObj.get("updateBorders"));
      }
      // validate the optional field `updateCells`
      if (jsonObj.get("updateCells") != null && !jsonObj.get("updateCells").isJsonNull()) {
        UpdateCellsRequest.validateJsonElement(jsonObj.get("updateCells"));
      }
      // validate the optional field `updateChartSpec`
      if (jsonObj.get("updateChartSpec") != null && !jsonObj.get("updateChartSpec").isJsonNull()) {
        UpdateChartSpecRequest.validateJsonElement(jsonObj.get("updateChartSpec"));
      }
      // validate the optional field `updateConditionalFormatRule`
      if (jsonObj.get("updateConditionalFormatRule") != null && !jsonObj.get("updateConditionalFormatRule").isJsonNull()) {
        UpdateConditionalFormatRuleRequest.validateJsonElement(jsonObj.get("updateConditionalFormatRule"));
      }
      // validate the optional field `updateDataSource`
      if (jsonObj.get("updateDataSource") != null && !jsonObj.get("updateDataSource").isJsonNull()) {
        UpdateDataSourceRequest.validateJsonElement(jsonObj.get("updateDataSource"));
      }
      // validate the optional field `updateDeveloperMetadata`
      if (jsonObj.get("updateDeveloperMetadata") != null && !jsonObj.get("updateDeveloperMetadata").isJsonNull()) {
        UpdateDeveloperMetadataRequest.validateJsonElement(jsonObj.get("updateDeveloperMetadata"));
      }
      // validate the optional field `updateDimensionGroup`
      if (jsonObj.get("updateDimensionGroup") != null && !jsonObj.get("updateDimensionGroup").isJsonNull()) {
        UpdateDimensionGroupRequest.validateJsonElement(jsonObj.get("updateDimensionGroup"));
      }
      // validate the optional field `updateDimensionProperties`
      if (jsonObj.get("updateDimensionProperties") != null && !jsonObj.get("updateDimensionProperties").isJsonNull()) {
        UpdateDimensionPropertiesRequest.validateJsonElement(jsonObj.get("updateDimensionProperties"));
      }
      // validate the optional field `updateEmbeddedObjectBorder`
      if (jsonObj.get("updateEmbeddedObjectBorder") != null && !jsonObj.get("updateEmbeddedObjectBorder").isJsonNull()) {
        UpdateEmbeddedObjectBorderRequest.validateJsonElement(jsonObj.get("updateEmbeddedObjectBorder"));
      }
      // validate the optional field `updateEmbeddedObjectPosition`
      if (jsonObj.get("updateEmbeddedObjectPosition") != null && !jsonObj.get("updateEmbeddedObjectPosition").isJsonNull()) {
        UpdateEmbeddedObjectPositionRequest.validateJsonElement(jsonObj.get("updateEmbeddedObjectPosition"));
      }
      // validate the optional field `updateFilterView`
      if (jsonObj.get("updateFilterView") != null && !jsonObj.get("updateFilterView").isJsonNull()) {
        UpdateFilterViewRequest.validateJsonElement(jsonObj.get("updateFilterView"));
      }
      // validate the optional field `updateNamedRange`
      if (jsonObj.get("updateNamedRange") != null && !jsonObj.get("updateNamedRange").isJsonNull()) {
        UpdateNamedRangeRequest.validateJsonElement(jsonObj.get("updateNamedRange"));
      }
      // validate the optional field `updateProtectedRange`
      if (jsonObj.get("updateProtectedRange") != null && !jsonObj.get("updateProtectedRange").isJsonNull()) {
        UpdateProtectedRangeRequest.validateJsonElement(jsonObj.get("updateProtectedRange"));
      }
      // validate the optional field `updateSheetProperties`
      if (jsonObj.get("updateSheetProperties") != null && !jsonObj.get("updateSheetProperties").isJsonNull()) {
        UpdateSheetPropertiesRequest.validateJsonElement(jsonObj.get("updateSheetProperties"));
      }
      // validate the optional field `updateSlicerSpec`
      if (jsonObj.get("updateSlicerSpec") != null && !jsonObj.get("updateSlicerSpec").isJsonNull()) {
        UpdateSlicerSpecRequest.validateJsonElement(jsonObj.get("updateSlicerSpec"));
      }
      // validate the optional field `updateSpreadsheetProperties`
      if (jsonObj.get("updateSpreadsheetProperties") != null && !jsonObj.get("updateSpreadsheetProperties").isJsonNull()) {
        UpdateSpreadsheetPropertiesRequest.validateJsonElement(jsonObj.get("updateSpreadsheetProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Request.class));

       return (TypeAdapter<T>) new TypeAdapter<Request>() {
           @Override
           public void write(JsonWriter out, Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Request
   * @throws IOException if the JSON string is invalid with respect to Request
   */
  public static Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Request.class);
  }

  /**
   * Convert an instance of Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

