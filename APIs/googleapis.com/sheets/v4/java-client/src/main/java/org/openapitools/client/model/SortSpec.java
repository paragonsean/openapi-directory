/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Color;
import org.openapitools.client.model.ColorStyle;
import org.openapitools.client.model.DataSourceColumnReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A sort order associated with a specific column or row.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SortSpec {
  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "backgroundColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private Color backgroundColor;

  public static final String SERIALIZED_NAME_BACKGROUND_COLOR_STYLE = "backgroundColorStyle";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR_STYLE)
  private ColorStyle backgroundColorStyle;

  public static final String SERIALIZED_NAME_DATA_SOURCE_COLUMN_REFERENCE = "dataSourceColumnReference";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_COLUMN_REFERENCE)
  private DataSourceColumnReference dataSourceColumnReference;

  public static final String SERIALIZED_NAME_DIMENSION_INDEX = "dimensionIndex";
  @SerializedName(SERIALIZED_NAME_DIMENSION_INDEX)
  private Integer dimensionIndex;

  public static final String SERIALIZED_NAME_FOREGROUND_COLOR = "foregroundColor";
  @SerializedName(SERIALIZED_NAME_FOREGROUND_COLOR)
  private Color foregroundColor;

  public static final String SERIALIZED_NAME_FOREGROUND_COLOR_STYLE = "foregroundColorStyle";
  @SerializedName(SERIALIZED_NAME_FOREGROUND_COLOR_STYLE)
  private ColorStyle foregroundColorStyle;

  /**
   * The order data should be sorted.
   */
  @JsonAdapter(SortOrderEnum.Adapter.class)
  public enum SortOrderEnum {
    SORT_ORDER_UNSPECIFIED("SORT_ORDER_UNSPECIFIED"),
    
    ASCENDING("ASCENDING"),
    
    DESCENDING("DESCENDING");

    private String value;

    SortOrderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortOrderEnum fromValue(String value) {
      for (SortOrderEnum b : SortOrderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortOrderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortOrderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortOrderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortOrderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SortOrderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SORT_ORDER = "sortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private SortOrderEnum sortOrder;

  public SortSpec() {
  }

  public SortSpec backgroundColor(Color backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * Get backgroundColor
   * @return backgroundColor
   */
  @javax.annotation.Nullable
  public Color getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(Color backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public SortSpec backgroundColorStyle(ColorStyle backgroundColorStyle) {
    this.backgroundColorStyle = backgroundColorStyle;
    return this;
  }

  /**
   * Get backgroundColorStyle
   * @return backgroundColorStyle
   */
  @javax.annotation.Nullable
  public ColorStyle getBackgroundColorStyle() {
    return backgroundColorStyle;
  }

  public void setBackgroundColorStyle(ColorStyle backgroundColorStyle) {
    this.backgroundColorStyle = backgroundColorStyle;
  }


  public SortSpec dataSourceColumnReference(DataSourceColumnReference dataSourceColumnReference) {
    this.dataSourceColumnReference = dataSourceColumnReference;
    return this;
  }

  /**
   * Get dataSourceColumnReference
   * @return dataSourceColumnReference
   */
  @javax.annotation.Nullable
  public DataSourceColumnReference getDataSourceColumnReference() {
    return dataSourceColumnReference;
  }

  public void setDataSourceColumnReference(DataSourceColumnReference dataSourceColumnReference) {
    this.dataSourceColumnReference = dataSourceColumnReference;
  }


  public SortSpec dimensionIndex(Integer dimensionIndex) {
    this.dimensionIndex = dimensionIndex;
    return this;
  }

  /**
   * The dimension the sort should be applied to.
   * @return dimensionIndex
   */
  @javax.annotation.Nullable
  public Integer getDimensionIndex() {
    return dimensionIndex;
  }

  public void setDimensionIndex(Integer dimensionIndex) {
    this.dimensionIndex = dimensionIndex;
  }


  public SortSpec foregroundColor(Color foregroundColor) {
    this.foregroundColor = foregroundColor;
    return this;
  }

  /**
   * Get foregroundColor
   * @return foregroundColor
   */
  @javax.annotation.Nullable
  public Color getForegroundColor() {
    return foregroundColor;
  }

  public void setForegroundColor(Color foregroundColor) {
    this.foregroundColor = foregroundColor;
  }


  public SortSpec foregroundColorStyle(ColorStyle foregroundColorStyle) {
    this.foregroundColorStyle = foregroundColorStyle;
    return this;
  }

  /**
   * Get foregroundColorStyle
   * @return foregroundColorStyle
   */
  @javax.annotation.Nullable
  public ColorStyle getForegroundColorStyle() {
    return foregroundColorStyle;
  }

  public void setForegroundColorStyle(ColorStyle foregroundColorStyle) {
    this.foregroundColorStyle = foregroundColorStyle;
  }


  public SortSpec sortOrder(SortOrderEnum sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * The order data should be sorted.
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public SortOrderEnum getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(SortOrderEnum sortOrder) {
    this.sortOrder = sortOrder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SortSpec sortSpec = (SortSpec) o;
    return Objects.equals(this.backgroundColor, sortSpec.backgroundColor) &&
        Objects.equals(this.backgroundColorStyle, sortSpec.backgroundColorStyle) &&
        Objects.equals(this.dataSourceColumnReference, sortSpec.dataSourceColumnReference) &&
        Objects.equals(this.dimensionIndex, sortSpec.dimensionIndex) &&
        Objects.equals(this.foregroundColor, sortSpec.foregroundColor) &&
        Objects.equals(this.foregroundColorStyle, sortSpec.foregroundColorStyle) &&
        Objects.equals(this.sortOrder, sortSpec.sortOrder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColor, backgroundColorStyle, dataSourceColumnReference, dimensionIndex, foregroundColor, foregroundColorStyle, sortOrder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SortSpec {\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    backgroundColorStyle: ").append(toIndentedString(backgroundColorStyle)).append("\n");
    sb.append("    dataSourceColumnReference: ").append(toIndentedString(dataSourceColumnReference)).append("\n");
    sb.append("    dimensionIndex: ").append(toIndentedString(dimensionIndex)).append("\n");
    sb.append("    foregroundColor: ").append(toIndentedString(foregroundColor)).append("\n");
    sb.append("    foregroundColorStyle: ").append(toIndentedString(foregroundColorStyle)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backgroundColor");
    openapiFields.add("backgroundColorStyle");
    openapiFields.add("dataSourceColumnReference");
    openapiFields.add("dimensionIndex");
    openapiFields.add("foregroundColor");
    openapiFields.add("foregroundColorStyle");
    openapiFields.add("sortOrder");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SortSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SortSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SortSpec is not found in the empty JSON string", SortSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SortSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SortSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backgroundColor`
      if (jsonObj.get("backgroundColor") != null && !jsonObj.get("backgroundColor").isJsonNull()) {
        Color.validateJsonElement(jsonObj.get("backgroundColor"));
      }
      // validate the optional field `backgroundColorStyle`
      if (jsonObj.get("backgroundColorStyle") != null && !jsonObj.get("backgroundColorStyle").isJsonNull()) {
        ColorStyle.validateJsonElement(jsonObj.get("backgroundColorStyle"));
      }
      // validate the optional field `dataSourceColumnReference`
      if (jsonObj.get("dataSourceColumnReference") != null && !jsonObj.get("dataSourceColumnReference").isJsonNull()) {
        DataSourceColumnReference.validateJsonElement(jsonObj.get("dataSourceColumnReference"));
      }
      // validate the optional field `foregroundColor`
      if (jsonObj.get("foregroundColor") != null && !jsonObj.get("foregroundColor").isJsonNull()) {
        Color.validateJsonElement(jsonObj.get("foregroundColor"));
      }
      // validate the optional field `foregroundColorStyle`
      if (jsonObj.get("foregroundColorStyle") != null && !jsonObj.get("foregroundColorStyle").isJsonNull()) {
        ColorStyle.validateJsonElement(jsonObj.get("foregroundColorStyle"));
      }
      if ((jsonObj.get("sortOrder") != null && !jsonObj.get("sortOrder").isJsonNull()) && !jsonObj.get("sortOrder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortOrder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortOrder").toString()));
      }
      // validate the optional field `sortOrder`
      if (jsonObj.get("sortOrder") != null && !jsonObj.get("sortOrder").isJsonNull()) {
        SortOrderEnum.validateJsonElement(jsonObj.get("sortOrder"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SortSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SortSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SortSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SortSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<SortSpec>() {
           @Override
           public void write(JsonWriter out, SortSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SortSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SortSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SortSpec
   * @throws IOException if the JSON string is invalid with respect to SortSpec
   */
  public static SortSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SortSpec.class);
  }

  /**
   * Convert an instance of SortSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

