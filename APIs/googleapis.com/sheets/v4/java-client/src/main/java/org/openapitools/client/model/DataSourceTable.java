/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataExecutionStatus;
import org.openapitools.client.model.DataSourceColumnReference;
import org.openapitools.client.model.FilterSpec;
import org.openapitools.client.model.SortSpec;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A data source table, which allows the user to import a static table of data from the DataSource into Sheets. This is also known as \&quot;Extract\&quot; in the Sheets editor.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataSourceTable {
  /**
   * The type to select columns for the data source table. Defaults to SELECTED.
   */
  @JsonAdapter(ColumnSelectionTypeEnum.Adapter.class)
  public enum ColumnSelectionTypeEnum {
    DATA_SOURCE_TABLE_COLUMN_SELECTION_TYPE_UNSPECIFIED("DATA_SOURCE_TABLE_COLUMN_SELECTION_TYPE_UNSPECIFIED"),
    
    SELECTED("SELECTED"),
    
    SYNC_ALL("SYNC_ALL");

    private String value;

    ColumnSelectionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ColumnSelectionTypeEnum fromValue(String value) {
      for (ColumnSelectionTypeEnum b : ColumnSelectionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ColumnSelectionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ColumnSelectionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ColumnSelectionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ColumnSelectionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ColumnSelectionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COLUMN_SELECTION_TYPE = "columnSelectionType";
  @SerializedName(SERIALIZED_NAME_COLUMN_SELECTION_TYPE)
  private ColumnSelectionTypeEnum columnSelectionType;

  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<DataSourceColumnReference> columns = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_EXECUTION_STATUS = "dataExecutionStatus";
  @SerializedName(SERIALIZED_NAME_DATA_EXECUTION_STATUS)
  private DataExecutionStatus dataExecutionStatus;

  public static final String SERIALIZED_NAME_DATA_SOURCE_ID = "dataSourceId";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_ID)
  private String dataSourceId;

  public static final String SERIALIZED_NAME_FILTER_SPECS = "filterSpecs";
  @SerializedName(SERIALIZED_NAME_FILTER_SPECS)
  private List<FilterSpec> filterSpecs = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROW_LIMIT = "rowLimit";
  @SerializedName(SERIALIZED_NAME_ROW_LIMIT)
  private Integer rowLimit;

  public static final String SERIALIZED_NAME_SORT_SPECS = "sortSpecs";
  @SerializedName(SERIALIZED_NAME_SORT_SPECS)
  private List<SortSpec> sortSpecs = new ArrayList<>();

  public DataSourceTable() {
  }

  public DataSourceTable columnSelectionType(ColumnSelectionTypeEnum columnSelectionType) {
    this.columnSelectionType = columnSelectionType;
    return this;
  }

  /**
   * The type to select columns for the data source table. Defaults to SELECTED.
   * @return columnSelectionType
   */
  @javax.annotation.Nullable
  public ColumnSelectionTypeEnum getColumnSelectionType() {
    return columnSelectionType;
  }

  public void setColumnSelectionType(ColumnSelectionTypeEnum columnSelectionType) {
    this.columnSelectionType = columnSelectionType;
  }


  public DataSourceTable columns(List<DataSourceColumnReference> columns) {
    this.columns = columns;
    return this;
  }

  public DataSourceTable addColumnsItem(DataSourceColumnReference columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

  /**
   * Columns selected for the data source table. The column_selection_type must be SELECTED.
   * @return columns
   */
  @javax.annotation.Nullable
  public List<DataSourceColumnReference> getColumns() {
    return columns;
  }

  public void setColumns(List<DataSourceColumnReference> columns) {
    this.columns = columns;
  }


  public DataSourceTable dataExecutionStatus(DataExecutionStatus dataExecutionStatus) {
    this.dataExecutionStatus = dataExecutionStatus;
    return this;
  }

  /**
   * Get dataExecutionStatus
   * @return dataExecutionStatus
   */
  @javax.annotation.Nullable
  public DataExecutionStatus getDataExecutionStatus() {
    return dataExecutionStatus;
  }

  public void setDataExecutionStatus(DataExecutionStatus dataExecutionStatus) {
    this.dataExecutionStatus = dataExecutionStatus;
  }


  public DataSourceTable dataSourceId(String dataSourceId) {
    this.dataSourceId = dataSourceId;
    return this;
  }

  /**
   * The ID of the data source the data source table is associated with.
   * @return dataSourceId
   */
  @javax.annotation.Nullable
  public String getDataSourceId() {
    return dataSourceId;
  }

  public void setDataSourceId(String dataSourceId) {
    this.dataSourceId = dataSourceId;
  }


  public DataSourceTable filterSpecs(List<FilterSpec> filterSpecs) {
    this.filterSpecs = filterSpecs;
    return this;
  }

  public DataSourceTable addFilterSpecsItem(FilterSpec filterSpecsItem) {
    if (this.filterSpecs == null) {
      this.filterSpecs = new ArrayList<>();
    }
    this.filterSpecs.add(filterSpecsItem);
    return this;
  }

  /**
   * Filter specifications in the data source table.
   * @return filterSpecs
   */
  @javax.annotation.Nullable
  public List<FilterSpec> getFilterSpecs() {
    return filterSpecs;
  }

  public void setFilterSpecs(List<FilterSpec> filterSpecs) {
    this.filterSpecs = filterSpecs;
  }


  public DataSourceTable rowLimit(Integer rowLimit) {
    this.rowLimit = rowLimit;
    return this;
  }

  /**
   * The limit of rows to return. If not set, a default limit is applied. Please refer to the Sheets editor for the default and max limit.
   * @return rowLimit
   */
  @javax.annotation.Nullable
  public Integer getRowLimit() {
    return rowLimit;
  }

  public void setRowLimit(Integer rowLimit) {
    this.rowLimit = rowLimit;
  }


  public DataSourceTable sortSpecs(List<SortSpec> sortSpecs) {
    this.sortSpecs = sortSpecs;
    return this;
  }

  public DataSourceTable addSortSpecsItem(SortSpec sortSpecsItem) {
    if (this.sortSpecs == null) {
      this.sortSpecs = new ArrayList<>();
    }
    this.sortSpecs.add(sortSpecsItem);
    return this;
  }

  /**
   * Sort specifications in the data source table. The result of the data source table is sorted based on the sort specifications in order.
   * @return sortSpecs
   */
  @javax.annotation.Nullable
  public List<SortSpec> getSortSpecs() {
    return sortSpecs;
  }

  public void setSortSpecs(List<SortSpec> sortSpecs) {
    this.sortSpecs = sortSpecs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSourceTable dataSourceTable = (DataSourceTable) o;
    return Objects.equals(this.columnSelectionType, dataSourceTable.columnSelectionType) &&
        Objects.equals(this.columns, dataSourceTable.columns) &&
        Objects.equals(this.dataExecutionStatus, dataSourceTable.dataExecutionStatus) &&
        Objects.equals(this.dataSourceId, dataSourceTable.dataSourceId) &&
        Objects.equals(this.filterSpecs, dataSourceTable.filterSpecs) &&
        Objects.equals(this.rowLimit, dataSourceTable.rowLimit) &&
        Objects.equals(this.sortSpecs, dataSourceTable.sortSpecs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnSelectionType, columns, dataExecutionStatus, dataSourceId, filterSpecs, rowLimit, sortSpecs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSourceTable {\n");
    sb.append("    columnSelectionType: ").append(toIndentedString(columnSelectionType)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    dataExecutionStatus: ").append(toIndentedString(dataExecutionStatus)).append("\n");
    sb.append("    dataSourceId: ").append(toIndentedString(dataSourceId)).append("\n");
    sb.append("    filterSpecs: ").append(toIndentedString(filterSpecs)).append("\n");
    sb.append("    rowLimit: ").append(toIndentedString(rowLimit)).append("\n");
    sb.append("    sortSpecs: ").append(toIndentedString(sortSpecs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columnSelectionType");
    openapiFields.add("columns");
    openapiFields.add("dataExecutionStatus");
    openapiFields.add("dataSourceId");
    openapiFields.add("filterSpecs");
    openapiFields.add("rowLimit");
    openapiFields.add("sortSpecs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataSourceTable
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataSourceTable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataSourceTable is not found in the empty JSON string", DataSourceTable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataSourceTable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataSourceTable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("columnSelectionType") != null && !jsonObj.get("columnSelectionType").isJsonNull()) && !jsonObj.get("columnSelectionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnSelectionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("columnSelectionType").toString()));
      }
      // validate the optional field `columnSelectionType`
      if (jsonObj.get("columnSelectionType") != null && !jsonObj.get("columnSelectionType").isJsonNull()) {
        ColumnSelectionTypeEnum.validateJsonElement(jsonObj.get("columnSelectionType"));
      }
      if (jsonObj.get("columns") != null && !jsonObj.get("columns").isJsonNull()) {
        JsonArray jsonArraycolumns = jsonObj.getAsJsonArray("columns");
        if (jsonArraycolumns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("columns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
          }

          // validate the optional field `columns` (array)
          for (int i = 0; i < jsonArraycolumns.size(); i++) {
            DataSourceColumnReference.validateJsonElement(jsonArraycolumns.get(i));
          };
        }
      }
      // validate the optional field `dataExecutionStatus`
      if (jsonObj.get("dataExecutionStatus") != null && !jsonObj.get("dataExecutionStatus").isJsonNull()) {
        DataExecutionStatus.validateJsonElement(jsonObj.get("dataExecutionStatus"));
      }
      if ((jsonObj.get("dataSourceId") != null && !jsonObj.get("dataSourceId").isJsonNull()) && !jsonObj.get("dataSourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSourceId").toString()));
      }
      if (jsonObj.get("filterSpecs") != null && !jsonObj.get("filterSpecs").isJsonNull()) {
        JsonArray jsonArrayfilterSpecs = jsonObj.getAsJsonArray("filterSpecs");
        if (jsonArrayfilterSpecs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filterSpecs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filterSpecs` to be an array in the JSON string but got `%s`", jsonObj.get("filterSpecs").toString()));
          }

          // validate the optional field `filterSpecs` (array)
          for (int i = 0; i < jsonArrayfilterSpecs.size(); i++) {
            FilterSpec.validateJsonElement(jsonArrayfilterSpecs.get(i));
          };
        }
      }
      if (jsonObj.get("sortSpecs") != null && !jsonObj.get("sortSpecs").isJsonNull()) {
        JsonArray jsonArraysortSpecs = jsonObj.getAsJsonArray("sortSpecs");
        if (jsonArraysortSpecs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sortSpecs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sortSpecs` to be an array in the JSON string but got `%s`", jsonObj.get("sortSpecs").toString()));
          }

          // validate the optional field `sortSpecs` (array)
          for (int i = 0; i < jsonArraysortSpecs.size(); i++) {
            SortSpec.validateJsonElement(jsonArraysortSpecs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataSourceTable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataSourceTable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataSourceTable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataSourceTable.class));

       return (TypeAdapter<T>) new TypeAdapter<DataSourceTable>() {
           @Override
           public void write(JsonWriter out, DataSourceTable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataSourceTable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataSourceTable given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataSourceTable
   * @throws IOException if the JSON string is invalid with respect to DataSourceTable
   */
  public static DataSourceTable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataSourceTable.class);
  }

  /**
   * Convert an instance of DataSourceTable to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

