/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChartData;
import org.openapitools.client.model.DataLabel;
import org.openapitools.client.model.WaterfallChartColumnStyle;
import org.openapitools.client.model.WaterfallChartCustomSubtotal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single series of data for a waterfall chart.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WaterfallChartSeries {
  public static final String SERIALIZED_NAME_CUSTOM_SUBTOTALS = "customSubtotals";
  @SerializedName(SERIALIZED_NAME_CUSTOM_SUBTOTALS)
  private List<WaterfallChartCustomSubtotal> customSubtotals = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private ChartData data;

  public static final String SERIALIZED_NAME_DATA_LABEL = "dataLabel";
  @SerializedName(SERIALIZED_NAME_DATA_LABEL)
  private DataLabel dataLabel;

  public static final String SERIALIZED_NAME_HIDE_TRAILING_SUBTOTAL = "hideTrailingSubtotal";
  @SerializedName(SERIALIZED_NAME_HIDE_TRAILING_SUBTOTAL)
  private Boolean hideTrailingSubtotal;

  public static final String SERIALIZED_NAME_NEGATIVE_COLUMNS_STYLE = "negativeColumnsStyle";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_COLUMNS_STYLE)
  private WaterfallChartColumnStyle negativeColumnsStyle;

  public static final String SERIALIZED_NAME_POSITIVE_COLUMNS_STYLE = "positiveColumnsStyle";
  @SerializedName(SERIALIZED_NAME_POSITIVE_COLUMNS_STYLE)
  private WaterfallChartColumnStyle positiveColumnsStyle;

  public static final String SERIALIZED_NAME_SUBTOTAL_COLUMNS_STYLE = "subtotalColumnsStyle";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL_COLUMNS_STYLE)
  private WaterfallChartColumnStyle subtotalColumnsStyle;

  public WaterfallChartSeries() {
  }

  public WaterfallChartSeries customSubtotals(List<WaterfallChartCustomSubtotal> customSubtotals) {
    this.customSubtotals = customSubtotals;
    return this;
  }

  public WaterfallChartSeries addCustomSubtotalsItem(WaterfallChartCustomSubtotal customSubtotalsItem) {
    if (this.customSubtotals == null) {
      this.customSubtotals = new ArrayList<>();
    }
    this.customSubtotals.add(customSubtotalsItem);
    return this;
  }

  /**
   * Custom subtotal columns appearing in this series. The order in which subtotals are defined is not significant. Only one subtotal may be defined for each data point.
   * @return customSubtotals
   */
  @javax.annotation.Nullable
  public List<WaterfallChartCustomSubtotal> getCustomSubtotals() {
    return customSubtotals;
  }

  public void setCustomSubtotals(List<WaterfallChartCustomSubtotal> customSubtotals) {
    this.customSubtotals = customSubtotals;
  }


  public WaterfallChartSeries data(ChartData data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  public ChartData getData() {
    return data;
  }

  public void setData(ChartData data) {
    this.data = data;
  }


  public WaterfallChartSeries dataLabel(DataLabel dataLabel) {
    this.dataLabel = dataLabel;
    return this;
  }

  /**
   * Get dataLabel
   * @return dataLabel
   */
  @javax.annotation.Nullable
  public DataLabel getDataLabel() {
    return dataLabel;
  }

  public void setDataLabel(DataLabel dataLabel) {
    this.dataLabel = dataLabel;
  }


  public WaterfallChartSeries hideTrailingSubtotal(Boolean hideTrailingSubtotal) {
    this.hideTrailingSubtotal = hideTrailingSubtotal;
    return this;
  }

  /**
   * True to hide the subtotal column from the end of the series. By default, a subtotal column will appear at the end of each series. Setting this field to true will hide that subtotal column for this series.
   * @return hideTrailingSubtotal
   */
  @javax.annotation.Nullable
  public Boolean getHideTrailingSubtotal() {
    return hideTrailingSubtotal;
  }

  public void setHideTrailingSubtotal(Boolean hideTrailingSubtotal) {
    this.hideTrailingSubtotal = hideTrailingSubtotal;
  }


  public WaterfallChartSeries negativeColumnsStyle(WaterfallChartColumnStyle negativeColumnsStyle) {
    this.negativeColumnsStyle = negativeColumnsStyle;
    return this;
  }

  /**
   * Get negativeColumnsStyle
   * @return negativeColumnsStyle
   */
  @javax.annotation.Nullable
  public WaterfallChartColumnStyle getNegativeColumnsStyle() {
    return negativeColumnsStyle;
  }

  public void setNegativeColumnsStyle(WaterfallChartColumnStyle negativeColumnsStyle) {
    this.negativeColumnsStyle = negativeColumnsStyle;
  }


  public WaterfallChartSeries positiveColumnsStyle(WaterfallChartColumnStyle positiveColumnsStyle) {
    this.positiveColumnsStyle = positiveColumnsStyle;
    return this;
  }

  /**
   * Get positiveColumnsStyle
   * @return positiveColumnsStyle
   */
  @javax.annotation.Nullable
  public WaterfallChartColumnStyle getPositiveColumnsStyle() {
    return positiveColumnsStyle;
  }

  public void setPositiveColumnsStyle(WaterfallChartColumnStyle positiveColumnsStyle) {
    this.positiveColumnsStyle = positiveColumnsStyle;
  }


  public WaterfallChartSeries subtotalColumnsStyle(WaterfallChartColumnStyle subtotalColumnsStyle) {
    this.subtotalColumnsStyle = subtotalColumnsStyle;
    return this;
  }

  /**
   * Get subtotalColumnsStyle
   * @return subtotalColumnsStyle
   */
  @javax.annotation.Nullable
  public WaterfallChartColumnStyle getSubtotalColumnsStyle() {
    return subtotalColumnsStyle;
  }

  public void setSubtotalColumnsStyle(WaterfallChartColumnStyle subtotalColumnsStyle) {
    this.subtotalColumnsStyle = subtotalColumnsStyle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WaterfallChartSeries waterfallChartSeries = (WaterfallChartSeries) o;
    return Objects.equals(this.customSubtotals, waterfallChartSeries.customSubtotals) &&
        Objects.equals(this.data, waterfallChartSeries.data) &&
        Objects.equals(this.dataLabel, waterfallChartSeries.dataLabel) &&
        Objects.equals(this.hideTrailingSubtotal, waterfallChartSeries.hideTrailingSubtotal) &&
        Objects.equals(this.negativeColumnsStyle, waterfallChartSeries.negativeColumnsStyle) &&
        Objects.equals(this.positiveColumnsStyle, waterfallChartSeries.positiveColumnsStyle) &&
        Objects.equals(this.subtotalColumnsStyle, waterfallChartSeries.subtotalColumnsStyle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customSubtotals, data, dataLabel, hideTrailingSubtotal, negativeColumnsStyle, positiveColumnsStyle, subtotalColumnsStyle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WaterfallChartSeries {\n");
    sb.append("    customSubtotals: ").append(toIndentedString(customSubtotals)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    dataLabel: ").append(toIndentedString(dataLabel)).append("\n");
    sb.append("    hideTrailingSubtotal: ").append(toIndentedString(hideTrailingSubtotal)).append("\n");
    sb.append("    negativeColumnsStyle: ").append(toIndentedString(negativeColumnsStyle)).append("\n");
    sb.append("    positiveColumnsStyle: ").append(toIndentedString(positiveColumnsStyle)).append("\n");
    sb.append("    subtotalColumnsStyle: ").append(toIndentedString(subtotalColumnsStyle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customSubtotals");
    openapiFields.add("data");
    openapiFields.add("dataLabel");
    openapiFields.add("hideTrailingSubtotal");
    openapiFields.add("negativeColumnsStyle");
    openapiFields.add("positiveColumnsStyle");
    openapiFields.add("subtotalColumnsStyle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WaterfallChartSeries
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WaterfallChartSeries.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WaterfallChartSeries is not found in the empty JSON string", WaterfallChartSeries.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WaterfallChartSeries.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WaterfallChartSeries` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("customSubtotals") != null && !jsonObj.get("customSubtotals").isJsonNull()) {
        JsonArray jsonArraycustomSubtotals = jsonObj.getAsJsonArray("customSubtotals");
        if (jsonArraycustomSubtotals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customSubtotals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customSubtotals` to be an array in the JSON string but got `%s`", jsonObj.get("customSubtotals").toString()));
          }

          // validate the optional field `customSubtotals` (array)
          for (int i = 0; i < jsonArraycustomSubtotals.size(); i++) {
            WaterfallChartCustomSubtotal.validateJsonElement(jsonArraycustomSubtotals.get(i));
          };
        }
      }
      // validate the optional field `data`
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) {
        ChartData.validateJsonElement(jsonObj.get("data"));
      }
      // validate the optional field `dataLabel`
      if (jsonObj.get("dataLabel") != null && !jsonObj.get("dataLabel").isJsonNull()) {
        DataLabel.validateJsonElement(jsonObj.get("dataLabel"));
      }
      // validate the optional field `negativeColumnsStyle`
      if (jsonObj.get("negativeColumnsStyle") != null && !jsonObj.get("negativeColumnsStyle").isJsonNull()) {
        WaterfallChartColumnStyle.validateJsonElement(jsonObj.get("negativeColumnsStyle"));
      }
      // validate the optional field `positiveColumnsStyle`
      if (jsonObj.get("positiveColumnsStyle") != null && !jsonObj.get("positiveColumnsStyle").isJsonNull()) {
        WaterfallChartColumnStyle.validateJsonElement(jsonObj.get("positiveColumnsStyle"));
      }
      // validate the optional field `subtotalColumnsStyle`
      if (jsonObj.get("subtotalColumnsStyle") != null && !jsonObj.get("subtotalColumnsStyle").isJsonNull()) {
        WaterfallChartColumnStyle.validateJsonElement(jsonObj.get("subtotalColumnsStyle"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WaterfallChartSeries.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WaterfallChartSeries' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WaterfallChartSeries> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WaterfallChartSeries.class));

       return (TypeAdapter<T>) new TypeAdapter<WaterfallChartSeries>() {
           @Override
           public void write(JsonWriter out, WaterfallChartSeries value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WaterfallChartSeries read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WaterfallChartSeries given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WaterfallChartSeries
   * @throws IOException if the JSON string is invalid with respect to WaterfallChartSeries
   */
  public static WaterfallChartSeries fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WaterfallChartSeries.class);
  }

  /**
   * Convert an instance of WaterfallChartSeries to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

