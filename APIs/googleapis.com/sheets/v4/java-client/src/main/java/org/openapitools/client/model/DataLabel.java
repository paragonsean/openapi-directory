/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChartData;
import org.openapitools.client.model.TextFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings for one set of data labels. Data labels are annotations that appear next to a set of data, such as the points on a line chart, and provide additional information about what the data represents, such as a text representation of the value behind that point on the graph.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataLabel {
  public static final String SERIALIZED_NAME_CUSTOM_LABEL_DATA = "customLabelData";
  @SerializedName(SERIALIZED_NAME_CUSTOM_LABEL_DATA)
  private ChartData customLabelData;

  /**
   * The placement of the data label relative to the labeled data.
   */
  @JsonAdapter(PlacementEnum.Adapter.class)
  public enum PlacementEnum {
    DATA_LABEL_PLACEMENT_UNSPECIFIED("DATA_LABEL_PLACEMENT_UNSPECIFIED"),
    
    CENTER("CENTER"),
    
    LEFT("LEFT"),
    
    RIGHT("RIGHT"),
    
    ABOVE("ABOVE"),
    
    BELOW("BELOW"),
    
    INSIDE_END("INSIDE_END"),
    
    INSIDE_BASE("INSIDE_BASE"),
    
    OUTSIDE_END("OUTSIDE_END");

    private String value;

    PlacementEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlacementEnum fromValue(String value) {
      for (PlacementEnum b : PlacementEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlacementEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlacementEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlacementEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlacementEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlacementEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLACEMENT = "placement";
  @SerializedName(SERIALIZED_NAME_PLACEMENT)
  private PlacementEnum placement;

  public static final String SERIALIZED_NAME_TEXT_FORMAT = "textFormat";
  @SerializedName(SERIALIZED_NAME_TEXT_FORMAT)
  private TextFormat textFormat;

  /**
   * The type of the data label.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DATA_LABEL_TYPE_UNSPECIFIED("DATA_LABEL_TYPE_UNSPECIFIED"),
    
    NONE("NONE"),
    
    DATA("DATA"),
    
    CUSTOM("CUSTOM");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public DataLabel() {
  }

  public DataLabel customLabelData(ChartData customLabelData) {
    this.customLabelData = customLabelData;
    return this;
  }

  /**
   * Get customLabelData
   * @return customLabelData
   */
  @javax.annotation.Nullable
  public ChartData getCustomLabelData() {
    return customLabelData;
  }

  public void setCustomLabelData(ChartData customLabelData) {
    this.customLabelData = customLabelData;
  }


  public DataLabel placement(PlacementEnum placement) {
    this.placement = placement;
    return this;
  }

  /**
   * The placement of the data label relative to the labeled data.
   * @return placement
   */
  @javax.annotation.Nullable
  public PlacementEnum getPlacement() {
    return placement;
  }

  public void setPlacement(PlacementEnum placement) {
    this.placement = placement;
  }


  public DataLabel textFormat(TextFormat textFormat) {
    this.textFormat = textFormat;
    return this;
  }

  /**
   * Get textFormat
   * @return textFormat
   */
  @javax.annotation.Nullable
  public TextFormat getTextFormat() {
    return textFormat;
  }

  public void setTextFormat(TextFormat textFormat) {
    this.textFormat = textFormat;
  }


  public DataLabel type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the data label.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataLabel dataLabel = (DataLabel) o;
    return Objects.equals(this.customLabelData, dataLabel.customLabelData) &&
        Objects.equals(this.placement, dataLabel.placement) &&
        Objects.equals(this.textFormat, dataLabel.textFormat) &&
        Objects.equals(this.type, dataLabel.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customLabelData, placement, textFormat, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataLabel {\n");
    sb.append("    customLabelData: ").append(toIndentedString(customLabelData)).append("\n");
    sb.append("    placement: ").append(toIndentedString(placement)).append("\n");
    sb.append("    textFormat: ").append(toIndentedString(textFormat)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customLabelData");
    openapiFields.add("placement");
    openapiFields.add("textFormat");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataLabel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataLabel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataLabel is not found in the empty JSON string", DataLabel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataLabel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataLabel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `customLabelData`
      if (jsonObj.get("customLabelData") != null && !jsonObj.get("customLabelData").isJsonNull()) {
        ChartData.validateJsonElement(jsonObj.get("customLabelData"));
      }
      if ((jsonObj.get("placement") != null && !jsonObj.get("placement").isJsonNull()) && !jsonObj.get("placement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placement").toString()));
      }
      // validate the optional field `placement`
      if (jsonObj.get("placement") != null && !jsonObj.get("placement").isJsonNull()) {
        PlacementEnum.validateJsonElement(jsonObj.get("placement"));
      }
      // validate the optional field `textFormat`
      if (jsonObj.get("textFormat") != null && !jsonObj.get("textFormat").isJsonNull()) {
        TextFormat.validateJsonElement(jsonObj.get("textFormat"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataLabel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataLabel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataLabel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataLabel.class));

       return (TypeAdapter<T>) new TypeAdapter<DataLabel>() {
           @Override
           public void write(JsonWriter out, DataLabel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataLabel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataLabel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataLabel
   * @throws IOException if the JSON string is invalid with respect to DataLabel
   */
  public static DataLabel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataLabel.class);
  }

  /**
   * Convert an instance of DataLabel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

