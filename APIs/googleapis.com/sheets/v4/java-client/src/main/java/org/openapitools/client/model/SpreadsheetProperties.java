/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CellFormat;
import org.openapitools.client.model.IterativeCalculationSettings;
import org.openapitools.client.model.SpreadsheetTheme;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a spreadsheet.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SpreadsheetProperties {
  /**
   * The amount of time to wait before volatile functions are recalculated.
   */
  @JsonAdapter(AutoRecalcEnum.Adapter.class)
  public enum AutoRecalcEnum {
    RECALCULATION_INTERVAL_UNSPECIFIED("RECALCULATION_INTERVAL_UNSPECIFIED"),
    
    ON_CHANGE("ON_CHANGE"),
    
    MINUTE("MINUTE"),
    
    HOUR("HOUR");

    private String value;

    AutoRecalcEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutoRecalcEnum fromValue(String value) {
      for (AutoRecalcEnum b : AutoRecalcEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutoRecalcEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutoRecalcEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutoRecalcEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutoRecalcEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AutoRecalcEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTO_RECALC = "autoRecalc";
  @SerializedName(SERIALIZED_NAME_AUTO_RECALC)
  private AutoRecalcEnum autoRecalc;

  public static final String SERIALIZED_NAME_DEFAULT_FORMAT = "defaultFormat";
  @SerializedName(SERIALIZED_NAME_DEFAULT_FORMAT)
  private CellFormat defaultFormat;

  public static final String SERIALIZED_NAME_ITERATIVE_CALCULATION_SETTINGS = "iterativeCalculationSettings";
  @SerializedName(SERIALIZED_NAME_ITERATIVE_CALCULATION_SETTINGS)
  private IterativeCalculationSettings iterativeCalculationSettings;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_SPREADSHEET_THEME = "spreadsheetTheme";
  @SerializedName(SERIALIZED_NAME_SPREADSHEET_THEME)
  private SpreadsheetTheme spreadsheetTheme;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public SpreadsheetProperties() {
  }

  public SpreadsheetProperties autoRecalc(AutoRecalcEnum autoRecalc) {
    this.autoRecalc = autoRecalc;
    return this;
  }

  /**
   * The amount of time to wait before volatile functions are recalculated.
   * @return autoRecalc
   */
  @javax.annotation.Nullable
  public AutoRecalcEnum getAutoRecalc() {
    return autoRecalc;
  }

  public void setAutoRecalc(AutoRecalcEnum autoRecalc) {
    this.autoRecalc = autoRecalc;
  }


  public SpreadsheetProperties defaultFormat(CellFormat defaultFormat) {
    this.defaultFormat = defaultFormat;
    return this;
  }

  /**
   * Get defaultFormat
   * @return defaultFormat
   */
  @javax.annotation.Nullable
  public CellFormat getDefaultFormat() {
    return defaultFormat;
  }

  public void setDefaultFormat(CellFormat defaultFormat) {
    this.defaultFormat = defaultFormat;
  }


  public SpreadsheetProperties iterativeCalculationSettings(IterativeCalculationSettings iterativeCalculationSettings) {
    this.iterativeCalculationSettings = iterativeCalculationSettings;
    return this;
  }

  /**
   * Get iterativeCalculationSettings
   * @return iterativeCalculationSettings
   */
  @javax.annotation.Nullable
  public IterativeCalculationSettings getIterativeCalculationSettings() {
    return iterativeCalculationSettings;
  }

  public void setIterativeCalculationSettings(IterativeCalculationSettings iterativeCalculationSettings) {
    this.iterativeCalculationSettings = iterativeCalculationSettings;
  }


  public SpreadsheetProperties locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * The locale of the spreadsheet in one of the following formats: * an ISO 639-1 language code such as &#x60;en&#x60; * an ISO 639-2 language code such as &#x60;fil&#x60;, if no 639-1 code exists * a combination of the ISO language code and country code, such as &#x60;en_US&#x60; Note: when updating this field, not all locales/languages are supported.
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public SpreadsheetProperties spreadsheetTheme(SpreadsheetTheme spreadsheetTheme) {
    this.spreadsheetTheme = spreadsheetTheme;
    return this;
  }

  /**
   * Get spreadsheetTheme
   * @return spreadsheetTheme
   */
  @javax.annotation.Nullable
  public SpreadsheetTheme getSpreadsheetTheme() {
    return spreadsheetTheme;
  }

  public void setSpreadsheetTheme(SpreadsheetTheme spreadsheetTheme) {
    this.spreadsheetTheme = spreadsheetTheme;
  }


  public SpreadsheetProperties timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * The time zone of the spreadsheet, in CLDR format such as &#x60;America/New_York&#x60;. If the time zone isn&#39;t recognized, this may be a custom time zone such as &#x60;GMT-07:00&#x60;.
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public SpreadsheetProperties title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the spreadsheet.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpreadsheetProperties spreadsheetProperties = (SpreadsheetProperties) o;
    return Objects.equals(this.autoRecalc, spreadsheetProperties.autoRecalc) &&
        Objects.equals(this.defaultFormat, spreadsheetProperties.defaultFormat) &&
        Objects.equals(this.iterativeCalculationSettings, spreadsheetProperties.iterativeCalculationSettings) &&
        Objects.equals(this.locale, spreadsheetProperties.locale) &&
        Objects.equals(this.spreadsheetTheme, spreadsheetProperties.spreadsheetTheme) &&
        Objects.equals(this.timeZone, spreadsheetProperties.timeZone) &&
        Objects.equals(this.title, spreadsheetProperties.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoRecalc, defaultFormat, iterativeCalculationSettings, locale, spreadsheetTheme, timeZone, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpreadsheetProperties {\n");
    sb.append("    autoRecalc: ").append(toIndentedString(autoRecalc)).append("\n");
    sb.append("    defaultFormat: ").append(toIndentedString(defaultFormat)).append("\n");
    sb.append("    iterativeCalculationSettings: ").append(toIndentedString(iterativeCalculationSettings)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    spreadsheetTheme: ").append(toIndentedString(spreadsheetTheme)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoRecalc");
    openapiFields.add("defaultFormat");
    openapiFields.add("iterativeCalculationSettings");
    openapiFields.add("locale");
    openapiFields.add("spreadsheetTheme");
    openapiFields.add("timeZone");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SpreadsheetProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SpreadsheetProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SpreadsheetProperties is not found in the empty JSON string", SpreadsheetProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SpreadsheetProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SpreadsheetProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("autoRecalc") != null && !jsonObj.get("autoRecalc").isJsonNull()) && !jsonObj.get("autoRecalc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoRecalc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoRecalc").toString()));
      }
      // validate the optional field `autoRecalc`
      if (jsonObj.get("autoRecalc") != null && !jsonObj.get("autoRecalc").isJsonNull()) {
        AutoRecalcEnum.validateJsonElement(jsonObj.get("autoRecalc"));
      }
      // validate the optional field `defaultFormat`
      if (jsonObj.get("defaultFormat") != null && !jsonObj.get("defaultFormat").isJsonNull()) {
        CellFormat.validateJsonElement(jsonObj.get("defaultFormat"));
      }
      // validate the optional field `iterativeCalculationSettings`
      if (jsonObj.get("iterativeCalculationSettings") != null && !jsonObj.get("iterativeCalculationSettings").isJsonNull()) {
        IterativeCalculationSettings.validateJsonElement(jsonObj.get("iterativeCalculationSettings"));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      // validate the optional field `spreadsheetTheme`
      if (jsonObj.get("spreadsheetTheme") != null && !jsonObj.get("spreadsheetTheme").isJsonNull()) {
        SpreadsheetTheme.validateJsonElement(jsonObj.get("spreadsheetTheme"));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SpreadsheetProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SpreadsheetProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SpreadsheetProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SpreadsheetProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SpreadsheetProperties>() {
           @Override
           public void write(JsonWriter out, SpreadsheetProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SpreadsheetProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SpreadsheetProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SpreadsheetProperties
   * @throws IOException if the JSON string is invalid with respect to SpreadsheetProperties
   */
  public static SpreadsheetProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SpreadsheetProperties.class);
  }

  /**
   * Convert an instance of SpreadsheetProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

