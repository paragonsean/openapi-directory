/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Color;
import org.openapitools.client.model.ColorStyle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties referring a single dimension (either row or column). If both BandedRange.row_properties and BandedRange.column_properties are set, the fill colors are applied to cells according to the following rules: * header_color and footer_color take priority over band colors. * first_band_color takes priority over second_band_color. * row_properties takes priority over column_properties. For example, the first row color takes priority over the first column color, but the first column color takes priority over the second row color. Similarly, the row header takes priority over the column header in the top left cell, but the column header takes priority over the first row color if the row header is not set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BandingProperties {
  public static final String SERIALIZED_NAME_FIRST_BAND_COLOR = "firstBandColor";
  @SerializedName(SERIALIZED_NAME_FIRST_BAND_COLOR)
  private Color firstBandColor;

  public static final String SERIALIZED_NAME_FIRST_BAND_COLOR_STYLE = "firstBandColorStyle";
  @SerializedName(SERIALIZED_NAME_FIRST_BAND_COLOR_STYLE)
  private ColorStyle firstBandColorStyle;

  public static final String SERIALIZED_NAME_FOOTER_COLOR = "footerColor";
  @SerializedName(SERIALIZED_NAME_FOOTER_COLOR)
  private Color footerColor;

  public static final String SERIALIZED_NAME_FOOTER_COLOR_STYLE = "footerColorStyle";
  @SerializedName(SERIALIZED_NAME_FOOTER_COLOR_STYLE)
  private ColorStyle footerColorStyle;

  public static final String SERIALIZED_NAME_HEADER_COLOR = "headerColor";
  @SerializedName(SERIALIZED_NAME_HEADER_COLOR)
  private Color headerColor;

  public static final String SERIALIZED_NAME_HEADER_COLOR_STYLE = "headerColorStyle";
  @SerializedName(SERIALIZED_NAME_HEADER_COLOR_STYLE)
  private ColorStyle headerColorStyle;

  public static final String SERIALIZED_NAME_SECOND_BAND_COLOR = "secondBandColor";
  @SerializedName(SERIALIZED_NAME_SECOND_BAND_COLOR)
  private Color secondBandColor;

  public static final String SERIALIZED_NAME_SECOND_BAND_COLOR_STYLE = "secondBandColorStyle";
  @SerializedName(SERIALIZED_NAME_SECOND_BAND_COLOR_STYLE)
  private ColorStyle secondBandColorStyle;

  public BandingProperties() {
  }

  public BandingProperties firstBandColor(Color firstBandColor) {
    this.firstBandColor = firstBandColor;
    return this;
  }

  /**
   * Get firstBandColor
   * @return firstBandColor
   */
  @javax.annotation.Nullable
  public Color getFirstBandColor() {
    return firstBandColor;
  }

  public void setFirstBandColor(Color firstBandColor) {
    this.firstBandColor = firstBandColor;
  }


  public BandingProperties firstBandColorStyle(ColorStyle firstBandColorStyle) {
    this.firstBandColorStyle = firstBandColorStyle;
    return this;
  }

  /**
   * Get firstBandColorStyle
   * @return firstBandColorStyle
   */
  @javax.annotation.Nullable
  public ColorStyle getFirstBandColorStyle() {
    return firstBandColorStyle;
  }

  public void setFirstBandColorStyle(ColorStyle firstBandColorStyle) {
    this.firstBandColorStyle = firstBandColorStyle;
  }


  public BandingProperties footerColor(Color footerColor) {
    this.footerColor = footerColor;
    return this;
  }

  /**
   * Get footerColor
   * @return footerColor
   */
  @javax.annotation.Nullable
  public Color getFooterColor() {
    return footerColor;
  }

  public void setFooterColor(Color footerColor) {
    this.footerColor = footerColor;
  }


  public BandingProperties footerColorStyle(ColorStyle footerColorStyle) {
    this.footerColorStyle = footerColorStyle;
    return this;
  }

  /**
   * Get footerColorStyle
   * @return footerColorStyle
   */
  @javax.annotation.Nullable
  public ColorStyle getFooterColorStyle() {
    return footerColorStyle;
  }

  public void setFooterColorStyle(ColorStyle footerColorStyle) {
    this.footerColorStyle = footerColorStyle;
  }


  public BandingProperties headerColor(Color headerColor) {
    this.headerColor = headerColor;
    return this;
  }

  /**
   * Get headerColor
   * @return headerColor
   */
  @javax.annotation.Nullable
  public Color getHeaderColor() {
    return headerColor;
  }

  public void setHeaderColor(Color headerColor) {
    this.headerColor = headerColor;
  }


  public BandingProperties headerColorStyle(ColorStyle headerColorStyle) {
    this.headerColorStyle = headerColorStyle;
    return this;
  }

  /**
   * Get headerColorStyle
   * @return headerColorStyle
   */
  @javax.annotation.Nullable
  public ColorStyle getHeaderColorStyle() {
    return headerColorStyle;
  }

  public void setHeaderColorStyle(ColorStyle headerColorStyle) {
    this.headerColorStyle = headerColorStyle;
  }


  public BandingProperties secondBandColor(Color secondBandColor) {
    this.secondBandColor = secondBandColor;
    return this;
  }

  /**
   * Get secondBandColor
   * @return secondBandColor
   */
  @javax.annotation.Nullable
  public Color getSecondBandColor() {
    return secondBandColor;
  }

  public void setSecondBandColor(Color secondBandColor) {
    this.secondBandColor = secondBandColor;
  }


  public BandingProperties secondBandColorStyle(ColorStyle secondBandColorStyle) {
    this.secondBandColorStyle = secondBandColorStyle;
    return this;
  }

  /**
   * Get secondBandColorStyle
   * @return secondBandColorStyle
   */
  @javax.annotation.Nullable
  public ColorStyle getSecondBandColorStyle() {
    return secondBandColorStyle;
  }

  public void setSecondBandColorStyle(ColorStyle secondBandColorStyle) {
    this.secondBandColorStyle = secondBandColorStyle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BandingProperties bandingProperties = (BandingProperties) o;
    return Objects.equals(this.firstBandColor, bandingProperties.firstBandColor) &&
        Objects.equals(this.firstBandColorStyle, bandingProperties.firstBandColorStyle) &&
        Objects.equals(this.footerColor, bandingProperties.footerColor) &&
        Objects.equals(this.footerColorStyle, bandingProperties.footerColorStyle) &&
        Objects.equals(this.headerColor, bandingProperties.headerColor) &&
        Objects.equals(this.headerColorStyle, bandingProperties.headerColorStyle) &&
        Objects.equals(this.secondBandColor, bandingProperties.secondBandColor) &&
        Objects.equals(this.secondBandColorStyle, bandingProperties.secondBandColorStyle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstBandColor, firstBandColorStyle, footerColor, footerColorStyle, headerColor, headerColorStyle, secondBandColor, secondBandColorStyle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BandingProperties {\n");
    sb.append("    firstBandColor: ").append(toIndentedString(firstBandColor)).append("\n");
    sb.append("    firstBandColorStyle: ").append(toIndentedString(firstBandColorStyle)).append("\n");
    sb.append("    footerColor: ").append(toIndentedString(footerColor)).append("\n");
    sb.append("    footerColorStyle: ").append(toIndentedString(footerColorStyle)).append("\n");
    sb.append("    headerColor: ").append(toIndentedString(headerColor)).append("\n");
    sb.append("    headerColorStyle: ").append(toIndentedString(headerColorStyle)).append("\n");
    sb.append("    secondBandColor: ").append(toIndentedString(secondBandColor)).append("\n");
    sb.append("    secondBandColorStyle: ").append(toIndentedString(secondBandColorStyle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstBandColor");
    openapiFields.add("firstBandColorStyle");
    openapiFields.add("footerColor");
    openapiFields.add("footerColorStyle");
    openapiFields.add("headerColor");
    openapiFields.add("headerColorStyle");
    openapiFields.add("secondBandColor");
    openapiFields.add("secondBandColorStyle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BandingProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BandingProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BandingProperties is not found in the empty JSON string", BandingProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BandingProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BandingProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `firstBandColor`
      if (jsonObj.get("firstBandColor") != null && !jsonObj.get("firstBandColor").isJsonNull()) {
        Color.validateJsonElement(jsonObj.get("firstBandColor"));
      }
      // validate the optional field `firstBandColorStyle`
      if (jsonObj.get("firstBandColorStyle") != null && !jsonObj.get("firstBandColorStyle").isJsonNull()) {
        ColorStyle.validateJsonElement(jsonObj.get("firstBandColorStyle"));
      }
      // validate the optional field `footerColor`
      if (jsonObj.get("footerColor") != null && !jsonObj.get("footerColor").isJsonNull()) {
        Color.validateJsonElement(jsonObj.get("footerColor"));
      }
      // validate the optional field `footerColorStyle`
      if (jsonObj.get("footerColorStyle") != null && !jsonObj.get("footerColorStyle").isJsonNull()) {
        ColorStyle.validateJsonElement(jsonObj.get("footerColorStyle"));
      }
      // validate the optional field `headerColor`
      if (jsonObj.get("headerColor") != null && !jsonObj.get("headerColor").isJsonNull()) {
        Color.validateJsonElement(jsonObj.get("headerColor"));
      }
      // validate the optional field `headerColorStyle`
      if (jsonObj.get("headerColorStyle") != null && !jsonObj.get("headerColorStyle").isJsonNull()) {
        ColorStyle.validateJsonElement(jsonObj.get("headerColorStyle"));
      }
      // validate the optional field `secondBandColor`
      if (jsonObj.get("secondBandColor") != null && !jsonObj.get("secondBandColor").isJsonNull()) {
        Color.validateJsonElement(jsonObj.get("secondBandColor"));
      }
      // validate the optional field `secondBandColorStyle`
      if (jsonObj.get("secondBandColorStyle") != null && !jsonObj.get("secondBandColorStyle").isJsonNull()) {
        ColorStyle.validateJsonElement(jsonObj.get("secondBandColorStyle"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BandingProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BandingProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BandingProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BandingProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<BandingProperties>() {
           @Override
           public void write(JsonWriter out, BandingProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BandingProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BandingProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BandingProperties
   * @throws IOException if the JSON string is invalid with respect to BandingProperties
   */
  public static BandingProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BandingProperties.class);
  }

  /**
   * Convert an instance of BandingProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

