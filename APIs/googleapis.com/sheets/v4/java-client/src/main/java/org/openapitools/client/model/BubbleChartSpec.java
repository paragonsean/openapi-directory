/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChartData;
import org.openapitools.client.model.Color;
import org.openapitools.client.model.ColorStyle;
import org.openapitools.client.model.TextFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A bubble chart.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BubbleChartSpec {
  public static final String SERIALIZED_NAME_BUBBLE_BORDER_COLOR = "bubbleBorderColor";
  @SerializedName(SERIALIZED_NAME_BUBBLE_BORDER_COLOR)
  private Color bubbleBorderColor;

  public static final String SERIALIZED_NAME_BUBBLE_BORDER_COLOR_STYLE = "bubbleBorderColorStyle";
  @SerializedName(SERIALIZED_NAME_BUBBLE_BORDER_COLOR_STYLE)
  private ColorStyle bubbleBorderColorStyle;

  public static final String SERIALIZED_NAME_BUBBLE_LABELS = "bubbleLabels";
  @SerializedName(SERIALIZED_NAME_BUBBLE_LABELS)
  private ChartData bubbleLabels;

  public static final String SERIALIZED_NAME_BUBBLE_MAX_RADIUS_SIZE = "bubbleMaxRadiusSize";
  @SerializedName(SERIALIZED_NAME_BUBBLE_MAX_RADIUS_SIZE)
  private Integer bubbleMaxRadiusSize;

  public static final String SERIALIZED_NAME_BUBBLE_MIN_RADIUS_SIZE = "bubbleMinRadiusSize";
  @SerializedName(SERIALIZED_NAME_BUBBLE_MIN_RADIUS_SIZE)
  private Integer bubbleMinRadiusSize;

  public static final String SERIALIZED_NAME_BUBBLE_OPACITY = "bubbleOpacity";
  @SerializedName(SERIALIZED_NAME_BUBBLE_OPACITY)
  private Float bubbleOpacity;

  public static final String SERIALIZED_NAME_BUBBLE_SIZES = "bubbleSizes";
  @SerializedName(SERIALIZED_NAME_BUBBLE_SIZES)
  private ChartData bubbleSizes;

  public static final String SERIALIZED_NAME_BUBBLE_TEXT_STYLE = "bubbleTextStyle";
  @SerializedName(SERIALIZED_NAME_BUBBLE_TEXT_STYLE)
  private TextFormat bubbleTextStyle;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private ChartData domain;

  public static final String SERIALIZED_NAME_GROUP_IDS = "groupIds";
  @SerializedName(SERIALIZED_NAME_GROUP_IDS)
  private ChartData groupIds;

  /**
   * Where the legend of the chart should be drawn.
   */
  @JsonAdapter(LegendPositionEnum.Adapter.class)
  public enum LegendPositionEnum {
    BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED("BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED"),
    
    BOTTOM_LEGEND("BOTTOM_LEGEND"),
    
    LEFT_LEGEND("LEFT_LEGEND"),
    
    RIGHT_LEGEND("RIGHT_LEGEND"),
    
    TOP_LEGEND("TOP_LEGEND"),
    
    NO_LEGEND("NO_LEGEND"),
    
    INSIDE_LEGEND("INSIDE_LEGEND");

    private String value;

    LegendPositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LegendPositionEnum fromValue(String value) {
      for (LegendPositionEnum b : LegendPositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LegendPositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LegendPositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LegendPositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LegendPositionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LegendPositionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEGEND_POSITION = "legendPosition";
  @SerializedName(SERIALIZED_NAME_LEGEND_POSITION)
  private LegendPositionEnum legendPosition;

  public static final String SERIALIZED_NAME_SERIES = "series";
  @SerializedName(SERIALIZED_NAME_SERIES)
  private ChartData series;

  public BubbleChartSpec() {
  }

  public BubbleChartSpec bubbleBorderColor(Color bubbleBorderColor) {
    this.bubbleBorderColor = bubbleBorderColor;
    return this;
  }

  /**
   * Get bubbleBorderColor
   * @return bubbleBorderColor
   */
  @javax.annotation.Nullable
  public Color getBubbleBorderColor() {
    return bubbleBorderColor;
  }

  public void setBubbleBorderColor(Color bubbleBorderColor) {
    this.bubbleBorderColor = bubbleBorderColor;
  }


  public BubbleChartSpec bubbleBorderColorStyle(ColorStyle bubbleBorderColorStyle) {
    this.bubbleBorderColorStyle = bubbleBorderColorStyle;
    return this;
  }

  /**
   * Get bubbleBorderColorStyle
   * @return bubbleBorderColorStyle
   */
  @javax.annotation.Nullable
  public ColorStyle getBubbleBorderColorStyle() {
    return bubbleBorderColorStyle;
  }

  public void setBubbleBorderColorStyle(ColorStyle bubbleBorderColorStyle) {
    this.bubbleBorderColorStyle = bubbleBorderColorStyle;
  }


  public BubbleChartSpec bubbleLabels(ChartData bubbleLabels) {
    this.bubbleLabels = bubbleLabels;
    return this;
  }

  /**
   * Get bubbleLabels
   * @return bubbleLabels
   */
  @javax.annotation.Nullable
  public ChartData getBubbleLabels() {
    return bubbleLabels;
  }

  public void setBubbleLabels(ChartData bubbleLabels) {
    this.bubbleLabels = bubbleLabels;
  }


  public BubbleChartSpec bubbleMaxRadiusSize(Integer bubbleMaxRadiusSize) {
    this.bubbleMaxRadiusSize = bubbleMaxRadiusSize;
    return this;
  }

  /**
   * The max radius size of the bubbles, in pixels. If specified, the field must be a positive value.
   * @return bubbleMaxRadiusSize
   */
  @javax.annotation.Nullable
  public Integer getBubbleMaxRadiusSize() {
    return bubbleMaxRadiusSize;
  }

  public void setBubbleMaxRadiusSize(Integer bubbleMaxRadiusSize) {
    this.bubbleMaxRadiusSize = bubbleMaxRadiusSize;
  }


  public BubbleChartSpec bubbleMinRadiusSize(Integer bubbleMinRadiusSize) {
    this.bubbleMinRadiusSize = bubbleMinRadiusSize;
    return this;
  }

  /**
   * The minimum radius size of the bubbles, in pixels. If specific, the field must be a positive value.
   * @return bubbleMinRadiusSize
   */
  @javax.annotation.Nullable
  public Integer getBubbleMinRadiusSize() {
    return bubbleMinRadiusSize;
  }

  public void setBubbleMinRadiusSize(Integer bubbleMinRadiusSize) {
    this.bubbleMinRadiusSize = bubbleMinRadiusSize;
  }


  public BubbleChartSpec bubbleOpacity(Float bubbleOpacity) {
    this.bubbleOpacity = bubbleOpacity;
    return this;
  }

  /**
   * The opacity of the bubbles between 0 and 1.0. 0 is fully transparent and 1 is fully opaque.
   * @return bubbleOpacity
   */
  @javax.annotation.Nullable
  public Float getBubbleOpacity() {
    return bubbleOpacity;
  }

  public void setBubbleOpacity(Float bubbleOpacity) {
    this.bubbleOpacity = bubbleOpacity;
  }


  public BubbleChartSpec bubbleSizes(ChartData bubbleSizes) {
    this.bubbleSizes = bubbleSizes;
    return this;
  }

  /**
   * Get bubbleSizes
   * @return bubbleSizes
   */
  @javax.annotation.Nullable
  public ChartData getBubbleSizes() {
    return bubbleSizes;
  }

  public void setBubbleSizes(ChartData bubbleSizes) {
    this.bubbleSizes = bubbleSizes;
  }


  public BubbleChartSpec bubbleTextStyle(TextFormat bubbleTextStyle) {
    this.bubbleTextStyle = bubbleTextStyle;
    return this;
  }

  /**
   * Get bubbleTextStyle
   * @return bubbleTextStyle
   */
  @javax.annotation.Nullable
  public TextFormat getBubbleTextStyle() {
    return bubbleTextStyle;
  }

  public void setBubbleTextStyle(TextFormat bubbleTextStyle) {
    this.bubbleTextStyle = bubbleTextStyle;
  }


  public BubbleChartSpec domain(ChartData domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nullable
  public ChartData getDomain() {
    return domain;
  }

  public void setDomain(ChartData domain) {
    this.domain = domain;
  }


  public BubbleChartSpec groupIds(ChartData groupIds) {
    this.groupIds = groupIds;
    return this;
  }

  /**
   * Get groupIds
   * @return groupIds
   */
  @javax.annotation.Nullable
  public ChartData getGroupIds() {
    return groupIds;
  }

  public void setGroupIds(ChartData groupIds) {
    this.groupIds = groupIds;
  }


  public BubbleChartSpec legendPosition(LegendPositionEnum legendPosition) {
    this.legendPosition = legendPosition;
    return this;
  }

  /**
   * Where the legend of the chart should be drawn.
   * @return legendPosition
   */
  @javax.annotation.Nullable
  public LegendPositionEnum getLegendPosition() {
    return legendPosition;
  }

  public void setLegendPosition(LegendPositionEnum legendPosition) {
    this.legendPosition = legendPosition;
  }


  public BubbleChartSpec series(ChartData series) {
    this.series = series;
    return this;
  }

  /**
   * Get series
   * @return series
   */
  @javax.annotation.Nullable
  public ChartData getSeries() {
    return series;
  }

  public void setSeries(ChartData series) {
    this.series = series;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BubbleChartSpec bubbleChartSpec = (BubbleChartSpec) o;
    return Objects.equals(this.bubbleBorderColor, bubbleChartSpec.bubbleBorderColor) &&
        Objects.equals(this.bubbleBorderColorStyle, bubbleChartSpec.bubbleBorderColorStyle) &&
        Objects.equals(this.bubbleLabels, bubbleChartSpec.bubbleLabels) &&
        Objects.equals(this.bubbleMaxRadiusSize, bubbleChartSpec.bubbleMaxRadiusSize) &&
        Objects.equals(this.bubbleMinRadiusSize, bubbleChartSpec.bubbleMinRadiusSize) &&
        Objects.equals(this.bubbleOpacity, bubbleChartSpec.bubbleOpacity) &&
        Objects.equals(this.bubbleSizes, bubbleChartSpec.bubbleSizes) &&
        Objects.equals(this.bubbleTextStyle, bubbleChartSpec.bubbleTextStyle) &&
        Objects.equals(this.domain, bubbleChartSpec.domain) &&
        Objects.equals(this.groupIds, bubbleChartSpec.groupIds) &&
        Objects.equals(this.legendPosition, bubbleChartSpec.legendPosition) &&
        Objects.equals(this.series, bubbleChartSpec.series);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bubbleBorderColor, bubbleBorderColorStyle, bubbleLabels, bubbleMaxRadiusSize, bubbleMinRadiusSize, bubbleOpacity, bubbleSizes, bubbleTextStyle, domain, groupIds, legendPosition, series);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BubbleChartSpec {\n");
    sb.append("    bubbleBorderColor: ").append(toIndentedString(bubbleBorderColor)).append("\n");
    sb.append("    bubbleBorderColorStyle: ").append(toIndentedString(bubbleBorderColorStyle)).append("\n");
    sb.append("    bubbleLabels: ").append(toIndentedString(bubbleLabels)).append("\n");
    sb.append("    bubbleMaxRadiusSize: ").append(toIndentedString(bubbleMaxRadiusSize)).append("\n");
    sb.append("    bubbleMinRadiusSize: ").append(toIndentedString(bubbleMinRadiusSize)).append("\n");
    sb.append("    bubbleOpacity: ").append(toIndentedString(bubbleOpacity)).append("\n");
    sb.append("    bubbleSizes: ").append(toIndentedString(bubbleSizes)).append("\n");
    sb.append("    bubbleTextStyle: ").append(toIndentedString(bubbleTextStyle)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    groupIds: ").append(toIndentedString(groupIds)).append("\n");
    sb.append("    legendPosition: ").append(toIndentedString(legendPosition)).append("\n");
    sb.append("    series: ").append(toIndentedString(series)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bubbleBorderColor");
    openapiFields.add("bubbleBorderColorStyle");
    openapiFields.add("bubbleLabels");
    openapiFields.add("bubbleMaxRadiusSize");
    openapiFields.add("bubbleMinRadiusSize");
    openapiFields.add("bubbleOpacity");
    openapiFields.add("bubbleSizes");
    openapiFields.add("bubbleTextStyle");
    openapiFields.add("domain");
    openapiFields.add("groupIds");
    openapiFields.add("legendPosition");
    openapiFields.add("series");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BubbleChartSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BubbleChartSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BubbleChartSpec is not found in the empty JSON string", BubbleChartSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BubbleChartSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BubbleChartSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bubbleBorderColor`
      if (jsonObj.get("bubbleBorderColor") != null && !jsonObj.get("bubbleBorderColor").isJsonNull()) {
        Color.validateJsonElement(jsonObj.get("bubbleBorderColor"));
      }
      // validate the optional field `bubbleBorderColorStyle`
      if (jsonObj.get("bubbleBorderColorStyle") != null && !jsonObj.get("bubbleBorderColorStyle").isJsonNull()) {
        ColorStyle.validateJsonElement(jsonObj.get("bubbleBorderColorStyle"));
      }
      // validate the optional field `bubbleLabels`
      if (jsonObj.get("bubbleLabels") != null && !jsonObj.get("bubbleLabels").isJsonNull()) {
        ChartData.validateJsonElement(jsonObj.get("bubbleLabels"));
      }
      // validate the optional field `bubbleSizes`
      if (jsonObj.get("bubbleSizes") != null && !jsonObj.get("bubbleSizes").isJsonNull()) {
        ChartData.validateJsonElement(jsonObj.get("bubbleSizes"));
      }
      // validate the optional field `bubbleTextStyle`
      if (jsonObj.get("bubbleTextStyle") != null && !jsonObj.get("bubbleTextStyle").isJsonNull()) {
        TextFormat.validateJsonElement(jsonObj.get("bubbleTextStyle"));
      }
      // validate the optional field `domain`
      if (jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) {
        ChartData.validateJsonElement(jsonObj.get("domain"));
      }
      // validate the optional field `groupIds`
      if (jsonObj.get("groupIds") != null && !jsonObj.get("groupIds").isJsonNull()) {
        ChartData.validateJsonElement(jsonObj.get("groupIds"));
      }
      if ((jsonObj.get("legendPosition") != null && !jsonObj.get("legendPosition").isJsonNull()) && !jsonObj.get("legendPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legendPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legendPosition").toString()));
      }
      // validate the optional field `legendPosition`
      if (jsonObj.get("legendPosition") != null && !jsonObj.get("legendPosition").isJsonNull()) {
        LegendPositionEnum.validateJsonElement(jsonObj.get("legendPosition"));
      }
      // validate the optional field `series`
      if (jsonObj.get("series") != null && !jsonObj.get("series").isJsonNull()) {
        ChartData.validateJsonElement(jsonObj.get("series"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BubbleChartSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BubbleChartSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BubbleChartSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BubbleChartSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<BubbleChartSpec>() {
           @Override
           public void write(JsonWriter out, BubbleChartSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BubbleChartSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BubbleChartSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BubbleChartSpec
   * @throws IOException if the JSON string is invalid with respect to BubbleChartSpec
   */
  public static BubbleChartSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BubbleChartSpec.class);
  }

  /**
   * Convert an instance of BubbleChartSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

