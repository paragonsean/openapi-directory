/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DataSourceColumnReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The definition of how a value in a pivot table should be calculated.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PivotValue {
  /**
   * If specified, indicates that pivot values should be displayed as the result of a calculation with another pivot value. For example, if calculated_display_type is specified as PERCENT_OF_GRAND_TOTAL, all the pivot values are displayed as the percentage of the grand total. In the Sheets editor, this is referred to as \&quot;Show As\&quot; in the value section of a pivot table.
   */
  @JsonAdapter(CalculatedDisplayTypeEnum.Adapter.class)
  public enum CalculatedDisplayTypeEnum {
    PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED("PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED"),
    
    PERCENT_OF_ROW_TOTAL("PERCENT_OF_ROW_TOTAL"),
    
    PERCENT_OF_COLUMN_TOTAL("PERCENT_OF_COLUMN_TOTAL"),
    
    PERCENT_OF_GRAND_TOTAL("PERCENT_OF_GRAND_TOTAL");

    private String value;

    CalculatedDisplayTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CalculatedDisplayTypeEnum fromValue(String value) {
      for (CalculatedDisplayTypeEnum b : CalculatedDisplayTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CalculatedDisplayTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CalculatedDisplayTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CalculatedDisplayTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CalculatedDisplayTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CalculatedDisplayTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CALCULATED_DISPLAY_TYPE = "calculatedDisplayType";
  @SerializedName(SERIALIZED_NAME_CALCULATED_DISPLAY_TYPE)
  private CalculatedDisplayTypeEnum calculatedDisplayType;

  public static final String SERIALIZED_NAME_DATA_SOURCE_COLUMN_REFERENCE = "dataSourceColumnReference";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_COLUMN_REFERENCE)
  private DataSourceColumnReference dataSourceColumnReference;

  public static final String SERIALIZED_NAME_FORMULA = "formula";
  @SerializedName(SERIALIZED_NAME_FORMULA)
  private String formula;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOURCE_COLUMN_OFFSET = "sourceColumnOffset";
  @SerializedName(SERIALIZED_NAME_SOURCE_COLUMN_OFFSET)
  private Integer sourceColumnOffset;

  /**
   * A function to summarize the value. If formula is set, the only supported values are SUM and CUSTOM. If sourceColumnOffset is set, then &#x60;CUSTOM&#x60; is not supported.
   */
  @JsonAdapter(SummarizeFunctionEnum.Adapter.class)
  public enum SummarizeFunctionEnum {
    PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED("PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED"),
    
    SUM("SUM"),
    
    COUNTA("COUNTA"),
    
    COUNT("COUNT"),
    
    COUNTUNIQUE("COUNTUNIQUE"),
    
    AVERAGE("AVERAGE"),
    
    MAX("MAX"),
    
    MIN("MIN"),
    
    MEDIAN("MEDIAN"),
    
    PRODUCT("PRODUCT"),
    
    STDEV("STDEV"),
    
    STDEVP("STDEVP"),
    
    VAR("VAR"),
    
    VARP("VARP"),
    
    CUSTOM("CUSTOM");

    private String value;

    SummarizeFunctionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SummarizeFunctionEnum fromValue(String value) {
      for (SummarizeFunctionEnum b : SummarizeFunctionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SummarizeFunctionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SummarizeFunctionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SummarizeFunctionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SummarizeFunctionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SummarizeFunctionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUMMARIZE_FUNCTION = "summarizeFunction";
  @SerializedName(SERIALIZED_NAME_SUMMARIZE_FUNCTION)
  private SummarizeFunctionEnum summarizeFunction;

  public PivotValue() {
  }

  public PivotValue calculatedDisplayType(CalculatedDisplayTypeEnum calculatedDisplayType) {
    this.calculatedDisplayType = calculatedDisplayType;
    return this;
  }

  /**
   * If specified, indicates that pivot values should be displayed as the result of a calculation with another pivot value. For example, if calculated_display_type is specified as PERCENT_OF_GRAND_TOTAL, all the pivot values are displayed as the percentage of the grand total. In the Sheets editor, this is referred to as \&quot;Show As\&quot; in the value section of a pivot table.
   * @return calculatedDisplayType
   */
  @javax.annotation.Nullable
  public CalculatedDisplayTypeEnum getCalculatedDisplayType() {
    return calculatedDisplayType;
  }

  public void setCalculatedDisplayType(CalculatedDisplayTypeEnum calculatedDisplayType) {
    this.calculatedDisplayType = calculatedDisplayType;
  }


  public PivotValue dataSourceColumnReference(DataSourceColumnReference dataSourceColumnReference) {
    this.dataSourceColumnReference = dataSourceColumnReference;
    return this;
  }

  /**
   * Get dataSourceColumnReference
   * @return dataSourceColumnReference
   */
  @javax.annotation.Nullable
  public DataSourceColumnReference getDataSourceColumnReference() {
    return dataSourceColumnReference;
  }

  public void setDataSourceColumnReference(DataSourceColumnReference dataSourceColumnReference) {
    this.dataSourceColumnReference = dataSourceColumnReference;
  }


  public PivotValue formula(String formula) {
    this.formula = formula;
    return this;
  }

  /**
   * A custom formula to calculate the value. The formula must start with an &#x60;&#x3D;&#x60; character.
   * @return formula
   */
  @javax.annotation.Nullable
  public String getFormula() {
    return formula;
  }

  public void setFormula(String formula) {
    this.formula = formula;
  }


  public PivotValue name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A name to use for the value.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PivotValue sourceColumnOffset(Integer sourceColumnOffset) {
    this.sourceColumnOffset = sourceColumnOffset;
    return this;
  }

  /**
   * The column offset of the source range that this value reads from. For example, if the source was &#x60;C10:E15&#x60;, a &#x60;sourceColumnOffset&#x60; of &#x60;0&#x60; means this value refers to column &#x60;C&#x60;, whereas the offset &#x60;1&#x60; would refer to column &#x60;D&#x60;.
   * @return sourceColumnOffset
   */
  @javax.annotation.Nullable
  public Integer getSourceColumnOffset() {
    return sourceColumnOffset;
  }

  public void setSourceColumnOffset(Integer sourceColumnOffset) {
    this.sourceColumnOffset = sourceColumnOffset;
  }


  public PivotValue summarizeFunction(SummarizeFunctionEnum summarizeFunction) {
    this.summarizeFunction = summarizeFunction;
    return this;
  }

  /**
   * A function to summarize the value. If formula is set, the only supported values are SUM and CUSTOM. If sourceColumnOffset is set, then &#x60;CUSTOM&#x60; is not supported.
   * @return summarizeFunction
   */
  @javax.annotation.Nullable
  public SummarizeFunctionEnum getSummarizeFunction() {
    return summarizeFunction;
  }

  public void setSummarizeFunction(SummarizeFunctionEnum summarizeFunction) {
    this.summarizeFunction = summarizeFunction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PivotValue pivotValue = (PivotValue) o;
    return Objects.equals(this.calculatedDisplayType, pivotValue.calculatedDisplayType) &&
        Objects.equals(this.dataSourceColumnReference, pivotValue.dataSourceColumnReference) &&
        Objects.equals(this.formula, pivotValue.formula) &&
        Objects.equals(this.name, pivotValue.name) &&
        Objects.equals(this.sourceColumnOffset, pivotValue.sourceColumnOffset) &&
        Objects.equals(this.summarizeFunction, pivotValue.summarizeFunction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calculatedDisplayType, dataSourceColumnReference, formula, name, sourceColumnOffset, summarizeFunction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PivotValue {\n");
    sb.append("    calculatedDisplayType: ").append(toIndentedString(calculatedDisplayType)).append("\n");
    sb.append("    dataSourceColumnReference: ").append(toIndentedString(dataSourceColumnReference)).append("\n");
    sb.append("    formula: ").append(toIndentedString(formula)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sourceColumnOffset: ").append(toIndentedString(sourceColumnOffset)).append("\n");
    sb.append("    summarizeFunction: ").append(toIndentedString(summarizeFunction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calculatedDisplayType");
    openapiFields.add("dataSourceColumnReference");
    openapiFields.add("formula");
    openapiFields.add("name");
    openapiFields.add("sourceColumnOffset");
    openapiFields.add("summarizeFunction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PivotValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PivotValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PivotValue is not found in the empty JSON string", PivotValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PivotValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PivotValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("calculatedDisplayType") != null && !jsonObj.get("calculatedDisplayType").isJsonNull()) && !jsonObj.get("calculatedDisplayType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calculatedDisplayType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calculatedDisplayType").toString()));
      }
      // validate the optional field `calculatedDisplayType`
      if (jsonObj.get("calculatedDisplayType") != null && !jsonObj.get("calculatedDisplayType").isJsonNull()) {
        CalculatedDisplayTypeEnum.validateJsonElement(jsonObj.get("calculatedDisplayType"));
      }
      // validate the optional field `dataSourceColumnReference`
      if (jsonObj.get("dataSourceColumnReference") != null && !jsonObj.get("dataSourceColumnReference").isJsonNull()) {
        DataSourceColumnReference.validateJsonElement(jsonObj.get("dataSourceColumnReference"));
      }
      if ((jsonObj.get("formula") != null && !jsonObj.get("formula").isJsonNull()) && !jsonObj.get("formula").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formula` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formula").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("summarizeFunction") != null && !jsonObj.get("summarizeFunction").isJsonNull()) && !jsonObj.get("summarizeFunction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summarizeFunction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summarizeFunction").toString()));
      }
      // validate the optional field `summarizeFunction`
      if (jsonObj.get("summarizeFunction") != null && !jsonObj.get("summarizeFunction").isJsonNull()) {
        SummarizeFunctionEnum.validateJsonElement(jsonObj.get("summarizeFunction"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PivotValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PivotValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PivotValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PivotValue.class));

       return (TypeAdapter<T>) new TypeAdapter<PivotValue>() {
           @Override
           public void write(JsonWriter out, PivotValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PivotValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PivotValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PivotValue
   * @throws IOException if the JSON string is invalid with respect to PivotValue
   */
  public static PivotValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PivotValue.class);
  }

  /**
   * Convert an instance of PivotValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

