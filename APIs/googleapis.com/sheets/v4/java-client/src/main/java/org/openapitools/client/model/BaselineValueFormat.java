/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Color;
import org.openapitools.client.model.ColorStyle;
import org.openapitools.client.model.TextFormat;
import org.openapitools.client.model.TextPosition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Formatting options for baseline value.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BaselineValueFormat {
  /**
   * The comparison type of key value with baseline value.
   */
  @JsonAdapter(ComparisonTypeEnum.Adapter.class)
  public enum ComparisonTypeEnum {
    COMPARISON_TYPE_UNDEFINED("COMPARISON_TYPE_UNDEFINED"),
    
    ABSOLUTE_DIFFERENCE("ABSOLUTE_DIFFERENCE"),
    
    PERCENTAGE_DIFFERENCE("PERCENTAGE_DIFFERENCE");

    private String value;

    ComparisonTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComparisonTypeEnum fromValue(String value) {
      for (ComparisonTypeEnum b : ComparisonTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComparisonTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComparisonTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComparisonTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComparisonTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ComparisonTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPARISON_TYPE = "comparisonType";
  @SerializedName(SERIALIZED_NAME_COMPARISON_TYPE)
  private ComparisonTypeEnum comparisonType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NEGATIVE_COLOR = "negativeColor";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_COLOR)
  private Color negativeColor;

  public static final String SERIALIZED_NAME_NEGATIVE_COLOR_STYLE = "negativeColorStyle";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_COLOR_STYLE)
  private ColorStyle negativeColorStyle;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private TextPosition position;

  public static final String SERIALIZED_NAME_POSITIVE_COLOR = "positiveColor";
  @SerializedName(SERIALIZED_NAME_POSITIVE_COLOR)
  private Color positiveColor;

  public static final String SERIALIZED_NAME_POSITIVE_COLOR_STYLE = "positiveColorStyle";
  @SerializedName(SERIALIZED_NAME_POSITIVE_COLOR_STYLE)
  private ColorStyle positiveColorStyle;

  public static final String SERIALIZED_NAME_TEXT_FORMAT = "textFormat";
  @SerializedName(SERIALIZED_NAME_TEXT_FORMAT)
  private TextFormat textFormat;

  public BaselineValueFormat() {
  }

  public BaselineValueFormat comparisonType(ComparisonTypeEnum comparisonType) {
    this.comparisonType = comparisonType;
    return this;
  }

  /**
   * The comparison type of key value with baseline value.
   * @return comparisonType
   */
  @javax.annotation.Nullable
  public ComparisonTypeEnum getComparisonType() {
    return comparisonType;
  }

  public void setComparisonType(ComparisonTypeEnum comparisonType) {
    this.comparisonType = comparisonType;
  }


  public BaselineValueFormat description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description which is appended after the baseline value. This field is optional.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public BaselineValueFormat negativeColor(Color negativeColor) {
    this.negativeColor = negativeColor;
    return this;
  }

  /**
   * Get negativeColor
   * @return negativeColor
   */
  @javax.annotation.Nullable
  public Color getNegativeColor() {
    return negativeColor;
  }

  public void setNegativeColor(Color negativeColor) {
    this.negativeColor = negativeColor;
  }


  public BaselineValueFormat negativeColorStyle(ColorStyle negativeColorStyle) {
    this.negativeColorStyle = negativeColorStyle;
    return this;
  }

  /**
   * Get negativeColorStyle
   * @return negativeColorStyle
   */
  @javax.annotation.Nullable
  public ColorStyle getNegativeColorStyle() {
    return negativeColorStyle;
  }

  public void setNegativeColorStyle(ColorStyle negativeColorStyle) {
    this.negativeColorStyle = negativeColorStyle;
  }


  public BaselineValueFormat position(TextPosition position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public TextPosition getPosition() {
    return position;
  }

  public void setPosition(TextPosition position) {
    this.position = position;
  }


  public BaselineValueFormat positiveColor(Color positiveColor) {
    this.positiveColor = positiveColor;
    return this;
  }

  /**
   * Get positiveColor
   * @return positiveColor
   */
  @javax.annotation.Nullable
  public Color getPositiveColor() {
    return positiveColor;
  }

  public void setPositiveColor(Color positiveColor) {
    this.positiveColor = positiveColor;
  }


  public BaselineValueFormat positiveColorStyle(ColorStyle positiveColorStyle) {
    this.positiveColorStyle = positiveColorStyle;
    return this;
  }

  /**
   * Get positiveColorStyle
   * @return positiveColorStyle
   */
  @javax.annotation.Nullable
  public ColorStyle getPositiveColorStyle() {
    return positiveColorStyle;
  }

  public void setPositiveColorStyle(ColorStyle positiveColorStyle) {
    this.positiveColorStyle = positiveColorStyle;
  }


  public BaselineValueFormat textFormat(TextFormat textFormat) {
    this.textFormat = textFormat;
    return this;
  }

  /**
   * Get textFormat
   * @return textFormat
   */
  @javax.annotation.Nullable
  public TextFormat getTextFormat() {
    return textFormat;
  }

  public void setTextFormat(TextFormat textFormat) {
    this.textFormat = textFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaselineValueFormat baselineValueFormat = (BaselineValueFormat) o;
    return Objects.equals(this.comparisonType, baselineValueFormat.comparisonType) &&
        Objects.equals(this.description, baselineValueFormat.description) &&
        Objects.equals(this.negativeColor, baselineValueFormat.negativeColor) &&
        Objects.equals(this.negativeColorStyle, baselineValueFormat.negativeColorStyle) &&
        Objects.equals(this.position, baselineValueFormat.position) &&
        Objects.equals(this.positiveColor, baselineValueFormat.positiveColor) &&
        Objects.equals(this.positiveColorStyle, baselineValueFormat.positiveColorStyle) &&
        Objects.equals(this.textFormat, baselineValueFormat.textFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comparisonType, description, negativeColor, negativeColorStyle, position, positiveColor, positiveColorStyle, textFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaselineValueFormat {\n");
    sb.append("    comparisonType: ").append(toIndentedString(comparisonType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    negativeColor: ").append(toIndentedString(negativeColor)).append("\n");
    sb.append("    negativeColorStyle: ").append(toIndentedString(negativeColorStyle)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    positiveColor: ").append(toIndentedString(positiveColor)).append("\n");
    sb.append("    positiveColorStyle: ").append(toIndentedString(positiveColorStyle)).append("\n");
    sb.append("    textFormat: ").append(toIndentedString(textFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comparisonType");
    openapiFields.add("description");
    openapiFields.add("negativeColor");
    openapiFields.add("negativeColorStyle");
    openapiFields.add("position");
    openapiFields.add("positiveColor");
    openapiFields.add("positiveColorStyle");
    openapiFields.add("textFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BaselineValueFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BaselineValueFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BaselineValueFormat is not found in the empty JSON string", BaselineValueFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BaselineValueFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BaselineValueFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comparisonType") != null && !jsonObj.get("comparisonType").isJsonNull()) && !jsonObj.get("comparisonType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comparisonType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comparisonType").toString()));
      }
      // validate the optional field `comparisonType`
      if (jsonObj.get("comparisonType") != null && !jsonObj.get("comparisonType").isJsonNull()) {
        ComparisonTypeEnum.validateJsonElement(jsonObj.get("comparisonType"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `negativeColor`
      if (jsonObj.get("negativeColor") != null && !jsonObj.get("negativeColor").isJsonNull()) {
        Color.validateJsonElement(jsonObj.get("negativeColor"));
      }
      // validate the optional field `negativeColorStyle`
      if (jsonObj.get("negativeColorStyle") != null && !jsonObj.get("negativeColorStyle").isJsonNull()) {
        ColorStyle.validateJsonElement(jsonObj.get("negativeColorStyle"));
      }
      // validate the optional field `position`
      if (jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) {
        TextPosition.validateJsonElement(jsonObj.get("position"));
      }
      // validate the optional field `positiveColor`
      if (jsonObj.get("positiveColor") != null && !jsonObj.get("positiveColor").isJsonNull()) {
        Color.validateJsonElement(jsonObj.get("positiveColor"));
      }
      // validate the optional field `positiveColorStyle`
      if (jsonObj.get("positiveColorStyle") != null && !jsonObj.get("positiveColorStyle").isJsonNull()) {
        ColorStyle.validateJsonElement(jsonObj.get("positiveColorStyle"));
      }
      // validate the optional field `textFormat`
      if (jsonObj.get("textFormat") != null && !jsonObj.get("textFormat").isJsonNull()) {
        TextFormat.validateJsonElement(jsonObj.get("textFormat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BaselineValueFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BaselineValueFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BaselineValueFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BaselineValueFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<BaselineValueFormat>() {
           @Override
           public void write(JsonWriter out, BaselineValueFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BaselineValueFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BaselineValueFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BaselineValueFormat
   * @throws IOException if the JSON string is invalid with respect to BaselineValueFormat
   */
  public static BaselineValueFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BaselineValueFormat.class);
  }

  /**
   * Convert an instance of BaselineValueFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

