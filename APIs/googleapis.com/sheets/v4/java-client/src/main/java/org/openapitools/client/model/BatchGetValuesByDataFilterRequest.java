/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request for retrieving a range of values in a spreadsheet selected by a set of DataFilters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchGetValuesByDataFilterRequest {
  public static final String SERIALIZED_NAME_DATA_FILTERS = "dataFilters";
  @SerializedName(SERIALIZED_NAME_DATA_FILTERS)
  private List<DataFilter> dataFilters = new ArrayList<>();

  /**
   * How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
   */
  @JsonAdapter(DateTimeRenderOptionEnum.Adapter.class)
  public enum DateTimeRenderOptionEnum {
    SERIAL_NUMBER("SERIAL_NUMBER"),
    
    FORMATTED_STRING("FORMATTED_STRING");

    private String value;

    DateTimeRenderOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DateTimeRenderOptionEnum fromValue(String value) {
      for (DateTimeRenderOptionEnum b : DateTimeRenderOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DateTimeRenderOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DateTimeRenderOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DateTimeRenderOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DateTimeRenderOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DateTimeRenderOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATE_TIME_RENDER_OPTION = "dateTimeRenderOption";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_RENDER_OPTION)
  private DateTimeRenderOptionEnum dateTimeRenderOption;

  /**
   * The major dimension that results should use. For example, if the spreadsheet data is: &#x60;A1&#x3D;1,B1&#x3D;2,A2&#x3D;3,B2&#x3D;4&#x60;, then a request that selects that range and sets &#x60;majorDimension&#x3D;ROWS&#x60; returns &#x60;[[1,2],[3,4]]&#x60;, whereas a request that sets &#x60;majorDimension&#x3D;COLUMNS&#x60; returns &#x60;[[1,3],[2,4]]&#x60;.
   */
  @JsonAdapter(MajorDimensionEnum.Adapter.class)
  public enum MajorDimensionEnum {
    DIMENSION_UNSPECIFIED("DIMENSION_UNSPECIFIED"),
    
    ROWS("ROWS"),
    
    COLUMNS("COLUMNS");

    private String value;

    MajorDimensionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MajorDimensionEnum fromValue(String value) {
      for (MajorDimensionEnum b : MajorDimensionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MajorDimensionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MajorDimensionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MajorDimensionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MajorDimensionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MajorDimensionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAJOR_DIMENSION = "majorDimension";
  @SerializedName(SERIALIZED_NAME_MAJOR_DIMENSION)
  private MajorDimensionEnum majorDimension;

  /**
   * How values should be represented in the output. The default render option is FORMATTED_VALUE.
   */
  @JsonAdapter(ValueRenderOptionEnum.Adapter.class)
  public enum ValueRenderOptionEnum {
    FORMATTED_VALUE("FORMATTED_VALUE"),
    
    UNFORMATTED_VALUE("UNFORMATTED_VALUE"),
    
    FORMULA("FORMULA");

    private String value;

    ValueRenderOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValueRenderOptionEnum fromValue(String value) {
      for (ValueRenderOptionEnum b : ValueRenderOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValueRenderOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValueRenderOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValueRenderOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValueRenderOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ValueRenderOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VALUE_RENDER_OPTION = "valueRenderOption";
  @SerializedName(SERIALIZED_NAME_VALUE_RENDER_OPTION)
  private ValueRenderOptionEnum valueRenderOption;

  public BatchGetValuesByDataFilterRequest() {
  }

  public BatchGetValuesByDataFilterRequest dataFilters(List<DataFilter> dataFilters) {
    this.dataFilters = dataFilters;
    return this;
  }

  public BatchGetValuesByDataFilterRequest addDataFiltersItem(DataFilter dataFiltersItem) {
    if (this.dataFilters == null) {
      this.dataFilters = new ArrayList<>();
    }
    this.dataFilters.add(dataFiltersItem);
    return this;
  }

  /**
   * The data filters used to match the ranges of values to retrieve. Ranges that match any of the specified data filters are included in the response.
   * @return dataFilters
   */
  @javax.annotation.Nullable
  public List<DataFilter> getDataFilters() {
    return dataFilters;
  }

  public void setDataFilters(List<DataFilter> dataFilters) {
    this.dataFilters = dataFilters;
  }


  public BatchGetValuesByDataFilterRequest dateTimeRenderOption(DateTimeRenderOptionEnum dateTimeRenderOption) {
    this.dateTimeRenderOption = dateTimeRenderOption;
    return this;
  }

  /**
   * How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
   * @return dateTimeRenderOption
   */
  @javax.annotation.Nullable
  public DateTimeRenderOptionEnum getDateTimeRenderOption() {
    return dateTimeRenderOption;
  }

  public void setDateTimeRenderOption(DateTimeRenderOptionEnum dateTimeRenderOption) {
    this.dateTimeRenderOption = dateTimeRenderOption;
  }


  public BatchGetValuesByDataFilterRequest majorDimension(MajorDimensionEnum majorDimension) {
    this.majorDimension = majorDimension;
    return this;
  }

  /**
   * The major dimension that results should use. For example, if the spreadsheet data is: &#x60;A1&#x3D;1,B1&#x3D;2,A2&#x3D;3,B2&#x3D;4&#x60;, then a request that selects that range and sets &#x60;majorDimension&#x3D;ROWS&#x60; returns &#x60;[[1,2],[3,4]]&#x60;, whereas a request that sets &#x60;majorDimension&#x3D;COLUMNS&#x60; returns &#x60;[[1,3],[2,4]]&#x60;.
   * @return majorDimension
   */
  @javax.annotation.Nullable
  public MajorDimensionEnum getMajorDimension() {
    return majorDimension;
  }

  public void setMajorDimension(MajorDimensionEnum majorDimension) {
    this.majorDimension = majorDimension;
  }


  public BatchGetValuesByDataFilterRequest valueRenderOption(ValueRenderOptionEnum valueRenderOption) {
    this.valueRenderOption = valueRenderOption;
    return this;
  }

  /**
   * How values should be represented in the output. The default render option is FORMATTED_VALUE.
   * @return valueRenderOption
   */
  @javax.annotation.Nullable
  public ValueRenderOptionEnum getValueRenderOption() {
    return valueRenderOption;
  }

  public void setValueRenderOption(ValueRenderOptionEnum valueRenderOption) {
    this.valueRenderOption = valueRenderOption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchGetValuesByDataFilterRequest batchGetValuesByDataFilterRequest = (BatchGetValuesByDataFilterRequest) o;
    return Objects.equals(this.dataFilters, batchGetValuesByDataFilterRequest.dataFilters) &&
        Objects.equals(this.dateTimeRenderOption, batchGetValuesByDataFilterRequest.dateTimeRenderOption) &&
        Objects.equals(this.majorDimension, batchGetValuesByDataFilterRequest.majorDimension) &&
        Objects.equals(this.valueRenderOption, batchGetValuesByDataFilterRequest.valueRenderOption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataFilters, dateTimeRenderOption, majorDimension, valueRenderOption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchGetValuesByDataFilterRequest {\n");
    sb.append("    dataFilters: ").append(toIndentedString(dataFilters)).append("\n");
    sb.append("    dateTimeRenderOption: ").append(toIndentedString(dateTimeRenderOption)).append("\n");
    sb.append("    majorDimension: ").append(toIndentedString(majorDimension)).append("\n");
    sb.append("    valueRenderOption: ").append(toIndentedString(valueRenderOption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataFilters");
    openapiFields.add("dateTimeRenderOption");
    openapiFields.add("majorDimension");
    openapiFields.add("valueRenderOption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchGetValuesByDataFilterRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchGetValuesByDataFilterRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchGetValuesByDataFilterRequest is not found in the empty JSON string", BatchGetValuesByDataFilterRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchGetValuesByDataFilterRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchGetValuesByDataFilterRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dataFilters") != null && !jsonObj.get("dataFilters").isJsonNull()) {
        JsonArray jsonArraydataFilters = jsonObj.getAsJsonArray("dataFilters");
        if (jsonArraydataFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataFilters` to be an array in the JSON string but got `%s`", jsonObj.get("dataFilters").toString()));
          }

          // validate the optional field `dataFilters` (array)
          for (int i = 0; i < jsonArraydataFilters.size(); i++) {
            DataFilter.validateJsonElement(jsonArraydataFilters.get(i));
          };
        }
      }
      if ((jsonObj.get("dateTimeRenderOption") != null && !jsonObj.get("dateTimeRenderOption").isJsonNull()) && !jsonObj.get("dateTimeRenderOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateTimeRenderOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateTimeRenderOption").toString()));
      }
      // validate the optional field `dateTimeRenderOption`
      if (jsonObj.get("dateTimeRenderOption") != null && !jsonObj.get("dateTimeRenderOption").isJsonNull()) {
        DateTimeRenderOptionEnum.validateJsonElement(jsonObj.get("dateTimeRenderOption"));
      }
      if ((jsonObj.get("majorDimension") != null && !jsonObj.get("majorDimension").isJsonNull()) && !jsonObj.get("majorDimension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `majorDimension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("majorDimension").toString()));
      }
      // validate the optional field `majorDimension`
      if (jsonObj.get("majorDimension") != null && !jsonObj.get("majorDimension").isJsonNull()) {
        MajorDimensionEnum.validateJsonElement(jsonObj.get("majorDimension"));
      }
      if ((jsonObj.get("valueRenderOption") != null && !jsonObj.get("valueRenderOption").isJsonNull()) && !jsonObj.get("valueRenderOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueRenderOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueRenderOption").toString()));
      }
      // validate the optional field `valueRenderOption`
      if (jsonObj.get("valueRenderOption") != null && !jsonObj.get("valueRenderOption").isJsonNull()) {
        ValueRenderOptionEnum.validateJsonElement(jsonObj.get("valueRenderOption"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchGetValuesByDataFilterRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchGetValuesByDataFilterRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchGetValuesByDataFilterRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchGetValuesByDataFilterRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchGetValuesByDataFilterRequest>() {
           @Override
           public void write(JsonWriter out, BatchGetValuesByDataFilterRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchGetValuesByDataFilterRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchGetValuesByDataFilterRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchGetValuesByDataFilterRequest
   * @throws IOException if the JSON string is invalid with respect to BatchGetValuesByDataFilterRequest
   */
  public static BatchGetValuesByDataFilterRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchGetValuesByDataFilterRequest.class);
  }

  /**
   * Convert an instance of BatchGetValuesByDataFilterRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

