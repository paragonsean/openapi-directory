/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.FilterCriteria;
import org.openapitools.client.model.FilterSpec;
import org.openapitools.client.model.GridRange;
import org.openapitools.client.model.SortSpec;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A filter view.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FilterView {
  public static final String SERIALIZED_NAME_CRITERIA = "criteria";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CRITERIA)
  private Map<String, FilterCriteria> criteria = new HashMap<>();

  public static final String SERIALIZED_NAME_FILTER_SPECS = "filterSpecs";
  @SerializedName(SERIALIZED_NAME_FILTER_SPECS)
  private List<FilterSpec> filterSpecs = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTER_VIEW_ID = "filterViewId";
  @SerializedName(SERIALIZED_NAME_FILTER_VIEW_ID)
  private Integer filterViewId;

  public static final String SERIALIZED_NAME_NAMED_RANGE_ID = "namedRangeId";
  @SerializedName(SERIALIZED_NAME_NAMED_RANGE_ID)
  private String namedRangeId;

  public static final String SERIALIZED_NAME_RANGE = "range";
  @SerializedName(SERIALIZED_NAME_RANGE)
  private GridRange range;

  public static final String SERIALIZED_NAME_SORT_SPECS = "sortSpecs";
  @SerializedName(SERIALIZED_NAME_SORT_SPECS)
  private List<SortSpec> sortSpecs = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public FilterView() {
  }

  @Deprecated
  public FilterView criteria(Map<String, FilterCriteria> criteria) {
    this.criteria = criteria;
    return this;
  }

  public FilterView putCriteriaItem(String key, FilterCriteria criteriaItem) {
    if (this.criteria == null) {
      this.criteria = new HashMap<>();
    }
    this.criteria.put(key, criteriaItem);
    return this;
  }

  /**
   * The criteria for showing/hiding values per column. The map&#39;s key is the column index, and the value is the criteria for that column. This field is deprecated in favor of filter_specs.
   * @return criteria
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Map<String, FilterCriteria> getCriteria() {
    return criteria;
  }

  @Deprecated
  public void setCriteria(Map<String, FilterCriteria> criteria) {
    this.criteria = criteria;
  }


  public FilterView filterSpecs(List<FilterSpec> filterSpecs) {
    this.filterSpecs = filterSpecs;
    return this;
  }

  public FilterView addFilterSpecsItem(FilterSpec filterSpecsItem) {
    if (this.filterSpecs == null) {
      this.filterSpecs = new ArrayList<>();
    }
    this.filterSpecs.add(filterSpecsItem);
    return this;
  }

  /**
   * The filter criteria for showing/hiding values per column. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.
   * @return filterSpecs
   */
  @javax.annotation.Nullable
  public List<FilterSpec> getFilterSpecs() {
    return filterSpecs;
  }

  public void setFilterSpecs(List<FilterSpec> filterSpecs) {
    this.filterSpecs = filterSpecs;
  }


  public FilterView filterViewId(Integer filterViewId) {
    this.filterViewId = filterViewId;
    return this;
  }

  /**
   * The ID of the filter view.
   * @return filterViewId
   */
  @javax.annotation.Nullable
  public Integer getFilterViewId() {
    return filterViewId;
  }

  public void setFilterViewId(Integer filterViewId) {
    this.filterViewId = filterViewId;
  }


  public FilterView namedRangeId(String namedRangeId) {
    this.namedRangeId = namedRangeId;
    return this;
  }

  /**
   * The named range this filter view is backed by, if any. When writing, only one of range or named_range_id may be set.
   * @return namedRangeId
   */
  @javax.annotation.Nullable
  public String getNamedRangeId() {
    return namedRangeId;
  }

  public void setNamedRangeId(String namedRangeId) {
    this.namedRangeId = namedRangeId;
  }


  public FilterView range(GridRange range) {
    this.range = range;
    return this;
  }

  /**
   * Get range
   * @return range
   */
  @javax.annotation.Nullable
  public GridRange getRange() {
    return range;
  }

  public void setRange(GridRange range) {
    this.range = range;
  }


  public FilterView sortSpecs(List<SortSpec> sortSpecs) {
    this.sortSpecs = sortSpecs;
    return this;
  }

  public FilterView addSortSpecsItem(SortSpec sortSpecsItem) {
    if (this.sortSpecs == null) {
      this.sortSpecs = new ArrayList<>();
    }
    this.sortSpecs.add(sortSpecsItem);
    return this;
  }

  /**
   * The sort order per column. Later specifications are used when values are equal in the earlier specifications.
   * @return sortSpecs
   */
  @javax.annotation.Nullable
  public List<SortSpec> getSortSpecs() {
    return sortSpecs;
  }

  public void setSortSpecs(List<SortSpec> sortSpecs) {
    this.sortSpecs = sortSpecs;
  }


  public FilterView title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The name of the filter view.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterView filterView = (FilterView) o;
    return Objects.equals(this.criteria, filterView.criteria) &&
        Objects.equals(this.filterSpecs, filterView.filterSpecs) &&
        Objects.equals(this.filterViewId, filterView.filterViewId) &&
        Objects.equals(this.namedRangeId, filterView.namedRangeId) &&
        Objects.equals(this.range, filterView.range) &&
        Objects.equals(this.sortSpecs, filterView.sortSpecs) &&
        Objects.equals(this.title, filterView.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(criteria, filterSpecs, filterViewId, namedRangeId, range, sortSpecs, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterView {\n");
    sb.append("    criteria: ").append(toIndentedString(criteria)).append("\n");
    sb.append("    filterSpecs: ").append(toIndentedString(filterSpecs)).append("\n");
    sb.append("    filterViewId: ").append(toIndentedString(filterViewId)).append("\n");
    sb.append("    namedRangeId: ").append(toIndentedString(namedRangeId)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("    sortSpecs: ").append(toIndentedString(sortSpecs)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("criteria");
    openapiFields.add("filterSpecs");
    openapiFields.add("filterViewId");
    openapiFields.add("namedRangeId");
    openapiFields.add("range");
    openapiFields.add("sortSpecs");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FilterView
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FilterView.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FilterView is not found in the empty JSON string", FilterView.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FilterView.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FilterView` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("filterSpecs") != null && !jsonObj.get("filterSpecs").isJsonNull()) {
        JsonArray jsonArrayfilterSpecs = jsonObj.getAsJsonArray("filterSpecs");
        if (jsonArrayfilterSpecs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filterSpecs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filterSpecs` to be an array in the JSON string but got `%s`", jsonObj.get("filterSpecs").toString()));
          }

          // validate the optional field `filterSpecs` (array)
          for (int i = 0; i < jsonArrayfilterSpecs.size(); i++) {
            FilterSpec.validateJsonElement(jsonArrayfilterSpecs.get(i));
          };
        }
      }
      if ((jsonObj.get("namedRangeId") != null && !jsonObj.get("namedRangeId").isJsonNull()) && !jsonObj.get("namedRangeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namedRangeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namedRangeId").toString()));
      }
      // validate the optional field `range`
      if (jsonObj.get("range") != null && !jsonObj.get("range").isJsonNull()) {
        GridRange.validateJsonElement(jsonObj.get("range"));
      }
      if (jsonObj.get("sortSpecs") != null && !jsonObj.get("sortSpecs").isJsonNull()) {
        JsonArray jsonArraysortSpecs = jsonObj.getAsJsonArray("sortSpecs");
        if (jsonArraysortSpecs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sortSpecs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sortSpecs` to be an array in the JSON string but got `%s`", jsonObj.get("sortSpecs").toString()));
          }

          // validate the optional field `sortSpecs` (array)
          for (int i = 0; i < jsonArraysortSpecs.size(); i++) {
            SortSpec.validateJsonElement(jsonArraysortSpecs.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FilterView.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FilterView' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FilterView> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FilterView.class));

       return (TypeAdapter<T>) new TypeAdapter<FilterView>() {
           @Override
           public void write(JsonWriter out, FilterView value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FilterView read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FilterView given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FilterView
   * @throws IOException if the JSON string is invalid with respect to FilterView
   */
  public static FilterView fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FilterView.class);
  }

  /**
   * Convert an instance of FilterView to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

