/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The data execution status. A data execution is created to sync a data source object with the latest data from a DataSource. It is usually scheduled to run at background, you can check its state to tell if an execution completes There are several scenarios where a data execution is triggered to run: * Adding a data source creates an associated data source sheet as well as a data execution to sync the data from the data source to the sheet. * Updating a data source creates a data execution to refresh the associated data source sheet similarly. * You can send refresh request to explicitly refresh one or multiple data source objects.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataExecutionStatus {
  /**
   * The error code.
   */
  @JsonAdapter(ErrorCodeEnum.Adapter.class)
  public enum ErrorCodeEnum {
    DATA_EXECUTION_ERROR_CODE_UNSPECIFIED("DATA_EXECUTION_ERROR_CODE_UNSPECIFIED"),
    
    TIMED_OUT("TIMED_OUT"),
    
    TOO_MANY_ROWS("TOO_MANY_ROWS"),
    
    TOO_MANY_COLUMNS("TOO_MANY_COLUMNS"),
    
    TOO_MANY_CELLS("TOO_MANY_CELLS"),
    
    ENGINE("ENGINE"),
    
    PARAMETER_INVALID("PARAMETER_INVALID"),
    
    UNSUPPORTED_DATA_TYPE("UNSUPPORTED_DATA_TYPE"),
    
    DUPLICATE_COLUMN_NAMES("DUPLICATE_COLUMN_NAMES"),
    
    INTERRUPTED("INTERRUPTED"),
    
    CONCURRENT_QUERY("CONCURRENT_QUERY"),
    
    OTHER("OTHER"),
    
    TOO_MANY_CHARS_PER_CELL("TOO_MANY_CHARS_PER_CELL"),
    
    DATA_NOT_FOUND("DATA_NOT_FOUND"),
    
    PERMISSION_DENIED("PERMISSION_DENIED"),
    
    MISSING_COLUMN_ALIAS("MISSING_COLUMN_ALIAS"),
    
    OBJECT_NOT_FOUND("OBJECT_NOT_FOUND"),
    
    OBJECT_IN_ERROR_STATE("OBJECT_IN_ERROR_STATE"),
    
    OBJECT_SPEC_INVALID("OBJECT_SPEC_INVALID");

    private String value;

    ErrorCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorCodeEnum fromValue(String value) {
      for (ErrorCodeEnum b : ErrorCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ErrorCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ErrorCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ErrorCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private ErrorCodeEnum errorCode;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_LAST_REFRESH_TIME = "lastRefreshTime";
  @SerializedName(SERIALIZED_NAME_LAST_REFRESH_TIME)
  private String lastRefreshTime;

  /**
   * The state of the data execution.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    DATA_EXECUTION_STATE_UNSPECIFIED("DATA_EXECUTION_STATE_UNSPECIFIED"),
    
    NOT_STARTED("NOT_STARTED"),
    
    RUNNING("RUNNING"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public DataExecutionStatus() {
  }

  public DataExecutionStatus errorCode(ErrorCodeEnum errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * The error code.
   * @return errorCode
   */
  @javax.annotation.Nullable
  public ErrorCodeEnum getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(ErrorCodeEnum errorCode) {
    this.errorCode = errorCode;
  }


  public DataExecutionStatus errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * The error message, which may be empty.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public DataExecutionStatus lastRefreshTime(String lastRefreshTime) {
    this.lastRefreshTime = lastRefreshTime;
    return this;
  }

  /**
   * Gets the time the data last successfully refreshed.
   * @return lastRefreshTime
   */
  @javax.annotation.Nullable
  public String getLastRefreshTime() {
    return lastRefreshTime;
  }

  public void setLastRefreshTime(String lastRefreshTime) {
    this.lastRefreshTime = lastRefreshTime;
  }


  public DataExecutionStatus state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The state of the data execution.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataExecutionStatus dataExecutionStatus = (DataExecutionStatus) o;
    return Objects.equals(this.errorCode, dataExecutionStatus.errorCode) &&
        Objects.equals(this.errorMessage, dataExecutionStatus.errorMessage) &&
        Objects.equals(this.lastRefreshTime, dataExecutionStatus.lastRefreshTime) &&
        Objects.equals(this.state, dataExecutionStatus.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorCode, errorMessage, lastRefreshTime, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataExecutionStatus {\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    lastRefreshTime: ").append(toIndentedString(lastRefreshTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("errorCode");
    openapiFields.add("errorMessage");
    openapiFields.add("lastRefreshTime");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataExecutionStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataExecutionStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataExecutionStatus is not found in the empty JSON string", DataExecutionStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataExecutionStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataExecutionStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("errorCode") != null && !jsonObj.get("errorCode").isJsonNull()) && !jsonObj.get("errorCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorCode").toString()));
      }
      // validate the optional field `errorCode`
      if (jsonObj.get("errorCode") != null && !jsonObj.get("errorCode").isJsonNull()) {
        ErrorCodeEnum.validateJsonElement(jsonObj.get("errorCode"));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if ((jsonObj.get("lastRefreshTime") != null && !jsonObj.get("lastRefreshTime").isJsonNull()) && !jsonObj.get("lastRefreshTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastRefreshTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastRefreshTime").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataExecutionStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataExecutionStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataExecutionStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataExecutionStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<DataExecutionStatus>() {
           @Override
           public void write(JsonWriter out, DataExecutionStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataExecutionStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataExecutionStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataExecutionStatus
   * @throws IOException if the JSON string is invalid with respect to DataExecutionStatus
   */
  public static DataExecutionStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataExecutionStatus.class);
  }

  /**
   * Convert an instance of DataExecutionStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

