/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GridRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Copies data from the source to the destination.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CopyPasteRequest {
  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private GridRange destination;

  /**
   * How that data should be oriented when pasting.
   */
  @JsonAdapter(PasteOrientationEnum.Adapter.class)
  public enum PasteOrientationEnum {
    NORMAL("NORMAL"),
    
    TRANSPOSE("TRANSPOSE");

    private String value;

    PasteOrientationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PasteOrientationEnum fromValue(String value) {
      for (PasteOrientationEnum b : PasteOrientationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PasteOrientationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PasteOrientationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PasteOrientationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PasteOrientationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PasteOrientationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PASTE_ORIENTATION = "pasteOrientation";
  @SerializedName(SERIALIZED_NAME_PASTE_ORIENTATION)
  private PasteOrientationEnum pasteOrientation;

  /**
   * What kind of data to paste.
   */
  @JsonAdapter(PasteTypeEnum.Adapter.class)
  public enum PasteTypeEnum {
    NORMAL("PASTE_NORMAL"),
    
    VALUES("PASTE_VALUES"),
    
    FORMAT("PASTE_FORMAT"),
    
    NO_BORDERS("PASTE_NO_BORDERS"),
    
    FORMULA("PASTE_FORMULA"),
    
    DATA_VALIDATION("PASTE_DATA_VALIDATION"),
    
    CONDITIONAL_FORMATTING("PASTE_CONDITIONAL_FORMATTING");

    private String value;

    PasteTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PasteTypeEnum fromValue(String value) {
      for (PasteTypeEnum b : PasteTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PasteTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PasteTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PasteTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PasteTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PasteTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PASTE_TYPE = "pasteType";
  @SerializedName(SERIALIZED_NAME_PASTE_TYPE)
  private PasteTypeEnum pasteType;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private GridRange source;

  public CopyPasteRequest() {
  }

  public CopyPasteRequest destination(GridRange destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nullable
  public GridRange getDestination() {
    return destination;
  }

  public void setDestination(GridRange destination) {
    this.destination = destination;
  }


  public CopyPasteRequest pasteOrientation(PasteOrientationEnum pasteOrientation) {
    this.pasteOrientation = pasteOrientation;
    return this;
  }

  /**
   * How that data should be oriented when pasting.
   * @return pasteOrientation
   */
  @javax.annotation.Nullable
  public PasteOrientationEnum getPasteOrientation() {
    return pasteOrientation;
  }

  public void setPasteOrientation(PasteOrientationEnum pasteOrientation) {
    this.pasteOrientation = pasteOrientation;
  }


  public CopyPasteRequest pasteType(PasteTypeEnum pasteType) {
    this.pasteType = pasteType;
    return this;
  }

  /**
   * What kind of data to paste.
   * @return pasteType
   */
  @javax.annotation.Nullable
  public PasteTypeEnum getPasteType() {
    return pasteType;
  }

  public void setPasteType(PasteTypeEnum pasteType) {
    this.pasteType = pasteType;
  }


  public CopyPasteRequest source(GridRange source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public GridRange getSource() {
    return source;
  }

  public void setSource(GridRange source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CopyPasteRequest copyPasteRequest = (CopyPasteRequest) o;
    return Objects.equals(this.destination, copyPasteRequest.destination) &&
        Objects.equals(this.pasteOrientation, copyPasteRequest.pasteOrientation) &&
        Objects.equals(this.pasteType, copyPasteRequest.pasteType) &&
        Objects.equals(this.source, copyPasteRequest.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destination, pasteOrientation, pasteType, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CopyPasteRequest {\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    pasteOrientation: ").append(toIndentedString(pasteOrientation)).append("\n");
    sb.append("    pasteType: ").append(toIndentedString(pasteType)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destination");
    openapiFields.add("pasteOrientation");
    openapiFields.add("pasteType");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CopyPasteRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CopyPasteRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CopyPasteRequest is not found in the empty JSON string", CopyPasteRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CopyPasteRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CopyPasteRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `destination`
      if (jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) {
        GridRange.validateJsonElement(jsonObj.get("destination"));
      }
      if ((jsonObj.get("pasteOrientation") != null && !jsonObj.get("pasteOrientation").isJsonNull()) && !jsonObj.get("pasteOrientation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pasteOrientation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pasteOrientation").toString()));
      }
      // validate the optional field `pasteOrientation`
      if (jsonObj.get("pasteOrientation") != null && !jsonObj.get("pasteOrientation").isJsonNull()) {
        PasteOrientationEnum.validateJsonElement(jsonObj.get("pasteOrientation"));
      }
      if ((jsonObj.get("pasteType") != null && !jsonObj.get("pasteType").isJsonNull()) && !jsonObj.get("pasteType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pasteType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pasteType").toString()));
      }
      // validate the optional field `pasteType`
      if (jsonObj.get("pasteType") != null && !jsonObj.get("pasteType").isJsonNull()) {
        PasteTypeEnum.validateJsonElement(jsonObj.get("pasteType"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        GridRange.validateJsonElement(jsonObj.get("source"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CopyPasteRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CopyPasteRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CopyPasteRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CopyPasteRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CopyPasteRequest>() {
           @Override
           public void write(JsonWriter out, CopyPasteRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CopyPasteRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CopyPasteRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CopyPasteRequest
   * @throws IOException if the JSON string is invalid with respect to CopyPasteRequest
   */
  public static CopyPasteRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CopyPasteRequest.class);
  }

  /**
   * Convert an instance of CopyPasteRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

