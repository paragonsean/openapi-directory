/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HistogramSeries;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A histogram chart. A histogram chart groups data items into bins, displaying each bin as a column of stacked items. Histograms are used to display the distribution of a dataset. Each column of items represents a range into which those items fall. The number of bins can be chosen automatically or specified explicitly.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HistogramChartSpec {
  public static final String SERIALIZED_NAME_BUCKET_SIZE = "bucketSize";
  @SerializedName(SERIALIZED_NAME_BUCKET_SIZE)
  private Double bucketSize;

  /**
   * The position of the chart legend.
   */
  @JsonAdapter(LegendPositionEnum.Adapter.class)
  public enum LegendPositionEnum {
    HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED("HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED"),
    
    BOTTOM_LEGEND("BOTTOM_LEGEND"),
    
    LEFT_LEGEND("LEFT_LEGEND"),
    
    RIGHT_LEGEND("RIGHT_LEGEND"),
    
    TOP_LEGEND("TOP_LEGEND"),
    
    NO_LEGEND("NO_LEGEND"),
    
    INSIDE_LEGEND("INSIDE_LEGEND");

    private String value;

    LegendPositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LegendPositionEnum fromValue(String value) {
      for (LegendPositionEnum b : LegendPositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LegendPositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LegendPositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LegendPositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LegendPositionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LegendPositionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEGEND_POSITION = "legendPosition";
  @SerializedName(SERIALIZED_NAME_LEGEND_POSITION)
  private LegendPositionEnum legendPosition;

  public static final String SERIALIZED_NAME_OUTLIER_PERCENTILE = "outlierPercentile";
  @SerializedName(SERIALIZED_NAME_OUTLIER_PERCENTILE)
  private Double outlierPercentile;

  public static final String SERIALIZED_NAME_SERIES = "series";
  @SerializedName(SERIALIZED_NAME_SERIES)
  private List<HistogramSeries> series = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHOW_ITEM_DIVIDERS = "showItemDividers";
  @SerializedName(SERIALIZED_NAME_SHOW_ITEM_DIVIDERS)
  private Boolean showItemDividers;

  public HistogramChartSpec() {
  }

  public HistogramChartSpec bucketSize(Double bucketSize) {
    this.bucketSize = bucketSize;
    return this;
  }

  /**
   * By default the bucket size (the range of values stacked in a single column) is chosen automatically, but it may be overridden here. E.g., A bucket size of 1.5 results in buckets from 0 - 1.5, 1.5 - 3.0, etc. Cannot be negative. This field is optional.
   * @return bucketSize
   */
  @javax.annotation.Nullable
  public Double getBucketSize() {
    return bucketSize;
  }

  public void setBucketSize(Double bucketSize) {
    this.bucketSize = bucketSize;
  }


  public HistogramChartSpec legendPosition(LegendPositionEnum legendPosition) {
    this.legendPosition = legendPosition;
    return this;
  }

  /**
   * The position of the chart legend.
   * @return legendPosition
   */
  @javax.annotation.Nullable
  public LegendPositionEnum getLegendPosition() {
    return legendPosition;
  }

  public void setLegendPosition(LegendPositionEnum legendPosition) {
    this.legendPosition = legendPosition;
  }


  public HistogramChartSpec outlierPercentile(Double outlierPercentile) {
    this.outlierPercentile = outlierPercentile;
    return this;
  }

  /**
   * The outlier percentile is used to ensure that outliers do not adversely affect the calculation of bucket sizes. For example, setting an outlier percentile of 0.05 indicates that the top and bottom 5% of values when calculating buckets. The values are still included in the chart, they will be added to the first or last buckets instead of their own buckets. Must be between 0.0 and 0.5.
   * @return outlierPercentile
   */
  @javax.annotation.Nullable
  public Double getOutlierPercentile() {
    return outlierPercentile;
  }

  public void setOutlierPercentile(Double outlierPercentile) {
    this.outlierPercentile = outlierPercentile;
  }


  public HistogramChartSpec series(List<HistogramSeries> series) {
    this.series = series;
    return this;
  }

  public HistogramChartSpec addSeriesItem(HistogramSeries seriesItem) {
    if (this.series == null) {
      this.series = new ArrayList<>();
    }
    this.series.add(seriesItem);
    return this;
  }

  /**
   * The series for a histogram may be either a single series of values to be bucketed or multiple series, each of the same length, containing the name of the series followed by the values to be bucketed for that series.
   * @return series
   */
  @javax.annotation.Nullable
  public List<HistogramSeries> getSeries() {
    return series;
  }

  public void setSeries(List<HistogramSeries> series) {
    this.series = series;
  }


  public HistogramChartSpec showItemDividers(Boolean showItemDividers) {
    this.showItemDividers = showItemDividers;
    return this;
  }

  /**
   * Whether horizontal divider lines should be displayed between items in each column.
   * @return showItemDividers
   */
  @javax.annotation.Nullable
  public Boolean getShowItemDividers() {
    return showItemDividers;
  }

  public void setShowItemDividers(Boolean showItemDividers) {
    this.showItemDividers = showItemDividers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistogramChartSpec histogramChartSpec = (HistogramChartSpec) o;
    return Objects.equals(this.bucketSize, histogramChartSpec.bucketSize) &&
        Objects.equals(this.legendPosition, histogramChartSpec.legendPosition) &&
        Objects.equals(this.outlierPercentile, histogramChartSpec.outlierPercentile) &&
        Objects.equals(this.series, histogramChartSpec.series) &&
        Objects.equals(this.showItemDividers, histogramChartSpec.showItemDividers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketSize, legendPosition, outlierPercentile, series, showItemDividers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistogramChartSpec {\n");
    sb.append("    bucketSize: ").append(toIndentedString(bucketSize)).append("\n");
    sb.append("    legendPosition: ").append(toIndentedString(legendPosition)).append("\n");
    sb.append("    outlierPercentile: ").append(toIndentedString(outlierPercentile)).append("\n");
    sb.append("    series: ").append(toIndentedString(series)).append("\n");
    sb.append("    showItemDividers: ").append(toIndentedString(showItemDividers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bucketSize");
    openapiFields.add("legendPosition");
    openapiFields.add("outlierPercentile");
    openapiFields.add("series");
    openapiFields.add("showItemDividers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HistogramChartSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HistogramChartSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HistogramChartSpec is not found in the empty JSON string", HistogramChartSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HistogramChartSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HistogramChartSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("legendPosition") != null && !jsonObj.get("legendPosition").isJsonNull()) && !jsonObj.get("legendPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legendPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legendPosition").toString()));
      }
      // validate the optional field `legendPosition`
      if (jsonObj.get("legendPosition") != null && !jsonObj.get("legendPosition").isJsonNull()) {
        LegendPositionEnum.validateJsonElement(jsonObj.get("legendPosition"));
      }
      if (jsonObj.get("series") != null && !jsonObj.get("series").isJsonNull()) {
        JsonArray jsonArrayseries = jsonObj.getAsJsonArray("series");
        if (jsonArrayseries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("series").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `series` to be an array in the JSON string but got `%s`", jsonObj.get("series").toString()));
          }

          // validate the optional field `series` (array)
          for (int i = 0; i < jsonArrayseries.size(); i++) {
            HistogramSeries.validateJsonElement(jsonArrayseries.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HistogramChartSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HistogramChartSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HistogramChartSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HistogramChartSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<HistogramChartSpec>() {
           @Override
           public void write(JsonWriter out, HistogramChartSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HistogramChartSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HistogramChartSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HistogramChartSpec
   * @throws IOException if the JSON string is invalid with respect to HistogramChartSpec
   */
  public static HistogramChartSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HistogramChartSpec.class);
  }

  /**
   * Convert an instance of HistogramChartSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

