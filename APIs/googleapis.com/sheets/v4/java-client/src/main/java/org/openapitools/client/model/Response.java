/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AddBandingResponse;
import org.openapitools.client.model.AddChartResponse;
import org.openapitools.client.model.AddDataSourceResponse;
import org.openapitools.client.model.AddDimensionGroupResponse;
import org.openapitools.client.model.AddFilterViewResponse;
import org.openapitools.client.model.AddNamedRangeResponse;
import org.openapitools.client.model.AddProtectedRangeResponse;
import org.openapitools.client.model.AddSheetResponse;
import org.openapitools.client.model.AddSlicerResponse;
import org.openapitools.client.model.CreateDeveloperMetadataResponse;
import org.openapitools.client.model.DeleteConditionalFormatRuleResponse;
import org.openapitools.client.model.DeleteDeveloperMetadataResponse;
import org.openapitools.client.model.DeleteDimensionGroupResponse;
import org.openapitools.client.model.DeleteDuplicatesResponse;
import org.openapitools.client.model.DuplicateFilterViewResponse;
import org.openapitools.client.model.DuplicateSheetResponse;
import org.openapitools.client.model.FindReplaceResponse;
import org.openapitools.client.model.RefreshDataSourceResponse;
import org.openapitools.client.model.TrimWhitespaceResponse;
import org.openapitools.client.model.UpdateConditionalFormatRuleResponse;
import org.openapitools.client.model.UpdateDataSourceResponse;
import org.openapitools.client.model.UpdateDeveloperMetadataResponse;
import org.openapitools.client.model.UpdateEmbeddedObjectPositionResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single response from an update.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Response {
  public static final String SERIALIZED_NAME_ADD_BANDING = "addBanding";
  @SerializedName(SERIALIZED_NAME_ADD_BANDING)
  private AddBandingResponse addBanding;

  public static final String SERIALIZED_NAME_ADD_CHART = "addChart";
  @SerializedName(SERIALIZED_NAME_ADD_CHART)
  private AddChartResponse addChart;

  public static final String SERIALIZED_NAME_ADD_DATA_SOURCE = "addDataSource";
  @SerializedName(SERIALIZED_NAME_ADD_DATA_SOURCE)
  private AddDataSourceResponse addDataSource;

  public static final String SERIALIZED_NAME_ADD_DIMENSION_GROUP = "addDimensionGroup";
  @SerializedName(SERIALIZED_NAME_ADD_DIMENSION_GROUP)
  private AddDimensionGroupResponse addDimensionGroup;

  public static final String SERIALIZED_NAME_ADD_FILTER_VIEW = "addFilterView";
  @SerializedName(SERIALIZED_NAME_ADD_FILTER_VIEW)
  private AddFilterViewResponse addFilterView;

  public static final String SERIALIZED_NAME_ADD_NAMED_RANGE = "addNamedRange";
  @SerializedName(SERIALIZED_NAME_ADD_NAMED_RANGE)
  private AddNamedRangeResponse addNamedRange;

  public static final String SERIALIZED_NAME_ADD_PROTECTED_RANGE = "addProtectedRange";
  @SerializedName(SERIALIZED_NAME_ADD_PROTECTED_RANGE)
  private AddProtectedRangeResponse addProtectedRange;

  public static final String SERIALIZED_NAME_ADD_SHEET = "addSheet";
  @SerializedName(SERIALIZED_NAME_ADD_SHEET)
  private AddSheetResponse addSheet;

  public static final String SERIALIZED_NAME_ADD_SLICER = "addSlicer";
  @SerializedName(SERIALIZED_NAME_ADD_SLICER)
  private AddSlicerResponse addSlicer;

  public static final String SERIALIZED_NAME_CREATE_DEVELOPER_METADATA = "createDeveloperMetadata";
  @SerializedName(SERIALIZED_NAME_CREATE_DEVELOPER_METADATA)
  private CreateDeveloperMetadataResponse createDeveloperMetadata;

  public static final String SERIALIZED_NAME_DELETE_CONDITIONAL_FORMAT_RULE = "deleteConditionalFormatRule";
  @SerializedName(SERIALIZED_NAME_DELETE_CONDITIONAL_FORMAT_RULE)
  private DeleteConditionalFormatRuleResponse deleteConditionalFormatRule;

  public static final String SERIALIZED_NAME_DELETE_DEVELOPER_METADATA = "deleteDeveloperMetadata";
  @SerializedName(SERIALIZED_NAME_DELETE_DEVELOPER_METADATA)
  private DeleteDeveloperMetadataResponse deleteDeveloperMetadata;

  public static final String SERIALIZED_NAME_DELETE_DIMENSION_GROUP = "deleteDimensionGroup";
  @SerializedName(SERIALIZED_NAME_DELETE_DIMENSION_GROUP)
  private DeleteDimensionGroupResponse deleteDimensionGroup;

  public static final String SERIALIZED_NAME_DELETE_DUPLICATES = "deleteDuplicates";
  @SerializedName(SERIALIZED_NAME_DELETE_DUPLICATES)
  private DeleteDuplicatesResponse deleteDuplicates;

  public static final String SERIALIZED_NAME_DUPLICATE_FILTER_VIEW = "duplicateFilterView";
  @SerializedName(SERIALIZED_NAME_DUPLICATE_FILTER_VIEW)
  private DuplicateFilterViewResponse duplicateFilterView;

  public static final String SERIALIZED_NAME_DUPLICATE_SHEET = "duplicateSheet";
  @SerializedName(SERIALIZED_NAME_DUPLICATE_SHEET)
  private DuplicateSheetResponse duplicateSheet;

  public static final String SERIALIZED_NAME_FIND_REPLACE = "findReplace";
  @SerializedName(SERIALIZED_NAME_FIND_REPLACE)
  private FindReplaceResponse findReplace;

  public static final String SERIALIZED_NAME_REFRESH_DATA_SOURCE = "refreshDataSource";
  @SerializedName(SERIALIZED_NAME_REFRESH_DATA_SOURCE)
  private RefreshDataSourceResponse refreshDataSource;

  public static final String SERIALIZED_NAME_TRIM_WHITESPACE = "trimWhitespace";
  @SerializedName(SERIALIZED_NAME_TRIM_WHITESPACE)
  private TrimWhitespaceResponse trimWhitespace;

  public static final String SERIALIZED_NAME_UPDATE_CONDITIONAL_FORMAT_RULE = "updateConditionalFormatRule";
  @SerializedName(SERIALIZED_NAME_UPDATE_CONDITIONAL_FORMAT_RULE)
  private UpdateConditionalFormatRuleResponse updateConditionalFormatRule;

  public static final String SERIALIZED_NAME_UPDATE_DATA_SOURCE = "updateDataSource";
  @SerializedName(SERIALIZED_NAME_UPDATE_DATA_SOURCE)
  private UpdateDataSourceResponse updateDataSource;

  public static final String SERIALIZED_NAME_UPDATE_DEVELOPER_METADATA = "updateDeveloperMetadata";
  @SerializedName(SERIALIZED_NAME_UPDATE_DEVELOPER_METADATA)
  private UpdateDeveloperMetadataResponse updateDeveloperMetadata;

  public static final String SERIALIZED_NAME_UPDATE_EMBEDDED_OBJECT_POSITION = "updateEmbeddedObjectPosition";
  @SerializedName(SERIALIZED_NAME_UPDATE_EMBEDDED_OBJECT_POSITION)
  private UpdateEmbeddedObjectPositionResponse updateEmbeddedObjectPosition;

  public Response() {
  }

  public Response addBanding(AddBandingResponse addBanding) {
    this.addBanding = addBanding;
    return this;
  }

  /**
   * Get addBanding
   * @return addBanding
   */
  @javax.annotation.Nullable
  public AddBandingResponse getAddBanding() {
    return addBanding;
  }

  public void setAddBanding(AddBandingResponse addBanding) {
    this.addBanding = addBanding;
  }


  public Response addChart(AddChartResponse addChart) {
    this.addChart = addChart;
    return this;
  }

  /**
   * Get addChart
   * @return addChart
   */
  @javax.annotation.Nullable
  public AddChartResponse getAddChart() {
    return addChart;
  }

  public void setAddChart(AddChartResponse addChart) {
    this.addChart = addChart;
  }


  public Response addDataSource(AddDataSourceResponse addDataSource) {
    this.addDataSource = addDataSource;
    return this;
  }

  /**
   * Get addDataSource
   * @return addDataSource
   */
  @javax.annotation.Nullable
  public AddDataSourceResponse getAddDataSource() {
    return addDataSource;
  }

  public void setAddDataSource(AddDataSourceResponse addDataSource) {
    this.addDataSource = addDataSource;
  }


  public Response addDimensionGroup(AddDimensionGroupResponse addDimensionGroup) {
    this.addDimensionGroup = addDimensionGroup;
    return this;
  }

  /**
   * Get addDimensionGroup
   * @return addDimensionGroup
   */
  @javax.annotation.Nullable
  public AddDimensionGroupResponse getAddDimensionGroup() {
    return addDimensionGroup;
  }

  public void setAddDimensionGroup(AddDimensionGroupResponse addDimensionGroup) {
    this.addDimensionGroup = addDimensionGroup;
  }


  public Response addFilterView(AddFilterViewResponse addFilterView) {
    this.addFilterView = addFilterView;
    return this;
  }

  /**
   * Get addFilterView
   * @return addFilterView
   */
  @javax.annotation.Nullable
  public AddFilterViewResponse getAddFilterView() {
    return addFilterView;
  }

  public void setAddFilterView(AddFilterViewResponse addFilterView) {
    this.addFilterView = addFilterView;
  }


  public Response addNamedRange(AddNamedRangeResponse addNamedRange) {
    this.addNamedRange = addNamedRange;
    return this;
  }

  /**
   * Get addNamedRange
   * @return addNamedRange
   */
  @javax.annotation.Nullable
  public AddNamedRangeResponse getAddNamedRange() {
    return addNamedRange;
  }

  public void setAddNamedRange(AddNamedRangeResponse addNamedRange) {
    this.addNamedRange = addNamedRange;
  }


  public Response addProtectedRange(AddProtectedRangeResponse addProtectedRange) {
    this.addProtectedRange = addProtectedRange;
    return this;
  }

  /**
   * Get addProtectedRange
   * @return addProtectedRange
   */
  @javax.annotation.Nullable
  public AddProtectedRangeResponse getAddProtectedRange() {
    return addProtectedRange;
  }

  public void setAddProtectedRange(AddProtectedRangeResponse addProtectedRange) {
    this.addProtectedRange = addProtectedRange;
  }


  public Response addSheet(AddSheetResponse addSheet) {
    this.addSheet = addSheet;
    return this;
  }

  /**
   * Get addSheet
   * @return addSheet
   */
  @javax.annotation.Nullable
  public AddSheetResponse getAddSheet() {
    return addSheet;
  }

  public void setAddSheet(AddSheetResponse addSheet) {
    this.addSheet = addSheet;
  }


  public Response addSlicer(AddSlicerResponse addSlicer) {
    this.addSlicer = addSlicer;
    return this;
  }

  /**
   * Get addSlicer
   * @return addSlicer
   */
  @javax.annotation.Nullable
  public AddSlicerResponse getAddSlicer() {
    return addSlicer;
  }

  public void setAddSlicer(AddSlicerResponse addSlicer) {
    this.addSlicer = addSlicer;
  }


  public Response createDeveloperMetadata(CreateDeveloperMetadataResponse createDeveloperMetadata) {
    this.createDeveloperMetadata = createDeveloperMetadata;
    return this;
  }

  /**
   * Get createDeveloperMetadata
   * @return createDeveloperMetadata
   */
  @javax.annotation.Nullable
  public CreateDeveloperMetadataResponse getCreateDeveloperMetadata() {
    return createDeveloperMetadata;
  }

  public void setCreateDeveloperMetadata(CreateDeveloperMetadataResponse createDeveloperMetadata) {
    this.createDeveloperMetadata = createDeveloperMetadata;
  }


  public Response deleteConditionalFormatRule(DeleteConditionalFormatRuleResponse deleteConditionalFormatRule) {
    this.deleteConditionalFormatRule = deleteConditionalFormatRule;
    return this;
  }

  /**
   * Get deleteConditionalFormatRule
   * @return deleteConditionalFormatRule
   */
  @javax.annotation.Nullable
  public DeleteConditionalFormatRuleResponse getDeleteConditionalFormatRule() {
    return deleteConditionalFormatRule;
  }

  public void setDeleteConditionalFormatRule(DeleteConditionalFormatRuleResponse deleteConditionalFormatRule) {
    this.deleteConditionalFormatRule = deleteConditionalFormatRule;
  }


  public Response deleteDeveloperMetadata(DeleteDeveloperMetadataResponse deleteDeveloperMetadata) {
    this.deleteDeveloperMetadata = deleteDeveloperMetadata;
    return this;
  }

  /**
   * Get deleteDeveloperMetadata
   * @return deleteDeveloperMetadata
   */
  @javax.annotation.Nullable
  public DeleteDeveloperMetadataResponse getDeleteDeveloperMetadata() {
    return deleteDeveloperMetadata;
  }

  public void setDeleteDeveloperMetadata(DeleteDeveloperMetadataResponse deleteDeveloperMetadata) {
    this.deleteDeveloperMetadata = deleteDeveloperMetadata;
  }


  public Response deleteDimensionGroup(DeleteDimensionGroupResponse deleteDimensionGroup) {
    this.deleteDimensionGroup = deleteDimensionGroup;
    return this;
  }

  /**
   * Get deleteDimensionGroup
   * @return deleteDimensionGroup
   */
  @javax.annotation.Nullable
  public DeleteDimensionGroupResponse getDeleteDimensionGroup() {
    return deleteDimensionGroup;
  }

  public void setDeleteDimensionGroup(DeleteDimensionGroupResponse deleteDimensionGroup) {
    this.deleteDimensionGroup = deleteDimensionGroup;
  }


  public Response deleteDuplicates(DeleteDuplicatesResponse deleteDuplicates) {
    this.deleteDuplicates = deleteDuplicates;
    return this;
  }

  /**
   * Get deleteDuplicates
   * @return deleteDuplicates
   */
  @javax.annotation.Nullable
  public DeleteDuplicatesResponse getDeleteDuplicates() {
    return deleteDuplicates;
  }

  public void setDeleteDuplicates(DeleteDuplicatesResponse deleteDuplicates) {
    this.deleteDuplicates = deleteDuplicates;
  }


  public Response duplicateFilterView(DuplicateFilterViewResponse duplicateFilterView) {
    this.duplicateFilterView = duplicateFilterView;
    return this;
  }

  /**
   * Get duplicateFilterView
   * @return duplicateFilterView
   */
  @javax.annotation.Nullable
  public DuplicateFilterViewResponse getDuplicateFilterView() {
    return duplicateFilterView;
  }

  public void setDuplicateFilterView(DuplicateFilterViewResponse duplicateFilterView) {
    this.duplicateFilterView = duplicateFilterView;
  }


  public Response duplicateSheet(DuplicateSheetResponse duplicateSheet) {
    this.duplicateSheet = duplicateSheet;
    return this;
  }

  /**
   * Get duplicateSheet
   * @return duplicateSheet
   */
  @javax.annotation.Nullable
  public DuplicateSheetResponse getDuplicateSheet() {
    return duplicateSheet;
  }

  public void setDuplicateSheet(DuplicateSheetResponse duplicateSheet) {
    this.duplicateSheet = duplicateSheet;
  }


  public Response findReplace(FindReplaceResponse findReplace) {
    this.findReplace = findReplace;
    return this;
  }

  /**
   * Get findReplace
   * @return findReplace
   */
  @javax.annotation.Nullable
  public FindReplaceResponse getFindReplace() {
    return findReplace;
  }

  public void setFindReplace(FindReplaceResponse findReplace) {
    this.findReplace = findReplace;
  }


  public Response refreshDataSource(RefreshDataSourceResponse refreshDataSource) {
    this.refreshDataSource = refreshDataSource;
    return this;
  }

  /**
   * Get refreshDataSource
   * @return refreshDataSource
   */
  @javax.annotation.Nullable
  public RefreshDataSourceResponse getRefreshDataSource() {
    return refreshDataSource;
  }

  public void setRefreshDataSource(RefreshDataSourceResponse refreshDataSource) {
    this.refreshDataSource = refreshDataSource;
  }


  public Response trimWhitespace(TrimWhitespaceResponse trimWhitespace) {
    this.trimWhitespace = trimWhitespace;
    return this;
  }

  /**
   * Get trimWhitespace
   * @return trimWhitespace
   */
  @javax.annotation.Nullable
  public TrimWhitespaceResponse getTrimWhitespace() {
    return trimWhitespace;
  }

  public void setTrimWhitespace(TrimWhitespaceResponse trimWhitespace) {
    this.trimWhitespace = trimWhitespace;
  }


  public Response updateConditionalFormatRule(UpdateConditionalFormatRuleResponse updateConditionalFormatRule) {
    this.updateConditionalFormatRule = updateConditionalFormatRule;
    return this;
  }

  /**
   * Get updateConditionalFormatRule
   * @return updateConditionalFormatRule
   */
  @javax.annotation.Nullable
  public UpdateConditionalFormatRuleResponse getUpdateConditionalFormatRule() {
    return updateConditionalFormatRule;
  }

  public void setUpdateConditionalFormatRule(UpdateConditionalFormatRuleResponse updateConditionalFormatRule) {
    this.updateConditionalFormatRule = updateConditionalFormatRule;
  }


  public Response updateDataSource(UpdateDataSourceResponse updateDataSource) {
    this.updateDataSource = updateDataSource;
    return this;
  }

  /**
   * Get updateDataSource
   * @return updateDataSource
   */
  @javax.annotation.Nullable
  public UpdateDataSourceResponse getUpdateDataSource() {
    return updateDataSource;
  }

  public void setUpdateDataSource(UpdateDataSourceResponse updateDataSource) {
    this.updateDataSource = updateDataSource;
  }


  public Response updateDeveloperMetadata(UpdateDeveloperMetadataResponse updateDeveloperMetadata) {
    this.updateDeveloperMetadata = updateDeveloperMetadata;
    return this;
  }

  /**
   * Get updateDeveloperMetadata
   * @return updateDeveloperMetadata
   */
  @javax.annotation.Nullable
  public UpdateDeveloperMetadataResponse getUpdateDeveloperMetadata() {
    return updateDeveloperMetadata;
  }

  public void setUpdateDeveloperMetadata(UpdateDeveloperMetadataResponse updateDeveloperMetadata) {
    this.updateDeveloperMetadata = updateDeveloperMetadata;
  }


  public Response updateEmbeddedObjectPosition(UpdateEmbeddedObjectPositionResponse updateEmbeddedObjectPosition) {
    this.updateEmbeddedObjectPosition = updateEmbeddedObjectPosition;
    return this;
  }

  /**
   * Get updateEmbeddedObjectPosition
   * @return updateEmbeddedObjectPosition
   */
  @javax.annotation.Nullable
  public UpdateEmbeddedObjectPositionResponse getUpdateEmbeddedObjectPosition() {
    return updateEmbeddedObjectPosition;
  }

  public void setUpdateEmbeddedObjectPosition(UpdateEmbeddedObjectPositionResponse updateEmbeddedObjectPosition) {
    this.updateEmbeddedObjectPosition = updateEmbeddedObjectPosition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Response response = (Response) o;
    return Objects.equals(this.addBanding, response.addBanding) &&
        Objects.equals(this.addChart, response.addChart) &&
        Objects.equals(this.addDataSource, response.addDataSource) &&
        Objects.equals(this.addDimensionGroup, response.addDimensionGroup) &&
        Objects.equals(this.addFilterView, response.addFilterView) &&
        Objects.equals(this.addNamedRange, response.addNamedRange) &&
        Objects.equals(this.addProtectedRange, response.addProtectedRange) &&
        Objects.equals(this.addSheet, response.addSheet) &&
        Objects.equals(this.addSlicer, response.addSlicer) &&
        Objects.equals(this.createDeveloperMetadata, response.createDeveloperMetadata) &&
        Objects.equals(this.deleteConditionalFormatRule, response.deleteConditionalFormatRule) &&
        Objects.equals(this.deleteDeveloperMetadata, response.deleteDeveloperMetadata) &&
        Objects.equals(this.deleteDimensionGroup, response.deleteDimensionGroup) &&
        Objects.equals(this.deleteDuplicates, response.deleteDuplicates) &&
        Objects.equals(this.duplicateFilterView, response.duplicateFilterView) &&
        Objects.equals(this.duplicateSheet, response.duplicateSheet) &&
        Objects.equals(this.findReplace, response.findReplace) &&
        Objects.equals(this.refreshDataSource, response.refreshDataSource) &&
        Objects.equals(this.trimWhitespace, response.trimWhitespace) &&
        Objects.equals(this.updateConditionalFormatRule, response.updateConditionalFormatRule) &&
        Objects.equals(this.updateDataSource, response.updateDataSource) &&
        Objects.equals(this.updateDeveloperMetadata, response.updateDeveloperMetadata) &&
        Objects.equals(this.updateEmbeddedObjectPosition, response.updateEmbeddedObjectPosition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addBanding, addChart, addDataSource, addDimensionGroup, addFilterView, addNamedRange, addProtectedRange, addSheet, addSlicer, createDeveloperMetadata, deleteConditionalFormatRule, deleteDeveloperMetadata, deleteDimensionGroup, deleteDuplicates, duplicateFilterView, duplicateSheet, findReplace, refreshDataSource, trimWhitespace, updateConditionalFormatRule, updateDataSource, updateDeveloperMetadata, updateEmbeddedObjectPosition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Response {\n");
    sb.append("    addBanding: ").append(toIndentedString(addBanding)).append("\n");
    sb.append("    addChart: ").append(toIndentedString(addChart)).append("\n");
    sb.append("    addDataSource: ").append(toIndentedString(addDataSource)).append("\n");
    sb.append("    addDimensionGroup: ").append(toIndentedString(addDimensionGroup)).append("\n");
    sb.append("    addFilterView: ").append(toIndentedString(addFilterView)).append("\n");
    sb.append("    addNamedRange: ").append(toIndentedString(addNamedRange)).append("\n");
    sb.append("    addProtectedRange: ").append(toIndentedString(addProtectedRange)).append("\n");
    sb.append("    addSheet: ").append(toIndentedString(addSheet)).append("\n");
    sb.append("    addSlicer: ").append(toIndentedString(addSlicer)).append("\n");
    sb.append("    createDeveloperMetadata: ").append(toIndentedString(createDeveloperMetadata)).append("\n");
    sb.append("    deleteConditionalFormatRule: ").append(toIndentedString(deleteConditionalFormatRule)).append("\n");
    sb.append("    deleteDeveloperMetadata: ").append(toIndentedString(deleteDeveloperMetadata)).append("\n");
    sb.append("    deleteDimensionGroup: ").append(toIndentedString(deleteDimensionGroup)).append("\n");
    sb.append("    deleteDuplicates: ").append(toIndentedString(deleteDuplicates)).append("\n");
    sb.append("    duplicateFilterView: ").append(toIndentedString(duplicateFilterView)).append("\n");
    sb.append("    duplicateSheet: ").append(toIndentedString(duplicateSheet)).append("\n");
    sb.append("    findReplace: ").append(toIndentedString(findReplace)).append("\n");
    sb.append("    refreshDataSource: ").append(toIndentedString(refreshDataSource)).append("\n");
    sb.append("    trimWhitespace: ").append(toIndentedString(trimWhitespace)).append("\n");
    sb.append("    updateConditionalFormatRule: ").append(toIndentedString(updateConditionalFormatRule)).append("\n");
    sb.append("    updateDataSource: ").append(toIndentedString(updateDataSource)).append("\n");
    sb.append("    updateDeveloperMetadata: ").append(toIndentedString(updateDeveloperMetadata)).append("\n");
    sb.append("    updateEmbeddedObjectPosition: ").append(toIndentedString(updateEmbeddedObjectPosition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addBanding");
    openapiFields.add("addChart");
    openapiFields.add("addDataSource");
    openapiFields.add("addDimensionGroup");
    openapiFields.add("addFilterView");
    openapiFields.add("addNamedRange");
    openapiFields.add("addProtectedRange");
    openapiFields.add("addSheet");
    openapiFields.add("addSlicer");
    openapiFields.add("createDeveloperMetadata");
    openapiFields.add("deleteConditionalFormatRule");
    openapiFields.add("deleteDeveloperMetadata");
    openapiFields.add("deleteDimensionGroup");
    openapiFields.add("deleteDuplicates");
    openapiFields.add("duplicateFilterView");
    openapiFields.add("duplicateSheet");
    openapiFields.add("findReplace");
    openapiFields.add("refreshDataSource");
    openapiFields.add("trimWhitespace");
    openapiFields.add("updateConditionalFormatRule");
    openapiFields.add("updateDataSource");
    openapiFields.add("updateDeveloperMetadata");
    openapiFields.add("updateEmbeddedObjectPosition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Response is not found in the empty JSON string", Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `addBanding`
      if (jsonObj.get("addBanding") != null && !jsonObj.get("addBanding").isJsonNull()) {
        AddBandingResponse.validateJsonElement(jsonObj.get("addBanding"));
      }
      // validate the optional field `addChart`
      if (jsonObj.get("addChart") != null && !jsonObj.get("addChart").isJsonNull()) {
        AddChartResponse.validateJsonElement(jsonObj.get("addChart"));
      }
      // validate the optional field `addDataSource`
      if (jsonObj.get("addDataSource") != null && !jsonObj.get("addDataSource").isJsonNull()) {
        AddDataSourceResponse.validateJsonElement(jsonObj.get("addDataSource"));
      }
      // validate the optional field `addDimensionGroup`
      if (jsonObj.get("addDimensionGroup") != null && !jsonObj.get("addDimensionGroup").isJsonNull()) {
        AddDimensionGroupResponse.validateJsonElement(jsonObj.get("addDimensionGroup"));
      }
      // validate the optional field `addFilterView`
      if (jsonObj.get("addFilterView") != null && !jsonObj.get("addFilterView").isJsonNull()) {
        AddFilterViewResponse.validateJsonElement(jsonObj.get("addFilterView"));
      }
      // validate the optional field `addNamedRange`
      if (jsonObj.get("addNamedRange") != null && !jsonObj.get("addNamedRange").isJsonNull()) {
        AddNamedRangeResponse.validateJsonElement(jsonObj.get("addNamedRange"));
      }
      // validate the optional field `addProtectedRange`
      if (jsonObj.get("addProtectedRange") != null && !jsonObj.get("addProtectedRange").isJsonNull()) {
        AddProtectedRangeResponse.validateJsonElement(jsonObj.get("addProtectedRange"));
      }
      // validate the optional field `addSheet`
      if (jsonObj.get("addSheet") != null && !jsonObj.get("addSheet").isJsonNull()) {
        AddSheetResponse.validateJsonElement(jsonObj.get("addSheet"));
      }
      // validate the optional field `addSlicer`
      if (jsonObj.get("addSlicer") != null && !jsonObj.get("addSlicer").isJsonNull()) {
        AddSlicerResponse.validateJsonElement(jsonObj.get("addSlicer"));
      }
      // validate the optional field `createDeveloperMetadata`
      if (jsonObj.get("createDeveloperMetadata") != null && !jsonObj.get("createDeveloperMetadata").isJsonNull()) {
        CreateDeveloperMetadataResponse.validateJsonElement(jsonObj.get("createDeveloperMetadata"));
      }
      // validate the optional field `deleteConditionalFormatRule`
      if (jsonObj.get("deleteConditionalFormatRule") != null && !jsonObj.get("deleteConditionalFormatRule").isJsonNull()) {
        DeleteConditionalFormatRuleResponse.validateJsonElement(jsonObj.get("deleteConditionalFormatRule"));
      }
      // validate the optional field `deleteDeveloperMetadata`
      if (jsonObj.get("deleteDeveloperMetadata") != null && !jsonObj.get("deleteDeveloperMetadata").isJsonNull()) {
        DeleteDeveloperMetadataResponse.validateJsonElement(jsonObj.get("deleteDeveloperMetadata"));
      }
      // validate the optional field `deleteDimensionGroup`
      if (jsonObj.get("deleteDimensionGroup") != null && !jsonObj.get("deleteDimensionGroup").isJsonNull()) {
        DeleteDimensionGroupResponse.validateJsonElement(jsonObj.get("deleteDimensionGroup"));
      }
      // validate the optional field `deleteDuplicates`
      if (jsonObj.get("deleteDuplicates") != null && !jsonObj.get("deleteDuplicates").isJsonNull()) {
        DeleteDuplicatesResponse.validateJsonElement(jsonObj.get("deleteDuplicates"));
      }
      // validate the optional field `duplicateFilterView`
      if (jsonObj.get("duplicateFilterView") != null && !jsonObj.get("duplicateFilterView").isJsonNull()) {
        DuplicateFilterViewResponse.validateJsonElement(jsonObj.get("duplicateFilterView"));
      }
      // validate the optional field `duplicateSheet`
      if (jsonObj.get("duplicateSheet") != null && !jsonObj.get("duplicateSheet").isJsonNull()) {
        DuplicateSheetResponse.validateJsonElement(jsonObj.get("duplicateSheet"));
      }
      // validate the optional field `findReplace`
      if (jsonObj.get("findReplace") != null && !jsonObj.get("findReplace").isJsonNull()) {
        FindReplaceResponse.validateJsonElement(jsonObj.get("findReplace"));
      }
      // validate the optional field `refreshDataSource`
      if (jsonObj.get("refreshDataSource") != null && !jsonObj.get("refreshDataSource").isJsonNull()) {
        RefreshDataSourceResponse.validateJsonElement(jsonObj.get("refreshDataSource"));
      }
      // validate the optional field `trimWhitespace`
      if (jsonObj.get("trimWhitespace") != null && !jsonObj.get("trimWhitespace").isJsonNull()) {
        TrimWhitespaceResponse.validateJsonElement(jsonObj.get("trimWhitespace"));
      }
      // validate the optional field `updateConditionalFormatRule`
      if (jsonObj.get("updateConditionalFormatRule") != null && !jsonObj.get("updateConditionalFormatRule").isJsonNull()) {
        UpdateConditionalFormatRuleResponse.validateJsonElement(jsonObj.get("updateConditionalFormatRule"));
      }
      // validate the optional field `updateDataSource`
      if (jsonObj.get("updateDataSource") != null && !jsonObj.get("updateDataSource").isJsonNull()) {
        UpdateDataSourceResponse.validateJsonElement(jsonObj.get("updateDataSource"));
      }
      // validate the optional field `updateDeveloperMetadata`
      if (jsonObj.get("updateDeveloperMetadata") != null && !jsonObj.get("updateDeveloperMetadata").isJsonNull()) {
        UpdateDeveloperMetadataResponse.validateJsonElement(jsonObj.get("updateDeveloperMetadata"));
      }
      // validate the optional field `updateEmbeddedObjectPosition`
      if (jsonObj.get("updateEmbeddedObjectPosition") != null && !jsonObj.get("updateEmbeddedObjectPosition").isJsonNull()) {
        UpdateEmbeddedObjectPositionResponse.validateJsonElement(jsonObj.get("updateEmbeddedObjectPosition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Response.class));

       return (TypeAdapter<T>) new TypeAdapter<Response>() {
           @Override
           public void write(JsonWriter out, Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Response
   * @throws IOException if the JSON string is invalid with respect to Response
   */
  public static Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Response.class);
  }

  /**
   * Convert an instance of Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

