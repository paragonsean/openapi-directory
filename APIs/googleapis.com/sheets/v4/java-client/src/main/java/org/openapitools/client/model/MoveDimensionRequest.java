/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DimensionRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Moves one or more rows or columns.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MoveDimensionRequest {
  public static final String SERIALIZED_NAME_DESTINATION_INDEX = "destinationIndex";
  @SerializedName(SERIALIZED_NAME_DESTINATION_INDEX)
  private Integer destinationIndex;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private DimensionRange source;

  public MoveDimensionRequest() {
  }

  public MoveDimensionRequest destinationIndex(Integer destinationIndex) {
    this.destinationIndex = destinationIndex;
    return this;
  }

  /**
   * The zero-based start index of where to move the source data to, based on the coordinates *before* the source data is removed from the grid. Existing data will be shifted down or right (depending on the dimension) to make room for the moved dimensions. The source dimensions are removed from the grid, so the the data may end up in a different index than specified. For example, given &#x60;A1..A5&#x60; of &#x60;0, 1, 2, 3, 4&#x60; and wanting to move &#x60;\&quot;1\&quot;&#x60; and &#x60;\&quot;2\&quot;&#x60; to between &#x60;\&quot;3\&quot;&#x60; and &#x60;\&quot;4\&quot;&#x60;, the source would be &#x60;ROWS [1..3)&#x60;,and the destination index would be &#x60;\&quot;4\&quot;&#x60; (the zero-based index of row 5). The end result would be &#x60;A1..A5&#x60; of &#x60;0, 3, 1, 2, 4&#x60;.
   * @return destinationIndex
   */
  @javax.annotation.Nullable
  public Integer getDestinationIndex() {
    return destinationIndex;
  }

  public void setDestinationIndex(Integer destinationIndex) {
    this.destinationIndex = destinationIndex;
  }


  public MoveDimensionRequest source(DimensionRange source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public DimensionRange getSource() {
    return source;
  }

  public void setSource(DimensionRange source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MoveDimensionRequest moveDimensionRequest = (MoveDimensionRequest) o;
    return Objects.equals(this.destinationIndex, moveDimensionRequest.destinationIndex) &&
        Objects.equals(this.source, moveDimensionRequest.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationIndex, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MoveDimensionRequest {\n");
    sb.append("    destinationIndex: ").append(toIndentedString(destinationIndex)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinationIndex");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MoveDimensionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MoveDimensionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MoveDimensionRequest is not found in the empty JSON string", MoveDimensionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MoveDimensionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MoveDimensionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        DimensionRange.validateJsonElement(jsonObj.get("source"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MoveDimensionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MoveDimensionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MoveDimensionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MoveDimensionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<MoveDimensionRequest>() {
           @Override
           public void write(JsonWriter out, MoveDimensionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MoveDimensionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MoveDimensionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MoveDimensionRequest
   * @throws IOException if the JSON string is invalid with respect to MoveDimensionRequest
   */
  public static MoveDimensionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MoveDimensionRequest.class);
  }

  /**
   * Convert an instance of MoveDimensionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

