/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Color;
import org.openapitools.client.model.ColorStyle;
import org.openapitools.client.model.FilterCriteria;
import org.openapitools.client.model.GridRange;
import org.openapitools.client.model.TextFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The specifications of a slicer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SlicerSpec {
  public static final String SERIALIZED_NAME_APPLY_TO_PIVOT_TABLES = "applyToPivotTables";
  @SerializedName(SERIALIZED_NAME_APPLY_TO_PIVOT_TABLES)
  private Boolean applyToPivotTables;

  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "backgroundColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private Color backgroundColor;

  public static final String SERIALIZED_NAME_BACKGROUND_COLOR_STYLE = "backgroundColorStyle";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR_STYLE)
  private ColorStyle backgroundColorStyle;

  public static final String SERIALIZED_NAME_COLUMN_INDEX = "columnIndex";
  @SerializedName(SERIALIZED_NAME_COLUMN_INDEX)
  private Integer columnIndex;

  public static final String SERIALIZED_NAME_DATA_RANGE = "dataRange";
  @SerializedName(SERIALIZED_NAME_DATA_RANGE)
  private GridRange dataRange;

  public static final String SERIALIZED_NAME_FILTER_CRITERIA = "filterCriteria";
  @SerializedName(SERIALIZED_NAME_FILTER_CRITERIA)
  private FilterCriteria filterCriteria;

  /**
   * The horizontal alignment of title in the slicer. If unspecified, defaults to &#x60;LEFT&#x60;
   */
  @JsonAdapter(HorizontalAlignmentEnum.Adapter.class)
  public enum HorizontalAlignmentEnum {
    HORIZONTAL_ALIGN_UNSPECIFIED("HORIZONTAL_ALIGN_UNSPECIFIED"),
    
    LEFT("LEFT"),
    
    CENTER("CENTER"),
    
    RIGHT("RIGHT");

    private String value;

    HorizontalAlignmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HorizontalAlignmentEnum fromValue(String value) {
      for (HorizontalAlignmentEnum b : HorizontalAlignmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HorizontalAlignmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HorizontalAlignmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HorizontalAlignmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HorizontalAlignmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HorizontalAlignmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HORIZONTAL_ALIGNMENT = "horizontalAlignment";
  @SerializedName(SERIALIZED_NAME_HORIZONTAL_ALIGNMENT)
  private HorizontalAlignmentEnum horizontalAlignment;

  public static final String SERIALIZED_NAME_TEXT_FORMAT = "textFormat";
  @SerializedName(SERIALIZED_NAME_TEXT_FORMAT)
  private TextFormat textFormat;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public SlicerSpec() {
  }

  public SlicerSpec applyToPivotTables(Boolean applyToPivotTables) {
    this.applyToPivotTables = applyToPivotTables;
    return this;
  }

  /**
   * True if the filter should apply to pivot tables. If not set, default to &#x60;True&#x60;.
   * @return applyToPivotTables
   */
  @javax.annotation.Nullable
  public Boolean getApplyToPivotTables() {
    return applyToPivotTables;
  }

  public void setApplyToPivotTables(Boolean applyToPivotTables) {
    this.applyToPivotTables = applyToPivotTables;
  }


  public SlicerSpec backgroundColor(Color backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * Get backgroundColor
   * @return backgroundColor
   */
  @javax.annotation.Nullable
  public Color getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(Color backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public SlicerSpec backgroundColorStyle(ColorStyle backgroundColorStyle) {
    this.backgroundColorStyle = backgroundColorStyle;
    return this;
  }

  /**
   * Get backgroundColorStyle
   * @return backgroundColorStyle
   */
  @javax.annotation.Nullable
  public ColorStyle getBackgroundColorStyle() {
    return backgroundColorStyle;
  }

  public void setBackgroundColorStyle(ColorStyle backgroundColorStyle) {
    this.backgroundColorStyle = backgroundColorStyle;
  }


  public SlicerSpec columnIndex(Integer columnIndex) {
    this.columnIndex = columnIndex;
    return this;
  }

  /**
   * The zero-based column index in the data table on which the filter is applied to.
   * @return columnIndex
   */
  @javax.annotation.Nullable
  public Integer getColumnIndex() {
    return columnIndex;
  }

  public void setColumnIndex(Integer columnIndex) {
    this.columnIndex = columnIndex;
  }


  public SlicerSpec dataRange(GridRange dataRange) {
    this.dataRange = dataRange;
    return this;
  }

  /**
   * Get dataRange
   * @return dataRange
   */
  @javax.annotation.Nullable
  public GridRange getDataRange() {
    return dataRange;
  }

  public void setDataRange(GridRange dataRange) {
    this.dataRange = dataRange;
  }


  public SlicerSpec filterCriteria(FilterCriteria filterCriteria) {
    this.filterCriteria = filterCriteria;
    return this;
  }

  /**
   * Get filterCriteria
   * @return filterCriteria
   */
  @javax.annotation.Nullable
  public FilterCriteria getFilterCriteria() {
    return filterCriteria;
  }

  public void setFilterCriteria(FilterCriteria filterCriteria) {
    this.filterCriteria = filterCriteria;
  }


  public SlicerSpec horizontalAlignment(HorizontalAlignmentEnum horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }

  /**
   * The horizontal alignment of title in the slicer. If unspecified, defaults to &#x60;LEFT&#x60;
   * @return horizontalAlignment
   */
  @javax.annotation.Nullable
  public HorizontalAlignmentEnum getHorizontalAlignment() {
    return horizontalAlignment;
  }

  public void setHorizontalAlignment(HorizontalAlignmentEnum horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
  }


  public SlicerSpec textFormat(TextFormat textFormat) {
    this.textFormat = textFormat;
    return this;
  }

  /**
   * Get textFormat
   * @return textFormat
   */
  @javax.annotation.Nullable
  public TextFormat getTextFormat() {
    return textFormat;
  }

  public void setTextFormat(TextFormat textFormat) {
    this.textFormat = textFormat;
  }


  public SlicerSpec title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the slicer.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SlicerSpec slicerSpec = (SlicerSpec) o;
    return Objects.equals(this.applyToPivotTables, slicerSpec.applyToPivotTables) &&
        Objects.equals(this.backgroundColor, slicerSpec.backgroundColor) &&
        Objects.equals(this.backgroundColorStyle, slicerSpec.backgroundColorStyle) &&
        Objects.equals(this.columnIndex, slicerSpec.columnIndex) &&
        Objects.equals(this.dataRange, slicerSpec.dataRange) &&
        Objects.equals(this.filterCriteria, slicerSpec.filterCriteria) &&
        Objects.equals(this.horizontalAlignment, slicerSpec.horizontalAlignment) &&
        Objects.equals(this.textFormat, slicerSpec.textFormat) &&
        Objects.equals(this.title, slicerSpec.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applyToPivotTables, backgroundColor, backgroundColorStyle, columnIndex, dataRange, filterCriteria, horizontalAlignment, textFormat, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SlicerSpec {\n");
    sb.append("    applyToPivotTables: ").append(toIndentedString(applyToPivotTables)).append("\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    backgroundColorStyle: ").append(toIndentedString(backgroundColorStyle)).append("\n");
    sb.append("    columnIndex: ").append(toIndentedString(columnIndex)).append("\n");
    sb.append("    dataRange: ").append(toIndentedString(dataRange)).append("\n");
    sb.append("    filterCriteria: ").append(toIndentedString(filterCriteria)).append("\n");
    sb.append("    horizontalAlignment: ").append(toIndentedString(horizontalAlignment)).append("\n");
    sb.append("    textFormat: ").append(toIndentedString(textFormat)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applyToPivotTables");
    openapiFields.add("backgroundColor");
    openapiFields.add("backgroundColorStyle");
    openapiFields.add("columnIndex");
    openapiFields.add("dataRange");
    openapiFields.add("filterCriteria");
    openapiFields.add("horizontalAlignment");
    openapiFields.add("textFormat");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SlicerSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SlicerSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SlicerSpec is not found in the empty JSON string", SlicerSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SlicerSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SlicerSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backgroundColor`
      if (jsonObj.get("backgroundColor") != null && !jsonObj.get("backgroundColor").isJsonNull()) {
        Color.validateJsonElement(jsonObj.get("backgroundColor"));
      }
      // validate the optional field `backgroundColorStyle`
      if (jsonObj.get("backgroundColorStyle") != null && !jsonObj.get("backgroundColorStyle").isJsonNull()) {
        ColorStyle.validateJsonElement(jsonObj.get("backgroundColorStyle"));
      }
      // validate the optional field `dataRange`
      if (jsonObj.get("dataRange") != null && !jsonObj.get("dataRange").isJsonNull()) {
        GridRange.validateJsonElement(jsonObj.get("dataRange"));
      }
      // validate the optional field `filterCriteria`
      if (jsonObj.get("filterCriteria") != null && !jsonObj.get("filterCriteria").isJsonNull()) {
        FilterCriteria.validateJsonElement(jsonObj.get("filterCriteria"));
      }
      if ((jsonObj.get("horizontalAlignment") != null && !jsonObj.get("horizontalAlignment").isJsonNull()) && !jsonObj.get("horizontalAlignment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `horizontalAlignment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("horizontalAlignment").toString()));
      }
      // validate the optional field `horizontalAlignment`
      if (jsonObj.get("horizontalAlignment") != null && !jsonObj.get("horizontalAlignment").isJsonNull()) {
        HorizontalAlignmentEnum.validateJsonElement(jsonObj.get("horizontalAlignment"));
      }
      // validate the optional field `textFormat`
      if (jsonObj.get("textFormat") != null && !jsonObj.get("textFormat").isJsonNull()) {
        TextFormat.validateJsonElement(jsonObj.get("textFormat"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SlicerSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SlicerSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SlicerSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SlicerSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<SlicerSpec>() {
           @Override
           public void write(JsonWriter out, SlicerSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SlicerSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SlicerSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SlicerSpec
   * @throws IOException if the JSON string is invalid with respect to SlicerSpec
   */
  public static SlicerSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SlicerSpec.class);
  }

  /**
   * Convert an instance of SlicerSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

