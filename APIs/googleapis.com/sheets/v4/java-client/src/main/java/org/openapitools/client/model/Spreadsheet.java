/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataSource;
import org.openapitools.client.model.DataSourceRefreshSchedule;
import org.openapitools.client.model.DeveloperMetadata;
import org.openapitools.client.model.NamedRange;
import org.openapitools.client.model.Sheet;
import org.openapitools.client.model.SpreadsheetProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Resource that represents a spreadsheet.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Spreadsheet {
  public static final String SERIALIZED_NAME_DATA_SOURCE_SCHEDULES = "dataSourceSchedules";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_SCHEDULES)
  private List<DataSourceRefreshSchedule> dataSourceSchedules = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_SOURCES = "dataSources";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCES)
  private List<DataSource> dataSources = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEVELOPER_METADATA = "developerMetadata";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_METADATA)
  private List<DeveloperMetadata> developerMetadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAMED_RANGES = "namedRanges";
  @SerializedName(SERIALIZED_NAME_NAMED_RANGES)
  private List<NamedRange> namedRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private SpreadsheetProperties properties;

  public static final String SERIALIZED_NAME_SHEETS = "sheets";
  @SerializedName(SERIALIZED_NAME_SHEETS)
  private List<Sheet> sheets = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPREADSHEET_ID = "spreadsheetId";
  @SerializedName(SERIALIZED_NAME_SPREADSHEET_ID)
  private String spreadsheetId;

  public static final String SERIALIZED_NAME_SPREADSHEET_URL = "spreadsheetUrl";
  @SerializedName(SERIALIZED_NAME_SPREADSHEET_URL)
  private String spreadsheetUrl;

  public Spreadsheet() {
  }

  public Spreadsheet(
     List<DataSourceRefreshSchedule> dataSourceSchedules
  ) {
    this();
    this.dataSourceSchedules = dataSourceSchedules;
  }

  /**
   * Output only. A list of data source refresh schedules.
   * @return dataSourceSchedules
   */
  @javax.annotation.Nullable
  public List<DataSourceRefreshSchedule> getDataSourceSchedules() {
    return dataSourceSchedules;
  }



  public Spreadsheet dataSources(List<DataSource> dataSources) {
    this.dataSources = dataSources;
    return this;
  }

  public Spreadsheet addDataSourcesItem(DataSource dataSourcesItem) {
    if (this.dataSources == null) {
      this.dataSources = new ArrayList<>();
    }
    this.dataSources.add(dataSourcesItem);
    return this;
  }

  /**
   * A list of external data sources connected with the spreadsheet.
   * @return dataSources
   */
  @javax.annotation.Nullable
  public List<DataSource> getDataSources() {
    return dataSources;
  }

  public void setDataSources(List<DataSource> dataSources) {
    this.dataSources = dataSources;
  }


  public Spreadsheet developerMetadata(List<DeveloperMetadata> developerMetadata) {
    this.developerMetadata = developerMetadata;
    return this;
  }

  public Spreadsheet addDeveloperMetadataItem(DeveloperMetadata developerMetadataItem) {
    if (this.developerMetadata == null) {
      this.developerMetadata = new ArrayList<>();
    }
    this.developerMetadata.add(developerMetadataItem);
    return this;
  }

  /**
   * The developer metadata associated with a spreadsheet.
   * @return developerMetadata
   */
  @javax.annotation.Nullable
  public List<DeveloperMetadata> getDeveloperMetadata() {
    return developerMetadata;
  }

  public void setDeveloperMetadata(List<DeveloperMetadata> developerMetadata) {
    this.developerMetadata = developerMetadata;
  }


  public Spreadsheet namedRanges(List<NamedRange> namedRanges) {
    this.namedRanges = namedRanges;
    return this;
  }

  public Spreadsheet addNamedRangesItem(NamedRange namedRangesItem) {
    if (this.namedRanges == null) {
      this.namedRanges = new ArrayList<>();
    }
    this.namedRanges.add(namedRangesItem);
    return this;
  }

  /**
   * The named ranges defined in a spreadsheet.
   * @return namedRanges
   */
  @javax.annotation.Nullable
  public List<NamedRange> getNamedRanges() {
    return namedRanges;
  }

  public void setNamedRanges(List<NamedRange> namedRanges) {
    this.namedRanges = namedRanges;
  }


  public Spreadsheet properties(SpreadsheetProperties properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nullable
  public SpreadsheetProperties getProperties() {
    return properties;
  }

  public void setProperties(SpreadsheetProperties properties) {
    this.properties = properties;
  }


  public Spreadsheet sheets(List<Sheet> sheets) {
    this.sheets = sheets;
    return this;
  }

  public Spreadsheet addSheetsItem(Sheet sheetsItem) {
    if (this.sheets == null) {
      this.sheets = new ArrayList<>();
    }
    this.sheets.add(sheetsItem);
    return this;
  }

  /**
   * The sheets that are part of a spreadsheet.
   * @return sheets
   */
  @javax.annotation.Nullable
  public List<Sheet> getSheets() {
    return sheets;
  }

  public void setSheets(List<Sheet> sheets) {
    this.sheets = sheets;
  }


  public Spreadsheet spreadsheetId(String spreadsheetId) {
    this.spreadsheetId = spreadsheetId;
    return this;
  }

  /**
   * The ID of the spreadsheet. This field is read-only.
   * @return spreadsheetId
   */
  @javax.annotation.Nullable
  public String getSpreadsheetId() {
    return spreadsheetId;
  }

  public void setSpreadsheetId(String spreadsheetId) {
    this.spreadsheetId = spreadsheetId;
  }


  public Spreadsheet spreadsheetUrl(String spreadsheetUrl) {
    this.spreadsheetUrl = spreadsheetUrl;
    return this;
  }

  /**
   * The url of the spreadsheet. This field is read-only.
   * @return spreadsheetUrl
   */
  @javax.annotation.Nullable
  public String getSpreadsheetUrl() {
    return spreadsheetUrl;
  }

  public void setSpreadsheetUrl(String spreadsheetUrl) {
    this.spreadsheetUrl = spreadsheetUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Spreadsheet spreadsheet = (Spreadsheet) o;
    return Objects.equals(this.dataSourceSchedules, spreadsheet.dataSourceSchedules) &&
        Objects.equals(this.dataSources, spreadsheet.dataSources) &&
        Objects.equals(this.developerMetadata, spreadsheet.developerMetadata) &&
        Objects.equals(this.namedRanges, spreadsheet.namedRanges) &&
        Objects.equals(this.properties, spreadsheet.properties) &&
        Objects.equals(this.sheets, spreadsheet.sheets) &&
        Objects.equals(this.spreadsheetId, spreadsheet.spreadsheetId) &&
        Objects.equals(this.spreadsheetUrl, spreadsheet.spreadsheetUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSourceSchedules, dataSources, developerMetadata, namedRanges, properties, sheets, spreadsheetId, spreadsheetUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Spreadsheet {\n");
    sb.append("    dataSourceSchedules: ").append(toIndentedString(dataSourceSchedules)).append("\n");
    sb.append("    dataSources: ").append(toIndentedString(dataSources)).append("\n");
    sb.append("    developerMetadata: ").append(toIndentedString(developerMetadata)).append("\n");
    sb.append("    namedRanges: ").append(toIndentedString(namedRanges)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    sheets: ").append(toIndentedString(sheets)).append("\n");
    sb.append("    spreadsheetId: ").append(toIndentedString(spreadsheetId)).append("\n");
    sb.append("    spreadsheetUrl: ").append(toIndentedString(spreadsheetUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSourceSchedules");
    openapiFields.add("dataSources");
    openapiFields.add("developerMetadata");
    openapiFields.add("namedRanges");
    openapiFields.add("properties");
    openapiFields.add("sheets");
    openapiFields.add("spreadsheetId");
    openapiFields.add("spreadsheetUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Spreadsheet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Spreadsheet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Spreadsheet is not found in the empty JSON string", Spreadsheet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Spreadsheet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Spreadsheet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dataSourceSchedules") != null && !jsonObj.get("dataSourceSchedules").isJsonNull()) {
        JsonArray jsonArraydataSourceSchedules = jsonObj.getAsJsonArray("dataSourceSchedules");
        if (jsonArraydataSourceSchedules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataSourceSchedules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataSourceSchedules` to be an array in the JSON string but got `%s`", jsonObj.get("dataSourceSchedules").toString()));
          }

          // validate the optional field `dataSourceSchedules` (array)
          for (int i = 0; i < jsonArraydataSourceSchedules.size(); i++) {
            DataSourceRefreshSchedule.validateJsonElement(jsonArraydataSourceSchedules.get(i));
          };
        }
      }
      if (jsonObj.get("dataSources") != null && !jsonObj.get("dataSources").isJsonNull()) {
        JsonArray jsonArraydataSources = jsonObj.getAsJsonArray("dataSources");
        if (jsonArraydataSources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataSources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataSources` to be an array in the JSON string but got `%s`", jsonObj.get("dataSources").toString()));
          }

          // validate the optional field `dataSources` (array)
          for (int i = 0; i < jsonArraydataSources.size(); i++) {
            DataSource.validateJsonElement(jsonArraydataSources.get(i));
          };
        }
      }
      if (jsonObj.get("developerMetadata") != null && !jsonObj.get("developerMetadata").isJsonNull()) {
        JsonArray jsonArraydeveloperMetadata = jsonObj.getAsJsonArray("developerMetadata");
        if (jsonArraydeveloperMetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("developerMetadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `developerMetadata` to be an array in the JSON string but got `%s`", jsonObj.get("developerMetadata").toString()));
          }

          // validate the optional field `developerMetadata` (array)
          for (int i = 0; i < jsonArraydeveloperMetadata.size(); i++) {
            DeveloperMetadata.validateJsonElement(jsonArraydeveloperMetadata.get(i));
          };
        }
      }
      if (jsonObj.get("namedRanges") != null && !jsonObj.get("namedRanges").isJsonNull()) {
        JsonArray jsonArraynamedRanges = jsonObj.getAsJsonArray("namedRanges");
        if (jsonArraynamedRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("namedRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `namedRanges` to be an array in the JSON string but got `%s`", jsonObj.get("namedRanges").toString()));
          }

          // validate the optional field `namedRanges` (array)
          for (int i = 0; i < jsonArraynamedRanges.size(); i++) {
            NamedRange.validateJsonElement(jsonArraynamedRanges.get(i));
          };
        }
      }
      // validate the optional field `properties`
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        SpreadsheetProperties.validateJsonElement(jsonObj.get("properties"));
      }
      if (jsonObj.get("sheets") != null && !jsonObj.get("sheets").isJsonNull()) {
        JsonArray jsonArraysheets = jsonObj.getAsJsonArray("sheets");
        if (jsonArraysheets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sheets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sheets` to be an array in the JSON string but got `%s`", jsonObj.get("sheets").toString()));
          }

          // validate the optional field `sheets` (array)
          for (int i = 0; i < jsonArraysheets.size(); i++) {
            Sheet.validateJsonElement(jsonArraysheets.get(i));
          };
        }
      }
      if ((jsonObj.get("spreadsheetId") != null && !jsonObj.get("spreadsheetId").isJsonNull()) && !jsonObj.get("spreadsheetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spreadsheetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spreadsheetId").toString()));
      }
      if ((jsonObj.get("spreadsheetUrl") != null && !jsonObj.get("spreadsheetUrl").isJsonNull()) && !jsonObj.get("spreadsheetUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spreadsheetUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spreadsheetUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Spreadsheet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Spreadsheet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Spreadsheet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Spreadsheet.class));

       return (TypeAdapter<T>) new TypeAdapter<Spreadsheet>() {
           @Override
           public void write(JsonWriter out, Spreadsheet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Spreadsheet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Spreadsheet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Spreadsheet
   * @throws IOException if the JSON string is invalid with respect to Spreadsheet
   */
  public static Spreadsheet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Spreadsheet.class);
  }

  /**
   * Convert an instance of Spreadsheet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

