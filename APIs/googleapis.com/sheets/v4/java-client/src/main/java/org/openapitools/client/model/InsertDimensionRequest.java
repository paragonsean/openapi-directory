/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DimensionRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Inserts rows or columns in a sheet at a particular index.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InsertDimensionRequest {
  public static final String SERIALIZED_NAME_INHERIT_FROM_BEFORE = "inheritFromBefore";
  @SerializedName(SERIALIZED_NAME_INHERIT_FROM_BEFORE)
  private Boolean inheritFromBefore;

  public static final String SERIALIZED_NAME_RANGE = "range";
  @SerializedName(SERIALIZED_NAME_RANGE)
  private DimensionRange range;

  public InsertDimensionRequest() {
  }

  public InsertDimensionRequest inheritFromBefore(Boolean inheritFromBefore) {
    this.inheritFromBefore = inheritFromBefore;
    return this;
  }

  /**
   * Whether dimension properties should be extended from the dimensions before or after the newly inserted dimensions. True to inherit from the dimensions before (in which case the start index must be greater than 0), and false to inherit from the dimensions after. For example, if row index 0 has red background and row index 1 has a green background, then inserting 2 rows at index 1 can inherit either the green or red background. If &#x60;inheritFromBefore&#x60; is true, the two new rows will be red (because the row before the insertion point was red), whereas if &#x60;inheritFromBefore&#x60; is false, the two new rows will be green (because the row after the insertion point was green).
   * @return inheritFromBefore
   */
  @javax.annotation.Nullable
  public Boolean getInheritFromBefore() {
    return inheritFromBefore;
  }

  public void setInheritFromBefore(Boolean inheritFromBefore) {
    this.inheritFromBefore = inheritFromBefore;
  }


  public InsertDimensionRequest range(DimensionRange range) {
    this.range = range;
    return this;
  }

  /**
   * Get range
   * @return range
   */
  @javax.annotation.Nullable
  public DimensionRange getRange() {
    return range;
  }

  public void setRange(DimensionRange range) {
    this.range = range;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InsertDimensionRequest insertDimensionRequest = (InsertDimensionRequest) o;
    return Objects.equals(this.inheritFromBefore, insertDimensionRequest.inheritFromBefore) &&
        Objects.equals(this.range, insertDimensionRequest.range);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inheritFromBefore, range);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InsertDimensionRequest {\n");
    sb.append("    inheritFromBefore: ").append(toIndentedString(inheritFromBefore)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inheritFromBefore");
    openapiFields.add("range");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InsertDimensionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InsertDimensionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InsertDimensionRequest is not found in the empty JSON string", InsertDimensionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InsertDimensionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InsertDimensionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `range`
      if (jsonObj.get("range") != null && !jsonObj.get("range").isJsonNull()) {
        DimensionRange.validateJsonElement(jsonObj.get("range"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InsertDimensionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InsertDimensionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InsertDimensionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InsertDimensionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<InsertDimensionRequest>() {
           @Override
           public void write(JsonWriter out, InsertDimensionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InsertDimensionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InsertDimensionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InsertDimensionRequest
   * @throws IOException if the JSON string is invalid with respect to InsertDimensionRequest
   */
  public static InsertDimensionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InsertDimensionRequest.class);
  }

  /**
   * Convert an instance of InsertDimensionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

