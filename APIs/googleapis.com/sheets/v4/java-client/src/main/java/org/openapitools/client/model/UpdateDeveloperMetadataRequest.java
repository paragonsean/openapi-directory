/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataFilter;
import org.openapitools.client.model.DeveloperMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request to update properties of developer metadata. Updates the properties of the developer metadata selected by the filters to the values provided in the DeveloperMetadata resource. Callers must specify the properties they wish to update in the fields parameter, as well as specify at least one DataFilter matching the metadata they wish to update.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateDeveloperMetadataRequest {
  public static final String SERIALIZED_NAME_DATA_FILTERS = "dataFilters";
  @SerializedName(SERIALIZED_NAME_DATA_FILTERS)
  private List<DataFilter> dataFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEVELOPER_METADATA = "developerMetadata";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_METADATA)
  private DeveloperMetadata developerMetadata;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private String fields;

  public UpdateDeveloperMetadataRequest() {
  }

  public UpdateDeveloperMetadataRequest dataFilters(List<DataFilter> dataFilters) {
    this.dataFilters = dataFilters;
    return this;
  }

  public UpdateDeveloperMetadataRequest addDataFiltersItem(DataFilter dataFiltersItem) {
    if (this.dataFilters == null) {
      this.dataFilters = new ArrayList<>();
    }
    this.dataFilters.add(dataFiltersItem);
    return this;
  }

  /**
   * The filters matching the developer metadata entries to update.
   * @return dataFilters
   */
  @javax.annotation.Nullable
  public List<DataFilter> getDataFilters() {
    return dataFilters;
  }

  public void setDataFilters(List<DataFilter> dataFilters) {
    this.dataFilters = dataFilters;
  }


  public UpdateDeveloperMetadataRequest developerMetadata(DeveloperMetadata developerMetadata) {
    this.developerMetadata = developerMetadata;
    return this;
  }

  /**
   * Get developerMetadata
   * @return developerMetadata
   */
  @javax.annotation.Nullable
  public DeveloperMetadata getDeveloperMetadata() {
    return developerMetadata;
  }

  public void setDeveloperMetadata(DeveloperMetadata developerMetadata) {
    this.developerMetadata = developerMetadata;
  }


  public UpdateDeveloperMetadataRequest fields(String fields) {
    this.fields = fields;
    return this;
  }

  /**
   * The fields that should be updated. At least one field must be specified. The root &#x60;developerMetadata&#x60; is implied and should not be specified. A single &#x60;\&quot;*\&quot;&#x60; can be used as short-hand for listing every field.
   * @return fields
   */
  @javax.annotation.Nullable
  public String getFields() {
    return fields;
  }

  public void setFields(String fields) {
    this.fields = fields;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDeveloperMetadataRequest updateDeveloperMetadataRequest = (UpdateDeveloperMetadataRequest) o;
    return Objects.equals(this.dataFilters, updateDeveloperMetadataRequest.dataFilters) &&
        Objects.equals(this.developerMetadata, updateDeveloperMetadataRequest.developerMetadata) &&
        Objects.equals(this.fields, updateDeveloperMetadataRequest.fields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataFilters, developerMetadata, fields);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDeveloperMetadataRequest {\n");
    sb.append("    dataFilters: ").append(toIndentedString(dataFilters)).append("\n");
    sb.append("    developerMetadata: ").append(toIndentedString(developerMetadata)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataFilters");
    openapiFields.add("developerMetadata");
    openapiFields.add("fields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDeveloperMetadataRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDeveloperMetadataRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDeveloperMetadataRequest is not found in the empty JSON string", UpdateDeveloperMetadataRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDeveloperMetadataRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDeveloperMetadataRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dataFilters") != null && !jsonObj.get("dataFilters").isJsonNull()) {
        JsonArray jsonArraydataFilters = jsonObj.getAsJsonArray("dataFilters");
        if (jsonArraydataFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataFilters` to be an array in the JSON string but got `%s`", jsonObj.get("dataFilters").toString()));
          }

          // validate the optional field `dataFilters` (array)
          for (int i = 0; i < jsonArraydataFilters.size(); i++) {
            DataFilter.validateJsonElement(jsonArraydataFilters.get(i));
          };
        }
      }
      // validate the optional field `developerMetadata`
      if (jsonObj.get("developerMetadata") != null && !jsonObj.get("developerMetadata").isJsonNull()) {
        DeveloperMetadata.validateJsonElement(jsonObj.get("developerMetadata"));
      }
      if ((jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) && !jsonObj.get("fields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fields").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDeveloperMetadataRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDeveloperMetadataRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDeveloperMetadataRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDeveloperMetadataRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDeveloperMetadataRequest>() {
           @Override
           public void write(JsonWriter out, UpdateDeveloperMetadataRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDeveloperMetadataRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDeveloperMetadataRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDeveloperMetadataRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateDeveloperMetadataRequest
   */
  public static UpdateDeveloperMetadataRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDeveloperMetadataRequest.class);
  }

  /**
   * Convert an instance of UpdateDeveloperMetadataRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

