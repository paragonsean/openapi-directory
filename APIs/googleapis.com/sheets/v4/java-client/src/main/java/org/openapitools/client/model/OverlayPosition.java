/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GridCoordinate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The location an object is overlaid on top of a grid.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OverlayPosition {
  public static final String SERIALIZED_NAME_ANCHOR_CELL = "anchorCell";
  @SerializedName(SERIALIZED_NAME_ANCHOR_CELL)
  private GridCoordinate anchorCell;

  public static final String SERIALIZED_NAME_HEIGHT_PIXELS = "heightPixels";
  @SerializedName(SERIALIZED_NAME_HEIGHT_PIXELS)
  private Integer heightPixels;

  public static final String SERIALIZED_NAME_OFFSET_X_PIXELS = "offsetXPixels";
  @SerializedName(SERIALIZED_NAME_OFFSET_X_PIXELS)
  private Integer offsetXPixels;

  public static final String SERIALIZED_NAME_OFFSET_Y_PIXELS = "offsetYPixels";
  @SerializedName(SERIALIZED_NAME_OFFSET_Y_PIXELS)
  private Integer offsetYPixels;

  public static final String SERIALIZED_NAME_WIDTH_PIXELS = "widthPixels";
  @SerializedName(SERIALIZED_NAME_WIDTH_PIXELS)
  private Integer widthPixels;

  public OverlayPosition() {
  }

  public OverlayPosition anchorCell(GridCoordinate anchorCell) {
    this.anchorCell = anchorCell;
    return this;
  }

  /**
   * Get anchorCell
   * @return anchorCell
   */
  @javax.annotation.Nullable
  public GridCoordinate getAnchorCell() {
    return anchorCell;
  }

  public void setAnchorCell(GridCoordinate anchorCell) {
    this.anchorCell = anchorCell;
  }


  public OverlayPosition heightPixels(Integer heightPixels) {
    this.heightPixels = heightPixels;
    return this;
  }

  /**
   * The height of the object, in pixels. Defaults to 371.
   * @return heightPixels
   */
  @javax.annotation.Nullable
  public Integer getHeightPixels() {
    return heightPixels;
  }

  public void setHeightPixels(Integer heightPixels) {
    this.heightPixels = heightPixels;
  }


  public OverlayPosition offsetXPixels(Integer offsetXPixels) {
    this.offsetXPixels = offsetXPixels;
    return this;
  }

  /**
   * The horizontal offset, in pixels, that the object is offset from the anchor cell.
   * @return offsetXPixels
   */
  @javax.annotation.Nullable
  public Integer getOffsetXPixels() {
    return offsetXPixels;
  }

  public void setOffsetXPixels(Integer offsetXPixels) {
    this.offsetXPixels = offsetXPixels;
  }


  public OverlayPosition offsetYPixels(Integer offsetYPixels) {
    this.offsetYPixels = offsetYPixels;
    return this;
  }

  /**
   * The vertical offset, in pixels, that the object is offset from the anchor cell.
   * @return offsetYPixels
   */
  @javax.annotation.Nullable
  public Integer getOffsetYPixels() {
    return offsetYPixels;
  }

  public void setOffsetYPixels(Integer offsetYPixels) {
    this.offsetYPixels = offsetYPixels;
  }


  public OverlayPosition widthPixels(Integer widthPixels) {
    this.widthPixels = widthPixels;
    return this;
  }

  /**
   * The width of the object, in pixels. Defaults to 600.
   * @return widthPixels
   */
  @javax.annotation.Nullable
  public Integer getWidthPixels() {
    return widthPixels;
  }

  public void setWidthPixels(Integer widthPixels) {
    this.widthPixels = widthPixels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OverlayPosition overlayPosition = (OverlayPosition) o;
    return Objects.equals(this.anchorCell, overlayPosition.anchorCell) &&
        Objects.equals(this.heightPixels, overlayPosition.heightPixels) &&
        Objects.equals(this.offsetXPixels, overlayPosition.offsetXPixels) &&
        Objects.equals(this.offsetYPixels, overlayPosition.offsetYPixels) &&
        Objects.equals(this.widthPixels, overlayPosition.widthPixels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anchorCell, heightPixels, offsetXPixels, offsetYPixels, widthPixels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OverlayPosition {\n");
    sb.append("    anchorCell: ").append(toIndentedString(anchorCell)).append("\n");
    sb.append("    heightPixels: ").append(toIndentedString(heightPixels)).append("\n");
    sb.append("    offsetXPixels: ").append(toIndentedString(offsetXPixels)).append("\n");
    sb.append("    offsetYPixels: ").append(toIndentedString(offsetYPixels)).append("\n");
    sb.append("    widthPixels: ").append(toIndentedString(widthPixels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("anchorCell");
    openapiFields.add("heightPixels");
    openapiFields.add("offsetXPixels");
    openapiFields.add("offsetYPixels");
    openapiFields.add("widthPixels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OverlayPosition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OverlayPosition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OverlayPosition is not found in the empty JSON string", OverlayPosition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OverlayPosition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OverlayPosition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `anchorCell`
      if (jsonObj.get("anchorCell") != null && !jsonObj.get("anchorCell").isJsonNull()) {
        GridCoordinate.validateJsonElement(jsonObj.get("anchorCell"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OverlayPosition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OverlayPosition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OverlayPosition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OverlayPosition.class));

       return (TypeAdapter<T>) new TypeAdapter<OverlayPosition>() {
           @Override
           public void write(JsonWriter out, OverlayPosition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OverlayPosition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OverlayPosition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OverlayPosition
   * @throws IOException if the JSON string is invalid with respect to OverlayPosition
   */
  public static OverlayPosition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OverlayPosition.class);
  }

  /**
   * Convert an instance of OverlayPosition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

