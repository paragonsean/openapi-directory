/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data within a range of the spreadsheet.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ValueRange {
  /**
   * The major dimension of the values. For output, if the spreadsheet data is: &#x60;A1&#x3D;1,B1&#x3D;2,A2&#x3D;3,B2&#x3D;4&#x60;, then requesting &#x60;range&#x3D;A1:B2,majorDimension&#x3D;ROWS&#x60; will return &#x60;[[1,2],[3,4]]&#x60;, whereas requesting &#x60;range&#x3D;A1:B2,majorDimension&#x3D;COLUMNS&#x60; will return &#x60;[[1,3],[2,4]]&#x60;. For input, with &#x60;range&#x3D;A1:B2,majorDimension&#x3D;ROWS&#x60; then &#x60;[[1,2],[3,4]]&#x60; will set &#x60;A1&#x3D;1,B1&#x3D;2,A2&#x3D;3,B2&#x3D;4&#x60;. With &#x60;range&#x3D;A1:B2,majorDimension&#x3D;COLUMNS&#x60; then &#x60;[[1,2],[3,4]]&#x60; will set &#x60;A1&#x3D;1,B1&#x3D;3,A2&#x3D;2,B2&#x3D;4&#x60;. When writing, if this field is not set, it defaults to ROWS.
   */
  @JsonAdapter(MajorDimensionEnum.Adapter.class)
  public enum MajorDimensionEnum {
    DIMENSION_UNSPECIFIED("DIMENSION_UNSPECIFIED"),
    
    ROWS("ROWS"),
    
    COLUMNS("COLUMNS");

    private String value;

    MajorDimensionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MajorDimensionEnum fromValue(String value) {
      for (MajorDimensionEnum b : MajorDimensionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MajorDimensionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MajorDimensionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MajorDimensionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MajorDimensionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MajorDimensionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAJOR_DIMENSION = "majorDimension";
  @SerializedName(SERIALIZED_NAME_MAJOR_DIMENSION)
  private MajorDimensionEnum majorDimension;

  public static final String SERIALIZED_NAME_RANGE = "range";
  @SerializedName(SERIALIZED_NAME_RANGE)
  private String range;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<List<Object>> values = new ArrayList<>();

  public ValueRange() {
  }

  public ValueRange majorDimension(MajorDimensionEnum majorDimension) {
    this.majorDimension = majorDimension;
    return this;
  }

  /**
   * The major dimension of the values. For output, if the spreadsheet data is: &#x60;A1&#x3D;1,B1&#x3D;2,A2&#x3D;3,B2&#x3D;4&#x60;, then requesting &#x60;range&#x3D;A1:B2,majorDimension&#x3D;ROWS&#x60; will return &#x60;[[1,2],[3,4]]&#x60;, whereas requesting &#x60;range&#x3D;A1:B2,majorDimension&#x3D;COLUMNS&#x60; will return &#x60;[[1,3],[2,4]]&#x60;. For input, with &#x60;range&#x3D;A1:B2,majorDimension&#x3D;ROWS&#x60; then &#x60;[[1,2],[3,4]]&#x60; will set &#x60;A1&#x3D;1,B1&#x3D;2,A2&#x3D;3,B2&#x3D;4&#x60;. With &#x60;range&#x3D;A1:B2,majorDimension&#x3D;COLUMNS&#x60; then &#x60;[[1,2],[3,4]]&#x60; will set &#x60;A1&#x3D;1,B1&#x3D;3,A2&#x3D;2,B2&#x3D;4&#x60;. When writing, if this field is not set, it defaults to ROWS.
   * @return majorDimension
   */
  @javax.annotation.Nullable
  public MajorDimensionEnum getMajorDimension() {
    return majorDimension;
  }

  public void setMajorDimension(MajorDimensionEnum majorDimension) {
    this.majorDimension = majorDimension;
  }


  public ValueRange range(String range) {
    this.range = range;
    return this;
  }

  /**
   * The range the values cover, in [A1 notation](/sheets/api/guides/concepts#cell). For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended.
   * @return range
   */
  @javax.annotation.Nullable
  public String getRange() {
    return range;
  }

  public void setRange(String range) {
    this.range = range;
  }


  public ValueRange values(List<List<Object>> values) {
    this.values = values;
    return this;
  }

  public ValueRange addValuesItem(List<Object> valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

  /**
   * The data that was read or to be written. This is an array of arrays, the outer array representing all the data and each inner array representing a major dimension. Each item in the inner array corresponds with one cell. For output, empty trailing rows and columns will not be included. For input, supported value types are: bool, string, and double. Null values will be skipped. To set a cell to an empty value, set the string value to an empty string.
   * @return values
   */
  @javax.annotation.Nullable
  public List<List<Object>> getValues() {
    return values;
  }

  public void setValues(List<List<Object>> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValueRange valueRange = (ValueRange) o;
    return Objects.equals(this.majorDimension, valueRange.majorDimension) &&
        Objects.equals(this.range, valueRange.range) &&
        Objects.equals(this.values, valueRange.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(majorDimension, range, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValueRange {\n");
    sb.append("    majorDimension: ").append(toIndentedString(majorDimension)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("majorDimension");
    openapiFields.add("range");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ValueRange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValueRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValueRange is not found in the empty JSON string", ValueRange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ValueRange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValueRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("majorDimension") != null && !jsonObj.get("majorDimension").isJsonNull()) && !jsonObj.get("majorDimension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `majorDimension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("majorDimension").toString()));
      }
      // validate the optional field `majorDimension`
      if (jsonObj.get("majorDimension") != null && !jsonObj.get("majorDimension").isJsonNull()) {
        MajorDimensionEnum.validateJsonElement(jsonObj.get("majorDimension"));
      }
      if ((jsonObj.get("range") != null && !jsonObj.get("range").isJsonNull()) && !jsonObj.get("range").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `range` to be a primitive type in the JSON string but got `%s`", jsonObj.get("range").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull() && !jsonObj.get("values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValueRange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValueRange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValueRange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValueRange.class));

       return (TypeAdapter<T>) new TypeAdapter<ValueRange>() {
           @Override
           public void write(JsonWriter out, ValueRange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValueRange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ValueRange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ValueRange
   * @throws IOException if the JSON string is invalid with respect to ValueRange
   */
  public static ValueRange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValueRange.class);
  }

  /**
   * Convert an instance of ValueRange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

