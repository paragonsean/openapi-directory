/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GridRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Finds and replaces data in cells over a range, sheet, or all sheets.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FindReplaceRequest {
  public static final String SERIALIZED_NAME_ALL_SHEETS = "allSheets";
  @SerializedName(SERIALIZED_NAME_ALL_SHEETS)
  private Boolean allSheets;

  public static final String SERIALIZED_NAME_FIND = "find";
  @SerializedName(SERIALIZED_NAME_FIND)
  private String find;

  public static final String SERIALIZED_NAME_INCLUDE_FORMULAS = "includeFormulas";
  @SerializedName(SERIALIZED_NAME_INCLUDE_FORMULAS)
  private Boolean includeFormulas;

  public static final String SERIALIZED_NAME_MATCH_CASE = "matchCase";
  @SerializedName(SERIALIZED_NAME_MATCH_CASE)
  private Boolean matchCase;

  public static final String SERIALIZED_NAME_MATCH_ENTIRE_CELL = "matchEntireCell";
  @SerializedName(SERIALIZED_NAME_MATCH_ENTIRE_CELL)
  private Boolean matchEntireCell;

  public static final String SERIALIZED_NAME_RANGE = "range";
  @SerializedName(SERIALIZED_NAME_RANGE)
  private GridRange range;

  public static final String SERIALIZED_NAME_REPLACEMENT = "replacement";
  @SerializedName(SERIALIZED_NAME_REPLACEMENT)
  private String replacement;

  public static final String SERIALIZED_NAME_SEARCH_BY_REGEX = "searchByRegex";
  @SerializedName(SERIALIZED_NAME_SEARCH_BY_REGEX)
  private Boolean searchByRegex;

  public static final String SERIALIZED_NAME_SHEET_ID = "sheetId";
  @SerializedName(SERIALIZED_NAME_SHEET_ID)
  private Integer sheetId;

  public FindReplaceRequest() {
  }

  public FindReplaceRequest allSheets(Boolean allSheets) {
    this.allSheets = allSheets;
    return this;
  }

  /**
   * True to find/replace over all sheets.
   * @return allSheets
   */
  @javax.annotation.Nullable
  public Boolean getAllSheets() {
    return allSheets;
  }

  public void setAllSheets(Boolean allSheets) {
    this.allSheets = allSheets;
  }


  public FindReplaceRequest find(String find) {
    this.find = find;
    return this;
  }

  /**
   * The value to search.
   * @return find
   */
  @javax.annotation.Nullable
  public String getFind() {
    return find;
  }

  public void setFind(String find) {
    this.find = find;
  }


  public FindReplaceRequest includeFormulas(Boolean includeFormulas) {
    this.includeFormulas = includeFormulas;
    return this;
  }

  /**
   * True if the search should include cells with formulas. False to skip cells with formulas.
   * @return includeFormulas
   */
  @javax.annotation.Nullable
  public Boolean getIncludeFormulas() {
    return includeFormulas;
  }

  public void setIncludeFormulas(Boolean includeFormulas) {
    this.includeFormulas = includeFormulas;
  }


  public FindReplaceRequest matchCase(Boolean matchCase) {
    this.matchCase = matchCase;
    return this;
  }

  /**
   * True if the search is case sensitive.
   * @return matchCase
   */
  @javax.annotation.Nullable
  public Boolean getMatchCase() {
    return matchCase;
  }

  public void setMatchCase(Boolean matchCase) {
    this.matchCase = matchCase;
  }


  public FindReplaceRequest matchEntireCell(Boolean matchEntireCell) {
    this.matchEntireCell = matchEntireCell;
    return this;
  }

  /**
   * True if the find value should match the entire cell.
   * @return matchEntireCell
   */
  @javax.annotation.Nullable
  public Boolean getMatchEntireCell() {
    return matchEntireCell;
  }

  public void setMatchEntireCell(Boolean matchEntireCell) {
    this.matchEntireCell = matchEntireCell;
  }


  public FindReplaceRequest range(GridRange range) {
    this.range = range;
    return this;
  }

  /**
   * Get range
   * @return range
   */
  @javax.annotation.Nullable
  public GridRange getRange() {
    return range;
  }

  public void setRange(GridRange range) {
    this.range = range;
  }


  public FindReplaceRequest replacement(String replacement) {
    this.replacement = replacement;
    return this;
  }

  /**
   * The value to use as the replacement.
   * @return replacement
   */
  @javax.annotation.Nullable
  public String getReplacement() {
    return replacement;
  }

  public void setReplacement(String replacement) {
    this.replacement = replacement;
  }


  public FindReplaceRequest searchByRegex(Boolean searchByRegex) {
    this.searchByRegex = searchByRegex;
    return this;
  }

  /**
   * True if the find value is a regex. The regular expression and replacement should follow Java regex rules at https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html. The replacement string is allowed to refer to capturing groups. For example, if one cell has the contents &#x60;\&quot;Google Sheets\&quot;&#x60; and another has &#x60;\&quot;Google Docs\&quot;&#x60;, then searching for &#x60;\&quot;o.* (.*)\&quot;&#x60; with a replacement of &#x60;\&quot;$1 Rocks\&quot;&#x60; would change the contents of the cells to &#x60;\&quot;GSheets Rocks\&quot;&#x60; and &#x60;\&quot;GDocs Rocks\&quot;&#x60; respectively.
   * @return searchByRegex
   */
  @javax.annotation.Nullable
  public Boolean getSearchByRegex() {
    return searchByRegex;
  }

  public void setSearchByRegex(Boolean searchByRegex) {
    this.searchByRegex = searchByRegex;
  }


  public FindReplaceRequest sheetId(Integer sheetId) {
    this.sheetId = sheetId;
    return this;
  }

  /**
   * The sheet to find/replace over.
   * @return sheetId
   */
  @javax.annotation.Nullable
  public Integer getSheetId() {
    return sheetId;
  }

  public void setSheetId(Integer sheetId) {
    this.sheetId = sheetId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FindReplaceRequest findReplaceRequest = (FindReplaceRequest) o;
    return Objects.equals(this.allSheets, findReplaceRequest.allSheets) &&
        Objects.equals(this.find, findReplaceRequest.find) &&
        Objects.equals(this.includeFormulas, findReplaceRequest.includeFormulas) &&
        Objects.equals(this.matchCase, findReplaceRequest.matchCase) &&
        Objects.equals(this.matchEntireCell, findReplaceRequest.matchEntireCell) &&
        Objects.equals(this.range, findReplaceRequest.range) &&
        Objects.equals(this.replacement, findReplaceRequest.replacement) &&
        Objects.equals(this.searchByRegex, findReplaceRequest.searchByRegex) &&
        Objects.equals(this.sheetId, findReplaceRequest.sheetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allSheets, find, includeFormulas, matchCase, matchEntireCell, range, replacement, searchByRegex, sheetId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FindReplaceRequest {\n");
    sb.append("    allSheets: ").append(toIndentedString(allSheets)).append("\n");
    sb.append("    find: ").append(toIndentedString(find)).append("\n");
    sb.append("    includeFormulas: ").append(toIndentedString(includeFormulas)).append("\n");
    sb.append("    matchCase: ").append(toIndentedString(matchCase)).append("\n");
    sb.append("    matchEntireCell: ").append(toIndentedString(matchEntireCell)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("    replacement: ").append(toIndentedString(replacement)).append("\n");
    sb.append("    searchByRegex: ").append(toIndentedString(searchByRegex)).append("\n");
    sb.append("    sheetId: ").append(toIndentedString(sheetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allSheets");
    openapiFields.add("find");
    openapiFields.add("includeFormulas");
    openapiFields.add("matchCase");
    openapiFields.add("matchEntireCell");
    openapiFields.add("range");
    openapiFields.add("replacement");
    openapiFields.add("searchByRegex");
    openapiFields.add("sheetId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FindReplaceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FindReplaceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FindReplaceRequest is not found in the empty JSON string", FindReplaceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FindReplaceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FindReplaceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("find") != null && !jsonObj.get("find").isJsonNull()) && !jsonObj.get("find").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `find` to be a primitive type in the JSON string but got `%s`", jsonObj.get("find").toString()));
      }
      // validate the optional field `range`
      if (jsonObj.get("range") != null && !jsonObj.get("range").isJsonNull()) {
        GridRange.validateJsonElement(jsonObj.get("range"));
      }
      if ((jsonObj.get("replacement") != null && !jsonObj.get("replacement").isJsonNull()) && !jsonObj.get("replacement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replacement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replacement").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FindReplaceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FindReplaceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FindReplaceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FindReplaceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FindReplaceRequest>() {
           @Override
           public void write(JsonWriter out, FindReplaceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FindReplaceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FindReplaceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FindReplaceRequest
   * @throws IOException if the JSON string is invalid with respect to FindReplaceRequest
   */
  public static FindReplaceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FindReplaceRequest.class);
  }

  /**
   * Convert an instance of FindReplaceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

