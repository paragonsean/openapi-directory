/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Allows you to organize numeric values in a source data column into buckets of constant size.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChartHistogramRule {
  public static final String SERIALIZED_NAME_INTERVAL_SIZE = "intervalSize";
  @SerializedName(SERIALIZED_NAME_INTERVAL_SIZE)
  private Double intervalSize;

  public static final String SERIALIZED_NAME_MAX_VALUE = "maxValue";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  private Double maxValue;

  public static final String SERIALIZED_NAME_MIN_VALUE = "minValue";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE)
  private Double minValue;

  public ChartHistogramRule() {
  }

  public ChartHistogramRule intervalSize(Double intervalSize) {
    this.intervalSize = intervalSize;
    return this;
  }

  /**
   * The size of the buckets that are created. Must be positive.
   * @return intervalSize
   */
  @javax.annotation.Nullable
  public Double getIntervalSize() {
    return intervalSize;
  }

  public void setIntervalSize(Double intervalSize) {
    this.intervalSize = intervalSize;
  }


  public ChartHistogramRule maxValue(Double maxValue) {
    this.maxValue = maxValue;
    return this;
  }

  /**
   * The maximum value at which items are placed into buckets. Values greater than the maximum are grouped into a single bucket. If omitted, it is determined by the maximum item value.
   * @return maxValue
   */
  @javax.annotation.Nullable
  public Double getMaxValue() {
    return maxValue;
  }

  public void setMaxValue(Double maxValue) {
    this.maxValue = maxValue;
  }


  public ChartHistogramRule minValue(Double minValue) {
    this.minValue = minValue;
    return this;
  }

  /**
   * The minimum value at which items are placed into buckets. Values that are less than the minimum are grouped into a single bucket. If omitted, it is determined by the minimum item value.
   * @return minValue
   */
  @javax.annotation.Nullable
  public Double getMinValue() {
    return minValue;
  }

  public void setMinValue(Double minValue) {
    this.minValue = minValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartHistogramRule chartHistogramRule = (ChartHistogramRule) o;
    return Objects.equals(this.intervalSize, chartHistogramRule.intervalSize) &&
        Objects.equals(this.maxValue, chartHistogramRule.maxValue) &&
        Objects.equals(this.minValue, chartHistogramRule.minValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intervalSize, maxValue, minValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartHistogramRule {\n");
    sb.append("    intervalSize: ").append(toIndentedString(intervalSize)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("intervalSize");
    openapiFields.add("maxValue");
    openapiFields.add("minValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChartHistogramRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChartHistogramRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChartHistogramRule is not found in the empty JSON string", ChartHistogramRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChartHistogramRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChartHistogramRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChartHistogramRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChartHistogramRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChartHistogramRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChartHistogramRule.class));

       return (TypeAdapter<T>) new TypeAdapter<ChartHistogramRule>() {
           @Override
           public void write(JsonWriter out, ChartHistogramRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChartHistogramRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChartHistogramRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChartHistogramRule
   * @throws IOException if the JSON string is invalid with respect to ChartHistogramRule
   */
  public static ChartHistogramRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChartHistogramRule.class);
  }

  /**
   * Convert an instance of ChartHistogramRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

