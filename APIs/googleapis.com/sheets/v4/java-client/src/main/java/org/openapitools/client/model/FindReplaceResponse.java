/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The result of the find/replace.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FindReplaceResponse {
  public static final String SERIALIZED_NAME_FORMULAS_CHANGED = "formulasChanged";
  @SerializedName(SERIALIZED_NAME_FORMULAS_CHANGED)
  private Integer formulasChanged;

  public static final String SERIALIZED_NAME_OCCURRENCES_CHANGED = "occurrencesChanged";
  @SerializedName(SERIALIZED_NAME_OCCURRENCES_CHANGED)
  private Integer occurrencesChanged;

  public static final String SERIALIZED_NAME_ROWS_CHANGED = "rowsChanged";
  @SerializedName(SERIALIZED_NAME_ROWS_CHANGED)
  private Integer rowsChanged;

  public static final String SERIALIZED_NAME_SHEETS_CHANGED = "sheetsChanged";
  @SerializedName(SERIALIZED_NAME_SHEETS_CHANGED)
  private Integer sheetsChanged;

  public static final String SERIALIZED_NAME_VALUES_CHANGED = "valuesChanged";
  @SerializedName(SERIALIZED_NAME_VALUES_CHANGED)
  private Integer valuesChanged;

  public FindReplaceResponse() {
  }

  public FindReplaceResponse formulasChanged(Integer formulasChanged) {
    this.formulasChanged = formulasChanged;
    return this;
  }

  /**
   * The number of formula cells changed.
   * @return formulasChanged
   */
  @javax.annotation.Nullable
  public Integer getFormulasChanged() {
    return formulasChanged;
  }

  public void setFormulasChanged(Integer formulasChanged) {
    this.formulasChanged = formulasChanged;
  }


  public FindReplaceResponse occurrencesChanged(Integer occurrencesChanged) {
    this.occurrencesChanged = occurrencesChanged;
    return this;
  }

  /**
   * The number of occurrences (possibly multiple within a cell) changed. For example, if replacing &#x60;\&quot;e\&quot;&#x60; with &#x60;\&quot;o\&quot;&#x60; in &#x60;\&quot;Google Sheets\&quot;&#x60;, this would be &#x60;\&quot;3\&quot;&#x60; because &#x60;\&quot;Google Sheets\&quot;&#x60; -&gt; &#x60;\&quot;Googlo Shoots\&quot;&#x60;.
   * @return occurrencesChanged
   */
  @javax.annotation.Nullable
  public Integer getOccurrencesChanged() {
    return occurrencesChanged;
  }

  public void setOccurrencesChanged(Integer occurrencesChanged) {
    this.occurrencesChanged = occurrencesChanged;
  }


  public FindReplaceResponse rowsChanged(Integer rowsChanged) {
    this.rowsChanged = rowsChanged;
    return this;
  }

  /**
   * The number of rows changed.
   * @return rowsChanged
   */
  @javax.annotation.Nullable
  public Integer getRowsChanged() {
    return rowsChanged;
  }

  public void setRowsChanged(Integer rowsChanged) {
    this.rowsChanged = rowsChanged;
  }


  public FindReplaceResponse sheetsChanged(Integer sheetsChanged) {
    this.sheetsChanged = sheetsChanged;
    return this;
  }

  /**
   * The number of sheets changed.
   * @return sheetsChanged
   */
  @javax.annotation.Nullable
  public Integer getSheetsChanged() {
    return sheetsChanged;
  }

  public void setSheetsChanged(Integer sheetsChanged) {
    this.sheetsChanged = sheetsChanged;
  }


  public FindReplaceResponse valuesChanged(Integer valuesChanged) {
    this.valuesChanged = valuesChanged;
    return this;
  }

  /**
   * The number of non-formula cells changed.
   * @return valuesChanged
   */
  @javax.annotation.Nullable
  public Integer getValuesChanged() {
    return valuesChanged;
  }

  public void setValuesChanged(Integer valuesChanged) {
    this.valuesChanged = valuesChanged;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FindReplaceResponse findReplaceResponse = (FindReplaceResponse) o;
    return Objects.equals(this.formulasChanged, findReplaceResponse.formulasChanged) &&
        Objects.equals(this.occurrencesChanged, findReplaceResponse.occurrencesChanged) &&
        Objects.equals(this.rowsChanged, findReplaceResponse.rowsChanged) &&
        Objects.equals(this.sheetsChanged, findReplaceResponse.sheetsChanged) &&
        Objects.equals(this.valuesChanged, findReplaceResponse.valuesChanged);
  }

  @Override
  public int hashCode() {
    return Objects.hash(formulasChanged, occurrencesChanged, rowsChanged, sheetsChanged, valuesChanged);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FindReplaceResponse {\n");
    sb.append("    formulasChanged: ").append(toIndentedString(formulasChanged)).append("\n");
    sb.append("    occurrencesChanged: ").append(toIndentedString(occurrencesChanged)).append("\n");
    sb.append("    rowsChanged: ").append(toIndentedString(rowsChanged)).append("\n");
    sb.append("    sheetsChanged: ").append(toIndentedString(sheetsChanged)).append("\n");
    sb.append("    valuesChanged: ").append(toIndentedString(valuesChanged)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("formulasChanged");
    openapiFields.add("occurrencesChanged");
    openapiFields.add("rowsChanged");
    openapiFields.add("sheetsChanged");
    openapiFields.add("valuesChanged");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FindReplaceResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FindReplaceResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FindReplaceResponse is not found in the empty JSON string", FindReplaceResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FindReplaceResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FindReplaceResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FindReplaceResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FindReplaceResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FindReplaceResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FindReplaceResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<FindReplaceResponse>() {
           @Override
           public void write(JsonWriter out, FindReplaceResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FindReplaceResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FindReplaceResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FindReplaceResponse
   * @throws IOException if the JSON string is invalid with respect to FindReplaceResponse
   */
  public static FindReplaceResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FindReplaceResponse.class);
  }

  /**
   * Convert an instance of FindReplaceResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

