/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConditionalFormatRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The result of updating a conditional format rule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateConditionalFormatRuleResponse {
  public static final String SERIALIZED_NAME_NEW_INDEX = "newIndex";
  @SerializedName(SERIALIZED_NAME_NEW_INDEX)
  private Integer newIndex;

  public static final String SERIALIZED_NAME_NEW_RULE = "newRule";
  @SerializedName(SERIALIZED_NAME_NEW_RULE)
  private ConditionalFormatRule newRule;

  public static final String SERIALIZED_NAME_OLD_INDEX = "oldIndex";
  @SerializedName(SERIALIZED_NAME_OLD_INDEX)
  private Integer oldIndex;

  public static final String SERIALIZED_NAME_OLD_RULE = "oldRule";
  @SerializedName(SERIALIZED_NAME_OLD_RULE)
  private ConditionalFormatRule oldRule;

  public UpdateConditionalFormatRuleResponse() {
  }

  public UpdateConditionalFormatRuleResponse newIndex(Integer newIndex) {
    this.newIndex = newIndex;
    return this;
  }

  /**
   * The index of the new rule.
   * @return newIndex
   */
  @javax.annotation.Nullable
  public Integer getNewIndex() {
    return newIndex;
  }

  public void setNewIndex(Integer newIndex) {
    this.newIndex = newIndex;
  }


  public UpdateConditionalFormatRuleResponse newRule(ConditionalFormatRule newRule) {
    this.newRule = newRule;
    return this;
  }

  /**
   * Get newRule
   * @return newRule
   */
  @javax.annotation.Nullable
  public ConditionalFormatRule getNewRule() {
    return newRule;
  }

  public void setNewRule(ConditionalFormatRule newRule) {
    this.newRule = newRule;
  }


  public UpdateConditionalFormatRuleResponse oldIndex(Integer oldIndex) {
    this.oldIndex = oldIndex;
    return this;
  }

  /**
   * The old index of the rule. Not set if a rule was replaced (because it is the same as new_index).
   * @return oldIndex
   */
  @javax.annotation.Nullable
  public Integer getOldIndex() {
    return oldIndex;
  }

  public void setOldIndex(Integer oldIndex) {
    this.oldIndex = oldIndex;
  }


  public UpdateConditionalFormatRuleResponse oldRule(ConditionalFormatRule oldRule) {
    this.oldRule = oldRule;
    return this;
  }

  /**
   * Get oldRule
   * @return oldRule
   */
  @javax.annotation.Nullable
  public ConditionalFormatRule getOldRule() {
    return oldRule;
  }

  public void setOldRule(ConditionalFormatRule oldRule) {
    this.oldRule = oldRule;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateConditionalFormatRuleResponse updateConditionalFormatRuleResponse = (UpdateConditionalFormatRuleResponse) o;
    return Objects.equals(this.newIndex, updateConditionalFormatRuleResponse.newIndex) &&
        Objects.equals(this.newRule, updateConditionalFormatRuleResponse.newRule) &&
        Objects.equals(this.oldIndex, updateConditionalFormatRuleResponse.oldIndex) &&
        Objects.equals(this.oldRule, updateConditionalFormatRuleResponse.oldRule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(newIndex, newRule, oldIndex, oldRule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateConditionalFormatRuleResponse {\n");
    sb.append("    newIndex: ").append(toIndentedString(newIndex)).append("\n");
    sb.append("    newRule: ").append(toIndentedString(newRule)).append("\n");
    sb.append("    oldIndex: ").append(toIndentedString(oldIndex)).append("\n");
    sb.append("    oldRule: ").append(toIndentedString(oldRule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("newIndex");
    openapiFields.add("newRule");
    openapiFields.add("oldIndex");
    openapiFields.add("oldRule");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateConditionalFormatRuleResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateConditionalFormatRuleResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateConditionalFormatRuleResponse is not found in the empty JSON string", UpdateConditionalFormatRuleResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateConditionalFormatRuleResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateConditionalFormatRuleResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `newRule`
      if (jsonObj.get("newRule") != null && !jsonObj.get("newRule").isJsonNull()) {
        ConditionalFormatRule.validateJsonElement(jsonObj.get("newRule"));
      }
      // validate the optional field `oldRule`
      if (jsonObj.get("oldRule") != null && !jsonObj.get("oldRule").isJsonNull()) {
        ConditionalFormatRule.validateJsonElement(jsonObj.get("oldRule"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateConditionalFormatRuleResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateConditionalFormatRuleResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateConditionalFormatRuleResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateConditionalFormatRuleResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateConditionalFormatRuleResponse>() {
           @Override
           public void write(JsonWriter out, UpdateConditionalFormatRuleResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateConditionalFormatRuleResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateConditionalFormatRuleResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateConditionalFormatRuleResponse
   * @throws IOException if the JSON string is invalid with respect to UpdateConditionalFormatRuleResponse
   */
  public static UpdateConditionalFormatRuleResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateConditionalFormatRuleResponse.class);
  }

  /**
   * Convert an instance of UpdateConditionalFormatRuleResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

