/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A custom subtotal column for a waterfall chart series.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WaterfallChartCustomSubtotal {
  public static final String SERIALIZED_NAME_DATA_IS_SUBTOTAL = "dataIsSubtotal";
  @SerializedName(SERIALIZED_NAME_DATA_IS_SUBTOTAL)
  private Boolean dataIsSubtotal;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_SUBTOTAL_INDEX = "subtotalIndex";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL_INDEX)
  private Integer subtotalIndex;

  public WaterfallChartCustomSubtotal() {
  }

  public WaterfallChartCustomSubtotal dataIsSubtotal(Boolean dataIsSubtotal) {
    this.dataIsSubtotal = dataIsSubtotal;
    return this;
  }

  /**
   * True if the data point at subtotal_index is the subtotal. If false, the subtotal will be computed and appear after the data point.
   * @return dataIsSubtotal
   */
  @javax.annotation.Nullable
  public Boolean getDataIsSubtotal() {
    return dataIsSubtotal;
  }

  public void setDataIsSubtotal(Boolean dataIsSubtotal) {
    this.dataIsSubtotal = dataIsSubtotal;
  }


  public WaterfallChartCustomSubtotal label(String label) {
    this.label = label;
    return this;
  }

  /**
   * A label for the subtotal column.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public WaterfallChartCustomSubtotal subtotalIndex(Integer subtotalIndex) {
    this.subtotalIndex = subtotalIndex;
    return this;
  }

  /**
   * The zero-based index of a data point within the series. If data_is_subtotal is true, the data point at this index is the subtotal. Otherwise, the subtotal appears after the data point with this index. A series can have multiple subtotals at arbitrary indices, but subtotals do not affect the indices of the data points. For example, if a series has three data points, their indices will always be 0, 1, and 2, regardless of how many subtotals exist on the series or what data points they are associated with.
   * @return subtotalIndex
   */
  @javax.annotation.Nullable
  public Integer getSubtotalIndex() {
    return subtotalIndex;
  }

  public void setSubtotalIndex(Integer subtotalIndex) {
    this.subtotalIndex = subtotalIndex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WaterfallChartCustomSubtotal waterfallChartCustomSubtotal = (WaterfallChartCustomSubtotal) o;
    return Objects.equals(this.dataIsSubtotal, waterfallChartCustomSubtotal.dataIsSubtotal) &&
        Objects.equals(this.label, waterfallChartCustomSubtotal.label) &&
        Objects.equals(this.subtotalIndex, waterfallChartCustomSubtotal.subtotalIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataIsSubtotal, label, subtotalIndex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WaterfallChartCustomSubtotal {\n");
    sb.append("    dataIsSubtotal: ").append(toIndentedString(dataIsSubtotal)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    subtotalIndex: ").append(toIndentedString(subtotalIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataIsSubtotal");
    openapiFields.add("label");
    openapiFields.add("subtotalIndex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WaterfallChartCustomSubtotal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WaterfallChartCustomSubtotal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WaterfallChartCustomSubtotal is not found in the empty JSON string", WaterfallChartCustomSubtotal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WaterfallChartCustomSubtotal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WaterfallChartCustomSubtotal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WaterfallChartCustomSubtotal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WaterfallChartCustomSubtotal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WaterfallChartCustomSubtotal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WaterfallChartCustomSubtotal.class));

       return (TypeAdapter<T>) new TypeAdapter<WaterfallChartCustomSubtotal>() {
           @Override
           public void write(JsonWriter out, WaterfallChartCustomSubtotal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WaterfallChartCustomSubtotal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WaterfallChartCustomSubtotal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WaterfallChartCustomSubtotal
   * @throws IOException if the JSON string is invalid with respect to WaterfallChartCustomSubtotal
   */
  public static WaterfallChartCustomSubtotal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WaterfallChartCustomSubtotal.class);
  }

  /**
   * Convert an instance of WaterfallChartCustomSubtotal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

