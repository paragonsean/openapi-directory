/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A range of values whose location is specified by a DataFilter.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataFilterValueRange {
  public static final String SERIALIZED_NAME_DATA_FILTER = "dataFilter";
  @SerializedName(SERIALIZED_NAME_DATA_FILTER)
  private DataFilter dataFilter;

  /**
   * The major dimension of the values.
   */
  @JsonAdapter(MajorDimensionEnum.Adapter.class)
  public enum MajorDimensionEnum {
    DIMENSION_UNSPECIFIED("DIMENSION_UNSPECIFIED"),
    
    ROWS("ROWS"),
    
    COLUMNS("COLUMNS");

    private String value;

    MajorDimensionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MajorDimensionEnum fromValue(String value) {
      for (MajorDimensionEnum b : MajorDimensionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MajorDimensionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MajorDimensionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MajorDimensionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MajorDimensionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MajorDimensionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAJOR_DIMENSION = "majorDimension";
  @SerializedName(SERIALIZED_NAME_MAJOR_DIMENSION)
  private MajorDimensionEnum majorDimension;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<List<Object>> values = new ArrayList<>();

  public DataFilterValueRange() {
  }

  public DataFilterValueRange dataFilter(DataFilter dataFilter) {
    this.dataFilter = dataFilter;
    return this;
  }

  /**
   * Get dataFilter
   * @return dataFilter
   */
  @javax.annotation.Nullable
  public DataFilter getDataFilter() {
    return dataFilter;
  }

  public void setDataFilter(DataFilter dataFilter) {
    this.dataFilter = dataFilter;
  }


  public DataFilterValueRange majorDimension(MajorDimensionEnum majorDimension) {
    this.majorDimension = majorDimension;
    return this;
  }

  /**
   * The major dimension of the values.
   * @return majorDimension
   */
  @javax.annotation.Nullable
  public MajorDimensionEnum getMajorDimension() {
    return majorDimension;
  }

  public void setMajorDimension(MajorDimensionEnum majorDimension) {
    this.majorDimension = majorDimension;
  }


  public DataFilterValueRange values(List<List<Object>> values) {
    this.values = values;
    return this;
  }

  public DataFilterValueRange addValuesItem(List<Object> valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

  /**
   * The data to be written. If the provided values exceed any of the ranges matched by the data filter then the request fails. If the provided values are less than the matched ranges only the specified values are written, existing values in the matched ranges remain unaffected.
   * @return values
   */
  @javax.annotation.Nullable
  public List<List<Object>> getValues() {
    return values;
  }

  public void setValues(List<List<Object>> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataFilterValueRange dataFilterValueRange = (DataFilterValueRange) o;
    return Objects.equals(this.dataFilter, dataFilterValueRange.dataFilter) &&
        Objects.equals(this.majorDimension, dataFilterValueRange.majorDimension) &&
        Objects.equals(this.values, dataFilterValueRange.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataFilter, majorDimension, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataFilterValueRange {\n");
    sb.append("    dataFilter: ").append(toIndentedString(dataFilter)).append("\n");
    sb.append("    majorDimension: ").append(toIndentedString(majorDimension)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataFilter");
    openapiFields.add("majorDimension");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataFilterValueRange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataFilterValueRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataFilterValueRange is not found in the empty JSON string", DataFilterValueRange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataFilterValueRange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataFilterValueRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dataFilter`
      if (jsonObj.get("dataFilter") != null && !jsonObj.get("dataFilter").isJsonNull()) {
        DataFilter.validateJsonElement(jsonObj.get("dataFilter"));
      }
      if ((jsonObj.get("majorDimension") != null && !jsonObj.get("majorDimension").isJsonNull()) && !jsonObj.get("majorDimension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `majorDimension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("majorDimension").toString()));
      }
      // validate the optional field `majorDimension`
      if (jsonObj.get("majorDimension") != null && !jsonObj.get("majorDimension").isJsonNull()) {
        MajorDimensionEnum.validateJsonElement(jsonObj.get("majorDimension"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull() && !jsonObj.get("values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataFilterValueRange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataFilterValueRange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataFilterValueRange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataFilterValueRange.class));

       return (TypeAdapter<T>) new TypeAdapter<DataFilterValueRange>() {
           @Override
           public void write(JsonWriter out, DataFilterValueRange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataFilterValueRange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataFilterValueRange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataFilterValueRange
   * @throws IOException if the JSON string is invalid with respect to DataFilterValueRange
   */
  public static DataFilterValueRange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataFilterValueRange.class);
  }

  /**
   * Convert an instance of DataFilterValueRange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

