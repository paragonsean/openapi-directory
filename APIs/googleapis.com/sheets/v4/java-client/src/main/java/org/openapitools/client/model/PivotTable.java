/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DataExecutionStatus;
import org.openapitools.client.model.GridRange;
import org.openapitools.client.model.PivotFilterCriteria;
import org.openapitools.client.model.PivotFilterSpec;
import org.openapitools.client.model.PivotGroup;
import org.openapitools.client.model.PivotValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A pivot table.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PivotTable {
  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<PivotGroup> columns = new ArrayList<>();

  public static final String SERIALIZED_NAME_CRITERIA = "criteria";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CRITERIA)
  private Map<String, PivotFilterCriteria> criteria = new HashMap<>();

  public static final String SERIALIZED_NAME_DATA_EXECUTION_STATUS = "dataExecutionStatus";
  @SerializedName(SERIALIZED_NAME_DATA_EXECUTION_STATUS)
  private DataExecutionStatus dataExecutionStatus;

  public static final String SERIALIZED_NAME_DATA_SOURCE_ID = "dataSourceId";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_ID)
  private String dataSourceId;

  public static final String SERIALIZED_NAME_FILTER_SPECS = "filterSpecs";
  @SerializedName(SERIALIZED_NAME_FILTER_SPECS)
  private List<PivotFilterSpec> filterSpecs = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROWS = "rows";
  @SerializedName(SERIALIZED_NAME_ROWS)
  private List<PivotGroup> rows = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private GridRange source;

  /**
   * Whether values should be listed horizontally (as columns) or vertically (as rows).
   */
  @JsonAdapter(ValueLayoutEnum.Adapter.class)
  public enum ValueLayoutEnum {
    HORIZONTAL("HORIZONTAL"),
    
    VERTICAL("VERTICAL");

    private String value;

    ValueLayoutEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValueLayoutEnum fromValue(String value) {
      for (ValueLayoutEnum b : ValueLayoutEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValueLayoutEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValueLayoutEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValueLayoutEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValueLayoutEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ValueLayoutEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VALUE_LAYOUT = "valueLayout";
  @SerializedName(SERIALIZED_NAME_VALUE_LAYOUT)
  private ValueLayoutEnum valueLayout;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<PivotValue> values = new ArrayList<>();

  public PivotTable() {
  }

  public PivotTable columns(List<PivotGroup> columns) {
    this.columns = columns;
    return this;
  }

  public PivotTable addColumnsItem(PivotGroup columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

  /**
   * Each column grouping in the pivot table.
   * @return columns
   */
  @javax.annotation.Nullable
  public List<PivotGroup> getColumns() {
    return columns;
  }

  public void setColumns(List<PivotGroup> columns) {
    this.columns = columns;
  }


  @Deprecated
  public PivotTable criteria(Map<String, PivotFilterCriteria> criteria) {
    this.criteria = criteria;
    return this;
  }

  public PivotTable putCriteriaItem(String key, PivotFilterCriteria criteriaItem) {
    if (this.criteria == null) {
      this.criteria = new HashMap<>();
    }
    this.criteria.put(key, criteriaItem);
    return this;
  }

  /**
   * An optional mapping of filters per source column offset. The filters are applied before aggregating data into the pivot table. The map&#39;s key is the column offset of the source range that you want to filter, and the value is the criteria for that column. For example, if the source was &#x60;C10:E15&#x60;, a key of &#x60;0&#x60; will have the filter for column &#x60;C&#x60;, whereas the key &#x60;1&#x60; is for column &#x60;D&#x60;. This field is deprecated in favor of filter_specs.
   * @return criteria
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Map<String, PivotFilterCriteria> getCriteria() {
    return criteria;
  }

  @Deprecated
  public void setCriteria(Map<String, PivotFilterCriteria> criteria) {
    this.criteria = criteria;
  }


  public PivotTable dataExecutionStatus(DataExecutionStatus dataExecutionStatus) {
    this.dataExecutionStatus = dataExecutionStatus;
    return this;
  }

  /**
   * Get dataExecutionStatus
   * @return dataExecutionStatus
   */
  @javax.annotation.Nullable
  public DataExecutionStatus getDataExecutionStatus() {
    return dataExecutionStatus;
  }

  public void setDataExecutionStatus(DataExecutionStatus dataExecutionStatus) {
    this.dataExecutionStatus = dataExecutionStatus;
  }


  public PivotTable dataSourceId(String dataSourceId) {
    this.dataSourceId = dataSourceId;
    return this;
  }

  /**
   * The ID of the data source the pivot table is reading data from.
   * @return dataSourceId
   */
  @javax.annotation.Nullable
  public String getDataSourceId() {
    return dataSourceId;
  }

  public void setDataSourceId(String dataSourceId) {
    this.dataSourceId = dataSourceId;
  }


  public PivotTable filterSpecs(List<PivotFilterSpec> filterSpecs) {
    this.filterSpecs = filterSpecs;
    return this;
  }

  public PivotTable addFilterSpecsItem(PivotFilterSpec filterSpecsItem) {
    if (this.filterSpecs == null) {
      this.filterSpecs = new ArrayList<>();
    }
    this.filterSpecs.add(filterSpecsItem);
    return this;
  }

  /**
   * The filters applied to the source columns before aggregating data for the pivot table. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.
   * @return filterSpecs
   */
  @javax.annotation.Nullable
  public List<PivotFilterSpec> getFilterSpecs() {
    return filterSpecs;
  }

  public void setFilterSpecs(List<PivotFilterSpec> filterSpecs) {
    this.filterSpecs = filterSpecs;
  }


  public PivotTable rows(List<PivotGroup> rows) {
    this.rows = rows;
    return this;
  }

  public PivotTable addRowsItem(PivotGroup rowsItem) {
    if (this.rows == null) {
      this.rows = new ArrayList<>();
    }
    this.rows.add(rowsItem);
    return this;
  }

  /**
   * Each row grouping in the pivot table.
   * @return rows
   */
  @javax.annotation.Nullable
  public List<PivotGroup> getRows() {
    return rows;
  }

  public void setRows(List<PivotGroup> rows) {
    this.rows = rows;
  }


  public PivotTable source(GridRange source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public GridRange getSource() {
    return source;
  }

  public void setSource(GridRange source) {
    this.source = source;
  }


  public PivotTable valueLayout(ValueLayoutEnum valueLayout) {
    this.valueLayout = valueLayout;
    return this;
  }

  /**
   * Whether values should be listed horizontally (as columns) or vertically (as rows).
   * @return valueLayout
   */
  @javax.annotation.Nullable
  public ValueLayoutEnum getValueLayout() {
    return valueLayout;
  }

  public void setValueLayout(ValueLayoutEnum valueLayout) {
    this.valueLayout = valueLayout;
  }


  public PivotTable values(List<PivotValue> values) {
    this.values = values;
    return this;
  }

  public PivotTable addValuesItem(PivotValue valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

  /**
   * A list of values to include in the pivot table.
   * @return values
   */
  @javax.annotation.Nullable
  public List<PivotValue> getValues() {
    return values;
  }

  public void setValues(List<PivotValue> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PivotTable pivotTable = (PivotTable) o;
    return Objects.equals(this.columns, pivotTable.columns) &&
        Objects.equals(this.criteria, pivotTable.criteria) &&
        Objects.equals(this.dataExecutionStatus, pivotTable.dataExecutionStatus) &&
        Objects.equals(this.dataSourceId, pivotTable.dataSourceId) &&
        Objects.equals(this.filterSpecs, pivotTable.filterSpecs) &&
        Objects.equals(this.rows, pivotTable.rows) &&
        Objects.equals(this.source, pivotTable.source) &&
        Objects.equals(this.valueLayout, pivotTable.valueLayout) &&
        Objects.equals(this.values, pivotTable.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columns, criteria, dataExecutionStatus, dataSourceId, filterSpecs, rows, source, valueLayout, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PivotTable {\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    criteria: ").append(toIndentedString(criteria)).append("\n");
    sb.append("    dataExecutionStatus: ").append(toIndentedString(dataExecutionStatus)).append("\n");
    sb.append("    dataSourceId: ").append(toIndentedString(dataSourceId)).append("\n");
    sb.append("    filterSpecs: ").append(toIndentedString(filterSpecs)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    valueLayout: ").append(toIndentedString(valueLayout)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columns");
    openapiFields.add("criteria");
    openapiFields.add("dataExecutionStatus");
    openapiFields.add("dataSourceId");
    openapiFields.add("filterSpecs");
    openapiFields.add("rows");
    openapiFields.add("source");
    openapiFields.add("valueLayout");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PivotTable
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PivotTable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PivotTable is not found in the empty JSON string", PivotTable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PivotTable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PivotTable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("columns") != null && !jsonObj.get("columns").isJsonNull()) {
        JsonArray jsonArraycolumns = jsonObj.getAsJsonArray("columns");
        if (jsonArraycolumns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("columns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
          }

          // validate the optional field `columns` (array)
          for (int i = 0; i < jsonArraycolumns.size(); i++) {
            PivotGroup.validateJsonElement(jsonArraycolumns.get(i));
          };
        }
      }
      // validate the optional field `dataExecutionStatus`
      if (jsonObj.get("dataExecutionStatus") != null && !jsonObj.get("dataExecutionStatus").isJsonNull()) {
        DataExecutionStatus.validateJsonElement(jsonObj.get("dataExecutionStatus"));
      }
      if ((jsonObj.get("dataSourceId") != null && !jsonObj.get("dataSourceId").isJsonNull()) && !jsonObj.get("dataSourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSourceId").toString()));
      }
      if (jsonObj.get("filterSpecs") != null && !jsonObj.get("filterSpecs").isJsonNull()) {
        JsonArray jsonArrayfilterSpecs = jsonObj.getAsJsonArray("filterSpecs");
        if (jsonArrayfilterSpecs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filterSpecs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filterSpecs` to be an array in the JSON string but got `%s`", jsonObj.get("filterSpecs").toString()));
          }

          // validate the optional field `filterSpecs` (array)
          for (int i = 0; i < jsonArrayfilterSpecs.size(); i++) {
            PivotFilterSpec.validateJsonElement(jsonArrayfilterSpecs.get(i));
          };
        }
      }
      if (jsonObj.get("rows") != null && !jsonObj.get("rows").isJsonNull()) {
        JsonArray jsonArrayrows = jsonObj.getAsJsonArray("rows");
        if (jsonArrayrows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rows` to be an array in the JSON string but got `%s`", jsonObj.get("rows").toString()));
          }

          // validate the optional field `rows` (array)
          for (int i = 0; i < jsonArrayrows.size(); i++) {
            PivotGroup.validateJsonElement(jsonArrayrows.get(i));
          };
        }
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        GridRange.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("valueLayout") != null && !jsonObj.get("valueLayout").isJsonNull()) && !jsonObj.get("valueLayout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueLayout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueLayout").toString()));
      }
      // validate the optional field `valueLayout`
      if (jsonObj.get("valueLayout") != null && !jsonObj.get("valueLayout").isJsonNull()) {
        ValueLayoutEnum.validateJsonElement(jsonObj.get("valueLayout"));
      }
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull()) {
        JsonArray jsonArrayvalues = jsonObj.getAsJsonArray("values");
        if (jsonArrayvalues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("values").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
          }

          // validate the optional field `values` (array)
          for (int i = 0; i < jsonArrayvalues.size(); i++) {
            PivotValue.validateJsonElement(jsonArrayvalues.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PivotTable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PivotTable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PivotTable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PivotTable.class));

       return (TypeAdapter<T>) new TypeAdapter<PivotTable>() {
           @Override
           public void write(JsonWriter out, PivotTable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PivotTable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PivotTable given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PivotTable
   * @throws IOException if the JSON string is invalid with respect to PivotTable
   */
  public static PivotTable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PivotTable.class);
  }

  /**
   * Convert an instance of PivotTable to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

