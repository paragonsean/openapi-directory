/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BasicSeriesDataPointStyleOverride;
import org.openapitools.client.model.ChartData;
import org.openapitools.client.model.Color;
import org.openapitools.client.model.ColorStyle;
import org.openapitools.client.model.DataLabel;
import org.openapitools.client.model.LineStyle;
import org.openapitools.client.model.PointStyle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single series of data in a chart. For example, if charting stock prices over time, multiple series may exist, one for the \&quot;Open Price\&quot;, \&quot;High Price\&quot;, \&quot;Low Price\&quot; and \&quot;Close Price\&quot;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BasicChartSeries {
  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private Color color;

  public static final String SERIALIZED_NAME_COLOR_STYLE = "colorStyle";
  @SerializedName(SERIALIZED_NAME_COLOR_STYLE)
  private ColorStyle colorStyle;

  public static final String SERIALIZED_NAME_DATA_LABEL = "dataLabel";
  @SerializedName(SERIALIZED_NAME_DATA_LABEL)
  private DataLabel dataLabel;

  public static final String SERIALIZED_NAME_LINE_STYLE = "lineStyle";
  @SerializedName(SERIALIZED_NAME_LINE_STYLE)
  private LineStyle lineStyle;

  public static final String SERIALIZED_NAME_POINT_STYLE = "pointStyle";
  @SerializedName(SERIALIZED_NAME_POINT_STYLE)
  private PointStyle pointStyle;

  public static final String SERIALIZED_NAME_SERIES = "series";
  @SerializedName(SERIALIZED_NAME_SERIES)
  private ChartData series;

  public static final String SERIALIZED_NAME_STYLE_OVERRIDES = "styleOverrides";
  @SerializedName(SERIALIZED_NAME_STYLE_OVERRIDES)
  private List<BasicSeriesDataPointStyleOverride> styleOverrides = new ArrayList<>();

  /**
   * The minor axis that will specify the range of values for this series. For example, if charting stocks over time, the \&quot;Volume\&quot; series may want to be pinned to the right with the prices pinned to the left, because the scale of trading volume is different than the scale of prices. It is an error to specify an axis that isn&#39;t a valid minor axis for the chart&#39;s type.
   */
  @JsonAdapter(TargetAxisEnum.Adapter.class)
  public enum TargetAxisEnum {
    BASIC_CHART_AXIS_POSITION_UNSPECIFIED("BASIC_CHART_AXIS_POSITION_UNSPECIFIED"),
    
    BOTTOM_AXIS("BOTTOM_AXIS"),
    
    LEFT_AXIS("LEFT_AXIS"),
    
    RIGHT_AXIS("RIGHT_AXIS");

    private String value;

    TargetAxisEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetAxisEnum fromValue(String value) {
      for (TargetAxisEnum b : TargetAxisEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetAxisEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetAxisEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetAxisEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetAxisEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetAxisEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGET_AXIS = "targetAxis";
  @SerializedName(SERIALIZED_NAME_TARGET_AXIS)
  private TargetAxisEnum targetAxis;

  /**
   * The type of this series. Valid only if the chartType is COMBO. Different types will change the way the series is visualized. Only LINE, AREA, and COLUMN are supported.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BASIC_CHART_TYPE_UNSPECIFIED("BASIC_CHART_TYPE_UNSPECIFIED"),
    
    BAR("BAR"),
    
    LINE("LINE"),
    
    AREA("AREA"),
    
    COLUMN("COLUMN"),
    
    SCATTER("SCATTER"),
    
    COMBO("COMBO"),
    
    STEPPED_AREA("STEPPED_AREA");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public BasicChartSeries() {
  }

  public BasicChartSeries color(Color color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public Color getColor() {
    return color;
  }

  public void setColor(Color color) {
    this.color = color;
  }


  public BasicChartSeries colorStyle(ColorStyle colorStyle) {
    this.colorStyle = colorStyle;
    return this;
  }

  /**
   * Get colorStyle
   * @return colorStyle
   */
  @javax.annotation.Nullable
  public ColorStyle getColorStyle() {
    return colorStyle;
  }

  public void setColorStyle(ColorStyle colorStyle) {
    this.colorStyle = colorStyle;
  }


  public BasicChartSeries dataLabel(DataLabel dataLabel) {
    this.dataLabel = dataLabel;
    return this;
  }

  /**
   * Get dataLabel
   * @return dataLabel
   */
  @javax.annotation.Nullable
  public DataLabel getDataLabel() {
    return dataLabel;
  }

  public void setDataLabel(DataLabel dataLabel) {
    this.dataLabel = dataLabel;
  }


  public BasicChartSeries lineStyle(LineStyle lineStyle) {
    this.lineStyle = lineStyle;
    return this;
  }

  /**
   * Get lineStyle
   * @return lineStyle
   */
  @javax.annotation.Nullable
  public LineStyle getLineStyle() {
    return lineStyle;
  }

  public void setLineStyle(LineStyle lineStyle) {
    this.lineStyle = lineStyle;
  }


  public BasicChartSeries pointStyle(PointStyle pointStyle) {
    this.pointStyle = pointStyle;
    return this;
  }

  /**
   * Get pointStyle
   * @return pointStyle
   */
  @javax.annotation.Nullable
  public PointStyle getPointStyle() {
    return pointStyle;
  }

  public void setPointStyle(PointStyle pointStyle) {
    this.pointStyle = pointStyle;
  }


  public BasicChartSeries series(ChartData series) {
    this.series = series;
    return this;
  }

  /**
   * Get series
   * @return series
   */
  @javax.annotation.Nullable
  public ChartData getSeries() {
    return series;
  }

  public void setSeries(ChartData series) {
    this.series = series;
  }


  public BasicChartSeries styleOverrides(List<BasicSeriesDataPointStyleOverride> styleOverrides) {
    this.styleOverrides = styleOverrides;
    return this;
  }

  public BasicChartSeries addStyleOverridesItem(BasicSeriesDataPointStyleOverride styleOverridesItem) {
    if (this.styleOverrides == null) {
      this.styleOverrides = new ArrayList<>();
    }
    this.styleOverrides.add(styleOverridesItem);
    return this;
  }

  /**
   * Style override settings for series data points.
   * @return styleOverrides
   */
  @javax.annotation.Nullable
  public List<BasicSeriesDataPointStyleOverride> getStyleOverrides() {
    return styleOverrides;
  }

  public void setStyleOverrides(List<BasicSeriesDataPointStyleOverride> styleOverrides) {
    this.styleOverrides = styleOverrides;
  }


  public BasicChartSeries targetAxis(TargetAxisEnum targetAxis) {
    this.targetAxis = targetAxis;
    return this;
  }

  /**
   * The minor axis that will specify the range of values for this series. For example, if charting stocks over time, the \&quot;Volume\&quot; series may want to be pinned to the right with the prices pinned to the left, because the scale of trading volume is different than the scale of prices. It is an error to specify an axis that isn&#39;t a valid minor axis for the chart&#39;s type.
   * @return targetAxis
   */
  @javax.annotation.Nullable
  public TargetAxisEnum getTargetAxis() {
    return targetAxis;
  }

  public void setTargetAxis(TargetAxisEnum targetAxis) {
    this.targetAxis = targetAxis;
  }


  public BasicChartSeries type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of this series. Valid only if the chartType is COMBO. Different types will change the way the series is visualized. Only LINE, AREA, and COLUMN are supported.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BasicChartSeries basicChartSeries = (BasicChartSeries) o;
    return Objects.equals(this.color, basicChartSeries.color) &&
        Objects.equals(this.colorStyle, basicChartSeries.colorStyle) &&
        Objects.equals(this.dataLabel, basicChartSeries.dataLabel) &&
        Objects.equals(this.lineStyle, basicChartSeries.lineStyle) &&
        Objects.equals(this.pointStyle, basicChartSeries.pointStyle) &&
        Objects.equals(this.series, basicChartSeries.series) &&
        Objects.equals(this.styleOverrides, basicChartSeries.styleOverrides) &&
        Objects.equals(this.targetAxis, basicChartSeries.targetAxis) &&
        Objects.equals(this.type, basicChartSeries.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(color, colorStyle, dataLabel, lineStyle, pointStyle, series, styleOverrides, targetAxis, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BasicChartSeries {\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    colorStyle: ").append(toIndentedString(colorStyle)).append("\n");
    sb.append("    dataLabel: ").append(toIndentedString(dataLabel)).append("\n");
    sb.append("    lineStyle: ").append(toIndentedString(lineStyle)).append("\n");
    sb.append("    pointStyle: ").append(toIndentedString(pointStyle)).append("\n");
    sb.append("    series: ").append(toIndentedString(series)).append("\n");
    sb.append("    styleOverrides: ").append(toIndentedString(styleOverrides)).append("\n");
    sb.append("    targetAxis: ").append(toIndentedString(targetAxis)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("color");
    openapiFields.add("colorStyle");
    openapiFields.add("dataLabel");
    openapiFields.add("lineStyle");
    openapiFields.add("pointStyle");
    openapiFields.add("series");
    openapiFields.add("styleOverrides");
    openapiFields.add("targetAxis");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BasicChartSeries
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BasicChartSeries.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BasicChartSeries is not found in the empty JSON string", BasicChartSeries.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BasicChartSeries.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BasicChartSeries` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `color`
      if (jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) {
        Color.validateJsonElement(jsonObj.get("color"));
      }
      // validate the optional field `colorStyle`
      if (jsonObj.get("colorStyle") != null && !jsonObj.get("colorStyle").isJsonNull()) {
        ColorStyle.validateJsonElement(jsonObj.get("colorStyle"));
      }
      // validate the optional field `dataLabel`
      if (jsonObj.get("dataLabel") != null && !jsonObj.get("dataLabel").isJsonNull()) {
        DataLabel.validateJsonElement(jsonObj.get("dataLabel"));
      }
      // validate the optional field `lineStyle`
      if (jsonObj.get("lineStyle") != null && !jsonObj.get("lineStyle").isJsonNull()) {
        LineStyle.validateJsonElement(jsonObj.get("lineStyle"));
      }
      // validate the optional field `pointStyle`
      if (jsonObj.get("pointStyle") != null && !jsonObj.get("pointStyle").isJsonNull()) {
        PointStyle.validateJsonElement(jsonObj.get("pointStyle"));
      }
      // validate the optional field `series`
      if (jsonObj.get("series") != null && !jsonObj.get("series").isJsonNull()) {
        ChartData.validateJsonElement(jsonObj.get("series"));
      }
      if (jsonObj.get("styleOverrides") != null && !jsonObj.get("styleOverrides").isJsonNull()) {
        JsonArray jsonArraystyleOverrides = jsonObj.getAsJsonArray("styleOverrides");
        if (jsonArraystyleOverrides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("styleOverrides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `styleOverrides` to be an array in the JSON string but got `%s`", jsonObj.get("styleOverrides").toString()));
          }

          // validate the optional field `styleOverrides` (array)
          for (int i = 0; i < jsonArraystyleOverrides.size(); i++) {
            BasicSeriesDataPointStyleOverride.validateJsonElement(jsonArraystyleOverrides.get(i));
          };
        }
      }
      if ((jsonObj.get("targetAxis") != null && !jsonObj.get("targetAxis").isJsonNull()) && !jsonObj.get("targetAxis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetAxis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetAxis").toString()));
      }
      // validate the optional field `targetAxis`
      if (jsonObj.get("targetAxis") != null && !jsonObj.get("targetAxis").isJsonNull()) {
        TargetAxisEnum.validateJsonElement(jsonObj.get("targetAxis"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BasicChartSeries.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BasicChartSeries' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BasicChartSeries> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BasicChartSeries.class));

       return (TypeAdapter<T>) new TypeAdapter<BasicChartSeries>() {
           @Override
           public void write(JsonWriter out, BasicChartSeries value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BasicChartSeries read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BasicChartSeries given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BasicChartSeries
   * @throws IOException if the JSON string is invalid with respect to BasicChartSeries
   */
  public static BasicChartSeries fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BasicChartSeries.class);
  }

  /**
   * Convert an instance of BasicChartSeries to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

