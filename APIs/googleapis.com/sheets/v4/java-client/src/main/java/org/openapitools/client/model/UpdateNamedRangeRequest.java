/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NamedRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Updates properties of the named range with the specified namedRangeId.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNamedRangeRequest {
  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private String fields;

  public static final String SERIALIZED_NAME_NAMED_RANGE = "namedRange";
  @SerializedName(SERIALIZED_NAME_NAMED_RANGE)
  private NamedRange namedRange;

  public UpdateNamedRangeRequest() {
  }

  public UpdateNamedRangeRequest fields(String fields) {
    this.fields = fields;
    return this;
  }

  /**
   * The fields that should be updated. At least one field must be specified. The root &#x60;namedRange&#x60; is implied and should not be specified. A single &#x60;\&quot;*\&quot;&#x60; can be used as short-hand for listing every field.
   * @return fields
   */
  @javax.annotation.Nullable
  public String getFields() {
    return fields;
  }

  public void setFields(String fields) {
    this.fields = fields;
  }


  public UpdateNamedRangeRequest namedRange(NamedRange namedRange) {
    this.namedRange = namedRange;
    return this;
  }

  /**
   * Get namedRange
   * @return namedRange
   */
  @javax.annotation.Nullable
  public NamedRange getNamedRange() {
    return namedRange;
  }

  public void setNamedRange(NamedRange namedRange) {
    this.namedRange = namedRange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNamedRangeRequest updateNamedRangeRequest = (UpdateNamedRangeRequest) o;
    return Objects.equals(this.fields, updateNamedRangeRequest.fields) &&
        Objects.equals(this.namedRange, updateNamedRangeRequest.namedRange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fields, namedRange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNamedRangeRequest {\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    namedRange: ").append(toIndentedString(namedRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fields");
    openapiFields.add("namedRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNamedRangeRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNamedRangeRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNamedRangeRequest is not found in the empty JSON string", UpdateNamedRangeRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNamedRangeRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNamedRangeRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) && !jsonObj.get("fields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fields").toString()));
      }
      // validate the optional field `namedRange`
      if (jsonObj.get("namedRange") != null && !jsonObj.get("namedRange").isJsonNull()) {
        NamedRange.validateJsonElement(jsonObj.get("namedRange"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNamedRangeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNamedRangeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNamedRangeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNamedRangeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNamedRangeRequest>() {
           @Override
           public void write(JsonWriter out, UpdateNamedRangeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNamedRangeRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNamedRangeRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNamedRangeRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateNamedRangeRequest
   */
  public static UpdateNamedRangeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNamedRangeRequest.class);
  }

  /**
   * Convert an instance of UpdateNamedRangeRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

