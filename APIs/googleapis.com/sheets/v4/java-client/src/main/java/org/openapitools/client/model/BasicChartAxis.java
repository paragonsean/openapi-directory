/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChartAxisViewWindowOptions;
import org.openapitools.client.model.TextFormat;
import org.openapitools.client.model.TextPosition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An axis of the chart. A chart may not have more than one axis per axis position.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BasicChartAxis {
  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private TextFormat format;

  /**
   * The position of this axis.
   */
  @JsonAdapter(PositionEnum.Adapter.class)
  public enum PositionEnum {
    BASIC_CHART_AXIS_POSITION_UNSPECIFIED("BASIC_CHART_AXIS_POSITION_UNSPECIFIED"),
    
    BOTTOM_AXIS("BOTTOM_AXIS"),
    
    LEFT_AXIS("LEFT_AXIS"),
    
    RIGHT_AXIS("RIGHT_AXIS");

    private String value;

    PositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PositionEnum fromValue(String value) {
      for (PositionEnum b : PositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PositionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PositionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private PositionEnum position;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TITLE_TEXT_POSITION = "titleTextPosition";
  @SerializedName(SERIALIZED_NAME_TITLE_TEXT_POSITION)
  private TextPosition titleTextPosition;

  public static final String SERIALIZED_NAME_VIEW_WINDOW_OPTIONS = "viewWindowOptions";
  @SerializedName(SERIALIZED_NAME_VIEW_WINDOW_OPTIONS)
  private ChartAxisViewWindowOptions viewWindowOptions;

  public BasicChartAxis() {
  }

  public BasicChartAxis format(TextFormat format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public TextFormat getFormat() {
    return format;
  }

  public void setFormat(TextFormat format) {
    this.format = format;
  }


  public BasicChartAxis position(PositionEnum position) {
    this.position = position;
    return this;
  }

  /**
   * The position of this axis.
   * @return position
   */
  @javax.annotation.Nullable
  public PositionEnum getPosition() {
    return position;
  }

  public void setPosition(PositionEnum position) {
    this.position = position;
  }


  public BasicChartAxis title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of this axis. If set, this overrides any title inferred from headers of the data.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public BasicChartAxis titleTextPosition(TextPosition titleTextPosition) {
    this.titleTextPosition = titleTextPosition;
    return this;
  }

  /**
   * Get titleTextPosition
   * @return titleTextPosition
   */
  @javax.annotation.Nullable
  public TextPosition getTitleTextPosition() {
    return titleTextPosition;
  }

  public void setTitleTextPosition(TextPosition titleTextPosition) {
    this.titleTextPosition = titleTextPosition;
  }


  public BasicChartAxis viewWindowOptions(ChartAxisViewWindowOptions viewWindowOptions) {
    this.viewWindowOptions = viewWindowOptions;
    return this;
  }

  /**
   * Get viewWindowOptions
   * @return viewWindowOptions
   */
  @javax.annotation.Nullable
  public ChartAxisViewWindowOptions getViewWindowOptions() {
    return viewWindowOptions;
  }

  public void setViewWindowOptions(ChartAxisViewWindowOptions viewWindowOptions) {
    this.viewWindowOptions = viewWindowOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BasicChartAxis basicChartAxis = (BasicChartAxis) o;
    return Objects.equals(this.format, basicChartAxis.format) &&
        Objects.equals(this.position, basicChartAxis.position) &&
        Objects.equals(this.title, basicChartAxis.title) &&
        Objects.equals(this.titleTextPosition, basicChartAxis.titleTextPosition) &&
        Objects.equals(this.viewWindowOptions, basicChartAxis.viewWindowOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(format, position, title, titleTextPosition, viewWindowOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BasicChartAxis {\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    titleTextPosition: ").append(toIndentedString(titleTextPosition)).append("\n");
    sb.append("    viewWindowOptions: ").append(toIndentedString(viewWindowOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("format");
    openapiFields.add("position");
    openapiFields.add("title");
    openapiFields.add("titleTextPosition");
    openapiFields.add("viewWindowOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BasicChartAxis
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BasicChartAxis.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BasicChartAxis is not found in the empty JSON string", BasicChartAxis.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BasicChartAxis.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BasicChartAxis` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        TextFormat.validateJsonElement(jsonObj.get("format"));
      }
      if ((jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) && !jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      // validate the optional field `position`
      if (jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) {
        PositionEnum.validateJsonElement(jsonObj.get("position"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `titleTextPosition`
      if (jsonObj.get("titleTextPosition") != null && !jsonObj.get("titleTextPosition").isJsonNull()) {
        TextPosition.validateJsonElement(jsonObj.get("titleTextPosition"));
      }
      // validate the optional field `viewWindowOptions`
      if (jsonObj.get("viewWindowOptions") != null && !jsonObj.get("viewWindowOptions").isJsonNull()) {
        ChartAxisViewWindowOptions.validateJsonElement(jsonObj.get("viewWindowOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BasicChartAxis.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BasicChartAxis' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BasicChartAxis> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BasicChartAxis.class));

       return (TypeAdapter<T>) new TypeAdapter<BasicChartAxis>() {
           @Override
           public void write(JsonWriter out, BasicChartAxis value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BasicChartAxis read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BasicChartAxis given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BasicChartAxis
   * @throws IOException if the JSON string is invalid with respect to BasicChartAxis
   */
  public static BasicChartAxis fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BasicChartAxis.class);
  }

  /**
   * Convert an instance of BasicChartAxis to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

