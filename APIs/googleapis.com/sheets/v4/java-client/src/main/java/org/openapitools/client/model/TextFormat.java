/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Color;
import org.openapitools.client.model.ColorStyle;
import org.openapitools.client.model.Link;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The format of a run of text in a cell. Absent values indicate that the field isn&#39;t specified.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TextFormat {
  public static final String SERIALIZED_NAME_BOLD = "bold";
  @SerializedName(SERIALIZED_NAME_BOLD)
  private Boolean bold;

  public static final String SERIALIZED_NAME_FONT_FAMILY = "fontFamily";
  @SerializedName(SERIALIZED_NAME_FONT_FAMILY)
  private String fontFamily;

  public static final String SERIALIZED_NAME_FONT_SIZE = "fontSize";
  @SerializedName(SERIALIZED_NAME_FONT_SIZE)
  private Integer fontSize;

  public static final String SERIALIZED_NAME_FOREGROUND_COLOR = "foregroundColor";
  @SerializedName(SERIALIZED_NAME_FOREGROUND_COLOR)
  private Color foregroundColor;

  public static final String SERIALIZED_NAME_FOREGROUND_COLOR_STYLE = "foregroundColorStyle";
  @SerializedName(SERIALIZED_NAME_FOREGROUND_COLOR_STYLE)
  private ColorStyle foregroundColorStyle;

  public static final String SERIALIZED_NAME_ITALIC = "italic";
  @SerializedName(SERIALIZED_NAME_ITALIC)
  private Boolean italic;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private Link link;

  public static final String SERIALIZED_NAME_STRIKETHROUGH = "strikethrough";
  @SerializedName(SERIALIZED_NAME_STRIKETHROUGH)
  private Boolean strikethrough;

  public static final String SERIALIZED_NAME_UNDERLINE = "underline";
  @SerializedName(SERIALIZED_NAME_UNDERLINE)
  private Boolean underline;

  public TextFormat() {
  }

  public TextFormat bold(Boolean bold) {
    this.bold = bold;
    return this;
  }

  /**
   * True if the text is bold.
   * @return bold
   */
  @javax.annotation.Nullable
  public Boolean getBold() {
    return bold;
  }

  public void setBold(Boolean bold) {
    this.bold = bold;
  }


  public TextFormat fontFamily(String fontFamily) {
    this.fontFamily = fontFamily;
    return this;
  }

  /**
   * The font family.
   * @return fontFamily
   */
  @javax.annotation.Nullable
  public String getFontFamily() {
    return fontFamily;
  }

  public void setFontFamily(String fontFamily) {
    this.fontFamily = fontFamily;
  }


  public TextFormat fontSize(Integer fontSize) {
    this.fontSize = fontSize;
    return this;
  }

  /**
   * The size of the font.
   * @return fontSize
   */
  @javax.annotation.Nullable
  public Integer getFontSize() {
    return fontSize;
  }

  public void setFontSize(Integer fontSize) {
    this.fontSize = fontSize;
  }


  public TextFormat foregroundColor(Color foregroundColor) {
    this.foregroundColor = foregroundColor;
    return this;
  }

  /**
   * Get foregroundColor
   * @return foregroundColor
   */
  @javax.annotation.Nullable
  public Color getForegroundColor() {
    return foregroundColor;
  }

  public void setForegroundColor(Color foregroundColor) {
    this.foregroundColor = foregroundColor;
  }


  public TextFormat foregroundColorStyle(ColorStyle foregroundColorStyle) {
    this.foregroundColorStyle = foregroundColorStyle;
    return this;
  }

  /**
   * Get foregroundColorStyle
   * @return foregroundColorStyle
   */
  @javax.annotation.Nullable
  public ColorStyle getForegroundColorStyle() {
    return foregroundColorStyle;
  }

  public void setForegroundColorStyle(ColorStyle foregroundColorStyle) {
    this.foregroundColorStyle = foregroundColorStyle;
  }


  public TextFormat italic(Boolean italic) {
    this.italic = italic;
    return this;
  }

  /**
   * True if the text is italicized.
   * @return italic
   */
  @javax.annotation.Nullable
  public Boolean getItalic() {
    return italic;
  }

  public void setItalic(Boolean italic) {
    this.italic = italic;
  }


  public TextFormat link(Link link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public Link getLink() {
    return link;
  }

  public void setLink(Link link) {
    this.link = link;
  }


  public TextFormat strikethrough(Boolean strikethrough) {
    this.strikethrough = strikethrough;
    return this;
  }

  /**
   * True if the text has a strikethrough.
   * @return strikethrough
   */
  @javax.annotation.Nullable
  public Boolean getStrikethrough() {
    return strikethrough;
  }

  public void setStrikethrough(Boolean strikethrough) {
    this.strikethrough = strikethrough;
  }


  public TextFormat underline(Boolean underline) {
    this.underline = underline;
    return this;
  }

  /**
   * True if the text is underlined.
   * @return underline
   */
  @javax.annotation.Nullable
  public Boolean getUnderline() {
    return underline;
  }

  public void setUnderline(Boolean underline) {
    this.underline = underline;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextFormat textFormat = (TextFormat) o;
    return Objects.equals(this.bold, textFormat.bold) &&
        Objects.equals(this.fontFamily, textFormat.fontFamily) &&
        Objects.equals(this.fontSize, textFormat.fontSize) &&
        Objects.equals(this.foregroundColor, textFormat.foregroundColor) &&
        Objects.equals(this.foregroundColorStyle, textFormat.foregroundColorStyle) &&
        Objects.equals(this.italic, textFormat.italic) &&
        Objects.equals(this.link, textFormat.link) &&
        Objects.equals(this.strikethrough, textFormat.strikethrough) &&
        Objects.equals(this.underline, textFormat.underline);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bold, fontFamily, fontSize, foregroundColor, foregroundColorStyle, italic, link, strikethrough, underline);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextFormat {\n");
    sb.append("    bold: ").append(toIndentedString(bold)).append("\n");
    sb.append("    fontFamily: ").append(toIndentedString(fontFamily)).append("\n");
    sb.append("    fontSize: ").append(toIndentedString(fontSize)).append("\n");
    sb.append("    foregroundColor: ").append(toIndentedString(foregroundColor)).append("\n");
    sb.append("    foregroundColorStyle: ").append(toIndentedString(foregroundColorStyle)).append("\n");
    sb.append("    italic: ").append(toIndentedString(italic)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    strikethrough: ").append(toIndentedString(strikethrough)).append("\n");
    sb.append("    underline: ").append(toIndentedString(underline)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bold");
    openapiFields.add("fontFamily");
    openapiFields.add("fontSize");
    openapiFields.add("foregroundColor");
    openapiFields.add("foregroundColorStyle");
    openapiFields.add("italic");
    openapiFields.add("link");
    openapiFields.add("strikethrough");
    openapiFields.add("underline");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TextFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TextFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TextFormat is not found in the empty JSON string", TextFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TextFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TextFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fontFamily") != null && !jsonObj.get("fontFamily").isJsonNull()) && !jsonObj.get("fontFamily").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fontFamily` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fontFamily").toString()));
      }
      // validate the optional field `foregroundColor`
      if (jsonObj.get("foregroundColor") != null && !jsonObj.get("foregroundColor").isJsonNull()) {
        Color.validateJsonElement(jsonObj.get("foregroundColor"));
      }
      // validate the optional field `foregroundColorStyle`
      if (jsonObj.get("foregroundColorStyle") != null && !jsonObj.get("foregroundColorStyle").isJsonNull()) {
        ColorStyle.validateJsonElement(jsonObj.get("foregroundColorStyle"));
      }
      // validate the optional field `link`
      if (jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("link"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TextFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TextFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TextFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TextFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<TextFormat>() {
           @Override
           public void write(JsonWriter out, TextFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TextFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TextFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TextFormat
   * @throws IOException if the JSON string is invalid with respect to TextFormat
   */
  public static TextFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TextFormat.class);
  }

  /**
   * Convert an instance of TextFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

