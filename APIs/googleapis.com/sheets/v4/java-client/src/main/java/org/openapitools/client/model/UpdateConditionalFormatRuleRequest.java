/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConditionalFormatRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Updates a conditional format rule at the given index, or moves a conditional format rule to another index.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateConditionalFormatRuleRequest {
  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_NEW_INDEX = "newIndex";
  @SerializedName(SERIALIZED_NAME_NEW_INDEX)
  private Integer newIndex;

  public static final String SERIALIZED_NAME_RULE = "rule";
  @SerializedName(SERIALIZED_NAME_RULE)
  private ConditionalFormatRule rule;

  public static final String SERIALIZED_NAME_SHEET_ID = "sheetId";
  @SerializedName(SERIALIZED_NAME_SHEET_ID)
  private Integer sheetId;

  public UpdateConditionalFormatRuleRequest() {
  }

  public UpdateConditionalFormatRuleRequest index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The zero-based index of the rule that should be replaced or moved.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public UpdateConditionalFormatRuleRequest newIndex(Integer newIndex) {
    this.newIndex = newIndex;
    return this;
  }

  /**
   * The zero-based new index the rule should end up at.
   * @return newIndex
   */
  @javax.annotation.Nullable
  public Integer getNewIndex() {
    return newIndex;
  }

  public void setNewIndex(Integer newIndex) {
    this.newIndex = newIndex;
  }


  public UpdateConditionalFormatRuleRequest rule(ConditionalFormatRule rule) {
    this.rule = rule;
    return this;
  }

  /**
   * Get rule
   * @return rule
   */
  @javax.annotation.Nullable
  public ConditionalFormatRule getRule() {
    return rule;
  }

  public void setRule(ConditionalFormatRule rule) {
    this.rule = rule;
  }


  public UpdateConditionalFormatRuleRequest sheetId(Integer sheetId) {
    this.sheetId = sheetId;
    return this;
  }

  /**
   * The sheet of the rule to move. Required if new_index is set, unused otherwise.
   * @return sheetId
   */
  @javax.annotation.Nullable
  public Integer getSheetId() {
    return sheetId;
  }

  public void setSheetId(Integer sheetId) {
    this.sheetId = sheetId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateConditionalFormatRuleRequest updateConditionalFormatRuleRequest = (UpdateConditionalFormatRuleRequest) o;
    return Objects.equals(this.index, updateConditionalFormatRuleRequest.index) &&
        Objects.equals(this.newIndex, updateConditionalFormatRuleRequest.newIndex) &&
        Objects.equals(this.rule, updateConditionalFormatRuleRequest.rule) &&
        Objects.equals(this.sheetId, updateConditionalFormatRuleRequest.sheetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(index, newIndex, rule, sheetId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateConditionalFormatRuleRequest {\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    newIndex: ").append(toIndentedString(newIndex)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    sheetId: ").append(toIndentedString(sheetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("index");
    openapiFields.add("newIndex");
    openapiFields.add("rule");
    openapiFields.add("sheetId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateConditionalFormatRuleRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateConditionalFormatRuleRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateConditionalFormatRuleRequest is not found in the empty JSON string", UpdateConditionalFormatRuleRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateConditionalFormatRuleRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateConditionalFormatRuleRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `rule`
      if (jsonObj.get("rule") != null && !jsonObj.get("rule").isJsonNull()) {
        ConditionalFormatRule.validateJsonElement(jsonObj.get("rule"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateConditionalFormatRuleRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateConditionalFormatRuleRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateConditionalFormatRuleRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateConditionalFormatRuleRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateConditionalFormatRuleRequest>() {
           @Override
           public void write(JsonWriter out, UpdateConditionalFormatRuleRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateConditionalFormatRuleRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateConditionalFormatRuleRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateConditionalFormatRuleRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateConditionalFormatRuleRequest
   */
  public static UpdateConditionalFormatRuleRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateConditionalFormatRuleRequest.class);
  }

  /**
   * Convert an instance of UpdateConditionalFormatRuleRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

