/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The count limit on rows or columns in the pivot group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PivotGroupLimit {
  public static final String SERIALIZED_NAME_APPLY_ORDER = "applyOrder";
  @SerializedName(SERIALIZED_NAME_APPLY_ORDER)
  private Integer applyOrder;

  public static final String SERIALIZED_NAME_COUNT_LIMIT = "countLimit";
  @SerializedName(SERIALIZED_NAME_COUNT_LIMIT)
  private Integer countLimit;

  public PivotGroupLimit() {
  }

  public PivotGroupLimit applyOrder(Integer applyOrder) {
    this.applyOrder = applyOrder;
    return this;
  }

  /**
   * The order in which the group limit is applied to the pivot table. Pivot group limits are applied from lower to higher order number. Order numbers are normalized to consecutive integers from 0. For write request, to fully customize the applying orders, all pivot group limits should have this field set with an unique number. Otherwise, the order is determined by the index in the PivotTable.rows list and then the PivotTable.columns list.
   * @return applyOrder
   */
  @javax.annotation.Nullable
  public Integer getApplyOrder() {
    return applyOrder;
  }

  public void setApplyOrder(Integer applyOrder) {
    this.applyOrder = applyOrder;
  }


  public PivotGroupLimit countLimit(Integer countLimit) {
    this.countLimit = countLimit;
    return this;
  }

  /**
   * The count limit.
   * @return countLimit
   */
  @javax.annotation.Nullable
  public Integer getCountLimit() {
    return countLimit;
  }

  public void setCountLimit(Integer countLimit) {
    this.countLimit = countLimit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PivotGroupLimit pivotGroupLimit = (PivotGroupLimit) o;
    return Objects.equals(this.applyOrder, pivotGroupLimit.applyOrder) &&
        Objects.equals(this.countLimit, pivotGroupLimit.countLimit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applyOrder, countLimit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PivotGroupLimit {\n");
    sb.append("    applyOrder: ").append(toIndentedString(applyOrder)).append("\n");
    sb.append("    countLimit: ").append(toIndentedString(countLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applyOrder");
    openapiFields.add("countLimit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PivotGroupLimit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PivotGroupLimit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PivotGroupLimit is not found in the empty JSON string", PivotGroupLimit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PivotGroupLimit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PivotGroupLimit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PivotGroupLimit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PivotGroupLimit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PivotGroupLimit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PivotGroupLimit.class));

       return (TypeAdapter<T>) new TypeAdapter<PivotGroupLimit>() {
           @Override
           public void write(JsonWriter out, PivotGroupLimit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PivotGroupLimit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PivotGroupLimit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PivotGroupLimit
   * @throws IOException if the JSON string is invalid with respect to PivotGroupLimit
   */
  public static PivotGroupLimit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PivotGroupLimit.class);
  }

  /**
   * Convert an instance of PivotGroupLimit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

