/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Border;
import org.openapitools.client.model.GridRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Updates the borders of a range. If a field is not set in the request, that means the border remains as-is. For example, with two subsequent UpdateBordersRequest: 1. range: A1:A5 &#x60;{ top: RED, bottom: WHITE }&#x60; 2. range: A1:A5 &#x60;{ left: BLUE }&#x60; That would result in A1:A5 having a borders of &#x60;{ top: RED, bottom: WHITE, left: BLUE }&#x60;. If you want to clear a border, explicitly set the style to NONE.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateBordersRequest {
  public static final String SERIALIZED_NAME_BOTTOM = "bottom";
  @SerializedName(SERIALIZED_NAME_BOTTOM)
  private Border bottom;

  public static final String SERIALIZED_NAME_INNER_HORIZONTAL = "innerHorizontal";
  @SerializedName(SERIALIZED_NAME_INNER_HORIZONTAL)
  private Border innerHorizontal;

  public static final String SERIALIZED_NAME_INNER_VERTICAL = "innerVertical";
  @SerializedName(SERIALIZED_NAME_INNER_VERTICAL)
  private Border innerVertical;

  public static final String SERIALIZED_NAME_LEFT = "left";
  @SerializedName(SERIALIZED_NAME_LEFT)
  private Border left;

  public static final String SERIALIZED_NAME_RANGE = "range";
  @SerializedName(SERIALIZED_NAME_RANGE)
  private GridRange range;

  public static final String SERIALIZED_NAME_RIGHT = "right";
  @SerializedName(SERIALIZED_NAME_RIGHT)
  private Border right;

  public static final String SERIALIZED_NAME_TOP = "top";
  @SerializedName(SERIALIZED_NAME_TOP)
  private Border top;

  public UpdateBordersRequest() {
  }

  public UpdateBordersRequest bottom(Border bottom) {
    this.bottom = bottom;
    return this;
  }

  /**
   * Get bottom
   * @return bottom
   */
  @javax.annotation.Nullable
  public Border getBottom() {
    return bottom;
  }

  public void setBottom(Border bottom) {
    this.bottom = bottom;
  }


  public UpdateBordersRequest innerHorizontal(Border innerHorizontal) {
    this.innerHorizontal = innerHorizontal;
    return this;
  }

  /**
   * Get innerHorizontal
   * @return innerHorizontal
   */
  @javax.annotation.Nullable
  public Border getInnerHorizontal() {
    return innerHorizontal;
  }

  public void setInnerHorizontal(Border innerHorizontal) {
    this.innerHorizontal = innerHorizontal;
  }


  public UpdateBordersRequest innerVertical(Border innerVertical) {
    this.innerVertical = innerVertical;
    return this;
  }

  /**
   * Get innerVertical
   * @return innerVertical
   */
  @javax.annotation.Nullable
  public Border getInnerVertical() {
    return innerVertical;
  }

  public void setInnerVertical(Border innerVertical) {
    this.innerVertical = innerVertical;
  }


  public UpdateBordersRequest left(Border left) {
    this.left = left;
    return this;
  }

  /**
   * Get left
   * @return left
   */
  @javax.annotation.Nullable
  public Border getLeft() {
    return left;
  }

  public void setLeft(Border left) {
    this.left = left;
  }


  public UpdateBordersRequest range(GridRange range) {
    this.range = range;
    return this;
  }

  /**
   * Get range
   * @return range
   */
  @javax.annotation.Nullable
  public GridRange getRange() {
    return range;
  }

  public void setRange(GridRange range) {
    this.range = range;
  }


  public UpdateBordersRequest right(Border right) {
    this.right = right;
    return this;
  }

  /**
   * Get right
   * @return right
   */
  @javax.annotation.Nullable
  public Border getRight() {
    return right;
  }

  public void setRight(Border right) {
    this.right = right;
  }


  public UpdateBordersRequest top(Border top) {
    this.top = top;
    return this;
  }

  /**
   * Get top
   * @return top
   */
  @javax.annotation.Nullable
  public Border getTop() {
    return top;
  }

  public void setTop(Border top) {
    this.top = top;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateBordersRequest updateBordersRequest = (UpdateBordersRequest) o;
    return Objects.equals(this.bottom, updateBordersRequest.bottom) &&
        Objects.equals(this.innerHorizontal, updateBordersRequest.innerHorizontal) &&
        Objects.equals(this.innerVertical, updateBordersRequest.innerVertical) &&
        Objects.equals(this.left, updateBordersRequest.left) &&
        Objects.equals(this.range, updateBordersRequest.range) &&
        Objects.equals(this.right, updateBordersRequest.right) &&
        Objects.equals(this.top, updateBordersRequest.top);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bottom, innerHorizontal, innerVertical, left, range, right, top);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateBordersRequest {\n");
    sb.append("    bottom: ").append(toIndentedString(bottom)).append("\n");
    sb.append("    innerHorizontal: ").append(toIndentedString(innerHorizontal)).append("\n");
    sb.append("    innerVertical: ").append(toIndentedString(innerVertical)).append("\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bottom");
    openapiFields.add("innerHorizontal");
    openapiFields.add("innerVertical");
    openapiFields.add("left");
    openapiFields.add("range");
    openapiFields.add("right");
    openapiFields.add("top");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateBordersRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateBordersRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateBordersRequest is not found in the empty JSON string", UpdateBordersRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateBordersRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateBordersRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bottom`
      if (jsonObj.get("bottom") != null && !jsonObj.get("bottom").isJsonNull()) {
        Border.validateJsonElement(jsonObj.get("bottom"));
      }
      // validate the optional field `innerHorizontal`
      if (jsonObj.get("innerHorizontal") != null && !jsonObj.get("innerHorizontal").isJsonNull()) {
        Border.validateJsonElement(jsonObj.get("innerHorizontal"));
      }
      // validate the optional field `innerVertical`
      if (jsonObj.get("innerVertical") != null && !jsonObj.get("innerVertical").isJsonNull()) {
        Border.validateJsonElement(jsonObj.get("innerVertical"));
      }
      // validate the optional field `left`
      if (jsonObj.get("left") != null && !jsonObj.get("left").isJsonNull()) {
        Border.validateJsonElement(jsonObj.get("left"));
      }
      // validate the optional field `range`
      if (jsonObj.get("range") != null && !jsonObj.get("range").isJsonNull()) {
        GridRange.validateJsonElement(jsonObj.get("range"));
      }
      // validate the optional field `right`
      if (jsonObj.get("right") != null && !jsonObj.get("right").isJsonNull()) {
        Border.validateJsonElement(jsonObj.get("right"));
      }
      // validate the optional field `top`
      if (jsonObj.get("top") != null && !jsonObj.get("top").isJsonNull()) {
        Border.validateJsonElement(jsonObj.get("top"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateBordersRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateBordersRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateBordersRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateBordersRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateBordersRequest>() {
           @Override
           public void write(JsonWriter out, UpdateBordersRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateBordersRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateBordersRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateBordersRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateBordersRequest
   */
  public static UpdateBordersRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateBordersRequest.class);
  }

  /**
   * Convert an instance of UpdateBordersRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

