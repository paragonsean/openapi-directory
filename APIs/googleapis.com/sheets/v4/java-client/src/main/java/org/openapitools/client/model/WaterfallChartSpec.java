/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataLabel;
import org.openapitools.client.model.LineStyle;
import org.openapitools.client.model.WaterfallChartDomain;
import org.openapitools.client.model.WaterfallChartSeries;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A waterfall chart.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WaterfallChartSpec {
  public static final String SERIALIZED_NAME_CONNECTOR_LINE_STYLE = "connectorLineStyle";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_LINE_STYLE)
  private LineStyle connectorLineStyle;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private WaterfallChartDomain domain;

  public static final String SERIALIZED_NAME_FIRST_VALUE_IS_TOTAL = "firstValueIsTotal";
  @SerializedName(SERIALIZED_NAME_FIRST_VALUE_IS_TOTAL)
  private Boolean firstValueIsTotal;

  public static final String SERIALIZED_NAME_HIDE_CONNECTOR_LINES = "hideConnectorLines";
  @SerializedName(SERIALIZED_NAME_HIDE_CONNECTOR_LINES)
  private Boolean hideConnectorLines;

  public static final String SERIALIZED_NAME_SERIES = "series";
  @SerializedName(SERIALIZED_NAME_SERIES)
  private List<WaterfallChartSeries> series = new ArrayList<>();

  /**
   * The stacked type.
   */
  @JsonAdapter(StackedTypeEnum.Adapter.class)
  public enum StackedTypeEnum {
    WATERFALL_STACKED_TYPE_UNSPECIFIED("WATERFALL_STACKED_TYPE_UNSPECIFIED"),
    
    STACKED("STACKED"),
    
    SEQUENTIAL("SEQUENTIAL");

    private String value;

    StackedTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StackedTypeEnum fromValue(String value) {
      for (StackedTypeEnum b : StackedTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StackedTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StackedTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StackedTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StackedTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StackedTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STACKED_TYPE = "stackedType";
  @SerializedName(SERIALIZED_NAME_STACKED_TYPE)
  private StackedTypeEnum stackedType;

  public static final String SERIALIZED_NAME_TOTAL_DATA_LABEL = "totalDataLabel";
  @SerializedName(SERIALIZED_NAME_TOTAL_DATA_LABEL)
  private DataLabel totalDataLabel;

  public WaterfallChartSpec() {
  }

  public WaterfallChartSpec connectorLineStyle(LineStyle connectorLineStyle) {
    this.connectorLineStyle = connectorLineStyle;
    return this;
  }

  /**
   * Get connectorLineStyle
   * @return connectorLineStyle
   */
  @javax.annotation.Nullable
  public LineStyle getConnectorLineStyle() {
    return connectorLineStyle;
  }

  public void setConnectorLineStyle(LineStyle connectorLineStyle) {
    this.connectorLineStyle = connectorLineStyle;
  }


  public WaterfallChartSpec domain(WaterfallChartDomain domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nullable
  public WaterfallChartDomain getDomain() {
    return domain;
  }

  public void setDomain(WaterfallChartDomain domain) {
    this.domain = domain;
  }


  public WaterfallChartSpec firstValueIsTotal(Boolean firstValueIsTotal) {
    this.firstValueIsTotal = firstValueIsTotal;
    return this;
  }

  /**
   * True to interpret the first value as a total.
   * @return firstValueIsTotal
   */
  @javax.annotation.Nullable
  public Boolean getFirstValueIsTotal() {
    return firstValueIsTotal;
  }

  public void setFirstValueIsTotal(Boolean firstValueIsTotal) {
    this.firstValueIsTotal = firstValueIsTotal;
  }


  public WaterfallChartSpec hideConnectorLines(Boolean hideConnectorLines) {
    this.hideConnectorLines = hideConnectorLines;
    return this;
  }

  /**
   * True to hide connector lines between columns.
   * @return hideConnectorLines
   */
  @javax.annotation.Nullable
  public Boolean getHideConnectorLines() {
    return hideConnectorLines;
  }

  public void setHideConnectorLines(Boolean hideConnectorLines) {
    this.hideConnectorLines = hideConnectorLines;
  }


  public WaterfallChartSpec series(List<WaterfallChartSeries> series) {
    this.series = series;
    return this;
  }

  public WaterfallChartSpec addSeriesItem(WaterfallChartSeries seriesItem) {
    if (this.series == null) {
      this.series = new ArrayList<>();
    }
    this.series.add(seriesItem);
    return this;
  }

  /**
   * The data this waterfall chart is visualizing.
   * @return series
   */
  @javax.annotation.Nullable
  public List<WaterfallChartSeries> getSeries() {
    return series;
  }

  public void setSeries(List<WaterfallChartSeries> series) {
    this.series = series;
  }


  public WaterfallChartSpec stackedType(StackedTypeEnum stackedType) {
    this.stackedType = stackedType;
    return this;
  }

  /**
   * The stacked type.
   * @return stackedType
   */
  @javax.annotation.Nullable
  public StackedTypeEnum getStackedType() {
    return stackedType;
  }

  public void setStackedType(StackedTypeEnum stackedType) {
    this.stackedType = stackedType;
  }


  public WaterfallChartSpec totalDataLabel(DataLabel totalDataLabel) {
    this.totalDataLabel = totalDataLabel;
    return this;
  }

  /**
   * Get totalDataLabel
   * @return totalDataLabel
   */
  @javax.annotation.Nullable
  public DataLabel getTotalDataLabel() {
    return totalDataLabel;
  }

  public void setTotalDataLabel(DataLabel totalDataLabel) {
    this.totalDataLabel = totalDataLabel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WaterfallChartSpec waterfallChartSpec = (WaterfallChartSpec) o;
    return Objects.equals(this.connectorLineStyle, waterfallChartSpec.connectorLineStyle) &&
        Objects.equals(this.domain, waterfallChartSpec.domain) &&
        Objects.equals(this.firstValueIsTotal, waterfallChartSpec.firstValueIsTotal) &&
        Objects.equals(this.hideConnectorLines, waterfallChartSpec.hideConnectorLines) &&
        Objects.equals(this.series, waterfallChartSpec.series) &&
        Objects.equals(this.stackedType, waterfallChartSpec.stackedType) &&
        Objects.equals(this.totalDataLabel, waterfallChartSpec.totalDataLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorLineStyle, domain, firstValueIsTotal, hideConnectorLines, series, stackedType, totalDataLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WaterfallChartSpec {\n");
    sb.append("    connectorLineStyle: ").append(toIndentedString(connectorLineStyle)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    firstValueIsTotal: ").append(toIndentedString(firstValueIsTotal)).append("\n");
    sb.append("    hideConnectorLines: ").append(toIndentedString(hideConnectorLines)).append("\n");
    sb.append("    series: ").append(toIndentedString(series)).append("\n");
    sb.append("    stackedType: ").append(toIndentedString(stackedType)).append("\n");
    sb.append("    totalDataLabel: ").append(toIndentedString(totalDataLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectorLineStyle");
    openapiFields.add("domain");
    openapiFields.add("firstValueIsTotal");
    openapiFields.add("hideConnectorLines");
    openapiFields.add("series");
    openapiFields.add("stackedType");
    openapiFields.add("totalDataLabel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WaterfallChartSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WaterfallChartSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WaterfallChartSpec is not found in the empty JSON string", WaterfallChartSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WaterfallChartSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WaterfallChartSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `connectorLineStyle`
      if (jsonObj.get("connectorLineStyle") != null && !jsonObj.get("connectorLineStyle").isJsonNull()) {
        LineStyle.validateJsonElement(jsonObj.get("connectorLineStyle"));
      }
      // validate the optional field `domain`
      if (jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) {
        WaterfallChartDomain.validateJsonElement(jsonObj.get("domain"));
      }
      if (jsonObj.get("series") != null && !jsonObj.get("series").isJsonNull()) {
        JsonArray jsonArrayseries = jsonObj.getAsJsonArray("series");
        if (jsonArrayseries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("series").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `series` to be an array in the JSON string but got `%s`", jsonObj.get("series").toString()));
          }

          // validate the optional field `series` (array)
          for (int i = 0; i < jsonArrayseries.size(); i++) {
            WaterfallChartSeries.validateJsonElement(jsonArrayseries.get(i));
          };
        }
      }
      if ((jsonObj.get("stackedType") != null && !jsonObj.get("stackedType").isJsonNull()) && !jsonObj.get("stackedType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stackedType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stackedType").toString()));
      }
      // validate the optional field `stackedType`
      if (jsonObj.get("stackedType") != null && !jsonObj.get("stackedType").isJsonNull()) {
        StackedTypeEnum.validateJsonElement(jsonObj.get("stackedType"));
      }
      // validate the optional field `totalDataLabel`
      if (jsonObj.get("totalDataLabel") != null && !jsonObj.get("totalDataLabel").isJsonNull()) {
        DataLabel.validateJsonElement(jsonObj.get("totalDataLabel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WaterfallChartSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WaterfallChartSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WaterfallChartSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WaterfallChartSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<WaterfallChartSpec>() {
           @Override
           public void write(JsonWriter out, WaterfallChartSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WaterfallChartSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WaterfallChartSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WaterfallChartSpec
   * @throws IOException if the JSON string is invalid with respect to WaterfallChartSpec
   */
  public static WaterfallChartSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WaterfallChartSpec.class);
  }

  /**
   * Convert an instance of WaterfallChartSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

