/*
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Request;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request for updating any aspect of a spreadsheet.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:49.244050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchUpdateSpreadsheetRequest {
  public static final String SERIALIZED_NAME_INCLUDE_SPREADSHEET_IN_RESPONSE = "includeSpreadsheetInResponse";
  @SerializedName(SERIALIZED_NAME_INCLUDE_SPREADSHEET_IN_RESPONSE)
  private Boolean includeSpreadsheetInResponse;

  public static final String SERIALIZED_NAME_REQUESTS = "requests";
  @SerializedName(SERIALIZED_NAME_REQUESTS)
  private List<Request> requests = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESPONSE_INCLUDE_GRID_DATA = "responseIncludeGridData";
  @SerializedName(SERIALIZED_NAME_RESPONSE_INCLUDE_GRID_DATA)
  private Boolean responseIncludeGridData;

  public static final String SERIALIZED_NAME_RESPONSE_RANGES = "responseRanges";
  @SerializedName(SERIALIZED_NAME_RESPONSE_RANGES)
  private List<String> responseRanges = new ArrayList<>();

  public BatchUpdateSpreadsheetRequest() {
  }

  public BatchUpdateSpreadsheetRequest includeSpreadsheetInResponse(Boolean includeSpreadsheetInResponse) {
    this.includeSpreadsheetInResponse = includeSpreadsheetInResponse;
    return this;
  }

  /**
   * Determines if the update response should include the spreadsheet resource.
   * @return includeSpreadsheetInResponse
   */
  @javax.annotation.Nullable
  public Boolean getIncludeSpreadsheetInResponse() {
    return includeSpreadsheetInResponse;
  }

  public void setIncludeSpreadsheetInResponse(Boolean includeSpreadsheetInResponse) {
    this.includeSpreadsheetInResponse = includeSpreadsheetInResponse;
  }


  public BatchUpdateSpreadsheetRequest requests(List<Request> requests) {
    this.requests = requests;
    return this;
  }

  public BatchUpdateSpreadsheetRequest addRequestsItem(Request requestsItem) {
    if (this.requests == null) {
      this.requests = new ArrayList<>();
    }
    this.requests.add(requestsItem);
    return this;
  }

  /**
   * A list of updates to apply to the spreadsheet. Requests will be applied in the order they are specified. If any request is not valid, no requests will be applied.
   * @return requests
   */
  @javax.annotation.Nullable
  public List<Request> getRequests() {
    return requests;
  }

  public void setRequests(List<Request> requests) {
    this.requests = requests;
  }


  public BatchUpdateSpreadsheetRequest responseIncludeGridData(Boolean responseIncludeGridData) {
    this.responseIncludeGridData = responseIncludeGridData;
    return this;
  }

  /**
   * True if grid data should be returned. Meaningful only if include_spreadsheet_in_response is &#39;true&#39;. This parameter is ignored if a field mask was set in the request.
   * @return responseIncludeGridData
   */
  @javax.annotation.Nullable
  public Boolean getResponseIncludeGridData() {
    return responseIncludeGridData;
  }

  public void setResponseIncludeGridData(Boolean responseIncludeGridData) {
    this.responseIncludeGridData = responseIncludeGridData;
  }


  public BatchUpdateSpreadsheetRequest responseRanges(List<String> responseRanges) {
    this.responseRanges = responseRanges;
    return this;
  }

  public BatchUpdateSpreadsheetRequest addResponseRangesItem(String responseRangesItem) {
    if (this.responseRanges == null) {
      this.responseRanges = new ArrayList<>();
    }
    this.responseRanges.add(responseRangesItem);
    return this;
  }

  /**
   * Limits the ranges included in the response spreadsheet. Meaningful only if include_spreadsheet_in_response is &#39;true&#39;.
   * @return responseRanges
   */
  @javax.annotation.Nullable
  public List<String> getResponseRanges() {
    return responseRanges;
  }

  public void setResponseRanges(List<String> responseRanges) {
    this.responseRanges = responseRanges;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchUpdateSpreadsheetRequest batchUpdateSpreadsheetRequest = (BatchUpdateSpreadsheetRequest) o;
    return Objects.equals(this.includeSpreadsheetInResponse, batchUpdateSpreadsheetRequest.includeSpreadsheetInResponse) &&
        Objects.equals(this.requests, batchUpdateSpreadsheetRequest.requests) &&
        Objects.equals(this.responseIncludeGridData, batchUpdateSpreadsheetRequest.responseIncludeGridData) &&
        Objects.equals(this.responseRanges, batchUpdateSpreadsheetRequest.responseRanges);
  }

  @Override
  public int hashCode() {
    return Objects.hash(includeSpreadsheetInResponse, requests, responseIncludeGridData, responseRanges);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchUpdateSpreadsheetRequest {\n");
    sb.append("    includeSpreadsheetInResponse: ").append(toIndentedString(includeSpreadsheetInResponse)).append("\n");
    sb.append("    requests: ").append(toIndentedString(requests)).append("\n");
    sb.append("    responseIncludeGridData: ").append(toIndentedString(responseIncludeGridData)).append("\n");
    sb.append("    responseRanges: ").append(toIndentedString(responseRanges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("includeSpreadsheetInResponse");
    openapiFields.add("requests");
    openapiFields.add("responseIncludeGridData");
    openapiFields.add("responseRanges");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchUpdateSpreadsheetRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchUpdateSpreadsheetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchUpdateSpreadsheetRequest is not found in the empty JSON string", BatchUpdateSpreadsheetRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchUpdateSpreadsheetRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchUpdateSpreadsheetRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("requests") != null && !jsonObj.get("requests").isJsonNull()) {
        JsonArray jsonArrayrequests = jsonObj.getAsJsonArray("requests");
        if (jsonArrayrequests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("requests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `requests` to be an array in the JSON string but got `%s`", jsonObj.get("requests").toString()));
          }

          // validate the optional field `requests` (array)
          for (int i = 0; i < jsonArrayrequests.size(); i++) {
            Request.validateJsonElement(jsonArrayrequests.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("responseRanges") != null && !jsonObj.get("responseRanges").isJsonNull() && !jsonObj.get("responseRanges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseRanges` to be an array in the JSON string but got `%s`", jsonObj.get("responseRanges").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchUpdateSpreadsheetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchUpdateSpreadsheetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchUpdateSpreadsheetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchUpdateSpreadsheetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchUpdateSpreadsheetRequest>() {
           @Override
           public void write(JsonWriter out, BatchUpdateSpreadsheetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchUpdateSpreadsheetRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchUpdateSpreadsheetRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchUpdateSpreadsheetRequest
   * @throws IOException if the JSON string is invalid with respect to BatchUpdateSpreadsheetRequest
   */
  public static BatchUpdateSpreadsheetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchUpdateSpreadsheetRequest.class);
  }

  /**
   * Convert an instance of BatchUpdateSpreadsheetRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

