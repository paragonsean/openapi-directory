/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GoogleSheetsApi);
  }
}(this, function(expect, GoogleSheetsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GoogleSheetsApi.Response();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Response', function() {
    it('should create an instance of Response', function() {
      // uncomment below and update the code to test Response
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be.a(GoogleSheetsApi.Response);
    });

    it('should have the property addBanding (base name: "addBanding")', function() {
      // uncomment below and update the code to test the property addBanding
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property addChart (base name: "addChart")', function() {
      // uncomment below and update the code to test the property addChart
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property addDataSource (base name: "addDataSource")', function() {
      // uncomment below and update the code to test the property addDataSource
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property addDimensionGroup (base name: "addDimensionGroup")', function() {
      // uncomment below and update the code to test the property addDimensionGroup
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property addFilterView (base name: "addFilterView")', function() {
      // uncomment below and update the code to test the property addFilterView
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property addNamedRange (base name: "addNamedRange")', function() {
      // uncomment below and update the code to test the property addNamedRange
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property addProtectedRange (base name: "addProtectedRange")', function() {
      // uncomment below and update the code to test the property addProtectedRange
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property addSheet (base name: "addSheet")', function() {
      // uncomment below and update the code to test the property addSheet
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property addSlicer (base name: "addSlicer")', function() {
      // uncomment below and update the code to test the property addSlicer
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property createDeveloperMetadata (base name: "createDeveloperMetadata")', function() {
      // uncomment below and update the code to test the property createDeveloperMetadata
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property deleteConditionalFormatRule (base name: "deleteConditionalFormatRule")', function() {
      // uncomment below and update the code to test the property deleteConditionalFormatRule
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property deleteDeveloperMetadata (base name: "deleteDeveloperMetadata")', function() {
      // uncomment below and update the code to test the property deleteDeveloperMetadata
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property deleteDimensionGroup (base name: "deleteDimensionGroup")', function() {
      // uncomment below and update the code to test the property deleteDimensionGroup
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property deleteDuplicates (base name: "deleteDuplicates")', function() {
      // uncomment below and update the code to test the property deleteDuplicates
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property duplicateFilterView (base name: "duplicateFilterView")', function() {
      // uncomment below and update the code to test the property duplicateFilterView
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property duplicateSheet (base name: "duplicateSheet")', function() {
      // uncomment below and update the code to test the property duplicateSheet
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property findReplace (base name: "findReplace")', function() {
      // uncomment below and update the code to test the property findReplace
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property refreshDataSource (base name: "refreshDataSource")', function() {
      // uncomment below and update the code to test the property refreshDataSource
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property trimWhitespace (base name: "trimWhitespace")', function() {
      // uncomment below and update the code to test the property trimWhitespace
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property updateConditionalFormatRule (base name: "updateConditionalFormatRule")', function() {
      // uncomment below and update the code to test the property updateConditionalFormatRule
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property updateDataSource (base name: "updateDataSource")', function() {
      // uncomment below and update the code to test the property updateDataSource
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property updateDeveloperMetadata (base name: "updateDeveloperMetadata")', function() {
      // uncomment below and update the code to test the property updateDeveloperMetadata
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

    it('should have the property updateEmbeddedObjectPosition (base name: "updateEmbeddedObjectPosition")', function() {
      // uncomment below and update the code to test the property updateEmbeddedObjectPosition
      //var instance = new GoogleSheetsApi.Response();
      //expect(instance).to.be();
    });

  });

}));
