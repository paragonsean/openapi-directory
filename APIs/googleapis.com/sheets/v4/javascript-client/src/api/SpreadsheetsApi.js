/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppendValuesResponse from '../model/AppendValuesResponse';
import BatchClearValuesByDataFilterRequest from '../model/BatchClearValuesByDataFilterRequest';
import BatchClearValuesByDataFilterResponse from '../model/BatchClearValuesByDataFilterResponse';
import BatchClearValuesRequest from '../model/BatchClearValuesRequest';
import BatchClearValuesResponse from '../model/BatchClearValuesResponse';
import BatchGetValuesByDataFilterRequest from '../model/BatchGetValuesByDataFilterRequest';
import BatchGetValuesByDataFilterResponse from '../model/BatchGetValuesByDataFilterResponse';
import BatchGetValuesResponse from '../model/BatchGetValuesResponse';
import BatchUpdateSpreadsheetRequest from '../model/BatchUpdateSpreadsheetRequest';
import BatchUpdateSpreadsheetResponse from '../model/BatchUpdateSpreadsheetResponse';
import BatchUpdateValuesByDataFilterRequest from '../model/BatchUpdateValuesByDataFilterRequest';
import BatchUpdateValuesByDataFilterResponse from '../model/BatchUpdateValuesByDataFilterResponse';
import BatchUpdateValuesRequest from '../model/BatchUpdateValuesRequest';
import BatchUpdateValuesResponse from '../model/BatchUpdateValuesResponse';
import ClearValuesResponse from '../model/ClearValuesResponse';
import CopySheetToAnotherSpreadsheetRequest from '../model/CopySheetToAnotherSpreadsheetRequest';
import DeveloperMetadata from '../model/DeveloperMetadata';
import GetSpreadsheetByDataFilterRequest from '../model/GetSpreadsheetByDataFilterRequest';
import SearchDeveloperMetadataRequest from '../model/SearchDeveloperMetadataRequest';
import SearchDeveloperMetadataResponse from '../model/SearchDeveloperMetadataResponse';
import SheetProperties from '../model/SheetProperties';
import Spreadsheet from '../model/Spreadsheet';
import UpdateValuesResponse from '../model/UpdateValuesResponse';
import ValueRange from '../model/ValueRange';

/**
* Spreadsheets service.
* @module api/SpreadsheetsApi
* @version v4
*/
export default class SpreadsheetsApi {

    /**
    * Constructs a new SpreadsheetsApi. 
    * @alias module:api/SpreadsheetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the sheetsSpreadsheetsBatchUpdate operation.
     * @callback module:api/SpreadsheetsApi~sheetsSpreadsheetsBatchUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchUpdateSpreadsheetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Applies one or more updates to the spreadsheet. Each request is validated before being applied. If any request is not valid then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. The replies will mirror the requests. For example, if you applied 4 updates and the 3rd one had a reply, then the response will have 2 empty replies, the actual reply, and another empty reply, in that order. Due to the collaborative nature of spreadsheets, it is not guaranteed that the spreadsheet will reflect exactly your changes after this completes, however it is guaranteed that the updates in the request will be applied together atomically. Your changes may be altered with respect to collaborator changes. If there are no collaborators, the spreadsheet should reflect your changes.
     * @param {String} spreadsheetId The spreadsheet to apply the updates to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/BatchUpdateSpreadsheetRequest} [batchUpdateSpreadsheetRequest] 
     * @param {module:api/SpreadsheetsApi~sheetsSpreadsheetsBatchUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchUpdateSpreadsheetResponse}
     */
    sheetsSpreadsheetsBatchUpdate(spreadsheetId, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchUpdateSpreadsheetRequest'];
      // verify the required parameter 'spreadsheetId' is set
      if (spreadsheetId === undefined || spreadsheetId === null) {
        throw new Error("Missing the required parameter 'spreadsheetId' when calling sheetsSpreadsheetsBatchUpdate");
      }

      let pathParams = {
        'spreadsheetId': spreadsheetId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchUpdateSpreadsheetResponse;
      return this.apiClient.callApi(
        '/v4/spreadsheets/{spreadsheetId}:batchUpdate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sheetsSpreadsheetsCreate operation.
     * @callback module:api/SpreadsheetsApi~sheetsSpreadsheetsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spreadsheet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a spreadsheet, returning the newly created spreadsheet.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/Spreadsheet} [spreadsheet] 
     * @param {module:api/SpreadsheetsApi~sheetsSpreadsheetsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spreadsheet}
     */
    sheetsSpreadsheetsCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['spreadsheet'];

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Spreadsheet;
      return this.apiClient.callApi(
        '/v4/spreadsheets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sheetsSpreadsheetsDeveloperMetadataGet operation.
     * @callback module:api/SpreadsheetsApi~sheetsSpreadsheetsDeveloperMetadataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeveloperMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the developer metadata with the specified ID. The caller must specify the spreadsheet ID and the developer metadata's unique metadataId.
     * @param {String} spreadsheetId The ID of the spreadsheet to retrieve metadata from.
     * @param {Number} metadataId The ID of the developer metadata to retrieve.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/SpreadsheetsApi~sheetsSpreadsheetsDeveloperMetadataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeveloperMetadata}
     */
    sheetsSpreadsheetsDeveloperMetadataGet(spreadsheetId, metadataId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spreadsheetId' is set
      if (spreadsheetId === undefined || spreadsheetId === null) {
        throw new Error("Missing the required parameter 'spreadsheetId' when calling sheetsSpreadsheetsDeveloperMetadataGet");
      }
      // verify the required parameter 'metadataId' is set
      if (metadataId === undefined || metadataId === null) {
        throw new Error("Missing the required parameter 'metadataId' when calling sheetsSpreadsheetsDeveloperMetadataGet");
      }

      let pathParams = {
        'spreadsheetId': spreadsheetId,
        'metadataId': metadataId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeveloperMetadata;
      return this.apiClient.callApi(
        '/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sheetsSpreadsheetsDeveloperMetadataSearch operation.
     * @callback module:api/SpreadsheetsApi~sheetsSpreadsheetsDeveloperMetadataSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchDeveloperMetadataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all developer metadata matching the specified DataFilter. If the provided DataFilter represents a DeveloperMetadataLookup object, this will return all DeveloperMetadata entries selected by it. If the DataFilter represents a location in a spreadsheet, this will return all developer metadata associated with locations intersecting that region.
     * @param {String} spreadsheetId The ID of the spreadsheet to retrieve metadata from.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/SearchDeveloperMetadataRequest} [searchDeveloperMetadataRequest] 
     * @param {module:api/SpreadsheetsApi~sheetsSpreadsheetsDeveloperMetadataSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchDeveloperMetadataResponse}
     */
    sheetsSpreadsheetsDeveloperMetadataSearch(spreadsheetId, opts, callback) {
      opts = opts || {};
      let postBody = opts['searchDeveloperMetadataRequest'];
      // verify the required parameter 'spreadsheetId' is set
      if (spreadsheetId === undefined || spreadsheetId === null) {
        throw new Error("Missing the required parameter 'spreadsheetId' when calling sheetsSpreadsheetsDeveloperMetadataSearch");
      }

      let pathParams = {
        'spreadsheetId': spreadsheetId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchDeveloperMetadataResponse;
      return this.apiClient.callApi(
        '/v4/spreadsheets/{spreadsheetId}/developerMetadata:search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sheetsSpreadsheetsGet operation.
     * @callback module:api/SpreadsheetsApi~sheetsSpreadsheetsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spreadsheet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. By default, data within grids is not returned. You can include grid data in one of 2 ways: * Specify a [field mask](https://developers.google.com/sheets/api/guides/field-masks) listing your desired fields using the `fields` URL parameter in HTTP * Set the includeGridData URL parameter to true. If a field mask is set, the `includeGridData` parameter is ignored For large spreadsheets, as a best practice, retrieve only the specific spreadsheet fields that you want. To retrieve only subsets of spreadsheet data, use the ranges URL parameter. Ranges are specified using [A1 notation](/sheets/api/guides/concepts#cell). You can define a single cell (for example, `A1`) or multiple cells (for example, `A1:D5`). You can also get cells from other sheets within the same spreadsheet (for example, `Sheet2!A1:C4`) or retrieve multiple ranges at once (for example, `?ranges=A1:D5&ranges=Sheet2!A1:C4`). Limiting the range returns only the portions of the spreadsheet that intersect the requested ranges.
     * @param {String} spreadsheetId The spreadsheet to request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [includeGridData] True if grid data should be returned. This parameter is ignored if a field mask was set in the request.
     * @param {Array.<String>} [ranges] The ranges to retrieve from the spreadsheet.
     * @param {module:api/SpreadsheetsApi~sheetsSpreadsheetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spreadsheet}
     */
    sheetsSpreadsheetsGet(spreadsheetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spreadsheetId' is set
      if (spreadsheetId === undefined || spreadsheetId === null) {
        throw new Error("Missing the required parameter 'spreadsheetId' when calling sheetsSpreadsheetsGet");
      }

      let pathParams = {
        'spreadsheetId': spreadsheetId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'includeGridData': opts['includeGridData'],
        'ranges': this.apiClient.buildCollectionParam(opts['ranges'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Spreadsheet;
      return this.apiClient.callApi(
        '/v4/spreadsheets/{spreadsheetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sheetsSpreadsheetsGetByDataFilter operation.
     * @callback module:api/SpreadsheetsApi~sheetsSpreadsheetsGetByDataFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spreadsheet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. This method differs from GetSpreadsheet in that it allows selecting which subsets of spreadsheet data to return by specifying a dataFilters parameter. Multiple DataFilters can be specified. Specifying one or more data filters returns the portions of the spreadsheet that intersect ranges matched by any of the filters. By default, data within grids is not returned. You can include grid data one of 2 ways: * Specify a [field mask](https://developers.google.com/sheets/api/guides/field-masks) listing your desired fields using the `fields` URL parameter in HTTP * Set the includeGridData parameter to true. If a field mask is set, the `includeGridData` parameter is ignored For large spreadsheets, as a best practice, retrieve only the specific spreadsheet fields that you want.
     * @param {String} spreadsheetId The spreadsheet to request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GetSpreadsheetByDataFilterRequest} [getSpreadsheetByDataFilterRequest] 
     * @param {module:api/SpreadsheetsApi~sheetsSpreadsheetsGetByDataFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spreadsheet}
     */
    sheetsSpreadsheetsGetByDataFilter(spreadsheetId, opts, callback) {
      opts = opts || {};
      let postBody = opts['getSpreadsheetByDataFilterRequest'];
      // verify the required parameter 'spreadsheetId' is set
      if (spreadsheetId === undefined || spreadsheetId === null) {
        throw new Error("Missing the required parameter 'spreadsheetId' when calling sheetsSpreadsheetsGetByDataFilter");
      }

      let pathParams = {
        'spreadsheetId': spreadsheetId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Spreadsheet;
      return this.apiClient.callApi(
        '/v4/spreadsheets/{spreadsheetId}:getByDataFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sheetsSpreadsheetsSheetsCopyTo operation.
     * @callback module:api/SpreadsheetsApi~sheetsSpreadsheetsSheetsCopyToCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SheetProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copies a single sheet from a spreadsheet to another spreadsheet. Returns the properties of the newly created sheet.
     * @param {String} spreadsheetId The ID of the spreadsheet containing the sheet to copy.
     * @param {Number} sheetId The ID of the sheet to copy.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/CopySheetToAnotherSpreadsheetRequest} [copySheetToAnotherSpreadsheetRequest] 
     * @param {module:api/SpreadsheetsApi~sheetsSpreadsheetsSheetsCopyToCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SheetProperties}
     */
    sheetsSpreadsheetsSheetsCopyTo(spreadsheetId, sheetId, opts, callback) {
      opts = opts || {};
      let postBody = opts['copySheetToAnotherSpreadsheetRequest'];
      // verify the required parameter 'spreadsheetId' is set
      if (spreadsheetId === undefined || spreadsheetId === null) {
        throw new Error("Missing the required parameter 'spreadsheetId' when calling sheetsSpreadsheetsSheetsCopyTo");
      }
      // verify the required parameter 'sheetId' is set
      if (sheetId === undefined || sheetId === null) {
        throw new Error("Missing the required parameter 'sheetId' when calling sheetsSpreadsheetsSheetsCopyTo");
      }

      let pathParams = {
        'spreadsheetId': spreadsheetId,
        'sheetId': sheetId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SheetProperties;
      return this.apiClient.callApi(
        '/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sheetsSpreadsheetsValuesAppend operation.
     * @callback module:api/SpreadsheetsApi~sheetsSpreadsheetsValuesAppendCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendValuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Appends values to a spreadsheet. The input range is used to search for existing data and find a \"table\" within that range. Values will be appended to the next row of the table, starting with the first column of the table. See the [guide](/sheets/api/guides/values#appending_values) and [sample code](/sheets/api/samples/writing#append_values) for specific details of how tables are detected and data is appended. The caller must specify the spreadsheet ID, range, and a valueInputOption. The `valueInputOption` only controls how the input data will be added to the sheet (column-wise or row-wise), it does not influence what cell the data starts being written to.
     * @param {String} spreadsheetId The ID of the spreadsheet to update.
     * @param {String} range The [A1 notation](/sheets/api/guides/concepts#cell) of a range to search for a logical table of data. Values are appended after the last row of the table.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [includeValuesInResponse] Determines if the update response should include the values of the cells that were appended. By default, responses do not include the updated values.
     * @param {module:model/String} [insertDataOption] How the input data should be inserted.
     * @param {module:model/String} [responseDateTimeRenderOption] Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
     * @param {module:model/String} [responseValueRenderOption] Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.
     * @param {module:model/String} [valueInputOption] How the input data should be interpreted.
     * @param {module:model/ValueRange} [valueRange] 
     * @param {module:api/SpreadsheetsApi~sheetsSpreadsheetsValuesAppendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendValuesResponse}
     */
    sheetsSpreadsheetsValuesAppend(spreadsheetId, range, opts, callback) {
      opts = opts || {};
      let postBody = opts['valueRange'];
      // verify the required parameter 'spreadsheetId' is set
      if (spreadsheetId === undefined || spreadsheetId === null) {
        throw new Error("Missing the required parameter 'spreadsheetId' when calling sheetsSpreadsheetsValuesAppend");
      }
      // verify the required parameter 'range' is set
      if (range === undefined || range === null) {
        throw new Error("Missing the required parameter 'range' when calling sheetsSpreadsheetsValuesAppend");
      }

      let pathParams = {
        'spreadsheetId': spreadsheetId,
        'range': range
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'includeValuesInResponse': opts['includeValuesInResponse'],
        'insertDataOption': opts['insertDataOption'],
        'responseDateTimeRenderOption': opts['responseDateTimeRenderOption'],
        'responseValueRenderOption': opts['responseValueRenderOption'],
        'valueInputOption': opts['valueInputOption']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppendValuesResponse;
      return this.apiClient.callApi(
        '/v4/spreadsheets/{spreadsheetId}/values/{range}:append', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sheetsSpreadsheetsValuesBatchClear operation.
     * @callback module:api/SpreadsheetsApi~sheetsSpreadsheetsValuesBatchClearCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchClearValuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges. Only values are cleared -- all other properties of the cell (such as formatting and data validation) are kept.
     * @param {String} spreadsheetId The ID of the spreadsheet to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/BatchClearValuesRequest} [batchClearValuesRequest] 
     * @param {module:api/SpreadsheetsApi~sheetsSpreadsheetsValuesBatchClearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchClearValuesResponse}
     */
    sheetsSpreadsheetsValuesBatchClear(spreadsheetId, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchClearValuesRequest'];
      // verify the required parameter 'spreadsheetId' is set
      if (spreadsheetId === undefined || spreadsheetId === null) {
        throw new Error("Missing the required parameter 'spreadsheetId' when calling sheetsSpreadsheetsValuesBatchClear");
      }

      let pathParams = {
        'spreadsheetId': spreadsheetId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchClearValuesResponse;
      return this.apiClient.callApi(
        '/v4/spreadsheets/{spreadsheetId}/values:batchClear', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sheetsSpreadsheetsValuesBatchClearByDataFilter operation.
     * @callback module:api/SpreadsheetsApi~sheetsSpreadsheetsValuesBatchClearByDataFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchClearValuesByDataFilterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges matching any of the specified data filters will be cleared. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
     * @param {String} spreadsheetId The ID of the spreadsheet to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/BatchClearValuesByDataFilterRequest} [batchClearValuesByDataFilterRequest] 
     * @param {module:api/SpreadsheetsApi~sheetsSpreadsheetsValuesBatchClearByDataFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchClearValuesByDataFilterResponse}
     */
    sheetsSpreadsheetsValuesBatchClearByDataFilter(spreadsheetId, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchClearValuesByDataFilterRequest'];
      // verify the required parameter 'spreadsheetId' is set
      if (spreadsheetId === undefined || spreadsheetId === null) {
        throw new Error("Missing the required parameter 'spreadsheetId' when calling sheetsSpreadsheetsValuesBatchClearByDataFilter");
      }

      let pathParams = {
        'spreadsheetId': spreadsheetId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchClearValuesByDataFilterResponse;
      return this.apiClient.callApi(
        '/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sheetsSpreadsheetsValuesBatchGet operation.
     * @callback module:api/SpreadsheetsApi~sheetsSpreadsheetsValuesBatchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetValuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges.
     * @param {String} spreadsheetId The ID of the spreadsheet to retrieve data from.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/String} [dateTimeRenderOption] How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
     * @param {module:model/String} [majorDimension] The major dimension that results should use. For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `ranges=[\"A1:B2\"],majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas requesting `ranges=[\"A1:B2\"],majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.
     * @param {Array.<String>} [ranges] The [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell) of the range to retrieve values from.
     * @param {module:model/String} [valueRenderOption] How values should be represented in the output. The default render option is ValueRenderOption.FORMATTED_VALUE.
     * @param {module:api/SpreadsheetsApi~sheetsSpreadsheetsValuesBatchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetValuesResponse}
     */
    sheetsSpreadsheetsValuesBatchGet(spreadsheetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spreadsheetId' is set
      if (spreadsheetId === undefined || spreadsheetId === null) {
        throw new Error("Missing the required parameter 'spreadsheetId' when calling sheetsSpreadsheetsValuesBatchGet");
      }

      let pathParams = {
        'spreadsheetId': spreadsheetId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'dateTimeRenderOption': opts['dateTimeRenderOption'],
        'majorDimension': opts['majorDimension'],
        'ranges': this.apiClient.buildCollectionParam(opts['ranges'], 'multi'),
        'valueRenderOption': opts['valueRenderOption']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BatchGetValuesResponse;
      return this.apiClient.callApi(
        '/v4/spreadsheets/{spreadsheetId}/values:batchGet', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sheetsSpreadsheetsValuesBatchGetByDataFilter operation.
     * @callback module:api/SpreadsheetsApi~sheetsSpreadsheetsValuesBatchGetByDataFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetValuesByDataFilterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns one or more ranges of values that match the specified data filters. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges that match any of the data filters in the request will be returned.
     * @param {String} spreadsheetId The ID of the spreadsheet to retrieve data from.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/BatchGetValuesByDataFilterRequest} [batchGetValuesByDataFilterRequest] 
     * @param {module:api/SpreadsheetsApi~sheetsSpreadsheetsValuesBatchGetByDataFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetValuesByDataFilterResponse}
     */
    sheetsSpreadsheetsValuesBatchGetByDataFilter(spreadsheetId, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchGetValuesByDataFilterRequest'];
      // verify the required parameter 'spreadsheetId' is set
      if (spreadsheetId === undefined || spreadsheetId === null) {
        throw new Error("Missing the required parameter 'spreadsheetId' when calling sheetsSpreadsheetsValuesBatchGetByDataFilter");
      }

      let pathParams = {
        'spreadsheetId': spreadsheetId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetValuesByDataFilterResponse;
      return this.apiClient.callApi(
        '/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sheetsSpreadsheetsValuesBatchUpdate operation.
     * @callback module:api/SpreadsheetsApi~sheetsSpreadsheetsValuesBatchUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchUpdateValuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more ValueRanges.
     * @param {String} spreadsheetId The ID of the spreadsheet to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/BatchUpdateValuesRequest} [batchUpdateValuesRequest] 
     * @param {module:api/SpreadsheetsApi~sheetsSpreadsheetsValuesBatchUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchUpdateValuesResponse}
     */
    sheetsSpreadsheetsValuesBatchUpdate(spreadsheetId, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchUpdateValuesRequest'];
      // verify the required parameter 'spreadsheetId' is set
      if (spreadsheetId === undefined || spreadsheetId === null) {
        throw new Error("Missing the required parameter 'spreadsheetId' when calling sheetsSpreadsheetsValuesBatchUpdate");
      }

      let pathParams = {
        'spreadsheetId': spreadsheetId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchUpdateValuesResponse;
      return this.apiClient.callApi(
        '/v4/spreadsheets/{spreadsheetId}/values:batchUpdate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sheetsSpreadsheetsValuesBatchUpdateByDataFilter operation.
     * @callback module:api/SpreadsheetsApi~sheetsSpreadsheetsValuesBatchUpdateByDataFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchUpdateValuesByDataFilterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more DataFilterValueRanges.
     * @param {String} spreadsheetId The ID of the spreadsheet to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/BatchUpdateValuesByDataFilterRequest} [batchUpdateValuesByDataFilterRequest] 
     * @param {module:api/SpreadsheetsApi~sheetsSpreadsheetsValuesBatchUpdateByDataFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchUpdateValuesByDataFilterResponse}
     */
    sheetsSpreadsheetsValuesBatchUpdateByDataFilter(spreadsheetId, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchUpdateValuesByDataFilterRequest'];
      // verify the required parameter 'spreadsheetId' is set
      if (spreadsheetId === undefined || spreadsheetId === null) {
        throw new Error("Missing the required parameter 'spreadsheetId' when calling sheetsSpreadsheetsValuesBatchUpdateByDataFilter");
      }

      let pathParams = {
        'spreadsheetId': spreadsheetId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchUpdateValuesByDataFilterResponse;
      return this.apiClient.callApi(
        '/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sheetsSpreadsheetsValuesClear operation.
     * @callback module:api/SpreadsheetsApi~sheetsSpreadsheetsValuesClearCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClearValuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears values from a spreadsheet. The caller must specify the spreadsheet ID and range. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
     * @param {String} spreadsheetId The ID of the spreadsheet to update.
     * @param {String} range The [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell) of the values to clear.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/SpreadsheetsApi~sheetsSpreadsheetsValuesClearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClearValuesResponse}
     */
    sheetsSpreadsheetsValuesClear(spreadsheetId, range, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'spreadsheetId' is set
      if (spreadsheetId === undefined || spreadsheetId === null) {
        throw new Error("Missing the required parameter 'spreadsheetId' when calling sheetsSpreadsheetsValuesClear");
      }
      // verify the required parameter 'range' is set
      if (range === undefined || range === null) {
        throw new Error("Missing the required parameter 'range' when calling sheetsSpreadsheetsValuesClear");
      }

      let pathParams = {
        'spreadsheetId': spreadsheetId,
        'range': range
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClearValuesResponse;
      return this.apiClient.callApi(
        '/v4/spreadsheets/{spreadsheetId}/values/{range}:clear', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sheetsSpreadsheetsValuesGet operation.
     * @callback module:api/SpreadsheetsApi~sheetsSpreadsheetsValuesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValueRange} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a range of values from a spreadsheet. The caller must specify the spreadsheet ID and a range.
     * @param {String} spreadsheetId The ID of the spreadsheet to retrieve data from.
     * @param {String} range The [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell) of the range to retrieve values from.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/String} [dateTimeRenderOption] How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
     * @param {module:model/String} [majorDimension] The major dimension that results should use. For example, if the spreadsheet data in Sheet1 is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=Sheet1!A1:B2?majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas requesting `range=Sheet1!A1:B2?majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.
     * @param {module:model/String} [valueRenderOption] How values should be represented in the output. The default render option is FORMATTED_VALUE.
     * @param {module:api/SpreadsheetsApi~sheetsSpreadsheetsValuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValueRange}
     */
    sheetsSpreadsheetsValuesGet(spreadsheetId, range, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spreadsheetId' is set
      if (spreadsheetId === undefined || spreadsheetId === null) {
        throw new Error("Missing the required parameter 'spreadsheetId' when calling sheetsSpreadsheetsValuesGet");
      }
      // verify the required parameter 'range' is set
      if (range === undefined || range === null) {
        throw new Error("Missing the required parameter 'range' when calling sheetsSpreadsheetsValuesGet");
      }

      let pathParams = {
        'spreadsheetId': spreadsheetId,
        'range': range
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'dateTimeRenderOption': opts['dateTimeRenderOption'],
        'majorDimension': opts['majorDimension'],
        'valueRenderOption': opts['valueRenderOption']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ValueRange;
      return this.apiClient.callApi(
        '/v4/spreadsheets/{spreadsheetId}/values/{range}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sheetsSpreadsheetsValuesUpdate operation.
     * @callback module:api/SpreadsheetsApi~sheetsSpreadsheetsValuesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateValuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets values in a range of a spreadsheet. The caller must specify the spreadsheet ID, range, and a valueInputOption.
     * @param {String} spreadsheetId The ID of the spreadsheet to update.
     * @param {String} range The [A1 notation](/sheets/api/guides/concepts#cell) of the values to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [includeValuesInResponse] Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns).
     * @param {module:model/String} [responseDateTimeRenderOption] Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
     * @param {module:model/String} [responseValueRenderOption] Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.
     * @param {module:model/String} [valueInputOption] How the input data should be interpreted.
     * @param {module:model/ValueRange} [valueRange] 
     * @param {module:api/SpreadsheetsApi~sheetsSpreadsheetsValuesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateValuesResponse}
     */
    sheetsSpreadsheetsValuesUpdate(spreadsheetId, range, opts, callback) {
      opts = opts || {};
      let postBody = opts['valueRange'];
      // verify the required parameter 'spreadsheetId' is set
      if (spreadsheetId === undefined || spreadsheetId === null) {
        throw new Error("Missing the required parameter 'spreadsheetId' when calling sheetsSpreadsheetsValuesUpdate");
      }
      // verify the required parameter 'range' is set
      if (range === undefined || range === null) {
        throw new Error("Missing the required parameter 'range' when calling sheetsSpreadsheetsValuesUpdate");
      }

      let pathParams = {
        'spreadsheetId': spreadsheetId,
        'range': range
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'includeValuesInResponse': opts['includeValuesInResponse'],
        'responseDateTimeRenderOption': opts['responseDateTimeRenderOption'],
        'responseValueRenderOption': opts['responseValueRenderOption'],
        'valueInputOption': opts['valueInputOption']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateValuesResponse;
      return this.apiClient.callApi(
        '/v4/spreadsheets/{spreadsheetId}/values/{range}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
