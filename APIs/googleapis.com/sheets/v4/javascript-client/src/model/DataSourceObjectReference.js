/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GridCoordinate from './GridCoordinate';

/**
 * The DataSourceObjectReference model module.
 * @module model/DataSourceObjectReference
 * @version v4
 */
class DataSourceObjectReference {
    /**
     * Constructs a new <code>DataSourceObjectReference</code>.
     * Reference to a data source object.
     * @alias module:model/DataSourceObjectReference
     */
    constructor() { 
        
        DataSourceObjectReference.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataSourceObjectReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSourceObjectReference} obj Optional instance to populate.
     * @return {module:model/DataSourceObjectReference} The populated <code>DataSourceObjectReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSourceObjectReference();

            if (data.hasOwnProperty('chartId')) {
                obj['chartId'] = ApiClient.convertToType(data['chartId'], 'Number');
            }
            if (data.hasOwnProperty('dataSourceFormulaCell')) {
                obj['dataSourceFormulaCell'] = GridCoordinate.constructFromObject(data['dataSourceFormulaCell']);
            }
            if (data.hasOwnProperty('dataSourcePivotTableAnchorCell')) {
                obj['dataSourcePivotTableAnchorCell'] = GridCoordinate.constructFromObject(data['dataSourcePivotTableAnchorCell']);
            }
            if (data.hasOwnProperty('dataSourceTableAnchorCell')) {
                obj['dataSourceTableAnchorCell'] = GridCoordinate.constructFromObject(data['dataSourceTableAnchorCell']);
            }
            if (data.hasOwnProperty('sheetId')) {
                obj['sheetId'] = ApiClient.convertToType(data['sheetId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSourceObjectReference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSourceObjectReference</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dataSourceFormulaCell`
        if (data['dataSourceFormulaCell']) { // data not null
          GridCoordinate.validateJSON(data['dataSourceFormulaCell']);
        }
        // validate the optional field `dataSourcePivotTableAnchorCell`
        if (data['dataSourcePivotTableAnchorCell']) { // data not null
          GridCoordinate.validateJSON(data['dataSourcePivotTableAnchorCell']);
        }
        // validate the optional field `dataSourceTableAnchorCell`
        if (data['dataSourceTableAnchorCell']) { // data not null
          GridCoordinate.validateJSON(data['dataSourceTableAnchorCell']);
        }
        // ensure the json data is a string
        if (data['sheetId'] && !(typeof data['sheetId'] === 'string' || data['sheetId'] instanceof String)) {
            throw new Error("Expected the field `sheetId` to be a primitive type in the JSON string but got " + data['sheetId']);
        }

        return true;
    }


}



/**
 * References to a data source chart.
 * @member {Number} chartId
 */
DataSourceObjectReference.prototype['chartId'] = undefined;

/**
 * @member {module:model/GridCoordinate} dataSourceFormulaCell
 */
DataSourceObjectReference.prototype['dataSourceFormulaCell'] = undefined;

/**
 * @member {module:model/GridCoordinate} dataSourcePivotTableAnchorCell
 */
DataSourceObjectReference.prototype['dataSourcePivotTableAnchorCell'] = undefined;

/**
 * @member {module:model/GridCoordinate} dataSourceTableAnchorCell
 */
DataSourceObjectReference.prototype['dataSourceTableAnchorCell'] = undefined;

/**
 * References to a DATA_SOURCE sheet.
 * @member {String} sheetId
 */
DataSourceObjectReference.prototype['sheetId'] = undefined;






export default DataSourceObjectReference;

