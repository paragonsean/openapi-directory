/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChartAxisViewWindowOptions from './ChartAxisViewWindowOptions';
import TextFormat from './TextFormat';
import TextPosition from './TextPosition';

/**
 * The BasicChartAxis model module.
 * @module model/BasicChartAxis
 * @version v4
 */
class BasicChartAxis {
    /**
     * Constructs a new <code>BasicChartAxis</code>.
     * An axis of the chart. A chart may not have more than one axis per axis position.
     * @alias module:model/BasicChartAxis
     */
    constructor() { 
        
        BasicChartAxis.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BasicChartAxis</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BasicChartAxis} obj Optional instance to populate.
     * @return {module:model/BasicChartAxis} The populated <code>BasicChartAxis</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BasicChartAxis();

            if (data.hasOwnProperty('format')) {
                obj['format'] = TextFormat.constructFromObject(data['format']);
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('titleTextPosition')) {
                obj['titleTextPosition'] = TextPosition.constructFromObject(data['titleTextPosition']);
            }
            if (data.hasOwnProperty('viewWindowOptions')) {
                obj['viewWindowOptions'] = ChartAxisViewWindowOptions.constructFromObject(data['viewWindowOptions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BasicChartAxis</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BasicChartAxis</code>.
     */
    static validateJSON(data) {
        // validate the optional field `format`
        if (data['format']) { // data not null
          TextFormat.validateJSON(data['format']);
        }
        // ensure the json data is a string
        if (data['position'] && !(typeof data['position'] === 'string' || data['position'] instanceof String)) {
            throw new Error("Expected the field `position` to be a primitive type in the JSON string but got " + data['position']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // validate the optional field `titleTextPosition`
        if (data['titleTextPosition']) { // data not null
          TextPosition.validateJSON(data['titleTextPosition']);
        }
        // validate the optional field `viewWindowOptions`
        if (data['viewWindowOptions']) { // data not null
          ChartAxisViewWindowOptions.validateJSON(data['viewWindowOptions']);
        }

        return true;
    }


}



/**
 * @member {module:model/TextFormat} format
 */
BasicChartAxis.prototype['format'] = undefined;

/**
 * The position of this axis.
 * @member {module:model/BasicChartAxis.PositionEnum} position
 */
BasicChartAxis.prototype['position'] = undefined;

/**
 * The title of this axis. If set, this overrides any title inferred from headers of the data.
 * @member {String} title
 */
BasicChartAxis.prototype['title'] = undefined;

/**
 * @member {module:model/TextPosition} titleTextPosition
 */
BasicChartAxis.prototype['titleTextPosition'] = undefined;

/**
 * @member {module:model/ChartAxisViewWindowOptions} viewWindowOptions
 */
BasicChartAxis.prototype['viewWindowOptions'] = undefined;





/**
 * Allowed values for the <code>position</code> property.
 * @enum {String}
 * @readonly
 */
BasicChartAxis['PositionEnum'] = {

    /**
     * value: "BASIC_CHART_AXIS_POSITION_UNSPECIFIED"
     * @const
     */
    "BASIC_CHART_AXIS_POSITION_UNSPECIFIED": "BASIC_CHART_AXIS_POSITION_UNSPECIFIED",

    /**
     * value: "BOTTOM_AXIS"
     * @const
     */
    "BOTTOM_AXIS": "BOTTOM_AXIS",

    /**
     * value: "LEFT_AXIS"
     * @const
     */
    "LEFT_AXIS": "LEFT_AXIS",

    /**
     * value: "RIGHT_AXIS"
     * @const
     */
    "RIGHT_AXIS": "RIGHT_AXIS"
};



export default BasicChartAxis;

