/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ErrorValue model module.
 * @module model/ErrorValue
 * @version v4
 */
class ErrorValue {
    /**
     * Constructs a new <code>ErrorValue</code>.
     * An error in a cell.
     * @alias module:model/ErrorValue
     */
    constructor() { 
        
        ErrorValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ErrorValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErrorValue} obj Optional instance to populate.
     * @return {module:model/ErrorValue} The populated <code>ErrorValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErrorValue();

            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ErrorValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ErrorValue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * A message with more information about the error (in the spreadsheet's locale).
 * @member {String} message
 */
ErrorValue.prototype['message'] = undefined;

/**
 * The type of error.
 * @member {module:model/ErrorValue.TypeEnum} type
 */
ErrorValue.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ErrorValue['TypeEnum'] = {

    /**
     * value: "ERROR_TYPE_UNSPECIFIED"
     * @const
     */
    "ERROR_TYPE_UNSPECIFIED": "ERROR_TYPE_UNSPECIFIED",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "NULL_VALUE"
     * @const
     */
    "NULL_VALUE": "NULL_VALUE",

    /**
     * value: "DIVIDE_BY_ZERO"
     * @const
     */
    "DIVIDE_BY_ZERO": "DIVIDE_BY_ZERO",

    /**
     * value: "VALUE"
     * @const
     */
    "VALUE": "VALUE",

    /**
     * value: "REF"
     * @const
     */
    "REF": "REF",

    /**
     * value: "NAME"
     * @const
     */
    "NAME": "NAME",

    /**
     * value: "NUM"
     * @const
     */
    "NUM": "NUM",

    /**
     * value: "N_A"
     * @const
     */
    "N_A": "N_A",

    /**
     * value: "LOADING"
     * @const
     */
    "LOADING": "LOADING"
};



export default ErrorValue;

