/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ValueRange from './ValueRange';

/**
 * The UpdateValuesResponse model module.
 * @module model/UpdateValuesResponse
 * @version v4
 */
class UpdateValuesResponse {
    /**
     * Constructs a new <code>UpdateValuesResponse</code>.
     * The response when updating a range of values in a spreadsheet.
     * @alias module:model/UpdateValuesResponse
     */
    constructor() { 
        
        UpdateValuesResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateValuesResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateValuesResponse} obj Optional instance to populate.
     * @return {module:model/UpdateValuesResponse} The populated <code>UpdateValuesResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateValuesResponse();

            if (data.hasOwnProperty('spreadsheetId')) {
                obj['spreadsheetId'] = ApiClient.convertToType(data['spreadsheetId'], 'String');
            }
            if (data.hasOwnProperty('updatedCells')) {
                obj['updatedCells'] = ApiClient.convertToType(data['updatedCells'], 'Number');
            }
            if (data.hasOwnProperty('updatedColumns')) {
                obj['updatedColumns'] = ApiClient.convertToType(data['updatedColumns'], 'Number');
            }
            if (data.hasOwnProperty('updatedData')) {
                obj['updatedData'] = ValueRange.constructFromObject(data['updatedData']);
            }
            if (data.hasOwnProperty('updatedRange')) {
                obj['updatedRange'] = ApiClient.convertToType(data['updatedRange'], 'String');
            }
            if (data.hasOwnProperty('updatedRows')) {
                obj['updatedRows'] = ApiClient.convertToType(data['updatedRows'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateValuesResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateValuesResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['spreadsheetId'] && !(typeof data['spreadsheetId'] === 'string' || data['spreadsheetId'] instanceof String)) {
            throw new Error("Expected the field `spreadsheetId` to be a primitive type in the JSON string but got " + data['spreadsheetId']);
        }
        // validate the optional field `updatedData`
        if (data['updatedData']) { // data not null
          ValueRange.validateJSON(data['updatedData']);
        }
        // ensure the json data is a string
        if (data['updatedRange'] && !(typeof data['updatedRange'] === 'string' || data['updatedRange'] instanceof String)) {
            throw new Error("Expected the field `updatedRange` to be a primitive type in the JSON string but got " + data['updatedRange']);
        }

        return true;
    }


}



/**
 * The spreadsheet the updates were applied to.
 * @member {String} spreadsheetId
 */
UpdateValuesResponse.prototype['spreadsheetId'] = undefined;

/**
 * The number of cells updated.
 * @member {Number} updatedCells
 */
UpdateValuesResponse.prototype['updatedCells'] = undefined;

/**
 * The number of columns where at least one cell in the column was updated.
 * @member {Number} updatedColumns
 */
UpdateValuesResponse.prototype['updatedColumns'] = undefined;

/**
 * @member {module:model/ValueRange} updatedData
 */
UpdateValuesResponse.prototype['updatedData'] = undefined;

/**
 * The range (in A1 notation) that updates were applied to.
 * @member {String} updatedRange
 */
UpdateValuesResponse.prototype['updatedRange'] = undefined;

/**
 * The number of rows where at least one cell in the row was updated.
 * @member {Number} updatedRows
 */
UpdateValuesResponse.prototype['updatedRows'] = undefined;






export default UpdateValuesResponse;

