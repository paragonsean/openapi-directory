/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GridRange from './GridRange';

/**
 * The DataSourceParameter model module.
 * @module model/DataSourceParameter
 * @version v4
 */
class DataSourceParameter {
    /**
     * Constructs a new <code>DataSourceParameter</code>.
     * A parameter in a data source&#39;s query. The parameter allows the user to pass in values from the spreadsheet into a query.
     * @alias module:model/DataSourceParameter
     */
    constructor() { 
        
        DataSourceParameter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataSourceParameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSourceParameter} obj Optional instance to populate.
     * @return {module:model/DataSourceParameter} The populated <code>DataSourceParameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSourceParameter();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('namedRangeId')) {
                obj['namedRangeId'] = ApiClient.convertToType(data['namedRangeId'], 'String');
            }
            if (data.hasOwnProperty('range')) {
                obj['range'] = GridRange.constructFromObject(data['range']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSourceParameter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSourceParameter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['namedRangeId'] && !(typeof data['namedRangeId'] === 'string' || data['namedRangeId'] instanceof String)) {
            throw new Error("Expected the field `namedRangeId` to be a primitive type in the JSON string but got " + data['namedRangeId']);
        }
        // validate the optional field `range`
        if (data['range']) { // data not null
          GridRange.validateJSON(data['range']);
        }

        return true;
    }


}



/**
 * Named parameter. Must be a legitimate identifier for the DataSource that supports it. For example, [BigQuery identifier](https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#identifiers).
 * @member {String} name
 */
DataSourceParameter.prototype['name'] = undefined;

/**
 * ID of a NamedRange. Its size must be 1x1.
 * @member {String} namedRangeId
 */
DataSourceParameter.prototype['namedRangeId'] = undefined;

/**
 * @member {module:model/GridRange} range
 */
DataSourceParameter.prototype['range'] = undefined;






export default DataSourceParameter;

