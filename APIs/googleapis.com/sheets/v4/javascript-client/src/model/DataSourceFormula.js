/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataExecutionStatus from './DataExecutionStatus';

/**
 * The DataSourceFormula model module.
 * @module model/DataSourceFormula
 * @version v4
 */
class DataSourceFormula {
    /**
     * Constructs a new <code>DataSourceFormula</code>.
     * A data source formula.
     * @alias module:model/DataSourceFormula
     */
    constructor() { 
        
        DataSourceFormula.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataSourceFormula</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSourceFormula} obj Optional instance to populate.
     * @return {module:model/DataSourceFormula} The populated <code>DataSourceFormula</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSourceFormula();

            if (data.hasOwnProperty('dataExecutionStatus')) {
                obj['dataExecutionStatus'] = DataExecutionStatus.constructFromObject(data['dataExecutionStatus']);
            }
            if (data.hasOwnProperty('dataSourceId')) {
                obj['dataSourceId'] = ApiClient.convertToType(data['dataSourceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSourceFormula</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSourceFormula</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dataExecutionStatus`
        if (data['dataExecutionStatus']) { // data not null
          DataExecutionStatus.validateJSON(data['dataExecutionStatus']);
        }
        // ensure the json data is a string
        if (data['dataSourceId'] && !(typeof data['dataSourceId'] === 'string' || data['dataSourceId'] instanceof String)) {
            throw new Error("Expected the field `dataSourceId` to be a primitive type in the JSON string but got " + data['dataSourceId']);
        }

        return true;
    }


}



/**
 * @member {module:model/DataExecutionStatus} dataExecutionStatus
 */
DataSourceFormula.prototype['dataExecutionStatus'] = undefined;

/**
 * The ID of the data source the formula is associated with.
 * @member {String} dataSourceId
 */
DataSourceFormula.prototype['dataSourceId'] = undefined;






export default DataSourceFormula;

