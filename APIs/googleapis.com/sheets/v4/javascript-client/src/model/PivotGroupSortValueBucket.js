/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExtendedValue from './ExtendedValue';

/**
 * The PivotGroupSortValueBucket model module.
 * @module model/PivotGroupSortValueBucket
 * @version v4
 */
class PivotGroupSortValueBucket {
    /**
     * Constructs a new <code>PivotGroupSortValueBucket</code>.
     * Information about which values in a pivot group should be used for sorting.
     * @alias module:model/PivotGroupSortValueBucket
     */
    constructor() { 
        
        PivotGroupSortValueBucket.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PivotGroupSortValueBucket</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PivotGroupSortValueBucket} obj Optional instance to populate.
     * @return {module:model/PivotGroupSortValueBucket} The populated <code>PivotGroupSortValueBucket</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PivotGroupSortValueBucket();

            if (data.hasOwnProperty('buckets')) {
                obj['buckets'] = ApiClient.convertToType(data['buckets'], [ExtendedValue]);
            }
            if (data.hasOwnProperty('valuesIndex')) {
                obj['valuesIndex'] = ApiClient.convertToType(data['valuesIndex'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PivotGroupSortValueBucket</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PivotGroupSortValueBucket</code>.
     */
    static validateJSON(data) {
        if (data['buckets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['buckets'])) {
                throw new Error("Expected the field `buckets` to be an array in the JSON data but got " + data['buckets']);
            }
            // validate the optional field `buckets` (array)
            for (const item of data['buckets']) {
                ExtendedValue.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Determines the bucket from which values are chosen to sort. For example, in a pivot table with one row group & two column groups, the row group can list up to two values. The first value corresponds to a value within the first column group, and the second value corresponds to a value in the second column group. If no values are listed, this would indicate that the row should be sorted according to the \"Grand Total\" over the column groups. If a single value is listed, this would correspond to using the \"Total\" of that bucket.
 * @member {Array.<module:model/ExtendedValue>} buckets
 */
PivotGroupSortValueBucket.prototype['buckets'] = undefined;

/**
 * The offset in the PivotTable.values list which the values in this grouping should be sorted by.
 * @member {Number} valuesIndex
 */
PivotGroupSortValueBucket.prototype['valuesIndex'] = undefined;






export default PivotGroupSortValueBucket;

