/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Editors from './Editors';
import GridRange from './GridRange';

/**
 * The ProtectedRange model module.
 * @module model/ProtectedRange
 * @version v4
 */
class ProtectedRange {
    /**
     * Constructs a new <code>ProtectedRange</code>.
     * A protected range.
     * @alias module:model/ProtectedRange
     */
    constructor() { 
        
        ProtectedRange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProtectedRange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProtectedRange} obj Optional instance to populate.
     * @return {module:model/ProtectedRange} The populated <code>ProtectedRange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProtectedRange();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('editors')) {
                obj['editors'] = Editors.constructFromObject(data['editors']);
            }
            if (data.hasOwnProperty('namedRangeId')) {
                obj['namedRangeId'] = ApiClient.convertToType(data['namedRangeId'], 'String');
            }
            if (data.hasOwnProperty('protectedRangeId')) {
                obj['protectedRangeId'] = ApiClient.convertToType(data['protectedRangeId'], 'Number');
            }
            if (data.hasOwnProperty('range')) {
                obj['range'] = GridRange.constructFromObject(data['range']);
            }
            if (data.hasOwnProperty('requestingUserCanEdit')) {
                obj['requestingUserCanEdit'] = ApiClient.convertToType(data['requestingUserCanEdit'], 'Boolean');
            }
            if (data.hasOwnProperty('unprotectedRanges')) {
                obj['unprotectedRanges'] = ApiClient.convertToType(data['unprotectedRanges'], [GridRange]);
            }
            if (data.hasOwnProperty('warningOnly')) {
                obj['warningOnly'] = ApiClient.convertToType(data['warningOnly'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProtectedRange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProtectedRange</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `editors`
        if (data['editors']) { // data not null
          Editors.validateJSON(data['editors']);
        }
        // ensure the json data is a string
        if (data['namedRangeId'] && !(typeof data['namedRangeId'] === 'string' || data['namedRangeId'] instanceof String)) {
            throw new Error("Expected the field `namedRangeId` to be a primitive type in the JSON string but got " + data['namedRangeId']);
        }
        // validate the optional field `range`
        if (data['range']) { // data not null
          GridRange.validateJSON(data['range']);
        }
        if (data['unprotectedRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['unprotectedRanges'])) {
                throw new Error("Expected the field `unprotectedRanges` to be an array in the JSON data but got " + data['unprotectedRanges']);
            }
            // validate the optional field `unprotectedRanges` (array)
            for (const item of data['unprotectedRanges']) {
                GridRange.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The description of this protected range.
 * @member {String} description
 */
ProtectedRange.prototype['description'] = undefined;

/**
 * @member {module:model/Editors} editors
 */
ProtectedRange.prototype['editors'] = undefined;

/**
 * The named range this protected range is backed by, if any. When writing, only one of range or named_range_id may be set.
 * @member {String} namedRangeId
 */
ProtectedRange.prototype['namedRangeId'] = undefined;

/**
 * The ID of the protected range. This field is read-only.
 * @member {Number} protectedRangeId
 */
ProtectedRange.prototype['protectedRangeId'] = undefined;

/**
 * @member {module:model/GridRange} range
 */
ProtectedRange.prototype['range'] = undefined;

/**
 * True if the user who requested this protected range can edit the protected area. This field is read-only.
 * @member {Boolean} requestingUserCanEdit
 */
ProtectedRange.prototype['requestingUserCanEdit'] = undefined;

/**
 * The list of unprotected ranges within a protected sheet. Unprotected ranges are only supported on protected sheets.
 * @member {Array.<module:model/GridRange>} unprotectedRanges
 */
ProtectedRange.prototype['unprotectedRanges'] = undefined;

/**
 * True if this protected range will show a warning when editing. Warning-based protection means that every user can edit data in the protected range, except editing will prompt a warning asking the user to confirm the edit. When writing: if this field is true, then editors are ignored. Additionally, if this field is changed from true to false and the `editors` field is not set (nor included in the field mask), then the editors will be set to all the editors in the document.
 * @member {Boolean} warningOnly
 */
ProtectedRange.prototype['warningOnly'] = undefined;






export default ProtectedRange;

