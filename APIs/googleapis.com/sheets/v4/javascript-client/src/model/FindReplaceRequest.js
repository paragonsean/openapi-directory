/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GridRange from './GridRange';

/**
 * The FindReplaceRequest model module.
 * @module model/FindReplaceRequest
 * @version v4
 */
class FindReplaceRequest {
    /**
     * Constructs a new <code>FindReplaceRequest</code>.
     * Finds and replaces data in cells over a range, sheet, or all sheets.
     * @alias module:model/FindReplaceRequest
     */
    constructor() { 
        
        FindReplaceRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FindReplaceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FindReplaceRequest} obj Optional instance to populate.
     * @return {module:model/FindReplaceRequest} The populated <code>FindReplaceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FindReplaceRequest();

            if (data.hasOwnProperty('allSheets')) {
                obj['allSheets'] = ApiClient.convertToType(data['allSheets'], 'Boolean');
            }
            if (data.hasOwnProperty('find')) {
                obj['find'] = ApiClient.convertToType(data['find'], 'String');
            }
            if (data.hasOwnProperty('includeFormulas')) {
                obj['includeFormulas'] = ApiClient.convertToType(data['includeFormulas'], 'Boolean');
            }
            if (data.hasOwnProperty('matchCase')) {
                obj['matchCase'] = ApiClient.convertToType(data['matchCase'], 'Boolean');
            }
            if (data.hasOwnProperty('matchEntireCell')) {
                obj['matchEntireCell'] = ApiClient.convertToType(data['matchEntireCell'], 'Boolean');
            }
            if (data.hasOwnProperty('range')) {
                obj['range'] = GridRange.constructFromObject(data['range']);
            }
            if (data.hasOwnProperty('replacement')) {
                obj['replacement'] = ApiClient.convertToType(data['replacement'], 'String');
            }
            if (data.hasOwnProperty('searchByRegex')) {
                obj['searchByRegex'] = ApiClient.convertToType(data['searchByRegex'], 'Boolean');
            }
            if (data.hasOwnProperty('sheetId')) {
                obj['sheetId'] = ApiClient.convertToType(data['sheetId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FindReplaceRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FindReplaceRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['find'] && !(typeof data['find'] === 'string' || data['find'] instanceof String)) {
            throw new Error("Expected the field `find` to be a primitive type in the JSON string but got " + data['find']);
        }
        // validate the optional field `range`
        if (data['range']) { // data not null
          GridRange.validateJSON(data['range']);
        }
        // ensure the json data is a string
        if (data['replacement'] && !(typeof data['replacement'] === 'string' || data['replacement'] instanceof String)) {
            throw new Error("Expected the field `replacement` to be a primitive type in the JSON string but got " + data['replacement']);
        }

        return true;
    }


}



/**
 * True to find/replace over all sheets.
 * @member {Boolean} allSheets
 */
FindReplaceRequest.prototype['allSheets'] = undefined;

/**
 * The value to search.
 * @member {String} find
 */
FindReplaceRequest.prototype['find'] = undefined;

/**
 * True if the search should include cells with formulas. False to skip cells with formulas.
 * @member {Boolean} includeFormulas
 */
FindReplaceRequest.prototype['includeFormulas'] = undefined;

/**
 * True if the search is case sensitive.
 * @member {Boolean} matchCase
 */
FindReplaceRequest.prototype['matchCase'] = undefined;

/**
 * True if the find value should match the entire cell.
 * @member {Boolean} matchEntireCell
 */
FindReplaceRequest.prototype['matchEntireCell'] = undefined;

/**
 * @member {module:model/GridRange} range
 */
FindReplaceRequest.prototype['range'] = undefined;

/**
 * The value to use as the replacement.
 * @member {String} replacement
 */
FindReplaceRequest.prototype['replacement'] = undefined;

/**
 * True if the find value is a regex. The regular expression and replacement should follow Java regex rules at https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html. The replacement string is allowed to refer to capturing groups. For example, if one cell has the contents `\"Google Sheets\"` and another has `\"Google Docs\"`, then searching for `\"o.* (.*)\"` with a replacement of `\"$1 Rocks\"` would change the contents of the cells to `\"GSheets Rocks\"` and `\"GDocs Rocks\"` respectively.
 * @member {Boolean} searchByRegex
 */
FindReplaceRequest.prototype['searchByRegex'] = undefined;

/**
 * The sheet to find/replace over.
 * @member {Number} sheetId
 */
FindReplaceRequest.prototype['sheetId'] = undefined;






export default FindReplaceRequest;

