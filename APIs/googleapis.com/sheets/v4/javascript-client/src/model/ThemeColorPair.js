/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ColorStyle from './ColorStyle';

/**
 * The ThemeColorPair model module.
 * @module model/ThemeColorPair
 * @version v4
 */
class ThemeColorPair {
    /**
     * Constructs a new <code>ThemeColorPair</code>.
     * A pair mapping a spreadsheet theme color type to the concrete color it represents.
     * @alias module:model/ThemeColorPair
     */
    constructor() { 
        
        ThemeColorPair.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ThemeColorPair</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ThemeColorPair} obj Optional instance to populate.
     * @return {module:model/ThemeColorPair} The populated <code>ThemeColorPair</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ThemeColorPair();

            if (data.hasOwnProperty('color')) {
                obj['color'] = ColorStyle.constructFromObject(data['color']);
            }
            if (data.hasOwnProperty('colorType')) {
                obj['colorType'] = ApiClient.convertToType(data['colorType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ThemeColorPair</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ThemeColorPair</code>.
     */
    static validateJSON(data) {
        // validate the optional field `color`
        if (data['color']) { // data not null
          ColorStyle.validateJSON(data['color']);
        }
        // ensure the json data is a string
        if (data['colorType'] && !(typeof data['colorType'] === 'string' || data['colorType'] instanceof String)) {
            throw new Error("Expected the field `colorType` to be a primitive type in the JSON string but got " + data['colorType']);
        }

        return true;
    }


}



/**
 * @member {module:model/ColorStyle} color
 */
ThemeColorPair.prototype['color'] = undefined;

/**
 * The type of the spreadsheet theme color.
 * @member {module:model/ThemeColorPair.ColorTypeEnum} colorType
 */
ThemeColorPair.prototype['colorType'] = undefined;





/**
 * Allowed values for the <code>colorType</code> property.
 * @enum {String}
 * @readonly
 */
ThemeColorPair['ColorTypeEnum'] = {

    /**
     * value: "THEME_COLOR_TYPE_UNSPECIFIED"
     * @const
     */
    "THEME_COLOR_TYPE_UNSPECIFIED": "THEME_COLOR_TYPE_UNSPECIFIED",

    /**
     * value: "TEXT"
     * @const
     */
    "TEXT": "TEXT",

    /**
     * value: "BACKGROUND"
     * @const
     */
    "BACKGROUND": "BACKGROUND",

    /**
     * value: "ACCENT1"
     * @const
     */
    "ACCENT1": "ACCENT1",

    /**
     * value: "ACCENT2"
     * @const
     */
    "ACCENT2": "ACCENT2",

    /**
     * value: "ACCENT3"
     * @const
     */
    "ACCENT3": "ACCENT3",

    /**
     * value: "ACCENT4"
     * @const
     */
    "ACCENT4": "ACCENT4",

    /**
     * value: "ACCENT5"
     * @const
     */
    "ACCENT5": "ACCENT5",

    /**
     * value: "ACCENT6"
     * @const
     */
    "ACCENT6": "ACCENT6",

    /**
     * value: "LINK"
     * @const
     */
    "LINK": "LINK"
};



export default ThemeColorPair;

