/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeveloperMetadataLocation from './DeveloperMetadataLocation';

/**
 * The DeveloperMetadataLookup model module.
 * @module model/DeveloperMetadataLookup
 * @version v4
 */
class DeveloperMetadataLookup {
    /**
     * Constructs a new <code>DeveloperMetadataLookup</code>.
     * Selects DeveloperMetadata that matches all of the specified fields. For example, if only a metadata ID is specified this considers the DeveloperMetadata with that particular unique ID. If a metadata key is specified, this considers all developer metadata with that key. If a key, visibility, and location type are all specified, this considers all developer metadata with that key and visibility that are associated with a location of that type. In general, this selects all DeveloperMetadata that matches the intersection of all the specified fields; any field or combination of fields may be specified.
     * @alias module:model/DeveloperMetadataLookup
     */
    constructor() { 
        
        DeveloperMetadataLookup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeveloperMetadataLookup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeveloperMetadataLookup} obj Optional instance to populate.
     * @return {module:model/DeveloperMetadataLookup} The populated <code>DeveloperMetadataLookup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeveloperMetadataLookup();

            if (data.hasOwnProperty('locationMatchingStrategy')) {
                obj['locationMatchingStrategy'] = ApiClient.convertToType(data['locationMatchingStrategy'], 'String');
            }
            if (data.hasOwnProperty('locationType')) {
                obj['locationType'] = ApiClient.convertToType(data['locationType'], 'String');
            }
            if (data.hasOwnProperty('metadataId')) {
                obj['metadataId'] = ApiClient.convertToType(data['metadataId'], 'Number');
            }
            if (data.hasOwnProperty('metadataKey')) {
                obj['metadataKey'] = ApiClient.convertToType(data['metadataKey'], 'String');
            }
            if (data.hasOwnProperty('metadataLocation')) {
                obj['metadataLocation'] = DeveloperMetadataLocation.constructFromObject(data['metadataLocation']);
            }
            if (data.hasOwnProperty('metadataValue')) {
                obj['metadataValue'] = ApiClient.convertToType(data['metadataValue'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeveloperMetadataLookup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeveloperMetadataLookup</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['locationMatchingStrategy'] && !(typeof data['locationMatchingStrategy'] === 'string' || data['locationMatchingStrategy'] instanceof String)) {
            throw new Error("Expected the field `locationMatchingStrategy` to be a primitive type in the JSON string but got " + data['locationMatchingStrategy']);
        }
        // ensure the json data is a string
        if (data['locationType'] && !(typeof data['locationType'] === 'string' || data['locationType'] instanceof String)) {
            throw new Error("Expected the field `locationType` to be a primitive type in the JSON string but got " + data['locationType']);
        }
        // ensure the json data is a string
        if (data['metadataKey'] && !(typeof data['metadataKey'] === 'string' || data['metadataKey'] instanceof String)) {
            throw new Error("Expected the field `metadataKey` to be a primitive type in the JSON string but got " + data['metadataKey']);
        }
        // validate the optional field `metadataLocation`
        if (data['metadataLocation']) { // data not null
          DeveloperMetadataLocation.validateJSON(data['metadataLocation']);
        }
        // ensure the json data is a string
        if (data['metadataValue'] && !(typeof data['metadataValue'] === 'string' || data['metadataValue'] instanceof String)) {
            throw new Error("Expected the field `metadataValue` to be a primitive type in the JSON string but got " + data['metadataValue']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }

        return true;
    }


}



/**
 * Determines how this lookup matches the location. If this field is specified as EXACT, only developer metadata associated on the exact location specified is matched. If this field is specified to INTERSECTING, developer metadata associated on intersecting locations is also matched. If left unspecified, this field assumes a default value of INTERSECTING. If this field is specified, a metadataLocation must also be specified.
 * @member {module:model/DeveloperMetadataLookup.LocationMatchingStrategyEnum} locationMatchingStrategy
 */
DeveloperMetadataLookup.prototype['locationMatchingStrategy'] = undefined;

/**
 * Limits the selected developer metadata to those entries which are associated with locations of the specified type. For example, when this field is specified as ROW this lookup only considers developer metadata associated on rows. If the field is left unspecified, all location types are considered. This field cannot be specified as SPREADSHEET when the locationMatchingStrategy is specified as INTERSECTING or when the metadataLocation is specified as a non-spreadsheet location: spreadsheet metadata cannot intersect any other developer metadata location. This field also must be left unspecified when the locationMatchingStrategy is specified as EXACT.
 * @member {module:model/DeveloperMetadataLookup.LocationTypeEnum} locationType
 */
DeveloperMetadataLookup.prototype['locationType'] = undefined;

/**
 * Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_id.
 * @member {Number} metadataId
 */
DeveloperMetadataLookup.prototype['metadataId'] = undefined;

/**
 * Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_key.
 * @member {String} metadataKey
 */
DeveloperMetadataLookup.prototype['metadataKey'] = undefined;

/**
 * @member {module:model/DeveloperMetadataLocation} metadataLocation
 */
DeveloperMetadataLookup.prototype['metadataLocation'] = undefined;

/**
 * Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_value.
 * @member {String} metadataValue
 */
DeveloperMetadataLookup.prototype['metadataValue'] = undefined;

/**
 * Limits the selected developer metadata to that which has a matching DeveloperMetadata.visibility. If left unspecified, all developer metadata visibile to the requesting project is considered.
 * @member {module:model/DeveloperMetadataLookup.VisibilityEnum} visibility
 */
DeveloperMetadataLookup.prototype['visibility'] = undefined;





/**
 * Allowed values for the <code>locationMatchingStrategy</code> property.
 * @enum {String}
 * @readonly
 */
DeveloperMetadataLookup['LocationMatchingStrategyEnum'] = {

    /**
     * value: "DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED"
     * @const
     */
    "DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED": "DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED",

    /**
     * value: "EXACT_LOCATION"
     * @const
     */
    "EXACT_LOCATION": "EXACT_LOCATION",

    /**
     * value: "INTERSECTING_LOCATION"
     * @const
     */
    "INTERSECTING_LOCATION": "INTERSECTING_LOCATION"
};


/**
 * Allowed values for the <code>locationType</code> property.
 * @enum {String}
 * @readonly
 */
DeveloperMetadataLookup['LocationTypeEnum'] = {

    /**
     * value: "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED"
     * @const
     */
    "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED": "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",

    /**
     * value: "ROW"
     * @const
     */
    "ROW": "ROW",

    /**
     * value: "COLUMN"
     * @const
     */
    "COLUMN": "COLUMN",

    /**
     * value: "SHEET"
     * @const
     */
    "SHEET": "SHEET",

    /**
     * value: "SPREADSHEET"
     * @const
     */
    "SPREADSHEET": "SPREADSHEET"
};


/**
 * Allowed values for the <code>visibility</code> property.
 * @enum {String}
 * @readonly
 */
DeveloperMetadataLookup['VisibilityEnum'] = {

    /**
     * value: "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED"
     * @const
     */
    "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED": "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",

    /**
     * value: "DOCUMENT"
     * @const
     */
    "DOCUMENT": "DOCUMENT",

    /**
     * value: "PROJECT"
     * @const
     */
    "PROJECT": "PROJECT"
};



export default DeveloperMetadataLookup;

