/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TextRotation model module.
 * @module model/TextRotation
 * @version v4
 */
class TextRotation {
    /**
     * Constructs a new <code>TextRotation</code>.
     * The rotation applied to text in a cell.
     * @alias module:model/TextRotation
     */
    constructor() { 
        
        TextRotation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TextRotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextRotation} obj Optional instance to populate.
     * @return {module:model/TextRotation} The populated <code>TextRotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TextRotation();

            if (data.hasOwnProperty('angle')) {
                obj['angle'] = ApiClient.convertToType(data['angle'], 'Number');
            }
            if (data.hasOwnProperty('vertical')) {
                obj['vertical'] = ApiClient.convertToType(data['vertical'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TextRotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TextRotation</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The angle between the standard orientation and the desired orientation. Measured in degrees. Valid values are between -90 and 90. Positive angles are angled upwards, negative are angled downwards. Note: For LTR text direction positive angles are in the counterclockwise direction, whereas for RTL they are in the clockwise direction
 * @member {Number} angle
 */
TextRotation.prototype['angle'] = undefined;

/**
 * If true, text reads top to bottom, but the orientation of individual characters is unchanged. For example: | V | | e | | r | | t | | i | | c | | a | | l |
 * @member {Boolean} vertical
 */
TextRotation.prototype['vertical'] = undefined;






export default TextRotation;

