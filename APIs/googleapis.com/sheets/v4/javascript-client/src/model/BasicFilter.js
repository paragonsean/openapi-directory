/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FilterCriteria from './FilterCriteria';
import FilterSpec from './FilterSpec';
import GridRange from './GridRange';
import SortSpec from './SortSpec';

/**
 * The BasicFilter model module.
 * @module model/BasicFilter
 * @version v4
 */
class BasicFilter {
    /**
     * Constructs a new <code>BasicFilter</code>.
     * The default filter associated with a sheet.
     * @alias module:model/BasicFilter
     */
    constructor() { 
        
        BasicFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BasicFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BasicFilter} obj Optional instance to populate.
     * @return {module:model/BasicFilter} The populated <code>BasicFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BasicFilter();

            if (data.hasOwnProperty('criteria')) {
                obj['criteria'] = ApiClient.convertToType(data['criteria'], {'String': FilterCriteria});
            }
            if (data.hasOwnProperty('filterSpecs')) {
                obj['filterSpecs'] = ApiClient.convertToType(data['filterSpecs'], [FilterSpec]);
            }
            if (data.hasOwnProperty('range')) {
                obj['range'] = GridRange.constructFromObject(data['range']);
            }
            if (data.hasOwnProperty('sortSpecs')) {
                obj['sortSpecs'] = ApiClient.convertToType(data['sortSpecs'], [SortSpec]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BasicFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BasicFilter</code>.
     */
    static validateJSON(data) {
        if (data['filterSpecs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filterSpecs'])) {
                throw new Error("Expected the field `filterSpecs` to be an array in the JSON data but got " + data['filterSpecs']);
            }
            // validate the optional field `filterSpecs` (array)
            for (const item of data['filterSpecs']) {
                FilterSpec.validateJSON(item);
            };
        }
        // validate the optional field `range`
        if (data['range']) { // data not null
          GridRange.validateJSON(data['range']);
        }
        if (data['sortSpecs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sortSpecs'])) {
                throw new Error("Expected the field `sortSpecs` to be an array in the JSON data but got " + data['sortSpecs']);
            }
            // validate the optional field `sortSpecs` (array)
            for (const item of data['sortSpecs']) {
                SortSpec.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The criteria for showing/hiding values per column. The map's key is the column index, and the value is the criteria for that column. This field is deprecated in favor of filter_specs.
 * @member {Object.<String, module:model/FilterCriteria>} criteria
 */
BasicFilter.prototype['criteria'] = undefined;

/**
 * The filter criteria per column. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.
 * @member {Array.<module:model/FilterSpec>} filterSpecs
 */
BasicFilter.prototype['filterSpecs'] = undefined;

/**
 * @member {module:model/GridRange} range
 */
BasicFilter.prototype['range'] = undefined;

/**
 * The sort order per column. Later specifications are used when values are equal in the earlier specifications.
 * @member {Array.<module:model/SortSpec>} sortSpecs
 */
BasicFilter.prototype['sortSpecs'] = undefined;






export default BasicFilter;

