/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeveloperMetadataLocation from './DeveloperMetadataLocation';

/**
 * The DeveloperMetadata model module.
 * @module model/DeveloperMetadata
 * @version v4
 */
class DeveloperMetadata {
    /**
     * Constructs a new <code>DeveloperMetadata</code>.
     * Developer metadata associated with a location or object in a spreadsheet. Developer metadata may be used to associate arbitrary data with various parts of a spreadsheet and will remain associated at those locations as they move around and the spreadsheet is edited. For example, if developer metadata is associated with row 5 and another row is then subsequently inserted above row 5, that original metadata will still be associated with the row it was first associated with (what is now row 6). If the associated object is deleted its metadata is deleted too.
     * @alias module:model/DeveloperMetadata
     */
    constructor() { 
        
        DeveloperMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeveloperMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeveloperMetadata} obj Optional instance to populate.
     * @return {module:model/DeveloperMetadata} The populated <code>DeveloperMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeveloperMetadata();

            if (data.hasOwnProperty('location')) {
                obj['location'] = DeveloperMetadataLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('metadataId')) {
                obj['metadataId'] = ApiClient.convertToType(data['metadataId'], 'Number');
            }
            if (data.hasOwnProperty('metadataKey')) {
                obj['metadataKey'] = ApiClient.convertToType(data['metadataKey'], 'String');
            }
            if (data.hasOwnProperty('metadataValue')) {
                obj['metadataValue'] = ApiClient.convertToType(data['metadataValue'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeveloperMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeveloperMetadata</code>.
     */
    static validateJSON(data) {
        // validate the optional field `location`
        if (data['location']) { // data not null
          DeveloperMetadataLocation.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['metadataKey'] && !(typeof data['metadataKey'] === 'string' || data['metadataKey'] instanceof String)) {
            throw new Error("Expected the field `metadataKey` to be a primitive type in the JSON string but got " + data['metadataKey']);
        }
        // ensure the json data is a string
        if (data['metadataValue'] && !(typeof data['metadataValue'] === 'string' || data['metadataValue'] instanceof String)) {
            throw new Error("Expected the field `metadataValue` to be a primitive type in the JSON string but got " + data['metadataValue']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }

        return true;
    }


}



/**
 * @member {module:model/DeveloperMetadataLocation} location
 */
DeveloperMetadata.prototype['location'] = undefined;

/**
 * The spreadsheet-scoped unique ID that identifies the metadata. IDs may be specified when metadata is created, otherwise one will be randomly generated and assigned. Must be positive.
 * @member {Number} metadataId
 */
DeveloperMetadata.prototype['metadataId'] = undefined;

/**
 * The metadata key. There may be multiple metadata in a spreadsheet with the same key. Developer metadata must always have a key specified.
 * @member {String} metadataKey
 */
DeveloperMetadata.prototype['metadataKey'] = undefined;

/**
 * Data associated with the metadata's key.
 * @member {String} metadataValue
 */
DeveloperMetadata.prototype['metadataValue'] = undefined;

/**
 * The metadata visibility. Developer metadata must always have a visibility specified.
 * @member {module:model/DeveloperMetadata.VisibilityEnum} visibility
 */
DeveloperMetadata.prototype['visibility'] = undefined;





/**
 * Allowed values for the <code>visibility</code> property.
 * @enum {String}
 * @readonly
 */
DeveloperMetadata['VisibilityEnum'] = {

    /**
     * value: "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED"
     * @const
     */
    "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED": "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",

    /**
     * value: "DOCUMENT"
     * @const
     */
    "DOCUMENT": "DOCUMENT",

    /**
     * value: "PROJECT"
     * @const
     */
    "PROJECT": "PROJECT"
};



export default DeveloperMetadata;

