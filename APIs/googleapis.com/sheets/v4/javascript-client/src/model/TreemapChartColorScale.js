/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Color from './Color';
import ColorStyle from './ColorStyle';

/**
 * The TreemapChartColorScale model module.
 * @module model/TreemapChartColorScale
 * @version v4
 */
class TreemapChartColorScale {
    /**
     * Constructs a new <code>TreemapChartColorScale</code>.
     * A color scale for a treemap chart.
     * @alias module:model/TreemapChartColorScale
     */
    constructor() { 
        
        TreemapChartColorScale.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TreemapChartColorScale</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TreemapChartColorScale} obj Optional instance to populate.
     * @return {module:model/TreemapChartColorScale} The populated <code>TreemapChartColorScale</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TreemapChartColorScale();

            if (data.hasOwnProperty('maxValueColor')) {
                obj['maxValueColor'] = Color.constructFromObject(data['maxValueColor']);
            }
            if (data.hasOwnProperty('maxValueColorStyle')) {
                obj['maxValueColorStyle'] = ColorStyle.constructFromObject(data['maxValueColorStyle']);
            }
            if (data.hasOwnProperty('midValueColor')) {
                obj['midValueColor'] = Color.constructFromObject(data['midValueColor']);
            }
            if (data.hasOwnProperty('midValueColorStyle')) {
                obj['midValueColorStyle'] = ColorStyle.constructFromObject(data['midValueColorStyle']);
            }
            if (data.hasOwnProperty('minValueColor')) {
                obj['minValueColor'] = Color.constructFromObject(data['minValueColor']);
            }
            if (data.hasOwnProperty('minValueColorStyle')) {
                obj['minValueColorStyle'] = ColorStyle.constructFromObject(data['minValueColorStyle']);
            }
            if (data.hasOwnProperty('noDataColor')) {
                obj['noDataColor'] = Color.constructFromObject(data['noDataColor']);
            }
            if (data.hasOwnProperty('noDataColorStyle')) {
                obj['noDataColorStyle'] = ColorStyle.constructFromObject(data['noDataColorStyle']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TreemapChartColorScale</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TreemapChartColorScale</code>.
     */
    static validateJSON(data) {
        // validate the optional field `maxValueColor`
        if (data['maxValueColor']) { // data not null
          Color.validateJSON(data['maxValueColor']);
        }
        // validate the optional field `maxValueColorStyle`
        if (data['maxValueColorStyle']) { // data not null
          ColorStyle.validateJSON(data['maxValueColorStyle']);
        }
        // validate the optional field `midValueColor`
        if (data['midValueColor']) { // data not null
          Color.validateJSON(data['midValueColor']);
        }
        // validate the optional field `midValueColorStyle`
        if (data['midValueColorStyle']) { // data not null
          ColorStyle.validateJSON(data['midValueColorStyle']);
        }
        // validate the optional field `minValueColor`
        if (data['minValueColor']) { // data not null
          Color.validateJSON(data['minValueColor']);
        }
        // validate the optional field `minValueColorStyle`
        if (data['minValueColorStyle']) { // data not null
          ColorStyle.validateJSON(data['minValueColorStyle']);
        }
        // validate the optional field `noDataColor`
        if (data['noDataColor']) { // data not null
          Color.validateJSON(data['noDataColor']);
        }
        // validate the optional field `noDataColorStyle`
        if (data['noDataColorStyle']) { // data not null
          ColorStyle.validateJSON(data['noDataColorStyle']);
        }

        return true;
    }


}



/**
 * @member {module:model/Color} maxValueColor
 */
TreemapChartColorScale.prototype['maxValueColor'] = undefined;

/**
 * @member {module:model/ColorStyle} maxValueColorStyle
 */
TreemapChartColorScale.prototype['maxValueColorStyle'] = undefined;

/**
 * @member {module:model/Color} midValueColor
 */
TreemapChartColorScale.prototype['midValueColor'] = undefined;

/**
 * @member {module:model/ColorStyle} midValueColorStyle
 */
TreemapChartColorScale.prototype['midValueColorStyle'] = undefined;

/**
 * @member {module:model/Color} minValueColor
 */
TreemapChartColorScale.prototype['minValueColor'] = undefined;

/**
 * @member {module:model/ColorStyle} minValueColorStyle
 */
TreemapChartColorScale.prototype['minValueColorStyle'] = undefined;

/**
 * @member {module:model/Color} noDataColor
 */
TreemapChartColorScale.prototype['noDataColor'] = undefined;

/**
 * @member {module:model/ColorStyle} noDataColorStyle
 */
TreemapChartColorScale.prototype['noDataColorStyle'] = undefined;






export default TreemapChartColorScale;

