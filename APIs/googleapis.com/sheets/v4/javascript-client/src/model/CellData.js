/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CellFormat from './CellFormat';
import DataSourceFormula from './DataSourceFormula';
import DataSourceTable from './DataSourceTable';
import DataValidationRule from './DataValidationRule';
import ExtendedValue from './ExtendedValue';
import PivotTable from './PivotTable';
import TextFormatRun from './TextFormatRun';

/**
 * The CellData model module.
 * @module model/CellData
 * @version v4
 */
class CellData {
    /**
     * Constructs a new <code>CellData</code>.
     * Data about a specific cell.
     * @alias module:model/CellData
     */
    constructor() { 
        
        CellData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CellData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CellData} obj Optional instance to populate.
     * @return {module:model/CellData} The populated <code>CellData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CellData();

            if (data.hasOwnProperty('dataSourceFormula')) {
                obj['dataSourceFormula'] = DataSourceFormula.constructFromObject(data['dataSourceFormula']);
            }
            if (data.hasOwnProperty('dataSourceTable')) {
                obj['dataSourceTable'] = DataSourceTable.constructFromObject(data['dataSourceTable']);
            }
            if (data.hasOwnProperty('dataValidation')) {
                obj['dataValidation'] = DataValidationRule.constructFromObject(data['dataValidation']);
            }
            if (data.hasOwnProperty('effectiveFormat')) {
                obj['effectiveFormat'] = CellFormat.constructFromObject(data['effectiveFormat']);
            }
            if (data.hasOwnProperty('effectiveValue')) {
                obj['effectiveValue'] = ExtendedValue.constructFromObject(data['effectiveValue']);
            }
            if (data.hasOwnProperty('formattedValue')) {
                obj['formattedValue'] = ApiClient.convertToType(data['formattedValue'], 'String');
            }
            if (data.hasOwnProperty('hyperlink')) {
                obj['hyperlink'] = ApiClient.convertToType(data['hyperlink'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('pivotTable')) {
                obj['pivotTable'] = PivotTable.constructFromObject(data['pivotTable']);
            }
            if (data.hasOwnProperty('textFormatRuns')) {
                obj['textFormatRuns'] = ApiClient.convertToType(data['textFormatRuns'], [TextFormatRun]);
            }
            if (data.hasOwnProperty('userEnteredFormat')) {
                obj['userEnteredFormat'] = CellFormat.constructFromObject(data['userEnteredFormat']);
            }
            if (data.hasOwnProperty('userEnteredValue')) {
                obj['userEnteredValue'] = ExtendedValue.constructFromObject(data['userEnteredValue']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CellData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CellData</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dataSourceFormula`
        if (data['dataSourceFormula']) { // data not null
          DataSourceFormula.validateJSON(data['dataSourceFormula']);
        }
        // validate the optional field `dataSourceTable`
        if (data['dataSourceTable']) { // data not null
          DataSourceTable.validateJSON(data['dataSourceTable']);
        }
        // validate the optional field `dataValidation`
        if (data['dataValidation']) { // data not null
          DataValidationRule.validateJSON(data['dataValidation']);
        }
        // validate the optional field `effectiveFormat`
        if (data['effectiveFormat']) { // data not null
          CellFormat.validateJSON(data['effectiveFormat']);
        }
        // validate the optional field `effectiveValue`
        if (data['effectiveValue']) { // data not null
          ExtendedValue.validateJSON(data['effectiveValue']);
        }
        // ensure the json data is a string
        if (data['formattedValue'] && !(typeof data['formattedValue'] === 'string' || data['formattedValue'] instanceof String)) {
            throw new Error("Expected the field `formattedValue` to be a primitive type in the JSON string but got " + data['formattedValue']);
        }
        // ensure the json data is a string
        if (data['hyperlink'] && !(typeof data['hyperlink'] === 'string' || data['hyperlink'] instanceof String)) {
            throw new Error("Expected the field `hyperlink` to be a primitive type in the JSON string but got " + data['hyperlink']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // validate the optional field `pivotTable`
        if (data['pivotTable']) { // data not null
          PivotTable.validateJSON(data['pivotTable']);
        }
        if (data['textFormatRuns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['textFormatRuns'])) {
                throw new Error("Expected the field `textFormatRuns` to be an array in the JSON data but got " + data['textFormatRuns']);
            }
            // validate the optional field `textFormatRuns` (array)
            for (const item of data['textFormatRuns']) {
                TextFormatRun.validateJSON(item);
            };
        }
        // validate the optional field `userEnteredFormat`
        if (data['userEnteredFormat']) { // data not null
          CellFormat.validateJSON(data['userEnteredFormat']);
        }
        // validate the optional field `userEnteredValue`
        if (data['userEnteredValue']) { // data not null
          ExtendedValue.validateJSON(data['userEnteredValue']);
        }

        return true;
    }


}



/**
 * @member {module:model/DataSourceFormula} dataSourceFormula
 */
CellData.prototype['dataSourceFormula'] = undefined;

/**
 * @member {module:model/DataSourceTable} dataSourceTable
 */
CellData.prototype['dataSourceTable'] = undefined;

/**
 * @member {module:model/DataValidationRule} dataValidation
 */
CellData.prototype['dataValidation'] = undefined;

/**
 * @member {module:model/CellFormat} effectiveFormat
 */
CellData.prototype['effectiveFormat'] = undefined;

/**
 * @member {module:model/ExtendedValue} effectiveValue
 */
CellData.prototype['effectiveValue'] = undefined;

/**
 * The formatted value of the cell. This is the value as it's shown to the user. This field is read-only.
 * @member {String} formattedValue
 */
CellData.prototype['formattedValue'] = undefined;

/**
 * A hyperlink this cell points to, if any. If the cell contains multiple hyperlinks, this field will be empty. This field is read-only. To set it, use a `=HYPERLINK` formula in the userEnteredValue.formulaValue field. A cell-level link can also be set from the userEnteredFormat.textFormat field. Alternatively, set a hyperlink in the textFormatRun.format.link field that spans the entire cell.
 * @member {String} hyperlink
 */
CellData.prototype['hyperlink'] = undefined;

/**
 * Any note on the cell.
 * @member {String} note
 */
CellData.prototype['note'] = undefined;

/**
 * @member {module:model/PivotTable} pivotTable
 */
CellData.prototype['pivotTable'] = undefined;

/**
 * Runs of rich text applied to subsections of the cell. Runs are only valid on user entered strings, not formulas, bools, or numbers. Properties of a run start at a specific index in the text and continue until the next run. Runs will inherit the properties of the cell unless explicitly changed. When writing, the new runs will overwrite any prior runs. When writing a new user_entered_value, previous runs are erased.
 * @member {Array.<module:model/TextFormatRun>} textFormatRuns
 */
CellData.prototype['textFormatRuns'] = undefined;

/**
 * @member {module:model/CellFormat} userEnteredFormat
 */
CellData.prototype['userEnteredFormat'] = undefined;

/**
 * @member {module:model/ExtendedValue} userEnteredValue
 */
CellData.prototype['userEnteredValue'] = undefined;






export default CellData;

