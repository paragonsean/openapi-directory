/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NumberFormat model module.
 * @module model/NumberFormat
 * @version v4
 */
class NumberFormat {
    /**
     * Constructs a new <code>NumberFormat</code>.
     * The number format of a cell.
     * @alias module:model/NumberFormat
     */
    constructor() { 
        
        NumberFormat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NumberFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NumberFormat} obj Optional instance to populate.
     * @return {module:model/NumberFormat} The populated <code>NumberFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NumberFormat();

            if (data.hasOwnProperty('pattern')) {
                obj['pattern'] = ApiClient.convertToType(data['pattern'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NumberFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NumberFormat</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['pattern'] && !(typeof data['pattern'] === 'string' || data['pattern'] instanceof String)) {
            throw new Error("Expected the field `pattern` to be a primitive type in the JSON string but got " + data['pattern']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Pattern string used for formatting. If not set, a default pattern based on the user's locale will be used if necessary for the given type. See the [Date and Number Formats guide](/sheets/api/guides/formats) for more information about the supported patterns.
 * @member {String} pattern
 */
NumberFormat.prototype['pattern'] = undefined;

/**
 * The type of the number format. When writing, this field must be set.
 * @member {module:model/NumberFormat.TypeEnum} type
 */
NumberFormat.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
NumberFormat['TypeEnum'] = {

    /**
     * value: "NUMBER_FORMAT_TYPE_UNSPECIFIED"
     * @const
     */
    "NUMBER_FORMAT_TYPE_UNSPECIFIED": "NUMBER_FORMAT_TYPE_UNSPECIFIED",

    /**
     * value: "TEXT"
     * @const
     */
    "TEXT": "TEXT",

    /**
     * value: "NUMBER"
     * @const
     */
    "NUMBER": "NUMBER",

    /**
     * value: "PERCENT"
     * @const
     */
    "PERCENT": "PERCENT",

    /**
     * value: "CURRENCY"
     * @const
     */
    "CURRENCY": "CURRENCY",

    /**
     * value: "DATE"
     * @const
     */
    "DATE": "DATE",

    /**
     * value: "TIME"
     * @const
     */
    "TIME": "TIME",

    /**
     * value: "DATE_TIME"
     * @const
     */
    "DATE_TIME": "DATE_TIME",

    /**
     * value: "SCIENTIFIC"
     * @const
     */
    "SCIENTIFIC": "SCIENTIFIC"
};



export default NumberFormat;

