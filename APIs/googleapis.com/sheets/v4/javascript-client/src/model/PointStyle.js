/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PointStyle model module.
 * @module model/PointStyle
 * @version v4
 */
class PointStyle {
    /**
     * Constructs a new <code>PointStyle</code>.
     * The style of a point on the chart.
     * @alias module:model/PointStyle
     */
    constructor() { 
        
        PointStyle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PointStyle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PointStyle} obj Optional instance to populate.
     * @return {module:model/PointStyle} The populated <code>PointStyle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PointStyle();

            if (data.hasOwnProperty('shape')) {
                obj['shape'] = ApiClient.convertToType(data['shape'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PointStyle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PointStyle</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['shape'] && !(typeof data['shape'] === 'string' || data['shape'] instanceof String)) {
            throw new Error("Expected the field `shape` to be a primitive type in the JSON string but got " + data['shape']);
        }

        return true;
    }


}



/**
 * The point shape. If empty or unspecified, a default shape is used.
 * @member {module:model/PointStyle.ShapeEnum} shape
 */
PointStyle.prototype['shape'] = undefined;

/**
 * The point size. If empty, a default size is used.
 * @member {Number} size
 */
PointStyle.prototype['size'] = undefined;





/**
 * Allowed values for the <code>shape</code> property.
 * @enum {String}
 * @readonly
 */
PointStyle['ShapeEnum'] = {

    /**
     * value: "POINT_SHAPE_UNSPECIFIED"
     * @const
     */
    "POINT_SHAPE_UNSPECIFIED": "POINT_SHAPE_UNSPECIFIED",

    /**
     * value: "CIRCLE"
     * @const
     */
    "CIRCLE": "CIRCLE",

    /**
     * value: "DIAMOND"
     * @const
     */
    "DIAMOND": "DIAMOND",

    /**
     * value: "HEXAGON"
     * @const
     */
    "HEXAGON": "HEXAGON",

    /**
     * value: "PENTAGON"
     * @const
     */
    "PENTAGON": "PENTAGON",

    /**
     * value: "SQUARE"
     * @const
     */
    "SQUARE": "SQUARE",

    /**
     * value: "STAR"
     * @const
     */
    "STAR": "STAR",

    /**
     * value: "TRIANGLE"
     * @const
     */
    "TRIANGLE": "TRIANGLE",

    /**
     * value: "X_MARK"
     * @const
     */
    "X_MARK": "X_MARK"
};



export default PointStyle;

