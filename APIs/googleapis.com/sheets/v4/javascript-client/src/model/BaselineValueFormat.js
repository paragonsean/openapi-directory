/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Color from './Color';
import ColorStyle from './ColorStyle';
import TextFormat from './TextFormat';
import TextPosition from './TextPosition';

/**
 * The BaselineValueFormat model module.
 * @module model/BaselineValueFormat
 * @version v4
 */
class BaselineValueFormat {
    /**
     * Constructs a new <code>BaselineValueFormat</code>.
     * Formatting options for baseline value.
     * @alias module:model/BaselineValueFormat
     */
    constructor() { 
        
        BaselineValueFormat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BaselineValueFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BaselineValueFormat} obj Optional instance to populate.
     * @return {module:model/BaselineValueFormat} The populated <code>BaselineValueFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BaselineValueFormat();

            if (data.hasOwnProperty('comparisonType')) {
                obj['comparisonType'] = ApiClient.convertToType(data['comparisonType'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('negativeColor')) {
                obj['negativeColor'] = Color.constructFromObject(data['negativeColor']);
            }
            if (data.hasOwnProperty('negativeColorStyle')) {
                obj['negativeColorStyle'] = ColorStyle.constructFromObject(data['negativeColorStyle']);
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = TextPosition.constructFromObject(data['position']);
            }
            if (data.hasOwnProperty('positiveColor')) {
                obj['positiveColor'] = Color.constructFromObject(data['positiveColor']);
            }
            if (data.hasOwnProperty('positiveColorStyle')) {
                obj['positiveColorStyle'] = ColorStyle.constructFromObject(data['positiveColorStyle']);
            }
            if (data.hasOwnProperty('textFormat')) {
                obj['textFormat'] = TextFormat.constructFromObject(data['textFormat']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BaselineValueFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BaselineValueFormat</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['comparisonType'] && !(typeof data['comparisonType'] === 'string' || data['comparisonType'] instanceof String)) {
            throw new Error("Expected the field `comparisonType` to be a primitive type in the JSON string but got " + data['comparisonType']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `negativeColor`
        if (data['negativeColor']) { // data not null
          Color.validateJSON(data['negativeColor']);
        }
        // validate the optional field `negativeColorStyle`
        if (data['negativeColorStyle']) { // data not null
          ColorStyle.validateJSON(data['negativeColorStyle']);
        }
        // validate the optional field `position`
        if (data['position']) { // data not null
          TextPosition.validateJSON(data['position']);
        }
        // validate the optional field `positiveColor`
        if (data['positiveColor']) { // data not null
          Color.validateJSON(data['positiveColor']);
        }
        // validate the optional field `positiveColorStyle`
        if (data['positiveColorStyle']) { // data not null
          ColorStyle.validateJSON(data['positiveColorStyle']);
        }
        // validate the optional field `textFormat`
        if (data['textFormat']) { // data not null
          TextFormat.validateJSON(data['textFormat']);
        }

        return true;
    }


}



/**
 * The comparison type of key value with baseline value.
 * @member {module:model/BaselineValueFormat.ComparisonTypeEnum} comparisonType
 */
BaselineValueFormat.prototype['comparisonType'] = undefined;

/**
 * Description which is appended after the baseline value. This field is optional.
 * @member {String} description
 */
BaselineValueFormat.prototype['description'] = undefined;

/**
 * @member {module:model/Color} negativeColor
 */
BaselineValueFormat.prototype['negativeColor'] = undefined;

/**
 * @member {module:model/ColorStyle} negativeColorStyle
 */
BaselineValueFormat.prototype['negativeColorStyle'] = undefined;

/**
 * @member {module:model/TextPosition} position
 */
BaselineValueFormat.prototype['position'] = undefined;

/**
 * @member {module:model/Color} positiveColor
 */
BaselineValueFormat.prototype['positiveColor'] = undefined;

/**
 * @member {module:model/ColorStyle} positiveColorStyle
 */
BaselineValueFormat.prototype['positiveColorStyle'] = undefined;

/**
 * @member {module:model/TextFormat} textFormat
 */
BaselineValueFormat.prototype['textFormat'] = undefined;





/**
 * Allowed values for the <code>comparisonType</code> property.
 * @enum {String}
 * @readonly
 */
BaselineValueFormat['ComparisonTypeEnum'] = {

    /**
     * value: "COMPARISON_TYPE_UNDEFINED"
     * @const
     */
    "COMPARISON_TYPE_UNDEFINED": "COMPARISON_TYPE_UNDEFINED",

    /**
     * value: "ABSOLUTE_DIFFERENCE"
     * @const
     */
    "ABSOLUTE_DIFFERENCE": "ABSOLUTE_DIFFERENCE",

    /**
     * value: "PERCENTAGE_DIFFERENCE"
     * @const
     */
    "PERCENTAGE_DIFFERENCE": "PERCENTAGE_DIFFERENCE"
};



export default BaselineValueFormat;

