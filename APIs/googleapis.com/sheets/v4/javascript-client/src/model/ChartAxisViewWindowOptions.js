/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChartAxisViewWindowOptions model module.
 * @module model/ChartAxisViewWindowOptions
 * @version v4
 */
class ChartAxisViewWindowOptions {
    /**
     * Constructs a new <code>ChartAxisViewWindowOptions</code>.
     * The options that define a \&quot;view window\&quot; for a chart (such as the visible values in an axis).
     * @alias module:model/ChartAxisViewWindowOptions
     */
    constructor() { 
        
        ChartAxisViewWindowOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChartAxisViewWindowOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChartAxisViewWindowOptions} obj Optional instance to populate.
     * @return {module:model/ChartAxisViewWindowOptions} The populated <code>ChartAxisViewWindowOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChartAxisViewWindowOptions();

            if (data.hasOwnProperty('viewWindowMax')) {
                obj['viewWindowMax'] = ApiClient.convertToType(data['viewWindowMax'], 'Number');
            }
            if (data.hasOwnProperty('viewWindowMin')) {
                obj['viewWindowMin'] = ApiClient.convertToType(data['viewWindowMin'], 'Number');
            }
            if (data.hasOwnProperty('viewWindowMode')) {
                obj['viewWindowMode'] = ApiClient.convertToType(data['viewWindowMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChartAxisViewWindowOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChartAxisViewWindowOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['viewWindowMode'] && !(typeof data['viewWindowMode'] === 'string' || data['viewWindowMode'] instanceof String)) {
            throw new Error("Expected the field `viewWindowMode` to be a primitive type in the JSON string but got " + data['viewWindowMode']);
        }

        return true;
    }


}



/**
 * The maximum numeric value to be shown in this view window. If unset, will automatically determine a maximum value that looks good for the data.
 * @member {Number} viewWindowMax
 */
ChartAxisViewWindowOptions.prototype['viewWindowMax'] = undefined;

/**
 * The minimum numeric value to be shown in this view window. If unset, will automatically determine a minimum value that looks good for the data.
 * @member {Number} viewWindowMin
 */
ChartAxisViewWindowOptions.prototype['viewWindowMin'] = undefined;

/**
 * The view window's mode.
 * @member {module:model/ChartAxisViewWindowOptions.ViewWindowModeEnum} viewWindowMode
 */
ChartAxisViewWindowOptions.prototype['viewWindowMode'] = undefined;





/**
 * Allowed values for the <code>viewWindowMode</code> property.
 * @enum {String}
 * @readonly
 */
ChartAxisViewWindowOptions['ViewWindowModeEnum'] = {

    /**
     * value: "DEFAULT_VIEW_WINDOW_MODE"
     * @const
     */
    "DEFAULT_VIEW_WINDOW_MODE": "DEFAULT_VIEW_WINDOW_MODE",

    /**
     * value: "VIEW_WINDOW_MODE_UNSUPPORTED"
     * @const
     */
    "VIEW_WINDOW_MODE_UNSUPPORTED": "VIEW_WINDOW_MODE_UNSUPPORTED",

    /**
     * value: "EXPLICIT"
     * @const
     */
    "EXPLICIT": "EXPLICIT",

    /**
     * value: "PRETTY"
     * @const
     */
    "PRETTY": "PRETTY"
};



export default ChartAxisViewWindowOptions;

