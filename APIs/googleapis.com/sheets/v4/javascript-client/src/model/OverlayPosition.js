/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GridCoordinate from './GridCoordinate';

/**
 * The OverlayPosition model module.
 * @module model/OverlayPosition
 * @version v4
 */
class OverlayPosition {
    /**
     * Constructs a new <code>OverlayPosition</code>.
     * The location an object is overlaid on top of a grid.
     * @alias module:model/OverlayPosition
     */
    constructor() { 
        
        OverlayPosition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OverlayPosition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OverlayPosition} obj Optional instance to populate.
     * @return {module:model/OverlayPosition} The populated <code>OverlayPosition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OverlayPosition();

            if (data.hasOwnProperty('anchorCell')) {
                obj['anchorCell'] = GridCoordinate.constructFromObject(data['anchorCell']);
            }
            if (data.hasOwnProperty('heightPixels')) {
                obj['heightPixels'] = ApiClient.convertToType(data['heightPixels'], 'Number');
            }
            if (data.hasOwnProperty('offsetXPixels')) {
                obj['offsetXPixels'] = ApiClient.convertToType(data['offsetXPixels'], 'Number');
            }
            if (data.hasOwnProperty('offsetYPixels')) {
                obj['offsetYPixels'] = ApiClient.convertToType(data['offsetYPixels'], 'Number');
            }
            if (data.hasOwnProperty('widthPixels')) {
                obj['widthPixels'] = ApiClient.convertToType(data['widthPixels'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OverlayPosition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OverlayPosition</code>.
     */
    static validateJSON(data) {
        // validate the optional field `anchorCell`
        if (data['anchorCell']) { // data not null
          GridCoordinate.validateJSON(data['anchorCell']);
        }

        return true;
    }


}



/**
 * @member {module:model/GridCoordinate} anchorCell
 */
OverlayPosition.prototype['anchorCell'] = undefined;

/**
 * The height of the object, in pixels. Defaults to 371.
 * @member {Number} heightPixels
 */
OverlayPosition.prototype['heightPixels'] = undefined;

/**
 * The horizontal offset, in pixels, that the object is offset from the anchor cell.
 * @member {Number} offsetXPixels
 */
OverlayPosition.prototype['offsetXPixels'] = undefined;

/**
 * The vertical offset, in pixels, that the object is offset from the anchor cell.
 * @member {Number} offsetYPixels
 */
OverlayPosition.prototype['offsetYPixels'] = undefined;

/**
 * The width of the object, in pixels. Defaults to 600.
 * @member {Number} widthPixels
 */
OverlayPosition.prototype['widthPixels'] = undefined;






export default OverlayPosition;

