/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaselineValueFormat from './BaselineValueFormat';
import ChartCustomNumberFormatOptions from './ChartCustomNumberFormatOptions';
import ChartData from './ChartData';
import KeyValueFormat from './KeyValueFormat';

/**
 * The ScorecardChartSpec model module.
 * @module model/ScorecardChartSpec
 * @version v4
 */
class ScorecardChartSpec {
    /**
     * Constructs a new <code>ScorecardChartSpec</code>.
     * A scorecard chart. Scorecard charts are used to highlight key performance indicators, known as KPIs, on the spreadsheet. A scorecard chart can represent things like total sales, average cost, or a top selling item. You can specify a single data value, or aggregate over a range of data. Percentage or absolute difference from a baseline value can be highlighted, like changes over time.
     * @alias module:model/ScorecardChartSpec
     */
    constructor() { 
        
        ScorecardChartSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScorecardChartSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScorecardChartSpec} obj Optional instance to populate.
     * @return {module:model/ScorecardChartSpec} The populated <code>ScorecardChartSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScorecardChartSpec();

            if (data.hasOwnProperty('aggregateType')) {
                obj['aggregateType'] = ApiClient.convertToType(data['aggregateType'], 'String');
            }
            if (data.hasOwnProperty('baselineValueData')) {
                obj['baselineValueData'] = ChartData.constructFromObject(data['baselineValueData']);
            }
            if (data.hasOwnProperty('baselineValueFormat')) {
                obj['baselineValueFormat'] = BaselineValueFormat.constructFromObject(data['baselineValueFormat']);
            }
            if (data.hasOwnProperty('customFormatOptions')) {
                obj['customFormatOptions'] = ChartCustomNumberFormatOptions.constructFromObject(data['customFormatOptions']);
            }
            if (data.hasOwnProperty('keyValueData')) {
                obj['keyValueData'] = ChartData.constructFromObject(data['keyValueData']);
            }
            if (data.hasOwnProperty('keyValueFormat')) {
                obj['keyValueFormat'] = KeyValueFormat.constructFromObject(data['keyValueFormat']);
            }
            if (data.hasOwnProperty('numberFormatSource')) {
                obj['numberFormatSource'] = ApiClient.convertToType(data['numberFormatSource'], 'String');
            }
            if (data.hasOwnProperty('scaleFactor')) {
                obj['scaleFactor'] = ApiClient.convertToType(data['scaleFactor'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScorecardChartSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScorecardChartSpec</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aggregateType'] && !(typeof data['aggregateType'] === 'string' || data['aggregateType'] instanceof String)) {
            throw new Error("Expected the field `aggregateType` to be a primitive type in the JSON string but got " + data['aggregateType']);
        }
        // validate the optional field `baselineValueData`
        if (data['baselineValueData']) { // data not null
          ChartData.validateJSON(data['baselineValueData']);
        }
        // validate the optional field `baselineValueFormat`
        if (data['baselineValueFormat']) { // data not null
          BaselineValueFormat.validateJSON(data['baselineValueFormat']);
        }
        // validate the optional field `customFormatOptions`
        if (data['customFormatOptions']) { // data not null
          ChartCustomNumberFormatOptions.validateJSON(data['customFormatOptions']);
        }
        // validate the optional field `keyValueData`
        if (data['keyValueData']) { // data not null
          ChartData.validateJSON(data['keyValueData']);
        }
        // validate the optional field `keyValueFormat`
        if (data['keyValueFormat']) { // data not null
          KeyValueFormat.validateJSON(data['keyValueFormat']);
        }
        // ensure the json data is a string
        if (data['numberFormatSource'] && !(typeof data['numberFormatSource'] === 'string' || data['numberFormatSource'] instanceof String)) {
            throw new Error("Expected the field `numberFormatSource` to be a primitive type in the JSON string but got " + data['numberFormatSource']);
        }

        return true;
    }


}



/**
 * The aggregation type for key and baseline chart data in scorecard chart. This field is not supported for data source charts. Use the ChartData.aggregateType field of the key_value_data or baseline_value_data instead for data source charts. This field is optional.
 * @member {module:model/ScorecardChartSpec.AggregateTypeEnum} aggregateType
 */
ScorecardChartSpec.prototype['aggregateType'] = undefined;

/**
 * @member {module:model/ChartData} baselineValueData
 */
ScorecardChartSpec.prototype['baselineValueData'] = undefined;

/**
 * @member {module:model/BaselineValueFormat} baselineValueFormat
 */
ScorecardChartSpec.prototype['baselineValueFormat'] = undefined;

/**
 * @member {module:model/ChartCustomNumberFormatOptions} customFormatOptions
 */
ScorecardChartSpec.prototype['customFormatOptions'] = undefined;

/**
 * @member {module:model/ChartData} keyValueData
 */
ScorecardChartSpec.prototype['keyValueData'] = undefined;

/**
 * @member {module:model/KeyValueFormat} keyValueFormat
 */
ScorecardChartSpec.prototype['keyValueFormat'] = undefined;

/**
 * The number format source used in the scorecard chart. This field is optional.
 * @member {module:model/ScorecardChartSpec.NumberFormatSourceEnum} numberFormatSource
 */
ScorecardChartSpec.prototype['numberFormatSource'] = undefined;

/**
 * Value to scale scorecard key and baseline value. For example, a factor of 10 can be used to divide all values in the chart by 10. This field is optional.
 * @member {Number} scaleFactor
 */
ScorecardChartSpec.prototype['scaleFactor'] = undefined;





/**
 * Allowed values for the <code>aggregateType</code> property.
 * @enum {String}
 * @readonly
 */
ScorecardChartSpec['AggregateTypeEnum'] = {

    /**
     * value: "CHART_AGGREGATE_TYPE_UNSPECIFIED"
     * @const
     */
    "CHART_AGGREGATE_TYPE_UNSPECIFIED": "CHART_AGGREGATE_TYPE_UNSPECIFIED",

    /**
     * value: "AVERAGE"
     * @const
     */
    "AVERAGE": "AVERAGE",

    /**
     * value: "COUNT"
     * @const
     */
    "COUNT": "COUNT",

    /**
     * value: "MAX"
     * @const
     */
    "MAX": "MAX",

    /**
     * value: "MEDIAN"
     * @const
     */
    "MEDIAN": "MEDIAN",

    /**
     * value: "MIN"
     * @const
     */
    "MIN": "MIN",

    /**
     * value: "SUM"
     * @const
     */
    "SUM": "SUM"
};


/**
 * Allowed values for the <code>numberFormatSource</code> property.
 * @enum {String}
 * @readonly
 */
ScorecardChartSpec['NumberFormatSourceEnum'] = {

    /**
     * value: "CHART_NUMBER_FORMAT_SOURCE_UNDEFINED"
     * @const
     */
    "CHART_NUMBER_FORMAT_SOURCE_UNDEFINED": "CHART_NUMBER_FORMAT_SOURCE_UNDEFINED",

    /**
     * value: "FROM_DATA"
     * @const
     */
    "FROM_DATA": "FROM_DATA",

    /**
     * value: "CUSTOM"
     * @const
     */
    "CUSTOM": "CUSTOM"
};



export default ScorecardChartSpec;

