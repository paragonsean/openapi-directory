/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChartCustomNumberFormatOptions model module.
 * @module model/ChartCustomNumberFormatOptions
 * @version v4
 */
class ChartCustomNumberFormatOptions {
    /**
     * Constructs a new <code>ChartCustomNumberFormatOptions</code>.
     * Custom number formatting options for chart attributes.
     * @alias module:model/ChartCustomNumberFormatOptions
     */
    constructor() { 
        
        ChartCustomNumberFormatOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChartCustomNumberFormatOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChartCustomNumberFormatOptions} obj Optional instance to populate.
     * @return {module:model/ChartCustomNumberFormatOptions} The populated <code>ChartCustomNumberFormatOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChartCustomNumberFormatOptions();

            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
            }
            if (data.hasOwnProperty('suffix')) {
                obj['suffix'] = ApiClient.convertToType(data['suffix'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChartCustomNumberFormatOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChartCustomNumberFormatOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['prefix'] && !(typeof data['prefix'] === 'string' || data['prefix'] instanceof String)) {
            throw new Error("Expected the field `prefix` to be a primitive type in the JSON string but got " + data['prefix']);
        }
        // ensure the json data is a string
        if (data['suffix'] && !(typeof data['suffix'] === 'string' || data['suffix'] instanceof String)) {
            throw new Error("Expected the field `suffix` to be a primitive type in the JSON string but got " + data['suffix']);
        }

        return true;
    }


}



/**
 * Custom prefix to be prepended to the chart attribute. This field is optional.
 * @member {String} prefix
 */
ChartCustomNumberFormatOptions.prototype['prefix'] = undefined;

/**
 * Custom suffix to be appended to the chart attribute. This field is optional.
 * @member {String} suffix
 */
ChartCustomNumberFormatOptions.prototype['suffix'] = undefined;






export default ChartCustomNumberFormatOptions;

