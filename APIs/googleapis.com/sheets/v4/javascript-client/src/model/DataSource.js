/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataSourceColumn from './DataSourceColumn';
import DataSourceSpec from './DataSourceSpec';

/**
 * The DataSource model module.
 * @module model/DataSource
 * @version v4
 */
class DataSource {
    /**
     * Constructs a new <code>DataSource</code>.
     * Information about an external data source in the spreadsheet.
     * @alias module:model/DataSource
     */
    constructor() { 
        
        DataSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSource} obj Optional instance to populate.
     * @return {module:model/DataSource} The populated <code>DataSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSource();

            if (data.hasOwnProperty('calculatedColumns')) {
                obj['calculatedColumns'] = ApiClient.convertToType(data['calculatedColumns'], [DataSourceColumn]);
            }
            if (data.hasOwnProperty('dataSourceId')) {
                obj['dataSourceId'] = ApiClient.convertToType(data['dataSourceId'], 'String');
            }
            if (data.hasOwnProperty('sheetId')) {
                obj['sheetId'] = ApiClient.convertToType(data['sheetId'], 'Number');
            }
            if (data.hasOwnProperty('spec')) {
                obj['spec'] = DataSourceSpec.constructFromObject(data['spec']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSource</code>.
     */
    static validateJSON(data) {
        if (data['calculatedColumns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['calculatedColumns'])) {
                throw new Error("Expected the field `calculatedColumns` to be an array in the JSON data but got " + data['calculatedColumns']);
            }
            // validate the optional field `calculatedColumns` (array)
            for (const item of data['calculatedColumns']) {
                DataSourceColumn.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['dataSourceId'] && !(typeof data['dataSourceId'] === 'string' || data['dataSourceId'] instanceof String)) {
            throw new Error("Expected the field `dataSourceId` to be a primitive type in the JSON string but got " + data['dataSourceId']);
        }
        // validate the optional field `spec`
        if (data['spec']) { // data not null
          DataSourceSpec.validateJSON(data['spec']);
        }

        return true;
    }


}



/**
 * All calculated columns in the data source.
 * @member {Array.<module:model/DataSourceColumn>} calculatedColumns
 */
DataSource.prototype['calculatedColumns'] = undefined;

/**
 * The spreadsheet-scoped unique ID that identifies the data source. Example: 1080547365.
 * @member {String} dataSourceId
 */
DataSource.prototype['dataSourceId'] = undefined;

/**
 * The ID of the Sheet connected with the data source. The field cannot be changed once set. When creating a data source, an associated DATA_SOURCE sheet is also created, if the field is not specified, the ID of the created sheet will be randomly generated.
 * @member {Number} sheetId
 */
DataSource.prototype['sheetId'] = undefined;

/**
 * @member {module:model/DataSourceSpec} spec
 */
DataSource.prototype['spec'] = undefined;






export default DataSource;

