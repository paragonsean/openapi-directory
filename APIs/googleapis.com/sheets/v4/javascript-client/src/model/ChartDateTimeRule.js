/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChartDateTimeRule model module.
 * @module model/ChartDateTimeRule
 * @version v4
 */
class ChartDateTimeRule {
    /**
     * Constructs a new <code>ChartDateTimeRule</code>.
     * Allows you to organize the date-time values in a source data column into buckets based on selected parts of their date or time values.
     * @alias module:model/ChartDateTimeRule
     */
    constructor() { 
        
        ChartDateTimeRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChartDateTimeRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChartDateTimeRule} obj Optional instance to populate.
     * @return {module:model/ChartDateTimeRule} The populated <code>ChartDateTimeRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChartDateTimeRule();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChartDateTimeRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChartDateTimeRule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The type of date-time grouping to apply.
 * @member {module:model/ChartDateTimeRule.TypeEnum} type
 */
ChartDateTimeRule.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ChartDateTimeRule['TypeEnum'] = {

    /**
     * value: "CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED"
     * @const
     */
    "CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED": "CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED",

    /**
     * value: "SECOND"
     * @const
     */
    "SECOND": "SECOND",

    /**
     * value: "MINUTE"
     * @const
     */
    "MINUTE": "MINUTE",

    /**
     * value: "HOUR"
     * @const
     */
    "HOUR": "HOUR",

    /**
     * value: "HOUR_MINUTE"
     * @const
     */
    "HOUR_MINUTE": "HOUR_MINUTE",

    /**
     * value: "HOUR_MINUTE_AMPM"
     * @const
     */
    "HOUR_MINUTE_AMPM": "HOUR_MINUTE_AMPM",

    /**
     * value: "DAY_OF_WEEK"
     * @const
     */
    "DAY_OF_WEEK": "DAY_OF_WEEK",

    /**
     * value: "DAY_OF_YEAR"
     * @const
     */
    "DAY_OF_YEAR": "DAY_OF_YEAR",

    /**
     * value: "DAY_OF_MONTH"
     * @const
     */
    "DAY_OF_MONTH": "DAY_OF_MONTH",

    /**
     * value: "DAY_MONTH"
     * @const
     */
    "DAY_MONTH": "DAY_MONTH",

    /**
     * value: "MONTH"
     * @const
     */
    "MONTH": "MONTH",

    /**
     * value: "QUARTER"
     * @const
     */
    "QUARTER": "QUARTER",

    /**
     * value: "YEAR"
     * @const
     */
    "YEAR": "YEAR",

    /**
     * value: "YEAR_MONTH"
     * @const
     */
    "YEAR_MONTH": "YEAR_MONTH",

    /**
     * value: "YEAR_QUARTER"
     * @const
     */
    "YEAR_QUARTER": "YEAR_QUARTER",

    /**
     * value: "YEAR_MONTH_DAY"
     * @const
     */
    "YEAR_MONTH_DAY": "YEAR_MONTH_DAY"
};



export default ChartDateTimeRule;

