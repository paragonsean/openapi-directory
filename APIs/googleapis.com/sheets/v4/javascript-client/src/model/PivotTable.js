/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataExecutionStatus from './DataExecutionStatus';
import GridRange from './GridRange';
import PivotFilterCriteria from './PivotFilterCriteria';
import PivotFilterSpec from './PivotFilterSpec';
import PivotGroup from './PivotGroup';
import PivotValue from './PivotValue';

/**
 * The PivotTable model module.
 * @module model/PivotTable
 * @version v4
 */
class PivotTable {
    /**
     * Constructs a new <code>PivotTable</code>.
     * A pivot table.
     * @alias module:model/PivotTable
     */
    constructor() { 
        
        PivotTable.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PivotTable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PivotTable} obj Optional instance to populate.
     * @return {module:model/PivotTable} The populated <code>PivotTable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PivotTable();

            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], [PivotGroup]);
            }
            if (data.hasOwnProperty('criteria')) {
                obj['criteria'] = ApiClient.convertToType(data['criteria'], {'String': PivotFilterCriteria});
            }
            if (data.hasOwnProperty('dataExecutionStatus')) {
                obj['dataExecutionStatus'] = DataExecutionStatus.constructFromObject(data['dataExecutionStatus']);
            }
            if (data.hasOwnProperty('dataSourceId')) {
                obj['dataSourceId'] = ApiClient.convertToType(data['dataSourceId'], 'String');
            }
            if (data.hasOwnProperty('filterSpecs')) {
                obj['filterSpecs'] = ApiClient.convertToType(data['filterSpecs'], [PivotFilterSpec]);
            }
            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], [PivotGroup]);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = GridRange.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('valueLayout')) {
                obj['valueLayout'] = ApiClient.convertToType(data['valueLayout'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], [PivotValue]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PivotTable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PivotTable</code>.
     */
    static validateJSON(data) {
        if (data['columns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['columns'])) {
                throw new Error("Expected the field `columns` to be an array in the JSON data but got " + data['columns']);
            }
            // validate the optional field `columns` (array)
            for (const item of data['columns']) {
                PivotGroup.validateJSON(item);
            };
        }
        // validate the optional field `dataExecutionStatus`
        if (data['dataExecutionStatus']) { // data not null
          DataExecutionStatus.validateJSON(data['dataExecutionStatus']);
        }
        // ensure the json data is a string
        if (data['dataSourceId'] && !(typeof data['dataSourceId'] === 'string' || data['dataSourceId'] instanceof String)) {
            throw new Error("Expected the field `dataSourceId` to be a primitive type in the JSON string but got " + data['dataSourceId']);
        }
        if (data['filterSpecs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filterSpecs'])) {
                throw new Error("Expected the field `filterSpecs` to be an array in the JSON data but got " + data['filterSpecs']);
            }
            // validate the optional field `filterSpecs` (array)
            for (const item of data['filterSpecs']) {
                PivotFilterSpec.validateJSON(item);
            };
        }
        if (data['rows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rows'])) {
                throw new Error("Expected the field `rows` to be an array in the JSON data but got " + data['rows']);
            }
            // validate the optional field `rows` (array)
            for (const item of data['rows']) {
                PivotGroup.validateJSON(item);
            };
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          GridRange.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['valueLayout'] && !(typeof data['valueLayout'] === 'string' || data['valueLayout'] instanceof String)) {
            throw new Error("Expected the field `valueLayout` to be a primitive type in the JSON string but got " + data['valueLayout']);
        }
        if (data['values']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['values'])) {
                throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
            }
            // validate the optional field `values` (array)
            for (const item of data['values']) {
                PivotValue.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Each column grouping in the pivot table.
 * @member {Array.<module:model/PivotGroup>} columns
 */
PivotTable.prototype['columns'] = undefined;

/**
 * An optional mapping of filters per source column offset. The filters are applied before aggregating data into the pivot table. The map's key is the column offset of the source range that you want to filter, and the value is the criteria for that column. For example, if the source was `C10:E15`, a key of `0` will have the filter for column `C`, whereas the key `1` is for column `D`. This field is deprecated in favor of filter_specs.
 * @member {Object.<String, module:model/PivotFilterCriteria>} criteria
 */
PivotTable.prototype['criteria'] = undefined;

/**
 * @member {module:model/DataExecutionStatus} dataExecutionStatus
 */
PivotTable.prototype['dataExecutionStatus'] = undefined;

/**
 * The ID of the data source the pivot table is reading data from.
 * @member {String} dataSourceId
 */
PivotTable.prototype['dataSourceId'] = undefined;

/**
 * The filters applied to the source columns before aggregating data for the pivot table. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.
 * @member {Array.<module:model/PivotFilterSpec>} filterSpecs
 */
PivotTable.prototype['filterSpecs'] = undefined;

/**
 * Each row grouping in the pivot table.
 * @member {Array.<module:model/PivotGroup>} rows
 */
PivotTable.prototype['rows'] = undefined;

/**
 * @member {module:model/GridRange} source
 */
PivotTable.prototype['source'] = undefined;

/**
 * Whether values should be listed horizontally (as columns) or vertically (as rows).
 * @member {module:model/PivotTable.ValueLayoutEnum} valueLayout
 */
PivotTable.prototype['valueLayout'] = undefined;

/**
 * A list of values to include in the pivot table.
 * @member {Array.<module:model/PivotValue>} values
 */
PivotTable.prototype['values'] = undefined;





/**
 * Allowed values for the <code>valueLayout</code> property.
 * @enum {String}
 * @readonly
 */
PivotTable['ValueLayoutEnum'] = {

    /**
     * value: "HORIZONTAL"
     * @const
     */
    "HORIZONTAL": "HORIZONTAL",

    /**
     * value: "VERTICAL"
     * @const
     */
    "VERTICAL": "VERTICAL"
};



export default PivotTable;

