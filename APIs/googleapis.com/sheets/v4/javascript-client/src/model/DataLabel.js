/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChartData from './ChartData';
import TextFormat from './TextFormat';

/**
 * The DataLabel model module.
 * @module model/DataLabel
 * @version v4
 */
class DataLabel {
    /**
     * Constructs a new <code>DataLabel</code>.
     * Settings for one set of data labels. Data labels are annotations that appear next to a set of data, such as the points on a line chart, and provide additional information about what the data represents, such as a text representation of the value behind that point on the graph.
     * @alias module:model/DataLabel
     */
    constructor() { 
        
        DataLabel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataLabel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataLabel} obj Optional instance to populate.
     * @return {module:model/DataLabel} The populated <code>DataLabel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataLabel();

            if (data.hasOwnProperty('customLabelData')) {
                obj['customLabelData'] = ChartData.constructFromObject(data['customLabelData']);
            }
            if (data.hasOwnProperty('placement')) {
                obj['placement'] = ApiClient.convertToType(data['placement'], 'String');
            }
            if (data.hasOwnProperty('textFormat')) {
                obj['textFormat'] = TextFormat.constructFromObject(data['textFormat']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataLabel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataLabel</code>.
     */
    static validateJSON(data) {
        // validate the optional field `customLabelData`
        if (data['customLabelData']) { // data not null
          ChartData.validateJSON(data['customLabelData']);
        }
        // ensure the json data is a string
        if (data['placement'] && !(typeof data['placement'] === 'string' || data['placement'] instanceof String)) {
            throw new Error("Expected the field `placement` to be a primitive type in the JSON string but got " + data['placement']);
        }
        // validate the optional field `textFormat`
        if (data['textFormat']) { // data not null
          TextFormat.validateJSON(data['textFormat']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/ChartData} customLabelData
 */
DataLabel.prototype['customLabelData'] = undefined;

/**
 * The placement of the data label relative to the labeled data.
 * @member {module:model/DataLabel.PlacementEnum} placement
 */
DataLabel.prototype['placement'] = undefined;

/**
 * @member {module:model/TextFormat} textFormat
 */
DataLabel.prototype['textFormat'] = undefined;

/**
 * The type of the data label.
 * @member {module:model/DataLabel.TypeEnum} type
 */
DataLabel.prototype['type'] = undefined;





/**
 * Allowed values for the <code>placement</code> property.
 * @enum {String}
 * @readonly
 */
DataLabel['PlacementEnum'] = {

    /**
     * value: "DATA_LABEL_PLACEMENT_UNSPECIFIED"
     * @const
     */
    "DATA_LABEL_PLACEMENT_UNSPECIFIED": "DATA_LABEL_PLACEMENT_UNSPECIFIED",

    /**
     * value: "CENTER"
     * @const
     */
    "CENTER": "CENTER",

    /**
     * value: "LEFT"
     * @const
     */
    "LEFT": "LEFT",

    /**
     * value: "RIGHT"
     * @const
     */
    "RIGHT": "RIGHT",

    /**
     * value: "ABOVE"
     * @const
     */
    "ABOVE": "ABOVE",

    /**
     * value: "BELOW"
     * @const
     */
    "BELOW": "BELOW",

    /**
     * value: "INSIDE_END"
     * @const
     */
    "INSIDE_END": "INSIDE_END",

    /**
     * value: "INSIDE_BASE"
     * @const
     */
    "INSIDE_BASE": "INSIDE_BASE",

    /**
     * value: "OUTSIDE_END"
     * @const
     */
    "OUTSIDE_END": "OUTSIDE_END"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
DataLabel['TypeEnum'] = {

    /**
     * value: "DATA_LABEL_TYPE_UNSPECIFIED"
     * @const
     */
    "DATA_LABEL_TYPE_UNSPECIFIED": "DATA_LABEL_TYPE_UNSPECIFIED",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "DATA"
     * @const
     */
    "DATA": "DATA",

    /**
     * value: "CUSTOM"
     * @const
     */
    "CUSTOM": "CUSTOM"
};



export default DataLabel;

