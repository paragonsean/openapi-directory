/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Color from './Color';
import ColorStyle from './ColorStyle';
import DataSourceSheetProperties from './DataSourceSheetProperties';
import GridProperties from './GridProperties';

/**
 * The SheetProperties model module.
 * @module model/SheetProperties
 * @version v4
 */
class SheetProperties {
    /**
     * Constructs a new <code>SheetProperties</code>.
     * Properties of a sheet.
     * @alias module:model/SheetProperties
     */
    constructor() { 
        
        SheetProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SheetProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SheetProperties} obj Optional instance to populate.
     * @return {module:model/SheetProperties} The populated <code>SheetProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SheetProperties();

            if (data.hasOwnProperty('dataSourceSheetProperties')) {
                obj['dataSourceSheetProperties'] = DataSourceSheetProperties.constructFromObject(data['dataSourceSheetProperties']);
            }
            if (data.hasOwnProperty('gridProperties')) {
                obj['gridProperties'] = GridProperties.constructFromObject(data['gridProperties']);
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('rightToLeft')) {
                obj['rightToLeft'] = ApiClient.convertToType(data['rightToLeft'], 'Boolean');
            }
            if (data.hasOwnProperty('sheetId')) {
                obj['sheetId'] = ApiClient.convertToType(data['sheetId'], 'Number');
            }
            if (data.hasOwnProperty('sheetType')) {
                obj['sheetType'] = ApiClient.convertToType(data['sheetType'], 'String');
            }
            if (data.hasOwnProperty('tabColor')) {
                obj['tabColor'] = Color.constructFromObject(data['tabColor']);
            }
            if (data.hasOwnProperty('tabColorStyle')) {
                obj['tabColorStyle'] = ColorStyle.constructFromObject(data['tabColorStyle']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SheetProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SheetProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dataSourceSheetProperties`
        if (data['dataSourceSheetProperties']) { // data not null
          DataSourceSheetProperties.validateJSON(data['dataSourceSheetProperties']);
        }
        // validate the optional field `gridProperties`
        if (data['gridProperties']) { // data not null
          GridProperties.validateJSON(data['gridProperties']);
        }
        // ensure the json data is a string
        if (data['sheetType'] && !(typeof data['sheetType'] === 'string' || data['sheetType'] instanceof String)) {
            throw new Error("Expected the field `sheetType` to be a primitive type in the JSON string but got " + data['sheetType']);
        }
        // validate the optional field `tabColor`
        if (data['tabColor']) { // data not null
          Color.validateJSON(data['tabColor']);
        }
        // validate the optional field `tabColorStyle`
        if (data['tabColorStyle']) { // data not null
          ColorStyle.validateJSON(data['tabColorStyle']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {module:model/DataSourceSheetProperties} dataSourceSheetProperties
 */
SheetProperties.prototype['dataSourceSheetProperties'] = undefined;

/**
 * @member {module:model/GridProperties} gridProperties
 */
SheetProperties.prototype['gridProperties'] = undefined;

/**
 * True if the sheet is hidden in the UI, false if it's visible.
 * @member {Boolean} hidden
 */
SheetProperties.prototype['hidden'] = undefined;

/**
 * The index of the sheet within the spreadsheet. When adding or updating sheet properties, if this field is excluded then the sheet is added or moved to the end of the sheet list. When updating sheet indices or inserting sheets, movement is considered in \"before the move\" indexes. For example, if there were three sheets (S1, S2, S3) in order to move S1 ahead of S2 the index would have to be set to 2. A sheet index update request is ignored if the requested index is identical to the sheets current index or if the requested new index is equal to the current sheet index + 1.
 * @member {Number} index
 */
SheetProperties.prototype['index'] = undefined;

/**
 * True if the sheet is an RTL sheet instead of an LTR sheet.
 * @member {Boolean} rightToLeft
 */
SheetProperties.prototype['rightToLeft'] = undefined;

/**
 * The ID of the sheet. Must be non-negative. This field cannot be changed once set.
 * @member {Number} sheetId
 */
SheetProperties.prototype['sheetId'] = undefined;

/**
 * The type of sheet. Defaults to GRID. This field cannot be changed once set.
 * @member {module:model/SheetProperties.SheetTypeEnum} sheetType
 */
SheetProperties.prototype['sheetType'] = undefined;

/**
 * @member {module:model/Color} tabColor
 */
SheetProperties.prototype['tabColor'] = undefined;

/**
 * @member {module:model/ColorStyle} tabColorStyle
 */
SheetProperties.prototype['tabColorStyle'] = undefined;

/**
 * The name of the sheet.
 * @member {String} title
 */
SheetProperties.prototype['title'] = undefined;





/**
 * Allowed values for the <code>sheetType</code> property.
 * @enum {String}
 * @readonly
 */
SheetProperties['SheetTypeEnum'] = {

    /**
     * value: "SHEET_TYPE_UNSPECIFIED"
     * @const
     */
    "SHEET_TYPE_UNSPECIFIED": "SHEET_TYPE_UNSPECIFIED",

    /**
     * value: "GRID"
     * @const
     */
    "GRID": "GRID",

    /**
     * value: "OBJECT"
     * @const
     */
    "OBJECT": "OBJECT",

    /**
     * value: "DATA_SOURCE"
     * @const
     */
    "DATA_SOURCE": "DATA_SOURCE"
};



export default SheetProperties;

