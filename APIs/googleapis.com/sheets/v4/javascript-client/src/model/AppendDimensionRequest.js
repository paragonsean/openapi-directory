/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AppendDimensionRequest model module.
 * @module model/AppendDimensionRequest
 * @version v4
 */
class AppendDimensionRequest {
    /**
     * Constructs a new <code>AppendDimensionRequest</code>.
     * Appends rows or columns to the end of a sheet.
     * @alias module:model/AppendDimensionRequest
     */
    constructor() { 
        
        AppendDimensionRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AppendDimensionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppendDimensionRequest} obj Optional instance to populate.
     * @return {module:model/AppendDimensionRequest} The populated <code>AppendDimensionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppendDimensionRequest();

            if (data.hasOwnProperty('dimension')) {
                obj['dimension'] = ApiClient.convertToType(data['dimension'], 'String');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('sheetId')) {
                obj['sheetId'] = ApiClient.convertToType(data['sheetId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppendDimensionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppendDimensionRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dimension'] && !(typeof data['dimension'] === 'string' || data['dimension'] instanceof String)) {
            throw new Error("Expected the field `dimension` to be a primitive type in the JSON string but got " + data['dimension']);
        }

        return true;
    }


}



/**
 * Whether rows or columns should be appended.
 * @member {module:model/AppendDimensionRequest.DimensionEnum} dimension
 */
AppendDimensionRequest.prototype['dimension'] = undefined;

/**
 * The number of rows or columns to append.
 * @member {Number} length
 */
AppendDimensionRequest.prototype['length'] = undefined;

/**
 * The sheet to append rows or columns to.
 * @member {Number} sheetId
 */
AppendDimensionRequest.prototype['sheetId'] = undefined;





/**
 * Allowed values for the <code>dimension</code> property.
 * @enum {String}
 * @readonly
 */
AppendDimensionRequest['DimensionEnum'] = {

    /**
     * value: "DIMENSION_UNSPECIFIED"
     * @const
     */
    "DIMENSION_UNSPECIFIED": "DIMENSION_UNSPECIFIED",

    /**
     * value: "ROWS"
     * @const
     */
    "ROWS": "ROWS",

    /**
     * value: "COLUMNS"
     * @const
     */
    "COLUMNS": "COLUMNS"
};



export default AppendDimensionRequest;

