/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConditionValue model module.
 * @module model/ConditionValue
 * @version v4
 */
class ConditionValue {
    /**
     * Constructs a new <code>ConditionValue</code>.
     * The value of the condition.
     * @alias module:model/ConditionValue
     */
    constructor() { 
        
        ConditionValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConditionValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConditionValue} obj Optional instance to populate.
     * @return {module:model/ConditionValue} The populated <code>ConditionValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConditionValue();

            if (data.hasOwnProperty('relativeDate')) {
                obj['relativeDate'] = ApiClient.convertToType(data['relativeDate'], 'String');
            }
            if (data.hasOwnProperty('userEnteredValue')) {
                obj['userEnteredValue'] = ApiClient.convertToType(data['userEnteredValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConditionValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConditionValue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['relativeDate'] && !(typeof data['relativeDate'] === 'string' || data['relativeDate'] instanceof String)) {
            throw new Error("Expected the field `relativeDate` to be a primitive type in the JSON string but got " + data['relativeDate']);
        }
        // ensure the json data is a string
        if (data['userEnteredValue'] && !(typeof data['userEnteredValue'] === 'string' || data['userEnteredValue'] instanceof String)) {
            throw new Error("Expected the field `userEnteredValue` to be a primitive type in the JSON string but got " + data['userEnteredValue']);
        }

        return true;
    }


}



/**
 * A relative date (based on the current date). Valid only if the type is DATE_BEFORE, DATE_AFTER, DATE_ON_OR_BEFORE or DATE_ON_OR_AFTER. Relative dates are not supported in data validation. They are supported only in conditional formatting and conditional filters.
 * @member {module:model/ConditionValue.RelativeDateEnum} relativeDate
 */
ConditionValue.prototype['relativeDate'] = undefined;

/**
 * A value the condition is based on. The value is parsed as if the user typed into a cell. Formulas are supported (and must begin with an `=` or a '+').
 * @member {String} userEnteredValue
 */
ConditionValue.prototype['userEnteredValue'] = undefined;





/**
 * Allowed values for the <code>relativeDate</code> property.
 * @enum {String}
 * @readonly
 */
ConditionValue['RelativeDateEnum'] = {

    /**
     * value: "RELATIVE_DATE_UNSPECIFIED"
     * @const
     */
    "RELATIVE_DATE_UNSPECIFIED": "RELATIVE_DATE_UNSPECIFIED",

    /**
     * value: "PAST_YEAR"
     * @const
     */
    "PAST_YEAR": "PAST_YEAR",

    /**
     * value: "PAST_MONTH"
     * @const
     */
    "PAST_MONTH": "PAST_MONTH",

    /**
     * value: "PAST_WEEK"
     * @const
     */
    "PAST_WEEK": "PAST_WEEK",

    /**
     * value: "YESTERDAY"
     * @const
     */
    "YESTERDAY": "YESTERDAY",

    /**
     * value: "TODAY"
     * @const
     */
    "TODAY": "TODAY",

    /**
     * value: "TOMORROW"
     * @const
     */
    "TOMORROW": "TOMORROW"
};



export default ConditionValue;

