/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataSource from './DataSource';
import DataSourceRefreshSchedule from './DataSourceRefreshSchedule';
import DeveloperMetadata from './DeveloperMetadata';
import NamedRange from './NamedRange';
import Sheet from './Sheet';
import SpreadsheetProperties from './SpreadsheetProperties';

/**
 * The Spreadsheet model module.
 * @module model/Spreadsheet
 * @version v4
 */
class Spreadsheet {
    /**
     * Constructs a new <code>Spreadsheet</code>.
     * Resource that represents a spreadsheet.
     * @alias module:model/Spreadsheet
     */
    constructor() { 
        
        Spreadsheet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Spreadsheet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Spreadsheet} obj Optional instance to populate.
     * @return {module:model/Spreadsheet} The populated <code>Spreadsheet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Spreadsheet();

            if (data.hasOwnProperty('dataSourceSchedules')) {
                obj['dataSourceSchedules'] = ApiClient.convertToType(data['dataSourceSchedules'], [DataSourceRefreshSchedule]);
            }
            if (data.hasOwnProperty('dataSources')) {
                obj['dataSources'] = ApiClient.convertToType(data['dataSources'], [DataSource]);
            }
            if (data.hasOwnProperty('developerMetadata')) {
                obj['developerMetadata'] = ApiClient.convertToType(data['developerMetadata'], [DeveloperMetadata]);
            }
            if (data.hasOwnProperty('namedRanges')) {
                obj['namedRanges'] = ApiClient.convertToType(data['namedRanges'], [NamedRange]);
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = SpreadsheetProperties.constructFromObject(data['properties']);
            }
            if (data.hasOwnProperty('sheets')) {
                obj['sheets'] = ApiClient.convertToType(data['sheets'], [Sheet]);
            }
            if (data.hasOwnProperty('spreadsheetId')) {
                obj['spreadsheetId'] = ApiClient.convertToType(data['spreadsheetId'], 'String');
            }
            if (data.hasOwnProperty('spreadsheetUrl')) {
                obj['spreadsheetUrl'] = ApiClient.convertToType(data['spreadsheetUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Spreadsheet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Spreadsheet</code>.
     */
    static validateJSON(data) {
        if (data['dataSourceSchedules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataSourceSchedules'])) {
                throw new Error("Expected the field `dataSourceSchedules` to be an array in the JSON data but got " + data['dataSourceSchedules']);
            }
            // validate the optional field `dataSourceSchedules` (array)
            for (const item of data['dataSourceSchedules']) {
                DataSourceRefreshSchedule.validateJSON(item);
            };
        }
        if (data['dataSources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataSources'])) {
                throw new Error("Expected the field `dataSources` to be an array in the JSON data but got " + data['dataSources']);
            }
            // validate the optional field `dataSources` (array)
            for (const item of data['dataSources']) {
                DataSource.validateJSON(item);
            };
        }
        if (data['developerMetadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['developerMetadata'])) {
                throw new Error("Expected the field `developerMetadata` to be an array in the JSON data but got " + data['developerMetadata']);
            }
            // validate the optional field `developerMetadata` (array)
            for (const item of data['developerMetadata']) {
                DeveloperMetadata.validateJSON(item);
            };
        }
        if (data['namedRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['namedRanges'])) {
                throw new Error("Expected the field `namedRanges` to be an array in the JSON data but got " + data['namedRanges']);
            }
            // validate the optional field `namedRanges` (array)
            for (const item of data['namedRanges']) {
                NamedRange.validateJSON(item);
            };
        }
        // validate the optional field `properties`
        if (data['properties']) { // data not null
          SpreadsheetProperties.validateJSON(data['properties']);
        }
        if (data['sheets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sheets'])) {
                throw new Error("Expected the field `sheets` to be an array in the JSON data but got " + data['sheets']);
            }
            // validate the optional field `sheets` (array)
            for (const item of data['sheets']) {
                Sheet.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['spreadsheetId'] && !(typeof data['spreadsheetId'] === 'string' || data['spreadsheetId'] instanceof String)) {
            throw new Error("Expected the field `spreadsheetId` to be a primitive type in the JSON string but got " + data['spreadsheetId']);
        }
        // ensure the json data is a string
        if (data['spreadsheetUrl'] && !(typeof data['spreadsheetUrl'] === 'string' || data['spreadsheetUrl'] instanceof String)) {
            throw new Error("Expected the field `spreadsheetUrl` to be a primitive type in the JSON string but got " + data['spreadsheetUrl']);
        }

        return true;
    }


}



/**
 * Output only. A list of data source refresh schedules.
 * @member {Array.<module:model/DataSourceRefreshSchedule>} dataSourceSchedules
 */
Spreadsheet.prototype['dataSourceSchedules'] = undefined;

/**
 * A list of external data sources connected with the spreadsheet.
 * @member {Array.<module:model/DataSource>} dataSources
 */
Spreadsheet.prototype['dataSources'] = undefined;

/**
 * The developer metadata associated with a spreadsheet.
 * @member {Array.<module:model/DeveloperMetadata>} developerMetadata
 */
Spreadsheet.prototype['developerMetadata'] = undefined;

/**
 * The named ranges defined in a spreadsheet.
 * @member {Array.<module:model/NamedRange>} namedRanges
 */
Spreadsheet.prototype['namedRanges'] = undefined;

/**
 * @member {module:model/SpreadsheetProperties} properties
 */
Spreadsheet.prototype['properties'] = undefined;

/**
 * The sheets that are part of a spreadsheet.
 * @member {Array.<module:model/Sheet>} sheets
 */
Spreadsheet.prototype['sheets'] = undefined;

/**
 * The ID of the spreadsheet. This field is read-only.
 * @member {String} spreadsheetId
 */
Spreadsheet.prototype['spreadsheetId'] = undefined;

/**
 * The url of the spreadsheet. This field is read-only.
 * @member {String} spreadsheetUrl
 */
Spreadsheet.prototype['spreadsheetUrl'] = undefined;






export default Spreadsheet;

