/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataFilter from './DataFilter';
import DeveloperMetadata from './DeveloperMetadata';

/**
 * The UpdateDeveloperMetadataRequest model module.
 * @module model/UpdateDeveloperMetadataRequest
 * @version v4
 */
class UpdateDeveloperMetadataRequest {
    /**
     * Constructs a new <code>UpdateDeveloperMetadataRequest</code>.
     * A request to update properties of developer metadata. Updates the properties of the developer metadata selected by the filters to the values provided in the DeveloperMetadata resource. Callers must specify the properties they wish to update in the fields parameter, as well as specify at least one DataFilter matching the metadata they wish to update.
     * @alias module:model/UpdateDeveloperMetadataRequest
     */
    constructor() { 
        
        UpdateDeveloperMetadataRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateDeveloperMetadataRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateDeveloperMetadataRequest} obj Optional instance to populate.
     * @return {module:model/UpdateDeveloperMetadataRequest} The populated <code>UpdateDeveloperMetadataRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateDeveloperMetadataRequest();

            if (data.hasOwnProperty('dataFilters')) {
                obj['dataFilters'] = ApiClient.convertToType(data['dataFilters'], [DataFilter]);
            }
            if (data.hasOwnProperty('developerMetadata')) {
                obj['developerMetadata'] = DeveloperMetadata.constructFromObject(data['developerMetadata']);
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateDeveloperMetadataRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateDeveloperMetadataRequest</code>.
     */
    static validateJSON(data) {
        if (data['dataFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataFilters'])) {
                throw new Error("Expected the field `dataFilters` to be an array in the JSON data but got " + data['dataFilters']);
            }
            // validate the optional field `dataFilters` (array)
            for (const item of data['dataFilters']) {
                DataFilter.validateJSON(item);
            };
        }
        // validate the optional field `developerMetadata`
        if (data['developerMetadata']) { // data not null
          DeveloperMetadata.validateJSON(data['developerMetadata']);
        }
        // ensure the json data is a string
        if (data['fields'] && !(typeof data['fields'] === 'string' || data['fields'] instanceof String)) {
            throw new Error("Expected the field `fields` to be a primitive type in the JSON string but got " + data['fields']);
        }

        return true;
    }


}



/**
 * The filters matching the developer metadata entries to update.
 * @member {Array.<module:model/DataFilter>} dataFilters
 */
UpdateDeveloperMetadataRequest.prototype['dataFilters'] = undefined;

/**
 * @member {module:model/DeveloperMetadata} developerMetadata
 */
UpdateDeveloperMetadataRequest.prototype['developerMetadata'] = undefined;

/**
 * The fields that should be updated. At least one field must be specified. The root `developerMetadata` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field.
 * @member {String} fields
 */
UpdateDeveloperMetadataRequest.prototype['fields'] = undefined;






export default UpdateDeveloperMetadataRequest;

