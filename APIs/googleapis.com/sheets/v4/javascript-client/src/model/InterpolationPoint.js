/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Color from './Color';
import ColorStyle from './ColorStyle';

/**
 * The InterpolationPoint model module.
 * @module model/InterpolationPoint
 * @version v4
 */
class InterpolationPoint {
    /**
     * Constructs a new <code>InterpolationPoint</code>.
     * A single interpolation point on a gradient conditional format. These pin the gradient color scale according to the color, type and value chosen.
     * @alias module:model/InterpolationPoint
     */
    constructor() { 
        
        InterpolationPoint.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InterpolationPoint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InterpolationPoint} obj Optional instance to populate.
     * @return {module:model/InterpolationPoint} The populated <code>InterpolationPoint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InterpolationPoint();

            if (data.hasOwnProperty('color')) {
                obj['color'] = Color.constructFromObject(data['color']);
            }
            if (data.hasOwnProperty('colorStyle')) {
                obj['colorStyle'] = ColorStyle.constructFromObject(data['colorStyle']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InterpolationPoint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InterpolationPoint</code>.
     */
    static validateJSON(data) {
        // validate the optional field `color`
        if (data['color']) { // data not null
          Color.validateJSON(data['color']);
        }
        // validate the optional field `colorStyle`
        if (data['colorStyle']) { // data not null
          ColorStyle.validateJSON(data['colorStyle']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * @member {module:model/Color} color
 */
InterpolationPoint.prototype['color'] = undefined;

/**
 * @member {module:model/ColorStyle} colorStyle
 */
InterpolationPoint.prototype['colorStyle'] = undefined;

/**
 * How the value should be interpreted.
 * @member {module:model/InterpolationPoint.TypeEnum} type
 */
InterpolationPoint.prototype['type'] = undefined;

/**
 * The value this interpolation point uses. May be a formula. Unused if type is MIN or MAX.
 * @member {String} value
 */
InterpolationPoint.prototype['value'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
InterpolationPoint['TypeEnum'] = {

    /**
     * value: "INTERPOLATION_POINT_TYPE_UNSPECIFIED"
     * @const
     */
    "INTERPOLATION_POINT_TYPE_UNSPECIFIED": "INTERPOLATION_POINT_TYPE_UNSPECIFIED",

    /**
     * value: "MIN"
     * @const
     */
    "MIN": "MIN",

    /**
     * value: "MAX"
     * @const
     */
    "MAX": "MAX",

    /**
     * value: "NUMBER"
     * @const
     */
    "NUMBER": "NUMBER",

    /**
     * value: "PERCENT"
     * @const
     */
    "PERCENT": "PERCENT",

    /**
     * value: "PERCENTILE"
     * @const
     */
    "PERCENTILE": "PERCENTILE"
};



export default InterpolationPoint;

