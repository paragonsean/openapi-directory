/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataLabel from './DataLabel';
import LineStyle from './LineStyle';
import WaterfallChartDomain from './WaterfallChartDomain';
import WaterfallChartSeries from './WaterfallChartSeries';

/**
 * The WaterfallChartSpec model module.
 * @module model/WaterfallChartSpec
 * @version v4
 */
class WaterfallChartSpec {
    /**
     * Constructs a new <code>WaterfallChartSpec</code>.
     * A waterfall chart.
     * @alias module:model/WaterfallChartSpec
     */
    constructor() { 
        
        WaterfallChartSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WaterfallChartSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WaterfallChartSpec} obj Optional instance to populate.
     * @return {module:model/WaterfallChartSpec} The populated <code>WaterfallChartSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WaterfallChartSpec();

            if (data.hasOwnProperty('connectorLineStyle')) {
                obj['connectorLineStyle'] = LineStyle.constructFromObject(data['connectorLineStyle']);
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = WaterfallChartDomain.constructFromObject(data['domain']);
            }
            if (data.hasOwnProperty('firstValueIsTotal')) {
                obj['firstValueIsTotal'] = ApiClient.convertToType(data['firstValueIsTotal'], 'Boolean');
            }
            if (data.hasOwnProperty('hideConnectorLines')) {
                obj['hideConnectorLines'] = ApiClient.convertToType(data['hideConnectorLines'], 'Boolean');
            }
            if (data.hasOwnProperty('series')) {
                obj['series'] = ApiClient.convertToType(data['series'], [WaterfallChartSeries]);
            }
            if (data.hasOwnProperty('stackedType')) {
                obj['stackedType'] = ApiClient.convertToType(data['stackedType'], 'String');
            }
            if (data.hasOwnProperty('totalDataLabel')) {
                obj['totalDataLabel'] = DataLabel.constructFromObject(data['totalDataLabel']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WaterfallChartSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WaterfallChartSpec</code>.
     */
    static validateJSON(data) {
        // validate the optional field `connectorLineStyle`
        if (data['connectorLineStyle']) { // data not null
          LineStyle.validateJSON(data['connectorLineStyle']);
        }
        // validate the optional field `domain`
        if (data['domain']) { // data not null
          WaterfallChartDomain.validateJSON(data['domain']);
        }
        if (data['series']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['series'])) {
                throw new Error("Expected the field `series` to be an array in the JSON data but got " + data['series']);
            }
            // validate the optional field `series` (array)
            for (const item of data['series']) {
                WaterfallChartSeries.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['stackedType'] && !(typeof data['stackedType'] === 'string' || data['stackedType'] instanceof String)) {
            throw new Error("Expected the field `stackedType` to be a primitive type in the JSON string but got " + data['stackedType']);
        }
        // validate the optional field `totalDataLabel`
        if (data['totalDataLabel']) { // data not null
          DataLabel.validateJSON(data['totalDataLabel']);
        }

        return true;
    }


}



/**
 * @member {module:model/LineStyle} connectorLineStyle
 */
WaterfallChartSpec.prototype['connectorLineStyle'] = undefined;

/**
 * @member {module:model/WaterfallChartDomain} domain
 */
WaterfallChartSpec.prototype['domain'] = undefined;

/**
 * True to interpret the first value as a total.
 * @member {Boolean} firstValueIsTotal
 */
WaterfallChartSpec.prototype['firstValueIsTotal'] = undefined;

/**
 * True to hide connector lines between columns.
 * @member {Boolean} hideConnectorLines
 */
WaterfallChartSpec.prototype['hideConnectorLines'] = undefined;

/**
 * The data this waterfall chart is visualizing.
 * @member {Array.<module:model/WaterfallChartSeries>} series
 */
WaterfallChartSpec.prototype['series'] = undefined;

/**
 * The stacked type.
 * @member {module:model/WaterfallChartSpec.StackedTypeEnum} stackedType
 */
WaterfallChartSpec.prototype['stackedType'] = undefined;

/**
 * @member {module:model/DataLabel} totalDataLabel
 */
WaterfallChartSpec.prototype['totalDataLabel'] = undefined;





/**
 * Allowed values for the <code>stackedType</code> property.
 * @enum {String}
 * @readonly
 */
WaterfallChartSpec['StackedTypeEnum'] = {

    /**
     * value: "WATERFALL_STACKED_TYPE_UNSPECIFIED"
     * @const
     */
    "WATERFALL_STACKED_TYPE_UNSPECIFIED": "WATERFALL_STACKED_TYPE_UNSPECIFIED",

    /**
     * value: "STACKED"
     * @const
     */
    "STACKED": "STACKED",

    /**
     * value: "SEQUENTIAL"
     * @const
     */
    "SEQUENTIAL": "SEQUENTIAL"
};



export default WaterfallChartSpec;

