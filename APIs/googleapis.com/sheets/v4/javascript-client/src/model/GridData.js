/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DimensionProperties from './DimensionProperties';
import RowData from './RowData';

/**
 * The GridData model module.
 * @module model/GridData
 * @version v4
 */
class GridData {
    /**
     * Constructs a new <code>GridData</code>.
     * Data in the grid, as well as metadata about the dimensions.
     * @alias module:model/GridData
     */
    constructor() { 
        
        GridData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GridData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GridData} obj Optional instance to populate.
     * @return {module:model/GridData} The populated <code>GridData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GridData();

            if (data.hasOwnProperty('columnMetadata')) {
                obj['columnMetadata'] = ApiClient.convertToType(data['columnMetadata'], [DimensionProperties]);
            }
            if (data.hasOwnProperty('rowData')) {
                obj['rowData'] = ApiClient.convertToType(data['rowData'], [RowData]);
            }
            if (data.hasOwnProperty('rowMetadata')) {
                obj['rowMetadata'] = ApiClient.convertToType(data['rowMetadata'], [DimensionProperties]);
            }
            if (data.hasOwnProperty('startColumn')) {
                obj['startColumn'] = ApiClient.convertToType(data['startColumn'], 'Number');
            }
            if (data.hasOwnProperty('startRow')) {
                obj['startRow'] = ApiClient.convertToType(data['startRow'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GridData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GridData</code>.
     */
    static validateJSON(data) {
        if (data['columnMetadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['columnMetadata'])) {
                throw new Error("Expected the field `columnMetadata` to be an array in the JSON data but got " + data['columnMetadata']);
            }
            // validate the optional field `columnMetadata` (array)
            for (const item of data['columnMetadata']) {
                DimensionProperties.validateJSON(item);
            };
        }
        if (data['rowData']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rowData'])) {
                throw new Error("Expected the field `rowData` to be an array in the JSON data but got " + data['rowData']);
            }
            // validate the optional field `rowData` (array)
            for (const item of data['rowData']) {
                RowData.validateJSON(item);
            };
        }
        if (data['rowMetadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rowMetadata'])) {
                throw new Error("Expected the field `rowMetadata` to be an array in the JSON data but got " + data['rowMetadata']);
            }
            // validate the optional field `rowMetadata` (array)
            for (const item of data['rowMetadata']) {
                DimensionProperties.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Metadata about the requested columns in the grid, starting with the column in start_column.
 * @member {Array.<module:model/DimensionProperties>} columnMetadata
 */
GridData.prototype['columnMetadata'] = undefined;

/**
 * The data in the grid, one entry per row, starting with the row in startRow. The values in RowData will correspond to columns starting at start_column.
 * @member {Array.<module:model/RowData>} rowData
 */
GridData.prototype['rowData'] = undefined;

/**
 * Metadata about the requested rows in the grid, starting with the row in start_row.
 * @member {Array.<module:model/DimensionProperties>} rowMetadata
 */
GridData.prototype['rowMetadata'] = undefined;

/**
 * The first column this GridData refers to, zero-based.
 * @member {Number} startColumn
 */
GridData.prototype['startColumn'] = undefined;

/**
 * The first row this GridData refers to, zero-based.
 * @member {Number} startRow
 */
GridData.prototype['startRow'] = undefined;






export default GridData;

