/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorValue from './ErrorValue';

/**
 * The ExtendedValue model module.
 * @module model/ExtendedValue
 * @version v4
 */
class ExtendedValue {
    /**
     * Constructs a new <code>ExtendedValue</code>.
     * The kinds of value that a cell in a spreadsheet can have.
     * @alias module:model/ExtendedValue
     */
    constructor() { 
        
        ExtendedValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExtendedValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExtendedValue} obj Optional instance to populate.
     * @return {module:model/ExtendedValue} The populated <code>ExtendedValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExtendedValue();

            if (data.hasOwnProperty('boolValue')) {
                obj['boolValue'] = ApiClient.convertToType(data['boolValue'], 'Boolean');
            }
            if (data.hasOwnProperty('errorValue')) {
                obj['errorValue'] = ErrorValue.constructFromObject(data['errorValue']);
            }
            if (data.hasOwnProperty('formulaValue')) {
                obj['formulaValue'] = ApiClient.convertToType(data['formulaValue'], 'String');
            }
            if (data.hasOwnProperty('numberValue')) {
                obj['numberValue'] = ApiClient.convertToType(data['numberValue'], 'Number');
            }
            if (data.hasOwnProperty('stringValue')) {
                obj['stringValue'] = ApiClient.convertToType(data['stringValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExtendedValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExtendedValue</code>.
     */
    static validateJSON(data) {
        // validate the optional field `errorValue`
        if (data['errorValue']) { // data not null
          ErrorValue.validateJSON(data['errorValue']);
        }
        // ensure the json data is a string
        if (data['formulaValue'] && !(typeof data['formulaValue'] === 'string' || data['formulaValue'] instanceof String)) {
            throw new Error("Expected the field `formulaValue` to be a primitive type in the JSON string but got " + data['formulaValue']);
        }
        // ensure the json data is a string
        if (data['stringValue'] && !(typeof data['stringValue'] === 'string' || data['stringValue'] instanceof String)) {
            throw new Error("Expected the field `stringValue` to be a primitive type in the JSON string but got " + data['stringValue']);
        }

        return true;
    }


}



/**
 * Represents a boolean value.
 * @member {Boolean} boolValue
 */
ExtendedValue.prototype['boolValue'] = undefined;

/**
 * @member {module:model/ErrorValue} errorValue
 */
ExtendedValue.prototype['errorValue'] = undefined;

/**
 * Represents a formula.
 * @member {String} formulaValue
 */
ExtendedValue.prototype['formulaValue'] = undefined;

/**
 * Represents a double value. Note: Dates, Times and DateTimes are represented as doubles in SERIAL_NUMBER format.
 * @member {Number} numberValue
 */
ExtendedValue.prototype['numberValue'] = undefined;

/**
 * Represents a string value. Leading single quotes are not included. For example, if the user typed `'123` into the UI, this would be represented as a `stringValue` of `\"123\"`.
 * @member {String} stringValue
 */
ExtendedValue.prototype['stringValue'] = undefined;






export default ExtendedValue;

