/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GridCoordinate from './GridCoordinate';

/**
 * The PasteDataRequest model module.
 * @module model/PasteDataRequest
 * @version v4
 */
class PasteDataRequest {
    /**
     * Constructs a new <code>PasteDataRequest</code>.
     * Inserts data into the spreadsheet starting at the specified coordinate.
     * @alias module:model/PasteDataRequest
     */
    constructor() { 
        
        PasteDataRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PasteDataRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PasteDataRequest} obj Optional instance to populate.
     * @return {module:model/PasteDataRequest} The populated <code>PasteDataRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PasteDataRequest();

            if (data.hasOwnProperty('coordinate')) {
                obj['coordinate'] = GridCoordinate.constructFromObject(data['coordinate']);
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('delimiter')) {
                obj['delimiter'] = ApiClient.convertToType(data['delimiter'], 'String');
            }
            if (data.hasOwnProperty('html')) {
                obj['html'] = ApiClient.convertToType(data['html'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PasteDataRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PasteDataRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `coordinate`
        if (data['coordinate']) { // data not null
          GridCoordinate.validateJSON(data['coordinate']);
        }
        // ensure the json data is a string
        if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
            throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
        }
        // ensure the json data is a string
        if (data['delimiter'] && !(typeof data['delimiter'] === 'string' || data['delimiter'] instanceof String)) {
            throw new Error("Expected the field `delimiter` to be a primitive type in the JSON string but got " + data['delimiter']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/GridCoordinate} coordinate
 */
PasteDataRequest.prototype['coordinate'] = undefined;

/**
 * The data to insert.
 * @member {String} data
 */
PasteDataRequest.prototype['data'] = undefined;

/**
 * The delimiter in the data.
 * @member {String} delimiter
 */
PasteDataRequest.prototype['delimiter'] = undefined;

/**
 * True if the data is HTML.
 * @member {Boolean} html
 */
PasteDataRequest.prototype['html'] = undefined;

/**
 * How the data should be pasted.
 * @member {module:model/PasteDataRequest.TypeEnum} type
 */
PasteDataRequest.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
PasteDataRequest['TypeEnum'] = {

    /**
     * value: "PASTE_NORMAL"
     * @const
     */
    "NORMAL": "PASTE_NORMAL",

    /**
     * value: "PASTE_VALUES"
     * @const
     */
    "VALUES": "PASTE_VALUES",

    /**
     * value: "PASTE_FORMAT"
     * @const
     */
    "FORMAT": "PASTE_FORMAT",

    /**
     * value: "PASTE_NO_BORDERS"
     * @const
     */
    "NO_BORDERS": "PASTE_NO_BORDERS",

    /**
     * value: "PASTE_FORMULA"
     * @const
     */
    "FORMULA": "PASTE_FORMULA",

    /**
     * value: "PASTE_DATA_VALIDATION"
     * @const
     */
    "DATA_VALIDATION": "PASTE_DATA_VALIDATION",

    /**
     * value: "PASTE_CONDITIONAL_FORMATTING"
     * @const
     */
    "CONDITIONAL_FORMATTING": "PASTE_CONDITIONAL_FORMATTING"
};



export default PasteDataRequest;

