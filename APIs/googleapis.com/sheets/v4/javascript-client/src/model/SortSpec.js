/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Color from './Color';
import ColorStyle from './ColorStyle';
import DataSourceColumnReference from './DataSourceColumnReference';

/**
 * The SortSpec model module.
 * @module model/SortSpec
 * @version v4
 */
class SortSpec {
    /**
     * Constructs a new <code>SortSpec</code>.
     * A sort order associated with a specific column or row.
     * @alias module:model/SortSpec
     */
    constructor() { 
        
        SortSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SortSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SortSpec} obj Optional instance to populate.
     * @return {module:model/SortSpec} The populated <code>SortSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SortSpec();

            if (data.hasOwnProperty('backgroundColor')) {
                obj['backgroundColor'] = Color.constructFromObject(data['backgroundColor']);
            }
            if (data.hasOwnProperty('backgroundColorStyle')) {
                obj['backgroundColorStyle'] = ColorStyle.constructFromObject(data['backgroundColorStyle']);
            }
            if (data.hasOwnProperty('dataSourceColumnReference')) {
                obj['dataSourceColumnReference'] = DataSourceColumnReference.constructFromObject(data['dataSourceColumnReference']);
            }
            if (data.hasOwnProperty('dimensionIndex')) {
                obj['dimensionIndex'] = ApiClient.convertToType(data['dimensionIndex'], 'Number');
            }
            if (data.hasOwnProperty('foregroundColor')) {
                obj['foregroundColor'] = Color.constructFromObject(data['foregroundColor']);
            }
            if (data.hasOwnProperty('foregroundColorStyle')) {
                obj['foregroundColorStyle'] = ColorStyle.constructFromObject(data['foregroundColorStyle']);
            }
            if (data.hasOwnProperty('sortOrder')) {
                obj['sortOrder'] = ApiClient.convertToType(data['sortOrder'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SortSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SortSpec</code>.
     */
    static validateJSON(data) {
        // validate the optional field `backgroundColor`
        if (data['backgroundColor']) { // data not null
          Color.validateJSON(data['backgroundColor']);
        }
        // validate the optional field `backgroundColorStyle`
        if (data['backgroundColorStyle']) { // data not null
          ColorStyle.validateJSON(data['backgroundColorStyle']);
        }
        // validate the optional field `dataSourceColumnReference`
        if (data['dataSourceColumnReference']) { // data not null
          DataSourceColumnReference.validateJSON(data['dataSourceColumnReference']);
        }
        // validate the optional field `foregroundColor`
        if (data['foregroundColor']) { // data not null
          Color.validateJSON(data['foregroundColor']);
        }
        // validate the optional field `foregroundColorStyle`
        if (data['foregroundColorStyle']) { // data not null
          ColorStyle.validateJSON(data['foregroundColorStyle']);
        }
        // ensure the json data is a string
        if (data['sortOrder'] && !(typeof data['sortOrder'] === 'string' || data['sortOrder'] instanceof String)) {
            throw new Error("Expected the field `sortOrder` to be a primitive type in the JSON string but got " + data['sortOrder']);
        }

        return true;
    }


}



/**
 * @member {module:model/Color} backgroundColor
 */
SortSpec.prototype['backgroundColor'] = undefined;

/**
 * @member {module:model/ColorStyle} backgroundColorStyle
 */
SortSpec.prototype['backgroundColorStyle'] = undefined;

/**
 * @member {module:model/DataSourceColumnReference} dataSourceColumnReference
 */
SortSpec.prototype['dataSourceColumnReference'] = undefined;

/**
 * The dimension the sort should be applied to.
 * @member {Number} dimensionIndex
 */
SortSpec.prototype['dimensionIndex'] = undefined;

/**
 * @member {module:model/Color} foregroundColor
 */
SortSpec.prototype['foregroundColor'] = undefined;

/**
 * @member {module:model/ColorStyle} foregroundColorStyle
 */
SortSpec.prototype['foregroundColorStyle'] = undefined;

/**
 * The order data should be sorted.
 * @member {module:model/SortSpec.SortOrderEnum} sortOrder
 */
SortSpec.prototype['sortOrder'] = undefined;





/**
 * Allowed values for the <code>sortOrder</code> property.
 * @enum {String}
 * @readonly
 */
SortSpec['SortOrderEnum'] = {

    /**
     * value: "SORT_ORDER_UNSPECIFIED"
     * @const
     */
    "SORT_ORDER_UNSPECIFIED": "SORT_ORDER_UNSPECIFIED",

    /**
     * value: "ASCENDING"
     * @const
     */
    "ASCENDING": "ASCENDING",

    /**
     * value: "DESCENDING"
     * @const
     */
    "DESCENDING": "DESCENDING"
};



export default SortSpec;

