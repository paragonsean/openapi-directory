/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TextPosition model module.
 * @module model/TextPosition
 * @version v4
 */
class TextPosition {
    /**
     * Constructs a new <code>TextPosition</code>.
     * Position settings for text.
     * @alias module:model/TextPosition
     */
    constructor() { 
        
        TextPosition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TextPosition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextPosition} obj Optional instance to populate.
     * @return {module:model/TextPosition} The populated <code>TextPosition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TextPosition();

            if (data.hasOwnProperty('horizontalAlignment')) {
                obj['horizontalAlignment'] = ApiClient.convertToType(data['horizontalAlignment'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TextPosition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TextPosition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['horizontalAlignment'] && !(typeof data['horizontalAlignment'] === 'string' || data['horizontalAlignment'] instanceof String)) {
            throw new Error("Expected the field `horizontalAlignment` to be a primitive type in the JSON string but got " + data['horizontalAlignment']);
        }

        return true;
    }


}



/**
 * Horizontal alignment setting for the piece of text.
 * @member {module:model/TextPosition.HorizontalAlignmentEnum} horizontalAlignment
 */
TextPosition.prototype['horizontalAlignment'] = undefined;





/**
 * Allowed values for the <code>horizontalAlignment</code> property.
 * @enum {String}
 * @readonly
 */
TextPosition['HorizontalAlignmentEnum'] = {

    /**
     * value: "HORIZONTAL_ALIGN_UNSPECIFIED"
     * @const
     */
    "HORIZONTAL_ALIGN_UNSPECIFIED": "HORIZONTAL_ALIGN_UNSPECIFIED",

    /**
     * value: "LEFT"
     * @const
     */
    "LEFT": "LEFT",

    /**
     * value: "CENTER"
     * @const
     */
    "CENTER": "CENTER",

    /**
     * value: "RIGHT"
     * @const
     */
    "RIGHT": "RIGHT"
};



export default TextPosition;

