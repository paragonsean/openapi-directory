/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExtendedValue from './ExtendedValue';

/**
 * The ManualRuleGroup model module.
 * @module model/ManualRuleGroup
 * @version v4
 */
class ManualRuleGroup {
    /**
     * Constructs a new <code>ManualRuleGroup</code>.
     * A group name and a list of items from the source data that should be placed in the group with this name.
     * @alias module:model/ManualRuleGroup
     */
    constructor() { 
        
        ManualRuleGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ManualRuleGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManualRuleGroup} obj Optional instance to populate.
     * @return {module:model/ManualRuleGroup} The populated <code>ManualRuleGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManualRuleGroup();

            if (data.hasOwnProperty('groupName')) {
                obj['groupName'] = ExtendedValue.constructFromObject(data['groupName']);
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [ExtendedValue]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManualRuleGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManualRuleGroup</code>.
     */
    static validateJSON(data) {
        // validate the optional field `groupName`
        if (data['groupName']) { // data not null
          ExtendedValue.validateJSON(data['groupName']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                ExtendedValue.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/ExtendedValue} groupName
 */
ManualRuleGroup.prototype['groupName'] = undefined;

/**
 * The items in the source data that should be placed into this group. Each item may be a string, number, or boolean. Items may appear in at most one group within a given ManualRule. Items that do not appear in any group will appear on their own.
 * @member {Array.<module:model/ExtendedValue>} items
 */
ManualRuleGroup.prototype['items'] = undefined;






export default ManualRuleGroup;

