/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataFilterValueRange from './DataFilterValueRange';

/**
 * The BatchUpdateValuesByDataFilterRequest model module.
 * @module model/BatchUpdateValuesByDataFilterRequest
 * @version v4
 */
class BatchUpdateValuesByDataFilterRequest {
    /**
     * Constructs a new <code>BatchUpdateValuesByDataFilterRequest</code>.
     * The request for updating more than one range of values in a spreadsheet.
     * @alias module:model/BatchUpdateValuesByDataFilterRequest
     */
    constructor() { 
        
        BatchUpdateValuesByDataFilterRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BatchUpdateValuesByDataFilterRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BatchUpdateValuesByDataFilterRequest} obj Optional instance to populate.
     * @return {module:model/BatchUpdateValuesByDataFilterRequest} The populated <code>BatchUpdateValuesByDataFilterRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BatchUpdateValuesByDataFilterRequest();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [DataFilterValueRange]);
            }
            if (data.hasOwnProperty('includeValuesInResponse')) {
                obj['includeValuesInResponse'] = ApiClient.convertToType(data['includeValuesInResponse'], 'Boolean');
            }
            if (data.hasOwnProperty('responseDateTimeRenderOption')) {
                obj['responseDateTimeRenderOption'] = ApiClient.convertToType(data['responseDateTimeRenderOption'], 'String');
            }
            if (data.hasOwnProperty('responseValueRenderOption')) {
                obj['responseValueRenderOption'] = ApiClient.convertToType(data['responseValueRenderOption'], 'String');
            }
            if (data.hasOwnProperty('valueInputOption')) {
                obj['valueInputOption'] = ApiClient.convertToType(data['valueInputOption'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BatchUpdateValuesByDataFilterRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BatchUpdateValuesByDataFilterRequest</code>.
     */
    static validateJSON(data) {
        if (data['data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['data'])) {
                throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
            }
            // validate the optional field `data` (array)
            for (const item of data['data']) {
                DataFilterValueRange.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['responseDateTimeRenderOption'] && !(typeof data['responseDateTimeRenderOption'] === 'string' || data['responseDateTimeRenderOption'] instanceof String)) {
            throw new Error("Expected the field `responseDateTimeRenderOption` to be a primitive type in the JSON string but got " + data['responseDateTimeRenderOption']);
        }
        // ensure the json data is a string
        if (data['responseValueRenderOption'] && !(typeof data['responseValueRenderOption'] === 'string' || data['responseValueRenderOption'] instanceof String)) {
            throw new Error("Expected the field `responseValueRenderOption` to be a primitive type in the JSON string but got " + data['responseValueRenderOption']);
        }
        // ensure the json data is a string
        if (data['valueInputOption'] && !(typeof data['valueInputOption'] === 'string' || data['valueInputOption'] instanceof String)) {
            throw new Error("Expected the field `valueInputOption` to be a primitive type in the JSON string but got " + data['valueInputOption']);
        }

        return true;
    }


}



/**
 * The new values to apply to the spreadsheet. If more than one range is matched by the specified DataFilter the specified values are applied to all of those ranges.
 * @member {Array.<module:model/DataFilterValueRange>} data
 */
BatchUpdateValuesByDataFilterRequest.prototype['data'] = undefined;

/**
 * Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. The `updatedData` field within each of the BatchUpdateValuesResponse.responses contains the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns).
 * @member {Boolean} includeValuesInResponse
 */
BatchUpdateValuesByDataFilterRequest.prototype['includeValuesInResponse'] = undefined;

/**
 * Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
 * @member {module:model/BatchUpdateValuesByDataFilterRequest.ResponseDateTimeRenderOptionEnum} responseDateTimeRenderOption
 */
BatchUpdateValuesByDataFilterRequest.prototype['responseDateTimeRenderOption'] = undefined;

/**
 * Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.
 * @member {module:model/BatchUpdateValuesByDataFilterRequest.ResponseValueRenderOptionEnum} responseValueRenderOption
 */
BatchUpdateValuesByDataFilterRequest.prototype['responseValueRenderOption'] = undefined;

/**
 * How the input data should be interpreted.
 * @member {module:model/BatchUpdateValuesByDataFilterRequest.ValueInputOptionEnum} valueInputOption
 */
BatchUpdateValuesByDataFilterRequest.prototype['valueInputOption'] = undefined;





/**
 * Allowed values for the <code>responseDateTimeRenderOption</code> property.
 * @enum {String}
 * @readonly
 */
BatchUpdateValuesByDataFilterRequest['ResponseDateTimeRenderOptionEnum'] = {

    /**
     * value: "SERIAL_NUMBER"
     * @const
     */
    "SERIAL_NUMBER": "SERIAL_NUMBER",

    /**
     * value: "FORMATTED_STRING"
     * @const
     */
    "FORMATTED_STRING": "FORMATTED_STRING"
};


/**
 * Allowed values for the <code>responseValueRenderOption</code> property.
 * @enum {String}
 * @readonly
 */
BatchUpdateValuesByDataFilterRequest['ResponseValueRenderOptionEnum'] = {

    /**
     * value: "FORMATTED_VALUE"
     * @const
     */
    "FORMATTED_VALUE": "FORMATTED_VALUE",

    /**
     * value: "UNFORMATTED_VALUE"
     * @const
     */
    "UNFORMATTED_VALUE": "UNFORMATTED_VALUE",

    /**
     * value: "FORMULA"
     * @const
     */
    "FORMULA": "FORMULA"
};


/**
 * Allowed values for the <code>valueInputOption</code> property.
 * @enum {String}
 * @readonly
 */
BatchUpdateValuesByDataFilterRequest['ValueInputOptionEnum'] = {

    /**
     * value: "INPUT_VALUE_OPTION_UNSPECIFIED"
     * @const
     */
    "INPUT_VALUE_OPTION_UNSPECIFIED": "INPUT_VALUE_OPTION_UNSPECIFIED",

    /**
     * value: "RAW"
     * @const
     */
    "RAW": "RAW",

    /**
     * value: "USER_ENTERED"
     * @const
     */
    "USER_ENTERED": "USER_ENTERED"
};



export default BatchUpdateValuesByDataFilterRequest;

