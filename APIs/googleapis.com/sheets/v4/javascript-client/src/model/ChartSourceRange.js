/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GridRange from './GridRange';

/**
 * The ChartSourceRange model module.
 * @module model/ChartSourceRange
 * @version v4
 */
class ChartSourceRange {
    /**
     * Constructs a new <code>ChartSourceRange</code>.
     * Source ranges for a chart.
     * @alias module:model/ChartSourceRange
     */
    constructor() { 
        
        ChartSourceRange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChartSourceRange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChartSourceRange} obj Optional instance to populate.
     * @return {module:model/ChartSourceRange} The populated <code>ChartSourceRange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChartSourceRange();

            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], [GridRange]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChartSourceRange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChartSourceRange</code>.
     */
    static validateJSON(data) {
        if (data['sources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sources'])) {
                throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
            }
            // validate the optional field `sources` (array)
            for (const item of data['sources']) {
                GridRange.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The ranges of data for a series or domain. Exactly one dimension must have a length of 1, and all sources in the list must have the same dimension with length 1. The domain (if it exists) & all series must have the same number of source ranges. If using more than one source range, then the source range at a given offset must be in order and contiguous across the domain and series. For example, these are valid configurations: domain sources: A1:A5 series1 sources: B1:B5 series2 sources: D6:D10 domain sources: A1:A5, C10:C12 series1 sources: B1:B5, D10:D12 series2 sources: C1:C5, E10:E12
 * @member {Array.<module:model/GridRange>} sources
 */
ChartSourceRange.prototype['sources'] = undefined;






export default ChartSourceRange;

