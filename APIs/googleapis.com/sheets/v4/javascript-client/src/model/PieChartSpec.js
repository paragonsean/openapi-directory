/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChartData from './ChartData';

/**
 * The PieChartSpec model module.
 * @module model/PieChartSpec
 * @version v4
 */
class PieChartSpec {
    /**
     * Constructs a new <code>PieChartSpec</code>.
     * A pie chart.
     * @alias module:model/PieChartSpec
     */
    constructor() { 
        
        PieChartSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PieChartSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PieChartSpec} obj Optional instance to populate.
     * @return {module:model/PieChartSpec} The populated <code>PieChartSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PieChartSpec();

            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ChartData.constructFromObject(data['domain']);
            }
            if (data.hasOwnProperty('legendPosition')) {
                obj['legendPosition'] = ApiClient.convertToType(data['legendPosition'], 'String');
            }
            if (data.hasOwnProperty('pieHole')) {
                obj['pieHole'] = ApiClient.convertToType(data['pieHole'], 'Number');
            }
            if (data.hasOwnProperty('series')) {
                obj['series'] = ChartData.constructFromObject(data['series']);
            }
            if (data.hasOwnProperty('threeDimensional')) {
                obj['threeDimensional'] = ApiClient.convertToType(data['threeDimensional'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PieChartSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PieChartSpec</code>.
     */
    static validateJSON(data) {
        // validate the optional field `domain`
        if (data['domain']) { // data not null
          ChartData.validateJSON(data['domain']);
        }
        // ensure the json data is a string
        if (data['legendPosition'] && !(typeof data['legendPosition'] === 'string' || data['legendPosition'] instanceof String)) {
            throw new Error("Expected the field `legendPosition` to be a primitive type in the JSON string but got " + data['legendPosition']);
        }
        // validate the optional field `series`
        if (data['series']) { // data not null
          ChartData.validateJSON(data['series']);
        }

        return true;
    }


}



/**
 * @member {module:model/ChartData} domain
 */
PieChartSpec.prototype['domain'] = undefined;

/**
 * Where the legend of the pie chart should be drawn.
 * @member {module:model/PieChartSpec.LegendPositionEnum} legendPosition
 */
PieChartSpec.prototype['legendPosition'] = undefined;

/**
 * The size of the hole in the pie chart.
 * @member {Number} pieHole
 */
PieChartSpec.prototype['pieHole'] = undefined;

/**
 * @member {module:model/ChartData} series
 */
PieChartSpec.prototype['series'] = undefined;

/**
 * True if the pie is three dimensional.
 * @member {Boolean} threeDimensional
 */
PieChartSpec.prototype['threeDimensional'] = undefined;





/**
 * Allowed values for the <code>legendPosition</code> property.
 * @enum {String}
 * @readonly
 */
PieChartSpec['LegendPositionEnum'] = {

    /**
     * value: "PIE_CHART_LEGEND_POSITION_UNSPECIFIED"
     * @const
     */
    "PIE_CHART_LEGEND_POSITION_UNSPECIFIED": "PIE_CHART_LEGEND_POSITION_UNSPECIFIED",

    /**
     * value: "BOTTOM_LEGEND"
     * @const
     */
    "BOTTOM_LEGEND": "BOTTOM_LEGEND",

    /**
     * value: "LEFT_LEGEND"
     * @const
     */
    "LEFT_LEGEND": "LEFT_LEGEND",

    /**
     * value: "RIGHT_LEGEND"
     * @const
     */
    "RIGHT_LEGEND": "RIGHT_LEGEND",

    /**
     * value: "TOP_LEGEND"
     * @const
     */
    "TOP_LEGEND": "TOP_LEGEND",

    /**
     * value: "NO_LEGEND"
     * @const
     */
    "NO_LEGEND": "NO_LEGEND",

    /**
     * value: "LABELED_LEGEND"
     * @const
     */
    "LABELED_LEGEND": "LABELED_LEGEND"
};



export default PieChartSpec;

