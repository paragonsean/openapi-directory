/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataSourceColumnReference from './DataSourceColumnReference';
import PivotGroupLimit from './PivotGroupLimit';
import PivotGroupRule from './PivotGroupRule';
import PivotGroupSortValueBucket from './PivotGroupSortValueBucket';
import PivotGroupValueMetadata from './PivotGroupValueMetadata';

/**
 * The PivotGroup model module.
 * @module model/PivotGroup
 * @version v4
 */
class PivotGroup {
    /**
     * Constructs a new <code>PivotGroup</code>.
     * A single grouping (either row or column) in a pivot table.
     * @alias module:model/PivotGroup
     */
    constructor() { 
        
        PivotGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PivotGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PivotGroup} obj Optional instance to populate.
     * @return {module:model/PivotGroup} The populated <code>PivotGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PivotGroup();

            if (data.hasOwnProperty('dataSourceColumnReference')) {
                obj['dataSourceColumnReference'] = DataSourceColumnReference.constructFromObject(data['dataSourceColumnReference']);
            }
            if (data.hasOwnProperty('groupLimit')) {
                obj['groupLimit'] = PivotGroupLimit.constructFromObject(data['groupLimit']);
            }
            if (data.hasOwnProperty('groupRule')) {
                obj['groupRule'] = PivotGroupRule.constructFromObject(data['groupRule']);
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('repeatHeadings')) {
                obj['repeatHeadings'] = ApiClient.convertToType(data['repeatHeadings'], 'Boolean');
            }
            if (data.hasOwnProperty('showTotals')) {
                obj['showTotals'] = ApiClient.convertToType(data['showTotals'], 'Boolean');
            }
            if (data.hasOwnProperty('sortOrder')) {
                obj['sortOrder'] = ApiClient.convertToType(data['sortOrder'], 'String');
            }
            if (data.hasOwnProperty('sourceColumnOffset')) {
                obj['sourceColumnOffset'] = ApiClient.convertToType(data['sourceColumnOffset'], 'Number');
            }
            if (data.hasOwnProperty('valueBucket')) {
                obj['valueBucket'] = PivotGroupSortValueBucket.constructFromObject(data['valueBucket']);
            }
            if (data.hasOwnProperty('valueMetadata')) {
                obj['valueMetadata'] = ApiClient.convertToType(data['valueMetadata'], [PivotGroupValueMetadata]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PivotGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PivotGroup</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dataSourceColumnReference`
        if (data['dataSourceColumnReference']) { // data not null
          DataSourceColumnReference.validateJSON(data['dataSourceColumnReference']);
        }
        // validate the optional field `groupLimit`
        if (data['groupLimit']) { // data not null
          PivotGroupLimit.validateJSON(data['groupLimit']);
        }
        // validate the optional field `groupRule`
        if (data['groupRule']) { // data not null
          PivotGroupRule.validateJSON(data['groupRule']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['sortOrder'] && !(typeof data['sortOrder'] === 'string' || data['sortOrder'] instanceof String)) {
            throw new Error("Expected the field `sortOrder` to be a primitive type in the JSON string but got " + data['sortOrder']);
        }
        // validate the optional field `valueBucket`
        if (data['valueBucket']) { // data not null
          PivotGroupSortValueBucket.validateJSON(data['valueBucket']);
        }
        if (data['valueMetadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['valueMetadata'])) {
                throw new Error("Expected the field `valueMetadata` to be an array in the JSON data but got " + data['valueMetadata']);
            }
            // validate the optional field `valueMetadata` (array)
            for (const item of data['valueMetadata']) {
                PivotGroupValueMetadata.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/DataSourceColumnReference} dataSourceColumnReference
 */
PivotGroup.prototype['dataSourceColumnReference'] = undefined;

/**
 * @member {module:model/PivotGroupLimit} groupLimit
 */
PivotGroup.prototype['groupLimit'] = undefined;

/**
 * @member {module:model/PivotGroupRule} groupRule
 */
PivotGroup.prototype['groupRule'] = undefined;

/**
 * The labels to use for the row/column groups which can be customized. For example, in the following pivot table, the row label is `Region` (which could be renamed to `State`) and the column label is `Product` (which could be renamed `Item`). Pivot tables created before December 2017 do not have header labels. If you'd like to add header labels to an existing pivot table, please delete the existing pivot table and then create a new pivot table with same parameters. +--------------+---------+-------+ | SUM of Units | Product | | | Region | Pen | Paper | +--------------+---------+-------+ | New York | 345 | 98 | | Oregon | 234 | 123 | | Tennessee | 531 | 415 | +--------------+---------+-------+ | Grand Total | 1110 | 636 | +--------------+---------+-------+
 * @member {String} label
 */
PivotGroup.prototype['label'] = undefined;

/**
 * True if the headings in this pivot group should be repeated. This is only valid for row groupings and is ignored by columns. By default, we minimize repetition of headings by not showing higher level headings where they are the same. For example, even though the third row below corresponds to \"Q1 Mar\", \"Q1\" is not shown because it is redundant with previous rows. Setting repeat_headings to true would cause \"Q1\" to be repeated for \"Feb\" and \"Mar\". +--------------+ | Q1 | Jan | | | Feb | | | Mar | +--------+-----+ | Q1 Total | +--------------+
 * @member {Boolean} repeatHeadings
 */
PivotGroup.prototype['repeatHeadings'] = undefined;

/**
 * True if the pivot table should include the totals for this grouping.
 * @member {Boolean} showTotals
 */
PivotGroup.prototype['showTotals'] = undefined;

/**
 * The order the values in this group should be sorted.
 * @member {module:model/PivotGroup.SortOrderEnum} sortOrder
 */
PivotGroup.prototype['sortOrder'] = undefined;

/**
 * The column offset of the source range that this grouping is based on. For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0` means this group refers to column `C`, whereas the offset `1` would refer to column `D`.
 * @member {Number} sourceColumnOffset
 */
PivotGroup.prototype['sourceColumnOffset'] = undefined;

/**
 * @member {module:model/PivotGroupSortValueBucket} valueBucket
 */
PivotGroup.prototype['valueBucket'] = undefined;

/**
 * Metadata about values in the grouping.
 * @member {Array.<module:model/PivotGroupValueMetadata>} valueMetadata
 */
PivotGroup.prototype['valueMetadata'] = undefined;





/**
 * Allowed values for the <code>sortOrder</code> property.
 * @enum {String}
 * @readonly
 */
PivotGroup['SortOrderEnum'] = {

    /**
     * value: "SORT_ORDER_UNSPECIFIED"
     * @const
     */
    "SORT_ORDER_UNSPECIFIED": "SORT_ORDER_UNSPECIFIED",

    /**
     * value: "ASCENDING"
     * @const
     */
    "ASCENDING": "ASCENDING",

    /**
     * value: "DESCENDING"
     * @const
     */
    "DESCENDING": "DESCENDING"
};



export default PivotGroup;

