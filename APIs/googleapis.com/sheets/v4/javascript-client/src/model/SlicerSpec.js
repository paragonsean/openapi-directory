/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Color from './Color';
import ColorStyle from './ColorStyle';
import FilterCriteria from './FilterCriteria';
import GridRange from './GridRange';
import TextFormat from './TextFormat';

/**
 * The SlicerSpec model module.
 * @module model/SlicerSpec
 * @version v4
 */
class SlicerSpec {
    /**
     * Constructs a new <code>SlicerSpec</code>.
     * The specifications of a slicer.
     * @alias module:model/SlicerSpec
     */
    constructor() { 
        
        SlicerSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SlicerSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SlicerSpec} obj Optional instance to populate.
     * @return {module:model/SlicerSpec} The populated <code>SlicerSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SlicerSpec();

            if (data.hasOwnProperty('applyToPivotTables')) {
                obj['applyToPivotTables'] = ApiClient.convertToType(data['applyToPivotTables'], 'Boolean');
            }
            if (data.hasOwnProperty('backgroundColor')) {
                obj['backgroundColor'] = Color.constructFromObject(data['backgroundColor']);
            }
            if (data.hasOwnProperty('backgroundColorStyle')) {
                obj['backgroundColorStyle'] = ColorStyle.constructFromObject(data['backgroundColorStyle']);
            }
            if (data.hasOwnProperty('columnIndex')) {
                obj['columnIndex'] = ApiClient.convertToType(data['columnIndex'], 'Number');
            }
            if (data.hasOwnProperty('dataRange')) {
                obj['dataRange'] = GridRange.constructFromObject(data['dataRange']);
            }
            if (data.hasOwnProperty('filterCriteria')) {
                obj['filterCriteria'] = FilterCriteria.constructFromObject(data['filterCriteria']);
            }
            if (data.hasOwnProperty('horizontalAlignment')) {
                obj['horizontalAlignment'] = ApiClient.convertToType(data['horizontalAlignment'], 'String');
            }
            if (data.hasOwnProperty('textFormat')) {
                obj['textFormat'] = TextFormat.constructFromObject(data['textFormat']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SlicerSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SlicerSpec</code>.
     */
    static validateJSON(data) {
        // validate the optional field `backgroundColor`
        if (data['backgroundColor']) { // data not null
          Color.validateJSON(data['backgroundColor']);
        }
        // validate the optional field `backgroundColorStyle`
        if (data['backgroundColorStyle']) { // data not null
          ColorStyle.validateJSON(data['backgroundColorStyle']);
        }
        // validate the optional field `dataRange`
        if (data['dataRange']) { // data not null
          GridRange.validateJSON(data['dataRange']);
        }
        // validate the optional field `filterCriteria`
        if (data['filterCriteria']) { // data not null
          FilterCriteria.validateJSON(data['filterCriteria']);
        }
        // ensure the json data is a string
        if (data['horizontalAlignment'] && !(typeof data['horizontalAlignment'] === 'string' || data['horizontalAlignment'] instanceof String)) {
            throw new Error("Expected the field `horizontalAlignment` to be a primitive type in the JSON string but got " + data['horizontalAlignment']);
        }
        // validate the optional field `textFormat`
        if (data['textFormat']) { // data not null
          TextFormat.validateJSON(data['textFormat']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * True if the filter should apply to pivot tables. If not set, default to `True`.
 * @member {Boolean} applyToPivotTables
 */
SlicerSpec.prototype['applyToPivotTables'] = undefined;

/**
 * @member {module:model/Color} backgroundColor
 */
SlicerSpec.prototype['backgroundColor'] = undefined;

/**
 * @member {module:model/ColorStyle} backgroundColorStyle
 */
SlicerSpec.prototype['backgroundColorStyle'] = undefined;

/**
 * The zero-based column index in the data table on which the filter is applied to.
 * @member {Number} columnIndex
 */
SlicerSpec.prototype['columnIndex'] = undefined;

/**
 * @member {module:model/GridRange} dataRange
 */
SlicerSpec.prototype['dataRange'] = undefined;

/**
 * @member {module:model/FilterCriteria} filterCriteria
 */
SlicerSpec.prototype['filterCriteria'] = undefined;

/**
 * The horizontal alignment of title in the slicer. If unspecified, defaults to `LEFT`
 * @member {module:model/SlicerSpec.HorizontalAlignmentEnum} horizontalAlignment
 */
SlicerSpec.prototype['horizontalAlignment'] = undefined;

/**
 * @member {module:model/TextFormat} textFormat
 */
SlicerSpec.prototype['textFormat'] = undefined;

/**
 * The title of the slicer.
 * @member {String} title
 */
SlicerSpec.prototype['title'] = undefined;





/**
 * Allowed values for the <code>horizontalAlignment</code> property.
 * @enum {String}
 * @readonly
 */
SlicerSpec['HorizontalAlignmentEnum'] = {

    /**
     * value: "HORIZONTAL_ALIGN_UNSPECIFIED"
     * @const
     */
    "HORIZONTAL_ALIGN_UNSPECIFIED": "HORIZONTAL_ALIGN_UNSPECIFIED",

    /**
     * value: "LEFT"
     * @const
     */
    "LEFT": "LEFT",

    /**
     * value: "CENTER"
     * @const
     */
    "CENTER": "CENTER",

    /**
     * value: "RIGHT"
     * @const
     */
    "RIGHT": "RIGHT"
};



export default SlicerSpec;

