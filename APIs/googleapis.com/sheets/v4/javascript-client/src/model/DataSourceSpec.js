/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BigQueryDataSourceSpec from './BigQueryDataSourceSpec';
import DataSourceParameter from './DataSourceParameter';

/**
 * The DataSourceSpec model module.
 * @module model/DataSourceSpec
 * @version v4
 */
class DataSourceSpec {
    /**
     * Constructs a new <code>DataSourceSpec</code>.
     * This specifies the details of the data source. For example, for BigQuery, this specifies information about the BigQuery source.
     * @alias module:model/DataSourceSpec
     */
    constructor() { 
        
        DataSourceSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataSourceSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSourceSpec} obj Optional instance to populate.
     * @return {module:model/DataSourceSpec} The populated <code>DataSourceSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSourceSpec();

            if (data.hasOwnProperty('bigQuery')) {
                obj['bigQuery'] = BigQueryDataSourceSpec.constructFromObject(data['bigQuery']);
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [DataSourceParameter]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSourceSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSourceSpec</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bigQuery`
        if (data['bigQuery']) { // data not null
          BigQueryDataSourceSpec.validateJSON(data['bigQuery']);
        }
        if (data['parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameters'])) {
                throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
            }
            // validate the optional field `parameters` (array)
            for (const item of data['parameters']) {
                DataSourceParameter.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/BigQueryDataSourceSpec} bigQuery
 */
DataSourceSpec.prototype['bigQuery'] = undefined;

/**
 * The parameters of the data source, used when querying the data source.
 * @member {Array.<module:model/DataSourceParameter>} parameters
 */
DataSourceSpec.prototype['parameters'] = undefined;






export default DataSourceSpec;

