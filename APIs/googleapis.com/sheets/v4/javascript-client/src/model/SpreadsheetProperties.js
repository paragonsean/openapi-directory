/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CellFormat from './CellFormat';
import IterativeCalculationSettings from './IterativeCalculationSettings';
import SpreadsheetTheme from './SpreadsheetTheme';

/**
 * The SpreadsheetProperties model module.
 * @module model/SpreadsheetProperties
 * @version v4
 */
class SpreadsheetProperties {
    /**
     * Constructs a new <code>SpreadsheetProperties</code>.
     * Properties of a spreadsheet.
     * @alias module:model/SpreadsheetProperties
     */
    constructor() { 
        
        SpreadsheetProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SpreadsheetProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SpreadsheetProperties} obj Optional instance to populate.
     * @return {module:model/SpreadsheetProperties} The populated <code>SpreadsheetProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SpreadsheetProperties();

            if (data.hasOwnProperty('autoRecalc')) {
                obj['autoRecalc'] = ApiClient.convertToType(data['autoRecalc'], 'String');
            }
            if (data.hasOwnProperty('defaultFormat')) {
                obj['defaultFormat'] = CellFormat.constructFromObject(data['defaultFormat']);
            }
            if (data.hasOwnProperty('iterativeCalculationSettings')) {
                obj['iterativeCalculationSettings'] = IterativeCalculationSettings.constructFromObject(data['iterativeCalculationSettings']);
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('spreadsheetTheme')) {
                obj['spreadsheetTheme'] = SpreadsheetTheme.constructFromObject(data['spreadsheetTheme']);
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SpreadsheetProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SpreadsheetProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['autoRecalc'] && !(typeof data['autoRecalc'] === 'string' || data['autoRecalc'] instanceof String)) {
            throw new Error("Expected the field `autoRecalc` to be a primitive type in the JSON string but got " + data['autoRecalc']);
        }
        // validate the optional field `defaultFormat`
        if (data['defaultFormat']) { // data not null
          CellFormat.validateJSON(data['defaultFormat']);
        }
        // validate the optional field `iterativeCalculationSettings`
        if (data['iterativeCalculationSettings']) { // data not null
          IterativeCalculationSettings.validateJSON(data['iterativeCalculationSettings']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // validate the optional field `spreadsheetTheme`
        if (data['spreadsheetTheme']) { // data not null
          SpreadsheetTheme.validateJSON(data['spreadsheetTheme']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * The amount of time to wait before volatile functions are recalculated.
 * @member {module:model/SpreadsheetProperties.AutoRecalcEnum} autoRecalc
 */
SpreadsheetProperties.prototype['autoRecalc'] = undefined;

/**
 * @member {module:model/CellFormat} defaultFormat
 */
SpreadsheetProperties.prototype['defaultFormat'] = undefined;

/**
 * @member {module:model/IterativeCalculationSettings} iterativeCalculationSettings
 */
SpreadsheetProperties.prototype['iterativeCalculationSettings'] = undefined;

/**
 * The locale of the spreadsheet in one of the following formats: * an ISO 639-1 language code such as `en` * an ISO 639-2 language code such as `fil`, if no 639-1 code exists * a combination of the ISO language code and country code, such as `en_US` Note: when updating this field, not all locales/languages are supported.
 * @member {String} locale
 */
SpreadsheetProperties.prototype['locale'] = undefined;

/**
 * @member {module:model/SpreadsheetTheme} spreadsheetTheme
 */
SpreadsheetProperties.prototype['spreadsheetTheme'] = undefined;

/**
 * The time zone of the spreadsheet, in CLDR format such as `America/New_York`. If the time zone isn't recognized, this may be a custom time zone such as `GMT-07:00`.
 * @member {String} timeZone
 */
SpreadsheetProperties.prototype['timeZone'] = undefined;

/**
 * The title of the spreadsheet.
 * @member {String} title
 */
SpreadsheetProperties.prototype['title'] = undefined;





/**
 * Allowed values for the <code>autoRecalc</code> property.
 * @enum {String}
 * @readonly
 */
SpreadsheetProperties['AutoRecalcEnum'] = {

    /**
     * value: "RECALCULATION_INTERVAL_UNSPECIFIED"
     * @const
     */
    "RECALCULATION_INTERVAL_UNSPECIFIED": "RECALCULATION_INTERVAL_UNSPECIFIED",

    /**
     * value: "ON_CHANGE"
     * @const
     */
    "ON_CHANGE": "ON_CHANGE",

    /**
     * value: "MINUTE"
     * @const
     */
    "MINUTE": "MINUTE",

    /**
     * value: "HOUR"
     * @const
     */
    "HOUR": "HOUR"
};



export default SpreadsheetProperties;

