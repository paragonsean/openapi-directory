/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChartData from './ChartData';
import Color from './Color';
import ColorStyle from './ColorStyle';

/**
 * The OrgChartSpec model module.
 * @module model/OrgChartSpec
 * @version v4
 */
class OrgChartSpec {
    /**
     * Constructs a new <code>OrgChartSpec</code>.
     * An org chart. Org charts require a unique set of labels in labels and may optionally include parent_labels and tooltips. parent_labels contain, for each node, the label identifying the parent node. tooltips contain, for each node, an optional tooltip. For example, to describe an OrgChart with Alice as the CEO, Bob as the President (reporting to Alice) and Cathy as VP of Sales (also reporting to Alice), have labels contain \&quot;Alice\&quot;, \&quot;Bob\&quot;, \&quot;Cathy\&quot;, parent_labels contain \&quot;\&quot;, \&quot;Alice\&quot;, \&quot;Alice\&quot; and tooltips contain \&quot;CEO\&quot;, \&quot;President\&quot;, \&quot;VP Sales\&quot;.
     * @alias module:model/OrgChartSpec
     */
    constructor() { 
        
        OrgChartSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrgChartSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrgChartSpec} obj Optional instance to populate.
     * @return {module:model/OrgChartSpec} The populated <code>OrgChartSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrgChartSpec();

            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ChartData.constructFromObject(data['labels']);
            }
            if (data.hasOwnProperty('nodeColor')) {
                obj['nodeColor'] = Color.constructFromObject(data['nodeColor']);
            }
            if (data.hasOwnProperty('nodeColorStyle')) {
                obj['nodeColorStyle'] = ColorStyle.constructFromObject(data['nodeColorStyle']);
            }
            if (data.hasOwnProperty('nodeSize')) {
                obj['nodeSize'] = ApiClient.convertToType(data['nodeSize'], 'String');
            }
            if (data.hasOwnProperty('parentLabels')) {
                obj['parentLabels'] = ChartData.constructFromObject(data['parentLabels']);
            }
            if (data.hasOwnProperty('selectedNodeColor')) {
                obj['selectedNodeColor'] = Color.constructFromObject(data['selectedNodeColor']);
            }
            if (data.hasOwnProperty('selectedNodeColorStyle')) {
                obj['selectedNodeColorStyle'] = ColorStyle.constructFromObject(data['selectedNodeColorStyle']);
            }
            if (data.hasOwnProperty('tooltips')) {
                obj['tooltips'] = ChartData.constructFromObject(data['tooltips']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrgChartSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrgChartSpec</code>.
     */
    static validateJSON(data) {
        // validate the optional field `labels`
        if (data['labels']) { // data not null
          ChartData.validateJSON(data['labels']);
        }
        // validate the optional field `nodeColor`
        if (data['nodeColor']) { // data not null
          Color.validateJSON(data['nodeColor']);
        }
        // validate the optional field `nodeColorStyle`
        if (data['nodeColorStyle']) { // data not null
          ColorStyle.validateJSON(data['nodeColorStyle']);
        }
        // ensure the json data is a string
        if (data['nodeSize'] && !(typeof data['nodeSize'] === 'string' || data['nodeSize'] instanceof String)) {
            throw new Error("Expected the field `nodeSize` to be a primitive type in the JSON string but got " + data['nodeSize']);
        }
        // validate the optional field `parentLabels`
        if (data['parentLabels']) { // data not null
          ChartData.validateJSON(data['parentLabels']);
        }
        // validate the optional field `selectedNodeColor`
        if (data['selectedNodeColor']) { // data not null
          Color.validateJSON(data['selectedNodeColor']);
        }
        // validate the optional field `selectedNodeColorStyle`
        if (data['selectedNodeColorStyle']) { // data not null
          ColorStyle.validateJSON(data['selectedNodeColorStyle']);
        }
        // validate the optional field `tooltips`
        if (data['tooltips']) { // data not null
          ChartData.validateJSON(data['tooltips']);
        }

        return true;
    }


}



/**
 * @member {module:model/ChartData} labels
 */
OrgChartSpec.prototype['labels'] = undefined;

/**
 * @member {module:model/Color} nodeColor
 */
OrgChartSpec.prototype['nodeColor'] = undefined;

/**
 * @member {module:model/ColorStyle} nodeColorStyle
 */
OrgChartSpec.prototype['nodeColorStyle'] = undefined;

/**
 * The size of the org chart nodes.
 * @member {module:model/OrgChartSpec.NodeSizeEnum} nodeSize
 */
OrgChartSpec.prototype['nodeSize'] = undefined;

/**
 * @member {module:model/ChartData} parentLabels
 */
OrgChartSpec.prototype['parentLabels'] = undefined;

/**
 * @member {module:model/Color} selectedNodeColor
 */
OrgChartSpec.prototype['selectedNodeColor'] = undefined;

/**
 * @member {module:model/ColorStyle} selectedNodeColorStyle
 */
OrgChartSpec.prototype['selectedNodeColorStyle'] = undefined;

/**
 * @member {module:model/ChartData} tooltips
 */
OrgChartSpec.prototype['tooltips'] = undefined;





/**
 * Allowed values for the <code>nodeSize</code> property.
 * @enum {String}
 * @readonly
 */
OrgChartSpec['NodeSizeEnum'] = {

    /**
     * value: "ORG_CHART_LABEL_SIZE_UNSPECIFIED"
     * @const
     */
    "ORG_CHART_LABEL_SIZE_UNSPECIFIED": "ORG_CHART_LABEL_SIZE_UNSPECIFIED",

    /**
     * value: "SMALL"
     * @const
     */
    "SMALL": "SMALL",

    /**
     * value: "MEDIUM"
     * @const
     */
    "MEDIUM": "MEDIUM",

    /**
     * value: "LARGE"
     * @const
     */
    "LARGE": "LARGE"
};



export default OrgChartSpec;

