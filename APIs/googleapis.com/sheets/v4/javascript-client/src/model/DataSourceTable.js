/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataExecutionStatus from './DataExecutionStatus';
import DataSourceColumnReference from './DataSourceColumnReference';
import FilterSpec from './FilterSpec';
import SortSpec from './SortSpec';

/**
 * The DataSourceTable model module.
 * @module model/DataSourceTable
 * @version v4
 */
class DataSourceTable {
    /**
     * Constructs a new <code>DataSourceTable</code>.
     * A data source table, which allows the user to import a static table of data from the DataSource into Sheets. This is also known as \&quot;Extract\&quot; in the Sheets editor.
     * @alias module:model/DataSourceTable
     */
    constructor() { 
        
        DataSourceTable.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataSourceTable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSourceTable} obj Optional instance to populate.
     * @return {module:model/DataSourceTable} The populated <code>DataSourceTable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSourceTable();

            if (data.hasOwnProperty('columnSelectionType')) {
                obj['columnSelectionType'] = ApiClient.convertToType(data['columnSelectionType'], 'String');
            }
            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], [DataSourceColumnReference]);
            }
            if (data.hasOwnProperty('dataExecutionStatus')) {
                obj['dataExecutionStatus'] = DataExecutionStatus.constructFromObject(data['dataExecutionStatus']);
            }
            if (data.hasOwnProperty('dataSourceId')) {
                obj['dataSourceId'] = ApiClient.convertToType(data['dataSourceId'], 'String');
            }
            if (data.hasOwnProperty('filterSpecs')) {
                obj['filterSpecs'] = ApiClient.convertToType(data['filterSpecs'], [FilterSpec]);
            }
            if (data.hasOwnProperty('rowLimit')) {
                obj['rowLimit'] = ApiClient.convertToType(data['rowLimit'], 'Number');
            }
            if (data.hasOwnProperty('sortSpecs')) {
                obj['sortSpecs'] = ApiClient.convertToType(data['sortSpecs'], [SortSpec]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSourceTable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSourceTable</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['columnSelectionType'] && !(typeof data['columnSelectionType'] === 'string' || data['columnSelectionType'] instanceof String)) {
            throw new Error("Expected the field `columnSelectionType` to be a primitive type in the JSON string but got " + data['columnSelectionType']);
        }
        if (data['columns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['columns'])) {
                throw new Error("Expected the field `columns` to be an array in the JSON data but got " + data['columns']);
            }
            // validate the optional field `columns` (array)
            for (const item of data['columns']) {
                DataSourceColumnReference.validateJSON(item);
            };
        }
        // validate the optional field `dataExecutionStatus`
        if (data['dataExecutionStatus']) { // data not null
          DataExecutionStatus.validateJSON(data['dataExecutionStatus']);
        }
        // ensure the json data is a string
        if (data['dataSourceId'] && !(typeof data['dataSourceId'] === 'string' || data['dataSourceId'] instanceof String)) {
            throw new Error("Expected the field `dataSourceId` to be a primitive type in the JSON string but got " + data['dataSourceId']);
        }
        if (data['filterSpecs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filterSpecs'])) {
                throw new Error("Expected the field `filterSpecs` to be an array in the JSON data but got " + data['filterSpecs']);
            }
            // validate the optional field `filterSpecs` (array)
            for (const item of data['filterSpecs']) {
                FilterSpec.validateJSON(item);
            };
        }
        if (data['sortSpecs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sortSpecs'])) {
                throw new Error("Expected the field `sortSpecs` to be an array in the JSON data but got " + data['sortSpecs']);
            }
            // validate the optional field `sortSpecs` (array)
            for (const item of data['sortSpecs']) {
                SortSpec.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The type to select columns for the data source table. Defaults to SELECTED.
 * @member {module:model/DataSourceTable.ColumnSelectionTypeEnum} columnSelectionType
 */
DataSourceTable.prototype['columnSelectionType'] = undefined;

/**
 * Columns selected for the data source table. The column_selection_type must be SELECTED.
 * @member {Array.<module:model/DataSourceColumnReference>} columns
 */
DataSourceTable.prototype['columns'] = undefined;

/**
 * @member {module:model/DataExecutionStatus} dataExecutionStatus
 */
DataSourceTable.prototype['dataExecutionStatus'] = undefined;

/**
 * The ID of the data source the data source table is associated with.
 * @member {String} dataSourceId
 */
DataSourceTable.prototype['dataSourceId'] = undefined;

/**
 * Filter specifications in the data source table.
 * @member {Array.<module:model/FilterSpec>} filterSpecs
 */
DataSourceTable.prototype['filterSpecs'] = undefined;

/**
 * The limit of rows to return. If not set, a default limit is applied. Please refer to the Sheets editor for the default and max limit.
 * @member {Number} rowLimit
 */
DataSourceTable.prototype['rowLimit'] = undefined;

/**
 * Sort specifications in the data source table. The result of the data source table is sorted based on the sort specifications in order.
 * @member {Array.<module:model/SortSpec>} sortSpecs
 */
DataSourceTable.prototype['sortSpecs'] = undefined;





/**
 * Allowed values for the <code>columnSelectionType</code> property.
 * @enum {String}
 * @readonly
 */
DataSourceTable['ColumnSelectionTypeEnum'] = {

    /**
     * value: "DATA_SOURCE_TABLE_COLUMN_SELECTION_TYPE_UNSPECIFIED"
     * @const
     */
    "DATA_SOURCE_TABLE_COLUMN_SELECTION_TYPE_UNSPECIFIED": "DATA_SOURCE_TABLE_COLUMN_SELECTION_TYPE_UNSPECIFIED",

    /**
     * value: "SELECTED"
     * @const
     */
    "SELECTED": "SELECTED",

    /**
     * value: "SYNC_ALL"
     * @const
     */
    "SYNC_ALL": "SYNC_ALL"
};



export default DataSourceTable;

