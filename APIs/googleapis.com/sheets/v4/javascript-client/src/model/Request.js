/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddBandingRequest from './AddBandingRequest';
import AddChartRequest from './AddChartRequest';
import AddConditionalFormatRuleRequest from './AddConditionalFormatRuleRequest';
import AddDataSourceRequest from './AddDataSourceRequest';
import AddDimensionGroupRequest from './AddDimensionGroupRequest';
import AddFilterViewRequest from './AddFilterViewRequest';
import AddNamedRangeRequest from './AddNamedRangeRequest';
import AddProtectedRangeRequest from './AddProtectedRangeRequest';
import AddSheetRequest from './AddSheetRequest';
import AddSlicerRequest from './AddSlicerRequest';
import AppendCellsRequest from './AppendCellsRequest';
import AppendDimensionRequest from './AppendDimensionRequest';
import AutoFillRequest from './AutoFillRequest';
import AutoResizeDimensionsRequest from './AutoResizeDimensionsRequest';
import ClearBasicFilterRequest from './ClearBasicFilterRequest';
import CopyPasteRequest from './CopyPasteRequest';
import CreateDeveloperMetadataRequest from './CreateDeveloperMetadataRequest';
import CutPasteRequest from './CutPasteRequest';
import DeleteBandingRequest from './DeleteBandingRequest';
import DeleteConditionalFormatRuleRequest from './DeleteConditionalFormatRuleRequest';
import DeleteDataSourceRequest from './DeleteDataSourceRequest';
import DeleteDeveloperMetadataRequest from './DeleteDeveloperMetadataRequest';
import DeleteDimensionGroupRequest from './DeleteDimensionGroupRequest';
import DeleteDimensionRequest from './DeleteDimensionRequest';
import DeleteDuplicatesRequest from './DeleteDuplicatesRequest';
import DeleteEmbeddedObjectRequest from './DeleteEmbeddedObjectRequest';
import DeleteFilterViewRequest from './DeleteFilterViewRequest';
import DeleteNamedRangeRequest from './DeleteNamedRangeRequest';
import DeleteProtectedRangeRequest from './DeleteProtectedRangeRequest';
import DeleteRangeRequest from './DeleteRangeRequest';
import DeleteSheetRequest from './DeleteSheetRequest';
import DuplicateFilterViewRequest from './DuplicateFilterViewRequest';
import DuplicateSheetRequest from './DuplicateSheetRequest';
import FindReplaceRequest from './FindReplaceRequest';
import InsertDimensionRequest from './InsertDimensionRequest';
import InsertRangeRequest from './InsertRangeRequest';
import MergeCellsRequest from './MergeCellsRequest';
import MoveDimensionRequest from './MoveDimensionRequest';
import PasteDataRequest from './PasteDataRequest';
import RandomizeRangeRequest from './RandomizeRangeRequest';
import RefreshDataSourceRequest from './RefreshDataSourceRequest';
import RepeatCellRequest from './RepeatCellRequest';
import SetBasicFilterRequest from './SetBasicFilterRequest';
import SetDataValidationRequest from './SetDataValidationRequest';
import SortRangeRequest from './SortRangeRequest';
import TextToColumnsRequest from './TextToColumnsRequest';
import TrimWhitespaceRequest from './TrimWhitespaceRequest';
import UnmergeCellsRequest from './UnmergeCellsRequest';
import UpdateBandingRequest from './UpdateBandingRequest';
import UpdateBordersRequest from './UpdateBordersRequest';
import UpdateCellsRequest from './UpdateCellsRequest';
import UpdateChartSpecRequest from './UpdateChartSpecRequest';
import UpdateConditionalFormatRuleRequest from './UpdateConditionalFormatRuleRequest';
import UpdateDataSourceRequest from './UpdateDataSourceRequest';
import UpdateDeveloperMetadataRequest from './UpdateDeveloperMetadataRequest';
import UpdateDimensionGroupRequest from './UpdateDimensionGroupRequest';
import UpdateDimensionPropertiesRequest from './UpdateDimensionPropertiesRequest';
import UpdateEmbeddedObjectBorderRequest from './UpdateEmbeddedObjectBorderRequest';
import UpdateEmbeddedObjectPositionRequest from './UpdateEmbeddedObjectPositionRequest';
import UpdateFilterViewRequest from './UpdateFilterViewRequest';
import UpdateNamedRangeRequest from './UpdateNamedRangeRequest';
import UpdateProtectedRangeRequest from './UpdateProtectedRangeRequest';
import UpdateSheetPropertiesRequest from './UpdateSheetPropertiesRequest';
import UpdateSlicerSpecRequest from './UpdateSlicerSpecRequest';
import UpdateSpreadsheetPropertiesRequest from './UpdateSpreadsheetPropertiesRequest';

/**
 * The Request model module.
 * @module model/Request
 * @version v4
 */
class Request {
    /**
     * Constructs a new <code>Request</code>.
     * A single kind of update to apply to a spreadsheet.
     * @alias module:model/Request
     */
    constructor() { 
        
        Request.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Request</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Request} obj Optional instance to populate.
     * @return {module:model/Request} The populated <code>Request</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Request();

            if (data.hasOwnProperty('addBanding')) {
                obj['addBanding'] = AddBandingRequest.constructFromObject(data['addBanding']);
            }
            if (data.hasOwnProperty('addChart')) {
                obj['addChart'] = AddChartRequest.constructFromObject(data['addChart']);
            }
            if (data.hasOwnProperty('addConditionalFormatRule')) {
                obj['addConditionalFormatRule'] = AddConditionalFormatRuleRequest.constructFromObject(data['addConditionalFormatRule']);
            }
            if (data.hasOwnProperty('addDataSource')) {
                obj['addDataSource'] = AddDataSourceRequest.constructFromObject(data['addDataSource']);
            }
            if (data.hasOwnProperty('addDimensionGroup')) {
                obj['addDimensionGroup'] = AddDimensionGroupRequest.constructFromObject(data['addDimensionGroup']);
            }
            if (data.hasOwnProperty('addFilterView')) {
                obj['addFilterView'] = AddFilterViewRequest.constructFromObject(data['addFilterView']);
            }
            if (data.hasOwnProperty('addNamedRange')) {
                obj['addNamedRange'] = AddNamedRangeRequest.constructFromObject(data['addNamedRange']);
            }
            if (data.hasOwnProperty('addProtectedRange')) {
                obj['addProtectedRange'] = AddProtectedRangeRequest.constructFromObject(data['addProtectedRange']);
            }
            if (data.hasOwnProperty('addSheet')) {
                obj['addSheet'] = AddSheetRequest.constructFromObject(data['addSheet']);
            }
            if (data.hasOwnProperty('addSlicer')) {
                obj['addSlicer'] = AddSlicerRequest.constructFromObject(data['addSlicer']);
            }
            if (data.hasOwnProperty('appendCells')) {
                obj['appendCells'] = AppendCellsRequest.constructFromObject(data['appendCells']);
            }
            if (data.hasOwnProperty('appendDimension')) {
                obj['appendDimension'] = AppendDimensionRequest.constructFromObject(data['appendDimension']);
            }
            if (data.hasOwnProperty('autoFill')) {
                obj['autoFill'] = AutoFillRequest.constructFromObject(data['autoFill']);
            }
            if (data.hasOwnProperty('autoResizeDimensions')) {
                obj['autoResizeDimensions'] = AutoResizeDimensionsRequest.constructFromObject(data['autoResizeDimensions']);
            }
            if (data.hasOwnProperty('clearBasicFilter')) {
                obj['clearBasicFilter'] = ClearBasicFilterRequest.constructFromObject(data['clearBasicFilter']);
            }
            if (data.hasOwnProperty('copyPaste')) {
                obj['copyPaste'] = CopyPasteRequest.constructFromObject(data['copyPaste']);
            }
            if (data.hasOwnProperty('createDeveloperMetadata')) {
                obj['createDeveloperMetadata'] = CreateDeveloperMetadataRequest.constructFromObject(data['createDeveloperMetadata']);
            }
            if (data.hasOwnProperty('cutPaste')) {
                obj['cutPaste'] = CutPasteRequest.constructFromObject(data['cutPaste']);
            }
            if (data.hasOwnProperty('deleteBanding')) {
                obj['deleteBanding'] = DeleteBandingRequest.constructFromObject(data['deleteBanding']);
            }
            if (data.hasOwnProperty('deleteConditionalFormatRule')) {
                obj['deleteConditionalFormatRule'] = DeleteConditionalFormatRuleRequest.constructFromObject(data['deleteConditionalFormatRule']);
            }
            if (data.hasOwnProperty('deleteDataSource')) {
                obj['deleteDataSource'] = DeleteDataSourceRequest.constructFromObject(data['deleteDataSource']);
            }
            if (data.hasOwnProperty('deleteDeveloperMetadata')) {
                obj['deleteDeveloperMetadata'] = DeleteDeveloperMetadataRequest.constructFromObject(data['deleteDeveloperMetadata']);
            }
            if (data.hasOwnProperty('deleteDimension')) {
                obj['deleteDimension'] = DeleteDimensionRequest.constructFromObject(data['deleteDimension']);
            }
            if (data.hasOwnProperty('deleteDimensionGroup')) {
                obj['deleteDimensionGroup'] = DeleteDimensionGroupRequest.constructFromObject(data['deleteDimensionGroup']);
            }
            if (data.hasOwnProperty('deleteDuplicates')) {
                obj['deleteDuplicates'] = DeleteDuplicatesRequest.constructFromObject(data['deleteDuplicates']);
            }
            if (data.hasOwnProperty('deleteEmbeddedObject')) {
                obj['deleteEmbeddedObject'] = DeleteEmbeddedObjectRequest.constructFromObject(data['deleteEmbeddedObject']);
            }
            if (data.hasOwnProperty('deleteFilterView')) {
                obj['deleteFilterView'] = DeleteFilterViewRequest.constructFromObject(data['deleteFilterView']);
            }
            if (data.hasOwnProperty('deleteNamedRange')) {
                obj['deleteNamedRange'] = DeleteNamedRangeRequest.constructFromObject(data['deleteNamedRange']);
            }
            if (data.hasOwnProperty('deleteProtectedRange')) {
                obj['deleteProtectedRange'] = DeleteProtectedRangeRequest.constructFromObject(data['deleteProtectedRange']);
            }
            if (data.hasOwnProperty('deleteRange')) {
                obj['deleteRange'] = DeleteRangeRequest.constructFromObject(data['deleteRange']);
            }
            if (data.hasOwnProperty('deleteSheet')) {
                obj['deleteSheet'] = DeleteSheetRequest.constructFromObject(data['deleteSheet']);
            }
            if (data.hasOwnProperty('duplicateFilterView')) {
                obj['duplicateFilterView'] = DuplicateFilterViewRequest.constructFromObject(data['duplicateFilterView']);
            }
            if (data.hasOwnProperty('duplicateSheet')) {
                obj['duplicateSheet'] = DuplicateSheetRequest.constructFromObject(data['duplicateSheet']);
            }
            if (data.hasOwnProperty('findReplace')) {
                obj['findReplace'] = FindReplaceRequest.constructFromObject(data['findReplace']);
            }
            if (data.hasOwnProperty('insertDimension')) {
                obj['insertDimension'] = InsertDimensionRequest.constructFromObject(data['insertDimension']);
            }
            if (data.hasOwnProperty('insertRange')) {
                obj['insertRange'] = InsertRangeRequest.constructFromObject(data['insertRange']);
            }
            if (data.hasOwnProperty('mergeCells')) {
                obj['mergeCells'] = MergeCellsRequest.constructFromObject(data['mergeCells']);
            }
            if (data.hasOwnProperty('moveDimension')) {
                obj['moveDimension'] = MoveDimensionRequest.constructFromObject(data['moveDimension']);
            }
            if (data.hasOwnProperty('pasteData')) {
                obj['pasteData'] = PasteDataRequest.constructFromObject(data['pasteData']);
            }
            if (data.hasOwnProperty('randomizeRange')) {
                obj['randomizeRange'] = RandomizeRangeRequest.constructFromObject(data['randomizeRange']);
            }
            if (data.hasOwnProperty('refreshDataSource')) {
                obj['refreshDataSource'] = RefreshDataSourceRequest.constructFromObject(data['refreshDataSource']);
            }
            if (data.hasOwnProperty('repeatCell')) {
                obj['repeatCell'] = RepeatCellRequest.constructFromObject(data['repeatCell']);
            }
            if (data.hasOwnProperty('setBasicFilter')) {
                obj['setBasicFilter'] = SetBasicFilterRequest.constructFromObject(data['setBasicFilter']);
            }
            if (data.hasOwnProperty('setDataValidation')) {
                obj['setDataValidation'] = SetDataValidationRequest.constructFromObject(data['setDataValidation']);
            }
            if (data.hasOwnProperty('sortRange')) {
                obj['sortRange'] = SortRangeRequest.constructFromObject(data['sortRange']);
            }
            if (data.hasOwnProperty('textToColumns')) {
                obj['textToColumns'] = TextToColumnsRequest.constructFromObject(data['textToColumns']);
            }
            if (data.hasOwnProperty('trimWhitespace')) {
                obj['trimWhitespace'] = TrimWhitespaceRequest.constructFromObject(data['trimWhitespace']);
            }
            if (data.hasOwnProperty('unmergeCells')) {
                obj['unmergeCells'] = UnmergeCellsRequest.constructFromObject(data['unmergeCells']);
            }
            if (data.hasOwnProperty('updateBanding')) {
                obj['updateBanding'] = UpdateBandingRequest.constructFromObject(data['updateBanding']);
            }
            if (data.hasOwnProperty('updateBorders')) {
                obj['updateBorders'] = UpdateBordersRequest.constructFromObject(data['updateBorders']);
            }
            if (data.hasOwnProperty('updateCells')) {
                obj['updateCells'] = UpdateCellsRequest.constructFromObject(data['updateCells']);
            }
            if (data.hasOwnProperty('updateChartSpec')) {
                obj['updateChartSpec'] = UpdateChartSpecRequest.constructFromObject(data['updateChartSpec']);
            }
            if (data.hasOwnProperty('updateConditionalFormatRule')) {
                obj['updateConditionalFormatRule'] = UpdateConditionalFormatRuleRequest.constructFromObject(data['updateConditionalFormatRule']);
            }
            if (data.hasOwnProperty('updateDataSource')) {
                obj['updateDataSource'] = UpdateDataSourceRequest.constructFromObject(data['updateDataSource']);
            }
            if (data.hasOwnProperty('updateDeveloperMetadata')) {
                obj['updateDeveloperMetadata'] = UpdateDeveloperMetadataRequest.constructFromObject(data['updateDeveloperMetadata']);
            }
            if (data.hasOwnProperty('updateDimensionGroup')) {
                obj['updateDimensionGroup'] = UpdateDimensionGroupRequest.constructFromObject(data['updateDimensionGroup']);
            }
            if (data.hasOwnProperty('updateDimensionProperties')) {
                obj['updateDimensionProperties'] = UpdateDimensionPropertiesRequest.constructFromObject(data['updateDimensionProperties']);
            }
            if (data.hasOwnProperty('updateEmbeddedObjectBorder')) {
                obj['updateEmbeddedObjectBorder'] = UpdateEmbeddedObjectBorderRequest.constructFromObject(data['updateEmbeddedObjectBorder']);
            }
            if (data.hasOwnProperty('updateEmbeddedObjectPosition')) {
                obj['updateEmbeddedObjectPosition'] = UpdateEmbeddedObjectPositionRequest.constructFromObject(data['updateEmbeddedObjectPosition']);
            }
            if (data.hasOwnProperty('updateFilterView')) {
                obj['updateFilterView'] = UpdateFilterViewRequest.constructFromObject(data['updateFilterView']);
            }
            if (data.hasOwnProperty('updateNamedRange')) {
                obj['updateNamedRange'] = UpdateNamedRangeRequest.constructFromObject(data['updateNamedRange']);
            }
            if (data.hasOwnProperty('updateProtectedRange')) {
                obj['updateProtectedRange'] = UpdateProtectedRangeRequest.constructFromObject(data['updateProtectedRange']);
            }
            if (data.hasOwnProperty('updateSheetProperties')) {
                obj['updateSheetProperties'] = UpdateSheetPropertiesRequest.constructFromObject(data['updateSheetProperties']);
            }
            if (data.hasOwnProperty('updateSlicerSpec')) {
                obj['updateSlicerSpec'] = UpdateSlicerSpecRequest.constructFromObject(data['updateSlicerSpec']);
            }
            if (data.hasOwnProperty('updateSpreadsheetProperties')) {
                obj['updateSpreadsheetProperties'] = UpdateSpreadsheetPropertiesRequest.constructFromObject(data['updateSpreadsheetProperties']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Request</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Request</code>.
     */
    static validateJSON(data) {
        // validate the optional field `addBanding`
        if (data['addBanding']) { // data not null
          AddBandingRequest.validateJSON(data['addBanding']);
        }
        // validate the optional field `addChart`
        if (data['addChart']) { // data not null
          AddChartRequest.validateJSON(data['addChart']);
        }
        // validate the optional field `addConditionalFormatRule`
        if (data['addConditionalFormatRule']) { // data not null
          AddConditionalFormatRuleRequest.validateJSON(data['addConditionalFormatRule']);
        }
        // validate the optional field `addDataSource`
        if (data['addDataSource']) { // data not null
          AddDataSourceRequest.validateJSON(data['addDataSource']);
        }
        // validate the optional field `addDimensionGroup`
        if (data['addDimensionGroup']) { // data not null
          AddDimensionGroupRequest.validateJSON(data['addDimensionGroup']);
        }
        // validate the optional field `addFilterView`
        if (data['addFilterView']) { // data not null
          AddFilterViewRequest.validateJSON(data['addFilterView']);
        }
        // validate the optional field `addNamedRange`
        if (data['addNamedRange']) { // data not null
          AddNamedRangeRequest.validateJSON(data['addNamedRange']);
        }
        // validate the optional field `addProtectedRange`
        if (data['addProtectedRange']) { // data not null
          AddProtectedRangeRequest.validateJSON(data['addProtectedRange']);
        }
        // validate the optional field `addSheet`
        if (data['addSheet']) { // data not null
          AddSheetRequest.validateJSON(data['addSheet']);
        }
        // validate the optional field `addSlicer`
        if (data['addSlicer']) { // data not null
          AddSlicerRequest.validateJSON(data['addSlicer']);
        }
        // validate the optional field `appendCells`
        if (data['appendCells']) { // data not null
          AppendCellsRequest.validateJSON(data['appendCells']);
        }
        // validate the optional field `appendDimension`
        if (data['appendDimension']) { // data not null
          AppendDimensionRequest.validateJSON(data['appendDimension']);
        }
        // validate the optional field `autoFill`
        if (data['autoFill']) { // data not null
          AutoFillRequest.validateJSON(data['autoFill']);
        }
        // validate the optional field `autoResizeDimensions`
        if (data['autoResizeDimensions']) { // data not null
          AutoResizeDimensionsRequest.validateJSON(data['autoResizeDimensions']);
        }
        // validate the optional field `clearBasicFilter`
        if (data['clearBasicFilter']) { // data not null
          ClearBasicFilterRequest.validateJSON(data['clearBasicFilter']);
        }
        // validate the optional field `copyPaste`
        if (data['copyPaste']) { // data not null
          CopyPasteRequest.validateJSON(data['copyPaste']);
        }
        // validate the optional field `createDeveloperMetadata`
        if (data['createDeveloperMetadata']) { // data not null
          CreateDeveloperMetadataRequest.validateJSON(data['createDeveloperMetadata']);
        }
        // validate the optional field `cutPaste`
        if (data['cutPaste']) { // data not null
          CutPasteRequest.validateJSON(data['cutPaste']);
        }
        // validate the optional field `deleteBanding`
        if (data['deleteBanding']) { // data not null
          DeleteBandingRequest.validateJSON(data['deleteBanding']);
        }
        // validate the optional field `deleteConditionalFormatRule`
        if (data['deleteConditionalFormatRule']) { // data not null
          DeleteConditionalFormatRuleRequest.validateJSON(data['deleteConditionalFormatRule']);
        }
        // validate the optional field `deleteDataSource`
        if (data['deleteDataSource']) { // data not null
          DeleteDataSourceRequest.validateJSON(data['deleteDataSource']);
        }
        // validate the optional field `deleteDeveloperMetadata`
        if (data['deleteDeveloperMetadata']) { // data not null
          DeleteDeveloperMetadataRequest.validateJSON(data['deleteDeveloperMetadata']);
        }
        // validate the optional field `deleteDimension`
        if (data['deleteDimension']) { // data not null
          DeleteDimensionRequest.validateJSON(data['deleteDimension']);
        }
        // validate the optional field `deleteDimensionGroup`
        if (data['deleteDimensionGroup']) { // data not null
          DeleteDimensionGroupRequest.validateJSON(data['deleteDimensionGroup']);
        }
        // validate the optional field `deleteDuplicates`
        if (data['deleteDuplicates']) { // data not null
          DeleteDuplicatesRequest.validateJSON(data['deleteDuplicates']);
        }
        // validate the optional field `deleteEmbeddedObject`
        if (data['deleteEmbeddedObject']) { // data not null
          DeleteEmbeddedObjectRequest.validateJSON(data['deleteEmbeddedObject']);
        }
        // validate the optional field `deleteFilterView`
        if (data['deleteFilterView']) { // data not null
          DeleteFilterViewRequest.validateJSON(data['deleteFilterView']);
        }
        // validate the optional field `deleteNamedRange`
        if (data['deleteNamedRange']) { // data not null
          DeleteNamedRangeRequest.validateJSON(data['deleteNamedRange']);
        }
        // validate the optional field `deleteProtectedRange`
        if (data['deleteProtectedRange']) { // data not null
          DeleteProtectedRangeRequest.validateJSON(data['deleteProtectedRange']);
        }
        // validate the optional field `deleteRange`
        if (data['deleteRange']) { // data not null
          DeleteRangeRequest.validateJSON(data['deleteRange']);
        }
        // validate the optional field `deleteSheet`
        if (data['deleteSheet']) { // data not null
          DeleteSheetRequest.validateJSON(data['deleteSheet']);
        }
        // validate the optional field `duplicateFilterView`
        if (data['duplicateFilterView']) { // data not null
          DuplicateFilterViewRequest.validateJSON(data['duplicateFilterView']);
        }
        // validate the optional field `duplicateSheet`
        if (data['duplicateSheet']) { // data not null
          DuplicateSheetRequest.validateJSON(data['duplicateSheet']);
        }
        // validate the optional field `findReplace`
        if (data['findReplace']) { // data not null
          FindReplaceRequest.validateJSON(data['findReplace']);
        }
        // validate the optional field `insertDimension`
        if (data['insertDimension']) { // data not null
          InsertDimensionRequest.validateJSON(data['insertDimension']);
        }
        // validate the optional field `insertRange`
        if (data['insertRange']) { // data not null
          InsertRangeRequest.validateJSON(data['insertRange']);
        }
        // validate the optional field `mergeCells`
        if (data['mergeCells']) { // data not null
          MergeCellsRequest.validateJSON(data['mergeCells']);
        }
        // validate the optional field `moveDimension`
        if (data['moveDimension']) { // data not null
          MoveDimensionRequest.validateJSON(data['moveDimension']);
        }
        // validate the optional field `pasteData`
        if (data['pasteData']) { // data not null
          PasteDataRequest.validateJSON(data['pasteData']);
        }
        // validate the optional field `randomizeRange`
        if (data['randomizeRange']) { // data not null
          RandomizeRangeRequest.validateJSON(data['randomizeRange']);
        }
        // validate the optional field `refreshDataSource`
        if (data['refreshDataSource']) { // data not null
          RefreshDataSourceRequest.validateJSON(data['refreshDataSource']);
        }
        // validate the optional field `repeatCell`
        if (data['repeatCell']) { // data not null
          RepeatCellRequest.validateJSON(data['repeatCell']);
        }
        // validate the optional field `setBasicFilter`
        if (data['setBasicFilter']) { // data not null
          SetBasicFilterRequest.validateJSON(data['setBasicFilter']);
        }
        // validate the optional field `setDataValidation`
        if (data['setDataValidation']) { // data not null
          SetDataValidationRequest.validateJSON(data['setDataValidation']);
        }
        // validate the optional field `sortRange`
        if (data['sortRange']) { // data not null
          SortRangeRequest.validateJSON(data['sortRange']);
        }
        // validate the optional field `textToColumns`
        if (data['textToColumns']) { // data not null
          TextToColumnsRequest.validateJSON(data['textToColumns']);
        }
        // validate the optional field `trimWhitespace`
        if (data['trimWhitespace']) { // data not null
          TrimWhitespaceRequest.validateJSON(data['trimWhitespace']);
        }
        // validate the optional field `unmergeCells`
        if (data['unmergeCells']) { // data not null
          UnmergeCellsRequest.validateJSON(data['unmergeCells']);
        }
        // validate the optional field `updateBanding`
        if (data['updateBanding']) { // data not null
          UpdateBandingRequest.validateJSON(data['updateBanding']);
        }
        // validate the optional field `updateBorders`
        if (data['updateBorders']) { // data not null
          UpdateBordersRequest.validateJSON(data['updateBorders']);
        }
        // validate the optional field `updateCells`
        if (data['updateCells']) { // data not null
          UpdateCellsRequest.validateJSON(data['updateCells']);
        }
        // validate the optional field `updateChartSpec`
        if (data['updateChartSpec']) { // data not null
          UpdateChartSpecRequest.validateJSON(data['updateChartSpec']);
        }
        // validate the optional field `updateConditionalFormatRule`
        if (data['updateConditionalFormatRule']) { // data not null
          UpdateConditionalFormatRuleRequest.validateJSON(data['updateConditionalFormatRule']);
        }
        // validate the optional field `updateDataSource`
        if (data['updateDataSource']) { // data not null
          UpdateDataSourceRequest.validateJSON(data['updateDataSource']);
        }
        // validate the optional field `updateDeveloperMetadata`
        if (data['updateDeveloperMetadata']) { // data not null
          UpdateDeveloperMetadataRequest.validateJSON(data['updateDeveloperMetadata']);
        }
        // validate the optional field `updateDimensionGroup`
        if (data['updateDimensionGroup']) { // data not null
          UpdateDimensionGroupRequest.validateJSON(data['updateDimensionGroup']);
        }
        // validate the optional field `updateDimensionProperties`
        if (data['updateDimensionProperties']) { // data not null
          UpdateDimensionPropertiesRequest.validateJSON(data['updateDimensionProperties']);
        }
        // validate the optional field `updateEmbeddedObjectBorder`
        if (data['updateEmbeddedObjectBorder']) { // data not null
          UpdateEmbeddedObjectBorderRequest.validateJSON(data['updateEmbeddedObjectBorder']);
        }
        // validate the optional field `updateEmbeddedObjectPosition`
        if (data['updateEmbeddedObjectPosition']) { // data not null
          UpdateEmbeddedObjectPositionRequest.validateJSON(data['updateEmbeddedObjectPosition']);
        }
        // validate the optional field `updateFilterView`
        if (data['updateFilterView']) { // data not null
          UpdateFilterViewRequest.validateJSON(data['updateFilterView']);
        }
        // validate the optional field `updateNamedRange`
        if (data['updateNamedRange']) { // data not null
          UpdateNamedRangeRequest.validateJSON(data['updateNamedRange']);
        }
        // validate the optional field `updateProtectedRange`
        if (data['updateProtectedRange']) { // data not null
          UpdateProtectedRangeRequest.validateJSON(data['updateProtectedRange']);
        }
        // validate the optional field `updateSheetProperties`
        if (data['updateSheetProperties']) { // data not null
          UpdateSheetPropertiesRequest.validateJSON(data['updateSheetProperties']);
        }
        // validate the optional field `updateSlicerSpec`
        if (data['updateSlicerSpec']) { // data not null
          UpdateSlicerSpecRequest.validateJSON(data['updateSlicerSpec']);
        }
        // validate the optional field `updateSpreadsheetProperties`
        if (data['updateSpreadsheetProperties']) { // data not null
          UpdateSpreadsheetPropertiesRequest.validateJSON(data['updateSpreadsheetProperties']);
        }

        return true;
    }


}



/**
 * @member {module:model/AddBandingRequest} addBanding
 */
Request.prototype['addBanding'] = undefined;

/**
 * @member {module:model/AddChartRequest} addChart
 */
Request.prototype['addChart'] = undefined;

/**
 * @member {module:model/AddConditionalFormatRuleRequest} addConditionalFormatRule
 */
Request.prototype['addConditionalFormatRule'] = undefined;

/**
 * @member {module:model/AddDataSourceRequest} addDataSource
 */
Request.prototype['addDataSource'] = undefined;

/**
 * @member {module:model/AddDimensionGroupRequest} addDimensionGroup
 */
Request.prototype['addDimensionGroup'] = undefined;

/**
 * @member {module:model/AddFilterViewRequest} addFilterView
 */
Request.prototype['addFilterView'] = undefined;

/**
 * @member {module:model/AddNamedRangeRequest} addNamedRange
 */
Request.prototype['addNamedRange'] = undefined;

/**
 * @member {module:model/AddProtectedRangeRequest} addProtectedRange
 */
Request.prototype['addProtectedRange'] = undefined;

/**
 * @member {module:model/AddSheetRequest} addSheet
 */
Request.prototype['addSheet'] = undefined;

/**
 * @member {module:model/AddSlicerRequest} addSlicer
 */
Request.prototype['addSlicer'] = undefined;

/**
 * @member {module:model/AppendCellsRequest} appendCells
 */
Request.prototype['appendCells'] = undefined;

/**
 * @member {module:model/AppendDimensionRequest} appendDimension
 */
Request.prototype['appendDimension'] = undefined;

/**
 * @member {module:model/AutoFillRequest} autoFill
 */
Request.prototype['autoFill'] = undefined;

/**
 * @member {module:model/AutoResizeDimensionsRequest} autoResizeDimensions
 */
Request.prototype['autoResizeDimensions'] = undefined;

/**
 * @member {module:model/ClearBasicFilterRequest} clearBasicFilter
 */
Request.prototype['clearBasicFilter'] = undefined;

/**
 * @member {module:model/CopyPasteRequest} copyPaste
 */
Request.prototype['copyPaste'] = undefined;

/**
 * @member {module:model/CreateDeveloperMetadataRequest} createDeveloperMetadata
 */
Request.prototype['createDeveloperMetadata'] = undefined;

/**
 * @member {module:model/CutPasteRequest} cutPaste
 */
Request.prototype['cutPaste'] = undefined;

/**
 * @member {module:model/DeleteBandingRequest} deleteBanding
 */
Request.prototype['deleteBanding'] = undefined;

/**
 * @member {module:model/DeleteConditionalFormatRuleRequest} deleteConditionalFormatRule
 */
Request.prototype['deleteConditionalFormatRule'] = undefined;

/**
 * @member {module:model/DeleteDataSourceRequest} deleteDataSource
 */
Request.prototype['deleteDataSource'] = undefined;

/**
 * @member {module:model/DeleteDeveloperMetadataRequest} deleteDeveloperMetadata
 */
Request.prototype['deleteDeveloperMetadata'] = undefined;

/**
 * @member {module:model/DeleteDimensionRequest} deleteDimension
 */
Request.prototype['deleteDimension'] = undefined;

/**
 * @member {module:model/DeleteDimensionGroupRequest} deleteDimensionGroup
 */
Request.prototype['deleteDimensionGroup'] = undefined;

/**
 * @member {module:model/DeleteDuplicatesRequest} deleteDuplicates
 */
Request.prototype['deleteDuplicates'] = undefined;

/**
 * @member {module:model/DeleteEmbeddedObjectRequest} deleteEmbeddedObject
 */
Request.prototype['deleteEmbeddedObject'] = undefined;

/**
 * @member {module:model/DeleteFilterViewRequest} deleteFilterView
 */
Request.prototype['deleteFilterView'] = undefined;

/**
 * @member {module:model/DeleteNamedRangeRequest} deleteNamedRange
 */
Request.prototype['deleteNamedRange'] = undefined;

/**
 * @member {module:model/DeleteProtectedRangeRequest} deleteProtectedRange
 */
Request.prototype['deleteProtectedRange'] = undefined;

/**
 * @member {module:model/DeleteRangeRequest} deleteRange
 */
Request.prototype['deleteRange'] = undefined;

/**
 * @member {module:model/DeleteSheetRequest} deleteSheet
 */
Request.prototype['deleteSheet'] = undefined;

/**
 * @member {module:model/DuplicateFilterViewRequest} duplicateFilterView
 */
Request.prototype['duplicateFilterView'] = undefined;

/**
 * @member {module:model/DuplicateSheetRequest} duplicateSheet
 */
Request.prototype['duplicateSheet'] = undefined;

/**
 * @member {module:model/FindReplaceRequest} findReplace
 */
Request.prototype['findReplace'] = undefined;

/**
 * @member {module:model/InsertDimensionRequest} insertDimension
 */
Request.prototype['insertDimension'] = undefined;

/**
 * @member {module:model/InsertRangeRequest} insertRange
 */
Request.prototype['insertRange'] = undefined;

/**
 * @member {module:model/MergeCellsRequest} mergeCells
 */
Request.prototype['mergeCells'] = undefined;

/**
 * @member {module:model/MoveDimensionRequest} moveDimension
 */
Request.prototype['moveDimension'] = undefined;

/**
 * @member {module:model/PasteDataRequest} pasteData
 */
Request.prototype['pasteData'] = undefined;

/**
 * @member {module:model/RandomizeRangeRequest} randomizeRange
 */
Request.prototype['randomizeRange'] = undefined;

/**
 * @member {module:model/RefreshDataSourceRequest} refreshDataSource
 */
Request.prototype['refreshDataSource'] = undefined;

/**
 * @member {module:model/RepeatCellRequest} repeatCell
 */
Request.prototype['repeatCell'] = undefined;

/**
 * @member {module:model/SetBasicFilterRequest} setBasicFilter
 */
Request.prototype['setBasicFilter'] = undefined;

/**
 * @member {module:model/SetDataValidationRequest} setDataValidation
 */
Request.prototype['setDataValidation'] = undefined;

/**
 * @member {module:model/SortRangeRequest} sortRange
 */
Request.prototype['sortRange'] = undefined;

/**
 * @member {module:model/TextToColumnsRequest} textToColumns
 */
Request.prototype['textToColumns'] = undefined;

/**
 * @member {module:model/TrimWhitespaceRequest} trimWhitespace
 */
Request.prototype['trimWhitespace'] = undefined;

/**
 * @member {module:model/UnmergeCellsRequest} unmergeCells
 */
Request.prototype['unmergeCells'] = undefined;

/**
 * @member {module:model/UpdateBandingRequest} updateBanding
 */
Request.prototype['updateBanding'] = undefined;

/**
 * @member {module:model/UpdateBordersRequest} updateBorders
 */
Request.prototype['updateBorders'] = undefined;

/**
 * @member {module:model/UpdateCellsRequest} updateCells
 */
Request.prototype['updateCells'] = undefined;

/**
 * @member {module:model/UpdateChartSpecRequest} updateChartSpec
 */
Request.prototype['updateChartSpec'] = undefined;

/**
 * @member {module:model/UpdateConditionalFormatRuleRequest} updateConditionalFormatRule
 */
Request.prototype['updateConditionalFormatRule'] = undefined;

/**
 * @member {module:model/UpdateDataSourceRequest} updateDataSource
 */
Request.prototype['updateDataSource'] = undefined;

/**
 * @member {module:model/UpdateDeveloperMetadataRequest} updateDeveloperMetadata
 */
Request.prototype['updateDeveloperMetadata'] = undefined;

/**
 * @member {module:model/UpdateDimensionGroupRequest} updateDimensionGroup
 */
Request.prototype['updateDimensionGroup'] = undefined;

/**
 * @member {module:model/UpdateDimensionPropertiesRequest} updateDimensionProperties
 */
Request.prototype['updateDimensionProperties'] = undefined;

/**
 * @member {module:model/UpdateEmbeddedObjectBorderRequest} updateEmbeddedObjectBorder
 */
Request.prototype['updateEmbeddedObjectBorder'] = undefined;

/**
 * @member {module:model/UpdateEmbeddedObjectPositionRequest} updateEmbeddedObjectPosition
 */
Request.prototype['updateEmbeddedObjectPosition'] = undefined;

/**
 * @member {module:model/UpdateFilterViewRequest} updateFilterView
 */
Request.prototype['updateFilterView'] = undefined;

/**
 * @member {module:model/UpdateNamedRangeRequest} updateNamedRange
 */
Request.prototype['updateNamedRange'] = undefined;

/**
 * @member {module:model/UpdateProtectedRangeRequest} updateProtectedRange
 */
Request.prototype['updateProtectedRange'] = undefined;

/**
 * @member {module:model/UpdateSheetPropertiesRequest} updateSheetProperties
 */
Request.prototype['updateSheetProperties'] = undefined;

/**
 * @member {module:model/UpdateSlicerSpecRequest} updateSlicerSpec
 */
Request.prototype['updateSlicerSpec'] = undefined;

/**
 * @member {module:model/UpdateSpreadsheetPropertiesRequest} updateSpreadsheetProperties
 */
Request.prototype['updateSpreadsheetProperties'] = undefined;






export default Request;

