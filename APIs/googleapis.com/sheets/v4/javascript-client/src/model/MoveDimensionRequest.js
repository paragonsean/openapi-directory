/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DimensionRange from './DimensionRange';

/**
 * The MoveDimensionRequest model module.
 * @module model/MoveDimensionRequest
 * @version v4
 */
class MoveDimensionRequest {
    /**
     * Constructs a new <code>MoveDimensionRequest</code>.
     * Moves one or more rows or columns.
     * @alias module:model/MoveDimensionRequest
     */
    constructor() { 
        
        MoveDimensionRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MoveDimensionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MoveDimensionRequest} obj Optional instance to populate.
     * @return {module:model/MoveDimensionRequest} The populated <code>MoveDimensionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MoveDimensionRequest();

            if (data.hasOwnProperty('destinationIndex')) {
                obj['destinationIndex'] = ApiClient.convertToType(data['destinationIndex'], 'Number');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = DimensionRange.constructFromObject(data['source']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MoveDimensionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MoveDimensionRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `source`
        if (data['source']) { // data not null
          DimensionRange.validateJSON(data['source']);
        }

        return true;
    }


}



/**
 * The zero-based start index of where to move the source data to, based on the coordinates *before* the source data is removed from the grid. Existing data will be shifted down or right (depending on the dimension) to make room for the moved dimensions. The source dimensions are removed from the grid, so the the data may end up in a different index than specified. For example, given `A1..A5` of `0, 1, 2, 3, 4` and wanting to move `\"1\"` and `\"2\"` to between `\"3\"` and `\"4\"`, the source would be `ROWS [1..3)`,and the destination index would be `\"4\"` (the zero-based index of row 5). The end result would be `A1..A5` of `0, 3, 1, 2, 4`.
 * @member {Number} destinationIndex
 */
MoveDimensionRequest.prototype['destinationIndex'] = undefined;

/**
 * @member {module:model/DimensionRange} source
 */
MoveDimensionRequest.prototype['source'] = undefined;






export default MoveDimensionRequest;

