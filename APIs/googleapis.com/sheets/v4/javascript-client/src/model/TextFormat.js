/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Color from './Color';
import ColorStyle from './ColorStyle';
import Link from './Link';

/**
 * The TextFormat model module.
 * @module model/TextFormat
 * @version v4
 */
class TextFormat {
    /**
     * Constructs a new <code>TextFormat</code>.
     * The format of a run of text in a cell. Absent values indicate that the field isn&#39;t specified.
     * @alias module:model/TextFormat
     */
    constructor() { 
        
        TextFormat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TextFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextFormat} obj Optional instance to populate.
     * @return {module:model/TextFormat} The populated <code>TextFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TextFormat();

            if (data.hasOwnProperty('bold')) {
                obj['bold'] = ApiClient.convertToType(data['bold'], 'Boolean');
            }
            if (data.hasOwnProperty('fontFamily')) {
                obj['fontFamily'] = ApiClient.convertToType(data['fontFamily'], 'String');
            }
            if (data.hasOwnProperty('fontSize')) {
                obj['fontSize'] = ApiClient.convertToType(data['fontSize'], 'Number');
            }
            if (data.hasOwnProperty('foregroundColor')) {
                obj['foregroundColor'] = Color.constructFromObject(data['foregroundColor']);
            }
            if (data.hasOwnProperty('foregroundColorStyle')) {
                obj['foregroundColorStyle'] = ColorStyle.constructFromObject(data['foregroundColorStyle']);
            }
            if (data.hasOwnProperty('italic')) {
                obj['italic'] = ApiClient.convertToType(data['italic'], 'Boolean');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = Link.constructFromObject(data['link']);
            }
            if (data.hasOwnProperty('strikethrough')) {
                obj['strikethrough'] = ApiClient.convertToType(data['strikethrough'], 'Boolean');
            }
            if (data.hasOwnProperty('underline')) {
                obj['underline'] = ApiClient.convertToType(data['underline'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TextFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TextFormat</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fontFamily'] && !(typeof data['fontFamily'] === 'string' || data['fontFamily'] instanceof String)) {
            throw new Error("Expected the field `fontFamily` to be a primitive type in the JSON string but got " + data['fontFamily']);
        }
        // validate the optional field `foregroundColor`
        if (data['foregroundColor']) { // data not null
          Color.validateJSON(data['foregroundColor']);
        }
        // validate the optional field `foregroundColorStyle`
        if (data['foregroundColorStyle']) { // data not null
          ColorStyle.validateJSON(data['foregroundColorStyle']);
        }
        // validate the optional field `link`
        if (data['link']) { // data not null
          Link.validateJSON(data['link']);
        }

        return true;
    }


}



/**
 * True if the text is bold.
 * @member {Boolean} bold
 */
TextFormat.prototype['bold'] = undefined;

/**
 * The font family.
 * @member {String} fontFamily
 */
TextFormat.prototype['fontFamily'] = undefined;

/**
 * The size of the font.
 * @member {Number} fontSize
 */
TextFormat.prototype['fontSize'] = undefined;

/**
 * @member {module:model/Color} foregroundColor
 */
TextFormat.prototype['foregroundColor'] = undefined;

/**
 * @member {module:model/ColorStyle} foregroundColorStyle
 */
TextFormat.prototype['foregroundColorStyle'] = undefined;

/**
 * True if the text is italicized.
 * @member {Boolean} italic
 */
TextFormat.prototype['italic'] = undefined;

/**
 * @member {module:model/Link} link
 */
TextFormat.prototype['link'] = undefined;

/**
 * True if the text has a strikethrough.
 * @member {Boolean} strikethrough
 */
TextFormat.prototype['strikethrough'] = undefined;

/**
 * True if the text is underlined.
 * @member {Boolean} underline
 */
TextFormat.prototype['underline'] = undefined;






export default TextFormat;

