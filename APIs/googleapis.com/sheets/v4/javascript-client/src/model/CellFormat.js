/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Borders from './Borders';
import Color from './Color';
import ColorStyle from './ColorStyle';
import NumberFormat from './NumberFormat';
import Padding from './Padding';
import TextFormat from './TextFormat';
import TextRotation from './TextRotation';

/**
 * The CellFormat model module.
 * @module model/CellFormat
 * @version v4
 */
class CellFormat {
    /**
     * Constructs a new <code>CellFormat</code>.
     * The format of a cell.
     * @alias module:model/CellFormat
     */
    constructor() { 
        
        CellFormat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CellFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CellFormat} obj Optional instance to populate.
     * @return {module:model/CellFormat} The populated <code>CellFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CellFormat();

            if (data.hasOwnProperty('backgroundColor')) {
                obj['backgroundColor'] = Color.constructFromObject(data['backgroundColor']);
            }
            if (data.hasOwnProperty('backgroundColorStyle')) {
                obj['backgroundColorStyle'] = ColorStyle.constructFromObject(data['backgroundColorStyle']);
            }
            if (data.hasOwnProperty('borders')) {
                obj['borders'] = Borders.constructFromObject(data['borders']);
            }
            if (data.hasOwnProperty('horizontalAlignment')) {
                obj['horizontalAlignment'] = ApiClient.convertToType(data['horizontalAlignment'], 'String');
            }
            if (data.hasOwnProperty('hyperlinkDisplayType')) {
                obj['hyperlinkDisplayType'] = ApiClient.convertToType(data['hyperlinkDisplayType'], 'String');
            }
            if (data.hasOwnProperty('numberFormat')) {
                obj['numberFormat'] = NumberFormat.constructFromObject(data['numberFormat']);
            }
            if (data.hasOwnProperty('padding')) {
                obj['padding'] = Padding.constructFromObject(data['padding']);
            }
            if (data.hasOwnProperty('textDirection')) {
                obj['textDirection'] = ApiClient.convertToType(data['textDirection'], 'String');
            }
            if (data.hasOwnProperty('textFormat')) {
                obj['textFormat'] = TextFormat.constructFromObject(data['textFormat']);
            }
            if (data.hasOwnProperty('textRotation')) {
                obj['textRotation'] = TextRotation.constructFromObject(data['textRotation']);
            }
            if (data.hasOwnProperty('verticalAlignment')) {
                obj['verticalAlignment'] = ApiClient.convertToType(data['verticalAlignment'], 'String');
            }
            if (data.hasOwnProperty('wrapStrategy')) {
                obj['wrapStrategy'] = ApiClient.convertToType(data['wrapStrategy'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CellFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CellFormat</code>.
     */
    static validateJSON(data) {
        // validate the optional field `backgroundColor`
        if (data['backgroundColor']) { // data not null
          Color.validateJSON(data['backgroundColor']);
        }
        // validate the optional field `backgroundColorStyle`
        if (data['backgroundColorStyle']) { // data not null
          ColorStyle.validateJSON(data['backgroundColorStyle']);
        }
        // validate the optional field `borders`
        if (data['borders']) { // data not null
          Borders.validateJSON(data['borders']);
        }
        // ensure the json data is a string
        if (data['horizontalAlignment'] && !(typeof data['horizontalAlignment'] === 'string' || data['horizontalAlignment'] instanceof String)) {
            throw new Error("Expected the field `horizontalAlignment` to be a primitive type in the JSON string but got " + data['horizontalAlignment']);
        }
        // ensure the json data is a string
        if (data['hyperlinkDisplayType'] && !(typeof data['hyperlinkDisplayType'] === 'string' || data['hyperlinkDisplayType'] instanceof String)) {
            throw new Error("Expected the field `hyperlinkDisplayType` to be a primitive type in the JSON string but got " + data['hyperlinkDisplayType']);
        }
        // validate the optional field `numberFormat`
        if (data['numberFormat']) { // data not null
          NumberFormat.validateJSON(data['numberFormat']);
        }
        // validate the optional field `padding`
        if (data['padding']) { // data not null
          Padding.validateJSON(data['padding']);
        }
        // ensure the json data is a string
        if (data['textDirection'] && !(typeof data['textDirection'] === 'string' || data['textDirection'] instanceof String)) {
            throw new Error("Expected the field `textDirection` to be a primitive type in the JSON string but got " + data['textDirection']);
        }
        // validate the optional field `textFormat`
        if (data['textFormat']) { // data not null
          TextFormat.validateJSON(data['textFormat']);
        }
        // validate the optional field `textRotation`
        if (data['textRotation']) { // data not null
          TextRotation.validateJSON(data['textRotation']);
        }
        // ensure the json data is a string
        if (data['verticalAlignment'] && !(typeof data['verticalAlignment'] === 'string' || data['verticalAlignment'] instanceof String)) {
            throw new Error("Expected the field `verticalAlignment` to be a primitive type in the JSON string but got " + data['verticalAlignment']);
        }
        // ensure the json data is a string
        if (data['wrapStrategy'] && !(typeof data['wrapStrategy'] === 'string' || data['wrapStrategy'] instanceof String)) {
            throw new Error("Expected the field `wrapStrategy` to be a primitive type in the JSON string but got " + data['wrapStrategy']);
        }

        return true;
    }


}



/**
 * @member {module:model/Color} backgroundColor
 */
CellFormat.prototype['backgroundColor'] = undefined;

/**
 * @member {module:model/ColorStyle} backgroundColorStyle
 */
CellFormat.prototype['backgroundColorStyle'] = undefined;

/**
 * @member {module:model/Borders} borders
 */
CellFormat.prototype['borders'] = undefined;

/**
 * The horizontal alignment of the value in the cell.
 * @member {module:model/CellFormat.HorizontalAlignmentEnum} horizontalAlignment
 */
CellFormat.prototype['horizontalAlignment'] = undefined;

/**
 * If one exists, how a hyperlink should be displayed in the cell.
 * @member {module:model/CellFormat.HyperlinkDisplayTypeEnum} hyperlinkDisplayType
 */
CellFormat.prototype['hyperlinkDisplayType'] = undefined;

/**
 * @member {module:model/NumberFormat} numberFormat
 */
CellFormat.prototype['numberFormat'] = undefined;

/**
 * @member {module:model/Padding} padding
 */
CellFormat.prototype['padding'] = undefined;

/**
 * The direction of the text in the cell.
 * @member {module:model/CellFormat.TextDirectionEnum} textDirection
 */
CellFormat.prototype['textDirection'] = undefined;

/**
 * @member {module:model/TextFormat} textFormat
 */
CellFormat.prototype['textFormat'] = undefined;

/**
 * @member {module:model/TextRotation} textRotation
 */
CellFormat.prototype['textRotation'] = undefined;

/**
 * The vertical alignment of the value in the cell.
 * @member {module:model/CellFormat.VerticalAlignmentEnum} verticalAlignment
 */
CellFormat.prototype['verticalAlignment'] = undefined;

/**
 * The wrap strategy for the value in the cell.
 * @member {module:model/CellFormat.WrapStrategyEnum} wrapStrategy
 */
CellFormat.prototype['wrapStrategy'] = undefined;





/**
 * Allowed values for the <code>horizontalAlignment</code> property.
 * @enum {String}
 * @readonly
 */
CellFormat['HorizontalAlignmentEnum'] = {

    /**
     * value: "HORIZONTAL_ALIGN_UNSPECIFIED"
     * @const
     */
    "HORIZONTAL_ALIGN_UNSPECIFIED": "HORIZONTAL_ALIGN_UNSPECIFIED",

    /**
     * value: "LEFT"
     * @const
     */
    "LEFT": "LEFT",

    /**
     * value: "CENTER"
     * @const
     */
    "CENTER": "CENTER",

    /**
     * value: "RIGHT"
     * @const
     */
    "RIGHT": "RIGHT"
};


/**
 * Allowed values for the <code>hyperlinkDisplayType</code> property.
 * @enum {String}
 * @readonly
 */
CellFormat['HyperlinkDisplayTypeEnum'] = {

    /**
     * value: "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED"
     * @const
     */
    "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED": "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED",

    /**
     * value: "LINKED"
     * @const
     */
    "LINKED": "LINKED",

    /**
     * value: "PLAIN_TEXT"
     * @const
     */
    "PLAIN_TEXT": "PLAIN_TEXT"
};


/**
 * Allowed values for the <code>textDirection</code> property.
 * @enum {String}
 * @readonly
 */
CellFormat['TextDirectionEnum'] = {

    /**
     * value: "TEXT_DIRECTION_UNSPECIFIED"
     * @const
     */
    "TEXT_DIRECTION_UNSPECIFIED": "TEXT_DIRECTION_UNSPECIFIED",

    /**
     * value: "LEFT_TO_RIGHT"
     * @const
     */
    "LEFT_TO_RIGHT": "LEFT_TO_RIGHT",

    /**
     * value: "RIGHT_TO_LEFT"
     * @const
     */
    "RIGHT_TO_LEFT": "RIGHT_TO_LEFT"
};


/**
 * Allowed values for the <code>verticalAlignment</code> property.
 * @enum {String}
 * @readonly
 */
CellFormat['VerticalAlignmentEnum'] = {

    /**
     * value: "VERTICAL_ALIGN_UNSPECIFIED"
     * @const
     */
    "VERTICAL_ALIGN_UNSPECIFIED": "VERTICAL_ALIGN_UNSPECIFIED",

    /**
     * value: "TOP"
     * @const
     */
    "TOP": "TOP",

    /**
     * value: "MIDDLE"
     * @const
     */
    "MIDDLE": "MIDDLE",

    /**
     * value: "BOTTOM"
     * @const
     */
    "BOTTOM": "BOTTOM"
};


/**
 * Allowed values for the <code>wrapStrategy</code> property.
 * @enum {String}
 * @readonly
 */
CellFormat['WrapStrategyEnum'] = {

    /**
     * value: "WRAP_STRATEGY_UNSPECIFIED"
     * @const
     */
    "WRAP_STRATEGY_UNSPECIFIED": "WRAP_STRATEGY_UNSPECIFIED",

    /**
     * value: "OVERFLOW_CELL"
     * @const
     */
    "OVERFLOW_CELL": "OVERFLOW_CELL",

    /**
     * value: "LEGACY_WRAP"
     * @const
     */
    "LEGACY_WRAP": "LEGACY_WRAP",

    /**
     * value: "CLIP"
     * @const
     */
    "CLIP": "CLIP",

    /**
     * value: "WRAP"
     * @const
     */
    "WRAP": "WRAP"
};



export default CellFormat;

