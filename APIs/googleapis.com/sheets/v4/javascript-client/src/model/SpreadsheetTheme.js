/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ThemeColorPair from './ThemeColorPair';

/**
 * The SpreadsheetTheme model module.
 * @module model/SpreadsheetTheme
 * @version v4
 */
class SpreadsheetTheme {
    /**
     * Constructs a new <code>SpreadsheetTheme</code>.
     * Represents spreadsheet theme
     * @alias module:model/SpreadsheetTheme
     */
    constructor() { 
        
        SpreadsheetTheme.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SpreadsheetTheme</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SpreadsheetTheme} obj Optional instance to populate.
     * @return {module:model/SpreadsheetTheme} The populated <code>SpreadsheetTheme</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SpreadsheetTheme();

            if (data.hasOwnProperty('primaryFontFamily')) {
                obj['primaryFontFamily'] = ApiClient.convertToType(data['primaryFontFamily'], 'String');
            }
            if (data.hasOwnProperty('themeColors')) {
                obj['themeColors'] = ApiClient.convertToType(data['themeColors'], [ThemeColorPair]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SpreadsheetTheme</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SpreadsheetTheme</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['primaryFontFamily'] && !(typeof data['primaryFontFamily'] === 'string' || data['primaryFontFamily'] instanceof String)) {
            throw new Error("Expected the field `primaryFontFamily` to be a primitive type in the JSON string but got " + data['primaryFontFamily']);
        }
        if (data['themeColors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['themeColors'])) {
                throw new Error("Expected the field `themeColors` to be an array in the JSON data but got " + data['themeColors']);
            }
            // validate the optional field `themeColors` (array)
            for (const item of data['themeColors']) {
                ThemeColorPair.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Name of the primary font family.
 * @member {String} primaryFontFamily
 */
SpreadsheetTheme.prototype['primaryFontFamily'] = undefined;

/**
 * The spreadsheet theme color pairs. To update you must provide all theme color pairs.
 * @member {Array.<module:model/ThemeColorPair>} themeColors
 */
SpreadsheetTheme.prototype['themeColors'] = undefined;






export default SpreadsheetTheme;

