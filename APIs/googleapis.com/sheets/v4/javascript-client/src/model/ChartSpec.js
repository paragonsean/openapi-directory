/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BasicChartSpec from './BasicChartSpec';
import BubbleChartSpec from './BubbleChartSpec';
import CandlestickChartSpec from './CandlestickChartSpec';
import Color from './Color';
import ColorStyle from './ColorStyle';
import DataSourceChartProperties from './DataSourceChartProperties';
import FilterSpec from './FilterSpec';
import HistogramChartSpec from './HistogramChartSpec';
import OrgChartSpec from './OrgChartSpec';
import PieChartSpec from './PieChartSpec';
import ScorecardChartSpec from './ScorecardChartSpec';
import SortSpec from './SortSpec';
import TextFormat from './TextFormat';
import TextPosition from './TextPosition';
import TreemapChartSpec from './TreemapChartSpec';
import WaterfallChartSpec from './WaterfallChartSpec';

/**
 * The ChartSpec model module.
 * @module model/ChartSpec
 * @version v4
 */
class ChartSpec {
    /**
     * Constructs a new <code>ChartSpec</code>.
     * The specifications of a chart.
     * @alias module:model/ChartSpec
     */
    constructor() { 
        
        ChartSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChartSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChartSpec} obj Optional instance to populate.
     * @return {module:model/ChartSpec} The populated <code>ChartSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChartSpec();

            if (data.hasOwnProperty('altText')) {
                obj['altText'] = ApiClient.convertToType(data['altText'], 'String');
            }
            if (data.hasOwnProperty('backgroundColor')) {
                obj['backgroundColor'] = Color.constructFromObject(data['backgroundColor']);
            }
            if (data.hasOwnProperty('backgroundColorStyle')) {
                obj['backgroundColorStyle'] = ColorStyle.constructFromObject(data['backgroundColorStyle']);
            }
            if (data.hasOwnProperty('basicChart')) {
                obj['basicChart'] = BasicChartSpec.constructFromObject(data['basicChart']);
            }
            if (data.hasOwnProperty('bubbleChart')) {
                obj['bubbleChart'] = BubbleChartSpec.constructFromObject(data['bubbleChart']);
            }
            if (data.hasOwnProperty('candlestickChart')) {
                obj['candlestickChart'] = CandlestickChartSpec.constructFromObject(data['candlestickChart']);
            }
            if (data.hasOwnProperty('dataSourceChartProperties')) {
                obj['dataSourceChartProperties'] = DataSourceChartProperties.constructFromObject(data['dataSourceChartProperties']);
            }
            if (data.hasOwnProperty('filterSpecs')) {
                obj['filterSpecs'] = ApiClient.convertToType(data['filterSpecs'], [FilterSpec]);
            }
            if (data.hasOwnProperty('fontName')) {
                obj['fontName'] = ApiClient.convertToType(data['fontName'], 'String');
            }
            if (data.hasOwnProperty('hiddenDimensionStrategy')) {
                obj['hiddenDimensionStrategy'] = ApiClient.convertToType(data['hiddenDimensionStrategy'], 'String');
            }
            if (data.hasOwnProperty('histogramChart')) {
                obj['histogramChart'] = HistogramChartSpec.constructFromObject(data['histogramChart']);
            }
            if (data.hasOwnProperty('maximized')) {
                obj['maximized'] = ApiClient.convertToType(data['maximized'], 'Boolean');
            }
            if (data.hasOwnProperty('orgChart')) {
                obj['orgChart'] = OrgChartSpec.constructFromObject(data['orgChart']);
            }
            if (data.hasOwnProperty('pieChart')) {
                obj['pieChart'] = PieChartSpec.constructFromObject(data['pieChart']);
            }
            if (data.hasOwnProperty('scorecardChart')) {
                obj['scorecardChart'] = ScorecardChartSpec.constructFromObject(data['scorecardChart']);
            }
            if (data.hasOwnProperty('sortSpecs')) {
                obj['sortSpecs'] = ApiClient.convertToType(data['sortSpecs'], [SortSpec]);
            }
            if (data.hasOwnProperty('subtitle')) {
                obj['subtitle'] = ApiClient.convertToType(data['subtitle'], 'String');
            }
            if (data.hasOwnProperty('subtitleTextFormat')) {
                obj['subtitleTextFormat'] = TextFormat.constructFromObject(data['subtitleTextFormat']);
            }
            if (data.hasOwnProperty('subtitleTextPosition')) {
                obj['subtitleTextPosition'] = TextPosition.constructFromObject(data['subtitleTextPosition']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('titleTextFormat')) {
                obj['titleTextFormat'] = TextFormat.constructFromObject(data['titleTextFormat']);
            }
            if (data.hasOwnProperty('titleTextPosition')) {
                obj['titleTextPosition'] = TextPosition.constructFromObject(data['titleTextPosition']);
            }
            if (data.hasOwnProperty('treemapChart')) {
                obj['treemapChart'] = TreemapChartSpec.constructFromObject(data['treemapChart']);
            }
            if (data.hasOwnProperty('waterfallChart')) {
                obj['waterfallChart'] = WaterfallChartSpec.constructFromObject(data['waterfallChart']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChartSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChartSpec</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['altText'] && !(typeof data['altText'] === 'string' || data['altText'] instanceof String)) {
            throw new Error("Expected the field `altText` to be a primitive type in the JSON string but got " + data['altText']);
        }
        // validate the optional field `backgroundColor`
        if (data['backgroundColor']) { // data not null
          Color.validateJSON(data['backgroundColor']);
        }
        // validate the optional field `backgroundColorStyle`
        if (data['backgroundColorStyle']) { // data not null
          ColorStyle.validateJSON(data['backgroundColorStyle']);
        }
        // validate the optional field `basicChart`
        if (data['basicChart']) { // data not null
          BasicChartSpec.validateJSON(data['basicChart']);
        }
        // validate the optional field `bubbleChart`
        if (data['bubbleChart']) { // data not null
          BubbleChartSpec.validateJSON(data['bubbleChart']);
        }
        // validate the optional field `candlestickChart`
        if (data['candlestickChart']) { // data not null
          CandlestickChartSpec.validateJSON(data['candlestickChart']);
        }
        // validate the optional field `dataSourceChartProperties`
        if (data['dataSourceChartProperties']) { // data not null
          DataSourceChartProperties.validateJSON(data['dataSourceChartProperties']);
        }
        if (data['filterSpecs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filterSpecs'])) {
                throw new Error("Expected the field `filterSpecs` to be an array in the JSON data but got " + data['filterSpecs']);
            }
            // validate the optional field `filterSpecs` (array)
            for (const item of data['filterSpecs']) {
                FilterSpec.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['fontName'] && !(typeof data['fontName'] === 'string' || data['fontName'] instanceof String)) {
            throw new Error("Expected the field `fontName` to be a primitive type in the JSON string but got " + data['fontName']);
        }
        // ensure the json data is a string
        if (data['hiddenDimensionStrategy'] && !(typeof data['hiddenDimensionStrategy'] === 'string' || data['hiddenDimensionStrategy'] instanceof String)) {
            throw new Error("Expected the field `hiddenDimensionStrategy` to be a primitive type in the JSON string but got " + data['hiddenDimensionStrategy']);
        }
        // validate the optional field `histogramChart`
        if (data['histogramChart']) { // data not null
          HistogramChartSpec.validateJSON(data['histogramChart']);
        }
        // validate the optional field `orgChart`
        if (data['orgChart']) { // data not null
          OrgChartSpec.validateJSON(data['orgChart']);
        }
        // validate the optional field `pieChart`
        if (data['pieChart']) { // data not null
          PieChartSpec.validateJSON(data['pieChart']);
        }
        // validate the optional field `scorecardChart`
        if (data['scorecardChart']) { // data not null
          ScorecardChartSpec.validateJSON(data['scorecardChart']);
        }
        if (data['sortSpecs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sortSpecs'])) {
                throw new Error("Expected the field `sortSpecs` to be an array in the JSON data but got " + data['sortSpecs']);
            }
            // validate the optional field `sortSpecs` (array)
            for (const item of data['sortSpecs']) {
                SortSpec.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['subtitle'] && !(typeof data['subtitle'] === 'string' || data['subtitle'] instanceof String)) {
            throw new Error("Expected the field `subtitle` to be a primitive type in the JSON string but got " + data['subtitle']);
        }
        // validate the optional field `subtitleTextFormat`
        if (data['subtitleTextFormat']) { // data not null
          TextFormat.validateJSON(data['subtitleTextFormat']);
        }
        // validate the optional field `subtitleTextPosition`
        if (data['subtitleTextPosition']) { // data not null
          TextPosition.validateJSON(data['subtitleTextPosition']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // validate the optional field `titleTextFormat`
        if (data['titleTextFormat']) { // data not null
          TextFormat.validateJSON(data['titleTextFormat']);
        }
        // validate the optional field `titleTextPosition`
        if (data['titleTextPosition']) { // data not null
          TextPosition.validateJSON(data['titleTextPosition']);
        }
        // validate the optional field `treemapChart`
        if (data['treemapChart']) { // data not null
          TreemapChartSpec.validateJSON(data['treemapChart']);
        }
        // validate the optional field `waterfallChart`
        if (data['waterfallChart']) { // data not null
          WaterfallChartSpec.validateJSON(data['waterfallChart']);
        }

        return true;
    }


}



/**
 * The alternative text that describes the chart. This is often used for accessibility.
 * @member {String} altText
 */
ChartSpec.prototype['altText'] = undefined;

/**
 * @member {module:model/Color} backgroundColor
 */
ChartSpec.prototype['backgroundColor'] = undefined;

/**
 * @member {module:model/ColorStyle} backgroundColorStyle
 */
ChartSpec.prototype['backgroundColorStyle'] = undefined;

/**
 * @member {module:model/BasicChartSpec} basicChart
 */
ChartSpec.prototype['basicChart'] = undefined;

/**
 * @member {module:model/BubbleChartSpec} bubbleChart
 */
ChartSpec.prototype['bubbleChart'] = undefined;

/**
 * @member {module:model/CandlestickChartSpec} candlestickChart
 */
ChartSpec.prototype['candlestickChart'] = undefined;

/**
 * @member {module:model/DataSourceChartProperties} dataSourceChartProperties
 */
ChartSpec.prototype['dataSourceChartProperties'] = undefined;

/**
 * The filters applied to the source data of the chart. Only supported for data source charts.
 * @member {Array.<module:model/FilterSpec>} filterSpecs
 */
ChartSpec.prototype['filterSpecs'] = undefined;

/**
 * The name of the font to use by default for all chart text (e.g. title, axis labels, legend). If a font is specified for a specific part of the chart it will override this font name.
 * @member {String} fontName
 */
ChartSpec.prototype['fontName'] = undefined;

/**
 * Determines how the charts will use hidden rows or columns.
 * @member {module:model/ChartSpec.HiddenDimensionStrategyEnum} hiddenDimensionStrategy
 */
ChartSpec.prototype['hiddenDimensionStrategy'] = undefined;

/**
 * @member {module:model/HistogramChartSpec} histogramChart
 */
ChartSpec.prototype['histogramChart'] = undefined;

/**
 * True to make a chart fill the entire space in which it's rendered with minimum padding. False to use the default padding. (Not applicable to Geo and Org charts.)
 * @member {Boolean} maximized
 */
ChartSpec.prototype['maximized'] = undefined;

/**
 * @member {module:model/OrgChartSpec} orgChart
 */
ChartSpec.prototype['orgChart'] = undefined;

/**
 * @member {module:model/PieChartSpec} pieChart
 */
ChartSpec.prototype['pieChart'] = undefined;

/**
 * @member {module:model/ScorecardChartSpec} scorecardChart
 */
ChartSpec.prototype['scorecardChart'] = undefined;

/**
 * The order to sort the chart data by. Only a single sort spec is supported. Only supported for data source charts.
 * @member {Array.<module:model/SortSpec>} sortSpecs
 */
ChartSpec.prototype['sortSpecs'] = undefined;

/**
 * The subtitle of the chart.
 * @member {String} subtitle
 */
ChartSpec.prototype['subtitle'] = undefined;

/**
 * @member {module:model/TextFormat} subtitleTextFormat
 */
ChartSpec.prototype['subtitleTextFormat'] = undefined;

/**
 * @member {module:model/TextPosition} subtitleTextPosition
 */
ChartSpec.prototype['subtitleTextPosition'] = undefined;

/**
 * The title of the chart.
 * @member {String} title
 */
ChartSpec.prototype['title'] = undefined;

/**
 * @member {module:model/TextFormat} titleTextFormat
 */
ChartSpec.prototype['titleTextFormat'] = undefined;

/**
 * @member {module:model/TextPosition} titleTextPosition
 */
ChartSpec.prototype['titleTextPosition'] = undefined;

/**
 * @member {module:model/TreemapChartSpec} treemapChart
 */
ChartSpec.prototype['treemapChart'] = undefined;

/**
 * @member {module:model/WaterfallChartSpec} waterfallChart
 */
ChartSpec.prototype['waterfallChart'] = undefined;





/**
 * Allowed values for the <code>hiddenDimensionStrategy</code> property.
 * @enum {String}
 * @readonly
 */
ChartSpec['HiddenDimensionStrategyEnum'] = {

    /**
     * value: "CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED"
     * @const
     */
    "CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED": "CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED",

    /**
     * value: "SKIP_HIDDEN_ROWS_AND_COLUMNS"
     * @const
     */
    "SKIP_HIDDEN_ROWS_AND_COLUMNS": "SKIP_HIDDEN_ROWS_AND_COLUMNS",

    /**
     * value: "SKIP_HIDDEN_ROWS"
     * @const
     */
    "SKIP_HIDDEN_ROWS": "SKIP_HIDDEN_ROWS",

    /**
     * value: "SKIP_HIDDEN_COLUMNS"
     * @const
     */
    "SKIP_HIDDEN_COLUMNS": "SKIP_HIDDEN_COLUMNS",

    /**
     * value: "SHOW_ALL"
     * @const
     */
    "SHOW_ALL": "SHOW_ALL"
};



export default ChartSpec;

