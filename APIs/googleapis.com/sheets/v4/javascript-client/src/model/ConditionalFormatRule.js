/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BooleanRule from './BooleanRule';
import GradientRule from './GradientRule';
import GridRange from './GridRange';

/**
 * The ConditionalFormatRule model module.
 * @module model/ConditionalFormatRule
 * @version v4
 */
class ConditionalFormatRule {
    /**
     * Constructs a new <code>ConditionalFormatRule</code>.
     * A rule describing a conditional format.
     * @alias module:model/ConditionalFormatRule
     */
    constructor() { 
        
        ConditionalFormatRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConditionalFormatRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConditionalFormatRule} obj Optional instance to populate.
     * @return {module:model/ConditionalFormatRule} The populated <code>ConditionalFormatRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConditionalFormatRule();

            if (data.hasOwnProperty('booleanRule')) {
                obj['booleanRule'] = BooleanRule.constructFromObject(data['booleanRule']);
            }
            if (data.hasOwnProperty('gradientRule')) {
                obj['gradientRule'] = GradientRule.constructFromObject(data['gradientRule']);
            }
            if (data.hasOwnProperty('ranges')) {
                obj['ranges'] = ApiClient.convertToType(data['ranges'], [GridRange]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConditionalFormatRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConditionalFormatRule</code>.
     */
    static validateJSON(data) {
        // validate the optional field `booleanRule`
        if (data['booleanRule']) { // data not null
          BooleanRule.validateJSON(data['booleanRule']);
        }
        // validate the optional field `gradientRule`
        if (data['gradientRule']) { // data not null
          GradientRule.validateJSON(data['gradientRule']);
        }
        if (data['ranges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ranges'])) {
                throw new Error("Expected the field `ranges` to be an array in the JSON data but got " + data['ranges']);
            }
            // validate the optional field `ranges` (array)
            for (const item of data['ranges']) {
                GridRange.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/BooleanRule} booleanRule
 */
ConditionalFormatRule.prototype['booleanRule'] = undefined;

/**
 * @member {module:model/GradientRule} gradientRule
 */
ConditionalFormatRule.prototype['gradientRule'] = undefined;

/**
 * The ranges that are formatted if the condition is true. All the ranges must be on the same grid.
 * @member {Array.<module:model/GridRange>} ranges
 */
ConditionalFormatRule.prototype['ranges'] = undefined;






export default ConditionalFormatRule;

