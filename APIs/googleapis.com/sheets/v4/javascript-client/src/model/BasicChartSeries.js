/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BasicSeriesDataPointStyleOverride from './BasicSeriesDataPointStyleOverride';
import ChartData from './ChartData';
import Color from './Color';
import ColorStyle from './ColorStyle';
import DataLabel from './DataLabel';
import LineStyle from './LineStyle';
import PointStyle from './PointStyle';

/**
 * The BasicChartSeries model module.
 * @module model/BasicChartSeries
 * @version v4
 */
class BasicChartSeries {
    /**
     * Constructs a new <code>BasicChartSeries</code>.
     * A single series of data in a chart. For example, if charting stock prices over time, multiple series may exist, one for the \&quot;Open Price\&quot;, \&quot;High Price\&quot;, \&quot;Low Price\&quot; and \&quot;Close Price\&quot;.
     * @alias module:model/BasicChartSeries
     */
    constructor() { 
        
        BasicChartSeries.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BasicChartSeries</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BasicChartSeries} obj Optional instance to populate.
     * @return {module:model/BasicChartSeries} The populated <code>BasicChartSeries</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BasicChartSeries();

            if (data.hasOwnProperty('color')) {
                obj['color'] = Color.constructFromObject(data['color']);
            }
            if (data.hasOwnProperty('colorStyle')) {
                obj['colorStyle'] = ColorStyle.constructFromObject(data['colorStyle']);
            }
            if (data.hasOwnProperty('dataLabel')) {
                obj['dataLabel'] = DataLabel.constructFromObject(data['dataLabel']);
            }
            if (data.hasOwnProperty('lineStyle')) {
                obj['lineStyle'] = LineStyle.constructFromObject(data['lineStyle']);
            }
            if (data.hasOwnProperty('pointStyle')) {
                obj['pointStyle'] = PointStyle.constructFromObject(data['pointStyle']);
            }
            if (data.hasOwnProperty('series')) {
                obj['series'] = ChartData.constructFromObject(data['series']);
            }
            if (data.hasOwnProperty('styleOverrides')) {
                obj['styleOverrides'] = ApiClient.convertToType(data['styleOverrides'], [BasicSeriesDataPointStyleOverride]);
            }
            if (data.hasOwnProperty('targetAxis')) {
                obj['targetAxis'] = ApiClient.convertToType(data['targetAxis'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BasicChartSeries</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BasicChartSeries</code>.
     */
    static validateJSON(data) {
        // validate the optional field `color`
        if (data['color']) { // data not null
          Color.validateJSON(data['color']);
        }
        // validate the optional field `colorStyle`
        if (data['colorStyle']) { // data not null
          ColorStyle.validateJSON(data['colorStyle']);
        }
        // validate the optional field `dataLabel`
        if (data['dataLabel']) { // data not null
          DataLabel.validateJSON(data['dataLabel']);
        }
        // validate the optional field `lineStyle`
        if (data['lineStyle']) { // data not null
          LineStyle.validateJSON(data['lineStyle']);
        }
        // validate the optional field `pointStyle`
        if (data['pointStyle']) { // data not null
          PointStyle.validateJSON(data['pointStyle']);
        }
        // validate the optional field `series`
        if (data['series']) { // data not null
          ChartData.validateJSON(data['series']);
        }
        if (data['styleOverrides']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['styleOverrides'])) {
                throw new Error("Expected the field `styleOverrides` to be an array in the JSON data but got " + data['styleOverrides']);
            }
            // validate the optional field `styleOverrides` (array)
            for (const item of data['styleOverrides']) {
                BasicSeriesDataPointStyleOverride.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['targetAxis'] && !(typeof data['targetAxis'] === 'string' || data['targetAxis'] instanceof String)) {
            throw new Error("Expected the field `targetAxis` to be a primitive type in the JSON string but got " + data['targetAxis']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/Color} color
 */
BasicChartSeries.prototype['color'] = undefined;

/**
 * @member {module:model/ColorStyle} colorStyle
 */
BasicChartSeries.prototype['colorStyle'] = undefined;

/**
 * @member {module:model/DataLabel} dataLabel
 */
BasicChartSeries.prototype['dataLabel'] = undefined;

/**
 * @member {module:model/LineStyle} lineStyle
 */
BasicChartSeries.prototype['lineStyle'] = undefined;

/**
 * @member {module:model/PointStyle} pointStyle
 */
BasicChartSeries.prototype['pointStyle'] = undefined;

/**
 * @member {module:model/ChartData} series
 */
BasicChartSeries.prototype['series'] = undefined;

/**
 * Style override settings for series data points.
 * @member {Array.<module:model/BasicSeriesDataPointStyleOverride>} styleOverrides
 */
BasicChartSeries.prototype['styleOverrides'] = undefined;

/**
 * The minor axis that will specify the range of values for this series. For example, if charting stocks over time, the \"Volume\" series may want to be pinned to the right with the prices pinned to the left, because the scale of trading volume is different than the scale of prices. It is an error to specify an axis that isn't a valid minor axis for the chart's type.
 * @member {module:model/BasicChartSeries.TargetAxisEnum} targetAxis
 */
BasicChartSeries.prototype['targetAxis'] = undefined;

/**
 * The type of this series. Valid only if the chartType is COMBO. Different types will change the way the series is visualized. Only LINE, AREA, and COLUMN are supported.
 * @member {module:model/BasicChartSeries.TypeEnum} type
 */
BasicChartSeries.prototype['type'] = undefined;





/**
 * Allowed values for the <code>targetAxis</code> property.
 * @enum {String}
 * @readonly
 */
BasicChartSeries['TargetAxisEnum'] = {

    /**
     * value: "BASIC_CHART_AXIS_POSITION_UNSPECIFIED"
     * @const
     */
    "BASIC_CHART_AXIS_POSITION_UNSPECIFIED": "BASIC_CHART_AXIS_POSITION_UNSPECIFIED",

    /**
     * value: "BOTTOM_AXIS"
     * @const
     */
    "BOTTOM_AXIS": "BOTTOM_AXIS",

    /**
     * value: "LEFT_AXIS"
     * @const
     */
    "LEFT_AXIS": "LEFT_AXIS",

    /**
     * value: "RIGHT_AXIS"
     * @const
     */
    "RIGHT_AXIS": "RIGHT_AXIS"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
BasicChartSeries['TypeEnum'] = {

    /**
     * value: "BASIC_CHART_TYPE_UNSPECIFIED"
     * @const
     */
    "BASIC_CHART_TYPE_UNSPECIFIED": "BASIC_CHART_TYPE_UNSPECIFIED",

    /**
     * value: "BAR"
     * @const
     */
    "BAR": "BAR",

    /**
     * value: "LINE"
     * @const
     */
    "LINE": "LINE",

    /**
     * value: "AREA"
     * @const
     */
    "AREA": "AREA",

    /**
     * value: "COLUMN"
     * @const
     */
    "COLUMN": "COLUMN",

    /**
     * value: "SCATTER"
     * @const
     */
    "SCATTER": "SCATTER",

    /**
     * value: "COMBO"
     * @const
     */
    "COMBO": "COMBO",

    /**
     * value: "STEPPED_AREA"
     * @const
     */
    "STEPPED_AREA": "STEPPED_AREA"
};



export default BasicChartSeries;

