/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddBandingResponse from './AddBandingResponse';
import AddChartResponse from './AddChartResponse';
import AddDataSourceResponse from './AddDataSourceResponse';
import AddDimensionGroupResponse from './AddDimensionGroupResponse';
import AddFilterViewResponse from './AddFilterViewResponse';
import AddNamedRangeResponse from './AddNamedRangeResponse';
import AddProtectedRangeResponse from './AddProtectedRangeResponse';
import AddSheetResponse from './AddSheetResponse';
import AddSlicerResponse from './AddSlicerResponse';
import CreateDeveloperMetadataResponse from './CreateDeveloperMetadataResponse';
import DeleteConditionalFormatRuleResponse from './DeleteConditionalFormatRuleResponse';
import DeleteDeveloperMetadataResponse from './DeleteDeveloperMetadataResponse';
import DeleteDimensionGroupResponse from './DeleteDimensionGroupResponse';
import DeleteDuplicatesResponse from './DeleteDuplicatesResponse';
import DuplicateFilterViewResponse from './DuplicateFilterViewResponse';
import DuplicateSheetResponse from './DuplicateSheetResponse';
import FindReplaceResponse from './FindReplaceResponse';
import RefreshDataSourceResponse from './RefreshDataSourceResponse';
import TrimWhitespaceResponse from './TrimWhitespaceResponse';
import UpdateConditionalFormatRuleResponse from './UpdateConditionalFormatRuleResponse';
import UpdateDataSourceResponse from './UpdateDataSourceResponse';
import UpdateDeveloperMetadataResponse from './UpdateDeveloperMetadataResponse';
import UpdateEmbeddedObjectPositionResponse from './UpdateEmbeddedObjectPositionResponse';

/**
 * The Response model module.
 * @module model/Response
 * @version v4
 */
class Response {
    /**
     * Constructs a new <code>Response</code>.
     * A single response from an update.
     * @alias module:model/Response
     */
    constructor() { 
        
        Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Response} obj Optional instance to populate.
     * @return {module:model/Response} The populated <code>Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Response();

            if (data.hasOwnProperty('addBanding')) {
                obj['addBanding'] = AddBandingResponse.constructFromObject(data['addBanding']);
            }
            if (data.hasOwnProperty('addChart')) {
                obj['addChart'] = AddChartResponse.constructFromObject(data['addChart']);
            }
            if (data.hasOwnProperty('addDataSource')) {
                obj['addDataSource'] = AddDataSourceResponse.constructFromObject(data['addDataSource']);
            }
            if (data.hasOwnProperty('addDimensionGroup')) {
                obj['addDimensionGroup'] = AddDimensionGroupResponse.constructFromObject(data['addDimensionGroup']);
            }
            if (data.hasOwnProperty('addFilterView')) {
                obj['addFilterView'] = AddFilterViewResponse.constructFromObject(data['addFilterView']);
            }
            if (data.hasOwnProperty('addNamedRange')) {
                obj['addNamedRange'] = AddNamedRangeResponse.constructFromObject(data['addNamedRange']);
            }
            if (data.hasOwnProperty('addProtectedRange')) {
                obj['addProtectedRange'] = AddProtectedRangeResponse.constructFromObject(data['addProtectedRange']);
            }
            if (data.hasOwnProperty('addSheet')) {
                obj['addSheet'] = AddSheetResponse.constructFromObject(data['addSheet']);
            }
            if (data.hasOwnProperty('addSlicer')) {
                obj['addSlicer'] = AddSlicerResponse.constructFromObject(data['addSlicer']);
            }
            if (data.hasOwnProperty('createDeveloperMetadata')) {
                obj['createDeveloperMetadata'] = CreateDeveloperMetadataResponse.constructFromObject(data['createDeveloperMetadata']);
            }
            if (data.hasOwnProperty('deleteConditionalFormatRule')) {
                obj['deleteConditionalFormatRule'] = DeleteConditionalFormatRuleResponse.constructFromObject(data['deleteConditionalFormatRule']);
            }
            if (data.hasOwnProperty('deleteDeveloperMetadata')) {
                obj['deleteDeveloperMetadata'] = DeleteDeveloperMetadataResponse.constructFromObject(data['deleteDeveloperMetadata']);
            }
            if (data.hasOwnProperty('deleteDimensionGroup')) {
                obj['deleteDimensionGroup'] = DeleteDimensionGroupResponse.constructFromObject(data['deleteDimensionGroup']);
            }
            if (data.hasOwnProperty('deleteDuplicates')) {
                obj['deleteDuplicates'] = DeleteDuplicatesResponse.constructFromObject(data['deleteDuplicates']);
            }
            if (data.hasOwnProperty('duplicateFilterView')) {
                obj['duplicateFilterView'] = DuplicateFilterViewResponse.constructFromObject(data['duplicateFilterView']);
            }
            if (data.hasOwnProperty('duplicateSheet')) {
                obj['duplicateSheet'] = DuplicateSheetResponse.constructFromObject(data['duplicateSheet']);
            }
            if (data.hasOwnProperty('findReplace')) {
                obj['findReplace'] = FindReplaceResponse.constructFromObject(data['findReplace']);
            }
            if (data.hasOwnProperty('refreshDataSource')) {
                obj['refreshDataSource'] = RefreshDataSourceResponse.constructFromObject(data['refreshDataSource']);
            }
            if (data.hasOwnProperty('trimWhitespace')) {
                obj['trimWhitespace'] = TrimWhitespaceResponse.constructFromObject(data['trimWhitespace']);
            }
            if (data.hasOwnProperty('updateConditionalFormatRule')) {
                obj['updateConditionalFormatRule'] = UpdateConditionalFormatRuleResponse.constructFromObject(data['updateConditionalFormatRule']);
            }
            if (data.hasOwnProperty('updateDataSource')) {
                obj['updateDataSource'] = UpdateDataSourceResponse.constructFromObject(data['updateDataSource']);
            }
            if (data.hasOwnProperty('updateDeveloperMetadata')) {
                obj['updateDeveloperMetadata'] = UpdateDeveloperMetadataResponse.constructFromObject(data['updateDeveloperMetadata']);
            }
            if (data.hasOwnProperty('updateEmbeddedObjectPosition')) {
                obj['updateEmbeddedObjectPosition'] = UpdateEmbeddedObjectPositionResponse.constructFromObject(data['updateEmbeddedObjectPosition']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Response</code>.
     */
    static validateJSON(data) {
        // validate the optional field `addBanding`
        if (data['addBanding']) { // data not null
          AddBandingResponse.validateJSON(data['addBanding']);
        }
        // validate the optional field `addChart`
        if (data['addChart']) { // data not null
          AddChartResponse.validateJSON(data['addChart']);
        }
        // validate the optional field `addDataSource`
        if (data['addDataSource']) { // data not null
          AddDataSourceResponse.validateJSON(data['addDataSource']);
        }
        // validate the optional field `addDimensionGroup`
        if (data['addDimensionGroup']) { // data not null
          AddDimensionGroupResponse.validateJSON(data['addDimensionGroup']);
        }
        // validate the optional field `addFilterView`
        if (data['addFilterView']) { // data not null
          AddFilterViewResponse.validateJSON(data['addFilterView']);
        }
        // validate the optional field `addNamedRange`
        if (data['addNamedRange']) { // data not null
          AddNamedRangeResponse.validateJSON(data['addNamedRange']);
        }
        // validate the optional field `addProtectedRange`
        if (data['addProtectedRange']) { // data not null
          AddProtectedRangeResponse.validateJSON(data['addProtectedRange']);
        }
        // validate the optional field `addSheet`
        if (data['addSheet']) { // data not null
          AddSheetResponse.validateJSON(data['addSheet']);
        }
        // validate the optional field `addSlicer`
        if (data['addSlicer']) { // data not null
          AddSlicerResponse.validateJSON(data['addSlicer']);
        }
        // validate the optional field `createDeveloperMetadata`
        if (data['createDeveloperMetadata']) { // data not null
          CreateDeveloperMetadataResponse.validateJSON(data['createDeveloperMetadata']);
        }
        // validate the optional field `deleteConditionalFormatRule`
        if (data['deleteConditionalFormatRule']) { // data not null
          DeleteConditionalFormatRuleResponse.validateJSON(data['deleteConditionalFormatRule']);
        }
        // validate the optional field `deleteDeveloperMetadata`
        if (data['deleteDeveloperMetadata']) { // data not null
          DeleteDeveloperMetadataResponse.validateJSON(data['deleteDeveloperMetadata']);
        }
        // validate the optional field `deleteDimensionGroup`
        if (data['deleteDimensionGroup']) { // data not null
          DeleteDimensionGroupResponse.validateJSON(data['deleteDimensionGroup']);
        }
        // validate the optional field `deleteDuplicates`
        if (data['deleteDuplicates']) { // data not null
          DeleteDuplicatesResponse.validateJSON(data['deleteDuplicates']);
        }
        // validate the optional field `duplicateFilterView`
        if (data['duplicateFilterView']) { // data not null
          DuplicateFilterViewResponse.validateJSON(data['duplicateFilterView']);
        }
        // validate the optional field `duplicateSheet`
        if (data['duplicateSheet']) { // data not null
          DuplicateSheetResponse.validateJSON(data['duplicateSheet']);
        }
        // validate the optional field `findReplace`
        if (data['findReplace']) { // data not null
          FindReplaceResponse.validateJSON(data['findReplace']);
        }
        // validate the optional field `refreshDataSource`
        if (data['refreshDataSource']) { // data not null
          RefreshDataSourceResponse.validateJSON(data['refreshDataSource']);
        }
        // validate the optional field `trimWhitespace`
        if (data['trimWhitespace']) { // data not null
          TrimWhitespaceResponse.validateJSON(data['trimWhitespace']);
        }
        // validate the optional field `updateConditionalFormatRule`
        if (data['updateConditionalFormatRule']) { // data not null
          UpdateConditionalFormatRuleResponse.validateJSON(data['updateConditionalFormatRule']);
        }
        // validate the optional field `updateDataSource`
        if (data['updateDataSource']) { // data not null
          UpdateDataSourceResponse.validateJSON(data['updateDataSource']);
        }
        // validate the optional field `updateDeveloperMetadata`
        if (data['updateDeveloperMetadata']) { // data not null
          UpdateDeveloperMetadataResponse.validateJSON(data['updateDeveloperMetadata']);
        }
        // validate the optional field `updateEmbeddedObjectPosition`
        if (data['updateEmbeddedObjectPosition']) { // data not null
          UpdateEmbeddedObjectPositionResponse.validateJSON(data['updateEmbeddedObjectPosition']);
        }

        return true;
    }


}



/**
 * @member {module:model/AddBandingResponse} addBanding
 */
Response.prototype['addBanding'] = undefined;

/**
 * @member {module:model/AddChartResponse} addChart
 */
Response.prototype['addChart'] = undefined;

/**
 * @member {module:model/AddDataSourceResponse} addDataSource
 */
Response.prototype['addDataSource'] = undefined;

/**
 * @member {module:model/AddDimensionGroupResponse} addDimensionGroup
 */
Response.prototype['addDimensionGroup'] = undefined;

/**
 * @member {module:model/AddFilterViewResponse} addFilterView
 */
Response.prototype['addFilterView'] = undefined;

/**
 * @member {module:model/AddNamedRangeResponse} addNamedRange
 */
Response.prototype['addNamedRange'] = undefined;

/**
 * @member {module:model/AddProtectedRangeResponse} addProtectedRange
 */
Response.prototype['addProtectedRange'] = undefined;

/**
 * @member {module:model/AddSheetResponse} addSheet
 */
Response.prototype['addSheet'] = undefined;

/**
 * @member {module:model/AddSlicerResponse} addSlicer
 */
Response.prototype['addSlicer'] = undefined;

/**
 * @member {module:model/CreateDeveloperMetadataResponse} createDeveloperMetadata
 */
Response.prototype['createDeveloperMetadata'] = undefined;

/**
 * @member {module:model/DeleteConditionalFormatRuleResponse} deleteConditionalFormatRule
 */
Response.prototype['deleteConditionalFormatRule'] = undefined;

/**
 * @member {module:model/DeleteDeveloperMetadataResponse} deleteDeveloperMetadata
 */
Response.prototype['deleteDeveloperMetadata'] = undefined;

/**
 * @member {module:model/DeleteDimensionGroupResponse} deleteDimensionGroup
 */
Response.prototype['deleteDimensionGroup'] = undefined;

/**
 * @member {module:model/DeleteDuplicatesResponse} deleteDuplicates
 */
Response.prototype['deleteDuplicates'] = undefined;

/**
 * @member {module:model/DuplicateFilterViewResponse} duplicateFilterView
 */
Response.prototype['duplicateFilterView'] = undefined;

/**
 * @member {module:model/DuplicateSheetResponse} duplicateSheet
 */
Response.prototype['duplicateSheet'] = undefined;

/**
 * @member {module:model/FindReplaceResponse} findReplace
 */
Response.prototype['findReplace'] = undefined;

/**
 * @member {module:model/RefreshDataSourceResponse} refreshDataSource
 */
Response.prototype['refreshDataSource'] = undefined;

/**
 * @member {module:model/TrimWhitespaceResponse} trimWhitespace
 */
Response.prototype['trimWhitespace'] = undefined;

/**
 * @member {module:model/UpdateConditionalFormatRuleResponse} updateConditionalFormatRule
 */
Response.prototype['updateConditionalFormatRule'] = undefined;

/**
 * @member {module:model/UpdateDataSourceResponse} updateDataSource
 */
Response.prototype['updateDataSource'] = undefined;

/**
 * @member {module:model/UpdateDeveloperMetadataResponse} updateDeveloperMetadata
 */
Response.prototype['updateDeveloperMetadata'] = undefined;

/**
 * @member {module:model/UpdateEmbeddedObjectPositionResponse} updateEmbeddedObjectPosition
 */
Response.prototype['updateEmbeddedObjectPosition'] = undefined;






export default Response;

