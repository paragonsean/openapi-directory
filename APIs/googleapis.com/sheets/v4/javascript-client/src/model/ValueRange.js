/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ValueRange model module.
 * @module model/ValueRange
 * @version v4
 */
class ValueRange {
    /**
     * Constructs a new <code>ValueRange</code>.
     * Data within a range of the spreadsheet.
     * @alias module:model/ValueRange
     */
    constructor() { 
        
        ValueRange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ValueRange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValueRange} obj Optional instance to populate.
     * @return {module:model/ValueRange} The populated <code>ValueRange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValueRange();

            if (data.hasOwnProperty('majorDimension')) {
                obj['majorDimension'] = ApiClient.convertToType(data['majorDimension'], 'String');
            }
            if (data.hasOwnProperty('range')) {
                obj['range'] = ApiClient.convertToType(data['range'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], [[Object]]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValueRange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValueRange</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['majorDimension'] && !(typeof data['majorDimension'] === 'string' || data['majorDimension'] instanceof String)) {
            throw new Error("Expected the field `majorDimension` to be a primitive type in the JSON string but got " + data['majorDimension']);
        }
        // ensure the json data is a string
        if (data['range'] && !(typeof data['range'] === 'string' || data['range'] instanceof String)) {
            throw new Error("Expected the field `range` to be a primitive type in the JSON string but got " + data['range']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['values'])) {
            throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
        }

        return true;
    }


}



/**
 * The major dimension of the values. For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=A1:B2,majorDimension=ROWS` will return `[[1,2],[3,4]]`, whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return `[[1,3],[2,4]]`. For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]` will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS` then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`. When writing, if this field is not set, it defaults to ROWS.
 * @member {module:model/ValueRange.MajorDimensionEnum} majorDimension
 */
ValueRange.prototype['majorDimension'] = undefined;

/**
 * The range the values cover, in [A1 notation](/sheets/api/guides/concepts#cell). For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended.
 * @member {String} range
 */
ValueRange.prototype['range'] = undefined;

/**
 * The data that was read or to be written. This is an array of arrays, the outer array representing all the data and each inner array representing a major dimension. Each item in the inner array corresponds with one cell. For output, empty trailing rows and columns will not be included. For input, supported value types are: bool, string, and double. Null values will be skipped. To set a cell to an empty value, set the string value to an empty string.
 * @member {Array.<Array.<Object>>} values
 */
ValueRange.prototype['values'] = undefined;





/**
 * Allowed values for the <code>majorDimension</code> property.
 * @enum {String}
 * @readonly
 */
ValueRange['MajorDimensionEnum'] = {

    /**
     * value: "DIMENSION_UNSPECIFIED"
     * @const
     */
    "DIMENSION_UNSPECIFIED": "DIMENSION_UNSPECIFIED",

    /**
     * value: "ROWS"
     * @const
     */
    "ROWS": "ROWS",

    /**
     * value: "COLUMNS"
     * @const
     */
    "COLUMNS": "COLUMNS"
};



export default ValueRange;

