/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DimensionRange from './DimensionRange';

/**
 * The DeveloperMetadataLocation model module.
 * @module model/DeveloperMetadataLocation
 * @version v4
 */
class DeveloperMetadataLocation {
    /**
     * Constructs a new <code>DeveloperMetadataLocation</code>.
     * A location where metadata may be associated in a spreadsheet.
     * @alias module:model/DeveloperMetadataLocation
     */
    constructor() { 
        
        DeveloperMetadataLocation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeveloperMetadataLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeveloperMetadataLocation} obj Optional instance to populate.
     * @return {module:model/DeveloperMetadataLocation} The populated <code>DeveloperMetadataLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeveloperMetadataLocation();

            if (data.hasOwnProperty('dimensionRange')) {
                obj['dimensionRange'] = DimensionRange.constructFromObject(data['dimensionRange']);
            }
            if (data.hasOwnProperty('locationType')) {
                obj['locationType'] = ApiClient.convertToType(data['locationType'], 'String');
            }
            if (data.hasOwnProperty('sheetId')) {
                obj['sheetId'] = ApiClient.convertToType(data['sheetId'], 'Number');
            }
            if (data.hasOwnProperty('spreadsheet')) {
                obj['spreadsheet'] = ApiClient.convertToType(data['spreadsheet'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeveloperMetadataLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeveloperMetadataLocation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dimensionRange`
        if (data['dimensionRange']) { // data not null
          DimensionRange.validateJSON(data['dimensionRange']);
        }
        // ensure the json data is a string
        if (data['locationType'] && !(typeof data['locationType'] === 'string' || data['locationType'] instanceof String)) {
            throw new Error("Expected the field `locationType` to be a primitive type in the JSON string but got " + data['locationType']);
        }

        return true;
    }


}



/**
 * @member {module:model/DimensionRange} dimensionRange
 */
DeveloperMetadataLocation.prototype['dimensionRange'] = undefined;

/**
 * The type of location this object represents. This field is read-only.
 * @member {module:model/DeveloperMetadataLocation.LocationTypeEnum} locationType
 */
DeveloperMetadataLocation.prototype['locationType'] = undefined;

/**
 * The ID of the sheet when metadata is associated with an entire sheet.
 * @member {Number} sheetId
 */
DeveloperMetadataLocation.prototype['sheetId'] = undefined;

/**
 * True when metadata is associated with an entire spreadsheet.
 * @member {Boolean} spreadsheet
 */
DeveloperMetadataLocation.prototype['spreadsheet'] = undefined;





/**
 * Allowed values for the <code>locationType</code> property.
 * @enum {String}
 * @readonly
 */
DeveloperMetadataLocation['LocationTypeEnum'] = {

    /**
     * value: "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED"
     * @const
     */
    "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED": "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",

    /**
     * value: "ROW"
     * @const
     */
    "ROW": "ROW",

    /**
     * value: "COLUMN"
     * @const
     */
    "COLUMN": "COLUMN",

    /**
     * value: "SHEET"
     * @const
     */
    "SHEET": "SHEET",

    /**
     * value: "SPREADSHEET"
     * @const
     */
    "SPREADSHEET": "SPREADSHEET"
};



export default DeveloperMetadataLocation;

