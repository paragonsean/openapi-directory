/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConditionValue from './ConditionValue';

/**
 * The BooleanCondition model module.
 * @module model/BooleanCondition
 * @version v4
 */
class BooleanCondition {
    /**
     * Constructs a new <code>BooleanCondition</code>.
     * A condition that can evaluate to true or false. BooleanConditions are used by conditional formatting, data validation, and the criteria in filters.
     * @alias module:model/BooleanCondition
     */
    constructor() { 
        
        BooleanCondition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BooleanCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BooleanCondition} obj Optional instance to populate.
     * @return {module:model/BooleanCondition} The populated <code>BooleanCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BooleanCondition();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], [ConditionValue]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BooleanCondition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BooleanCondition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        if (data['values']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['values'])) {
                throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
            }
            // validate the optional field `values` (array)
            for (const item of data['values']) {
                ConditionValue.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The type of condition.
 * @member {module:model/BooleanCondition.TypeEnum} type
 */
BooleanCondition.prototype['type'] = undefined;

/**
 * The values of the condition. The number of supported values depends on the condition type. Some support zero values, others one or two values, and ConditionType.ONE_OF_LIST supports an arbitrary number of values.
 * @member {Array.<module:model/ConditionValue>} values
 */
BooleanCondition.prototype['values'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
BooleanCondition['TypeEnum'] = {

    /**
     * value: "CONDITION_TYPE_UNSPECIFIED"
     * @const
     */
    "CONDITION_TYPE_UNSPECIFIED": "CONDITION_TYPE_UNSPECIFIED",

    /**
     * value: "NUMBER_GREATER"
     * @const
     */
    "NUMBER_GREATER": "NUMBER_GREATER",

    /**
     * value: "NUMBER_GREATER_THAN_EQ"
     * @const
     */
    "NUMBER_GREATER_THAN_EQ": "NUMBER_GREATER_THAN_EQ",

    /**
     * value: "NUMBER_LESS"
     * @const
     */
    "NUMBER_LESS": "NUMBER_LESS",

    /**
     * value: "NUMBER_LESS_THAN_EQ"
     * @const
     */
    "NUMBER_LESS_THAN_EQ": "NUMBER_LESS_THAN_EQ",

    /**
     * value: "NUMBER_EQ"
     * @const
     */
    "NUMBER_EQ": "NUMBER_EQ",

    /**
     * value: "NUMBER_NOT_EQ"
     * @const
     */
    "NUMBER_NOT_EQ": "NUMBER_NOT_EQ",

    /**
     * value: "NUMBER_BETWEEN"
     * @const
     */
    "NUMBER_BETWEEN": "NUMBER_BETWEEN",

    /**
     * value: "NUMBER_NOT_BETWEEN"
     * @const
     */
    "NUMBER_NOT_BETWEEN": "NUMBER_NOT_BETWEEN",

    /**
     * value: "TEXT_CONTAINS"
     * @const
     */
    "TEXT_CONTAINS": "TEXT_CONTAINS",

    /**
     * value: "TEXT_NOT_CONTAINS"
     * @const
     */
    "TEXT_NOT_CONTAINS": "TEXT_NOT_CONTAINS",

    /**
     * value: "TEXT_STARTS_WITH"
     * @const
     */
    "TEXT_STARTS_WITH": "TEXT_STARTS_WITH",

    /**
     * value: "TEXT_ENDS_WITH"
     * @const
     */
    "TEXT_ENDS_WITH": "TEXT_ENDS_WITH",

    /**
     * value: "TEXT_EQ"
     * @const
     */
    "TEXT_EQ": "TEXT_EQ",

    /**
     * value: "TEXT_IS_EMAIL"
     * @const
     */
    "TEXT_IS_EMAIL": "TEXT_IS_EMAIL",

    /**
     * value: "TEXT_IS_URL"
     * @const
     */
    "TEXT_IS_URL": "TEXT_IS_URL",

    /**
     * value: "DATE_EQ"
     * @const
     */
    "DATE_EQ": "DATE_EQ",

    /**
     * value: "DATE_BEFORE"
     * @const
     */
    "DATE_BEFORE": "DATE_BEFORE",

    /**
     * value: "DATE_AFTER"
     * @const
     */
    "DATE_AFTER": "DATE_AFTER",

    /**
     * value: "DATE_ON_OR_BEFORE"
     * @const
     */
    "DATE_ON_OR_BEFORE": "DATE_ON_OR_BEFORE",

    /**
     * value: "DATE_ON_OR_AFTER"
     * @const
     */
    "DATE_ON_OR_AFTER": "DATE_ON_OR_AFTER",

    /**
     * value: "DATE_BETWEEN"
     * @const
     */
    "DATE_BETWEEN": "DATE_BETWEEN",

    /**
     * value: "DATE_NOT_BETWEEN"
     * @const
     */
    "DATE_NOT_BETWEEN": "DATE_NOT_BETWEEN",

    /**
     * value: "DATE_IS_VALID"
     * @const
     */
    "DATE_IS_VALID": "DATE_IS_VALID",

    /**
     * value: "ONE_OF_RANGE"
     * @const
     */
    "ONE_OF_RANGE": "ONE_OF_RANGE",

    /**
     * value: "ONE_OF_LIST"
     * @const
     */
    "ONE_OF_LIST": "ONE_OF_LIST",

    /**
     * value: "BLANK"
     * @const
     */
    "BLANK": "BLANK",

    /**
     * value: "NOT_BLANK"
     * @const
     */
    "NOT_BLANK": "NOT_BLANK",

    /**
     * value: "CUSTOM_FORMULA"
     * @const
     */
    "CUSTOM_FORMULA": "CUSTOM_FORMULA",

    /**
     * value: "BOOLEAN"
     * @const
     */
    "BOOLEAN": "BOOLEAN",

    /**
     * value: "TEXT_NOT_EQ"
     * @const
     */
    "TEXT_NOT_EQ": "TEXT_NOT_EQ",

    /**
     * value: "DATE_NOT_EQ"
     * @const
     */
    "DATE_NOT_EQ": "DATE_NOT_EQ",

    /**
     * value: "FILTER_EXPRESSION"
     * @const
     */
    "FILTER_EXPRESSION": "FILTER_EXPRESSION"
};



export default BooleanCondition;

