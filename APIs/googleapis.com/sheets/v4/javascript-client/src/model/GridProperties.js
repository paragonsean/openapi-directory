/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GridProperties model module.
 * @module model/GridProperties
 * @version v4
 */
class GridProperties {
    /**
     * Constructs a new <code>GridProperties</code>.
     * Properties of a grid.
     * @alias module:model/GridProperties
     */
    constructor() { 
        
        GridProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GridProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GridProperties} obj Optional instance to populate.
     * @return {module:model/GridProperties} The populated <code>GridProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GridProperties();

            if (data.hasOwnProperty('columnCount')) {
                obj['columnCount'] = ApiClient.convertToType(data['columnCount'], 'Number');
            }
            if (data.hasOwnProperty('columnGroupControlAfter')) {
                obj['columnGroupControlAfter'] = ApiClient.convertToType(data['columnGroupControlAfter'], 'Boolean');
            }
            if (data.hasOwnProperty('frozenColumnCount')) {
                obj['frozenColumnCount'] = ApiClient.convertToType(data['frozenColumnCount'], 'Number');
            }
            if (data.hasOwnProperty('frozenRowCount')) {
                obj['frozenRowCount'] = ApiClient.convertToType(data['frozenRowCount'], 'Number');
            }
            if (data.hasOwnProperty('hideGridlines')) {
                obj['hideGridlines'] = ApiClient.convertToType(data['hideGridlines'], 'Boolean');
            }
            if (data.hasOwnProperty('rowCount')) {
                obj['rowCount'] = ApiClient.convertToType(data['rowCount'], 'Number');
            }
            if (data.hasOwnProperty('rowGroupControlAfter')) {
                obj['rowGroupControlAfter'] = ApiClient.convertToType(data['rowGroupControlAfter'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GridProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GridProperties</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The number of columns in the grid.
 * @member {Number} columnCount
 */
GridProperties.prototype['columnCount'] = undefined;

/**
 * True if the column grouping control toggle is shown after the group.
 * @member {Boolean} columnGroupControlAfter
 */
GridProperties.prototype['columnGroupControlAfter'] = undefined;

/**
 * The number of columns that are frozen in the grid.
 * @member {Number} frozenColumnCount
 */
GridProperties.prototype['frozenColumnCount'] = undefined;

/**
 * The number of rows that are frozen in the grid.
 * @member {Number} frozenRowCount
 */
GridProperties.prototype['frozenRowCount'] = undefined;

/**
 * True if the grid isn't showing gridlines in the UI.
 * @member {Boolean} hideGridlines
 */
GridProperties.prototype['hideGridlines'] = undefined;

/**
 * The number of rows in the grid.
 * @member {Number} rowCount
 */
GridProperties.prototype['rowCount'] = undefined;

/**
 * True if the row grouping control toggle is shown after the group.
 * @member {Boolean} rowGroupControlAfter
 */
GridProperties.prototype['rowGroupControlAfter'] = undefined;






export default GridProperties;

