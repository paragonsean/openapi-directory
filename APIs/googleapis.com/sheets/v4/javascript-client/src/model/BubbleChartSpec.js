/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChartData from './ChartData';
import Color from './Color';
import ColorStyle from './ColorStyle';
import TextFormat from './TextFormat';

/**
 * The BubbleChartSpec model module.
 * @module model/BubbleChartSpec
 * @version v4
 */
class BubbleChartSpec {
    /**
     * Constructs a new <code>BubbleChartSpec</code>.
     * A bubble chart.
     * @alias module:model/BubbleChartSpec
     */
    constructor() { 
        
        BubbleChartSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BubbleChartSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BubbleChartSpec} obj Optional instance to populate.
     * @return {module:model/BubbleChartSpec} The populated <code>BubbleChartSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BubbleChartSpec();

            if (data.hasOwnProperty('bubbleBorderColor')) {
                obj['bubbleBorderColor'] = Color.constructFromObject(data['bubbleBorderColor']);
            }
            if (data.hasOwnProperty('bubbleBorderColorStyle')) {
                obj['bubbleBorderColorStyle'] = ColorStyle.constructFromObject(data['bubbleBorderColorStyle']);
            }
            if (data.hasOwnProperty('bubbleLabels')) {
                obj['bubbleLabels'] = ChartData.constructFromObject(data['bubbleLabels']);
            }
            if (data.hasOwnProperty('bubbleMaxRadiusSize')) {
                obj['bubbleMaxRadiusSize'] = ApiClient.convertToType(data['bubbleMaxRadiusSize'], 'Number');
            }
            if (data.hasOwnProperty('bubbleMinRadiusSize')) {
                obj['bubbleMinRadiusSize'] = ApiClient.convertToType(data['bubbleMinRadiusSize'], 'Number');
            }
            if (data.hasOwnProperty('bubbleOpacity')) {
                obj['bubbleOpacity'] = ApiClient.convertToType(data['bubbleOpacity'], 'Number');
            }
            if (data.hasOwnProperty('bubbleSizes')) {
                obj['bubbleSizes'] = ChartData.constructFromObject(data['bubbleSizes']);
            }
            if (data.hasOwnProperty('bubbleTextStyle')) {
                obj['bubbleTextStyle'] = TextFormat.constructFromObject(data['bubbleTextStyle']);
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ChartData.constructFromObject(data['domain']);
            }
            if (data.hasOwnProperty('groupIds')) {
                obj['groupIds'] = ChartData.constructFromObject(data['groupIds']);
            }
            if (data.hasOwnProperty('legendPosition')) {
                obj['legendPosition'] = ApiClient.convertToType(data['legendPosition'], 'String');
            }
            if (data.hasOwnProperty('series')) {
                obj['series'] = ChartData.constructFromObject(data['series']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BubbleChartSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BubbleChartSpec</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bubbleBorderColor`
        if (data['bubbleBorderColor']) { // data not null
          Color.validateJSON(data['bubbleBorderColor']);
        }
        // validate the optional field `bubbleBorderColorStyle`
        if (data['bubbleBorderColorStyle']) { // data not null
          ColorStyle.validateJSON(data['bubbleBorderColorStyle']);
        }
        // validate the optional field `bubbleLabels`
        if (data['bubbleLabels']) { // data not null
          ChartData.validateJSON(data['bubbleLabels']);
        }
        // validate the optional field `bubbleSizes`
        if (data['bubbleSizes']) { // data not null
          ChartData.validateJSON(data['bubbleSizes']);
        }
        // validate the optional field `bubbleTextStyle`
        if (data['bubbleTextStyle']) { // data not null
          TextFormat.validateJSON(data['bubbleTextStyle']);
        }
        // validate the optional field `domain`
        if (data['domain']) { // data not null
          ChartData.validateJSON(data['domain']);
        }
        // validate the optional field `groupIds`
        if (data['groupIds']) { // data not null
          ChartData.validateJSON(data['groupIds']);
        }
        // ensure the json data is a string
        if (data['legendPosition'] && !(typeof data['legendPosition'] === 'string' || data['legendPosition'] instanceof String)) {
            throw new Error("Expected the field `legendPosition` to be a primitive type in the JSON string but got " + data['legendPosition']);
        }
        // validate the optional field `series`
        if (data['series']) { // data not null
          ChartData.validateJSON(data['series']);
        }

        return true;
    }


}



/**
 * @member {module:model/Color} bubbleBorderColor
 */
BubbleChartSpec.prototype['bubbleBorderColor'] = undefined;

/**
 * @member {module:model/ColorStyle} bubbleBorderColorStyle
 */
BubbleChartSpec.prototype['bubbleBorderColorStyle'] = undefined;

/**
 * @member {module:model/ChartData} bubbleLabels
 */
BubbleChartSpec.prototype['bubbleLabels'] = undefined;

/**
 * The max radius size of the bubbles, in pixels. If specified, the field must be a positive value.
 * @member {Number} bubbleMaxRadiusSize
 */
BubbleChartSpec.prototype['bubbleMaxRadiusSize'] = undefined;

/**
 * The minimum radius size of the bubbles, in pixels. If specific, the field must be a positive value.
 * @member {Number} bubbleMinRadiusSize
 */
BubbleChartSpec.prototype['bubbleMinRadiusSize'] = undefined;

/**
 * The opacity of the bubbles between 0 and 1.0. 0 is fully transparent and 1 is fully opaque.
 * @member {Number} bubbleOpacity
 */
BubbleChartSpec.prototype['bubbleOpacity'] = undefined;

/**
 * @member {module:model/ChartData} bubbleSizes
 */
BubbleChartSpec.prototype['bubbleSizes'] = undefined;

/**
 * @member {module:model/TextFormat} bubbleTextStyle
 */
BubbleChartSpec.prototype['bubbleTextStyle'] = undefined;

/**
 * @member {module:model/ChartData} domain
 */
BubbleChartSpec.prototype['domain'] = undefined;

/**
 * @member {module:model/ChartData} groupIds
 */
BubbleChartSpec.prototype['groupIds'] = undefined;

/**
 * Where the legend of the chart should be drawn.
 * @member {module:model/BubbleChartSpec.LegendPositionEnum} legendPosition
 */
BubbleChartSpec.prototype['legendPosition'] = undefined;

/**
 * @member {module:model/ChartData} series
 */
BubbleChartSpec.prototype['series'] = undefined;





/**
 * Allowed values for the <code>legendPosition</code> property.
 * @enum {String}
 * @readonly
 */
BubbleChartSpec['LegendPositionEnum'] = {

    /**
     * value: "BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED"
     * @const
     */
    "BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED": "BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED",

    /**
     * value: "BOTTOM_LEGEND"
     * @const
     */
    "BOTTOM_LEGEND": "BOTTOM_LEGEND",

    /**
     * value: "LEFT_LEGEND"
     * @const
     */
    "LEFT_LEGEND": "LEFT_LEGEND",

    /**
     * value: "RIGHT_LEGEND"
     * @const
     */
    "RIGHT_LEGEND": "RIGHT_LEGEND",

    /**
     * value: "TOP_LEGEND"
     * @const
     */
    "TOP_LEGEND": "TOP_LEGEND",

    /**
     * value: "NO_LEGEND"
     * @const
     */
    "NO_LEGEND": "NO_LEGEND",

    /**
     * value: "INSIDE_LEGEND"
     * @const
     */
    "INSIDE_LEGEND": "INSIDE_LEGEND"
};



export default BubbleChartSpec;

