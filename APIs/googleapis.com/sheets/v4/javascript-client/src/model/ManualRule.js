/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ManualRuleGroup from './ManualRuleGroup';

/**
 * The ManualRule model module.
 * @module model/ManualRule
 * @version v4
 */
class ManualRule {
    /**
     * Constructs a new <code>ManualRule</code>.
     * Allows you to manually organize the values in a source data column into buckets with names of your choosing. For example, a pivot table that aggregates population by state: +-------+-------------------+ | State | SUM of Population | +-------+-------------------+ | AK | 0.7 | | AL | 4.8 | | AR | 2.9 | ... +-------+-------------------+ could be turned into a pivot table that aggregates population by time zone by providing a list of groups (for example, groupName &#x3D; &#39;Central&#39;, items &#x3D; [&#39;AL&#39;, &#39;AR&#39;, &#39;IA&#39;, ...]) to a manual group rule. Note that a similar effect could be achieved by adding a time zone column to the source data and adjusting the pivot table. +-----------+-------------------+ | Time Zone | SUM of Population | +-----------+-------------------+ | Central | 106.3 | | Eastern | 151.9 | | Mountain | 17.4 | ... +-----------+-------------------+
     * @alias module:model/ManualRule
     */
    constructor() { 
        
        ManualRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ManualRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManualRule} obj Optional instance to populate.
     * @return {module:model/ManualRule} The populated <code>ManualRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManualRule();

            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], [ManualRuleGroup]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManualRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManualRule</code>.
     */
    static validateJSON(data) {
        if (data['groups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groups'])) {
                throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
            }
            // validate the optional field `groups` (array)
            for (const item of data['groups']) {
                ManualRuleGroup.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The list of group names and the corresponding items from the source data that map to each group name.
 * @member {Array.<module:model/ManualRuleGroup>} groups
 */
ManualRule.prototype['groups'] = undefined;






export default ManualRule;

