/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChartGroupRule from './ChartGroupRule';
import ChartSourceRange from './ChartSourceRange';
import DataSourceColumnReference from './DataSourceColumnReference';

/**
 * The ChartData model module.
 * @module model/ChartData
 * @version v4
 */
class ChartData {
    /**
     * Constructs a new <code>ChartData</code>.
     * The data included in a domain or series.
     * @alias module:model/ChartData
     */
    constructor() { 
        
        ChartData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChartData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChartData} obj Optional instance to populate.
     * @return {module:model/ChartData} The populated <code>ChartData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChartData();

            if (data.hasOwnProperty('aggregateType')) {
                obj['aggregateType'] = ApiClient.convertToType(data['aggregateType'], 'String');
            }
            if (data.hasOwnProperty('columnReference')) {
                obj['columnReference'] = DataSourceColumnReference.constructFromObject(data['columnReference']);
            }
            if (data.hasOwnProperty('groupRule')) {
                obj['groupRule'] = ChartGroupRule.constructFromObject(data['groupRule']);
            }
            if (data.hasOwnProperty('sourceRange')) {
                obj['sourceRange'] = ChartSourceRange.constructFromObject(data['sourceRange']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChartData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChartData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aggregateType'] && !(typeof data['aggregateType'] === 'string' || data['aggregateType'] instanceof String)) {
            throw new Error("Expected the field `aggregateType` to be a primitive type in the JSON string but got " + data['aggregateType']);
        }
        // validate the optional field `columnReference`
        if (data['columnReference']) { // data not null
          DataSourceColumnReference.validateJSON(data['columnReference']);
        }
        // validate the optional field `groupRule`
        if (data['groupRule']) { // data not null
          ChartGroupRule.validateJSON(data['groupRule']);
        }
        // validate the optional field `sourceRange`
        if (data['sourceRange']) { // data not null
          ChartSourceRange.validateJSON(data['sourceRange']);
        }

        return true;
    }


}



/**
 * The aggregation type for the series of a data source chart. Only supported for data source charts.
 * @member {module:model/ChartData.AggregateTypeEnum} aggregateType
 */
ChartData.prototype['aggregateType'] = undefined;

/**
 * @member {module:model/DataSourceColumnReference} columnReference
 */
ChartData.prototype['columnReference'] = undefined;

/**
 * @member {module:model/ChartGroupRule} groupRule
 */
ChartData.prototype['groupRule'] = undefined;

/**
 * @member {module:model/ChartSourceRange} sourceRange
 */
ChartData.prototype['sourceRange'] = undefined;





/**
 * Allowed values for the <code>aggregateType</code> property.
 * @enum {String}
 * @readonly
 */
ChartData['AggregateTypeEnum'] = {

    /**
     * value: "CHART_AGGREGATE_TYPE_UNSPECIFIED"
     * @const
     */
    "CHART_AGGREGATE_TYPE_UNSPECIFIED": "CHART_AGGREGATE_TYPE_UNSPECIFIED",

    /**
     * value: "AVERAGE"
     * @const
     */
    "AVERAGE": "AVERAGE",

    /**
     * value: "COUNT"
     * @const
     */
    "COUNT": "COUNT",

    /**
     * value: "MAX"
     * @const
     */
    "MAX": "MAX",

    /**
     * value: "MEDIAN"
     * @const
     */
    "MEDIAN": "MEDIAN",

    /**
     * value: "MIN"
     * @const
     */
    "MIN": "MIN",

    /**
     * value: "SUM"
     * @const
     */
    "SUM": "SUM"
};



export default ChartData;

