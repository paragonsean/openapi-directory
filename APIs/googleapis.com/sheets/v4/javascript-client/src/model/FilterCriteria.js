/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BooleanCondition from './BooleanCondition';
import Color from './Color';
import ColorStyle from './ColorStyle';

/**
 * The FilterCriteria model module.
 * @module model/FilterCriteria
 * @version v4
 */
class FilterCriteria {
    /**
     * Constructs a new <code>FilterCriteria</code>.
     * Criteria for showing/hiding rows in a filter or filter view.
     * @alias module:model/FilterCriteria
     */
    constructor() { 
        
        FilterCriteria.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FilterCriteria</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FilterCriteria} obj Optional instance to populate.
     * @return {module:model/FilterCriteria} The populated <code>FilterCriteria</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FilterCriteria();

            if (data.hasOwnProperty('condition')) {
                obj['condition'] = BooleanCondition.constructFromObject(data['condition']);
            }
            if (data.hasOwnProperty('hiddenValues')) {
                obj['hiddenValues'] = ApiClient.convertToType(data['hiddenValues'], ['String']);
            }
            if (data.hasOwnProperty('visibleBackgroundColor')) {
                obj['visibleBackgroundColor'] = Color.constructFromObject(data['visibleBackgroundColor']);
            }
            if (data.hasOwnProperty('visibleBackgroundColorStyle')) {
                obj['visibleBackgroundColorStyle'] = ColorStyle.constructFromObject(data['visibleBackgroundColorStyle']);
            }
            if (data.hasOwnProperty('visibleForegroundColor')) {
                obj['visibleForegroundColor'] = Color.constructFromObject(data['visibleForegroundColor']);
            }
            if (data.hasOwnProperty('visibleForegroundColorStyle')) {
                obj['visibleForegroundColorStyle'] = ColorStyle.constructFromObject(data['visibleForegroundColorStyle']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FilterCriteria</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FilterCriteria</code>.
     */
    static validateJSON(data) {
        // validate the optional field `condition`
        if (data['condition']) { // data not null
          BooleanCondition.validateJSON(data['condition']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['hiddenValues'])) {
            throw new Error("Expected the field `hiddenValues` to be an array in the JSON data but got " + data['hiddenValues']);
        }
        // validate the optional field `visibleBackgroundColor`
        if (data['visibleBackgroundColor']) { // data not null
          Color.validateJSON(data['visibleBackgroundColor']);
        }
        // validate the optional field `visibleBackgroundColorStyle`
        if (data['visibleBackgroundColorStyle']) { // data not null
          ColorStyle.validateJSON(data['visibleBackgroundColorStyle']);
        }
        // validate the optional field `visibleForegroundColor`
        if (data['visibleForegroundColor']) { // data not null
          Color.validateJSON(data['visibleForegroundColor']);
        }
        // validate the optional field `visibleForegroundColorStyle`
        if (data['visibleForegroundColorStyle']) { // data not null
          ColorStyle.validateJSON(data['visibleForegroundColorStyle']);
        }

        return true;
    }


}



/**
 * @member {module:model/BooleanCondition} condition
 */
FilterCriteria.prototype['condition'] = undefined;

/**
 * Values that should be hidden.
 * @member {Array.<String>} hiddenValues
 */
FilterCriteria.prototype['hiddenValues'] = undefined;

/**
 * @member {module:model/Color} visibleBackgroundColor
 */
FilterCriteria.prototype['visibleBackgroundColor'] = undefined;

/**
 * @member {module:model/ColorStyle} visibleBackgroundColorStyle
 */
FilterCriteria.prototype['visibleBackgroundColorStyle'] = undefined;

/**
 * @member {module:model/Color} visibleForegroundColor
 */
FilterCriteria.prototype['visibleForegroundColor'] = undefined;

/**
 * @member {module:model/ColorStyle} visibleForegroundColorStyle
 */
FilterCriteria.prototype['visibleForegroundColorStyle'] = undefined;






export default FilterCriteria;

