/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FilterCriteria from './FilterCriteria';
import FilterSpec from './FilterSpec';
import GridRange from './GridRange';
import SortSpec from './SortSpec';

/**
 * The FilterView model module.
 * @module model/FilterView
 * @version v4
 */
class FilterView {
    /**
     * Constructs a new <code>FilterView</code>.
     * A filter view.
     * @alias module:model/FilterView
     */
    constructor() { 
        
        FilterView.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FilterView</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FilterView} obj Optional instance to populate.
     * @return {module:model/FilterView} The populated <code>FilterView</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FilterView();

            if (data.hasOwnProperty('criteria')) {
                obj['criteria'] = ApiClient.convertToType(data['criteria'], {'String': FilterCriteria});
            }
            if (data.hasOwnProperty('filterSpecs')) {
                obj['filterSpecs'] = ApiClient.convertToType(data['filterSpecs'], [FilterSpec]);
            }
            if (data.hasOwnProperty('filterViewId')) {
                obj['filterViewId'] = ApiClient.convertToType(data['filterViewId'], 'Number');
            }
            if (data.hasOwnProperty('namedRangeId')) {
                obj['namedRangeId'] = ApiClient.convertToType(data['namedRangeId'], 'String');
            }
            if (data.hasOwnProperty('range')) {
                obj['range'] = GridRange.constructFromObject(data['range']);
            }
            if (data.hasOwnProperty('sortSpecs')) {
                obj['sortSpecs'] = ApiClient.convertToType(data['sortSpecs'], [SortSpec]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FilterView</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FilterView</code>.
     */
    static validateJSON(data) {
        if (data['filterSpecs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filterSpecs'])) {
                throw new Error("Expected the field `filterSpecs` to be an array in the JSON data but got " + data['filterSpecs']);
            }
            // validate the optional field `filterSpecs` (array)
            for (const item of data['filterSpecs']) {
                FilterSpec.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['namedRangeId'] && !(typeof data['namedRangeId'] === 'string' || data['namedRangeId'] instanceof String)) {
            throw new Error("Expected the field `namedRangeId` to be a primitive type in the JSON string but got " + data['namedRangeId']);
        }
        // validate the optional field `range`
        if (data['range']) { // data not null
          GridRange.validateJSON(data['range']);
        }
        if (data['sortSpecs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sortSpecs'])) {
                throw new Error("Expected the field `sortSpecs` to be an array in the JSON data but got " + data['sortSpecs']);
            }
            // validate the optional field `sortSpecs` (array)
            for (const item of data['sortSpecs']) {
                SortSpec.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * The criteria for showing/hiding values per column. The map's key is the column index, and the value is the criteria for that column. This field is deprecated in favor of filter_specs.
 * @member {Object.<String, module:model/FilterCriteria>} criteria
 */
FilterView.prototype['criteria'] = undefined;

/**
 * The filter criteria for showing/hiding values per column. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.
 * @member {Array.<module:model/FilterSpec>} filterSpecs
 */
FilterView.prototype['filterSpecs'] = undefined;

/**
 * The ID of the filter view.
 * @member {Number} filterViewId
 */
FilterView.prototype['filterViewId'] = undefined;

/**
 * The named range this filter view is backed by, if any. When writing, only one of range or named_range_id may be set.
 * @member {String} namedRangeId
 */
FilterView.prototype['namedRangeId'] = undefined;

/**
 * @member {module:model/GridRange} range
 */
FilterView.prototype['range'] = undefined;

/**
 * The sort order per column. Later specifications are used when values are equal in the earlier specifications.
 * @member {Array.<module:model/SortSpec>} sortSpecs
 */
FilterView.prototype['sortSpecs'] = undefined;

/**
 * The name of the filter view.
 * @member {String} title
 */
FilterView.prototype['title'] = undefined;






export default FilterView;

