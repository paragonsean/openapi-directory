/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BasicChartAxis from './BasicChartAxis';
import BasicChartDomain from './BasicChartDomain';
import BasicChartSeries from './BasicChartSeries';
import DataLabel from './DataLabel';

/**
 * The BasicChartSpec model module.
 * @module model/BasicChartSpec
 * @version v4
 */
class BasicChartSpec {
    /**
     * Constructs a new <code>BasicChartSpec</code>.
     * The specification for a basic chart. See BasicChartType for the list of charts this supports.
     * @alias module:model/BasicChartSpec
     */
    constructor() { 
        
        BasicChartSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BasicChartSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BasicChartSpec} obj Optional instance to populate.
     * @return {module:model/BasicChartSpec} The populated <code>BasicChartSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BasicChartSpec();

            if (data.hasOwnProperty('axis')) {
                obj['axis'] = ApiClient.convertToType(data['axis'], [BasicChartAxis]);
            }
            if (data.hasOwnProperty('chartType')) {
                obj['chartType'] = ApiClient.convertToType(data['chartType'], 'String');
            }
            if (data.hasOwnProperty('compareMode')) {
                obj['compareMode'] = ApiClient.convertToType(data['compareMode'], 'String');
            }
            if (data.hasOwnProperty('domains')) {
                obj['domains'] = ApiClient.convertToType(data['domains'], [BasicChartDomain]);
            }
            if (data.hasOwnProperty('headerCount')) {
                obj['headerCount'] = ApiClient.convertToType(data['headerCount'], 'Number');
            }
            if (data.hasOwnProperty('interpolateNulls')) {
                obj['interpolateNulls'] = ApiClient.convertToType(data['interpolateNulls'], 'Boolean');
            }
            if (data.hasOwnProperty('legendPosition')) {
                obj['legendPosition'] = ApiClient.convertToType(data['legendPosition'], 'String');
            }
            if (data.hasOwnProperty('lineSmoothing')) {
                obj['lineSmoothing'] = ApiClient.convertToType(data['lineSmoothing'], 'Boolean');
            }
            if (data.hasOwnProperty('series')) {
                obj['series'] = ApiClient.convertToType(data['series'], [BasicChartSeries]);
            }
            if (data.hasOwnProperty('stackedType')) {
                obj['stackedType'] = ApiClient.convertToType(data['stackedType'], 'String');
            }
            if (data.hasOwnProperty('threeDimensional')) {
                obj['threeDimensional'] = ApiClient.convertToType(data['threeDimensional'], 'Boolean');
            }
            if (data.hasOwnProperty('totalDataLabel')) {
                obj['totalDataLabel'] = DataLabel.constructFromObject(data['totalDataLabel']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BasicChartSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BasicChartSpec</code>.
     */
    static validateJSON(data) {
        if (data['axis']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['axis'])) {
                throw new Error("Expected the field `axis` to be an array in the JSON data but got " + data['axis']);
            }
            // validate the optional field `axis` (array)
            for (const item of data['axis']) {
                BasicChartAxis.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['chartType'] && !(typeof data['chartType'] === 'string' || data['chartType'] instanceof String)) {
            throw new Error("Expected the field `chartType` to be a primitive type in the JSON string but got " + data['chartType']);
        }
        // ensure the json data is a string
        if (data['compareMode'] && !(typeof data['compareMode'] === 'string' || data['compareMode'] instanceof String)) {
            throw new Error("Expected the field `compareMode` to be a primitive type in the JSON string but got " + data['compareMode']);
        }
        if (data['domains']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['domains'])) {
                throw new Error("Expected the field `domains` to be an array in the JSON data but got " + data['domains']);
            }
            // validate the optional field `domains` (array)
            for (const item of data['domains']) {
                BasicChartDomain.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['legendPosition'] && !(typeof data['legendPosition'] === 'string' || data['legendPosition'] instanceof String)) {
            throw new Error("Expected the field `legendPosition` to be a primitive type in the JSON string but got " + data['legendPosition']);
        }
        if (data['series']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['series'])) {
                throw new Error("Expected the field `series` to be an array in the JSON data but got " + data['series']);
            }
            // validate the optional field `series` (array)
            for (const item of data['series']) {
                BasicChartSeries.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['stackedType'] && !(typeof data['stackedType'] === 'string' || data['stackedType'] instanceof String)) {
            throw new Error("Expected the field `stackedType` to be a primitive type in the JSON string but got " + data['stackedType']);
        }
        // validate the optional field `totalDataLabel`
        if (data['totalDataLabel']) { // data not null
          DataLabel.validateJSON(data['totalDataLabel']);
        }

        return true;
    }


}



/**
 * The axis on the chart.
 * @member {Array.<module:model/BasicChartAxis>} axis
 */
BasicChartSpec.prototype['axis'] = undefined;

/**
 * The type of the chart.
 * @member {module:model/BasicChartSpec.ChartTypeEnum} chartType
 */
BasicChartSpec.prototype['chartType'] = undefined;

/**
 * The behavior of tooltips and data highlighting when hovering on data and chart area.
 * @member {module:model/BasicChartSpec.CompareModeEnum} compareMode
 */
BasicChartSpec.prototype['compareMode'] = undefined;

/**
 * The domain of data this is charting. Only a single domain is supported.
 * @member {Array.<module:model/BasicChartDomain>} domains
 */
BasicChartSpec.prototype['domains'] = undefined;

/**
 * The number of rows or columns in the data that are \"headers\". If not set, Google Sheets will guess how many rows are headers based on the data. (Note that BasicChartAxis.title may override the axis title inferred from the header values.)
 * @member {Number} headerCount
 */
BasicChartSpec.prototype['headerCount'] = undefined;

/**
 * If some values in a series are missing, gaps may appear in the chart (e.g, segments of lines in a line chart will be missing). To eliminate these gaps set this to true. Applies to Line, Area, and Combo charts.
 * @member {Boolean} interpolateNulls
 */
BasicChartSpec.prototype['interpolateNulls'] = undefined;

/**
 * The position of the chart legend.
 * @member {module:model/BasicChartSpec.LegendPositionEnum} legendPosition
 */
BasicChartSpec.prototype['legendPosition'] = undefined;

/**
 * Gets whether all lines should be rendered smooth or straight by default. Applies to Line charts.
 * @member {Boolean} lineSmoothing
 */
BasicChartSpec.prototype['lineSmoothing'] = undefined;

/**
 * The data this chart is visualizing.
 * @member {Array.<module:model/BasicChartSeries>} series
 */
BasicChartSpec.prototype['series'] = undefined;

/**
 * The stacked type for charts that support vertical stacking. Applies to Area, Bar, Column, Combo, and Stepped Area charts.
 * @member {module:model/BasicChartSpec.StackedTypeEnum} stackedType
 */
BasicChartSpec.prototype['stackedType'] = undefined;

/**
 * True to make the chart 3D. Applies to Bar and Column charts.
 * @member {Boolean} threeDimensional
 */
BasicChartSpec.prototype['threeDimensional'] = undefined;

/**
 * @member {module:model/DataLabel} totalDataLabel
 */
BasicChartSpec.prototype['totalDataLabel'] = undefined;





/**
 * Allowed values for the <code>chartType</code> property.
 * @enum {String}
 * @readonly
 */
BasicChartSpec['ChartTypeEnum'] = {

    /**
     * value: "BASIC_CHART_TYPE_UNSPECIFIED"
     * @const
     */
    "BASIC_CHART_TYPE_UNSPECIFIED": "BASIC_CHART_TYPE_UNSPECIFIED",

    /**
     * value: "BAR"
     * @const
     */
    "BAR": "BAR",

    /**
     * value: "LINE"
     * @const
     */
    "LINE": "LINE",

    /**
     * value: "AREA"
     * @const
     */
    "AREA": "AREA",

    /**
     * value: "COLUMN"
     * @const
     */
    "COLUMN": "COLUMN",

    /**
     * value: "SCATTER"
     * @const
     */
    "SCATTER": "SCATTER",

    /**
     * value: "COMBO"
     * @const
     */
    "COMBO": "COMBO",

    /**
     * value: "STEPPED_AREA"
     * @const
     */
    "STEPPED_AREA": "STEPPED_AREA"
};


/**
 * Allowed values for the <code>compareMode</code> property.
 * @enum {String}
 * @readonly
 */
BasicChartSpec['CompareModeEnum'] = {

    /**
     * value: "BASIC_CHART_COMPARE_MODE_UNSPECIFIED"
     * @const
     */
    "BASIC_CHART_COMPARE_MODE_UNSPECIFIED": "BASIC_CHART_COMPARE_MODE_UNSPECIFIED",

    /**
     * value: "DATUM"
     * @const
     */
    "DATUM": "DATUM",

    /**
     * value: "CATEGORY"
     * @const
     */
    "CATEGORY": "CATEGORY"
};


/**
 * Allowed values for the <code>legendPosition</code> property.
 * @enum {String}
 * @readonly
 */
BasicChartSpec['LegendPositionEnum'] = {

    /**
     * value: "BASIC_CHART_LEGEND_POSITION_UNSPECIFIED"
     * @const
     */
    "BASIC_CHART_LEGEND_POSITION_UNSPECIFIED": "BASIC_CHART_LEGEND_POSITION_UNSPECIFIED",

    /**
     * value: "BOTTOM_LEGEND"
     * @const
     */
    "BOTTOM_LEGEND": "BOTTOM_LEGEND",

    /**
     * value: "LEFT_LEGEND"
     * @const
     */
    "LEFT_LEGEND": "LEFT_LEGEND",

    /**
     * value: "RIGHT_LEGEND"
     * @const
     */
    "RIGHT_LEGEND": "RIGHT_LEGEND",

    /**
     * value: "TOP_LEGEND"
     * @const
     */
    "TOP_LEGEND": "TOP_LEGEND",

    /**
     * value: "NO_LEGEND"
     * @const
     */
    "NO_LEGEND": "NO_LEGEND"
};


/**
 * Allowed values for the <code>stackedType</code> property.
 * @enum {String}
 * @readonly
 */
BasicChartSpec['StackedTypeEnum'] = {

    /**
     * value: "BASIC_CHART_STACKED_TYPE_UNSPECIFIED"
     * @const
     */
    "BASIC_CHART_STACKED_TYPE_UNSPECIFIED": "BASIC_CHART_STACKED_TYPE_UNSPECIFIED",

    /**
     * value: "NOT_STACKED"
     * @const
     */
    "NOT_STACKED": "NOT_STACKED",

    /**
     * value: "STACKED"
     * @const
     */
    "STACKED": "STACKED",

    /**
     * value: "PERCENT_STACKED"
     * @const
     */
    "PERCENT_STACKED": "PERCENT_STACKED"
};



export default BasicChartSpec;

