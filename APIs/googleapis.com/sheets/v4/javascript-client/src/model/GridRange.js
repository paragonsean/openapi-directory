/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GridRange model module.
 * @module model/GridRange
 * @version v4
 */
class GridRange {
    /**
     * Constructs a new <code>GridRange</code>.
     * A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if &#x60;\&quot;Sheet1\&quot;&#x60; is sheet ID 123456, then: &#x60;Sheet1!A1:A1 &#x3D;&#x3D; sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1&#x60; &#x60;Sheet1!A3:B4 &#x3D;&#x3D; sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2&#x60; &#x60;Sheet1!A:B &#x3D;&#x3D; sheet_id: 123456, start_column_index: 0, end_column_index: 2&#x60; &#x60;Sheet1!A5:B &#x3D;&#x3D; sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2&#x60; &#x60;Sheet1 &#x3D;&#x3D; sheet_id: 123456&#x60; The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as &#x60;#REF!&#x60;.
     * @alias module:model/GridRange
     */
    constructor() { 
        
        GridRange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GridRange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GridRange} obj Optional instance to populate.
     * @return {module:model/GridRange} The populated <code>GridRange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GridRange();

            if (data.hasOwnProperty('endColumnIndex')) {
                obj['endColumnIndex'] = ApiClient.convertToType(data['endColumnIndex'], 'Number');
            }
            if (data.hasOwnProperty('endRowIndex')) {
                obj['endRowIndex'] = ApiClient.convertToType(data['endRowIndex'], 'Number');
            }
            if (data.hasOwnProperty('sheetId')) {
                obj['sheetId'] = ApiClient.convertToType(data['sheetId'], 'Number');
            }
            if (data.hasOwnProperty('startColumnIndex')) {
                obj['startColumnIndex'] = ApiClient.convertToType(data['startColumnIndex'], 'Number');
            }
            if (data.hasOwnProperty('startRowIndex')) {
                obj['startRowIndex'] = ApiClient.convertToType(data['startRowIndex'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GridRange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GridRange</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The end column (exclusive) of the range, or not set if unbounded.
 * @member {Number} endColumnIndex
 */
GridRange.prototype['endColumnIndex'] = undefined;

/**
 * The end row (exclusive) of the range, or not set if unbounded.
 * @member {Number} endRowIndex
 */
GridRange.prototype['endRowIndex'] = undefined;

/**
 * The sheet this range is on.
 * @member {Number} sheetId
 */
GridRange.prototype['sheetId'] = undefined;

/**
 * The start column (inclusive) of the range, or not set if unbounded.
 * @member {Number} startColumnIndex
 */
GridRange.prototype['startColumnIndex'] = undefined;

/**
 * The start row (inclusive) of the range, or not set if unbounded.
 * @member {Number} startRowIndex
 */
GridRange.prototype['startRowIndex'] = undefined;






export default GridRange;

