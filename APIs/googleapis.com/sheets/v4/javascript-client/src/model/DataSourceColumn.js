/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataSourceColumnReference from './DataSourceColumnReference';

/**
 * The DataSourceColumn model module.
 * @module model/DataSourceColumn
 * @version v4
 */
class DataSourceColumn {
    /**
     * Constructs a new <code>DataSourceColumn</code>.
     * A column in a data source.
     * @alias module:model/DataSourceColumn
     */
    constructor() { 
        
        DataSourceColumn.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataSourceColumn</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSourceColumn} obj Optional instance to populate.
     * @return {module:model/DataSourceColumn} The populated <code>DataSourceColumn</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSourceColumn();

            if (data.hasOwnProperty('formula')) {
                obj['formula'] = ApiClient.convertToType(data['formula'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = DataSourceColumnReference.constructFromObject(data['reference']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSourceColumn</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSourceColumn</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['formula'] && !(typeof data['formula'] === 'string' || data['formula'] instanceof String)) {
            throw new Error("Expected the field `formula` to be a primitive type in the JSON string but got " + data['formula']);
        }
        // validate the optional field `reference`
        if (data['reference']) { // data not null
          DataSourceColumnReference.validateJSON(data['reference']);
        }

        return true;
    }


}



/**
 * The formula of the calculated column.
 * @member {String} formula
 */
DataSourceColumn.prototype['formula'] = undefined;

/**
 * @member {module:model/DataSourceColumnReference} reference
 */
DataSourceColumn.prototype['reference'] = undefined;






export default DataSourceColumn;

