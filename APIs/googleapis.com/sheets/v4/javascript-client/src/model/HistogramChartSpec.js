/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HistogramSeries from './HistogramSeries';

/**
 * The HistogramChartSpec model module.
 * @module model/HistogramChartSpec
 * @version v4
 */
class HistogramChartSpec {
    /**
     * Constructs a new <code>HistogramChartSpec</code>.
     * A histogram chart. A histogram chart groups data items into bins, displaying each bin as a column of stacked items. Histograms are used to display the distribution of a dataset. Each column of items represents a range into which those items fall. The number of bins can be chosen automatically or specified explicitly.
     * @alias module:model/HistogramChartSpec
     */
    constructor() { 
        
        HistogramChartSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HistogramChartSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HistogramChartSpec} obj Optional instance to populate.
     * @return {module:model/HistogramChartSpec} The populated <code>HistogramChartSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HistogramChartSpec();

            if (data.hasOwnProperty('bucketSize')) {
                obj['bucketSize'] = ApiClient.convertToType(data['bucketSize'], 'Number');
            }
            if (data.hasOwnProperty('legendPosition')) {
                obj['legendPosition'] = ApiClient.convertToType(data['legendPosition'], 'String');
            }
            if (data.hasOwnProperty('outlierPercentile')) {
                obj['outlierPercentile'] = ApiClient.convertToType(data['outlierPercentile'], 'Number');
            }
            if (data.hasOwnProperty('series')) {
                obj['series'] = ApiClient.convertToType(data['series'], [HistogramSeries]);
            }
            if (data.hasOwnProperty('showItemDividers')) {
                obj['showItemDividers'] = ApiClient.convertToType(data['showItemDividers'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HistogramChartSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HistogramChartSpec</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['legendPosition'] && !(typeof data['legendPosition'] === 'string' || data['legendPosition'] instanceof String)) {
            throw new Error("Expected the field `legendPosition` to be a primitive type in the JSON string but got " + data['legendPosition']);
        }
        if (data['series']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['series'])) {
                throw new Error("Expected the field `series` to be an array in the JSON data but got " + data['series']);
            }
            // validate the optional field `series` (array)
            for (const item of data['series']) {
                HistogramSeries.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * By default the bucket size (the range of values stacked in a single column) is chosen automatically, but it may be overridden here. E.g., A bucket size of 1.5 results in buckets from 0 - 1.5, 1.5 - 3.0, etc. Cannot be negative. This field is optional.
 * @member {Number} bucketSize
 */
HistogramChartSpec.prototype['bucketSize'] = undefined;

/**
 * The position of the chart legend.
 * @member {module:model/HistogramChartSpec.LegendPositionEnum} legendPosition
 */
HistogramChartSpec.prototype['legendPosition'] = undefined;

/**
 * The outlier percentile is used to ensure that outliers do not adversely affect the calculation of bucket sizes. For example, setting an outlier percentile of 0.05 indicates that the top and bottom 5% of values when calculating buckets. The values are still included in the chart, they will be added to the first or last buckets instead of their own buckets. Must be between 0.0 and 0.5.
 * @member {Number} outlierPercentile
 */
HistogramChartSpec.prototype['outlierPercentile'] = undefined;

/**
 * The series for a histogram may be either a single series of values to be bucketed or multiple series, each of the same length, containing the name of the series followed by the values to be bucketed for that series.
 * @member {Array.<module:model/HistogramSeries>} series
 */
HistogramChartSpec.prototype['series'] = undefined;

/**
 * Whether horizontal divider lines should be displayed between items in each column.
 * @member {Boolean} showItemDividers
 */
HistogramChartSpec.prototype['showItemDividers'] = undefined;





/**
 * Allowed values for the <code>legendPosition</code> property.
 * @enum {String}
 * @readonly
 */
HistogramChartSpec['LegendPositionEnum'] = {

    /**
     * value: "HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED"
     * @const
     */
    "HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED": "HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED",

    /**
     * value: "BOTTOM_LEGEND"
     * @const
     */
    "BOTTOM_LEGEND": "BOTTOM_LEGEND",

    /**
     * value: "LEFT_LEGEND"
     * @const
     */
    "LEFT_LEGEND": "LEFT_LEGEND",

    /**
     * value: "RIGHT_LEGEND"
     * @const
     */
    "RIGHT_LEGEND": "RIGHT_LEGEND",

    /**
     * value: "TOP_LEGEND"
     * @const
     */
    "TOP_LEGEND": "TOP_LEGEND",

    /**
     * value: "NO_LEGEND"
     * @const
     */
    "NO_LEGEND": "NO_LEGEND",

    /**
     * value: "INSIDE_LEGEND"
     * @const
     */
    "INSIDE_LEGEND": "INSIDE_LEGEND"
};



export default HistogramChartSpec;

