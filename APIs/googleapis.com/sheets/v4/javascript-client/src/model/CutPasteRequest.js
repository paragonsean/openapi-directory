/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GridCoordinate from './GridCoordinate';
import GridRange from './GridRange';

/**
 * The CutPasteRequest model module.
 * @module model/CutPasteRequest
 * @version v4
 */
class CutPasteRequest {
    /**
     * Constructs a new <code>CutPasteRequest</code>.
     * Moves data from the source to the destination.
     * @alias module:model/CutPasteRequest
     */
    constructor() { 
        
        CutPasteRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CutPasteRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CutPasteRequest} obj Optional instance to populate.
     * @return {module:model/CutPasteRequest} The populated <code>CutPasteRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CutPasteRequest();

            if (data.hasOwnProperty('destination')) {
                obj['destination'] = GridCoordinate.constructFromObject(data['destination']);
            }
            if (data.hasOwnProperty('pasteType')) {
                obj['pasteType'] = ApiClient.convertToType(data['pasteType'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = GridRange.constructFromObject(data['source']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CutPasteRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CutPasteRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `destination`
        if (data['destination']) { // data not null
          GridCoordinate.validateJSON(data['destination']);
        }
        // ensure the json data is a string
        if (data['pasteType'] && !(typeof data['pasteType'] === 'string' || data['pasteType'] instanceof String)) {
            throw new Error("Expected the field `pasteType` to be a primitive type in the JSON string but got " + data['pasteType']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          GridRange.validateJSON(data['source']);
        }

        return true;
    }


}



/**
 * @member {module:model/GridCoordinate} destination
 */
CutPasteRequest.prototype['destination'] = undefined;

/**
 * What kind of data to paste. All the source data will be cut, regardless of what is pasted.
 * @member {module:model/CutPasteRequest.PasteTypeEnum} pasteType
 */
CutPasteRequest.prototype['pasteType'] = undefined;

/**
 * @member {module:model/GridRange} source
 */
CutPasteRequest.prototype['source'] = undefined;





/**
 * Allowed values for the <code>pasteType</code> property.
 * @enum {String}
 * @readonly
 */
CutPasteRequest['PasteTypeEnum'] = {

    /**
     * value: "PASTE_NORMAL"
     * @const
     */
    "NORMAL": "PASTE_NORMAL",

    /**
     * value: "PASTE_VALUES"
     * @const
     */
    "VALUES": "PASTE_VALUES",

    /**
     * value: "PASTE_FORMAT"
     * @const
     */
    "FORMAT": "PASTE_FORMAT",

    /**
     * value: "PASTE_NO_BORDERS"
     * @const
     */
    "NO_BORDERS": "PASTE_NO_BORDERS",

    /**
     * value: "PASTE_FORMULA"
     * @const
     */
    "FORMULA": "PASTE_FORMULA",

    /**
     * value: "PASTE_DATA_VALIDATION"
     * @const
     */
    "DATA_VALIDATION": "PASTE_DATA_VALIDATION",

    /**
     * value: "PASTE_CONDITIONAL_FORMATTING"
     * @const
     */
    "CONDITIONAL_FORMATTING": "PASTE_CONDITIONAL_FORMATTING"
};



export default CutPasteRequest;

