/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataSourceObjectReferences from './DataSourceObjectReferences';

/**
 * The RefreshDataSourceRequest model module.
 * @module model/RefreshDataSourceRequest
 * @version v4
 */
class RefreshDataSourceRequest {
    /**
     * Constructs a new <code>RefreshDataSourceRequest</code>.
     * Refreshes one or multiple data source objects in the spreadsheet by the specified references. The request requires an additional &#x60;bigquery.readonly&#x60; OAuth scope. If there are multiple refresh requests referencing the same data source objects in one batch, only the last refresh request is processed, and all those requests will have the same response accordingly.
     * @alias module:model/RefreshDataSourceRequest
     */
    constructor() { 
        
        RefreshDataSourceRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RefreshDataSourceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RefreshDataSourceRequest} obj Optional instance to populate.
     * @return {module:model/RefreshDataSourceRequest} The populated <code>RefreshDataSourceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RefreshDataSourceRequest();

            if (data.hasOwnProperty('dataSourceId')) {
                obj['dataSourceId'] = ApiClient.convertToType(data['dataSourceId'], 'String');
            }
            if (data.hasOwnProperty('force')) {
                obj['force'] = ApiClient.convertToType(data['force'], 'Boolean');
            }
            if (data.hasOwnProperty('isAll')) {
                obj['isAll'] = ApiClient.convertToType(data['isAll'], 'Boolean');
            }
            if (data.hasOwnProperty('references')) {
                obj['references'] = DataSourceObjectReferences.constructFromObject(data['references']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RefreshDataSourceRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RefreshDataSourceRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataSourceId'] && !(typeof data['dataSourceId'] === 'string' || data['dataSourceId'] instanceof String)) {
            throw new Error("Expected the field `dataSourceId` to be a primitive type in the JSON string but got " + data['dataSourceId']);
        }
        // validate the optional field `references`
        if (data['references']) { // data not null
          DataSourceObjectReferences.validateJSON(data['references']);
        }

        return true;
    }


}



/**
 * Reference to a DataSource. If specified, refreshes all associated data source objects for the data source.
 * @member {String} dataSourceId
 */
RefreshDataSourceRequest.prototype['dataSourceId'] = undefined;

/**
 * Refreshes the data source objects regardless of the current state. If not set and a referenced data source object was in error state, the refresh will fail immediately.
 * @member {Boolean} force
 */
RefreshDataSourceRequest.prototype['force'] = undefined;

/**
 * Refreshes all existing data source objects in the spreadsheet.
 * @member {Boolean} isAll
 */
RefreshDataSourceRequest.prototype['isAll'] = undefined;

/**
 * @member {module:model/DataSourceObjectReferences} references
 */
RefreshDataSourceRequest.prototype['references'] = undefined;






export default RefreshDataSourceRequest;

