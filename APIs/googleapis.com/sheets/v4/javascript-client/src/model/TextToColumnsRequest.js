/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GridRange from './GridRange';

/**
 * The TextToColumnsRequest model module.
 * @module model/TextToColumnsRequest
 * @version v4
 */
class TextToColumnsRequest {
    /**
     * Constructs a new <code>TextToColumnsRequest</code>.
     * Splits a column of text into multiple columns, based on a delimiter in each cell.
     * @alias module:model/TextToColumnsRequest
     */
    constructor() { 
        
        TextToColumnsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TextToColumnsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextToColumnsRequest} obj Optional instance to populate.
     * @return {module:model/TextToColumnsRequest} The populated <code>TextToColumnsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TextToColumnsRequest();

            if (data.hasOwnProperty('delimiter')) {
                obj['delimiter'] = ApiClient.convertToType(data['delimiter'], 'String');
            }
            if (data.hasOwnProperty('delimiterType')) {
                obj['delimiterType'] = ApiClient.convertToType(data['delimiterType'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = GridRange.constructFromObject(data['source']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TextToColumnsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TextToColumnsRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['delimiter'] && !(typeof data['delimiter'] === 'string' || data['delimiter'] instanceof String)) {
            throw new Error("Expected the field `delimiter` to be a primitive type in the JSON string but got " + data['delimiter']);
        }
        // ensure the json data is a string
        if (data['delimiterType'] && !(typeof data['delimiterType'] === 'string' || data['delimiterType'] instanceof String)) {
            throw new Error("Expected the field `delimiterType` to be a primitive type in the JSON string but got " + data['delimiterType']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          GridRange.validateJSON(data['source']);
        }

        return true;
    }


}



/**
 * The delimiter to use. Used only if delimiterType is CUSTOM.
 * @member {String} delimiter
 */
TextToColumnsRequest.prototype['delimiter'] = undefined;

/**
 * The delimiter type to use.
 * @member {module:model/TextToColumnsRequest.DelimiterTypeEnum} delimiterType
 */
TextToColumnsRequest.prototype['delimiterType'] = undefined;

/**
 * @member {module:model/GridRange} source
 */
TextToColumnsRequest.prototype['source'] = undefined;





/**
 * Allowed values for the <code>delimiterType</code> property.
 * @enum {String}
 * @readonly
 */
TextToColumnsRequest['DelimiterTypeEnum'] = {

    /**
     * value: "DELIMITER_TYPE_UNSPECIFIED"
     * @const
     */
    "DELIMITER_TYPE_UNSPECIFIED": "DELIMITER_TYPE_UNSPECIFIED",

    /**
     * value: "COMMA"
     * @const
     */
    "COMMA": "COMMA",

    /**
     * value: "SEMICOLON"
     * @const
     */
    "SEMICOLON": "SEMICOLON",

    /**
     * value: "PERIOD"
     * @const
     */
    "PERIOD": "PERIOD",

    /**
     * value: "SPACE"
     * @const
     */
    "SPACE": "SPACE",

    /**
     * value: "CUSTOM"
     * @const
     */
    "CUSTOM": "CUSTOM",

    /**
     * value: "AUTODETECT"
     * @const
     */
    "AUTODETECT": "AUTODETECT"
};



export default TextToColumnsRequest;

