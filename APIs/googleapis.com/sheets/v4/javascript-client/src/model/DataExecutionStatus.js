/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataExecutionStatus model module.
 * @module model/DataExecutionStatus
 * @version v4
 */
class DataExecutionStatus {
    /**
     * Constructs a new <code>DataExecutionStatus</code>.
     * The data execution status. A data execution is created to sync a data source object with the latest data from a DataSource. It is usually scheduled to run at background, you can check its state to tell if an execution completes There are several scenarios where a data execution is triggered to run: * Adding a data source creates an associated data source sheet as well as a data execution to sync the data from the data source to the sheet. * Updating a data source creates a data execution to refresh the associated data source sheet similarly. * You can send refresh request to explicitly refresh one or multiple data source objects.
     * @alias module:model/DataExecutionStatus
     */
    constructor() { 
        
        DataExecutionStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataExecutionStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataExecutionStatus} obj Optional instance to populate.
     * @return {module:model/DataExecutionStatus} The populated <code>DataExecutionStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataExecutionStatus();

            if (data.hasOwnProperty('errorCode')) {
                obj['errorCode'] = ApiClient.convertToType(data['errorCode'], 'String');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('lastRefreshTime')) {
                obj['lastRefreshTime'] = ApiClient.convertToType(data['lastRefreshTime'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataExecutionStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataExecutionStatus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['errorCode'] && !(typeof data['errorCode'] === 'string' || data['errorCode'] instanceof String)) {
            throw new Error("Expected the field `errorCode` to be a primitive type in the JSON string but got " + data['errorCode']);
        }
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        // ensure the json data is a string
        if (data['lastRefreshTime'] && !(typeof data['lastRefreshTime'] === 'string' || data['lastRefreshTime'] instanceof String)) {
            throw new Error("Expected the field `lastRefreshTime` to be a primitive type in the JSON string but got " + data['lastRefreshTime']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * The error code.
 * @member {module:model/DataExecutionStatus.ErrorCodeEnum} errorCode
 */
DataExecutionStatus.prototype['errorCode'] = undefined;

/**
 * The error message, which may be empty.
 * @member {String} errorMessage
 */
DataExecutionStatus.prototype['errorMessage'] = undefined;

/**
 * Gets the time the data last successfully refreshed.
 * @member {String} lastRefreshTime
 */
DataExecutionStatus.prototype['lastRefreshTime'] = undefined;

/**
 * The state of the data execution.
 * @member {module:model/DataExecutionStatus.StateEnum} state
 */
DataExecutionStatus.prototype['state'] = undefined;





/**
 * Allowed values for the <code>errorCode</code> property.
 * @enum {String}
 * @readonly
 */
DataExecutionStatus['ErrorCodeEnum'] = {

    /**
     * value: "DATA_EXECUTION_ERROR_CODE_UNSPECIFIED"
     * @const
     */
    "DATA_EXECUTION_ERROR_CODE_UNSPECIFIED": "DATA_EXECUTION_ERROR_CODE_UNSPECIFIED",

    /**
     * value: "TIMED_OUT"
     * @const
     */
    "TIMED_OUT": "TIMED_OUT",

    /**
     * value: "TOO_MANY_ROWS"
     * @const
     */
    "TOO_MANY_ROWS": "TOO_MANY_ROWS",

    /**
     * value: "TOO_MANY_COLUMNS"
     * @const
     */
    "TOO_MANY_COLUMNS": "TOO_MANY_COLUMNS",

    /**
     * value: "TOO_MANY_CELLS"
     * @const
     */
    "TOO_MANY_CELLS": "TOO_MANY_CELLS",

    /**
     * value: "ENGINE"
     * @const
     */
    "ENGINE": "ENGINE",

    /**
     * value: "PARAMETER_INVALID"
     * @const
     */
    "PARAMETER_INVALID": "PARAMETER_INVALID",

    /**
     * value: "UNSUPPORTED_DATA_TYPE"
     * @const
     */
    "UNSUPPORTED_DATA_TYPE": "UNSUPPORTED_DATA_TYPE",

    /**
     * value: "DUPLICATE_COLUMN_NAMES"
     * @const
     */
    "DUPLICATE_COLUMN_NAMES": "DUPLICATE_COLUMN_NAMES",

    /**
     * value: "INTERRUPTED"
     * @const
     */
    "INTERRUPTED": "INTERRUPTED",

    /**
     * value: "CONCURRENT_QUERY"
     * @const
     */
    "CONCURRENT_QUERY": "CONCURRENT_QUERY",

    /**
     * value: "OTHER"
     * @const
     */
    "OTHER": "OTHER",

    /**
     * value: "TOO_MANY_CHARS_PER_CELL"
     * @const
     */
    "TOO_MANY_CHARS_PER_CELL": "TOO_MANY_CHARS_PER_CELL",

    /**
     * value: "DATA_NOT_FOUND"
     * @const
     */
    "DATA_NOT_FOUND": "DATA_NOT_FOUND",

    /**
     * value: "PERMISSION_DENIED"
     * @const
     */
    "PERMISSION_DENIED": "PERMISSION_DENIED",

    /**
     * value: "MISSING_COLUMN_ALIAS"
     * @const
     */
    "MISSING_COLUMN_ALIAS": "MISSING_COLUMN_ALIAS",

    /**
     * value: "OBJECT_NOT_FOUND"
     * @const
     */
    "OBJECT_NOT_FOUND": "OBJECT_NOT_FOUND",

    /**
     * value: "OBJECT_IN_ERROR_STATE"
     * @const
     */
    "OBJECT_IN_ERROR_STATE": "OBJECT_IN_ERROR_STATE",

    /**
     * value: "OBJECT_SPEC_INVALID"
     * @const
     */
    "OBJECT_SPEC_INVALID": "OBJECT_SPEC_INVALID"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
DataExecutionStatus['StateEnum'] = {

    /**
     * value: "DATA_EXECUTION_STATE_UNSPECIFIED"
     * @const
     */
    "DATA_EXECUTION_STATE_UNSPECIFIED": "DATA_EXECUTION_STATE_UNSPECIFIED",

    /**
     * value: "NOT_STARTED"
     * @const
     */
    "NOT_STARTED": "NOT_STARTED",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default DataExecutionStatus;

