/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChartData from './ChartData';
import DataLabel from './DataLabel';
import WaterfallChartColumnStyle from './WaterfallChartColumnStyle';
import WaterfallChartCustomSubtotal from './WaterfallChartCustomSubtotal';

/**
 * The WaterfallChartSeries model module.
 * @module model/WaterfallChartSeries
 * @version v4
 */
class WaterfallChartSeries {
    /**
     * Constructs a new <code>WaterfallChartSeries</code>.
     * A single series of data for a waterfall chart.
     * @alias module:model/WaterfallChartSeries
     */
    constructor() { 
        
        WaterfallChartSeries.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WaterfallChartSeries</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WaterfallChartSeries} obj Optional instance to populate.
     * @return {module:model/WaterfallChartSeries} The populated <code>WaterfallChartSeries</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WaterfallChartSeries();

            if (data.hasOwnProperty('customSubtotals')) {
                obj['customSubtotals'] = ApiClient.convertToType(data['customSubtotals'], [WaterfallChartCustomSubtotal]);
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ChartData.constructFromObject(data['data']);
            }
            if (data.hasOwnProperty('dataLabel')) {
                obj['dataLabel'] = DataLabel.constructFromObject(data['dataLabel']);
            }
            if (data.hasOwnProperty('hideTrailingSubtotal')) {
                obj['hideTrailingSubtotal'] = ApiClient.convertToType(data['hideTrailingSubtotal'], 'Boolean');
            }
            if (data.hasOwnProperty('negativeColumnsStyle')) {
                obj['negativeColumnsStyle'] = WaterfallChartColumnStyle.constructFromObject(data['negativeColumnsStyle']);
            }
            if (data.hasOwnProperty('positiveColumnsStyle')) {
                obj['positiveColumnsStyle'] = WaterfallChartColumnStyle.constructFromObject(data['positiveColumnsStyle']);
            }
            if (data.hasOwnProperty('subtotalColumnsStyle')) {
                obj['subtotalColumnsStyle'] = WaterfallChartColumnStyle.constructFromObject(data['subtotalColumnsStyle']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WaterfallChartSeries</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WaterfallChartSeries</code>.
     */
    static validateJSON(data) {
        if (data['customSubtotals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customSubtotals'])) {
                throw new Error("Expected the field `customSubtotals` to be an array in the JSON data but got " + data['customSubtotals']);
            }
            // validate the optional field `customSubtotals` (array)
            for (const item of data['customSubtotals']) {
                WaterfallChartCustomSubtotal.validateJSON(item);
            };
        }
        // validate the optional field `data`
        if (data['data']) { // data not null
          ChartData.validateJSON(data['data']);
        }
        // validate the optional field `dataLabel`
        if (data['dataLabel']) { // data not null
          DataLabel.validateJSON(data['dataLabel']);
        }
        // validate the optional field `negativeColumnsStyle`
        if (data['negativeColumnsStyle']) { // data not null
          WaterfallChartColumnStyle.validateJSON(data['negativeColumnsStyle']);
        }
        // validate the optional field `positiveColumnsStyle`
        if (data['positiveColumnsStyle']) { // data not null
          WaterfallChartColumnStyle.validateJSON(data['positiveColumnsStyle']);
        }
        // validate the optional field `subtotalColumnsStyle`
        if (data['subtotalColumnsStyle']) { // data not null
          WaterfallChartColumnStyle.validateJSON(data['subtotalColumnsStyle']);
        }

        return true;
    }


}



/**
 * Custom subtotal columns appearing in this series. The order in which subtotals are defined is not significant. Only one subtotal may be defined for each data point.
 * @member {Array.<module:model/WaterfallChartCustomSubtotal>} customSubtotals
 */
WaterfallChartSeries.prototype['customSubtotals'] = undefined;

/**
 * @member {module:model/ChartData} data
 */
WaterfallChartSeries.prototype['data'] = undefined;

/**
 * @member {module:model/DataLabel} dataLabel
 */
WaterfallChartSeries.prototype['dataLabel'] = undefined;

/**
 * True to hide the subtotal column from the end of the series. By default, a subtotal column will appear at the end of each series. Setting this field to true will hide that subtotal column for this series.
 * @member {Boolean} hideTrailingSubtotal
 */
WaterfallChartSeries.prototype['hideTrailingSubtotal'] = undefined;

/**
 * @member {module:model/WaterfallChartColumnStyle} negativeColumnsStyle
 */
WaterfallChartSeries.prototype['negativeColumnsStyle'] = undefined;

/**
 * @member {module:model/WaterfallChartColumnStyle} positiveColumnsStyle
 */
WaterfallChartSeries.prototype['positiveColumnsStyle'] = undefined;

/**
 * @member {module:model/WaterfallChartColumnStyle} subtotalColumnsStyle
 */
WaterfallChartSeries.prototype['subtotalColumnsStyle'] = undefined;






export default WaterfallChartSeries;

