/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChartData from './ChartData';
import Color from './Color';
import ColorStyle from './ColorStyle';
import TextFormat from './TextFormat';
import TreemapChartColorScale from './TreemapChartColorScale';

/**
 * The TreemapChartSpec model module.
 * @module model/TreemapChartSpec
 * @version v4
 */
class TreemapChartSpec {
    /**
     * Constructs a new <code>TreemapChartSpec</code>.
     * A Treemap chart.
     * @alias module:model/TreemapChartSpec
     */
    constructor() { 
        
        TreemapChartSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TreemapChartSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TreemapChartSpec} obj Optional instance to populate.
     * @return {module:model/TreemapChartSpec} The populated <code>TreemapChartSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TreemapChartSpec();

            if (data.hasOwnProperty('colorData')) {
                obj['colorData'] = ChartData.constructFromObject(data['colorData']);
            }
            if (data.hasOwnProperty('colorScale')) {
                obj['colorScale'] = TreemapChartColorScale.constructFromObject(data['colorScale']);
            }
            if (data.hasOwnProperty('headerColor')) {
                obj['headerColor'] = Color.constructFromObject(data['headerColor']);
            }
            if (data.hasOwnProperty('headerColorStyle')) {
                obj['headerColorStyle'] = ColorStyle.constructFromObject(data['headerColorStyle']);
            }
            if (data.hasOwnProperty('hideTooltips')) {
                obj['hideTooltips'] = ApiClient.convertToType(data['hideTooltips'], 'Boolean');
            }
            if (data.hasOwnProperty('hintedLevels')) {
                obj['hintedLevels'] = ApiClient.convertToType(data['hintedLevels'], 'Number');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ChartData.constructFromObject(data['labels']);
            }
            if (data.hasOwnProperty('levels')) {
                obj['levels'] = ApiClient.convertToType(data['levels'], 'Number');
            }
            if (data.hasOwnProperty('maxValue')) {
                obj['maxValue'] = ApiClient.convertToType(data['maxValue'], 'Number');
            }
            if (data.hasOwnProperty('minValue')) {
                obj['minValue'] = ApiClient.convertToType(data['minValue'], 'Number');
            }
            if (data.hasOwnProperty('parentLabels')) {
                obj['parentLabels'] = ChartData.constructFromObject(data['parentLabels']);
            }
            if (data.hasOwnProperty('sizeData')) {
                obj['sizeData'] = ChartData.constructFromObject(data['sizeData']);
            }
            if (data.hasOwnProperty('textFormat')) {
                obj['textFormat'] = TextFormat.constructFromObject(data['textFormat']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TreemapChartSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TreemapChartSpec</code>.
     */
    static validateJSON(data) {
        // validate the optional field `colorData`
        if (data['colorData']) { // data not null
          ChartData.validateJSON(data['colorData']);
        }
        // validate the optional field `colorScale`
        if (data['colorScale']) { // data not null
          TreemapChartColorScale.validateJSON(data['colorScale']);
        }
        // validate the optional field `headerColor`
        if (data['headerColor']) { // data not null
          Color.validateJSON(data['headerColor']);
        }
        // validate the optional field `headerColorStyle`
        if (data['headerColorStyle']) { // data not null
          ColorStyle.validateJSON(data['headerColorStyle']);
        }
        // validate the optional field `labels`
        if (data['labels']) { // data not null
          ChartData.validateJSON(data['labels']);
        }
        // validate the optional field `parentLabels`
        if (data['parentLabels']) { // data not null
          ChartData.validateJSON(data['parentLabels']);
        }
        // validate the optional field `sizeData`
        if (data['sizeData']) { // data not null
          ChartData.validateJSON(data['sizeData']);
        }
        // validate the optional field `textFormat`
        if (data['textFormat']) { // data not null
          TextFormat.validateJSON(data['textFormat']);
        }

        return true;
    }


}



/**
 * @member {module:model/ChartData} colorData
 */
TreemapChartSpec.prototype['colorData'] = undefined;

/**
 * @member {module:model/TreemapChartColorScale} colorScale
 */
TreemapChartSpec.prototype['colorScale'] = undefined;

/**
 * @member {module:model/Color} headerColor
 */
TreemapChartSpec.prototype['headerColor'] = undefined;

/**
 * @member {module:model/ColorStyle} headerColorStyle
 */
TreemapChartSpec.prototype['headerColorStyle'] = undefined;

/**
 * True to hide tooltips.
 * @member {Boolean} hideTooltips
 */
TreemapChartSpec.prototype['hideTooltips'] = undefined;

/**
 * The number of additional data levels beyond the labeled levels to be shown on the treemap chart. These levels are not interactive and are shown without their labels. Defaults to 0 if not specified.
 * @member {Number} hintedLevels
 */
TreemapChartSpec.prototype['hintedLevels'] = undefined;

/**
 * @member {module:model/ChartData} labels
 */
TreemapChartSpec.prototype['labels'] = undefined;

/**
 * The number of data levels to show on the treemap chart. These levels are interactive and are shown with their labels. Defaults to 2 if not specified.
 * @member {Number} levels
 */
TreemapChartSpec.prototype['levels'] = undefined;

/**
 * The maximum possible data value. Cells with values greater than this will have the same color as cells with this value. If not specified, defaults to the actual maximum value from color_data, or the maximum value from size_data if color_data is not specified.
 * @member {Number} maxValue
 */
TreemapChartSpec.prototype['maxValue'] = undefined;

/**
 * The minimum possible data value. Cells with values less than this will have the same color as cells with this value. If not specified, defaults to the actual minimum value from color_data, or the minimum value from size_data if color_data is not specified.
 * @member {Number} minValue
 */
TreemapChartSpec.prototype['minValue'] = undefined;

/**
 * @member {module:model/ChartData} parentLabels
 */
TreemapChartSpec.prototype['parentLabels'] = undefined;

/**
 * @member {module:model/ChartData} sizeData
 */
TreemapChartSpec.prototype['sizeData'] = undefined;

/**
 * @member {module:model/TextFormat} textFormat
 */
TreemapChartSpec.prototype['textFormat'] = undefined;






export default TreemapChartSpec;

