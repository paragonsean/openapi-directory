/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DuplicateSheetRequest model module.
 * @module model/DuplicateSheetRequest
 * @version v4
 */
class DuplicateSheetRequest {
    /**
     * Constructs a new <code>DuplicateSheetRequest</code>.
     * Duplicates the contents of a sheet.
     * @alias module:model/DuplicateSheetRequest
     */
    constructor() { 
        
        DuplicateSheetRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DuplicateSheetRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DuplicateSheetRequest} obj Optional instance to populate.
     * @return {module:model/DuplicateSheetRequest} The populated <code>DuplicateSheetRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DuplicateSheetRequest();

            if (data.hasOwnProperty('insertSheetIndex')) {
                obj['insertSheetIndex'] = ApiClient.convertToType(data['insertSheetIndex'], 'Number');
            }
            if (data.hasOwnProperty('newSheetId')) {
                obj['newSheetId'] = ApiClient.convertToType(data['newSheetId'], 'Number');
            }
            if (data.hasOwnProperty('newSheetName')) {
                obj['newSheetName'] = ApiClient.convertToType(data['newSheetName'], 'String');
            }
            if (data.hasOwnProperty('sourceSheetId')) {
                obj['sourceSheetId'] = ApiClient.convertToType(data['sourceSheetId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DuplicateSheetRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DuplicateSheetRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['newSheetName'] && !(typeof data['newSheetName'] === 'string' || data['newSheetName'] instanceof String)) {
            throw new Error("Expected the field `newSheetName` to be a primitive type in the JSON string but got " + data['newSheetName']);
        }

        return true;
    }


}



/**
 * The zero-based index where the new sheet should be inserted. The index of all sheets after this are incremented.
 * @member {Number} insertSheetIndex
 */
DuplicateSheetRequest.prototype['insertSheetIndex'] = undefined;

/**
 * If set, the ID of the new sheet. If not set, an ID is chosen. If set, the ID must not conflict with any existing sheet ID. If set, it must be non-negative.
 * @member {Number} newSheetId
 */
DuplicateSheetRequest.prototype['newSheetId'] = undefined;

/**
 * The name of the new sheet. If empty, a new name is chosen for you.
 * @member {String} newSheetName
 */
DuplicateSheetRequest.prototype['newSheetName'] = undefined;

/**
 * The sheet to duplicate. If the source sheet is of DATA_SOURCE type, its backing DataSource is also duplicated and associated with the new copy of the sheet. No data execution is triggered, the grid data of this sheet is also copied over but only available after the batch request completes.
 * @member {Number} sourceSheetId
 */
DuplicateSheetRequest.prototype['sourceSheetId'] = undefined;






export default DuplicateSheetRequest;

