/**
 * Google Sheets API
 * Reads and writes Google Sheets.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataSourceColumnReference from './DataSourceColumnReference';

/**
 * The PivotValue model module.
 * @module model/PivotValue
 * @version v4
 */
class PivotValue {
    /**
     * Constructs a new <code>PivotValue</code>.
     * The definition of how a value in a pivot table should be calculated.
     * @alias module:model/PivotValue
     */
    constructor() { 
        
        PivotValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PivotValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PivotValue} obj Optional instance to populate.
     * @return {module:model/PivotValue} The populated <code>PivotValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PivotValue();

            if (data.hasOwnProperty('calculatedDisplayType')) {
                obj['calculatedDisplayType'] = ApiClient.convertToType(data['calculatedDisplayType'], 'String');
            }
            if (data.hasOwnProperty('dataSourceColumnReference')) {
                obj['dataSourceColumnReference'] = DataSourceColumnReference.constructFromObject(data['dataSourceColumnReference']);
            }
            if (data.hasOwnProperty('formula')) {
                obj['formula'] = ApiClient.convertToType(data['formula'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('sourceColumnOffset')) {
                obj['sourceColumnOffset'] = ApiClient.convertToType(data['sourceColumnOffset'], 'Number');
            }
            if (data.hasOwnProperty('summarizeFunction')) {
                obj['summarizeFunction'] = ApiClient.convertToType(data['summarizeFunction'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PivotValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PivotValue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['calculatedDisplayType'] && !(typeof data['calculatedDisplayType'] === 'string' || data['calculatedDisplayType'] instanceof String)) {
            throw new Error("Expected the field `calculatedDisplayType` to be a primitive type in the JSON string but got " + data['calculatedDisplayType']);
        }
        // validate the optional field `dataSourceColumnReference`
        if (data['dataSourceColumnReference']) { // data not null
          DataSourceColumnReference.validateJSON(data['dataSourceColumnReference']);
        }
        // ensure the json data is a string
        if (data['formula'] && !(typeof data['formula'] === 'string' || data['formula'] instanceof String)) {
            throw new Error("Expected the field `formula` to be a primitive type in the JSON string but got " + data['formula']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['summarizeFunction'] && !(typeof data['summarizeFunction'] === 'string' || data['summarizeFunction'] instanceof String)) {
            throw new Error("Expected the field `summarizeFunction` to be a primitive type in the JSON string but got " + data['summarizeFunction']);
        }

        return true;
    }


}



/**
 * If specified, indicates that pivot values should be displayed as the result of a calculation with another pivot value. For example, if calculated_display_type is specified as PERCENT_OF_GRAND_TOTAL, all the pivot values are displayed as the percentage of the grand total. In the Sheets editor, this is referred to as \"Show As\" in the value section of a pivot table.
 * @member {module:model/PivotValue.CalculatedDisplayTypeEnum} calculatedDisplayType
 */
PivotValue.prototype['calculatedDisplayType'] = undefined;

/**
 * @member {module:model/DataSourceColumnReference} dataSourceColumnReference
 */
PivotValue.prototype['dataSourceColumnReference'] = undefined;

/**
 * A custom formula to calculate the value. The formula must start with an `=` character.
 * @member {String} formula
 */
PivotValue.prototype['formula'] = undefined;

/**
 * A name to use for the value.
 * @member {String} name
 */
PivotValue.prototype['name'] = undefined;

/**
 * The column offset of the source range that this value reads from. For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0` means this value refers to column `C`, whereas the offset `1` would refer to column `D`.
 * @member {Number} sourceColumnOffset
 */
PivotValue.prototype['sourceColumnOffset'] = undefined;

/**
 * A function to summarize the value. If formula is set, the only supported values are SUM and CUSTOM. If sourceColumnOffset is set, then `CUSTOM` is not supported.
 * @member {module:model/PivotValue.SummarizeFunctionEnum} summarizeFunction
 */
PivotValue.prototype['summarizeFunction'] = undefined;





/**
 * Allowed values for the <code>calculatedDisplayType</code> property.
 * @enum {String}
 * @readonly
 */
PivotValue['CalculatedDisplayTypeEnum'] = {

    /**
     * value: "PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED"
     * @const
     */
    "PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED": "PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED",

    /**
     * value: "PERCENT_OF_ROW_TOTAL"
     * @const
     */
    "PERCENT_OF_ROW_TOTAL": "PERCENT_OF_ROW_TOTAL",

    /**
     * value: "PERCENT_OF_COLUMN_TOTAL"
     * @const
     */
    "PERCENT_OF_COLUMN_TOTAL": "PERCENT_OF_COLUMN_TOTAL",

    /**
     * value: "PERCENT_OF_GRAND_TOTAL"
     * @const
     */
    "PERCENT_OF_GRAND_TOTAL": "PERCENT_OF_GRAND_TOTAL"
};


/**
 * Allowed values for the <code>summarizeFunction</code> property.
 * @enum {String}
 * @readonly
 */
PivotValue['SummarizeFunctionEnum'] = {

    /**
     * value: "PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED"
     * @const
     */
    "PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED": "PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED",

    /**
     * value: "SUM"
     * @const
     */
    "SUM": "SUM",

    /**
     * value: "COUNTA"
     * @const
     */
    "COUNTA": "COUNTA",

    /**
     * value: "COUNT"
     * @const
     */
    "COUNT": "COUNT",

    /**
     * value: "COUNTUNIQUE"
     * @const
     */
    "COUNTUNIQUE": "COUNTUNIQUE",

    /**
     * value: "AVERAGE"
     * @const
     */
    "AVERAGE": "AVERAGE",

    /**
     * value: "MAX"
     * @const
     */
    "MAX": "MAX",

    /**
     * value: "MIN"
     * @const
     */
    "MIN": "MIN",

    /**
     * value: "MEDIAN"
     * @const
     */
    "MEDIAN": "MEDIAN",

    /**
     * value: "PRODUCT"
     * @const
     */
    "PRODUCT": "PRODUCT",

    /**
     * value: "STDEV"
     * @const
     */
    "STDEV": "STDEV",

    /**
     * value: "STDEVP"
     * @const
     */
    "STDEVP": "STDEVP",

    /**
     * value: "VAR"
     * @const
     */
    "VAR": "VAR",

    /**
     * value: "VARP"
     * @const
     */
    "VARP": "VARP",

    /**
     * value: "CUSTOM"
     * @const
     */
    "CUSTOM": "CUSTOM"
};



export default PivotValue;

