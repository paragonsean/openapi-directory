# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mirror_config import MirrorConfig
from openapi_server.models.pubsub_config import PubsubConfig
from openapi_server import util


class Repo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mirror_config: MirrorConfig=None, name: str=None, pubsub_configs: Dict[str, PubsubConfig]=None, size: str=None, url: str=None):
        """Repo - a model defined in OpenAPI

        :param mirror_config: The mirror_config of this Repo.
        :param name: The name of this Repo.
        :param pubsub_configs: The pubsub_configs of this Repo.
        :param size: The size of this Repo.
        :param url: The url of this Repo.
        """
        self.openapi_types = {
            'mirror_config': MirrorConfig,
            'name': str,
            'pubsub_configs': Dict[str, PubsubConfig],
            'size': str,
            'url': str
        }

        self.attribute_map = {
            'mirror_config': 'mirrorConfig',
            'name': 'name',
            'pubsub_configs': 'pubsubConfigs',
            'size': 'size',
            'url': 'url'
        }

        self._mirror_config = mirror_config
        self._name = name
        self._pubsub_configs = pubsub_configs
        self._size = size
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Repo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Repo of this Repo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mirror_config(self):
        """Gets the mirror_config of this Repo.


        :return: The mirror_config of this Repo.
        :rtype: MirrorConfig
        """
        return self._mirror_config

    @mirror_config.setter
    def mirror_config(self, mirror_config):
        """Sets the mirror_config of this Repo.


        :param mirror_config: The mirror_config of this Repo.
        :type mirror_config: MirrorConfig
        """

        self._mirror_config = mirror_config

    @property
    def name(self):
        """Gets the name of this Repo.

        Resource name of the repository, of the form `projects//repos/`. The repo name may contain slashes. eg, `projects/myproject/repos/name/with/slash`

        :return: The name of this Repo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Repo.

        Resource name of the repository, of the form `projects//repos/`. The repo name may contain slashes. eg, `projects/myproject/repos/name/with/slash`

        :param name: The name of this Repo.
        :type name: str
        """

        self._name = name

    @property
    def pubsub_configs(self):
        """Gets the pubsub_configs of this Repo.

        How this repository publishes a change in the repository through Cloud Pub/Sub. Keyed by the topic names.

        :return: The pubsub_configs of this Repo.
        :rtype: Dict[str, PubsubConfig]
        """
        return self._pubsub_configs

    @pubsub_configs.setter
    def pubsub_configs(self, pubsub_configs):
        """Sets the pubsub_configs of this Repo.

        How this repository publishes a change in the repository through Cloud Pub/Sub. Keyed by the topic names.

        :param pubsub_configs: The pubsub_configs of this Repo.
        :type pubsub_configs: Dict[str, PubsubConfig]
        """

        self._pubsub_configs = pubsub_configs

    @property
    def size(self):
        """Gets the size of this Repo.

        The disk usage of the repo, in bytes. Read-only field. Size is only returned by GetRepo.

        :return: The size of this Repo.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Repo.

        The disk usage of the repo, in bytes. Read-only field. Size is only returned by GetRepo.

        :param size: The size of this Repo.
        :type size: str
        """

        self._size = size

    @property
    def url(self):
        """Gets the url of this Repo.

        URL to clone the repository from Google Cloud Source Repositories. Read-only field.

        :return: The url of this Repo.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Repo.

        URL to clone the repository from Google Cloud Source Repositories. Read-only field.

        :param url: The url of this Repo.
        :type url: str
        """

        self._url = url
