# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MirrorConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deploy_key_id: str=None, url: str=None, webhook_id: str=None):
        """MirrorConfig - a model defined in OpenAPI

        :param deploy_key_id: The deploy_key_id of this MirrorConfig.
        :param url: The url of this MirrorConfig.
        :param webhook_id: The webhook_id of this MirrorConfig.
        """
        self.openapi_types = {
            'deploy_key_id': str,
            'url': str,
            'webhook_id': str
        }

        self.attribute_map = {
            'deploy_key_id': 'deployKeyId',
            'url': 'url',
            'webhook_id': 'webhookId'
        }

        self._deploy_key_id = deploy_key_id
        self._url = url
        self._webhook_id = webhook_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MirrorConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MirrorConfig of this MirrorConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deploy_key_id(self):
        """Gets the deploy_key_id of this MirrorConfig.

        ID of the SSH deploy key at the other hosting service. Removing this key from the other service would deauthorize Google Cloud Source Repositories from mirroring.

        :return: The deploy_key_id of this MirrorConfig.
        :rtype: str
        """
        return self._deploy_key_id

    @deploy_key_id.setter
    def deploy_key_id(self, deploy_key_id):
        """Sets the deploy_key_id of this MirrorConfig.

        ID of the SSH deploy key at the other hosting service. Removing this key from the other service would deauthorize Google Cloud Source Repositories from mirroring.

        :param deploy_key_id: The deploy_key_id of this MirrorConfig.
        :type deploy_key_id: str
        """

        self._deploy_key_id = deploy_key_id

    @property
    def url(self):
        """Gets the url of this MirrorConfig.

        URL of the main repository at the other hosting service.

        :return: The url of this MirrorConfig.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MirrorConfig.

        URL of the main repository at the other hosting service.

        :param url: The url of this MirrorConfig.
        :type url: str
        """

        self._url = url

    @property
    def webhook_id(self):
        """Gets the webhook_id of this MirrorConfig.

        ID of the webhook listening to updates to trigger mirroring. Removing this webhook from the other hosting service will stop Google Cloud Source Repositories from receiving notifications, and thereby disabling mirroring.

        :return: The webhook_id of this MirrorConfig.
        :rtype: str
        """
        return self._webhook_id

    @webhook_id.setter
    def webhook_id(self, webhook_id):
        """Sets the webhook_id of this MirrorConfig.

        ID of the webhook listening to updates to trigger mirroring. Removing this webhook from the other hosting service will stop Google Cloud Source Repositories from receiving notifications, and thereby disabling mirroring.

        :param webhook_id: The webhook_id of this MirrorConfig.
        :type webhook_id: str
        """

        self._webhook_id = webhook_id
