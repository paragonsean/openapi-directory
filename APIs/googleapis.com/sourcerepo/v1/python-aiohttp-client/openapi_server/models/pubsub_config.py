# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PubsubConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message_format: str=None, service_account_email: str=None, topic: str=None):
        """PubsubConfig - a model defined in OpenAPI

        :param message_format: The message_format of this PubsubConfig.
        :param service_account_email: The service_account_email of this PubsubConfig.
        :param topic: The topic of this PubsubConfig.
        """
        self.openapi_types = {
            'message_format': str,
            'service_account_email': str,
            'topic': str
        }

        self.attribute_map = {
            'message_format': 'messageFormat',
            'service_account_email': 'serviceAccountEmail',
            'topic': 'topic'
        }

        self._message_format = message_format
        self._service_account_email = service_account_email
        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PubsubConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PubsubConfig of this PubsubConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message_format(self):
        """Gets the message_format of this PubsubConfig.

        The format of the Cloud Pub/Sub messages.

        :return: The message_format of this PubsubConfig.
        :rtype: str
        """
        return self._message_format

    @message_format.setter
    def message_format(self, message_format):
        """Sets the message_format of this PubsubConfig.

        The format of the Cloud Pub/Sub messages.

        :param message_format: The message_format of this PubsubConfig.
        :type message_format: str
        """
        allowed_values = ["MESSAGE_FORMAT_UNSPECIFIED", "PROTOBUF", "JSON"]  # noqa: E501
        if message_format not in allowed_values:
            raise ValueError(
                "Invalid value for `message_format` ({0}), must be one of {1}"
                .format(message_format, allowed_values)
            )

        self._message_format = message_format

    @property
    def service_account_email(self):
        """Gets the service_account_email of this PubsubConfig.

        Email address of the service account used for publishing Cloud Pub/Sub messages. This service account needs to be in the same project as the PubsubConfig. When added, the caller needs to have iam.serviceAccounts.actAs permission on this service account. If unspecified, it defaults to the compute engine default service account.

        :return: The service_account_email of this PubsubConfig.
        :rtype: str
        """
        return self._service_account_email

    @service_account_email.setter
    def service_account_email(self, service_account_email):
        """Sets the service_account_email of this PubsubConfig.

        Email address of the service account used for publishing Cloud Pub/Sub messages. This service account needs to be in the same project as the PubsubConfig. When added, the caller needs to have iam.serviceAccounts.actAs permission on this service account. If unspecified, it defaults to the compute engine default service account.

        :param service_account_email: The service_account_email of this PubsubConfig.
        :type service_account_email: str
        """

        self._service_account_email = service_account_email

    @property
    def topic(self):
        """Gets the topic of this PubsubConfig.

        A topic of Cloud Pub/Sub. Values are of the form `projects//topics/`. The project needs to be the same project as this config is in.

        :return: The topic of this PubsubConfig.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this PubsubConfig.

        A topic of Cloud Pub/Sub. Values are of the form `projects//topics/`. The project needs to be the same project as this config is in.

        :param topic: The topic of this PubsubConfig.
        :type topic: str
        """

        self._topic = topic
