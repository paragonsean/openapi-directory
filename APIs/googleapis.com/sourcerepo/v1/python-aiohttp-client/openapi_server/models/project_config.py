# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pubsub_config import PubsubConfig
from openapi_server import util


class ProjectConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_private_key_check: bool=None, name: str=None, pubsub_configs: Dict[str, PubsubConfig]=None):
        """ProjectConfig - a model defined in OpenAPI

        :param enable_private_key_check: The enable_private_key_check of this ProjectConfig.
        :param name: The name of this ProjectConfig.
        :param pubsub_configs: The pubsub_configs of this ProjectConfig.
        """
        self.openapi_types = {
            'enable_private_key_check': bool,
            'name': str,
            'pubsub_configs': Dict[str, PubsubConfig]
        }

        self.attribute_map = {
            'enable_private_key_check': 'enablePrivateKeyCheck',
            'name': 'name',
            'pubsub_configs': 'pubsubConfigs'
        }

        self._enable_private_key_check = enable_private_key_check
        self._name = name
        self._pubsub_configs = pubsub_configs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectConfig of this ProjectConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_private_key_check(self):
        """Gets the enable_private_key_check of this ProjectConfig.

        Reject a Git push that contains a private key.

        :return: The enable_private_key_check of this ProjectConfig.
        :rtype: bool
        """
        return self._enable_private_key_check

    @enable_private_key_check.setter
    def enable_private_key_check(self, enable_private_key_check):
        """Sets the enable_private_key_check of this ProjectConfig.

        Reject a Git push that contains a private key.

        :param enable_private_key_check: The enable_private_key_check of this ProjectConfig.
        :type enable_private_key_check: bool
        """

        self._enable_private_key_check = enable_private_key_check

    @property
    def name(self):
        """Gets the name of this ProjectConfig.

        The name of the project. Values are of the form `projects/`.

        :return: The name of this ProjectConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectConfig.

        The name of the project. Values are of the form `projects/`.

        :param name: The name of this ProjectConfig.
        :type name: str
        """

        self._name = name

    @property
    def pubsub_configs(self):
        """Gets the pubsub_configs of this ProjectConfig.

        How this project publishes a change in the repositories through Cloud Pub/Sub. Keyed by the topic names.

        :return: The pubsub_configs of this ProjectConfig.
        :rtype: Dict[str, PubsubConfig]
        """
        return self._pubsub_configs

    @pubsub_configs.setter
    def pubsub_configs(self, pubsub_configs):
        """Sets the pubsub_configs of this ProjectConfig.

        How this project publishes a change in the repositories through Cloud Pub/Sub. Keyed by the topic names.

        :param pubsub_configs: The pubsub_configs of this ProjectConfig.
        :type pubsub_configs: Dict[str, PubsubConfig]
        """

        self._pubsub_configs = pubsub_configs
