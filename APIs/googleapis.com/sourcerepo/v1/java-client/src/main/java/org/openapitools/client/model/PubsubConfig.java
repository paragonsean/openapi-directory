/*
 * Cloud Source Repositories API
 * Accesses source code repositories hosted by Google.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration to publish a Cloud Pub/Sub message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:24.827432-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PubsubConfig {
  /**
   * The format of the Cloud Pub/Sub messages.
   */
  @JsonAdapter(MessageFormatEnum.Adapter.class)
  public enum MessageFormatEnum {
    MESSAGE_FORMAT_UNSPECIFIED("MESSAGE_FORMAT_UNSPECIFIED"),
    
    PROTOBUF("PROTOBUF"),
    
    JSON("JSON");

    private String value;

    MessageFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MessageFormatEnum fromValue(String value) {
      for (MessageFormatEnum b : MessageFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MessageFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MessageFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MessageFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MessageFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MessageFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MESSAGE_FORMAT = "messageFormat";
  @SerializedName(SERIALIZED_NAME_MESSAGE_FORMAT)
  private MessageFormatEnum messageFormat;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_EMAIL = "serviceAccountEmail";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_EMAIL)
  private String serviceAccountEmail;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public PubsubConfig() {
  }

  public PubsubConfig messageFormat(MessageFormatEnum messageFormat) {
    this.messageFormat = messageFormat;
    return this;
  }

  /**
   * The format of the Cloud Pub/Sub messages.
   * @return messageFormat
   */
  @javax.annotation.Nullable
  public MessageFormatEnum getMessageFormat() {
    return messageFormat;
  }

  public void setMessageFormat(MessageFormatEnum messageFormat) {
    this.messageFormat = messageFormat;
  }


  public PubsubConfig serviceAccountEmail(String serviceAccountEmail) {
    this.serviceAccountEmail = serviceAccountEmail;
    return this;
  }

  /**
   * Email address of the service account used for publishing Cloud Pub/Sub messages. This service account needs to be in the same project as the PubsubConfig. When added, the caller needs to have iam.serviceAccounts.actAs permission on this service account. If unspecified, it defaults to the compute engine default service account.
   * @return serviceAccountEmail
   */
  @javax.annotation.Nullable
  public String getServiceAccountEmail() {
    return serviceAccountEmail;
  }

  public void setServiceAccountEmail(String serviceAccountEmail) {
    this.serviceAccountEmail = serviceAccountEmail;
  }


  public PubsubConfig topic(String topic) {
    this.topic = topic;
    return this;
  }

  /**
   * A topic of Cloud Pub/Sub. Values are of the form &#x60;projects//topics/&#x60;. The project needs to be the same project as this config is in.
   * @return topic
   */
  @javax.annotation.Nullable
  public String getTopic() {
    return topic;
  }

  public void setTopic(String topic) {
    this.topic = topic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PubsubConfig pubsubConfig = (PubsubConfig) o;
    return Objects.equals(this.messageFormat, pubsubConfig.messageFormat) &&
        Objects.equals(this.serviceAccountEmail, pubsubConfig.serviceAccountEmail) &&
        Objects.equals(this.topic, pubsubConfig.topic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageFormat, serviceAccountEmail, topic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PubsubConfig {\n");
    sb.append("    messageFormat: ").append(toIndentedString(messageFormat)).append("\n");
    sb.append("    serviceAccountEmail: ").append(toIndentedString(serviceAccountEmail)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("messageFormat");
    openapiFields.add("serviceAccountEmail");
    openapiFields.add("topic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PubsubConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PubsubConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PubsubConfig is not found in the empty JSON string", PubsubConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PubsubConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PubsubConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("messageFormat") != null && !jsonObj.get("messageFormat").isJsonNull()) && !jsonObj.get("messageFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageFormat").toString()));
      }
      // validate the optional field `messageFormat`
      if (jsonObj.get("messageFormat") != null && !jsonObj.get("messageFormat").isJsonNull()) {
        MessageFormatEnum.validateJsonElement(jsonObj.get("messageFormat"));
      }
      if ((jsonObj.get("serviceAccountEmail") != null && !jsonObj.get("serviceAccountEmail").isJsonNull()) && !jsonObj.get("serviceAccountEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccountEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccountEmail").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PubsubConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PubsubConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PubsubConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PubsubConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PubsubConfig>() {
           @Override
           public void write(JsonWriter out, PubsubConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PubsubConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PubsubConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PubsubConfig
   * @throws IOException if the JSON string is invalid with respect to PubsubConfig
   */
  public static PubsubConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PubsubConfig.class);
  }

  /**
   * Convert an instance of PubsubConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

