/**
 * Cloud Source Repositories API
 * Accesses source code repositories hosted by Google.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MirrorConfig from './MirrorConfig';
import PubsubConfig from './PubsubConfig';

/**
 * The Repo model module.
 * @module model/Repo
 * @version v1
 */
class Repo {
    /**
     * Constructs a new <code>Repo</code>.
     * A repository (or repo) is a Git repository storing versioned source content.
     * @alias module:model/Repo
     */
    constructor() { 
        
        Repo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Repo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Repo} obj Optional instance to populate.
     * @return {module:model/Repo} The populated <code>Repo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Repo();

            if (data.hasOwnProperty('mirrorConfig')) {
                obj['mirrorConfig'] = MirrorConfig.constructFromObject(data['mirrorConfig']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pubsubConfigs')) {
                obj['pubsubConfigs'] = ApiClient.convertToType(data['pubsubConfigs'], {'String': PubsubConfig});
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Repo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Repo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `mirrorConfig`
        if (data['mirrorConfig']) { // data not null
          MirrorConfig.validateJSON(data['mirrorConfig']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {module:model/MirrorConfig} mirrorConfig
 */
Repo.prototype['mirrorConfig'] = undefined;

/**
 * Resource name of the repository, of the form `projects//repos/`. The repo name may contain slashes. eg, `projects/myproject/repos/name/with/slash`
 * @member {String} name
 */
Repo.prototype['name'] = undefined;

/**
 * How this repository publishes a change in the repository through Cloud Pub/Sub. Keyed by the topic names.
 * @member {Object.<String, module:model/PubsubConfig>} pubsubConfigs
 */
Repo.prototype['pubsubConfigs'] = undefined;

/**
 * The disk usage of the repo, in bytes. Read-only field. Size is only returned by GetRepo.
 * @member {String} size
 */
Repo.prototype['size'] = undefined;

/**
 * URL to clone the repository from Google Cloud Source Repositories. Read-only field.
 * @member {String} url
 */
Repo.prototype['url'] = undefined;






export default Repo;

