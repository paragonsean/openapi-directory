/**
 * Cloud Source Repositories API
 * Accesses source code repositories hosted by Google.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PubsubConfig model module.
 * @module model/PubsubConfig
 * @version v1
 */
class PubsubConfig {
    /**
     * Constructs a new <code>PubsubConfig</code>.
     * Configuration to publish a Cloud Pub/Sub message.
     * @alias module:model/PubsubConfig
     */
    constructor() { 
        
        PubsubConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PubsubConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PubsubConfig} obj Optional instance to populate.
     * @return {module:model/PubsubConfig} The populated <code>PubsubConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PubsubConfig();

            if (data.hasOwnProperty('messageFormat')) {
                obj['messageFormat'] = ApiClient.convertToType(data['messageFormat'], 'String');
            }
            if (data.hasOwnProperty('serviceAccountEmail')) {
                obj['serviceAccountEmail'] = ApiClient.convertToType(data['serviceAccountEmail'], 'String');
            }
            if (data.hasOwnProperty('topic')) {
                obj['topic'] = ApiClient.convertToType(data['topic'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PubsubConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PubsubConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['messageFormat'] && !(typeof data['messageFormat'] === 'string' || data['messageFormat'] instanceof String)) {
            throw new Error("Expected the field `messageFormat` to be a primitive type in the JSON string but got " + data['messageFormat']);
        }
        // ensure the json data is a string
        if (data['serviceAccountEmail'] && !(typeof data['serviceAccountEmail'] === 'string' || data['serviceAccountEmail'] instanceof String)) {
            throw new Error("Expected the field `serviceAccountEmail` to be a primitive type in the JSON string but got " + data['serviceAccountEmail']);
        }
        // ensure the json data is a string
        if (data['topic'] && !(typeof data['topic'] === 'string' || data['topic'] instanceof String)) {
            throw new Error("Expected the field `topic` to be a primitive type in the JSON string but got " + data['topic']);
        }

        return true;
    }


}



/**
 * The format of the Cloud Pub/Sub messages.
 * @member {module:model/PubsubConfig.MessageFormatEnum} messageFormat
 */
PubsubConfig.prototype['messageFormat'] = undefined;

/**
 * Email address of the service account used for publishing Cloud Pub/Sub messages. This service account needs to be in the same project as the PubsubConfig. When added, the caller needs to have iam.serviceAccounts.actAs permission on this service account. If unspecified, it defaults to the compute engine default service account.
 * @member {String} serviceAccountEmail
 */
PubsubConfig.prototype['serviceAccountEmail'] = undefined;

/**
 * A topic of Cloud Pub/Sub. Values are of the form `projects//topics/`. The project needs to be the same project as this config is in.
 * @member {String} topic
 */
PubsubConfig.prototype['topic'] = undefined;





/**
 * Allowed values for the <code>messageFormat</code> property.
 * @enum {String}
 * @readonly
 */
PubsubConfig['MessageFormatEnum'] = {

    /**
     * value: "MESSAGE_FORMAT_UNSPECIFIED"
     * @const
     */
    "MESSAGE_FORMAT_UNSPECIFIED": "MESSAGE_FORMAT_UNSPECIFIED",

    /**
     * value: "PROTOBUF"
     * @const
     */
    "PROTOBUF": "PROTOBUF",

    /**
     * value: "JSON"
     * @const
     */
    "JSON": "JSON"
};



export default PubsubConfig;

