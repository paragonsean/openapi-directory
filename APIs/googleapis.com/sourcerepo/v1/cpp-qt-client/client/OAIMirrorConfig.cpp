/**
 * Cloud Source Repositories API
 * Accesses source code repositories hosted by Google.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMirrorConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMirrorConfig::OAIMirrorConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMirrorConfig::OAIMirrorConfig() {
    this->initializeModel();
}

OAIMirrorConfig::~OAIMirrorConfig() {}

void OAIMirrorConfig::initializeModel() {

    m_deploy_key_id_isSet = false;
    m_deploy_key_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_webhook_id_isSet = false;
    m_webhook_id_isValid = false;
}

void OAIMirrorConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMirrorConfig::fromJsonObject(QJsonObject json) {

    m_deploy_key_id_isValid = ::OpenAPI::fromJsonValue(m_deploy_key_id, json[QString("deployKeyId")]);
    m_deploy_key_id_isSet = !json[QString("deployKeyId")].isNull() && m_deploy_key_id_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_webhook_id_isValid = ::OpenAPI::fromJsonValue(m_webhook_id, json[QString("webhookId")]);
    m_webhook_id_isSet = !json[QString("webhookId")].isNull() && m_webhook_id_isValid;
}

QString OAIMirrorConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMirrorConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_deploy_key_id_isSet) {
        obj.insert(QString("deployKeyId"), ::OpenAPI::toJsonValue(m_deploy_key_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_webhook_id_isSet) {
        obj.insert(QString("webhookId"), ::OpenAPI::toJsonValue(m_webhook_id));
    }
    return obj;
}

QString OAIMirrorConfig::getDeployKeyId() const {
    return m_deploy_key_id;
}
void OAIMirrorConfig::setDeployKeyId(const QString &deploy_key_id) {
    m_deploy_key_id = deploy_key_id;
    m_deploy_key_id_isSet = true;
}

bool OAIMirrorConfig::is_deploy_key_id_Set() const{
    return m_deploy_key_id_isSet;
}

bool OAIMirrorConfig::is_deploy_key_id_Valid() const{
    return m_deploy_key_id_isValid;
}

QString OAIMirrorConfig::getUrl() const {
    return m_url;
}
void OAIMirrorConfig::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIMirrorConfig::is_url_Set() const{
    return m_url_isSet;
}

bool OAIMirrorConfig::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIMirrorConfig::getWebhookId() const {
    return m_webhook_id;
}
void OAIMirrorConfig::setWebhookId(const QString &webhook_id) {
    m_webhook_id = webhook_id;
    m_webhook_id_isSet = true;
}

bool OAIMirrorConfig::is_webhook_id_Set() const{
    return m_webhook_id_isSet;
}

bool OAIMirrorConfig::is_webhook_id_Valid() const{
    return m_webhook_id_isValid;
}

bool OAIMirrorConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deploy_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMirrorConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
