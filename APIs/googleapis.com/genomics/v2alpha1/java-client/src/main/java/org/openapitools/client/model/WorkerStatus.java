/*
 * Genomics API
 * Uploads, processes, queries, and searches Genomics data in the cloud.
 *
 * The version of the OpenAPI document: v2alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.DiskStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The status of the worker VM.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:04.854903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkerStatus {
  public static final String SERIALIZED_NAME_ATTACHED_DISKS = "attachedDisks";
  @SerializedName(SERIALIZED_NAME_ATTACHED_DISKS)
  private Map<String, DiskStatus> attachedDisks = new HashMap<>();

  public static final String SERIALIZED_NAME_BOOT_DISK = "bootDisk";
  @SerializedName(SERIALIZED_NAME_BOOT_DISK)
  private DiskStatus bootDisk;

  public static final String SERIALIZED_NAME_FREE_RAM_BYTES = "freeRamBytes";
  @SerializedName(SERIALIZED_NAME_FREE_RAM_BYTES)
  private String freeRamBytes;

  public static final String SERIALIZED_NAME_TOTAL_RAM_BYTES = "totalRamBytes";
  @SerializedName(SERIALIZED_NAME_TOTAL_RAM_BYTES)
  private String totalRamBytes;

  public static final String SERIALIZED_NAME_UPTIME_SECONDS = "uptimeSeconds";
  @SerializedName(SERIALIZED_NAME_UPTIME_SECONDS)
  private String uptimeSeconds;

  public WorkerStatus() {
  }

  public WorkerStatus attachedDisks(Map<String, DiskStatus> attachedDisks) {
    this.attachedDisks = attachedDisks;
    return this;
  }

  public WorkerStatus putAttachedDisksItem(String key, DiskStatus attachedDisksItem) {
    if (this.attachedDisks == null) {
      this.attachedDisks = new HashMap<>();
    }
    this.attachedDisks.put(key, attachedDisksItem);
    return this;
  }

  /**
   * Status of attached disks.
   * @return attachedDisks
   */
  @javax.annotation.Nullable
  public Map<String, DiskStatus> getAttachedDisks() {
    return attachedDisks;
  }

  public void setAttachedDisks(Map<String, DiskStatus> attachedDisks) {
    this.attachedDisks = attachedDisks;
  }


  public WorkerStatus bootDisk(DiskStatus bootDisk) {
    this.bootDisk = bootDisk;
    return this;
  }

  /**
   * Get bootDisk
   * @return bootDisk
   */
  @javax.annotation.Nullable
  public DiskStatus getBootDisk() {
    return bootDisk;
  }

  public void setBootDisk(DiskStatus bootDisk) {
    this.bootDisk = bootDisk;
  }


  public WorkerStatus freeRamBytes(String freeRamBytes) {
    this.freeRamBytes = freeRamBytes;
    return this;
  }

  /**
   * Free RAM.
   * @return freeRamBytes
   */
  @javax.annotation.Nullable
  public String getFreeRamBytes() {
    return freeRamBytes;
  }

  public void setFreeRamBytes(String freeRamBytes) {
    this.freeRamBytes = freeRamBytes;
  }


  public WorkerStatus totalRamBytes(String totalRamBytes) {
    this.totalRamBytes = totalRamBytes;
    return this;
  }

  /**
   * Total RAM.
   * @return totalRamBytes
   */
  @javax.annotation.Nullable
  public String getTotalRamBytes() {
    return totalRamBytes;
  }

  public void setTotalRamBytes(String totalRamBytes) {
    this.totalRamBytes = totalRamBytes;
  }


  public WorkerStatus uptimeSeconds(String uptimeSeconds) {
    this.uptimeSeconds = uptimeSeconds;
    return this;
  }

  /**
   * System uptime.
   * @return uptimeSeconds
   */
  @javax.annotation.Nullable
  public String getUptimeSeconds() {
    return uptimeSeconds;
  }

  public void setUptimeSeconds(String uptimeSeconds) {
    this.uptimeSeconds = uptimeSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkerStatus workerStatus = (WorkerStatus) o;
    return Objects.equals(this.attachedDisks, workerStatus.attachedDisks) &&
        Objects.equals(this.bootDisk, workerStatus.bootDisk) &&
        Objects.equals(this.freeRamBytes, workerStatus.freeRamBytes) &&
        Objects.equals(this.totalRamBytes, workerStatus.totalRamBytes) &&
        Objects.equals(this.uptimeSeconds, workerStatus.uptimeSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachedDisks, bootDisk, freeRamBytes, totalRamBytes, uptimeSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkerStatus {\n");
    sb.append("    attachedDisks: ").append(toIndentedString(attachedDisks)).append("\n");
    sb.append("    bootDisk: ").append(toIndentedString(bootDisk)).append("\n");
    sb.append("    freeRamBytes: ").append(toIndentedString(freeRamBytes)).append("\n");
    sb.append("    totalRamBytes: ").append(toIndentedString(totalRamBytes)).append("\n");
    sb.append("    uptimeSeconds: ").append(toIndentedString(uptimeSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachedDisks");
    openapiFields.add("bootDisk");
    openapiFields.add("freeRamBytes");
    openapiFields.add("totalRamBytes");
    openapiFields.add("uptimeSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkerStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkerStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkerStatus is not found in the empty JSON string", WorkerStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkerStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkerStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bootDisk`
      if (jsonObj.get("bootDisk") != null && !jsonObj.get("bootDisk").isJsonNull()) {
        DiskStatus.validateJsonElement(jsonObj.get("bootDisk"));
      }
      if ((jsonObj.get("freeRamBytes") != null && !jsonObj.get("freeRamBytes").isJsonNull()) && !jsonObj.get("freeRamBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freeRamBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freeRamBytes").toString()));
      }
      if ((jsonObj.get("totalRamBytes") != null && !jsonObj.get("totalRamBytes").isJsonNull()) && !jsonObj.get("totalRamBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalRamBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalRamBytes").toString()));
      }
      if ((jsonObj.get("uptimeSeconds") != null && !jsonObj.get("uptimeSeconds").isJsonNull()) && !jsonObj.get("uptimeSeconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uptimeSeconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uptimeSeconds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkerStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkerStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkerStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkerStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkerStatus>() {
           @Override
           public void write(JsonWriter out, WorkerStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkerStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkerStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkerStatus
   * @throws IOException if the JSON string is invalid with respect to WorkerStatus
   */
  public static WorkerStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkerStatus.class);
  }

  /**
   * Convert an instance of WorkerStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

