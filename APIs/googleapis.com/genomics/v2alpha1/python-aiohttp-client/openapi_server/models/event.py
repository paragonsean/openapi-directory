# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, details: Dict[str, object]=None, timestamp: str=None):
        """Event - a model defined in OpenAPI

        :param description: The description of this Event.
        :param details: The details of this Event.
        :param timestamp: The timestamp of this Event.
        """
        self.openapi_types = {
            'description': str,
            'details': Dict[str, object],
            'timestamp': str
        }

        self.attribute_map = {
            'description': 'description',
            'details': 'details',
            'timestamp': 'timestamp'
        }

        self._description = description
        self._details = details
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Event.

        A human-readable description of the event. Note that these strings can change at any time without notice. Any application logic must use the information in the `details` field.

        :return: The description of this Event.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Event.

        A human-readable description of the event. Note that these strings can change at any time without notice. Any application logic must use the information in the `details` field.

        :param description: The description of this Event.
        :type description: str
        """

        self._description = description

    @property
    def details(self):
        """Gets the details of this Event.

        Machine-readable details about the event.

        :return: The details of this Event.
        :rtype: Dict[str, object]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Event.

        Machine-readable details about the event.

        :param details: The details of this Event.
        :type details: Dict[str, object]
        """

        self._details = details

    @property
    def timestamp(self):
        """Gets the timestamp of this Event.

        The time at which the event occurred.

        :return: The timestamp of this Event.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Event.

        The time at which the event occurred.

        :param timestamp: The timestamp of this Event.
        :type timestamp: str
        """

        self._timestamp = timestamp
