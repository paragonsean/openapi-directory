# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Network(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, subnetwork: str=None, use_private_address: bool=None):
        """Network - a model defined in OpenAPI

        :param name: The name of this Network.
        :param subnetwork: The subnetwork of this Network.
        :param use_private_address: The use_private_address of this Network.
        """
        self.openapi_types = {
            'name': str,
            'subnetwork': str,
            'use_private_address': bool
        }

        self.attribute_map = {
            'name': 'name',
            'subnetwork': 'subnetwork',
            'use_private_address': 'usePrivateAddress'
        }

        self._name = name
        self._subnetwork = subnetwork
        self._use_private_address = use_private_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Network':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Network of this Network.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Network.

        The network name to attach the VM's network interface to. The value will be prefixed with `global/networks/` unless it contains a `/`, in which case it is assumed to be a fully specified network resource URL. If unspecified, the global default network is used.

        :return: The name of this Network.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Network.

        The network name to attach the VM's network interface to. The value will be prefixed with `global/networks/` unless it contains a `/`, in which case it is assumed to be a fully specified network resource URL. If unspecified, the global default network is used.

        :param name: The name of this Network.
        :type name: str
        """

        self._name = name

    @property
    def subnetwork(self):
        """Gets the subnetwork of this Network.

        If the specified network is configured for custom subnet creation, the name of the subnetwork to attach the instance to must be specified here. The value is prefixed with `regions/*/subnetworks/` unless it contains a `/`, in which case it is assumed to be a fully specified subnetwork resource URL. If the `*` character appears in the value, it is replaced with the region that the virtual machine has been allocated in.

        :return: The subnetwork of this Network.
        :rtype: str
        """
        return self._subnetwork

    @subnetwork.setter
    def subnetwork(self, subnetwork):
        """Sets the subnetwork of this Network.

        If the specified network is configured for custom subnet creation, the name of the subnetwork to attach the instance to must be specified here. The value is prefixed with `regions/*/subnetworks/` unless it contains a `/`, in which case it is assumed to be a fully specified subnetwork resource URL. If the `*` character appears in the value, it is replaced with the region that the virtual machine has been allocated in.

        :param subnetwork: The subnetwork of this Network.
        :type subnetwork: str
        """

        self._subnetwork = subnetwork

    @property
    def use_private_address(self):
        """Gets the use_private_address of this Network.

        If set to true, do not attach a public IP address to the VM. Note that without a public IP address, additional configuration is required to allow the VM to access Google services. See https://cloud.google.com/vpc/docs/configure-private-google-access for more information.

        :return: The use_private_address of this Network.
        :rtype: bool
        """
        return self._use_private_address

    @use_private_address.setter
    def use_private_address(self, use_private_address):
        """Sets the use_private_address of this Network.

        If set to true, do not attach a public IP address to the VM. Note that without a public IP address, additional configuration is required to allow the VM to access Google services. See https://cloud.google.com/vpc/docs/configure-private-google-access for more information.

        :param use_private_address: The use_private_address of this Network.
        :type use_private_address: bool
        """

        self._use_private_address = use_private_address
