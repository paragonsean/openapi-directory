# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainerStoppedEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_id: int=None, exit_status: int=None, stderr: str=None):
        """ContainerStoppedEvent - a model defined in OpenAPI

        :param action_id: The action_id of this ContainerStoppedEvent.
        :param exit_status: The exit_status of this ContainerStoppedEvent.
        :param stderr: The stderr of this ContainerStoppedEvent.
        """
        self.openapi_types = {
            'action_id': int,
            'exit_status': int,
            'stderr': str
        }

        self.attribute_map = {
            'action_id': 'actionId',
            'exit_status': 'exitStatus',
            'stderr': 'stderr'
        }

        self._action_id = action_id
        self._exit_status = exit_status
        self._stderr = stderr

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerStoppedEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerStoppedEvent of this ContainerStoppedEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_id(self):
        """Gets the action_id of this ContainerStoppedEvent.

        The numeric ID of the action that started this container.

        :return: The action_id of this ContainerStoppedEvent.
        :rtype: int
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this ContainerStoppedEvent.

        The numeric ID of the action that started this container.

        :param action_id: The action_id of this ContainerStoppedEvent.
        :type action_id: int
        """

        self._action_id = action_id

    @property
    def exit_status(self):
        """Gets the exit_status of this ContainerStoppedEvent.

        The exit status of the container.

        :return: The exit_status of this ContainerStoppedEvent.
        :rtype: int
        """
        return self._exit_status

    @exit_status.setter
    def exit_status(self, exit_status):
        """Sets the exit_status of this ContainerStoppedEvent.

        The exit status of the container.

        :param exit_status: The exit_status of this ContainerStoppedEvent.
        :type exit_status: int
        """

        self._exit_status = exit_status

    @property
    def stderr(self):
        """Gets the stderr of this ContainerStoppedEvent.

        The tail end of any content written to standard error by the container. If the content emits large amounts of debugging noise or contains sensitive information, you can prevent the content from being printed by setting the `DISABLE_STANDARD_ERROR_CAPTURE` flag. Note that only a small amount of the end of the stream is captured here. The entire stream is stored in the `/google/logs` directory mounted into each action, and can be copied off the machine as described elsewhere.

        :return: The stderr of this ContainerStoppedEvent.
        :rtype: str
        """
        return self._stderr

    @stderr.setter
    def stderr(self, stderr):
        """Sets the stderr of this ContainerStoppedEvent.

        The tail end of any content written to standard error by the container. If the content emits large amounts of debugging noise or contains sensitive information, you can prevent the content from being printed by setting the `DISABLE_STANDARD_ERROR_CAPTURE` flag. Note that only a small amount of the end of the stream is captured here. The entire stream is stored in the `/google/logs` directory mounted into each action, and can be copied off the machine as described elsewhere.

        :param stderr: The stderr of this ContainerStoppedEvent.
        :type stderr: str
        """

        self._stderr = stderr
