# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pipeline import Pipeline
from openapi_server import util


class RunPipelineRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labels: Dict[str, str]=None, pipeline: Pipeline=None, pub_sub_topic: str=None):
        """RunPipelineRequest - a model defined in OpenAPI

        :param labels: The labels of this RunPipelineRequest.
        :param pipeline: The pipeline of this RunPipelineRequest.
        :param pub_sub_topic: The pub_sub_topic of this RunPipelineRequest.
        """
        self.openapi_types = {
            'labels': Dict[str, str],
            'pipeline': Pipeline,
            'pub_sub_topic': str
        }

        self.attribute_map = {
            'labels': 'labels',
            'pipeline': 'pipeline',
            'pub_sub_topic': 'pubSubTopic'
        }

        self._labels = labels
        self._pipeline = pipeline
        self._pub_sub_topic = pub_sub_topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunPipelineRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunPipelineRequest of this RunPipelineRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labels(self):
        """Gets the labels of this RunPipelineRequest.

        User-defined labels to associate with the returned operation. These labels are not propagated to any Google Cloud Platform resources used by the operation, and can be modified at any time. To associate labels with resources created while executing the operation, see the appropriate resource message (for example, `VirtualMachine`).

        :return: The labels of this RunPipelineRequest.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this RunPipelineRequest.

        User-defined labels to associate with the returned operation. These labels are not propagated to any Google Cloud Platform resources used by the operation, and can be modified at any time. To associate labels with resources created while executing the operation, see the appropriate resource message (for example, `VirtualMachine`).

        :param labels: The labels of this RunPipelineRequest.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def pipeline(self):
        """Gets the pipeline of this RunPipelineRequest.


        :return: The pipeline of this RunPipelineRequest.
        :rtype: Pipeline
        """
        return self._pipeline

    @pipeline.setter
    def pipeline(self, pipeline):
        """Sets the pipeline of this RunPipelineRequest.


        :param pipeline: The pipeline of this RunPipelineRequest.
        :type pipeline: Pipeline
        """

        self._pipeline = pipeline

    @property
    def pub_sub_topic(self):
        """Gets the pub_sub_topic of this RunPipelineRequest.

        The name of an existing Pub/Sub topic. The server will publish messages to this topic whenever the status of the operation changes. The Genomics Service Agent account must have publisher permissions to the specified topic or notifications will not be sent.

        :return: The pub_sub_topic of this RunPipelineRequest.
        :rtype: str
        """
        return self._pub_sub_topic

    @pub_sub_topic.setter
    def pub_sub_topic(self, pub_sub_topic):
        """Sets the pub_sub_topic of this RunPipelineRequest.

        The name of an existing Pub/Sub topic. The server will publish messages to this topic whenever the status of the operation changes. The Genomics Service Agent account must have publisher permissions to the specified topic or notifications will not be sent.

        :param pub_sub_topic: The pub_sub_topic of this RunPipelineRequest.
        :type pub_sub_topic: str
        """

        self._pub_sub_topic = pub_sub_topic
