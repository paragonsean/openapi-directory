# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.accelerator import Accelerator
from openapi_server.models.disk import Disk
from openapi_server.models.network import Network
from openapi_server.models.service_account import ServiceAccount
from openapi_server.models.volume import Volume
from openapi_server import util


class VirtualMachine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accelerators: List[Accelerator]=None, boot_disk_size_gb: int=None, boot_image: str=None, cpu_platform: str=None, disks: List[Disk]=None, docker_cache_images: List[str]=None, enable_stackdriver_monitoring: bool=None, labels: Dict[str, str]=None, machine_type: str=None, network: Network=None, nvidia_driver_version: str=None, preemptible: bool=None, reservation: str=None, service_account: ServiceAccount=None, volumes: List[Volume]=None):
        """VirtualMachine - a model defined in OpenAPI

        :param accelerators: The accelerators of this VirtualMachine.
        :param boot_disk_size_gb: The boot_disk_size_gb of this VirtualMachine.
        :param boot_image: The boot_image of this VirtualMachine.
        :param cpu_platform: The cpu_platform of this VirtualMachine.
        :param disks: The disks of this VirtualMachine.
        :param docker_cache_images: The docker_cache_images of this VirtualMachine.
        :param enable_stackdriver_monitoring: The enable_stackdriver_monitoring of this VirtualMachine.
        :param labels: The labels of this VirtualMachine.
        :param machine_type: The machine_type of this VirtualMachine.
        :param network: The network of this VirtualMachine.
        :param nvidia_driver_version: The nvidia_driver_version of this VirtualMachine.
        :param preemptible: The preemptible of this VirtualMachine.
        :param reservation: The reservation of this VirtualMachine.
        :param service_account: The service_account of this VirtualMachine.
        :param volumes: The volumes of this VirtualMachine.
        """
        self.openapi_types = {
            'accelerators': List[Accelerator],
            'boot_disk_size_gb': int,
            'boot_image': str,
            'cpu_platform': str,
            'disks': List[Disk],
            'docker_cache_images': List[str],
            'enable_stackdriver_monitoring': bool,
            'labels': Dict[str, str],
            'machine_type': str,
            'network': Network,
            'nvidia_driver_version': str,
            'preemptible': bool,
            'reservation': str,
            'service_account': ServiceAccount,
            'volumes': List[Volume]
        }

        self.attribute_map = {
            'accelerators': 'accelerators',
            'boot_disk_size_gb': 'bootDiskSizeGb',
            'boot_image': 'bootImage',
            'cpu_platform': 'cpuPlatform',
            'disks': 'disks',
            'docker_cache_images': 'dockerCacheImages',
            'enable_stackdriver_monitoring': 'enableStackdriverMonitoring',
            'labels': 'labels',
            'machine_type': 'machineType',
            'network': 'network',
            'nvidia_driver_version': 'nvidiaDriverVersion',
            'preemptible': 'preemptible',
            'reservation': 'reservation',
            'service_account': 'serviceAccount',
            'volumes': 'volumes'
        }

        self._accelerators = accelerators
        self._boot_disk_size_gb = boot_disk_size_gb
        self._boot_image = boot_image
        self._cpu_platform = cpu_platform
        self._disks = disks
        self._docker_cache_images = docker_cache_images
        self._enable_stackdriver_monitoring = enable_stackdriver_monitoring
        self._labels = labels
        self._machine_type = machine_type
        self._network = network
        self._nvidia_driver_version = nvidia_driver_version
        self._preemptible = preemptible
        self._reservation = reservation
        self._service_account = service_account
        self._volumes = volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachine of this VirtualMachine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accelerators(self):
        """Gets the accelerators of this VirtualMachine.

        The list of accelerators to attach to the VM.

        :return: The accelerators of this VirtualMachine.
        :rtype: List[Accelerator]
        """
        return self._accelerators

    @accelerators.setter
    def accelerators(self, accelerators):
        """Sets the accelerators of this VirtualMachine.

        The list of accelerators to attach to the VM.

        :param accelerators: The accelerators of this VirtualMachine.
        :type accelerators: List[Accelerator]
        """

        self._accelerators = accelerators

    @property
    def boot_disk_size_gb(self):
        """Gets the boot_disk_size_gb of this VirtualMachine.

        The size of the boot disk, in GB. The boot disk must be large enough to accommodate all of the Docker images from each action in the pipeline at the same time. If not specified, a small but reasonable default value is used.

        :return: The boot_disk_size_gb of this VirtualMachine.
        :rtype: int
        """
        return self._boot_disk_size_gb

    @boot_disk_size_gb.setter
    def boot_disk_size_gb(self, boot_disk_size_gb):
        """Sets the boot_disk_size_gb of this VirtualMachine.

        The size of the boot disk, in GB. The boot disk must be large enough to accommodate all of the Docker images from each action in the pipeline at the same time. If not specified, a small but reasonable default value is used.

        :param boot_disk_size_gb: The boot_disk_size_gb of this VirtualMachine.
        :type boot_disk_size_gb: int
        """

        self._boot_disk_size_gb = boot_disk_size_gb

    @property
    def boot_image(self):
        """Gets the boot_image of this VirtualMachine.

        The host operating system image to use. Currently, only Container-Optimized OS images can be used. The default value is `projects/cos-cloud/global/images/family/cos-stable`, which selects the latest stable release of Container-Optimized OS. This option is provided to allow testing against the beta release of the operating system to ensure that the new version does not interact negatively with production pipelines. To test a pipeline against the beta release of Container-Optimized OS, use the value `projects/cos-cloud/global/images/family/cos-beta`.

        :return: The boot_image of this VirtualMachine.
        :rtype: str
        """
        return self._boot_image

    @boot_image.setter
    def boot_image(self, boot_image):
        """Sets the boot_image of this VirtualMachine.

        The host operating system image to use. Currently, only Container-Optimized OS images can be used. The default value is `projects/cos-cloud/global/images/family/cos-stable`, which selects the latest stable release of Container-Optimized OS. This option is provided to allow testing against the beta release of the operating system to ensure that the new version does not interact negatively with production pipelines. To test a pipeline against the beta release of Container-Optimized OS, use the value `projects/cos-cloud/global/images/family/cos-beta`.

        :param boot_image: The boot_image of this VirtualMachine.
        :type boot_image: str
        """

        self._boot_image = boot_image

    @property
    def cpu_platform(self):
        """Gets the cpu_platform of this VirtualMachine.

        The CPU platform to request. An instance based on a newer platform can be allocated, but never one with fewer capabilities. The value of this parameter must be a valid Compute Engine CPU platform name (such as \"Intel Skylake\"). This parameter is only useful for carefully optimized work loads where the CPU platform has a significant impact. For more information about the effect of this parameter, see https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform.

        :return: The cpu_platform of this VirtualMachine.
        :rtype: str
        """
        return self._cpu_platform

    @cpu_platform.setter
    def cpu_platform(self, cpu_platform):
        """Sets the cpu_platform of this VirtualMachine.

        The CPU platform to request. An instance based on a newer platform can be allocated, but never one with fewer capabilities. The value of this parameter must be a valid Compute Engine CPU platform name (such as \"Intel Skylake\"). This parameter is only useful for carefully optimized work loads where the CPU platform has a significant impact. For more information about the effect of this parameter, see https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform.

        :param cpu_platform: The cpu_platform of this VirtualMachine.
        :type cpu_platform: str
        """

        self._cpu_platform = cpu_platform

    @property
    def disks(self):
        """Gets the disks of this VirtualMachine.

        The list of disks to create and attach to the VM. Specify either the `volumes[]` field or the `disks[]` field, but not both.

        :return: The disks of this VirtualMachine.
        :rtype: List[Disk]
        """
        return self._disks

    @disks.setter
    def disks(self, disks):
        """Sets the disks of this VirtualMachine.

        The list of disks to create and attach to the VM. Specify either the `volumes[]` field or the `disks[]` field, but not both.

        :param disks: The disks of this VirtualMachine.
        :type disks: List[Disk]
        """

        self._disks = disks

    @property
    def docker_cache_images(self):
        """Gets the docker_cache_images of this VirtualMachine.

        The Compute Engine Disk Images to use as a Docker cache. The disks will be mounted into the Docker folder in a way that the images present in the cache will not need to be pulled. The digests of the cached images must match those of the tags used or the latest version will still be pulled. The root directory of the ext4 image must contain `image` and `overlay2` directories copied from the Docker directory of a VM where the desired Docker images have already been pulled. Any images pulled that are not cached will be stored on the first cache disk instead of the boot disk. Only a single image is supported.

        :return: The docker_cache_images of this VirtualMachine.
        :rtype: List[str]
        """
        return self._docker_cache_images

    @docker_cache_images.setter
    def docker_cache_images(self, docker_cache_images):
        """Sets the docker_cache_images of this VirtualMachine.

        The Compute Engine Disk Images to use as a Docker cache. The disks will be mounted into the Docker folder in a way that the images present in the cache will not need to be pulled. The digests of the cached images must match those of the tags used or the latest version will still be pulled. The root directory of the ext4 image must contain `image` and `overlay2` directories copied from the Docker directory of a VM where the desired Docker images have already been pulled. Any images pulled that are not cached will be stored on the first cache disk instead of the boot disk. Only a single image is supported.

        :param docker_cache_images: The docker_cache_images of this VirtualMachine.
        :type docker_cache_images: List[str]
        """

        self._docker_cache_images = docker_cache_images

    @property
    def enable_stackdriver_monitoring(self):
        """Gets the enable_stackdriver_monitoring of this VirtualMachine.

        Whether Stackdriver monitoring should be enabled on the VM.

        :return: The enable_stackdriver_monitoring of this VirtualMachine.
        :rtype: bool
        """
        return self._enable_stackdriver_monitoring

    @enable_stackdriver_monitoring.setter
    def enable_stackdriver_monitoring(self, enable_stackdriver_monitoring):
        """Sets the enable_stackdriver_monitoring of this VirtualMachine.

        Whether Stackdriver monitoring should be enabled on the VM.

        :param enable_stackdriver_monitoring: The enable_stackdriver_monitoring of this VirtualMachine.
        :type enable_stackdriver_monitoring: bool
        """

        self._enable_stackdriver_monitoring = enable_stackdriver_monitoring

    @property
    def labels(self):
        """Gets the labels of this VirtualMachine.

        Optional set of labels to apply to the VM and any attached disk resources. These labels must adhere to the [name and value restrictions](https://cloud.google.com/compute/docs/labeling-resources) on VM labels imposed by Compute Engine. Labels keys with the prefix 'google-' are reserved for use by Google. Labels applied at creation time to the VM. Applied on a best-effort basis to attached disk resources shortly after VM creation.

        :return: The labels of this VirtualMachine.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this VirtualMachine.

        Optional set of labels to apply to the VM and any attached disk resources. These labels must adhere to the [name and value restrictions](https://cloud.google.com/compute/docs/labeling-resources) on VM labels imposed by Compute Engine. Labels keys with the prefix 'google-' are reserved for use by Google. Labels applied at creation time to the VM. Applied on a best-effort basis to attached disk resources shortly after VM creation.

        :param labels: The labels of this VirtualMachine.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def machine_type(self):
        """Gets the machine_type of this VirtualMachine.

        Required. The machine type of the virtual machine to create. Must be the short name of a standard machine type (such as \"n1-standard-1\") or a custom machine type (such as \"custom-1-4096\", where \"1\" indicates the number of vCPUs and \"4096\" indicates the memory in MB). See [Creating an instance with a custom machine type](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create) for more specifications on creating a custom machine type.

        :return: The machine_type of this VirtualMachine.
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this VirtualMachine.

        Required. The machine type of the virtual machine to create. Must be the short name of a standard machine type (such as \"n1-standard-1\") or a custom machine type (such as \"custom-1-4096\", where \"1\" indicates the number of vCPUs and \"4096\" indicates the memory in MB). See [Creating an instance with a custom machine type](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create) for more specifications on creating a custom machine type.

        :param machine_type: The machine_type of this VirtualMachine.
        :type machine_type: str
        """

        self._machine_type = machine_type

    @property
    def network(self):
        """Gets the network of this VirtualMachine.


        :return: The network of this VirtualMachine.
        :rtype: Network
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this VirtualMachine.


        :param network: The network of this VirtualMachine.
        :type network: Network
        """

        self._network = network

    @property
    def nvidia_driver_version(self):
        """Gets the nvidia_driver_version of this VirtualMachine.

        The NVIDIA driver version to use when attaching an NVIDIA GPU accelerator. The version specified here must be compatible with the GPU libraries contained in the container being executed, and must be one of the drivers hosted in the `nvidia-drivers-us-public` bucket on Google Cloud Storage.

        :return: The nvidia_driver_version of this VirtualMachine.
        :rtype: str
        """
        return self._nvidia_driver_version

    @nvidia_driver_version.setter
    def nvidia_driver_version(self, nvidia_driver_version):
        """Sets the nvidia_driver_version of this VirtualMachine.

        The NVIDIA driver version to use when attaching an NVIDIA GPU accelerator. The version specified here must be compatible with the GPU libraries contained in the container being executed, and must be one of the drivers hosted in the `nvidia-drivers-us-public` bucket on Google Cloud Storage.

        :param nvidia_driver_version: The nvidia_driver_version of this VirtualMachine.
        :type nvidia_driver_version: str
        """

        self._nvidia_driver_version = nvidia_driver_version

    @property
    def preemptible(self):
        """Gets the preemptible of this VirtualMachine.

        If true, allocate a preemptible VM.

        :return: The preemptible of this VirtualMachine.
        :rtype: bool
        """
        return self._preemptible

    @preemptible.setter
    def preemptible(self, preemptible):
        """Sets the preemptible of this VirtualMachine.

        If true, allocate a preemptible VM.

        :param preemptible: The preemptible of this VirtualMachine.
        :type preemptible: bool
        """

        self._preemptible = preemptible

    @property
    def reservation(self):
        """Gets the reservation of this VirtualMachine.

        If specified, the VM will only be allocated inside the matching reservation. It will fail if the VM parameters don't match the reservation.

        :return: The reservation of this VirtualMachine.
        :rtype: str
        """
        return self._reservation

    @reservation.setter
    def reservation(self, reservation):
        """Sets the reservation of this VirtualMachine.

        If specified, the VM will only be allocated inside the matching reservation. It will fail if the VM parameters don't match the reservation.

        :param reservation: The reservation of this VirtualMachine.
        :type reservation: str
        """

        self._reservation = reservation

    @property
    def service_account(self):
        """Gets the service_account of this VirtualMachine.


        :return: The service_account of this VirtualMachine.
        :rtype: ServiceAccount
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this VirtualMachine.


        :param service_account: The service_account of this VirtualMachine.
        :type service_account: ServiceAccount
        """

        self._service_account = service_account

    @property
    def volumes(self):
        """Gets the volumes of this VirtualMachine.

        The list of disks and other storage to create or attach to the VM. Specify either the `volumes[]` field or the `disks[]` field, but not both.

        :return: The volumes of this VirtualMachine.
        :rtype: List[Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this VirtualMachine.

        The list of disks and other storage to create or attach to the VM. Specify either the `volumes[]` field or the `disks[]` field, but not both.

        :param volumes: The volumes of this VirtualMachine.
        :type volumes: List[Volume]
        """

        self._volumes = volumes
