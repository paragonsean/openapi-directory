# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FailedEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cause: str=None, code: str=None):
        """FailedEvent - a model defined in OpenAPI

        :param cause: The cause of this FailedEvent.
        :param code: The code of this FailedEvent.
        """
        self.openapi_types = {
            'cause': str,
            'code': str
        }

        self.attribute_map = {
            'cause': 'cause',
            'code': 'code'
        }

        self._cause = cause
        self._code = code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FailedEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FailedEvent of this FailedEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cause(self):
        """Gets the cause of this FailedEvent.

        The human-readable description of the cause of the failure.

        :return: The cause of this FailedEvent.
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this FailedEvent.

        The human-readable description of the cause of the failure.

        :param cause: The cause of this FailedEvent.
        :type cause: str
        """

        self._cause = cause

    @property
    def code(self):
        """Gets the code of this FailedEvent.

        The Google standard error code that best describes this failure.

        :return: The code of this FailedEvent.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this FailedEvent.

        The Google standard error code that best describes this failure.

        :param code: The code of this FailedEvent.
        :type code: str
        """
        allowed_values = ["OK", "CANCELLED", "UNKNOWN", "INVALID_ARGUMENT", "DEADLINE_EXCEEDED", "NOT_FOUND", "ALREADY_EXISTS", "PERMISSION_DENIED", "UNAUTHENTICATED", "RESOURCE_EXHAUSTED", "FAILED_PRECONDITION", "ABORTED", "OUT_OF_RANGE", "UNIMPLEMENTED", "INTERNAL", "UNAVAILABLE", "DATA_LOSS"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code
