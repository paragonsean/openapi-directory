# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.virtual_machine import VirtualMachine
from openapi_server import util


class Resources(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, project_id: str=None, regions: List[str]=None, virtual_machine: VirtualMachine=None, zones: List[str]=None):
        """Resources - a model defined in OpenAPI

        :param project_id: The project_id of this Resources.
        :param regions: The regions of this Resources.
        :param virtual_machine: The virtual_machine of this Resources.
        :param zones: The zones of this Resources.
        """
        self.openapi_types = {
            'project_id': str,
            'regions': List[str],
            'virtual_machine': VirtualMachine,
            'zones': List[str]
        }

        self.attribute_map = {
            'project_id': 'projectId',
            'regions': 'regions',
            'virtual_machine': 'virtualMachine',
            'zones': 'zones'
        }

        self._project_id = project_id
        self._regions = regions
        self._virtual_machine = virtual_machine
        self._zones = zones

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Resources':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Resources of this Resources.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project_id(self):
        """Gets the project_id of this Resources.

        The project ID to allocate resources in.

        :return: The project_id of this Resources.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Resources.

        The project ID to allocate resources in.

        :param project_id: The project_id of this Resources.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def regions(self):
        """Gets the regions of this Resources.

        The list of regions allowed for VM allocation. If set, the `zones` field must not be set.

        :return: The regions of this Resources.
        :rtype: List[str]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this Resources.

        The list of regions allowed for VM allocation. If set, the `zones` field must not be set.

        :param regions: The regions of this Resources.
        :type regions: List[str]
        """

        self._regions = regions

    @property
    def virtual_machine(self):
        """Gets the virtual_machine of this Resources.


        :return: The virtual_machine of this Resources.
        :rtype: VirtualMachine
        """
        return self._virtual_machine

    @virtual_machine.setter
    def virtual_machine(self, virtual_machine):
        """Sets the virtual_machine of this Resources.


        :param virtual_machine: The virtual_machine of this Resources.
        :type virtual_machine: VirtualMachine
        """

        self._virtual_machine = virtual_machine

    @property
    def zones(self):
        """Gets the zones of this Resources.

        The list of zones allowed for VM allocation. If set, the `regions` field must not be set.

        :return: The zones of this Resources.
        :rtype: List[str]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this Resources.

        The list of zones allowed for VM allocation. If set, the `regions` field must not be set.

        :param zones: The zones of this Resources.
        :type zones: List[str]
        """

        self._zones = zones
