# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckInResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deadline: str=None, features: Dict[str, object]=None, metadata: Dict[str, object]=None):
        """CheckInResponse - a model defined in OpenAPI

        :param deadline: The deadline of this CheckInResponse.
        :param features: The features of this CheckInResponse.
        :param metadata: The metadata of this CheckInResponse.
        """
        self.openapi_types = {
            'deadline': str,
            'features': Dict[str, object],
            'metadata': Dict[str, object]
        }

        self.attribute_map = {
            'deadline': 'deadline',
            'features': 'features',
            'metadata': 'metadata'
        }

        self._deadline = deadline
        self._features = features
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckInResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckInResponse of this CheckInResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deadline(self):
        """Gets the deadline of this CheckInResponse.

        The deadline by which the worker must request an extension. The backend will allow for network transmission time and other delays, but the worker must attempt to transmit the extension request no later than the deadline.

        :return: The deadline of this CheckInResponse.
        :rtype: str
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this CheckInResponse.

        The deadline by which the worker must request an extension. The backend will allow for network transmission time and other delays, but the worker must attempt to transmit the extension request no later than the deadline.

        :param deadline: The deadline of this CheckInResponse.
        :type deadline: str
        """

        self._deadline = deadline

    @property
    def features(self):
        """Gets the features of this CheckInResponse.

        Feature configuration for the operation.

        :return: The features of this CheckInResponse.
        :rtype: Dict[str, object]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this CheckInResponse.

        Feature configuration for the operation.

        :param features: The features of this CheckInResponse.
        :type features: Dict[str, object]
        """

        self._features = features

    @property
    def metadata(self):
        """Gets the metadata of this CheckInResponse.

        The metadata that describes the operation assigned to the worker.

        :return: The metadata of this CheckInResponse.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CheckInResponse.

        The metadata that describes the operation assigned to the worker.

        :param metadata: The metadata of this CheckInResponse.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata
