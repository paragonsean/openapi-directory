# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.disk_status import DiskStatus
from openapi_server import util


class WorkerStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attached_disks: Dict[str, DiskStatus]=None, boot_disk: DiskStatus=None, free_ram_bytes: str=None, total_ram_bytes: str=None, uptime_seconds: str=None):
        """WorkerStatus - a model defined in OpenAPI

        :param attached_disks: The attached_disks of this WorkerStatus.
        :param boot_disk: The boot_disk of this WorkerStatus.
        :param free_ram_bytes: The free_ram_bytes of this WorkerStatus.
        :param total_ram_bytes: The total_ram_bytes of this WorkerStatus.
        :param uptime_seconds: The uptime_seconds of this WorkerStatus.
        """
        self.openapi_types = {
            'attached_disks': Dict[str, DiskStatus],
            'boot_disk': DiskStatus,
            'free_ram_bytes': str,
            'total_ram_bytes': str,
            'uptime_seconds': str
        }

        self.attribute_map = {
            'attached_disks': 'attachedDisks',
            'boot_disk': 'bootDisk',
            'free_ram_bytes': 'freeRamBytes',
            'total_ram_bytes': 'totalRamBytes',
            'uptime_seconds': 'uptimeSeconds'
        }

        self._attached_disks = attached_disks
        self._boot_disk = boot_disk
        self._free_ram_bytes = free_ram_bytes
        self._total_ram_bytes = total_ram_bytes
        self._uptime_seconds = uptime_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkerStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkerStatus of this WorkerStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attached_disks(self):
        """Gets the attached_disks of this WorkerStatus.

        Status of attached disks.

        :return: The attached_disks of this WorkerStatus.
        :rtype: Dict[str, DiskStatus]
        """
        return self._attached_disks

    @attached_disks.setter
    def attached_disks(self, attached_disks):
        """Sets the attached_disks of this WorkerStatus.

        Status of attached disks.

        :param attached_disks: The attached_disks of this WorkerStatus.
        :type attached_disks: Dict[str, DiskStatus]
        """

        self._attached_disks = attached_disks

    @property
    def boot_disk(self):
        """Gets the boot_disk of this WorkerStatus.


        :return: The boot_disk of this WorkerStatus.
        :rtype: DiskStatus
        """
        return self._boot_disk

    @boot_disk.setter
    def boot_disk(self, boot_disk):
        """Sets the boot_disk of this WorkerStatus.


        :param boot_disk: The boot_disk of this WorkerStatus.
        :type boot_disk: DiskStatus
        """

        self._boot_disk = boot_disk

    @property
    def free_ram_bytes(self):
        """Gets the free_ram_bytes of this WorkerStatus.

        Free RAM.

        :return: The free_ram_bytes of this WorkerStatus.
        :rtype: str
        """
        return self._free_ram_bytes

    @free_ram_bytes.setter
    def free_ram_bytes(self, free_ram_bytes):
        """Sets the free_ram_bytes of this WorkerStatus.

        Free RAM.

        :param free_ram_bytes: The free_ram_bytes of this WorkerStatus.
        :type free_ram_bytes: str
        """

        self._free_ram_bytes = free_ram_bytes

    @property
    def total_ram_bytes(self):
        """Gets the total_ram_bytes of this WorkerStatus.

        Total RAM.

        :return: The total_ram_bytes of this WorkerStatus.
        :rtype: str
        """
        return self._total_ram_bytes

    @total_ram_bytes.setter
    def total_ram_bytes(self, total_ram_bytes):
        """Sets the total_ram_bytes of this WorkerStatus.

        Total RAM.

        :param total_ram_bytes: The total_ram_bytes of this WorkerStatus.
        :type total_ram_bytes: str
        """

        self._total_ram_bytes = total_ram_bytes

    @property
    def uptime_seconds(self):
        """Gets the uptime_seconds of this WorkerStatus.

        System uptime.

        :return: The uptime_seconds of this WorkerStatus.
        :rtype: str
        """
        return self._uptime_seconds

    @uptime_seconds.setter
    def uptime_seconds(self, uptime_seconds):
        """Sets the uptime_seconds of this WorkerStatus.

        System uptime.

        :param uptime_seconds: The uptime_seconds of this WorkerStatus.
        :type uptime_seconds: str
        """

        self._uptime_seconds = uptime_seconds
