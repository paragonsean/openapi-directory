# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mount import Mount
from openapi_server.models.secret import Secret
from openapi_server import util


class Action(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commands: List[str]=None, credentials: Secret=None, encrypted_environment: Secret=None, entrypoint: str=None, environment: Dict[str, str]=None, flags: List[str]=None, image_uri: str=None, labels: Dict[str, str]=None, mounts: List[Mount]=None, name: str=None, pid_namespace: str=None, port_mappings: Dict[str, int]=None, timeout: str=None):
        """Action - a model defined in OpenAPI

        :param commands: The commands of this Action.
        :param credentials: The credentials of this Action.
        :param encrypted_environment: The encrypted_environment of this Action.
        :param entrypoint: The entrypoint of this Action.
        :param environment: The environment of this Action.
        :param flags: The flags of this Action.
        :param image_uri: The image_uri of this Action.
        :param labels: The labels of this Action.
        :param mounts: The mounts of this Action.
        :param name: The name of this Action.
        :param pid_namespace: The pid_namespace of this Action.
        :param port_mappings: The port_mappings of this Action.
        :param timeout: The timeout of this Action.
        """
        self.openapi_types = {
            'commands': List[str],
            'credentials': Secret,
            'encrypted_environment': Secret,
            'entrypoint': str,
            'environment': Dict[str, str],
            'flags': List[str],
            'image_uri': str,
            'labels': Dict[str, str],
            'mounts': List[Mount],
            'name': str,
            'pid_namespace': str,
            'port_mappings': Dict[str, int],
            'timeout': str
        }

        self.attribute_map = {
            'commands': 'commands',
            'credentials': 'credentials',
            'encrypted_environment': 'encryptedEnvironment',
            'entrypoint': 'entrypoint',
            'environment': 'environment',
            'flags': 'flags',
            'image_uri': 'imageUri',
            'labels': 'labels',
            'mounts': 'mounts',
            'name': 'name',
            'pid_namespace': 'pidNamespace',
            'port_mappings': 'portMappings',
            'timeout': 'timeout'
        }

        self._commands = commands
        self._credentials = credentials
        self._encrypted_environment = encrypted_environment
        self._entrypoint = entrypoint
        self._environment = environment
        self._flags = flags
        self._image_uri = image_uri
        self._labels = labels
        self._mounts = mounts
        self._name = name
        self._pid_namespace = pid_namespace
        self._port_mappings = port_mappings
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Action':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Action of this Action.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commands(self):
        """Gets the commands of this Action.

        If specified, overrides the `CMD` specified in the container. If the container also has an `ENTRYPOINT` the values are used as entrypoint arguments. Otherwise, they are used as a command and arguments to run inside the container.

        :return: The commands of this Action.
        :rtype: List[str]
        """
        return self._commands

    @commands.setter
    def commands(self, commands):
        """Sets the commands of this Action.

        If specified, overrides the `CMD` specified in the container. If the container also has an `ENTRYPOINT` the values are used as entrypoint arguments. Otherwise, they are used as a command and arguments to run inside the container.

        :param commands: The commands of this Action.
        :type commands: List[str]
        """

        self._commands = commands

    @property
    def credentials(self):
        """Gets the credentials of this Action.


        :return: The credentials of this Action.
        :rtype: Secret
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this Action.


        :param credentials: The credentials of this Action.
        :type credentials: Secret
        """

        self._credentials = credentials

    @property
    def encrypted_environment(self):
        """Gets the encrypted_environment of this Action.


        :return: The encrypted_environment of this Action.
        :rtype: Secret
        """
        return self._encrypted_environment

    @encrypted_environment.setter
    def encrypted_environment(self, encrypted_environment):
        """Sets the encrypted_environment of this Action.


        :param encrypted_environment: The encrypted_environment of this Action.
        :type encrypted_environment: Secret
        """

        self._encrypted_environment = encrypted_environment

    @property
    def entrypoint(self):
        """Gets the entrypoint of this Action.

        If specified, overrides the `ENTRYPOINT` specified in the container.

        :return: The entrypoint of this Action.
        :rtype: str
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint):
        """Sets the entrypoint of this Action.

        If specified, overrides the `ENTRYPOINT` specified in the container.

        :param entrypoint: The entrypoint of this Action.
        :type entrypoint: str
        """

        self._entrypoint = entrypoint

    @property
    def environment(self):
        """Gets the environment of this Action.

        The environment to pass into the container. This environment is merged with values specified in the google.genomics.v2alpha1.Pipeline message, overwriting any duplicate values. In addition to the values passed here, a few other values are automatically injected into the environment. These cannot be hidden or overwritten. `GOOGLE_PIPELINE_FAILED` will be set to \"1\" if the pipeline failed because an action has exited with a non-zero status (and did not have the `IGNORE_EXIT_STATUS` flag set). This can be used to determine if additional debug or logging actions should execute. `GOOGLE_LAST_EXIT_STATUS` will be set to the exit status of the last non-background action that executed. This can be used by workflow engine authors to determine whether an individual action has succeeded or failed.

        :return: The environment of this Action.
        :rtype: Dict[str, str]
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this Action.

        The environment to pass into the container. This environment is merged with values specified in the google.genomics.v2alpha1.Pipeline message, overwriting any duplicate values. In addition to the values passed here, a few other values are automatically injected into the environment. These cannot be hidden or overwritten. `GOOGLE_PIPELINE_FAILED` will be set to \"1\" if the pipeline failed because an action has exited with a non-zero status (and did not have the `IGNORE_EXIT_STATUS` flag set). This can be used to determine if additional debug or logging actions should execute. `GOOGLE_LAST_EXIT_STATUS` will be set to the exit status of the last non-background action that executed. This can be used by workflow engine authors to determine whether an individual action has succeeded or failed.

        :param environment: The environment of this Action.
        :type environment: Dict[str, str]
        """

        self._environment = environment

    @property
    def flags(self):
        """Gets the flags of this Action.

        The set of flags to apply to this action.

        :return: The flags of this Action.
        :rtype: List[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this Action.

        The set of flags to apply to this action.

        :param flags: The flags of this Action.
        :type flags: List[str]
        """
        allowed_values = ["FLAG_UNSPECIFIED", "IGNORE_EXIT_STATUS", "RUN_IN_BACKGROUND", "ALWAYS_RUN", "ENABLE_FUSE", "PUBLISH_EXPOSED_PORTS", "DISABLE_IMAGE_PREFETCH", "DISABLE_STANDARD_ERROR_CAPTURE", "BLOCK_EXTERNAL_NETWORK"]  # noqa: E501
        if not set(flags).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `flags` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(flags) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._flags = flags

    @property
    def image_uri(self):
        """Gets the image_uri of this Action.

        Required. The URI to pull the container image from. Note that all images referenced by actions in the pipeline are pulled before the first action runs. If multiple actions reference the same image, it is only pulled once, ensuring that the same image is used for all actions in a single pipeline. The image URI can be either a complete host and image specification (e.g., quay.io/biocontainers/samtools), a library and image name (e.g., google/cloud-sdk) or a bare image name ('bash') to pull from the default library. No schema is required in any of these cases. If the specified image is not public, the service account specified for the Virtual Machine must have access to pull the images from GCR, or appropriate credentials must be specified in the google.genomics.v2alpha1.Action.credentials field.

        :return: The image_uri of this Action.
        :rtype: str
        """
        return self._image_uri

    @image_uri.setter
    def image_uri(self, image_uri):
        """Sets the image_uri of this Action.

        Required. The URI to pull the container image from. Note that all images referenced by actions in the pipeline are pulled before the first action runs. If multiple actions reference the same image, it is only pulled once, ensuring that the same image is used for all actions in a single pipeline. The image URI can be either a complete host and image specification (e.g., quay.io/biocontainers/samtools), a library and image name (e.g., google/cloud-sdk) or a bare image name ('bash') to pull from the default library. No schema is required in any of these cases. If the specified image is not public, the service account specified for the Virtual Machine must have access to pull the images from GCR, or appropriate credentials must be specified in the google.genomics.v2alpha1.Action.credentials field.

        :param image_uri: The image_uri of this Action.
        :type image_uri: str
        """

        self._image_uri = image_uri

    @property
    def labels(self):
        """Gets the labels of this Action.

        Labels to associate with the action. This field is provided to assist workflow engine authors in identifying actions (for example, to indicate what sort of action they perform, such as localization or debugging). They are returned in the operation metadata, but are otherwise ignored.

        :return: The labels of this Action.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Action.

        Labels to associate with the action. This field is provided to assist workflow engine authors in identifying actions (for example, to indicate what sort of action they perform, such as localization or debugging). They are returned in the operation metadata, but are otherwise ignored.

        :param labels: The labels of this Action.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def mounts(self):
        """Gets the mounts of this Action.

        A list of mounts to make available to the action. In addition to the values specified here, every action has a special virtual disk mounted under `/google` that contains log files and other operational components. - /google/logs All logs written during the pipeline execution. - /google/logs/output The combined standard output and standard error of all actions run as part of the pipeline execution. - /google/logs/action/*/stdout The complete contents of each individual action's standard output. - /google/logs/action/*/stderr The complete contents of each individual action's standard error output. 

        :return: The mounts of this Action.
        :rtype: List[Mount]
        """
        return self._mounts

    @mounts.setter
    def mounts(self, mounts):
        """Sets the mounts of this Action.

        A list of mounts to make available to the action. In addition to the values specified here, every action has a special virtual disk mounted under `/google` that contains log files and other operational components. - /google/logs All logs written during the pipeline execution. - /google/logs/output The combined standard output and standard error of all actions run as part of the pipeline execution. - /google/logs/action/*/stdout The complete contents of each individual action's standard output. - /google/logs/action/*/stderr The complete contents of each individual action's standard error output. 

        :param mounts: The mounts of this Action.
        :type mounts: List[Mount]
        """

        self._mounts = mounts

    @property
    def name(self):
        """Gets the name of this Action.

        An optional name for the container. The container hostname will be set to this name, making it useful for inter-container communication. The name must contain only upper and lowercase alphanumeric characters and hyphens and cannot start with a hyphen.

        :return: The name of this Action.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Action.

        An optional name for the container. The container hostname will be set to this name, making it useful for inter-container communication. The name must contain only upper and lowercase alphanumeric characters and hyphens and cannot start with a hyphen.

        :param name: The name of this Action.
        :type name: str
        """

        self._name = name

    @property
    def pid_namespace(self):
        """Gets the pid_namespace of this Action.

        An optional identifier for a PID namespace to run the action inside. Multiple actions should use the same string to share a namespace. If unspecified, a separate isolated namespace is used.

        :return: The pid_namespace of this Action.
        :rtype: str
        """
        return self._pid_namespace

    @pid_namespace.setter
    def pid_namespace(self, pid_namespace):
        """Sets the pid_namespace of this Action.

        An optional identifier for a PID namespace to run the action inside. Multiple actions should use the same string to share a namespace. If unspecified, a separate isolated namespace is used.

        :param pid_namespace: The pid_namespace of this Action.
        :type pid_namespace: str
        """

        self._pid_namespace = pid_namespace

    @property
    def port_mappings(self):
        """Gets the port_mappings of this Action.

        A map of containers to host port mappings for this container. If the container already specifies exposed ports, use the `PUBLISH_EXPOSED_PORTS` flag instead. The host port number must be less than 65536. If it is zero, an unused random port is assigned. To determine the resulting port number, consult the `ContainerStartedEvent` in the operation metadata.

        :return: The port_mappings of this Action.
        :rtype: Dict[str, int]
        """
        return self._port_mappings

    @port_mappings.setter
    def port_mappings(self, port_mappings):
        """Sets the port_mappings of this Action.

        A map of containers to host port mappings for this container. If the container already specifies exposed ports, use the `PUBLISH_EXPOSED_PORTS` flag instead. The host port number must be less than 65536. If it is zero, an unused random port is assigned. To determine the resulting port number, consult the `ContainerStartedEvent` in the operation metadata.

        :param port_mappings: The port_mappings of this Action.
        :type port_mappings: Dict[str, int]
        """

        self._port_mappings = port_mappings

    @property
    def timeout(self):
        """Gets the timeout of this Action.

        The maximum amount of time to give the action to complete. If the action fails to complete before the timeout, it will be terminated and the exit status will be non-zero. The pipeline will continue or terminate based on the rules defined by the `ALWAYS_RUN` and `IGNORE_EXIT_STATUS` flags.

        :return: The timeout of this Action.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this Action.

        The maximum amount of time to give the action to complete. If the action fails to complete before the timeout, it will be terminated and the exit status will be non-zero. The pipeline will continue or terminate based on the rules defined by the `ALWAYS_RUN` and `IGNORE_EXIT_STATUS` flags.

        :param timeout: The timeout of this Action.
        :type timeout: str
        """

        self._timeout = timeout
