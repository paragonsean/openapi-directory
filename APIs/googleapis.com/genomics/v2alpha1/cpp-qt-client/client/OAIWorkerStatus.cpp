/**
 * Genomics API
 * Uploads, processes, queries, and searches Genomics data in the cloud.
 *
 * The version of the OpenAPI document: v2alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkerStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkerStatus::OAIWorkerStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkerStatus::OAIWorkerStatus() {
    this->initializeModel();
}

OAIWorkerStatus::~OAIWorkerStatus() {}

void OAIWorkerStatus::initializeModel() {

    m_attached_disks_isSet = false;
    m_attached_disks_isValid = false;

    m_boot_disk_isSet = false;
    m_boot_disk_isValid = false;

    m_free_ram_bytes_isSet = false;
    m_free_ram_bytes_isValid = false;

    m_total_ram_bytes_isSet = false;
    m_total_ram_bytes_isValid = false;

    m_uptime_seconds_isSet = false;
    m_uptime_seconds_isValid = false;
}

void OAIWorkerStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkerStatus::fromJsonObject(QJsonObject json) {

    m_attached_disks_isValid = ::OpenAPI::fromJsonValue(m_attached_disks, json[QString("attachedDisks")]);
    m_attached_disks_isSet = !json[QString("attachedDisks")].isNull() && m_attached_disks_isValid;

    m_boot_disk_isValid = ::OpenAPI::fromJsonValue(m_boot_disk, json[QString("bootDisk")]);
    m_boot_disk_isSet = !json[QString("bootDisk")].isNull() && m_boot_disk_isValid;

    m_free_ram_bytes_isValid = ::OpenAPI::fromJsonValue(m_free_ram_bytes, json[QString("freeRamBytes")]);
    m_free_ram_bytes_isSet = !json[QString("freeRamBytes")].isNull() && m_free_ram_bytes_isValid;

    m_total_ram_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_ram_bytes, json[QString("totalRamBytes")]);
    m_total_ram_bytes_isSet = !json[QString("totalRamBytes")].isNull() && m_total_ram_bytes_isValid;

    m_uptime_seconds_isValid = ::OpenAPI::fromJsonValue(m_uptime_seconds, json[QString("uptimeSeconds")]);
    m_uptime_seconds_isSet = !json[QString("uptimeSeconds")].isNull() && m_uptime_seconds_isValid;
}

QString OAIWorkerStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkerStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_attached_disks.size() > 0) {
        obj.insert(QString("attachedDisks"), ::OpenAPI::toJsonValue(m_attached_disks));
    }
    if (m_boot_disk.isSet()) {
        obj.insert(QString("bootDisk"), ::OpenAPI::toJsonValue(m_boot_disk));
    }
    if (m_free_ram_bytes_isSet) {
        obj.insert(QString("freeRamBytes"), ::OpenAPI::toJsonValue(m_free_ram_bytes));
    }
    if (m_total_ram_bytes_isSet) {
        obj.insert(QString("totalRamBytes"), ::OpenAPI::toJsonValue(m_total_ram_bytes));
    }
    if (m_uptime_seconds_isSet) {
        obj.insert(QString("uptimeSeconds"), ::OpenAPI::toJsonValue(m_uptime_seconds));
    }
    return obj;
}

QMap<QString, OAIDiskStatus> OAIWorkerStatus::getAttachedDisks() const {
    return m_attached_disks;
}
void OAIWorkerStatus::setAttachedDisks(const QMap<QString, OAIDiskStatus> &attached_disks) {
    m_attached_disks = attached_disks;
    m_attached_disks_isSet = true;
}

bool OAIWorkerStatus::is_attached_disks_Set() const{
    return m_attached_disks_isSet;
}

bool OAIWorkerStatus::is_attached_disks_Valid() const{
    return m_attached_disks_isValid;
}

OAIDiskStatus OAIWorkerStatus::getBootDisk() const {
    return m_boot_disk;
}
void OAIWorkerStatus::setBootDisk(const OAIDiskStatus &boot_disk) {
    m_boot_disk = boot_disk;
    m_boot_disk_isSet = true;
}

bool OAIWorkerStatus::is_boot_disk_Set() const{
    return m_boot_disk_isSet;
}

bool OAIWorkerStatus::is_boot_disk_Valid() const{
    return m_boot_disk_isValid;
}

QString OAIWorkerStatus::getFreeRamBytes() const {
    return m_free_ram_bytes;
}
void OAIWorkerStatus::setFreeRamBytes(const QString &free_ram_bytes) {
    m_free_ram_bytes = free_ram_bytes;
    m_free_ram_bytes_isSet = true;
}

bool OAIWorkerStatus::is_free_ram_bytes_Set() const{
    return m_free_ram_bytes_isSet;
}

bool OAIWorkerStatus::is_free_ram_bytes_Valid() const{
    return m_free_ram_bytes_isValid;
}

QString OAIWorkerStatus::getTotalRamBytes() const {
    return m_total_ram_bytes;
}
void OAIWorkerStatus::setTotalRamBytes(const QString &total_ram_bytes) {
    m_total_ram_bytes = total_ram_bytes;
    m_total_ram_bytes_isSet = true;
}

bool OAIWorkerStatus::is_total_ram_bytes_Set() const{
    return m_total_ram_bytes_isSet;
}

bool OAIWorkerStatus::is_total_ram_bytes_Valid() const{
    return m_total_ram_bytes_isValid;
}

QString OAIWorkerStatus::getUptimeSeconds() const {
    return m_uptime_seconds;
}
void OAIWorkerStatus::setUptimeSeconds(const QString &uptime_seconds) {
    m_uptime_seconds = uptime_seconds;
    m_uptime_seconds_isSet = true;
}

bool OAIWorkerStatus::is_uptime_seconds_Set() const{
    return m_uptime_seconds_isSet;
}

bool OAIWorkerStatus::is_uptime_seconds_Valid() const{
    return m_uptime_seconds_isValid;
}

bool OAIWorkerStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attached_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_boot_disk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_ram_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_ram_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uptime_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkerStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
