/**
 * Genomics API
 * Uploads, processes, queries, and searches Genomics data in the cloud.
 *
 * The version of the OpenAPI document: v2alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAction.h
 *
 * Specifies a single action that runs a Docker container.
 */

#ifndef OAIAction_H
#define OAIAction_H

#include <QJsonObject>

#include "OAIMount.h"
#include "OAISecret.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISecret;
class OAIMount;

class OAIAction : public OAIObject {
public:
    OAIAction();
    OAIAction(QString json);
    ~OAIAction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getCommands() const;
    void setCommands(const QList<QString> &commands);
    bool is_commands_Set() const;
    bool is_commands_Valid() const;

    OAISecret getCredentials() const;
    void setCredentials(const OAISecret &credentials);
    bool is_credentials_Set() const;
    bool is_credentials_Valid() const;

    OAISecret getEncryptedEnvironment() const;
    void setEncryptedEnvironment(const OAISecret &encrypted_environment);
    bool is_encrypted_environment_Set() const;
    bool is_encrypted_environment_Valid() const;

    QString getEntrypoint() const;
    void setEntrypoint(const QString &entrypoint);
    bool is_entrypoint_Set() const;
    bool is_entrypoint_Valid() const;

    QMap<QString, QString> getEnvironment() const;
    void setEnvironment(const QMap<QString, QString> &environment);
    bool is_environment_Set() const;
    bool is_environment_Valid() const;

    QList<QString> getFlags() const;
    void setFlags(const QList<QString> &flags);
    bool is_flags_Set() const;
    bool is_flags_Valid() const;

    QString getImageUri() const;
    void setImageUri(const QString &image_uri);
    bool is_image_uri_Set() const;
    bool is_image_uri_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QList<OAIMount> getMounts() const;
    void setMounts(const QList<OAIMount> &mounts);
    bool is_mounts_Set() const;
    bool is_mounts_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPidNamespace() const;
    void setPidNamespace(const QString &pid_namespace);
    bool is_pid_namespace_Set() const;
    bool is_pid_namespace_Valid() const;

    QMap<QString, qint32> getPortMappings() const;
    void setPortMappings(const QMap<QString, qint32> &port_mappings);
    bool is_port_mappings_Set() const;
    bool is_port_mappings_Valid() const;

    QString getTimeout() const;
    void setTimeout(const QString &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_commands;
    bool m_commands_isSet;
    bool m_commands_isValid;

    OAISecret m_credentials;
    bool m_credentials_isSet;
    bool m_credentials_isValid;

    OAISecret m_encrypted_environment;
    bool m_encrypted_environment_isSet;
    bool m_encrypted_environment_isValid;

    QString m_entrypoint;
    bool m_entrypoint_isSet;
    bool m_entrypoint_isValid;

    QMap<QString, QString> m_environment;
    bool m_environment_isSet;
    bool m_environment_isValid;

    QList<QString> m_flags;
    bool m_flags_isSet;
    bool m_flags_isValid;

    QString m_image_uri;
    bool m_image_uri_isSet;
    bool m_image_uri_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QList<OAIMount> m_mounts;
    bool m_mounts_isSet;
    bool m_mounts_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_pid_namespace;
    bool m_pid_namespace_isSet;
    bool m_pid_namespace_isValid;

    QMap<QString, qint32> m_port_mappings;
    bool m_port_mappings_isSet;
    bool m_port_mappings_isValid;

    QString m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAction)

#endif // OAIAction_H
