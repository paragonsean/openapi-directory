/**
 * Genomics API
 * Uploads, processes, queries, and searches Genomics data in the cloud.
 *
 * The version of the OpenAPI document: v2alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerStartedEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerStartedEvent::OAIContainerStartedEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerStartedEvent::OAIContainerStartedEvent() {
    this->initializeModel();
}

OAIContainerStartedEvent::~OAIContainerStartedEvent() {}

void OAIContainerStartedEvent::initializeModel() {

    m_action_id_isSet = false;
    m_action_id_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_port_mappings_isSet = false;
    m_port_mappings_isValid = false;
}

void OAIContainerStartedEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerStartedEvent::fromJsonObject(QJsonObject json) {

    m_action_id_isValid = ::OpenAPI::fromJsonValue(m_action_id, json[QString("actionId")]);
    m_action_id_isSet = !json[QString("actionId")].isNull() && m_action_id_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_port_mappings_isValid = ::OpenAPI::fromJsonValue(m_port_mappings, json[QString("portMappings")]);
    m_port_mappings_isSet = !json[QString("portMappings")].isNull() && m_port_mappings_isValid;
}

QString OAIContainerStartedEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerStartedEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_action_id_isSet) {
        obj.insert(QString("actionId"), ::OpenAPI::toJsonValue(m_action_id));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_port_mappings.size() > 0) {
        obj.insert(QString("portMappings"), ::OpenAPI::toJsonValue(m_port_mappings));
    }
    return obj;
}

qint32 OAIContainerStartedEvent::getActionId() const {
    return m_action_id;
}
void OAIContainerStartedEvent::setActionId(const qint32 &action_id) {
    m_action_id = action_id;
    m_action_id_isSet = true;
}

bool OAIContainerStartedEvent::is_action_id_Set() const{
    return m_action_id_isSet;
}

bool OAIContainerStartedEvent::is_action_id_Valid() const{
    return m_action_id_isValid;
}

QString OAIContainerStartedEvent::getIpAddress() const {
    return m_ip_address;
}
void OAIContainerStartedEvent::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIContainerStartedEvent::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIContainerStartedEvent::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QMap<QString, qint32> OAIContainerStartedEvent::getPortMappings() const {
    return m_port_mappings;
}
void OAIContainerStartedEvent::setPortMappings(const QMap<QString, qint32> &port_mappings) {
    m_port_mappings = port_mappings;
    m_port_mappings_isSet = true;
}

bool OAIContainerStartedEvent::is_port_mappings_Set() const{
    return m_port_mappings_isSet;
}

bool OAIContainerStartedEvent::is_port_mappings_Valid() const{
    return m_port_mappings_isValid;
}

bool OAIContainerStartedEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerStartedEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
