/**
 * Genomics API
 * Uploads, processes, queries, and searches Genomics data in the cloud.
 *
 * The version of the OpenAPI document: v2alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAction::OAIAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAction::OAIAction() {
    this->initializeModel();
}

OAIAction::~OAIAction() {}

void OAIAction::initializeModel() {

    m_commands_isSet = false;
    m_commands_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_encrypted_environment_isSet = false;
    m_encrypted_environment_isValid = false;

    m_entrypoint_isSet = false;
    m_entrypoint_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_image_uri_isSet = false;
    m_image_uri_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_mounts_isSet = false;
    m_mounts_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pid_namespace_isSet = false;
    m_pid_namespace_isValid = false;

    m_port_mappings_isSet = false;
    m_port_mappings_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAction::fromJsonObject(QJsonObject json) {

    m_commands_isValid = ::OpenAPI::fromJsonValue(m_commands, json[QString("commands")]);
    m_commands_isSet = !json[QString("commands")].isNull() && m_commands_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("credentials")]);
    m_credentials_isSet = !json[QString("credentials")].isNull() && m_credentials_isValid;

    m_encrypted_environment_isValid = ::OpenAPI::fromJsonValue(m_encrypted_environment, json[QString("encryptedEnvironment")]);
    m_encrypted_environment_isSet = !json[QString("encryptedEnvironment")].isNull() && m_encrypted_environment_isValid;

    m_entrypoint_isValid = ::OpenAPI::fromJsonValue(m_entrypoint, json[QString("entrypoint")]);
    m_entrypoint_isSet = !json[QString("entrypoint")].isNull() && m_entrypoint_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_image_uri_isValid = ::OpenAPI::fromJsonValue(m_image_uri, json[QString("imageUri")]);
    m_image_uri_isSet = !json[QString("imageUri")].isNull() && m_image_uri_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_mounts_isValid = ::OpenAPI::fromJsonValue(m_mounts, json[QString("mounts")]);
    m_mounts_isSet = !json[QString("mounts")].isNull() && m_mounts_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pid_namespace_isValid = ::OpenAPI::fromJsonValue(m_pid_namespace, json[QString("pidNamespace")]);
    m_pid_namespace_isSet = !json[QString("pidNamespace")].isNull() && m_pid_namespace_isValid;

    m_port_mappings_isValid = ::OpenAPI::fromJsonValue(m_port_mappings, json[QString("portMappings")]);
    m_port_mappings_isSet = !json[QString("portMappings")].isNull() && m_port_mappings_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAction::asJsonObject() const {
    QJsonObject obj;
    if (m_commands.size() > 0) {
        obj.insert(QString("commands"), ::OpenAPI::toJsonValue(m_commands));
    }
    if (m_credentials.isSet()) {
        obj.insert(QString("credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_encrypted_environment.isSet()) {
        obj.insert(QString("encryptedEnvironment"), ::OpenAPI::toJsonValue(m_encrypted_environment));
    }
    if (m_entrypoint_isSet) {
        obj.insert(QString("entrypoint"), ::OpenAPI::toJsonValue(m_entrypoint));
    }
    if (m_environment.size() > 0) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_flags.size() > 0) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_image_uri_isSet) {
        obj.insert(QString("imageUri"), ::OpenAPI::toJsonValue(m_image_uri));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_mounts.size() > 0) {
        obj.insert(QString("mounts"), ::OpenAPI::toJsonValue(m_mounts));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pid_namespace_isSet) {
        obj.insert(QString("pidNamespace"), ::OpenAPI::toJsonValue(m_pid_namespace));
    }
    if (m_port_mappings.size() > 0) {
        obj.insert(QString("portMappings"), ::OpenAPI::toJsonValue(m_port_mappings));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

QList<QString> OAIAction::getCommands() const {
    return m_commands;
}
void OAIAction::setCommands(const QList<QString> &commands) {
    m_commands = commands;
    m_commands_isSet = true;
}

bool OAIAction::is_commands_Set() const{
    return m_commands_isSet;
}

bool OAIAction::is_commands_Valid() const{
    return m_commands_isValid;
}

OAISecret OAIAction::getCredentials() const {
    return m_credentials;
}
void OAIAction::setCredentials(const OAISecret &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAIAction::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAIAction::is_credentials_Valid() const{
    return m_credentials_isValid;
}

OAISecret OAIAction::getEncryptedEnvironment() const {
    return m_encrypted_environment;
}
void OAIAction::setEncryptedEnvironment(const OAISecret &encrypted_environment) {
    m_encrypted_environment = encrypted_environment;
    m_encrypted_environment_isSet = true;
}

bool OAIAction::is_encrypted_environment_Set() const{
    return m_encrypted_environment_isSet;
}

bool OAIAction::is_encrypted_environment_Valid() const{
    return m_encrypted_environment_isValid;
}

QString OAIAction::getEntrypoint() const {
    return m_entrypoint;
}
void OAIAction::setEntrypoint(const QString &entrypoint) {
    m_entrypoint = entrypoint;
    m_entrypoint_isSet = true;
}

bool OAIAction::is_entrypoint_Set() const{
    return m_entrypoint_isSet;
}

bool OAIAction::is_entrypoint_Valid() const{
    return m_entrypoint_isValid;
}

QMap<QString, QString> OAIAction::getEnvironment() const {
    return m_environment;
}
void OAIAction::setEnvironment(const QMap<QString, QString> &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIAction::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIAction::is_environment_Valid() const{
    return m_environment_isValid;
}

QList<QString> OAIAction::getFlags() const {
    return m_flags;
}
void OAIAction::setFlags(const QList<QString> &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIAction::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIAction::is_flags_Valid() const{
    return m_flags_isValid;
}

QString OAIAction::getImageUri() const {
    return m_image_uri;
}
void OAIAction::setImageUri(const QString &image_uri) {
    m_image_uri = image_uri;
    m_image_uri_isSet = true;
}

bool OAIAction::is_image_uri_Set() const{
    return m_image_uri_isSet;
}

bool OAIAction::is_image_uri_Valid() const{
    return m_image_uri_isValid;
}

QMap<QString, QString> OAIAction::getLabels() const {
    return m_labels;
}
void OAIAction::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIAction::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIAction::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<OAIMount> OAIAction::getMounts() const {
    return m_mounts;
}
void OAIAction::setMounts(const QList<OAIMount> &mounts) {
    m_mounts = mounts;
    m_mounts_isSet = true;
}

bool OAIAction::is_mounts_Set() const{
    return m_mounts_isSet;
}

bool OAIAction::is_mounts_Valid() const{
    return m_mounts_isValid;
}

QString OAIAction::getName() const {
    return m_name;
}
void OAIAction::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAction::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAction::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAction::getPidNamespace() const {
    return m_pid_namespace;
}
void OAIAction::setPidNamespace(const QString &pid_namespace) {
    m_pid_namespace = pid_namespace;
    m_pid_namespace_isSet = true;
}

bool OAIAction::is_pid_namespace_Set() const{
    return m_pid_namespace_isSet;
}

bool OAIAction::is_pid_namespace_Valid() const{
    return m_pid_namespace_isValid;
}

QMap<QString, qint32> OAIAction::getPortMappings() const {
    return m_port_mappings;
}
void OAIAction::setPortMappings(const QMap<QString, qint32> &port_mappings) {
    m_port_mappings = port_mappings;
    m_port_mappings_isSet = true;
}

bool OAIAction::is_port_mappings_Set() const{
    return m_port_mappings_isSet;
}

bool OAIAction::is_port_mappings_Valid() const{
    return m_port_mappings_isValid;
}

QString OAIAction::getTimeout() const {
    return m_timeout;
}
void OAIAction::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIAction::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIAction::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entrypoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
