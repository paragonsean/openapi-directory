/**
 * Genomics API
 * Uploads, processes, queries, and searches Genomics data in the cloud.
 *
 * The version of the OpenAPI document: v2alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckInRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckInRequest::OAICheckInRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckInRequest::OAICheckInRequest() {
    this->initializeModel();
}

OAICheckInRequest::~OAICheckInRequest() {}

void OAICheckInRequest::initializeModel() {

    m_deadline_expired_isSet = false;
    m_deadline_expired_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_sos_report_isSet = false;
    m_sos_report_isValid = false;

    m_worker_status_isSet = false;
    m_worker_status_isValid = false;
}

void OAICheckInRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckInRequest::fromJsonObject(QJsonObject json) {

    m_deadline_expired_isValid = ::OpenAPI::fromJsonValue(m_deadline_expired, json[QString("deadlineExpired")]);
    m_deadline_expired_isSet = !json[QString("deadlineExpired")].isNull() && m_deadline_expired_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_sos_report_isValid = ::OpenAPI::fromJsonValue(m_sos_report, json[QString("sosReport")]);
    m_sos_report_isSet = !json[QString("sosReport")].isNull() && m_sos_report_isValid;

    m_worker_status_isValid = ::OpenAPI::fromJsonValue(m_worker_status, json[QString("workerStatus")]);
    m_worker_status_isSet = !json[QString("workerStatus")].isNull() && m_worker_status_isValid;
}

QString OAICheckInRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckInRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_deadline_expired_isSet) {
        obj.insert(QString("deadlineExpired"), ::OpenAPI::toJsonValue(m_deadline_expired));
    }
    if (m_event.size() > 0) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_result.isSet()) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_sos_report_isSet) {
        obj.insert(QString("sosReport"), ::OpenAPI::toJsonValue(m_sos_report));
    }
    if (m_worker_status.isSet()) {
        obj.insert(QString("workerStatus"), ::OpenAPI::toJsonValue(m_worker_status));
    }
    return obj;
}

OAIObject OAICheckInRequest::getDeadlineExpired() const {
    return m_deadline_expired;
}
void OAICheckInRequest::setDeadlineExpired(const OAIObject &deadline_expired) {
    m_deadline_expired = deadline_expired;
    m_deadline_expired_isSet = true;
}

bool OAICheckInRequest::is_deadline_expired_Set() const{
    return m_deadline_expired_isSet;
}

bool OAICheckInRequest::is_deadline_expired_Valid() const{
    return m_deadline_expired_isValid;
}

QMap<QString, QJsonValue> OAICheckInRequest::getEvent() const {
    return m_event;
}
void OAICheckInRequest::setEvent(const QMap<QString, QJsonValue> &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAICheckInRequest::is_event_Set() const{
    return m_event_isSet;
}

bool OAICheckInRequest::is_event_Valid() const{
    return m_event_isValid;
}

QList<OAITimestampedEvent> OAICheckInRequest::getEvents() const {
    return m_events;
}
void OAICheckInRequest::setEvents(const QList<OAITimestampedEvent> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAICheckInRequest::is_events_Set() const{
    return m_events_isSet;
}

bool OAICheckInRequest::is_events_Valid() const{
    return m_events_isValid;
}

OAIStatus OAICheckInRequest::getResult() const {
    return m_result;
}
void OAICheckInRequest::setResult(const OAIStatus &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAICheckInRequest::is_result_Set() const{
    return m_result_isSet;
}

bool OAICheckInRequest::is_result_Valid() const{
    return m_result_isValid;
}

QByteArray OAICheckInRequest::getSosReport() const {
    return m_sos_report;
}
void OAICheckInRequest::setSosReport(const QByteArray &sos_report) {
    m_sos_report = sos_report;
    m_sos_report_isSet = true;
}

bool OAICheckInRequest::is_sos_report_Set() const{
    return m_sos_report_isSet;
}

bool OAICheckInRequest::is_sos_report_Valid() const{
    return m_sos_report_isValid;
}

OAIWorkerStatus OAICheckInRequest::getWorkerStatus() const {
    return m_worker_status;
}
void OAICheckInRequest::setWorkerStatus(const OAIWorkerStatus &worker_status) {
    m_worker_status = worker_status;
    m_worker_status_isSet = true;
}

bool OAICheckInRequest::is_worker_status_Set() const{
    return m_worker_status_isSet;
}

bool OAICheckInRequest::is_worker_status_Valid() const{
    return m_worker_status_isValid;
}

bool OAICheckInRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deadline_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sos_report_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckInRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
