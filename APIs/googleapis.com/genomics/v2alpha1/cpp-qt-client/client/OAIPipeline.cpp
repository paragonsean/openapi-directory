/**
 * Genomics API
 * Uploads, processes, queries, and searches Genomics data in the cloud.
 *
 * The version of the OpenAPI document: v2alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeline::OAIPipeline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeline::OAIPipeline() {
    this->initializeModel();
}

OAIPipeline::~OAIPipeline() {}

void OAIPipeline::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_encrypted_environment_isSet = false;
    m_encrypted_environment_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIPipeline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeline::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_encrypted_environment_isValid = ::OpenAPI::fromJsonValue(m_encrypted_environment, json[QString("encryptedEnvironment")]);
    m_encrypted_environment_isSet = !json[QString("encryptedEnvironment")].isNull() && m_encrypted_environment_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIPipeline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeline::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_encrypted_environment.isSet()) {
        obj.insert(QString("encryptedEnvironment"), ::OpenAPI::toJsonValue(m_encrypted_environment));
    }
    if (m_environment.size() > 0) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_resources.isSet()) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

QList<OAIAction> OAIPipeline::getActions() const {
    return m_actions;
}
void OAIPipeline::setActions(const QList<OAIAction> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIPipeline::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIPipeline::is_actions_Valid() const{
    return m_actions_isValid;
}

OAISecret OAIPipeline::getEncryptedEnvironment() const {
    return m_encrypted_environment;
}
void OAIPipeline::setEncryptedEnvironment(const OAISecret &encrypted_environment) {
    m_encrypted_environment = encrypted_environment;
    m_encrypted_environment_isSet = true;
}

bool OAIPipeline::is_encrypted_environment_Set() const{
    return m_encrypted_environment_isSet;
}

bool OAIPipeline::is_encrypted_environment_Valid() const{
    return m_encrypted_environment_isValid;
}

QMap<QString, QString> OAIPipeline::getEnvironment() const {
    return m_environment;
}
void OAIPipeline::setEnvironment(const QMap<QString, QString> &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIPipeline::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIPipeline::is_environment_Valid() const{
    return m_environment_isValid;
}

OAIResources OAIPipeline::getResources() const {
    return m_resources;
}
void OAIPipeline::setResources(const OAIResources &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIPipeline::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIPipeline::is_resources_Valid() const{
    return m_resources_isValid;
}

QString OAIPipeline::getTimeout() const {
    return m_timeout;
}
void OAIPipeline::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIPipeline::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIPipeline::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIPipeline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeline::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
