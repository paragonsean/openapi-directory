/**
 * Genomics API
 * Uploads, processes, queries, and searches Genomics data in the cloud.
 *
 * The version of the OpenAPI document: v2alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiskStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiskStatus::OAIDiskStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiskStatus::OAIDiskStatus() {
    this->initializeModel();
}

OAIDiskStatus::~OAIDiskStatus() {}

void OAIDiskStatus::initializeModel() {

    m_free_space_bytes_isSet = false;
    m_free_space_bytes_isValid = false;

    m_total_space_bytes_isSet = false;
    m_total_space_bytes_isValid = false;
}

void OAIDiskStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiskStatus::fromJsonObject(QJsonObject json) {

    m_free_space_bytes_isValid = ::OpenAPI::fromJsonValue(m_free_space_bytes, json[QString("freeSpaceBytes")]);
    m_free_space_bytes_isSet = !json[QString("freeSpaceBytes")].isNull() && m_free_space_bytes_isValid;

    m_total_space_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_space_bytes, json[QString("totalSpaceBytes")]);
    m_total_space_bytes_isSet = !json[QString("totalSpaceBytes")].isNull() && m_total_space_bytes_isValid;
}

QString OAIDiskStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiskStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_free_space_bytes_isSet) {
        obj.insert(QString("freeSpaceBytes"), ::OpenAPI::toJsonValue(m_free_space_bytes));
    }
    if (m_total_space_bytes_isSet) {
        obj.insert(QString("totalSpaceBytes"), ::OpenAPI::toJsonValue(m_total_space_bytes));
    }
    return obj;
}

QString OAIDiskStatus::getFreeSpaceBytes() const {
    return m_free_space_bytes;
}
void OAIDiskStatus::setFreeSpaceBytes(const QString &free_space_bytes) {
    m_free_space_bytes = free_space_bytes;
    m_free_space_bytes_isSet = true;
}

bool OAIDiskStatus::is_free_space_bytes_Set() const{
    return m_free_space_bytes_isSet;
}

bool OAIDiskStatus::is_free_space_bytes_Valid() const{
    return m_free_space_bytes_isValid;
}

QString OAIDiskStatus::getTotalSpaceBytes() const {
    return m_total_space_bytes;
}
void OAIDiskStatus::setTotalSpaceBytes(const QString &total_space_bytes) {
    m_total_space_bytes = total_space_bytes;
    m_total_space_bytes_isSet = true;
}

bool OAIDiskStatus::is_total_space_bytes_Set() const{
    return m_total_space_bytes_isSet;
}

bool OAIDiskStatus::is_total_space_bytes_Valid() const{
    return m_total_space_bytes_isValid;
}

bool OAIDiskStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_free_space_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_space_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiskStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
