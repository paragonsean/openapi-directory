/**
 * Genomics API
 * Uploads, processes, queries, and searches Genomics data in the cloud.
 *
 * The version of the OpenAPI document: v2alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDelayedEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDelayedEvent::OAIDelayedEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDelayedEvent::OAIDelayedEvent() {
    this->initializeModel();
}

OAIDelayedEvent::~OAIDelayedEvent() {}

void OAIDelayedEvent::initializeModel() {

    m_cause_isSet = false;
    m_cause_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;
}

void OAIDelayedEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDelayedEvent::fromJsonObject(QJsonObject json) {

    m_cause_isValid = ::OpenAPI::fromJsonValue(m_cause, json[QString("cause")]);
    m_cause_isSet = !json[QString("cause")].isNull() && m_cause_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;
}

QString OAIDelayedEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDelayedEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_cause_isSet) {
        obj.insert(QString("cause"), ::OpenAPI::toJsonValue(m_cause));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    return obj;
}

QString OAIDelayedEvent::getCause() const {
    return m_cause;
}
void OAIDelayedEvent::setCause(const QString &cause) {
    m_cause = cause;
    m_cause_isSet = true;
}

bool OAIDelayedEvent::is_cause_Set() const{
    return m_cause_isSet;
}

bool OAIDelayedEvent::is_cause_Valid() const{
    return m_cause_isValid;
}

QList<QString> OAIDelayedEvent::getMetrics() const {
    return m_metrics;
}
void OAIDelayedEvent::setMetrics(const QList<QString> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIDelayedEvent::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIDelayedEvent::is_metrics_Valid() const{
    return m_metrics_isValid;
}

bool OAIDelayedEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDelayedEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
