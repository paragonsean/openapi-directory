/**
 * Genomics API
 * Uploads, processes, queries, and searches Genomics data in the cloud.
 *
 * The version of the OpenAPI document: v2alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachine::OAIVirtualMachine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachine::OAIVirtualMachine() {
    this->initializeModel();
}

OAIVirtualMachine::~OAIVirtualMachine() {}

void OAIVirtualMachine::initializeModel() {

    m_accelerators_isSet = false;
    m_accelerators_isValid = false;

    m_boot_disk_size_gb_isSet = false;
    m_boot_disk_size_gb_isValid = false;

    m_boot_image_isSet = false;
    m_boot_image_isValid = false;

    m_cpu_platform_isSet = false;
    m_cpu_platform_isValid = false;

    m_disks_isSet = false;
    m_disks_isValid = false;

    m_docker_cache_images_isSet = false;
    m_docker_cache_images_isValid = false;

    m_enable_stackdriver_monitoring_isSet = false;
    m_enable_stackdriver_monitoring_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_machine_type_isSet = false;
    m_machine_type_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_nvidia_driver_version_isSet = false;
    m_nvidia_driver_version_isValid = false;

    m_preemptible_isSet = false;
    m_preemptible_isValid = false;

    m_reservation_isSet = false;
    m_reservation_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_volumes_isSet = false;
    m_volumes_isValid = false;
}

void OAIVirtualMachine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachine::fromJsonObject(QJsonObject json) {

    m_accelerators_isValid = ::OpenAPI::fromJsonValue(m_accelerators, json[QString("accelerators")]);
    m_accelerators_isSet = !json[QString("accelerators")].isNull() && m_accelerators_isValid;

    m_boot_disk_size_gb_isValid = ::OpenAPI::fromJsonValue(m_boot_disk_size_gb, json[QString("bootDiskSizeGb")]);
    m_boot_disk_size_gb_isSet = !json[QString("bootDiskSizeGb")].isNull() && m_boot_disk_size_gb_isValid;

    m_boot_image_isValid = ::OpenAPI::fromJsonValue(m_boot_image, json[QString("bootImage")]);
    m_boot_image_isSet = !json[QString("bootImage")].isNull() && m_boot_image_isValid;

    m_cpu_platform_isValid = ::OpenAPI::fromJsonValue(m_cpu_platform, json[QString("cpuPlatform")]);
    m_cpu_platform_isSet = !json[QString("cpuPlatform")].isNull() && m_cpu_platform_isValid;

    m_disks_isValid = ::OpenAPI::fromJsonValue(m_disks, json[QString("disks")]);
    m_disks_isSet = !json[QString("disks")].isNull() && m_disks_isValid;

    m_docker_cache_images_isValid = ::OpenAPI::fromJsonValue(m_docker_cache_images, json[QString("dockerCacheImages")]);
    m_docker_cache_images_isSet = !json[QString("dockerCacheImages")].isNull() && m_docker_cache_images_isValid;

    m_enable_stackdriver_monitoring_isValid = ::OpenAPI::fromJsonValue(m_enable_stackdriver_monitoring, json[QString("enableStackdriverMonitoring")]);
    m_enable_stackdriver_monitoring_isSet = !json[QString("enableStackdriverMonitoring")].isNull() && m_enable_stackdriver_monitoring_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_machine_type_isValid = ::OpenAPI::fromJsonValue(m_machine_type, json[QString("machineType")]);
    m_machine_type_isSet = !json[QString("machineType")].isNull() && m_machine_type_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_nvidia_driver_version_isValid = ::OpenAPI::fromJsonValue(m_nvidia_driver_version, json[QString("nvidiaDriverVersion")]);
    m_nvidia_driver_version_isSet = !json[QString("nvidiaDriverVersion")].isNull() && m_nvidia_driver_version_isValid;

    m_preemptible_isValid = ::OpenAPI::fromJsonValue(m_preemptible, json[QString("preemptible")]);
    m_preemptible_isSet = !json[QString("preemptible")].isNull() && m_preemptible_isValid;

    m_reservation_isValid = ::OpenAPI::fromJsonValue(m_reservation, json[QString("reservation")]);
    m_reservation_isSet = !json[QString("reservation")].isNull() && m_reservation_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_volumes_isValid = ::OpenAPI::fromJsonValue(m_volumes, json[QString("volumes")]);
    m_volumes_isSet = !json[QString("volumes")].isNull() && m_volumes_isValid;
}

QString OAIVirtualMachine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachine::asJsonObject() const {
    QJsonObject obj;
    if (m_accelerators.size() > 0) {
        obj.insert(QString("accelerators"), ::OpenAPI::toJsonValue(m_accelerators));
    }
    if (m_boot_disk_size_gb_isSet) {
        obj.insert(QString("bootDiskSizeGb"), ::OpenAPI::toJsonValue(m_boot_disk_size_gb));
    }
    if (m_boot_image_isSet) {
        obj.insert(QString("bootImage"), ::OpenAPI::toJsonValue(m_boot_image));
    }
    if (m_cpu_platform_isSet) {
        obj.insert(QString("cpuPlatform"), ::OpenAPI::toJsonValue(m_cpu_platform));
    }
    if (m_disks.size() > 0) {
        obj.insert(QString("disks"), ::OpenAPI::toJsonValue(m_disks));
    }
    if (m_docker_cache_images.size() > 0) {
        obj.insert(QString("dockerCacheImages"), ::OpenAPI::toJsonValue(m_docker_cache_images));
    }
    if (m_enable_stackdriver_monitoring_isSet) {
        obj.insert(QString("enableStackdriverMonitoring"), ::OpenAPI::toJsonValue(m_enable_stackdriver_monitoring));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_machine_type_isSet) {
        obj.insert(QString("machineType"), ::OpenAPI::toJsonValue(m_machine_type));
    }
    if (m_network.isSet()) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_nvidia_driver_version_isSet) {
        obj.insert(QString("nvidiaDriverVersion"), ::OpenAPI::toJsonValue(m_nvidia_driver_version));
    }
    if (m_preemptible_isSet) {
        obj.insert(QString("preemptible"), ::OpenAPI::toJsonValue(m_preemptible));
    }
    if (m_reservation_isSet) {
        obj.insert(QString("reservation"), ::OpenAPI::toJsonValue(m_reservation));
    }
    if (m_service_account.isSet()) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_volumes.size() > 0) {
        obj.insert(QString("volumes"), ::OpenAPI::toJsonValue(m_volumes));
    }
    return obj;
}

QList<OAIAccelerator> OAIVirtualMachine::getAccelerators() const {
    return m_accelerators;
}
void OAIVirtualMachine::setAccelerators(const QList<OAIAccelerator> &accelerators) {
    m_accelerators = accelerators;
    m_accelerators_isSet = true;
}

bool OAIVirtualMachine::is_accelerators_Set() const{
    return m_accelerators_isSet;
}

bool OAIVirtualMachine::is_accelerators_Valid() const{
    return m_accelerators_isValid;
}

qint32 OAIVirtualMachine::getBootDiskSizeGb() const {
    return m_boot_disk_size_gb;
}
void OAIVirtualMachine::setBootDiskSizeGb(const qint32 &boot_disk_size_gb) {
    m_boot_disk_size_gb = boot_disk_size_gb;
    m_boot_disk_size_gb_isSet = true;
}

bool OAIVirtualMachine::is_boot_disk_size_gb_Set() const{
    return m_boot_disk_size_gb_isSet;
}

bool OAIVirtualMachine::is_boot_disk_size_gb_Valid() const{
    return m_boot_disk_size_gb_isValid;
}

QString OAIVirtualMachine::getBootImage() const {
    return m_boot_image;
}
void OAIVirtualMachine::setBootImage(const QString &boot_image) {
    m_boot_image = boot_image;
    m_boot_image_isSet = true;
}

bool OAIVirtualMachine::is_boot_image_Set() const{
    return m_boot_image_isSet;
}

bool OAIVirtualMachine::is_boot_image_Valid() const{
    return m_boot_image_isValid;
}

QString OAIVirtualMachine::getCpuPlatform() const {
    return m_cpu_platform;
}
void OAIVirtualMachine::setCpuPlatform(const QString &cpu_platform) {
    m_cpu_platform = cpu_platform;
    m_cpu_platform_isSet = true;
}

bool OAIVirtualMachine::is_cpu_platform_Set() const{
    return m_cpu_platform_isSet;
}

bool OAIVirtualMachine::is_cpu_platform_Valid() const{
    return m_cpu_platform_isValid;
}

QList<OAIDisk> OAIVirtualMachine::getDisks() const {
    return m_disks;
}
void OAIVirtualMachine::setDisks(const QList<OAIDisk> &disks) {
    m_disks = disks;
    m_disks_isSet = true;
}

bool OAIVirtualMachine::is_disks_Set() const{
    return m_disks_isSet;
}

bool OAIVirtualMachine::is_disks_Valid() const{
    return m_disks_isValid;
}

QList<QString> OAIVirtualMachine::getDockerCacheImages() const {
    return m_docker_cache_images;
}
void OAIVirtualMachine::setDockerCacheImages(const QList<QString> &docker_cache_images) {
    m_docker_cache_images = docker_cache_images;
    m_docker_cache_images_isSet = true;
}

bool OAIVirtualMachine::is_docker_cache_images_Set() const{
    return m_docker_cache_images_isSet;
}

bool OAIVirtualMachine::is_docker_cache_images_Valid() const{
    return m_docker_cache_images_isValid;
}

bool OAIVirtualMachine::isEnableStackdriverMonitoring() const {
    return m_enable_stackdriver_monitoring;
}
void OAIVirtualMachine::setEnableStackdriverMonitoring(const bool &enable_stackdriver_monitoring) {
    m_enable_stackdriver_monitoring = enable_stackdriver_monitoring;
    m_enable_stackdriver_monitoring_isSet = true;
}

bool OAIVirtualMachine::is_enable_stackdriver_monitoring_Set() const{
    return m_enable_stackdriver_monitoring_isSet;
}

bool OAIVirtualMachine::is_enable_stackdriver_monitoring_Valid() const{
    return m_enable_stackdriver_monitoring_isValid;
}

QMap<QString, QString> OAIVirtualMachine::getLabels() const {
    return m_labels;
}
void OAIVirtualMachine::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIVirtualMachine::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIVirtualMachine::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIVirtualMachine::getMachineType() const {
    return m_machine_type;
}
void OAIVirtualMachine::setMachineType(const QString &machine_type) {
    m_machine_type = machine_type;
    m_machine_type_isSet = true;
}

bool OAIVirtualMachine::is_machine_type_Set() const{
    return m_machine_type_isSet;
}

bool OAIVirtualMachine::is_machine_type_Valid() const{
    return m_machine_type_isValid;
}

OAINetwork OAIVirtualMachine::getNetwork() const {
    return m_network;
}
void OAIVirtualMachine::setNetwork(const OAINetwork &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIVirtualMachine::is_network_Set() const{
    return m_network_isSet;
}

bool OAIVirtualMachine::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIVirtualMachine::getNvidiaDriverVersion() const {
    return m_nvidia_driver_version;
}
void OAIVirtualMachine::setNvidiaDriverVersion(const QString &nvidia_driver_version) {
    m_nvidia_driver_version = nvidia_driver_version;
    m_nvidia_driver_version_isSet = true;
}

bool OAIVirtualMachine::is_nvidia_driver_version_Set() const{
    return m_nvidia_driver_version_isSet;
}

bool OAIVirtualMachine::is_nvidia_driver_version_Valid() const{
    return m_nvidia_driver_version_isValid;
}

bool OAIVirtualMachine::isPreemptible() const {
    return m_preemptible;
}
void OAIVirtualMachine::setPreemptible(const bool &preemptible) {
    m_preemptible = preemptible;
    m_preemptible_isSet = true;
}

bool OAIVirtualMachine::is_preemptible_Set() const{
    return m_preemptible_isSet;
}

bool OAIVirtualMachine::is_preemptible_Valid() const{
    return m_preemptible_isValid;
}

QString OAIVirtualMachine::getReservation() const {
    return m_reservation;
}
void OAIVirtualMachine::setReservation(const QString &reservation) {
    m_reservation = reservation;
    m_reservation_isSet = true;
}

bool OAIVirtualMachine::is_reservation_Set() const{
    return m_reservation_isSet;
}

bool OAIVirtualMachine::is_reservation_Valid() const{
    return m_reservation_isValid;
}

OAIServiceAccount OAIVirtualMachine::getServiceAccount() const {
    return m_service_account;
}
void OAIVirtualMachine::setServiceAccount(const OAIServiceAccount &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIVirtualMachine::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIVirtualMachine::is_service_account_Valid() const{
    return m_service_account_isValid;
}

QList<OAIVolume> OAIVirtualMachine::getVolumes() const {
    return m_volumes;
}
void OAIVirtualMachine::setVolumes(const QList<OAIVolume> &volumes) {
    m_volumes = volumes;
    m_volumes_isSet = true;
}

bool OAIVirtualMachine::is_volumes_Set() const{
    return m_volumes_isSet;
}

bool OAIVirtualMachine::is_volumes_Valid() const{
    return m_volumes_isValid;
}

bool OAIVirtualMachine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accelerators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_boot_disk_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boot_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_cache_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_stackdriver_monitoring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nvidia_driver_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preemptible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
