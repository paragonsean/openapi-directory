/**
 * Genomics API
 * Uploads, processes, queries, and searches Genomics data in the cloud.
 *
 * The version of the OpenAPI document: v2alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolume.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolume::OAIVolume(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolume::OAIVolume() {
    this->initializeModel();
}

OAIVolume::~OAIVolume() {}

void OAIVolume::initializeModel() {

    m_existing_disk_isSet = false;
    m_existing_disk_isValid = false;

    m_nfs_mount_isSet = false;
    m_nfs_mount_isValid = false;

    m_persistent_disk_isSet = false;
    m_persistent_disk_isValid = false;

    m_volume_isSet = false;
    m_volume_isValid = false;
}

void OAIVolume::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolume::fromJsonObject(QJsonObject json) {

    m_existing_disk_isValid = ::OpenAPI::fromJsonValue(m_existing_disk, json[QString("existingDisk")]);
    m_existing_disk_isSet = !json[QString("existingDisk")].isNull() && m_existing_disk_isValid;

    m_nfs_mount_isValid = ::OpenAPI::fromJsonValue(m_nfs_mount, json[QString("nfsMount")]);
    m_nfs_mount_isSet = !json[QString("nfsMount")].isNull() && m_nfs_mount_isValid;

    m_persistent_disk_isValid = ::OpenAPI::fromJsonValue(m_persistent_disk, json[QString("persistentDisk")]);
    m_persistent_disk_isSet = !json[QString("persistentDisk")].isNull() && m_persistent_disk_isValid;

    m_volume_isValid = ::OpenAPI::fromJsonValue(m_volume, json[QString("volume")]);
    m_volume_isSet = !json[QString("volume")].isNull() && m_volume_isValid;
}

QString OAIVolume::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolume::asJsonObject() const {
    QJsonObject obj;
    if (m_existing_disk.isSet()) {
        obj.insert(QString("existingDisk"), ::OpenAPI::toJsonValue(m_existing_disk));
    }
    if (m_nfs_mount.isSet()) {
        obj.insert(QString("nfsMount"), ::OpenAPI::toJsonValue(m_nfs_mount));
    }
    if (m_persistent_disk.isSet()) {
        obj.insert(QString("persistentDisk"), ::OpenAPI::toJsonValue(m_persistent_disk));
    }
    if (m_volume_isSet) {
        obj.insert(QString("volume"), ::OpenAPI::toJsonValue(m_volume));
    }
    return obj;
}

OAIExistingDisk OAIVolume::getExistingDisk() const {
    return m_existing_disk;
}
void OAIVolume::setExistingDisk(const OAIExistingDisk &existing_disk) {
    m_existing_disk = existing_disk;
    m_existing_disk_isSet = true;
}

bool OAIVolume::is_existing_disk_Set() const{
    return m_existing_disk_isSet;
}

bool OAIVolume::is_existing_disk_Valid() const{
    return m_existing_disk_isValid;
}

OAINFSMount OAIVolume::getNfsMount() const {
    return m_nfs_mount;
}
void OAIVolume::setNfsMount(const OAINFSMount &nfs_mount) {
    m_nfs_mount = nfs_mount;
    m_nfs_mount_isSet = true;
}

bool OAIVolume::is_nfs_mount_Set() const{
    return m_nfs_mount_isSet;
}

bool OAIVolume::is_nfs_mount_Valid() const{
    return m_nfs_mount_isValid;
}

OAIPersistentDisk OAIVolume::getPersistentDisk() const {
    return m_persistent_disk;
}
void OAIVolume::setPersistentDisk(const OAIPersistentDisk &persistent_disk) {
    m_persistent_disk = persistent_disk;
    m_persistent_disk_isSet = true;
}

bool OAIVolume::is_persistent_disk_Set() const{
    return m_persistent_disk_isSet;
}

bool OAIVolume::is_persistent_disk_Valid() const{
    return m_persistent_disk_isValid;
}

QString OAIVolume::getVolume() const {
    return m_volume;
}
void OAIVolume::setVolume(const QString &volume) {
    m_volume = volume;
    m_volume_isSet = true;
}

bool OAIVolume::is_volume_Set() const{
    return m_volume_isSet;
}

bool OAIVolume::is_volume_Valid() const{
    return m_volume_isValid;
}

bool OAIVolume::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_existing_disk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfs_mount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistent_disk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolume::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
