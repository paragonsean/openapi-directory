/**
 * Genomics API
 * Uploads, processes, queries, and searches Genomics data in the cloud.
 *
 * The version of the OpenAPI document: v2alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExistingDisk model module.
 * @module model/ExistingDisk
 * @version v2alpha1
 */
class ExistingDisk {
    /**
     * Constructs a new <code>ExistingDisk</code>.
     * Configuration for an existing disk to be attached to the VM.
     * @alias module:model/ExistingDisk
     */
    constructor() { 
        
        ExistingDisk.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExistingDisk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExistingDisk} obj Optional instance to populate.
     * @return {module:model/ExistingDisk} The populated <code>ExistingDisk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExistingDisk();

            if (data.hasOwnProperty('disk')) {
                obj['disk'] = ApiClient.convertToType(data['disk'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExistingDisk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExistingDisk</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['disk'] && !(typeof data['disk'] === 'string' || data['disk'] instanceof String)) {
            throw new Error("Expected the field `disk` to be a primitive type in the JSON string but got " + data['disk']);
        }

        return true;
    }


}



/**
 * If `disk` contains slashes, the Cloud Life Sciences API assumes that it is a complete URL for the disk. If `disk` does not contain slashes, the Cloud Life Sciences API assumes that the disk is a zonal disk and a URL will be generated of the form `zones//disks/`, where `` is the zone in which the instance is allocated. The disk must be ext4 formatted. If all `Mount` references to this disk have the `read_only` flag set to true, the disk will be attached in `read-only` mode and can be shared with other instances. Otherwise, the disk will be available for writing but cannot be shared.
 * @member {String} disk
 */
ExistingDisk.prototype['disk'] = undefined;






export default ExistingDisk;

