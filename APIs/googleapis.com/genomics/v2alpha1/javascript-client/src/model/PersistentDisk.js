/**
 * Genomics API
 * Uploads, processes, queries, and searches Genomics data in the cloud.
 *
 * The version of the OpenAPI document: v2alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PersistentDisk model module.
 * @module model/PersistentDisk
 * @version v2alpha1
 */
class PersistentDisk {
    /**
     * Constructs a new <code>PersistentDisk</code>.
     * Configuration for a persistent disk to be attached to the VM. See https://cloud.google.com/compute/docs/disks/performance for more information about disk type, size, and performance considerations.
     * @alias module:model/PersistentDisk
     */
    constructor() { 
        
        PersistentDisk.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PersistentDisk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PersistentDisk} obj Optional instance to populate.
     * @return {module:model/PersistentDisk} The populated <code>PersistentDisk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PersistentDisk();

            if (data.hasOwnProperty('sizeGb')) {
                obj['sizeGb'] = ApiClient.convertToType(data['sizeGb'], 'Number');
            }
            if (data.hasOwnProperty('sourceImage')) {
                obj['sourceImage'] = ApiClient.convertToType(data['sourceImage'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PersistentDisk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PersistentDisk</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['sourceImage'] && !(typeof data['sourceImage'] === 'string' || data['sourceImage'] instanceof String)) {
            throw new Error("Expected the field `sourceImage` to be a primitive type in the JSON string but got " + data['sourceImage']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The size, in GB, of the disk to attach. If the size is not specified, a default is chosen to ensure reasonable I/O performance. If the disk type is specified as `local-ssd`, multiple local drives are automatically combined to provide the requested size. Note, however, that each physical SSD is 375GB in size, and no more than 8 drives can be attached to a single instance.
 * @member {Number} sizeGb
 */
PersistentDisk.prototype['sizeGb'] = undefined;

/**
 * An image to put on the disk before attaching it to the VM.
 * @member {String} sourceImage
 */
PersistentDisk.prototype['sourceImage'] = undefined;

/**
 * The Compute Engine disk type. If unspecified, `pd-standard` is used.
 * @member {String} type
 */
PersistentDisk.prototype['type'] = undefined;






export default PersistentDisk;

