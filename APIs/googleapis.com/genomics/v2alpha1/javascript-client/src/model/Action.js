/**
 * Genomics API
 * Uploads, processes, queries, and searches Genomics data in the cloud.
 *
 * The version of the OpenAPI document: v2alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Mount from './Mount';
import Secret from './Secret';

/**
 * The Action model module.
 * @module model/Action
 * @version v2alpha1
 */
class Action {
    /**
     * Constructs a new <code>Action</code>.
     * Specifies a single action that runs a Docker container.
     * @alias module:model/Action
     */
    constructor() { 
        
        Action.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Action</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Action} obj Optional instance to populate.
     * @return {module:model/Action} The populated <code>Action</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Action();

            if (data.hasOwnProperty('commands')) {
                obj['commands'] = ApiClient.convertToType(data['commands'], ['String']);
            }
            if (data.hasOwnProperty('credentials')) {
                obj['credentials'] = Secret.constructFromObject(data['credentials']);
            }
            if (data.hasOwnProperty('encryptedEnvironment')) {
                obj['encryptedEnvironment'] = Secret.constructFromObject(data['encryptedEnvironment']);
            }
            if (data.hasOwnProperty('entrypoint')) {
                obj['entrypoint'] = ApiClient.convertToType(data['entrypoint'], 'String');
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = ApiClient.convertToType(data['environment'], {'String': 'String'});
            }
            if (data.hasOwnProperty('flags')) {
                obj['flags'] = ApiClient.convertToType(data['flags'], ['String']);
            }
            if (data.hasOwnProperty('imageUri')) {
                obj['imageUri'] = ApiClient.convertToType(data['imageUri'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('mounts')) {
                obj['mounts'] = ApiClient.convertToType(data['mounts'], [Mount]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pidNamespace')) {
                obj['pidNamespace'] = ApiClient.convertToType(data['pidNamespace'], 'String');
            }
            if (data.hasOwnProperty('portMappings')) {
                obj['portMappings'] = ApiClient.convertToType(data['portMappings'], {'String': 'Number'});
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Action</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Action</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['commands'])) {
            throw new Error("Expected the field `commands` to be an array in the JSON data but got " + data['commands']);
        }
        // validate the optional field `credentials`
        if (data['credentials']) { // data not null
          Secret.validateJSON(data['credentials']);
        }
        // validate the optional field `encryptedEnvironment`
        if (data['encryptedEnvironment']) { // data not null
          Secret.validateJSON(data['encryptedEnvironment']);
        }
        // ensure the json data is a string
        if (data['entrypoint'] && !(typeof data['entrypoint'] === 'string' || data['entrypoint'] instanceof String)) {
            throw new Error("Expected the field `entrypoint` to be a primitive type in the JSON string but got " + data['entrypoint']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['flags'])) {
            throw new Error("Expected the field `flags` to be an array in the JSON data but got " + data['flags']);
        }
        // ensure the json data is a string
        if (data['imageUri'] && !(typeof data['imageUri'] === 'string' || data['imageUri'] instanceof String)) {
            throw new Error("Expected the field `imageUri` to be a primitive type in the JSON string but got " + data['imageUri']);
        }
        if (data['mounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mounts'])) {
                throw new Error("Expected the field `mounts` to be an array in the JSON data but got " + data['mounts']);
            }
            // validate the optional field `mounts` (array)
            for (const item of data['mounts']) {
                Mount.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['pidNamespace'] && !(typeof data['pidNamespace'] === 'string' || data['pidNamespace'] instanceof String)) {
            throw new Error("Expected the field `pidNamespace` to be a primitive type in the JSON string but got " + data['pidNamespace']);
        }
        // ensure the json data is a string
        if (data['timeout'] && !(typeof data['timeout'] === 'string' || data['timeout'] instanceof String)) {
            throw new Error("Expected the field `timeout` to be a primitive type in the JSON string but got " + data['timeout']);
        }

        return true;
    }


}



/**
 * If specified, overrides the `CMD` specified in the container. If the container also has an `ENTRYPOINT` the values are used as entrypoint arguments. Otherwise, they are used as a command and arguments to run inside the container.
 * @member {Array.<String>} commands
 */
Action.prototype['commands'] = undefined;

/**
 * @member {module:model/Secret} credentials
 */
Action.prototype['credentials'] = undefined;

/**
 * @member {module:model/Secret} encryptedEnvironment
 */
Action.prototype['encryptedEnvironment'] = undefined;

/**
 * If specified, overrides the `ENTRYPOINT` specified in the container.
 * @member {String} entrypoint
 */
Action.prototype['entrypoint'] = undefined;

/**
 * The environment to pass into the container. This environment is merged with values specified in the google.genomics.v2alpha1.Pipeline message, overwriting any duplicate values. In addition to the values passed here, a few other values are automatically injected into the environment. These cannot be hidden or overwritten. `GOOGLE_PIPELINE_FAILED` will be set to \"1\" if the pipeline failed because an action has exited with a non-zero status (and did not have the `IGNORE_EXIT_STATUS` flag set). This can be used to determine if additional debug or logging actions should execute. `GOOGLE_LAST_EXIT_STATUS` will be set to the exit status of the last non-background action that executed. This can be used by workflow engine authors to determine whether an individual action has succeeded or failed.
 * @member {Object.<String, String>} environment
 */
Action.prototype['environment'] = undefined;

/**
 * The set of flags to apply to this action.
 * @member {Array.<module:model/Action.FlagsEnum>} flags
 */
Action.prototype['flags'] = undefined;

/**
 * Required. The URI to pull the container image from. Note that all images referenced by actions in the pipeline are pulled before the first action runs. If multiple actions reference the same image, it is only pulled once, ensuring that the same image is used for all actions in a single pipeline. The image URI can be either a complete host and image specification (e.g., quay.io/biocontainers/samtools), a library and image name (e.g., google/cloud-sdk) or a bare image name ('bash') to pull from the default library. No schema is required in any of these cases. If the specified image is not public, the service account specified for the Virtual Machine must have access to pull the images from GCR, or appropriate credentials must be specified in the google.genomics.v2alpha1.Action.credentials field.
 * @member {String} imageUri
 */
Action.prototype['imageUri'] = undefined;

/**
 * Labels to associate with the action. This field is provided to assist workflow engine authors in identifying actions (for example, to indicate what sort of action they perform, such as localization or debugging). They are returned in the operation metadata, but are otherwise ignored.
 * @member {Object.<String, String>} labels
 */
Action.prototype['labels'] = undefined;

/**
 * A list of mounts to make available to the action. In addition to the values specified here, every action has a special virtual disk mounted under `/google` that contains log files and other operational components. - /google/logs All logs written during the pipeline execution. - /google/logs/output The combined standard output and standard error of all actions run as part of the pipeline execution. - /google/logs/action/_*_/stdout The complete contents of each individual action's standard output. - /google/logs/action/_*_/stderr The complete contents of each individual action's standard error output. 
 * @member {Array.<module:model/Mount>} mounts
 */
Action.prototype['mounts'] = undefined;

/**
 * An optional name for the container. The container hostname will be set to this name, making it useful for inter-container communication. The name must contain only upper and lowercase alphanumeric characters and hyphens and cannot start with a hyphen.
 * @member {String} name
 */
Action.prototype['name'] = undefined;

/**
 * An optional identifier for a PID namespace to run the action inside. Multiple actions should use the same string to share a namespace. If unspecified, a separate isolated namespace is used.
 * @member {String} pidNamespace
 */
Action.prototype['pidNamespace'] = undefined;

/**
 * A map of containers to host port mappings for this container. If the container already specifies exposed ports, use the `PUBLISH_EXPOSED_PORTS` flag instead. The host port number must be less than 65536. If it is zero, an unused random port is assigned. To determine the resulting port number, consult the `ContainerStartedEvent` in the operation metadata.
 * @member {Object.<String, Number>} portMappings
 */
Action.prototype['portMappings'] = undefined;

/**
 * The maximum amount of time to give the action to complete. If the action fails to complete before the timeout, it will be terminated and the exit status will be non-zero. The pipeline will continue or terminate based on the rules defined by the `ALWAYS_RUN` and `IGNORE_EXIT_STATUS` flags.
 * @member {String} timeout
 */
Action.prototype['timeout'] = undefined;





/**
 * Allowed values for the <code>flags</code> property.
 * @enum {String}
 * @readonly
 */
Action['FlagsEnum'] = {

    /**
     * value: "FLAG_UNSPECIFIED"
     * @const
     */
    "FLAG_UNSPECIFIED": "FLAG_UNSPECIFIED",

    /**
     * value: "IGNORE_EXIT_STATUS"
     * @const
     */
    "IGNORE_EXIT_STATUS": "IGNORE_EXIT_STATUS",

    /**
     * value: "RUN_IN_BACKGROUND"
     * @const
     */
    "RUN_IN_BACKGROUND": "RUN_IN_BACKGROUND",

    /**
     * value: "ALWAYS_RUN"
     * @const
     */
    "ALWAYS_RUN": "ALWAYS_RUN",

    /**
     * value: "ENABLE_FUSE"
     * @const
     */
    "ENABLE_FUSE": "ENABLE_FUSE",

    /**
     * value: "PUBLISH_EXPOSED_PORTS"
     * @const
     */
    "PUBLISH_EXPOSED_PORTS": "PUBLISH_EXPOSED_PORTS",

    /**
     * value: "DISABLE_IMAGE_PREFETCH"
     * @const
     */
    "DISABLE_IMAGE_PREFETCH": "DISABLE_IMAGE_PREFETCH",

    /**
     * value: "DISABLE_STANDARD_ERROR_CAPTURE"
     * @const
     */
    "DISABLE_STANDARD_ERROR_CAPTURE": "DISABLE_STANDARD_ERROR_CAPTURE",

    /**
     * value: "BLOCK_EXTERNAL_NETWORK"
     * @const
     */
    "BLOCK_EXTERNAL_NETWORK": "BLOCK_EXTERNAL_NETWORK"
};



export default Action;

