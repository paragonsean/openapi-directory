/**
 * My Business Account Management API
 * The My Business Account Management API provides an interface for managing access to a location on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferLocationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferLocationRequest::OAITransferLocationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferLocationRequest::OAITransferLocationRequest() {
    this->initializeModel();
}

OAITransferLocationRequest::~OAITransferLocationRequest() {}

void OAITransferLocationRequest::initializeModel() {

    m_destination_account_isSet = false;
    m_destination_account_isValid = false;
}

void OAITransferLocationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferLocationRequest::fromJsonObject(QJsonObject json) {

    m_destination_account_isValid = ::OpenAPI::fromJsonValue(m_destination_account, json[QString("destinationAccount")]);
    m_destination_account_isSet = !json[QString("destinationAccount")].isNull() && m_destination_account_isValid;
}

QString OAITransferLocationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferLocationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_account_isSet) {
        obj.insert(QString("destinationAccount"), ::OpenAPI::toJsonValue(m_destination_account));
    }
    return obj;
}

QString OAITransferLocationRequest::getDestinationAccount() const {
    return m_destination_account;
}
void OAITransferLocationRequest::setDestinationAccount(const QString &destination_account) {
    m_destination_account = destination_account;
    m_destination_account_isSet = true;
}

bool OAITransferLocationRequest::is_destination_account_Set() const{
    return m_destination_account_isSet;
}

bool OAITransferLocationRequest::is_destination_account_Valid() const{
    return m_destination_account_isValid;
}

bool OAITransferLocationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_account_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferLocationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
