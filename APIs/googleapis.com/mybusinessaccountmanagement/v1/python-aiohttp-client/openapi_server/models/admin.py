# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Admin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, admin: str=None, name: str=None, pending_invitation: bool=None, role: str=None):
        """Admin - a model defined in OpenAPI

        :param account: The account of this Admin.
        :param admin: The admin of this Admin.
        :param name: The name of this Admin.
        :param pending_invitation: The pending_invitation of this Admin.
        :param role: The role of this Admin.
        """
        self.openapi_types = {
            'account': str,
            'admin': str,
            'name': str,
            'pending_invitation': bool,
            'role': str
        }

        self.attribute_map = {
            'account': 'account',
            'admin': 'admin',
            'name': 'name',
            'pending_invitation': 'pendingInvitation',
            'role': 'role'
        }

        self._account = account
        self._admin = admin
        self._name = name
        self._pending_invitation = pending_invitation
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Admin':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Admin of this Admin.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this Admin.

        Immutable. The name of the Account resource that this Admin refers to. Used when calling locations.admins.create to invite a LocationGroup as an admin. If both this field and `admin` are set on `CREATE` requests, this field takes precedence and the email address in `admin` will be ignored. Format: `accounts/{account}`.

        :return: The account of this Admin.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Admin.

        Immutable. The name of the Account resource that this Admin refers to. Used when calling locations.admins.create to invite a LocationGroup as an admin. If both this field and `admin` are set on `CREATE` requests, this field takes precedence and the email address in `admin` will be ignored. Format: `accounts/{account}`.

        :param account: The account of this Admin.
        :type account: str
        """

        self._account = account

    @property
    def admin(self):
        """Gets the admin of this Admin.

        Optional. The name of the admin. When making the initial invitation, this is the invitee's email address. On `GET` calls, the user's email address is returned if the invitation is still pending. Otherwise, it contains the user's first and last names. This field is only needed to be set during admin creation.

        :return: The admin of this Admin.
        :rtype: str
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this Admin.

        Optional. The name of the admin. When making the initial invitation, this is the invitee's email address. On `GET` calls, the user's email address is returned if the invitation is still pending. Otherwise, it contains the user's first and last names. This field is only needed to be set during admin creation.

        :param admin: The admin of this Admin.
        :type admin: str
        """

        self._admin = admin

    @property
    def name(self):
        """Gets the name of this Admin.

        Immutable. The resource name. For account admins, this is in the form: `accounts/{account_id}/admins/{admin_id}` For location admins, this is in the form: `locations/{location_id}/admins/{admin_id}` This field will be ignored if set during admin creation.

        :return: The name of this Admin.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Admin.

        Immutable. The resource name. For account admins, this is in the form: `accounts/{account_id}/admins/{admin_id}` For location admins, this is in the form: `locations/{location_id}/admins/{admin_id}` This field will be ignored if set during admin creation.

        :param name: The name of this Admin.
        :type name: str
        """

        self._name = name

    @property
    def pending_invitation(self):
        """Gets the pending_invitation of this Admin.

        Output only. Indicates whether this admin has a pending invitation for the specified resource.

        :return: The pending_invitation of this Admin.
        :rtype: bool
        """
        return self._pending_invitation

    @pending_invitation.setter
    def pending_invitation(self, pending_invitation):
        """Sets the pending_invitation of this Admin.

        Output only. Indicates whether this admin has a pending invitation for the specified resource.

        :param pending_invitation: The pending_invitation of this Admin.
        :type pending_invitation: bool
        """

        self._pending_invitation = pending_invitation

    @property
    def role(self):
        """Gets the role of this Admin.

        Required. Specifies the role that this admin uses with the specified Account or Location.

        :return: The role of this Admin.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Admin.

        Required. Specifies the role that this admin uses with the specified Account or Location.

        :param role: The role of this Admin.
        :type role: str
        """
        allowed_values = ["ADMIN_ROLE_UNSPECIFIED", "PRIMARY_OWNER", "OWNER", "MANAGER", "SITE_MANAGER"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role
