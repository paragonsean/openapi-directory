# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.organization_info import OrganizationInfo
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None, account_number: str=None, name: str=None, organization_info: OrganizationInfo=None, permission_level: str=None, primary_owner: str=None, role: str=None, type: str=None, verification_state: str=None, vetted_state: str=None):
        """Account - a model defined in OpenAPI

        :param account_name: The account_name of this Account.
        :param account_number: The account_number of this Account.
        :param name: The name of this Account.
        :param organization_info: The organization_info of this Account.
        :param permission_level: The permission_level of this Account.
        :param primary_owner: The primary_owner of this Account.
        :param role: The role of this Account.
        :param type: The type of this Account.
        :param verification_state: The verification_state of this Account.
        :param vetted_state: The vetted_state of this Account.
        """
        self.openapi_types = {
            'account_name': str,
            'account_number': str,
            'name': str,
            'organization_info': OrganizationInfo,
            'permission_level': str,
            'primary_owner': str,
            'role': str,
            'type': str,
            'verification_state': str,
            'vetted_state': str
        }

        self.attribute_map = {
            'account_name': 'accountName',
            'account_number': 'accountNumber',
            'name': 'name',
            'organization_info': 'organizationInfo',
            'permission_level': 'permissionLevel',
            'primary_owner': 'primaryOwner',
            'role': 'role',
            'type': 'type',
            'verification_state': 'verificationState',
            'vetted_state': 'vettedState'
        }

        self._account_name = account_name
        self._account_number = account_number
        self._name = name
        self._organization_info = organization_info
        self._permission_level = permission_level
        self._primary_owner = primary_owner
        self._role = role
        self._type = type
        self._verification_state = verification_state
        self._vetted_state = vetted_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this Account.

        Required. The name of the account. For an account of type `PERSONAL`, this is the first and last name of the user account.

        :return: The account_name of this Account.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this Account.

        Required. The name of the account. For an account of type `PERSONAL`, this is the first and last name of the user account.

        :param account_name: The account_name of this Account.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def account_number(self):
        """Gets the account_number of this Account.

        Output only. Account reference number if provisioned.

        :return: The account_number of this Account.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this Account.

        Output only. Account reference number if provisioned.

        :param account_number: The account_number of this Account.
        :type account_number: str
        """

        self._account_number = account_number

    @property
    def name(self):
        """Gets the name of this Account.

        Immutable. The resource name, in the format `accounts/{account_id}`.

        :return: The name of this Account.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.

        Immutable. The resource name, in the format `accounts/{account_id}`.

        :param name: The name of this Account.
        :type name: str
        """

        self._name = name

    @property
    def organization_info(self):
        """Gets the organization_info of this Account.


        :return: The organization_info of this Account.
        :rtype: OrganizationInfo
        """
        return self._organization_info

    @organization_info.setter
    def organization_info(self, organization_info):
        """Sets the organization_info of this Account.


        :param organization_info: The organization_info of this Account.
        :type organization_info: OrganizationInfo
        """

        self._organization_info = organization_info

    @property
    def permission_level(self):
        """Gets the permission_level of this Account.

        Output only. Specifies the permission level the user has for this account.

        :return: The permission_level of this Account.
        :rtype: str
        """
        return self._permission_level

    @permission_level.setter
    def permission_level(self, permission_level):
        """Sets the permission_level of this Account.

        Output only. Specifies the permission level the user has for this account.

        :param permission_level: The permission_level of this Account.
        :type permission_level: str
        """
        allowed_values = ["PERMISSION_LEVEL_UNSPECIFIED", "OWNER_LEVEL", "MEMBER_LEVEL"]  # noqa: E501
        if permission_level not in allowed_values:
            raise ValueError(
                "Invalid value for `permission_level` ({0}), must be one of {1}"
                .format(permission_level, allowed_values)
            )

        self._permission_level = permission_level

    @property
    def primary_owner(self):
        """Gets the primary_owner of this Account.

        Required. Input only. The resource name of the account which will be the primary owner of the account being created. It should be of the form `accounts/{account_id}`.

        :return: The primary_owner of this Account.
        :rtype: str
        """
        return self._primary_owner

    @primary_owner.setter
    def primary_owner(self, primary_owner):
        """Sets the primary_owner of this Account.

        Required. Input only. The resource name of the account which will be the primary owner of the account being created. It should be of the form `accounts/{account_id}`.

        :param primary_owner: The primary_owner of this Account.
        :type primary_owner: str
        """

        self._primary_owner = primary_owner

    @property
    def role(self):
        """Gets the role of this Account.

        Output only. Specifies the AccountRole of this account.

        :return: The role of this Account.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Account.

        Output only. Specifies the AccountRole of this account.

        :param role: The role of this Account.
        :type role: str
        """
        allowed_values = ["ACCOUNT_ROLE_UNSPECIFIED", "PRIMARY_OWNER", "OWNER", "MANAGER", "SITE_MANAGER"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def type(self):
        """Gets the type of this Account.

        Required. Contains the type of account. Accounts of type PERSONAL and ORGANIZATION cannot be created using this API.

        :return: The type of this Account.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Account.

        Required. Contains the type of account. Accounts of type PERSONAL and ORGANIZATION cannot be created using this API.

        :param type: The type of this Account.
        :type type: str
        """
        allowed_values = ["ACCOUNT_TYPE_UNSPECIFIED", "PERSONAL", "LOCATION_GROUP", "USER_GROUP", "ORGANIZATION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def verification_state(self):
        """Gets the verification_state of this Account.

        Output only. If verified, future locations that are created are automatically connected to Google Maps, and have Google+ pages created, without requiring moderation.

        :return: The verification_state of this Account.
        :rtype: str
        """
        return self._verification_state

    @verification_state.setter
    def verification_state(self, verification_state):
        """Sets the verification_state of this Account.

        Output only. If verified, future locations that are created are automatically connected to Google Maps, and have Google+ pages created, without requiring moderation.

        :param verification_state: The verification_state of this Account.
        :type verification_state: str
        """
        allowed_values = ["VERIFICATION_STATE_UNSPECIFIED", "VERIFIED", "UNVERIFIED", "VERIFICATION_REQUESTED"]  # noqa: E501
        if verification_state not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_state` ({0}), must be one of {1}"
                .format(verification_state, allowed_values)
            )

        self._verification_state = verification_state

    @property
    def vetted_state(self):
        """Gets the vetted_state of this Account.

        Output only. Indicates whether the account is vetted by Google. A vetted account is able to verify locations via the VETTED_PARTNER method.

        :return: The vetted_state of this Account.
        :rtype: str
        """
        return self._vetted_state

    @vetted_state.setter
    def vetted_state(self, vetted_state):
        """Sets the vetted_state of this Account.

        Output only. Indicates whether the account is vetted by Google. A vetted account is able to verify locations via the VETTED_PARTNER method.

        :param vetted_state: The vetted_state of this Account.
        :type vetted_state: str
        """
        allowed_values = ["VETTED_STATE_UNSPECIFIED", "NOT_VETTED", "VETTED", "INVALID"]  # noqa: E501
        if vetted_state not in allowed_values:
            raise ValueError(
                "Invalid value for `vetted_state` ({0}), must be one of {1}"
                .format(vetted_state, allowed_values)
            )

        self._vetted_state = vetted_state
