# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account import Account
from openapi_server.models.target_location import TargetLocation
from openapi_server import util


class Invitation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, role: str=None, target_account: Account=None, target_location: TargetLocation=None, target_type: str=None):
        """Invitation - a model defined in OpenAPI

        :param name: The name of this Invitation.
        :param role: The role of this Invitation.
        :param target_account: The target_account of this Invitation.
        :param target_location: The target_location of this Invitation.
        :param target_type: The target_type of this Invitation.
        """
        self.openapi_types = {
            'name': str,
            'role': str,
            'target_account': Account,
            'target_location': TargetLocation,
            'target_type': str
        }

        self.attribute_map = {
            'name': 'name',
            'role': 'role',
            'target_account': 'targetAccount',
            'target_location': 'targetLocation',
            'target_type': 'targetType'
        }

        self._name = name
        self._role = role
        self._target_account = target_account
        self._target_location = target_location
        self._target_type = target_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Invitation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Invitation of this Invitation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Invitation.

        Required. The resource name for the invitation. `accounts/{account_id}/invitations/{invitation_id}`.

        :return: The name of this Invitation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Invitation.

        Required. The resource name for the invitation. `accounts/{account_id}/invitations/{invitation_id}`.

        :param name: The name of this Invitation.
        :type name: str
        """

        self._name = name

    @property
    def role(self):
        """Gets the role of this Invitation.

        Output only. The invited role on the account.

        :return: The role of this Invitation.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Invitation.

        Output only. The invited role on the account.

        :param role: The role of this Invitation.
        :type role: str
        """
        allowed_values = ["ADMIN_ROLE_UNSPECIFIED", "PRIMARY_OWNER", "OWNER", "MANAGER", "SITE_MANAGER"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def target_account(self):
        """Gets the target_account of this Invitation.


        :return: The target_account of this Invitation.
        :rtype: Account
        """
        return self._target_account

    @target_account.setter
    def target_account(self, target_account):
        """Sets the target_account of this Invitation.


        :param target_account: The target_account of this Invitation.
        :type target_account: Account
        """

        self._target_account = target_account

    @property
    def target_location(self):
        """Gets the target_location of this Invitation.


        :return: The target_location of this Invitation.
        :rtype: TargetLocation
        """
        return self._target_location

    @target_location.setter
    def target_location(self, target_location):
        """Sets the target_location of this Invitation.


        :param target_location: The target_location of this Invitation.
        :type target_location: TargetLocation
        """

        self._target_location = target_location

    @property
    def target_type(self):
        """Gets the target_type of this Invitation.

        Output only. Specifies which target types should appear in the response.

        :return: The target_type of this Invitation.
        :rtype: str
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this Invitation.

        Output only. Specifies which target types should appear in the response.

        :param target_type: The target_type of this Invitation.
        :type target_type: str
        """
        allowed_values = ["TARGET_TYPE_UNSPECIFIED", "ACCOUNTS_ONLY", "LOCATIONS_ONLY"]  # noqa: E501
        if target_type not in allowed_values:
            raise ValueError(
                "Invalid value for `target_type` ({0}), must be one of {1}"
                .format(target_type, allowed_values)
            )

        self._target_type = target_type
