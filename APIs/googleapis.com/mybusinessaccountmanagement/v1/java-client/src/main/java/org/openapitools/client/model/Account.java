/*
 * My Business Account Management API
 * The My Business Account Management API provides an interface for managing access to a location on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OrganizationInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An account is a container for your location. If you are the only user who manages locations for your business, you can use your personal Google Account. To share management of locations with multiple users, [create a business account] (https://support.google.com/business/answer/6085339?ref_topic&#x3D;6085325).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:05.994085-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Account {
  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "accountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORGANIZATION_INFO = "organizationInfo";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_INFO)
  private OrganizationInfo organizationInfo;

  /**
   * Output only. Specifies the permission level the user has for this account.
   */
  @JsonAdapter(PermissionLevelEnum.Adapter.class)
  public enum PermissionLevelEnum {
    PERMISSION_LEVEL_UNSPECIFIED("PERMISSION_LEVEL_UNSPECIFIED"),
    
    OWNER_LEVEL("OWNER_LEVEL"),
    
    MEMBER_LEVEL("MEMBER_LEVEL");

    private String value;

    PermissionLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PermissionLevelEnum fromValue(String value) {
      for (PermissionLevelEnum b : PermissionLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PermissionLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PermissionLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PermissionLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PermissionLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PermissionLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERMISSION_LEVEL = "permissionLevel";
  @SerializedName(SERIALIZED_NAME_PERMISSION_LEVEL)
  private PermissionLevelEnum permissionLevel;

  public static final String SERIALIZED_NAME_PRIMARY_OWNER = "primaryOwner";
  @SerializedName(SERIALIZED_NAME_PRIMARY_OWNER)
  private String primaryOwner;

  /**
   * Output only. Specifies the AccountRole of this account.
   */
  @JsonAdapter(RoleEnum.Adapter.class)
  public enum RoleEnum {
    ACCOUNT_ROLE_UNSPECIFIED("ACCOUNT_ROLE_UNSPECIFIED"),
    
    PRIMARY_OWNER("PRIMARY_OWNER"),
    
    OWNER("OWNER"),
    
    MANAGER("MANAGER"),
    
    SITE_MANAGER("SITE_MANAGER");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private RoleEnum role;

  /**
   * Required. Contains the type of account. Accounts of type PERSONAL and ORGANIZATION cannot be created using this API.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ACCOUNT_TYPE_UNSPECIFIED("ACCOUNT_TYPE_UNSPECIFIED"),
    
    PERSONAL("PERSONAL"),
    
    LOCATION_GROUP("LOCATION_GROUP"),
    
    USER_GROUP("USER_GROUP"),
    
    ORGANIZATION("ORGANIZATION");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * Output only. If verified, future locations that are created are automatically connected to Google Maps, and have Google+ pages created, without requiring moderation.
   */
  @JsonAdapter(VerificationStateEnum.Adapter.class)
  public enum VerificationStateEnum {
    VERIFICATION_STATE_UNSPECIFIED("VERIFICATION_STATE_UNSPECIFIED"),
    
    VERIFIED("VERIFIED"),
    
    UNVERIFIED("UNVERIFIED"),
    
    VERIFICATION_REQUESTED("VERIFICATION_REQUESTED");

    private String value;

    VerificationStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VerificationStateEnum fromValue(String value) {
      for (VerificationStateEnum b : VerificationStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VerificationStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VerificationStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VerificationStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VerificationStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VerificationStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERIFICATION_STATE = "verificationState";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_STATE)
  private VerificationStateEnum verificationState;

  /**
   * Output only. Indicates whether the account is vetted by Google. A vetted account is able to verify locations via the VETTED_PARTNER method.
   */
  @JsonAdapter(VettedStateEnum.Adapter.class)
  public enum VettedStateEnum {
    VETTED_STATE_UNSPECIFIED("VETTED_STATE_UNSPECIFIED"),
    
    NOT_VETTED("NOT_VETTED"),
    
    VETTED("VETTED"),
    
    INVALID("INVALID");

    private String value;

    VettedStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VettedStateEnum fromValue(String value) {
      for (VettedStateEnum b : VettedStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VettedStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VettedStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VettedStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VettedStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VettedStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VETTED_STATE = "vettedState";
  @SerializedName(SERIALIZED_NAME_VETTED_STATE)
  private VettedStateEnum vettedState;

  public Account() {
  }

  public Account(
     String accountNumber, 
     PermissionLevelEnum permissionLevel, 
     RoleEnum role, 
     VerificationStateEnum verificationState, 
     VettedStateEnum vettedState
  ) {
    this();
    this.accountNumber = accountNumber;
    this.permissionLevel = permissionLevel;
    this.role = role;
    this.verificationState = verificationState;
    this.vettedState = vettedState;
  }

  public Account accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

  /**
   * Required. The name of the account. For an account of type &#x60;PERSONAL&#x60;, this is the first and last name of the user account.
   * @return accountName
   */
  @javax.annotation.Nullable
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  /**
   * Output only. Account reference number if provisioned.
   * @return accountNumber
   */
  @javax.annotation.Nullable
  public String getAccountNumber() {
    return accountNumber;
  }



  public Account name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. The resource name, in the format &#x60;accounts/{account_id}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Account organizationInfo(OrganizationInfo organizationInfo) {
    this.organizationInfo = organizationInfo;
    return this;
  }

  /**
   * Get organizationInfo
   * @return organizationInfo
   */
  @javax.annotation.Nullable
  public OrganizationInfo getOrganizationInfo() {
    return organizationInfo;
  }

  public void setOrganizationInfo(OrganizationInfo organizationInfo) {
    this.organizationInfo = organizationInfo;
  }


  /**
   * Output only. Specifies the permission level the user has for this account.
   * @return permissionLevel
   */
  @javax.annotation.Nullable
  public PermissionLevelEnum getPermissionLevel() {
    return permissionLevel;
  }



  public Account primaryOwner(String primaryOwner) {
    this.primaryOwner = primaryOwner;
    return this;
  }

  /**
   * Required. Input only. The resource name of the account which will be the primary owner of the account being created. It should be of the form &#x60;accounts/{account_id}&#x60;.
   * @return primaryOwner
   */
  @javax.annotation.Nullable
  public String getPrimaryOwner() {
    return primaryOwner;
  }

  public void setPrimaryOwner(String primaryOwner) {
    this.primaryOwner = primaryOwner;
  }


  /**
   * Output only. Specifies the AccountRole of this account.
   * @return role
   */
  @javax.annotation.Nullable
  public RoleEnum getRole() {
    return role;
  }



  public Account type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Required. Contains the type of account. Accounts of type PERSONAL and ORGANIZATION cannot be created using this API.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Output only. If verified, future locations that are created are automatically connected to Google Maps, and have Google+ pages created, without requiring moderation.
   * @return verificationState
   */
  @javax.annotation.Nullable
  public VerificationStateEnum getVerificationState() {
    return verificationState;
  }



  /**
   * Output only. Indicates whether the account is vetted by Google. A vetted account is able to verify locations via the VETTED_PARTNER method.
   * @return vettedState
   */
  @javax.annotation.Nullable
  public VettedStateEnum getVettedState() {
    return vettedState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.accountName, account.accountName) &&
        Objects.equals(this.accountNumber, account.accountNumber) &&
        Objects.equals(this.name, account.name) &&
        Objects.equals(this.organizationInfo, account.organizationInfo) &&
        Objects.equals(this.permissionLevel, account.permissionLevel) &&
        Objects.equals(this.primaryOwner, account.primaryOwner) &&
        Objects.equals(this.role, account.role) &&
        Objects.equals(this.type, account.type) &&
        Objects.equals(this.verificationState, account.verificationState) &&
        Objects.equals(this.vettedState, account.vettedState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountName, accountNumber, name, organizationInfo, permissionLevel, primaryOwner, role, type, verificationState, vettedState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    organizationInfo: ").append(toIndentedString(organizationInfo)).append("\n");
    sb.append("    permissionLevel: ").append(toIndentedString(permissionLevel)).append("\n");
    sb.append("    primaryOwner: ").append(toIndentedString(primaryOwner)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    verificationState: ").append(toIndentedString(verificationState)).append("\n");
    sb.append("    vettedState: ").append(toIndentedString(vettedState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountName");
    openapiFields.add("accountNumber");
    openapiFields.add("name");
    openapiFields.add("organizationInfo");
    openapiFields.add("permissionLevel");
    openapiFields.add("primaryOwner");
    openapiFields.add("role");
    openapiFields.add("type");
    openapiFields.add("verificationState");
    openapiFields.add("vettedState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Account
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Account.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Account` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountName") != null && !jsonObj.get("accountName").isJsonNull()) && !jsonObj.get("accountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountName").toString()));
      }
      if ((jsonObj.get("accountNumber") != null && !jsonObj.get("accountNumber").isJsonNull()) && !jsonObj.get("accountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumber").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `organizationInfo`
      if (jsonObj.get("organizationInfo") != null && !jsonObj.get("organizationInfo").isJsonNull()) {
        OrganizationInfo.validateJsonElement(jsonObj.get("organizationInfo"));
      }
      if ((jsonObj.get("permissionLevel") != null && !jsonObj.get("permissionLevel").isJsonNull()) && !jsonObj.get("permissionLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissionLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permissionLevel").toString()));
      }
      // validate the optional field `permissionLevel`
      if (jsonObj.get("permissionLevel") != null && !jsonObj.get("permissionLevel").isJsonNull()) {
        PermissionLevelEnum.validateJsonElement(jsonObj.get("permissionLevel"));
      }
      if ((jsonObj.get("primaryOwner") != null && !jsonObj.get("primaryOwner").isJsonNull()) && !jsonObj.get("primaryOwner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryOwner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryOwner").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // validate the optional field `role`
      if (jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) {
        RoleEnum.validateJsonElement(jsonObj.get("role"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("verificationState") != null && !jsonObj.get("verificationState").isJsonNull()) && !jsonObj.get("verificationState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationState").toString()));
      }
      // validate the optional field `verificationState`
      if (jsonObj.get("verificationState") != null && !jsonObj.get("verificationState").isJsonNull()) {
        VerificationStateEnum.validateJsonElement(jsonObj.get("verificationState"));
      }
      if ((jsonObj.get("vettedState") != null && !jsonObj.get("vettedState").isJsonNull()) && !jsonObj.get("vettedState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vettedState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vettedState").toString()));
      }
      // validate the optional field `vettedState`
      if (jsonObj.get("vettedState") != null && !jsonObj.get("vettedState").isJsonNull()) {
        VettedStateEnum.validateJsonElement(jsonObj.get("vettedState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Account given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Account
   * @throws IOException if the JSON string is invalid with respect to Account
   */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

  /**
   * Convert an instance of Account to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

