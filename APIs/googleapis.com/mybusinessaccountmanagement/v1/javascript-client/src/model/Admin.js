/**
 * My Business Account Management API
 * The My Business Account Management API provides an interface for managing access to a location on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Admin model module.
 * @module model/Admin
 * @version v1
 */
class Admin {
    /**
     * Constructs a new <code>Admin</code>.
     * An administrator of an Account or a location.
     * @alias module:model/Admin
     */
    constructor() { 
        
        Admin.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Admin</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Admin} obj Optional instance to populate.
     * @return {module:model/Admin} The populated <code>Admin</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Admin();

            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'String');
            }
            if (data.hasOwnProperty('admin')) {
                obj['admin'] = ApiClient.convertToType(data['admin'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pendingInvitation')) {
                obj['pendingInvitation'] = ApiClient.convertToType(data['pendingInvitation'], 'Boolean');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Admin</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Admin</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['account'] && !(typeof data['account'] === 'string' || data['account'] instanceof String)) {
            throw new Error("Expected the field `account` to be a primitive type in the JSON string but got " + data['account']);
        }
        // ensure the json data is a string
        if (data['admin'] && !(typeof data['admin'] === 'string' || data['admin'] instanceof String)) {
            throw new Error("Expected the field `admin` to be a primitive type in the JSON string but got " + data['admin']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }

        return true;
    }


}



/**
 * Immutable. The name of the Account resource that this Admin refers to. Used when calling locations.admins.create to invite a LocationGroup as an admin. If both this field and `admin` are set on `CREATE` requests, this field takes precedence and the email address in `admin` will be ignored. Format: `accounts/{account}`.
 * @member {String} account
 */
Admin.prototype['account'] = undefined;

/**
 * Optional. The name of the admin. When making the initial invitation, this is the invitee's email address. On `GET` calls, the user's email address is returned if the invitation is still pending. Otherwise, it contains the user's first and last names. This field is only needed to be set during admin creation.
 * @member {String} admin
 */
Admin.prototype['admin'] = undefined;

/**
 * Immutable. The resource name. For account admins, this is in the form: `accounts/{account_id}/admins/{admin_id}` For location admins, this is in the form: `locations/{location_id}/admins/{admin_id}` This field will be ignored if set during admin creation.
 * @member {String} name
 */
Admin.prototype['name'] = undefined;

/**
 * Output only. Indicates whether this admin has a pending invitation for the specified resource.
 * @member {Boolean} pendingInvitation
 */
Admin.prototype['pendingInvitation'] = undefined;

/**
 * Required. Specifies the role that this admin uses with the specified Account or Location.
 * @member {module:model/Admin.RoleEnum} role
 */
Admin.prototype['role'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
Admin['RoleEnum'] = {

    /**
     * value: "ADMIN_ROLE_UNSPECIFIED"
     * @const
     */
    "ADMIN_ROLE_UNSPECIFIED": "ADMIN_ROLE_UNSPECIFIED",

    /**
     * value: "PRIMARY_OWNER"
     * @const
     */
    "PRIMARY_OWNER": "PRIMARY_OWNER",

    /**
     * value: "OWNER"
     * @const
     */
    "OWNER": "OWNER",

    /**
     * value: "MANAGER"
     * @const
     */
    "MANAGER": "MANAGER",

    /**
     * value: "SITE_MANAGER"
     * @const
     */
    "SITE_MANAGER": "SITE_MANAGER"
};



export default Admin;

