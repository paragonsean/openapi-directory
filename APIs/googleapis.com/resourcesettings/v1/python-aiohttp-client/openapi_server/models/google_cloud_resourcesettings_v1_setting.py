# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_resourcesettings_v1_setting_metadata import GoogleCloudResourcesettingsV1SettingMetadata
from openapi_server.models.google_cloud_resourcesettings_v1_value import GoogleCloudResourcesettingsV1Value
from openapi_server import util


class GoogleCloudResourcesettingsV1Setting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, effective_value: GoogleCloudResourcesettingsV1Value=None, etag: str=None, local_value: GoogleCloudResourcesettingsV1Value=None, metadata: GoogleCloudResourcesettingsV1SettingMetadata=None, name: str=None):
        """GoogleCloudResourcesettingsV1Setting - a model defined in OpenAPI

        :param effective_value: The effective_value of this GoogleCloudResourcesettingsV1Setting.
        :param etag: The etag of this GoogleCloudResourcesettingsV1Setting.
        :param local_value: The local_value of this GoogleCloudResourcesettingsV1Setting.
        :param metadata: The metadata of this GoogleCloudResourcesettingsV1Setting.
        :param name: The name of this GoogleCloudResourcesettingsV1Setting.
        """
        self.openapi_types = {
            'effective_value': GoogleCloudResourcesettingsV1Value,
            'etag': str,
            'local_value': GoogleCloudResourcesettingsV1Value,
            'metadata': GoogleCloudResourcesettingsV1SettingMetadata,
            'name': str
        }

        self.attribute_map = {
            'effective_value': 'effectiveValue',
            'etag': 'etag',
            'local_value': 'localValue',
            'metadata': 'metadata',
            'name': 'name'
        }

        self._effective_value = effective_value
        self._etag = etag
        self._local_value = local_value
        self._metadata = metadata
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudResourcesettingsV1Setting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudResourcesettingsV1Setting of this GoogleCloudResourcesettingsV1Setting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def effective_value(self):
        """Gets the effective_value of this GoogleCloudResourcesettingsV1Setting.


        :return: The effective_value of this GoogleCloudResourcesettingsV1Setting.
        :rtype: GoogleCloudResourcesettingsV1Value
        """
        return self._effective_value

    @effective_value.setter
    def effective_value(self, effective_value):
        """Sets the effective_value of this GoogleCloudResourcesettingsV1Setting.


        :param effective_value: The effective_value of this GoogleCloudResourcesettingsV1Setting.
        :type effective_value: GoogleCloudResourcesettingsV1Value
        """

        self._effective_value = effective_value

    @property
    def etag(self):
        """Gets the etag of this GoogleCloudResourcesettingsV1Setting.

        A fingerprint used for optimistic concurrency. See UpdateSetting for more details.

        :return: The etag of this GoogleCloudResourcesettingsV1Setting.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this GoogleCloudResourcesettingsV1Setting.

        A fingerprint used for optimistic concurrency. See UpdateSetting for more details.

        :param etag: The etag of this GoogleCloudResourcesettingsV1Setting.
        :type etag: str
        """

        self._etag = etag

    @property
    def local_value(self):
        """Gets the local_value of this GoogleCloudResourcesettingsV1Setting.


        :return: The local_value of this GoogleCloudResourcesettingsV1Setting.
        :rtype: GoogleCloudResourcesettingsV1Value
        """
        return self._local_value

    @local_value.setter
    def local_value(self, local_value):
        """Sets the local_value of this GoogleCloudResourcesettingsV1Setting.


        :param local_value: The local_value of this GoogleCloudResourcesettingsV1Setting.
        :type local_value: GoogleCloudResourcesettingsV1Value
        """

        self._local_value = local_value

    @property
    def metadata(self):
        """Gets the metadata of this GoogleCloudResourcesettingsV1Setting.


        :return: The metadata of this GoogleCloudResourcesettingsV1Setting.
        :rtype: GoogleCloudResourcesettingsV1SettingMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GoogleCloudResourcesettingsV1Setting.


        :param metadata: The metadata of this GoogleCloudResourcesettingsV1Setting.
        :type metadata: GoogleCloudResourcesettingsV1SettingMetadata
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this GoogleCloudResourcesettingsV1Setting.

        The resource name of the setting. Must be in one of the following forms: * `projects/{project_number}/settings/{setting_name}` * `folders/{folder_id}/settings/{setting_name}` * `organizations/{organization_id}/settings/{setting_name}` For example, \"/projects/123/settings/gcp-enableMyFeature\"

        :return: The name of this GoogleCloudResourcesettingsV1Setting.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudResourcesettingsV1Setting.

        The resource name of the setting. Must be in one of the following forms: * `projects/{project_number}/settings/{setting_name}` * `folders/{folder_id}/settings/{setting_name}` * `organizations/{organization_id}/settings/{setting_name}` For example, \"/projects/123/settings/gcp-enableMyFeature\"

        :param name: The name of this GoogleCloudResourcesettingsV1Setting.
        :type name: str
        """

        self._name = name
