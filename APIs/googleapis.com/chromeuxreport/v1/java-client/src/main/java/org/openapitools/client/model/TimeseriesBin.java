/*
 * Chrome UX Report API
 * The Chrome UX Report API lets you view real user experience data for millions of websites. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A bin is a discrete portion of data spanning from start to end, or if no end is given, then from start to +inf. A bin&#39;s start and end values are given in the value type of the metric it represents. For example, \&quot;first contentful paint\&quot; is measured in milliseconds and exposed as ints, therefore its metric bins will use int32s for its start and end types. However, \&quot;cumulative layout shift\&quot; is measured in unitless decimals and is exposed as a decimal encoded as a string, therefore its metric bins will use strings for its value type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:54.378266-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimeseriesBin {
  public static final String SERIALIZED_NAME_DENSITIES = "densities";
  @SerializedName(SERIALIZED_NAME_DENSITIES)
  private List<Double> densities = new ArrayList<>();

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private Object end = null;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private Object start = null;

  public TimeseriesBin() {
  }

  public TimeseriesBin densities(List<Double> densities) {
    this.densities = densities;
    return this;
  }

  public TimeseriesBin addDensitiesItem(Double densitiesItem) {
    if (this.densities == null) {
      this.densities = new ArrayList<>();
    }
    this.densities.add(densitiesItem);
    return this;
  }

  /**
   * The proportion of users that experienced this bin&#39;s value for the given metric in a given collection period; the index for each of these entries corresponds to an entry in the CollectionPeriods field in the HistoryRecord message, which describes when the density was observed in the field. Thus, the length of this list of densities is equal to the length of the CollectionPeriods field in the HistoryRecord message.
   * @return densities
   */
  @javax.annotation.Nullable
  public List<Double> getDensities() {
    return densities;
  }

  public void setDensities(List<Double> densities) {
    this.densities = densities;
  }


  public TimeseriesBin end(Object end) {
    this.end = end;
    return this;
  }

  /**
   * End is the end of the data bin. If end is not populated, then the bin has no end and is valid from start to +inf.
   * @return end
   */
  @javax.annotation.Nullable
  public Object getEnd() {
    return end;
  }

  public void setEnd(Object end) {
    this.end = end;
  }


  public TimeseriesBin start(Object start) {
    this.start = start;
    return this;
  }

  /**
   * Start is the beginning of the data bin.
   * @return start
   */
  @javax.annotation.Nullable
  public Object getStart() {
    return start;
  }

  public void setStart(Object start) {
    this.start = start;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeseriesBin timeseriesBin = (TimeseriesBin) o;
    return Objects.equals(this.densities, timeseriesBin.densities) &&
        Objects.equals(this.end, timeseriesBin.end) &&
        Objects.equals(this.start, timeseriesBin.start);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(densities, end, start);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeseriesBin {\n");
    sb.append("    densities: ").append(toIndentedString(densities)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("densities");
    openapiFields.add("end");
    openapiFields.add("start");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimeseriesBin
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeseriesBin.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeseriesBin is not found in the empty JSON string", TimeseriesBin.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeseriesBin.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeseriesBin` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("densities") != null && !jsonObj.get("densities").isJsonNull() && !jsonObj.get("densities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `densities` to be an array in the JSON string but got `%s`", jsonObj.get("densities").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeseriesBin.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeseriesBin' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeseriesBin> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeseriesBin.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeseriesBin>() {
           @Override
           public void write(JsonWriter out, TimeseriesBin value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeseriesBin read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimeseriesBin given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimeseriesBin
   * @throws IOException if the JSON string is invalid with respect to TimeseriesBin
   */
  public static TimeseriesBin fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeseriesBin.class);
  }

  /**
   * Convert an instance of TimeseriesBin to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

