/*
 * Chrome UX Report API
 * The Chrome UX Report API lets you view real user experience data for millions of websites. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CollectionPeriod;
import org.openapitools.client.model.Key;
import org.openapitools.client.model.Metric;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Record is a single Chrome UX report data record. It contains use experience statistics for a single url pattern and set of dimensions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:54.378266-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Record {
  public static final String SERIALIZED_NAME_COLLECTION_PERIOD = "collectionPeriod";
  @SerializedName(SERIALIZED_NAME_COLLECTION_PERIOD)
  private CollectionPeriod collectionPeriod;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private Key key;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private Map<String, Metric> metrics = new HashMap<>();

  public Record() {
  }

  public Record collectionPeriod(CollectionPeriod collectionPeriod) {
    this.collectionPeriod = collectionPeriod;
    return this;
  }

  /**
   * Get collectionPeriod
   * @return collectionPeriod
   */
  @javax.annotation.Nullable
  public CollectionPeriod getCollectionPeriod() {
    return collectionPeriod;
  }

  public void setCollectionPeriod(CollectionPeriod collectionPeriod) {
    this.collectionPeriod = collectionPeriod;
  }


  public Record key(Key key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public Key getKey() {
    return key;
  }

  public void setKey(Key key) {
    this.key = key;
  }


  public Record metrics(Map<String, Metric> metrics) {
    this.metrics = metrics;
    return this;
  }

  public Record putMetricsItem(String key, Metric metricsItem) {
    if (this.metrics == null) {
      this.metrics = new HashMap<>();
    }
    this.metrics.put(key, metricsItem);
    return this;
  }

  /**
   * Metrics is the map of user experience data available for the record defined in the key field. Metrics are keyed on the metric name. Allowed key values: [\&quot;first_contentful_paint\&quot;, \&quot;first_input_delay\&quot;, \&quot;largest_contentful_paint\&quot;, \&quot;cumulative_layout_shift\&quot;, \&quot;experimental_time_to_first_byte\&quot;, \&quot;experimental_interaction_to_next_paint\&quot;]
   * @return metrics
   */
  @javax.annotation.Nullable
  public Map<String, Metric> getMetrics() {
    return metrics;
  }

  public void setMetrics(Map<String, Metric> metrics) {
    this.metrics = metrics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Record record = (Record) o;
    return Objects.equals(this.collectionPeriod, record.collectionPeriod) &&
        Objects.equals(this.key, record.key) &&
        Objects.equals(this.metrics, record.metrics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectionPeriod, key, metrics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Record {\n");
    sb.append("    collectionPeriod: ").append(toIndentedString(collectionPeriod)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collectionPeriod");
    openapiFields.add("key");
    openapiFields.add("metrics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Record
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Record.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Record is not found in the empty JSON string", Record.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Record.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Record` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `collectionPeriod`
      if (jsonObj.get("collectionPeriod") != null && !jsonObj.get("collectionPeriod").isJsonNull()) {
        CollectionPeriod.validateJsonElement(jsonObj.get("collectionPeriod"));
      }
      // validate the optional field `key`
      if (jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) {
        Key.validateJsonElement(jsonObj.get("key"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Record.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Record' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Record> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Record.class));

       return (TypeAdapter<T>) new TypeAdapter<Record>() {
           @Override
           public void write(JsonWriter out, Record value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Record read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Record given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Record
   * @throws IOException if the JSON string is invalid with respect to Record
   */
  public static Record fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Record.class);
  }

  /**
   * Convert an instance of Record to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

