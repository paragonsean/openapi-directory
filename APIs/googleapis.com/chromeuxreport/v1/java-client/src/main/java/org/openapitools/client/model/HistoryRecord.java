/*
 * Chrome UX Report API
 * The Chrome UX Report API lets you view real user experience data for millions of websites. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CollectionPeriod;
import org.openapitools.client.model.HistoryKey;
import org.openapitools.client.model.MetricTimeseries;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HistoryRecord is a timeseries of Chrome UX Report data. It contains user experience statistics for a single url pattern and a set of dimensions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:54.378266-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HistoryRecord {
  public static final String SERIALIZED_NAME_COLLECTION_PERIODS = "collectionPeriods";
  @SerializedName(SERIALIZED_NAME_COLLECTION_PERIODS)
  private List<CollectionPeriod> collectionPeriods = new ArrayList<>();

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private HistoryKey key;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private Map<String, MetricTimeseries> metrics = new HashMap<>();

  public HistoryRecord() {
  }

  public HistoryRecord collectionPeriods(List<CollectionPeriod> collectionPeriods) {
    this.collectionPeriods = collectionPeriods;
    return this;
  }

  public HistoryRecord addCollectionPeriodsItem(CollectionPeriod collectionPeriodsItem) {
    if (this.collectionPeriods == null) {
      this.collectionPeriods = new ArrayList<>();
    }
    this.collectionPeriods.add(collectionPeriodsItem);
    return this;
  }

  /**
   * The collection periods indicate when each of the data points reflected in the time series data in metrics was collected. Note that all the time series share the same collection periods, and it is enforced in the CrUX pipeline that every time series has the same number of data points.
   * @return collectionPeriods
   */
  @javax.annotation.Nullable
  public List<CollectionPeriod> getCollectionPeriods() {
    return collectionPeriods;
  }

  public void setCollectionPeriods(List<CollectionPeriod> collectionPeriods) {
    this.collectionPeriods = collectionPeriods;
  }


  public HistoryRecord key(HistoryKey key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public HistoryKey getKey() {
    return key;
  }

  public void setKey(HistoryKey key) {
    this.key = key;
  }


  public HistoryRecord metrics(Map<String, MetricTimeseries> metrics) {
    this.metrics = metrics;
    return this;
  }

  public HistoryRecord putMetricsItem(String key, MetricTimeseries metricsItem) {
    if (this.metrics == null) {
      this.metrics = new HashMap<>();
    }
    this.metrics.put(key, metricsItem);
    return this;
  }

  /**
   * Metrics is the map of user experience time series data available for the record defined in the key field. Metrics are keyed on the metric name. Allowed key values: [\&quot;first_contentful_paint\&quot;, \&quot;first_input_delay\&quot;, \&quot;largest_contentful_paint\&quot;, \&quot;cumulative_layout_shift\&quot;, \&quot;experimental_time_to_first_byte\&quot;, \&quot;experimental_interaction_to_next_paint\&quot;]
   * @return metrics
   */
  @javax.annotation.Nullable
  public Map<String, MetricTimeseries> getMetrics() {
    return metrics;
  }

  public void setMetrics(Map<String, MetricTimeseries> metrics) {
    this.metrics = metrics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistoryRecord historyRecord = (HistoryRecord) o;
    return Objects.equals(this.collectionPeriods, historyRecord.collectionPeriods) &&
        Objects.equals(this.key, historyRecord.key) &&
        Objects.equals(this.metrics, historyRecord.metrics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectionPeriods, key, metrics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistoryRecord {\n");
    sb.append("    collectionPeriods: ").append(toIndentedString(collectionPeriods)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collectionPeriods");
    openapiFields.add("key");
    openapiFields.add("metrics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HistoryRecord
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HistoryRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HistoryRecord is not found in the empty JSON string", HistoryRecord.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HistoryRecord.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HistoryRecord` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("collectionPeriods") != null && !jsonObj.get("collectionPeriods").isJsonNull()) {
        JsonArray jsonArraycollectionPeriods = jsonObj.getAsJsonArray("collectionPeriods");
        if (jsonArraycollectionPeriods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("collectionPeriods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `collectionPeriods` to be an array in the JSON string but got `%s`", jsonObj.get("collectionPeriods").toString()));
          }

          // validate the optional field `collectionPeriods` (array)
          for (int i = 0; i < jsonArraycollectionPeriods.size(); i++) {
            CollectionPeriod.validateJsonElement(jsonArraycollectionPeriods.get(i));
          };
        }
      }
      // validate the optional field `key`
      if (jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) {
        HistoryKey.validateJsonElement(jsonObj.get("key"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HistoryRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HistoryRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HistoryRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HistoryRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<HistoryRecord>() {
           @Override
           public void write(JsonWriter out, HistoryRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HistoryRecord read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HistoryRecord given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HistoryRecord
   * @throws IOException if the JSON string is invalid with respect to HistoryRecord
   */
  public static HistoryRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HistoryRecord.class);
  }

  /**
   * Convert an instance of HistoryRecord to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

