/*
 * Chrome UX Report API
 * The Chrome UX Report API lets you view real user experience data for millions of websites. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Bin;
import org.openapitools.client.model.Percentiles;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A &#x60;metric&#x60; is a set of user experience data for a single web performance metric, like \&quot;first contentful paint\&quot;. It contains a summary histogram of real world Chrome usage as a series of &#x60;bins&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:54.378266-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Metric {
  public static final String SERIALIZED_NAME_FRACTIONS = "fractions";
  @SerializedName(SERIALIZED_NAME_FRACTIONS)
  private Map<String, Double> fractions = new HashMap<>();

  public static final String SERIALIZED_NAME_HISTOGRAM = "histogram";
  @SerializedName(SERIALIZED_NAME_HISTOGRAM)
  private List<Bin> histogram = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERCENTILES = "percentiles";
  @SerializedName(SERIALIZED_NAME_PERCENTILES)
  private Percentiles percentiles;

  public Metric() {
  }

  public Metric fractions(Map<String, Double> fractions) {
    this.fractions = fractions;
    return this;
  }

  public Metric putFractionsItem(String key, Double fractionsItem) {
    if (this.fractions == null) {
      this.fractions = new HashMap<>();
    }
    this.fractions.put(key, fractionsItem);
    return this;
  }

  /**
   * For enum metrics, provides fractions which add up to approximately 1.0.
   * @return fractions
   */
  @javax.annotation.Nullable
  public Map<String, Double> getFractions() {
    return fractions;
  }

  public void setFractions(Map<String, Double> fractions) {
    this.fractions = fractions;
  }


  public Metric histogram(List<Bin> histogram) {
    this.histogram = histogram;
    return this;
  }

  public Metric addHistogramItem(Bin histogramItem) {
    if (this.histogram == null) {
      this.histogram = new ArrayList<>();
    }
    this.histogram.add(histogramItem);
    return this;
  }

  /**
   * The histogram of user experiences for a metric. The histogram will have at least one bin and the densities of all bins will add up to ~1.
   * @return histogram
   */
  @javax.annotation.Nullable
  public List<Bin> getHistogram() {
    return histogram;
  }

  public void setHistogram(List<Bin> histogram) {
    this.histogram = histogram;
  }


  public Metric percentiles(Percentiles percentiles) {
    this.percentiles = percentiles;
    return this;
  }

  /**
   * Get percentiles
   * @return percentiles
   */
  @javax.annotation.Nullable
  public Percentiles getPercentiles() {
    return percentiles;
  }

  public void setPercentiles(Percentiles percentiles) {
    this.percentiles = percentiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Metric metric = (Metric) o;
    return Objects.equals(this.fractions, metric.fractions) &&
        Objects.equals(this.histogram, metric.histogram) &&
        Objects.equals(this.percentiles, metric.percentiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fractions, histogram, percentiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Metric {\n");
    sb.append("    fractions: ").append(toIndentedString(fractions)).append("\n");
    sb.append("    histogram: ").append(toIndentedString(histogram)).append("\n");
    sb.append("    percentiles: ").append(toIndentedString(percentiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fractions");
    openapiFields.add("histogram");
    openapiFields.add("percentiles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Metric
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Metric.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Metric is not found in the empty JSON string", Metric.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Metric.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Metric` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("histogram") != null && !jsonObj.get("histogram").isJsonNull()) {
        JsonArray jsonArrayhistogram = jsonObj.getAsJsonArray("histogram");
        if (jsonArrayhistogram != null) {
          // ensure the json data is an array
          if (!jsonObj.get("histogram").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `histogram` to be an array in the JSON string but got `%s`", jsonObj.get("histogram").toString()));
          }

          // validate the optional field `histogram` (array)
          for (int i = 0; i < jsonArrayhistogram.size(); i++) {
            Bin.validateJsonElement(jsonArrayhistogram.get(i));
          };
        }
      }
      // validate the optional field `percentiles`
      if (jsonObj.get("percentiles") != null && !jsonObj.get("percentiles").isJsonNull()) {
        Percentiles.validateJsonElement(jsonObj.get("percentiles"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Metric.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Metric' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Metric> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Metric.class));

       return (TypeAdapter<T>) new TypeAdapter<Metric>() {
           @Override
           public void write(JsonWriter out, Metric value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Metric read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Metric given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Metric
   * @throws IOException if the JSON string is invalid with respect to Metric
   */
  public static Metric fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Metric.class);
  }

  /**
   * Convert an instance of Metric to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

