/*
 * Chrome UX Report API
 * The Chrome UX Report API lets you view real user experience data for millions of websites. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.FractionTimeseries;
import org.openapitools.client.model.TimeseriesBin;
import org.openapitools.client.model.TimeseriesPercentiles;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A &#x60;metric timeseries&#x60; is a set of user experience data for a single web performance metric, like \&quot;first contentful paint\&quot;. It contains a summary histogram of real world Chrome usage as a series of &#x60;bins&#x60;, where each bin has density values for a particular time period.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:54.378266-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricTimeseries {
  public static final String SERIALIZED_NAME_FRACTION_TIMESERIES = "fractionTimeseries";
  @SerializedName(SERIALIZED_NAME_FRACTION_TIMESERIES)
  private Map<String, FractionTimeseries> fractionTimeseries = new HashMap<>();

  public static final String SERIALIZED_NAME_HISTOGRAM_TIMESERIES = "histogramTimeseries";
  @SerializedName(SERIALIZED_NAME_HISTOGRAM_TIMESERIES)
  private List<TimeseriesBin> histogramTimeseries = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERCENTILES_TIMESERIES = "percentilesTimeseries";
  @SerializedName(SERIALIZED_NAME_PERCENTILES_TIMESERIES)
  private TimeseriesPercentiles percentilesTimeseries;

  public MetricTimeseries() {
  }

  public MetricTimeseries fractionTimeseries(Map<String, FractionTimeseries> fractionTimeseries) {
    this.fractionTimeseries = fractionTimeseries;
    return this;
  }

  public MetricTimeseries putFractionTimeseriesItem(String key, FractionTimeseries fractionTimeseriesItem) {
    if (this.fractionTimeseries == null) {
      this.fractionTimeseries = new HashMap<>();
    }
    this.fractionTimeseries.put(key, fractionTimeseriesItem);
    return this;
  }

  /**
   * Mapping from labels to timeseries of fractions attributed to this label.
   * @return fractionTimeseries
   */
  @javax.annotation.Nullable
  public Map<String, FractionTimeseries> getFractionTimeseries() {
    return fractionTimeseries;
  }

  public void setFractionTimeseries(Map<String, FractionTimeseries> fractionTimeseries) {
    this.fractionTimeseries = fractionTimeseries;
  }


  public MetricTimeseries histogramTimeseries(List<TimeseriesBin> histogramTimeseries) {
    this.histogramTimeseries = histogramTimeseries;
    return this;
  }

  public MetricTimeseries addHistogramTimeseriesItem(TimeseriesBin histogramTimeseriesItem) {
    if (this.histogramTimeseries == null) {
      this.histogramTimeseries = new ArrayList<>();
    }
    this.histogramTimeseries.add(histogramTimeseriesItem);
    return this;
  }

  /**
   * The histogram of user experiences for a metric. The histogram will have at least one bin and the densities of all bins will add up to ~1, for each timeseries entry.
   * @return histogramTimeseries
   */
  @javax.annotation.Nullable
  public List<TimeseriesBin> getHistogramTimeseries() {
    return histogramTimeseries;
  }

  public void setHistogramTimeseries(List<TimeseriesBin> histogramTimeseries) {
    this.histogramTimeseries = histogramTimeseries;
  }


  public MetricTimeseries percentilesTimeseries(TimeseriesPercentiles percentilesTimeseries) {
    this.percentilesTimeseries = percentilesTimeseries;
    return this;
  }

  /**
   * Get percentilesTimeseries
   * @return percentilesTimeseries
   */
  @javax.annotation.Nullable
  public TimeseriesPercentiles getPercentilesTimeseries() {
    return percentilesTimeseries;
  }

  public void setPercentilesTimeseries(TimeseriesPercentiles percentilesTimeseries) {
    this.percentilesTimeseries = percentilesTimeseries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricTimeseries metricTimeseries = (MetricTimeseries) o;
    return Objects.equals(this.fractionTimeseries, metricTimeseries.fractionTimeseries) &&
        Objects.equals(this.histogramTimeseries, metricTimeseries.histogramTimeseries) &&
        Objects.equals(this.percentilesTimeseries, metricTimeseries.percentilesTimeseries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fractionTimeseries, histogramTimeseries, percentilesTimeseries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricTimeseries {\n");
    sb.append("    fractionTimeseries: ").append(toIndentedString(fractionTimeseries)).append("\n");
    sb.append("    histogramTimeseries: ").append(toIndentedString(histogramTimeseries)).append("\n");
    sb.append("    percentilesTimeseries: ").append(toIndentedString(percentilesTimeseries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fractionTimeseries");
    openapiFields.add("histogramTimeseries");
    openapiFields.add("percentilesTimeseries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricTimeseries
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricTimeseries.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricTimeseries is not found in the empty JSON string", MetricTimeseries.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricTimeseries.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricTimeseries` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("histogramTimeseries") != null && !jsonObj.get("histogramTimeseries").isJsonNull()) {
        JsonArray jsonArrayhistogramTimeseries = jsonObj.getAsJsonArray("histogramTimeseries");
        if (jsonArrayhistogramTimeseries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("histogramTimeseries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `histogramTimeseries` to be an array in the JSON string but got `%s`", jsonObj.get("histogramTimeseries").toString()));
          }

          // validate the optional field `histogramTimeseries` (array)
          for (int i = 0; i < jsonArrayhistogramTimeseries.size(); i++) {
            TimeseriesBin.validateJsonElement(jsonArrayhistogramTimeseries.get(i));
          };
        }
      }
      // validate the optional field `percentilesTimeseries`
      if (jsonObj.get("percentilesTimeseries") != null && !jsonObj.get("percentilesTimeseries").isJsonNull()) {
        TimeseriesPercentiles.validateJsonElement(jsonObj.get("percentilesTimeseries"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricTimeseries.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricTimeseries' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricTimeseries> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricTimeseries.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricTimeseries>() {
           @Override
           public void write(JsonWriter out, MetricTimeseries value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricTimeseries read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricTimeseries given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricTimeseries
   * @throws IOException if the JSON string is invalid with respect to MetricTimeseries
   */
  public static MetricTimeseries fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricTimeseries.class);
  }

  /**
   * Convert an instance of MetricTimeseries to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

