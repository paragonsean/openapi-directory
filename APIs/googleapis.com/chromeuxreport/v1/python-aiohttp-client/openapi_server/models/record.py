# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.collection_period import CollectionPeriod
from openapi_server.models.key import Key
from openapi_server.models.metric import Metric
from openapi_server import util


class Record(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collection_period: CollectionPeriod=None, key: Key=None, metrics: Dict[str, Metric]=None):
        """Record - a model defined in OpenAPI

        :param collection_period: The collection_period of this Record.
        :param key: The key of this Record.
        :param metrics: The metrics of this Record.
        """
        self.openapi_types = {
            'collection_period': CollectionPeriod,
            'key': Key,
            'metrics': Dict[str, Metric]
        }

        self.attribute_map = {
            'collection_period': 'collectionPeriod',
            'key': 'key',
            'metrics': 'metrics'
        }

        self._collection_period = collection_period
        self._key = key
        self._metrics = metrics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Record':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Record of this Record.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collection_period(self):
        """Gets the collection_period of this Record.


        :return: The collection_period of this Record.
        :rtype: CollectionPeriod
        """
        return self._collection_period

    @collection_period.setter
    def collection_period(self, collection_period):
        """Sets the collection_period of this Record.


        :param collection_period: The collection_period of this Record.
        :type collection_period: CollectionPeriod
        """

        self._collection_period = collection_period

    @property
    def key(self):
        """Gets the key of this Record.


        :return: The key of this Record.
        :rtype: Key
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Record.


        :param key: The key of this Record.
        :type key: Key
        """

        self._key = key

    @property
    def metrics(self):
        """Gets the metrics of this Record.

        Metrics is the map of user experience data available for the record defined in the key field. Metrics are keyed on the metric name. Allowed key values: [\"first_contentful_paint\", \"first_input_delay\", \"largest_contentful_paint\", \"cumulative_layout_shift\", \"experimental_time_to_first_byte\", \"experimental_interaction_to_next_paint\"]

        :return: The metrics of this Record.
        :rtype: Dict[str, Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this Record.

        Metrics is the map of user experience data available for the record defined in the key field. Metrics are keyed on the metric name. Allowed key values: [\"first_contentful_paint\", \"first_input_delay\", \"largest_contentful_paint\", \"cumulative_layout_shift\", \"experimental_time_to_first_byte\", \"experimental_interaction_to_next_paint\"]

        :param metrics: The metrics of this Record.
        :type metrics: Dict[str, Metric]
        """

        self._metrics = metrics
