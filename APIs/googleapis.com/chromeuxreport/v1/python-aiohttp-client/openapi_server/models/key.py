# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Key(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, effective_connection_type: str=None, form_factor: str=None, origin: str=None, url: str=None):
        """Key - a model defined in OpenAPI

        :param effective_connection_type: The effective_connection_type of this Key.
        :param form_factor: The form_factor of this Key.
        :param origin: The origin of this Key.
        :param url: The url of this Key.
        """
        self.openapi_types = {
            'effective_connection_type': str,
            'form_factor': str,
            'origin': str,
            'url': str
        }

        self.attribute_map = {
            'effective_connection_type': 'effectiveConnectionType',
            'form_factor': 'formFactor',
            'origin': 'origin',
            'url': 'url'
        }

        self._effective_connection_type = effective_connection_type
        self._form_factor = form_factor
        self._origin = origin
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Key':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Key of this Key.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def effective_connection_type(self):
        """Gets the effective_connection_type of this Key.

        The effective connection type is the general connection class that all users experienced for this record. This field uses the values [\"offline\", \"slow-2G\", \"2G\", \"3G\", \"4G\"] as specified in: https://wicg.github.io/netinfo/#effective-connection-types If the effective connection type is unspecified, then aggregated data over all effective connection types will be returned.

        :return: The effective_connection_type of this Key.
        :rtype: str
        """
        return self._effective_connection_type

    @effective_connection_type.setter
    def effective_connection_type(self, effective_connection_type):
        """Sets the effective_connection_type of this Key.

        The effective connection type is the general connection class that all users experienced for this record. This field uses the values [\"offline\", \"slow-2G\", \"2G\", \"3G\", \"4G\"] as specified in: https://wicg.github.io/netinfo/#effective-connection-types If the effective connection type is unspecified, then aggregated data over all effective connection types will be returned.

        :param effective_connection_type: The effective_connection_type of this Key.
        :type effective_connection_type: str
        """

        self._effective_connection_type = effective_connection_type

    @property
    def form_factor(self):
        """Gets the form_factor of this Key.

        The form factor is the device class that all users used to access the site for this record. If the form factor is unspecified, then aggregated data over all form factors will be returned.

        :return: The form_factor of this Key.
        :rtype: str
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """Sets the form_factor of this Key.

        The form factor is the device class that all users used to access the site for this record. If the form factor is unspecified, then aggregated data over all form factors will be returned.

        :param form_factor: The form_factor of this Key.
        :type form_factor: str
        """
        allowed_values = ["ALL_FORM_FACTORS", "PHONE", "DESKTOP", "TABLET"]  # noqa: E501
        if form_factor not in allowed_values:
            raise ValueError(
                "Invalid value for `form_factor` ({0}), must be one of {1}"
                .format(form_factor, allowed_values)
            )

        self._form_factor = form_factor

    @property
    def origin(self):
        """Gets the origin of this Key.

        Origin specifies the origin that this record is for. Note: When specifying an origin, data for loads under this origin over all pages are aggregated into origin level user experience data.

        :return: The origin of this Key.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this Key.

        Origin specifies the origin that this record is for. Note: When specifying an origin, data for loads under this origin over all pages are aggregated into origin level user experience data.

        :param origin: The origin of this Key.
        :type origin: str
        """

        self._origin = origin

    @property
    def url(self):
        """Gets the url of this Key.

        Url specifies a specific url that this record is for. Note: When specifying a \"url\" only data for that specific url will be aggregated.

        :return: The url of this Key.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Key.

        Url specifies a specific url that this record is for. Note: When specifying a \"url\" only data for that specific url will be aggregated.

        :param url: The url of this Key.
        :type url: str
        """

        self._url = url
