# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bin import Bin
from openapi_server.models.percentiles import Percentiles
from openapi_server import util


class Metric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fractions: Dict[str, float]=None, histogram: List[Bin]=None, percentiles: Percentiles=None):
        """Metric - a model defined in OpenAPI

        :param fractions: The fractions of this Metric.
        :param histogram: The histogram of this Metric.
        :param percentiles: The percentiles of this Metric.
        """
        self.openapi_types = {
            'fractions': Dict[str, float],
            'histogram': List[Bin],
            'percentiles': Percentiles
        }

        self.attribute_map = {
            'fractions': 'fractions',
            'histogram': 'histogram',
            'percentiles': 'percentiles'
        }

        self._fractions = fractions
        self._histogram = histogram
        self._percentiles = percentiles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metric of this Metric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fractions(self):
        """Gets the fractions of this Metric.

        For enum metrics, provides fractions which add up to approximately 1.0.

        :return: The fractions of this Metric.
        :rtype: Dict[str, float]
        """
        return self._fractions

    @fractions.setter
    def fractions(self, fractions):
        """Sets the fractions of this Metric.

        For enum metrics, provides fractions which add up to approximately 1.0.

        :param fractions: The fractions of this Metric.
        :type fractions: Dict[str, float]
        """

        self._fractions = fractions

    @property
    def histogram(self):
        """Gets the histogram of this Metric.

        The histogram of user experiences for a metric. The histogram will have at least one bin and the densities of all bins will add up to ~1.

        :return: The histogram of this Metric.
        :rtype: List[Bin]
        """
        return self._histogram

    @histogram.setter
    def histogram(self, histogram):
        """Sets the histogram of this Metric.

        The histogram of user experiences for a metric. The histogram will have at least one bin and the densities of all bins will add up to ~1.

        :param histogram: The histogram of this Metric.
        :type histogram: List[Bin]
        """

        self._histogram = histogram

    @property
    def percentiles(self):
        """Gets the percentiles of this Metric.


        :return: The percentiles of this Metric.
        :rtype: Percentiles
        """
        return self._percentiles

    @percentiles.setter
    def percentiles(self, percentiles):
        """Sets the percentiles of this Metric.


        :param percentiles: The percentiles of this Metric.
        :type percentiles: Percentiles
        """

        self._percentiles = percentiles
