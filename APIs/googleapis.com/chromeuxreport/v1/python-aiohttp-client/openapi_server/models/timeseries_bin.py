# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimeseriesBin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, densities: List[float]=None, end: object=None, start: object=None):
        """TimeseriesBin - a model defined in OpenAPI

        :param densities: The densities of this TimeseriesBin.
        :param end: The end of this TimeseriesBin.
        :param start: The start of this TimeseriesBin.
        """
        self.openapi_types = {
            'densities': List[float],
            'end': object,
            'start': object
        }

        self.attribute_map = {
            'densities': 'densities',
            'end': 'end',
            'start': 'start'
        }

        self._densities = densities
        self._end = end
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeseriesBin':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeseriesBin of this TimeseriesBin.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def densities(self):
        """Gets the densities of this TimeseriesBin.

        The proportion of users that experienced this bin's value for the given metric in a given collection period; the index for each of these entries corresponds to an entry in the CollectionPeriods field in the HistoryRecord message, which describes when the density was observed in the field. Thus, the length of this list of densities is equal to the length of the CollectionPeriods field in the HistoryRecord message.

        :return: The densities of this TimeseriesBin.
        :rtype: List[float]
        """
        return self._densities

    @densities.setter
    def densities(self, densities):
        """Sets the densities of this TimeseriesBin.

        The proportion of users that experienced this bin's value for the given metric in a given collection period; the index for each of these entries corresponds to an entry in the CollectionPeriods field in the HistoryRecord message, which describes when the density was observed in the field. Thus, the length of this list of densities is equal to the length of the CollectionPeriods field in the HistoryRecord message.

        :param densities: The densities of this TimeseriesBin.
        :type densities: List[float]
        """

        self._densities = densities

    @property
    def end(self):
        """Gets the end of this TimeseriesBin.

        End is the end of the data bin. If end is not populated, then the bin has no end and is valid from start to +inf.

        :return: The end of this TimeseriesBin.
        :rtype: object
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this TimeseriesBin.

        End is the end of the data bin. If end is not populated, then the bin has no end and is valid from start to +inf.

        :param end: The end of this TimeseriesBin.
        :type end: object
        """

        self._end = end

    @property
    def start(self):
        """Gets the start of this TimeseriesBin.

        Start is the beginning of the data bin.

        :return: The start of this TimeseriesBin.
        :rtype: object
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this TimeseriesBin.

        Start is the beginning of the data bin.

        :param start: The start of this TimeseriesBin.
        :type start: object
        """

        self._start = start
