# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.collection_period import CollectionPeriod
from openapi_server.models.history_key import HistoryKey
from openapi_server.models.metric_timeseries import MetricTimeseries
from openapi_server import util


class HistoryRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collection_periods: List[CollectionPeriod]=None, key: HistoryKey=None, metrics: Dict[str, MetricTimeseries]=None):
        """HistoryRecord - a model defined in OpenAPI

        :param collection_periods: The collection_periods of this HistoryRecord.
        :param key: The key of this HistoryRecord.
        :param metrics: The metrics of this HistoryRecord.
        """
        self.openapi_types = {
            'collection_periods': List[CollectionPeriod],
            'key': HistoryKey,
            'metrics': Dict[str, MetricTimeseries]
        }

        self.attribute_map = {
            'collection_periods': 'collectionPeriods',
            'key': 'key',
            'metrics': 'metrics'
        }

        self._collection_periods = collection_periods
        self._key = key
        self._metrics = metrics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistoryRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistoryRecord of this HistoryRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collection_periods(self):
        """Gets the collection_periods of this HistoryRecord.

        The collection periods indicate when each of the data points reflected in the time series data in metrics was collected. Note that all the time series share the same collection periods, and it is enforced in the CrUX pipeline that every time series has the same number of data points.

        :return: The collection_periods of this HistoryRecord.
        :rtype: List[CollectionPeriod]
        """
        return self._collection_periods

    @collection_periods.setter
    def collection_periods(self, collection_periods):
        """Sets the collection_periods of this HistoryRecord.

        The collection periods indicate when each of the data points reflected in the time series data in metrics was collected. Note that all the time series share the same collection periods, and it is enforced in the CrUX pipeline that every time series has the same number of data points.

        :param collection_periods: The collection_periods of this HistoryRecord.
        :type collection_periods: List[CollectionPeriod]
        """

        self._collection_periods = collection_periods

    @property
    def key(self):
        """Gets the key of this HistoryRecord.


        :return: The key of this HistoryRecord.
        :rtype: HistoryKey
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this HistoryRecord.


        :param key: The key of this HistoryRecord.
        :type key: HistoryKey
        """

        self._key = key

    @property
    def metrics(self):
        """Gets the metrics of this HistoryRecord.

        Metrics is the map of user experience time series data available for the record defined in the key field. Metrics are keyed on the metric name. Allowed key values: [\"first_contentful_paint\", \"first_input_delay\", \"largest_contentful_paint\", \"cumulative_layout_shift\", \"experimental_time_to_first_byte\", \"experimental_interaction_to_next_paint\"]

        :return: The metrics of this HistoryRecord.
        :rtype: Dict[str, MetricTimeseries]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this HistoryRecord.

        Metrics is the map of user experience time series data available for the record defined in the key field. Metrics are keyed on the metric name. Allowed key values: [\"first_contentful_paint\", \"first_input_delay\", \"largest_contentful_paint\", \"cumulative_layout_shift\", \"experimental_time_to_first_byte\", \"experimental_interaction_to_next_paint\"]

        :param metrics: The metrics of this HistoryRecord.
        :type metrics: Dict[str, MetricTimeseries]
        """

        self._metrics = metrics
