# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Bin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, density: float=None, end: object=None, start: object=None):
        """Bin - a model defined in OpenAPI

        :param density: The density of this Bin.
        :param end: The end of this Bin.
        :param start: The start of this Bin.
        """
        self.openapi_types = {
            'density': float,
            'end': object,
            'start': object
        }

        self.attribute_map = {
            'density': 'density',
            'end': 'end',
            'start': 'start'
        }

        self._density = density
        self._end = end
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Bin':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Bin of this Bin.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def density(self):
        """Gets the density of this Bin.

        The proportion of users that experienced this bin's value for the given metric.

        :return: The density of this Bin.
        :rtype: float
        """
        return self._density

    @density.setter
    def density(self, density):
        """Sets the density of this Bin.

        The proportion of users that experienced this bin's value for the given metric.

        :param density: The density of this Bin.
        :type density: float
        """

        self._density = density

    @property
    def end(self):
        """Gets the end of this Bin.

        End is the end of the data bin. If end is not populated, then the bin has no end and is valid from start to +inf.

        :return: The end of this Bin.
        :rtype: object
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Bin.

        End is the end of the data bin. If end is not populated, then the bin has no end and is valid from start to +inf.

        :param end: The end of this Bin.
        :type end: object
        """

        self._end = end

    @property
    def start(self):
        """Gets the start of this Bin.

        Start is the beginning of the data bin.

        :return: The start of this Bin.
        :rtype: object
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Bin.

        Start is the beginning of the data bin.

        :param start: The start of this Bin.
        :type start: object
        """

        self._start = start
