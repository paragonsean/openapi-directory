# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HistoryKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, form_factor: str=None, origin: str=None, url: str=None):
        """HistoryKey - a model defined in OpenAPI

        :param form_factor: The form_factor of this HistoryKey.
        :param origin: The origin of this HistoryKey.
        :param url: The url of this HistoryKey.
        """
        self.openapi_types = {
            'form_factor': str,
            'origin': str,
            'url': str
        }

        self.attribute_map = {
            'form_factor': 'formFactor',
            'origin': 'origin',
            'url': 'url'
        }

        self._form_factor = form_factor
        self._origin = origin
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistoryKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistoryKey of this HistoryKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def form_factor(self):
        """Gets the form_factor of this HistoryKey.

        The form factor is the device class that all users used to access the site for this record. If the form factor is unspecified, then aggregated data over all form factors will be returned.

        :return: The form_factor of this HistoryKey.
        :rtype: str
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """Sets the form_factor of this HistoryKey.

        The form factor is the device class that all users used to access the site for this record. If the form factor is unspecified, then aggregated data over all form factors will be returned.

        :param form_factor: The form_factor of this HistoryKey.
        :type form_factor: str
        """
        allowed_values = ["ALL_FORM_FACTORS", "PHONE", "DESKTOP", "TABLET"]  # noqa: E501
        if form_factor not in allowed_values:
            raise ValueError(
                "Invalid value for `form_factor` ({0}), must be one of {1}"
                .format(form_factor, allowed_values)
            )

        self._form_factor = form_factor

    @property
    def origin(self):
        """Gets the origin of this HistoryKey.

        Origin specifies the origin that this record is for. Note: When specifying an origin, data for loads under this origin over all pages are aggregated into origin level user experience data.

        :return: The origin of this HistoryKey.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this HistoryKey.

        Origin specifies the origin that this record is for. Note: When specifying an origin, data for loads under this origin over all pages are aggregated into origin level user experience data.

        :param origin: The origin of this HistoryKey.
        :type origin: str
        """

        self._origin = origin

    @property
    def url(self):
        """Gets the url of this HistoryKey.

        Url specifies a specific url that this record is for. This url should be normalized, following the normalization actions taken in the request to increase the chances of successful lookup. Note: When specifying a \"url\" only data for that specific url will be aggregated.

        :return: The url of this HistoryKey.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this HistoryKey.

        Url specifies a specific url that this record is for. This url should be normalized, following the normalization actions taken in the request to increase the chances of successful lookup. Note: When specifying a \"url\" only data for that specific url will be aggregated.

        :param url: The url of this HistoryKey.
        :type url: str
        """

        self._url = url
