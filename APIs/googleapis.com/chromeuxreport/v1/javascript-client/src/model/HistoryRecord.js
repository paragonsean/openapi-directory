/**
 * Chrome UX Report API
 * The Chrome UX Report API lets you view real user experience data for millions of websites. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CollectionPeriod from './CollectionPeriod';
import HistoryKey from './HistoryKey';
import MetricTimeseries from './MetricTimeseries';

/**
 * The HistoryRecord model module.
 * @module model/HistoryRecord
 * @version v1
 */
class HistoryRecord {
    /**
     * Constructs a new <code>HistoryRecord</code>.
     * HistoryRecord is a timeseries of Chrome UX Report data. It contains user experience statistics for a single url pattern and a set of dimensions.
     * @alias module:model/HistoryRecord
     */
    constructor() { 
        
        HistoryRecord.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HistoryRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HistoryRecord} obj Optional instance to populate.
     * @return {module:model/HistoryRecord} The populated <code>HistoryRecord</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HistoryRecord();

            if (data.hasOwnProperty('collectionPeriods')) {
                obj['collectionPeriods'] = ApiClient.convertToType(data['collectionPeriods'], [CollectionPeriod]);
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = HistoryKey.constructFromObject(data['key']);
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], {'String': MetricTimeseries});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HistoryRecord</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HistoryRecord</code>.
     */
    static validateJSON(data) {
        if (data['collectionPeriods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['collectionPeriods'])) {
                throw new Error("Expected the field `collectionPeriods` to be an array in the JSON data but got " + data['collectionPeriods']);
            }
            // validate the optional field `collectionPeriods` (array)
            for (const item of data['collectionPeriods']) {
                CollectionPeriod.validateJSON(item);
            };
        }
        // validate the optional field `key`
        if (data['key']) { // data not null
          HistoryKey.validateJSON(data['key']);
        }

        return true;
    }


}



/**
 * The collection periods indicate when each of the data points reflected in the time series data in metrics was collected. Note that all the time series share the same collection periods, and it is enforced in the CrUX pipeline that every time series has the same number of data points.
 * @member {Array.<module:model/CollectionPeriod>} collectionPeriods
 */
HistoryRecord.prototype['collectionPeriods'] = undefined;

/**
 * @member {module:model/HistoryKey} key
 */
HistoryRecord.prototype['key'] = undefined;

/**
 * Metrics is the map of user experience time series data available for the record defined in the key field. Metrics are keyed on the metric name. Allowed key values: [\"first_contentful_paint\", \"first_input_delay\", \"largest_contentful_paint\", \"cumulative_layout_shift\", \"experimental_time_to_first_byte\", \"experimental_interaction_to_next_paint\"]
 * @member {Object.<String, module:model/MetricTimeseries>} metrics
 */
HistoryRecord.prototype['metrics'] = undefined;






export default HistoryRecord;

