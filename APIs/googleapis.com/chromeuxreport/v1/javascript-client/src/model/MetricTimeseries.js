/**
 * Chrome UX Report API
 * The Chrome UX Report API lets you view real user experience data for millions of websites. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FractionTimeseries from './FractionTimeseries';
import TimeseriesBin from './TimeseriesBin';
import TimeseriesPercentiles from './TimeseriesPercentiles';

/**
 * The MetricTimeseries model module.
 * @module model/MetricTimeseries
 * @version v1
 */
class MetricTimeseries {
    /**
     * Constructs a new <code>MetricTimeseries</code>.
     * A &#x60;metric timeseries&#x60; is a set of user experience data for a single web performance metric, like \&quot;first contentful paint\&quot;. It contains a summary histogram of real world Chrome usage as a series of &#x60;bins&#x60;, where each bin has density values for a particular time period.
     * @alias module:model/MetricTimeseries
     */
    constructor() { 
        
        MetricTimeseries.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetricTimeseries</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricTimeseries} obj Optional instance to populate.
     * @return {module:model/MetricTimeseries} The populated <code>MetricTimeseries</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricTimeseries();

            if (data.hasOwnProperty('fractionTimeseries')) {
                obj['fractionTimeseries'] = ApiClient.convertToType(data['fractionTimeseries'], {'String': FractionTimeseries});
            }
            if (data.hasOwnProperty('histogramTimeseries')) {
                obj['histogramTimeseries'] = ApiClient.convertToType(data['histogramTimeseries'], [TimeseriesBin]);
            }
            if (data.hasOwnProperty('percentilesTimeseries')) {
                obj['percentilesTimeseries'] = TimeseriesPercentiles.constructFromObject(data['percentilesTimeseries']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricTimeseries</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricTimeseries</code>.
     */
    static validateJSON(data) {
        if (data['histogramTimeseries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['histogramTimeseries'])) {
                throw new Error("Expected the field `histogramTimeseries` to be an array in the JSON data but got " + data['histogramTimeseries']);
            }
            // validate the optional field `histogramTimeseries` (array)
            for (const item of data['histogramTimeseries']) {
                TimeseriesBin.validateJSON(item);
            };
        }
        // validate the optional field `percentilesTimeseries`
        if (data['percentilesTimeseries']) { // data not null
          TimeseriesPercentiles.validateJSON(data['percentilesTimeseries']);
        }

        return true;
    }


}



/**
 * Mapping from labels to timeseries of fractions attributed to this label.
 * @member {Object.<String, module:model/FractionTimeseries>} fractionTimeseries
 */
MetricTimeseries.prototype['fractionTimeseries'] = undefined;

/**
 * The histogram of user experiences for a metric. The histogram will have at least one bin and the densities of all bins will add up to ~1, for each timeseries entry.
 * @member {Array.<module:model/TimeseriesBin>} histogramTimeseries
 */
MetricTimeseries.prototype['histogramTimeseries'] = undefined;

/**
 * @member {module:model/TimeseriesPercentiles} percentilesTimeseries
 */
MetricTimeseries.prototype['percentilesTimeseries'] = undefined;






export default MetricTimeseries;

