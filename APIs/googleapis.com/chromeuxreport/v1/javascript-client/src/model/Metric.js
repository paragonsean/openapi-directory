/**
 * Chrome UX Report API
 * The Chrome UX Report API lets you view real user experience data for millions of websites. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Bin from './Bin';
import Percentiles from './Percentiles';

/**
 * The Metric model module.
 * @module model/Metric
 * @version v1
 */
class Metric {
    /**
     * Constructs a new <code>Metric</code>.
     * A &#x60;metric&#x60; is a set of user experience data for a single web performance metric, like \&quot;first contentful paint\&quot;. It contains a summary histogram of real world Chrome usage as a series of &#x60;bins&#x60;.
     * @alias module:model/Metric
     */
    constructor() { 
        
        Metric.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Metric</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Metric} obj Optional instance to populate.
     * @return {module:model/Metric} The populated <code>Metric</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Metric();

            if (data.hasOwnProperty('fractions')) {
                obj['fractions'] = ApiClient.convertToType(data['fractions'], {'String': 'Number'});
            }
            if (data.hasOwnProperty('histogram')) {
                obj['histogram'] = ApiClient.convertToType(data['histogram'], [Bin]);
            }
            if (data.hasOwnProperty('percentiles')) {
                obj['percentiles'] = Percentiles.constructFromObject(data['percentiles']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Metric</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Metric</code>.
     */
    static validateJSON(data) {
        if (data['histogram']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['histogram'])) {
                throw new Error("Expected the field `histogram` to be an array in the JSON data but got " + data['histogram']);
            }
            // validate the optional field `histogram` (array)
            for (const item of data['histogram']) {
                Bin.validateJSON(item);
            };
        }
        // validate the optional field `percentiles`
        if (data['percentiles']) { // data not null
          Percentiles.validateJSON(data['percentiles']);
        }

        return true;
    }


}



/**
 * For enum metrics, provides fractions which add up to approximately 1.0.
 * @member {Object.<String, Number>} fractions
 */
Metric.prototype['fractions'] = undefined;

/**
 * The histogram of user experiences for a metric. The histogram will have at least one bin and the densities of all bins will add up to ~1.
 * @member {Array.<module:model/Bin>} histogram
 */
Metric.prototype['histogram'] = undefined;

/**
 * @member {module:model/Percentiles} percentiles
 */
Metric.prototype['percentiles'] = undefined;






export default Metric;

