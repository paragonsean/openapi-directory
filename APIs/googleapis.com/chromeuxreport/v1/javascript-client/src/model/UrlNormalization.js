/**
 * Chrome UX Report API
 * The Chrome UX Report API lets you view real user experience data for millions of websites. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UrlNormalization model module.
 * @module model/UrlNormalization
 * @version v1
 */
class UrlNormalization {
    /**
     * Constructs a new <code>UrlNormalization</code>.
     * Object representing the normalization actions taken to normalize a url to achieve a higher chance of successful lookup. These are simple automated changes that are taken when looking up the provided &#x60;url_patten&#x60; would be known to fail. Complex actions like following redirects are not handled.
     * @alias module:model/UrlNormalization
     */
    constructor() { 
        
        UrlNormalization.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UrlNormalization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UrlNormalization} obj Optional instance to populate.
     * @return {module:model/UrlNormalization} The populated <code>UrlNormalization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UrlNormalization();

            if (data.hasOwnProperty('normalizedUrl')) {
                obj['normalizedUrl'] = ApiClient.convertToType(data['normalizedUrl'], 'String');
            }
            if (data.hasOwnProperty('originalUrl')) {
                obj['originalUrl'] = ApiClient.convertToType(data['originalUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UrlNormalization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UrlNormalization</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['normalizedUrl'] && !(typeof data['normalizedUrl'] === 'string' || data['normalizedUrl'] instanceof String)) {
            throw new Error("Expected the field `normalizedUrl` to be a primitive type in the JSON string but got " + data['normalizedUrl']);
        }
        // ensure the json data is a string
        if (data['originalUrl'] && !(typeof data['originalUrl'] === 'string' || data['originalUrl'] instanceof String)) {
            throw new Error("Expected the field `originalUrl` to be a primitive type in the JSON string but got " + data['originalUrl']);
        }

        return true;
    }


}



/**
 * The URL after any normalization actions. This is a valid user experience URL that could reasonably be looked up.
 * @member {String} normalizedUrl
 */
UrlNormalization.prototype['normalizedUrl'] = undefined;

/**
 * The original requested URL prior to any normalization actions.
 * @member {String} originalUrl
 */
UrlNormalization.prototype['originalUrl'] = undefined;






export default UrlNormalization;

