/**
 * Chrome UX Report API
 * The Chrome UX Report API lets you view real user experience data for millions of websites. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The QueryHistoryRequest model module.
 * @module model/QueryHistoryRequest
 * @version v1
 */
class QueryHistoryRequest {
    /**
     * Constructs a new <code>QueryHistoryRequest</code>.
     * Request payload sent by a physical web client. This request includes all necessary context to load a particular user experience history record.
     * @alias module:model/QueryHistoryRequest
     */
    constructor() { 
        
        QueryHistoryRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QueryHistoryRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryHistoryRequest} obj Optional instance to populate.
     * @return {module:model/QueryHistoryRequest} The populated <code>QueryHistoryRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryHistoryRequest();

            if (data.hasOwnProperty('formFactor')) {
                obj['formFactor'] = ApiClient.convertToType(data['formFactor'], 'String');
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], ['String']);
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryHistoryRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryHistoryRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['formFactor'] && !(typeof data['formFactor'] === 'string' || data['formFactor'] instanceof String)) {
            throw new Error("Expected the field `formFactor` to be a primitive type in the JSON string but got " + data['formFactor']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['metrics'])) {
            throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
        }
        // ensure the json data is a string
        if (data['origin'] && !(typeof data['origin'] === 'string' || data['origin'] instanceof String)) {
            throw new Error("Expected the field `origin` to be a primitive type in the JSON string but got " + data['origin']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * The form factor is a query dimension that specifies the device class that the record's data should belong to. Note: If no form factor is specified, then a special record with aggregated data over all form factors will be returned.
 * @member {module:model/QueryHistoryRequest.FormFactorEnum} formFactor
 */
QueryHistoryRequest.prototype['formFactor'] = undefined;

/**
 * The metrics that should be included in the response. If none are specified then any metrics found will be returned. Allowed values: [\"first_contentful_paint\", \"first_input_delay\", \"largest_contentful_paint\", \"cumulative_layout_shift\", \"experimental_time_to_first_byte\", \"experimental_interaction_to_next_paint\"]
 * @member {Array.<String>} metrics
 */
QueryHistoryRequest.prototype['metrics'] = undefined;

/**
 * The url pattern \"origin\" refers to a url pattern that is the origin of a website. Examples: \"https://example.com\", \"https://cloud.google.com\"
 * @member {String} origin
 */
QueryHistoryRequest.prototype['origin'] = undefined;

/**
 * The url pattern \"url\" refers to a url pattern that is any arbitrary url. Examples: \"https://example.com/\", \"https://cloud.google.com/why-google-cloud/\"
 * @member {String} url
 */
QueryHistoryRequest.prototype['url'] = undefined;





/**
 * Allowed values for the <code>formFactor</code> property.
 * @enum {String}
 * @readonly
 */
QueryHistoryRequest['FormFactorEnum'] = {

    /**
     * value: "ALL_FORM_FACTORS"
     * @const
     */
    "ALL_FORM_FACTORS": "ALL_FORM_FACTORS",

    /**
     * value: "PHONE"
     * @const
     */
    "PHONE": "PHONE",

    /**
     * value: "DESKTOP"
     * @const
     */
    "DESKTOP": "DESKTOP",

    /**
     * value: "TABLET"
     * @const
     */
    "TABLET": "TABLET"
};



export default QueryHistoryRequest;

