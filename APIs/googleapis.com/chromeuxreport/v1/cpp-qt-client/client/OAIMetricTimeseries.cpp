/**
 * Chrome UX Report API
 * The Chrome UX Report API lets you view real user experience data for millions of websites. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricTimeseries.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricTimeseries::OAIMetricTimeseries(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricTimeseries::OAIMetricTimeseries() {
    this->initializeModel();
}

OAIMetricTimeseries::~OAIMetricTimeseries() {}

void OAIMetricTimeseries::initializeModel() {

    m_fraction_timeseries_isSet = false;
    m_fraction_timeseries_isValid = false;

    m_histogram_timeseries_isSet = false;
    m_histogram_timeseries_isValid = false;

    m_percentiles_timeseries_isSet = false;
    m_percentiles_timeseries_isValid = false;
}

void OAIMetricTimeseries::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricTimeseries::fromJsonObject(QJsonObject json) {

    m_fraction_timeseries_isValid = ::OpenAPI::fromJsonValue(m_fraction_timeseries, json[QString("fractionTimeseries")]);
    m_fraction_timeseries_isSet = !json[QString("fractionTimeseries")].isNull() && m_fraction_timeseries_isValid;

    m_histogram_timeseries_isValid = ::OpenAPI::fromJsonValue(m_histogram_timeseries, json[QString("histogramTimeseries")]);
    m_histogram_timeseries_isSet = !json[QString("histogramTimeseries")].isNull() && m_histogram_timeseries_isValid;

    m_percentiles_timeseries_isValid = ::OpenAPI::fromJsonValue(m_percentiles_timeseries, json[QString("percentilesTimeseries")]);
    m_percentiles_timeseries_isSet = !json[QString("percentilesTimeseries")].isNull() && m_percentiles_timeseries_isValid;
}

QString OAIMetricTimeseries::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricTimeseries::asJsonObject() const {
    QJsonObject obj;
    if (m_fraction_timeseries.size() > 0) {
        obj.insert(QString("fractionTimeseries"), ::OpenAPI::toJsonValue(m_fraction_timeseries));
    }
    if (m_histogram_timeseries.size() > 0) {
        obj.insert(QString("histogramTimeseries"), ::OpenAPI::toJsonValue(m_histogram_timeseries));
    }
    if (m_percentiles_timeseries.isSet()) {
        obj.insert(QString("percentilesTimeseries"), ::OpenAPI::toJsonValue(m_percentiles_timeseries));
    }
    return obj;
}

QMap<QString, OAIFractionTimeseries> OAIMetricTimeseries::getFractionTimeseries() const {
    return m_fraction_timeseries;
}
void OAIMetricTimeseries::setFractionTimeseries(const QMap<QString, OAIFractionTimeseries> &fraction_timeseries) {
    m_fraction_timeseries = fraction_timeseries;
    m_fraction_timeseries_isSet = true;
}

bool OAIMetricTimeseries::is_fraction_timeseries_Set() const{
    return m_fraction_timeseries_isSet;
}

bool OAIMetricTimeseries::is_fraction_timeseries_Valid() const{
    return m_fraction_timeseries_isValid;
}

QList<OAITimeseriesBin> OAIMetricTimeseries::getHistogramTimeseries() const {
    return m_histogram_timeseries;
}
void OAIMetricTimeseries::setHistogramTimeseries(const QList<OAITimeseriesBin> &histogram_timeseries) {
    m_histogram_timeseries = histogram_timeseries;
    m_histogram_timeseries_isSet = true;
}

bool OAIMetricTimeseries::is_histogram_timeseries_Set() const{
    return m_histogram_timeseries_isSet;
}

bool OAIMetricTimeseries::is_histogram_timeseries_Valid() const{
    return m_histogram_timeseries_isValid;
}

OAITimeseriesPercentiles OAIMetricTimeseries::getPercentilesTimeseries() const {
    return m_percentiles_timeseries;
}
void OAIMetricTimeseries::setPercentilesTimeseries(const OAITimeseriesPercentiles &percentiles_timeseries) {
    m_percentiles_timeseries = percentiles_timeseries;
    m_percentiles_timeseries_isSet = true;
}

bool OAIMetricTimeseries::is_percentiles_timeseries_Set() const{
    return m_percentiles_timeseries_isSet;
}

bool OAIMetricTimeseries::is_percentiles_timeseries_Valid() const{
    return m_percentiles_timeseries_isValid;
}

bool OAIMetricTimeseries::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fraction_timeseries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_histogram_timeseries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentiles_timeseries.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricTimeseries::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
