/**
 * Chrome UX Report API
 * The Chrome UX Report API lets you view real user experience data for millions of websites. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistoryRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistoryRecord::OAIHistoryRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistoryRecord::OAIHistoryRecord() {
    this->initializeModel();
}

OAIHistoryRecord::~OAIHistoryRecord() {}

void OAIHistoryRecord::initializeModel() {

    m_collection_periods_isSet = false;
    m_collection_periods_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;
}

void OAIHistoryRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistoryRecord::fromJsonObject(QJsonObject json) {

    m_collection_periods_isValid = ::OpenAPI::fromJsonValue(m_collection_periods, json[QString("collectionPeriods")]);
    m_collection_periods_isSet = !json[QString("collectionPeriods")].isNull() && m_collection_periods_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;
}

QString OAIHistoryRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistoryRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_collection_periods.size() > 0) {
        obj.insert(QString("collectionPeriods"), ::OpenAPI::toJsonValue(m_collection_periods));
    }
    if (m_key.isSet()) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    return obj;
}

QList<OAICollectionPeriod> OAIHistoryRecord::getCollectionPeriods() const {
    return m_collection_periods;
}
void OAIHistoryRecord::setCollectionPeriods(const QList<OAICollectionPeriod> &collection_periods) {
    m_collection_periods = collection_periods;
    m_collection_periods_isSet = true;
}

bool OAIHistoryRecord::is_collection_periods_Set() const{
    return m_collection_periods_isSet;
}

bool OAIHistoryRecord::is_collection_periods_Valid() const{
    return m_collection_periods_isValid;
}

OAIHistoryKey OAIHistoryRecord::getKey() const {
    return m_key;
}
void OAIHistoryRecord::setKey(const OAIHistoryKey &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIHistoryRecord::is_key_Set() const{
    return m_key_isSet;
}

bool OAIHistoryRecord::is_key_Valid() const{
    return m_key_isValid;
}

QMap<QString, OAIMetricTimeseries> OAIHistoryRecord::getMetrics() const {
    return m_metrics;
}
void OAIHistoryRecord::setMetrics(const QMap<QString, OAIMetricTimeseries> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIHistoryRecord::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIHistoryRecord::is_metrics_Valid() const{
    return m_metrics_isValid;
}

bool OAIHistoryRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collection_periods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistoryRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
