/**
 * Chrome UX Report API
 * The Chrome UX Report API lets you view real user experience data for millions of websites. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryResponse::OAIQueryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryResponse::OAIQueryResponse() {
    this->initializeModel();
}

OAIQueryResponse::~OAIQueryResponse() {}

void OAIQueryResponse::initializeModel() {

    m_record_isSet = false;
    m_record_isValid = false;

    m_url_normalization_details_isSet = false;
    m_url_normalization_details_isValid = false;
}

void OAIQueryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryResponse::fromJsonObject(QJsonObject json) {

    m_record_isValid = ::OpenAPI::fromJsonValue(m_record, json[QString("record")]);
    m_record_isSet = !json[QString("record")].isNull() && m_record_isValid;

    m_url_normalization_details_isValid = ::OpenAPI::fromJsonValue(m_url_normalization_details, json[QString("urlNormalizationDetails")]);
    m_url_normalization_details_isSet = !json[QString("urlNormalizationDetails")].isNull() && m_url_normalization_details_isValid;
}

QString OAIQueryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_record.isSet()) {
        obj.insert(QString("record"), ::OpenAPI::toJsonValue(m_record));
    }
    if (m_url_normalization_details.isSet()) {
        obj.insert(QString("urlNormalizationDetails"), ::OpenAPI::toJsonValue(m_url_normalization_details));
    }
    return obj;
}

OAIRecord OAIQueryResponse::getRecord() const {
    return m_record;
}
void OAIQueryResponse::setRecord(const OAIRecord &record) {
    m_record = record;
    m_record_isSet = true;
}

bool OAIQueryResponse::is_record_Set() const{
    return m_record_isSet;
}

bool OAIQueryResponse::is_record_Valid() const{
    return m_record_isValid;
}

OAIUrlNormalization OAIQueryResponse::getUrlNormalizationDetails() const {
    return m_url_normalization_details;
}
void OAIQueryResponse::setUrlNormalizationDetails(const OAIUrlNormalization &url_normalization_details) {
    m_url_normalization_details = url_normalization_details;
    m_url_normalization_details_isSet = true;
}

bool OAIQueryResponse::is_url_normalization_details_Set() const{
    return m_url_normalization_details_isSet;
}

bool OAIQueryResponse::is_url_normalization_details_Valid() const{
    return m_url_normalization_details_isValid;
}

bool OAIQueryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_record.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_normalization_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
