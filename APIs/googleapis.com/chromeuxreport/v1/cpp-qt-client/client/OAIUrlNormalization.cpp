/**
 * Chrome UX Report API
 * The Chrome UX Report API lets you view real user experience data for millions of websites. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUrlNormalization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUrlNormalization::OAIUrlNormalization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUrlNormalization::OAIUrlNormalization() {
    this->initializeModel();
}

OAIUrlNormalization::~OAIUrlNormalization() {}

void OAIUrlNormalization::initializeModel() {

    m_normalized_url_isSet = false;
    m_normalized_url_isValid = false;

    m_original_url_isSet = false;
    m_original_url_isValid = false;
}

void OAIUrlNormalization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUrlNormalization::fromJsonObject(QJsonObject json) {

    m_normalized_url_isValid = ::OpenAPI::fromJsonValue(m_normalized_url, json[QString("normalizedUrl")]);
    m_normalized_url_isSet = !json[QString("normalizedUrl")].isNull() && m_normalized_url_isValid;

    m_original_url_isValid = ::OpenAPI::fromJsonValue(m_original_url, json[QString("originalUrl")]);
    m_original_url_isSet = !json[QString("originalUrl")].isNull() && m_original_url_isValid;
}

QString OAIUrlNormalization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUrlNormalization::asJsonObject() const {
    QJsonObject obj;
    if (m_normalized_url_isSet) {
        obj.insert(QString("normalizedUrl"), ::OpenAPI::toJsonValue(m_normalized_url));
    }
    if (m_original_url_isSet) {
        obj.insert(QString("originalUrl"), ::OpenAPI::toJsonValue(m_original_url));
    }
    return obj;
}

QString OAIUrlNormalization::getNormalizedUrl() const {
    return m_normalized_url;
}
void OAIUrlNormalization::setNormalizedUrl(const QString &normalized_url) {
    m_normalized_url = normalized_url;
    m_normalized_url_isSet = true;
}

bool OAIUrlNormalization::is_normalized_url_Set() const{
    return m_normalized_url_isSet;
}

bool OAIUrlNormalization::is_normalized_url_Valid() const{
    return m_normalized_url_isValid;
}

QString OAIUrlNormalization::getOriginalUrl() const {
    return m_original_url;
}
void OAIUrlNormalization::setOriginalUrl(const QString &original_url) {
    m_original_url = original_url;
    m_original_url_isSet = true;
}

bool OAIUrlNormalization::is_original_url_Set() const{
    return m_original_url_isSet;
}

bool OAIUrlNormalization::is_original_url_Valid() const{
    return m_original_url_isValid;
}

bool OAIUrlNormalization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_normalized_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUrlNormalization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
