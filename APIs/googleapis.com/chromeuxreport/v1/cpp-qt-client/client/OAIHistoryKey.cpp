/**
 * Chrome UX Report API
 * The Chrome UX Report API lets you view real user experience data for millions of websites. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistoryKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistoryKey::OAIHistoryKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistoryKey::OAIHistoryKey() {
    this->initializeModel();
}

OAIHistoryKey::~OAIHistoryKey() {}

void OAIHistoryKey::initializeModel() {

    m_form_factor_isSet = false;
    m_form_factor_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIHistoryKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistoryKey::fromJsonObject(QJsonObject json) {

    m_form_factor_isValid = ::OpenAPI::fromJsonValue(m_form_factor, json[QString("formFactor")]);
    m_form_factor_isSet = !json[QString("formFactor")].isNull() && m_form_factor_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIHistoryKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistoryKey::asJsonObject() const {
    QJsonObject obj;
    if (m_form_factor_isSet) {
        obj.insert(QString("formFactor"), ::OpenAPI::toJsonValue(m_form_factor));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIHistoryKey::getFormFactor() const {
    return m_form_factor;
}
void OAIHistoryKey::setFormFactor(const QString &form_factor) {
    m_form_factor = form_factor;
    m_form_factor_isSet = true;
}

bool OAIHistoryKey::is_form_factor_Set() const{
    return m_form_factor_isSet;
}

bool OAIHistoryKey::is_form_factor_Valid() const{
    return m_form_factor_isValid;
}

QString OAIHistoryKey::getOrigin() const {
    return m_origin;
}
void OAIHistoryKey::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIHistoryKey::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIHistoryKey::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIHistoryKey::getUrl() const {
    return m_url;
}
void OAIHistoryKey::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIHistoryKey::is_url_Set() const{
    return m_url_isSet;
}

bool OAIHistoryKey::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIHistoryKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_form_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistoryKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
