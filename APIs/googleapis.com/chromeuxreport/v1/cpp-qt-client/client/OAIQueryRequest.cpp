/**
 * Chrome UX Report API
 * The Chrome UX Report API lets you view real user experience data for millions of websites. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryRequest::OAIQueryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryRequest::OAIQueryRequest() {
    this->initializeModel();
}

OAIQueryRequest::~OAIQueryRequest() {}

void OAIQueryRequest::initializeModel() {

    m_effective_connection_type_isSet = false;
    m_effective_connection_type_isValid = false;

    m_form_factor_isSet = false;
    m_form_factor_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIQueryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryRequest::fromJsonObject(QJsonObject json) {

    m_effective_connection_type_isValid = ::OpenAPI::fromJsonValue(m_effective_connection_type, json[QString("effectiveConnectionType")]);
    m_effective_connection_type_isSet = !json[QString("effectiveConnectionType")].isNull() && m_effective_connection_type_isValid;

    m_form_factor_isValid = ::OpenAPI::fromJsonValue(m_form_factor, json[QString("formFactor")]);
    m_form_factor_isSet = !json[QString("formFactor")].isNull() && m_form_factor_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIQueryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_effective_connection_type_isSet) {
        obj.insert(QString("effectiveConnectionType"), ::OpenAPI::toJsonValue(m_effective_connection_type));
    }
    if (m_form_factor_isSet) {
        obj.insert(QString("formFactor"), ::OpenAPI::toJsonValue(m_form_factor));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIQueryRequest::getEffectiveConnectionType() const {
    return m_effective_connection_type;
}
void OAIQueryRequest::setEffectiveConnectionType(const QString &effective_connection_type) {
    m_effective_connection_type = effective_connection_type;
    m_effective_connection_type_isSet = true;
}

bool OAIQueryRequest::is_effective_connection_type_Set() const{
    return m_effective_connection_type_isSet;
}

bool OAIQueryRequest::is_effective_connection_type_Valid() const{
    return m_effective_connection_type_isValid;
}

QString OAIQueryRequest::getFormFactor() const {
    return m_form_factor;
}
void OAIQueryRequest::setFormFactor(const QString &form_factor) {
    m_form_factor = form_factor;
    m_form_factor_isSet = true;
}

bool OAIQueryRequest::is_form_factor_Set() const{
    return m_form_factor_isSet;
}

bool OAIQueryRequest::is_form_factor_Valid() const{
    return m_form_factor_isValid;
}

QList<QString> OAIQueryRequest::getMetrics() const {
    return m_metrics;
}
void OAIQueryRequest::setMetrics(const QList<QString> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIQueryRequest::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIQueryRequest::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QString OAIQueryRequest::getOrigin() const {
    return m_origin;
}
void OAIQueryRequest::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIQueryRequest::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIQueryRequest::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIQueryRequest::getUrl() const {
    return m_url;
}
void OAIQueryRequest::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIQueryRequest::is_url_Set() const{
    return m_url_isSet;
}

bool OAIQueryRequest::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIQueryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_effective_connection_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
