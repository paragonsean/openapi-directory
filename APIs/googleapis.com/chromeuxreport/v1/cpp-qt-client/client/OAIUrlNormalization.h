/**
 * Chrome UX Report API
 * The Chrome UX Report API lets you view real user experience data for millions of websites. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUrlNormalization.h
 *
 * Object representing the normalization actions taken to normalize a url to achieve a higher chance of successful lookup. These are simple automated changes that are taken when looking up the provided &#x60;url_patten&#x60; would be known to fail. Complex actions like following redirects are not handled.
 */

#ifndef OAIUrlNormalization_H
#define OAIUrlNormalization_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUrlNormalization : public OAIObject {
public:
    OAIUrlNormalization();
    OAIUrlNormalization(QString json);
    ~OAIUrlNormalization() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getNormalizedUrl() const;
    void setNormalizedUrl(const QString &normalized_url);
    bool is_normalized_url_Set() const;
    bool is_normalized_url_Valid() const;

    QString getOriginalUrl() const;
    void setOriginalUrl(const QString &original_url);
    bool is_original_url_Set() const;
    bool is_original_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_normalized_url;
    bool m_normalized_url_isSet;
    bool m_normalized_url_isValid;

    QString m_original_url;
    bool m_original_url_isSet;
    bool m_original_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUrlNormalization)

#endif // OAIUrlNormalization_H
