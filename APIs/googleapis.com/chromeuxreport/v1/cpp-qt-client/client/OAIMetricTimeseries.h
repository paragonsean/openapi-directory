/**
 * Chrome UX Report API
 * The Chrome UX Report API lets you view real user experience data for millions of websites. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMetricTimeseries.h
 *
 * A &#x60;metric timeseries&#x60; is a set of user experience data for a single web performance metric, like \&quot;first contentful paint\&quot;. It contains a summary histogram of real world Chrome usage as a series of &#x60;bins&#x60;, where each bin has density values for a particular time period.
 */

#ifndef OAIMetricTimeseries_H
#define OAIMetricTimeseries_H

#include <QJsonObject>

#include "OAIFractionTimeseries.h"
#include "OAITimeseriesBin.h"
#include "OAITimeseriesPercentiles.h"
#include <QList>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFractionTimeseries;
class OAITimeseriesBin;
class OAITimeseriesPercentiles;

class OAIMetricTimeseries : public OAIObject {
public:
    OAIMetricTimeseries();
    OAIMetricTimeseries(QString json);
    ~OAIMetricTimeseries() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, OAIFractionTimeseries> getFractionTimeseries() const;
    void setFractionTimeseries(const QMap<QString, OAIFractionTimeseries> &fraction_timeseries);
    bool is_fraction_timeseries_Set() const;
    bool is_fraction_timeseries_Valid() const;

    QList<OAITimeseriesBin> getHistogramTimeseries() const;
    void setHistogramTimeseries(const QList<OAITimeseriesBin> &histogram_timeseries);
    bool is_histogram_timeseries_Set() const;
    bool is_histogram_timeseries_Valid() const;

    OAITimeseriesPercentiles getPercentilesTimeseries() const;
    void setPercentilesTimeseries(const OAITimeseriesPercentiles &percentiles_timeseries);
    bool is_percentiles_timeseries_Set() const;
    bool is_percentiles_timeseries_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, OAIFractionTimeseries> m_fraction_timeseries;
    bool m_fraction_timeseries_isSet;
    bool m_fraction_timeseries_isValid;

    QList<OAITimeseriesBin> m_histogram_timeseries;
    bool m_histogram_timeseries_isSet;
    bool m_histogram_timeseries_isValid;

    OAITimeseriesPercentiles m_percentiles_timeseries;
    bool m_percentiles_timeseries_isSet;
    bool m_percentiles_timeseries_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMetricTimeseries)

#endif // OAIMetricTimeseries_H
