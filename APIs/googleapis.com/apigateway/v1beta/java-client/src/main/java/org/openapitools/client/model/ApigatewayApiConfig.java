/*
 * API Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ApigatewayApiConfigFile;
import org.openapitools.client.model.ApigatewayApiConfigGrpcServiceDefinition;
import org.openapitools.client.model.ApigatewayApiConfigOpenApiDocument;
import org.openapitools.client.model.ApigatewayGatewayConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An API Configuration is a combination of settings for both the Managed Service and Gateways serving this API Config.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:40.775369-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApigatewayApiConfig {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_GATEWAY_CONFIG = "gatewayConfig";
  @SerializedName(SERIALIZED_NAME_GATEWAY_CONFIG)
  private ApigatewayGatewayConfig gatewayConfig;

  public static final String SERIALIZED_NAME_GATEWAY_SERVICE_ACCOUNT = "gatewayServiceAccount";
  @SerializedName(SERIALIZED_NAME_GATEWAY_SERVICE_ACCOUNT)
  private String gatewayServiceAccount;

  public static final String SERIALIZED_NAME_GRPC_SERVICES = "grpcServices";
  @SerializedName(SERIALIZED_NAME_GRPC_SERVICES)
  private List<ApigatewayApiConfigGrpcServiceDefinition> grpcServices = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_MANAGED_SERVICE_CONFIGS = "managedServiceConfigs";
  @SerializedName(SERIALIZED_NAME_MANAGED_SERVICE_CONFIGS)
  private List<ApigatewayApiConfigFile> managedServiceConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPENAPI_DOCUMENTS = "openapiDocuments";
  @SerializedName(SERIALIZED_NAME_OPENAPI_DOCUMENTS)
  private List<ApigatewayApiConfigOpenApiDocument> openapiDocuments = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_CONFIG_ID = "serviceConfigId";
  @SerializedName(SERIALIZED_NAME_SERVICE_CONFIG_ID)
  private String serviceConfigId;

  /**
   * Output only. State of the API Config.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    ACTIVE("ACTIVE"),
    
    FAILED("FAILED"),
    
    DELETING("DELETING"),
    
    UPDATING("UPDATING"),
    
    ACTIVATING("ACTIVATING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public ApigatewayApiConfig() {
  }

  public ApigatewayApiConfig(
     String createTime, 
     String name, 
     String serviceConfigId, 
     StateEnum state, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
    this.serviceConfigId = serviceConfigId;
    this.state = state;
    this.updateTime = updateTime;
  }

  /**
   * Output only. Created time.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public ApigatewayApiConfig displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Optional. Display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ApigatewayApiConfig gatewayConfig(ApigatewayGatewayConfig gatewayConfig) {
    this.gatewayConfig = gatewayConfig;
    return this;
  }

  /**
   * Get gatewayConfig
   * @return gatewayConfig
   */
  @javax.annotation.Nullable
  public ApigatewayGatewayConfig getGatewayConfig() {
    return gatewayConfig;
  }

  public void setGatewayConfig(ApigatewayGatewayConfig gatewayConfig) {
    this.gatewayConfig = gatewayConfig;
  }


  public ApigatewayApiConfig gatewayServiceAccount(String gatewayServiceAccount) {
    this.gatewayServiceAccount = gatewayServiceAccount;
    return this;
  }

  /**
   * Immutable. The Google Cloud IAM Service Account that Gateways serving this config should use to authenticate to other services. This may either be the Service Account&#39;s email (&#x60;{ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com&#x60;) or its full resource name (&#x60;projects/{PROJECT}/accounts/{UNIQUE_ID}&#x60;). This is most often used when the service is a GCP resource such as a Cloud Run Service or an IAP-secured service.
   * @return gatewayServiceAccount
   */
  @javax.annotation.Nullable
  public String getGatewayServiceAccount() {
    return gatewayServiceAccount;
  }

  public void setGatewayServiceAccount(String gatewayServiceAccount) {
    this.gatewayServiceAccount = gatewayServiceAccount;
  }


  public ApigatewayApiConfig grpcServices(List<ApigatewayApiConfigGrpcServiceDefinition> grpcServices) {
    this.grpcServices = grpcServices;
    return this;
  }

  public ApigatewayApiConfig addGrpcServicesItem(ApigatewayApiConfigGrpcServiceDefinition grpcServicesItem) {
    if (this.grpcServices == null) {
      this.grpcServices = new ArrayList<>();
    }
    this.grpcServices.add(grpcServicesItem);
    return this;
  }

  /**
   * Optional. gRPC service definition files. If specified, openapi_documents must not be included.
   * @return grpcServices
   */
  @javax.annotation.Nullable
  public List<ApigatewayApiConfigGrpcServiceDefinition> getGrpcServices() {
    return grpcServices;
  }

  public void setGrpcServices(List<ApigatewayApiConfigGrpcServiceDefinition> grpcServices) {
    this.grpcServices = grpcServices;
  }


  public ApigatewayApiConfig labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public ApigatewayApiConfig putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public ApigatewayApiConfig managedServiceConfigs(List<ApigatewayApiConfigFile> managedServiceConfigs) {
    this.managedServiceConfigs = managedServiceConfigs;
    return this;
  }

  public ApigatewayApiConfig addManagedServiceConfigsItem(ApigatewayApiConfigFile managedServiceConfigsItem) {
    if (this.managedServiceConfigs == null) {
      this.managedServiceConfigs = new ArrayList<>();
    }
    this.managedServiceConfigs.add(managedServiceConfigsItem);
    return this;
  }

  /**
   * Optional. Service Configuration files. At least one must be included when using gRPC service definitions. See https://cloud.google.com/endpoints/docs/grpc/grpc-service-config#service_configuration_overview for the expected file contents. If multiple files are specified, the files are merged with the following rules: * All singular scalar fields are merged using \&quot;last one wins\&quot; semantics in the order of the files uploaded. * Repeated fields are concatenated. * Singular embedded messages are merged using these rules for nested fields.
   * @return managedServiceConfigs
   */
  @javax.annotation.Nullable
  public List<ApigatewayApiConfigFile> getManagedServiceConfigs() {
    return managedServiceConfigs;
  }

  public void setManagedServiceConfigs(List<ApigatewayApiConfigFile> managedServiceConfigs) {
    this.managedServiceConfigs = managedServiceConfigs;
  }


  /**
   * Output only. Resource name of the API Config. Format: projects/{project}/locations/global/apis/{api}/configs/{api_config}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public ApigatewayApiConfig openapiDocuments(List<ApigatewayApiConfigOpenApiDocument> openapiDocuments) {
    this.openapiDocuments = openapiDocuments;
    return this;
  }

  public ApigatewayApiConfig addOpenapiDocumentsItem(ApigatewayApiConfigOpenApiDocument openapiDocumentsItem) {
    if (this.openapiDocuments == null) {
      this.openapiDocuments = new ArrayList<>();
    }
    this.openapiDocuments.add(openapiDocumentsItem);
    return this;
  }

  /**
   * Optional. OpenAPI specification documents. If specified, grpc_services and managed_service_configs must not be included.
   * @return openapiDocuments
   */
  @javax.annotation.Nullable
  public List<ApigatewayApiConfigOpenApiDocument> getOpenapiDocuments() {
    return openapiDocuments;
  }

  public void setOpenapiDocuments(List<ApigatewayApiConfigOpenApiDocument> openapiDocuments) {
    this.openapiDocuments = openapiDocuments;
  }


  /**
   * Output only. The ID of the associated Service Config ( https://cloud.google.com/service-infrastructure/docs/glossary#config).
   * @return serviceConfigId
   */
  @javax.annotation.Nullable
  public String getServiceConfigId() {
    return serviceConfigId;
  }



  /**
   * Output only. State of the API Config.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Updated time.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApigatewayApiConfig apigatewayApiConfig = (ApigatewayApiConfig) o;
    return Objects.equals(this.createTime, apigatewayApiConfig.createTime) &&
        Objects.equals(this.displayName, apigatewayApiConfig.displayName) &&
        Objects.equals(this.gatewayConfig, apigatewayApiConfig.gatewayConfig) &&
        Objects.equals(this.gatewayServiceAccount, apigatewayApiConfig.gatewayServiceAccount) &&
        Objects.equals(this.grpcServices, apigatewayApiConfig.grpcServices) &&
        Objects.equals(this.labels, apigatewayApiConfig.labels) &&
        Objects.equals(this.managedServiceConfigs, apigatewayApiConfig.managedServiceConfigs) &&
        Objects.equals(this.name, apigatewayApiConfig.name) &&
        Objects.equals(this.openapiDocuments, apigatewayApiConfig.openapiDocuments) &&
        Objects.equals(this.serviceConfigId, apigatewayApiConfig.serviceConfigId) &&
        Objects.equals(this.state, apigatewayApiConfig.state) &&
        Objects.equals(this.updateTime, apigatewayApiConfig.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, displayName, gatewayConfig, gatewayServiceAccount, grpcServices, labels, managedServiceConfigs, name, openapiDocuments, serviceConfigId, state, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApigatewayApiConfig {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    gatewayConfig: ").append(toIndentedString(gatewayConfig)).append("\n");
    sb.append("    gatewayServiceAccount: ").append(toIndentedString(gatewayServiceAccount)).append("\n");
    sb.append("    grpcServices: ").append(toIndentedString(grpcServices)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    managedServiceConfigs: ").append(toIndentedString(managedServiceConfigs)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    openapiDocuments: ").append(toIndentedString(openapiDocuments)).append("\n");
    sb.append("    serviceConfigId: ").append(toIndentedString(serviceConfigId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("displayName");
    openapiFields.add("gatewayConfig");
    openapiFields.add("gatewayServiceAccount");
    openapiFields.add("grpcServices");
    openapiFields.add("labels");
    openapiFields.add("managedServiceConfigs");
    openapiFields.add("name");
    openapiFields.add("openapiDocuments");
    openapiFields.add("serviceConfigId");
    openapiFields.add("state");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApigatewayApiConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApigatewayApiConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApigatewayApiConfig is not found in the empty JSON string", ApigatewayApiConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApigatewayApiConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApigatewayApiConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `gatewayConfig`
      if (jsonObj.get("gatewayConfig") != null && !jsonObj.get("gatewayConfig").isJsonNull()) {
        ApigatewayGatewayConfig.validateJsonElement(jsonObj.get("gatewayConfig"));
      }
      if ((jsonObj.get("gatewayServiceAccount") != null && !jsonObj.get("gatewayServiceAccount").isJsonNull()) && !jsonObj.get("gatewayServiceAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayServiceAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewayServiceAccount").toString()));
      }
      if (jsonObj.get("grpcServices") != null && !jsonObj.get("grpcServices").isJsonNull()) {
        JsonArray jsonArraygrpcServices = jsonObj.getAsJsonArray("grpcServices");
        if (jsonArraygrpcServices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("grpcServices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `grpcServices` to be an array in the JSON string but got `%s`", jsonObj.get("grpcServices").toString()));
          }

          // validate the optional field `grpcServices` (array)
          for (int i = 0; i < jsonArraygrpcServices.size(); i++) {
            ApigatewayApiConfigGrpcServiceDefinition.validateJsonElement(jsonArraygrpcServices.get(i));
          };
        }
      }
      if (jsonObj.get("managedServiceConfigs") != null && !jsonObj.get("managedServiceConfigs").isJsonNull()) {
        JsonArray jsonArraymanagedServiceConfigs = jsonObj.getAsJsonArray("managedServiceConfigs");
        if (jsonArraymanagedServiceConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("managedServiceConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `managedServiceConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("managedServiceConfigs").toString()));
          }

          // validate the optional field `managedServiceConfigs` (array)
          for (int i = 0; i < jsonArraymanagedServiceConfigs.size(); i++) {
            ApigatewayApiConfigFile.validateJsonElement(jsonArraymanagedServiceConfigs.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("openapiDocuments") != null && !jsonObj.get("openapiDocuments").isJsonNull()) {
        JsonArray jsonArrayopenapiDocuments = jsonObj.getAsJsonArray("openapiDocuments");
        if (jsonArrayopenapiDocuments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("openapiDocuments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `openapiDocuments` to be an array in the JSON string but got `%s`", jsonObj.get("openapiDocuments").toString()));
          }

          // validate the optional field `openapiDocuments` (array)
          for (int i = 0; i < jsonArrayopenapiDocuments.size(); i++) {
            ApigatewayApiConfigOpenApiDocument.validateJsonElement(jsonArrayopenapiDocuments.get(i));
          };
        }
      }
      if ((jsonObj.get("serviceConfigId") != null && !jsonObj.get("serviceConfigId").isJsonNull()) && !jsonObj.get("serviceConfigId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceConfigId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceConfigId").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApigatewayApiConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApigatewayApiConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApigatewayApiConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApigatewayApiConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ApigatewayApiConfig>() {
           @Override
           public void write(JsonWriter out, ApigatewayApiConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApigatewayApiConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApigatewayApiConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApigatewayApiConfig
   * @throws IOException if the JSON string is invalid with respect to ApigatewayApiConfig
   */
  public static ApigatewayApiConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApigatewayApiConfig.class);
  }

  /**
   * Convert an instance of ApigatewayApiConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

