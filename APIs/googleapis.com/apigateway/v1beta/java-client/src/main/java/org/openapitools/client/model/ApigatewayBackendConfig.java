/*
 * API Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for all backends.
 * @deprecated
 */
@Deprecated
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:40.775369-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApigatewayBackendConfig {
  public static final String SERIALIZED_NAME_GOOGLE_SERVICE_ACCOUNT = "googleServiceAccount";
  @SerializedName(SERIALIZED_NAME_GOOGLE_SERVICE_ACCOUNT)
  private String googleServiceAccount;

  public ApigatewayBackendConfig() {
  }

  public ApigatewayBackendConfig googleServiceAccount(String googleServiceAccount) {
    this.googleServiceAccount = googleServiceAccount;
    return this;
  }

  /**
   * Google Cloud IAM service account used to sign OIDC tokens for backends that have authentication configured (https://cloud.google.com/service-infrastructure/docs/service-management/reference/rest/v1/services.configs#backend). This may either be the Service Account&#39;s email (i.e. \&quot;{ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com\&quot;) or its full resource name (i.e. \&quot;projects/{PROJECT}/accounts/{UNIQUE_ID}\&quot;). This is most often used when the backend is a GCP resource such as a Cloud Run Service or an IAP-secured service. Note that this token is always sent as an authorization header bearer token. The audience of the OIDC token is configured in the associated Service Config in the BackendRule option (https://github.com/googleapis/googleapis/blob/master/google/api/backend.proto#L125).
   * @return googleServiceAccount
   */
  @javax.annotation.Nullable
  public String getGoogleServiceAccount() {
    return googleServiceAccount;
  }

  public void setGoogleServiceAccount(String googleServiceAccount) {
    this.googleServiceAccount = googleServiceAccount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApigatewayBackendConfig apigatewayBackendConfig = (ApigatewayBackendConfig) o;
    return Objects.equals(this.googleServiceAccount, apigatewayBackendConfig.googleServiceAccount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(googleServiceAccount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApigatewayBackendConfig {\n");
    sb.append("    googleServiceAccount: ").append(toIndentedString(googleServiceAccount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("googleServiceAccount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApigatewayBackendConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApigatewayBackendConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApigatewayBackendConfig is not found in the empty JSON string", ApigatewayBackendConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApigatewayBackendConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApigatewayBackendConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("googleServiceAccount") != null && !jsonObj.get("googleServiceAccount").isJsonNull()) && !jsonObj.get("googleServiceAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleServiceAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleServiceAccount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApigatewayBackendConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApigatewayBackendConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApigatewayBackendConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApigatewayBackendConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ApigatewayBackendConfig>() {
           @Override
           public void write(JsonWriter out, ApigatewayBackendConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApigatewayBackendConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApigatewayBackendConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApigatewayBackendConfig
   * @throws IOException if the JSON string is invalid with respect to ApigatewayBackendConfig
   */
  public static ApigatewayBackendConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApigatewayBackendConfig.class);
  }

  /**
   * Convert an instance of ApigatewayBackendConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

