# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.apigateway_api_config_file import ApigatewayApiConfigFile
from openapi_server.models.apigateway_api_config_grpc_service_definition import ApigatewayApiConfigGrpcServiceDefinition
from openapi_server.models.apigateway_api_config_open_api_document import ApigatewayApiConfigOpenApiDocument
from openapi_server.models.apigateway_gateway_config import ApigatewayGatewayConfig
from openapi_server import util


class ApigatewayApiConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, display_name: str=None, gateway_config: ApigatewayGatewayConfig=None, gateway_service_account: str=None, grpc_services: List[ApigatewayApiConfigGrpcServiceDefinition]=None, labels: Dict[str, str]=None, managed_service_configs: List[ApigatewayApiConfigFile]=None, name: str=None, openapi_documents: List[ApigatewayApiConfigOpenApiDocument]=None, service_config_id: str=None, state: str=None, update_time: str=None):
        """ApigatewayApiConfig - a model defined in OpenAPI

        :param create_time: The create_time of this ApigatewayApiConfig.
        :param display_name: The display_name of this ApigatewayApiConfig.
        :param gateway_config: The gateway_config of this ApigatewayApiConfig.
        :param gateway_service_account: The gateway_service_account of this ApigatewayApiConfig.
        :param grpc_services: The grpc_services of this ApigatewayApiConfig.
        :param labels: The labels of this ApigatewayApiConfig.
        :param managed_service_configs: The managed_service_configs of this ApigatewayApiConfig.
        :param name: The name of this ApigatewayApiConfig.
        :param openapi_documents: The openapi_documents of this ApigatewayApiConfig.
        :param service_config_id: The service_config_id of this ApigatewayApiConfig.
        :param state: The state of this ApigatewayApiConfig.
        :param update_time: The update_time of this ApigatewayApiConfig.
        """
        self.openapi_types = {
            'create_time': str,
            'display_name': str,
            'gateway_config': ApigatewayGatewayConfig,
            'gateway_service_account': str,
            'grpc_services': List[ApigatewayApiConfigGrpcServiceDefinition],
            'labels': Dict[str, str],
            'managed_service_configs': List[ApigatewayApiConfigFile],
            'name': str,
            'openapi_documents': List[ApigatewayApiConfigOpenApiDocument],
            'service_config_id': str,
            'state': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'display_name': 'displayName',
            'gateway_config': 'gatewayConfig',
            'gateway_service_account': 'gatewayServiceAccount',
            'grpc_services': 'grpcServices',
            'labels': 'labels',
            'managed_service_configs': 'managedServiceConfigs',
            'name': 'name',
            'openapi_documents': 'openapiDocuments',
            'service_config_id': 'serviceConfigId',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._display_name = display_name
        self._gateway_config = gateway_config
        self._gateway_service_account = gateway_service_account
        self._grpc_services = grpc_services
        self._labels = labels
        self._managed_service_configs = managed_service_configs
        self._name = name
        self._openapi_documents = openapi_documents
        self._service_config_id = service_config_id
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApigatewayApiConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApigatewayApiConfig of this ApigatewayApiConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this ApigatewayApiConfig.

        Output only. Created time.

        :return: The create_time of this ApigatewayApiConfig.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ApigatewayApiConfig.

        Output only. Created time.

        :param create_time: The create_time of this ApigatewayApiConfig.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def display_name(self):
        """Gets the display_name of this ApigatewayApiConfig.

        Optional. Display name.

        :return: The display_name of this ApigatewayApiConfig.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ApigatewayApiConfig.

        Optional. Display name.

        :param display_name: The display_name of this ApigatewayApiConfig.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def gateway_config(self):
        """Gets the gateway_config of this ApigatewayApiConfig.


        :return: The gateway_config of this ApigatewayApiConfig.
        :rtype: ApigatewayGatewayConfig
        """
        return self._gateway_config

    @gateway_config.setter
    def gateway_config(self, gateway_config):
        """Sets the gateway_config of this ApigatewayApiConfig.


        :param gateway_config: The gateway_config of this ApigatewayApiConfig.
        :type gateway_config: ApigatewayGatewayConfig
        """

        self._gateway_config = gateway_config

    @property
    def gateway_service_account(self):
        """Gets the gateway_service_account of this ApigatewayApiConfig.

        Immutable. The Google Cloud IAM Service Account that Gateways serving this config should use to authenticate to other services. This may either be the Service Account's email (`{ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com`) or its full resource name (`projects/{PROJECT}/accounts/{UNIQUE_ID}`). This is most often used when the service is a GCP resource such as a Cloud Run Service or an IAP-secured service.

        :return: The gateway_service_account of this ApigatewayApiConfig.
        :rtype: str
        """
        return self._gateway_service_account

    @gateway_service_account.setter
    def gateway_service_account(self, gateway_service_account):
        """Sets the gateway_service_account of this ApigatewayApiConfig.

        Immutable. The Google Cloud IAM Service Account that Gateways serving this config should use to authenticate to other services. This may either be the Service Account's email (`{ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com`) or its full resource name (`projects/{PROJECT}/accounts/{UNIQUE_ID}`). This is most often used when the service is a GCP resource such as a Cloud Run Service or an IAP-secured service.

        :param gateway_service_account: The gateway_service_account of this ApigatewayApiConfig.
        :type gateway_service_account: str
        """

        self._gateway_service_account = gateway_service_account

    @property
    def grpc_services(self):
        """Gets the grpc_services of this ApigatewayApiConfig.

        Optional. gRPC service definition files. If specified, openapi_documents must not be included.

        :return: The grpc_services of this ApigatewayApiConfig.
        :rtype: List[ApigatewayApiConfigGrpcServiceDefinition]
        """
        return self._grpc_services

    @grpc_services.setter
    def grpc_services(self, grpc_services):
        """Sets the grpc_services of this ApigatewayApiConfig.

        Optional. gRPC service definition files. If specified, openapi_documents must not be included.

        :param grpc_services: The grpc_services of this ApigatewayApiConfig.
        :type grpc_services: List[ApigatewayApiConfigGrpcServiceDefinition]
        """

        self._grpc_services = grpc_services

    @property
    def labels(self):
        """Gets the labels of this ApigatewayApiConfig.

        Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources

        :return: The labels of this ApigatewayApiConfig.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ApigatewayApiConfig.

        Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources

        :param labels: The labels of this ApigatewayApiConfig.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def managed_service_configs(self):
        """Gets the managed_service_configs of this ApigatewayApiConfig.

        Optional. Service Configuration files. At least one must be included when using gRPC service definitions. See https://cloud.google.com/endpoints/docs/grpc/grpc-service-config#service_configuration_overview for the expected file contents. If multiple files are specified, the files are merged with the following rules: * All singular scalar fields are merged using \"last one wins\" semantics in the order of the files uploaded. * Repeated fields are concatenated. * Singular embedded messages are merged using these rules for nested fields.

        :return: The managed_service_configs of this ApigatewayApiConfig.
        :rtype: List[ApigatewayApiConfigFile]
        """
        return self._managed_service_configs

    @managed_service_configs.setter
    def managed_service_configs(self, managed_service_configs):
        """Sets the managed_service_configs of this ApigatewayApiConfig.

        Optional. Service Configuration files. At least one must be included when using gRPC service definitions. See https://cloud.google.com/endpoints/docs/grpc/grpc-service-config#service_configuration_overview for the expected file contents. If multiple files are specified, the files are merged with the following rules: * All singular scalar fields are merged using \"last one wins\" semantics in the order of the files uploaded. * Repeated fields are concatenated. * Singular embedded messages are merged using these rules for nested fields.

        :param managed_service_configs: The managed_service_configs of this ApigatewayApiConfig.
        :type managed_service_configs: List[ApigatewayApiConfigFile]
        """

        self._managed_service_configs = managed_service_configs

    @property
    def name(self):
        """Gets the name of this ApigatewayApiConfig.

        Output only. Resource name of the API Config. Format: projects/{project}/locations/global/apis/{api}/configs/{api_config}

        :return: The name of this ApigatewayApiConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApigatewayApiConfig.

        Output only. Resource name of the API Config. Format: projects/{project}/locations/global/apis/{api}/configs/{api_config}

        :param name: The name of this ApigatewayApiConfig.
        :type name: str
        """

        self._name = name

    @property
    def openapi_documents(self):
        """Gets the openapi_documents of this ApigatewayApiConfig.

        Optional. OpenAPI specification documents. If specified, grpc_services and managed_service_configs must not be included.

        :return: The openapi_documents of this ApigatewayApiConfig.
        :rtype: List[ApigatewayApiConfigOpenApiDocument]
        """
        return self._openapi_documents

    @openapi_documents.setter
    def openapi_documents(self, openapi_documents):
        """Sets the openapi_documents of this ApigatewayApiConfig.

        Optional. OpenAPI specification documents. If specified, grpc_services and managed_service_configs must not be included.

        :param openapi_documents: The openapi_documents of this ApigatewayApiConfig.
        :type openapi_documents: List[ApigatewayApiConfigOpenApiDocument]
        """

        self._openapi_documents = openapi_documents

    @property
    def service_config_id(self):
        """Gets the service_config_id of this ApigatewayApiConfig.

        Output only. The ID of the associated Service Config ( https://cloud.google.com/service-infrastructure/docs/glossary#config).

        :return: The service_config_id of this ApigatewayApiConfig.
        :rtype: str
        """
        return self._service_config_id

    @service_config_id.setter
    def service_config_id(self, service_config_id):
        """Sets the service_config_id of this ApigatewayApiConfig.

        Output only. The ID of the associated Service Config ( https://cloud.google.com/service-infrastructure/docs/glossary#config).

        :param service_config_id: The service_config_id of this ApigatewayApiConfig.
        :type service_config_id: str
        """

        self._service_config_id = service_config_id

    @property
    def state(self):
        """Gets the state of this ApigatewayApiConfig.

        Output only. State of the API Config.

        :return: The state of this ApigatewayApiConfig.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ApigatewayApiConfig.

        Output only. State of the API Config.

        :param state: The state of this ApigatewayApiConfig.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "ACTIVE", "FAILED", "DELETING", "UPDATING", "ACTIVATING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this ApigatewayApiConfig.

        Output only. Updated time.

        :return: The update_time of this ApigatewayApiConfig.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ApigatewayApiConfig.

        Output only. Updated time.

        :param update_time: The update_time of this ApigatewayApiConfig.
        :type update_time: str
        """

        self._update_time = update_time
