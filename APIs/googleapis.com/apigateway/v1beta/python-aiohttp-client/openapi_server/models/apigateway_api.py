# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApigatewayApi(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, display_name: str=None, labels: Dict[str, str]=None, managed_service: str=None, name: str=None, state: str=None, update_time: str=None):
        """ApigatewayApi - a model defined in OpenAPI

        :param create_time: The create_time of this ApigatewayApi.
        :param display_name: The display_name of this ApigatewayApi.
        :param labels: The labels of this ApigatewayApi.
        :param managed_service: The managed_service of this ApigatewayApi.
        :param name: The name of this ApigatewayApi.
        :param state: The state of this ApigatewayApi.
        :param update_time: The update_time of this ApigatewayApi.
        """
        self.openapi_types = {
            'create_time': str,
            'display_name': str,
            'labels': Dict[str, str],
            'managed_service': str,
            'name': str,
            'state': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'display_name': 'displayName',
            'labels': 'labels',
            'managed_service': 'managedService',
            'name': 'name',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._display_name = display_name
        self._labels = labels
        self._managed_service = managed_service
        self._name = name
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApigatewayApi':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApigatewayApi of this ApigatewayApi.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this ApigatewayApi.

        Output only. Created time.

        :return: The create_time of this ApigatewayApi.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ApigatewayApi.

        Output only. Created time.

        :param create_time: The create_time of this ApigatewayApi.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def display_name(self):
        """Gets the display_name of this ApigatewayApi.

        Optional. Display name.

        :return: The display_name of this ApigatewayApi.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ApigatewayApi.

        Optional. Display name.

        :param display_name: The display_name of this ApigatewayApi.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def labels(self):
        """Gets the labels of this ApigatewayApi.

        Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources

        :return: The labels of this ApigatewayApi.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ApigatewayApi.

        Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources

        :param labels: The labels of this ApigatewayApi.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def managed_service(self):
        """Gets the managed_service of this ApigatewayApi.

        Optional. Immutable. The name of a Google Managed Service ( https://cloud.google.com/service-infrastructure/docs/glossary#managed). If not specified, a new Service will automatically be created in the same project as this API.

        :return: The managed_service of this ApigatewayApi.
        :rtype: str
        """
        return self._managed_service

    @managed_service.setter
    def managed_service(self, managed_service):
        """Sets the managed_service of this ApigatewayApi.

        Optional. Immutable. The name of a Google Managed Service ( https://cloud.google.com/service-infrastructure/docs/glossary#managed). If not specified, a new Service will automatically be created in the same project as this API.

        :param managed_service: The managed_service of this ApigatewayApi.
        :type managed_service: str
        """

        self._managed_service = managed_service

    @property
    def name(self):
        """Gets the name of this ApigatewayApi.

        Output only. Resource name of the API. Format: projects/{project}/locations/global/apis/{api}

        :return: The name of this ApigatewayApi.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApigatewayApi.

        Output only. Resource name of the API. Format: projects/{project}/locations/global/apis/{api}

        :param name: The name of this ApigatewayApi.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this ApigatewayApi.

        Output only. State of the API.

        :return: The state of this ApigatewayApi.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ApigatewayApi.

        Output only. State of the API.

        :param state: The state of this ApigatewayApi.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "ACTIVE", "FAILED", "DELETING", "UPDATING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this ApigatewayApi.

        Output only. Updated time.

        :return: The update_time of this ApigatewayApi.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ApigatewayApi.

        Output only. Updated time.

        :param update_time: The update_time of this ApigatewayApi.
        :type update_time: str
        """

        self._update_time = update_time
