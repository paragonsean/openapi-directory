# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.apigateway_backend_config import ApigatewayBackendConfig
from openapi_server import util


class ApigatewayGatewayConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend_config: ApigatewayBackendConfig=None):
        """ApigatewayGatewayConfig - a model defined in OpenAPI

        :param backend_config: The backend_config of this ApigatewayGatewayConfig.
        """
        self.openapi_types = {
            'backend_config': ApigatewayBackendConfig
        }

        self.attribute_map = {
            'backend_config': 'backendConfig'
        }

        self._backend_config = backend_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApigatewayGatewayConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApigatewayGatewayConfig of this ApigatewayGatewayConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend_config(self):
        """Gets the backend_config of this ApigatewayGatewayConfig.


        :return: The backend_config of this ApigatewayGatewayConfig.
        :rtype: ApigatewayBackendConfig
        """
        return self._backend_config

    @backend_config.setter
    def backend_config(self, backend_config):
        """Sets the backend_config of this ApigatewayGatewayConfig.


        :param backend_config: The backend_config of this ApigatewayGatewayConfig.
        :type backend_config: ApigatewayBackendConfig
        """

        self._backend_config = backend_config
