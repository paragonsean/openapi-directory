# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApigatewayBackendConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, google_service_account: str=None):
        """ApigatewayBackendConfig - a model defined in OpenAPI

        :param google_service_account: The google_service_account of this ApigatewayBackendConfig.
        """
        self.openapi_types = {
            'google_service_account': str
        }

        self.attribute_map = {
            'google_service_account': 'googleServiceAccount'
        }

        self._google_service_account = google_service_account

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApigatewayBackendConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApigatewayBackendConfig of this ApigatewayBackendConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def google_service_account(self):
        """Gets the google_service_account of this ApigatewayBackendConfig.

        Google Cloud IAM service account used to sign OIDC tokens for backends that have authentication configured (https://cloud.google.com/service-infrastructure/docs/service-management/reference/rest/v1/services.configs#backend). This may either be the Service Account's email (i.e. \"{ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com\") or its full resource name (i.e. \"projects/{PROJECT}/accounts/{UNIQUE_ID}\"). This is most often used when the backend is a GCP resource such as a Cloud Run Service or an IAP-secured service. Note that this token is always sent as an authorization header bearer token. The audience of the OIDC token is configured in the associated Service Config in the BackendRule option (https://github.com/googleapis/googleapis/blob/master/google/api/backend.proto#L125).

        :return: The google_service_account of this ApigatewayBackendConfig.
        :rtype: str
        """
        return self._google_service_account

    @google_service_account.setter
    def google_service_account(self, google_service_account):
        """Sets the google_service_account of this ApigatewayBackendConfig.

        Google Cloud IAM service account used to sign OIDC tokens for backends that have authentication configured (https://cloud.google.com/service-infrastructure/docs/service-management/reference/rest/v1/services.configs#backend). This may either be the Service Account's email (i.e. \"{ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com\") or its full resource name (i.e. \"projects/{PROJECT}/accounts/{UNIQUE_ID}\"). This is most often used when the backend is a GCP resource such as a Cloud Run Service or an IAP-secured service. Note that this token is always sent as an authorization header bearer token. The audience of the OIDC token is configured in the associated Service Config in the BackendRule option (https://github.com/googleapis/googleapis/blob/master/google/api/backend.proto#L125).

        :param google_service_account: The google_service_account of this ApigatewayBackendConfig.
        :type google_service_account: str
        """

        self._google_service_account = google_service_account
