/**
 * API Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApigatewayGateway.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApigatewayGateway::OAIApigatewayGateway(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApigatewayGateway::OAIApigatewayGateway() {
    this->initializeModel();
}

OAIApigatewayGateway::~OAIApigatewayGateway() {}

void OAIApigatewayGateway::initializeModel() {

    m_api_config_isSet = false;
    m_api_config_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_default_hostname_isSet = false;
    m_default_hostname_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIApigatewayGateway::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApigatewayGateway::fromJsonObject(QJsonObject json) {

    m_api_config_isValid = ::OpenAPI::fromJsonValue(m_api_config, json[QString("apiConfig")]);
    m_api_config_isSet = !json[QString("apiConfig")].isNull() && m_api_config_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_default_hostname_isValid = ::OpenAPI::fromJsonValue(m_default_hostname, json[QString("defaultHostname")]);
    m_default_hostname_isSet = !json[QString("defaultHostname")].isNull() && m_default_hostname_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIApigatewayGateway::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApigatewayGateway::asJsonObject() const {
    QJsonObject obj;
    if (m_api_config_isSet) {
        obj.insert(QString("apiConfig"), ::OpenAPI::toJsonValue(m_api_config));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_default_hostname_isSet) {
        obj.insert(QString("defaultHostname"), ::OpenAPI::toJsonValue(m_default_hostname));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIApigatewayGateway::getApiConfig() const {
    return m_api_config;
}
void OAIApigatewayGateway::setApiConfig(const QString &api_config) {
    m_api_config = api_config;
    m_api_config_isSet = true;
}

bool OAIApigatewayGateway::is_api_config_Set() const{
    return m_api_config_isSet;
}

bool OAIApigatewayGateway::is_api_config_Valid() const{
    return m_api_config_isValid;
}

QString OAIApigatewayGateway::getCreateTime() const {
    return m_create_time;
}
void OAIApigatewayGateway::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIApigatewayGateway::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIApigatewayGateway::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIApigatewayGateway::getDefaultHostname() const {
    return m_default_hostname;
}
void OAIApigatewayGateway::setDefaultHostname(const QString &default_hostname) {
    m_default_hostname = default_hostname;
    m_default_hostname_isSet = true;
}

bool OAIApigatewayGateway::is_default_hostname_Set() const{
    return m_default_hostname_isSet;
}

bool OAIApigatewayGateway::is_default_hostname_Valid() const{
    return m_default_hostname_isValid;
}

QString OAIApigatewayGateway::getDisplayName() const {
    return m_display_name;
}
void OAIApigatewayGateway::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIApigatewayGateway::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIApigatewayGateway::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QMap<QString, QString> OAIApigatewayGateway::getLabels() const {
    return m_labels;
}
void OAIApigatewayGateway::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIApigatewayGateway::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIApigatewayGateway::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIApigatewayGateway::getName() const {
    return m_name;
}
void OAIApigatewayGateway::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApigatewayGateway::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApigatewayGateway::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApigatewayGateway::getState() const {
    return m_state;
}
void OAIApigatewayGateway::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIApigatewayGateway::is_state_Set() const{
    return m_state_isSet;
}

bool OAIApigatewayGateway::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIApigatewayGateway::getUpdateTime() const {
    return m_update_time;
}
void OAIApigatewayGateway::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIApigatewayGateway::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIApigatewayGateway::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIApigatewayGateway::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApigatewayGateway::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
