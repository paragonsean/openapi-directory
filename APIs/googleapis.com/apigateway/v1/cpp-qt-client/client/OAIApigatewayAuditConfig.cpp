/**
 * API Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApigatewayAuditConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApigatewayAuditConfig::OAIApigatewayAuditConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApigatewayAuditConfig::OAIApigatewayAuditConfig() {
    this->initializeModel();
}

OAIApigatewayAuditConfig::~OAIApigatewayAuditConfig() {}

void OAIApigatewayAuditConfig::initializeModel() {

    m_audit_log_configs_isSet = false;
    m_audit_log_configs_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;
}

void OAIApigatewayAuditConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApigatewayAuditConfig::fromJsonObject(QJsonObject json) {

    m_audit_log_configs_isValid = ::OpenAPI::fromJsonValue(m_audit_log_configs, json[QString("auditLogConfigs")]);
    m_audit_log_configs_isSet = !json[QString("auditLogConfigs")].isNull() && m_audit_log_configs_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;
}

QString OAIApigatewayAuditConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApigatewayAuditConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_audit_log_configs.size() > 0) {
        obj.insert(QString("auditLogConfigs"), ::OpenAPI::toJsonValue(m_audit_log_configs));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    return obj;
}

QList<OAIApigatewayAuditLogConfig> OAIApigatewayAuditConfig::getAuditLogConfigs() const {
    return m_audit_log_configs;
}
void OAIApigatewayAuditConfig::setAuditLogConfigs(const QList<OAIApigatewayAuditLogConfig> &audit_log_configs) {
    m_audit_log_configs = audit_log_configs;
    m_audit_log_configs_isSet = true;
}

bool OAIApigatewayAuditConfig::is_audit_log_configs_Set() const{
    return m_audit_log_configs_isSet;
}

bool OAIApigatewayAuditConfig::is_audit_log_configs_Valid() const{
    return m_audit_log_configs_isValid;
}

QString OAIApigatewayAuditConfig::getService() const {
    return m_service;
}
void OAIApigatewayAuditConfig::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIApigatewayAuditConfig::is_service_Set() const{
    return m_service_isSet;
}

bool OAIApigatewayAuditConfig::is_service_Valid() const{
    return m_service_isValid;
}

bool OAIApigatewayAuditConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audit_log_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApigatewayAuditConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
