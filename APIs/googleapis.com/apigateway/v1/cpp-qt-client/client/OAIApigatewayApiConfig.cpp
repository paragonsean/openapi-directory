/**
 * API Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApigatewayApiConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApigatewayApiConfig::OAIApigatewayApiConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApigatewayApiConfig::OAIApigatewayApiConfig() {
    this->initializeModel();
}

OAIApigatewayApiConfig::~OAIApigatewayApiConfig() {}

void OAIApigatewayApiConfig::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_gateway_service_account_isSet = false;
    m_gateway_service_account_isValid = false;

    m_grpc_services_isSet = false;
    m_grpc_services_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_managed_service_configs_isSet = false;
    m_managed_service_configs_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_openapi_documents_isSet = false;
    m_openapi_documents_isValid = false;

    m_service_config_id_isSet = false;
    m_service_config_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIApigatewayApiConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApigatewayApiConfig::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_gateway_service_account_isValid = ::OpenAPI::fromJsonValue(m_gateway_service_account, json[QString("gatewayServiceAccount")]);
    m_gateway_service_account_isSet = !json[QString("gatewayServiceAccount")].isNull() && m_gateway_service_account_isValid;

    m_grpc_services_isValid = ::OpenAPI::fromJsonValue(m_grpc_services, json[QString("grpcServices")]);
    m_grpc_services_isSet = !json[QString("grpcServices")].isNull() && m_grpc_services_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_managed_service_configs_isValid = ::OpenAPI::fromJsonValue(m_managed_service_configs, json[QString("managedServiceConfigs")]);
    m_managed_service_configs_isSet = !json[QString("managedServiceConfigs")].isNull() && m_managed_service_configs_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_openapi_documents_isValid = ::OpenAPI::fromJsonValue(m_openapi_documents, json[QString("openapiDocuments")]);
    m_openapi_documents_isSet = !json[QString("openapiDocuments")].isNull() && m_openapi_documents_isValid;

    m_service_config_id_isValid = ::OpenAPI::fromJsonValue(m_service_config_id, json[QString("serviceConfigId")]);
    m_service_config_id_isSet = !json[QString("serviceConfigId")].isNull() && m_service_config_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIApigatewayApiConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApigatewayApiConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_gateway_service_account_isSet) {
        obj.insert(QString("gatewayServiceAccount"), ::OpenAPI::toJsonValue(m_gateway_service_account));
    }
    if (m_grpc_services.size() > 0) {
        obj.insert(QString("grpcServices"), ::OpenAPI::toJsonValue(m_grpc_services));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_managed_service_configs.size() > 0) {
        obj.insert(QString("managedServiceConfigs"), ::OpenAPI::toJsonValue(m_managed_service_configs));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_openapi_documents.size() > 0) {
        obj.insert(QString("openapiDocuments"), ::OpenAPI::toJsonValue(m_openapi_documents));
    }
    if (m_service_config_id_isSet) {
        obj.insert(QString("serviceConfigId"), ::OpenAPI::toJsonValue(m_service_config_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIApigatewayApiConfig::getCreateTime() const {
    return m_create_time;
}
void OAIApigatewayApiConfig::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIApigatewayApiConfig::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIApigatewayApiConfig::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIApigatewayApiConfig::getDisplayName() const {
    return m_display_name;
}
void OAIApigatewayApiConfig::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIApigatewayApiConfig::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIApigatewayApiConfig::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIApigatewayApiConfig::getGatewayServiceAccount() const {
    return m_gateway_service_account;
}
void OAIApigatewayApiConfig::setGatewayServiceAccount(const QString &gateway_service_account) {
    m_gateway_service_account = gateway_service_account;
    m_gateway_service_account_isSet = true;
}

bool OAIApigatewayApiConfig::is_gateway_service_account_Set() const{
    return m_gateway_service_account_isSet;
}

bool OAIApigatewayApiConfig::is_gateway_service_account_Valid() const{
    return m_gateway_service_account_isValid;
}

QList<OAIApigatewayApiConfigGrpcServiceDefinition> OAIApigatewayApiConfig::getGrpcServices() const {
    return m_grpc_services;
}
void OAIApigatewayApiConfig::setGrpcServices(const QList<OAIApigatewayApiConfigGrpcServiceDefinition> &grpc_services) {
    m_grpc_services = grpc_services;
    m_grpc_services_isSet = true;
}

bool OAIApigatewayApiConfig::is_grpc_services_Set() const{
    return m_grpc_services_isSet;
}

bool OAIApigatewayApiConfig::is_grpc_services_Valid() const{
    return m_grpc_services_isValid;
}

QMap<QString, QString> OAIApigatewayApiConfig::getLabels() const {
    return m_labels;
}
void OAIApigatewayApiConfig::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIApigatewayApiConfig::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIApigatewayApiConfig::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<OAIApigatewayApiConfigFile> OAIApigatewayApiConfig::getManagedServiceConfigs() const {
    return m_managed_service_configs;
}
void OAIApigatewayApiConfig::setManagedServiceConfigs(const QList<OAIApigatewayApiConfigFile> &managed_service_configs) {
    m_managed_service_configs = managed_service_configs;
    m_managed_service_configs_isSet = true;
}

bool OAIApigatewayApiConfig::is_managed_service_configs_Set() const{
    return m_managed_service_configs_isSet;
}

bool OAIApigatewayApiConfig::is_managed_service_configs_Valid() const{
    return m_managed_service_configs_isValid;
}

QString OAIApigatewayApiConfig::getName() const {
    return m_name;
}
void OAIApigatewayApiConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApigatewayApiConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApigatewayApiConfig::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIApigatewayApiConfigOpenApiDocument> OAIApigatewayApiConfig::getOpenapiDocuments() const {
    return m_openapi_documents;
}
void OAIApigatewayApiConfig::setOpenapiDocuments(const QList<OAIApigatewayApiConfigOpenApiDocument> &openapi_documents) {
    m_openapi_documents = openapi_documents;
    m_openapi_documents_isSet = true;
}

bool OAIApigatewayApiConfig::is_openapi_documents_Set() const{
    return m_openapi_documents_isSet;
}

bool OAIApigatewayApiConfig::is_openapi_documents_Valid() const{
    return m_openapi_documents_isValid;
}

QString OAIApigatewayApiConfig::getServiceConfigId() const {
    return m_service_config_id;
}
void OAIApigatewayApiConfig::setServiceConfigId(const QString &service_config_id) {
    m_service_config_id = service_config_id;
    m_service_config_id_isSet = true;
}

bool OAIApigatewayApiConfig::is_service_config_id_Set() const{
    return m_service_config_id_isSet;
}

bool OAIApigatewayApiConfig::is_service_config_id_Valid() const{
    return m_service_config_id_isValid;
}

QString OAIApigatewayApiConfig::getState() const {
    return m_state;
}
void OAIApigatewayApiConfig::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIApigatewayApiConfig::is_state_Set() const{
    return m_state_isSet;
}

bool OAIApigatewayApiConfig::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIApigatewayApiConfig::getUpdateTime() const {
    return m_update_time;
}
void OAIApigatewayApiConfig::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIApigatewayApiConfig::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIApigatewayApiConfig::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIApigatewayApiConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grpc_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_service_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_openapi_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApigatewayApiConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
