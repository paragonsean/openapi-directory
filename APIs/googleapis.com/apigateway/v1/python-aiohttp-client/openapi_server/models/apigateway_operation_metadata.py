# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.apigateway_operation_metadata_diagnostic import ApigatewayOperationMetadataDiagnostic
from openapi_server import util


class ApigatewayOperationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_version: str=None, create_time: str=None, diagnostics: List[ApigatewayOperationMetadataDiagnostic]=None, end_time: str=None, requested_cancellation: bool=None, status_message: str=None, target: str=None, verb: str=None):
        """ApigatewayOperationMetadata - a model defined in OpenAPI

        :param api_version: The api_version of this ApigatewayOperationMetadata.
        :param create_time: The create_time of this ApigatewayOperationMetadata.
        :param diagnostics: The diagnostics of this ApigatewayOperationMetadata.
        :param end_time: The end_time of this ApigatewayOperationMetadata.
        :param requested_cancellation: The requested_cancellation of this ApigatewayOperationMetadata.
        :param status_message: The status_message of this ApigatewayOperationMetadata.
        :param target: The target of this ApigatewayOperationMetadata.
        :param verb: The verb of this ApigatewayOperationMetadata.
        """
        self.openapi_types = {
            'api_version': str,
            'create_time': str,
            'diagnostics': List[ApigatewayOperationMetadataDiagnostic],
            'end_time': str,
            'requested_cancellation': bool,
            'status_message': str,
            'target': str,
            'verb': str
        }

        self.attribute_map = {
            'api_version': 'apiVersion',
            'create_time': 'createTime',
            'diagnostics': 'diagnostics',
            'end_time': 'endTime',
            'requested_cancellation': 'requestedCancellation',
            'status_message': 'statusMessage',
            'target': 'target',
            'verb': 'verb'
        }

        self._api_version = api_version
        self._create_time = create_time
        self._diagnostics = diagnostics
        self._end_time = end_time
        self._requested_cancellation = requested_cancellation
        self._status_message = status_message
        self._target = target
        self._verb = verb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApigatewayOperationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApigatewayOperationMetadata of this ApigatewayOperationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version(self):
        """Gets the api_version of this ApigatewayOperationMetadata.

        Output only. API version used to start the operation.

        :return: The api_version of this ApigatewayOperationMetadata.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this ApigatewayOperationMetadata.

        Output only. API version used to start the operation.

        :param api_version: The api_version of this ApigatewayOperationMetadata.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def create_time(self):
        """Gets the create_time of this ApigatewayOperationMetadata.

        Output only. The time the operation was created.

        :return: The create_time of this ApigatewayOperationMetadata.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ApigatewayOperationMetadata.

        Output only. The time the operation was created.

        :param create_time: The create_time of this ApigatewayOperationMetadata.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def diagnostics(self):
        """Gets the diagnostics of this ApigatewayOperationMetadata.

        Output only. Diagnostics generated during processing of configuration source files.

        :return: The diagnostics of this ApigatewayOperationMetadata.
        :rtype: List[ApigatewayOperationMetadataDiagnostic]
        """
        return self._diagnostics

    @diagnostics.setter
    def diagnostics(self, diagnostics):
        """Sets the diagnostics of this ApigatewayOperationMetadata.

        Output only. Diagnostics generated during processing of configuration source files.

        :param diagnostics: The diagnostics of this ApigatewayOperationMetadata.
        :type diagnostics: List[ApigatewayOperationMetadataDiagnostic]
        """

        self._diagnostics = diagnostics

    @property
    def end_time(self):
        """Gets the end_time of this ApigatewayOperationMetadata.

        Output only. The time the operation finished running.

        :return: The end_time of this ApigatewayOperationMetadata.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ApigatewayOperationMetadata.

        Output only. The time the operation finished running.

        :param end_time: The end_time of this ApigatewayOperationMetadata.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def requested_cancellation(self):
        """Gets the requested_cancellation of this ApigatewayOperationMetadata.

        Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.

        :return: The requested_cancellation of this ApigatewayOperationMetadata.
        :rtype: bool
        """
        return self._requested_cancellation

    @requested_cancellation.setter
    def requested_cancellation(self, requested_cancellation):
        """Sets the requested_cancellation of this ApigatewayOperationMetadata.

        Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.

        :param requested_cancellation: The requested_cancellation of this ApigatewayOperationMetadata.
        :type requested_cancellation: bool
        """

        self._requested_cancellation = requested_cancellation

    @property
    def status_message(self):
        """Gets the status_message of this ApigatewayOperationMetadata.

        Output only. Human-readable status of the operation, if any.

        :return: The status_message of this ApigatewayOperationMetadata.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this ApigatewayOperationMetadata.

        Output only. Human-readable status of the operation, if any.

        :param status_message: The status_message of this ApigatewayOperationMetadata.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def target(self):
        """Gets the target of this ApigatewayOperationMetadata.

        Output only. Server-defined resource path for the target of the operation.

        :return: The target of this ApigatewayOperationMetadata.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this ApigatewayOperationMetadata.

        Output only. Server-defined resource path for the target of the operation.

        :param target: The target of this ApigatewayOperationMetadata.
        :type target: str
        """

        self._target = target

    @property
    def verb(self):
        """Gets the verb of this ApigatewayOperationMetadata.

        Output only. Name of the verb executed by the operation.

        :return: The verb of this ApigatewayOperationMetadata.
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this ApigatewayOperationMetadata.

        Output only. Name of the verb executed by the operation.

        :param verb: The verb of this ApigatewayOperationMetadata.
        :type verb: str
        """

        self._verb = verb
