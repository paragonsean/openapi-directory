# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApigatewayLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, labels: Dict[str, str]=None, location_id: str=None, metadata: Dict[str, object]=None, name: str=None):
        """ApigatewayLocation - a model defined in OpenAPI

        :param display_name: The display_name of this ApigatewayLocation.
        :param labels: The labels of this ApigatewayLocation.
        :param location_id: The location_id of this ApigatewayLocation.
        :param metadata: The metadata of this ApigatewayLocation.
        :param name: The name of this ApigatewayLocation.
        """
        self.openapi_types = {
            'display_name': str,
            'labels': Dict[str, str],
            'location_id': str,
            'metadata': Dict[str, object],
            'name': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'labels': 'labels',
            'location_id': 'locationId',
            'metadata': 'metadata',
            'name': 'name'
        }

        self._display_name = display_name
        self._labels = labels
        self._location_id = location_id
        self._metadata = metadata
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApigatewayLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApigatewayLocation of this ApigatewayLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this ApigatewayLocation.

        The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".

        :return: The display_name of this ApigatewayLocation.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ApigatewayLocation.

        The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".

        :param display_name: The display_name of this ApigatewayLocation.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def labels(self):
        """Gets the labels of this ApigatewayLocation.

        Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}

        :return: The labels of this ApigatewayLocation.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ApigatewayLocation.

        Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}

        :param labels: The labels of this ApigatewayLocation.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def location_id(self):
        """Gets the location_id of this ApigatewayLocation.

        The canonical id for this location. For example: `\"us-east1\"`.

        :return: The location_id of this ApigatewayLocation.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ApigatewayLocation.

        The canonical id for this location. For example: `\"us-east1\"`.

        :param location_id: The location_id of this ApigatewayLocation.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def metadata(self):
        """Gets the metadata of this ApigatewayLocation.

        Service-specific metadata. For example the available capacity at the given location.

        :return: The metadata of this ApigatewayLocation.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ApigatewayLocation.

        Service-specific metadata. For example the available capacity at the given location.

        :param metadata: The metadata of this ApigatewayLocation.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this ApigatewayLocation.

        Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`

        :return: The name of this ApigatewayLocation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApigatewayLocation.

        Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`

        :param name: The name of this ApigatewayLocation.
        :type name: str
        """

        self._name = name
