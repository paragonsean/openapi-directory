# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.apigateway_policy import ApigatewayPolicy
from openapi_server import util


class ApigatewaySetIamPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy: ApigatewayPolicy=None, update_mask: str=None):
        """ApigatewaySetIamPolicyRequest - a model defined in OpenAPI

        :param policy: The policy of this ApigatewaySetIamPolicyRequest.
        :param update_mask: The update_mask of this ApigatewaySetIamPolicyRequest.
        """
        self.openapi_types = {
            'policy': ApigatewayPolicy,
            'update_mask': str
        }

        self.attribute_map = {
            'policy': 'policy',
            'update_mask': 'updateMask'
        }

        self._policy = policy
        self._update_mask = update_mask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApigatewaySetIamPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApigatewaySetIamPolicyRequest of this ApigatewaySetIamPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy(self):
        """Gets the policy of this ApigatewaySetIamPolicyRequest.


        :return: The policy of this ApigatewaySetIamPolicyRequest.
        :rtype: ApigatewayPolicy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this ApigatewaySetIamPolicyRequest.


        :param policy: The policy of this ApigatewaySetIamPolicyRequest.
        :type policy: ApigatewayPolicy
        """

        self._policy = policy

    @property
    def update_mask(self):
        """Gets the update_mask of this ApigatewaySetIamPolicyRequest.

        OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: \"bindings, etag\"`

        :return: The update_mask of this ApigatewaySetIamPolicyRequest.
        :rtype: str
        """
        return self._update_mask

    @update_mask.setter
    def update_mask(self, update_mask):
        """Sets the update_mask of this ApigatewaySetIamPolicyRequest.

        OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: \"bindings, etag\"`

        :param update_mask: The update_mask of this ApigatewaySetIamPolicyRequest.
        :type update_mask: str
        """

        self._update_mask = update_mask
