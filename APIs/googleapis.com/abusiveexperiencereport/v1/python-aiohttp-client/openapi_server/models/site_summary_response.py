# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SiteSummaryResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abusive_status: str=None, enforcement_time: str=None, filter_status: str=None, last_change_time: str=None, report_url: str=None, reviewed_site: str=None, under_review: bool=None):
        """SiteSummaryResponse - a model defined in OpenAPI

        :param abusive_status: The abusive_status of this SiteSummaryResponse.
        :param enforcement_time: The enforcement_time of this SiteSummaryResponse.
        :param filter_status: The filter_status of this SiteSummaryResponse.
        :param last_change_time: The last_change_time of this SiteSummaryResponse.
        :param report_url: The report_url of this SiteSummaryResponse.
        :param reviewed_site: The reviewed_site of this SiteSummaryResponse.
        :param under_review: The under_review of this SiteSummaryResponse.
        """
        self.openapi_types = {
            'abusive_status': str,
            'enforcement_time': str,
            'filter_status': str,
            'last_change_time': str,
            'report_url': str,
            'reviewed_site': str,
            'under_review': bool
        }

        self.attribute_map = {
            'abusive_status': 'abusiveStatus',
            'enforcement_time': 'enforcementTime',
            'filter_status': 'filterStatus',
            'last_change_time': 'lastChangeTime',
            'report_url': 'reportUrl',
            'reviewed_site': 'reviewedSite',
            'under_review': 'underReview'
        }

        self._abusive_status = abusive_status
        self._enforcement_time = enforcement_time
        self._filter_status = filter_status
        self._last_change_time = last_change_time
        self._report_url = report_url
        self._reviewed_site = reviewed_site
        self._under_review = under_review

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SiteSummaryResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SiteSummaryResponse of this SiteSummaryResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abusive_status(self):
        """Gets the abusive_status of this SiteSummaryResponse.

        The site's Abusive Experience Report status.

        :return: The abusive_status of this SiteSummaryResponse.
        :rtype: str
        """
        return self._abusive_status

    @abusive_status.setter
    def abusive_status(self, abusive_status):
        """Sets the abusive_status of this SiteSummaryResponse.

        The site's Abusive Experience Report status.

        :param abusive_status: The abusive_status of this SiteSummaryResponse.
        :type abusive_status: str
        """
        allowed_values = ["UNKNOWN", "PASSING", "FAILING"]  # noqa: E501
        if abusive_status not in allowed_values:
            raise ValueError(
                "Invalid value for `abusive_status` ({0}), must be one of {1}"
                .format(abusive_status, allowed_values)
            )

        self._abusive_status = abusive_status

    @property
    def enforcement_time(self):
        """Gets the enforcement_time of this SiteSummaryResponse.

        The time at which [enforcement](https://support.google.com/webtools/answer/7538608) against the site began or will begin. Not set when the filter_status is OFF.

        :return: The enforcement_time of this SiteSummaryResponse.
        :rtype: str
        """
        return self._enforcement_time

    @enforcement_time.setter
    def enforcement_time(self, enforcement_time):
        """Sets the enforcement_time of this SiteSummaryResponse.

        The time at which [enforcement](https://support.google.com/webtools/answer/7538608) against the site began or will begin. Not set when the filter_status is OFF.

        :param enforcement_time: The enforcement_time of this SiteSummaryResponse.
        :type enforcement_time: str
        """

        self._enforcement_time = enforcement_time

    @property
    def filter_status(self):
        """Gets the filter_status of this SiteSummaryResponse.

        The site's [enforcement status](https://support.google.com/webtools/answer/7538608).

        :return: The filter_status of this SiteSummaryResponse.
        :rtype: str
        """
        return self._filter_status

    @filter_status.setter
    def filter_status(self, filter_status):
        """Sets the filter_status of this SiteSummaryResponse.

        The site's [enforcement status](https://support.google.com/webtools/answer/7538608).

        :param filter_status: The filter_status of this SiteSummaryResponse.
        :type filter_status: str
        """
        allowed_values = ["UNKNOWN", "true", "false", "PAUSED", "PENDING"]  # noqa: E501
        if filter_status not in allowed_values:
            raise ValueError(
                "Invalid value for `filter_status` ({0}), must be one of {1}"
                .format(filter_status, allowed_values)
            )

        self._filter_status = filter_status

    @property
    def last_change_time(self):
        """Gets the last_change_time of this SiteSummaryResponse.

        The time at which the site's status last changed.

        :return: The last_change_time of this SiteSummaryResponse.
        :rtype: str
        """
        return self._last_change_time

    @last_change_time.setter
    def last_change_time(self, last_change_time):
        """Sets the last_change_time of this SiteSummaryResponse.

        The time at which the site's status last changed.

        :param last_change_time: The last_change_time of this SiteSummaryResponse.
        :type last_change_time: str
        """

        self._last_change_time = last_change_time

    @property
    def report_url(self):
        """Gets the report_url of this SiteSummaryResponse.

        A link to the full Abusive Experience Report for the site. Not set in ViolatingSitesResponse. Note that you must complete the [Search Console verification process](https://support.google.com/webmasters/answer/9008080) for the site before you can access the full report.

        :return: The report_url of this SiteSummaryResponse.
        :rtype: str
        """
        return self._report_url

    @report_url.setter
    def report_url(self, report_url):
        """Sets the report_url of this SiteSummaryResponse.

        A link to the full Abusive Experience Report for the site. Not set in ViolatingSitesResponse. Note that you must complete the [Search Console verification process](https://support.google.com/webmasters/answer/9008080) for the site before you can access the full report.

        :param report_url: The report_url of this SiteSummaryResponse.
        :type report_url: str
        """

        self._report_url = report_url

    @property
    def reviewed_site(self):
        """Gets the reviewed_site of this SiteSummaryResponse.

        The name of the reviewed site, e.g. `google.com`.

        :return: The reviewed_site of this SiteSummaryResponse.
        :rtype: str
        """
        return self._reviewed_site

    @reviewed_site.setter
    def reviewed_site(self, reviewed_site):
        """Sets the reviewed_site of this SiteSummaryResponse.

        The name of the reviewed site, e.g. `google.com`.

        :param reviewed_site: The reviewed_site of this SiteSummaryResponse.
        :type reviewed_site: str
        """

        self._reviewed_site = reviewed_site

    @property
    def under_review(self):
        """Gets the under_review of this SiteSummaryResponse.

        Whether the site is currently under review.

        :return: The under_review of this SiteSummaryResponse.
        :rtype: bool
        """
        return self._under_review

    @under_review.setter
    def under_review(self, under_review):
        """Sets the under_review of this SiteSummaryResponse.

        Whether the site is currently under review.

        :param under_review: The under_review of this SiteSummaryResponse.
        :type under_review: bool
        """

        self._under_review = under_review
