/**
 * Abusive Experience Report API
 * Views Abusive Experience Report data, and gets a list of sites that have a significant number of abusive experiences.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISiteSummaryResponse.h
 *
 * Response message for GetSiteSummary.
 */

#ifndef OAISiteSummaryResponse_H
#define OAISiteSummaryResponse_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISiteSummaryResponse : public OAIObject {
public:
    OAISiteSummaryResponse();
    OAISiteSummaryResponse(QString json);
    ~OAISiteSummaryResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAbusiveStatus() const;
    void setAbusiveStatus(const QString &abusive_status);
    bool is_abusive_status_Set() const;
    bool is_abusive_status_Valid() const;

    QString getEnforcementTime() const;
    void setEnforcementTime(const QString &enforcement_time);
    bool is_enforcement_time_Set() const;
    bool is_enforcement_time_Valid() const;

    QString getFilterStatus() const;
    void setFilterStatus(const QString &filter_status);
    bool is_filter_status_Set() const;
    bool is_filter_status_Valid() const;

    QString getLastChangeTime() const;
    void setLastChangeTime(const QString &last_change_time);
    bool is_last_change_time_Set() const;
    bool is_last_change_time_Valid() const;

    QString getReportUrl() const;
    void setReportUrl(const QString &report_url);
    bool is_report_url_Set() const;
    bool is_report_url_Valid() const;

    QString getReviewedSite() const;
    void setReviewedSite(const QString &reviewed_site);
    bool is_reviewed_site_Set() const;
    bool is_reviewed_site_Valid() const;

    bool isUnderReview() const;
    void setUnderReview(const bool &under_review);
    bool is_under_review_Set() const;
    bool is_under_review_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_abusive_status;
    bool m_abusive_status_isSet;
    bool m_abusive_status_isValid;

    QString m_enforcement_time;
    bool m_enforcement_time_isSet;
    bool m_enforcement_time_isValid;

    QString m_filter_status;
    bool m_filter_status_isSet;
    bool m_filter_status_isValid;

    QString m_last_change_time;
    bool m_last_change_time_isSet;
    bool m_last_change_time_isValid;

    QString m_report_url;
    bool m_report_url_isSet;
    bool m_report_url_isValid;

    QString m_reviewed_site;
    bool m_reviewed_site_isSet;
    bool m_reviewed_site_isValid;

    bool m_under_review;
    bool m_under_review_isSet;
    bool m_under_review_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISiteSummaryResponse)

#endif // OAISiteSummaryResponse_H
