/**
 * BeyondCorp API
 * Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Tunnelv1ProtoTunnelerError from './Tunnelv1ProtoTunnelerError';

/**
 * The Tunnelv1ProtoTunnelerInfo model module.
 * @module model/Tunnelv1ProtoTunnelerInfo
 * @version v1
 */
class Tunnelv1ProtoTunnelerInfo {
    /**
     * Constructs a new <code>Tunnelv1ProtoTunnelerInfo</code>.
     * TunnelerInfo contains metadata about tunneler launched by connection manager.
     * @alias module:model/Tunnelv1ProtoTunnelerInfo
     */
    constructor() { 
        
        Tunnelv1ProtoTunnelerInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Tunnelv1ProtoTunnelerInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Tunnelv1ProtoTunnelerInfo} obj Optional instance to populate.
     * @return {module:model/Tunnelv1ProtoTunnelerInfo} The populated <code>Tunnelv1ProtoTunnelerInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Tunnelv1ProtoTunnelerInfo();

            if (data.hasOwnProperty('backoffRetryCount')) {
                obj['backoffRetryCount'] = ApiClient.convertToType(data['backoffRetryCount'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('latestErr')) {
                obj['latestErr'] = Tunnelv1ProtoTunnelerError.constructFromObject(data['latestErr']);
            }
            if (data.hasOwnProperty('latestRetryTime')) {
                obj['latestRetryTime'] = ApiClient.convertToType(data['latestRetryTime'], 'String');
            }
            if (data.hasOwnProperty('totalRetryCount')) {
                obj['totalRetryCount'] = ApiClient.convertToType(data['totalRetryCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Tunnelv1ProtoTunnelerInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Tunnelv1ProtoTunnelerInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `latestErr`
        if (data['latestErr']) { // data not null
          Tunnelv1ProtoTunnelerError.validateJSON(data['latestErr']);
        }
        // ensure the json data is a string
        if (data['latestRetryTime'] && !(typeof data['latestRetryTime'] === 'string' || data['latestRetryTime'] instanceof String)) {
            throw new Error("Expected the field `latestRetryTime` to be a primitive type in the JSON string but got " + data['latestRetryTime']);
        }

        return true;
    }


}



/**
 * backoff_retry_count stores the number of times the tunneler has been retried by tunManager for current backoff sequence. Gets reset to 0 if time difference between 2 consecutive retries exceeds backoffRetryResetTime.
 * @member {Number} backoffRetryCount
 */
Tunnelv1ProtoTunnelerInfo.prototype['backoffRetryCount'] = undefined;

/**
 * id is the unique id of a tunneler.
 * @member {String} id
 */
Tunnelv1ProtoTunnelerInfo.prototype['id'] = undefined;

/**
 * @member {module:model/Tunnelv1ProtoTunnelerError} latestErr
 */
Tunnelv1ProtoTunnelerInfo.prototype['latestErr'] = undefined;

/**
 * latest_retry_time stores the time when the tunneler was last restarted.
 * @member {String} latestRetryTime
 */
Tunnelv1ProtoTunnelerInfo.prototype['latestRetryTime'] = undefined;

/**
 * total_retry_count stores the total number of times the tunneler has been retried by tunManager.
 * @member {Number} totalRetryCount
 */
Tunnelv1ProtoTunnelerInfo.prototype['totalRetryCount'] = undefined;






export default Tunnelv1ProtoTunnelerInfo;

