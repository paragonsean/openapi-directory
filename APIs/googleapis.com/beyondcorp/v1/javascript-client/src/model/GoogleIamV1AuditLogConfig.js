/**
 * BeyondCorp API
 * Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleIamV1AuditLogConfig model module.
 * @module model/GoogleIamV1AuditLogConfig
 * @version v1
 */
class GoogleIamV1AuditLogConfig {
    /**
     * Constructs a new <code>GoogleIamV1AuditLogConfig</code>.
     * Provides the configuration for logging a type of permissions. Example: { \&quot;audit_log_configs\&quot;: [ { \&quot;log_type\&quot;: \&quot;DATA_READ\&quot;, \&quot;exempted_members\&quot;: [ \&quot;user:jose@example.com\&quot; ] }, { \&quot;log_type\&quot;: \&quot;DATA_WRITE\&quot; } ] } This enables &#39;DATA_READ&#39; and &#39;DATA_WRITE&#39; logging, while exempting jose@example.com from DATA_READ logging.
     * @alias module:model/GoogleIamV1AuditLogConfig
     */
    constructor() { 
        
        GoogleIamV1AuditLogConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleIamV1AuditLogConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleIamV1AuditLogConfig} obj Optional instance to populate.
     * @return {module:model/GoogleIamV1AuditLogConfig} The populated <code>GoogleIamV1AuditLogConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleIamV1AuditLogConfig();

            if (data.hasOwnProperty('exemptedMembers')) {
                obj['exemptedMembers'] = ApiClient.convertToType(data['exemptedMembers'], ['String']);
            }
            if (data.hasOwnProperty('logType')) {
                obj['logType'] = ApiClient.convertToType(data['logType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleIamV1AuditLogConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleIamV1AuditLogConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['exemptedMembers'])) {
            throw new Error("Expected the field `exemptedMembers` to be an array in the JSON data but got " + data['exemptedMembers']);
        }
        // ensure the json data is a string
        if (data['logType'] && !(typeof data['logType'] === 'string' || data['logType'] instanceof String)) {
            throw new Error("Expected the field `logType` to be a primitive type in the JSON string but got " + data['logType']);
        }

        return true;
    }


}



/**
 * Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
 * @member {Array.<String>} exemptedMembers
 */
GoogleIamV1AuditLogConfig.prototype['exemptedMembers'] = undefined;

/**
 * The log type that this config enables.
 * @member {module:model/GoogleIamV1AuditLogConfig.LogTypeEnum} logType
 */
GoogleIamV1AuditLogConfig.prototype['logType'] = undefined;





/**
 * Allowed values for the <code>logType</code> property.
 * @enum {String}
 * @readonly
 */
GoogleIamV1AuditLogConfig['LogTypeEnum'] = {

    /**
     * value: "LOG_TYPE_UNSPECIFIED"
     * @const
     */
    "LOG_TYPE_UNSPECIFIED": "LOG_TYPE_UNSPECIFIED",

    /**
     * value: "ADMIN_READ"
     * @const
     */
    "ADMIN_READ": "ADMIN_READ",

    /**
     * value: "DATA_WRITE"
     * @const
     */
    "DATA_WRITE": "DATA_WRITE",

    /**
     * value: "DATA_READ"
     * @const
     */
    "DATA_READ": "DATA_READ"
};



export default GoogleIamV1AuditLogConfig;

