/**
 * BeyondCorp API
 * Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITunnelv1ProtoTunnelerInfo.h
 *
 * TunnelerInfo contains metadata about tunneler launched by connection manager.
 */

#ifndef OAITunnelv1ProtoTunnelerInfo_H
#define OAITunnelv1ProtoTunnelerInfo_H

#include <QJsonObject>

#include "OAITunnelv1ProtoTunnelerError.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITunnelv1ProtoTunnelerError;

class OAITunnelv1ProtoTunnelerInfo : public OAIObject {
public:
    OAITunnelv1ProtoTunnelerInfo();
    OAITunnelv1ProtoTunnelerInfo(QString json);
    ~OAITunnelv1ProtoTunnelerInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBackoffRetryCount() const;
    void setBackoffRetryCount(const qint32 &backoff_retry_count);
    bool is_backoff_retry_count_Set() const;
    bool is_backoff_retry_count_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAITunnelv1ProtoTunnelerError getLatestErr() const;
    void setLatestErr(const OAITunnelv1ProtoTunnelerError &latest_err);
    bool is_latest_err_Set() const;
    bool is_latest_err_Valid() const;

    QString getLatestRetryTime() const;
    void setLatestRetryTime(const QString &latest_retry_time);
    bool is_latest_retry_time_Set() const;
    bool is_latest_retry_time_Valid() const;

    qint32 getTotalRetryCount() const;
    void setTotalRetryCount(const qint32 &total_retry_count);
    bool is_total_retry_count_Set() const;
    bool is_total_retry_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_backoff_retry_count;
    bool m_backoff_retry_count_isSet;
    bool m_backoff_retry_count_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAITunnelv1ProtoTunnelerError m_latest_err;
    bool m_latest_err_isSet;
    bool m_latest_err_isValid;

    QString m_latest_retry_time;
    bool m_latest_retry_time_isSet;
    bool m_latest_retry_time_isValid;

    qint32 m_total_retry_count;
    bool m_total_retry_count_isSet;
    bool m_total_retry_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITunnelv1ProtoTunnelerInfo)

#endif // OAITunnelv1ProtoTunnelerInfo_H
