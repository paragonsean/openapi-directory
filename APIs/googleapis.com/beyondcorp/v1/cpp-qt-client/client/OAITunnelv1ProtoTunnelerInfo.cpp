/**
 * BeyondCorp API
 * Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITunnelv1ProtoTunnelerInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITunnelv1ProtoTunnelerInfo::OAITunnelv1ProtoTunnelerInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITunnelv1ProtoTunnelerInfo::OAITunnelv1ProtoTunnelerInfo() {
    this->initializeModel();
}

OAITunnelv1ProtoTunnelerInfo::~OAITunnelv1ProtoTunnelerInfo() {}

void OAITunnelv1ProtoTunnelerInfo::initializeModel() {

    m_backoff_retry_count_isSet = false;
    m_backoff_retry_count_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_latest_err_isSet = false;
    m_latest_err_isValid = false;

    m_latest_retry_time_isSet = false;
    m_latest_retry_time_isValid = false;

    m_total_retry_count_isSet = false;
    m_total_retry_count_isValid = false;
}

void OAITunnelv1ProtoTunnelerInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITunnelv1ProtoTunnelerInfo::fromJsonObject(QJsonObject json) {

    m_backoff_retry_count_isValid = ::OpenAPI::fromJsonValue(m_backoff_retry_count, json[QString("backoffRetryCount")]);
    m_backoff_retry_count_isSet = !json[QString("backoffRetryCount")].isNull() && m_backoff_retry_count_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_latest_err_isValid = ::OpenAPI::fromJsonValue(m_latest_err, json[QString("latestErr")]);
    m_latest_err_isSet = !json[QString("latestErr")].isNull() && m_latest_err_isValid;

    m_latest_retry_time_isValid = ::OpenAPI::fromJsonValue(m_latest_retry_time, json[QString("latestRetryTime")]);
    m_latest_retry_time_isSet = !json[QString("latestRetryTime")].isNull() && m_latest_retry_time_isValid;

    m_total_retry_count_isValid = ::OpenAPI::fromJsonValue(m_total_retry_count, json[QString("totalRetryCount")]);
    m_total_retry_count_isSet = !json[QString("totalRetryCount")].isNull() && m_total_retry_count_isValid;
}

QString OAITunnelv1ProtoTunnelerInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITunnelv1ProtoTunnelerInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_backoff_retry_count_isSet) {
        obj.insert(QString("backoffRetryCount"), ::OpenAPI::toJsonValue(m_backoff_retry_count));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_latest_err.isSet()) {
        obj.insert(QString("latestErr"), ::OpenAPI::toJsonValue(m_latest_err));
    }
    if (m_latest_retry_time_isSet) {
        obj.insert(QString("latestRetryTime"), ::OpenAPI::toJsonValue(m_latest_retry_time));
    }
    if (m_total_retry_count_isSet) {
        obj.insert(QString("totalRetryCount"), ::OpenAPI::toJsonValue(m_total_retry_count));
    }
    return obj;
}

qint32 OAITunnelv1ProtoTunnelerInfo::getBackoffRetryCount() const {
    return m_backoff_retry_count;
}
void OAITunnelv1ProtoTunnelerInfo::setBackoffRetryCount(const qint32 &backoff_retry_count) {
    m_backoff_retry_count = backoff_retry_count;
    m_backoff_retry_count_isSet = true;
}

bool OAITunnelv1ProtoTunnelerInfo::is_backoff_retry_count_Set() const{
    return m_backoff_retry_count_isSet;
}

bool OAITunnelv1ProtoTunnelerInfo::is_backoff_retry_count_Valid() const{
    return m_backoff_retry_count_isValid;
}

QString OAITunnelv1ProtoTunnelerInfo::getId() const {
    return m_id;
}
void OAITunnelv1ProtoTunnelerInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITunnelv1ProtoTunnelerInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAITunnelv1ProtoTunnelerInfo::is_id_Valid() const{
    return m_id_isValid;
}

OAITunnelv1ProtoTunnelerError OAITunnelv1ProtoTunnelerInfo::getLatestErr() const {
    return m_latest_err;
}
void OAITunnelv1ProtoTunnelerInfo::setLatestErr(const OAITunnelv1ProtoTunnelerError &latest_err) {
    m_latest_err = latest_err;
    m_latest_err_isSet = true;
}

bool OAITunnelv1ProtoTunnelerInfo::is_latest_err_Set() const{
    return m_latest_err_isSet;
}

bool OAITunnelv1ProtoTunnelerInfo::is_latest_err_Valid() const{
    return m_latest_err_isValid;
}

QString OAITunnelv1ProtoTunnelerInfo::getLatestRetryTime() const {
    return m_latest_retry_time;
}
void OAITunnelv1ProtoTunnelerInfo::setLatestRetryTime(const QString &latest_retry_time) {
    m_latest_retry_time = latest_retry_time;
    m_latest_retry_time_isSet = true;
}

bool OAITunnelv1ProtoTunnelerInfo::is_latest_retry_time_Set() const{
    return m_latest_retry_time_isSet;
}

bool OAITunnelv1ProtoTunnelerInfo::is_latest_retry_time_Valid() const{
    return m_latest_retry_time_isValid;
}

qint32 OAITunnelv1ProtoTunnelerInfo::getTotalRetryCount() const {
    return m_total_retry_count;
}
void OAITunnelv1ProtoTunnelerInfo::setTotalRetryCount(const qint32 &total_retry_count) {
    m_total_retry_count = total_retry_count;
    m_total_retry_count_isSet = true;
}

bool OAITunnelv1ProtoTunnelerInfo::is_total_retry_count_Set() const{
    return m_total_retry_count_isSet;
}

bool OAITunnelv1ProtoTunnelerInfo::is_total_retry_count_Valid() const{
    return m_total_retry_count_isValid;
}

bool OAITunnelv1ProtoTunnelerInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backoff_retry_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_err.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_retry_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_retry_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITunnelv1ProtoTunnelerInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
