/**
 * BeyondCorp API
 * Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITunnelv1ProtoTunnelerError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITunnelv1ProtoTunnelerError::OAITunnelv1ProtoTunnelerError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITunnelv1ProtoTunnelerError::OAITunnelv1ProtoTunnelerError() {
    this->initializeModel();
}

OAITunnelv1ProtoTunnelerError::~OAITunnelv1ProtoTunnelerError() {}

void OAITunnelv1ProtoTunnelerError::initializeModel() {

    m_err_isSet = false;
    m_err_isValid = false;

    m_retryable_isSet = false;
    m_retryable_isValid = false;
}

void OAITunnelv1ProtoTunnelerError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITunnelv1ProtoTunnelerError::fromJsonObject(QJsonObject json) {

    m_err_isValid = ::OpenAPI::fromJsonValue(m_err, json[QString("err")]);
    m_err_isSet = !json[QString("err")].isNull() && m_err_isValid;

    m_retryable_isValid = ::OpenAPI::fromJsonValue(m_retryable, json[QString("retryable")]);
    m_retryable_isSet = !json[QString("retryable")].isNull() && m_retryable_isValid;
}

QString OAITunnelv1ProtoTunnelerError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITunnelv1ProtoTunnelerError::asJsonObject() const {
    QJsonObject obj;
    if (m_err_isSet) {
        obj.insert(QString("err"), ::OpenAPI::toJsonValue(m_err));
    }
    if (m_retryable_isSet) {
        obj.insert(QString("retryable"), ::OpenAPI::toJsonValue(m_retryable));
    }
    return obj;
}

QString OAITunnelv1ProtoTunnelerError::getErr() const {
    return m_err;
}
void OAITunnelv1ProtoTunnelerError::setErr(const QString &err) {
    m_err = err;
    m_err_isSet = true;
}

bool OAITunnelv1ProtoTunnelerError::is_err_Set() const{
    return m_err_isSet;
}

bool OAITunnelv1ProtoTunnelerError::is_err_Valid() const{
    return m_err_isValid;
}

bool OAITunnelv1ProtoTunnelerError::isRetryable() const {
    return m_retryable;
}
void OAITunnelv1ProtoTunnelerError::setRetryable(const bool &retryable) {
    m_retryable = retryable;
    m_retryable_isSet = true;
}

bool OAITunnelv1ProtoTunnelerError::is_retryable_Set() const{
    return m_retryable_isSet;
}

bool OAITunnelv1ProtoTunnelerError::is_retryable_Valid() const{
    return m_retryable_isValid;
}

bool OAITunnelv1ProtoTunnelerError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_err_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retryable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITunnelv1ProtoTunnelerError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
