/**
 * BeyondCorp API
 * Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAllocatedConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAllocatedConnection::OAIAllocatedConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAllocatedConnection::OAIAllocatedConnection() {
    this->initializeModel();
}

OAIAllocatedConnection::~OAIAllocatedConnection() {}

void OAIAllocatedConnection::initializeModel() {

    m_ingress_port_isSet = false;
    m_ingress_port_isValid = false;

    m_psc_uri_isSet = false;
    m_psc_uri_isValid = false;
}

void OAIAllocatedConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAllocatedConnection::fromJsonObject(QJsonObject json) {

    m_ingress_port_isValid = ::OpenAPI::fromJsonValue(m_ingress_port, json[QString("ingressPort")]);
    m_ingress_port_isSet = !json[QString("ingressPort")].isNull() && m_ingress_port_isValid;

    m_psc_uri_isValid = ::OpenAPI::fromJsonValue(m_psc_uri, json[QString("pscUri")]);
    m_psc_uri_isSet = !json[QString("pscUri")].isNull() && m_psc_uri_isValid;
}

QString OAIAllocatedConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAllocatedConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_ingress_port_isSet) {
        obj.insert(QString("ingressPort"), ::OpenAPI::toJsonValue(m_ingress_port));
    }
    if (m_psc_uri_isSet) {
        obj.insert(QString("pscUri"), ::OpenAPI::toJsonValue(m_psc_uri));
    }
    return obj;
}

qint32 OAIAllocatedConnection::getIngressPort() const {
    return m_ingress_port;
}
void OAIAllocatedConnection::setIngressPort(const qint32 &ingress_port) {
    m_ingress_port = ingress_port;
    m_ingress_port_isSet = true;
}

bool OAIAllocatedConnection::is_ingress_port_Set() const{
    return m_ingress_port_isSet;
}

bool OAIAllocatedConnection::is_ingress_port_Valid() const{
    return m_ingress_port_isValid;
}

QString OAIAllocatedConnection::getPscUri() const {
    return m_psc_uri;
}
void OAIAllocatedConnection::setPscUri(const QString &psc_uri) {
    m_psc_uri = psc_uri;
    m_psc_uri_isSet = true;
}

bool OAIAllocatedConnection::is_psc_uri_Set() const{
    return m_psc_uri_isSet;
}

bool OAIAllocatedConnection::is_psc_uri_Valid() const{
    return m_psc_uri_isValid;
}

bool OAIAllocatedConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ingress_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psc_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAllocatedConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
