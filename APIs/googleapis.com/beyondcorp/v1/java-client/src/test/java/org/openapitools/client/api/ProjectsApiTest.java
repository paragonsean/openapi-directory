/*
 * BeyondCorp API
 * Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppGateway;
import org.openapitools.client.model.GoogleCloudBeyondcorpAppconnectionsV1AppConnection;
import org.openapitools.client.model.GoogleCloudBeyondcorpAppconnectionsV1ListAppConnectionsResponse;
import org.openapitools.client.model.GoogleCloudBeyondcorpAppconnectionsV1ResolveAppConnectionsResponse;
import org.openapitools.client.model.GoogleCloudBeyondcorpAppconnectorsV1AppConnector;
import org.openapitools.client.model.GoogleCloudBeyondcorpAppconnectorsV1ListAppConnectorsResponse;
import org.openapitools.client.model.GoogleCloudBeyondcorpAppconnectorsV1ReportStatusRequest;
import org.openapitools.client.model.GoogleCloudBeyondcorpAppconnectorsV1ResolveInstanceConfigResponse;
import org.openapitools.client.model.GoogleCloudLocationListLocationsResponse;
import org.openapitools.client.model.GoogleIamV1Policy;
import org.openapitools.client.model.GoogleIamV1SetIamPolicyRequest;
import org.openapitools.client.model.GoogleIamV1TestIamPermissionsRequest;
import org.openapitools.client.model.GoogleIamV1TestIamPermissionsResponse;
import org.openapitools.client.model.GoogleLongrunningListOperationsResponse;
import org.openapitools.client.model.GoogleLongrunningOperation;
import org.openapitools.client.model.ListAppGatewaysResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates a new AppConnection in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void beyondcorpProjectsLocationsAppConnectionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String appConnectionId = null;
        String requestId = null;
        Boolean validateOnly = null;
        GoogleCloudBeyondcorpAppconnectionsV1AppConnection googleCloudBeyondcorpAppconnectionsV1AppConnection = null;
        GoogleLongrunningOperation response = api.beyondcorpProjectsLocationsAppConnectionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, appConnectionId, requestId, validateOnly, googleCloudBeyondcorpAppconnectionsV1AppConnection);
        // TODO: test validations
    }

    /**
     * Lists AppConnections in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void beyondcorpProjectsLocationsAppConnectionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudBeyondcorpAppconnectionsV1ListAppConnectionsResponse response = api.beyondcorpProjectsLocationsAppConnectionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Resolves AppConnections details for a given AppConnector. An internal method called by a connector to find AppConnections to connect to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void beyondcorpProjectsLocationsAppConnectionsResolveTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String appConnectorId = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudBeyondcorpAppconnectionsV1ResolveAppConnectionsResponse response = api.beyondcorpProjectsLocationsAppConnectionsResolve(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, appConnectorId, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new AppConnector in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void beyondcorpProjectsLocationsAppConnectorsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String appConnectorId = null;
        String requestId = null;
        Boolean validateOnly = null;
        GoogleCloudBeyondcorpAppconnectorsV1AppConnector googleCloudBeyondcorpAppconnectorsV1AppConnector = null;
        GoogleLongrunningOperation response = api.beyondcorpProjectsLocationsAppConnectorsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, appConnectorId, requestId, validateOnly, googleCloudBeyondcorpAppconnectorsV1AppConnector);
        // TODO: test validations
    }

    /**
     * Lists AppConnectors in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void beyondcorpProjectsLocationsAppConnectorsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudBeyondcorpAppconnectorsV1ListAppConnectorsResponse response = api.beyondcorpProjectsLocationsAppConnectorsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates the parameters of a single AppConnector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void beyondcorpProjectsLocationsAppConnectorsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        String updateMask = null;
        Boolean validateOnly = null;
        GoogleCloudBeyondcorpAppconnectorsV1AppConnector googleCloudBeyondcorpAppconnectorsV1AppConnector = null;
        GoogleLongrunningOperation response = api.beyondcorpProjectsLocationsAppConnectorsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId, updateMask, validateOnly, googleCloudBeyondcorpAppconnectorsV1AppConnector);
        // TODO: test validations
    }

    /**
     * Report status for a given connector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void beyondcorpProjectsLocationsAppConnectorsReportStatusTest() throws ApiException {
        String appConnector = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudBeyondcorpAppconnectorsV1ReportStatusRequest googleCloudBeyondcorpAppconnectorsV1ReportStatusRequest = null;
        GoogleLongrunningOperation response = api.beyondcorpProjectsLocationsAppConnectorsReportStatus(appConnector, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudBeyondcorpAppconnectorsV1ReportStatusRequest);
        // TODO: test validations
    }

    /**
     * Gets instance configuration for a given AppConnector. An internal method called by a AppConnector to get its container config.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void beyondcorpProjectsLocationsAppConnectorsResolveInstanceConfigTest() throws ApiException {
        String appConnector = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudBeyondcorpAppconnectorsV1ResolveInstanceConfigResponse response = api.beyondcorpProjectsLocationsAppConnectorsResolveInstanceConfig(appConnector, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a new AppGateway in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void beyondcorpProjectsLocationsAppGatewaysCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String appGatewayId = null;
        String requestId = null;
        Boolean validateOnly = null;
        AppGateway appGateway = null;
        GoogleLongrunningOperation response = api.beyondcorpProjectsLocationsAppGatewaysCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, appGatewayId, requestId, validateOnly, appGateway);
        // TODO: test validations
    }

    /**
     * Lists AppGateways in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void beyondcorpProjectsLocationsAppGatewaysListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAppGatewaysResponse response = api.beyondcorpProjectsLocationsAppGatewaysList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void beyondcorpProjectsLocationsClientGatewaysGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer optionsRequestedPolicyVersion = null;
        GoogleIamV1Policy response = api.beyondcorpProjectsLocationsClientGatewaysGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, optionsRequestedPolicyVersion);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return &#x60;NOT_FOUND&#x60;, &#x60;INVALID_ARGUMENT&#x60;, and &#x60;PERMISSION_DENIED&#x60; errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void beyondcorpProjectsLocationsClientGatewaysSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleIamV1SetIamPolicyRequest googleIamV1SetIamPolicyRequest = null;
        GoogleIamV1Policy response = api.beyondcorpProjectsLocationsClientGatewaysSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleIamV1SetIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a &#x60;NOT_FOUND&#x60; error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void beyondcorpProjectsLocationsClientGatewaysTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleIamV1TestIamPermissionsRequest googleIamV1TestIamPermissionsRequest = null;
        GoogleIamV1TestIamPermissionsResponse response = api.beyondcorpProjectsLocationsClientGatewaysTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleIamV1TestIamPermissionsRequest);
        // TODO: test validations
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void beyondcorpProjectsLocationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudLocationListLocationsResponse response = api.beyondcorpProjectsLocationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void beyondcorpProjectsLocationsOperationsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.beyondcorpProjectsLocationsOperationsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void beyondcorpProjectsLocationsOperationsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        Boolean validateOnly = null;
        Object response = api.beyondcorpProjectsLocationsOperationsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId, validateOnly);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void beyondcorpProjectsLocationsOperationsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleLongrunningOperation response = api.beyondcorpProjectsLocationsOperationsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void beyondcorpProjectsLocationsOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleLongrunningListOperationsResponse response = api.beyondcorpProjectsLocationsOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

}
