/*
 * BeyondCorp API
 * Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Insight filters, groupings and aggregations that can be applied for the insight. Examples: aggregations, groups, field filters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:57.781857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata {
  /**
   * Gets or Sets aggregations
   */
  @JsonAdapter(AggregationsEnum.Adapter.class)
  public enum AggregationsEnum {
    AGGREGATION_UNSPECIFIED("AGGREGATION_UNSPECIFIED"),
    
    HOURLY("HOURLY"),
    
    DAILY("DAILY"),
    
    WEEKLY("WEEKLY"),
    
    MONTHLY("MONTHLY"),
    
    CUSTOM_DATE_RANGE("CUSTOM_DATE_RANGE");

    private String value;

    AggregationsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregationsEnum fromValue(String value) {
      for (AggregationsEnum b : AggregationsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AggregationsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregationsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregationsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AggregationsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AggregationsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGGREGATIONS = "aggregations";
  @SerializedName(SERIALIZED_NAME_AGGREGATIONS)
  private List<AggregationsEnum> aggregations = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<String> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUB_CATEGORY = "subCategory";
  @SerializedName(SERIALIZED_NAME_SUB_CATEGORY)
  private String subCategory;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata() {
  }

  public GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata(
     List<AggregationsEnum> aggregations, 
     String category, 
     String displayName, 
     List<GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField> fields, 
     List<String> groups, 
     String subCategory, 
     String type
  ) {
    this();
    this.aggregations = aggregations;
    this.category = category;
    this.displayName = displayName;
    this.fields = fields;
    this.groups = groups;
    this.subCategory = subCategory;
    this.type = type;
  }

  /**
   * Output only. List of aggregation types available for insight.
   * @return aggregations
   */
  @javax.annotation.Nullable
  public List<AggregationsEnum> getAggregations() {
    return aggregations;
  }



  /**
   * Output only. Category of the insight.
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }



  /**
   * Output only. Common name of the insight.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * Output only. List of fields available for insight.
   * @return fields
   */
  @javax.annotation.Nullable
  public List<GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField> getFields() {
    return fields;
  }



  /**
   * Output only. List of groupings available for insight.
   * @return groups
   */
  @javax.annotation.Nullable
  public List<String> getGroups() {
    return groups;
  }



  /**
   * Output only. Sub-Category of the insight.
   * @return subCategory
   */
  @javax.annotation.Nullable
  public String getSubCategory() {
    return subCategory;
  }



  /**
   * Output only. Type of the insight. It is metadata describing whether the insight is a metric (e.g. count) or a report (e.g. list, status).
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata googleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata = (GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata) o;
    return Objects.equals(this.aggregations, googleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata.aggregations) &&
        Objects.equals(this.category, googleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata.category) &&
        Objects.equals(this.displayName, googleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata.displayName) &&
        Objects.equals(this.fields, googleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata.fields) &&
        Objects.equals(this.groups, googleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata.groups) &&
        Objects.equals(this.subCategory, googleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata.subCategory) &&
        Objects.equals(this.type, googleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregations, category, displayName, fields, groups, subCategory, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata {\n");
    sb.append("    aggregations: ").append(toIndentedString(aggregations)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    subCategory: ").append(toIndentedString(subCategory)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregations");
    openapiFields.add("category");
    openapiFields.add("displayName");
    openapiFields.add("fields");
    openapiFields.add("groups");
    openapiFields.add("subCategory");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata is not found in the empty JSON string", GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("aggregations") != null && !jsonObj.get("aggregations").isJsonNull() && !jsonObj.get("aggregations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregations` to be an array in the JSON string but got `%s`", jsonObj.get("aggregations").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) {
        JsonArray jsonArrayfields = jsonObj.getAsJsonArray("fields");
        if (jsonArrayfields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
          }

          // validate the optional field `fields` (array)
          for (int i = 0; i < jsonArrayfields.size(); i++) {
            GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField.validateJsonElement(jsonArrayfields.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull() && !jsonObj.get("groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
      }
      if ((jsonObj.get("subCategory") != null && !jsonObj.get("subCategory").isJsonNull()) && !jsonObj.get("subCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subCategory").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata>() {
           @Override
           public void write(JsonWriter out, GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata
   */
  public static GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata.class);
  }

  /**
   * Convert an instance of GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

