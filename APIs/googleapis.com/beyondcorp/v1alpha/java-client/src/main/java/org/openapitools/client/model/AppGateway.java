/*
 * BeyondCorp API
 * Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AllocatedConnection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A BeyondCorp AppGateway resource represents a BeyondCorp protected AppGateway to a remote application. It creates all the necessary GCP components needed for creating a BeyondCorp protected AppGateway. Multiple connectors can be authorised for a single AppGateway.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:57.781857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppGateway {
  public static final String SERIALIZED_NAME_ALLOCATED_CONNECTIONS = "allocatedConnections";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_CONNECTIONS)
  private List<AllocatedConnection> allocatedConnections = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * Required. The type of hosting used by the AppGateway.
   */
  @JsonAdapter(HostTypeEnum.Adapter.class)
  public enum HostTypeEnum {
    HOST_TYPE_UNSPECIFIED("HOST_TYPE_UNSPECIFIED"),
    
    GCP_REGIONAL_MIG("GCP_REGIONAL_MIG");

    private String value;

    HostTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HostTypeEnum fromValue(String value) {
      for (HostTypeEnum b : HostTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HostTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HostTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HostTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HostTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HostTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOST_TYPE = "hostType";
  @SerializedName(SERIALIZED_NAME_HOST_TYPE)
  private HostTypeEnum hostType;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Output only. The current state of the AppGateway.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    CREATED("CREATED"),
    
    UPDATING("UPDATING"),
    
    DELETING("DELETING"),
    
    DOWN("DOWN");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * Required. The type of network connectivity used by the AppGateway.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    TCP_PROXY("TCP_PROXY");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public AppGateway() {
  }

  public AppGateway(
     List<AllocatedConnection> allocatedConnections, 
     String createTime, 
     StateEnum state, 
     String uid, 
     String updateTime, 
     String uri
  ) {
    this();
    this.allocatedConnections = allocatedConnections;
    this.createTime = createTime;
    this.state = state;
    this.uid = uid;
    this.updateTime = updateTime;
    this.uri = uri;
  }

  /**
   * Output only. A list of connections allocated for the Gateway
   * @return allocatedConnections
   */
  @javax.annotation.Nullable
  public List<AllocatedConnection> getAllocatedConnections() {
    return allocatedConnections;
  }



  /**
   * Output only. Timestamp when the resource was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public AppGateway displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Optional. An arbitrary user-provided name for the AppGateway. Cannot exceed 64 characters.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public AppGateway hostType(HostTypeEnum hostType) {
    this.hostType = hostType;
    return this;
  }

  /**
   * Required. The type of hosting used by the AppGateway.
   * @return hostType
   */
  @javax.annotation.Nullable
  public HostTypeEnum getHostType() {
    return hostType;
  }

  public void setHostType(HostTypeEnum hostType) {
    this.hostType = hostType;
  }


  public AppGateway labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public AppGateway putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Resource labels to represent user provided metadata.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public AppGateway name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Unique resource name of the AppGateway. The name is ignored when creating an AppGateway.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. The current state of the AppGateway.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public AppGateway type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Required. The type of network connectivity used by the AppGateway.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Output only. A unique identifier for the instance generated by the system.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. Timestamp when the resource was last modified.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  /**
   * Output only. Server-defined URI for this resource.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppGateway appGateway = (AppGateway) o;
    return Objects.equals(this.allocatedConnections, appGateway.allocatedConnections) &&
        Objects.equals(this.createTime, appGateway.createTime) &&
        Objects.equals(this.displayName, appGateway.displayName) &&
        Objects.equals(this.hostType, appGateway.hostType) &&
        Objects.equals(this.labels, appGateway.labels) &&
        Objects.equals(this.name, appGateway.name) &&
        Objects.equals(this.state, appGateway.state) &&
        Objects.equals(this.type, appGateway.type) &&
        Objects.equals(this.uid, appGateway.uid) &&
        Objects.equals(this.updateTime, appGateway.updateTime) &&
        Objects.equals(this.uri, appGateway.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocatedConnections, createTime, displayName, hostType, labels, name, state, type, uid, updateTime, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppGateway {\n");
    sb.append("    allocatedConnections: ").append(toIndentedString(allocatedConnections)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    hostType: ").append(toIndentedString(hostType)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allocatedConnections");
    openapiFields.add("createTime");
    openapiFields.add("displayName");
    openapiFields.add("hostType");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("state");
    openapiFields.add("type");
    openapiFields.add("uid");
    openapiFields.add("updateTime");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppGateway
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppGateway.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppGateway is not found in the empty JSON string", AppGateway.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppGateway.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppGateway` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("allocatedConnections") != null && !jsonObj.get("allocatedConnections").isJsonNull()) {
        JsonArray jsonArrayallocatedConnections = jsonObj.getAsJsonArray("allocatedConnections");
        if (jsonArrayallocatedConnections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allocatedConnections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allocatedConnections` to be an array in the JSON string but got `%s`", jsonObj.get("allocatedConnections").toString()));
          }

          // validate the optional field `allocatedConnections` (array)
          for (int i = 0; i < jsonArrayallocatedConnections.size(); i++) {
            AllocatedConnection.validateJsonElement(jsonArrayallocatedConnections.get(i));
          };
        }
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("hostType") != null && !jsonObj.get("hostType").isJsonNull()) && !jsonObj.get("hostType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostType").toString()));
      }
      // validate the optional field `hostType`
      if (jsonObj.get("hostType") != null && !jsonObj.get("hostType").isJsonNull()) {
        HostTypeEnum.validateJsonElement(jsonObj.get("hostType"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppGateway.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppGateway' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppGateway> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppGateway.class));

       return (TypeAdapter<T>) new TypeAdapter<AppGateway>() {
           @Override
           public void write(JsonWriter out, AppGateway value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppGateway read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppGateway given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppGateway
   * @throws IOException if the JSON string is invalid with respect to AppGateway
   */
  public static AppGateway fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppGateway.class);
  }

  /**
   * Convert an instance of AppGateway to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

