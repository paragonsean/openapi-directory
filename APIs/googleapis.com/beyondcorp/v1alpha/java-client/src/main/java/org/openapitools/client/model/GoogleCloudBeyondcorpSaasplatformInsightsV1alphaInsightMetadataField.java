/*
 * BeyondCorp API
 * Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Field metadata. Commonly understandable name and description for the field. Multiple such fields constitute the Insight.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:57.781857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FILTER_ALIAS = "filterAlias";
  @SerializedName(SERIALIZED_NAME_FILTER_ALIAS)
  private String filterAlias;

  public static final String SERIALIZED_NAME_FILTERABLE = "filterable";
  @SerializedName(SERIALIZED_NAME_FILTERABLE)
  private Boolean filterable;

  public static final String SERIALIZED_NAME_GROUPABLE = "groupable";
  @SerializedName(SERIALIZED_NAME_GROUPABLE)
  private Boolean groupable;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField() {
  }

  public GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField(
     String description, 
     String displayName, 
     String filterAlias, 
     Boolean filterable, 
     Boolean groupable, 
     String id
  ) {
    this();
    this.description = description;
    this.displayName = displayName;
    this.filterAlias = filterAlias;
    this.filterable = filterable;
    this.groupable = groupable;
    this.id = id;
  }

  /**
   * Output only. Description of the field.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Output only. Name of the field.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * Output only. Field name to be used in filter while requesting configured insight filtered on this field.
   * @return filterAlias
   */
  @javax.annotation.Nullable
  public String getFilterAlias() {
    return filterAlias;
  }



  /**
   * Output only. Indicates whether the field can be used for filtering.
   * @return filterable
   */
  @javax.annotation.Nullable
  public Boolean getFilterable() {
    return filterable;
  }



  /**
   * Output only. Indicates whether the field can be used for grouping in custom grouping request.
   * @return groupable
   */
  @javax.annotation.Nullable
  public Boolean getGroupable() {
    return groupable;
  }



  /**
   * Output only. Field id for which this is the metadata.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField googleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField = (GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField) o;
    return Objects.equals(this.description, googleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField.description) &&
        Objects.equals(this.displayName, googleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField.displayName) &&
        Objects.equals(this.filterAlias, googleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField.filterAlias) &&
        Objects.equals(this.filterable, googleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField.filterable) &&
        Objects.equals(this.groupable, googleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField.groupable) &&
        Objects.equals(this.id, googleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayName, filterAlias, filterable, groupable, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    filterAlias: ").append(toIndentedString(filterAlias)).append("\n");
    sb.append("    filterable: ").append(toIndentedString(filterable)).append("\n");
    sb.append("    groupable: ").append(toIndentedString(groupable)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("filterAlias");
    openapiFields.add("filterable");
    openapiFields.add("groupable");
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField is not found in the empty JSON string", GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("filterAlias") != null && !jsonObj.get("filterAlias").isJsonNull()) && !jsonObj.get("filterAlias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filterAlias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filterAlias").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField>() {
           @Override
           public void write(JsonWriter out, GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField
   */
  public static GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField.class);
  }

  /**
   * Convert an instance of GoogleCloudBeyondcorpSaasplatformInsightsV1alphaInsightMetadataField to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

