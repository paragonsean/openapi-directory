/**
 * BeyondCorp API
 * Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule() {
    this->initializeModel();
}

OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::~OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule() {}

void OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::initializeModel() {

    m_group_isSet = false;
    m_group_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rule_setting_isSet = false;
    m_rule_setting_isValid = false;
}

void OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::fromJsonObject(QJsonObject json) {

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rule_setting_isValid = ::OpenAPI::fromJsonValue(m_rule_setting, json[QString("ruleSetting")]);
    m_rule_setting_isSet = !json[QString("ruleSetting")].isNull() && m_rule_setting_isValid;
}

QString OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::asJsonObject() const {
    QJsonObject obj;
    if (m_group.isSet()) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rule_setting.isSet()) {
        obj.insert(QString("ruleSetting"), ::OpenAPI::toJsonValue(m_rule_setting));
    }
    return obj;
}

OAIGoogleCloudBeyondcorpPartnerservicesV1alphaGroup OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::getGroup() const {
    return m_group;
}
void OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::setGroup(const OAIGoogleCloudBeyondcorpPartnerservicesV1alphaGroup &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::is_group_Set() const{
    return m_group_isSet;
}

bool OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::is_group_Valid() const{
    return m_group_isValid;
}

QString OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::getName() const {
    return m_name;
}
void OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::is_name_Valid() const{
    return m_name_isValid;
}

OAIGoogleCloudBeyondcorpPartnerservicesV1alphaRuleSetting OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::getRuleSetting() const {
    return m_rule_setting;
}
void OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::setRuleSetting(const OAIGoogleCloudBeyondcorpPartnerservicesV1alphaRuleSetting &rule_setting) {
    m_rule_setting = rule_setting;
    m_rule_setting_isSet = true;
}

bool OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::is_rule_setting_Set() const{
    return m_rule_setting_isSet;
}

bool OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::is_rule_setting_Valid() const{
    return m_rule_setting_isValid;
}

bool OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
