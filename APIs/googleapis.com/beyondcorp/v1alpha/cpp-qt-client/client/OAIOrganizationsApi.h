/**
 * BeyondCorp API
 * Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrganizationsApi_H
#define OAI_OAIOrganizationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule.h"
#include "OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse.h"
#include "OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListPartnerTenantsResponse.h"
#include "OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListProxyConfigsResponse.h"
#include "OAIGoogleCloudBeyondcorpPartnerservicesV1alphaPartnerTenant.h"
#include "OAIGoogleCloudBeyondcorpPartnerservicesV1alphaProxyConfig.h"
#include "OAIGoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaListSubscriptionsResponse.h"
#include "OAIGoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.h"
#include "OAIGoogleLongrunningOperation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrganizationsApi : public QObject {
    Q_OBJECT

public:
    OAIOrganizationsApi(const int timeOut = 0);
    ~OAIOrganizationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  request_id QString [optional]
    * @param[in]  oai_google_cloud_beyondcorp_partnerservices_v1alpha_browser_dlp_rule OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule [optional]
    */
    virtual void beyondcorp_organizations_locations_global_partnerTenants_browserDlpRules_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule> &oai_google_cloud_beyondcorp_partnerservices_v1alpha_browser_dlp_rule = ::OpenAPI::OptionalParam<OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void beyondcorp_organizations_locations_global_partnerTenants_browserDlpRules_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  request_id QString [optional]
    * @param[in]  oai_google_cloud_beyondcorp_partnerservices_v1alpha_partner_tenant OAIGoogleCloudBeyondcorpPartnerservicesV1alphaPartnerTenant [optional]
    */
    virtual void beyondcorp_organizations_locations_global_partnerTenants_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudBeyondcorpPartnerservicesV1alphaPartnerTenant> &oai_google_cloud_beyondcorp_partnerservices_v1alpha_partner_tenant = ::OpenAPI::OptionalParam<OAIGoogleCloudBeyondcorpPartnerservicesV1alphaPartnerTenant>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void beyondcorp_organizations_locations_global_partnerTenants_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  request_id QString [optional]
    * @param[in]  oai_google_cloud_beyondcorp_partnerservices_v1alpha_proxy_config OAIGoogleCloudBeyondcorpPartnerservicesV1alphaProxyConfig [optional]
    */
    virtual void beyondcorp_organizations_locations_global_partnerTenants_proxyConfigs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudBeyondcorpPartnerservicesV1alphaProxyConfig> &oai_google_cloud_beyondcorp_partnerservices_v1alpha_proxy_config = ::OpenAPI::OptionalParam<OAIGoogleCloudBeyondcorpPartnerservicesV1alphaProxyConfig>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void beyondcorp_organizations_locations_global_partnerTenants_proxyConfigs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_beyondcorp_saasplatform_subscriptions_v1alpha_subscription OAIGoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription [optional]
    */
    virtual void beyondcorp_organizations_locations_subscriptions_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription> &oai_google_cloud_beyondcorp_saasplatform_subscriptions_v1alpha_subscription = ::OpenAPI::OptionalParam<OAIGoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void beyondcorp_organizations_locations_subscriptions_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void beyondcorp_organizations_locations_global_partnerTenants_browserDlpRules_createCallback(OAIHttpRequestWorker *worker);
    void beyondcorp_organizations_locations_global_partnerTenants_browserDlpRules_listCallback(OAIHttpRequestWorker *worker);
    void beyondcorp_organizations_locations_global_partnerTenants_createCallback(OAIHttpRequestWorker *worker);
    void beyondcorp_organizations_locations_global_partnerTenants_listCallback(OAIHttpRequestWorker *worker);
    void beyondcorp_organizations_locations_global_partnerTenants_proxyConfigs_createCallback(OAIHttpRequestWorker *worker);
    void beyondcorp_organizations_locations_global_partnerTenants_proxyConfigs_listCallback(OAIHttpRequestWorker *worker);
    void beyondcorp_organizations_locations_subscriptions_createCallback(OAIHttpRequestWorker *worker);
    void beyondcorp_organizations_locations_subscriptions_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void beyondcorp_organizations_locations_global_partnerTenants_browserDlpRules_createSignal(OAIGoogleLongrunningOperation summary);
    void beyondcorp_organizations_locations_global_partnerTenants_browserDlpRules_listSignal(OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse summary);
    void beyondcorp_organizations_locations_global_partnerTenants_createSignal(OAIGoogleLongrunningOperation summary);
    void beyondcorp_organizations_locations_global_partnerTenants_listSignal(OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListPartnerTenantsResponse summary);
    void beyondcorp_organizations_locations_global_partnerTenants_proxyConfigs_createSignal(OAIGoogleLongrunningOperation summary);
    void beyondcorp_organizations_locations_global_partnerTenants_proxyConfigs_listSignal(OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListProxyConfigsResponse summary);
    void beyondcorp_organizations_locations_subscriptions_createSignal(OAIGoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription summary);
    void beyondcorp_organizations_locations_subscriptions_listSignal(OAIGoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaListSubscriptionsResponse summary);


    void beyondcorp_organizations_locations_global_partnerTenants_browserDlpRules_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void beyondcorp_organizations_locations_global_partnerTenants_browserDlpRules_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse summary);
    void beyondcorp_organizations_locations_global_partnerTenants_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void beyondcorp_organizations_locations_global_partnerTenants_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListPartnerTenantsResponse summary);
    void beyondcorp_organizations_locations_global_partnerTenants_proxyConfigs_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void beyondcorp_organizations_locations_global_partnerTenants_proxyConfigs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListProxyConfigsResponse summary);
    void beyondcorp_organizations_locations_subscriptions_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription summary);
    void beyondcorp_organizations_locations_subscriptions_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaListSubscriptionsResponse summary);

    Q_DECL_DEPRECATED_X("Use beyondcorp_organizations_locations_global_partnerTenants_browserDlpRules_createSignalError() instead")
    void beyondcorp_organizations_locations_global_partnerTenants_browserDlpRules_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void beyondcorp_organizations_locations_global_partnerTenants_browserDlpRules_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use beyondcorp_organizations_locations_global_partnerTenants_browserDlpRules_listSignalError() instead")
    void beyondcorp_organizations_locations_global_partnerTenants_browserDlpRules_listSignalE(OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void beyondcorp_organizations_locations_global_partnerTenants_browserDlpRules_listSignalError(OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use beyondcorp_organizations_locations_global_partnerTenants_createSignalError() instead")
    void beyondcorp_organizations_locations_global_partnerTenants_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void beyondcorp_organizations_locations_global_partnerTenants_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use beyondcorp_organizations_locations_global_partnerTenants_listSignalError() instead")
    void beyondcorp_organizations_locations_global_partnerTenants_listSignalE(OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListPartnerTenantsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void beyondcorp_organizations_locations_global_partnerTenants_listSignalError(OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListPartnerTenantsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use beyondcorp_organizations_locations_global_partnerTenants_proxyConfigs_createSignalError() instead")
    void beyondcorp_organizations_locations_global_partnerTenants_proxyConfigs_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void beyondcorp_organizations_locations_global_partnerTenants_proxyConfigs_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use beyondcorp_organizations_locations_global_partnerTenants_proxyConfigs_listSignalError() instead")
    void beyondcorp_organizations_locations_global_partnerTenants_proxyConfigs_listSignalE(OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListProxyConfigsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void beyondcorp_organizations_locations_global_partnerTenants_proxyConfigs_listSignalError(OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListProxyConfigsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use beyondcorp_organizations_locations_subscriptions_createSignalError() instead")
    void beyondcorp_organizations_locations_subscriptions_createSignalE(OAIGoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void beyondcorp_organizations_locations_subscriptions_createSignalError(OAIGoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use beyondcorp_organizations_locations_subscriptions_listSignalError() instead")
    void beyondcorp_organizations_locations_subscriptions_listSignalE(OAIGoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaListSubscriptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void beyondcorp_organizations_locations_subscriptions_listSignalError(OAIGoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaListSubscriptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use beyondcorp_organizations_locations_global_partnerTenants_browserDlpRules_createSignalErrorFull() instead")
    void beyondcorp_organizations_locations_global_partnerTenants_browserDlpRules_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void beyondcorp_organizations_locations_global_partnerTenants_browserDlpRules_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use beyondcorp_organizations_locations_global_partnerTenants_browserDlpRules_listSignalErrorFull() instead")
    void beyondcorp_organizations_locations_global_partnerTenants_browserDlpRules_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void beyondcorp_organizations_locations_global_partnerTenants_browserDlpRules_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use beyondcorp_organizations_locations_global_partnerTenants_createSignalErrorFull() instead")
    void beyondcorp_organizations_locations_global_partnerTenants_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void beyondcorp_organizations_locations_global_partnerTenants_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use beyondcorp_organizations_locations_global_partnerTenants_listSignalErrorFull() instead")
    void beyondcorp_organizations_locations_global_partnerTenants_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void beyondcorp_organizations_locations_global_partnerTenants_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use beyondcorp_organizations_locations_global_partnerTenants_proxyConfigs_createSignalErrorFull() instead")
    void beyondcorp_organizations_locations_global_partnerTenants_proxyConfigs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void beyondcorp_organizations_locations_global_partnerTenants_proxyConfigs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use beyondcorp_organizations_locations_global_partnerTenants_proxyConfigs_listSignalErrorFull() instead")
    void beyondcorp_organizations_locations_global_partnerTenants_proxyConfigs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void beyondcorp_organizations_locations_global_partnerTenants_proxyConfigs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use beyondcorp_organizations_locations_subscriptions_createSignalErrorFull() instead")
    void beyondcorp_organizations_locations_subscriptions_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void beyondcorp_organizations_locations_subscriptions_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use beyondcorp_organizations_locations_subscriptions_listSignalErrorFull() instead")
    void beyondcorp_organizations_locations_subscriptions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void beyondcorp_organizations_locations_subscriptions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
