/**
 * BeyondCorp API
 * Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorInstanceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorInstanceConfig::OAIConnectorInstanceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorInstanceConfig::OAIConnectorInstanceConfig() {
    this->initializeModel();
}

OAIConnectorInstanceConfig::~OAIConnectorInstanceConfig() {}

void OAIConnectorInstanceConfig::initializeModel() {

    m_image_config_isSet = false;
    m_image_config_isValid = false;

    m_instance_config_isSet = false;
    m_instance_config_isValid = false;

    m_notification_config_isSet = false;
    m_notification_config_isValid = false;

    m_sequence_number_isSet = false;
    m_sequence_number_isValid = false;
}

void OAIConnectorInstanceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorInstanceConfig::fromJsonObject(QJsonObject json) {

    m_image_config_isValid = ::OpenAPI::fromJsonValue(m_image_config, json[QString("imageConfig")]);
    m_image_config_isSet = !json[QString("imageConfig")].isNull() && m_image_config_isValid;

    m_instance_config_isValid = ::OpenAPI::fromJsonValue(m_instance_config, json[QString("instanceConfig")]);
    m_instance_config_isSet = !json[QString("instanceConfig")].isNull() && m_instance_config_isValid;

    m_notification_config_isValid = ::OpenAPI::fromJsonValue(m_notification_config, json[QString("notificationConfig")]);
    m_notification_config_isSet = !json[QString("notificationConfig")].isNull() && m_notification_config_isValid;

    m_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_sequence_number, json[QString("sequenceNumber")]);
    m_sequence_number_isSet = !json[QString("sequenceNumber")].isNull() && m_sequence_number_isValid;
}

QString OAIConnectorInstanceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorInstanceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_image_config.isSet()) {
        obj.insert(QString("imageConfig"), ::OpenAPI::toJsonValue(m_image_config));
    }
    if (m_instance_config.size() > 0) {
        obj.insert(QString("instanceConfig"), ::OpenAPI::toJsonValue(m_instance_config));
    }
    if (m_notification_config.isSet()) {
        obj.insert(QString("notificationConfig"), ::OpenAPI::toJsonValue(m_notification_config));
    }
    if (m_sequence_number_isSet) {
        obj.insert(QString("sequenceNumber"), ::OpenAPI::toJsonValue(m_sequence_number));
    }
    return obj;
}

OAIImageConfig OAIConnectorInstanceConfig::getImageConfig() const {
    return m_image_config;
}
void OAIConnectorInstanceConfig::setImageConfig(const OAIImageConfig &image_config) {
    m_image_config = image_config;
    m_image_config_isSet = true;
}

bool OAIConnectorInstanceConfig::is_image_config_Set() const{
    return m_image_config_isSet;
}

bool OAIConnectorInstanceConfig::is_image_config_Valid() const{
    return m_image_config_isValid;
}

QMap<QString, QJsonValue> OAIConnectorInstanceConfig::getInstanceConfig() const {
    return m_instance_config;
}
void OAIConnectorInstanceConfig::setInstanceConfig(const QMap<QString, QJsonValue> &instance_config) {
    m_instance_config = instance_config;
    m_instance_config_isSet = true;
}

bool OAIConnectorInstanceConfig::is_instance_config_Set() const{
    return m_instance_config_isSet;
}

bool OAIConnectorInstanceConfig::is_instance_config_Valid() const{
    return m_instance_config_isValid;
}

OAINotificationConfig OAIConnectorInstanceConfig::getNotificationConfig() const {
    return m_notification_config;
}
void OAIConnectorInstanceConfig::setNotificationConfig(const OAINotificationConfig &notification_config) {
    m_notification_config = notification_config;
    m_notification_config_isSet = true;
}

bool OAIConnectorInstanceConfig::is_notification_config_Set() const{
    return m_notification_config_isSet;
}

bool OAIConnectorInstanceConfig::is_notification_config_Valid() const{
    return m_notification_config_isValid;
}

QString OAIConnectorInstanceConfig::getSequenceNumber() const {
    return m_sequence_number;
}
void OAIConnectorInstanceConfig::setSequenceNumber(const QString &sequence_number) {
    m_sequence_number = sequence_number;
    m_sequence_number_isSet = true;
}

bool OAIConnectorInstanceConfig::is_sequence_number_Set() const{
    return m_sequence_number_isSet;
}

bool OAIConnectorInstanceConfig::is_sequence_number_Valid() const{
    return m_sequence_number_isValid;
}

bool OAIConnectorInstanceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorInstanceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
