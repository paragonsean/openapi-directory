/**
 * BeyondCorp API
 * Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAppGatewaysResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAppGatewaysResponse::OAIListAppGatewaysResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAppGatewaysResponse::OAIListAppGatewaysResponse() {
    this->initializeModel();
}

OAIListAppGatewaysResponse::~OAIListAppGatewaysResponse() {}

void OAIListAppGatewaysResponse::initializeModel() {

    m_app_gateways_isSet = false;
    m_app_gateways_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_unreachable_isSet = false;
    m_unreachable_isValid = false;
}

void OAIListAppGatewaysResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAppGatewaysResponse::fromJsonObject(QJsonObject json) {

    m_app_gateways_isValid = ::OpenAPI::fromJsonValue(m_app_gateways, json[QString("appGateways")]);
    m_app_gateways_isSet = !json[QString("appGateways")].isNull() && m_app_gateways_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_unreachable_isValid = ::OpenAPI::fromJsonValue(m_unreachable, json[QString("unreachable")]);
    m_unreachable_isSet = !json[QString("unreachable")].isNull() && m_unreachable_isValid;
}

QString OAIListAppGatewaysResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAppGatewaysResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_gateways.size() > 0) {
        obj.insert(QString("appGateways"), ::OpenAPI::toJsonValue(m_app_gateways));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_unreachable.size() > 0) {
        obj.insert(QString("unreachable"), ::OpenAPI::toJsonValue(m_unreachable));
    }
    return obj;
}

QList<OAIAppGateway> OAIListAppGatewaysResponse::getAppGateways() const {
    return m_app_gateways;
}
void OAIListAppGatewaysResponse::setAppGateways(const QList<OAIAppGateway> &app_gateways) {
    m_app_gateways = app_gateways;
    m_app_gateways_isSet = true;
}

bool OAIListAppGatewaysResponse::is_app_gateways_Set() const{
    return m_app_gateways_isSet;
}

bool OAIListAppGatewaysResponse::is_app_gateways_Valid() const{
    return m_app_gateways_isValid;
}

QString OAIListAppGatewaysResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListAppGatewaysResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListAppGatewaysResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListAppGatewaysResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<QString> OAIListAppGatewaysResponse::getUnreachable() const {
    return m_unreachable;
}
void OAIListAppGatewaysResponse::setUnreachable(const QList<QString> &unreachable) {
    m_unreachable = unreachable;
    m_unreachable_isSet = true;
}

bool OAIListAppGatewaysResponse::is_unreachable_Set() const{
    return m_unreachable_isSet;
}

bool OAIListAppGatewaysResponse::is_unreachable_Valid() const{
    return m_unreachable_isValid;
}

bool OAIListAppGatewaysResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_gateways.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unreachable.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAppGatewaysResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
