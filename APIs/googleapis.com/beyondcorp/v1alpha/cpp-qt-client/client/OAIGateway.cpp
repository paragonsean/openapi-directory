/**
 * BeyondCorp API
 * Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGateway.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGateway::OAIGateway(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGateway::OAIGateway() {
    this->initializeModel();
}

OAIGateway::~OAIGateway() {}

void OAIGateway::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_user_port_isSet = false;
    m_user_port_isValid = false;
}

void OAIGateway::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGateway::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_user_port_isValid = ::OpenAPI::fromJsonValue(m_user_port, json[QString("userPort")]);
    m_user_port_isSet = !json[QString("userPort")].isNull() && m_user_port_isValid;
}

QString OAIGateway::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGateway::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_user_port_isSet) {
        obj.insert(QString("userPort"), ::OpenAPI::toJsonValue(m_user_port));
    }
    return obj;
}

QString OAIGateway::getType() const {
    return m_type;
}
void OAIGateway::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGateway::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGateway::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGateway::getUri() const {
    return m_uri;
}
void OAIGateway::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIGateway::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIGateway::is_uri_Valid() const{
    return m_uri_isValid;
}

qint32 OAIGateway::getUserPort() const {
    return m_user_port;
}
void OAIGateway::setUserPort(const qint32 &user_port) {
    m_user_port = user_port;
    m_user_port_isSet = true;
}

bool OAIGateway::is_user_port_Set() const{
    return m_user_port_isSet;
}

bool OAIGateway::is_user_port_Valid() const{
    return m_user_port_isValid;
}

bool OAIGateway::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGateway::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
