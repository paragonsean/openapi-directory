/**
 * BeyondCorp API
 * Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse::OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse::OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse() {
    this->initializeModel();
}

OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse::~OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse() {}

void OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse::initializeModel() {

    m_browser_dlp_rules_isSet = false;
    m_browser_dlp_rules_isValid = false;
}

void OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse::fromJsonObject(QJsonObject json) {

    m_browser_dlp_rules_isValid = ::OpenAPI::fromJsonValue(m_browser_dlp_rules, json[QString("browserDlpRules")]);
    m_browser_dlp_rules_isSet = !json[QString("browserDlpRules")].isNull() && m_browser_dlp_rules_isValid;
}

QString OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_browser_dlp_rules.size() > 0) {
        obj.insert(QString("browserDlpRules"), ::OpenAPI::toJsonValue(m_browser_dlp_rules));
    }
    return obj;
}

QList<OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule> OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse::getBrowserDlpRules() const {
    return m_browser_dlp_rules;
}
void OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse::setBrowserDlpRules(const QList<OAIGoogleCloudBeyondcorpPartnerservicesV1alphaBrowserDlpRule> &browser_dlp_rules) {
    m_browser_dlp_rules = browser_dlp_rules;
    m_browser_dlp_rules_isSet = true;
}

bool OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse::is_browser_dlp_rules_Set() const{
    return m_browser_dlp_rules_isSet;
}

bool OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse::is_browser_dlp_rules_Valid() const{
    return m_browser_dlp_rules_isValid;
}

bool OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_browser_dlp_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudBeyondcorpPartnerservicesV1alphaListBrowserDlpRulesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
