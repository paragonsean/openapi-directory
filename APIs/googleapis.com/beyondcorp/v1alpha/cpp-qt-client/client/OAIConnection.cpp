/**
 * BeyondCorp API
 * Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnection::OAIConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnection::OAIConnection() {
    this->initializeModel();
}

OAIConnection::~OAIConnection() {}

void OAIConnection::initializeModel() {

    m_application_endpoint_isSet = false;
    m_application_endpoint_isValid = false;

    m_connectors_isSet = false;
    m_connectors_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_gateway_isSet = false;
    m_gateway_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnection::fromJsonObject(QJsonObject json) {

    m_application_endpoint_isValid = ::OpenAPI::fromJsonValue(m_application_endpoint, json[QString("applicationEndpoint")]);
    m_application_endpoint_isSet = !json[QString("applicationEndpoint")].isNull() && m_application_endpoint_isValid;

    m_connectors_isValid = ::OpenAPI::fromJsonValue(m_connectors, json[QString("connectors")]);
    m_connectors_isSet = !json[QString("connectors")].isNull() && m_connectors_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_gateway_isValid = ::OpenAPI::fromJsonValue(m_gateway, json[QString("gateway")]);
    m_gateway_isSet = !json[QString("gateway")].isNull() && m_gateway_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_application_endpoint.isSet()) {
        obj.insert(QString("applicationEndpoint"), ::OpenAPI::toJsonValue(m_application_endpoint));
    }
    if (m_connectors.size() > 0) {
        obj.insert(QString("connectors"), ::OpenAPI::toJsonValue(m_connectors));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_gateway.isSet()) {
        obj.insert(QString("gateway"), ::OpenAPI::toJsonValue(m_gateway));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIApplicationEndpoint OAIConnection::getApplicationEndpoint() const {
    return m_application_endpoint;
}
void OAIConnection::setApplicationEndpoint(const OAIApplicationEndpoint &application_endpoint) {
    m_application_endpoint = application_endpoint;
    m_application_endpoint_isSet = true;
}

bool OAIConnection::is_application_endpoint_Set() const{
    return m_application_endpoint_isSet;
}

bool OAIConnection::is_application_endpoint_Valid() const{
    return m_application_endpoint_isValid;
}

QList<QString> OAIConnection::getConnectors() const {
    return m_connectors;
}
void OAIConnection::setConnectors(const QList<QString> &connectors) {
    m_connectors = connectors;
    m_connectors_isSet = true;
}

bool OAIConnection::is_connectors_Set() const{
    return m_connectors_isSet;
}

bool OAIConnection::is_connectors_Valid() const{
    return m_connectors_isValid;
}

QString OAIConnection::getCreateTime() const {
    return m_create_time;
}
void OAIConnection::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIConnection::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIConnection::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIConnection::getDisplayName() const {
    return m_display_name;
}
void OAIConnection::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIConnection::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIConnection::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIGateway OAIConnection::getGateway() const {
    return m_gateway;
}
void OAIConnection::setGateway(const OAIGateway &gateway) {
    m_gateway = gateway;
    m_gateway_isSet = true;
}

bool OAIConnection::is_gateway_Set() const{
    return m_gateway_isSet;
}

bool OAIConnection::is_gateway_Valid() const{
    return m_gateway_isValid;
}

QMap<QString, QString> OAIConnection::getLabels() const {
    return m_labels;
}
void OAIConnection::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIConnection::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIConnection::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIConnection::getName() const {
    return m_name;
}
void OAIConnection::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConnection::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConnection::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIConnection::getState() const {
    return m_state;
}
void OAIConnection::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIConnection::is_state_Set() const{
    return m_state_isSet;
}

bool OAIConnection::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIConnection::getType() const {
    return m_type;
}
void OAIConnection::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIConnection::is_type_Set() const{
    return m_type_isSet;
}

bool OAIConnection::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIConnection::getUid() const {
    return m_uid;
}
void OAIConnection::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIConnection::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIConnection::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIConnection::getUpdateTime() const {
    return m_update_time;
}
void OAIConnection::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIConnection::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIConnection::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
