# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_config import ImageConfig
from openapi_server.models.notification_config import NotificationConfig
from openapi_server import util


class ConnectorInstanceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_config: ImageConfig=None, instance_config: Dict[str, object]=None, notification_config: NotificationConfig=None, sequence_number: str=None):
        """ConnectorInstanceConfig - a model defined in OpenAPI

        :param image_config: The image_config of this ConnectorInstanceConfig.
        :param instance_config: The instance_config of this ConnectorInstanceConfig.
        :param notification_config: The notification_config of this ConnectorInstanceConfig.
        :param sequence_number: The sequence_number of this ConnectorInstanceConfig.
        """
        self.openapi_types = {
            'image_config': ImageConfig,
            'instance_config': Dict[str, object],
            'notification_config': NotificationConfig,
            'sequence_number': str
        }

        self.attribute_map = {
            'image_config': 'imageConfig',
            'instance_config': 'instanceConfig',
            'notification_config': 'notificationConfig',
            'sequence_number': 'sequenceNumber'
        }

        self._image_config = image_config
        self._instance_config = instance_config
        self._notification_config = notification_config
        self._sequence_number = sequence_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorInstanceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorInstanceConfig of this ConnectorInstanceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_config(self):
        """Gets the image_config of this ConnectorInstanceConfig.


        :return: The image_config of this ConnectorInstanceConfig.
        :rtype: ImageConfig
        """
        return self._image_config

    @image_config.setter
    def image_config(self, image_config):
        """Sets the image_config of this ConnectorInstanceConfig.


        :param image_config: The image_config of this ConnectorInstanceConfig.
        :type image_config: ImageConfig
        """

        self._image_config = image_config

    @property
    def instance_config(self):
        """Gets the instance_config of this ConnectorInstanceConfig.

        The SLM instance agent configuration.

        :return: The instance_config of this ConnectorInstanceConfig.
        :rtype: Dict[str, object]
        """
        return self._instance_config

    @instance_config.setter
    def instance_config(self, instance_config):
        """Sets the instance_config of this ConnectorInstanceConfig.

        The SLM instance agent configuration.

        :param instance_config: The instance_config of this ConnectorInstanceConfig.
        :type instance_config: Dict[str, object]
        """

        self._instance_config = instance_config

    @property
    def notification_config(self):
        """Gets the notification_config of this ConnectorInstanceConfig.


        :return: The notification_config of this ConnectorInstanceConfig.
        :rtype: NotificationConfig
        """
        return self._notification_config

    @notification_config.setter
    def notification_config(self, notification_config):
        """Sets the notification_config of this ConnectorInstanceConfig.


        :param notification_config: The notification_config of this ConnectorInstanceConfig.
        :type notification_config: NotificationConfig
        """

        self._notification_config = notification_config

    @property
    def sequence_number(self):
        """Gets the sequence_number of this ConnectorInstanceConfig.

        Required. A monotonically increasing number generated and maintained by the API provider. Every time a config changes in the backend, the sequenceNumber should be bumped up to reflect the change.

        :return: The sequence_number of this ConnectorInstanceConfig.
        :rtype: str
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this ConnectorInstanceConfig.

        Required. A monotonically increasing number generated and maintained by the API provider. Every time a config changes in the backend, the sequenceNumber should be bumped up to reflect the change.

        :param sequence_number: The sequence_number of this ConnectorInstanceConfig.
        :type sequence_number: str
        """

        self._sequence_number = sequence_number
