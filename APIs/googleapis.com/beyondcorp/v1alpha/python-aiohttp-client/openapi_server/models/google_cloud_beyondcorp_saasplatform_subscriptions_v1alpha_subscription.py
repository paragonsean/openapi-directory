# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_renew_enabled: bool=None, create_time: str=None, end_time: str=None, name: str=None, seat_count: str=None, sku: str=None, start_time: str=None, state: str=None, type: str=None):
        """GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription - a model defined in OpenAPI

        :param auto_renew_enabled: The auto_renew_enabled of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :param create_time: The create_time of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :param end_time: The end_time of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :param name: The name of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :param seat_count: The seat_count of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :param sku: The sku of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :param start_time: The start_time of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :param state: The state of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :param type: The type of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        """
        self.openapi_types = {
            'auto_renew_enabled': bool,
            'create_time': str,
            'end_time': str,
            'name': str,
            'seat_count': str,
            'sku': str,
            'start_time': str,
            'state': str,
            'type': str
        }

        self.attribute_map = {
            'auto_renew_enabled': 'autoRenewEnabled',
            'create_time': 'createTime',
            'end_time': 'endTime',
            'name': 'name',
            'seat_count': 'seatCount',
            'sku': 'sku',
            'start_time': 'startTime',
            'state': 'state',
            'type': 'type'
        }

        self._auto_renew_enabled = auto_renew_enabled
        self._create_time = create_time
        self._end_time = end_time
        self._name = name
        self._seat_count = seat_count
        self._sku = sku
        self._start_time = start_time
        self._state = state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_renew_enabled(self):
        """Gets the auto_renew_enabled of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.

        Output only. Represents that, if subscription will renew or end when the term ends.

        :return: The auto_renew_enabled of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :rtype: bool
        """
        return self._auto_renew_enabled

    @auto_renew_enabled.setter
    def auto_renew_enabled(self, auto_renew_enabled):
        """Sets the auto_renew_enabled of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.

        Output only. Represents that, if subscription will renew or end when the term ends.

        :param auto_renew_enabled: The auto_renew_enabled of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :type auto_renew_enabled: bool
        """

        self._auto_renew_enabled = auto_renew_enabled

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.

        Output only. Create time of the subscription.

        :return: The create_time of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.

        Output only. Create time of the subscription.

        :param create_time: The create_time of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def end_time(self):
        """Gets the end_time of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.

        Output only. End time of the subscription.

        :return: The end_time of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.

        Output only. End time of the subscription.

        :param end_time: The end_time of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def name(self):
        """Gets the name of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.

        Required. Unique resource name of the Subscription. The name is ignored when creating a subscription.

        :return: The name of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.

        Required. Unique resource name of the Subscription. The name is ignored when creating a subscription.

        :param name: The name of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :type name: str
        """

        self._name = name

    @property
    def seat_count(self):
        """Gets the seat_count of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.

        Optional. Number of seats in the subscription.

        :return: The seat_count of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :rtype: str
        """
        return self._seat_count

    @seat_count.setter
    def seat_count(self, seat_count):
        """Sets the seat_count of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.

        Optional. Number of seats in the subscription.

        :param seat_count: The seat_count of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :type seat_count: str
        """

        self._seat_count = seat_count

    @property
    def sku(self):
        """Gets the sku of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.

        Required. SKU of subscription.

        :return: The sku of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.

        Required. SKU of subscription.

        :param sku: The sku of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :type sku: str
        """
        allowed_values = ["SKU_UNSPECIFIED", "BCE_STANDARD_SKU"]  # noqa: E501
        if sku not in allowed_values:
            raise ValueError(
                "Invalid value for `sku` ({0}), must be one of {1}"
                .format(sku, allowed_values)
            )

        self._sku = sku

    @property
    def start_time(self):
        """Gets the start_time of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.

        Output only. Start time of the subscription.

        :return: The start_time of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.

        Output only. Start time of the subscription.

        :param start_time: The start_time of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.

        Output only. The current state of the subscription.

        :return: The state of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.

        Output only. The current state of the subscription.

        :param state: The state of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "INACTIVE", "COMPLETED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.

        Required. Type of subscription.

        :return: The type of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.

        Required. Type of subscription.

        :param type: The type of this GoogleCloudBeyondcorpSaasplatformSubscriptionsV1alphaSubscription.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "TRIAL", "PAID", "ALLOWLIST"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
