# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_filter: str=None, group_fields: List[str]=None):
        """GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping - a model defined in OpenAPI

        :param field_filter: The field_filter of this GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping.
        :param group_fields: The group_fields of this GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping.
        """
        self.openapi_types = {
            'field_filter': str,
            'group_fields': List[str]
        }

        self.attribute_map = {
            'field_filter': 'fieldFilter',
            'group_fields': 'groupFields'
        }

        self._field_filter = field_filter
        self._group_fields = group_fields

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping of this GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_filter(self):
        """Gets the field_filter of this GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping.

        Optional. Filterable parameters to be added to the grouping clause. Available fields could be fetched by calling insight list and get APIs in `BASIC` view. `=` is the only comparison operator supported. `AND` is the only logical operator supported. Usage: field_filter=\"fieldName1=fieldVal1 AND fieldName2=fieldVal2\". NOTE: Only `AND` conditions are allowed. NOTE: Use the `filter_alias` from `Insight.Metadata.Field` message for the filtering the corresponding fields in this filter field. (These expressions are based on the filter language described at https://google.aip.dev/160).

        :return: The field_filter of this GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping.
        :rtype: str
        """
        return self._field_filter

    @field_filter.setter
    def field_filter(self, field_filter):
        """Sets the field_filter of this GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping.

        Optional. Filterable parameters to be added to the grouping clause. Available fields could be fetched by calling insight list and get APIs in `BASIC` view. `=` is the only comparison operator supported. `AND` is the only logical operator supported. Usage: field_filter=\"fieldName1=fieldVal1 AND fieldName2=fieldVal2\". NOTE: Only `AND` conditions are allowed. NOTE: Use the `filter_alias` from `Insight.Metadata.Field` message for the filtering the corresponding fields in this filter field. (These expressions are based on the filter language described at https://google.aip.dev/160).

        :param field_filter: The field_filter of this GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping.
        :type field_filter: str
        """

        self._field_filter = field_filter

    @property
    def group_fields(self):
        """Gets the group_fields of this GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping.

        Required. Fields to be used for grouping. NOTE: Use the `filter_alias` from `Insight.Metadata.Field` message for declaring the fields to be grouped-by here.

        :return: The group_fields of this GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping.
        :rtype: List[str]
        """
        return self._group_fields

    @group_fields.setter
    def group_fields(self, group_fields):
        """Sets the group_fields of this GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping.

        Required. Fields to be used for grouping. NOTE: Use the `filter_alias` from `Insight.Metadata.Field` message for declaring the fields to be grouped-by here.

        :param group_fields: The group_fields of this GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping.
        :type group_fields: List[str]
        """

        self._group_fields = group_fields
