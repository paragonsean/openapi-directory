# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, resource: Dict[str, object]=None, status: str=None, sub: List[ResourceInfo]=None, time: str=None):
        """ResourceInfo - a model defined in OpenAPI

        :param id: The id of this ResourceInfo.
        :param resource: The resource of this ResourceInfo.
        :param status: The status of this ResourceInfo.
        :param sub: The sub of this ResourceInfo.
        :param time: The time of this ResourceInfo.
        """
        self.openapi_types = {
            'id': str,
            'resource': Dict[str, object],
            'status': str,
            'sub': List[ResourceInfo],
            'time': str
        }

        self.attribute_map = {
            'id': 'id',
            'resource': 'resource',
            'status': 'status',
            'sub': 'sub',
            'time': 'time'
        }

        self._id = id
        self._resource = resource
        self._status = status
        self._sub = sub
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceInfo of this ResourceInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ResourceInfo.

        Required. Unique Id for the resource.

        :return: The id of this ResourceInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResourceInfo.

        Required. Unique Id for the resource.

        :param id: The id of this ResourceInfo.
        :type id: str
        """

        self._id = id

    @property
    def resource(self):
        """Gets the resource of this ResourceInfo.

        Specific details for the resource.

        :return: The resource of this ResourceInfo.
        :rtype: Dict[str, object]
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this ResourceInfo.

        Specific details for the resource.

        :param resource: The resource of this ResourceInfo.
        :type resource: Dict[str, object]
        """

        self._resource = resource

    @property
    def status(self):
        """Gets the status of this ResourceInfo.

        Overall health status. Overall status is derived based on the status of each sub level resources.

        :return: The status of this ResourceInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResourceInfo.

        Overall health status. Overall status is derived based on the status of each sub level resources.

        :param status: The status of this ResourceInfo.
        :type status: str
        """
        allowed_values = ["HEALTH_STATUS_UNSPECIFIED", "HEALTHY", "UNHEALTHY", "UNRESPONSIVE", "DEGRADED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def sub(self):
        """Gets the sub of this ResourceInfo.

        List of Info for the sub level resources.

        :return: The sub of this ResourceInfo.
        :rtype: List[ResourceInfo]
        """
        return self._sub

    @sub.setter
    def sub(self, sub):
        """Sets the sub of this ResourceInfo.

        List of Info for the sub level resources.

        :param sub: The sub of this ResourceInfo.
        :type sub: List[ResourceInfo]
        """

        self._sub = sub

    @property
    def time(self):
        """Gets the time of this ResourceInfo.

        The timestamp to collect the info. It is suggested to be set by the topmost level resource only.

        :return: The time of this ResourceInfo.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ResourceInfo.

        The timestamp to collect the info. It is suggested to be set by the topmost level resource only.

        :param time: The time of this ResourceInfo.
        :type time: str
        """

        self._time = time
