# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tunnelv1_proto_tunneler_error import Tunnelv1ProtoTunnelerError
from openapi_server import util


class Tunnelv1ProtoTunnelerInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backoff_retry_count: int=None, id: str=None, latest_err: Tunnelv1ProtoTunnelerError=None, latest_retry_time: str=None, total_retry_count: int=None):
        """Tunnelv1ProtoTunnelerInfo - a model defined in OpenAPI

        :param backoff_retry_count: The backoff_retry_count of this Tunnelv1ProtoTunnelerInfo.
        :param id: The id of this Tunnelv1ProtoTunnelerInfo.
        :param latest_err: The latest_err of this Tunnelv1ProtoTunnelerInfo.
        :param latest_retry_time: The latest_retry_time of this Tunnelv1ProtoTunnelerInfo.
        :param total_retry_count: The total_retry_count of this Tunnelv1ProtoTunnelerInfo.
        """
        self.openapi_types = {
            'backoff_retry_count': int,
            'id': str,
            'latest_err': Tunnelv1ProtoTunnelerError,
            'latest_retry_time': str,
            'total_retry_count': int
        }

        self.attribute_map = {
            'backoff_retry_count': 'backoffRetryCount',
            'id': 'id',
            'latest_err': 'latestErr',
            'latest_retry_time': 'latestRetryTime',
            'total_retry_count': 'totalRetryCount'
        }

        self._backoff_retry_count = backoff_retry_count
        self._id = id
        self._latest_err = latest_err
        self._latest_retry_time = latest_retry_time
        self._total_retry_count = total_retry_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tunnelv1ProtoTunnelerInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tunnelv1ProtoTunnelerInfo of this Tunnelv1ProtoTunnelerInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backoff_retry_count(self):
        """Gets the backoff_retry_count of this Tunnelv1ProtoTunnelerInfo.

        backoff_retry_count stores the number of times the tunneler has been retried by tunManager for current backoff sequence. Gets reset to 0 if time difference between 2 consecutive retries exceeds backoffRetryResetTime.

        :return: The backoff_retry_count of this Tunnelv1ProtoTunnelerInfo.
        :rtype: int
        """
        return self._backoff_retry_count

    @backoff_retry_count.setter
    def backoff_retry_count(self, backoff_retry_count):
        """Sets the backoff_retry_count of this Tunnelv1ProtoTunnelerInfo.

        backoff_retry_count stores the number of times the tunneler has been retried by tunManager for current backoff sequence. Gets reset to 0 if time difference between 2 consecutive retries exceeds backoffRetryResetTime.

        :param backoff_retry_count: The backoff_retry_count of this Tunnelv1ProtoTunnelerInfo.
        :type backoff_retry_count: int
        """

        self._backoff_retry_count = backoff_retry_count

    @property
    def id(self):
        """Gets the id of this Tunnelv1ProtoTunnelerInfo.

        id is the unique id of a tunneler.

        :return: The id of this Tunnelv1ProtoTunnelerInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tunnelv1ProtoTunnelerInfo.

        id is the unique id of a tunneler.

        :param id: The id of this Tunnelv1ProtoTunnelerInfo.
        :type id: str
        """

        self._id = id

    @property
    def latest_err(self):
        """Gets the latest_err of this Tunnelv1ProtoTunnelerInfo.


        :return: The latest_err of this Tunnelv1ProtoTunnelerInfo.
        :rtype: Tunnelv1ProtoTunnelerError
        """
        return self._latest_err

    @latest_err.setter
    def latest_err(self, latest_err):
        """Sets the latest_err of this Tunnelv1ProtoTunnelerInfo.


        :param latest_err: The latest_err of this Tunnelv1ProtoTunnelerInfo.
        :type latest_err: Tunnelv1ProtoTunnelerError
        """

        self._latest_err = latest_err

    @property
    def latest_retry_time(self):
        """Gets the latest_retry_time of this Tunnelv1ProtoTunnelerInfo.

        latest_retry_time stores the time when the tunneler was last restarted.

        :return: The latest_retry_time of this Tunnelv1ProtoTunnelerInfo.
        :rtype: str
        """
        return self._latest_retry_time

    @latest_retry_time.setter
    def latest_retry_time(self, latest_retry_time):
        """Sets the latest_retry_time of this Tunnelv1ProtoTunnelerInfo.

        latest_retry_time stores the time when the tunneler was last restarted.

        :param latest_retry_time: The latest_retry_time of this Tunnelv1ProtoTunnelerInfo.
        :type latest_retry_time: str
        """

        self._latest_retry_time = latest_retry_time

    @property
    def total_retry_count(self):
        """Gets the total_retry_count of this Tunnelv1ProtoTunnelerInfo.

        total_retry_count stores the total number of times the tunneler has been retried by tunManager.

        :return: The total_retry_count of this Tunnelv1ProtoTunnelerInfo.
        :rtype: int
        """
        return self._total_retry_count

    @total_retry_count.setter
    def total_retry_count(self, total_retry_count):
        """Sets the total_retry_count of this Tunnelv1ProtoTunnelerInfo.

        total_retry_count stores the total number of times the tunneler has been retried by tunManager.

        :param total_retry_count: The total_retry_count of this Tunnelv1ProtoTunnelerInfo.
        :type total_retry_count: int
        """

        self._total_retry_count = total_retry_count
