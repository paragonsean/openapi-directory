/**
 * BeyondCorp API
 * Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResourceInfo model module.
 * @module model/ResourceInfo
 * @version v1alpha
 */
class ResourceInfo {
    /**
     * Constructs a new <code>ResourceInfo</code>.
     * ResourceInfo represents the information/status of the associated resource.
     * @alias module:model/ResourceInfo
     */
    constructor() { 
        
        ResourceInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResourceInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceInfo} obj Optional instance to populate.
     * @return {module:model/ResourceInfo} The populated <code>ResourceInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceInfo();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('resource')) {
                obj['resource'] = ApiClient.convertToType(data['resource'], {'String': Object});
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('sub')) {
                obj['sub'] = ApiClient.convertToType(data['sub'], [ResourceInfo]);
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        if (data['sub']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sub'])) {
                throw new Error("Expected the field `sub` to be an array in the JSON data but got " + data['sub']);
            }
            // validate the optional field `sub` (array)
            for (const item of data['sub']) {
                ResourceInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['time'] && !(typeof data['time'] === 'string' || data['time'] instanceof String)) {
            throw new Error("Expected the field `time` to be a primitive type in the JSON string but got " + data['time']);
        }

        return true;
    }


}



/**
 * Required. Unique Id for the resource.
 * @member {String} id
 */
ResourceInfo.prototype['id'] = undefined;

/**
 * Specific details for the resource.
 * @member {Object.<String, Object>} resource
 */
ResourceInfo.prototype['resource'] = undefined;

/**
 * Overall health status. Overall status is derived based on the status of each sub level resources.
 * @member {module:model/ResourceInfo.StatusEnum} status
 */
ResourceInfo.prototype['status'] = undefined;

/**
 * List of Info for the sub level resources.
 * @member {Array.<module:model/ResourceInfo>} sub
 */
ResourceInfo.prototype['sub'] = undefined;

/**
 * The timestamp to collect the info. It is suggested to be set by the topmost level resource only.
 * @member {String} time
 */
ResourceInfo.prototype['time'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ResourceInfo['StatusEnum'] = {

    /**
     * value: "HEALTH_STATUS_UNSPECIFIED"
     * @const
     */
    "HEALTH_STATUS_UNSPECIFIED": "HEALTH_STATUS_UNSPECIFIED",

    /**
     * value: "HEALTHY"
     * @const
     */
    "HEALTHY": "HEALTHY",

    /**
     * value: "UNHEALTHY"
     * @const
     */
    "UNHEALTHY": "UNHEALTHY",

    /**
     * value: "UNRESPONSIVE"
     * @const
     */
    "UNRESPONSIVE": "UNRESPONSIVE",

    /**
     * value: "DEGRADED"
     * @const
     */
    "DEGRADED": "DEGRADED"
};



export default ResourceInfo;

