/**
 * BeyondCorp API
 * Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImageConfig model module.
 * @module model/ImageConfig
 * @version v1alpha
 */
class ImageConfig {
    /**
     * Constructs a new <code>ImageConfig</code>.
     * ImageConfig defines the control plane images to run.
     * @alias module:model/ImageConfig
     */
    constructor() { 
        
        ImageConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageConfig} obj Optional instance to populate.
     * @return {module:model/ImageConfig} The populated <code>ImageConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageConfig();

            if (data.hasOwnProperty('stableImage')) {
                obj['stableImage'] = ApiClient.convertToType(data['stableImage'], 'String');
            }
            if (data.hasOwnProperty('targetImage')) {
                obj['targetImage'] = ApiClient.convertToType(data['targetImage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['stableImage'] && !(typeof data['stableImage'] === 'string' || data['stableImage'] instanceof String)) {
            throw new Error("Expected the field `stableImage` to be a primitive type in the JSON string but got " + data['stableImage']);
        }
        // ensure the json data is a string
        if (data['targetImage'] && !(typeof data['targetImage'] === 'string' || data['targetImage'] instanceof String)) {
            throw new Error("Expected the field `targetImage` to be a primitive type in the JSON string but got " + data['targetImage']);
        }

        return true;
    }


}



/**
 * The stable image that the remote agent will fallback to if the target image fails.
 * @member {String} stableImage
 */
ImageConfig.prototype['stableImage'] = undefined;

/**
 * The initial image the remote agent will attempt to run for the control plane.
 * @member {String} targetImage
 */
ImageConfig.prototype['targetImage'] = undefined;






export default ImageConfig;

