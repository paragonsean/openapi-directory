/**
 * BeyondCorp API
 * Beyondcorp Enterprise provides identity and context aware access controls for enterprise resources and enables zero-trust access. Using the Beyondcorp Enterprise APIs, enterprises can set up multi-cloud and on-prem connectivity solutions.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AllocatedConnection from './AllocatedConnection';

/**
 * The AppGateway model module.
 * @module model/AppGateway
 * @version v1alpha
 */
class AppGateway {
    /**
     * Constructs a new <code>AppGateway</code>.
     * A BeyondCorp AppGateway resource represents a BeyondCorp protected AppGateway to a remote application. It creates all the necessary GCP components needed for creating a BeyondCorp protected AppGateway. Multiple connectors can be authorised for a single AppGateway.
     * @alias module:model/AppGateway
     */
    constructor() { 
        
        AppGateway.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AppGateway</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppGateway} obj Optional instance to populate.
     * @return {module:model/AppGateway} The populated <code>AppGateway</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppGateway();

            if (data.hasOwnProperty('allocatedConnections')) {
                obj['allocatedConnections'] = ApiClient.convertToType(data['allocatedConnections'], [AllocatedConnection]);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('hostType')) {
                obj['hostType'] = ApiClient.convertToType(data['hostType'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppGateway</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppGateway</code>.
     */
    static validateJSON(data) {
        if (data['allocatedConnections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['allocatedConnections'])) {
                throw new Error("Expected the field `allocatedConnections` to be an array in the JSON data but got " + data['allocatedConnections']);
            }
            // validate the optional field `allocatedConnections` (array)
            for (const item of data['allocatedConnections']) {
                AllocatedConnection.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['hostType'] && !(typeof data['hostType'] === 'string' || data['hostType'] instanceof String)) {
            throw new Error("Expected the field `hostType` to be a primitive type in the JSON string but got " + data['hostType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * Output only. A list of connections allocated for the Gateway
 * @member {Array.<module:model/AllocatedConnection>} allocatedConnections
 */
AppGateway.prototype['allocatedConnections'] = undefined;

/**
 * Output only. Timestamp when the resource was created.
 * @member {String} createTime
 */
AppGateway.prototype['createTime'] = undefined;

/**
 * Optional. An arbitrary user-provided name for the AppGateway. Cannot exceed 64 characters.
 * @member {String} displayName
 */
AppGateway.prototype['displayName'] = undefined;

/**
 * Required. The type of hosting used by the AppGateway.
 * @member {module:model/AppGateway.HostTypeEnum} hostType
 */
AppGateway.prototype['hostType'] = undefined;

/**
 * Optional. Resource labels to represent user provided metadata.
 * @member {Object.<String, String>} labels
 */
AppGateway.prototype['labels'] = undefined;

/**
 * Required. Unique resource name of the AppGateway. The name is ignored when creating an AppGateway.
 * @member {String} name
 */
AppGateway.prototype['name'] = undefined;

/**
 * Output only. The current state of the AppGateway.
 * @member {module:model/AppGateway.StateEnum} state
 */
AppGateway.prototype['state'] = undefined;

/**
 * Required. The type of network connectivity used by the AppGateway.
 * @member {module:model/AppGateway.TypeEnum} type
 */
AppGateway.prototype['type'] = undefined;

/**
 * Output only. A unique identifier for the instance generated by the system.
 * @member {String} uid
 */
AppGateway.prototype['uid'] = undefined;

/**
 * Output only. Timestamp when the resource was last modified.
 * @member {String} updateTime
 */
AppGateway.prototype['updateTime'] = undefined;

/**
 * Output only. Server-defined URI for this resource.
 * @member {String} uri
 */
AppGateway.prototype['uri'] = undefined;





/**
 * Allowed values for the <code>hostType</code> property.
 * @enum {String}
 * @readonly
 */
AppGateway['HostTypeEnum'] = {

    /**
     * value: "HOST_TYPE_UNSPECIFIED"
     * @const
     */
    "HOST_TYPE_UNSPECIFIED": "HOST_TYPE_UNSPECIFIED",

    /**
     * value: "GCP_REGIONAL_MIG"
     * @const
     */
    "GCP_REGIONAL_MIG": "GCP_REGIONAL_MIG"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
AppGateway['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "CREATED"
     * @const
     */
    "CREATED": "CREATED",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "DOWN"
     * @const
     */
    "DOWN": "DOWN"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AppGateway['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "TCP_PROXY"
     * @const
     */
    "TCP_PROXY": "TCP_PROXY"
};



export default AppGateway;

