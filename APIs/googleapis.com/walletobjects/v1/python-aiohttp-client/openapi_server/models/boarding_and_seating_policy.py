# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BoardingAndSeatingPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boarding_policy: str=None, kind: str=None, seat_class_policy: str=None):
        """BoardingAndSeatingPolicy - a model defined in OpenAPI

        :param boarding_policy: The boarding_policy of this BoardingAndSeatingPolicy.
        :param kind: The kind of this BoardingAndSeatingPolicy.
        :param seat_class_policy: The seat_class_policy of this BoardingAndSeatingPolicy.
        """
        self.openapi_types = {
            'boarding_policy': str,
            'kind': str,
            'seat_class_policy': str
        }

        self.attribute_map = {
            'boarding_policy': 'boardingPolicy',
            'kind': 'kind',
            'seat_class_policy': 'seatClassPolicy'
        }

        self._boarding_policy = boarding_policy
        self._kind = kind
        self._seat_class_policy = seat_class_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BoardingAndSeatingPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BoardingAndSeatingPolicy of this BoardingAndSeatingPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boarding_policy(self):
        """Gets the boarding_policy of this BoardingAndSeatingPolicy.

        Indicates the policy the airline uses for boarding. If unset, Google will default to `zoneBased`.

        :return: The boarding_policy of this BoardingAndSeatingPolicy.
        :rtype: str
        """
        return self._boarding_policy

    @boarding_policy.setter
    def boarding_policy(self, boarding_policy):
        """Sets the boarding_policy of this BoardingAndSeatingPolicy.

        Indicates the policy the airline uses for boarding. If unset, Google will default to `zoneBased`.

        :param boarding_policy: The boarding_policy of this BoardingAndSeatingPolicy.
        :type boarding_policy: str
        """
        allowed_values = ["BOARDING_POLICY_UNSPECIFIED", "ZONE_BASED", "zoneBased", "GROUP_BASED", "groupBased", "BOARDING_POLICY_OTHER", "boardingPolicyOther"]  # noqa: E501
        if boarding_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `boarding_policy` ({0}), must be one of {1}"
                .format(boarding_policy, allowed_values)
            )

        self._boarding_policy = boarding_policy

    @property
    def kind(self):
        """Gets the kind of this BoardingAndSeatingPolicy.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#boardingAndSeatingPolicy\"`.

        :return: The kind of this BoardingAndSeatingPolicy.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this BoardingAndSeatingPolicy.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#boardingAndSeatingPolicy\"`.

        :param kind: The kind of this BoardingAndSeatingPolicy.
        :type kind: str
        """

        self._kind = kind

    @property
    def seat_class_policy(self):
        """Gets the seat_class_policy of this BoardingAndSeatingPolicy.

        Seating policy which dictates how we display the seat class. If unset, Google will default to `cabinBased`.

        :return: The seat_class_policy of this BoardingAndSeatingPolicy.
        :rtype: str
        """
        return self._seat_class_policy

    @seat_class_policy.setter
    def seat_class_policy(self, seat_class_policy):
        """Sets the seat_class_policy of this BoardingAndSeatingPolicy.

        Seating policy which dictates how we display the seat class. If unset, Google will default to `cabinBased`.

        :param seat_class_policy: The seat_class_policy of this BoardingAndSeatingPolicy.
        :type seat_class_policy: str
        """
        allowed_values = ["SEAT_CLASS_POLICY_UNSPECIFIED", "CABIN_BASED", "cabinBased", "CLASS_BASED", "classBased", "TIER_BASED", "tierBased", "SEAT_CLASS_POLICY_OTHER", "seatClassPolicyOther"]  # noqa: E501
        if seat_class_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `seat_class_policy` ({0}), must be one of {1}"
                .format(seat_class_policy, allowed_values)
            )

        self._seat_class_policy = seat_class_policy
