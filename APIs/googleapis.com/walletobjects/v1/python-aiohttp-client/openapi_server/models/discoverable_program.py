# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.discoverable_program_merchant_signin_info import DiscoverableProgramMerchantSigninInfo
from openapi_server.models.discoverable_program_merchant_signup_info import DiscoverableProgramMerchantSignupInfo
from openapi_server import util


class DiscoverableProgram(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merchant_signin_info: DiscoverableProgramMerchantSigninInfo=None, merchant_signup_info: DiscoverableProgramMerchantSignupInfo=None, state: str=None):
        """DiscoverableProgram - a model defined in OpenAPI

        :param merchant_signin_info: The merchant_signin_info of this DiscoverableProgram.
        :param merchant_signup_info: The merchant_signup_info of this DiscoverableProgram.
        :param state: The state of this DiscoverableProgram.
        """
        self.openapi_types = {
            'merchant_signin_info': DiscoverableProgramMerchantSigninInfo,
            'merchant_signup_info': DiscoverableProgramMerchantSignupInfo,
            'state': str
        }

        self.attribute_map = {
            'merchant_signin_info': 'merchantSigninInfo',
            'merchant_signup_info': 'merchantSignupInfo',
            'state': 'state'
        }

        self._merchant_signin_info = merchant_signin_info
        self._merchant_signup_info = merchant_signup_info
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiscoverableProgram':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiscoverableProgram of this DiscoverableProgram.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merchant_signin_info(self):
        """Gets the merchant_signin_info of this DiscoverableProgram.


        :return: The merchant_signin_info of this DiscoverableProgram.
        :rtype: DiscoverableProgramMerchantSigninInfo
        """
        return self._merchant_signin_info

    @merchant_signin_info.setter
    def merchant_signin_info(self, merchant_signin_info):
        """Sets the merchant_signin_info of this DiscoverableProgram.


        :param merchant_signin_info: The merchant_signin_info of this DiscoverableProgram.
        :type merchant_signin_info: DiscoverableProgramMerchantSigninInfo
        """

        self._merchant_signin_info = merchant_signin_info

    @property
    def merchant_signup_info(self):
        """Gets the merchant_signup_info of this DiscoverableProgram.


        :return: The merchant_signup_info of this DiscoverableProgram.
        :rtype: DiscoverableProgramMerchantSignupInfo
        """
        return self._merchant_signup_info

    @merchant_signup_info.setter
    def merchant_signup_info(self, merchant_signup_info):
        """Sets the merchant_signup_info of this DiscoverableProgram.


        :param merchant_signup_info: The merchant_signup_info of this DiscoverableProgram.
        :type merchant_signup_info: DiscoverableProgramMerchantSignupInfo
        """

        self._merchant_signup_info = merchant_signup_info

    @property
    def state(self):
        """Gets the state of this DiscoverableProgram.

        Visibility state of the discoverable program.

        :return: The state of this DiscoverableProgram.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DiscoverableProgram.

        Visibility state of the discoverable program.

        :param state: The state of this DiscoverableProgram.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "TRUSTED_TESTERS", "trustedTesters", "LIVE", "live", "DISABLED", "disabled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
