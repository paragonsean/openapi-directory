# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.blobstore2_info import Blobstore2Info
from openapi_server.models.composite_media import CompositeMedia
from openapi_server.models.content_type_info import ContentTypeInfo
from openapi_server.models.diff_checksums_response import DiffChecksumsResponse
from openapi_server.models.diff_download_response import DiffDownloadResponse
from openapi_server.models.diff_upload_request import DiffUploadRequest
from openapi_server.models.diff_upload_response import DiffUploadResponse
from openapi_server.models.diff_version_response import DiffVersionResponse
from openapi_server.models.download_parameters import DownloadParameters
from openapi_server.models.object_id import ObjectId
from openapi_server import util


class Media(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: str=None, bigstore_object_ref: str=None, blob_ref: str=None, blobstore2_info: Blobstore2Info=None, composite_media: List[CompositeMedia]=None, content_type: str=None, content_type_info: ContentTypeInfo=None, cosmo_binary_reference: str=None, crc32c_hash: int=None, diff_checksums_response: DiffChecksumsResponse=None, diff_download_response: DiffDownloadResponse=None, diff_upload_request: DiffUploadRequest=None, diff_upload_response: DiffUploadResponse=None, diff_version_response: DiffVersionResponse=None, download_parameters: DownloadParameters=None, filename: str=None, hash: str=None, hash_verified: bool=None, inline: str=None, is_potential_retry: bool=None, length: str=None, md5_hash: str=None, media_id: str=None, object_id: ObjectId=None, path: str=None, reference_type: str=None, sha1_hash: str=None, sha256_hash: str=None, timestamp: str=None, token: str=None):
        """Media - a model defined in OpenAPI

        :param algorithm: The algorithm of this Media.
        :param bigstore_object_ref: The bigstore_object_ref of this Media.
        :param blob_ref: The blob_ref of this Media.
        :param blobstore2_info: The blobstore2_info of this Media.
        :param composite_media: The composite_media of this Media.
        :param content_type: The content_type of this Media.
        :param content_type_info: The content_type_info of this Media.
        :param cosmo_binary_reference: The cosmo_binary_reference of this Media.
        :param crc32c_hash: The crc32c_hash of this Media.
        :param diff_checksums_response: The diff_checksums_response of this Media.
        :param diff_download_response: The diff_download_response of this Media.
        :param diff_upload_request: The diff_upload_request of this Media.
        :param diff_upload_response: The diff_upload_response of this Media.
        :param diff_version_response: The diff_version_response of this Media.
        :param download_parameters: The download_parameters of this Media.
        :param filename: The filename of this Media.
        :param hash: The hash of this Media.
        :param hash_verified: The hash_verified of this Media.
        :param inline: The inline of this Media.
        :param is_potential_retry: The is_potential_retry of this Media.
        :param length: The length of this Media.
        :param md5_hash: The md5_hash of this Media.
        :param media_id: The media_id of this Media.
        :param object_id: The object_id of this Media.
        :param path: The path of this Media.
        :param reference_type: The reference_type of this Media.
        :param sha1_hash: The sha1_hash of this Media.
        :param sha256_hash: The sha256_hash of this Media.
        :param timestamp: The timestamp of this Media.
        :param token: The token of this Media.
        """
        self.openapi_types = {
            'algorithm': str,
            'bigstore_object_ref': str,
            'blob_ref': str,
            'blobstore2_info': Blobstore2Info,
            'composite_media': List[CompositeMedia],
            'content_type': str,
            'content_type_info': ContentTypeInfo,
            'cosmo_binary_reference': str,
            'crc32c_hash': int,
            'diff_checksums_response': DiffChecksumsResponse,
            'diff_download_response': DiffDownloadResponse,
            'diff_upload_request': DiffUploadRequest,
            'diff_upload_response': DiffUploadResponse,
            'diff_version_response': DiffVersionResponse,
            'download_parameters': DownloadParameters,
            'filename': str,
            'hash': str,
            'hash_verified': bool,
            'inline': str,
            'is_potential_retry': bool,
            'length': str,
            'md5_hash': str,
            'media_id': str,
            'object_id': ObjectId,
            'path': str,
            'reference_type': str,
            'sha1_hash': str,
            'sha256_hash': str,
            'timestamp': str,
            'token': str
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'bigstore_object_ref': 'bigstoreObjectRef',
            'blob_ref': 'blobRef',
            'blobstore2_info': 'blobstore2Info',
            'composite_media': 'compositeMedia',
            'content_type': 'contentType',
            'content_type_info': 'contentTypeInfo',
            'cosmo_binary_reference': 'cosmoBinaryReference',
            'crc32c_hash': 'crc32cHash',
            'diff_checksums_response': 'diffChecksumsResponse',
            'diff_download_response': 'diffDownloadResponse',
            'diff_upload_request': 'diffUploadRequest',
            'diff_upload_response': 'diffUploadResponse',
            'diff_version_response': 'diffVersionResponse',
            'download_parameters': 'downloadParameters',
            'filename': 'filename',
            'hash': 'hash',
            'hash_verified': 'hashVerified',
            'inline': 'inline',
            'is_potential_retry': 'isPotentialRetry',
            'length': 'length',
            'md5_hash': 'md5Hash',
            'media_id': 'mediaId',
            'object_id': 'objectId',
            'path': 'path',
            'reference_type': 'referenceType',
            'sha1_hash': 'sha1Hash',
            'sha256_hash': 'sha256Hash',
            'timestamp': 'timestamp',
            'token': 'token'
        }

        self._algorithm = algorithm
        self._bigstore_object_ref = bigstore_object_ref
        self._blob_ref = blob_ref
        self._blobstore2_info = blobstore2_info
        self._composite_media = composite_media
        self._content_type = content_type
        self._content_type_info = content_type_info
        self._cosmo_binary_reference = cosmo_binary_reference
        self._crc32c_hash = crc32c_hash
        self._diff_checksums_response = diff_checksums_response
        self._diff_download_response = diff_download_response
        self._diff_upload_request = diff_upload_request
        self._diff_upload_response = diff_upload_response
        self._diff_version_response = diff_version_response
        self._download_parameters = download_parameters
        self._filename = filename
        self._hash = hash
        self._hash_verified = hash_verified
        self._inline = inline
        self._is_potential_retry = is_potential_retry
        self._length = length
        self._md5_hash = md5_hash
        self._media_id = media_id
        self._object_id = object_id
        self._path = path
        self._reference_type = reference_type
        self._sha1_hash = sha1_hash
        self._sha256_hash = sha256_hash
        self._timestamp = timestamp
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Media':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Media of this Media.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this Media.

        Deprecated, use one of explicit hash type fields instead. Algorithm used for calculating the hash. As of 2011/01/21, \"MD5\" is the only possible value for this field. New values may be added at any time.

        :return: The algorithm of this Media.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this Media.

        Deprecated, use one of explicit hash type fields instead. Algorithm used for calculating the hash. As of 2011/01/21, \"MD5\" is the only possible value for this field. New values may be added at any time.

        :param algorithm: The algorithm of this Media.
        :type algorithm: str
        """

        self._algorithm = algorithm

    @property
    def bigstore_object_ref(self):
        """Gets the bigstore_object_ref of this Media.

        Use object_id instead.

        :return: The bigstore_object_ref of this Media.
        :rtype: str
        """
        return self._bigstore_object_ref

    @bigstore_object_ref.setter
    def bigstore_object_ref(self, bigstore_object_ref):
        """Sets the bigstore_object_ref of this Media.

        Use object_id instead.

        :param bigstore_object_ref: The bigstore_object_ref of this Media.
        :type bigstore_object_ref: str
        """

        self._bigstore_object_ref = bigstore_object_ref

    @property
    def blob_ref(self):
        """Gets the blob_ref of this Media.

        Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should be the byte representation of a blobstore.BlobRef. Since Blobstore is deprecating v1, use blobstore2_info instead. For now, any v2 blob will also be represented in this field as v1 BlobRef.

        :return: The blob_ref of this Media.
        :rtype: str
        """
        return self._blob_ref

    @blob_ref.setter
    def blob_ref(self, blob_ref):
        """Sets the blob_ref of this Media.

        Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should be the byte representation of a blobstore.BlobRef. Since Blobstore is deprecating v1, use blobstore2_info instead. For now, any v2 blob will also be represented in this field as v1 BlobRef.

        :param blob_ref: The blob_ref of this Media.
        :type blob_ref: str
        """

        self._blob_ref = blob_ref

    @property
    def blobstore2_info(self):
        """Gets the blobstore2_info of this Media.


        :return: The blobstore2_info of this Media.
        :rtype: Blobstore2Info
        """
        return self._blobstore2_info

    @blobstore2_info.setter
    def blobstore2_info(self, blobstore2_info):
        """Sets the blobstore2_info of this Media.


        :param blobstore2_info: The blobstore2_info of this Media.
        :type blobstore2_info: Blobstore2Info
        """

        self._blobstore2_info = blobstore2_info

    @property
    def composite_media(self):
        """Gets the composite_media of this Media.

        A composite media composed of one or more media objects, set if reference_type is COMPOSITE_MEDIA. The media length field must be set to the sum of the lengths of all composite media objects. Note: All composite media must have length specified.

        :return: The composite_media of this Media.
        :rtype: List[CompositeMedia]
        """
        return self._composite_media

    @composite_media.setter
    def composite_media(self, composite_media):
        """Sets the composite_media of this Media.

        A composite media composed of one or more media objects, set if reference_type is COMPOSITE_MEDIA. The media length field must be set to the sum of the lengths of all composite media objects. Note: All composite media must have length specified.

        :param composite_media: The composite_media of this Media.
        :type composite_media: List[CompositeMedia]
        """

        self._composite_media = composite_media

    @property
    def content_type(self):
        """Gets the content_type of this Media.

        MIME type of the data

        :return: The content_type of this Media.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Media.

        MIME type of the data

        :param content_type: The content_type of this Media.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def content_type_info(self):
        """Gets the content_type_info of this Media.


        :return: The content_type_info of this Media.
        :rtype: ContentTypeInfo
        """
        return self._content_type_info

    @content_type_info.setter
    def content_type_info(self, content_type_info):
        """Sets the content_type_info of this Media.


        :param content_type_info: The content_type_info of this Media.
        :type content_type_info: ContentTypeInfo
        """

        self._content_type_info = content_type_info

    @property
    def cosmo_binary_reference(self):
        """Gets the cosmo_binary_reference of this Media.

        A binary data reference for a media download. Serves as a technology-agnostic binary reference in some Google infrastructure. This value is a serialized storage_cosmo.BinaryReference proto. Storing it as bytes is a hack to get around the fact that the cosmo proto (as well as others it includes) doesn't support JavaScript. This prevents us from including the actual type of this field.

        :return: The cosmo_binary_reference of this Media.
        :rtype: str
        """
        return self._cosmo_binary_reference

    @cosmo_binary_reference.setter
    def cosmo_binary_reference(self, cosmo_binary_reference):
        """Sets the cosmo_binary_reference of this Media.

        A binary data reference for a media download. Serves as a technology-agnostic binary reference in some Google infrastructure. This value is a serialized storage_cosmo.BinaryReference proto. Storing it as bytes is a hack to get around the fact that the cosmo proto (as well as others it includes) doesn't support JavaScript. This prevents us from including the actual type of this field.

        :param cosmo_binary_reference: The cosmo_binary_reference of this Media.
        :type cosmo_binary_reference: str
        """

        self._cosmo_binary_reference = cosmo_binary_reference

    @property
    def crc32c_hash(self):
        """Gets the crc32c_hash of this Media.

        For Scotty Uploads: Scotty-provided hashes for uploads For Scotty Downloads: (WARNING: DO NOT USE WITHOUT PERMISSION FROM THE SCOTTY TEAM.) A Hash provided by the agent to be used to verify the data being downloaded. Currently only supported for inline payloads. Further, only crc32c_hash is currently supported.

        :return: The crc32c_hash of this Media.
        :rtype: int
        """
        return self._crc32c_hash

    @crc32c_hash.setter
    def crc32c_hash(self, crc32c_hash):
        """Sets the crc32c_hash of this Media.

        For Scotty Uploads: Scotty-provided hashes for uploads For Scotty Downloads: (WARNING: DO NOT USE WITHOUT PERMISSION FROM THE SCOTTY TEAM.) A Hash provided by the agent to be used to verify the data being downloaded. Currently only supported for inline payloads. Further, only crc32c_hash is currently supported.

        :param crc32c_hash: The crc32c_hash of this Media.
        :type crc32c_hash: int
        """

        self._crc32c_hash = crc32c_hash

    @property
    def diff_checksums_response(self):
        """Gets the diff_checksums_response of this Media.


        :return: The diff_checksums_response of this Media.
        :rtype: DiffChecksumsResponse
        """
        return self._diff_checksums_response

    @diff_checksums_response.setter
    def diff_checksums_response(self, diff_checksums_response):
        """Sets the diff_checksums_response of this Media.


        :param diff_checksums_response: The diff_checksums_response of this Media.
        :type diff_checksums_response: DiffChecksumsResponse
        """

        self._diff_checksums_response = diff_checksums_response

    @property
    def diff_download_response(self):
        """Gets the diff_download_response of this Media.


        :return: The diff_download_response of this Media.
        :rtype: DiffDownloadResponse
        """
        return self._diff_download_response

    @diff_download_response.setter
    def diff_download_response(self, diff_download_response):
        """Sets the diff_download_response of this Media.


        :param diff_download_response: The diff_download_response of this Media.
        :type diff_download_response: DiffDownloadResponse
        """

        self._diff_download_response = diff_download_response

    @property
    def diff_upload_request(self):
        """Gets the diff_upload_request of this Media.


        :return: The diff_upload_request of this Media.
        :rtype: DiffUploadRequest
        """
        return self._diff_upload_request

    @diff_upload_request.setter
    def diff_upload_request(self, diff_upload_request):
        """Sets the diff_upload_request of this Media.


        :param diff_upload_request: The diff_upload_request of this Media.
        :type diff_upload_request: DiffUploadRequest
        """

        self._diff_upload_request = diff_upload_request

    @property
    def diff_upload_response(self):
        """Gets the diff_upload_response of this Media.


        :return: The diff_upload_response of this Media.
        :rtype: DiffUploadResponse
        """
        return self._diff_upload_response

    @diff_upload_response.setter
    def diff_upload_response(self, diff_upload_response):
        """Sets the diff_upload_response of this Media.


        :param diff_upload_response: The diff_upload_response of this Media.
        :type diff_upload_response: DiffUploadResponse
        """

        self._diff_upload_response = diff_upload_response

    @property
    def diff_version_response(self):
        """Gets the diff_version_response of this Media.


        :return: The diff_version_response of this Media.
        :rtype: DiffVersionResponse
        """
        return self._diff_version_response

    @diff_version_response.setter
    def diff_version_response(self, diff_version_response):
        """Sets the diff_version_response of this Media.


        :param diff_version_response: The diff_version_response of this Media.
        :type diff_version_response: DiffVersionResponse
        """

        self._diff_version_response = diff_version_response

    @property
    def download_parameters(self):
        """Gets the download_parameters of this Media.


        :return: The download_parameters of this Media.
        :rtype: DownloadParameters
        """
        return self._download_parameters

    @download_parameters.setter
    def download_parameters(self, download_parameters):
        """Sets the download_parameters of this Media.


        :param download_parameters: The download_parameters of this Media.
        :type download_parameters: DownloadParameters
        """

        self._download_parameters = download_parameters

    @property
    def filename(self):
        """Gets the filename of this Media.

        Original file name

        :return: The filename of this Media.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Media.

        Original file name

        :param filename: The filename of this Media.
        :type filename: str
        """

        self._filename = filename

    @property
    def hash(self):
        """Gets the hash of this Media.

        Deprecated, use one of explicit hash type fields instead. These two hash related fields will only be populated on Scotty based media uploads and will contain the content of the hash group in the NotificationRequest: http://cs/#google3/uploader/service/proto/upload_listener.proto&q=class:Hash Hex encoded hash value of the uploaded media.

        :return: The hash of this Media.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this Media.

        Deprecated, use one of explicit hash type fields instead. These two hash related fields will only be populated on Scotty based media uploads and will contain the content of the hash group in the NotificationRequest: http://cs/#google3/uploader/service/proto/upload_listener.proto&q=class:Hash Hex encoded hash value of the uploaded media.

        :param hash: The hash of this Media.
        :type hash: str
        """

        self._hash = hash

    @property
    def hash_verified(self):
        """Gets the hash_verified of this Media.

        For Scotty uploads only. If a user sends a hash code and the backend has requested that Scotty verify the upload against the client hash, Scotty will perform the check on behalf of the backend and will reject it if the hashes don't match. This is set to true if Scotty performed this verification.

        :return: The hash_verified of this Media.
        :rtype: bool
        """
        return self._hash_verified

    @hash_verified.setter
    def hash_verified(self, hash_verified):
        """Sets the hash_verified of this Media.

        For Scotty uploads only. If a user sends a hash code and the backend has requested that Scotty verify the upload against the client hash, Scotty will perform the check on behalf of the backend and will reject it if the hashes don't match. This is set to true if Scotty performed this verification.

        :param hash_verified: The hash_verified of this Media.
        :type hash_verified: bool
        """

        self._hash_verified = hash_verified

    @property
    def inline(self):
        """Gets the inline of this Media.

        Media data, set if reference_type is INLINE

        :return: The inline of this Media.
        :rtype: str
        """
        return self._inline

    @inline.setter
    def inline(self, inline):
        """Sets the inline of this Media.

        Media data, set if reference_type is INLINE

        :param inline: The inline of this Media.
        :type inline: str
        """

        self._inline = inline

    @property
    def is_potential_retry(self):
        """Gets the is_potential_retry of this Media.

        |is_potential_retry| is set false only when Scotty is certain that it has not sent the request before. When a client resumes an upload, this field must be set true in agent calls, because Scotty cannot be certain that it has never sent the request before due to potential failure in the session state persistence.

        :return: The is_potential_retry of this Media.
        :rtype: bool
        """
        return self._is_potential_retry

    @is_potential_retry.setter
    def is_potential_retry(self, is_potential_retry):
        """Sets the is_potential_retry of this Media.

        |is_potential_retry| is set false only when Scotty is certain that it has not sent the request before. When a client resumes an upload, this field must be set true in agent calls, because Scotty cannot be certain that it has never sent the request before due to potential failure in the session state persistence.

        :param is_potential_retry: The is_potential_retry of this Media.
        :type is_potential_retry: bool
        """

        self._is_potential_retry = is_potential_retry

    @property
    def length(self):
        """Gets the length of this Media.

        Size of the data, in bytes

        :return: The length of this Media.
        :rtype: str
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Media.

        Size of the data, in bytes

        :param length: The length of this Media.
        :type length: str
        """

        self._length = length

    @property
    def md5_hash(self):
        """Gets the md5_hash of this Media.

        Scotty-provided MD5 hash for an upload.

        :return: The md5_hash of this Media.
        :rtype: str
        """
        return self._md5_hash

    @md5_hash.setter
    def md5_hash(self, md5_hash):
        """Sets the md5_hash of this Media.

        Scotty-provided MD5 hash for an upload.

        :param md5_hash: The md5_hash of this Media.
        :type md5_hash: str
        """

        self._md5_hash = md5_hash

    @property
    def media_id(self):
        """Gets the media_id of this Media.

        Media id to forward to the operation GetMedia. Can be set if reference_type is GET_MEDIA.

        :return: The media_id of this Media.
        :rtype: str
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """Sets the media_id of this Media.

        Media id to forward to the operation GetMedia. Can be set if reference_type is GET_MEDIA.

        :param media_id: The media_id of this Media.
        :type media_id: str
        """

        self._media_id = media_id

    @property
    def object_id(self):
        """Gets the object_id of this Media.


        :return: The object_id of this Media.
        :rtype: ObjectId
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this Media.


        :param object_id: The object_id of this Media.
        :type object_id: ObjectId
        """

        self._object_id = object_id

    @property
    def path(self):
        """Gets the path of this Media.

        Path to the data, set if reference_type is PATH

        :return: The path of this Media.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Media.

        Path to the data, set if reference_type is PATH

        :param path: The path of this Media.
        :type path: str
        """

        self._path = path

    @property
    def reference_type(self):
        """Gets the reference_type of this Media.

        Describes what the field reference contains.

        :return: The reference_type of this Media.
        :rtype: str
        """
        return self._reference_type

    @reference_type.setter
    def reference_type(self, reference_type):
        """Sets the reference_type of this Media.

        Describes what the field reference contains.

        :param reference_type: The reference_type of this Media.
        :type reference_type: str
        """
        allowed_values = ["PATH", "BLOB_REF", "INLINE", "GET_MEDIA", "COMPOSITE_MEDIA", "BIGSTORE_REF", "DIFF_VERSION_RESPONSE", "DIFF_CHECKSUMS_RESPONSE", "DIFF_DOWNLOAD_RESPONSE", "DIFF_UPLOAD_REQUEST", "DIFF_UPLOAD_RESPONSE", "COSMO_BINARY_REFERENCE", "ARBITRARY_BYTES"]  # noqa: E501
        if reference_type not in allowed_values:
            raise ValueError(
                "Invalid value for `reference_type` ({0}), must be one of {1}"
                .format(reference_type, allowed_values)
            )

        self._reference_type = reference_type

    @property
    def sha1_hash(self):
        """Gets the sha1_hash of this Media.

        Scotty-provided SHA1 hash for an upload.

        :return: The sha1_hash of this Media.
        :rtype: str
        """
        return self._sha1_hash

    @sha1_hash.setter
    def sha1_hash(self, sha1_hash):
        """Sets the sha1_hash of this Media.

        Scotty-provided SHA1 hash for an upload.

        :param sha1_hash: The sha1_hash of this Media.
        :type sha1_hash: str
        """

        self._sha1_hash = sha1_hash

    @property
    def sha256_hash(self):
        """Gets the sha256_hash of this Media.

        Scotty-provided SHA256 hash for an upload.

        :return: The sha256_hash of this Media.
        :rtype: str
        """
        return self._sha256_hash

    @sha256_hash.setter
    def sha256_hash(self, sha256_hash):
        """Sets the sha256_hash of this Media.

        Scotty-provided SHA256 hash for an upload.

        :param sha256_hash: The sha256_hash of this Media.
        :type sha256_hash: str
        """

        self._sha256_hash = sha256_hash

    @property
    def timestamp(self):
        """Gets the timestamp of this Media.

        Time at which the media data was last updated, in milliseconds since UNIX epoch

        :return: The timestamp of this Media.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Media.

        Time at which the media data was last updated, in milliseconds since UNIX epoch

        :param timestamp: The timestamp of this Media.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def token(self):
        """Gets the token of this Media.

        A unique fingerprint/version id for the media data

        :return: The token of this Media.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Media.

        A unique fingerprint/version id for the media data

        :param token: The token of this Media.
        :type token: str
        """

        self._token = token
