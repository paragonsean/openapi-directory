# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.localized_string import LocalizedString
from openapi_server import util


class TicketSeat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coach: str=None, custom_fare_class: LocalizedString=None, fare_class: str=None, seat: str=None, seat_assignment: LocalizedString=None):
        """TicketSeat - a model defined in OpenAPI

        :param coach: The coach of this TicketSeat.
        :param custom_fare_class: The custom_fare_class of this TicketSeat.
        :param fare_class: The fare_class of this TicketSeat.
        :param seat: The seat of this TicketSeat.
        :param seat_assignment: The seat_assignment of this TicketSeat.
        """
        self.openapi_types = {
            'coach': str,
            'custom_fare_class': LocalizedString,
            'fare_class': str,
            'seat': str,
            'seat_assignment': LocalizedString
        }

        self.attribute_map = {
            'coach': 'coach',
            'custom_fare_class': 'customFareClass',
            'fare_class': 'fareClass',
            'seat': 'seat',
            'seat_assignment': 'seatAssignment'
        }

        self._coach = coach
        self._custom_fare_class = custom_fare_class
        self._fare_class = fare_class
        self._seat = seat
        self._seat_assignment = seat_assignment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TicketSeat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TicketSeat of this TicketSeat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coach(self):
        """Gets the coach of this TicketSeat.

        The identifier of the train car or coach in which the ticketed seat is located. Eg. \"10\"

        :return: The coach of this TicketSeat.
        :rtype: str
        """
        return self._coach

    @coach.setter
    def coach(self, coach):
        """Sets the coach of this TicketSeat.

        The identifier of the train car or coach in which the ticketed seat is located. Eg. \"10\"

        :param coach: The coach of this TicketSeat.
        :type coach: str
        """

        self._coach = coach

    @property
    def custom_fare_class(self):
        """Gets the custom_fare_class of this TicketSeat.


        :return: The custom_fare_class of this TicketSeat.
        :rtype: LocalizedString
        """
        return self._custom_fare_class

    @custom_fare_class.setter
    def custom_fare_class(self, custom_fare_class):
        """Sets the custom_fare_class of this TicketSeat.


        :param custom_fare_class: The custom_fare_class of this TicketSeat.
        :type custom_fare_class: LocalizedString
        """

        self._custom_fare_class = custom_fare_class

    @property
    def fare_class(self):
        """Gets the fare_class of this TicketSeat.

        The fare class of the ticketed seat.

        :return: The fare_class of this TicketSeat.
        :rtype: str
        """
        return self._fare_class

    @fare_class.setter
    def fare_class(self, fare_class):
        """Sets the fare_class of this TicketSeat.

        The fare class of the ticketed seat.

        :param fare_class: The fare_class of this TicketSeat.
        :type fare_class: str
        """
        allowed_values = ["FARE_CLASS_UNSPECIFIED", "ECONOMY", "economy", "FIRST", "first", "BUSINESS", "business"]  # noqa: E501
        if fare_class not in allowed_values:
            raise ValueError(
                "Invalid value for `fare_class` ({0}), must be one of {1}"
                .format(fare_class, allowed_values)
            )

        self._fare_class = fare_class

    @property
    def seat(self):
        """Gets the seat of this TicketSeat.

        The identifier of where the ticketed seat is located. Eg. \"42\". If there is no specific identifier, use `seatAssigment` instead.

        :return: The seat of this TicketSeat.
        :rtype: str
        """
        return self._seat

    @seat.setter
    def seat(self, seat):
        """Sets the seat of this TicketSeat.

        The identifier of where the ticketed seat is located. Eg. \"42\". If there is no specific identifier, use `seatAssigment` instead.

        :param seat: The seat of this TicketSeat.
        :type seat: str
        """

        self._seat = seat

    @property
    def seat_assignment(self):
        """Gets the seat_assignment of this TicketSeat.


        :return: The seat_assignment of this TicketSeat.
        :rtype: LocalizedString
        """
        return self._seat_assignment

    @seat_assignment.setter
    def seat_assignment(self, seat_assignment):
        """Sets the seat_assignment of this TicketSeat.


        :param seat_assignment: The seat_assignment of this TicketSeat.
        :type seat_assignment: LocalizedString
        """

        self._seat_assignment = seat_assignment
