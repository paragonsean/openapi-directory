# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RotatingBarcodeValues(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, period_millis: str=None, start_date_time: str=None, values: List[str]=None):
        """RotatingBarcodeValues - a model defined in OpenAPI

        :param period_millis: The period_millis of this RotatingBarcodeValues.
        :param start_date_time: The start_date_time of this RotatingBarcodeValues.
        :param values: The values of this RotatingBarcodeValues.
        """
        self.openapi_types = {
            'period_millis': str,
            'start_date_time': str,
            'values': List[str]
        }

        self.attribute_map = {
            'period_millis': 'periodMillis',
            'start_date_time': 'startDateTime',
            'values': 'values'
        }

        self._period_millis = period_millis
        self._start_date_time = start_date_time
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RotatingBarcodeValues':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RotatingBarcodeValues of this RotatingBarcodeValues.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def period_millis(self):
        """Gets the period_millis of this RotatingBarcodeValues.

        Required. The amount of time each barcode is valid for.

        :return: The period_millis of this RotatingBarcodeValues.
        :rtype: str
        """
        return self._period_millis

    @period_millis.setter
    def period_millis(self, period_millis):
        """Sets the period_millis of this RotatingBarcodeValues.

        Required. The amount of time each barcode is valid for.

        :param period_millis: The period_millis of this RotatingBarcodeValues.
        :type period_millis: str
        """

        self._period_millis = period_millis

    @property
    def start_date_time(self):
        """Gets the start_date_time of this RotatingBarcodeValues.

        Required. The date/time the first barcode is valid from. Barcodes will be rotated through using period_millis defined on the object's RotatingBarcodeValueInfo. This is an ISO 8601 extended format date/time, with an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year.

        :return: The start_date_time of this RotatingBarcodeValues.
        :rtype: str
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this RotatingBarcodeValues.

        Required. The date/time the first barcode is valid from. Barcodes will be rotated through using period_millis defined on the object's RotatingBarcodeValueInfo. This is an ISO 8601 extended format date/time, with an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year.

        :param start_date_time: The start_date_time of this RotatingBarcodeValues.
        :type start_date_time: str
        """

        self._start_date_time = start_date_time

    @property
    def values(self):
        """Gets the values of this RotatingBarcodeValues.

        Required. The values to encode in the barcode. At least one value is required.

        :return: The values of this RotatingBarcodeValues.
        :rtype: List[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this RotatingBarcodeValues.

        Required. The values to encode in the barcode. At least one value is required.

        :param values: The values of this RotatingBarcodeValues.
        :type values: List[str]
        """

        self._values = values
