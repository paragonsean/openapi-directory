# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Money(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, kind: str=None, micros: str=None):
        """Money - a model defined in OpenAPI

        :param currency_code: The currency_code of this Money.
        :param kind: The kind of this Money.
        :param micros: The micros of this Money.
        """
        self.openapi_types = {
            'currency_code': str,
            'kind': str,
            'micros': str
        }

        self.attribute_map = {
            'currency_code': 'currencyCode',
            'kind': 'kind',
            'micros': 'micros'
        }

        self._currency_code = currency_code
        self._kind = kind
        self._micros = micros

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Money':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Money of this Money.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this Money.

        The currency code, such as \"USD\" or \"EUR.\"

        :return: The currency_code of this Money.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Money.

        The currency code, such as \"USD\" or \"EUR.\"

        :param currency_code: The currency_code of this Money.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def kind(self):
        """Gets the kind of this Money.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#money\"`.

        :return: The kind of this Money.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Money.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#money\"`.

        :param kind: The kind of this Money.
        :type kind: str
        """

        self._kind = kind

    @property
    def micros(self):
        """Gets the micros of this Money.

        The unit of money amount in micros. For example, $1 USD would be represented as 1000000 micros.

        :return: The micros of this Money.
        :rtype: str
        """
        return self._micros

    @micros.setter
    def micros(self, micros):
        """Sets the micros of this Money.

        The unit of money amount in micros. For example, $1 USD would be represented as 1000000 micros.

        :param micros: The micros of this Money.
        :type micros: str
        """

        self._micros = micros
