# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.composite_media import CompositeMedia
from openapi_server import util


class DiffUploadResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object_version: str=None, original_object: CompositeMedia=None):
        """DiffUploadResponse - a model defined in OpenAPI

        :param object_version: The object_version of this DiffUploadResponse.
        :param original_object: The original_object of this DiffUploadResponse.
        """
        self.openapi_types = {
            'object_version': str,
            'original_object': CompositeMedia
        }

        self.attribute_map = {
            'object_version': 'objectVersion',
            'original_object': 'originalObject'
        }

        self._object_version = object_version
        self._original_object = original_object

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiffUploadResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiffUploadResponse of this DiffUploadResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_version(self):
        """Gets the object_version of this DiffUploadResponse.

        The object version of the object at the server. Must be included in the end notification response. The version in the end notification response must correspond to the new version of the object that is now stored at the server, after the upload.

        :return: The object_version of this DiffUploadResponse.
        :rtype: str
        """
        return self._object_version

    @object_version.setter
    def object_version(self, object_version):
        """Sets the object_version of this DiffUploadResponse.

        The object version of the object at the server. Must be included in the end notification response. The version in the end notification response must correspond to the new version of the object that is now stored at the server, after the upload.

        :param object_version: The object_version of this DiffUploadResponse.
        :type object_version: str
        """

        self._object_version = object_version

    @property
    def original_object(self):
        """Gets the original_object of this DiffUploadResponse.


        :return: The original_object of this DiffUploadResponse.
        :rtype: CompositeMedia
        """
        return self._original_object

    @original_object.setter
    def original_object(self, original_object):
        """Sets the original_object of this DiffUploadResponse.


        :param original_object: The original_object of this DiffUploadResponse.
        :type original_object: CompositeMedia
        """

        self._original_object = original_object
