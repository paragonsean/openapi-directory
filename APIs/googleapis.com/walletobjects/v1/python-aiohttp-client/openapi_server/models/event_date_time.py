# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.localized_string import LocalizedString
from openapi_server import util


class EventDateTime(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_doors_open_label: LocalizedString=None, doors_open: str=None, doors_open_label: str=None, end: str=None, kind: str=None, start: str=None):
        """EventDateTime - a model defined in OpenAPI

        :param custom_doors_open_label: The custom_doors_open_label of this EventDateTime.
        :param doors_open: The doors_open of this EventDateTime.
        :param doors_open_label: The doors_open_label of this EventDateTime.
        :param end: The end of this EventDateTime.
        :param kind: The kind of this EventDateTime.
        :param start: The start of this EventDateTime.
        """
        self.openapi_types = {
            'custom_doors_open_label': LocalizedString,
            'doors_open': str,
            'doors_open_label': str,
            'end': str,
            'kind': str,
            'start': str
        }

        self.attribute_map = {
            'custom_doors_open_label': 'customDoorsOpenLabel',
            'doors_open': 'doorsOpen',
            'doors_open_label': 'doorsOpenLabel',
            'end': 'end',
            'kind': 'kind',
            'start': 'start'
        }

        self._custom_doors_open_label = custom_doors_open_label
        self._doors_open = doors_open
        self._doors_open_label = doors_open_label
        self._end = end
        self._kind = kind
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventDateTime':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventDateTime of this EventDateTime.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_doors_open_label(self):
        """Gets the custom_doors_open_label of this EventDateTime.


        :return: The custom_doors_open_label of this EventDateTime.
        :rtype: LocalizedString
        """
        return self._custom_doors_open_label

    @custom_doors_open_label.setter
    def custom_doors_open_label(self, custom_doors_open_label):
        """Sets the custom_doors_open_label of this EventDateTime.


        :param custom_doors_open_label: The custom_doors_open_label of this EventDateTime.
        :type custom_doors_open_label: LocalizedString
        """

        self._custom_doors_open_label = custom_doors_open_label

    @property
    def doors_open(self):
        """Gets the doors_open of this EventDateTime.

        The date/time when the doors open at the venue. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the \"local date/time\". This should be the local date/time at the venue. For example, if the event occurs at the 20th hour of June 5th, 2018 at the venue, the local date/time portion should be `2018-06-05T20:00:00`. If the local date/time at the venue is 4 hours before UTC, an offset of `-04:00` may be appended. Without offset information, some rich features may not be available.

        :return: The doors_open of this EventDateTime.
        :rtype: str
        """
        return self._doors_open

    @doors_open.setter
    def doors_open(self, doors_open):
        """Sets the doors_open of this EventDateTime.

        The date/time when the doors open at the venue. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the \"local date/time\". This should be the local date/time at the venue. For example, if the event occurs at the 20th hour of June 5th, 2018 at the venue, the local date/time portion should be `2018-06-05T20:00:00`. If the local date/time at the venue is 4 hours before UTC, an offset of `-04:00` may be appended. Without offset information, some rich features may not be available.

        :param doors_open: The doors_open of this EventDateTime.
        :type doors_open: str
        """

        self._doors_open = doors_open

    @property
    def doors_open_label(self):
        """Gets the doors_open_label of this EventDateTime.

        The label to use for the doors open value (`doorsOpen`) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both `doorsOpenLabel` and `customDoorsOpenLabel` may not be set. If neither is set, the label will default to \"Doors Open\", localized. If the doors open field is unset, this label will not be used.

        :return: The doors_open_label of this EventDateTime.
        :rtype: str
        """
        return self._doors_open_label

    @doors_open_label.setter
    def doors_open_label(self, doors_open_label):
        """Sets the doors_open_label of this EventDateTime.

        The label to use for the doors open value (`doorsOpen`) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both `doorsOpenLabel` and `customDoorsOpenLabel` may not be set. If neither is set, the label will default to \"Doors Open\", localized. If the doors open field is unset, this label will not be used.

        :param doors_open_label: The doors_open_label of this EventDateTime.
        :type doors_open_label: str
        """
        allowed_values = ["DOORS_OPEN_LABEL_UNSPECIFIED", "DOORS_OPEN", "doorsOpen", "GATES_OPEN", "gatesOpen"]  # noqa: E501
        if doors_open_label not in allowed_values:
            raise ValueError(
                "Invalid value for `doors_open_label` ({0}), must be one of {1}"
                .format(doors_open_label, allowed_values)
            )

        self._doors_open_label = doors_open_label

    @property
    def end(self):
        """Gets the end of this EventDateTime.

        The date/time when the event ends. If the event spans multiple days, it should be the end date/time on the last day. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the \"local date/time\". This should be the local date/time at the venue. For example, if the event occurs at the 20th hour of June 5th, 2018 at the venue, the local date/time portion should be `2018-06-05T20:00:00`. If the local date/time at the venue is 4 hours before UTC, an offset of `-04:00` may be appended. Without offset information, some rich features may not be available.

        :return: The end of this EventDateTime.
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this EventDateTime.

        The date/time when the event ends. If the event spans multiple days, it should be the end date/time on the last day. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the \"local date/time\". This should be the local date/time at the venue. For example, if the event occurs at the 20th hour of June 5th, 2018 at the venue, the local date/time portion should be `2018-06-05T20:00:00`. If the local date/time at the venue is 4 hours before UTC, an offset of `-04:00` may be appended. Without offset information, some rich features may not be available.

        :param end: The end of this EventDateTime.
        :type end: str
        """

        self._end = end

    @property
    def kind(self):
        """Gets the kind of this EventDateTime.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#eventDateTime\"`.

        :return: The kind of this EventDateTime.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this EventDateTime.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#eventDateTime\"`.

        :param kind: The kind of this EventDateTime.
        :type kind: str
        """

        self._kind = kind

    @property
    def start(self):
        """Gets the start of this EventDateTime.

        The date/time when the event starts. If the event spans multiple days, it should be the start date/time on the first day. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the \"local date/time\". This should be the local date/time at the venue. For example, if the event occurs at the 20th hour of June 5th, 2018 at the venue, the local date/time portion should be `2018-06-05T20:00:00`. If the local date/time at the venue is 4 hours before UTC, an offset of `-04:00` may be appended. Without offset information, some rich features may not be available.

        :return: The start of this EventDateTime.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this EventDateTime.

        The date/time when the event starts. If the event spans multiple days, it should be the start date/time on the first day. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the \"local date/time\". This should be the local date/time at the venue. For example, if the event occurs at the 20th hour of June 5th, 2018 at the venue, the local date/time portion should be `2018-06-05T20:00:00`. If the local date/time at the venue is 4 hours before UTC, an offset of `-04:00` may be appended. Without offset information, some rich features may not be available.

        :param start: The start of this EventDateTime.
        :type start: str
        """

        self._start = start
