# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sign_up_info import SignUpInfo
from openapi_server import util


class IssuerToUserInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, sign_up_info: SignUpInfo=None, url: str=None, value: str=None):
        """IssuerToUserInfo - a model defined in OpenAPI

        :param action: The action of this IssuerToUserInfo.
        :param sign_up_info: The sign_up_info of this IssuerToUserInfo.
        :param url: The url of this IssuerToUserInfo.
        :param value: The value of this IssuerToUserInfo.
        """
        self.openapi_types = {
            'action': str,
            'sign_up_info': SignUpInfo,
            'url': str,
            'value': str
        }

        self.attribute_map = {
            'action': 'action',
            'sign_up_info': 'signUpInfo',
            'url': 'url',
            'value': 'value'
        }

        self._action = action
        self._sign_up_info = sign_up_info
        self._url = url
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssuerToUserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssuerToUserInfo of this IssuerToUserInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this IssuerToUserInfo.


        :return: The action of this IssuerToUserInfo.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this IssuerToUserInfo.


        :param action: The action of this IssuerToUserInfo.
        :type action: str
        """
        allowed_values = ["ACTION_UNSPECIFIED", "S2AP", "s2ap", "SIGN_UP", "signUp"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def sign_up_info(self):
        """Gets the sign_up_info of this IssuerToUserInfo.


        :return: The sign_up_info of this IssuerToUserInfo.
        :rtype: SignUpInfo
        """
        return self._sign_up_info

    @sign_up_info.setter
    def sign_up_info(self, sign_up_info):
        """Sets the sign_up_info of this IssuerToUserInfo.


        :param sign_up_info: The sign_up_info of this IssuerToUserInfo.
        :type sign_up_info: SignUpInfo
        """

        self._sign_up_info = sign_up_info

    @property
    def url(self):
        """Gets the url of this IssuerToUserInfo.

        Currently not used, consider deprecating.

        :return: The url of this IssuerToUserInfo.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IssuerToUserInfo.

        Currently not used, consider deprecating.

        :param url: The url of this IssuerToUserInfo.
        :type url: str
        """

        self._url = url

    @property
    def value(self):
        """Gets the value of this IssuerToUserInfo.

        JSON web token for action S2AP.

        :return: The value of this IssuerToUserInfo.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this IssuerToUserInfo.

        JSON web token for action S2AP.

        :param value: The value of this IssuerToUserInfo.
        :type value: str
        """

        self._value = value
