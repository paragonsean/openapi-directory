# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupingInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, grouping_id: str=None, sort_index: int=None):
        """GroupingInfo - a model defined in OpenAPI

        :param grouping_id: The grouping_id of this GroupingInfo.
        :param sort_index: The sort_index of this GroupingInfo.
        """
        self.openapi_types = {
            'grouping_id': str,
            'sort_index': int
        }

        self.attribute_map = {
            'grouping_id': 'groupingId',
            'sort_index': 'sortIndex'
        }

        self._grouping_id = grouping_id
        self._sort_index = sort_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupingInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupingInfo of this GroupingInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def grouping_id(self):
        """Gets the grouping_id of this GroupingInfo.

        Optional grouping ID for grouping the passes with the same ID visually together. Grouping with different types of passes is allowed.

        :return: The grouping_id of this GroupingInfo.
        :rtype: str
        """
        return self._grouping_id

    @grouping_id.setter
    def grouping_id(self, grouping_id):
        """Sets the grouping_id of this GroupingInfo.

        Optional grouping ID for grouping the passes with the same ID visually together. Grouping with different types of passes is allowed.

        :param grouping_id: The grouping_id of this GroupingInfo.
        :type grouping_id: str
        """

        self._grouping_id = grouping_id

    @property
    def sort_index(self):
        """Gets the sort_index of this GroupingInfo.

        Optional index for sorting the passes when they are grouped with other passes. Passes with lower sort index are shown before passes with higher sort index. If unspecified, the value is assumed to be INT_MAX. For two passes with the same sort index, the sorting behavior is undefined.

        :return: The sort_index of this GroupingInfo.
        :rtype: int
        """
        return self._sort_index

    @sort_index.setter
    def sort_index(self, sort_index):
        """Sets the sort_index of this GroupingInfo.

        Optional index for sorting the passes when they are grouped with other passes. Passes with lower sort index are shown before passes with higher sort index. If unspecified, the value is assumed to be INT_MAX. For two passes with the same sort index, the sorting behavior is undefined.

        :param sort_index: The sort_index of this GroupingInfo.
        :type sort_index: int
        """

        self._sort_index = sort_index
