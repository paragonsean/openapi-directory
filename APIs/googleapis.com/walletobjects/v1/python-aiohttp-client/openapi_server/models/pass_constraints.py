# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PassConstraints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nfc_constraint: List[str]=None, screenshot_eligibility: str=None):
        """PassConstraints - a model defined in OpenAPI

        :param nfc_constraint: The nfc_constraint of this PassConstraints.
        :param screenshot_eligibility: The screenshot_eligibility of this PassConstraints.
        """
        self.openapi_types = {
            'nfc_constraint': List[str],
            'screenshot_eligibility': str
        }

        self.attribute_map = {
            'nfc_constraint': 'nfcConstraint',
            'screenshot_eligibility': 'screenshotEligibility'
        }

        self._nfc_constraint = nfc_constraint
        self._screenshot_eligibility = screenshot_eligibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PassConstraints':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PassConstraints of this PassConstraints.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nfc_constraint(self):
        """Gets the nfc_constraint of this PassConstraints.

        The NFC constraints for the pass.

        :return: The nfc_constraint of this PassConstraints.
        :rtype: List[str]
        """
        return self._nfc_constraint

    @nfc_constraint.setter
    def nfc_constraint(self, nfc_constraint):
        """Sets the nfc_constraint of this PassConstraints.

        The NFC constraints for the pass.

        :param nfc_constraint: The nfc_constraint of this PassConstraints.
        :type nfc_constraint: List[str]
        """
        allowed_values = ["NFC_CONSTRAINT_UNSPECIFIED", "BLOCK_PAYMENT", "BLOCK_CLOSED_LOOP_TRANSIT"]  # noqa: E501
        if not set(nfc_constraint).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `nfc_constraint` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(nfc_constraint) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._nfc_constraint = nfc_constraint

    @property
    def screenshot_eligibility(self):
        """Gets the screenshot_eligibility of this PassConstraints.

        The screenshot eligibility for the pass.

        :return: The screenshot_eligibility of this PassConstraints.
        :rtype: str
        """
        return self._screenshot_eligibility

    @screenshot_eligibility.setter
    def screenshot_eligibility(self, screenshot_eligibility):
        """Sets the screenshot_eligibility of this PassConstraints.

        The screenshot eligibility for the pass.

        :param screenshot_eligibility: The screenshot_eligibility of this PassConstraints.
        :type screenshot_eligibility: str
        """
        allowed_values = ["SCREENSHOT_ELIGIBILITY_UNSPECIFIED", "ELIGIBLE", "INELIGIBLE"]  # noqa: E501
        if screenshot_eligibility not in allowed_values:
            raise ValueError(
                "Invalid value for `screenshot_eligibility` ({0}), must be one of {1}"
                .format(screenshot_eligibility, allowed_values)
            )

        self._screenshot_eligibility = screenshot_eligibility
