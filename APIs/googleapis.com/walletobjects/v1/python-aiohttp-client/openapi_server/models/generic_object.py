# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_link_data import AppLinkData
from openapi_server.models.barcode import Barcode
from openapi_server.models.grouping_info import GroupingInfo
from openapi_server.models.image import Image
from openapi_server.models.image_module_data import ImageModuleData
from openapi_server.models.links_module_data import LinksModuleData
from openapi_server.models.localized_string import LocalizedString
from openapi_server.models.notifications import Notifications
from openapi_server.models.pass_constraints import PassConstraints
from openapi_server.models.rotating_barcode import RotatingBarcode
from openapi_server.models.text_module_data import TextModuleData
from openapi_server.models.time_interval import TimeInterval
from openapi_server import util


class GenericObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_link_data: AppLinkData=None, barcode: Barcode=None, card_title: LocalizedString=None, class_id: str=None, generic_type: str=None, grouping_info: GroupingInfo=None, has_users: bool=None, header: LocalizedString=None, hero_image: Image=None, hex_background_color: str=None, id: str=None, image_modules_data: List[ImageModuleData]=None, links_module_data: LinksModuleData=None, logo: Image=None, notifications: Notifications=None, pass_constraints: PassConstraints=None, rotating_barcode: RotatingBarcode=None, smart_tap_redemption_value: str=None, state: str=None, subheader: LocalizedString=None, text_modules_data: List[TextModuleData]=None, valid_time_interval: TimeInterval=None, wide_logo: Image=None):
        """GenericObject - a model defined in OpenAPI

        :param app_link_data: The app_link_data of this GenericObject.
        :param barcode: The barcode of this GenericObject.
        :param card_title: The card_title of this GenericObject.
        :param class_id: The class_id of this GenericObject.
        :param generic_type: The generic_type of this GenericObject.
        :param grouping_info: The grouping_info of this GenericObject.
        :param has_users: The has_users of this GenericObject.
        :param header: The header of this GenericObject.
        :param hero_image: The hero_image of this GenericObject.
        :param hex_background_color: The hex_background_color of this GenericObject.
        :param id: The id of this GenericObject.
        :param image_modules_data: The image_modules_data of this GenericObject.
        :param links_module_data: The links_module_data of this GenericObject.
        :param logo: The logo of this GenericObject.
        :param notifications: The notifications of this GenericObject.
        :param pass_constraints: The pass_constraints of this GenericObject.
        :param rotating_barcode: The rotating_barcode of this GenericObject.
        :param smart_tap_redemption_value: The smart_tap_redemption_value of this GenericObject.
        :param state: The state of this GenericObject.
        :param subheader: The subheader of this GenericObject.
        :param text_modules_data: The text_modules_data of this GenericObject.
        :param valid_time_interval: The valid_time_interval of this GenericObject.
        :param wide_logo: The wide_logo of this GenericObject.
        """
        self.openapi_types = {
            'app_link_data': AppLinkData,
            'barcode': Barcode,
            'card_title': LocalizedString,
            'class_id': str,
            'generic_type': str,
            'grouping_info': GroupingInfo,
            'has_users': bool,
            'header': LocalizedString,
            'hero_image': Image,
            'hex_background_color': str,
            'id': str,
            'image_modules_data': List[ImageModuleData],
            'links_module_data': LinksModuleData,
            'logo': Image,
            'notifications': Notifications,
            'pass_constraints': PassConstraints,
            'rotating_barcode': RotatingBarcode,
            'smart_tap_redemption_value': str,
            'state': str,
            'subheader': LocalizedString,
            'text_modules_data': List[TextModuleData],
            'valid_time_interval': TimeInterval,
            'wide_logo': Image
        }

        self.attribute_map = {
            'app_link_data': 'appLinkData',
            'barcode': 'barcode',
            'card_title': 'cardTitle',
            'class_id': 'classId',
            'generic_type': 'genericType',
            'grouping_info': 'groupingInfo',
            'has_users': 'hasUsers',
            'header': 'header',
            'hero_image': 'heroImage',
            'hex_background_color': 'hexBackgroundColor',
            'id': 'id',
            'image_modules_data': 'imageModulesData',
            'links_module_data': 'linksModuleData',
            'logo': 'logo',
            'notifications': 'notifications',
            'pass_constraints': 'passConstraints',
            'rotating_barcode': 'rotatingBarcode',
            'smart_tap_redemption_value': 'smartTapRedemptionValue',
            'state': 'state',
            'subheader': 'subheader',
            'text_modules_data': 'textModulesData',
            'valid_time_interval': 'validTimeInterval',
            'wide_logo': 'wideLogo'
        }

        self._app_link_data = app_link_data
        self._barcode = barcode
        self._card_title = card_title
        self._class_id = class_id
        self._generic_type = generic_type
        self._grouping_info = grouping_info
        self._has_users = has_users
        self._header = header
        self._hero_image = hero_image
        self._hex_background_color = hex_background_color
        self._id = id
        self._image_modules_data = image_modules_data
        self._links_module_data = links_module_data
        self._logo = logo
        self._notifications = notifications
        self._pass_constraints = pass_constraints
        self._rotating_barcode = rotating_barcode
        self._smart_tap_redemption_value = smart_tap_redemption_value
        self._state = state
        self._subheader = subheader
        self._text_modules_data = text_modules_data
        self._valid_time_interval = valid_time_interval
        self._wide_logo = wide_logo

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenericObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenericObject of this GenericObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_link_data(self):
        """Gets the app_link_data of this GenericObject.


        :return: The app_link_data of this GenericObject.
        :rtype: AppLinkData
        """
        return self._app_link_data

    @app_link_data.setter
    def app_link_data(self, app_link_data):
        """Sets the app_link_data of this GenericObject.


        :param app_link_data: The app_link_data of this GenericObject.
        :type app_link_data: AppLinkData
        """

        self._app_link_data = app_link_data

    @property
    def barcode(self):
        """Gets the barcode of this GenericObject.


        :return: The barcode of this GenericObject.
        :rtype: Barcode
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this GenericObject.


        :param barcode: The barcode of this GenericObject.
        :type barcode: Barcode
        """

        self._barcode = barcode

    @property
    def card_title(self):
        """Gets the card_title of this GenericObject.


        :return: The card_title of this GenericObject.
        :rtype: LocalizedString
        """
        return self._card_title

    @card_title.setter
    def card_title(self, card_title):
        """Sets the card_title of this GenericObject.


        :param card_title: The card_title of this GenericObject.
        :type card_title: LocalizedString
        """

        self._card_title = card_title

    @property
    def class_id(self):
        """Gets the class_id of this GenericObject.

        Required. The class associated with this object. The class must be of the same type as this object, must already exist, and must be approved. Class IDs should follow the format `issuerID.identifier` where `issuerID` is issued by Google and `identifier` is chosen by you.

        :return: The class_id of this GenericObject.
        :rtype: str
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id):
        """Sets the class_id of this GenericObject.

        Required. The class associated with this object. The class must be of the same type as this object, must already exist, and must be approved. Class IDs should follow the format `issuerID.identifier` where `issuerID` is issued by Google and `identifier` is chosen by you.

        :param class_id: The class_id of this GenericObject.
        :type class_id: str
        """

        self._class_id = class_id

    @property
    def generic_type(self):
        """Gets the generic_type of this GenericObject.

        Specify which `GenericType` the card belongs to.

        :return: The generic_type of this GenericObject.
        :rtype: str
        """
        return self._generic_type

    @generic_type.setter
    def generic_type(self, generic_type):
        """Sets the generic_type of this GenericObject.

        Specify which `GenericType` the card belongs to.

        :param generic_type: The generic_type of this GenericObject.
        :type generic_type: str
        """
        allowed_values = ["GENERIC_TYPE_UNSPECIFIED", "GENERIC_SEASON_PASS", "GENERIC_UTILITY_BILLS", "GENERIC_PARKING_PASS", "GENERIC_VOUCHER", "GENERIC_GYM_MEMBERSHIP", "GENERIC_LIBRARY_MEMBERSHIP", "GENERIC_RESERVATIONS", "GENERIC_AUTO_INSURANCE", "GENERIC_HOME_INSURANCE", "GENERIC_ENTRY_TICKET", "GENERIC_RECEIPT", "GENERIC_OTHER"]  # noqa: E501
        if generic_type not in allowed_values:
            raise ValueError(
                "Invalid value for `generic_type` ({0}), must be one of {1}"
                .format(generic_type, allowed_values)
            )

        self._generic_type = generic_type

    @property
    def grouping_info(self):
        """Gets the grouping_info of this GenericObject.


        :return: The grouping_info of this GenericObject.
        :rtype: GroupingInfo
        """
        return self._grouping_info

    @grouping_info.setter
    def grouping_info(self, grouping_info):
        """Sets the grouping_info of this GenericObject.


        :param grouping_info: The grouping_info of this GenericObject.
        :type grouping_info: GroupingInfo
        """

        self._grouping_info = grouping_info

    @property
    def has_users(self):
        """Gets the has_users of this GenericObject.

        Indicates if the object has users. This field is set by the platform.

        :return: The has_users of this GenericObject.
        :rtype: bool
        """
        return self._has_users

    @has_users.setter
    def has_users(self, has_users):
        """Sets the has_users of this GenericObject.

        Indicates if the object has users. This field is set by the platform.

        :param has_users: The has_users of this GenericObject.
        :type has_users: bool
        """

        self._has_users = has_users

    @property
    def header(self):
        """Gets the header of this GenericObject.


        :return: The header of this GenericObject.
        :rtype: LocalizedString
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this GenericObject.


        :param header: The header of this GenericObject.
        :type header: LocalizedString
        """

        self._header = header

    @property
    def hero_image(self):
        """Gets the hero_image of this GenericObject.


        :return: The hero_image of this GenericObject.
        :rtype: Image
        """
        return self._hero_image

    @hero_image.setter
    def hero_image(self, hero_image):
        """Sets the hero_image of this GenericObject.


        :param hero_image: The hero_image of this GenericObject.
        :type hero_image: Image
        """

        self._hero_image = hero_image

    @property
    def hex_background_color(self):
        """Gets the hex_background_color of this GenericObject.

        The background color for the card. If not set, the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used and if logo is not set, a color would be chosen by Google.

        :return: The hex_background_color of this GenericObject.
        :rtype: str
        """
        return self._hex_background_color

    @hex_background_color.setter
    def hex_background_color(self, hex_background_color):
        """Sets the hex_background_color of this GenericObject.

        The background color for the card. If not set, the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used and if logo is not set, a color would be chosen by Google.

        :param hex_background_color: The hex_background_color of this GenericObject.
        :type hex_background_color: str
        """

        self._hex_background_color = hex_background_color

    @property
    def id(self):
        """Gets the id of this GenericObject.

        Required. The unique identifier for an object. This ID must be unique across all objects from an issuer. This value needs to follow the format `issuerID.identifier` where `issuerID` is issued by Google and `identifier` is chosen by you. The unique identifier can only include alphanumeric characters, `.`, `_`, or `-`.

        :return: The id of this GenericObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GenericObject.

        Required. The unique identifier for an object. This ID must be unique across all objects from an issuer. This value needs to follow the format `issuerID.identifier` where `issuerID` is issued by Google and `identifier` is chosen by you. The unique identifier can only include alphanumeric characters, `.`, `_`, or `-`.

        :param id: The id of this GenericObject.
        :type id: str
        """

        self._id = id

    @property
    def image_modules_data(self):
        """Gets the image_modules_data of this GenericObject.

        Image module data. Only one of the image from class and one from object level will be rendered when both set.

        :return: The image_modules_data of this GenericObject.
        :rtype: List[ImageModuleData]
        """
        return self._image_modules_data

    @image_modules_data.setter
    def image_modules_data(self, image_modules_data):
        """Sets the image_modules_data of this GenericObject.

        Image module data. Only one of the image from class and one from object level will be rendered when both set.

        :param image_modules_data: The image_modules_data of this GenericObject.
        :type image_modules_data: List[ImageModuleData]
        """

        self._image_modules_data = image_modules_data

    @property
    def links_module_data(self):
        """Gets the links_module_data of this GenericObject.


        :return: The links_module_data of this GenericObject.
        :rtype: LinksModuleData
        """
        return self._links_module_data

    @links_module_data.setter
    def links_module_data(self, links_module_data):
        """Sets the links_module_data of this GenericObject.


        :param links_module_data: The links_module_data of this GenericObject.
        :type links_module_data: LinksModuleData
        """

        self._links_module_data = links_module_data

    @property
    def logo(self):
        """Gets the logo of this GenericObject.


        :return: The logo of this GenericObject.
        :rtype: Image
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this GenericObject.


        :param logo: The logo of this GenericObject.
        :type logo: Image
        """

        self._logo = logo

    @property
    def notifications(self):
        """Gets the notifications of this GenericObject.


        :return: The notifications of this GenericObject.
        :rtype: Notifications
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this GenericObject.


        :param notifications: The notifications of this GenericObject.
        :type notifications: Notifications
        """

        self._notifications = notifications

    @property
    def pass_constraints(self):
        """Gets the pass_constraints of this GenericObject.


        :return: The pass_constraints of this GenericObject.
        :rtype: PassConstraints
        """
        return self._pass_constraints

    @pass_constraints.setter
    def pass_constraints(self, pass_constraints):
        """Sets the pass_constraints of this GenericObject.


        :param pass_constraints: The pass_constraints of this GenericObject.
        :type pass_constraints: PassConstraints
        """

        self._pass_constraints = pass_constraints

    @property
    def rotating_barcode(self):
        """Gets the rotating_barcode of this GenericObject.


        :return: The rotating_barcode of this GenericObject.
        :rtype: RotatingBarcode
        """
        return self._rotating_barcode

    @rotating_barcode.setter
    def rotating_barcode(self, rotating_barcode):
        """Sets the rotating_barcode of this GenericObject.


        :param rotating_barcode: The rotating_barcode of this GenericObject.
        :type rotating_barcode: RotatingBarcode
        """

        self._rotating_barcode = rotating_barcode

    @property
    def smart_tap_redemption_value(self):
        """Gets the smart_tap_redemption_value of this GenericObject.

        The value that will be transmitted to a Smart Tap certified terminal over NFC for this object. The class level fields `enableSmartTap` and `redemptionIssuers` must also be set up correctly in order for the pass to support Smart Tap. Only ASCII characters are supported.

        :return: The smart_tap_redemption_value of this GenericObject.
        :rtype: str
        """
        return self._smart_tap_redemption_value

    @smart_tap_redemption_value.setter
    def smart_tap_redemption_value(self, smart_tap_redemption_value):
        """Sets the smart_tap_redemption_value of this GenericObject.

        The value that will be transmitted to a Smart Tap certified terminal over NFC for this object. The class level fields `enableSmartTap` and `redemptionIssuers` must also be set up correctly in order for the pass to support Smart Tap. Only ASCII characters are supported.

        :param smart_tap_redemption_value: The smart_tap_redemption_value of this GenericObject.
        :type smart_tap_redemption_value: str
        """

        self._smart_tap_redemption_value = smart_tap_redemption_value

    @property
    def state(self):
        """Gets the state of this GenericObject.

        The state of the object. This field is used to determine how an object is displayed in the app. For example, an `inactive` object is moved to the \"Expired passes\" section. If this is not provided, the object would be considered `ACTIVE`.

        :return: The state of this GenericObject.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GenericObject.

        The state of the object. This field is used to determine how an object is displayed in the app. For example, an `inactive` object is moved to the \"Expired passes\" section. If this is not provided, the object would be considered `ACTIVE`.

        :param state: The state of this GenericObject.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "active", "COMPLETED", "completed", "EXPIRED", "expired", "INACTIVE", "inactive"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def subheader(self):
        """Gets the subheader of this GenericObject.


        :return: The subheader of this GenericObject.
        :rtype: LocalizedString
        """
        return self._subheader

    @subheader.setter
    def subheader(self, subheader):
        """Sets the subheader of this GenericObject.


        :param subheader: The subheader of this GenericObject.
        :type subheader: LocalizedString
        """

        self._subheader = subheader

    @property
    def text_modules_data(self):
        """Gets the text_modules_data of this GenericObject.

        Text module data. If `textModulesData` is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from class and 10 from object.

        :return: The text_modules_data of this GenericObject.
        :rtype: List[TextModuleData]
        """
        return self._text_modules_data

    @text_modules_data.setter
    def text_modules_data(self, text_modules_data):
        """Sets the text_modules_data of this GenericObject.

        Text module data. If `textModulesData` is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from class and 10 from object.

        :param text_modules_data: The text_modules_data of this GenericObject.
        :type text_modules_data: List[TextModuleData]
        """

        self._text_modules_data = text_modules_data

    @property
    def valid_time_interval(self):
        """Gets the valid_time_interval of this GenericObject.


        :return: The valid_time_interval of this GenericObject.
        :rtype: TimeInterval
        """
        return self._valid_time_interval

    @valid_time_interval.setter
    def valid_time_interval(self, valid_time_interval):
        """Sets the valid_time_interval of this GenericObject.


        :param valid_time_interval: The valid_time_interval of this GenericObject.
        :type valid_time_interval: TimeInterval
        """

        self._valid_time_interval = valid_time_interval

    @property
    def wide_logo(self):
        """Gets the wide_logo of this GenericObject.


        :return: The wide_logo of this GenericObject.
        :rtype: Image
        """
        return self._wide_logo

    @wide_logo.setter
    def wide_logo(self, wide_logo):
        """Sets the wide_logo of this GenericObject.


        :param wide_logo: The wide_logo of this GenericObject.
        :type wide_logo: Image
        """

        self._wide_logo = wide_logo
