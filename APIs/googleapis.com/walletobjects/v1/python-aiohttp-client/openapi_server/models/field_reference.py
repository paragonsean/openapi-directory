# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FieldReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_format: str=None, field_path: str=None):
        """FieldReference - a model defined in OpenAPI

        :param date_format: The date_format of this FieldReference.
        :param field_path: The field_path of this FieldReference.
        """
        self.openapi_types = {
            'date_format': str,
            'field_path': str
        }

        self.attribute_map = {
            'date_format': 'dateFormat',
            'field_path': 'fieldPath'
        }

        self._date_format = date_format
        self._field_path = field_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldReference of this FieldReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_format(self):
        """Gets the date_format of this FieldReference.

        Only valid if the `fieldPath` references a date field. Chooses how the date field will be formatted and displayed in the UI.

        :return: The date_format of this FieldReference.
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this FieldReference.

        Only valid if the `fieldPath` references a date field. Chooses how the date field will be formatted and displayed in the UI.

        :param date_format: The date_format of this FieldReference.
        :type date_format: str
        """
        allowed_values = ["DATE_FORMAT_UNSPECIFIED", "DATE_TIME", "dateTime", "DATE_ONLY", "dateOnly", "TIME_ONLY", "timeOnly", "DATE_TIME_YEAR", "dateTimeYear", "DATE_YEAR", "dateYear", "YEAR_MONTH", "YEAR_MONTH_DAY"]  # noqa: E501
        if date_format not in allowed_values:
            raise ValueError(
                "Invalid value for `date_format` ({0}), must be one of {1}"
                .format(date_format, allowed_values)
            )

        self._date_format = date_format

    @property
    def field_path(self):
        """Gets the field_path of this FieldReference.

        Path to the field being referenced, prefixed with \"object\" or \"class\" and separated with dots. For example, it may be the string \"object.purchaseDetails.purchasePrice\".

        :return: The field_path of this FieldReference.
        :rtype: str
        """
        return self._field_path

    @field_path.setter
    def field_path(self, field_path):
        """Sets the field_path of this FieldReference.

        Path to the field being referenced, prefixed with \"object\" or \"class\" and separated with dots. For example, it may be the string \"object.purchaseDetails.purchasePrice\".

        :param field_path: The field_path of this FieldReference.
        :type field_path: str
        """

        self._field_path = field_path
