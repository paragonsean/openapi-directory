# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.localized_string import LocalizedString
from openapi_server.models.ticket_seat import TicketSeat
from openapi_server import util


class TicketLeg(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arrival_date_time: str=None, carriage: str=None, departure_date_time: str=None, destination_name: LocalizedString=None, destination_station_code: str=None, fare_name: LocalizedString=None, origin_name: LocalizedString=None, origin_station_code: str=None, platform: str=None, ticket_seat: TicketSeat=None, ticket_seats: List[TicketSeat]=None, transit_operator_name: LocalizedString=None, transit_terminus_name: LocalizedString=None, zone: str=None):
        """TicketLeg - a model defined in OpenAPI

        :param arrival_date_time: The arrival_date_time of this TicketLeg.
        :param carriage: The carriage of this TicketLeg.
        :param departure_date_time: The departure_date_time of this TicketLeg.
        :param destination_name: The destination_name of this TicketLeg.
        :param destination_station_code: The destination_station_code of this TicketLeg.
        :param fare_name: The fare_name of this TicketLeg.
        :param origin_name: The origin_name of this TicketLeg.
        :param origin_station_code: The origin_station_code of this TicketLeg.
        :param platform: The platform of this TicketLeg.
        :param ticket_seat: The ticket_seat of this TicketLeg.
        :param ticket_seats: The ticket_seats of this TicketLeg.
        :param transit_operator_name: The transit_operator_name of this TicketLeg.
        :param transit_terminus_name: The transit_terminus_name of this TicketLeg.
        :param zone: The zone of this TicketLeg.
        """
        self.openapi_types = {
            'arrival_date_time': str,
            'carriage': str,
            'departure_date_time': str,
            'destination_name': LocalizedString,
            'destination_station_code': str,
            'fare_name': LocalizedString,
            'origin_name': LocalizedString,
            'origin_station_code': str,
            'platform': str,
            'ticket_seat': TicketSeat,
            'ticket_seats': List[TicketSeat],
            'transit_operator_name': LocalizedString,
            'transit_terminus_name': LocalizedString,
            'zone': str
        }

        self.attribute_map = {
            'arrival_date_time': 'arrivalDateTime',
            'carriage': 'carriage',
            'departure_date_time': 'departureDateTime',
            'destination_name': 'destinationName',
            'destination_station_code': 'destinationStationCode',
            'fare_name': 'fareName',
            'origin_name': 'originName',
            'origin_station_code': 'originStationCode',
            'platform': 'platform',
            'ticket_seat': 'ticketSeat',
            'ticket_seats': 'ticketSeats',
            'transit_operator_name': 'transitOperatorName',
            'transit_terminus_name': 'transitTerminusName',
            'zone': 'zone'
        }

        self._arrival_date_time = arrival_date_time
        self._carriage = carriage
        self._departure_date_time = departure_date_time
        self._destination_name = destination_name
        self._destination_station_code = destination_station_code
        self._fare_name = fare_name
        self._origin_name = origin_name
        self._origin_station_code = origin_station_code
        self._platform = platform
        self._ticket_seat = ticket_seat
        self._ticket_seats = ticket_seats
        self._transit_operator_name = transit_operator_name
        self._transit_terminus_name = transit_terminus_name
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TicketLeg':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TicketLeg of this TicketLeg.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arrival_date_time(self):
        """Gets the arrival_date_time of this TicketLeg.

        The date/time of arrival. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the \"local date/time\". This should be the local date/time at the destination station. For example, if the event occurs at the 20th hour of June 5th, 2018 at the destination station, the local date/time portion should be `2018-06-05T20:00:00`. If the local date/time at the destination station is 4 hours before UTC, an offset of `-04:00` may be appended. Without offset information, some rich features may not be available.

        :return: The arrival_date_time of this TicketLeg.
        :rtype: str
        """
        return self._arrival_date_time

    @arrival_date_time.setter
    def arrival_date_time(self, arrival_date_time):
        """Sets the arrival_date_time of this TicketLeg.

        The date/time of arrival. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the \"local date/time\". This should be the local date/time at the destination station. For example, if the event occurs at the 20th hour of June 5th, 2018 at the destination station, the local date/time portion should be `2018-06-05T20:00:00`. If the local date/time at the destination station is 4 hours before UTC, an offset of `-04:00` may be appended. Without offset information, some rich features may not be available.

        :param arrival_date_time: The arrival_date_time of this TicketLeg.
        :type arrival_date_time: str
        """

        self._arrival_date_time = arrival_date_time

    @property
    def carriage(self):
        """Gets the carriage of this TicketLeg.

        The train or ship name/number that the passsenger needs to board.

        :return: The carriage of this TicketLeg.
        :rtype: str
        """
        return self._carriage

    @carriage.setter
    def carriage(self, carriage):
        """Sets the carriage of this TicketLeg.

        The train or ship name/number that the passsenger needs to board.

        :param carriage: The carriage of this TicketLeg.
        :type carriage: str
        """

        self._carriage = carriage

    @property
    def departure_date_time(self):
        """Gets the departure_date_time of this TicketLeg.

        The date/time of departure. This is required if there is no validity time interval set on the transit object. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the \"local date/time\". This should be the local date/time at the origin station. For example, if the departure occurs at the 20th hour of June 5th, 2018 at the origin station, the local date/time portion should be `2018-06-05T20:00:00`. If the local date/time at the origin station is 4 hours before UTC, an offset of `-04:00` may be appended. Without offset information, some rich features may not be available.

        :return: The departure_date_time of this TicketLeg.
        :rtype: str
        """
        return self._departure_date_time

    @departure_date_time.setter
    def departure_date_time(self, departure_date_time):
        """Sets the departure_date_time of this TicketLeg.

        The date/time of departure. This is required if there is no validity time interval set on the transit object. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the \"local date/time\". This should be the local date/time at the origin station. For example, if the departure occurs at the 20th hour of June 5th, 2018 at the origin station, the local date/time portion should be `2018-06-05T20:00:00`. If the local date/time at the origin station is 4 hours before UTC, an offset of `-04:00` may be appended. Without offset information, some rich features may not be available.

        :param departure_date_time: The departure_date_time of this TicketLeg.
        :type departure_date_time: str
        """

        self._departure_date_time = departure_date_time

    @property
    def destination_name(self):
        """Gets the destination_name of this TicketLeg.


        :return: The destination_name of this TicketLeg.
        :rtype: LocalizedString
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this TicketLeg.


        :param destination_name: The destination_name of this TicketLeg.
        :type destination_name: LocalizedString
        """

        self._destination_name = destination_name

    @property
    def destination_station_code(self):
        """Gets the destination_station_code of this TicketLeg.

        The destination station code.

        :return: The destination_station_code of this TicketLeg.
        :rtype: str
        """
        return self._destination_station_code

    @destination_station_code.setter
    def destination_station_code(self, destination_station_code):
        """Sets the destination_station_code of this TicketLeg.

        The destination station code.

        :param destination_station_code: The destination_station_code of this TicketLeg.
        :type destination_station_code: str
        """

        self._destination_station_code = destination_station_code

    @property
    def fare_name(self):
        """Gets the fare_name of this TicketLeg.


        :return: The fare_name of this TicketLeg.
        :rtype: LocalizedString
        """
        return self._fare_name

    @fare_name.setter
    def fare_name(self, fare_name):
        """Sets the fare_name of this TicketLeg.


        :param fare_name: The fare_name of this TicketLeg.
        :type fare_name: LocalizedString
        """

        self._fare_name = fare_name

    @property
    def origin_name(self):
        """Gets the origin_name of this TicketLeg.


        :return: The origin_name of this TicketLeg.
        :rtype: LocalizedString
        """
        return self._origin_name

    @origin_name.setter
    def origin_name(self, origin_name):
        """Sets the origin_name of this TicketLeg.


        :param origin_name: The origin_name of this TicketLeg.
        :type origin_name: LocalizedString
        """

        self._origin_name = origin_name

    @property
    def origin_station_code(self):
        """Gets the origin_station_code of this TicketLeg.

        The origin station code. This is required if `destinationStationCode` is present or if `originName` is not present.

        :return: The origin_station_code of this TicketLeg.
        :rtype: str
        """
        return self._origin_station_code

    @origin_station_code.setter
    def origin_station_code(self, origin_station_code):
        """Sets the origin_station_code of this TicketLeg.

        The origin station code. This is required if `destinationStationCode` is present or if `originName` is not present.

        :param origin_station_code: The origin_station_code of this TicketLeg.
        :type origin_station_code: str
        """

        self._origin_station_code = origin_station_code

    @property
    def platform(self):
        """Gets the platform of this TicketLeg.

        The platform or gate where the passenger can board the carriage.

        :return: The platform of this TicketLeg.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this TicketLeg.

        The platform or gate where the passenger can board the carriage.

        :param platform: The platform of this TicketLeg.
        :type platform: str
        """

        self._platform = platform

    @property
    def ticket_seat(self):
        """Gets the ticket_seat of this TicketLeg.


        :return: The ticket_seat of this TicketLeg.
        :rtype: TicketSeat
        """
        return self._ticket_seat

    @ticket_seat.setter
    def ticket_seat(self, ticket_seat):
        """Sets the ticket_seat of this TicketLeg.


        :param ticket_seat: The ticket_seat of this TicketLeg.
        :type ticket_seat: TicketSeat
        """

        self._ticket_seat = ticket_seat

    @property
    def ticket_seats(self):
        """Gets the ticket_seats of this TicketLeg.

        The reserved seat for the passenger(s). If only one seat is to be specified then use the `ticketSeat` field instead. Both `ticketSeat` and `ticketSeats` may not be set.

        :return: The ticket_seats of this TicketLeg.
        :rtype: List[TicketSeat]
        """
        return self._ticket_seats

    @ticket_seats.setter
    def ticket_seats(self, ticket_seats):
        """Sets the ticket_seats of this TicketLeg.

        The reserved seat for the passenger(s). If only one seat is to be specified then use the `ticketSeat` field instead. Both `ticketSeat` and `ticketSeats` may not be set.

        :param ticket_seats: The ticket_seats of this TicketLeg.
        :type ticket_seats: List[TicketSeat]
        """

        self._ticket_seats = ticket_seats

    @property
    def transit_operator_name(self):
        """Gets the transit_operator_name of this TicketLeg.


        :return: The transit_operator_name of this TicketLeg.
        :rtype: LocalizedString
        """
        return self._transit_operator_name

    @transit_operator_name.setter
    def transit_operator_name(self, transit_operator_name):
        """Sets the transit_operator_name of this TicketLeg.


        :param transit_operator_name: The transit_operator_name of this TicketLeg.
        :type transit_operator_name: LocalizedString
        """

        self._transit_operator_name = transit_operator_name

    @property
    def transit_terminus_name(self):
        """Gets the transit_terminus_name of this TicketLeg.


        :return: The transit_terminus_name of this TicketLeg.
        :rtype: LocalizedString
        """
        return self._transit_terminus_name

    @transit_terminus_name.setter
    def transit_terminus_name(self, transit_terminus_name):
        """Sets the transit_terminus_name of this TicketLeg.


        :param transit_terminus_name: The transit_terminus_name of this TicketLeg.
        :type transit_terminus_name: LocalizedString
        """

        self._transit_terminus_name = transit_terminus_name

    @property
    def zone(self):
        """Gets the zone of this TicketLeg.

        The zone of boarding within the platform.

        :return: The zone of this TicketLeg.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this TicketLeg.

        The zone of boarding within the platform.

        :param zone: The zone of this TicketLeg.
        :type zone: str
        """

        self._zone = zone
