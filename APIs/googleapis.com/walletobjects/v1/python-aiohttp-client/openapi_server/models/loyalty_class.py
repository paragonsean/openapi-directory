# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.callback_options import CallbackOptions
from openapi_server.models.class_template_info import ClassTemplateInfo
from openapi_server.models.discoverable_program import DiscoverableProgram
from openapi_server.models.image import Image
from openapi_server.models.image_module_data import ImageModuleData
from openapi_server.models.info_module_data import InfoModuleData
from openapi_server.models.lat_long_point import LatLongPoint
from openapi_server.models.links_module_data import LinksModuleData
from openapi_server.models.localized_string import LocalizedString
from openapi_server.models.message import Message
from openapi_server.models.review import Review
from openapi_server.models.security_animation import SecurityAnimation
from openapi_server.models.text_module_data import TextModuleData
from openapi_server.models.uri import Uri
from openapi_server import util


class LoyaltyClass(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id_label: str=None, account_name_label: str=None, allow_multiple_users_per_object: bool=None, callback_options: CallbackOptions=None, class_template_info: ClassTemplateInfo=None, country_code: str=None, discoverable_program: DiscoverableProgram=None, enable_smart_tap: bool=None, hero_image: Image=None, hex_background_color: str=None, homepage_uri: Uri=None, id: str=None, image_modules_data: List[ImageModuleData]=None, info_module_data: InfoModuleData=None, issuer_name: str=None, kind: str=None, links_module_data: LinksModuleData=None, localized_account_id_label: LocalizedString=None, localized_account_name_label: LocalizedString=None, localized_issuer_name: LocalizedString=None, localized_program_name: LocalizedString=None, localized_rewards_tier: LocalizedString=None, localized_rewards_tier_label: LocalizedString=None, localized_secondary_rewards_tier: LocalizedString=None, localized_secondary_rewards_tier_label: LocalizedString=None, locations: List[LatLongPoint]=None, messages: List[Message]=None, multiple_devices_and_holders_allowed_status: str=None, program_logo: Image=None, program_name: str=None, redemption_issuers: List[str]=None, review: Review=None, review_status: str=None, rewards_tier: str=None, rewards_tier_label: str=None, secondary_rewards_tier: str=None, secondary_rewards_tier_label: str=None, security_animation: SecurityAnimation=None, text_modules_data: List[TextModuleData]=None, version: str=None, view_unlock_requirement: str=None, wide_program_logo: Image=None, word_mark: Image=None):
        """LoyaltyClass - a model defined in OpenAPI

        :param account_id_label: The account_id_label of this LoyaltyClass.
        :param account_name_label: The account_name_label of this LoyaltyClass.
        :param allow_multiple_users_per_object: The allow_multiple_users_per_object of this LoyaltyClass.
        :param callback_options: The callback_options of this LoyaltyClass.
        :param class_template_info: The class_template_info of this LoyaltyClass.
        :param country_code: The country_code of this LoyaltyClass.
        :param discoverable_program: The discoverable_program of this LoyaltyClass.
        :param enable_smart_tap: The enable_smart_tap of this LoyaltyClass.
        :param hero_image: The hero_image of this LoyaltyClass.
        :param hex_background_color: The hex_background_color of this LoyaltyClass.
        :param homepage_uri: The homepage_uri of this LoyaltyClass.
        :param id: The id of this LoyaltyClass.
        :param image_modules_data: The image_modules_data of this LoyaltyClass.
        :param info_module_data: The info_module_data of this LoyaltyClass.
        :param issuer_name: The issuer_name of this LoyaltyClass.
        :param kind: The kind of this LoyaltyClass.
        :param links_module_data: The links_module_data of this LoyaltyClass.
        :param localized_account_id_label: The localized_account_id_label of this LoyaltyClass.
        :param localized_account_name_label: The localized_account_name_label of this LoyaltyClass.
        :param localized_issuer_name: The localized_issuer_name of this LoyaltyClass.
        :param localized_program_name: The localized_program_name of this LoyaltyClass.
        :param localized_rewards_tier: The localized_rewards_tier of this LoyaltyClass.
        :param localized_rewards_tier_label: The localized_rewards_tier_label of this LoyaltyClass.
        :param localized_secondary_rewards_tier: The localized_secondary_rewards_tier of this LoyaltyClass.
        :param localized_secondary_rewards_tier_label: The localized_secondary_rewards_tier_label of this LoyaltyClass.
        :param locations: The locations of this LoyaltyClass.
        :param messages: The messages of this LoyaltyClass.
        :param multiple_devices_and_holders_allowed_status: The multiple_devices_and_holders_allowed_status of this LoyaltyClass.
        :param program_logo: The program_logo of this LoyaltyClass.
        :param program_name: The program_name of this LoyaltyClass.
        :param redemption_issuers: The redemption_issuers of this LoyaltyClass.
        :param review: The review of this LoyaltyClass.
        :param review_status: The review_status of this LoyaltyClass.
        :param rewards_tier: The rewards_tier of this LoyaltyClass.
        :param rewards_tier_label: The rewards_tier_label of this LoyaltyClass.
        :param secondary_rewards_tier: The secondary_rewards_tier of this LoyaltyClass.
        :param secondary_rewards_tier_label: The secondary_rewards_tier_label of this LoyaltyClass.
        :param security_animation: The security_animation of this LoyaltyClass.
        :param text_modules_data: The text_modules_data of this LoyaltyClass.
        :param version: The version of this LoyaltyClass.
        :param view_unlock_requirement: The view_unlock_requirement of this LoyaltyClass.
        :param wide_program_logo: The wide_program_logo of this LoyaltyClass.
        :param word_mark: The word_mark of this LoyaltyClass.
        """
        self.openapi_types = {
            'account_id_label': str,
            'account_name_label': str,
            'allow_multiple_users_per_object': bool,
            'callback_options': CallbackOptions,
            'class_template_info': ClassTemplateInfo,
            'country_code': str,
            'discoverable_program': DiscoverableProgram,
            'enable_smart_tap': bool,
            'hero_image': Image,
            'hex_background_color': str,
            'homepage_uri': Uri,
            'id': str,
            'image_modules_data': List[ImageModuleData],
            'info_module_data': InfoModuleData,
            'issuer_name': str,
            'kind': str,
            'links_module_data': LinksModuleData,
            'localized_account_id_label': LocalizedString,
            'localized_account_name_label': LocalizedString,
            'localized_issuer_name': LocalizedString,
            'localized_program_name': LocalizedString,
            'localized_rewards_tier': LocalizedString,
            'localized_rewards_tier_label': LocalizedString,
            'localized_secondary_rewards_tier': LocalizedString,
            'localized_secondary_rewards_tier_label': LocalizedString,
            'locations': List[LatLongPoint],
            'messages': List[Message],
            'multiple_devices_and_holders_allowed_status': str,
            'program_logo': Image,
            'program_name': str,
            'redemption_issuers': List[str],
            'review': Review,
            'review_status': str,
            'rewards_tier': str,
            'rewards_tier_label': str,
            'secondary_rewards_tier': str,
            'secondary_rewards_tier_label': str,
            'security_animation': SecurityAnimation,
            'text_modules_data': List[TextModuleData],
            'version': str,
            'view_unlock_requirement': str,
            'wide_program_logo': Image,
            'word_mark': Image
        }

        self.attribute_map = {
            'account_id_label': 'accountIdLabel',
            'account_name_label': 'accountNameLabel',
            'allow_multiple_users_per_object': 'allowMultipleUsersPerObject',
            'callback_options': 'callbackOptions',
            'class_template_info': 'classTemplateInfo',
            'country_code': 'countryCode',
            'discoverable_program': 'discoverableProgram',
            'enable_smart_tap': 'enableSmartTap',
            'hero_image': 'heroImage',
            'hex_background_color': 'hexBackgroundColor',
            'homepage_uri': 'homepageUri',
            'id': 'id',
            'image_modules_data': 'imageModulesData',
            'info_module_data': 'infoModuleData',
            'issuer_name': 'issuerName',
            'kind': 'kind',
            'links_module_data': 'linksModuleData',
            'localized_account_id_label': 'localizedAccountIdLabel',
            'localized_account_name_label': 'localizedAccountNameLabel',
            'localized_issuer_name': 'localizedIssuerName',
            'localized_program_name': 'localizedProgramName',
            'localized_rewards_tier': 'localizedRewardsTier',
            'localized_rewards_tier_label': 'localizedRewardsTierLabel',
            'localized_secondary_rewards_tier': 'localizedSecondaryRewardsTier',
            'localized_secondary_rewards_tier_label': 'localizedSecondaryRewardsTierLabel',
            'locations': 'locations',
            'messages': 'messages',
            'multiple_devices_and_holders_allowed_status': 'multipleDevicesAndHoldersAllowedStatus',
            'program_logo': 'programLogo',
            'program_name': 'programName',
            'redemption_issuers': 'redemptionIssuers',
            'review': 'review',
            'review_status': 'reviewStatus',
            'rewards_tier': 'rewardsTier',
            'rewards_tier_label': 'rewardsTierLabel',
            'secondary_rewards_tier': 'secondaryRewardsTier',
            'secondary_rewards_tier_label': 'secondaryRewardsTierLabel',
            'security_animation': 'securityAnimation',
            'text_modules_data': 'textModulesData',
            'version': 'version',
            'view_unlock_requirement': 'viewUnlockRequirement',
            'wide_program_logo': 'wideProgramLogo',
            'word_mark': 'wordMark'
        }

        self._account_id_label = account_id_label
        self._account_name_label = account_name_label
        self._allow_multiple_users_per_object = allow_multiple_users_per_object
        self._callback_options = callback_options
        self._class_template_info = class_template_info
        self._country_code = country_code
        self._discoverable_program = discoverable_program
        self._enable_smart_tap = enable_smart_tap
        self._hero_image = hero_image
        self._hex_background_color = hex_background_color
        self._homepage_uri = homepage_uri
        self._id = id
        self._image_modules_data = image_modules_data
        self._info_module_data = info_module_data
        self._issuer_name = issuer_name
        self._kind = kind
        self._links_module_data = links_module_data
        self._localized_account_id_label = localized_account_id_label
        self._localized_account_name_label = localized_account_name_label
        self._localized_issuer_name = localized_issuer_name
        self._localized_program_name = localized_program_name
        self._localized_rewards_tier = localized_rewards_tier
        self._localized_rewards_tier_label = localized_rewards_tier_label
        self._localized_secondary_rewards_tier = localized_secondary_rewards_tier
        self._localized_secondary_rewards_tier_label = localized_secondary_rewards_tier_label
        self._locations = locations
        self._messages = messages
        self._multiple_devices_and_holders_allowed_status = multiple_devices_and_holders_allowed_status
        self._program_logo = program_logo
        self._program_name = program_name
        self._redemption_issuers = redemption_issuers
        self._review = review
        self._review_status = review_status
        self._rewards_tier = rewards_tier
        self._rewards_tier_label = rewards_tier_label
        self._secondary_rewards_tier = secondary_rewards_tier
        self._secondary_rewards_tier_label = secondary_rewards_tier_label
        self._security_animation = security_animation
        self._text_modules_data = text_modules_data
        self._version = version
        self._view_unlock_requirement = view_unlock_requirement
        self._wide_program_logo = wide_program_logo
        self._word_mark = word_mark

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyClass of this LoyaltyClass.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id_label(self):
        """Gets the account_id_label of this LoyaltyClass.

        The account ID label, such as \"Member ID.\" Recommended maximum length is 15 characters to ensure full string is displayed on smaller screens.

        :return: The account_id_label of this LoyaltyClass.
        :rtype: str
        """
        return self._account_id_label

    @account_id_label.setter
    def account_id_label(self, account_id_label):
        """Sets the account_id_label of this LoyaltyClass.

        The account ID label, such as \"Member ID.\" Recommended maximum length is 15 characters to ensure full string is displayed on smaller screens.

        :param account_id_label: The account_id_label of this LoyaltyClass.
        :type account_id_label: str
        """

        self._account_id_label = account_id_label

    @property
    def account_name_label(self):
        """Gets the account_name_label of this LoyaltyClass.

        The account name label, such as \"Member Name.\" Recommended maximum length is 15 characters to ensure full string is displayed on smaller screens.

        :return: The account_name_label of this LoyaltyClass.
        :rtype: str
        """
        return self._account_name_label

    @account_name_label.setter
    def account_name_label(self, account_name_label):
        """Sets the account_name_label of this LoyaltyClass.

        The account name label, such as \"Member Name.\" Recommended maximum length is 15 characters to ensure full string is displayed on smaller screens.

        :param account_name_label: The account_name_label of this LoyaltyClass.
        :type account_name_label: str
        """

        self._account_name_label = account_name_label

    @property
    def allow_multiple_users_per_object(self):
        """Gets the allow_multiple_users_per_object of this LoyaltyClass.

        Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.

        :return: The allow_multiple_users_per_object of this LoyaltyClass.
        :rtype: bool
        """
        return self._allow_multiple_users_per_object

    @allow_multiple_users_per_object.setter
    def allow_multiple_users_per_object(self, allow_multiple_users_per_object):
        """Sets the allow_multiple_users_per_object of this LoyaltyClass.

        Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.

        :param allow_multiple_users_per_object: The allow_multiple_users_per_object of this LoyaltyClass.
        :type allow_multiple_users_per_object: bool
        """

        self._allow_multiple_users_per_object = allow_multiple_users_per_object

    @property
    def callback_options(self):
        """Gets the callback_options of this LoyaltyClass.


        :return: The callback_options of this LoyaltyClass.
        :rtype: CallbackOptions
        """
        return self._callback_options

    @callback_options.setter
    def callback_options(self, callback_options):
        """Sets the callback_options of this LoyaltyClass.


        :param callback_options: The callback_options of this LoyaltyClass.
        :type callback_options: CallbackOptions
        """

        self._callback_options = callback_options

    @property
    def class_template_info(self):
        """Gets the class_template_info of this LoyaltyClass.


        :return: The class_template_info of this LoyaltyClass.
        :rtype: ClassTemplateInfo
        """
        return self._class_template_info

    @class_template_info.setter
    def class_template_info(self, class_template_info):
        """Sets the class_template_info of this LoyaltyClass.


        :param class_template_info: The class_template_info of this LoyaltyClass.
        :type class_template_info: ClassTemplateInfo
        """

        self._class_template_info = class_template_info

    @property
    def country_code(self):
        """Gets the country_code of this LoyaltyClass.

        Country code used to display the card's country (when the user is not in that country), as well as to display localized content when content is not available in the user's locale.

        :return: The country_code of this LoyaltyClass.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this LoyaltyClass.

        Country code used to display the card's country (when the user is not in that country), as well as to display localized content when content is not available in the user's locale.

        :param country_code: The country_code of this LoyaltyClass.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def discoverable_program(self):
        """Gets the discoverable_program of this LoyaltyClass.


        :return: The discoverable_program of this LoyaltyClass.
        :rtype: DiscoverableProgram
        """
        return self._discoverable_program

    @discoverable_program.setter
    def discoverable_program(self, discoverable_program):
        """Sets the discoverable_program of this LoyaltyClass.


        :param discoverable_program: The discoverable_program of this LoyaltyClass.
        :type discoverable_program: DiscoverableProgram
        """

        self._discoverable_program = discoverable_program

    @property
    def enable_smart_tap(self):
        """Gets the enable_smart_tap of this LoyaltyClass.

        Identifies whether this class supports Smart Tap. The `redemptionIssuers` and one of object level `smartTapRedemptionLevel`, barcode.value`, or `accountId` fields must also be set up correctly in order for a pass to support Smart Tap.

        :return: The enable_smart_tap of this LoyaltyClass.
        :rtype: bool
        """
        return self._enable_smart_tap

    @enable_smart_tap.setter
    def enable_smart_tap(self, enable_smart_tap):
        """Sets the enable_smart_tap of this LoyaltyClass.

        Identifies whether this class supports Smart Tap. The `redemptionIssuers` and one of object level `smartTapRedemptionLevel`, barcode.value`, or `accountId` fields must also be set up correctly in order for a pass to support Smart Tap.

        :param enable_smart_tap: The enable_smart_tap of this LoyaltyClass.
        :type enable_smart_tap: bool
        """

        self._enable_smart_tap = enable_smart_tap

    @property
    def hero_image(self):
        """Gets the hero_image of this LoyaltyClass.


        :return: The hero_image of this LoyaltyClass.
        :rtype: Image
        """
        return self._hero_image

    @hero_image.setter
    def hero_image(self, hero_image):
        """Sets the hero_image of this LoyaltyClass.


        :param hero_image: The hero_image of this LoyaltyClass.
        :type hero_image: Image
        """

        self._hero_image = hero_image

    @property
    def hex_background_color(self):
        """Gets the hex_background_color of this LoyaltyClass.

        The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.

        :return: The hex_background_color of this LoyaltyClass.
        :rtype: str
        """
        return self._hex_background_color

    @hex_background_color.setter
    def hex_background_color(self, hex_background_color):
        """Sets the hex_background_color of this LoyaltyClass.

        The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.

        :param hex_background_color: The hex_background_color of this LoyaltyClass.
        :type hex_background_color: str
        """

        self._hex_background_color = hex_background_color

    @property
    def homepage_uri(self):
        """Gets the homepage_uri of this LoyaltyClass.


        :return: The homepage_uri of this LoyaltyClass.
        :rtype: Uri
        """
        return self._homepage_uri

    @homepage_uri.setter
    def homepage_uri(self, homepage_uri):
        """Sets the homepage_uri of this LoyaltyClass.


        :param homepage_uri: The homepage_uri of this LoyaltyClass.
        :type homepage_uri: Uri
        """

        self._homepage_uri = homepage_uri

    @property
    def id(self):
        """Gets the id of this LoyaltyClass.

        Required. The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.

        :return: The id of this LoyaltyClass.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoyaltyClass.

        Required. The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.

        :param id: The id of this LoyaltyClass.
        :type id: str
        """

        self._id = id

    @property
    def image_modules_data(self):
        """Gets the image_modules_data of this LoyaltyClass.

        Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.

        :return: The image_modules_data of this LoyaltyClass.
        :rtype: List[ImageModuleData]
        """
        return self._image_modules_data

    @image_modules_data.setter
    def image_modules_data(self, image_modules_data):
        """Sets the image_modules_data of this LoyaltyClass.

        Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.

        :param image_modules_data: The image_modules_data of this LoyaltyClass.
        :type image_modules_data: List[ImageModuleData]
        """

        self._image_modules_data = image_modules_data

    @property
    def info_module_data(self):
        """Gets the info_module_data of this LoyaltyClass.


        :return: The info_module_data of this LoyaltyClass.
        :rtype: InfoModuleData
        """
        return self._info_module_data

    @info_module_data.setter
    def info_module_data(self, info_module_data):
        """Sets the info_module_data of this LoyaltyClass.


        :param info_module_data: The info_module_data of this LoyaltyClass.
        :type info_module_data: InfoModuleData
        """

        self._info_module_data = info_module_data

    @property
    def issuer_name(self):
        """Gets the issuer_name of this LoyaltyClass.

        Required. The issuer name. Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.

        :return: The issuer_name of this LoyaltyClass.
        :rtype: str
        """
        return self._issuer_name

    @issuer_name.setter
    def issuer_name(self, issuer_name):
        """Sets the issuer_name of this LoyaltyClass.

        Required. The issuer name. Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.

        :param issuer_name: The issuer_name of this LoyaltyClass.
        :type issuer_name: str
        """

        self._issuer_name = issuer_name

    @property
    def kind(self):
        """Gets the kind of this LoyaltyClass.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#loyaltyClass\"`.

        :return: The kind of this LoyaltyClass.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this LoyaltyClass.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#loyaltyClass\"`.

        :param kind: The kind of this LoyaltyClass.
        :type kind: str
        """

        self._kind = kind

    @property
    def links_module_data(self):
        """Gets the links_module_data of this LoyaltyClass.


        :return: The links_module_data of this LoyaltyClass.
        :rtype: LinksModuleData
        """
        return self._links_module_data

    @links_module_data.setter
    def links_module_data(self, links_module_data):
        """Sets the links_module_data of this LoyaltyClass.


        :param links_module_data: The links_module_data of this LoyaltyClass.
        :type links_module_data: LinksModuleData
        """

        self._links_module_data = links_module_data

    @property
    def localized_account_id_label(self):
        """Gets the localized_account_id_label of this LoyaltyClass.


        :return: The localized_account_id_label of this LoyaltyClass.
        :rtype: LocalizedString
        """
        return self._localized_account_id_label

    @localized_account_id_label.setter
    def localized_account_id_label(self, localized_account_id_label):
        """Sets the localized_account_id_label of this LoyaltyClass.


        :param localized_account_id_label: The localized_account_id_label of this LoyaltyClass.
        :type localized_account_id_label: LocalizedString
        """

        self._localized_account_id_label = localized_account_id_label

    @property
    def localized_account_name_label(self):
        """Gets the localized_account_name_label of this LoyaltyClass.


        :return: The localized_account_name_label of this LoyaltyClass.
        :rtype: LocalizedString
        """
        return self._localized_account_name_label

    @localized_account_name_label.setter
    def localized_account_name_label(self, localized_account_name_label):
        """Sets the localized_account_name_label of this LoyaltyClass.


        :param localized_account_name_label: The localized_account_name_label of this LoyaltyClass.
        :type localized_account_name_label: LocalizedString
        """

        self._localized_account_name_label = localized_account_name_label

    @property
    def localized_issuer_name(self):
        """Gets the localized_issuer_name of this LoyaltyClass.


        :return: The localized_issuer_name of this LoyaltyClass.
        :rtype: LocalizedString
        """
        return self._localized_issuer_name

    @localized_issuer_name.setter
    def localized_issuer_name(self, localized_issuer_name):
        """Sets the localized_issuer_name of this LoyaltyClass.


        :param localized_issuer_name: The localized_issuer_name of this LoyaltyClass.
        :type localized_issuer_name: LocalizedString
        """

        self._localized_issuer_name = localized_issuer_name

    @property
    def localized_program_name(self):
        """Gets the localized_program_name of this LoyaltyClass.


        :return: The localized_program_name of this LoyaltyClass.
        :rtype: LocalizedString
        """
        return self._localized_program_name

    @localized_program_name.setter
    def localized_program_name(self, localized_program_name):
        """Sets the localized_program_name of this LoyaltyClass.


        :param localized_program_name: The localized_program_name of this LoyaltyClass.
        :type localized_program_name: LocalizedString
        """

        self._localized_program_name = localized_program_name

    @property
    def localized_rewards_tier(self):
        """Gets the localized_rewards_tier of this LoyaltyClass.


        :return: The localized_rewards_tier of this LoyaltyClass.
        :rtype: LocalizedString
        """
        return self._localized_rewards_tier

    @localized_rewards_tier.setter
    def localized_rewards_tier(self, localized_rewards_tier):
        """Sets the localized_rewards_tier of this LoyaltyClass.


        :param localized_rewards_tier: The localized_rewards_tier of this LoyaltyClass.
        :type localized_rewards_tier: LocalizedString
        """

        self._localized_rewards_tier = localized_rewards_tier

    @property
    def localized_rewards_tier_label(self):
        """Gets the localized_rewards_tier_label of this LoyaltyClass.


        :return: The localized_rewards_tier_label of this LoyaltyClass.
        :rtype: LocalizedString
        """
        return self._localized_rewards_tier_label

    @localized_rewards_tier_label.setter
    def localized_rewards_tier_label(self, localized_rewards_tier_label):
        """Sets the localized_rewards_tier_label of this LoyaltyClass.


        :param localized_rewards_tier_label: The localized_rewards_tier_label of this LoyaltyClass.
        :type localized_rewards_tier_label: LocalizedString
        """

        self._localized_rewards_tier_label = localized_rewards_tier_label

    @property
    def localized_secondary_rewards_tier(self):
        """Gets the localized_secondary_rewards_tier of this LoyaltyClass.


        :return: The localized_secondary_rewards_tier of this LoyaltyClass.
        :rtype: LocalizedString
        """
        return self._localized_secondary_rewards_tier

    @localized_secondary_rewards_tier.setter
    def localized_secondary_rewards_tier(self, localized_secondary_rewards_tier):
        """Sets the localized_secondary_rewards_tier of this LoyaltyClass.


        :param localized_secondary_rewards_tier: The localized_secondary_rewards_tier of this LoyaltyClass.
        :type localized_secondary_rewards_tier: LocalizedString
        """

        self._localized_secondary_rewards_tier = localized_secondary_rewards_tier

    @property
    def localized_secondary_rewards_tier_label(self):
        """Gets the localized_secondary_rewards_tier_label of this LoyaltyClass.


        :return: The localized_secondary_rewards_tier_label of this LoyaltyClass.
        :rtype: LocalizedString
        """
        return self._localized_secondary_rewards_tier_label

    @localized_secondary_rewards_tier_label.setter
    def localized_secondary_rewards_tier_label(self, localized_secondary_rewards_tier_label):
        """Sets the localized_secondary_rewards_tier_label of this LoyaltyClass.


        :param localized_secondary_rewards_tier_label: The localized_secondary_rewards_tier_label of this LoyaltyClass.
        :type localized_secondary_rewards_tier_label: LocalizedString
        """

        self._localized_secondary_rewards_tier_label = localized_secondary_rewards_tier_label

    @property
    def locations(self):
        """Gets the locations of this LoyaltyClass.

        Note: This field is currently not supported to trigger geo notifications.

        :return: The locations of this LoyaltyClass.
        :rtype: List[LatLongPoint]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this LoyaltyClass.

        Note: This field is currently not supported to trigger geo notifications.

        :param locations: The locations of this LoyaltyClass.
        :type locations: List[LatLongPoint]
        """

        self._locations = locations

    @property
    def messages(self):
        """Gets the messages of this LoyaltyClass.

        An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.

        :return: The messages of this LoyaltyClass.
        :rtype: List[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this LoyaltyClass.

        An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.

        :param messages: The messages of this LoyaltyClass.
        :type messages: List[Message]
        """

        self._messages = messages

    @property
    def multiple_devices_and_holders_allowed_status(self):
        """Gets the multiple_devices_and_holders_allowed_status of this LoyaltyClass.

        Identifies whether multiple users and devices will save the same object referencing this class.

        :return: The multiple_devices_and_holders_allowed_status of this LoyaltyClass.
        :rtype: str
        """
        return self._multiple_devices_and_holders_allowed_status

    @multiple_devices_and_holders_allowed_status.setter
    def multiple_devices_and_holders_allowed_status(self, multiple_devices_and_holders_allowed_status):
        """Sets the multiple_devices_and_holders_allowed_status of this LoyaltyClass.

        Identifies whether multiple users and devices will save the same object referencing this class.

        :param multiple_devices_and_holders_allowed_status: The multiple_devices_and_holders_allowed_status of this LoyaltyClass.
        :type multiple_devices_and_holders_allowed_status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "MULTIPLE_HOLDERS", "ONE_USER_ALL_DEVICES", "ONE_USER_ONE_DEVICE", "multipleHolders", "oneUserAllDevices", "oneUserOneDevice"]  # noqa: E501
        if multiple_devices_and_holders_allowed_status not in allowed_values:
            raise ValueError(
                "Invalid value for `multiple_devices_and_holders_allowed_status` ({0}), must be one of {1}"
                .format(multiple_devices_and_holders_allowed_status, allowed_values)
            )

        self._multiple_devices_and_holders_allowed_status = multiple_devices_and_holders_allowed_status

    @property
    def program_logo(self):
        """Gets the program_logo of this LoyaltyClass.


        :return: The program_logo of this LoyaltyClass.
        :rtype: Image
        """
        return self._program_logo

    @program_logo.setter
    def program_logo(self, program_logo):
        """Sets the program_logo of this LoyaltyClass.


        :param program_logo: The program_logo of this LoyaltyClass.
        :type program_logo: Image
        """

        self._program_logo = program_logo

    @property
    def program_name(self):
        """Gets the program_name of this LoyaltyClass.

        Required. The program name, such as \"Adam's Apparel\". The app may display an ellipsis after the first 20 characters to ensure full string is displayed on smaller screens.

        :return: The program_name of this LoyaltyClass.
        :rtype: str
        """
        return self._program_name

    @program_name.setter
    def program_name(self, program_name):
        """Sets the program_name of this LoyaltyClass.

        Required. The program name, such as \"Adam's Apparel\". The app may display an ellipsis after the first 20 characters to ensure full string is displayed on smaller screens.

        :param program_name: The program_name of this LoyaltyClass.
        :type program_name: str
        """

        self._program_name = program_name

    @property
    def redemption_issuers(self):
        """Gets the redemption_issuers of this LoyaltyClass.

        Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The `enableSmartTap` and one of object level `smartTapRedemptionValue`, barcode.value`, or `accountId` fields must also be set up correctly in order for a pass to support Smart Tap.

        :return: The redemption_issuers of this LoyaltyClass.
        :rtype: List[str]
        """
        return self._redemption_issuers

    @redemption_issuers.setter
    def redemption_issuers(self, redemption_issuers):
        """Sets the redemption_issuers of this LoyaltyClass.

        Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The `enableSmartTap` and one of object level `smartTapRedemptionValue`, barcode.value`, or `accountId` fields must also be set up correctly in order for a pass to support Smart Tap.

        :param redemption_issuers: The redemption_issuers of this LoyaltyClass.
        :type redemption_issuers: List[str]
        """

        self._redemption_issuers = redemption_issuers

    @property
    def review(self):
        """Gets the review of this LoyaltyClass.


        :return: The review of this LoyaltyClass.
        :rtype: Review
        """
        return self._review

    @review.setter
    def review(self, review):
        """Sets the review of this LoyaltyClass.


        :param review: The review of this LoyaltyClass.
        :type review: Review
        """

        self._review = review

    @property
    def review_status(self):
        """Gets the review_status of this LoyaltyClass.

        Required. The status of the class. This field can be set to `draft` or `underReview` using the insert, patch, or update API calls. Once the review state is changed from `draft` it may not be changed back to `draft`. You should keep this field to `draft` when the class is under development. A `draft` class cannot be used to create any object. You should set this field to `underReview` when you believe the class is ready for use. The platform will automatically set this field to `approved` and it can be immediately used to create or migrate objects. When updating an already `approved` class you should keep setting this field to `underReview`.

        :return: The review_status of this LoyaltyClass.
        :rtype: str
        """
        return self._review_status

    @review_status.setter
    def review_status(self, review_status):
        """Sets the review_status of this LoyaltyClass.

        Required. The status of the class. This field can be set to `draft` or `underReview` using the insert, patch, or update API calls. Once the review state is changed from `draft` it may not be changed back to `draft`. You should keep this field to `draft` when the class is under development. A `draft` class cannot be used to create any object. You should set this field to `underReview` when you believe the class is ready for use. The platform will automatically set this field to `approved` and it can be immediately used to create or migrate objects. When updating an already `approved` class you should keep setting this field to `underReview`.

        :param review_status: The review_status of this LoyaltyClass.
        :type review_status: str
        """
        allowed_values = ["REVIEW_STATUS_UNSPECIFIED", "UNDER_REVIEW", "underReview", "APPROVED", "approved", "REJECTED", "rejected", "DRAFT", "draft"]  # noqa: E501
        if review_status not in allowed_values:
            raise ValueError(
                "Invalid value for `review_status` ({0}), must be one of {1}"
                .format(review_status, allowed_values)
            )

        self._review_status = review_status

    @property
    def rewards_tier(self):
        """Gets the rewards_tier of this LoyaltyClass.

        The rewards tier, such as \"Gold\" or \"Platinum.\" Recommended maximum length is 7 characters to ensure full string is displayed on smaller screens.

        :return: The rewards_tier of this LoyaltyClass.
        :rtype: str
        """
        return self._rewards_tier

    @rewards_tier.setter
    def rewards_tier(self, rewards_tier):
        """Sets the rewards_tier of this LoyaltyClass.

        The rewards tier, such as \"Gold\" or \"Platinum.\" Recommended maximum length is 7 characters to ensure full string is displayed on smaller screens.

        :param rewards_tier: The rewards_tier of this LoyaltyClass.
        :type rewards_tier: str
        """

        self._rewards_tier = rewards_tier

    @property
    def rewards_tier_label(self):
        """Gets the rewards_tier_label of this LoyaltyClass.

        The rewards tier label, such as \"Rewards Tier.\" Recommended maximum length is 9 characters to ensure full string is displayed on smaller screens.

        :return: The rewards_tier_label of this LoyaltyClass.
        :rtype: str
        """
        return self._rewards_tier_label

    @rewards_tier_label.setter
    def rewards_tier_label(self, rewards_tier_label):
        """Sets the rewards_tier_label of this LoyaltyClass.

        The rewards tier label, such as \"Rewards Tier.\" Recommended maximum length is 9 characters to ensure full string is displayed on smaller screens.

        :param rewards_tier_label: The rewards_tier_label of this LoyaltyClass.
        :type rewards_tier_label: str
        """

        self._rewards_tier_label = rewards_tier_label

    @property
    def secondary_rewards_tier(self):
        """Gets the secondary_rewards_tier of this LoyaltyClass.

        The secondary rewards tier, such as \"Gold\" or \"Platinum.\"

        :return: The secondary_rewards_tier of this LoyaltyClass.
        :rtype: str
        """
        return self._secondary_rewards_tier

    @secondary_rewards_tier.setter
    def secondary_rewards_tier(self, secondary_rewards_tier):
        """Sets the secondary_rewards_tier of this LoyaltyClass.

        The secondary rewards tier, such as \"Gold\" or \"Platinum.\"

        :param secondary_rewards_tier: The secondary_rewards_tier of this LoyaltyClass.
        :type secondary_rewards_tier: str
        """

        self._secondary_rewards_tier = secondary_rewards_tier

    @property
    def secondary_rewards_tier_label(self):
        """Gets the secondary_rewards_tier_label of this LoyaltyClass.

        The secondary rewards tier label, such as \"Rewards Tier.\"

        :return: The secondary_rewards_tier_label of this LoyaltyClass.
        :rtype: str
        """
        return self._secondary_rewards_tier_label

    @secondary_rewards_tier_label.setter
    def secondary_rewards_tier_label(self, secondary_rewards_tier_label):
        """Sets the secondary_rewards_tier_label of this LoyaltyClass.

        The secondary rewards tier label, such as \"Rewards Tier.\"

        :param secondary_rewards_tier_label: The secondary_rewards_tier_label of this LoyaltyClass.
        :type secondary_rewards_tier_label: str
        """

        self._secondary_rewards_tier_label = secondary_rewards_tier_label

    @property
    def security_animation(self):
        """Gets the security_animation of this LoyaltyClass.


        :return: The security_animation of this LoyaltyClass.
        :rtype: SecurityAnimation
        """
        return self._security_animation

    @security_animation.setter
    def security_animation(self, security_animation):
        """Sets the security_animation of this LoyaltyClass.


        :param security_animation: The security_animation of this LoyaltyClass.
        :type security_animation: SecurityAnimation
        """

        self._security_animation = security_animation

    @property
    def text_modules_data(self):
        """Gets the text_modules_data of this LoyaltyClass.

        Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.

        :return: The text_modules_data of this LoyaltyClass.
        :rtype: List[TextModuleData]
        """
        return self._text_modules_data

    @text_modules_data.setter
    def text_modules_data(self, text_modules_data):
        """Sets the text_modules_data of this LoyaltyClass.

        Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.

        :param text_modules_data: The text_modules_data of this LoyaltyClass.
        :type text_modules_data: List[TextModuleData]
        """

        self._text_modules_data = text_modules_data

    @property
    def version(self):
        """Gets the version of this LoyaltyClass.

        Deprecated

        :return: The version of this LoyaltyClass.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this LoyaltyClass.

        Deprecated

        :param version: The version of this LoyaltyClass.
        :type version: str
        """

        self._version = version

    @property
    def view_unlock_requirement(self):
        """Gets the view_unlock_requirement of this LoyaltyClass.

        View Unlock Requirement options for the loyalty card.

        :return: The view_unlock_requirement of this LoyaltyClass.
        :rtype: str
        """
        return self._view_unlock_requirement

    @view_unlock_requirement.setter
    def view_unlock_requirement(self, view_unlock_requirement):
        """Sets the view_unlock_requirement of this LoyaltyClass.

        View Unlock Requirement options for the loyalty card.

        :param view_unlock_requirement: The view_unlock_requirement of this LoyaltyClass.
        :type view_unlock_requirement: str
        """
        allowed_values = ["VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED", "UNLOCK_NOT_REQUIRED", "UNLOCK_REQUIRED_TO_VIEW"]  # noqa: E501
        if view_unlock_requirement not in allowed_values:
            raise ValueError(
                "Invalid value for `view_unlock_requirement` ({0}), must be one of {1}"
                .format(view_unlock_requirement, allowed_values)
            )

        self._view_unlock_requirement = view_unlock_requirement

    @property
    def wide_program_logo(self):
        """Gets the wide_program_logo of this LoyaltyClass.


        :return: The wide_program_logo of this LoyaltyClass.
        :rtype: Image
        """
        return self._wide_program_logo

    @wide_program_logo.setter
    def wide_program_logo(self, wide_program_logo):
        """Sets the wide_program_logo of this LoyaltyClass.


        :param wide_program_logo: The wide_program_logo of this LoyaltyClass.
        :type wide_program_logo: Image
        """

        self._wide_program_logo = wide_program_logo

    @property
    def word_mark(self):
        """Gets the word_mark of this LoyaltyClass.


        :return: The word_mark of this LoyaltyClass.
        :rtype: Image
        """
        return self._word_mark

    @word_mark.setter
    def word_mark(self, word_mark):
        """Sets the word_mark of this LoyaltyClass.


        :param word_mark: The word_mark of this LoyaltyClass.
        :type word_mark: Image
        """

        self._word_mark = word_mark
