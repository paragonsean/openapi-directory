# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_reference import FieldReference
from openapi_server import util


class FieldSelector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: List[FieldReference]=None):
        """FieldSelector - a model defined in OpenAPI

        :param fields: The fields of this FieldSelector.
        """
        self.openapi_types = {
            'fields': List[FieldReference]
        }

        self.attribute_map = {
            'fields': 'fields'
        }

        self._fields = fields

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldSelector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldSelector of this FieldSelector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this FieldSelector.

        If more than one reference is supplied, then the first one that references a non-empty field will be displayed.

        :return: The fields of this FieldSelector.
        :rtype: List[FieldReference]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this FieldSelector.

        If more than one reference is supplied, then the first one that references a non-empty field will be displayed.

        :param fields: The fields of this FieldSelector.
        :type fields: List[FieldReference]
        """

        self._fields = fields
