# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flight_carrier import FlightCarrier
from openapi_server import util


class FlightHeader(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, carrier: FlightCarrier=None, flight_number: str=None, flight_number_display_override: str=None, kind: str=None, operating_carrier: FlightCarrier=None, operating_flight_number: str=None):
        """FlightHeader - a model defined in OpenAPI

        :param carrier: The carrier of this FlightHeader.
        :param flight_number: The flight_number of this FlightHeader.
        :param flight_number_display_override: The flight_number_display_override of this FlightHeader.
        :param kind: The kind of this FlightHeader.
        :param operating_carrier: The operating_carrier of this FlightHeader.
        :param operating_flight_number: The operating_flight_number of this FlightHeader.
        """
        self.openapi_types = {
            'carrier': FlightCarrier,
            'flight_number': str,
            'flight_number_display_override': str,
            'kind': str,
            'operating_carrier': FlightCarrier,
            'operating_flight_number': str
        }

        self.attribute_map = {
            'carrier': 'carrier',
            'flight_number': 'flightNumber',
            'flight_number_display_override': 'flightNumberDisplayOverride',
            'kind': 'kind',
            'operating_carrier': 'operatingCarrier',
            'operating_flight_number': 'operatingFlightNumber'
        }

        self._carrier = carrier
        self._flight_number = flight_number
        self._flight_number_display_override = flight_number_display_override
        self._kind = kind
        self._operating_carrier = operating_carrier
        self._operating_flight_number = operating_flight_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlightHeader':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlightHeader of this FlightHeader.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def carrier(self):
        """Gets the carrier of this FlightHeader.


        :return: The carrier of this FlightHeader.
        :rtype: FlightCarrier
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this FlightHeader.


        :param carrier: The carrier of this FlightHeader.
        :type carrier: FlightCarrier
        """

        self._carrier = carrier

    @property
    def flight_number(self):
        """Gets the flight_number of this FlightHeader.

        The flight number without IATA carrier code. This field should contain only digits. This is a required property of `flightHeader`. eg: \"123\"

        :return: The flight_number of this FlightHeader.
        :rtype: str
        """
        return self._flight_number

    @flight_number.setter
    def flight_number(self, flight_number):
        """Sets the flight_number of this FlightHeader.

        The flight number without IATA carrier code. This field should contain only digits. This is a required property of `flightHeader`. eg: \"123\"

        :param flight_number: The flight_number of this FlightHeader.
        :type flight_number: str
        """

        self._flight_number = flight_number

    @property
    def flight_number_display_override(self):
        """Gets the flight_number_display_override of this FlightHeader.

        Override value to use for flight number. The default value used for display purposes is carrier + flight_number. If a different value needs to be shown to passengers, use this field to override the default behavior. eg: \"XX1234 / YY576\"

        :return: The flight_number_display_override of this FlightHeader.
        :rtype: str
        """
        return self._flight_number_display_override

    @flight_number_display_override.setter
    def flight_number_display_override(self, flight_number_display_override):
        """Sets the flight_number_display_override of this FlightHeader.

        Override value to use for flight number. The default value used for display purposes is carrier + flight_number. If a different value needs to be shown to passengers, use this field to override the default behavior. eg: \"XX1234 / YY576\"

        :param flight_number_display_override: The flight_number_display_override of this FlightHeader.
        :type flight_number_display_override: str
        """

        self._flight_number_display_override = flight_number_display_override

    @property
    def kind(self):
        """Gets the kind of this FlightHeader.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#flightHeader\"`.

        :return: The kind of this FlightHeader.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this FlightHeader.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#flightHeader\"`.

        :param kind: The kind of this FlightHeader.
        :type kind: str
        """

        self._kind = kind

    @property
    def operating_carrier(self):
        """Gets the operating_carrier of this FlightHeader.


        :return: The operating_carrier of this FlightHeader.
        :rtype: FlightCarrier
        """
        return self._operating_carrier

    @operating_carrier.setter
    def operating_carrier(self, operating_carrier):
        """Sets the operating_carrier of this FlightHeader.


        :param operating_carrier: The operating_carrier of this FlightHeader.
        :type operating_carrier: FlightCarrier
        """

        self._operating_carrier = operating_carrier

    @property
    def operating_flight_number(self):
        """Gets the operating_flight_number of this FlightHeader.

        The flight number used by the operating carrier without IATA carrier code. This field should contain only digits. eg: \"234\"

        :return: The operating_flight_number of this FlightHeader.
        :rtype: str
        """
        return self._operating_flight_number

    @operating_flight_number.setter
    def operating_flight_number(self, operating_flight_number):
        """Sets the operating_flight_number of this FlightHeader.

        The flight number used by the operating carrier without IATA carrier code. This field should contain only digits. eg: \"234\"

        :param operating_flight_number: The operating_flight_number of this FlightHeader.
        :type operating_flight_number: str
        """

        self._operating_flight_number = operating_flight_number
