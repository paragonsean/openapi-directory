# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activation_status import ActivationStatus
from openapi_server.models.app_link_data import AppLinkData
from openapi_server.models.barcode import Barcode
from openapi_server.models.device_context import DeviceContext
from openapi_server.models.grouping_info import GroupingInfo
from openapi_server.models.image import Image
from openapi_server.models.image_module_data import ImageModuleData
from openapi_server.models.info_module_data import InfoModuleData
from openapi_server.models.lat_long_point import LatLongPoint
from openapi_server.models.links_module_data import LinksModuleData
from openapi_server.models.localized_string import LocalizedString
from openapi_server.models.message import Message
from openapi_server.models.pass_constraints import PassConstraints
from openapi_server.models.purchase_details import PurchaseDetails
from openapi_server.models.rotating_barcode import RotatingBarcode
from openapi_server.models.text_module_data import TextModuleData
from openapi_server.models.ticket_leg import TicketLeg
from openapi_server.models.ticket_restrictions import TicketRestrictions
from openapi_server.models.time_interval import TimeInterval
from openapi_server.models.transit_class import TransitClass
from openapi_server import util


class TransitObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_status: ActivationStatus=None, app_link_data: AppLinkData=None, barcode: Barcode=None, class_id: str=None, class_reference: TransitClass=None, concession_category: str=None, custom_concession_category: LocalizedString=None, custom_ticket_status: LocalizedString=None, device_context: DeviceContext=None, disable_expiration_notification: bool=None, grouping_info: GroupingInfo=None, has_linked_device: bool=None, has_users: bool=None, hero_image: Image=None, hex_background_color: str=None, id: str=None, image_modules_data: List[ImageModuleData]=None, info_module_data: InfoModuleData=None, links_module_data: LinksModuleData=None, locations: List[LatLongPoint]=None, messages: List[Message]=None, pass_constraints: PassConstraints=None, passenger_names: str=None, passenger_type: str=None, purchase_details: PurchaseDetails=None, rotating_barcode: RotatingBarcode=None, smart_tap_redemption_value: str=None, state: str=None, text_modules_data: List[TextModuleData]=None, ticket_leg: TicketLeg=None, ticket_legs: List[TicketLeg]=None, ticket_number: str=None, ticket_restrictions: TicketRestrictions=None, ticket_status: str=None, trip_id: str=None, trip_type: str=None, valid_time_interval: TimeInterval=None, version: str=None):
        """TransitObject - a model defined in OpenAPI

        :param activation_status: The activation_status of this TransitObject.
        :param app_link_data: The app_link_data of this TransitObject.
        :param barcode: The barcode of this TransitObject.
        :param class_id: The class_id of this TransitObject.
        :param class_reference: The class_reference of this TransitObject.
        :param concession_category: The concession_category of this TransitObject.
        :param custom_concession_category: The custom_concession_category of this TransitObject.
        :param custom_ticket_status: The custom_ticket_status of this TransitObject.
        :param device_context: The device_context of this TransitObject.
        :param disable_expiration_notification: The disable_expiration_notification of this TransitObject.
        :param grouping_info: The grouping_info of this TransitObject.
        :param has_linked_device: The has_linked_device of this TransitObject.
        :param has_users: The has_users of this TransitObject.
        :param hero_image: The hero_image of this TransitObject.
        :param hex_background_color: The hex_background_color of this TransitObject.
        :param id: The id of this TransitObject.
        :param image_modules_data: The image_modules_data of this TransitObject.
        :param info_module_data: The info_module_data of this TransitObject.
        :param links_module_data: The links_module_data of this TransitObject.
        :param locations: The locations of this TransitObject.
        :param messages: The messages of this TransitObject.
        :param pass_constraints: The pass_constraints of this TransitObject.
        :param passenger_names: The passenger_names of this TransitObject.
        :param passenger_type: The passenger_type of this TransitObject.
        :param purchase_details: The purchase_details of this TransitObject.
        :param rotating_barcode: The rotating_barcode of this TransitObject.
        :param smart_tap_redemption_value: The smart_tap_redemption_value of this TransitObject.
        :param state: The state of this TransitObject.
        :param text_modules_data: The text_modules_data of this TransitObject.
        :param ticket_leg: The ticket_leg of this TransitObject.
        :param ticket_legs: The ticket_legs of this TransitObject.
        :param ticket_number: The ticket_number of this TransitObject.
        :param ticket_restrictions: The ticket_restrictions of this TransitObject.
        :param ticket_status: The ticket_status of this TransitObject.
        :param trip_id: The trip_id of this TransitObject.
        :param trip_type: The trip_type of this TransitObject.
        :param valid_time_interval: The valid_time_interval of this TransitObject.
        :param version: The version of this TransitObject.
        """
        self.openapi_types = {
            'activation_status': ActivationStatus,
            'app_link_data': AppLinkData,
            'barcode': Barcode,
            'class_id': str,
            'class_reference': TransitClass,
            'concession_category': str,
            'custom_concession_category': LocalizedString,
            'custom_ticket_status': LocalizedString,
            'device_context': DeviceContext,
            'disable_expiration_notification': bool,
            'grouping_info': GroupingInfo,
            'has_linked_device': bool,
            'has_users': bool,
            'hero_image': Image,
            'hex_background_color': str,
            'id': str,
            'image_modules_data': List[ImageModuleData],
            'info_module_data': InfoModuleData,
            'links_module_data': LinksModuleData,
            'locations': List[LatLongPoint],
            'messages': List[Message],
            'pass_constraints': PassConstraints,
            'passenger_names': str,
            'passenger_type': str,
            'purchase_details': PurchaseDetails,
            'rotating_barcode': RotatingBarcode,
            'smart_tap_redemption_value': str,
            'state': str,
            'text_modules_data': List[TextModuleData],
            'ticket_leg': TicketLeg,
            'ticket_legs': List[TicketLeg],
            'ticket_number': str,
            'ticket_restrictions': TicketRestrictions,
            'ticket_status': str,
            'trip_id': str,
            'trip_type': str,
            'valid_time_interval': TimeInterval,
            'version': str
        }

        self.attribute_map = {
            'activation_status': 'activationStatus',
            'app_link_data': 'appLinkData',
            'barcode': 'barcode',
            'class_id': 'classId',
            'class_reference': 'classReference',
            'concession_category': 'concessionCategory',
            'custom_concession_category': 'customConcessionCategory',
            'custom_ticket_status': 'customTicketStatus',
            'device_context': 'deviceContext',
            'disable_expiration_notification': 'disableExpirationNotification',
            'grouping_info': 'groupingInfo',
            'has_linked_device': 'hasLinkedDevice',
            'has_users': 'hasUsers',
            'hero_image': 'heroImage',
            'hex_background_color': 'hexBackgroundColor',
            'id': 'id',
            'image_modules_data': 'imageModulesData',
            'info_module_data': 'infoModuleData',
            'links_module_data': 'linksModuleData',
            'locations': 'locations',
            'messages': 'messages',
            'pass_constraints': 'passConstraints',
            'passenger_names': 'passengerNames',
            'passenger_type': 'passengerType',
            'purchase_details': 'purchaseDetails',
            'rotating_barcode': 'rotatingBarcode',
            'smart_tap_redemption_value': 'smartTapRedemptionValue',
            'state': 'state',
            'text_modules_data': 'textModulesData',
            'ticket_leg': 'ticketLeg',
            'ticket_legs': 'ticketLegs',
            'ticket_number': 'ticketNumber',
            'ticket_restrictions': 'ticketRestrictions',
            'ticket_status': 'ticketStatus',
            'trip_id': 'tripId',
            'trip_type': 'tripType',
            'valid_time_interval': 'validTimeInterval',
            'version': 'version'
        }

        self._activation_status = activation_status
        self._app_link_data = app_link_data
        self._barcode = barcode
        self._class_id = class_id
        self._class_reference = class_reference
        self._concession_category = concession_category
        self._custom_concession_category = custom_concession_category
        self._custom_ticket_status = custom_ticket_status
        self._device_context = device_context
        self._disable_expiration_notification = disable_expiration_notification
        self._grouping_info = grouping_info
        self._has_linked_device = has_linked_device
        self._has_users = has_users
        self._hero_image = hero_image
        self._hex_background_color = hex_background_color
        self._id = id
        self._image_modules_data = image_modules_data
        self._info_module_data = info_module_data
        self._links_module_data = links_module_data
        self._locations = locations
        self._messages = messages
        self._pass_constraints = pass_constraints
        self._passenger_names = passenger_names
        self._passenger_type = passenger_type
        self._purchase_details = purchase_details
        self._rotating_barcode = rotating_barcode
        self._smart_tap_redemption_value = smart_tap_redemption_value
        self._state = state
        self._text_modules_data = text_modules_data
        self._ticket_leg = ticket_leg
        self._ticket_legs = ticket_legs
        self._ticket_number = ticket_number
        self._ticket_restrictions = ticket_restrictions
        self._ticket_status = ticket_status
        self._trip_id = trip_id
        self._trip_type = trip_type
        self._valid_time_interval = valid_time_interval
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransitObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransitObject of this TransitObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_status(self):
        """Gets the activation_status of this TransitObject.


        :return: The activation_status of this TransitObject.
        :rtype: ActivationStatus
        """
        return self._activation_status

    @activation_status.setter
    def activation_status(self, activation_status):
        """Sets the activation_status of this TransitObject.


        :param activation_status: The activation_status of this TransitObject.
        :type activation_status: ActivationStatus
        """

        self._activation_status = activation_status

    @property
    def app_link_data(self):
        """Gets the app_link_data of this TransitObject.


        :return: The app_link_data of this TransitObject.
        :rtype: AppLinkData
        """
        return self._app_link_data

    @app_link_data.setter
    def app_link_data(self, app_link_data):
        """Sets the app_link_data of this TransitObject.


        :param app_link_data: The app_link_data of this TransitObject.
        :type app_link_data: AppLinkData
        """

        self._app_link_data = app_link_data

    @property
    def barcode(self):
        """Gets the barcode of this TransitObject.


        :return: The barcode of this TransitObject.
        :rtype: Barcode
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this TransitObject.


        :param barcode: The barcode of this TransitObject.
        :type barcode: Barcode
        """

        self._barcode = barcode

    @property
    def class_id(self):
        """Gets the class_id of this TransitObject.

        Required. The class associated with this object. The class must be of the same type as this object, must already exist, and must be approved. Class IDs should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you.

        :return: The class_id of this TransitObject.
        :rtype: str
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id):
        """Sets the class_id of this TransitObject.

        Required. The class associated with this object. The class must be of the same type as this object, must already exist, and must be approved. Class IDs should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you.

        :param class_id: The class_id of this TransitObject.
        :type class_id: str
        """

        self._class_id = class_id

    @property
    def class_reference(self):
        """Gets the class_reference of this TransitObject.


        :return: The class_reference of this TransitObject.
        :rtype: TransitClass
        """
        return self._class_reference

    @class_reference.setter
    def class_reference(self, class_reference):
        """Sets the class_reference of this TransitObject.


        :param class_reference: The class_reference of this TransitObject.
        :type class_reference: TransitClass
        """

        self._class_reference = class_reference

    @property
    def concession_category(self):
        """Gets the concession_category of this TransitObject.

        The concession category for the ticket.

        :return: The concession_category of this TransitObject.
        :rtype: str
        """
        return self._concession_category

    @concession_category.setter
    def concession_category(self, concession_category):
        """Sets the concession_category of this TransitObject.

        The concession category for the ticket.

        :param concession_category: The concession_category of this TransitObject.
        :type concession_category: str
        """
        allowed_values = ["CONCESSION_CATEGORY_UNSPECIFIED", "ADULT", "adult", "CHILD", "child", "SENIOR", "senior"]  # noqa: E501
        if concession_category not in allowed_values:
            raise ValueError(
                "Invalid value for `concession_category` ({0}), must be one of {1}"
                .format(concession_category, allowed_values)
            )

        self._concession_category = concession_category

    @property
    def custom_concession_category(self):
        """Gets the custom_concession_category of this TransitObject.


        :return: The custom_concession_category of this TransitObject.
        :rtype: LocalizedString
        """
        return self._custom_concession_category

    @custom_concession_category.setter
    def custom_concession_category(self, custom_concession_category):
        """Sets the custom_concession_category of this TransitObject.


        :param custom_concession_category: The custom_concession_category of this TransitObject.
        :type custom_concession_category: LocalizedString
        """

        self._custom_concession_category = custom_concession_category

    @property
    def custom_ticket_status(self):
        """Gets the custom_ticket_status of this TransitObject.


        :return: The custom_ticket_status of this TransitObject.
        :rtype: LocalizedString
        """
        return self._custom_ticket_status

    @custom_ticket_status.setter
    def custom_ticket_status(self, custom_ticket_status):
        """Sets the custom_ticket_status of this TransitObject.


        :param custom_ticket_status: The custom_ticket_status of this TransitObject.
        :type custom_ticket_status: LocalizedString
        """

        self._custom_ticket_status = custom_ticket_status

    @property
    def device_context(self):
        """Gets the device_context of this TransitObject.


        :return: The device_context of this TransitObject.
        :rtype: DeviceContext
        """
        return self._device_context

    @device_context.setter
    def device_context(self, device_context):
        """Sets the device_context of this TransitObject.


        :param device_context: The device_context of this TransitObject.
        :type device_context: DeviceContext
        """

        self._device_context = device_context

    @property
    def disable_expiration_notification(self):
        """Gets the disable_expiration_notification of this TransitObject.

        Indicates if notifications should explicitly be suppressed. If this field is set to true, regardless of the `messages` field, expiration notifications to the user will be suppressed. By default, this field is set to false. Currently, this can only be set for offers.

        :return: The disable_expiration_notification of this TransitObject.
        :rtype: bool
        """
        return self._disable_expiration_notification

    @disable_expiration_notification.setter
    def disable_expiration_notification(self, disable_expiration_notification):
        """Sets the disable_expiration_notification of this TransitObject.

        Indicates if notifications should explicitly be suppressed. If this field is set to true, regardless of the `messages` field, expiration notifications to the user will be suppressed. By default, this field is set to false. Currently, this can only be set for offers.

        :param disable_expiration_notification: The disable_expiration_notification of this TransitObject.
        :type disable_expiration_notification: bool
        """

        self._disable_expiration_notification = disable_expiration_notification

    @property
    def grouping_info(self):
        """Gets the grouping_info of this TransitObject.


        :return: The grouping_info of this TransitObject.
        :rtype: GroupingInfo
        """
        return self._grouping_info

    @grouping_info.setter
    def grouping_info(self, grouping_info):
        """Sets the grouping_info of this TransitObject.


        :param grouping_info: The grouping_info of this TransitObject.
        :type grouping_info: GroupingInfo
        """

        self._grouping_info = grouping_info

    @property
    def has_linked_device(self):
        """Gets the has_linked_device of this TransitObject.

        Whether this object is currently linked to a single device. This field is set by the platform when a user saves the object, linking it to their device. Intended for use by select partners. Contact support for additional information.

        :return: The has_linked_device of this TransitObject.
        :rtype: bool
        """
        return self._has_linked_device

    @has_linked_device.setter
    def has_linked_device(self, has_linked_device):
        """Sets the has_linked_device of this TransitObject.

        Whether this object is currently linked to a single device. This field is set by the platform when a user saves the object, linking it to their device. Intended for use by select partners. Contact support for additional information.

        :param has_linked_device: The has_linked_device of this TransitObject.
        :type has_linked_device: bool
        """

        self._has_linked_device = has_linked_device

    @property
    def has_users(self):
        """Gets the has_users of this TransitObject.

        Indicates if the object has users. This field is set by the platform.

        :return: The has_users of this TransitObject.
        :rtype: bool
        """
        return self._has_users

    @has_users.setter
    def has_users(self, has_users):
        """Sets the has_users of this TransitObject.

        Indicates if the object has users. This field is set by the platform.

        :param has_users: The has_users of this TransitObject.
        :type has_users: bool
        """

        self._has_users = has_users

    @property
    def hero_image(self):
        """Gets the hero_image of this TransitObject.


        :return: The hero_image of this TransitObject.
        :rtype: Image
        """
        return self._hero_image

    @hero_image.setter
    def hero_image(self, hero_image):
        """Sets the hero_image of this TransitObject.


        :param hero_image: The hero_image of this TransitObject.
        :type hero_image: Image
        """

        self._hero_image = hero_image

    @property
    def hex_background_color(self):
        """Gets the hex_background_color of this TransitObject.

        The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.

        :return: The hex_background_color of this TransitObject.
        :rtype: str
        """
        return self._hex_background_color

    @hex_background_color.setter
    def hex_background_color(self, hex_background_color):
        """Sets the hex_background_color of this TransitObject.

        The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.

        :param hex_background_color: The hex_background_color of this TransitObject.
        :type hex_background_color: str
        """

        self._hex_background_color = hex_background_color

    @property
    def id(self):
        """Gets the id of this TransitObject.

        Required. The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you. The unique identifier should only include alphanumeric characters, '.', '_', or '-'.

        :return: The id of this TransitObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransitObject.

        Required. The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID.identifier where the former is issued by Google and latter is chosen by you. The unique identifier should only include alphanumeric characters, '.', '_', or '-'.

        :param id: The id of this TransitObject.
        :type id: str
        """

        self._id = id

    @property
    def image_modules_data(self):
        """Gets the image_modules_data of this TransitObject.

        Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.

        :return: The image_modules_data of this TransitObject.
        :rtype: List[ImageModuleData]
        """
        return self._image_modules_data

    @image_modules_data.setter
    def image_modules_data(self, image_modules_data):
        """Sets the image_modules_data of this TransitObject.

        Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.

        :param image_modules_data: The image_modules_data of this TransitObject.
        :type image_modules_data: List[ImageModuleData]
        """

        self._image_modules_data = image_modules_data

    @property
    def info_module_data(self):
        """Gets the info_module_data of this TransitObject.


        :return: The info_module_data of this TransitObject.
        :rtype: InfoModuleData
        """
        return self._info_module_data

    @info_module_data.setter
    def info_module_data(self, info_module_data):
        """Sets the info_module_data of this TransitObject.


        :param info_module_data: The info_module_data of this TransitObject.
        :type info_module_data: InfoModuleData
        """

        self._info_module_data = info_module_data

    @property
    def links_module_data(self):
        """Gets the links_module_data of this TransitObject.


        :return: The links_module_data of this TransitObject.
        :rtype: LinksModuleData
        """
        return self._links_module_data

    @links_module_data.setter
    def links_module_data(self, links_module_data):
        """Sets the links_module_data of this TransitObject.


        :param links_module_data: The links_module_data of this TransitObject.
        :type links_module_data: LinksModuleData
        """

        self._links_module_data = links_module_data

    @property
    def locations(self):
        """Gets the locations of this TransitObject.

        Note: This field is currently not supported to trigger geo notifications.

        :return: The locations of this TransitObject.
        :rtype: List[LatLongPoint]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this TransitObject.

        Note: This field is currently not supported to trigger geo notifications.

        :param locations: The locations of this TransitObject.
        :type locations: List[LatLongPoint]
        """

        self._locations = locations

    @property
    def messages(self):
        """Gets the messages of this TransitObject.

        An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.

        :return: The messages of this TransitObject.
        :rtype: List[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this TransitObject.

        An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.

        :param messages: The messages of this TransitObject.
        :type messages: List[Message]
        """

        self._messages = messages

    @property
    def pass_constraints(self):
        """Gets the pass_constraints of this TransitObject.


        :return: The pass_constraints of this TransitObject.
        :rtype: PassConstraints
        """
        return self._pass_constraints

    @pass_constraints.setter
    def pass_constraints(self, pass_constraints):
        """Sets the pass_constraints of this TransitObject.


        :param pass_constraints: The pass_constraints of this TransitObject.
        :type pass_constraints: PassConstraints
        """

        self._pass_constraints = pass_constraints

    @property
    def passenger_names(self):
        """Gets the passenger_names of this TransitObject.

        The name(s) of the passengers the ticket is assigned to. The above `passengerType` field is meant to give Google context on this field.

        :return: The passenger_names of this TransitObject.
        :rtype: str
        """
        return self._passenger_names

    @passenger_names.setter
    def passenger_names(self, passenger_names):
        """Sets the passenger_names of this TransitObject.

        The name(s) of the passengers the ticket is assigned to. The above `passengerType` field is meant to give Google context on this field.

        :param passenger_names: The passenger_names of this TransitObject.
        :type passenger_names: str
        """

        self._passenger_names = passenger_names

    @property
    def passenger_type(self):
        """Gets the passenger_type of this TransitObject.

        The number of passengers.

        :return: The passenger_type of this TransitObject.
        :rtype: str
        """
        return self._passenger_type

    @passenger_type.setter
    def passenger_type(self, passenger_type):
        """Sets the passenger_type of this TransitObject.

        The number of passengers.

        :param passenger_type: The passenger_type of this TransitObject.
        :type passenger_type: str
        """
        allowed_values = ["PASSENGER_TYPE_UNSPECIFIED", "SINGLE_PASSENGER", "singlePassenger", "MULTIPLE_PASSENGERS", "multiplePassengers"]  # noqa: E501
        if passenger_type not in allowed_values:
            raise ValueError(
                "Invalid value for `passenger_type` ({0}), must be one of {1}"
                .format(passenger_type, allowed_values)
            )

        self._passenger_type = passenger_type

    @property
    def purchase_details(self):
        """Gets the purchase_details of this TransitObject.


        :return: The purchase_details of this TransitObject.
        :rtype: PurchaseDetails
        """
        return self._purchase_details

    @purchase_details.setter
    def purchase_details(self, purchase_details):
        """Sets the purchase_details of this TransitObject.


        :param purchase_details: The purchase_details of this TransitObject.
        :type purchase_details: PurchaseDetails
        """

        self._purchase_details = purchase_details

    @property
    def rotating_barcode(self):
        """Gets the rotating_barcode of this TransitObject.


        :return: The rotating_barcode of this TransitObject.
        :rtype: RotatingBarcode
        """
        return self._rotating_barcode

    @rotating_barcode.setter
    def rotating_barcode(self, rotating_barcode):
        """Sets the rotating_barcode of this TransitObject.


        :param rotating_barcode: The rotating_barcode of this TransitObject.
        :type rotating_barcode: RotatingBarcode
        """

        self._rotating_barcode = rotating_barcode

    @property
    def smart_tap_redemption_value(self):
        """Gets the smart_tap_redemption_value of this TransitObject.

        The value that will be transmitted to a Smart Tap certified terminal over NFC for this object. The class level fields `enableSmartTap` and `redemptionIssuers` must also be set up correctly in order for the pass to support Smart Tap. Only ASCII characters are supported.

        :return: The smart_tap_redemption_value of this TransitObject.
        :rtype: str
        """
        return self._smart_tap_redemption_value

    @smart_tap_redemption_value.setter
    def smart_tap_redemption_value(self, smart_tap_redemption_value):
        """Sets the smart_tap_redemption_value of this TransitObject.

        The value that will be transmitted to a Smart Tap certified terminal over NFC for this object. The class level fields `enableSmartTap` and `redemptionIssuers` must also be set up correctly in order for the pass to support Smart Tap. Only ASCII characters are supported.

        :param smart_tap_redemption_value: The smart_tap_redemption_value of this TransitObject.
        :type smart_tap_redemption_value: str
        """

        self._smart_tap_redemption_value = smart_tap_redemption_value

    @property
    def state(self):
        """Gets the state of this TransitObject.

        Required. The state of the object. This field is used to determine how an object is displayed in the app. For example, an `inactive` object is moved to the \"Expired passes\" section.

        :return: The state of this TransitObject.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TransitObject.

        Required. The state of the object. This field is used to determine how an object is displayed in the app. For example, an `inactive` object is moved to the \"Expired passes\" section.

        :param state: The state of this TransitObject.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "active", "COMPLETED", "completed", "EXPIRED", "expired", "INACTIVE", "inactive"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def text_modules_data(self):
        """Gets the text_modules_data of this TransitObject.

        Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.

        :return: The text_modules_data of this TransitObject.
        :rtype: List[TextModuleData]
        """
        return self._text_modules_data

    @text_modules_data.setter
    def text_modules_data(self, text_modules_data):
        """Sets the text_modules_data of this TransitObject.

        Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.

        :param text_modules_data: The text_modules_data of this TransitObject.
        :type text_modules_data: List[TextModuleData]
        """

        self._text_modules_data = text_modules_data

    @property
    def ticket_leg(self):
        """Gets the ticket_leg of this TransitObject.


        :return: The ticket_leg of this TransitObject.
        :rtype: TicketLeg
        """
        return self._ticket_leg

    @ticket_leg.setter
    def ticket_leg(self, ticket_leg):
        """Sets the ticket_leg of this TransitObject.


        :param ticket_leg: The ticket_leg of this TransitObject.
        :type ticket_leg: TicketLeg
        """

        self._ticket_leg = ticket_leg

    @property
    def ticket_legs(self):
        """Gets the ticket_legs of this TransitObject.

        Each ticket may contain one or more legs. Each leg contains departure and arrival information along with boarding and seating information. If only one leg is to be specified then use the `ticketLeg` field instead. Both `ticketLeg` and `ticketLegs` may not be set.

        :return: The ticket_legs of this TransitObject.
        :rtype: List[TicketLeg]
        """
        return self._ticket_legs

    @ticket_legs.setter
    def ticket_legs(self, ticket_legs):
        """Sets the ticket_legs of this TransitObject.

        Each ticket may contain one or more legs. Each leg contains departure and arrival information along with boarding and seating information. If only one leg is to be specified then use the `ticketLeg` field instead. Both `ticketLeg` and `ticketLegs` may not be set.

        :param ticket_legs: The ticket_legs of this TransitObject.
        :type ticket_legs: List[TicketLeg]
        """

        self._ticket_legs = ticket_legs

    @property
    def ticket_number(self):
        """Gets the ticket_number of this TransitObject.

        The number of the ticket. This is a unique identifier for the ticket in the transit operator's system.

        :return: The ticket_number of this TransitObject.
        :rtype: str
        """
        return self._ticket_number

    @ticket_number.setter
    def ticket_number(self, ticket_number):
        """Sets the ticket_number of this TransitObject.

        The number of the ticket. This is a unique identifier for the ticket in the transit operator's system.

        :param ticket_number: The ticket_number of this TransitObject.
        :type ticket_number: str
        """

        self._ticket_number = ticket_number

    @property
    def ticket_restrictions(self):
        """Gets the ticket_restrictions of this TransitObject.


        :return: The ticket_restrictions of this TransitObject.
        :rtype: TicketRestrictions
        """
        return self._ticket_restrictions

    @ticket_restrictions.setter
    def ticket_restrictions(self, ticket_restrictions):
        """Sets the ticket_restrictions of this TransitObject.


        :param ticket_restrictions: The ticket_restrictions of this TransitObject.
        :type ticket_restrictions: TicketRestrictions
        """

        self._ticket_restrictions = ticket_restrictions

    @property
    def ticket_status(self):
        """Gets the ticket_status of this TransitObject.

        The status of the ticket. For states which affect display, use the `state` field instead.

        :return: The ticket_status of this TransitObject.
        :rtype: str
        """
        return self._ticket_status

    @ticket_status.setter
    def ticket_status(self, ticket_status):
        """Sets the ticket_status of this TransitObject.

        The status of the ticket. For states which affect display, use the `state` field instead.

        :param ticket_status: The ticket_status of this TransitObject.
        :type ticket_status: str
        """
        allowed_values = ["TICKET_STATUS_UNSPECIFIED", "USED", "used", "REFUNDED", "refunded", "EXCHANGED", "exchanged"]  # noqa: E501
        if ticket_status not in allowed_values:
            raise ValueError(
                "Invalid value for `ticket_status` ({0}), must be one of {1}"
                .format(ticket_status, allowed_values)
            )

        self._ticket_status = ticket_status

    @property
    def trip_id(self):
        """Gets the trip_id of this TransitObject.

        This id is used to group tickets together if the user has saved multiple tickets for the same trip.

        :return: The trip_id of this TransitObject.
        :rtype: str
        """
        return self._trip_id

    @trip_id.setter
    def trip_id(self, trip_id):
        """Sets the trip_id of this TransitObject.

        This id is used to group tickets together if the user has saved multiple tickets for the same trip.

        :param trip_id: The trip_id of this TransitObject.
        :type trip_id: str
        """

        self._trip_id = trip_id

    @property
    def trip_type(self):
        """Gets the trip_type of this TransitObject.

        Required. The type of trip this transit object represents. Used to determine the pass title and/or which symbol to use between the origin and destination.

        :return: The trip_type of this TransitObject.
        :rtype: str
        """
        return self._trip_type

    @trip_type.setter
    def trip_type(self, trip_type):
        """Sets the trip_type of this TransitObject.

        Required. The type of trip this transit object represents. Used to determine the pass title and/or which symbol to use between the origin and destination.

        :param trip_type: The trip_type of this TransitObject.
        :type trip_type: str
        """
        allowed_values = ["TRIP_TYPE_UNSPECIFIED", "ROUND_TRIP", "roundTrip", "ONE_WAY", "oneWay"]  # noqa: E501
        if trip_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trip_type` ({0}), must be one of {1}"
                .format(trip_type, allowed_values)
            )

        self._trip_type = trip_type

    @property
    def valid_time_interval(self):
        """Gets the valid_time_interval of this TransitObject.


        :return: The valid_time_interval of this TransitObject.
        :rtype: TimeInterval
        """
        return self._valid_time_interval

    @valid_time_interval.setter
    def valid_time_interval(self, valid_time_interval):
        """Sets the valid_time_interval of this TransitObject.


        :param valid_time_interval: The valid_time_interval of this TransitObject.
        :type valid_time_interval: TimeInterval
        """

        self._valid_time_interval = valid_time_interval

    @property
    def version(self):
        """Gets the version of this TransitObject.

        Deprecated

        :return: The version of this TransitObject.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TransitObject.

        Deprecated

        :param version: The version of this TransitObject.
        :type version: str
        """

        self._version = version
