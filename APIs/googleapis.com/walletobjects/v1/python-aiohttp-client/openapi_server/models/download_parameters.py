# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DownloadParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_gzip_compression: bool=None, ignore_range: bool=None):
        """DownloadParameters - a model defined in OpenAPI

        :param allow_gzip_compression: The allow_gzip_compression of this DownloadParameters.
        :param ignore_range: The ignore_range of this DownloadParameters.
        """
        self.openapi_types = {
            'allow_gzip_compression': bool,
            'ignore_range': bool
        }

        self.attribute_map = {
            'allow_gzip_compression': 'allowGzipCompression',
            'ignore_range': 'ignoreRange'
        }

        self._allow_gzip_compression = allow_gzip_compression
        self._ignore_range = ignore_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DownloadParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DownloadParameters of this DownloadParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_gzip_compression(self):
        """Gets the allow_gzip_compression of this DownloadParameters.

        A boolean to be returned in the response to Scotty. Allows/disallows gzip encoding of the payload content when the server thinks it's advantageous (hence, does not guarantee compression) which allows Scotty to GZip the response to the client.

        :return: The allow_gzip_compression of this DownloadParameters.
        :rtype: bool
        """
        return self._allow_gzip_compression

    @allow_gzip_compression.setter
    def allow_gzip_compression(self, allow_gzip_compression):
        """Sets the allow_gzip_compression of this DownloadParameters.

        A boolean to be returned in the response to Scotty. Allows/disallows gzip encoding of the payload content when the server thinks it's advantageous (hence, does not guarantee compression) which allows Scotty to GZip the response to the client.

        :param allow_gzip_compression: The allow_gzip_compression of this DownloadParameters.
        :type allow_gzip_compression: bool
        """

        self._allow_gzip_compression = allow_gzip_compression

    @property
    def ignore_range(self):
        """Gets the ignore_range of this DownloadParameters.

        Determining whether or not Apiary should skip the inclusion of any Content-Range header on its response to Scotty.

        :return: The ignore_range of this DownloadParameters.
        :rtype: bool
        """
        return self._ignore_range

    @ignore_range.setter
    def ignore_range(self, ignore_range):
        """Sets the ignore_range of this DownloadParameters.

        Determining whether or not Apiary should skip the inclusion of any Content-Range header on its response to Scotty.

        :param ignore_range: The ignore_range of this DownloadParameters.
        :type ignore_range: bool
        """

        self._ignore_range = ignore_range
