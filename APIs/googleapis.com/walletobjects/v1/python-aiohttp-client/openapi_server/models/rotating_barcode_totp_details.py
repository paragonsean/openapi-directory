# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rotating_barcode_totp_details_totp_parameters import RotatingBarcodeTotpDetailsTotpParameters
from openapi_server import util


class RotatingBarcodeTotpDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: str=None, parameters: List[RotatingBarcodeTotpDetailsTotpParameters]=None, period_millis: str=None):
        """RotatingBarcodeTotpDetails - a model defined in OpenAPI

        :param algorithm: The algorithm of this RotatingBarcodeTotpDetails.
        :param parameters: The parameters of this RotatingBarcodeTotpDetails.
        :param period_millis: The period_millis of this RotatingBarcodeTotpDetails.
        """
        self.openapi_types = {
            'algorithm': str,
            'parameters': List[RotatingBarcodeTotpDetailsTotpParameters],
            'period_millis': str
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'parameters': 'parameters',
            'period_millis': 'periodMillis'
        }

        self._algorithm = algorithm
        self._parameters = parameters
        self._period_millis = period_millis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RotatingBarcodeTotpDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RotatingBarcodeTotpDetails of this RotatingBarcodeTotpDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this RotatingBarcodeTotpDetails.

        The TOTP algorithm used to generate the OTP.

        :return: The algorithm of this RotatingBarcodeTotpDetails.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this RotatingBarcodeTotpDetails.

        The TOTP algorithm used to generate the OTP.

        :param algorithm: The algorithm of this RotatingBarcodeTotpDetails.
        :type algorithm: str
        """
        allowed_values = ["TOTP_ALGORITHM_UNSPECIFIED", "TOTP_SHA1"]  # noqa: E501
        if algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `algorithm` ({0}), must be one of {1}"
                .format(algorithm, allowed_values)
            )

        self._algorithm = algorithm

    @property
    def parameters(self):
        """Gets the parameters of this RotatingBarcodeTotpDetails.

        The TOTP parameters for each of the {totp_value_*} substitutions. The TotpParameters at index n is used for the {totp_value_n} substitution.

        :return: The parameters of this RotatingBarcodeTotpDetails.
        :rtype: List[RotatingBarcodeTotpDetailsTotpParameters]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this RotatingBarcodeTotpDetails.

        The TOTP parameters for each of the {totp_value_*} substitutions. The TotpParameters at index n is used for the {totp_value_n} substitution.

        :param parameters: The parameters of this RotatingBarcodeTotpDetails.
        :type parameters: List[RotatingBarcodeTotpDetailsTotpParameters]
        """

        self._parameters = parameters

    @property
    def period_millis(self):
        """Gets the period_millis of this RotatingBarcodeTotpDetails.

        The time interval used for the TOTP value generation, in milliseconds.

        :return: The period_millis of this RotatingBarcodeTotpDetails.
        :rtype: str
        """
        return self._period_millis

    @period_millis.setter
    def period_millis(self, period_millis):
        """Sets the period_millis of this RotatingBarcodeTotpDetails.

        The time interval used for the TOTP value generation, in milliseconds.

        :param period_millis: The period_millis of this RotatingBarcodeTotpDetails.
        :type period_millis: str
        """

        self._period_millis = period_millis
