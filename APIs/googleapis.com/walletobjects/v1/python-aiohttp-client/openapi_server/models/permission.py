# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Permission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_address: str=None, role: str=None):
        """Permission - a model defined in OpenAPI

        :param email_address: The email_address of this Permission.
        :param role: The role of this Permission.
        """
        self.openapi_types = {
            'email_address': str,
            'role': str
        }

        self.attribute_map = {
            'email_address': 'emailAddress',
            'role': 'role'
        }

        self._email_address = email_address
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Permission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Permission of this Permission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_address(self):
        """Gets the email_address of this Permission.

        The email address of the user, group, or service account to which this permission refers to.

        :return: The email_address of this Permission.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this Permission.

        The email address of the user, group, or service account to which this permission refers to.

        :param email_address: The email_address of this Permission.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def role(self):
        """Gets the role of this Permission.

        The role granted by this permission.

        :return: The role of this Permission.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Permission.

        The role granted by this permission.

        :param role: The role of this Permission.
        :type role: str
        """
        allowed_values = ["ROLE_UNSPECIFIED", "OWNER", "owner", "READER", "reader", "WRITER", "writer"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role
