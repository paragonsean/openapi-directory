/*
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Blobstore2Info;
import org.openapitools.client.model.CompositeMedia;
import org.openapitools.client.model.ContentTypeInfo;
import org.openapitools.client.model.DiffChecksumsResponse;
import org.openapitools.client.model.DiffDownloadResponse;
import org.openapitools.client.model.DiffUploadRequest;
import org.openapitools.client.model.DiffUploadResponse;
import org.openapitools.client.model.DiffVersionResponse;
import org.openapitools.client.model.DownloadParameters;
import org.openapitools.client.model.ObjectId;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Media
 */
public class MediaTest {
    private final Media model = new Media();

    /**
     * Model tests for Media
     */
    @Test
    public void testMedia() {
        // TODO: test Media
    }

    /**
     * Test the property 'algorithm'
     */
    @Test
    public void algorithmTest() {
        // TODO: test algorithm
    }

    /**
     * Test the property 'bigstoreObjectRef'
     */
    @Test
    public void bigstoreObjectRefTest() {
        // TODO: test bigstoreObjectRef
    }

    /**
     * Test the property 'blobRef'
     */
    @Test
    public void blobRefTest() {
        // TODO: test blobRef
    }

    /**
     * Test the property 'blobstore2Info'
     */
    @Test
    public void blobstore2InfoTest() {
        // TODO: test blobstore2Info
    }

    /**
     * Test the property 'compositeMedia'
     */
    @Test
    public void compositeMediaTest() {
        // TODO: test compositeMedia
    }

    /**
     * Test the property 'contentType'
     */
    @Test
    public void contentTypeTest() {
        // TODO: test contentType
    }

    /**
     * Test the property 'contentTypeInfo'
     */
    @Test
    public void contentTypeInfoTest() {
        // TODO: test contentTypeInfo
    }

    /**
     * Test the property 'cosmoBinaryReference'
     */
    @Test
    public void cosmoBinaryReferenceTest() {
        // TODO: test cosmoBinaryReference
    }

    /**
     * Test the property 'crc32cHash'
     */
    @Test
    public void crc32cHashTest() {
        // TODO: test crc32cHash
    }

    /**
     * Test the property 'diffChecksumsResponse'
     */
    @Test
    public void diffChecksumsResponseTest() {
        // TODO: test diffChecksumsResponse
    }

    /**
     * Test the property 'diffDownloadResponse'
     */
    @Test
    public void diffDownloadResponseTest() {
        // TODO: test diffDownloadResponse
    }

    /**
     * Test the property 'diffUploadRequest'
     */
    @Test
    public void diffUploadRequestTest() {
        // TODO: test diffUploadRequest
    }

    /**
     * Test the property 'diffUploadResponse'
     */
    @Test
    public void diffUploadResponseTest() {
        // TODO: test diffUploadResponse
    }

    /**
     * Test the property 'diffVersionResponse'
     */
    @Test
    public void diffVersionResponseTest() {
        // TODO: test diffVersionResponse
    }

    /**
     * Test the property 'downloadParameters'
     */
    @Test
    public void downloadParametersTest() {
        // TODO: test downloadParameters
    }

    /**
     * Test the property 'filename'
     */
    @Test
    public void filenameTest() {
        // TODO: test filename
    }

    /**
     * Test the property 'hash'
     */
    @Test
    public void hashTest() {
        // TODO: test hash
    }

    /**
     * Test the property 'hashVerified'
     */
    @Test
    public void hashVerifiedTest() {
        // TODO: test hashVerified
    }

    /**
     * Test the property 'inline'
     */
    @Test
    public void inlineTest() {
        // TODO: test inline
    }

    /**
     * Test the property 'isPotentialRetry'
     */
    @Test
    public void isPotentialRetryTest() {
        // TODO: test isPotentialRetry
    }

    /**
     * Test the property 'length'
     */
    @Test
    public void lengthTest() {
        // TODO: test length
    }

    /**
     * Test the property 'md5Hash'
     */
    @Test
    public void md5HashTest() {
        // TODO: test md5Hash
    }

    /**
     * Test the property 'mediaId'
     */
    @Test
    public void mediaIdTest() {
        // TODO: test mediaId
    }

    /**
     * Test the property 'objectId'
     */
    @Test
    public void objectIdTest() {
        // TODO: test objectId
    }

    /**
     * Test the property 'path'
     */
    @Test
    public void pathTest() {
        // TODO: test path
    }

    /**
     * Test the property 'referenceType'
     */
    @Test
    public void referenceTypeTest() {
        // TODO: test referenceType
    }

    /**
     * Test the property 'sha1Hash'
     */
    @Test
    public void sha1HashTest() {
        // TODO: test sha1Hash
    }

    /**
     * Test the property 'sha256Hash'
     */
    @Test
    public void sha256HashTest() {
        // TODO: test sha256Hash
    }

    /**
     * Test the property 'timestamp'
     */
    @Test
    public void timestampTest() {
        // TODO: test timestamp
    }

    /**
     * Test the property 'token'
     */
    @Test
    public void tokenTest() {
        // TODO: test token
    }

}
