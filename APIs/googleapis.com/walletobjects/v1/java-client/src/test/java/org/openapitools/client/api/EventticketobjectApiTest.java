/*
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddMessageRequest;
import org.openapitools.client.model.EventTicketObject;
import org.openapitools.client.model.EventTicketObjectAddMessageResponse;
import org.openapitools.client.model.EventTicketObjectListResponse;
import org.openapitools.client.model.ModifyLinkedOfferObjectsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventticketobjectApi
 */
@Disabled
public class EventticketobjectApiTest {

    private final EventticketobjectApi api = new EventticketobjectApi();

    /**
     * Adds a message to the event ticket object referenced by the given object ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void walletobjectsEventticketobjectAddmessageTest() throws ApiException {
        String resourceId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AddMessageRequest addMessageRequest = null;
        EventTicketObjectAddMessageResponse response = api.walletobjectsEventticketobjectAddmessage(resourceId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addMessageRequest);
        // TODO: test validations
    }

    /**
     * Returns the event ticket object with the given object ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void walletobjectsEventticketobjectGetTest() throws ApiException {
        String resourceId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        EventTicketObject response = api.walletobjectsEventticketobjectGet(resourceId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Inserts an event ticket object with the given ID and properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void walletobjectsEventticketobjectInsertTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        EventTicketObject eventTicketObject = null;
        EventTicketObject response = api.walletobjectsEventticketobjectInsert($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, eventTicketObject);
        // TODO: test validations
    }

    /**
     * Returns a list of all event ticket objects for a given issuer ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void walletobjectsEventticketobjectListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String classId = null;
        Integer maxResults = null;
        String token = null;
        EventTicketObjectListResponse response = api.walletobjectsEventticketobjectList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, classId, maxResults, token);
        // TODO: test validations
    }

    /**
     * Modifies linked offer objects for the event ticket object with the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void walletobjectsEventticketobjectModifylinkedofferobjectsTest() throws ApiException {
        String resourceId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ModifyLinkedOfferObjectsRequest modifyLinkedOfferObjectsRequest = null;
        EventTicketObject response = api.walletobjectsEventticketobjectModifylinkedofferobjects(resourceId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, modifyLinkedOfferObjectsRequest);
        // TODO: test validations
    }

    /**
     * Updates the event ticket object referenced by the given object ID. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void walletobjectsEventticketobjectPatchTest() throws ApiException {
        String resourceId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        EventTicketObject eventTicketObject = null;
        EventTicketObject response = api.walletobjectsEventticketobjectPatch(resourceId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, eventTicketObject);
        // TODO: test validations
    }

    /**
     * Updates the event ticket object referenced by the given object ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void walletobjectsEventticketobjectUpdateTest() throws ApiException {
        String resourceId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        EventTicketObject eventTicketObject = null;
        EventTicketObject response = api.walletobjectsEventticketobjectUpdate(resourceId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, eventTicketObject);
        // TODO: test validations
    }

}
