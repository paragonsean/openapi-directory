/*
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AirportInfo;
import org.openapitools.client.model.BoardingAndSeatingPolicy;
import org.openapitools.client.model.CallbackOptions;
import org.openapitools.client.model.ClassTemplateInfo;
import org.openapitools.client.model.FlightHeader;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.ImageModuleData;
import org.openapitools.client.model.InfoModuleData;
import org.openapitools.client.model.LatLongPoint;
import org.openapitools.client.model.LinksModuleData;
import org.openapitools.client.model.LocalizedString;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.Review;
import org.openapitools.client.model.SecurityAnimation;
import org.openapitools.client.model.TextModuleData;
import org.openapitools.client.model.Uri;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FlightClass
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:24.677339-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FlightClass {
  public static final String SERIALIZED_NAME_ALLOW_MULTIPLE_USERS_PER_OBJECT = "allowMultipleUsersPerObject";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ALLOW_MULTIPLE_USERS_PER_OBJECT)
  private Boolean allowMultipleUsersPerObject;

  public static final String SERIALIZED_NAME_BOARDING_AND_SEATING_POLICY = "boardingAndSeatingPolicy";
  @SerializedName(SERIALIZED_NAME_BOARDING_AND_SEATING_POLICY)
  private BoardingAndSeatingPolicy boardingAndSeatingPolicy;

  public static final String SERIALIZED_NAME_CALLBACK_OPTIONS = "callbackOptions";
  @SerializedName(SERIALIZED_NAME_CALLBACK_OPTIONS)
  private CallbackOptions callbackOptions;

  public static final String SERIALIZED_NAME_CLASS_TEMPLATE_INFO = "classTemplateInfo";
  @SerializedName(SERIALIZED_NAME_CLASS_TEMPLATE_INFO)
  private ClassTemplateInfo classTemplateInfo;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private AirportInfo destination;

  public static final String SERIALIZED_NAME_ENABLE_SMART_TAP = "enableSmartTap";
  @SerializedName(SERIALIZED_NAME_ENABLE_SMART_TAP)
  private Boolean enableSmartTap;

  public static final String SERIALIZED_NAME_FLIGHT_HEADER = "flightHeader";
  @SerializedName(SERIALIZED_NAME_FLIGHT_HEADER)
  private FlightHeader flightHeader;

  /**
   * Status of this flight. If unset, Google will compute status based on data from other sources, such as FlightStats, etc. Note: Google-computed status will not be returned in API responses.
   */
  @JsonAdapter(FlightStatusEnum.Adapter.class)
  public enum FlightStatusEnum {
    FLIGHT_STATUS_UNSPECIFIED("FLIGHT_STATUS_UNSPECIFIED"),
    
    SCHEDULED("SCHEDULED"),
    
    SCHEDULED2("scheduled"),
    
    ACTIVE("ACTIVE"),
    
    ACTIVE2("active"),
    
    LANDED("LANDED"),
    
    LANDED2("landed"),
    
    CANCELLED("CANCELLED"),
    
    CANCELLED2("cancelled"),
    
    REDIRECTED("REDIRECTED"),
    
    REDIRECTED2("redirected"),
    
    DIVERTED("DIVERTED"),
    
    DIVERTED2("diverted");

    private String value;

    FlightStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FlightStatusEnum fromValue(String value) {
      for (FlightStatusEnum b : FlightStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FlightStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FlightStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FlightStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FlightStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FlightStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FLIGHT_STATUS = "flightStatus";
  @SerializedName(SERIALIZED_NAME_FLIGHT_STATUS)
  private FlightStatusEnum flightStatus;

  public static final String SERIALIZED_NAME_HERO_IMAGE = "heroImage";
  @SerializedName(SERIALIZED_NAME_HERO_IMAGE)
  private Image heroImage;

  public static final String SERIALIZED_NAME_HEX_BACKGROUND_COLOR = "hexBackgroundColor";
  @SerializedName(SERIALIZED_NAME_HEX_BACKGROUND_COLOR)
  private String hexBackgroundColor;

  public static final String SERIALIZED_NAME_HOMEPAGE_URI = "homepageUri";
  @SerializedName(SERIALIZED_NAME_HOMEPAGE_URI)
  private Uri homepageUri;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_MODULES_DATA = "imageModulesData";
  @SerializedName(SERIALIZED_NAME_IMAGE_MODULES_DATA)
  private List<ImageModuleData> imageModulesData = new ArrayList<>();

  public static final String SERIALIZED_NAME_INFO_MODULE_DATA = "infoModuleData";
  @SerializedName(SERIALIZED_NAME_INFO_MODULE_DATA)
  private InfoModuleData infoModuleData;

  public static final String SERIALIZED_NAME_ISSUER_NAME = "issuerName";
  @SerializedName(SERIALIZED_NAME_ISSUER_NAME)
  private String issuerName;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LANGUAGE_OVERRIDE = "languageOverride";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_OVERRIDE)
  private String languageOverride;

  public static final String SERIALIZED_NAME_LINKS_MODULE_DATA = "linksModuleData";
  @SerializedName(SERIALIZED_NAME_LINKS_MODULE_DATA)
  private LinksModuleData linksModuleData;

  public static final String SERIALIZED_NAME_LOCAL_BOARDING_DATE_TIME = "localBoardingDateTime";
  @SerializedName(SERIALIZED_NAME_LOCAL_BOARDING_DATE_TIME)
  private String localBoardingDateTime;

  public static final String SERIALIZED_NAME_LOCAL_ESTIMATED_OR_ACTUAL_ARRIVAL_DATE_TIME = "localEstimatedOrActualArrivalDateTime";
  @SerializedName(SERIALIZED_NAME_LOCAL_ESTIMATED_OR_ACTUAL_ARRIVAL_DATE_TIME)
  private String localEstimatedOrActualArrivalDateTime;

  public static final String SERIALIZED_NAME_LOCAL_ESTIMATED_OR_ACTUAL_DEPARTURE_DATE_TIME = "localEstimatedOrActualDepartureDateTime";
  @SerializedName(SERIALIZED_NAME_LOCAL_ESTIMATED_OR_ACTUAL_DEPARTURE_DATE_TIME)
  private String localEstimatedOrActualDepartureDateTime;

  public static final String SERIALIZED_NAME_LOCAL_GATE_CLOSING_DATE_TIME = "localGateClosingDateTime";
  @SerializedName(SERIALIZED_NAME_LOCAL_GATE_CLOSING_DATE_TIME)
  private String localGateClosingDateTime;

  public static final String SERIALIZED_NAME_LOCAL_SCHEDULED_ARRIVAL_DATE_TIME = "localScheduledArrivalDateTime";
  @SerializedName(SERIALIZED_NAME_LOCAL_SCHEDULED_ARRIVAL_DATE_TIME)
  private String localScheduledArrivalDateTime;

  public static final String SERIALIZED_NAME_LOCAL_SCHEDULED_DEPARTURE_DATE_TIME = "localScheduledDepartureDateTime";
  @SerializedName(SERIALIZED_NAME_LOCAL_SCHEDULED_DEPARTURE_DATE_TIME)
  private String localScheduledDepartureDateTime;

  public static final String SERIALIZED_NAME_LOCALIZED_ISSUER_NAME = "localizedIssuerName";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_ISSUER_NAME)
  private LocalizedString localizedIssuerName;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<LatLongPoint> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<Message> messages = new ArrayList<>();

  /**
   * Identifies whether multiple users and devices will save the same object referencing this class.
   */
  @JsonAdapter(MultipleDevicesAndHoldersAllowedStatusEnum.Adapter.class)
  public enum MultipleDevicesAndHoldersAllowedStatusEnum {
    STATUS_UNSPECIFIED("STATUS_UNSPECIFIED"),
    
    MULTIPLE_HOLDERS("MULTIPLE_HOLDERS"),
    
    ONE_USER_ALL_DEVICES("ONE_USER_ALL_DEVICES"),
    
    ONE_USER_ONE_DEVICE("ONE_USER_ONE_DEVICE"),
    
    MULTIPLE_HOLDERS2("multipleHolders"),
    
    ONE_USER_ALL_DEVICES2("oneUserAllDevices"),
    
    ONE_USER_ONE_DEVICE2("oneUserOneDevice");

    private String value;

    MultipleDevicesAndHoldersAllowedStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MultipleDevicesAndHoldersAllowedStatusEnum fromValue(String value) {
      for (MultipleDevicesAndHoldersAllowedStatusEnum b : MultipleDevicesAndHoldersAllowedStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MultipleDevicesAndHoldersAllowedStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MultipleDevicesAndHoldersAllowedStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MultipleDevicesAndHoldersAllowedStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MultipleDevicesAndHoldersAllowedStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MultipleDevicesAndHoldersAllowedStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MULTIPLE_DEVICES_AND_HOLDERS_ALLOWED_STATUS = "multipleDevicesAndHoldersAllowedStatus";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_DEVICES_AND_HOLDERS_ALLOWED_STATUS)
  private MultipleDevicesAndHoldersAllowedStatusEnum multipleDevicesAndHoldersAllowedStatus;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private AirportInfo origin;

  public static final String SERIALIZED_NAME_REDEMPTION_ISSUERS = "redemptionIssuers";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_ISSUERS)
  private List<String> redemptionIssuers = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVIEW = "review";
  @SerializedName(SERIALIZED_NAME_REVIEW)
  private Review review;

  /**
   * Required. The status of the class. This field can be set to &#x60;draft&#x60; or &#x60;underReview&#x60; using the insert, patch, or update API calls. Once the review state is changed from &#x60;draft&#x60; it may not be changed back to &#x60;draft&#x60;. You should keep this field to &#x60;draft&#x60; when the class is under development. A &#x60;draft&#x60; class cannot be used to create any object. You should set this field to &#x60;underReview&#x60; when you believe the class is ready for use. The platform will automatically set this field to &#x60;approved&#x60; and it can be immediately used to create or migrate objects. When updating an already &#x60;approved&#x60; class you should keep setting this field to &#x60;underReview&#x60;.
   */
  @JsonAdapter(ReviewStatusEnum.Adapter.class)
  public enum ReviewStatusEnum {
    REVIEW_STATUS_UNSPECIFIED("REVIEW_STATUS_UNSPECIFIED"),
    
    UNDER_REVIEW("UNDER_REVIEW"),
    
    UNDER_REVIEW2("underReview"),
    
    APPROVED("APPROVED"),
    
    APPROVED2("approved"),
    
    REJECTED("REJECTED"),
    
    REJECTED2("rejected"),
    
    DRAFT("DRAFT"),
    
    DRAFT2("draft");

    private String value;

    ReviewStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReviewStatusEnum fromValue(String value) {
      for (ReviewStatusEnum b : ReviewStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReviewStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReviewStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReviewStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReviewStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReviewStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REVIEW_STATUS = "reviewStatus";
  @SerializedName(SERIALIZED_NAME_REVIEW_STATUS)
  private ReviewStatusEnum reviewStatus;

  public static final String SERIALIZED_NAME_SECURITY_ANIMATION = "securityAnimation";
  @SerializedName(SERIALIZED_NAME_SECURITY_ANIMATION)
  private SecurityAnimation securityAnimation;

  public static final String SERIALIZED_NAME_TEXT_MODULES_DATA = "textModulesData";
  @SerializedName(SERIALIZED_NAME_TEXT_MODULES_DATA)
  private List<TextModuleData> textModulesData = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  /**
   * View Unlock Requirement options for the boarding pass.
   */
  @JsonAdapter(ViewUnlockRequirementEnum.Adapter.class)
  public enum ViewUnlockRequirementEnum {
    VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED("VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED"),
    
    UNLOCK_NOT_REQUIRED("UNLOCK_NOT_REQUIRED"),
    
    UNLOCK_REQUIRED_TO_VIEW("UNLOCK_REQUIRED_TO_VIEW");

    private String value;

    ViewUnlockRequirementEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViewUnlockRequirementEnum fromValue(String value) {
      for (ViewUnlockRequirementEnum b : ViewUnlockRequirementEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViewUnlockRequirementEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewUnlockRequirementEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViewUnlockRequirementEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViewUnlockRequirementEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ViewUnlockRequirementEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIEW_UNLOCK_REQUIREMENT = "viewUnlockRequirement";
  @SerializedName(SERIALIZED_NAME_VIEW_UNLOCK_REQUIREMENT)
  private ViewUnlockRequirementEnum viewUnlockRequirement;

  public static final String SERIALIZED_NAME_WORD_MARK = "wordMark";
  @SerializedName(SERIALIZED_NAME_WORD_MARK)
  private Image wordMark;

  public FlightClass() {
  }

  @Deprecated
  public FlightClass allowMultipleUsersPerObject(Boolean allowMultipleUsersPerObject) {
    this.allowMultipleUsersPerObject = allowMultipleUsersPerObject;
    return this;
  }

  /**
   * Deprecated. Use &#x60;multipleDevicesAndHoldersAllowedStatus&#x60; instead.
   * @return allowMultipleUsersPerObject
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getAllowMultipleUsersPerObject() {
    return allowMultipleUsersPerObject;
  }

  @Deprecated
  public void setAllowMultipleUsersPerObject(Boolean allowMultipleUsersPerObject) {
    this.allowMultipleUsersPerObject = allowMultipleUsersPerObject;
  }


  public FlightClass boardingAndSeatingPolicy(BoardingAndSeatingPolicy boardingAndSeatingPolicy) {
    this.boardingAndSeatingPolicy = boardingAndSeatingPolicy;
    return this;
  }

  /**
   * Get boardingAndSeatingPolicy
   * @return boardingAndSeatingPolicy
   */
  @javax.annotation.Nullable
  public BoardingAndSeatingPolicy getBoardingAndSeatingPolicy() {
    return boardingAndSeatingPolicy;
  }

  public void setBoardingAndSeatingPolicy(BoardingAndSeatingPolicy boardingAndSeatingPolicy) {
    this.boardingAndSeatingPolicy = boardingAndSeatingPolicy;
  }


  public FlightClass callbackOptions(CallbackOptions callbackOptions) {
    this.callbackOptions = callbackOptions;
    return this;
  }

  /**
   * Get callbackOptions
   * @return callbackOptions
   */
  @javax.annotation.Nullable
  public CallbackOptions getCallbackOptions() {
    return callbackOptions;
  }

  public void setCallbackOptions(CallbackOptions callbackOptions) {
    this.callbackOptions = callbackOptions;
  }


  public FlightClass classTemplateInfo(ClassTemplateInfo classTemplateInfo) {
    this.classTemplateInfo = classTemplateInfo;
    return this;
  }

  /**
   * Get classTemplateInfo
   * @return classTemplateInfo
   */
  @javax.annotation.Nullable
  public ClassTemplateInfo getClassTemplateInfo() {
    return classTemplateInfo;
  }

  public void setClassTemplateInfo(ClassTemplateInfo classTemplateInfo) {
    this.classTemplateInfo = classTemplateInfo;
  }


  public FlightClass countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Country code used to display the card&#39;s country (when the user is not in that country), as well as to display localized content when content is not available in the user&#39;s locale.
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public FlightClass destination(AirportInfo destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nullable
  public AirportInfo getDestination() {
    return destination;
  }

  public void setDestination(AirportInfo destination) {
    this.destination = destination;
  }


  public FlightClass enableSmartTap(Boolean enableSmartTap) {
    this.enableSmartTap = enableSmartTap;
    return this;
  }

  /**
   * Identifies whether this class supports Smart Tap. The &#x60;redemptionIssuers&#x60; and object level &#x60;smartTapRedemptionLevel&#x60; fields must also be set up correctly in order for a pass to support Smart Tap.
   * @return enableSmartTap
   */
  @javax.annotation.Nullable
  public Boolean getEnableSmartTap() {
    return enableSmartTap;
  }

  public void setEnableSmartTap(Boolean enableSmartTap) {
    this.enableSmartTap = enableSmartTap;
  }


  public FlightClass flightHeader(FlightHeader flightHeader) {
    this.flightHeader = flightHeader;
    return this;
  }

  /**
   * Get flightHeader
   * @return flightHeader
   */
  @javax.annotation.Nullable
  public FlightHeader getFlightHeader() {
    return flightHeader;
  }

  public void setFlightHeader(FlightHeader flightHeader) {
    this.flightHeader = flightHeader;
  }


  public FlightClass flightStatus(FlightStatusEnum flightStatus) {
    this.flightStatus = flightStatus;
    return this;
  }

  /**
   * Status of this flight. If unset, Google will compute status based on data from other sources, such as FlightStats, etc. Note: Google-computed status will not be returned in API responses.
   * @return flightStatus
   */
  @javax.annotation.Nullable
  public FlightStatusEnum getFlightStatus() {
    return flightStatus;
  }

  public void setFlightStatus(FlightStatusEnum flightStatus) {
    this.flightStatus = flightStatus;
  }


  public FlightClass heroImage(Image heroImage) {
    this.heroImage = heroImage;
    return this;
  }

  /**
   * Get heroImage
   * @return heroImage
   */
  @javax.annotation.Nullable
  public Image getHeroImage() {
    return heroImage;
  }

  public void setHeroImage(Image heroImage) {
    this.heroImage = heroImage;
  }


  public FlightClass hexBackgroundColor(String hexBackgroundColor) {
    this.hexBackgroundColor = hexBackgroundColor;
    return this;
  }

  /**
   * The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as &#x60;#ffcc00&#x60;. You can also use the shorthand version of the RGB triplet which is #rgb, such as &#x60;#fc0&#x60;.
   * @return hexBackgroundColor
   */
  @javax.annotation.Nullable
  public String getHexBackgroundColor() {
    return hexBackgroundColor;
  }

  public void setHexBackgroundColor(String hexBackgroundColor) {
    this.hexBackgroundColor = hexBackgroundColor;
  }


  public FlightClass homepageUri(Uri homepageUri) {
    this.homepageUri = homepageUri;
    return this;
  }

  /**
   * Get homepageUri
   * @return homepageUri
   */
  @javax.annotation.Nullable
  public Uri getHomepageUri() {
    return homepageUri;
  }

  public void setHomepageUri(Uri homepageUri) {
    this.homepageUri = homepageUri;
  }


  public FlightClass id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Required. The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, &#39;.&#39;, &#39;_&#39;, or &#39;-&#39;.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public FlightClass imageModulesData(List<ImageModuleData> imageModulesData) {
    this.imageModulesData = imageModulesData;
    return this;
  }

  public FlightClass addImageModulesDataItem(ImageModuleData imageModulesDataItem) {
    if (this.imageModulesData == null) {
      this.imageModulesData = new ArrayList<>();
    }
    this.imageModulesData.add(imageModulesDataItem);
    return this;
  }

  /**
   * Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.
   * @return imageModulesData
   */
  @javax.annotation.Nullable
  public List<ImageModuleData> getImageModulesData() {
    return imageModulesData;
  }

  public void setImageModulesData(List<ImageModuleData> imageModulesData) {
    this.imageModulesData = imageModulesData;
  }


  public FlightClass infoModuleData(InfoModuleData infoModuleData) {
    this.infoModuleData = infoModuleData;
    return this;
  }

  /**
   * Get infoModuleData
   * @return infoModuleData
   */
  @javax.annotation.Nullable
  public InfoModuleData getInfoModuleData() {
    return infoModuleData;
  }

  public void setInfoModuleData(InfoModuleData infoModuleData) {
    this.infoModuleData = infoModuleData;
  }


  public FlightClass issuerName(String issuerName) {
    this.issuerName = issuerName;
    return this;
  }

  /**
   * Required. The issuer name. Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.
   * @return issuerName
   */
  @javax.annotation.Nullable
  public String getIssuerName() {
    return issuerName;
  }

  public void setIssuerName(String issuerName) {
    this.issuerName = issuerName;
  }


  @Deprecated
  public FlightClass kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string &#x60;\&quot;walletobjects#flightClass\&quot;&#x60;.
   * @return kind
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  @Deprecated
  public void setKind(String kind) {
    this.kind = kind;
  }


  public FlightClass languageOverride(String languageOverride) {
    this.languageOverride = languageOverride;
    return this;
  }

  /**
   * If this field is present, boarding passes served to a user&#39;s device will always be in this language. Represents the BCP 47 language tag. Example values are \&quot;en-US\&quot;, \&quot;en-GB\&quot;, \&quot;de\&quot;, or \&quot;de-AT\&quot;.
   * @return languageOverride
   */
  @javax.annotation.Nullable
  public String getLanguageOverride() {
    return languageOverride;
  }

  public void setLanguageOverride(String languageOverride) {
    this.languageOverride = languageOverride;
  }


  public FlightClass linksModuleData(LinksModuleData linksModuleData) {
    this.linksModuleData = linksModuleData;
    return this;
  }

  /**
   * Get linksModuleData
   * @return linksModuleData
   */
  @javax.annotation.Nullable
  public LinksModuleData getLinksModuleData() {
    return linksModuleData;
  }

  public void setLinksModuleData(LinksModuleData linksModuleData) {
    this.linksModuleData = linksModuleData;
  }


  public FlightClass localBoardingDateTime(String localBoardingDateTime) {
    this.localBoardingDateTime = localBoardingDateTime;
    return this;
  }

  /**
   * The boarding time as it would be printed on the boarding pass. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: &#x60;2027-03-05T06:30:00&#x60; This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on departure airport. If this is not set, Google will set it based on data from other sources.
   * @return localBoardingDateTime
   */
  @javax.annotation.Nullable
  public String getLocalBoardingDateTime() {
    return localBoardingDateTime;
  }

  public void setLocalBoardingDateTime(String localBoardingDateTime) {
    this.localBoardingDateTime = localBoardingDateTime;
  }


  public FlightClass localEstimatedOrActualArrivalDateTime(String localEstimatedOrActualArrivalDateTime) {
    this.localEstimatedOrActualArrivalDateTime = localEstimatedOrActualArrivalDateTime;
    return this;
  }

  /**
   * The estimated time the aircraft plans to reach the destination gate (not the runway) or the actual time it reached the gate. This field should be set if at least one of the below is true: - It differs from the scheduled time. Google will use it to calculate the delay. - The aircraft already arrived at the gate. Google will use it to inform the user that the flight has arrived at the gate. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: &#x60;2027-03-05T06:30:00&#x60; This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on arrival airport. If this is not set, Google will set it based on data from other sources.
   * @return localEstimatedOrActualArrivalDateTime
   */
  @javax.annotation.Nullable
  public String getLocalEstimatedOrActualArrivalDateTime() {
    return localEstimatedOrActualArrivalDateTime;
  }

  public void setLocalEstimatedOrActualArrivalDateTime(String localEstimatedOrActualArrivalDateTime) {
    this.localEstimatedOrActualArrivalDateTime = localEstimatedOrActualArrivalDateTime;
  }


  public FlightClass localEstimatedOrActualDepartureDateTime(String localEstimatedOrActualDepartureDateTime) {
    this.localEstimatedOrActualDepartureDateTime = localEstimatedOrActualDepartureDateTime;
    return this;
  }

  /**
   * The estimated time the aircraft plans to pull from the gate or the actual time the aircraft already pulled from the gate. Note: This is not the runway time. This field should be set if at least one of the below is true: - It differs from the scheduled time. Google will use it to calculate the delay. - The aircraft already pulled from the gate. Google will use it to inform the user when the flight actually departed. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: &#x60;2027-03-05T06:30:00&#x60; This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on departure airport. If this is not set, Google will set it based on data from other sources.
   * @return localEstimatedOrActualDepartureDateTime
   */
  @javax.annotation.Nullable
  public String getLocalEstimatedOrActualDepartureDateTime() {
    return localEstimatedOrActualDepartureDateTime;
  }

  public void setLocalEstimatedOrActualDepartureDateTime(String localEstimatedOrActualDepartureDateTime) {
    this.localEstimatedOrActualDepartureDateTime = localEstimatedOrActualDepartureDateTime;
  }


  public FlightClass localGateClosingDateTime(String localGateClosingDateTime) {
    this.localGateClosingDateTime = localGateClosingDateTime;
    return this;
  }

  /**
   * The gate closing time as it would be printed on the boarding pass. Do not set this field if you do not want to print it in the boarding pass. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: &#x60;2027-03-05T06:30:00&#x60; This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on departure airport.
   * @return localGateClosingDateTime
   */
  @javax.annotation.Nullable
  public String getLocalGateClosingDateTime() {
    return localGateClosingDateTime;
  }

  public void setLocalGateClosingDateTime(String localGateClosingDateTime) {
    this.localGateClosingDateTime = localGateClosingDateTime;
  }


  public FlightClass localScheduledArrivalDateTime(String localScheduledArrivalDateTime) {
    this.localScheduledArrivalDateTime = localScheduledArrivalDateTime;
    return this;
  }

  /**
   * The scheduled time the aircraft plans to reach the destination gate (not the runway). Note: This field should not change too close to the flight time. For updates to departure times (delays, etc), please set &#x60;localEstimatedOrActualArrivalDateTime&#x60;. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: &#x60;2027-03-05T06:30:00&#x60; This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on arrival airport. If this is not set, Google will set it based on data from other sources.
   * @return localScheduledArrivalDateTime
   */
  @javax.annotation.Nullable
  public String getLocalScheduledArrivalDateTime() {
    return localScheduledArrivalDateTime;
  }

  public void setLocalScheduledArrivalDateTime(String localScheduledArrivalDateTime) {
    this.localScheduledArrivalDateTime = localScheduledArrivalDateTime;
  }


  public FlightClass localScheduledDepartureDateTime(String localScheduledDepartureDateTime) {
    this.localScheduledDepartureDateTime = localScheduledDepartureDateTime;
    return this;
  }

  /**
   * Required. The scheduled date and time when the aircraft is expected to depart the gate (not the runway) Note: This field should not change too close to the departure time. For updates to departure times (delays, etc), please set &#x60;localEstimatedOrActualDepartureDateTime&#x60;. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: &#x60;2027-03-05T06:30:00&#x60; This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on departure airport.
   * @return localScheduledDepartureDateTime
   */
  @javax.annotation.Nullable
  public String getLocalScheduledDepartureDateTime() {
    return localScheduledDepartureDateTime;
  }

  public void setLocalScheduledDepartureDateTime(String localScheduledDepartureDateTime) {
    this.localScheduledDepartureDateTime = localScheduledDepartureDateTime;
  }


  public FlightClass localizedIssuerName(LocalizedString localizedIssuerName) {
    this.localizedIssuerName = localizedIssuerName;
    return this;
  }

  /**
   * Get localizedIssuerName
   * @return localizedIssuerName
   */
  @javax.annotation.Nullable
  public LocalizedString getLocalizedIssuerName() {
    return localizedIssuerName;
  }

  public void setLocalizedIssuerName(LocalizedString localizedIssuerName) {
    this.localizedIssuerName = localizedIssuerName;
  }


  public FlightClass locations(List<LatLongPoint> locations) {
    this.locations = locations;
    return this;
  }

  public FlightClass addLocationsItem(LatLongPoint locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * Note: This field is currently not supported to trigger geo notifications.
   * @return locations
   */
  @javax.annotation.Nullable
  public List<LatLongPoint> getLocations() {
    return locations;
  }

  public void setLocations(List<LatLongPoint> locations) {
    this.locations = locations;
  }


  public FlightClass messages(List<Message> messages) {
    this.messages = messages;
    return this;
  }

  public FlightClass addMessagesItem(Message messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

  /**
   * An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.
   * @return messages
   */
  @javax.annotation.Nullable
  public List<Message> getMessages() {
    return messages;
  }

  public void setMessages(List<Message> messages) {
    this.messages = messages;
  }


  public FlightClass multipleDevicesAndHoldersAllowedStatus(MultipleDevicesAndHoldersAllowedStatusEnum multipleDevicesAndHoldersAllowedStatus) {
    this.multipleDevicesAndHoldersAllowedStatus = multipleDevicesAndHoldersAllowedStatus;
    return this;
  }

  /**
   * Identifies whether multiple users and devices will save the same object referencing this class.
   * @return multipleDevicesAndHoldersAllowedStatus
   */
  @javax.annotation.Nullable
  public MultipleDevicesAndHoldersAllowedStatusEnum getMultipleDevicesAndHoldersAllowedStatus() {
    return multipleDevicesAndHoldersAllowedStatus;
  }

  public void setMultipleDevicesAndHoldersAllowedStatus(MultipleDevicesAndHoldersAllowedStatusEnum multipleDevicesAndHoldersAllowedStatus) {
    this.multipleDevicesAndHoldersAllowedStatus = multipleDevicesAndHoldersAllowedStatus;
  }


  public FlightClass origin(AirportInfo origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Get origin
   * @return origin
   */
  @javax.annotation.Nullable
  public AirportInfo getOrigin() {
    return origin;
  }

  public void setOrigin(AirportInfo origin) {
    this.origin = origin;
  }


  public FlightClass redemptionIssuers(List<String> redemptionIssuers) {
    this.redemptionIssuers = redemptionIssuers;
    return this;
  }

  public FlightClass addRedemptionIssuersItem(String redemptionIssuersItem) {
    if (this.redemptionIssuers == null) {
      this.redemptionIssuers = new ArrayList<>();
    }
    this.redemptionIssuers.add(redemptionIssuersItem);
    return this;
  }

  /**
   * Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The &#x60;enableSmartTap&#x60; and object level &#x60;smartTapRedemptionLevel&#x60; fields must also be set up correctly in order for a pass to support Smart Tap.
   * @return redemptionIssuers
   */
  @javax.annotation.Nullable
  public List<String> getRedemptionIssuers() {
    return redemptionIssuers;
  }

  public void setRedemptionIssuers(List<String> redemptionIssuers) {
    this.redemptionIssuers = redemptionIssuers;
  }


  public FlightClass review(Review review) {
    this.review = review;
    return this;
  }

  /**
   * Get review
   * @return review
   */
  @javax.annotation.Nullable
  public Review getReview() {
    return review;
  }

  public void setReview(Review review) {
    this.review = review;
  }


  public FlightClass reviewStatus(ReviewStatusEnum reviewStatus) {
    this.reviewStatus = reviewStatus;
    return this;
  }

  /**
   * Required. The status of the class. This field can be set to &#x60;draft&#x60; or &#x60;underReview&#x60; using the insert, patch, or update API calls. Once the review state is changed from &#x60;draft&#x60; it may not be changed back to &#x60;draft&#x60;. You should keep this field to &#x60;draft&#x60; when the class is under development. A &#x60;draft&#x60; class cannot be used to create any object. You should set this field to &#x60;underReview&#x60; when you believe the class is ready for use. The platform will automatically set this field to &#x60;approved&#x60; and it can be immediately used to create or migrate objects. When updating an already &#x60;approved&#x60; class you should keep setting this field to &#x60;underReview&#x60;.
   * @return reviewStatus
   */
  @javax.annotation.Nullable
  public ReviewStatusEnum getReviewStatus() {
    return reviewStatus;
  }

  public void setReviewStatus(ReviewStatusEnum reviewStatus) {
    this.reviewStatus = reviewStatus;
  }


  public FlightClass securityAnimation(SecurityAnimation securityAnimation) {
    this.securityAnimation = securityAnimation;
    return this;
  }

  /**
   * Get securityAnimation
   * @return securityAnimation
   */
  @javax.annotation.Nullable
  public SecurityAnimation getSecurityAnimation() {
    return securityAnimation;
  }

  public void setSecurityAnimation(SecurityAnimation securityAnimation) {
    this.securityAnimation = securityAnimation;
  }


  public FlightClass textModulesData(List<TextModuleData> textModulesData) {
    this.textModulesData = textModulesData;
    return this;
  }

  public FlightClass addTextModulesDataItem(TextModuleData textModulesDataItem) {
    if (this.textModulesData == null) {
      this.textModulesData = new ArrayList<>();
    }
    this.textModulesData.add(textModulesDataItem);
    return this;
  }

  /**
   * Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.
   * @return textModulesData
   */
  @javax.annotation.Nullable
  public List<TextModuleData> getTextModulesData() {
    return textModulesData;
  }

  public void setTextModulesData(List<TextModuleData> textModulesData) {
    this.textModulesData = textModulesData;
  }


  @Deprecated
  public FlightClass version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Deprecated
   * @return version
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  @Deprecated
  public void setVersion(String version) {
    this.version = version;
  }


  public FlightClass viewUnlockRequirement(ViewUnlockRequirementEnum viewUnlockRequirement) {
    this.viewUnlockRequirement = viewUnlockRequirement;
    return this;
  }

  /**
   * View Unlock Requirement options for the boarding pass.
   * @return viewUnlockRequirement
   */
  @javax.annotation.Nullable
  public ViewUnlockRequirementEnum getViewUnlockRequirement() {
    return viewUnlockRequirement;
  }

  public void setViewUnlockRequirement(ViewUnlockRequirementEnum viewUnlockRequirement) {
    this.viewUnlockRequirement = viewUnlockRequirement;
  }


  public FlightClass wordMark(Image wordMark) {
    this.wordMark = wordMark;
    return this;
  }

  /**
   * Get wordMark
   * @return wordMark
   */
  @javax.annotation.Nullable
  public Image getWordMark() {
    return wordMark;
  }

  public void setWordMark(Image wordMark) {
    this.wordMark = wordMark;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlightClass flightClass = (FlightClass) o;
    return Objects.equals(this.allowMultipleUsersPerObject, flightClass.allowMultipleUsersPerObject) &&
        Objects.equals(this.boardingAndSeatingPolicy, flightClass.boardingAndSeatingPolicy) &&
        Objects.equals(this.callbackOptions, flightClass.callbackOptions) &&
        Objects.equals(this.classTemplateInfo, flightClass.classTemplateInfo) &&
        Objects.equals(this.countryCode, flightClass.countryCode) &&
        Objects.equals(this.destination, flightClass.destination) &&
        Objects.equals(this.enableSmartTap, flightClass.enableSmartTap) &&
        Objects.equals(this.flightHeader, flightClass.flightHeader) &&
        Objects.equals(this.flightStatus, flightClass.flightStatus) &&
        Objects.equals(this.heroImage, flightClass.heroImage) &&
        Objects.equals(this.hexBackgroundColor, flightClass.hexBackgroundColor) &&
        Objects.equals(this.homepageUri, flightClass.homepageUri) &&
        Objects.equals(this.id, flightClass.id) &&
        Objects.equals(this.imageModulesData, flightClass.imageModulesData) &&
        Objects.equals(this.infoModuleData, flightClass.infoModuleData) &&
        Objects.equals(this.issuerName, flightClass.issuerName) &&
        Objects.equals(this.kind, flightClass.kind) &&
        Objects.equals(this.languageOverride, flightClass.languageOverride) &&
        Objects.equals(this.linksModuleData, flightClass.linksModuleData) &&
        Objects.equals(this.localBoardingDateTime, flightClass.localBoardingDateTime) &&
        Objects.equals(this.localEstimatedOrActualArrivalDateTime, flightClass.localEstimatedOrActualArrivalDateTime) &&
        Objects.equals(this.localEstimatedOrActualDepartureDateTime, flightClass.localEstimatedOrActualDepartureDateTime) &&
        Objects.equals(this.localGateClosingDateTime, flightClass.localGateClosingDateTime) &&
        Objects.equals(this.localScheduledArrivalDateTime, flightClass.localScheduledArrivalDateTime) &&
        Objects.equals(this.localScheduledDepartureDateTime, flightClass.localScheduledDepartureDateTime) &&
        Objects.equals(this.localizedIssuerName, flightClass.localizedIssuerName) &&
        Objects.equals(this.locations, flightClass.locations) &&
        Objects.equals(this.messages, flightClass.messages) &&
        Objects.equals(this.multipleDevicesAndHoldersAllowedStatus, flightClass.multipleDevicesAndHoldersAllowedStatus) &&
        Objects.equals(this.origin, flightClass.origin) &&
        Objects.equals(this.redemptionIssuers, flightClass.redemptionIssuers) &&
        Objects.equals(this.review, flightClass.review) &&
        Objects.equals(this.reviewStatus, flightClass.reviewStatus) &&
        Objects.equals(this.securityAnimation, flightClass.securityAnimation) &&
        Objects.equals(this.textModulesData, flightClass.textModulesData) &&
        Objects.equals(this.version, flightClass.version) &&
        Objects.equals(this.viewUnlockRequirement, flightClass.viewUnlockRequirement) &&
        Objects.equals(this.wordMark, flightClass.wordMark);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowMultipleUsersPerObject, boardingAndSeatingPolicy, callbackOptions, classTemplateInfo, countryCode, destination, enableSmartTap, flightHeader, flightStatus, heroImage, hexBackgroundColor, homepageUri, id, imageModulesData, infoModuleData, issuerName, kind, languageOverride, linksModuleData, localBoardingDateTime, localEstimatedOrActualArrivalDateTime, localEstimatedOrActualDepartureDateTime, localGateClosingDateTime, localScheduledArrivalDateTime, localScheduledDepartureDateTime, localizedIssuerName, locations, messages, multipleDevicesAndHoldersAllowedStatus, origin, redemptionIssuers, review, reviewStatus, securityAnimation, textModulesData, version, viewUnlockRequirement, wordMark);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlightClass {\n");
    sb.append("    allowMultipleUsersPerObject: ").append(toIndentedString(allowMultipleUsersPerObject)).append("\n");
    sb.append("    boardingAndSeatingPolicy: ").append(toIndentedString(boardingAndSeatingPolicy)).append("\n");
    sb.append("    callbackOptions: ").append(toIndentedString(callbackOptions)).append("\n");
    sb.append("    classTemplateInfo: ").append(toIndentedString(classTemplateInfo)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    enableSmartTap: ").append(toIndentedString(enableSmartTap)).append("\n");
    sb.append("    flightHeader: ").append(toIndentedString(flightHeader)).append("\n");
    sb.append("    flightStatus: ").append(toIndentedString(flightStatus)).append("\n");
    sb.append("    heroImage: ").append(toIndentedString(heroImage)).append("\n");
    sb.append("    hexBackgroundColor: ").append(toIndentedString(hexBackgroundColor)).append("\n");
    sb.append("    homepageUri: ").append(toIndentedString(homepageUri)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageModulesData: ").append(toIndentedString(imageModulesData)).append("\n");
    sb.append("    infoModuleData: ").append(toIndentedString(infoModuleData)).append("\n");
    sb.append("    issuerName: ").append(toIndentedString(issuerName)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    languageOverride: ").append(toIndentedString(languageOverride)).append("\n");
    sb.append("    linksModuleData: ").append(toIndentedString(linksModuleData)).append("\n");
    sb.append("    localBoardingDateTime: ").append(toIndentedString(localBoardingDateTime)).append("\n");
    sb.append("    localEstimatedOrActualArrivalDateTime: ").append(toIndentedString(localEstimatedOrActualArrivalDateTime)).append("\n");
    sb.append("    localEstimatedOrActualDepartureDateTime: ").append(toIndentedString(localEstimatedOrActualDepartureDateTime)).append("\n");
    sb.append("    localGateClosingDateTime: ").append(toIndentedString(localGateClosingDateTime)).append("\n");
    sb.append("    localScheduledArrivalDateTime: ").append(toIndentedString(localScheduledArrivalDateTime)).append("\n");
    sb.append("    localScheduledDepartureDateTime: ").append(toIndentedString(localScheduledDepartureDateTime)).append("\n");
    sb.append("    localizedIssuerName: ").append(toIndentedString(localizedIssuerName)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    multipleDevicesAndHoldersAllowedStatus: ").append(toIndentedString(multipleDevicesAndHoldersAllowedStatus)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    redemptionIssuers: ").append(toIndentedString(redemptionIssuers)).append("\n");
    sb.append("    review: ").append(toIndentedString(review)).append("\n");
    sb.append("    reviewStatus: ").append(toIndentedString(reviewStatus)).append("\n");
    sb.append("    securityAnimation: ").append(toIndentedString(securityAnimation)).append("\n");
    sb.append("    textModulesData: ").append(toIndentedString(textModulesData)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    viewUnlockRequirement: ").append(toIndentedString(viewUnlockRequirement)).append("\n");
    sb.append("    wordMark: ").append(toIndentedString(wordMark)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowMultipleUsersPerObject");
    openapiFields.add("boardingAndSeatingPolicy");
    openapiFields.add("callbackOptions");
    openapiFields.add("classTemplateInfo");
    openapiFields.add("countryCode");
    openapiFields.add("destination");
    openapiFields.add("enableSmartTap");
    openapiFields.add("flightHeader");
    openapiFields.add("flightStatus");
    openapiFields.add("heroImage");
    openapiFields.add("hexBackgroundColor");
    openapiFields.add("homepageUri");
    openapiFields.add("id");
    openapiFields.add("imageModulesData");
    openapiFields.add("infoModuleData");
    openapiFields.add("issuerName");
    openapiFields.add("kind");
    openapiFields.add("languageOverride");
    openapiFields.add("linksModuleData");
    openapiFields.add("localBoardingDateTime");
    openapiFields.add("localEstimatedOrActualArrivalDateTime");
    openapiFields.add("localEstimatedOrActualDepartureDateTime");
    openapiFields.add("localGateClosingDateTime");
    openapiFields.add("localScheduledArrivalDateTime");
    openapiFields.add("localScheduledDepartureDateTime");
    openapiFields.add("localizedIssuerName");
    openapiFields.add("locations");
    openapiFields.add("messages");
    openapiFields.add("multipleDevicesAndHoldersAllowedStatus");
    openapiFields.add("origin");
    openapiFields.add("redemptionIssuers");
    openapiFields.add("review");
    openapiFields.add("reviewStatus");
    openapiFields.add("securityAnimation");
    openapiFields.add("textModulesData");
    openapiFields.add("version");
    openapiFields.add("viewUnlockRequirement");
    openapiFields.add("wordMark");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FlightClass
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlightClass.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlightClass is not found in the empty JSON string", FlightClass.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlightClass.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlightClass` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `boardingAndSeatingPolicy`
      if (jsonObj.get("boardingAndSeatingPolicy") != null && !jsonObj.get("boardingAndSeatingPolicy").isJsonNull()) {
        BoardingAndSeatingPolicy.validateJsonElement(jsonObj.get("boardingAndSeatingPolicy"));
      }
      // validate the optional field `callbackOptions`
      if (jsonObj.get("callbackOptions") != null && !jsonObj.get("callbackOptions").isJsonNull()) {
        CallbackOptions.validateJsonElement(jsonObj.get("callbackOptions"));
      }
      // validate the optional field `classTemplateInfo`
      if (jsonObj.get("classTemplateInfo") != null && !jsonObj.get("classTemplateInfo").isJsonNull()) {
        ClassTemplateInfo.validateJsonElement(jsonObj.get("classTemplateInfo"));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      // validate the optional field `destination`
      if (jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) {
        AirportInfo.validateJsonElement(jsonObj.get("destination"));
      }
      // validate the optional field `flightHeader`
      if (jsonObj.get("flightHeader") != null && !jsonObj.get("flightHeader").isJsonNull()) {
        FlightHeader.validateJsonElement(jsonObj.get("flightHeader"));
      }
      if ((jsonObj.get("flightStatus") != null && !jsonObj.get("flightStatus").isJsonNull()) && !jsonObj.get("flightStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flightStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flightStatus").toString()));
      }
      // validate the optional field `flightStatus`
      if (jsonObj.get("flightStatus") != null && !jsonObj.get("flightStatus").isJsonNull()) {
        FlightStatusEnum.validateJsonElement(jsonObj.get("flightStatus"));
      }
      // validate the optional field `heroImage`
      if (jsonObj.get("heroImage") != null && !jsonObj.get("heroImage").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("heroImage"));
      }
      if ((jsonObj.get("hexBackgroundColor") != null && !jsonObj.get("hexBackgroundColor").isJsonNull()) && !jsonObj.get("hexBackgroundColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hexBackgroundColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hexBackgroundColor").toString()));
      }
      // validate the optional field `homepageUri`
      if (jsonObj.get("homepageUri") != null && !jsonObj.get("homepageUri").isJsonNull()) {
        Uri.validateJsonElement(jsonObj.get("homepageUri"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("imageModulesData") != null && !jsonObj.get("imageModulesData").isJsonNull()) {
        JsonArray jsonArrayimageModulesData = jsonObj.getAsJsonArray("imageModulesData");
        if (jsonArrayimageModulesData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("imageModulesData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `imageModulesData` to be an array in the JSON string but got `%s`", jsonObj.get("imageModulesData").toString()));
          }

          // validate the optional field `imageModulesData` (array)
          for (int i = 0; i < jsonArrayimageModulesData.size(); i++) {
            ImageModuleData.validateJsonElement(jsonArrayimageModulesData.get(i));
          };
        }
      }
      // validate the optional field `infoModuleData`
      if (jsonObj.get("infoModuleData") != null && !jsonObj.get("infoModuleData").isJsonNull()) {
        InfoModuleData.validateJsonElement(jsonObj.get("infoModuleData"));
      }
      if ((jsonObj.get("issuerName") != null && !jsonObj.get("issuerName").isJsonNull()) && !jsonObj.get("issuerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerName").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("languageOverride") != null && !jsonObj.get("languageOverride").isJsonNull()) && !jsonObj.get("languageOverride").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageOverride` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageOverride").toString()));
      }
      // validate the optional field `linksModuleData`
      if (jsonObj.get("linksModuleData") != null && !jsonObj.get("linksModuleData").isJsonNull()) {
        LinksModuleData.validateJsonElement(jsonObj.get("linksModuleData"));
      }
      if ((jsonObj.get("localBoardingDateTime") != null && !jsonObj.get("localBoardingDateTime").isJsonNull()) && !jsonObj.get("localBoardingDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localBoardingDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localBoardingDateTime").toString()));
      }
      if ((jsonObj.get("localEstimatedOrActualArrivalDateTime") != null && !jsonObj.get("localEstimatedOrActualArrivalDateTime").isJsonNull()) && !jsonObj.get("localEstimatedOrActualArrivalDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localEstimatedOrActualArrivalDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localEstimatedOrActualArrivalDateTime").toString()));
      }
      if ((jsonObj.get("localEstimatedOrActualDepartureDateTime") != null && !jsonObj.get("localEstimatedOrActualDepartureDateTime").isJsonNull()) && !jsonObj.get("localEstimatedOrActualDepartureDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localEstimatedOrActualDepartureDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localEstimatedOrActualDepartureDateTime").toString()));
      }
      if ((jsonObj.get("localGateClosingDateTime") != null && !jsonObj.get("localGateClosingDateTime").isJsonNull()) && !jsonObj.get("localGateClosingDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localGateClosingDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localGateClosingDateTime").toString()));
      }
      if ((jsonObj.get("localScheduledArrivalDateTime") != null && !jsonObj.get("localScheduledArrivalDateTime").isJsonNull()) && !jsonObj.get("localScheduledArrivalDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localScheduledArrivalDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localScheduledArrivalDateTime").toString()));
      }
      if ((jsonObj.get("localScheduledDepartureDateTime") != null && !jsonObj.get("localScheduledDepartureDateTime").isJsonNull()) && !jsonObj.get("localScheduledDepartureDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localScheduledDepartureDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localScheduledDepartureDateTime").toString()));
      }
      // validate the optional field `localizedIssuerName`
      if (jsonObj.get("localizedIssuerName") != null && !jsonObj.get("localizedIssuerName").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("localizedIssuerName"));
      }
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull()) {
        JsonArray jsonArraylocations = jsonObj.getAsJsonArray("locations");
        if (jsonArraylocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
          }

          // validate the optional field `locations` (array)
          for (int i = 0; i < jsonArraylocations.size(); i++) {
            LatLongPoint.validateJsonElement(jsonArraylocations.get(i));
          };
        }
      }
      if (jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) {
        JsonArray jsonArraymessages = jsonObj.getAsJsonArray("messages");
        if (jsonArraymessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
          }

          // validate the optional field `messages` (array)
          for (int i = 0; i < jsonArraymessages.size(); i++) {
            Message.validateJsonElement(jsonArraymessages.get(i));
          };
        }
      }
      if ((jsonObj.get("multipleDevicesAndHoldersAllowedStatus") != null && !jsonObj.get("multipleDevicesAndHoldersAllowedStatus").isJsonNull()) && !jsonObj.get("multipleDevicesAndHoldersAllowedStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `multipleDevicesAndHoldersAllowedStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("multipleDevicesAndHoldersAllowedStatus").toString()));
      }
      // validate the optional field `multipleDevicesAndHoldersAllowedStatus`
      if (jsonObj.get("multipleDevicesAndHoldersAllowedStatus") != null && !jsonObj.get("multipleDevicesAndHoldersAllowedStatus").isJsonNull()) {
        MultipleDevicesAndHoldersAllowedStatusEnum.validateJsonElement(jsonObj.get("multipleDevicesAndHoldersAllowedStatus"));
      }
      // validate the optional field `origin`
      if (jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) {
        AirportInfo.validateJsonElement(jsonObj.get("origin"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("redemptionIssuers") != null && !jsonObj.get("redemptionIssuers").isJsonNull() && !jsonObj.get("redemptionIssuers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redemptionIssuers` to be an array in the JSON string but got `%s`", jsonObj.get("redemptionIssuers").toString()));
      }
      // validate the optional field `review`
      if (jsonObj.get("review") != null && !jsonObj.get("review").isJsonNull()) {
        Review.validateJsonElement(jsonObj.get("review"));
      }
      if ((jsonObj.get("reviewStatus") != null && !jsonObj.get("reviewStatus").isJsonNull()) && !jsonObj.get("reviewStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewStatus").toString()));
      }
      // validate the optional field `reviewStatus`
      if (jsonObj.get("reviewStatus") != null && !jsonObj.get("reviewStatus").isJsonNull()) {
        ReviewStatusEnum.validateJsonElement(jsonObj.get("reviewStatus"));
      }
      // validate the optional field `securityAnimation`
      if (jsonObj.get("securityAnimation") != null && !jsonObj.get("securityAnimation").isJsonNull()) {
        SecurityAnimation.validateJsonElement(jsonObj.get("securityAnimation"));
      }
      if (jsonObj.get("textModulesData") != null && !jsonObj.get("textModulesData").isJsonNull()) {
        JsonArray jsonArraytextModulesData = jsonObj.getAsJsonArray("textModulesData");
        if (jsonArraytextModulesData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("textModulesData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `textModulesData` to be an array in the JSON string but got `%s`", jsonObj.get("textModulesData").toString()));
          }

          // validate the optional field `textModulesData` (array)
          for (int i = 0; i < jsonArraytextModulesData.size(); i++) {
            TextModuleData.validateJsonElement(jsonArraytextModulesData.get(i));
          };
        }
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("viewUnlockRequirement") != null && !jsonObj.get("viewUnlockRequirement").isJsonNull()) && !jsonObj.get("viewUnlockRequirement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewUnlockRequirement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewUnlockRequirement").toString()));
      }
      // validate the optional field `viewUnlockRequirement`
      if (jsonObj.get("viewUnlockRequirement") != null && !jsonObj.get("viewUnlockRequirement").isJsonNull()) {
        ViewUnlockRequirementEnum.validateJsonElement(jsonObj.get("viewUnlockRequirement"));
      }
      // validate the optional field `wordMark`
      if (jsonObj.get("wordMark") != null && !jsonObj.get("wordMark").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("wordMark"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlightClass.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlightClass' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlightClass> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlightClass.class));

       return (TypeAdapter<T>) new TypeAdapter<FlightClass>() {
           @Override
           public void write(JsonWriter out, FlightClass value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlightClass read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FlightClass given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FlightClass
   * @throws IOException if the JSON string is invalid with respect to FlightClass
   */
  public static FlightClass fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlightClass.class);
  }

  /**
   * Convert an instance of FlightClass to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

