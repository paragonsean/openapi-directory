/*
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CallbackOptions;
import org.openapitools.client.model.ClassTemplateInfo;
import org.openapitools.client.model.EventDateTime;
import org.openapitools.client.model.EventVenue;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.ImageModuleData;
import org.openapitools.client.model.InfoModuleData;
import org.openapitools.client.model.LatLongPoint;
import org.openapitools.client.model.LinksModuleData;
import org.openapitools.client.model.LocalizedString;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.Review;
import org.openapitools.client.model.SecurityAnimation;
import org.openapitools.client.model.TextModuleData;
import org.openapitools.client.model.Uri;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EventTicketClass
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:24.677339-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventTicketClass {
  public static final String SERIALIZED_NAME_ALLOW_MULTIPLE_USERS_PER_OBJECT = "allowMultipleUsersPerObject";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ALLOW_MULTIPLE_USERS_PER_OBJECT)
  private Boolean allowMultipleUsersPerObject;

  public static final String SERIALIZED_NAME_CALLBACK_OPTIONS = "callbackOptions";
  @SerializedName(SERIALIZED_NAME_CALLBACK_OPTIONS)
  private CallbackOptions callbackOptions;

  public static final String SERIALIZED_NAME_CLASS_TEMPLATE_INFO = "classTemplateInfo";
  @SerializedName(SERIALIZED_NAME_CLASS_TEMPLATE_INFO)
  private ClassTemplateInfo classTemplateInfo;

  /**
   * The label to use for the confirmation code value (&#x60;eventTicketObject.reservationInfo.confirmationCode&#x60;) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both &#x60;confirmationCodeLabel&#x60; and &#x60;customConfirmationCodeLabel&#x60; may not be set. If neither is set, the label will default to \&quot;Confirmation Code\&quot;, localized. If the confirmation code field is unset, this label will not be used.
   */
  @JsonAdapter(ConfirmationCodeLabelEnum.Adapter.class)
  public enum ConfirmationCodeLabelEnum {
    CONFIRMATION_CODE_LABEL_UNSPECIFIED("CONFIRMATION_CODE_LABEL_UNSPECIFIED"),
    
    CONFIRMATION_CODE("CONFIRMATION_CODE"),
    
    CONFIRMATION_CODE2("confirmationCode"),
    
    CONFIRMATION_NUMBER("CONFIRMATION_NUMBER"),
    
    CONFIRMATION_NUMBER2("confirmationNumber"),
    
    ORDER_NUMBER("ORDER_NUMBER"),
    
    ORDER_NUMBER2("orderNumber"),
    
    RESERVATION_NUMBER("RESERVATION_NUMBER"),
    
    RESERVATION_NUMBER2("reservationNumber");

    private String value;

    ConfirmationCodeLabelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConfirmationCodeLabelEnum fromValue(String value) {
      for (ConfirmationCodeLabelEnum b : ConfirmationCodeLabelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConfirmationCodeLabelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConfirmationCodeLabelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConfirmationCodeLabelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConfirmationCodeLabelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConfirmationCodeLabelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONFIRMATION_CODE_LABEL = "confirmationCodeLabel";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_CODE_LABEL)
  private ConfirmationCodeLabelEnum confirmationCodeLabel;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_CUSTOM_CONFIRMATION_CODE_LABEL = "customConfirmationCodeLabel";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CONFIRMATION_CODE_LABEL)
  private LocalizedString customConfirmationCodeLabel;

  public static final String SERIALIZED_NAME_CUSTOM_GATE_LABEL = "customGateLabel";
  @SerializedName(SERIALIZED_NAME_CUSTOM_GATE_LABEL)
  private LocalizedString customGateLabel;

  public static final String SERIALIZED_NAME_CUSTOM_ROW_LABEL = "customRowLabel";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ROW_LABEL)
  private LocalizedString customRowLabel;

  public static final String SERIALIZED_NAME_CUSTOM_SEAT_LABEL = "customSeatLabel";
  @SerializedName(SERIALIZED_NAME_CUSTOM_SEAT_LABEL)
  private LocalizedString customSeatLabel;

  public static final String SERIALIZED_NAME_CUSTOM_SECTION_LABEL = "customSectionLabel";
  @SerializedName(SERIALIZED_NAME_CUSTOM_SECTION_LABEL)
  private LocalizedString customSectionLabel;

  public static final String SERIALIZED_NAME_DATE_TIME = "dateTime";
  @SerializedName(SERIALIZED_NAME_DATE_TIME)
  private EventDateTime dateTime;

  public static final String SERIALIZED_NAME_ENABLE_SMART_TAP = "enableSmartTap";
  @SerializedName(SERIALIZED_NAME_ENABLE_SMART_TAP)
  private Boolean enableSmartTap;

  public static final String SERIALIZED_NAME_EVENT_ID = "eventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  private LocalizedString eventName;

  public static final String SERIALIZED_NAME_FINE_PRINT = "finePrint";
  @SerializedName(SERIALIZED_NAME_FINE_PRINT)
  private LocalizedString finePrint;

  /**
   * The label to use for the gate value (&#x60;eventTicketObject.seatInfo.gate&#x60;) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both &#x60;gateLabel&#x60; and &#x60;customGateLabel&#x60; may not be set. If neither is set, the label will default to \&quot;Gate\&quot;, localized. If the gate field is unset, this label will not be used.
   */
  @JsonAdapter(GateLabelEnum.Adapter.class)
  public enum GateLabelEnum {
    GATE_LABEL_UNSPECIFIED("GATE_LABEL_UNSPECIFIED"),
    
    GATE("GATE"),
    
    GATE2("gate"),
    
    DOOR("DOOR"),
    
    DOOR2("door"),
    
    ENTRANCE("ENTRANCE"),
    
    ENTRANCE2("entrance");

    private String value;

    GateLabelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GateLabelEnum fromValue(String value) {
      for (GateLabelEnum b : GateLabelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GateLabelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GateLabelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GateLabelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GateLabelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GateLabelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GATE_LABEL = "gateLabel";
  @SerializedName(SERIALIZED_NAME_GATE_LABEL)
  private GateLabelEnum gateLabel;

  public static final String SERIALIZED_NAME_HERO_IMAGE = "heroImage";
  @SerializedName(SERIALIZED_NAME_HERO_IMAGE)
  private Image heroImage;

  public static final String SERIALIZED_NAME_HEX_BACKGROUND_COLOR = "hexBackgroundColor";
  @SerializedName(SERIALIZED_NAME_HEX_BACKGROUND_COLOR)
  private String hexBackgroundColor;

  public static final String SERIALIZED_NAME_HOMEPAGE_URI = "homepageUri";
  @SerializedName(SERIALIZED_NAME_HOMEPAGE_URI)
  private Uri homepageUri;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_MODULES_DATA = "imageModulesData";
  @SerializedName(SERIALIZED_NAME_IMAGE_MODULES_DATA)
  private List<ImageModuleData> imageModulesData = new ArrayList<>();

  public static final String SERIALIZED_NAME_INFO_MODULE_DATA = "infoModuleData";
  @SerializedName(SERIALIZED_NAME_INFO_MODULE_DATA)
  private InfoModuleData infoModuleData;

  public static final String SERIALIZED_NAME_ISSUER_NAME = "issuerName";
  @SerializedName(SERIALIZED_NAME_ISSUER_NAME)
  private String issuerName;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LINKS_MODULE_DATA = "linksModuleData";
  @SerializedName(SERIALIZED_NAME_LINKS_MODULE_DATA)
  private LinksModuleData linksModuleData;

  public static final String SERIALIZED_NAME_LOCALIZED_ISSUER_NAME = "localizedIssuerName";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_ISSUER_NAME)
  private LocalizedString localizedIssuerName;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<LatLongPoint> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private Image logo;

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<Message> messages = new ArrayList<>();

  /**
   * Identifies whether multiple users and devices will save the same object referencing this class.
   */
  @JsonAdapter(MultipleDevicesAndHoldersAllowedStatusEnum.Adapter.class)
  public enum MultipleDevicesAndHoldersAllowedStatusEnum {
    STATUS_UNSPECIFIED("STATUS_UNSPECIFIED"),
    
    MULTIPLE_HOLDERS("MULTIPLE_HOLDERS"),
    
    ONE_USER_ALL_DEVICES("ONE_USER_ALL_DEVICES"),
    
    ONE_USER_ONE_DEVICE("ONE_USER_ONE_DEVICE"),
    
    MULTIPLE_HOLDERS2("multipleHolders"),
    
    ONE_USER_ALL_DEVICES2("oneUserAllDevices"),
    
    ONE_USER_ONE_DEVICE2("oneUserOneDevice");

    private String value;

    MultipleDevicesAndHoldersAllowedStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MultipleDevicesAndHoldersAllowedStatusEnum fromValue(String value) {
      for (MultipleDevicesAndHoldersAllowedStatusEnum b : MultipleDevicesAndHoldersAllowedStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MultipleDevicesAndHoldersAllowedStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MultipleDevicesAndHoldersAllowedStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MultipleDevicesAndHoldersAllowedStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MultipleDevicesAndHoldersAllowedStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MultipleDevicesAndHoldersAllowedStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MULTIPLE_DEVICES_AND_HOLDERS_ALLOWED_STATUS = "multipleDevicesAndHoldersAllowedStatus";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_DEVICES_AND_HOLDERS_ALLOWED_STATUS)
  private MultipleDevicesAndHoldersAllowedStatusEnum multipleDevicesAndHoldersAllowedStatus;

  public static final String SERIALIZED_NAME_REDEMPTION_ISSUERS = "redemptionIssuers";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_ISSUERS)
  private List<String> redemptionIssuers = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVIEW = "review";
  @SerializedName(SERIALIZED_NAME_REVIEW)
  private Review review;

  /**
   * Required. The status of the class. This field can be set to &#x60;draft&#x60; or &#x60;underReview&#x60; using the insert, patch, or update API calls. Once the review state is changed from &#x60;draft&#x60; it may not be changed back to &#x60;draft&#x60;. You should keep this field to &#x60;draft&#x60; when the class is under development. A &#x60;draft&#x60; class cannot be used to create any object. You should set this field to &#x60;underReview&#x60; when you believe the class is ready for use. The platform will automatically set this field to &#x60;approved&#x60; and it can be immediately used to create or migrate objects. When updating an already &#x60;approved&#x60; class you should keep setting this field to &#x60;underReview&#x60;.
   */
  @JsonAdapter(ReviewStatusEnum.Adapter.class)
  public enum ReviewStatusEnum {
    REVIEW_STATUS_UNSPECIFIED("REVIEW_STATUS_UNSPECIFIED"),
    
    UNDER_REVIEW("UNDER_REVIEW"),
    
    UNDER_REVIEW2("underReview"),
    
    APPROVED("APPROVED"),
    
    APPROVED2("approved"),
    
    REJECTED("REJECTED"),
    
    REJECTED2("rejected"),
    
    DRAFT("DRAFT"),
    
    DRAFT2("draft");

    private String value;

    ReviewStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReviewStatusEnum fromValue(String value) {
      for (ReviewStatusEnum b : ReviewStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReviewStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReviewStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReviewStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReviewStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReviewStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REVIEW_STATUS = "reviewStatus";
  @SerializedName(SERIALIZED_NAME_REVIEW_STATUS)
  private ReviewStatusEnum reviewStatus;

  /**
   * The label to use for the row value (&#x60;eventTicketObject.seatInfo.row&#x60;) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both &#x60;rowLabel&#x60; and &#x60;customRowLabel&#x60; may not be set. If neither is set, the label will default to \&quot;Row\&quot;, localized. If the row field is unset, this label will not be used.
   */
  @JsonAdapter(RowLabelEnum.Adapter.class)
  public enum RowLabelEnum {
    ROW_LABEL_UNSPECIFIED("ROW_LABEL_UNSPECIFIED"),
    
    ROW("ROW"),
    
    ROW2("row");

    private String value;

    RowLabelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RowLabelEnum fromValue(String value) {
      for (RowLabelEnum b : RowLabelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RowLabelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RowLabelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RowLabelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RowLabelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RowLabelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROW_LABEL = "rowLabel";
  @SerializedName(SERIALIZED_NAME_ROW_LABEL)
  private RowLabelEnum rowLabel;

  /**
   * The label to use for the seat value (&#x60;eventTicketObject.seatInfo.seat&#x60;) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both &#x60;seatLabel&#x60; and &#x60;customSeatLabel&#x60; may not be set. If neither is set, the label will default to \&quot;Seat\&quot;, localized. If the seat field is unset, this label will not be used.
   */
  @JsonAdapter(SeatLabelEnum.Adapter.class)
  public enum SeatLabelEnum {
    SEAT_LABEL_UNSPECIFIED("SEAT_LABEL_UNSPECIFIED"),
    
    SEAT("SEAT"),
    
    SEAT2("seat");

    private String value;

    SeatLabelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeatLabelEnum fromValue(String value) {
      for (SeatLabelEnum b : SeatLabelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeatLabelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeatLabelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeatLabelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeatLabelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeatLabelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEAT_LABEL = "seatLabel";
  @SerializedName(SERIALIZED_NAME_SEAT_LABEL)
  private SeatLabelEnum seatLabel;

  /**
   * The label to use for the section value (&#x60;eventTicketObject.seatInfo.section&#x60;) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both &#x60;sectionLabel&#x60; and &#x60;customSectionLabel&#x60; may not be set. If neither is set, the label will default to \&quot;Section\&quot;, localized. If the section field is unset, this label will not be used.
   */
  @JsonAdapter(SectionLabelEnum.Adapter.class)
  public enum SectionLabelEnum {
    SECTION_LABEL_UNSPECIFIED("SECTION_LABEL_UNSPECIFIED"),
    
    SECTION("SECTION"),
    
    SECTION2("section"),
    
    THEATER("THEATER"),
    
    THEATER2("theater");

    private String value;

    SectionLabelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SectionLabelEnum fromValue(String value) {
      for (SectionLabelEnum b : SectionLabelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SectionLabelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SectionLabelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SectionLabelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SectionLabelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SectionLabelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SECTION_LABEL = "sectionLabel";
  @SerializedName(SERIALIZED_NAME_SECTION_LABEL)
  private SectionLabelEnum sectionLabel;

  public static final String SERIALIZED_NAME_SECURITY_ANIMATION = "securityAnimation";
  @SerializedName(SERIALIZED_NAME_SECURITY_ANIMATION)
  private SecurityAnimation securityAnimation;

  public static final String SERIALIZED_NAME_TEXT_MODULES_DATA = "textModulesData";
  @SerializedName(SERIALIZED_NAME_TEXT_MODULES_DATA)
  private List<TextModuleData> textModulesData = new ArrayList<>();

  public static final String SERIALIZED_NAME_VENUE = "venue";
  @SerializedName(SERIALIZED_NAME_VENUE)
  private EventVenue venue;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  /**
   * View Unlock Requirement options for the event ticket.
   */
  @JsonAdapter(ViewUnlockRequirementEnum.Adapter.class)
  public enum ViewUnlockRequirementEnum {
    VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED("VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED"),
    
    UNLOCK_NOT_REQUIRED("UNLOCK_NOT_REQUIRED"),
    
    UNLOCK_REQUIRED_TO_VIEW("UNLOCK_REQUIRED_TO_VIEW");

    private String value;

    ViewUnlockRequirementEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViewUnlockRequirementEnum fromValue(String value) {
      for (ViewUnlockRequirementEnum b : ViewUnlockRequirementEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViewUnlockRequirementEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewUnlockRequirementEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViewUnlockRequirementEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViewUnlockRequirementEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ViewUnlockRequirementEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIEW_UNLOCK_REQUIREMENT = "viewUnlockRequirement";
  @SerializedName(SERIALIZED_NAME_VIEW_UNLOCK_REQUIREMENT)
  private ViewUnlockRequirementEnum viewUnlockRequirement;

  public static final String SERIALIZED_NAME_WIDE_LOGO = "wideLogo";
  @SerializedName(SERIALIZED_NAME_WIDE_LOGO)
  private Image wideLogo;

  public static final String SERIALIZED_NAME_WORD_MARK = "wordMark";
  @SerializedName(SERIALIZED_NAME_WORD_MARK)
  private Image wordMark;

  public EventTicketClass() {
  }

  @Deprecated
  public EventTicketClass allowMultipleUsersPerObject(Boolean allowMultipleUsersPerObject) {
    this.allowMultipleUsersPerObject = allowMultipleUsersPerObject;
    return this;
  }

  /**
   * Deprecated. Use &#x60;multipleDevicesAndHoldersAllowedStatus&#x60; instead.
   * @return allowMultipleUsersPerObject
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getAllowMultipleUsersPerObject() {
    return allowMultipleUsersPerObject;
  }

  @Deprecated
  public void setAllowMultipleUsersPerObject(Boolean allowMultipleUsersPerObject) {
    this.allowMultipleUsersPerObject = allowMultipleUsersPerObject;
  }


  public EventTicketClass callbackOptions(CallbackOptions callbackOptions) {
    this.callbackOptions = callbackOptions;
    return this;
  }

  /**
   * Get callbackOptions
   * @return callbackOptions
   */
  @javax.annotation.Nullable
  public CallbackOptions getCallbackOptions() {
    return callbackOptions;
  }

  public void setCallbackOptions(CallbackOptions callbackOptions) {
    this.callbackOptions = callbackOptions;
  }


  public EventTicketClass classTemplateInfo(ClassTemplateInfo classTemplateInfo) {
    this.classTemplateInfo = classTemplateInfo;
    return this;
  }

  /**
   * Get classTemplateInfo
   * @return classTemplateInfo
   */
  @javax.annotation.Nullable
  public ClassTemplateInfo getClassTemplateInfo() {
    return classTemplateInfo;
  }

  public void setClassTemplateInfo(ClassTemplateInfo classTemplateInfo) {
    this.classTemplateInfo = classTemplateInfo;
  }


  public EventTicketClass confirmationCodeLabel(ConfirmationCodeLabelEnum confirmationCodeLabel) {
    this.confirmationCodeLabel = confirmationCodeLabel;
    return this;
  }

  /**
   * The label to use for the confirmation code value (&#x60;eventTicketObject.reservationInfo.confirmationCode&#x60;) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both &#x60;confirmationCodeLabel&#x60; and &#x60;customConfirmationCodeLabel&#x60; may not be set. If neither is set, the label will default to \&quot;Confirmation Code\&quot;, localized. If the confirmation code field is unset, this label will not be used.
   * @return confirmationCodeLabel
   */
  @javax.annotation.Nullable
  public ConfirmationCodeLabelEnum getConfirmationCodeLabel() {
    return confirmationCodeLabel;
  }

  public void setConfirmationCodeLabel(ConfirmationCodeLabelEnum confirmationCodeLabel) {
    this.confirmationCodeLabel = confirmationCodeLabel;
  }


  public EventTicketClass countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Country code used to display the card&#39;s country (when the user is not in that country), as well as to display localized content when content is not available in the user&#39;s locale.
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public EventTicketClass customConfirmationCodeLabel(LocalizedString customConfirmationCodeLabel) {
    this.customConfirmationCodeLabel = customConfirmationCodeLabel;
    return this;
  }

  /**
   * Get customConfirmationCodeLabel
   * @return customConfirmationCodeLabel
   */
  @javax.annotation.Nullable
  public LocalizedString getCustomConfirmationCodeLabel() {
    return customConfirmationCodeLabel;
  }

  public void setCustomConfirmationCodeLabel(LocalizedString customConfirmationCodeLabel) {
    this.customConfirmationCodeLabel = customConfirmationCodeLabel;
  }


  public EventTicketClass customGateLabel(LocalizedString customGateLabel) {
    this.customGateLabel = customGateLabel;
    return this;
  }

  /**
   * Get customGateLabel
   * @return customGateLabel
   */
  @javax.annotation.Nullable
  public LocalizedString getCustomGateLabel() {
    return customGateLabel;
  }

  public void setCustomGateLabel(LocalizedString customGateLabel) {
    this.customGateLabel = customGateLabel;
  }


  public EventTicketClass customRowLabel(LocalizedString customRowLabel) {
    this.customRowLabel = customRowLabel;
    return this;
  }

  /**
   * Get customRowLabel
   * @return customRowLabel
   */
  @javax.annotation.Nullable
  public LocalizedString getCustomRowLabel() {
    return customRowLabel;
  }

  public void setCustomRowLabel(LocalizedString customRowLabel) {
    this.customRowLabel = customRowLabel;
  }


  public EventTicketClass customSeatLabel(LocalizedString customSeatLabel) {
    this.customSeatLabel = customSeatLabel;
    return this;
  }

  /**
   * Get customSeatLabel
   * @return customSeatLabel
   */
  @javax.annotation.Nullable
  public LocalizedString getCustomSeatLabel() {
    return customSeatLabel;
  }

  public void setCustomSeatLabel(LocalizedString customSeatLabel) {
    this.customSeatLabel = customSeatLabel;
  }


  public EventTicketClass customSectionLabel(LocalizedString customSectionLabel) {
    this.customSectionLabel = customSectionLabel;
    return this;
  }

  /**
   * Get customSectionLabel
   * @return customSectionLabel
   */
  @javax.annotation.Nullable
  public LocalizedString getCustomSectionLabel() {
    return customSectionLabel;
  }

  public void setCustomSectionLabel(LocalizedString customSectionLabel) {
    this.customSectionLabel = customSectionLabel;
  }


  public EventTicketClass dateTime(EventDateTime dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  /**
   * Get dateTime
   * @return dateTime
   */
  @javax.annotation.Nullable
  public EventDateTime getDateTime() {
    return dateTime;
  }

  public void setDateTime(EventDateTime dateTime) {
    this.dateTime = dateTime;
  }


  public EventTicketClass enableSmartTap(Boolean enableSmartTap) {
    this.enableSmartTap = enableSmartTap;
    return this;
  }

  /**
   * Identifies whether this class supports Smart Tap. The &#x60;redemptionIssuers&#x60; and object level &#x60;smartTapRedemptionLevel&#x60; fields must also be set up correctly in order for a pass to support Smart Tap.
   * @return enableSmartTap
   */
  @javax.annotation.Nullable
  public Boolean getEnableSmartTap() {
    return enableSmartTap;
  }

  public void setEnableSmartTap(Boolean enableSmartTap) {
    this.enableSmartTap = enableSmartTap;
  }


  public EventTicketClass eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * The ID of the event. This ID should be unique for every event in an account. It is used to group tickets together if the user has saved multiple tickets for the same event. It can be at most 64 characters. If provided, the grouping will be stable. Be wary of unintentional collision to avoid grouping tickets that should not be grouped. If you use only one class per event, you can simply set this to the &#x60;classId&#x60; (with or without the issuer ID portion). If not provided, the platform will attempt to use other data to group tickets (potentially unstable).
   * @return eventId
   */
  @javax.annotation.Nullable
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public EventTicketClass eventName(LocalizedString eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * Get eventName
   * @return eventName
   */
  @javax.annotation.Nullable
  public LocalizedString getEventName() {
    return eventName;
  }

  public void setEventName(LocalizedString eventName) {
    this.eventName = eventName;
  }


  public EventTicketClass finePrint(LocalizedString finePrint) {
    this.finePrint = finePrint;
    return this;
  }

  /**
   * Get finePrint
   * @return finePrint
   */
  @javax.annotation.Nullable
  public LocalizedString getFinePrint() {
    return finePrint;
  }

  public void setFinePrint(LocalizedString finePrint) {
    this.finePrint = finePrint;
  }


  public EventTicketClass gateLabel(GateLabelEnum gateLabel) {
    this.gateLabel = gateLabel;
    return this;
  }

  /**
   * The label to use for the gate value (&#x60;eventTicketObject.seatInfo.gate&#x60;) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both &#x60;gateLabel&#x60; and &#x60;customGateLabel&#x60; may not be set. If neither is set, the label will default to \&quot;Gate\&quot;, localized. If the gate field is unset, this label will not be used.
   * @return gateLabel
   */
  @javax.annotation.Nullable
  public GateLabelEnum getGateLabel() {
    return gateLabel;
  }

  public void setGateLabel(GateLabelEnum gateLabel) {
    this.gateLabel = gateLabel;
  }


  public EventTicketClass heroImage(Image heroImage) {
    this.heroImage = heroImage;
    return this;
  }

  /**
   * Get heroImage
   * @return heroImage
   */
  @javax.annotation.Nullable
  public Image getHeroImage() {
    return heroImage;
  }

  public void setHeroImage(Image heroImage) {
    this.heroImage = heroImage;
  }


  public EventTicketClass hexBackgroundColor(String hexBackgroundColor) {
    this.hexBackgroundColor = hexBackgroundColor;
    return this;
  }

  /**
   * The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as &#x60;#ffcc00&#x60;. You can also use the shorthand version of the RGB triplet which is #rgb, such as &#x60;#fc0&#x60;.
   * @return hexBackgroundColor
   */
  @javax.annotation.Nullable
  public String getHexBackgroundColor() {
    return hexBackgroundColor;
  }

  public void setHexBackgroundColor(String hexBackgroundColor) {
    this.hexBackgroundColor = hexBackgroundColor;
  }


  public EventTicketClass homepageUri(Uri homepageUri) {
    this.homepageUri = homepageUri;
    return this;
  }

  /**
   * Get homepageUri
   * @return homepageUri
   */
  @javax.annotation.Nullable
  public Uri getHomepageUri() {
    return homepageUri;
  }

  public void setHomepageUri(Uri homepageUri) {
    this.homepageUri = homepageUri;
  }


  public EventTicketClass id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Required. The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, &#39;.&#39;, &#39;_&#39;, or &#39;-&#39;.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public EventTicketClass imageModulesData(List<ImageModuleData> imageModulesData) {
    this.imageModulesData = imageModulesData;
    return this;
  }

  public EventTicketClass addImageModulesDataItem(ImageModuleData imageModulesDataItem) {
    if (this.imageModulesData == null) {
      this.imageModulesData = new ArrayList<>();
    }
    this.imageModulesData.add(imageModulesDataItem);
    return this;
  }

  /**
   * Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.
   * @return imageModulesData
   */
  @javax.annotation.Nullable
  public List<ImageModuleData> getImageModulesData() {
    return imageModulesData;
  }

  public void setImageModulesData(List<ImageModuleData> imageModulesData) {
    this.imageModulesData = imageModulesData;
  }


  public EventTicketClass infoModuleData(InfoModuleData infoModuleData) {
    this.infoModuleData = infoModuleData;
    return this;
  }

  /**
   * Get infoModuleData
   * @return infoModuleData
   */
  @javax.annotation.Nullable
  public InfoModuleData getInfoModuleData() {
    return infoModuleData;
  }

  public void setInfoModuleData(InfoModuleData infoModuleData) {
    this.infoModuleData = infoModuleData;
  }


  public EventTicketClass issuerName(String issuerName) {
    this.issuerName = issuerName;
    return this;
  }

  /**
   * Required. The issuer name. Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.
   * @return issuerName
   */
  @javax.annotation.Nullable
  public String getIssuerName() {
    return issuerName;
  }

  public void setIssuerName(String issuerName) {
    this.issuerName = issuerName;
  }


  @Deprecated
  public EventTicketClass kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string &#x60;\&quot;walletobjects#eventTicketClass\&quot;&#x60;.
   * @return kind
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  @Deprecated
  public void setKind(String kind) {
    this.kind = kind;
  }


  public EventTicketClass linksModuleData(LinksModuleData linksModuleData) {
    this.linksModuleData = linksModuleData;
    return this;
  }

  /**
   * Get linksModuleData
   * @return linksModuleData
   */
  @javax.annotation.Nullable
  public LinksModuleData getLinksModuleData() {
    return linksModuleData;
  }

  public void setLinksModuleData(LinksModuleData linksModuleData) {
    this.linksModuleData = linksModuleData;
  }


  public EventTicketClass localizedIssuerName(LocalizedString localizedIssuerName) {
    this.localizedIssuerName = localizedIssuerName;
    return this;
  }

  /**
   * Get localizedIssuerName
   * @return localizedIssuerName
   */
  @javax.annotation.Nullable
  public LocalizedString getLocalizedIssuerName() {
    return localizedIssuerName;
  }

  public void setLocalizedIssuerName(LocalizedString localizedIssuerName) {
    this.localizedIssuerName = localizedIssuerName;
  }


  public EventTicketClass locations(List<LatLongPoint> locations) {
    this.locations = locations;
    return this;
  }

  public EventTicketClass addLocationsItem(LatLongPoint locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * Note: This field is currently not supported to trigger geo notifications.
   * @return locations
   */
  @javax.annotation.Nullable
  public List<LatLongPoint> getLocations() {
    return locations;
  }

  public void setLocations(List<LatLongPoint> locations) {
    this.locations = locations;
  }


  public EventTicketClass logo(Image logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Get logo
   * @return logo
   */
  @javax.annotation.Nullable
  public Image getLogo() {
    return logo;
  }

  public void setLogo(Image logo) {
    this.logo = logo;
  }


  public EventTicketClass messages(List<Message> messages) {
    this.messages = messages;
    return this;
  }

  public EventTicketClass addMessagesItem(Message messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

  /**
   * An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.
   * @return messages
   */
  @javax.annotation.Nullable
  public List<Message> getMessages() {
    return messages;
  }

  public void setMessages(List<Message> messages) {
    this.messages = messages;
  }


  public EventTicketClass multipleDevicesAndHoldersAllowedStatus(MultipleDevicesAndHoldersAllowedStatusEnum multipleDevicesAndHoldersAllowedStatus) {
    this.multipleDevicesAndHoldersAllowedStatus = multipleDevicesAndHoldersAllowedStatus;
    return this;
  }

  /**
   * Identifies whether multiple users and devices will save the same object referencing this class.
   * @return multipleDevicesAndHoldersAllowedStatus
   */
  @javax.annotation.Nullable
  public MultipleDevicesAndHoldersAllowedStatusEnum getMultipleDevicesAndHoldersAllowedStatus() {
    return multipleDevicesAndHoldersAllowedStatus;
  }

  public void setMultipleDevicesAndHoldersAllowedStatus(MultipleDevicesAndHoldersAllowedStatusEnum multipleDevicesAndHoldersAllowedStatus) {
    this.multipleDevicesAndHoldersAllowedStatus = multipleDevicesAndHoldersAllowedStatus;
  }


  public EventTicketClass redemptionIssuers(List<String> redemptionIssuers) {
    this.redemptionIssuers = redemptionIssuers;
    return this;
  }

  public EventTicketClass addRedemptionIssuersItem(String redemptionIssuersItem) {
    if (this.redemptionIssuers == null) {
      this.redemptionIssuers = new ArrayList<>();
    }
    this.redemptionIssuers.add(redemptionIssuersItem);
    return this;
  }

  /**
   * Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The &#x60;enableSmartTap&#x60; and object level &#x60;smartTapRedemptionLevel&#x60; fields must also be set up correctly in order for a pass to support Smart Tap.
   * @return redemptionIssuers
   */
  @javax.annotation.Nullable
  public List<String> getRedemptionIssuers() {
    return redemptionIssuers;
  }

  public void setRedemptionIssuers(List<String> redemptionIssuers) {
    this.redemptionIssuers = redemptionIssuers;
  }


  public EventTicketClass review(Review review) {
    this.review = review;
    return this;
  }

  /**
   * Get review
   * @return review
   */
  @javax.annotation.Nullable
  public Review getReview() {
    return review;
  }

  public void setReview(Review review) {
    this.review = review;
  }


  public EventTicketClass reviewStatus(ReviewStatusEnum reviewStatus) {
    this.reviewStatus = reviewStatus;
    return this;
  }

  /**
   * Required. The status of the class. This field can be set to &#x60;draft&#x60; or &#x60;underReview&#x60; using the insert, patch, or update API calls. Once the review state is changed from &#x60;draft&#x60; it may not be changed back to &#x60;draft&#x60;. You should keep this field to &#x60;draft&#x60; when the class is under development. A &#x60;draft&#x60; class cannot be used to create any object. You should set this field to &#x60;underReview&#x60; when you believe the class is ready for use. The platform will automatically set this field to &#x60;approved&#x60; and it can be immediately used to create or migrate objects. When updating an already &#x60;approved&#x60; class you should keep setting this field to &#x60;underReview&#x60;.
   * @return reviewStatus
   */
  @javax.annotation.Nullable
  public ReviewStatusEnum getReviewStatus() {
    return reviewStatus;
  }

  public void setReviewStatus(ReviewStatusEnum reviewStatus) {
    this.reviewStatus = reviewStatus;
  }


  public EventTicketClass rowLabel(RowLabelEnum rowLabel) {
    this.rowLabel = rowLabel;
    return this;
  }

  /**
   * The label to use for the row value (&#x60;eventTicketObject.seatInfo.row&#x60;) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both &#x60;rowLabel&#x60; and &#x60;customRowLabel&#x60; may not be set. If neither is set, the label will default to \&quot;Row\&quot;, localized. If the row field is unset, this label will not be used.
   * @return rowLabel
   */
  @javax.annotation.Nullable
  public RowLabelEnum getRowLabel() {
    return rowLabel;
  }

  public void setRowLabel(RowLabelEnum rowLabel) {
    this.rowLabel = rowLabel;
  }


  public EventTicketClass seatLabel(SeatLabelEnum seatLabel) {
    this.seatLabel = seatLabel;
    return this;
  }

  /**
   * The label to use for the seat value (&#x60;eventTicketObject.seatInfo.seat&#x60;) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both &#x60;seatLabel&#x60; and &#x60;customSeatLabel&#x60; may not be set. If neither is set, the label will default to \&quot;Seat\&quot;, localized. If the seat field is unset, this label will not be used.
   * @return seatLabel
   */
  @javax.annotation.Nullable
  public SeatLabelEnum getSeatLabel() {
    return seatLabel;
  }

  public void setSeatLabel(SeatLabelEnum seatLabel) {
    this.seatLabel = seatLabel;
  }


  public EventTicketClass sectionLabel(SectionLabelEnum sectionLabel) {
    this.sectionLabel = sectionLabel;
    return this;
  }

  /**
   * The label to use for the section value (&#x60;eventTicketObject.seatInfo.section&#x60;) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both &#x60;sectionLabel&#x60; and &#x60;customSectionLabel&#x60; may not be set. If neither is set, the label will default to \&quot;Section\&quot;, localized. If the section field is unset, this label will not be used.
   * @return sectionLabel
   */
  @javax.annotation.Nullable
  public SectionLabelEnum getSectionLabel() {
    return sectionLabel;
  }

  public void setSectionLabel(SectionLabelEnum sectionLabel) {
    this.sectionLabel = sectionLabel;
  }


  public EventTicketClass securityAnimation(SecurityAnimation securityAnimation) {
    this.securityAnimation = securityAnimation;
    return this;
  }

  /**
   * Get securityAnimation
   * @return securityAnimation
   */
  @javax.annotation.Nullable
  public SecurityAnimation getSecurityAnimation() {
    return securityAnimation;
  }

  public void setSecurityAnimation(SecurityAnimation securityAnimation) {
    this.securityAnimation = securityAnimation;
  }


  public EventTicketClass textModulesData(List<TextModuleData> textModulesData) {
    this.textModulesData = textModulesData;
    return this;
  }

  public EventTicketClass addTextModulesDataItem(TextModuleData textModulesDataItem) {
    if (this.textModulesData == null) {
      this.textModulesData = new ArrayList<>();
    }
    this.textModulesData.add(textModulesDataItem);
    return this;
  }

  /**
   * Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.
   * @return textModulesData
   */
  @javax.annotation.Nullable
  public List<TextModuleData> getTextModulesData() {
    return textModulesData;
  }

  public void setTextModulesData(List<TextModuleData> textModulesData) {
    this.textModulesData = textModulesData;
  }


  public EventTicketClass venue(EventVenue venue) {
    this.venue = venue;
    return this;
  }

  /**
   * Get venue
   * @return venue
   */
  @javax.annotation.Nullable
  public EventVenue getVenue() {
    return venue;
  }

  public void setVenue(EventVenue venue) {
    this.venue = venue;
  }


  @Deprecated
  public EventTicketClass version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Deprecated
   * @return version
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  @Deprecated
  public void setVersion(String version) {
    this.version = version;
  }


  public EventTicketClass viewUnlockRequirement(ViewUnlockRequirementEnum viewUnlockRequirement) {
    this.viewUnlockRequirement = viewUnlockRequirement;
    return this;
  }

  /**
   * View Unlock Requirement options for the event ticket.
   * @return viewUnlockRequirement
   */
  @javax.annotation.Nullable
  public ViewUnlockRequirementEnum getViewUnlockRequirement() {
    return viewUnlockRequirement;
  }

  public void setViewUnlockRequirement(ViewUnlockRequirementEnum viewUnlockRequirement) {
    this.viewUnlockRequirement = viewUnlockRequirement;
  }


  public EventTicketClass wideLogo(Image wideLogo) {
    this.wideLogo = wideLogo;
    return this;
  }

  /**
   * Get wideLogo
   * @return wideLogo
   */
  @javax.annotation.Nullable
  public Image getWideLogo() {
    return wideLogo;
  }

  public void setWideLogo(Image wideLogo) {
    this.wideLogo = wideLogo;
  }


  public EventTicketClass wordMark(Image wordMark) {
    this.wordMark = wordMark;
    return this;
  }

  /**
   * Get wordMark
   * @return wordMark
   */
  @javax.annotation.Nullable
  public Image getWordMark() {
    return wordMark;
  }

  public void setWordMark(Image wordMark) {
    this.wordMark = wordMark;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventTicketClass eventTicketClass = (EventTicketClass) o;
    return Objects.equals(this.allowMultipleUsersPerObject, eventTicketClass.allowMultipleUsersPerObject) &&
        Objects.equals(this.callbackOptions, eventTicketClass.callbackOptions) &&
        Objects.equals(this.classTemplateInfo, eventTicketClass.classTemplateInfo) &&
        Objects.equals(this.confirmationCodeLabel, eventTicketClass.confirmationCodeLabel) &&
        Objects.equals(this.countryCode, eventTicketClass.countryCode) &&
        Objects.equals(this.customConfirmationCodeLabel, eventTicketClass.customConfirmationCodeLabel) &&
        Objects.equals(this.customGateLabel, eventTicketClass.customGateLabel) &&
        Objects.equals(this.customRowLabel, eventTicketClass.customRowLabel) &&
        Objects.equals(this.customSeatLabel, eventTicketClass.customSeatLabel) &&
        Objects.equals(this.customSectionLabel, eventTicketClass.customSectionLabel) &&
        Objects.equals(this.dateTime, eventTicketClass.dateTime) &&
        Objects.equals(this.enableSmartTap, eventTicketClass.enableSmartTap) &&
        Objects.equals(this.eventId, eventTicketClass.eventId) &&
        Objects.equals(this.eventName, eventTicketClass.eventName) &&
        Objects.equals(this.finePrint, eventTicketClass.finePrint) &&
        Objects.equals(this.gateLabel, eventTicketClass.gateLabel) &&
        Objects.equals(this.heroImage, eventTicketClass.heroImage) &&
        Objects.equals(this.hexBackgroundColor, eventTicketClass.hexBackgroundColor) &&
        Objects.equals(this.homepageUri, eventTicketClass.homepageUri) &&
        Objects.equals(this.id, eventTicketClass.id) &&
        Objects.equals(this.imageModulesData, eventTicketClass.imageModulesData) &&
        Objects.equals(this.infoModuleData, eventTicketClass.infoModuleData) &&
        Objects.equals(this.issuerName, eventTicketClass.issuerName) &&
        Objects.equals(this.kind, eventTicketClass.kind) &&
        Objects.equals(this.linksModuleData, eventTicketClass.linksModuleData) &&
        Objects.equals(this.localizedIssuerName, eventTicketClass.localizedIssuerName) &&
        Objects.equals(this.locations, eventTicketClass.locations) &&
        Objects.equals(this.logo, eventTicketClass.logo) &&
        Objects.equals(this.messages, eventTicketClass.messages) &&
        Objects.equals(this.multipleDevicesAndHoldersAllowedStatus, eventTicketClass.multipleDevicesAndHoldersAllowedStatus) &&
        Objects.equals(this.redemptionIssuers, eventTicketClass.redemptionIssuers) &&
        Objects.equals(this.review, eventTicketClass.review) &&
        Objects.equals(this.reviewStatus, eventTicketClass.reviewStatus) &&
        Objects.equals(this.rowLabel, eventTicketClass.rowLabel) &&
        Objects.equals(this.seatLabel, eventTicketClass.seatLabel) &&
        Objects.equals(this.sectionLabel, eventTicketClass.sectionLabel) &&
        Objects.equals(this.securityAnimation, eventTicketClass.securityAnimation) &&
        Objects.equals(this.textModulesData, eventTicketClass.textModulesData) &&
        Objects.equals(this.venue, eventTicketClass.venue) &&
        Objects.equals(this.version, eventTicketClass.version) &&
        Objects.equals(this.viewUnlockRequirement, eventTicketClass.viewUnlockRequirement) &&
        Objects.equals(this.wideLogo, eventTicketClass.wideLogo) &&
        Objects.equals(this.wordMark, eventTicketClass.wordMark);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowMultipleUsersPerObject, callbackOptions, classTemplateInfo, confirmationCodeLabel, countryCode, customConfirmationCodeLabel, customGateLabel, customRowLabel, customSeatLabel, customSectionLabel, dateTime, enableSmartTap, eventId, eventName, finePrint, gateLabel, heroImage, hexBackgroundColor, homepageUri, id, imageModulesData, infoModuleData, issuerName, kind, linksModuleData, localizedIssuerName, locations, logo, messages, multipleDevicesAndHoldersAllowedStatus, redemptionIssuers, review, reviewStatus, rowLabel, seatLabel, sectionLabel, securityAnimation, textModulesData, venue, version, viewUnlockRequirement, wideLogo, wordMark);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventTicketClass {\n");
    sb.append("    allowMultipleUsersPerObject: ").append(toIndentedString(allowMultipleUsersPerObject)).append("\n");
    sb.append("    callbackOptions: ").append(toIndentedString(callbackOptions)).append("\n");
    sb.append("    classTemplateInfo: ").append(toIndentedString(classTemplateInfo)).append("\n");
    sb.append("    confirmationCodeLabel: ").append(toIndentedString(confirmationCodeLabel)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    customConfirmationCodeLabel: ").append(toIndentedString(customConfirmationCodeLabel)).append("\n");
    sb.append("    customGateLabel: ").append(toIndentedString(customGateLabel)).append("\n");
    sb.append("    customRowLabel: ").append(toIndentedString(customRowLabel)).append("\n");
    sb.append("    customSeatLabel: ").append(toIndentedString(customSeatLabel)).append("\n");
    sb.append("    customSectionLabel: ").append(toIndentedString(customSectionLabel)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    enableSmartTap: ").append(toIndentedString(enableSmartTap)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    finePrint: ").append(toIndentedString(finePrint)).append("\n");
    sb.append("    gateLabel: ").append(toIndentedString(gateLabel)).append("\n");
    sb.append("    heroImage: ").append(toIndentedString(heroImage)).append("\n");
    sb.append("    hexBackgroundColor: ").append(toIndentedString(hexBackgroundColor)).append("\n");
    sb.append("    homepageUri: ").append(toIndentedString(homepageUri)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageModulesData: ").append(toIndentedString(imageModulesData)).append("\n");
    sb.append("    infoModuleData: ").append(toIndentedString(infoModuleData)).append("\n");
    sb.append("    issuerName: ").append(toIndentedString(issuerName)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    linksModuleData: ").append(toIndentedString(linksModuleData)).append("\n");
    sb.append("    localizedIssuerName: ").append(toIndentedString(localizedIssuerName)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    multipleDevicesAndHoldersAllowedStatus: ").append(toIndentedString(multipleDevicesAndHoldersAllowedStatus)).append("\n");
    sb.append("    redemptionIssuers: ").append(toIndentedString(redemptionIssuers)).append("\n");
    sb.append("    review: ").append(toIndentedString(review)).append("\n");
    sb.append("    reviewStatus: ").append(toIndentedString(reviewStatus)).append("\n");
    sb.append("    rowLabel: ").append(toIndentedString(rowLabel)).append("\n");
    sb.append("    seatLabel: ").append(toIndentedString(seatLabel)).append("\n");
    sb.append("    sectionLabel: ").append(toIndentedString(sectionLabel)).append("\n");
    sb.append("    securityAnimation: ").append(toIndentedString(securityAnimation)).append("\n");
    sb.append("    textModulesData: ").append(toIndentedString(textModulesData)).append("\n");
    sb.append("    venue: ").append(toIndentedString(venue)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    viewUnlockRequirement: ").append(toIndentedString(viewUnlockRequirement)).append("\n");
    sb.append("    wideLogo: ").append(toIndentedString(wideLogo)).append("\n");
    sb.append("    wordMark: ").append(toIndentedString(wordMark)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowMultipleUsersPerObject");
    openapiFields.add("callbackOptions");
    openapiFields.add("classTemplateInfo");
    openapiFields.add("confirmationCodeLabel");
    openapiFields.add("countryCode");
    openapiFields.add("customConfirmationCodeLabel");
    openapiFields.add("customGateLabel");
    openapiFields.add("customRowLabel");
    openapiFields.add("customSeatLabel");
    openapiFields.add("customSectionLabel");
    openapiFields.add("dateTime");
    openapiFields.add("enableSmartTap");
    openapiFields.add("eventId");
    openapiFields.add("eventName");
    openapiFields.add("finePrint");
    openapiFields.add("gateLabel");
    openapiFields.add("heroImage");
    openapiFields.add("hexBackgroundColor");
    openapiFields.add("homepageUri");
    openapiFields.add("id");
    openapiFields.add("imageModulesData");
    openapiFields.add("infoModuleData");
    openapiFields.add("issuerName");
    openapiFields.add("kind");
    openapiFields.add("linksModuleData");
    openapiFields.add("localizedIssuerName");
    openapiFields.add("locations");
    openapiFields.add("logo");
    openapiFields.add("messages");
    openapiFields.add("multipleDevicesAndHoldersAllowedStatus");
    openapiFields.add("redemptionIssuers");
    openapiFields.add("review");
    openapiFields.add("reviewStatus");
    openapiFields.add("rowLabel");
    openapiFields.add("seatLabel");
    openapiFields.add("sectionLabel");
    openapiFields.add("securityAnimation");
    openapiFields.add("textModulesData");
    openapiFields.add("venue");
    openapiFields.add("version");
    openapiFields.add("viewUnlockRequirement");
    openapiFields.add("wideLogo");
    openapiFields.add("wordMark");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventTicketClass
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventTicketClass.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventTicketClass is not found in the empty JSON string", EventTicketClass.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventTicketClass.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventTicketClass` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `callbackOptions`
      if (jsonObj.get("callbackOptions") != null && !jsonObj.get("callbackOptions").isJsonNull()) {
        CallbackOptions.validateJsonElement(jsonObj.get("callbackOptions"));
      }
      // validate the optional field `classTemplateInfo`
      if (jsonObj.get("classTemplateInfo") != null && !jsonObj.get("classTemplateInfo").isJsonNull()) {
        ClassTemplateInfo.validateJsonElement(jsonObj.get("classTemplateInfo"));
      }
      if ((jsonObj.get("confirmationCodeLabel") != null && !jsonObj.get("confirmationCodeLabel").isJsonNull()) && !jsonObj.get("confirmationCodeLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmationCodeLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmationCodeLabel").toString()));
      }
      // validate the optional field `confirmationCodeLabel`
      if (jsonObj.get("confirmationCodeLabel") != null && !jsonObj.get("confirmationCodeLabel").isJsonNull()) {
        ConfirmationCodeLabelEnum.validateJsonElement(jsonObj.get("confirmationCodeLabel"));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      // validate the optional field `customConfirmationCodeLabel`
      if (jsonObj.get("customConfirmationCodeLabel") != null && !jsonObj.get("customConfirmationCodeLabel").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("customConfirmationCodeLabel"));
      }
      // validate the optional field `customGateLabel`
      if (jsonObj.get("customGateLabel") != null && !jsonObj.get("customGateLabel").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("customGateLabel"));
      }
      // validate the optional field `customRowLabel`
      if (jsonObj.get("customRowLabel") != null && !jsonObj.get("customRowLabel").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("customRowLabel"));
      }
      // validate the optional field `customSeatLabel`
      if (jsonObj.get("customSeatLabel") != null && !jsonObj.get("customSeatLabel").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("customSeatLabel"));
      }
      // validate the optional field `customSectionLabel`
      if (jsonObj.get("customSectionLabel") != null && !jsonObj.get("customSectionLabel").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("customSectionLabel"));
      }
      // validate the optional field `dateTime`
      if (jsonObj.get("dateTime") != null && !jsonObj.get("dateTime").isJsonNull()) {
        EventDateTime.validateJsonElement(jsonObj.get("dateTime"));
      }
      if ((jsonObj.get("eventId") != null && !jsonObj.get("eventId").isJsonNull()) && !jsonObj.get("eventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventId").toString()));
      }
      // validate the optional field `eventName`
      if (jsonObj.get("eventName") != null && !jsonObj.get("eventName").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("eventName"));
      }
      // validate the optional field `finePrint`
      if (jsonObj.get("finePrint") != null && !jsonObj.get("finePrint").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("finePrint"));
      }
      if ((jsonObj.get("gateLabel") != null && !jsonObj.get("gateLabel").isJsonNull()) && !jsonObj.get("gateLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gateLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gateLabel").toString()));
      }
      // validate the optional field `gateLabel`
      if (jsonObj.get("gateLabel") != null && !jsonObj.get("gateLabel").isJsonNull()) {
        GateLabelEnum.validateJsonElement(jsonObj.get("gateLabel"));
      }
      // validate the optional field `heroImage`
      if (jsonObj.get("heroImage") != null && !jsonObj.get("heroImage").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("heroImage"));
      }
      if ((jsonObj.get("hexBackgroundColor") != null && !jsonObj.get("hexBackgroundColor").isJsonNull()) && !jsonObj.get("hexBackgroundColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hexBackgroundColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hexBackgroundColor").toString()));
      }
      // validate the optional field `homepageUri`
      if (jsonObj.get("homepageUri") != null && !jsonObj.get("homepageUri").isJsonNull()) {
        Uri.validateJsonElement(jsonObj.get("homepageUri"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("imageModulesData") != null && !jsonObj.get("imageModulesData").isJsonNull()) {
        JsonArray jsonArrayimageModulesData = jsonObj.getAsJsonArray("imageModulesData");
        if (jsonArrayimageModulesData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("imageModulesData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `imageModulesData` to be an array in the JSON string but got `%s`", jsonObj.get("imageModulesData").toString()));
          }

          // validate the optional field `imageModulesData` (array)
          for (int i = 0; i < jsonArrayimageModulesData.size(); i++) {
            ImageModuleData.validateJsonElement(jsonArrayimageModulesData.get(i));
          };
        }
      }
      // validate the optional field `infoModuleData`
      if (jsonObj.get("infoModuleData") != null && !jsonObj.get("infoModuleData").isJsonNull()) {
        InfoModuleData.validateJsonElement(jsonObj.get("infoModuleData"));
      }
      if ((jsonObj.get("issuerName") != null && !jsonObj.get("issuerName").isJsonNull()) && !jsonObj.get("issuerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerName").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `linksModuleData`
      if (jsonObj.get("linksModuleData") != null && !jsonObj.get("linksModuleData").isJsonNull()) {
        LinksModuleData.validateJsonElement(jsonObj.get("linksModuleData"));
      }
      // validate the optional field `localizedIssuerName`
      if (jsonObj.get("localizedIssuerName") != null && !jsonObj.get("localizedIssuerName").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("localizedIssuerName"));
      }
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull()) {
        JsonArray jsonArraylocations = jsonObj.getAsJsonArray("locations");
        if (jsonArraylocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
          }

          // validate the optional field `locations` (array)
          for (int i = 0; i < jsonArraylocations.size(); i++) {
            LatLongPoint.validateJsonElement(jsonArraylocations.get(i));
          };
        }
      }
      // validate the optional field `logo`
      if (jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("logo"));
      }
      if (jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) {
        JsonArray jsonArraymessages = jsonObj.getAsJsonArray("messages");
        if (jsonArraymessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
          }

          // validate the optional field `messages` (array)
          for (int i = 0; i < jsonArraymessages.size(); i++) {
            Message.validateJsonElement(jsonArraymessages.get(i));
          };
        }
      }
      if ((jsonObj.get("multipleDevicesAndHoldersAllowedStatus") != null && !jsonObj.get("multipleDevicesAndHoldersAllowedStatus").isJsonNull()) && !jsonObj.get("multipleDevicesAndHoldersAllowedStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `multipleDevicesAndHoldersAllowedStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("multipleDevicesAndHoldersAllowedStatus").toString()));
      }
      // validate the optional field `multipleDevicesAndHoldersAllowedStatus`
      if (jsonObj.get("multipleDevicesAndHoldersAllowedStatus") != null && !jsonObj.get("multipleDevicesAndHoldersAllowedStatus").isJsonNull()) {
        MultipleDevicesAndHoldersAllowedStatusEnum.validateJsonElement(jsonObj.get("multipleDevicesAndHoldersAllowedStatus"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("redemptionIssuers") != null && !jsonObj.get("redemptionIssuers").isJsonNull() && !jsonObj.get("redemptionIssuers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redemptionIssuers` to be an array in the JSON string but got `%s`", jsonObj.get("redemptionIssuers").toString()));
      }
      // validate the optional field `review`
      if (jsonObj.get("review") != null && !jsonObj.get("review").isJsonNull()) {
        Review.validateJsonElement(jsonObj.get("review"));
      }
      if ((jsonObj.get("reviewStatus") != null && !jsonObj.get("reviewStatus").isJsonNull()) && !jsonObj.get("reviewStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewStatus").toString()));
      }
      // validate the optional field `reviewStatus`
      if (jsonObj.get("reviewStatus") != null && !jsonObj.get("reviewStatus").isJsonNull()) {
        ReviewStatusEnum.validateJsonElement(jsonObj.get("reviewStatus"));
      }
      if ((jsonObj.get("rowLabel") != null && !jsonObj.get("rowLabel").isJsonNull()) && !jsonObj.get("rowLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rowLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rowLabel").toString()));
      }
      // validate the optional field `rowLabel`
      if (jsonObj.get("rowLabel") != null && !jsonObj.get("rowLabel").isJsonNull()) {
        RowLabelEnum.validateJsonElement(jsonObj.get("rowLabel"));
      }
      if ((jsonObj.get("seatLabel") != null && !jsonObj.get("seatLabel").isJsonNull()) && !jsonObj.get("seatLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seatLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seatLabel").toString()));
      }
      // validate the optional field `seatLabel`
      if (jsonObj.get("seatLabel") != null && !jsonObj.get("seatLabel").isJsonNull()) {
        SeatLabelEnum.validateJsonElement(jsonObj.get("seatLabel"));
      }
      if ((jsonObj.get("sectionLabel") != null && !jsonObj.get("sectionLabel").isJsonNull()) && !jsonObj.get("sectionLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sectionLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sectionLabel").toString()));
      }
      // validate the optional field `sectionLabel`
      if (jsonObj.get("sectionLabel") != null && !jsonObj.get("sectionLabel").isJsonNull()) {
        SectionLabelEnum.validateJsonElement(jsonObj.get("sectionLabel"));
      }
      // validate the optional field `securityAnimation`
      if (jsonObj.get("securityAnimation") != null && !jsonObj.get("securityAnimation").isJsonNull()) {
        SecurityAnimation.validateJsonElement(jsonObj.get("securityAnimation"));
      }
      if (jsonObj.get("textModulesData") != null && !jsonObj.get("textModulesData").isJsonNull()) {
        JsonArray jsonArraytextModulesData = jsonObj.getAsJsonArray("textModulesData");
        if (jsonArraytextModulesData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("textModulesData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `textModulesData` to be an array in the JSON string but got `%s`", jsonObj.get("textModulesData").toString()));
          }

          // validate the optional field `textModulesData` (array)
          for (int i = 0; i < jsonArraytextModulesData.size(); i++) {
            TextModuleData.validateJsonElement(jsonArraytextModulesData.get(i));
          };
        }
      }
      // validate the optional field `venue`
      if (jsonObj.get("venue") != null && !jsonObj.get("venue").isJsonNull()) {
        EventVenue.validateJsonElement(jsonObj.get("venue"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("viewUnlockRequirement") != null && !jsonObj.get("viewUnlockRequirement").isJsonNull()) && !jsonObj.get("viewUnlockRequirement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewUnlockRequirement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewUnlockRequirement").toString()));
      }
      // validate the optional field `viewUnlockRequirement`
      if (jsonObj.get("viewUnlockRequirement") != null && !jsonObj.get("viewUnlockRequirement").isJsonNull()) {
        ViewUnlockRequirementEnum.validateJsonElement(jsonObj.get("viewUnlockRequirement"));
      }
      // validate the optional field `wideLogo`
      if (jsonObj.get("wideLogo") != null && !jsonObj.get("wideLogo").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("wideLogo"));
      }
      // validate the optional field `wordMark`
      if (jsonObj.get("wordMark") != null && !jsonObj.get("wordMark").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("wordMark"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventTicketClass.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventTicketClass' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventTicketClass> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventTicketClass.class));

       return (TypeAdapter<T>) new TypeAdapter<EventTicketClass>() {
           @Override
           public void write(JsonWriter out, EventTicketClass value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventTicketClass read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventTicketClass given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventTicketClass
   * @throws IOException if the JSON string is invalid with respect to EventTicketClass
   */
  public static EventTicketClass fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventTicketClass.class);
  }

  /**
   * Convert an instance of EventTicketClass to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

