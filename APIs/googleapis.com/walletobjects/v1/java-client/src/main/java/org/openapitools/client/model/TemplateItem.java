/*
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FieldSelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TemplateItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:24.677339-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TemplateItem {
  public static final String SERIALIZED_NAME_FIRST_VALUE = "firstValue";
  @SerializedName(SERIALIZED_NAME_FIRST_VALUE)
  private FieldSelector firstValue;

  /**
   * A predefined item to display. Only one of &#x60;firstValue&#x60; or &#x60;predefinedItem&#x60; may be set.
   */
  @JsonAdapter(PredefinedItemEnum.Adapter.class)
  public enum PredefinedItemEnum {
    PREDEFINED_ITEM_UNSPECIFIED("PREDEFINED_ITEM_UNSPECIFIED"),
    
    FREQUENT_FLYER_PROGRAM_NAME_AND_NUMBER("FREQUENT_FLYER_PROGRAM_NAME_AND_NUMBER"),
    
    FREQUENT_FLYER_PROGRAM_NAME_AND_NUMBER2("frequentFlyerProgramNameAndNumber"),
    
    FLIGHT_NUMBER_AND_OPERATING_FLIGHT_NUMBER("FLIGHT_NUMBER_AND_OPERATING_FLIGHT_NUMBER"),
    
    FLIGHT_NUMBER_AND_OPERATING_FLIGHT_NUMBER2("flightNumberAndOperatingFlightNumber");

    private String value;

    PredefinedItemEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PredefinedItemEnum fromValue(String value) {
      for (PredefinedItemEnum b : PredefinedItemEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PredefinedItemEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PredefinedItemEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PredefinedItemEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PredefinedItemEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PredefinedItemEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PREDEFINED_ITEM = "predefinedItem";
  @SerializedName(SERIALIZED_NAME_PREDEFINED_ITEM)
  private PredefinedItemEnum predefinedItem;

  public static final String SERIALIZED_NAME_SECOND_VALUE = "secondValue";
  @SerializedName(SERIALIZED_NAME_SECOND_VALUE)
  private FieldSelector secondValue;

  public TemplateItem() {
  }

  public TemplateItem firstValue(FieldSelector firstValue) {
    this.firstValue = firstValue;
    return this;
  }

  /**
   * Get firstValue
   * @return firstValue
   */
  @javax.annotation.Nullable
  public FieldSelector getFirstValue() {
    return firstValue;
  }

  public void setFirstValue(FieldSelector firstValue) {
    this.firstValue = firstValue;
  }


  public TemplateItem predefinedItem(PredefinedItemEnum predefinedItem) {
    this.predefinedItem = predefinedItem;
    return this;
  }

  /**
   * A predefined item to display. Only one of &#x60;firstValue&#x60; or &#x60;predefinedItem&#x60; may be set.
   * @return predefinedItem
   */
  @javax.annotation.Nullable
  public PredefinedItemEnum getPredefinedItem() {
    return predefinedItem;
  }

  public void setPredefinedItem(PredefinedItemEnum predefinedItem) {
    this.predefinedItem = predefinedItem;
  }


  public TemplateItem secondValue(FieldSelector secondValue) {
    this.secondValue = secondValue;
    return this;
  }

  /**
   * Get secondValue
   * @return secondValue
   */
  @javax.annotation.Nullable
  public FieldSelector getSecondValue() {
    return secondValue;
  }

  public void setSecondValue(FieldSelector secondValue) {
    this.secondValue = secondValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateItem templateItem = (TemplateItem) o;
    return Objects.equals(this.firstValue, templateItem.firstValue) &&
        Objects.equals(this.predefinedItem, templateItem.predefinedItem) &&
        Objects.equals(this.secondValue, templateItem.secondValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstValue, predefinedItem, secondValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateItem {\n");
    sb.append("    firstValue: ").append(toIndentedString(firstValue)).append("\n");
    sb.append("    predefinedItem: ").append(toIndentedString(predefinedItem)).append("\n");
    sb.append("    secondValue: ").append(toIndentedString(secondValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstValue");
    openapiFields.add("predefinedItem");
    openapiFields.add("secondValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TemplateItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TemplateItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplateItem is not found in the empty JSON string", TemplateItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TemplateItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TemplateItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `firstValue`
      if (jsonObj.get("firstValue") != null && !jsonObj.get("firstValue").isJsonNull()) {
        FieldSelector.validateJsonElement(jsonObj.get("firstValue"));
      }
      if ((jsonObj.get("predefinedItem") != null && !jsonObj.get("predefinedItem").isJsonNull()) && !jsonObj.get("predefinedItem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `predefinedItem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("predefinedItem").toString()));
      }
      // validate the optional field `predefinedItem`
      if (jsonObj.get("predefinedItem") != null && !jsonObj.get("predefinedItem").isJsonNull()) {
        PredefinedItemEnum.validateJsonElement(jsonObj.get("predefinedItem"));
      }
      // validate the optional field `secondValue`
      if (jsonObj.get("secondValue") != null && !jsonObj.get("secondValue").isJsonNull()) {
        FieldSelector.validateJsonElement(jsonObj.get("secondValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplateItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplateItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplateItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplateItem.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplateItem>() {
           @Override
           public void write(JsonWriter out, TemplateItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplateItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TemplateItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TemplateItem
   * @throws IOException if the JSON string is invalid with respect to TemplateItem
   */
  public static TemplateItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplateItem.class);
  }

  /**
   * Convert an instance of TemplateItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

