/*
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LocalizedString;
import org.openapitools.client.model.TimeInterval;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A message that will be displayed with a Valuable
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:24.677339-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Message {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_DISPLAY_INTERVAL = "displayInterval";
  @SerializedName(SERIALIZED_NAME_DISPLAY_INTERVAL)
  private TimeInterval displayInterval;

  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private String header;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LOCALIZED_BODY = "localizedBody";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_BODY)
  private LocalizedString localizedBody;

  public static final String SERIALIZED_NAME_LOCALIZED_HEADER = "localizedHeader";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_HEADER)
  private LocalizedString localizedHeader;

  /**
   * The message type.
   */
  @JsonAdapter(MessageTypeEnum.Adapter.class)
  public enum MessageTypeEnum {
    MESSAGE_TYPE_UNSPECIFIED("MESSAGE_TYPE_UNSPECIFIED"),
    
    TEXT("TEXT"),
    
    TEXT2("text"),
    
    EXPIRATION_NOTIFICATION("EXPIRATION_NOTIFICATION"),
    
    EXPIRATION_NOTIFICATION2("expirationNotification");

    private String value;

    MessageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MessageTypeEnum fromValue(String value) {
      for (MessageTypeEnum b : MessageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MessageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MessageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MessageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MessageTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MessageTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MESSAGE_TYPE = "messageType";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TYPE)
  private MessageTypeEnum messageType;

  public Message() {
  }

  public Message body(String body) {
    this.body = body;
    return this;
  }

  /**
   * The message body.
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public Message displayInterval(TimeInterval displayInterval) {
    this.displayInterval = displayInterval;
    return this;
  }

  /**
   * Get displayInterval
   * @return displayInterval
   */
  @javax.annotation.Nullable
  public TimeInterval getDisplayInterval() {
    return displayInterval;
  }

  public void setDisplayInterval(TimeInterval displayInterval) {
    this.displayInterval = displayInterval;
  }


  public Message header(String header) {
    this.header = header;
    return this;
  }

  /**
   * The message header.
   * @return header
   */
  @javax.annotation.Nullable
  public String getHeader() {
    return header;
  }

  public void setHeader(String header) {
    this.header = header;
  }


  public Message id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID associated with a message. This field is here to enable ease of management of messages. Notice ID values could possibly duplicate across multiple messages in the same class/instance, and care must be taken to select a reasonable ID for each message.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  @Deprecated
  public Message kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string &#x60;\&quot;walletobjects#walletObjectMessage\&quot;&#x60;.
   * @return kind
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  @Deprecated
  public void setKind(String kind) {
    this.kind = kind;
  }


  public Message localizedBody(LocalizedString localizedBody) {
    this.localizedBody = localizedBody;
    return this;
  }

  /**
   * Get localizedBody
   * @return localizedBody
   */
  @javax.annotation.Nullable
  public LocalizedString getLocalizedBody() {
    return localizedBody;
  }

  public void setLocalizedBody(LocalizedString localizedBody) {
    this.localizedBody = localizedBody;
  }


  public Message localizedHeader(LocalizedString localizedHeader) {
    this.localizedHeader = localizedHeader;
    return this;
  }

  /**
   * Get localizedHeader
   * @return localizedHeader
   */
  @javax.annotation.Nullable
  public LocalizedString getLocalizedHeader() {
    return localizedHeader;
  }

  public void setLocalizedHeader(LocalizedString localizedHeader) {
    this.localizedHeader = localizedHeader;
  }


  public Message messageType(MessageTypeEnum messageType) {
    this.messageType = messageType;
    return this;
  }

  /**
   * The message type.
   * @return messageType
   */
  @javax.annotation.Nullable
  public MessageTypeEnum getMessageType() {
    return messageType;
  }

  public void setMessageType(MessageTypeEnum messageType) {
    this.messageType = messageType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Message message = (Message) o;
    return Objects.equals(this.body, message.body) &&
        Objects.equals(this.displayInterval, message.displayInterval) &&
        Objects.equals(this.header, message.header) &&
        Objects.equals(this.id, message.id) &&
        Objects.equals(this.kind, message.kind) &&
        Objects.equals(this.localizedBody, message.localizedBody) &&
        Objects.equals(this.localizedHeader, message.localizedHeader) &&
        Objects.equals(this.messageType, message.messageType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, displayInterval, header, id, kind, localizedBody, localizedHeader, messageType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Message {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    displayInterval: ").append(toIndentedString(displayInterval)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    localizedBody: ").append(toIndentedString(localizedBody)).append("\n");
    sb.append("    localizedHeader: ").append(toIndentedString(localizedHeader)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("displayInterval");
    openapiFields.add("header");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("localizedBody");
    openapiFields.add("localizedHeader");
    openapiFields.add("messageType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Message
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Message.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Message is not found in the empty JSON string", Message.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Message.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Message` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      // validate the optional field `displayInterval`
      if (jsonObj.get("displayInterval") != null && !jsonObj.get("displayInterval").isJsonNull()) {
        TimeInterval.validateJsonElement(jsonObj.get("displayInterval"));
      }
      if ((jsonObj.get("header") != null && !jsonObj.get("header").isJsonNull()) && !jsonObj.get("header").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `localizedBody`
      if (jsonObj.get("localizedBody") != null && !jsonObj.get("localizedBody").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("localizedBody"));
      }
      // validate the optional field `localizedHeader`
      if (jsonObj.get("localizedHeader") != null && !jsonObj.get("localizedHeader").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("localizedHeader"));
      }
      if ((jsonObj.get("messageType") != null && !jsonObj.get("messageType").isJsonNull()) && !jsonObj.get("messageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageType").toString()));
      }
      // validate the optional field `messageType`
      if (jsonObj.get("messageType") != null && !jsonObj.get("messageType").isJsonNull()) {
        MessageTypeEnum.validateJsonElement(jsonObj.get("messageType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Message.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Message' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Message> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Message.class));

       return (TypeAdapter<T>) new TypeAdapter<Message>() {
           @Override
           public void write(JsonWriter out, Message value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Message read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Message given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Message
   * @throws IOException if the JSON string is invalid with respect to Message
   */
  public static Message fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Message.class);
  }

  /**
   * Convert an instance of Message to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

