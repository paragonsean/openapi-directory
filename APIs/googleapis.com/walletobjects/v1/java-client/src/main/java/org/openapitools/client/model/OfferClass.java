/*
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CallbackOptions;
import org.openapitools.client.model.ClassTemplateInfo;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.ImageModuleData;
import org.openapitools.client.model.InfoModuleData;
import org.openapitools.client.model.LatLongPoint;
import org.openapitools.client.model.LinksModuleData;
import org.openapitools.client.model.LocalizedString;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.Review;
import org.openapitools.client.model.SecurityAnimation;
import org.openapitools.client.model.TextModuleData;
import org.openapitools.client.model.Uri;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OfferClass
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:24.677339-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OfferClass {
  public static final String SERIALIZED_NAME_ALLOW_MULTIPLE_USERS_PER_OBJECT = "allowMultipleUsersPerObject";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ALLOW_MULTIPLE_USERS_PER_OBJECT)
  private Boolean allowMultipleUsersPerObject;

  public static final String SERIALIZED_NAME_CALLBACK_OPTIONS = "callbackOptions";
  @SerializedName(SERIALIZED_NAME_CALLBACK_OPTIONS)
  private CallbackOptions callbackOptions;

  public static final String SERIALIZED_NAME_CLASS_TEMPLATE_INFO = "classTemplateInfo";
  @SerializedName(SERIALIZED_NAME_CLASS_TEMPLATE_INFO)
  private ClassTemplateInfo classTemplateInfo;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private String details;

  public static final String SERIALIZED_NAME_ENABLE_SMART_TAP = "enableSmartTap";
  @SerializedName(SERIALIZED_NAME_ENABLE_SMART_TAP)
  private Boolean enableSmartTap;

  public static final String SERIALIZED_NAME_FINE_PRINT = "finePrint";
  @SerializedName(SERIALIZED_NAME_FINE_PRINT)
  private String finePrint;

  public static final String SERIALIZED_NAME_HELP_URI = "helpUri";
  @SerializedName(SERIALIZED_NAME_HELP_URI)
  private Uri helpUri;

  public static final String SERIALIZED_NAME_HERO_IMAGE = "heroImage";
  @SerializedName(SERIALIZED_NAME_HERO_IMAGE)
  private Image heroImage;

  public static final String SERIALIZED_NAME_HEX_BACKGROUND_COLOR = "hexBackgroundColor";
  @SerializedName(SERIALIZED_NAME_HEX_BACKGROUND_COLOR)
  private String hexBackgroundColor;

  public static final String SERIALIZED_NAME_HOMEPAGE_URI = "homepageUri";
  @SerializedName(SERIALIZED_NAME_HOMEPAGE_URI)
  private Uri homepageUri;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_MODULES_DATA = "imageModulesData";
  @SerializedName(SERIALIZED_NAME_IMAGE_MODULES_DATA)
  private List<ImageModuleData> imageModulesData = new ArrayList<>();

  public static final String SERIALIZED_NAME_INFO_MODULE_DATA = "infoModuleData";
  @SerializedName(SERIALIZED_NAME_INFO_MODULE_DATA)
  private InfoModuleData infoModuleData;

  public static final String SERIALIZED_NAME_ISSUER_NAME = "issuerName";
  @SerializedName(SERIALIZED_NAME_ISSUER_NAME)
  private String issuerName;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LINKS_MODULE_DATA = "linksModuleData";
  @SerializedName(SERIALIZED_NAME_LINKS_MODULE_DATA)
  private LinksModuleData linksModuleData;

  public static final String SERIALIZED_NAME_LOCALIZED_DETAILS = "localizedDetails";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_DETAILS)
  private LocalizedString localizedDetails;

  public static final String SERIALIZED_NAME_LOCALIZED_FINE_PRINT = "localizedFinePrint";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_FINE_PRINT)
  private LocalizedString localizedFinePrint;

  public static final String SERIALIZED_NAME_LOCALIZED_ISSUER_NAME = "localizedIssuerName";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_ISSUER_NAME)
  private LocalizedString localizedIssuerName;

  public static final String SERIALIZED_NAME_LOCALIZED_PROVIDER = "localizedProvider";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_PROVIDER)
  private LocalizedString localizedProvider;

  public static final String SERIALIZED_NAME_LOCALIZED_SHORT_TITLE = "localizedShortTitle";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_SHORT_TITLE)
  private LocalizedString localizedShortTitle;

  public static final String SERIALIZED_NAME_LOCALIZED_TITLE = "localizedTitle";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_TITLE)
  private LocalizedString localizedTitle;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<LatLongPoint> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<Message> messages = new ArrayList<>();

  /**
   * Identifies whether multiple users and devices will save the same object referencing this class.
   */
  @JsonAdapter(MultipleDevicesAndHoldersAllowedStatusEnum.Adapter.class)
  public enum MultipleDevicesAndHoldersAllowedStatusEnum {
    STATUS_UNSPECIFIED("STATUS_UNSPECIFIED"),
    
    MULTIPLE_HOLDERS("MULTIPLE_HOLDERS"),
    
    ONE_USER_ALL_DEVICES("ONE_USER_ALL_DEVICES"),
    
    ONE_USER_ONE_DEVICE("ONE_USER_ONE_DEVICE"),
    
    MULTIPLE_HOLDERS2("multipleHolders"),
    
    ONE_USER_ALL_DEVICES2("oneUserAllDevices"),
    
    ONE_USER_ONE_DEVICE2("oneUserOneDevice");

    private String value;

    MultipleDevicesAndHoldersAllowedStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MultipleDevicesAndHoldersAllowedStatusEnum fromValue(String value) {
      for (MultipleDevicesAndHoldersAllowedStatusEnum b : MultipleDevicesAndHoldersAllowedStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MultipleDevicesAndHoldersAllowedStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MultipleDevicesAndHoldersAllowedStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MultipleDevicesAndHoldersAllowedStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MultipleDevicesAndHoldersAllowedStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MultipleDevicesAndHoldersAllowedStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MULTIPLE_DEVICES_AND_HOLDERS_ALLOWED_STATUS = "multipleDevicesAndHoldersAllowedStatus";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_DEVICES_AND_HOLDERS_ALLOWED_STATUS)
  private MultipleDevicesAndHoldersAllowedStatusEnum multipleDevicesAndHoldersAllowedStatus;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  /**
   * Required. The redemption channels applicable to this offer.
   */
  @JsonAdapter(RedemptionChannelEnum.Adapter.class)
  public enum RedemptionChannelEnum {
    REDEMPTION_CHANNEL_UNSPECIFIED("REDEMPTION_CHANNEL_UNSPECIFIED"),
    
    INSTORE("INSTORE"),
    
    INSTORE2("instore"),
    
    ONLINE("ONLINE"),
    
    ONLINE2("online"),
    
    BOTH("BOTH"),
    
    BOTH2("both"),
    
    TEMPORARY_PRICE_REDUCTION("TEMPORARY_PRICE_REDUCTION"),
    
    TEMPORARY_PRICE_REDUCTION2("temporaryPriceReduction");

    private String value;

    RedemptionChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RedemptionChannelEnum fromValue(String value) {
      for (RedemptionChannelEnum b : RedemptionChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RedemptionChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RedemptionChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RedemptionChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RedemptionChannelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RedemptionChannelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REDEMPTION_CHANNEL = "redemptionChannel";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_CHANNEL)
  private RedemptionChannelEnum redemptionChannel;

  public static final String SERIALIZED_NAME_REDEMPTION_ISSUERS = "redemptionIssuers";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_ISSUERS)
  private List<String> redemptionIssuers = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVIEW = "review";
  @SerializedName(SERIALIZED_NAME_REVIEW)
  private Review review;

  /**
   * Required. The status of the class. This field can be set to &#x60;draft&#x60; or The status of the class. This field can be set to &#x60;draft&#x60; or &#x60;underReview&#x60; using the insert, patch, or update API calls. Once the review state is changed from &#x60;draft&#x60; it may not be changed back to &#x60;draft&#x60;. You should keep this field to &#x60;draft&#x60; when the class is under development. A &#x60;draft&#x60; class cannot be used to create any object. You should set this field to &#x60;underReview&#x60; when you believe the class is ready for use. The platform will automatically set this field to &#x60;approved&#x60; and it can be immediately used to create or migrate objects. When updating an already &#x60;approved&#x60; class you should keep setting this field to &#x60;underReview&#x60;.
   */
  @JsonAdapter(ReviewStatusEnum.Adapter.class)
  public enum ReviewStatusEnum {
    REVIEW_STATUS_UNSPECIFIED("REVIEW_STATUS_UNSPECIFIED"),
    
    UNDER_REVIEW("UNDER_REVIEW"),
    
    UNDER_REVIEW2("underReview"),
    
    APPROVED("APPROVED"),
    
    APPROVED2("approved"),
    
    REJECTED("REJECTED"),
    
    REJECTED2("rejected"),
    
    DRAFT("DRAFT"),
    
    DRAFT2("draft");

    private String value;

    ReviewStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReviewStatusEnum fromValue(String value) {
      for (ReviewStatusEnum b : ReviewStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReviewStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReviewStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReviewStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReviewStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReviewStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REVIEW_STATUS = "reviewStatus";
  @SerializedName(SERIALIZED_NAME_REVIEW_STATUS)
  private ReviewStatusEnum reviewStatus;

  public static final String SERIALIZED_NAME_SECURITY_ANIMATION = "securityAnimation";
  @SerializedName(SERIALIZED_NAME_SECURITY_ANIMATION)
  private SecurityAnimation securityAnimation;

  public static final String SERIALIZED_NAME_SHORT_TITLE = "shortTitle";
  @SerializedName(SERIALIZED_NAME_SHORT_TITLE)
  private String shortTitle;

  public static final String SERIALIZED_NAME_TEXT_MODULES_DATA = "textModulesData";
  @SerializedName(SERIALIZED_NAME_TEXT_MODULES_DATA)
  private List<TextModuleData> textModulesData = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TITLE_IMAGE = "titleImage";
  @SerializedName(SERIALIZED_NAME_TITLE_IMAGE)
  private Image titleImage;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  /**
   * View Unlock Requirement options for the offer.
   */
  @JsonAdapter(ViewUnlockRequirementEnum.Adapter.class)
  public enum ViewUnlockRequirementEnum {
    VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED("VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED"),
    
    UNLOCK_NOT_REQUIRED("UNLOCK_NOT_REQUIRED"),
    
    UNLOCK_REQUIRED_TO_VIEW("UNLOCK_REQUIRED_TO_VIEW");

    private String value;

    ViewUnlockRequirementEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViewUnlockRequirementEnum fromValue(String value) {
      for (ViewUnlockRequirementEnum b : ViewUnlockRequirementEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViewUnlockRequirementEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewUnlockRequirementEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViewUnlockRequirementEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViewUnlockRequirementEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ViewUnlockRequirementEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIEW_UNLOCK_REQUIREMENT = "viewUnlockRequirement";
  @SerializedName(SERIALIZED_NAME_VIEW_UNLOCK_REQUIREMENT)
  private ViewUnlockRequirementEnum viewUnlockRequirement;

  public static final String SERIALIZED_NAME_WIDE_TITLE_IMAGE = "wideTitleImage";
  @SerializedName(SERIALIZED_NAME_WIDE_TITLE_IMAGE)
  private Image wideTitleImage;

  public static final String SERIALIZED_NAME_WORD_MARK = "wordMark";
  @SerializedName(SERIALIZED_NAME_WORD_MARK)
  private Image wordMark;

  public OfferClass() {
  }

  @Deprecated
  public OfferClass allowMultipleUsersPerObject(Boolean allowMultipleUsersPerObject) {
    this.allowMultipleUsersPerObject = allowMultipleUsersPerObject;
    return this;
  }

  /**
   * Deprecated. Use &#x60;multipleDevicesAndHoldersAllowedStatus&#x60; instead.
   * @return allowMultipleUsersPerObject
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getAllowMultipleUsersPerObject() {
    return allowMultipleUsersPerObject;
  }

  @Deprecated
  public void setAllowMultipleUsersPerObject(Boolean allowMultipleUsersPerObject) {
    this.allowMultipleUsersPerObject = allowMultipleUsersPerObject;
  }


  public OfferClass callbackOptions(CallbackOptions callbackOptions) {
    this.callbackOptions = callbackOptions;
    return this;
  }

  /**
   * Get callbackOptions
   * @return callbackOptions
   */
  @javax.annotation.Nullable
  public CallbackOptions getCallbackOptions() {
    return callbackOptions;
  }

  public void setCallbackOptions(CallbackOptions callbackOptions) {
    this.callbackOptions = callbackOptions;
  }


  public OfferClass classTemplateInfo(ClassTemplateInfo classTemplateInfo) {
    this.classTemplateInfo = classTemplateInfo;
    return this;
  }

  /**
   * Get classTemplateInfo
   * @return classTemplateInfo
   */
  @javax.annotation.Nullable
  public ClassTemplateInfo getClassTemplateInfo() {
    return classTemplateInfo;
  }

  public void setClassTemplateInfo(ClassTemplateInfo classTemplateInfo) {
    this.classTemplateInfo = classTemplateInfo;
  }


  public OfferClass countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Country code used to display the card&#39;s country (when the user is not in that country), as well as to display localized content when content is not available in the user&#39;s locale.
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public OfferClass details(String details) {
    this.details = details;
    return this;
  }

  /**
   * The details of the offer.
   * @return details
   */
  @javax.annotation.Nullable
  public String getDetails() {
    return details;
  }

  public void setDetails(String details) {
    this.details = details;
  }


  public OfferClass enableSmartTap(Boolean enableSmartTap) {
    this.enableSmartTap = enableSmartTap;
    return this;
  }

  /**
   * Identifies whether this class supports Smart Tap. The &#x60;redemptionIssuers&#x60; and object level &#x60;smartTapRedemptionLevel&#x60; fields must also be set up correctly in order for a pass to support Smart Tap.
   * @return enableSmartTap
   */
  @javax.annotation.Nullable
  public Boolean getEnableSmartTap() {
    return enableSmartTap;
  }

  public void setEnableSmartTap(Boolean enableSmartTap) {
    this.enableSmartTap = enableSmartTap;
  }


  public OfferClass finePrint(String finePrint) {
    this.finePrint = finePrint;
    return this;
  }

  /**
   * The fine print or terms of the offer, such as \&quot;20% off any t-shirt at Adam&#39;s Apparel.\&quot;
   * @return finePrint
   */
  @javax.annotation.Nullable
  public String getFinePrint() {
    return finePrint;
  }

  public void setFinePrint(String finePrint) {
    this.finePrint = finePrint;
  }


  public OfferClass helpUri(Uri helpUri) {
    this.helpUri = helpUri;
    return this;
  }

  /**
   * Get helpUri
   * @return helpUri
   */
  @javax.annotation.Nullable
  public Uri getHelpUri() {
    return helpUri;
  }

  public void setHelpUri(Uri helpUri) {
    this.helpUri = helpUri;
  }


  public OfferClass heroImage(Image heroImage) {
    this.heroImage = heroImage;
    return this;
  }

  /**
   * Get heroImage
   * @return heroImage
   */
  @javax.annotation.Nullable
  public Image getHeroImage() {
    return heroImage;
  }

  public void setHeroImage(Image heroImage) {
    this.heroImage = heroImage;
  }


  public OfferClass hexBackgroundColor(String hexBackgroundColor) {
    this.hexBackgroundColor = hexBackgroundColor;
    return this;
  }

  /**
   * The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as &#x60;#ffcc00&#x60;. You can also use the shorthand version of the RGB triplet which is #rgb, such as &#x60;#fc0&#x60;.
   * @return hexBackgroundColor
   */
  @javax.annotation.Nullable
  public String getHexBackgroundColor() {
    return hexBackgroundColor;
  }

  public void setHexBackgroundColor(String hexBackgroundColor) {
    this.hexBackgroundColor = hexBackgroundColor;
  }


  public OfferClass homepageUri(Uri homepageUri) {
    this.homepageUri = homepageUri;
    return this;
  }

  /**
   * Get homepageUri
   * @return homepageUri
   */
  @javax.annotation.Nullable
  public Uri getHomepageUri() {
    return homepageUri;
  }

  public void setHomepageUri(Uri homepageUri) {
    this.homepageUri = homepageUri;
  }


  public OfferClass id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Required. The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, &#39;.&#39;, &#39;_&#39;, or &#39;-&#39;.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OfferClass imageModulesData(List<ImageModuleData> imageModulesData) {
    this.imageModulesData = imageModulesData;
    return this;
  }

  public OfferClass addImageModulesDataItem(ImageModuleData imageModulesDataItem) {
    if (this.imageModulesData == null) {
      this.imageModulesData = new ArrayList<>();
    }
    this.imageModulesData.add(imageModulesDataItem);
    return this;
  }

  /**
   * Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.
   * @return imageModulesData
   */
  @javax.annotation.Nullable
  public List<ImageModuleData> getImageModulesData() {
    return imageModulesData;
  }

  public void setImageModulesData(List<ImageModuleData> imageModulesData) {
    this.imageModulesData = imageModulesData;
  }


  public OfferClass infoModuleData(InfoModuleData infoModuleData) {
    this.infoModuleData = infoModuleData;
    return this;
  }

  /**
   * Get infoModuleData
   * @return infoModuleData
   */
  @javax.annotation.Nullable
  public InfoModuleData getInfoModuleData() {
    return infoModuleData;
  }

  public void setInfoModuleData(InfoModuleData infoModuleData) {
    this.infoModuleData = infoModuleData;
  }


  public OfferClass issuerName(String issuerName) {
    this.issuerName = issuerName;
    return this;
  }

  /**
   * Required. The issuer name. Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.
   * @return issuerName
   */
  @javax.annotation.Nullable
  public String getIssuerName() {
    return issuerName;
  }

  public void setIssuerName(String issuerName) {
    this.issuerName = issuerName;
  }


  @Deprecated
  public OfferClass kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string &#x60;\&quot;walletobjects#offerClass\&quot;&#x60;.
   * @return kind
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  @Deprecated
  public void setKind(String kind) {
    this.kind = kind;
  }


  public OfferClass linksModuleData(LinksModuleData linksModuleData) {
    this.linksModuleData = linksModuleData;
    return this;
  }

  /**
   * Get linksModuleData
   * @return linksModuleData
   */
  @javax.annotation.Nullable
  public LinksModuleData getLinksModuleData() {
    return linksModuleData;
  }

  public void setLinksModuleData(LinksModuleData linksModuleData) {
    this.linksModuleData = linksModuleData;
  }


  public OfferClass localizedDetails(LocalizedString localizedDetails) {
    this.localizedDetails = localizedDetails;
    return this;
  }

  /**
   * Get localizedDetails
   * @return localizedDetails
   */
  @javax.annotation.Nullable
  public LocalizedString getLocalizedDetails() {
    return localizedDetails;
  }

  public void setLocalizedDetails(LocalizedString localizedDetails) {
    this.localizedDetails = localizedDetails;
  }


  public OfferClass localizedFinePrint(LocalizedString localizedFinePrint) {
    this.localizedFinePrint = localizedFinePrint;
    return this;
  }

  /**
   * Get localizedFinePrint
   * @return localizedFinePrint
   */
  @javax.annotation.Nullable
  public LocalizedString getLocalizedFinePrint() {
    return localizedFinePrint;
  }

  public void setLocalizedFinePrint(LocalizedString localizedFinePrint) {
    this.localizedFinePrint = localizedFinePrint;
  }


  public OfferClass localizedIssuerName(LocalizedString localizedIssuerName) {
    this.localizedIssuerName = localizedIssuerName;
    return this;
  }

  /**
   * Get localizedIssuerName
   * @return localizedIssuerName
   */
  @javax.annotation.Nullable
  public LocalizedString getLocalizedIssuerName() {
    return localizedIssuerName;
  }

  public void setLocalizedIssuerName(LocalizedString localizedIssuerName) {
    this.localizedIssuerName = localizedIssuerName;
  }


  public OfferClass localizedProvider(LocalizedString localizedProvider) {
    this.localizedProvider = localizedProvider;
    return this;
  }

  /**
   * Get localizedProvider
   * @return localizedProvider
   */
  @javax.annotation.Nullable
  public LocalizedString getLocalizedProvider() {
    return localizedProvider;
  }

  public void setLocalizedProvider(LocalizedString localizedProvider) {
    this.localizedProvider = localizedProvider;
  }


  public OfferClass localizedShortTitle(LocalizedString localizedShortTitle) {
    this.localizedShortTitle = localizedShortTitle;
    return this;
  }

  /**
   * Get localizedShortTitle
   * @return localizedShortTitle
   */
  @javax.annotation.Nullable
  public LocalizedString getLocalizedShortTitle() {
    return localizedShortTitle;
  }

  public void setLocalizedShortTitle(LocalizedString localizedShortTitle) {
    this.localizedShortTitle = localizedShortTitle;
  }


  public OfferClass localizedTitle(LocalizedString localizedTitle) {
    this.localizedTitle = localizedTitle;
    return this;
  }

  /**
   * Get localizedTitle
   * @return localizedTitle
   */
  @javax.annotation.Nullable
  public LocalizedString getLocalizedTitle() {
    return localizedTitle;
  }

  public void setLocalizedTitle(LocalizedString localizedTitle) {
    this.localizedTitle = localizedTitle;
  }


  public OfferClass locations(List<LatLongPoint> locations) {
    this.locations = locations;
    return this;
  }

  public OfferClass addLocationsItem(LatLongPoint locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * Note: This field is currently not supported to trigger geo notifications.
   * @return locations
   */
  @javax.annotation.Nullable
  public List<LatLongPoint> getLocations() {
    return locations;
  }

  public void setLocations(List<LatLongPoint> locations) {
    this.locations = locations;
  }


  public OfferClass messages(List<Message> messages) {
    this.messages = messages;
    return this;
  }

  public OfferClass addMessagesItem(Message messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

  /**
   * An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.
   * @return messages
   */
  @javax.annotation.Nullable
  public List<Message> getMessages() {
    return messages;
  }

  public void setMessages(List<Message> messages) {
    this.messages = messages;
  }


  public OfferClass multipleDevicesAndHoldersAllowedStatus(MultipleDevicesAndHoldersAllowedStatusEnum multipleDevicesAndHoldersAllowedStatus) {
    this.multipleDevicesAndHoldersAllowedStatus = multipleDevicesAndHoldersAllowedStatus;
    return this;
  }

  /**
   * Identifies whether multiple users and devices will save the same object referencing this class.
   * @return multipleDevicesAndHoldersAllowedStatus
   */
  @javax.annotation.Nullable
  public MultipleDevicesAndHoldersAllowedStatusEnum getMultipleDevicesAndHoldersAllowedStatus() {
    return multipleDevicesAndHoldersAllowedStatus;
  }

  public void setMultipleDevicesAndHoldersAllowedStatus(MultipleDevicesAndHoldersAllowedStatusEnum multipleDevicesAndHoldersAllowedStatus) {
    this.multipleDevicesAndHoldersAllowedStatus = multipleDevicesAndHoldersAllowedStatus;
  }


  public OfferClass provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Required. The offer provider (either the aggregator name or merchant name). Recommended maximum length is 12 characters to ensure full string is displayed on smaller screens.
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }


  public OfferClass redemptionChannel(RedemptionChannelEnum redemptionChannel) {
    this.redemptionChannel = redemptionChannel;
    return this;
  }

  /**
   * Required. The redemption channels applicable to this offer.
   * @return redemptionChannel
   */
  @javax.annotation.Nullable
  public RedemptionChannelEnum getRedemptionChannel() {
    return redemptionChannel;
  }

  public void setRedemptionChannel(RedemptionChannelEnum redemptionChannel) {
    this.redemptionChannel = redemptionChannel;
  }


  public OfferClass redemptionIssuers(List<String> redemptionIssuers) {
    this.redemptionIssuers = redemptionIssuers;
    return this;
  }

  public OfferClass addRedemptionIssuersItem(String redemptionIssuersItem) {
    if (this.redemptionIssuers == null) {
      this.redemptionIssuers = new ArrayList<>();
    }
    this.redemptionIssuers.add(redemptionIssuersItem);
    return this;
  }

  /**
   * Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The &#x60;enableSmartTap&#x60; and object level &#x60;smartTapRedemptionLevel&#x60; fields must also be set up correctly in order for a pass to support Smart Tap.
   * @return redemptionIssuers
   */
  @javax.annotation.Nullable
  public List<String> getRedemptionIssuers() {
    return redemptionIssuers;
  }

  public void setRedemptionIssuers(List<String> redemptionIssuers) {
    this.redemptionIssuers = redemptionIssuers;
  }


  public OfferClass review(Review review) {
    this.review = review;
    return this;
  }

  /**
   * Get review
   * @return review
   */
  @javax.annotation.Nullable
  public Review getReview() {
    return review;
  }

  public void setReview(Review review) {
    this.review = review;
  }


  public OfferClass reviewStatus(ReviewStatusEnum reviewStatus) {
    this.reviewStatus = reviewStatus;
    return this;
  }

  /**
   * Required. The status of the class. This field can be set to &#x60;draft&#x60; or The status of the class. This field can be set to &#x60;draft&#x60; or &#x60;underReview&#x60; using the insert, patch, or update API calls. Once the review state is changed from &#x60;draft&#x60; it may not be changed back to &#x60;draft&#x60;. You should keep this field to &#x60;draft&#x60; when the class is under development. A &#x60;draft&#x60; class cannot be used to create any object. You should set this field to &#x60;underReview&#x60; when you believe the class is ready for use. The platform will automatically set this field to &#x60;approved&#x60; and it can be immediately used to create or migrate objects. When updating an already &#x60;approved&#x60; class you should keep setting this field to &#x60;underReview&#x60;.
   * @return reviewStatus
   */
  @javax.annotation.Nullable
  public ReviewStatusEnum getReviewStatus() {
    return reviewStatus;
  }

  public void setReviewStatus(ReviewStatusEnum reviewStatus) {
    this.reviewStatus = reviewStatus;
  }


  public OfferClass securityAnimation(SecurityAnimation securityAnimation) {
    this.securityAnimation = securityAnimation;
    return this;
  }

  /**
   * Get securityAnimation
   * @return securityAnimation
   */
  @javax.annotation.Nullable
  public SecurityAnimation getSecurityAnimation() {
    return securityAnimation;
  }

  public void setSecurityAnimation(SecurityAnimation securityAnimation) {
    this.securityAnimation = securityAnimation;
  }


  public OfferClass shortTitle(String shortTitle) {
    this.shortTitle = shortTitle;
    return this;
  }

  /**
   * A shortened version of the title of the offer, such as \&quot;20% off,\&quot; shown to users as a quick reference to the offer contents. Recommended maximum length is 20 characters.
   * @return shortTitle
   */
  @javax.annotation.Nullable
  public String getShortTitle() {
    return shortTitle;
  }

  public void setShortTitle(String shortTitle) {
    this.shortTitle = shortTitle;
  }


  public OfferClass textModulesData(List<TextModuleData> textModulesData) {
    this.textModulesData = textModulesData;
    return this;
  }

  public OfferClass addTextModulesDataItem(TextModuleData textModulesDataItem) {
    if (this.textModulesData == null) {
      this.textModulesData = new ArrayList<>();
    }
    this.textModulesData.add(textModulesDataItem);
    return this;
  }

  /**
   * Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.
   * @return textModulesData
   */
  @javax.annotation.Nullable
  public List<TextModuleData> getTextModulesData() {
    return textModulesData;
  }

  public void setTextModulesData(List<TextModuleData> textModulesData) {
    this.textModulesData = textModulesData;
  }


  public OfferClass title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Required. The title of the offer, such as \&quot;20% off any t-shirt.\&quot; Recommended maximum length is 60 characters to ensure full string is displayed on smaller screens.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public OfferClass titleImage(Image titleImage) {
    this.titleImage = titleImage;
    return this;
  }

  /**
   * Get titleImage
   * @return titleImage
   */
  @javax.annotation.Nullable
  public Image getTitleImage() {
    return titleImage;
  }

  public void setTitleImage(Image titleImage) {
    this.titleImage = titleImage;
  }


  @Deprecated
  public OfferClass version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Deprecated
   * @return version
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  @Deprecated
  public void setVersion(String version) {
    this.version = version;
  }


  public OfferClass viewUnlockRequirement(ViewUnlockRequirementEnum viewUnlockRequirement) {
    this.viewUnlockRequirement = viewUnlockRequirement;
    return this;
  }

  /**
   * View Unlock Requirement options for the offer.
   * @return viewUnlockRequirement
   */
  @javax.annotation.Nullable
  public ViewUnlockRequirementEnum getViewUnlockRequirement() {
    return viewUnlockRequirement;
  }

  public void setViewUnlockRequirement(ViewUnlockRequirementEnum viewUnlockRequirement) {
    this.viewUnlockRequirement = viewUnlockRequirement;
  }


  public OfferClass wideTitleImage(Image wideTitleImage) {
    this.wideTitleImage = wideTitleImage;
    return this;
  }

  /**
   * Get wideTitleImage
   * @return wideTitleImage
   */
  @javax.annotation.Nullable
  public Image getWideTitleImage() {
    return wideTitleImage;
  }

  public void setWideTitleImage(Image wideTitleImage) {
    this.wideTitleImage = wideTitleImage;
  }


  public OfferClass wordMark(Image wordMark) {
    this.wordMark = wordMark;
    return this;
  }

  /**
   * Get wordMark
   * @return wordMark
   */
  @javax.annotation.Nullable
  public Image getWordMark() {
    return wordMark;
  }

  public void setWordMark(Image wordMark) {
    this.wordMark = wordMark;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OfferClass offerClass = (OfferClass) o;
    return Objects.equals(this.allowMultipleUsersPerObject, offerClass.allowMultipleUsersPerObject) &&
        Objects.equals(this.callbackOptions, offerClass.callbackOptions) &&
        Objects.equals(this.classTemplateInfo, offerClass.classTemplateInfo) &&
        Objects.equals(this.countryCode, offerClass.countryCode) &&
        Objects.equals(this.details, offerClass.details) &&
        Objects.equals(this.enableSmartTap, offerClass.enableSmartTap) &&
        Objects.equals(this.finePrint, offerClass.finePrint) &&
        Objects.equals(this.helpUri, offerClass.helpUri) &&
        Objects.equals(this.heroImage, offerClass.heroImage) &&
        Objects.equals(this.hexBackgroundColor, offerClass.hexBackgroundColor) &&
        Objects.equals(this.homepageUri, offerClass.homepageUri) &&
        Objects.equals(this.id, offerClass.id) &&
        Objects.equals(this.imageModulesData, offerClass.imageModulesData) &&
        Objects.equals(this.infoModuleData, offerClass.infoModuleData) &&
        Objects.equals(this.issuerName, offerClass.issuerName) &&
        Objects.equals(this.kind, offerClass.kind) &&
        Objects.equals(this.linksModuleData, offerClass.linksModuleData) &&
        Objects.equals(this.localizedDetails, offerClass.localizedDetails) &&
        Objects.equals(this.localizedFinePrint, offerClass.localizedFinePrint) &&
        Objects.equals(this.localizedIssuerName, offerClass.localizedIssuerName) &&
        Objects.equals(this.localizedProvider, offerClass.localizedProvider) &&
        Objects.equals(this.localizedShortTitle, offerClass.localizedShortTitle) &&
        Objects.equals(this.localizedTitle, offerClass.localizedTitle) &&
        Objects.equals(this.locations, offerClass.locations) &&
        Objects.equals(this.messages, offerClass.messages) &&
        Objects.equals(this.multipleDevicesAndHoldersAllowedStatus, offerClass.multipleDevicesAndHoldersAllowedStatus) &&
        Objects.equals(this.provider, offerClass.provider) &&
        Objects.equals(this.redemptionChannel, offerClass.redemptionChannel) &&
        Objects.equals(this.redemptionIssuers, offerClass.redemptionIssuers) &&
        Objects.equals(this.review, offerClass.review) &&
        Objects.equals(this.reviewStatus, offerClass.reviewStatus) &&
        Objects.equals(this.securityAnimation, offerClass.securityAnimation) &&
        Objects.equals(this.shortTitle, offerClass.shortTitle) &&
        Objects.equals(this.textModulesData, offerClass.textModulesData) &&
        Objects.equals(this.title, offerClass.title) &&
        Objects.equals(this.titleImage, offerClass.titleImage) &&
        Objects.equals(this.version, offerClass.version) &&
        Objects.equals(this.viewUnlockRequirement, offerClass.viewUnlockRequirement) &&
        Objects.equals(this.wideTitleImage, offerClass.wideTitleImage) &&
        Objects.equals(this.wordMark, offerClass.wordMark);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowMultipleUsersPerObject, callbackOptions, classTemplateInfo, countryCode, details, enableSmartTap, finePrint, helpUri, heroImage, hexBackgroundColor, homepageUri, id, imageModulesData, infoModuleData, issuerName, kind, linksModuleData, localizedDetails, localizedFinePrint, localizedIssuerName, localizedProvider, localizedShortTitle, localizedTitle, locations, messages, multipleDevicesAndHoldersAllowedStatus, provider, redemptionChannel, redemptionIssuers, review, reviewStatus, securityAnimation, shortTitle, textModulesData, title, titleImage, version, viewUnlockRequirement, wideTitleImage, wordMark);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OfferClass {\n");
    sb.append("    allowMultipleUsersPerObject: ").append(toIndentedString(allowMultipleUsersPerObject)).append("\n");
    sb.append("    callbackOptions: ").append(toIndentedString(callbackOptions)).append("\n");
    sb.append("    classTemplateInfo: ").append(toIndentedString(classTemplateInfo)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    enableSmartTap: ").append(toIndentedString(enableSmartTap)).append("\n");
    sb.append("    finePrint: ").append(toIndentedString(finePrint)).append("\n");
    sb.append("    helpUri: ").append(toIndentedString(helpUri)).append("\n");
    sb.append("    heroImage: ").append(toIndentedString(heroImage)).append("\n");
    sb.append("    hexBackgroundColor: ").append(toIndentedString(hexBackgroundColor)).append("\n");
    sb.append("    homepageUri: ").append(toIndentedString(homepageUri)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageModulesData: ").append(toIndentedString(imageModulesData)).append("\n");
    sb.append("    infoModuleData: ").append(toIndentedString(infoModuleData)).append("\n");
    sb.append("    issuerName: ").append(toIndentedString(issuerName)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    linksModuleData: ").append(toIndentedString(linksModuleData)).append("\n");
    sb.append("    localizedDetails: ").append(toIndentedString(localizedDetails)).append("\n");
    sb.append("    localizedFinePrint: ").append(toIndentedString(localizedFinePrint)).append("\n");
    sb.append("    localizedIssuerName: ").append(toIndentedString(localizedIssuerName)).append("\n");
    sb.append("    localizedProvider: ").append(toIndentedString(localizedProvider)).append("\n");
    sb.append("    localizedShortTitle: ").append(toIndentedString(localizedShortTitle)).append("\n");
    sb.append("    localizedTitle: ").append(toIndentedString(localizedTitle)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    multipleDevicesAndHoldersAllowedStatus: ").append(toIndentedString(multipleDevicesAndHoldersAllowedStatus)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    redemptionChannel: ").append(toIndentedString(redemptionChannel)).append("\n");
    sb.append("    redemptionIssuers: ").append(toIndentedString(redemptionIssuers)).append("\n");
    sb.append("    review: ").append(toIndentedString(review)).append("\n");
    sb.append("    reviewStatus: ").append(toIndentedString(reviewStatus)).append("\n");
    sb.append("    securityAnimation: ").append(toIndentedString(securityAnimation)).append("\n");
    sb.append("    shortTitle: ").append(toIndentedString(shortTitle)).append("\n");
    sb.append("    textModulesData: ").append(toIndentedString(textModulesData)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    titleImage: ").append(toIndentedString(titleImage)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    viewUnlockRequirement: ").append(toIndentedString(viewUnlockRequirement)).append("\n");
    sb.append("    wideTitleImage: ").append(toIndentedString(wideTitleImage)).append("\n");
    sb.append("    wordMark: ").append(toIndentedString(wordMark)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowMultipleUsersPerObject");
    openapiFields.add("callbackOptions");
    openapiFields.add("classTemplateInfo");
    openapiFields.add("countryCode");
    openapiFields.add("details");
    openapiFields.add("enableSmartTap");
    openapiFields.add("finePrint");
    openapiFields.add("helpUri");
    openapiFields.add("heroImage");
    openapiFields.add("hexBackgroundColor");
    openapiFields.add("homepageUri");
    openapiFields.add("id");
    openapiFields.add("imageModulesData");
    openapiFields.add("infoModuleData");
    openapiFields.add("issuerName");
    openapiFields.add("kind");
    openapiFields.add("linksModuleData");
    openapiFields.add("localizedDetails");
    openapiFields.add("localizedFinePrint");
    openapiFields.add("localizedIssuerName");
    openapiFields.add("localizedProvider");
    openapiFields.add("localizedShortTitle");
    openapiFields.add("localizedTitle");
    openapiFields.add("locations");
    openapiFields.add("messages");
    openapiFields.add("multipleDevicesAndHoldersAllowedStatus");
    openapiFields.add("provider");
    openapiFields.add("redemptionChannel");
    openapiFields.add("redemptionIssuers");
    openapiFields.add("review");
    openapiFields.add("reviewStatus");
    openapiFields.add("securityAnimation");
    openapiFields.add("shortTitle");
    openapiFields.add("textModulesData");
    openapiFields.add("title");
    openapiFields.add("titleImage");
    openapiFields.add("version");
    openapiFields.add("viewUnlockRequirement");
    openapiFields.add("wideTitleImage");
    openapiFields.add("wordMark");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OfferClass
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OfferClass.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OfferClass is not found in the empty JSON string", OfferClass.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OfferClass.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OfferClass` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `callbackOptions`
      if (jsonObj.get("callbackOptions") != null && !jsonObj.get("callbackOptions").isJsonNull()) {
        CallbackOptions.validateJsonElement(jsonObj.get("callbackOptions"));
      }
      // validate the optional field `classTemplateInfo`
      if (jsonObj.get("classTemplateInfo") != null && !jsonObj.get("classTemplateInfo").isJsonNull()) {
        ClassTemplateInfo.validateJsonElement(jsonObj.get("classTemplateInfo"));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) && !jsonObj.get("details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("details").toString()));
      }
      if ((jsonObj.get("finePrint") != null && !jsonObj.get("finePrint").isJsonNull()) && !jsonObj.get("finePrint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `finePrint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("finePrint").toString()));
      }
      // validate the optional field `helpUri`
      if (jsonObj.get("helpUri") != null && !jsonObj.get("helpUri").isJsonNull()) {
        Uri.validateJsonElement(jsonObj.get("helpUri"));
      }
      // validate the optional field `heroImage`
      if (jsonObj.get("heroImage") != null && !jsonObj.get("heroImage").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("heroImage"));
      }
      if ((jsonObj.get("hexBackgroundColor") != null && !jsonObj.get("hexBackgroundColor").isJsonNull()) && !jsonObj.get("hexBackgroundColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hexBackgroundColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hexBackgroundColor").toString()));
      }
      // validate the optional field `homepageUri`
      if (jsonObj.get("homepageUri") != null && !jsonObj.get("homepageUri").isJsonNull()) {
        Uri.validateJsonElement(jsonObj.get("homepageUri"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("imageModulesData") != null && !jsonObj.get("imageModulesData").isJsonNull()) {
        JsonArray jsonArrayimageModulesData = jsonObj.getAsJsonArray("imageModulesData");
        if (jsonArrayimageModulesData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("imageModulesData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `imageModulesData` to be an array in the JSON string but got `%s`", jsonObj.get("imageModulesData").toString()));
          }

          // validate the optional field `imageModulesData` (array)
          for (int i = 0; i < jsonArrayimageModulesData.size(); i++) {
            ImageModuleData.validateJsonElement(jsonArrayimageModulesData.get(i));
          };
        }
      }
      // validate the optional field `infoModuleData`
      if (jsonObj.get("infoModuleData") != null && !jsonObj.get("infoModuleData").isJsonNull()) {
        InfoModuleData.validateJsonElement(jsonObj.get("infoModuleData"));
      }
      if ((jsonObj.get("issuerName") != null && !jsonObj.get("issuerName").isJsonNull()) && !jsonObj.get("issuerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerName").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `linksModuleData`
      if (jsonObj.get("linksModuleData") != null && !jsonObj.get("linksModuleData").isJsonNull()) {
        LinksModuleData.validateJsonElement(jsonObj.get("linksModuleData"));
      }
      // validate the optional field `localizedDetails`
      if (jsonObj.get("localizedDetails") != null && !jsonObj.get("localizedDetails").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("localizedDetails"));
      }
      // validate the optional field `localizedFinePrint`
      if (jsonObj.get("localizedFinePrint") != null && !jsonObj.get("localizedFinePrint").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("localizedFinePrint"));
      }
      // validate the optional field `localizedIssuerName`
      if (jsonObj.get("localizedIssuerName") != null && !jsonObj.get("localizedIssuerName").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("localizedIssuerName"));
      }
      // validate the optional field `localizedProvider`
      if (jsonObj.get("localizedProvider") != null && !jsonObj.get("localizedProvider").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("localizedProvider"));
      }
      // validate the optional field `localizedShortTitle`
      if (jsonObj.get("localizedShortTitle") != null && !jsonObj.get("localizedShortTitle").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("localizedShortTitle"));
      }
      // validate the optional field `localizedTitle`
      if (jsonObj.get("localizedTitle") != null && !jsonObj.get("localizedTitle").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("localizedTitle"));
      }
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull()) {
        JsonArray jsonArraylocations = jsonObj.getAsJsonArray("locations");
        if (jsonArraylocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
          }

          // validate the optional field `locations` (array)
          for (int i = 0; i < jsonArraylocations.size(); i++) {
            LatLongPoint.validateJsonElement(jsonArraylocations.get(i));
          };
        }
      }
      if (jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) {
        JsonArray jsonArraymessages = jsonObj.getAsJsonArray("messages");
        if (jsonArraymessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
          }

          // validate the optional field `messages` (array)
          for (int i = 0; i < jsonArraymessages.size(); i++) {
            Message.validateJsonElement(jsonArraymessages.get(i));
          };
        }
      }
      if ((jsonObj.get("multipleDevicesAndHoldersAllowedStatus") != null && !jsonObj.get("multipleDevicesAndHoldersAllowedStatus").isJsonNull()) && !jsonObj.get("multipleDevicesAndHoldersAllowedStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `multipleDevicesAndHoldersAllowedStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("multipleDevicesAndHoldersAllowedStatus").toString()));
      }
      // validate the optional field `multipleDevicesAndHoldersAllowedStatus`
      if (jsonObj.get("multipleDevicesAndHoldersAllowedStatus") != null && !jsonObj.get("multipleDevicesAndHoldersAllowedStatus").isJsonNull()) {
        MultipleDevicesAndHoldersAllowedStatusEnum.validateJsonElement(jsonObj.get("multipleDevicesAndHoldersAllowedStatus"));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("redemptionChannel") != null && !jsonObj.get("redemptionChannel").isJsonNull()) && !jsonObj.get("redemptionChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redemptionChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redemptionChannel").toString()));
      }
      // validate the optional field `redemptionChannel`
      if (jsonObj.get("redemptionChannel") != null && !jsonObj.get("redemptionChannel").isJsonNull()) {
        RedemptionChannelEnum.validateJsonElement(jsonObj.get("redemptionChannel"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("redemptionIssuers") != null && !jsonObj.get("redemptionIssuers").isJsonNull() && !jsonObj.get("redemptionIssuers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redemptionIssuers` to be an array in the JSON string but got `%s`", jsonObj.get("redemptionIssuers").toString()));
      }
      // validate the optional field `review`
      if (jsonObj.get("review") != null && !jsonObj.get("review").isJsonNull()) {
        Review.validateJsonElement(jsonObj.get("review"));
      }
      if ((jsonObj.get("reviewStatus") != null && !jsonObj.get("reviewStatus").isJsonNull()) && !jsonObj.get("reviewStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewStatus").toString()));
      }
      // validate the optional field `reviewStatus`
      if (jsonObj.get("reviewStatus") != null && !jsonObj.get("reviewStatus").isJsonNull()) {
        ReviewStatusEnum.validateJsonElement(jsonObj.get("reviewStatus"));
      }
      // validate the optional field `securityAnimation`
      if (jsonObj.get("securityAnimation") != null && !jsonObj.get("securityAnimation").isJsonNull()) {
        SecurityAnimation.validateJsonElement(jsonObj.get("securityAnimation"));
      }
      if ((jsonObj.get("shortTitle") != null && !jsonObj.get("shortTitle").isJsonNull()) && !jsonObj.get("shortTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortTitle").toString()));
      }
      if (jsonObj.get("textModulesData") != null && !jsonObj.get("textModulesData").isJsonNull()) {
        JsonArray jsonArraytextModulesData = jsonObj.getAsJsonArray("textModulesData");
        if (jsonArraytextModulesData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("textModulesData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `textModulesData` to be an array in the JSON string but got `%s`", jsonObj.get("textModulesData").toString()));
          }

          // validate the optional field `textModulesData` (array)
          for (int i = 0; i < jsonArraytextModulesData.size(); i++) {
            TextModuleData.validateJsonElement(jsonArraytextModulesData.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `titleImage`
      if (jsonObj.get("titleImage") != null && !jsonObj.get("titleImage").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("titleImage"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("viewUnlockRequirement") != null && !jsonObj.get("viewUnlockRequirement").isJsonNull()) && !jsonObj.get("viewUnlockRequirement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewUnlockRequirement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewUnlockRequirement").toString()));
      }
      // validate the optional field `viewUnlockRequirement`
      if (jsonObj.get("viewUnlockRequirement") != null && !jsonObj.get("viewUnlockRequirement").isJsonNull()) {
        ViewUnlockRequirementEnum.validateJsonElement(jsonObj.get("viewUnlockRequirement"));
      }
      // validate the optional field `wideTitleImage`
      if (jsonObj.get("wideTitleImage") != null && !jsonObj.get("wideTitleImage").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("wideTitleImage"));
      }
      // validate the optional field `wordMark`
      if (jsonObj.get("wordMark") != null && !jsonObj.get("wordMark").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("wordMark"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OfferClass.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OfferClass' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OfferClass> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OfferClass.class));

       return (TypeAdapter<T>) new TypeAdapter<OfferClass>() {
           @Override
           public void write(JsonWriter out, OfferClass value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OfferClass read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OfferClass given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OfferClass
   * @throws IOException if the JSON string is invalid with respect to OfferClass
   */
  public static OfferClass fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OfferClass.class);
  }

  /**
   * Convert an instance of OfferClass to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

