/*
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LocalizedString;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EventDateTime
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:24.677339-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventDateTime {
  public static final String SERIALIZED_NAME_CUSTOM_DOORS_OPEN_LABEL = "customDoorsOpenLabel";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DOORS_OPEN_LABEL)
  private LocalizedString customDoorsOpenLabel;

  public static final String SERIALIZED_NAME_DOORS_OPEN = "doorsOpen";
  @SerializedName(SERIALIZED_NAME_DOORS_OPEN)
  private String doorsOpen;

  /**
   * The label to use for the doors open value (&#x60;doorsOpen&#x60;) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both &#x60;doorsOpenLabel&#x60; and &#x60;customDoorsOpenLabel&#x60; may not be set. If neither is set, the label will default to \&quot;Doors Open\&quot;, localized. If the doors open field is unset, this label will not be used.
   */
  @JsonAdapter(DoorsOpenLabelEnum.Adapter.class)
  public enum DoorsOpenLabelEnum {
    DOORS_OPEN_LABEL_UNSPECIFIED("DOORS_OPEN_LABEL_UNSPECIFIED"),
    
    DOORS_OPEN("DOORS_OPEN"),
    
    DOORS_OPEN2("doorsOpen"),
    
    GATES_OPEN("GATES_OPEN"),
    
    GATES_OPEN2("gatesOpen");

    private String value;

    DoorsOpenLabelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DoorsOpenLabelEnum fromValue(String value) {
      for (DoorsOpenLabelEnum b : DoorsOpenLabelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DoorsOpenLabelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DoorsOpenLabelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DoorsOpenLabelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DoorsOpenLabelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DoorsOpenLabelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOORS_OPEN_LABEL = "doorsOpenLabel";
  @SerializedName(SERIALIZED_NAME_DOORS_OPEN_LABEL)
  private DoorsOpenLabelEnum doorsOpenLabel;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private String end;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private String start;

  public EventDateTime() {
  }

  public EventDateTime customDoorsOpenLabel(LocalizedString customDoorsOpenLabel) {
    this.customDoorsOpenLabel = customDoorsOpenLabel;
    return this;
  }

  /**
   * Get customDoorsOpenLabel
   * @return customDoorsOpenLabel
   */
  @javax.annotation.Nullable
  public LocalizedString getCustomDoorsOpenLabel() {
    return customDoorsOpenLabel;
  }

  public void setCustomDoorsOpenLabel(LocalizedString customDoorsOpenLabel) {
    this.customDoorsOpenLabel = customDoorsOpenLabel;
  }


  public EventDateTime doorsOpen(String doorsOpen) {
    this.doorsOpen = doorsOpen;
    return this;
  }

  /**
   * The date/time when the doors open at the venue. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: &#x60;1985-04-12T23:20:50.52Z&#x60; would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. &#x60;1985-04-12T19:20:50.52-04:00&#x60; would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. &#x60;1985-04-12T19:20:50.52&#x60; would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the \&quot;local date/time\&quot;. This should be the local date/time at the venue. For example, if the event occurs at the 20th hour of June 5th, 2018 at the venue, the local date/time portion should be &#x60;2018-06-05T20:00:00&#x60;. If the local date/time at the venue is 4 hours before UTC, an offset of &#x60;-04:00&#x60; may be appended. Without offset information, some rich features may not be available.
   * @return doorsOpen
   */
  @javax.annotation.Nullable
  public String getDoorsOpen() {
    return doorsOpen;
  }

  public void setDoorsOpen(String doorsOpen) {
    this.doorsOpen = doorsOpen;
  }


  public EventDateTime doorsOpenLabel(DoorsOpenLabelEnum doorsOpenLabel) {
    this.doorsOpenLabel = doorsOpenLabel;
    return this;
  }

  /**
   * The label to use for the doors open value (&#x60;doorsOpen&#x60;) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both &#x60;doorsOpenLabel&#x60; and &#x60;customDoorsOpenLabel&#x60; may not be set. If neither is set, the label will default to \&quot;Doors Open\&quot;, localized. If the doors open field is unset, this label will not be used.
   * @return doorsOpenLabel
   */
  @javax.annotation.Nullable
  public DoorsOpenLabelEnum getDoorsOpenLabel() {
    return doorsOpenLabel;
  }

  public void setDoorsOpenLabel(DoorsOpenLabelEnum doorsOpenLabel) {
    this.doorsOpenLabel = doorsOpenLabel;
  }


  public EventDateTime end(String end) {
    this.end = end;
    return this;
  }

  /**
   * The date/time when the event ends. If the event spans multiple days, it should be the end date/time on the last day. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: &#x60;1985-04-12T23:20:50.52Z&#x60; would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. &#x60;1985-04-12T19:20:50.52-04:00&#x60; would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. &#x60;1985-04-12T19:20:50.52&#x60; would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the \&quot;local date/time\&quot;. This should be the local date/time at the venue. For example, if the event occurs at the 20th hour of June 5th, 2018 at the venue, the local date/time portion should be &#x60;2018-06-05T20:00:00&#x60;. If the local date/time at the venue is 4 hours before UTC, an offset of &#x60;-04:00&#x60; may be appended. Without offset information, some rich features may not be available.
   * @return end
   */
  @javax.annotation.Nullable
  public String getEnd() {
    return end;
  }

  public void setEnd(String end) {
    this.end = end;
  }


  @Deprecated
  public EventDateTime kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string &#x60;\&quot;walletobjects#eventDateTime\&quot;&#x60;.
   * @return kind
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  @Deprecated
  public void setKind(String kind) {
    this.kind = kind;
  }


  public EventDateTime start(String start) {
    this.start = start;
    return this;
  }

  /**
   * The date/time when the event starts. If the event spans multiple days, it should be the start date/time on the first day. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: &#x60;1985-04-12T23:20:50.52Z&#x60; would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. &#x60;1985-04-12T19:20:50.52-04:00&#x60; would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. &#x60;1985-04-12T19:20:50.52&#x60; would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the \&quot;local date/time\&quot;. This should be the local date/time at the venue. For example, if the event occurs at the 20th hour of June 5th, 2018 at the venue, the local date/time portion should be &#x60;2018-06-05T20:00:00&#x60;. If the local date/time at the venue is 4 hours before UTC, an offset of &#x60;-04:00&#x60; may be appended. Without offset information, some rich features may not be available.
   * @return start
   */
  @javax.annotation.Nullable
  public String getStart() {
    return start;
  }

  public void setStart(String start) {
    this.start = start;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventDateTime eventDateTime = (EventDateTime) o;
    return Objects.equals(this.customDoorsOpenLabel, eventDateTime.customDoorsOpenLabel) &&
        Objects.equals(this.doorsOpen, eventDateTime.doorsOpen) &&
        Objects.equals(this.doorsOpenLabel, eventDateTime.doorsOpenLabel) &&
        Objects.equals(this.end, eventDateTime.end) &&
        Objects.equals(this.kind, eventDateTime.kind) &&
        Objects.equals(this.start, eventDateTime.start);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customDoorsOpenLabel, doorsOpen, doorsOpenLabel, end, kind, start);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventDateTime {\n");
    sb.append("    customDoorsOpenLabel: ").append(toIndentedString(customDoorsOpenLabel)).append("\n");
    sb.append("    doorsOpen: ").append(toIndentedString(doorsOpen)).append("\n");
    sb.append("    doorsOpenLabel: ").append(toIndentedString(doorsOpenLabel)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customDoorsOpenLabel");
    openapiFields.add("doorsOpen");
    openapiFields.add("doorsOpenLabel");
    openapiFields.add("end");
    openapiFields.add("kind");
    openapiFields.add("start");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventDateTime
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventDateTime.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventDateTime is not found in the empty JSON string", EventDateTime.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventDateTime.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventDateTime` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `customDoorsOpenLabel`
      if (jsonObj.get("customDoorsOpenLabel") != null && !jsonObj.get("customDoorsOpenLabel").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("customDoorsOpenLabel"));
      }
      if ((jsonObj.get("doorsOpen") != null && !jsonObj.get("doorsOpen").isJsonNull()) && !jsonObj.get("doorsOpen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doorsOpen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doorsOpen").toString()));
      }
      if ((jsonObj.get("doorsOpenLabel") != null && !jsonObj.get("doorsOpenLabel").isJsonNull()) && !jsonObj.get("doorsOpenLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doorsOpenLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doorsOpenLabel").toString()));
      }
      // validate the optional field `doorsOpenLabel`
      if (jsonObj.get("doorsOpenLabel") != null && !jsonObj.get("doorsOpenLabel").isJsonNull()) {
        DoorsOpenLabelEnum.validateJsonElement(jsonObj.get("doorsOpenLabel"));
      }
      if ((jsonObj.get("end") != null && !jsonObj.get("end").isJsonNull()) && !jsonObj.get("end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("start") != null && !jsonObj.get("start").isJsonNull()) && !jsonObj.get("start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventDateTime.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventDateTime' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventDateTime> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventDateTime.class));

       return (TypeAdapter<T>) new TypeAdapter<EventDateTime>() {
           @Override
           public void write(JsonWriter out, EventDateTime value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventDateTime read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventDateTime given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventDateTime
   * @throws IOException if the JSON string is invalid with respect to EventDateTime
   */
  public static EventDateTime fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventDateTime.class);
  }

  /**
   * Convert an instance of EventDateTime to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

