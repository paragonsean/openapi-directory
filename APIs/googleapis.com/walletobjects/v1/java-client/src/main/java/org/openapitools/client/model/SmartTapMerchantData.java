/*
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthenticationKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SmartTapMerchantData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:24.677339-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SmartTapMerchantData {
  public static final String SERIALIZED_NAME_AUTHENTICATION_KEYS = "authenticationKeys";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_KEYS)
  private List<AuthenticationKey> authenticationKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_SMART_TAP_MERCHANT_ID = "smartTapMerchantId";
  @SerializedName(SERIALIZED_NAME_SMART_TAP_MERCHANT_ID)
  private String smartTapMerchantId;

  public SmartTapMerchantData() {
  }

  public SmartTapMerchantData authenticationKeys(List<AuthenticationKey> authenticationKeys) {
    this.authenticationKeys = authenticationKeys;
    return this;
  }

  public SmartTapMerchantData addAuthenticationKeysItem(AuthenticationKey authenticationKeysItem) {
    if (this.authenticationKeys == null) {
      this.authenticationKeys = new ArrayList<>();
    }
    this.authenticationKeys.add(authenticationKeysItem);
    return this;
  }

  /**
   * Available only to Smart Tap enabled partners. Contact support for additional guidance.
   * @return authenticationKeys
   */
  @javax.annotation.Nullable
  public List<AuthenticationKey> getAuthenticationKeys() {
    return authenticationKeys;
  }

  public void setAuthenticationKeys(List<AuthenticationKey> authenticationKeys) {
    this.authenticationKeys = authenticationKeys;
  }


  public SmartTapMerchantData smartTapMerchantId(String smartTapMerchantId) {
    this.smartTapMerchantId = smartTapMerchantId;
    return this;
  }

  /**
   * Available only to Smart Tap enabled partners. Contact support for additional guidance.
   * @return smartTapMerchantId
   */
  @javax.annotation.Nullable
  public String getSmartTapMerchantId() {
    return smartTapMerchantId;
  }

  public void setSmartTapMerchantId(String smartTapMerchantId) {
    this.smartTapMerchantId = smartTapMerchantId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmartTapMerchantData smartTapMerchantData = (SmartTapMerchantData) o;
    return Objects.equals(this.authenticationKeys, smartTapMerchantData.authenticationKeys) &&
        Objects.equals(this.smartTapMerchantId, smartTapMerchantData.smartTapMerchantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationKeys, smartTapMerchantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmartTapMerchantData {\n");
    sb.append("    authenticationKeys: ").append(toIndentedString(authenticationKeys)).append("\n");
    sb.append("    smartTapMerchantId: ").append(toIndentedString(smartTapMerchantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authenticationKeys");
    openapiFields.add("smartTapMerchantId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SmartTapMerchantData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SmartTapMerchantData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SmartTapMerchantData is not found in the empty JSON string", SmartTapMerchantData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SmartTapMerchantData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SmartTapMerchantData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("authenticationKeys") != null && !jsonObj.get("authenticationKeys").isJsonNull()) {
        JsonArray jsonArrayauthenticationKeys = jsonObj.getAsJsonArray("authenticationKeys");
        if (jsonArrayauthenticationKeys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authenticationKeys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authenticationKeys` to be an array in the JSON string but got `%s`", jsonObj.get("authenticationKeys").toString()));
          }

          // validate the optional field `authenticationKeys` (array)
          for (int i = 0; i < jsonArrayauthenticationKeys.size(); i++) {
            AuthenticationKey.validateJsonElement(jsonArrayauthenticationKeys.get(i));
          };
        }
      }
      if ((jsonObj.get("smartTapMerchantId") != null && !jsonObj.get("smartTapMerchantId").isJsonNull()) && !jsonObj.get("smartTapMerchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smartTapMerchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smartTapMerchantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SmartTapMerchantData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SmartTapMerchantData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SmartTapMerchantData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SmartTapMerchantData.class));

       return (TypeAdapter<T>) new TypeAdapter<SmartTapMerchantData>() {
           @Override
           public void write(JsonWriter out, SmartTapMerchantData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SmartTapMerchantData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SmartTapMerchantData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SmartTapMerchantData
   * @throws IOException if the JSON string is invalid with respect to SmartTapMerchantData
   */
  public static SmartTapMerchantData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SmartTapMerchantData.class);
  }

  /**
   * Convert an instance of SmartTapMerchantData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

