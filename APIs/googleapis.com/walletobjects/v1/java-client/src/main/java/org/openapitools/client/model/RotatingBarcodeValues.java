/*
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A payload containing many barcode values and start date/time.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:24.677339-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RotatingBarcodeValues {
  public static final String SERIALIZED_NAME_PERIOD_MILLIS = "periodMillis";
  @SerializedName(SERIALIZED_NAME_PERIOD_MILLIS)
  private String periodMillis;

  public static final String SERIALIZED_NAME_START_DATE_TIME = "startDateTime";
  @SerializedName(SERIALIZED_NAME_START_DATE_TIME)
  private String startDateTime;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<String> values = new ArrayList<>();

  public RotatingBarcodeValues() {
  }

  public RotatingBarcodeValues periodMillis(String periodMillis) {
    this.periodMillis = periodMillis;
    return this;
  }

  /**
   * Required. The amount of time each barcode is valid for.
   * @return periodMillis
   */
  @javax.annotation.Nullable
  public String getPeriodMillis() {
    return periodMillis;
  }

  public void setPeriodMillis(String periodMillis) {
    this.periodMillis = periodMillis;
  }


  public RotatingBarcodeValues startDateTime(String startDateTime) {
    this.startDateTime = startDateTime;
    return this;
  }

  /**
   * Required. The date/time the first barcode is valid from. Barcodes will be rotated through using period_millis defined on the object&#39;s RotatingBarcodeValueInfo. This is an ISO 8601 extended format date/time, with an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: &#x60;1985-04-12T23:20:50.52Z&#x60; would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. &#x60;1985-04-12T19:20:50.52-04:00&#x60; would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year.
   * @return startDateTime
   */
  @javax.annotation.Nullable
  public String getStartDateTime() {
    return startDateTime;
  }

  public void setStartDateTime(String startDateTime) {
    this.startDateTime = startDateTime;
  }


  public RotatingBarcodeValues values(List<String> values) {
    this.values = values;
    return this;
  }

  public RotatingBarcodeValues addValuesItem(String valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

  /**
   * Required. The values to encode in the barcode. At least one value is required.
   * @return values
   */
  @javax.annotation.Nullable
  public List<String> getValues() {
    return values;
  }

  public void setValues(List<String> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RotatingBarcodeValues rotatingBarcodeValues = (RotatingBarcodeValues) o;
    return Objects.equals(this.periodMillis, rotatingBarcodeValues.periodMillis) &&
        Objects.equals(this.startDateTime, rotatingBarcodeValues.startDateTime) &&
        Objects.equals(this.values, rotatingBarcodeValues.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(periodMillis, startDateTime, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RotatingBarcodeValues {\n");
    sb.append("    periodMillis: ").append(toIndentedString(periodMillis)).append("\n");
    sb.append("    startDateTime: ").append(toIndentedString(startDateTime)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("periodMillis");
    openapiFields.add("startDateTime");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RotatingBarcodeValues
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RotatingBarcodeValues.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RotatingBarcodeValues is not found in the empty JSON string", RotatingBarcodeValues.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RotatingBarcodeValues.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RotatingBarcodeValues` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("periodMillis") != null && !jsonObj.get("periodMillis").isJsonNull()) && !jsonObj.get("periodMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `periodMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("periodMillis").toString()));
      }
      if ((jsonObj.get("startDateTime") != null && !jsonObj.get("startDateTime").isJsonNull()) && !jsonObj.get("startDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDateTime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull() && !jsonObj.get("values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RotatingBarcodeValues.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RotatingBarcodeValues' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RotatingBarcodeValues> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RotatingBarcodeValues.class));

       return (TypeAdapter<T>) new TypeAdapter<RotatingBarcodeValues>() {
           @Override
           public void write(JsonWriter out, RotatingBarcodeValues value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RotatingBarcodeValues read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RotatingBarcodeValues given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RotatingBarcodeValues
   * @throws IOException if the JSON string is invalid with respect to RotatingBarcodeValues
   */
  public static RotatingBarcodeValues fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RotatingBarcodeValues.class);
  }

  /**
   * Convert an instance of RotatingBarcodeValues to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

