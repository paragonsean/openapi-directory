/*
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FrequentFlyerInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReservationInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:24.677339-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReservationInfo {
  public static final String SERIALIZED_NAME_CONFIRMATION_CODE = "confirmationCode";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_CODE)
  private String confirmationCode;

  public static final String SERIALIZED_NAME_ETICKET_NUMBER = "eticketNumber";
  @SerializedName(SERIALIZED_NAME_ETICKET_NUMBER)
  private String eticketNumber;

  public static final String SERIALIZED_NAME_FREQUENT_FLYER_INFO = "frequentFlyerInfo";
  @SerializedName(SERIALIZED_NAME_FREQUENT_FLYER_INFO)
  private FrequentFlyerInfo frequentFlyerInfo;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public ReservationInfo() {
  }

  public ReservationInfo confirmationCode(String confirmationCode) {
    this.confirmationCode = confirmationCode;
    return this;
  }

  /**
   * Confirmation code needed to check into this flight. This is the number that the passenger would enter into a kiosk at the airport to look up the flight and print a boarding pass.
   * @return confirmationCode
   */
  @javax.annotation.Nullable
  public String getConfirmationCode() {
    return confirmationCode;
  }

  public void setConfirmationCode(String confirmationCode) {
    this.confirmationCode = confirmationCode;
  }


  public ReservationInfo eticketNumber(String eticketNumber) {
    this.eticketNumber = eticketNumber;
    return this;
  }

  /**
   * E-ticket number.
   * @return eticketNumber
   */
  @javax.annotation.Nullable
  public String getEticketNumber() {
    return eticketNumber;
  }

  public void setEticketNumber(String eticketNumber) {
    this.eticketNumber = eticketNumber;
  }


  public ReservationInfo frequentFlyerInfo(FrequentFlyerInfo frequentFlyerInfo) {
    this.frequentFlyerInfo = frequentFlyerInfo;
    return this;
  }

  /**
   * Get frequentFlyerInfo
   * @return frequentFlyerInfo
   */
  @javax.annotation.Nullable
  public FrequentFlyerInfo getFrequentFlyerInfo() {
    return frequentFlyerInfo;
  }

  public void setFrequentFlyerInfo(FrequentFlyerInfo frequentFlyerInfo) {
    this.frequentFlyerInfo = frequentFlyerInfo;
  }


  @Deprecated
  public ReservationInfo kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string &#x60;\&quot;walletobjects#reservationInfo\&quot;&#x60;.
   * @return kind
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  @Deprecated
  public void setKind(String kind) {
    this.kind = kind;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReservationInfo reservationInfo = (ReservationInfo) o;
    return Objects.equals(this.confirmationCode, reservationInfo.confirmationCode) &&
        Objects.equals(this.eticketNumber, reservationInfo.eticketNumber) &&
        Objects.equals(this.frequentFlyerInfo, reservationInfo.frequentFlyerInfo) &&
        Objects.equals(this.kind, reservationInfo.kind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confirmationCode, eticketNumber, frequentFlyerInfo, kind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReservationInfo {\n");
    sb.append("    confirmationCode: ").append(toIndentedString(confirmationCode)).append("\n");
    sb.append("    eticketNumber: ").append(toIndentedString(eticketNumber)).append("\n");
    sb.append("    frequentFlyerInfo: ").append(toIndentedString(frequentFlyerInfo)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confirmationCode");
    openapiFields.add("eticketNumber");
    openapiFields.add("frequentFlyerInfo");
    openapiFields.add("kind");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReservationInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReservationInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReservationInfo is not found in the empty JSON string", ReservationInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReservationInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReservationInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("confirmationCode") != null && !jsonObj.get("confirmationCode").isJsonNull()) && !jsonObj.get("confirmationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmationCode").toString()));
      }
      if ((jsonObj.get("eticketNumber") != null && !jsonObj.get("eticketNumber").isJsonNull()) && !jsonObj.get("eticketNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eticketNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eticketNumber").toString()));
      }
      // validate the optional field `frequentFlyerInfo`
      if (jsonObj.get("frequentFlyerInfo") != null && !jsonObj.get("frequentFlyerInfo").isJsonNull()) {
        FrequentFlyerInfo.validateJsonElement(jsonObj.get("frequentFlyerInfo"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReservationInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReservationInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReservationInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReservationInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ReservationInfo>() {
           @Override
           public void write(JsonWriter out, ReservationInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReservationInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReservationInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReservationInfo
   * @throws IOException if the JSON string is invalid with respect to ReservationInfo
   */
  public static ReservationInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReservationInfo.class);
  }

  /**
   * Convert an instance of ReservationInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

