/*
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LocalizedString;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TicketSeat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:24.677339-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TicketSeat {
  public static final String SERIALIZED_NAME_COACH = "coach";
  @SerializedName(SERIALIZED_NAME_COACH)
  private String coach;

  public static final String SERIALIZED_NAME_CUSTOM_FARE_CLASS = "customFareClass";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FARE_CLASS)
  private LocalizedString customFareClass;

  /**
   * The fare class of the ticketed seat.
   */
  @JsonAdapter(FareClassEnum.Adapter.class)
  public enum FareClassEnum {
    FARE_CLASS_UNSPECIFIED("FARE_CLASS_UNSPECIFIED"),
    
    ECONOMY("ECONOMY"),
    
    ECONOMY2("economy"),
    
    FIRST("FIRST"),
    
    FIRST2("first"),
    
    BUSINESS("BUSINESS"),
    
    BUSINESS2("business");

    private String value;

    FareClassEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FareClassEnum fromValue(String value) {
      for (FareClassEnum b : FareClassEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FareClassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FareClassEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FareClassEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FareClassEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FareClassEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FARE_CLASS = "fareClass";
  @SerializedName(SERIALIZED_NAME_FARE_CLASS)
  private FareClassEnum fareClass;

  public static final String SERIALIZED_NAME_SEAT = "seat";
  @SerializedName(SERIALIZED_NAME_SEAT)
  private String seat;

  public static final String SERIALIZED_NAME_SEAT_ASSIGNMENT = "seatAssignment";
  @SerializedName(SERIALIZED_NAME_SEAT_ASSIGNMENT)
  private LocalizedString seatAssignment;

  public TicketSeat() {
  }

  public TicketSeat coach(String coach) {
    this.coach = coach;
    return this;
  }

  /**
   * The identifier of the train car or coach in which the ticketed seat is located. Eg. \&quot;10\&quot;
   * @return coach
   */
  @javax.annotation.Nullable
  public String getCoach() {
    return coach;
  }

  public void setCoach(String coach) {
    this.coach = coach;
  }


  public TicketSeat customFareClass(LocalizedString customFareClass) {
    this.customFareClass = customFareClass;
    return this;
  }

  /**
   * Get customFareClass
   * @return customFareClass
   */
  @javax.annotation.Nullable
  public LocalizedString getCustomFareClass() {
    return customFareClass;
  }

  public void setCustomFareClass(LocalizedString customFareClass) {
    this.customFareClass = customFareClass;
  }


  public TicketSeat fareClass(FareClassEnum fareClass) {
    this.fareClass = fareClass;
    return this;
  }

  /**
   * The fare class of the ticketed seat.
   * @return fareClass
   */
  @javax.annotation.Nullable
  public FareClassEnum getFareClass() {
    return fareClass;
  }

  public void setFareClass(FareClassEnum fareClass) {
    this.fareClass = fareClass;
  }


  public TicketSeat seat(String seat) {
    this.seat = seat;
    return this;
  }

  /**
   * The identifier of where the ticketed seat is located. Eg. \&quot;42\&quot;. If there is no specific identifier, use &#x60;seatAssigment&#x60; instead.
   * @return seat
   */
  @javax.annotation.Nullable
  public String getSeat() {
    return seat;
  }

  public void setSeat(String seat) {
    this.seat = seat;
  }


  public TicketSeat seatAssignment(LocalizedString seatAssignment) {
    this.seatAssignment = seatAssignment;
    return this;
  }

  /**
   * Get seatAssignment
   * @return seatAssignment
   */
  @javax.annotation.Nullable
  public LocalizedString getSeatAssignment() {
    return seatAssignment;
  }

  public void setSeatAssignment(LocalizedString seatAssignment) {
    this.seatAssignment = seatAssignment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TicketSeat ticketSeat = (TicketSeat) o;
    return Objects.equals(this.coach, ticketSeat.coach) &&
        Objects.equals(this.customFareClass, ticketSeat.customFareClass) &&
        Objects.equals(this.fareClass, ticketSeat.fareClass) &&
        Objects.equals(this.seat, ticketSeat.seat) &&
        Objects.equals(this.seatAssignment, ticketSeat.seatAssignment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coach, customFareClass, fareClass, seat, seatAssignment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TicketSeat {\n");
    sb.append("    coach: ").append(toIndentedString(coach)).append("\n");
    sb.append("    customFareClass: ").append(toIndentedString(customFareClass)).append("\n");
    sb.append("    fareClass: ").append(toIndentedString(fareClass)).append("\n");
    sb.append("    seat: ").append(toIndentedString(seat)).append("\n");
    sb.append("    seatAssignment: ").append(toIndentedString(seatAssignment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("coach");
    openapiFields.add("customFareClass");
    openapiFields.add("fareClass");
    openapiFields.add("seat");
    openapiFields.add("seatAssignment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TicketSeat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TicketSeat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TicketSeat is not found in the empty JSON string", TicketSeat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TicketSeat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TicketSeat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("coach") != null && !jsonObj.get("coach").isJsonNull()) && !jsonObj.get("coach").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coach` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coach").toString()));
      }
      // validate the optional field `customFareClass`
      if (jsonObj.get("customFareClass") != null && !jsonObj.get("customFareClass").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("customFareClass"));
      }
      if ((jsonObj.get("fareClass") != null && !jsonObj.get("fareClass").isJsonNull()) && !jsonObj.get("fareClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fareClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fareClass").toString()));
      }
      // validate the optional field `fareClass`
      if (jsonObj.get("fareClass") != null && !jsonObj.get("fareClass").isJsonNull()) {
        FareClassEnum.validateJsonElement(jsonObj.get("fareClass"));
      }
      if ((jsonObj.get("seat") != null && !jsonObj.get("seat").isJsonNull()) && !jsonObj.get("seat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seat").toString()));
      }
      // validate the optional field `seatAssignment`
      if (jsonObj.get("seatAssignment") != null && !jsonObj.get("seatAssignment").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("seatAssignment"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TicketSeat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TicketSeat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TicketSeat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TicketSeat.class));

       return (TypeAdapter<T>) new TypeAdapter<TicketSeat>() {
           @Override
           public void write(JsonWriter out, TicketSeat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TicketSeat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TicketSeat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TicketSeat
   * @throws IOException if the JSON string is invalid with respect to TicketSeat
   */
  public static TicketSeat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TicketSeat.class);
  }

  /**
   * Convert an instance of TicketSeat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

