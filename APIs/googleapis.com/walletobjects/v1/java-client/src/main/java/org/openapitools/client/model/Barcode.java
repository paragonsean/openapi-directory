/*
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LocalizedString;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Barcode
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:24.677339-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Barcode {
  public static final String SERIALIZED_NAME_ALTERNATE_TEXT = "alternateText";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_TEXT)
  private String alternateText;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  /**
   * The render encoding for the barcode. When specified, barcode is rendered in the given encoding. Otherwise best known encoding is chosen by Google.
   */
  @JsonAdapter(RenderEncodingEnum.Adapter.class)
  public enum RenderEncodingEnum {
    RENDER_ENCODING_UNSPECIFIED("RENDER_ENCODING_UNSPECIFIED"),
    
    UTF_8("UTF_8");

    private String value;

    RenderEncodingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RenderEncodingEnum fromValue(String value) {
      for (RenderEncodingEnum b : RenderEncodingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RenderEncodingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RenderEncodingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RenderEncodingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RenderEncodingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RenderEncodingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RENDER_ENCODING = "renderEncoding";
  @SerializedName(SERIALIZED_NAME_RENDER_ENCODING)
  private RenderEncodingEnum renderEncoding;

  public static final String SERIALIZED_NAME_SHOW_CODE_TEXT = "showCodeText";
  @SerializedName(SERIALIZED_NAME_SHOW_CODE_TEXT)
  private LocalizedString showCodeText;

  /**
   * The type of barcode.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BARCODE_TYPE_UNSPECIFIED("BARCODE_TYPE_UNSPECIFIED"),
    
    AZTEC("AZTEC"),
    
    AZTEC2("aztec"),
    
    CODE_39("CODE_39"),
    
    CODE39("code39"),
    
    CODE_128("CODE_128"),
    
    CODE128("code128"),
    
    CODABAR("CODABAR"),
    
    CODABAR2("codabar"),
    
    DATA_MATRIX("DATA_MATRIX"),
    
    DATA_MATRIX2("dataMatrix"),
    
    EAN_8("EAN_8"),
    
    EAN8("ean8"),
    
    EAN_13("EAN_13"),
    
    EAN13("ean13"),
    
    EAN132("EAN13"),
    
    ITF_14("ITF_14"),
    
    ITF14("itf14"),
    
    PDF_417("PDF_417"),
    
    PDF417("pdf417"),
    
    PDF4172("PDF417"),
    
    QR_CODE("QR_CODE"),
    
    QR_CODE2("qrCode"),
    
    QRCODE("qrcode"),
    
    UPC_A("UPC_A"),
    
    UPC_A2("upcA"),
    
    TEXT_ONLY("TEXT_ONLY"),
    
    TEXT_ONLY2("textOnly");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public Barcode() {
  }

  public Barcode alternateText(String alternateText) {
    this.alternateText = alternateText;
    return this;
  }

  /**
   * An optional text that will override the default text that shows under the barcode. This field is intended for a human readable equivalent of the barcode value, used when the barcode cannot be scanned.
   * @return alternateText
   */
  @javax.annotation.Nullable
  public String getAlternateText() {
    return alternateText;
  }

  public void setAlternateText(String alternateText) {
    this.alternateText = alternateText;
  }


  @Deprecated
  public Barcode kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string &#x60;\&quot;walletobjects#barcode\&quot;&#x60;.
   * @return kind
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  @Deprecated
  public void setKind(String kind) {
    this.kind = kind;
  }


  public Barcode renderEncoding(RenderEncodingEnum renderEncoding) {
    this.renderEncoding = renderEncoding;
    return this;
  }

  /**
   * The render encoding for the barcode. When specified, barcode is rendered in the given encoding. Otherwise best known encoding is chosen by Google.
   * @return renderEncoding
   */
  @javax.annotation.Nullable
  public RenderEncodingEnum getRenderEncoding() {
    return renderEncoding;
  }

  public void setRenderEncoding(RenderEncodingEnum renderEncoding) {
    this.renderEncoding = renderEncoding;
  }


  public Barcode showCodeText(LocalizedString showCodeText) {
    this.showCodeText = showCodeText;
    return this;
  }

  /**
   * Get showCodeText
   * @return showCodeText
   */
  @javax.annotation.Nullable
  public LocalizedString getShowCodeText() {
    return showCodeText;
  }

  public void setShowCodeText(LocalizedString showCodeText) {
    this.showCodeText = showCodeText;
  }


  public Barcode type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of barcode.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Barcode value(String value) {
    this.value = value;
    return this;
  }

  /**
   * The value encoded in the barcode.
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Barcode barcode = (Barcode) o;
    return Objects.equals(this.alternateText, barcode.alternateText) &&
        Objects.equals(this.kind, barcode.kind) &&
        Objects.equals(this.renderEncoding, barcode.renderEncoding) &&
        Objects.equals(this.showCodeText, barcode.showCodeText) &&
        Objects.equals(this.type, barcode.type) &&
        Objects.equals(this.value, barcode.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternateText, kind, renderEncoding, showCodeText, type, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Barcode {\n");
    sb.append("    alternateText: ").append(toIndentedString(alternateText)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    renderEncoding: ").append(toIndentedString(renderEncoding)).append("\n");
    sb.append("    showCodeText: ").append(toIndentedString(showCodeText)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternateText");
    openapiFields.add("kind");
    openapiFields.add("renderEncoding");
    openapiFields.add("showCodeText");
    openapiFields.add("type");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Barcode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Barcode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Barcode is not found in the empty JSON string", Barcode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Barcode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Barcode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alternateText") != null && !jsonObj.get("alternateText").isJsonNull()) && !jsonObj.get("alternateText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternateText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alternateText").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("renderEncoding") != null && !jsonObj.get("renderEncoding").isJsonNull()) && !jsonObj.get("renderEncoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renderEncoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renderEncoding").toString()));
      }
      // validate the optional field `renderEncoding`
      if (jsonObj.get("renderEncoding") != null && !jsonObj.get("renderEncoding").isJsonNull()) {
        RenderEncodingEnum.validateJsonElement(jsonObj.get("renderEncoding"));
      }
      // validate the optional field `showCodeText`
      if (jsonObj.get("showCodeText") != null && !jsonObj.get("showCodeText").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("showCodeText"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Barcode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Barcode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Barcode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Barcode.class));

       return (TypeAdapter<T>) new TypeAdapter<Barcode>() {
           @Override
           public void write(JsonWriter out, Barcode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Barcode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Barcode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Barcode
   * @throws IOException if the JSON string is invalid with respect to Barcode
   */
  public static Barcode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Barcode.class);
  }

  /**
   * Convert an instance of Barcode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

