/*
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CallbackOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:24.677339-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CallbackOptions {
  public static final String SERIALIZED_NAME_UPDATE_REQUEST_URL = "updateRequestUrl";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_UPDATE_REQUEST_URL)
  private String updateRequestUrl;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public CallbackOptions() {
  }

  @Deprecated
  public CallbackOptions updateRequestUrl(String updateRequestUrl) {
    this.updateRequestUrl = updateRequestUrl;
    return this;
  }

  /**
   * URL for the merchant endpoint that would be called to request updates. The URL should be hosted on HTTPS and robots.txt should allow the URL path to be accessible by UserAgent:Google-Valuables. Deprecated.
   * @return updateRequestUrl
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getUpdateRequestUrl() {
    return updateRequestUrl;
  }

  @Deprecated
  public void setUpdateRequestUrl(String updateRequestUrl) {
    this.updateRequestUrl = updateRequestUrl;
  }


  public CallbackOptions url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The HTTPS url configured by the merchant. The URL should be hosted on HTTPS and robots.txt should allow the URL path to be accessible by UserAgent:Google-Valuables.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallbackOptions callbackOptions = (CallbackOptions) o;
    return Objects.equals(this.updateRequestUrl, callbackOptions.updateRequestUrl) &&
        Objects.equals(this.url, callbackOptions.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(updateRequestUrl, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallbackOptions {\n");
    sb.append("    updateRequestUrl: ").append(toIndentedString(updateRequestUrl)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("updateRequestUrl");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CallbackOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CallbackOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallbackOptions is not found in the empty JSON string", CallbackOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CallbackOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CallbackOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("updateRequestUrl") != null && !jsonObj.get("updateRequestUrl").isJsonNull()) && !jsonObj.get("updateRequestUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateRequestUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateRequestUrl").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallbackOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallbackOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallbackOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallbackOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<CallbackOptions>() {
           @Override
           public void write(JsonWriter out, CallbackOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CallbackOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CallbackOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CallbackOptions
   * @throws IOException if the JSON string is invalid with respect to CallbackOptions
   */
  public static CallbackOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallbackOptions.class);
  }

  /**
   * Convert an instance of CallbackOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

