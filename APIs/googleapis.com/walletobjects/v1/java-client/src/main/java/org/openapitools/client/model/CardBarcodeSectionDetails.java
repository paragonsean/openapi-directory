/*
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BarcodeSectionDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CardBarcodeSectionDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:24.677339-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CardBarcodeSectionDetails {
  public static final String SERIALIZED_NAME_FIRST_BOTTOM_DETAIL = "firstBottomDetail";
  @SerializedName(SERIALIZED_NAME_FIRST_BOTTOM_DETAIL)
  private BarcodeSectionDetail firstBottomDetail;

  public static final String SERIALIZED_NAME_FIRST_TOP_DETAIL = "firstTopDetail";
  @SerializedName(SERIALIZED_NAME_FIRST_TOP_DETAIL)
  private BarcodeSectionDetail firstTopDetail;

  public static final String SERIALIZED_NAME_SECOND_TOP_DETAIL = "secondTopDetail";
  @SerializedName(SERIALIZED_NAME_SECOND_TOP_DETAIL)
  private BarcodeSectionDetail secondTopDetail;

  public CardBarcodeSectionDetails() {
  }

  public CardBarcodeSectionDetails firstBottomDetail(BarcodeSectionDetail firstBottomDetail) {
    this.firstBottomDetail = firstBottomDetail;
    return this;
  }

  /**
   * Get firstBottomDetail
   * @return firstBottomDetail
   */
  @javax.annotation.Nullable
  public BarcodeSectionDetail getFirstBottomDetail() {
    return firstBottomDetail;
  }

  public void setFirstBottomDetail(BarcodeSectionDetail firstBottomDetail) {
    this.firstBottomDetail = firstBottomDetail;
  }


  public CardBarcodeSectionDetails firstTopDetail(BarcodeSectionDetail firstTopDetail) {
    this.firstTopDetail = firstTopDetail;
    return this;
  }

  /**
   * Get firstTopDetail
   * @return firstTopDetail
   */
  @javax.annotation.Nullable
  public BarcodeSectionDetail getFirstTopDetail() {
    return firstTopDetail;
  }

  public void setFirstTopDetail(BarcodeSectionDetail firstTopDetail) {
    this.firstTopDetail = firstTopDetail;
  }


  public CardBarcodeSectionDetails secondTopDetail(BarcodeSectionDetail secondTopDetail) {
    this.secondTopDetail = secondTopDetail;
    return this;
  }

  /**
   * Get secondTopDetail
   * @return secondTopDetail
   */
  @javax.annotation.Nullable
  public BarcodeSectionDetail getSecondTopDetail() {
    return secondTopDetail;
  }

  public void setSecondTopDetail(BarcodeSectionDetail secondTopDetail) {
    this.secondTopDetail = secondTopDetail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardBarcodeSectionDetails cardBarcodeSectionDetails = (CardBarcodeSectionDetails) o;
    return Objects.equals(this.firstBottomDetail, cardBarcodeSectionDetails.firstBottomDetail) &&
        Objects.equals(this.firstTopDetail, cardBarcodeSectionDetails.firstTopDetail) &&
        Objects.equals(this.secondTopDetail, cardBarcodeSectionDetails.secondTopDetail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstBottomDetail, firstTopDetail, secondTopDetail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardBarcodeSectionDetails {\n");
    sb.append("    firstBottomDetail: ").append(toIndentedString(firstBottomDetail)).append("\n");
    sb.append("    firstTopDetail: ").append(toIndentedString(firstTopDetail)).append("\n");
    sb.append("    secondTopDetail: ").append(toIndentedString(secondTopDetail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstBottomDetail");
    openapiFields.add("firstTopDetail");
    openapiFields.add("secondTopDetail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CardBarcodeSectionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CardBarcodeSectionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardBarcodeSectionDetails is not found in the empty JSON string", CardBarcodeSectionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CardBarcodeSectionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CardBarcodeSectionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `firstBottomDetail`
      if (jsonObj.get("firstBottomDetail") != null && !jsonObj.get("firstBottomDetail").isJsonNull()) {
        BarcodeSectionDetail.validateJsonElement(jsonObj.get("firstBottomDetail"));
      }
      // validate the optional field `firstTopDetail`
      if (jsonObj.get("firstTopDetail") != null && !jsonObj.get("firstTopDetail").isJsonNull()) {
        BarcodeSectionDetail.validateJsonElement(jsonObj.get("firstTopDetail"));
      }
      // validate the optional field `secondTopDetail`
      if (jsonObj.get("secondTopDetail") != null && !jsonObj.get("secondTopDetail").isJsonNull()) {
        BarcodeSectionDetail.validateJsonElement(jsonObj.get("secondTopDetail"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardBarcodeSectionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardBarcodeSectionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardBarcodeSectionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardBarcodeSectionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<CardBarcodeSectionDetails>() {
           @Override
           public void write(JsonWriter out, CardBarcodeSectionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CardBarcodeSectionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CardBarcodeSectionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CardBarcodeSectionDetails
   * @throws IOException if the JSON string is invalid with respect to CardBarcodeSectionDetails
   */
  public static CardBarcodeSectionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardBarcodeSectionDetails.class);
  }

  /**
   * Convert an instance of CardBarcodeSectionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

