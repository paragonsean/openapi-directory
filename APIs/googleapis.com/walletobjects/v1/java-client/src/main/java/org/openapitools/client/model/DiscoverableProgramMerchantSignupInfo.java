/*
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Uri;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the merchant hosted signup flow for a program.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:24.677339-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiscoverableProgramMerchantSignupInfo {
  /**
   * Gets or Sets signupSharedDatas
   */
  @JsonAdapter(SignupSharedDatasEnum.Adapter.class)
  public enum SignupSharedDatasEnum {
    SHARED_DATA_TYPE_UNSPECIFIED("SHARED_DATA_TYPE_UNSPECIFIED"),
    
    FIRST_NAME("FIRST_NAME"),
    
    LAST_NAME("LAST_NAME"),
    
    STREET_ADDRESS("STREET_ADDRESS"),
    
    ADDRESS_LINE_1("ADDRESS_LINE_1"),
    
    ADDRESS_LINE_2("ADDRESS_LINE_2"),
    
    ADDRESS_LINE_3("ADDRESS_LINE_3"),
    
    CITY("CITY"),
    
    STATE("STATE"),
    
    ZIPCODE("ZIPCODE"),
    
    COUNTRY("COUNTRY"),
    
    EMAIL("EMAIL"),
    
    PHONE("PHONE");

    private String value;

    SignupSharedDatasEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignupSharedDatasEnum fromValue(String value) {
      for (SignupSharedDatasEnum b : SignupSharedDatasEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignupSharedDatasEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignupSharedDatasEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignupSharedDatasEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignupSharedDatasEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignupSharedDatasEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNUP_SHARED_DATAS = "signupSharedDatas";
  @SerializedName(SERIALIZED_NAME_SIGNUP_SHARED_DATAS)
  private List<SignupSharedDatasEnum> signupSharedDatas = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIGNUP_WEBSITE = "signupWebsite";
  @SerializedName(SERIALIZED_NAME_SIGNUP_WEBSITE)
  private Uri signupWebsite;

  public DiscoverableProgramMerchantSignupInfo() {
  }

  public DiscoverableProgramMerchantSignupInfo signupSharedDatas(List<SignupSharedDatasEnum> signupSharedDatas) {
    this.signupSharedDatas = signupSharedDatas;
    return this;
  }

  public DiscoverableProgramMerchantSignupInfo addSignupSharedDatasItem(SignupSharedDatasEnum signupSharedDatasItem) {
    if (this.signupSharedDatas == null) {
      this.signupSharedDatas = new ArrayList<>();
    }
    this.signupSharedDatas.add(signupSharedDatasItem);
    return this;
  }

  /**
   *  User data that is sent in a POST request to the signup website URL. This information is encoded and then shared so that the merchant&#39;s website can prefill fields used to enroll the user for the discoverable program.
   * @return signupSharedDatas
   */
  @javax.annotation.Nullable
  public List<SignupSharedDatasEnum> getSignupSharedDatas() {
    return signupSharedDatas;
  }

  public void setSignupSharedDatas(List<SignupSharedDatasEnum> signupSharedDatas) {
    this.signupSharedDatas = signupSharedDatas;
  }


  public DiscoverableProgramMerchantSignupInfo signupWebsite(Uri signupWebsite) {
    this.signupWebsite = signupWebsite;
    return this;
  }

  /**
   * Get signupWebsite
   * @return signupWebsite
   */
  @javax.annotation.Nullable
  public Uri getSignupWebsite() {
    return signupWebsite;
  }

  public void setSignupWebsite(Uri signupWebsite) {
    this.signupWebsite = signupWebsite;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscoverableProgramMerchantSignupInfo discoverableProgramMerchantSignupInfo = (DiscoverableProgramMerchantSignupInfo) o;
    return Objects.equals(this.signupSharedDatas, discoverableProgramMerchantSignupInfo.signupSharedDatas) &&
        Objects.equals(this.signupWebsite, discoverableProgramMerchantSignupInfo.signupWebsite);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signupSharedDatas, signupWebsite);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscoverableProgramMerchantSignupInfo {\n");
    sb.append("    signupSharedDatas: ").append(toIndentedString(signupSharedDatas)).append("\n");
    sb.append("    signupWebsite: ").append(toIndentedString(signupWebsite)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("signupSharedDatas");
    openapiFields.add("signupWebsite");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiscoverableProgramMerchantSignupInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiscoverableProgramMerchantSignupInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiscoverableProgramMerchantSignupInfo is not found in the empty JSON string", DiscoverableProgramMerchantSignupInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiscoverableProgramMerchantSignupInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiscoverableProgramMerchantSignupInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("signupSharedDatas") != null && !jsonObj.get("signupSharedDatas").isJsonNull() && !jsonObj.get("signupSharedDatas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `signupSharedDatas` to be an array in the JSON string but got `%s`", jsonObj.get("signupSharedDatas").toString()));
      }
      // validate the optional field `signupWebsite`
      if (jsonObj.get("signupWebsite") != null && !jsonObj.get("signupWebsite").isJsonNull()) {
        Uri.validateJsonElement(jsonObj.get("signupWebsite"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiscoverableProgramMerchantSignupInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiscoverableProgramMerchantSignupInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiscoverableProgramMerchantSignupInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiscoverableProgramMerchantSignupInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<DiscoverableProgramMerchantSignupInfo>() {
           @Override
           public void write(JsonWriter out, DiscoverableProgramMerchantSignupInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiscoverableProgramMerchantSignupInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiscoverableProgramMerchantSignupInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiscoverableProgramMerchantSignupInfo
   * @throws IOException if the JSON string is invalid with respect to DiscoverableProgramMerchantSignupInfo
   */
  public static DiscoverableProgramMerchantSignupInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiscoverableProgramMerchantSignupInfo.class);
  }

  /**
   * Convert an instance of DiscoverableProgramMerchantSignupInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

