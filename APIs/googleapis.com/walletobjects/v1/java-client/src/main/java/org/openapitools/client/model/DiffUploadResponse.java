/*
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CompositeMedia;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Backend response for a Diff upload request. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:24.677339-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiffUploadResponse {
  public static final String SERIALIZED_NAME_OBJECT_VERSION = "objectVersion";
  @SerializedName(SERIALIZED_NAME_OBJECT_VERSION)
  private String objectVersion;

  public static final String SERIALIZED_NAME_ORIGINAL_OBJECT = "originalObject";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_OBJECT)
  private CompositeMedia originalObject;

  public DiffUploadResponse() {
  }

  public DiffUploadResponse objectVersion(String objectVersion) {
    this.objectVersion = objectVersion;
    return this;
  }

  /**
   * The object version of the object at the server. Must be included in the end notification response. The version in the end notification response must correspond to the new version of the object that is now stored at the server, after the upload.
   * @return objectVersion
   */
  @javax.annotation.Nullable
  public String getObjectVersion() {
    return objectVersion;
  }

  public void setObjectVersion(String objectVersion) {
    this.objectVersion = objectVersion;
  }


  public DiffUploadResponse originalObject(CompositeMedia originalObject) {
    this.originalObject = originalObject;
    return this;
  }

  /**
   * Get originalObject
   * @return originalObject
   */
  @javax.annotation.Nullable
  public CompositeMedia getOriginalObject() {
    return originalObject;
  }

  public void setOriginalObject(CompositeMedia originalObject) {
    this.originalObject = originalObject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiffUploadResponse diffUploadResponse = (DiffUploadResponse) o;
    return Objects.equals(this.objectVersion, diffUploadResponse.objectVersion) &&
        Objects.equals(this.originalObject, diffUploadResponse.originalObject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objectVersion, originalObject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiffUploadResponse {\n");
    sb.append("    objectVersion: ").append(toIndentedString(objectVersion)).append("\n");
    sb.append("    originalObject: ").append(toIndentedString(originalObject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("objectVersion");
    openapiFields.add("originalObject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiffUploadResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiffUploadResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiffUploadResponse is not found in the empty JSON string", DiffUploadResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiffUploadResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiffUploadResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("objectVersion") != null && !jsonObj.get("objectVersion").isJsonNull()) && !jsonObj.get("objectVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectVersion").toString()));
      }
      // validate the optional field `originalObject`
      if (jsonObj.get("originalObject") != null && !jsonObj.get("originalObject").isJsonNull()) {
        CompositeMedia.validateJsonElement(jsonObj.get("originalObject"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiffUploadResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiffUploadResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiffUploadResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiffUploadResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DiffUploadResponse>() {
           @Override
           public void write(JsonWriter out, DiffUploadResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiffUploadResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiffUploadResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiffUploadResponse
   * @throws IOException if the JSON string is invalid with respect to DiffUploadResponse
   */
  public static DiffUploadResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiffUploadResponse.class);
  }

  /**
   * Convert an instance of DiffUploadResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

