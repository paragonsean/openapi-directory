/*
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EventTicketClass;
import org.openapitools.client.model.EventTicketObject;
import org.openapitools.client.model.FlightClass;
import org.openapitools.client.model.FlightObject;
import org.openapitools.client.model.GiftCardClass;
import org.openapitools.client.model.GiftCardObject;
import org.openapitools.client.model.LoyaltyClass;
import org.openapitools.client.model.LoyaltyObject;
import org.openapitools.client.model.OfferClass;
import org.openapitools.client.model.OfferObject;
import org.openapitools.client.model.TransitClass;
import org.openapitools.client.model.TransitObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Resources
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:24.677339-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Resources {
  public static final String SERIALIZED_NAME_EVENT_TICKET_CLASSES = "eventTicketClasses";
  @SerializedName(SERIALIZED_NAME_EVENT_TICKET_CLASSES)
  private List<EventTicketClass> eventTicketClasses = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENT_TICKET_OBJECTS = "eventTicketObjects";
  @SerializedName(SERIALIZED_NAME_EVENT_TICKET_OBJECTS)
  private List<EventTicketObject> eventTicketObjects = new ArrayList<>();

  public static final String SERIALIZED_NAME_FLIGHT_CLASSES = "flightClasses";
  @SerializedName(SERIALIZED_NAME_FLIGHT_CLASSES)
  private List<FlightClass> flightClasses = new ArrayList<>();

  public static final String SERIALIZED_NAME_FLIGHT_OBJECTS = "flightObjects";
  @SerializedName(SERIALIZED_NAME_FLIGHT_OBJECTS)
  private List<FlightObject> flightObjects = new ArrayList<>();

  public static final String SERIALIZED_NAME_GIFT_CARD_CLASSES = "giftCardClasses";
  @SerializedName(SERIALIZED_NAME_GIFT_CARD_CLASSES)
  private List<GiftCardClass> giftCardClasses = new ArrayList<>();

  public static final String SERIALIZED_NAME_GIFT_CARD_OBJECTS = "giftCardObjects";
  @SerializedName(SERIALIZED_NAME_GIFT_CARD_OBJECTS)
  private List<GiftCardObject> giftCardObjects = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOYALTY_CLASSES = "loyaltyClasses";
  @SerializedName(SERIALIZED_NAME_LOYALTY_CLASSES)
  private List<LoyaltyClass> loyaltyClasses = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOYALTY_OBJECTS = "loyaltyObjects";
  @SerializedName(SERIALIZED_NAME_LOYALTY_OBJECTS)
  private List<LoyaltyObject> loyaltyObjects = new ArrayList<>();

  public static final String SERIALIZED_NAME_OFFER_CLASSES = "offerClasses";
  @SerializedName(SERIALIZED_NAME_OFFER_CLASSES)
  private List<OfferClass> offerClasses = new ArrayList<>();

  public static final String SERIALIZED_NAME_OFFER_OBJECTS = "offerObjects";
  @SerializedName(SERIALIZED_NAME_OFFER_OBJECTS)
  private List<OfferObject> offerObjects = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSIT_CLASSES = "transitClasses";
  @SerializedName(SERIALIZED_NAME_TRANSIT_CLASSES)
  private List<TransitClass> transitClasses = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSIT_OBJECTS = "transitObjects";
  @SerializedName(SERIALIZED_NAME_TRANSIT_OBJECTS)
  private List<TransitObject> transitObjects = new ArrayList<>();

  public Resources() {
  }

  public Resources eventTicketClasses(List<EventTicketClass> eventTicketClasses) {
    this.eventTicketClasses = eventTicketClasses;
    return this;
  }

  public Resources addEventTicketClassesItem(EventTicketClass eventTicketClassesItem) {
    if (this.eventTicketClasses == null) {
      this.eventTicketClasses = new ArrayList<>();
    }
    this.eventTicketClasses.add(eventTicketClassesItem);
    return this;
  }

  /**
   * Get eventTicketClasses
   * @return eventTicketClasses
   */
  @javax.annotation.Nullable
  public List<EventTicketClass> getEventTicketClasses() {
    return eventTicketClasses;
  }

  public void setEventTicketClasses(List<EventTicketClass> eventTicketClasses) {
    this.eventTicketClasses = eventTicketClasses;
  }


  public Resources eventTicketObjects(List<EventTicketObject> eventTicketObjects) {
    this.eventTicketObjects = eventTicketObjects;
    return this;
  }

  public Resources addEventTicketObjectsItem(EventTicketObject eventTicketObjectsItem) {
    if (this.eventTicketObjects == null) {
      this.eventTicketObjects = new ArrayList<>();
    }
    this.eventTicketObjects.add(eventTicketObjectsItem);
    return this;
  }

  /**
   * Get eventTicketObjects
   * @return eventTicketObjects
   */
  @javax.annotation.Nullable
  public List<EventTicketObject> getEventTicketObjects() {
    return eventTicketObjects;
  }

  public void setEventTicketObjects(List<EventTicketObject> eventTicketObjects) {
    this.eventTicketObjects = eventTicketObjects;
  }


  public Resources flightClasses(List<FlightClass> flightClasses) {
    this.flightClasses = flightClasses;
    return this;
  }

  public Resources addFlightClassesItem(FlightClass flightClassesItem) {
    if (this.flightClasses == null) {
      this.flightClasses = new ArrayList<>();
    }
    this.flightClasses.add(flightClassesItem);
    return this;
  }

  /**
   * Get flightClasses
   * @return flightClasses
   */
  @javax.annotation.Nullable
  public List<FlightClass> getFlightClasses() {
    return flightClasses;
  }

  public void setFlightClasses(List<FlightClass> flightClasses) {
    this.flightClasses = flightClasses;
  }


  public Resources flightObjects(List<FlightObject> flightObjects) {
    this.flightObjects = flightObjects;
    return this;
  }

  public Resources addFlightObjectsItem(FlightObject flightObjectsItem) {
    if (this.flightObjects == null) {
      this.flightObjects = new ArrayList<>();
    }
    this.flightObjects.add(flightObjectsItem);
    return this;
  }

  /**
   * Get flightObjects
   * @return flightObjects
   */
  @javax.annotation.Nullable
  public List<FlightObject> getFlightObjects() {
    return flightObjects;
  }

  public void setFlightObjects(List<FlightObject> flightObjects) {
    this.flightObjects = flightObjects;
  }


  public Resources giftCardClasses(List<GiftCardClass> giftCardClasses) {
    this.giftCardClasses = giftCardClasses;
    return this;
  }

  public Resources addGiftCardClassesItem(GiftCardClass giftCardClassesItem) {
    if (this.giftCardClasses == null) {
      this.giftCardClasses = new ArrayList<>();
    }
    this.giftCardClasses.add(giftCardClassesItem);
    return this;
  }

  /**
   * Get giftCardClasses
   * @return giftCardClasses
   */
  @javax.annotation.Nullable
  public List<GiftCardClass> getGiftCardClasses() {
    return giftCardClasses;
  }

  public void setGiftCardClasses(List<GiftCardClass> giftCardClasses) {
    this.giftCardClasses = giftCardClasses;
  }


  public Resources giftCardObjects(List<GiftCardObject> giftCardObjects) {
    this.giftCardObjects = giftCardObjects;
    return this;
  }

  public Resources addGiftCardObjectsItem(GiftCardObject giftCardObjectsItem) {
    if (this.giftCardObjects == null) {
      this.giftCardObjects = new ArrayList<>();
    }
    this.giftCardObjects.add(giftCardObjectsItem);
    return this;
  }

  /**
   * Get giftCardObjects
   * @return giftCardObjects
   */
  @javax.annotation.Nullable
  public List<GiftCardObject> getGiftCardObjects() {
    return giftCardObjects;
  }

  public void setGiftCardObjects(List<GiftCardObject> giftCardObjects) {
    this.giftCardObjects = giftCardObjects;
  }


  public Resources loyaltyClasses(List<LoyaltyClass> loyaltyClasses) {
    this.loyaltyClasses = loyaltyClasses;
    return this;
  }

  public Resources addLoyaltyClassesItem(LoyaltyClass loyaltyClassesItem) {
    if (this.loyaltyClasses == null) {
      this.loyaltyClasses = new ArrayList<>();
    }
    this.loyaltyClasses.add(loyaltyClassesItem);
    return this;
  }

  /**
   * Get loyaltyClasses
   * @return loyaltyClasses
   */
  @javax.annotation.Nullable
  public List<LoyaltyClass> getLoyaltyClasses() {
    return loyaltyClasses;
  }

  public void setLoyaltyClasses(List<LoyaltyClass> loyaltyClasses) {
    this.loyaltyClasses = loyaltyClasses;
  }


  public Resources loyaltyObjects(List<LoyaltyObject> loyaltyObjects) {
    this.loyaltyObjects = loyaltyObjects;
    return this;
  }

  public Resources addLoyaltyObjectsItem(LoyaltyObject loyaltyObjectsItem) {
    if (this.loyaltyObjects == null) {
      this.loyaltyObjects = new ArrayList<>();
    }
    this.loyaltyObjects.add(loyaltyObjectsItem);
    return this;
  }

  /**
   * Get loyaltyObjects
   * @return loyaltyObjects
   */
  @javax.annotation.Nullable
  public List<LoyaltyObject> getLoyaltyObjects() {
    return loyaltyObjects;
  }

  public void setLoyaltyObjects(List<LoyaltyObject> loyaltyObjects) {
    this.loyaltyObjects = loyaltyObjects;
  }


  public Resources offerClasses(List<OfferClass> offerClasses) {
    this.offerClasses = offerClasses;
    return this;
  }

  public Resources addOfferClassesItem(OfferClass offerClassesItem) {
    if (this.offerClasses == null) {
      this.offerClasses = new ArrayList<>();
    }
    this.offerClasses.add(offerClassesItem);
    return this;
  }

  /**
   * Get offerClasses
   * @return offerClasses
   */
  @javax.annotation.Nullable
  public List<OfferClass> getOfferClasses() {
    return offerClasses;
  }

  public void setOfferClasses(List<OfferClass> offerClasses) {
    this.offerClasses = offerClasses;
  }


  public Resources offerObjects(List<OfferObject> offerObjects) {
    this.offerObjects = offerObjects;
    return this;
  }

  public Resources addOfferObjectsItem(OfferObject offerObjectsItem) {
    if (this.offerObjects == null) {
      this.offerObjects = new ArrayList<>();
    }
    this.offerObjects.add(offerObjectsItem);
    return this;
  }

  /**
   * Get offerObjects
   * @return offerObjects
   */
  @javax.annotation.Nullable
  public List<OfferObject> getOfferObjects() {
    return offerObjects;
  }

  public void setOfferObjects(List<OfferObject> offerObjects) {
    this.offerObjects = offerObjects;
  }


  public Resources transitClasses(List<TransitClass> transitClasses) {
    this.transitClasses = transitClasses;
    return this;
  }

  public Resources addTransitClassesItem(TransitClass transitClassesItem) {
    if (this.transitClasses == null) {
      this.transitClasses = new ArrayList<>();
    }
    this.transitClasses.add(transitClassesItem);
    return this;
  }

  /**
   * Get transitClasses
   * @return transitClasses
   */
  @javax.annotation.Nullable
  public List<TransitClass> getTransitClasses() {
    return transitClasses;
  }

  public void setTransitClasses(List<TransitClass> transitClasses) {
    this.transitClasses = transitClasses;
  }


  public Resources transitObjects(List<TransitObject> transitObjects) {
    this.transitObjects = transitObjects;
    return this;
  }

  public Resources addTransitObjectsItem(TransitObject transitObjectsItem) {
    if (this.transitObjects == null) {
      this.transitObjects = new ArrayList<>();
    }
    this.transitObjects.add(transitObjectsItem);
    return this;
  }

  /**
   * Get transitObjects
   * @return transitObjects
   */
  @javax.annotation.Nullable
  public List<TransitObject> getTransitObjects() {
    return transitObjects;
  }

  public void setTransitObjects(List<TransitObject> transitObjects) {
    this.transitObjects = transitObjects;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Resources resources = (Resources) o;
    return Objects.equals(this.eventTicketClasses, resources.eventTicketClasses) &&
        Objects.equals(this.eventTicketObjects, resources.eventTicketObjects) &&
        Objects.equals(this.flightClasses, resources.flightClasses) &&
        Objects.equals(this.flightObjects, resources.flightObjects) &&
        Objects.equals(this.giftCardClasses, resources.giftCardClasses) &&
        Objects.equals(this.giftCardObjects, resources.giftCardObjects) &&
        Objects.equals(this.loyaltyClasses, resources.loyaltyClasses) &&
        Objects.equals(this.loyaltyObjects, resources.loyaltyObjects) &&
        Objects.equals(this.offerClasses, resources.offerClasses) &&
        Objects.equals(this.offerObjects, resources.offerObjects) &&
        Objects.equals(this.transitClasses, resources.transitClasses) &&
        Objects.equals(this.transitObjects, resources.transitObjects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventTicketClasses, eventTicketObjects, flightClasses, flightObjects, giftCardClasses, giftCardObjects, loyaltyClasses, loyaltyObjects, offerClasses, offerObjects, transitClasses, transitObjects);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Resources {\n");
    sb.append("    eventTicketClasses: ").append(toIndentedString(eventTicketClasses)).append("\n");
    sb.append("    eventTicketObjects: ").append(toIndentedString(eventTicketObjects)).append("\n");
    sb.append("    flightClasses: ").append(toIndentedString(flightClasses)).append("\n");
    sb.append("    flightObjects: ").append(toIndentedString(flightObjects)).append("\n");
    sb.append("    giftCardClasses: ").append(toIndentedString(giftCardClasses)).append("\n");
    sb.append("    giftCardObjects: ").append(toIndentedString(giftCardObjects)).append("\n");
    sb.append("    loyaltyClasses: ").append(toIndentedString(loyaltyClasses)).append("\n");
    sb.append("    loyaltyObjects: ").append(toIndentedString(loyaltyObjects)).append("\n");
    sb.append("    offerClasses: ").append(toIndentedString(offerClasses)).append("\n");
    sb.append("    offerObjects: ").append(toIndentedString(offerObjects)).append("\n");
    sb.append("    transitClasses: ").append(toIndentedString(transitClasses)).append("\n");
    sb.append("    transitObjects: ").append(toIndentedString(transitObjects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventTicketClasses");
    openapiFields.add("eventTicketObjects");
    openapiFields.add("flightClasses");
    openapiFields.add("flightObjects");
    openapiFields.add("giftCardClasses");
    openapiFields.add("giftCardObjects");
    openapiFields.add("loyaltyClasses");
    openapiFields.add("loyaltyObjects");
    openapiFields.add("offerClasses");
    openapiFields.add("offerObjects");
    openapiFields.add("transitClasses");
    openapiFields.add("transitObjects");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Resources
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Resources.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Resources is not found in the empty JSON string", Resources.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Resources.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Resources` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("eventTicketClasses") != null && !jsonObj.get("eventTicketClasses").isJsonNull()) {
        JsonArray jsonArrayeventTicketClasses = jsonObj.getAsJsonArray("eventTicketClasses");
        if (jsonArrayeventTicketClasses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("eventTicketClasses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `eventTicketClasses` to be an array in the JSON string but got `%s`", jsonObj.get("eventTicketClasses").toString()));
          }

          // validate the optional field `eventTicketClasses` (array)
          for (int i = 0; i < jsonArrayeventTicketClasses.size(); i++) {
            EventTicketClass.validateJsonElement(jsonArrayeventTicketClasses.get(i));
          };
        }
      }
      if (jsonObj.get("eventTicketObjects") != null && !jsonObj.get("eventTicketObjects").isJsonNull()) {
        JsonArray jsonArrayeventTicketObjects = jsonObj.getAsJsonArray("eventTicketObjects");
        if (jsonArrayeventTicketObjects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("eventTicketObjects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `eventTicketObjects` to be an array in the JSON string but got `%s`", jsonObj.get("eventTicketObjects").toString()));
          }

          // validate the optional field `eventTicketObjects` (array)
          for (int i = 0; i < jsonArrayeventTicketObjects.size(); i++) {
            EventTicketObject.validateJsonElement(jsonArrayeventTicketObjects.get(i));
          };
        }
      }
      if (jsonObj.get("flightClasses") != null && !jsonObj.get("flightClasses").isJsonNull()) {
        JsonArray jsonArrayflightClasses = jsonObj.getAsJsonArray("flightClasses");
        if (jsonArrayflightClasses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("flightClasses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `flightClasses` to be an array in the JSON string but got `%s`", jsonObj.get("flightClasses").toString()));
          }

          // validate the optional field `flightClasses` (array)
          for (int i = 0; i < jsonArrayflightClasses.size(); i++) {
            FlightClass.validateJsonElement(jsonArrayflightClasses.get(i));
          };
        }
      }
      if (jsonObj.get("flightObjects") != null && !jsonObj.get("flightObjects").isJsonNull()) {
        JsonArray jsonArrayflightObjects = jsonObj.getAsJsonArray("flightObjects");
        if (jsonArrayflightObjects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("flightObjects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `flightObjects` to be an array in the JSON string but got `%s`", jsonObj.get("flightObjects").toString()));
          }

          // validate the optional field `flightObjects` (array)
          for (int i = 0; i < jsonArrayflightObjects.size(); i++) {
            FlightObject.validateJsonElement(jsonArrayflightObjects.get(i));
          };
        }
      }
      if (jsonObj.get("giftCardClasses") != null && !jsonObj.get("giftCardClasses").isJsonNull()) {
        JsonArray jsonArraygiftCardClasses = jsonObj.getAsJsonArray("giftCardClasses");
        if (jsonArraygiftCardClasses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("giftCardClasses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `giftCardClasses` to be an array in the JSON string but got `%s`", jsonObj.get("giftCardClasses").toString()));
          }

          // validate the optional field `giftCardClasses` (array)
          for (int i = 0; i < jsonArraygiftCardClasses.size(); i++) {
            GiftCardClass.validateJsonElement(jsonArraygiftCardClasses.get(i));
          };
        }
      }
      if (jsonObj.get("giftCardObjects") != null && !jsonObj.get("giftCardObjects").isJsonNull()) {
        JsonArray jsonArraygiftCardObjects = jsonObj.getAsJsonArray("giftCardObjects");
        if (jsonArraygiftCardObjects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("giftCardObjects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `giftCardObjects` to be an array in the JSON string but got `%s`", jsonObj.get("giftCardObjects").toString()));
          }

          // validate the optional field `giftCardObjects` (array)
          for (int i = 0; i < jsonArraygiftCardObjects.size(); i++) {
            GiftCardObject.validateJsonElement(jsonArraygiftCardObjects.get(i));
          };
        }
      }
      if (jsonObj.get("loyaltyClasses") != null && !jsonObj.get("loyaltyClasses").isJsonNull()) {
        JsonArray jsonArrayloyaltyClasses = jsonObj.getAsJsonArray("loyaltyClasses");
        if (jsonArrayloyaltyClasses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("loyaltyClasses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `loyaltyClasses` to be an array in the JSON string but got `%s`", jsonObj.get("loyaltyClasses").toString()));
          }

          // validate the optional field `loyaltyClasses` (array)
          for (int i = 0; i < jsonArrayloyaltyClasses.size(); i++) {
            LoyaltyClass.validateJsonElement(jsonArrayloyaltyClasses.get(i));
          };
        }
      }
      if (jsonObj.get("loyaltyObjects") != null && !jsonObj.get("loyaltyObjects").isJsonNull()) {
        JsonArray jsonArrayloyaltyObjects = jsonObj.getAsJsonArray("loyaltyObjects");
        if (jsonArrayloyaltyObjects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("loyaltyObjects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `loyaltyObjects` to be an array in the JSON string but got `%s`", jsonObj.get("loyaltyObjects").toString()));
          }

          // validate the optional field `loyaltyObjects` (array)
          for (int i = 0; i < jsonArrayloyaltyObjects.size(); i++) {
            LoyaltyObject.validateJsonElement(jsonArrayloyaltyObjects.get(i));
          };
        }
      }
      if (jsonObj.get("offerClasses") != null && !jsonObj.get("offerClasses").isJsonNull()) {
        JsonArray jsonArrayofferClasses = jsonObj.getAsJsonArray("offerClasses");
        if (jsonArrayofferClasses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("offerClasses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `offerClasses` to be an array in the JSON string but got `%s`", jsonObj.get("offerClasses").toString()));
          }

          // validate the optional field `offerClasses` (array)
          for (int i = 0; i < jsonArrayofferClasses.size(); i++) {
            OfferClass.validateJsonElement(jsonArrayofferClasses.get(i));
          };
        }
      }
      if (jsonObj.get("offerObjects") != null && !jsonObj.get("offerObjects").isJsonNull()) {
        JsonArray jsonArrayofferObjects = jsonObj.getAsJsonArray("offerObjects");
        if (jsonArrayofferObjects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("offerObjects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `offerObjects` to be an array in the JSON string but got `%s`", jsonObj.get("offerObjects").toString()));
          }

          // validate the optional field `offerObjects` (array)
          for (int i = 0; i < jsonArrayofferObjects.size(); i++) {
            OfferObject.validateJsonElement(jsonArrayofferObjects.get(i));
          };
        }
      }
      if (jsonObj.get("transitClasses") != null && !jsonObj.get("transitClasses").isJsonNull()) {
        JsonArray jsonArraytransitClasses = jsonObj.getAsJsonArray("transitClasses");
        if (jsonArraytransitClasses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transitClasses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transitClasses` to be an array in the JSON string but got `%s`", jsonObj.get("transitClasses").toString()));
          }

          // validate the optional field `transitClasses` (array)
          for (int i = 0; i < jsonArraytransitClasses.size(); i++) {
            TransitClass.validateJsonElement(jsonArraytransitClasses.get(i));
          };
        }
      }
      if (jsonObj.get("transitObjects") != null && !jsonObj.get("transitObjects").isJsonNull()) {
        JsonArray jsonArraytransitObjects = jsonObj.getAsJsonArray("transitObjects");
        if (jsonArraytransitObjects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transitObjects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transitObjects` to be an array in the JSON string but got `%s`", jsonObj.get("transitObjects").toString()));
          }

          // validate the optional field `transitObjects` (array)
          for (int i = 0; i < jsonArraytransitObjects.size(); i++) {
            TransitObject.validateJsonElement(jsonArraytransitObjects.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Resources.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Resources' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Resources> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Resources.class));

       return (TypeAdapter<T>) new TypeAdapter<Resources>() {
           @Override
           public void write(JsonWriter out, Resources value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Resources read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Resources given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Resources
   * @throws IOException if the JSON string is invalid with respect to Resources
   */
  public static Resources fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Resources.class);
  }

  /**
   * Convert an instance of Resources to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

