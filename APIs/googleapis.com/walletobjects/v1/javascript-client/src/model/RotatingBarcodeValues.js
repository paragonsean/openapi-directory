/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RotatingBarcodeValues model module.
 * @module model/RotatingBarcodeValues
 * @version v1
 */
class RotatingBarcodeValues {
    /**
     * Constructs a new <code>RotatingBarcodeValues</code>.
     * A payload containing many barcode values and start date/time.
     * @alias module:model/RotatingBarcodeValues
     */
    constructor() { 
        
        RotatingBarcodeValues.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RotatingBarcodeValues</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RotatingBarcodeValues} obj Optional instance to populate.
     * @return {module:model/RotatingBarcodeValues} The populated <code>RotatingBarcodeValues</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RotatingBarcodeValues();

            if (data.hasOwnProperty('periodMillis')) {
                obj['periodMillis'] = ApiClient.convertToType(data['periodMillis'], 'String');
            }
            if (data.hasOwnProperty('startDateTime')) {
                obj['startDateTime'] = ApiClient.convertToType(data['startDateTime'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RotatingBarcodeValues</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RotatingBarcodeValues</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['periodMillis'] && !(typeof data['periodMillis'] === 'string' || data['periodMillis'] instanceof String)) {
            throw new Error("Expected the field `periodMillis` to be a primitive type in the JSON string but got " + data['periodMillis']);
        }
        // ensure the json data is a string
        if (data['startDateTime'] && !(typeof data['startDateTime'] === 'string' || data['startDateTime'] instanceof String)) {
            throw new Error("Expected the field `startDateTime` to be a primitive type in the JSON string but got " + data['startDateTime']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['values'])) {
            throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
        }

        return true;
    }


}



/**
 * Required. The amount of time each barcode is valid for.
 * @member {String} periodMillis
 */
RotatingBarcodeValues.prototype['periodMillis'] = undefined;

/**
 * Required. The date/time the first barcode is valid from. Barcodes will be rotated through using period_millis defined on the object's RotatingBarcodeValueInfo. This is an ISO 8601 extended format date/time, with an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year.
 * @member {String} startDateTime
 */
RotatingBarcodeValues.prototype['startDateTime'] = undefined;

/**
 * Required. The values to encode in the barcode. At least one value is required.
 * @member {Array.<String>} values
 */
RotatingBarcodeValues.prototype['values'] = undefined;






export default RotatingBarcodeValues;

