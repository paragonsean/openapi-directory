/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MediaRequestInfo model module.
 * @module model/MediaRequestInfo
 * @version v1
 */
class MediaRequestInfo {
    /**
     * Constructs a new <code>MediaRequestInfo</code>.
     * Extra information added to operations that support Scotty media requests.
     * @alias module:model/MediaRequestInfo
     */
    constructor() { 
        
        MediaRequestInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MediaRequestInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediaRequestInfo} obj Optional instance to populate.
     * @return {module:model/MediaRequestInfo} The populated <code>MediaRequestInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediaRequestInfo();

            if (data.hasOwnProperty('currentBytes')) {
                obj['currentBytes'] = ApiClient.convertToType(data['currentBytes'], 'String');
            }
            if (data.hasOwnProperty('customData')) {
                obj['customData'] = ApiClient.convertToType(data['customData'], 'String');
            }
            if (data.hasOwnProperty('diffObjectVersion')) {
                obj['diffObjectVersion'] = ApiClient.convertToType(data['diffObjectVersion'], 'String');
            }
            if (data.hasOwnProperty('finalStatus')) {
                obj['finalStatus'] = ApiClient.convertToType(data['finalStatus'], 'Number');
            }
            if (data.hasOwnProperty('notificationType')) {
                obj['notificationType'] = ApiClient.convertToType(data['notificationType'], 'String');
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('requestReceivedParamsServingInfo')) {
                obj['requestReceivedParamsServingInfo'] = ApiClient.convertToType(data['requestReceivedParamsServingInfo'], 'Blob');
            }
            if (data.hasOwnProperty('totalBytes')) {
                obj['totalBytes'] = ApiClient.convertToType(data['totalBytes'], 'String');
            }
            if (data.hasOwnProperty('totalBytesIsEstimated')) {
                obj['totalBytesIsEstimated'] = ApiClient.convertToType(data['totalBytesIsEstimated'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediaRequestInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediaRequestInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currentBytes'] && !(typeof data['currentBytes'] === 'string' || data['currentBytes'] instanceof String)) {
            throw new Error("Expected the field `currentBytes` to be a primitive type in the JSON string but got " + data['currentBytes']);
        }
        // ensure the json data is a string
        if (data['customData'] && !(typeof data['customData'] === 'string' || data['customData'] instanceof String)) {
            throw new Error("Expected the field `customData` to be a primitive type in the JSON string but got " + data['customData']);
        }
        // ensure the json data is a string
        if (data['diffObjectVersion'] && !(typeof data['diffObjectVersion'] === 'string' || data['diffObjectVersion'] instanceof String)) {
            throw new Error("Expected the field `diffObjectVersion` to be a primitive type in the JSON string but got " + data['diffObjectVersion']);
        }
        // ensure the json data is a string
        if (data['notificationType'] && !(typeof data['notificationType'] === 'string' || data['notificationType'] instanceof String)) {
            throw new Error("Expected the field `notificationType` to be a primitive type in the JSON string but got " + data['notificationType']);
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }
        // ensure the json data is a string
        if (data['totalBytes'] && !(typeof data['totalBytes'] === 'string' || data['totalBytes'] instanceof String)) {
            throw new Error("Expected the field `totalBytes` to be a primitive type in the JSON string but got " + data['totalBytes']);
        }

        return true;
    }


}



/**
 * The number of current bytes uploaded or downloaded.
 * @member {String} currentBytes
 */
MediaRequestInfo.prototype['currentBytes'] = undefined;

/**
 * Data to be copied to backend requests. Custom data is returned to Scotty in the agent_state field, which Scotty will then provide in subsequent upload notifications.
 * @member {String} customData
 */
MediaRequestInfo.prototype['customData'] = undefined;

/**
 * Set if the http request info is diff encoded. The value of this field is the version number of the base revision. This is corresponding to Apiary's mediaDiffObjectVersion (//depot/google3/java/com/google/api/server/media/variable/DiffObjectVersionVariable.java). See go/esf-scotty-diff-upload for more information.
 * @member {String} diffObjectVersion
 */
MediaRequestInfo.prototype['diffObjectVersion'] = undefined;

/**
 * The existence of the final_status field indicates that this is the last call to the agent for this request_id. http://google3/uploader/agent/scotty_agent.proto?l=737&rcl=347601929
 * @member {Number} finalStatus
 */
MediaRequestInfo.prototype['finalStatus'] = undefined;

/**
 * The type of notification received from Scotty.
 * @member {module:model/MediaRequestInfo.NotificationTypeEnum} notificationType
 */
MediaRequestInfo.prototype['notificationType'] = undefined;

/**
 * The Scotty request ID.
 * @member {String} requestId
 */
MediaRequestInfo.prototype['requestId'] = undefined;

/**
 * The partition of the Scotty server handling this request. type is uploader_service.RequestReceivedParamsServingInfo LINT.IfChange(request_received_params_serving_info_annotations) LINT.ThenChange()
 * @member {Blob} requestReceivedParamsServingInfo
 */
MediaRequestInfo.prototype['requestReceivedParamsServingInfo'] = undefined;

/**
 * The total size of the file.
 * @member {String} totalBytes
 */
MediaRequestInfo.prototype['totalBytes'] = undefined;

/**
 * Whether the total bytes field contains an estimated data.
 * @member {Boolean} totalBytesIsEstimated
 */
MediaRequestInfo.prototype['totalBytesIsEstimated'] = undefined;





/**
 * Allowed values for the <code>notificationType</code> property.
 * @enum {String}
 * @readonly
 */
MediaRequestInfo['NotificationTypeEnum'] = {

    /**
     * value: "START"
     * @const
     */
    "START": "START",

    /**
     * value: "PROGRESS"
     * @const
     */
    "PROGRESS": "PROGRESS",

    /**
     * value: "END"
     * @const
     */
    "END": "END",

    /**
     * value: "RESPONSE_SENT"
     * @const
     */
    "RESPONSE_SENT": "RESPONSE_SENT",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR"
};



export default MediaRequestInfo;

