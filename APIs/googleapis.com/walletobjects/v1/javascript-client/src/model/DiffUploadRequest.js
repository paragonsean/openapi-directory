/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CompositeMedia from './CompositeMedia';

/**
 * The DiffUploadRequest model module.
 * @module model/DiffUploadRequest
 * @version v1
 */
class DiffUploadRequest {
    /**
     * Constructs a new <code>DiffUploadRequest</code>.
     * A Diff upload request. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
     * @alias module:model/DiffUploadRequest
     */
    constructor() { 
        
        DiffUploadRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiffUploadRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiffUploadRequest} obj Optional instance to populate.
     * @return {module:model/DiffUploadRequest} The populated <code>DiffUploadRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiffUploadRequest();

            if (data.hasOwnProperty('checksumsInfo')) {
                obj['checksumsInfo'] = CompositeMedia.constructFromObject(data['checksumsInfo']);
            }
            if (data.hasOwnProperty('objectInfo')) {
                obj['objectInfo'] = CompositeMedia.constructFromObject(data['objectInfo']);
            }
            if (data.hasOwnProperty('objectVersion')) {
                obj['objectVersion'] = ApiClient.convertToType(data['objectVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiffUploadRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiffUploadRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `checksumsInfo`
        if (data['checksumsInfo']) { // data not null
          CompositeMedia.validateJSON(data['checksumsInfo']);
        }
        // validate the optional field `objectInfo`
        if (data['objectInfo']) { // data not null
          CompositeMedia.validateJSON(data['objectInfo']);
        }
        // ensure the json data is a string
        if (data['objectVersion'] && !(typeof data['objectVersion'] === 'string' || data['objectVersion'] instanceof String)) {
            throw new Error("Expected the field `objectVersion` to be a primitive type in the JSON string but got " + data['objectVersion']);
        }

        return true;
    }


}



/**
 * @member {module:model/CompositeMedia} checksumsInfo
 */
DiffUploadRequest.prototype['checksumsInfo'] = undefined;

/**
 * @member {module:model/CompositeMedia} objectInfo
 */
DiffUploadRequest.prototype['objectInfo'] = undefined;

/**
 * The object version of the object that is the base version the incoming diff script will be applied to. This field will always be filled in.
 * @member {String} objectVersion
 */
DiffUploadRequest.prototype['objectVersion'] = undefined;






export default DiffUploadRequest;

