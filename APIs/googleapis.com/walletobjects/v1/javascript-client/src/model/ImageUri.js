/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LocalizedString from './LocalizedString';

/**
 * The ImageUri model module.
 * @module model/ImageUri
 * @version v1
 */
class ImageUri {
    /**
     * Constructs a new <code>ImageUri</code>.
     * @alias module:model/ImageUri
     */
    constructor() { 
        
        ImageUri.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageUri</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageUri} obj Optional instance to populate.
     * @return {module:model/ImageUri} The populated <code>ImageUri</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageUri();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('localizedDescription')) {
                obj['localizedDescription'] = LocalizedString.constructFromObject(data['localizedDescription']);
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageUri</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageUri</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `localizedDescription`
        if (data['localizedDescription']) { // data not null
          LocalizedString.validateJSON(data['localizedDescription']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * Additional information about the image, which is unused and retained only for backward compatibility.
 * @member {String} description
 */
ImageUri.prototype['description'] = undefined;

/**
 * @member {module:model/LocalizedString} localizedDescription
 */
ImageUri.prototype['localizedDescription'] = undefined;

/**
 * The location of the image. URIs must have a scheme.
 * @member {String} uri
 */
ImageUri.prototype['uri'] = undefined;






export default ImageUri;

