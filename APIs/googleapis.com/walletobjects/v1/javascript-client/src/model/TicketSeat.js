/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LocalizedString from './LocalizedString';

/**
 * The TicketSeat model module.
 * @module model/TicketSeat
 * @version v1
 */
class TicketSeat {
    /**
     * Constructs a new <code>TicketSeat</code>.
     * @alias module:model/TicketSeat
     */
    constructor() { 
        
        TicketSeat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TicketSeat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TicketSeat} obj Optional instance to populate.
     * @return {module:model/TicketSeat} The populated <code>TicketSeat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TicketSeat();

            if (data.hasOwnProperty('coach')) {
                obj['coach'] = ApiClient.convertToType(data['coach'], 'String');
            }
            if (data.hasOwnProperty('customFareClass')) {
                obj['customFareClass'] = LocalizedString.constructFromObject(data['customFareClass']);
            }
            if (data.hasOwnProperty('fareClass')) {
                obj['fareClass'] = ApiClient.convertToType(data['fareClass'], 'String');
            }
            if (data.hasOwnProperty('seat')) {
                obj['seat'] = ApiClient.convertToType(data['seat'], 'String');
            }
            if (data.hasOwnProperty('seatAssignment')) {
                obj['seatAssignment'] = LocalizedString.constructFromObject(data['seatAssignment']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TicketSeat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TicketSeat</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['coach'] && !(typeof data['coach'] === 'string' || data['coach'] instanceof String)) {
            throw new Error("Expected the field `coach` to be a primitive type in the JSON string but got " + data['coach']);
        }
        // validate the optional field `customFareClass`
        if (data['customFareClass']) { // data not null
          LocalizedString.validateJSON(data['customFareClass']);
        }
        // ensure the json data is a string
        if (data['fareClass'] && !(typeof data['fareClass'] === 'string' || data['fareClass'] instanceof String)) {
            throw new Error("Expected the field `fareClass` to be a primitive type in the JSON string but got " + data['fareClass']);
        }
        // ensure the json data is a string
        if (data['seat'] && !(typeof data['seat'] === 'string' || data['seat'] instanceof String)) {
            throw new Error("Expected the field `seat` to be a primitive type in the JSON string but got " + data['seat']);
        }
        // validate the optional field `seatAssignment`
        if (data['seatAssignment']) { // data not null
          LocalizedString.validateJSON(data['seatAssignment']);
        }

        return true;
    }


}



/**
 * The identifier of the train car or coach in which the ticketed seat is located. Eg. \"10\"
 * @member {String} coach
 */
TicketSeat.prototype['coach'] = undefined;

/**
 * @member {module:model/LocalizedString} customFareClass
 */
TicketSeat.prototype['customFareClass'] = undefined;

/**
 * The fare class of the ticketed seat.
 * @member {module:model/TicketSeat.FareClassEnum} fareClass
 */
TicketSeat.prototype['fareClass'] = undefined;

/**
 * The identifier of where the ticketed seat is located. Eg. \"42\". If there is no specific identifier, use `seatAssigment` instead.
 * @member {String} seat
 */
TicketSeat.prototype['seat'] = undefined;

/**
 * @member {module:model/LocalizedString} seatAssignment
 */
TicketSeat.prototype['seatAssignment'] = undefined;





/**
 * Allowed values for the <code>fareClass</code> property.
 * @enum {String}
 * @readonly
 */
TicketSeat['FareClassEnum'] = {

    /**
     * value: "FARE_CLASS_UNSPECIFIED"
     * @const
     */
    "FARE_CLASS_UNSPECIFIED": "FARE_CLASS_UNSPECIFIED",

    /**
     * value: "ECONOMY"
     * @const
     */
    "ECONOMY": "ECONOMY",

    /**
     * value: "economy"
     * @const
     */
    "economy": "economy",

    /**
     * value: "FIRST"
     * @const
     */
    "FIRST": "FIRST",

    /**
     * value: "first"
     * @const
     */
    "first": "first",

    /**
     * value: "BUSINESS"
     * @const
     */
    "BUSINESS": "BUSINESS",

    /**
     * value: "business"
     * @const
     */
    "business": "business"
};



export default TicketSeat;

