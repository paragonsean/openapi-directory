/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Blobstore2Info from './Blobstore2Info';
import ObjectId from './ObjectId';

/**
 * The CompositeMedia model module.
 * @module model/CompositeMedia
 * @version v1
 */
class CompositeMedia {
    /**
     * Constructs a new <code>CompositeMedia</code>.
     * A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.
     * @alias module:model/CompositeMedia
     */
    constructor() { 
        
        CompositeMedia.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CompositeMedia</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompositeMedia} obj Optional instance to populate.
     * @return {module:model/CompositeMedia} The populated <code>CompositeMedia</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompositeMedia();

            if (data.hasOwnProperty('blobRef')) {
                obj['blobRef'] = ApiClient.convertToType(data['blobRef'], 'Blob');
            }
            if (data.hasOwnProperty('blobstore2Info')) {
                obj['blobstore2Info'] = Blobstore2Info.constructFromObject(data['blobstore2Info']);
            }
            if (data.hasOwnProperty('cosmoBinaryReference')) {
                obj['cosmoBinaryReference'] = ApiClient.convertToType(data['cosmoBinaryReference'], 'Blob');
            }
            if (data.hasOwnProperty('crc32cHash')) {
                obj['crc32cHash'] = ApiClient.convertToType(data['crc32cHash'], 'Number');
            }
            if (data.hasOwnProperty('inline')) {
                obj['inline'] = ApiClient.convertToType(data['inline'], 'Blob');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'String');
            }
            if (data.hasOwnProperty('md5Hash')) {
                obj['md5Hash'] = ApiClient.convertToType(data['md5Hash'], 'Blob');
            }
            if (data.hasOwnProperty('objectId')) {
                obj['objectId'] = ObjectId.constructFromObject(data['objectId']);
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('referenceType')) {
                obj['referenceType'] = ApiClient.convertToType(data['referenceType'], 'String');
            }
            if (data.hasOwnProperty('sha1Hash')) {
                obj['sha1Hash'] = ApiClient.convertToType(data['sha1Hash'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompositeMedia</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompositeMedia</code>.
     */
    static validateJSON(data) {
        // validate the optional field `blobstore2Info`
        if (data['blobstore2Info']) { // data not null
          Blobstore2Info.validateJSON(data['blobstore2Info']);
        }
        // ensure the json data is a string
        if (data['length'] && !(typeof data['length'] === 'string' || data['length'] instanceof String)) {
            throw new Error("Expected the field `length` to be a primitive type in the JSON string but got " + data['length']);
        }
        // validate the optional field `objectId`
        if (data['objectId']) { // data not null
          ObjectId.validateJSON(data['objectId']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['referenceType'] && !(typeof data['referenceType'] === 'string' || data['referenceType'] instanceof String)) {
            throw new Error("Expected the field `referenceType` to be a primitive type in the JSON string but got " + data['referenceType']);
        }

        return true;
    }


}



/**
 * Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should be the byte representation of a blobstore.BlobRef. Since Blobstore is deprecating v1, use blobstore2_info instead. For now, any v2 blob will also be represented in this field as v1 BlobRef.
 * @member {Blob} blobRef
 */
CompositeMedia.prototype['blobRef'] = undefined;

/**
 * @member {module:model/Blobstore2Info} blobstore2Info
 */
CompositeMedia.prototype['blobstore2Info'] = undefined;

/**
 * A binary data reference for a media download. Serves as a technology-agnostic binary reference in some Google infrastructure. This value is a serialized storage_cosmo.BinaryReference proto. Storing it as bytes is a hack to get around the fact that the cosmo proto (as well as others it includes) doesn't support JavaScript. This prevents us from including the actual type of this field.
 * @member {Blob} cosmoBinaryReference
 */
CompositeMedia.prototype['cosmoBinaryReference'] = undefined;

/**
 * crc32.c hash for the payload.
 * @member {Number} crc32cHash
 */
CompositeMedia.prototype['crc32cHash'] = undefined;

/**
 * Media data, set if reference_type is INLINE
 * @member {Blob} inline
 */
CompositeMedia.prototype['inline'] = undefined;

/**
 * Size of the data, in bytes
 * @member {String} length
 */
CompositeMedia.prototype['length'] = undefined;

/**
 * MD5 hash for the payload.
 * @member {Blob} md5Hash
 */
CompositeMedia.prototype['md5Hash'] = undefined;

/**
 * @member {module:model/ObjectId} objectId
 */
CompositeMedia.prototype['objectId'] = undefined;

/**
 * Path to the data, set if reference_type is PATH
 * @member {String} path
 */
CompositeMedia.prototype['path'] = undefined;

/**
 * Describes what the field reference contains.
 * @member {module:model/CompositeMedia.ReferenceTypeEnum} referenceType
 */
CompositeMedia.prototype['referenceType'] = undefined;

/**
 * SHA-1 hash for the payload.
 * @member {Blob} sha1Hash
 */
CompositeMedia.prototype['sha1Hash'] = undefined;





/**
 * Allowed values for the <code>referenceType</code> property.
 * @enum {String}
 * @readonly
 */
CompositeMedia['ReferenceTypeEnum'] = {

    /**
     * value: "PATH"
     * @const
     */
    "PATH": "PATH",

    /**
     * value: "BLOB_REF"
     * @const
     */
    "BLOB_REF": "BLOB_REF",

    /**
     * value: "INLINE"
     * @const
     */
    "INLINE": "INLINE",

    /**
     * value: "BIGSTORE_REF"
     * @const
     */
    "BIGSTORE_REF": "BIGSTORE_REF",

    /**
     * value: "COSMO_BINARY_REFERENCE"
     * @const
     */
    "COSMO_BINARY_REFERENCE": "COSMO_BINARY_REFERENCE"
};



export default CompositeMedia;

