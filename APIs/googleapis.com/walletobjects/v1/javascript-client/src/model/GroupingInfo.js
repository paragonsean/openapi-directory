/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GroupingInfo model module.
 * @module model/GroupingInfo
 * @version v1
 */
class GroupingInfo {
    /**
     * Constructs a new <code>GroupingInfo</code>.
     * @alias module:model/GroupingInfo
     */
    constructor() { 
        
        GroupingInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GroupingInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GroupingInfo} obj Optional instance to populate.
     * @return {module:model/GroupingInfo} The populated <code>GroupingInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GroupingInfo();

            if (data.hasOwnProperty('groupingId')) {
                obj['groupingId'] = ApiClient.convertToType(data['groupingId'], 'String');
            }
            if (data.hasOwnProperty('sortIndex')) {
                obj['sortIndex'] = ApiClient.convertToType(data['sortIndex'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GroupingInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GroupingInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['groupingId'] && !(typeof data['groupingId'] === 'string' || data['groupingId'] instanceof String)) {
            throw new Error("Expected the field `groupingId` to be a primitive type in the JSON string but got " + data['groupingId']);
        }

        return true;
    }


}



/**
 * Optional grouping ID for grouping the passes with the same ID visually together. Grouping with different types of passes is allowed.
 * @member {String} groupingId
 */
GroupingInfo.prototype['groupingId'] = undefined;

/**
 * Optional index for sorting the passes when they are grouped with other passes. Passes with lower sort index are shown before passes with higher sort index. If unspecified, the value is assumed to be INT_MAX. For two passes with the same sort index, the sorting behavior is undefined.
 * @member {Number} sortIndex
 */
GroupingInfo.prototype['sortIndex'] = undefined;






export default GroupingInfo;

