/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PassConstraints model module.
 * @module model/PassConstraints
 * @version v1
 */
class PassConstraints {
    /**
     * Constructs a new <code>PassConstraints</code>.
     * Container for any constraints that may be placed on passes.
     * @alias module:model/PassConstraints
     */
    constructor() { 
        
        PassConstraints.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PassConstraints</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PassConstraints} obj Optional instance to populate.
     * @return {module:model/PassConstraints} The populated <code>PassConstraints</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PassConstraints();

            if (data.hasOwnProperty('nfcConstraint')) {
                obj['nfcConstraint'] = ApiClient.convertToType(data['nfcConstraint'], ['String']);
            }
            if (data.hasOwnProperty('screenshotEligibility')) {
                obj['screenshotEligibility'] = ApiClient.convertToType(data['screenshotEligibility'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PassConstraints</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PassConstraints</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['nfcConstraint'])) {
            throw new Error("Expected the field `nfcConstraint` to be an array in the JSON data but got " + data['nfcConstraint']);
        }
        // ensure the json data is a string
        if (data['screenshotEligibility'] && !(typeof data['screenshotEligibility'] === 'string' || data['screenshotEligibility'] instanceof String)) {
            throw new Error("Expected the field `screenshotEligibility` to be a primitive type in the JSON string but got " + data['screenshotEligibility']);
        }

        return true;
    }


}



/**
 * The NFC constraints for the pass.
 * @member {Array.<module:model/PassConstraints.NfcConstraintEnum>} nfcConstraint
 */
PassConstraints.prototype['nfcConstraint'] = undefined;

/**
 * The screenshot eligibility for the pass.
 * @member {module:model/PassConstraints.ScreenshotEligibilityEnum} screenshotEligibility
 */
PassConstraints.prototype['screenshotEligibility'] = undefined;





/**
 * Allowed values for the <code>nfcConstraint</code> property.
 * @enum {String}
 * @readonly
 */
PassConstraints['NfcConstraintEnum'] = {

    /**
     * value: "NFC_CONSTRAINT_UNSPECIFIED"
     * @const
     */
    "NFC_CONSTRAINT_UNSPECIFIED": "NFC_CONSTRAINT_UNSPECIFIED",

    /**
     * value: "BLOCK_PAYMENT"
     * @const
     */
    "BLOCK_PAYMENT": "BLOCK_PAYMENT",

    /**
     * value: "BLOCK_CLOSED_LOOP_TRANSIT"
     * @const
     */
    "BLOCK_CLOSED_LOOP_TRANSIT": "BLOCK_CLOSED_LOOP_TRANSIT"
};


/**
 * Allowed values for the <code>screenshotEligibility</code> property.
 * @enum {String}
 * @readonly
 */
PassConstraints['ScreenshotEligibilityEnum'] = {

    /**
     * value: "SCREENSHOT_ELIGIBILITY_UNSPECIFIED"
     * @const
     */
    "SCREENSHOT_ELIGIBILITY_UNSPECIFIED": "SCREENSHOT_ELIGIBILITY_UNSPECIFIED",

    /**
     * value: "ELIGIBLE"
     * @const
     */
    "ELIGIBLE": "ELIGIBLE",

    /**
     * value: "INELIGIBLE"
     * @const
     */
    "INELIGIBLE": "INELIGIBLE"
};



export default PassConstraints;

