/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FieldReference model module.
 * @module model/FieldReference
 * @version v1
 */
class FieldReference {
    /**
     * Constructs a new <code>FieldReference</code>.
     * Reference definition to use with field overrides.
     * @alias module:model/FieldReference
     */
    constructor() { 
        
        FieldReference.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FieldReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FieldReference} obj Optional instance to populate.
     * @return {module:model/FieldReference} The populated <code>FieldReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FieldReference();

            if (data.hasOwnProperty('dateFormat')) {
                obj['dateFormat'] = ApiClient.convertToType(data['dateFormat'], 'String');
            }
            if (data.hasOwnProperty('fieldPath')) {
                obj['fieldPath'] = ApiClient.convertToType(data['fieldPath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FieldReference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FieldReference</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dateFormat'] && !(typeof data['dateFormat'] === 'string' || data['dateFormat'] instanceof String)) {
            throw new Error("Expected the field `dateFormat` to be a primitive type in the JSON string but got " + data['dateFormat']);
        }
        // ensure the json data is a string
        if (data['fieldPath'] && !(typeof data['fieldPath'] === 'string' || data['fieldPath'] instanceof String)) {
            throw new Error("Expected the field `fieldPath` to be a primitive type in the JSON string but got " + data['fieldPath']);
        }

        return true;
    }


}



/**
 * Only valid if the `fieldPath` references a date field. Chooses how the date field will be formatted and displayed in the UI.
 * @member {module:model/FieldReference.DateFormatEnum} dateFormat
 */
FieldReference.prototype['dateFormat'] = undefined;

/**
 * Path to the field being referenced, prefixed with \"object\" or \"class\" and separated with dots. For example, it may be the string \"object.purchaseDetails.purchasePrice\".
 * @member {String} fieldPath
 */
FieldReference.prototype['fieldPath'] = undefined;





/**
 * Allowed values for the <code>dateFormat</code> property.
 * @enum {String}
 * @readonly
 */
FieldReference['DateFormatEnum'] = {

    /**
     * value: "DATE_FORMAT_UNSPECIFIED"
     * @const
     */
    "DATE_FORMAT_UNSPECIFIED": "DATE_FORMAT_UNSPECIFIED",

    /**
     * value: "DATE_TIME"
     * @const
     */
    "DATE_TIME": "DATE_TIME",

    /**
     * value: "dateTime"
     * @const
     */
    "dateTime": "dateTime",

    /**
     * value: "DATE_ONLY"
     * @const
     */
    "DATE_ONLY": "DATE_ONLY",

    /**
     * value: "dateOnly"
     * @const
     */
    "dateOnly": "dateOnly",

    /**
     * value: "TIME_ONLY"
     * @const
     */
    "TIME_ONLY": "TIME_ONLY",

    /**
     * value: "timeOnly"
     * @const
     */
    "timeOnly": "timeOnly",

    /**
     * value: "DATE_TIME_YEAR"
     * @const
     */
    "DATE_TIME_YEAR": "DATE_TIME_YEAR",

    /**
     * value: "dateTimeYear"
     * @const
     */
    "dateTimeYear": "dateTimeYear",

    /**
     * value: "DATE_YEAR"
     * @const
     */
    "DATE_YEAR": "DATE_YEAR",

    /**
     * value: "dateYear"
     * @const
     */
    "dateYear": "dateYear",

    /**
     * value: "YEAR_MONTH"
     * @const
     */
    "YEAR_MONTH": "YEAR_MONTH",

    /**
     * value: "YEAR_MONTH_DAY"
     * @const
     */
    "YEAR_MONTH_DAY": "YEAR_MONTH_DAY"
};



export default FieldReference;

