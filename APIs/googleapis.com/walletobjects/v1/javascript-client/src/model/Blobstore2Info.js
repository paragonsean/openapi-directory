/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Blobstore2Info model module.
 * @module model/Blobstore2Info
 * @version v1
 */
class Blobstore2Info {
    /**
     * Constructs a new <code>Blobstore2Info</code>.
     * Information to read/write to blobstore2.
     * @alias module:model/Blobstore2Info
     */
    constructor() { 
        
        Blobstore2Info.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Blobstore2Info</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Blobstore2Info} obj Optional instance to populate.
     * @return {module:model/Blobstore2Info} The populated <code>Blobstore2Info</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Blobstore2Info();

            if (data.hasOwnProperty('blobGeneration')) {
                obj['blobGeneration'] = ApiClient.convertToType(data['blobGeneration'], 'String');
            }
            if (data.hasOwnProperty('blobId')) {
                obj['blobId'] = ApiClient.convertToType(data['blobId'], 'String');
            }
            if (data.hasOwnProperty('downloadReadHandle')) {
                obj['downloadReadHandle'] = ApiClient.convertToType(data['downloadReadHandle'], 'Blob');
            }
            if (data.hasOwnProperty('readToken')) {
                obj['readToken'] = ApiClient.convertToType(data['readToken'], 'String');
            }
            if (data.hasOwnProperty('uploadMetadataContainer')) {
                obj['uploadMetadataContainer'] = ApiClient.convertToType(data['uploadMetadataContainer'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Blobstore2Info</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Blobstore2Info</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['blobGeneration'] && !(typeof data['blobGeneration'] === 'string' || data['blobGeneration'] instanceof String)) {
            throw new Error("Expected the field `blobGeneration` to be a primitive type in the JSON string but got " + data['blobGeneration']);
        }
        // ensure the json data is a string
        if (data['blobId'] && !(typeof data['blobId'] === 'string' || data['blobId'] instanceof String)) {
            throw new Error("Expected the field `blobId` to be a primitive type in the JSON string but got " + data['blobId']);
        }
        // ensure the json data is a string
        if (data['readToken'] && !(typeof data['readToken'] === 'string' || data['readToken'] instanceof String)) {
            throw new Error("Expected the field `readToken` to be a primitive type in the JSON string but got " + data['readToken']);
        }

        return true;
    }


}



/**
 * The blob generation id.
 * @member {String} blobGeneration
 */
Blobstore2Info.prototype['blobGeneration'] = undefined;

/**
 * The blob id, e.g., /blobstore/prod/playground/scotty
 * @member {String} blobId
 */
Blobstore2Info.prototype['blobId'] = undefined;

/**
 * Read handle passed from Bigstore -> Scotty for a GCS download. This is a signed, serialized blobstore2.ReadHandle proto which must never be set outside of Bigstore, and is not applicable to non-GCS media downloads.
 * @member {Blob} downloadReadHandle
 */
Blobstore2Info.prototype['downloadReadHandle'] = undefined;

/**
 * The blob read token. Needed to read blobs that have not been replicated. Might not be available until the final call.
 * @member {String} readToken
 */
Blobstore2Info.prototype['readToken'] = undefined;

/**
 * Metadata passed from Blobstore -> Scotty for a new GCS upload. This is a signed, serialized blobstore2.BlobMetadataContainer proto which must never be consumed outside of Bigstore, and is not applicable to non-GCS media uploads.
 * @member {Blob} uploadMetadataContainer
 */
Blobstore2Info.prototype['uploadMetadataContainer'] = undefined;






export default Blobstore2Info;

