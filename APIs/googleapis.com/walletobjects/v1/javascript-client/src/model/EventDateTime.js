/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LocalizedString from './LocalizedString';

/**
 * The EventDateTime model module.
 * @module model/EventDateTime
 * @version v1
 */
class EventDateTime {
    /**
     * Constructs a new <code>EventDateTime</code>.
     * @alias module:model/EventDateTime
     */
    constructor() { 
        
        EventDateTime.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventDateTime</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventDateTime} obj Optional instance to populate.
     * @return {module:model/EventDateTime} The populated <code>EventDateTime</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventDateTime();

            if (data.hasOwnProperty('customDoorsOpenLabel')) {
                obj['customDoorsOpenLabel'] = LocalizedString.constructFromObject(data['customDoorsOpenLabel']);
            }
            if (data.hasOwnProperty('doorsOpen')) {
                obj['doorsOpen'] = ApiClient.convertToType(data['doorsOpen'], 'String');
            }
            if (data.hasOwnProperty('doorsOpenLabel')) {
                obj['doorsOpenLabel'] = ApiClient.convertToType(data['doorsOpenLabel'], 'String');
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventDateTime</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventDateTime</code>.
     */
    static validateJSON(data) {
        // validate the optional field `customDoorsOpenLabel`
        if (data['customDoorsOpenLabel']) { // data not null
          LocalizedString.validateJSON(data['customDoorsOpenLabel']);
        }
        // ensure the json data is a string
        if (data['doorsOpen'] && !(typeof data['doorsOpen'] === 'string' || data['doorsOpen'] instanceof String)) {
            throw new Error("Expected the field `doorsOpen` to be a primitive type in the JSON string but got " + data['doorsOpen']);
        }
        // ensure the json data is a string
        if (data['doorsOpenLabel'] && !(typeof data['doorsOpenLabel'] === 'string' || data['doorsOpenLabel'] instanceof String)) {
            throw new Error("Expected the field `doorsOpenLabel` to be a primitive type in the JSON string but got " + data['doorsOpenLabel']);
        }
        // ensure the json data is a string
        if (data['end'] && !(typeof data['end'] === 'string' || data['end'] instanceof String)) {
            throw new Error("Expected the field `end` to be a primitive type in the JSON string but got " + data['end']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['start'] && !(typeof data['start'] === 'string' || data['start'] instanceof String)) {
            throw new Error("Expected the field `start` to be a primitive type in the JSON string but got " + data['start']);
        }

        return true;
    }


}



/**
 * @member {module:model/LocalizedString} customDoorsOpenLabel
 */
EventDateTime.prototype['customDoorsOpenLabel'] = undefined;

/**
 * The date/time when the doors open at the venue. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the \"local date/time\". This should be the local date/time at the venue. For example, if the event occurs at the 20th hour of June 5th, 2018 at the venue, the local date/time portion should be `2018-06-05T20:00:00`. If the local date/time at the venue is 4 hours before UTC, an offset of `-04:00` may be appended. Without offset information, some rich features may not be available.
 * @member {String} doorsOpen
 */
EventDateTime.prototype['doorsOpen'] = undefined;

/**
 * The label to use for the doors open value (`doorsOpen`) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both `doorsOpenLabel` and `customDoorsOpenLabel` may not be set. If neither is set, the label will default to \"Doors Open\", localized. If the doors open field is unset, this label will not be used.
 * @member {module:model/EventDateTime.DoorsOpenLabelEnum} doorsOpenLabel
 */
EventDateTime.prototype['doorsOpenLabel'] = undefined;

/**
 * The date/time when the event ends. If the event spans multiple days, it should be the end date/time on the last day. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the \"local date/time\". This should be the local date/time at the venue. For example, if the event occurs at the 20th hour of June 5th, 2018 at the venue, the local date/time portion should be `2018-06-05T20:00:00`. If the local date/time at the venue is 4 hours before UTC, an offset of `-04:00` may be appended. Without offset information, some rich features may not be available.
 * @member {String} end
 */
EventDateTime.prototype['end'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#eventDateTime\"`.
 * @member {String} kind
 */
EventDateTime.prototype['kind'] = undefined;

/**
 * The date/time when the event starts. If the event spans multiple days, it should be the start date/time on the first day. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. The portion of the date/time without the offset is considered the \"local date/time\". This should be the local date/time at the venue. For example, if the event occurs at the 20th hour of June 5th, 2018 at the venue, the local date/time portion should be `2018-06-05T20:00:00`. If the local date/time at the venue is 4 hours before UTC, an offset of `-04:00` may be appended. Without offset information, some rich features may not be available.
 * @member {String} start
 */
EventDateTime.prototype['start'] = undefined;





/**
 * Allowed values for the <code>doorsOpenLabel</code> property.
 * @enum {String}
 * @readonly
 */
EventDateTime['DoorsOpenLabelEnum'] = {

    /**
     * value: "DOORS_OPEN_LABEL_UNSPECIFIED"
     * @const
     */
    "DOORS_OPEN_LABEL_UNSPECIFIED": "DOORS_OPEN_LABEL_UNSPECIFIED",

    /**
     * value: "DOORS_OPEN"
     * @const
     */
    "DOORS_OPEN": "DOORS_OPEN",

    /**
     * value: "doorsOpen"
     * @const
     */
    "doorsOpen": "doorsOpen",

    /**
     * value: "GATES_OPEN"
     * @const
     */
    "GATES_OPEN": "GATES_OPEN",

    /**
     * value: "gatesOpen"
     * @const
     */
    "gatesOpen": "gatesOpen"
};



export default EventDateTime;

