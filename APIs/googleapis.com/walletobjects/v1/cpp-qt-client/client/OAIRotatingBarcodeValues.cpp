/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRotatingBarcodeValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRotatingBarcodeValues::OAIRotatingBarcodeValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRotatingBarcodeValues::OAIRotatingBarcodeValues() {
    this->initializeModel();
}

OAIRotatingBarcodeValues::~OAIRotatingBarcodeValues() {}

void OAIRotatingBarcodeValues::initializeModel() {

    m_period_millis_isSet = false;
    m_period_millis_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIRotatingBarcodeValues::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRotatingBarcodeValues::fromJsonObject(QJsonObject json) {

    m_period_millis_isValid = ::OpenAPI::fromJsonValue(m_period_millis, json[QString("periodMillis")]);
    m_period_millis_isSet = !json[QString("periodMillis")].isNull() && m_period_millis_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("startDateTime")]);
    m_start_date_time_isSet = !json[QString("startDateTime")].isNull() && m_start_date_time_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIRotatingBarcodeValues::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRotatingBarcodeValues::asJsonObject() const {
    QJsonObject obj;
    if (m_period_millis_isSet) {
        obj.insert(QString("periodMillis"), ::OpenAPI::toJsonValue(m_period_millis));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("startDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAIRotatingBarcodeValues::getPeriodMillis() const {
    return m_period_millis;
}
void OAIRotatingBarcodeValues::setPeriodMillis(const QString &period_millis) {
    m_period_millis = period_millis;
    m_period_millis_isSet = true;
}

bool OAIRotatingBarcodeValues::is_period_millis_Set() const{
    return m_period_millis_isSet;
}

bool OAIRotatingBarcodeValues::is_period_millis_Valid() const{
    return m_period_millis_isValid;
}

QString OAIRotatingBarcodeValues::getStartDateTime() const {
    return m_start_date_time;
}
void OAIRotatingBarcodeValues::setStartDateTime(const QString &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAIRotatingBarcodeValues::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAIRotatingBarcodeValues::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

QList<QString> OAIRotatingBarcodeValues::getValues() const {
    return m_values;
}
void OAIRotatingBarcodeValues::setValues(const QList<QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIRotatingBarcodeValues::is_values_Set() const{
    return m_values_isSet;
}

bool OAIRotatingBarcodeValues::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIRotatingBarcodeValues::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_period_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRotatingBarcodeValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
