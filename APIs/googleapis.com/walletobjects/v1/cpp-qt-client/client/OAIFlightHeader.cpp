/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlightHeader.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlightHeader::OAIFlightHeader(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlightHeader::OAIFlightHeader() {
    this->initializeModel();
}

OAIFlightHeader::~OAIFlightHeader() {}

void OAIFlightHeader::initializeModel() {

    m_carrier_isSet = false;
    m_carrier_isValid = false;

    m_flight_number_isSet = false;
    m_flight_number_isValid = false;

    m_flight_number_display_override_isSet = false;
    m_flight_number_display_override_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_operating_carrier_isSet = false;
    m_operating_carrier_isValid = false;

    m_operating_flight_number_isSet = false;
    m_operating_flight_number_isValid = false;
}

void OAIFlightHeader::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlightHeader::fromJsonObject(QJsonObject json) {

    m_carrier_isValid = ::OpenAPI::fromJsonValue(m_carrier, json[QString("carrier")]);
    m_carrier_isSet = !json[QString("carrier")].isNull() && m_carrier_isValid;

    m_flight_number_isValid = ::OpenAPI::fromJsonValue(m_flight_number, json[QString("flightNumber")]);
    m_flight_number_isSet = !json[QString("flightNumber")].isNull() && m_flight_number_isValid;

    m_flight_number_display_override_isValid = ::OpenAPI::fromJsonValue(m_flight_number_display_override, json[QString("flightNumberDisplayOverride")]);
    m_flight_number_display_override_isSet = !json[QString("flightNumberDisplayOverride")].isNull() && m_flight_number_display_override_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_operating_carrier_isValid = ::OpenAPI::fromJsonValue(m_operating_carrier, json[QString("operatingCarrier")]);
    m_operating_carrier_isSet = !json[QString("operatingCarrier")].isNull() && m_operating_carrier_isValid;

    m_operating_flight_number_isValid = ::OpenAPI::fromJsonValue(m_operating_flight_number, json[QString("operatingFlightNumber")]);
    m_operating_flight_number_isSet = !json[QString("operatingFlightNumber")].isNull() && m_operating_flight_number_isValid;
}

QString OAIFlightHeader::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlightHeader::asJsonObject() const {
    QJsonObject obj;
    if (m_carrier.isSet()) {
        obj.insert(QString("carrier"), ::OpenAPI::toJsonValue(m_carrier));
    }
    if (m_flight_number_isSet) {
        obj.insert(QString("flightNumber"), ::OpenAPI::toJsonValue(m_flight_number));
    }
    if (m_flight_number_display_override_isSet) {
        obj.insert(QString("flightNumberDisplayOverride"), ::OpenAPI::toJsonValue(m_flight_number_display_override));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_operating_carrier.isSet()) {
        obj.insert(QString("operatingCarrier"), ::OpenAPI::toJsonValue(m_operating_carrier));
    }
    if (m_operating_flight_number_isSet) {
        obj.insert(QString("operatingFlightNumber"), ::OpenAPI::toJsonValue(m_operating_flight_number));
    }
    return obj;
}

OAIFlightCarrier OAIFlightHeader::getCarrier() const {
    return m_carrier;
}
void OAIFlightHeader::setCarrier(const OAIFlightCarrier &carrier) {
    m_carrier = carrier;
    m_carrier_isSet = true;
}

bool OAIFlightHeader::is_carrier_Set() const{
    return m_carrier_isSet;
}

bool OAIFlightHeader::is_carrier_Valid() const{
    return m_carrier_isValid;
}

QString OAIFlightHeader::getFlightNumber() const {
    return m_flight_number;
}
void OAIFlightHeader::setFlightNumber(const QString &flight_number) {
    m_flight_number = flight_number;
    m_flight_number_isSet = true;
}

bool OAIFlightHeader::is_flight_number_Set() const{
    return m_flight_number_isSet;
}

bool OAIFlightHeader::is_flight_number_Valid() const{
    return m_flight_number_isValid;
}

QString OAIFlightHeader::getFlightNumberDisplayOverride() const {
    return m_flight_number_display_override;
}
void OAIFlightHeader::setFlightNumberDisplayOverride(const QString &flight_number_display_override) {
    m_flight_number_display_override = flight_number_display_override;
    m_flight_number_display_override_isSet = true;
}

bool OAIFlightHeader::is_flight_number_display_override_Set() const{
    return m_flight_number_display_override_isSet;
}

bool OAIFlightHeader::is_flight_number_display_override_Valid() const{
    return m_flight_number_display_override_isValid;
}

QString OAIFlightHeader::getKind() const {
    return m_kind;
}
void OAIFlightHeader::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIFlightHeader::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIFlightHeader::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIFlightCarrier OAIFlightHeader::getOperatingCarrier() const {
    return m_operating_carrier;
}
void OAIFlightHeader::setOperatingCarrier(const OAIFlightCarrier &operating_carrier) {
    m_operating_carrier = operating_carrier;
    m_operating_carrier_isSet = true;
}

bool OAIFlightHeader::is_operating_carrier_Set() const{
    return m_operating_carrier_isSet;
}

bool OAIFlightHeader::is_operating_carrier_Valid() const{
    return m_operating_carrier_isValid;
}

QString OAIFlightHeader::getOperatingFlightNumber() const {
    return m_operating_flight_number;
}
void OAIFlightHeader::setOperatingFlightNumber(const QString &operating_flight_number) {
    m_operating_flight_number = operating_flight_number;
    m_operating_flight_number_isSet = true;
}

bool OAIFlightHeader::is_operating_flight_number_Set() const{
    return m_operating_flight_number_isSet;
}

bool OAIFlightHeader::is_operating_flight_number_Valid() const{
    return m_operating_flight_number_isValid;
}

bool OAIFlightHeader::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_carrier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight_number_display_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_carrier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_flight_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlightHeader::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
