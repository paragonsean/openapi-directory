/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppLinkDataAppLinkInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppLinkDataAppLinkInfo::OAIAppLinkDataAppLinkInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppLinkDataAppLinkInfo::OAIAppLinkDataAppLinkInfo() {
    this->initializeModel();
}

OAIAppLinkDataAppLinkInfo::~OAIAppLinkDataAppLinkInfo() {}

void OAIAppLinkDataAppLinkInfo::initializeModel() {

    m_app_logo_image_isSet = false;
    m_app_logo_image_isValid = false;

    m_app_target_isSet = false;
    m_app_target_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIAppLinkDataAppLinkInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppLinkDataAppLinkInfo::fromJsonObject(QJsonObject json) {

    m_app_logo_image_isValid = ::OpenAPI::fromJsonValue(m_app_logo_image, json[QString("appLogoImage")]);
    m_app_logo_image_isSet = !json[QString("appLogoImage")].isNull() && m_app_logo_image_isValid;

    m_app_target_isValid = ::OpenAPI::fromJsonValue(m_app_target, json[QString("appTarget")]);
    m_app_target_isSet = !json[QString("appTarget")].isNull() && m_app_target_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIAppLinkDataAppLinkInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppLinkDataAppLinkInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_app_logo_image.isSet()) {
        obj.insert(QString("appLogoImage"), ::OpenAPI::toJsonValue(m_app_logo_image));
    }
    if (m_app_target.isSet()) {
        obj.insert(QString("appTarget"), ::OpenAPI::toJsonValue(m_app_target));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_title.isSet()) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

OAIImage OAIAppLinkDataAppLinkInfo::getAppLogoImage() const {
    return m_app_logo_image;
}
void OAIAppLinkDataAppLinkInfo::setAppLogoImage(const OAIImage &app_logo_image) {
    m_app_logo_image = app_logo_image;
    m_app_logo_image_isSet = true;
}

bool OAIAppLinkDataAppLinkInfo::is_app_logo_image_Set() const{
    return m_app_logo_image_isSet;
}

bool OAIAppLinkDataAppLinkInfo::is_app_logo_image_Valid() const{
    return m_app_logo_image_isValid;
}

OAIAppLinkDataAppLinkInfoAppTarget OAIAppLinkDataAppLinkInfo::getAppTarget() const {
    return m_app_target;
}
void OAIAppLinkDataAppLinkInfo::setAppTarget(const OAIAppLinkDataAppLinkInfoAppTarget &app_target) {
    m_app_target = app_target;
    m_app_target_isSet = true;
}

bool OAIAppLinkDataAppLinkInfo::is_app_target_Set() const{
    return m_app_target_isSet;
}

bool OAIAppLinkDataAppLinkInfo::is_app_target_Valid() const{
    return m_app_target_isValid;
}

OAILocalizedString OAIAppLinkDataAppLinkInfo::getDescription() const {
    return m_description;
}
void OAIAppLinkDataAppLinkInfo::setDescription(const OAILocalizedString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAppLinkDataAppLinkInfo::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAppLinkDataAppLinkInfo::is_description_Valid() const{
    return m_description_isValid;
}

OAILocalizedString OAIAppLinkDataAppLinkInfo::getTitle() const {
    return m_title;
}
void OAIAppLinkDataAppLinkInfo::setTitle(const OAILocalizedString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAppLinkDataAppLinkInfo::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAppLinkDataAppLinkInfo::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIAppLinkDataAppLinkInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_logo_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppLinkDataAppLinkInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
