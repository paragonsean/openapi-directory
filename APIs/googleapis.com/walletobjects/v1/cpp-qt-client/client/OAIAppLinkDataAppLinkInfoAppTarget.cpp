/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppLinkDataAppLinkInfoAppTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppLinkDataAppLinkInfoAppTarget::OAIAppLinkDataAppLinkInfoAppTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppLinkDataAppLinkInfoAppTarget::OAIAppLinkDataAppLinkInfoAppTarget() {
    this->initializeModel();
}

OAIAppLinkDataAppLinkInfoAppTarget::~OAIAppLinkDataAppLinkInfoAppTarget() {}

void OAIAppLinkDataAppLinkInfoAppTarget::initializeModel() {

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_target_uri_isSet = false;
    m_target_uri_isValid = false;
}

void OAIAppLinkDataAppLinkInfoAppTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppLinkDataAppLinkInfoAppTarget::fromJsonObject(QJsonObject json) {

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("packageName")]);
    m_package_name_isSet = !json[QString("packageName")].isNull() && m_package_name_isValid;

    m_target_uri_isValid = ::OpenAPI::fromJsonValue(m_target_uri, json[QString("targetUri")]);
    m_target_uri_isSet = !json[QString("targetUri")].isNull() && m_target_uri_isValid;
}

QString OAIAppLinkDataAppLinkInfoAppTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppLinkDataAppLinkInfoAppTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_package_name_isSet) {
        obj.insert(QString("packageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_target_uri.isSet()) {
        obj.insert(QString("targetUri"), ::OpenAPI::toJsonValue(m_target_uri));
    }
    return obj;
}

QString OAIAppLinkDataAppLinkInfoAppTarget::getPackageName() const {
    return m_package_name;
}
void OAIAppLinkDataAppLinkInfoAppTarget::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAIAppLinkDataAppLinkInfoAppTarget::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAIAppLinkDataAppLinkInfoAppTarget::is_package_name_Valid() const{
    return m_package_name_isValid;
}

OAIUri OAIAppLinkDataAppLinkInfoAppTarget::getTargetUri() const {
    return m_target_uri;
}
void OAIAppLinkDataAppLinkInfoAppTarget::setTargetUri(const OAIUri &target_uri) {
    m_target_uri = target_uri;
    m_target_uri_isSet = true;
}

bool OAIAppLinkDataAppLinkInfoAppTarget::is_target_uri_Set() const{
    return m_target_uri_isSet;
}

bool OAIAppLinkDataAppLinkInfoAppTarget::is_target_uri_Valid() const{
    return m_target_uri_isValid;
}

bool OAIAppLinkDataAppLinkInfoAppTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_uri.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppLinkDataAppLinkInfoAppTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
