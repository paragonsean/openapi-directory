/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateItem::OAITemplateItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateItem::OAITemplateItem() {
    this->initializeModel();
}

OAITemplateItem::~OAITemplateItem() {}

void OAITemplateItem::initializeModel() {

    m_first_value_isSet = false;
    m_first_value_isValid = false;

    m_predefined_item_isSet = false;
    m_predefined_item_isValid = false;

    m_second_value_isSet = false;
    m_second_value_isValid = false;
}

void OAITemplateItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateItem::fromJsonObject(QJsonObject json) {

    m_first_value_isValid = ::OpenAPI::fromJsonValue(m_first_value, json[QString("firstValue")]);
    m_first_value_isSet = !json[QString("firstValue")].isNull() && m_first_value_isValid;

    m_predefined_item_isValid = ::OpenAPI::fromJsonValue(m_predefined_item, json[QString("predefinedItem")]);
    m_predefined_item_isSet = !json[QString("predefinedItem")].isNull() && m_predefined_item_isValid;

    m_second_value_isValid = ::OpenAPI::fromJsonValue(m_second_value, json[QString("secondValue")]);
    m_second_value_isSet = !json[QString("secondValue")].isNull() && m_second_value_isValid;
}

QString OAITemplateItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateItem::asJsonObject() const {
    QJsonObject obj;
    if (m_first_value.isSet()) {
        obj.insert(QString("firstValue"), ::OpenAPI::toJsonValue(m_first_value));
    }
    if (m_predefined_item_isSet) {
        obj.insert(QString("predefinedItem"), ::OpenAPI::toJsonValue(m_predefined_item));
    }
    if (m_second_value.isSet()) {
        obj.insert(QString("secondValue"), ::OpenAPI::toJsonValue(m_second_value));
    }
    return obj;
}

OAIFieldSelector OAITemplateItem::getFirstValue() const {
    return m_first_value;
}
void OAITemplateItem::setFirstValue(const OAIFieldSelector &first_value) {
    m_first_value = first_value;
    m_first_value_isSet = true;
}

bool OAITemplateItem::is_first_value_Set() const{
    return m_first_value_isSet;
}

bool OAITemplateItem::is_first_value_Valid() const{
    return m_first_value_isValid;
}

QString OAITemplateItem::getPredefinedItem() const {
    return m_predefined_item;
}
void OAITemplateItem::setPredefinedItem(const QString &predefined_item) {
    m_predefined_item = predefined_item;
    m_predefined_item_isSet = true;
}

bool OAITemplateItem::is_predefined_item_Set() const{
    return m_predefined_item_isSet;
}

bool OAITemplateItem::is_predefined_item_Valid() const{
    return m_predefined_item_isValid;
}

OAIFieldSelector OAITemplateItem::getSecondValue() const {
    return m_second_value;
}
void OAITemplateItem::setSecondValue(const OAIFieldSelector &second_value) {
    m_second_value = second_value;
    m_second_value_isSet = true;
}

bool OAITemplateItem::is_second_value_Set() const{
    return m_second_value_isSet;
}

bool OAITemplateItem::is_second_value_Valid() const{
    return m_second_value_isValid;
}

bool OAITemplateItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_predefined_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
