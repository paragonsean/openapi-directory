/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventDateTime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventDateTime::OAIEventDateTime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventDateTime::OAIEventDateTime() {
    this->initializeModel();
}

OAIEventDateTime::~OAIEventDateTime() {}

void OAIEventDateTime::initializeModel() {

    m_custom_doors_open_label_isSet = false;
    m_custom_doors_open_label_isValid = false;

    m_doors_open_isSet = false;
    m_doors_open_isValid = false;

    m_doors_open_label_isSet = false;
    m_doors_open_label_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAIEventDateTime::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventDateTime::fromJsonObject(QJsonObject json) {

    m_custom_doors_open_label_isValid = ::OpenAPI::fromJsonValue(m_custom_doors_open_label, json[QString("customDoorsOpenLabel")]);
    m_custom_doors_open_label_isSet = !json[QString("customDoorsOpenLabel")].isNull() && m_custom_doors_open_label_isValid;

    m_doors_open_isValid = ::OpenAPI::fromJsonValue(m_doors_open, json[QString("doorsOpen")]);
    m_doors_open_isSet = !json[QString("doorsOpen")].isNull() && m_doors_open_isValid;

    m_doors_open_label_isValid = ::OpenAPI::fromJsonValue(m_doors_open_label, json[QString("doorsOpenLabel")]);
    m_doors_open_label_isSet = !json[QString("doorsOpenLabel")].isNull() && m_doors_open_label_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;
}

QString OAIEventDateTime::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventDateTime::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_doors_open_label.isSet()) {
        obj.insert(QString("customDoorsOpenLabel"), ::OpenAPI::toJsonValue(m_custom_doors_open_label));
    }
    if (m_doors_open_isSet) {
        obj.insert(QString("doorsOpen"), ::OpenAPI::toJsonValue(m_doors_open));
    }
    if (m_doors_open_label_isSet) {
        obj.insert(QString("doorsOpenLabel"), ::OpenAPI::toJsonValue(m_doors_open_label));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

OAILocalizedString OAIEventDateTime::getCustomDoorsOpenLabel() const {
    return m_custom_doors_open_label;
}
void OAIEventDateTime::setCustomDoorsOpenLabel(const OAILocalizedString &custom_doors_open_label) {
    m_custom_doors_open_label = custom_doors_open_label;
    m_custom_doors_open_label_isSet = true;
}

bool OAIEventDateTime::is_custom_doors_open_label_Set() const{
    return m_custom_doors_open_label_isSet;
}

bool OAIEventDateTime::is_custom_doors_open_label_Valid() const{
    return m_custom_doors_open_label_isValid;
}

QString OAIEventDateTime::getDoorsOpen() const {
    return m_doors_open;
}
void OAIEventDateTime::setDoorsOpen(const QString &doors_open) {
    m_doors_open = doors_open;
    m_doors_open_isSet = true;
}

bool OAIEventDateTime::is_doors_open_Set() const{
    return m_doors_open_isSet;
}

bool OAIEventDateTime::is_doors_open_Valid() const{
    return m_doors_open_isValid;
}

QString OAIEventDateTime::getDoorsOpenLabel() const {
    return m_doors_open_label;
}
void OAIEventDateTime::setDoorsOpenLabel(const QString &doors_open_label) {
    m_doors_open_label = doors_open_label;
    m_doors_open_label_isSet = true;
}

bool OAIEventDateTime::is_doors_open_label_Set() const{
    return m_doors_open_label_isSet;
}

bool OAIEventDateTime::is_doors_open_label_Valid() const{
    return m_doors_open_label_isValid;
}

QString OAIEventDateTime::getEnd() const {
    return m_end;
}
void OAIEventDateTime::setEnd(const QString &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIEventDateTime::is_end_Set() const{
    return m_end_isSet;
}

bool OAIEventDateTime::is_end_Valid() const{
    return m_end_isValid;
}

QString OAIEventDateTime::getKind() const {
    return m_kind;
}
void OAIEventDateTime::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIEventDateTime::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIEventDateTime::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIEventDateTime::getStart() const {
    return m_start;
}
void OAIEventDateTime::setStart(const QString &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIEventDateTime::is_start_Set() const{
    return m_start_isSet;
}

bool OAIEventDateTime::is_start_Valid() const{
    return m_start_isValid;
}

bool OAIEventDateTime::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_doors_open_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_doors_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doors_open_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventDateTime::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
