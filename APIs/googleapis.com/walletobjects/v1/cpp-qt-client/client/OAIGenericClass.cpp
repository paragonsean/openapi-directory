/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenericClass.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenericClass::OAIGenericClass(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenericClass::OAIGenericClass() {
    this->initializeModel();
}

OAIGenericClass::~OAIGenericClass() {}

void OAIGenericClass::initializeModel() {

    m_callback_options_isSet = false;
    m_callback_options_isValid = false;

    m_class_template_info_isSet = false;
    m_class_template_info_isValid = false;

    m_enable_smart_tap_isSet = false;
    m_enable_smart_tap_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_modules_data_isSet = false;
    m_image_modules_data_isValid = false;

    m_links_module_data_isSet = false;
    m_links_module_data_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_multiple_devices_and_holders_allowed_status_isSet = false;
    m_multiple_devices_and_holders_allowed_status_isValid = false;

    m_redemption_issuers_isSet = false;
    m_redemption_issuers_isValid = false;

    m_security_animation_isSet = false;
    m_security_animation_isValid = false;

    m_text_modules_data_isSet = false;
    m_text_modules_data_isValid = false;

    m_view_unlock_requirement_isSet = false;
    m_view_unlock_requirement_isValid = false;
}

void OAIGenericClass::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenericClass::fromJsonObject(QJsonObject json) {

    m_callback_options_isValid = ::OpenAPI::fromJsonValue(m_callback_options, json[QString("callbackOptions")]);
    m_callback_options_isSet = !json[QString("callbackOptions")].isNull() && m_callback_options_isValid;

    m_class_template_info_isValid = ::OpenAPI::fromJsonValue(m_class_template_info, json[QString("classTemplateInfo")]);
    m_class_template_info_isSet = !json[QString("classTemplateInfo")].isNull() && m_class_template_info_isValid;

    m_enable_smart_tap_isValid = ::OpenAPI::fromJsonValue(m_enable_smart_tap, json[QString("enableSmartTap")]);
    m_enable_smart_tap_isSet = !json[QString("enableSmartTap")].isNull() && m_enable_smart_tap_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_modules_data_isValid = ::OpenAPI::fromJsonValue(m_image_modules_data, json[QString("imageModulesData")]);
    m_image_modules_data_isSet = !json[QString("imageModulesData")].isNull() && m_image_modules_data_isValid;

    m_links_module_data_isValid = ::OpenAPI::fromJsonValue(m_links_module_data, json[QString("linksModuleData")]);
    m_links_module_data_isSet = !json[QString("linksModuleData")].isNull() && m_links_module_data_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_multiple_devices_and_holders_allowed_status_isValid = ::OpenAPI::fromJsonValue(m_multiple_devices_and_holders_allowed_status, json[QString("multipleDevicesAndHoldersAllowedStatus")]);
    m_multiple_devices_and_holders_allowed_status_isSet = !json[QString("multipleDevicesAndHoldersAllowedStatus")].isNull() && m_multiple_devices_and_holders_allowed_status_isValid;

    m_redemption_issuers_isValid = ::OpenAPI::fromJsonValue(m_redemption_issuers, json[QString("redemptionIssuers")]);
    m_redemption_issuers_isSet = !json[QString("redemptionIssuers")].isNull() && m_redemption_issuers_isValid;

    m_security_animation_isValid = ::OpenAPI::fromJsonValue(m_security_animation, json[QString("securityAnimation")]);
    m_security_animation_isSet = !json[QString("securityAnimation")].isNull() && m_security_animation_isValid;

    m_text_modules_data_isValid = ::OpenAPI::fromJsonValue(m_text_modules_data, json[QString("textModulesData")]);
    m_text_modules_data_isSet = !json[QString("textModulesData")].isNull() && m_text_modules_data_isValid;

    m_view_unlock_requirement_isValid = ::OpenAPI::fromJsonValue(m_view_unlock_requirement, json[QString("viewUnlockRequirement")]);
    m_view_unlock_requirement_isSet = !json[QString("viewUnlockRequirement")].isNull() && m_view_unlock_requirement_isValid;
}

QString OAIGenericClass::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenericClass::asJsonObject() const {
    QJsonObject obj;
    if (m_callback_options.isSet()) {
        obj.insert(QString("callbackOptions"), ::OpenAPI::toJsonValue(m_callback_options));
    }
    if (m_class_template_info.isSet()) {
        obj.insert(QString("classTemplateInfo"), ::OpenAPI::toJsonValue(m_class_template_info));
    }
    if (m_enable_smart_tap_isSet) {
        obj.insert(QString("enableSmartTap"), ::OpenAPI::toJsonValue(m_enable_smart_tap));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_modules_data.size() > 0) {
        obj.insert(QString("imageModulesData"), ::OpenAPI::toJsonValue(m_image_modules_data));
    }
    if (m_links_module_data.isSet()) {
        obj.insert(QString("linksModuleData"), ::OpenAPI::toJsonValue(m_links_module_data));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_multiple_devices_and_holders_allowed_status_isSet) {
        obj.insert(QString("multipleDevicesAndHoldersAllowedStatus"), ::OpenAPI::toJsonValue(m_multiple_devices_and_holders_allowed_status));
    }
    if (m_redemption_issuers.size() > 0) {
        obj.insert(QString("redemptionIssuers"), ::OpenAPI::toJsonValue(m_redemption_issuers));
    }
    if (m_security_animation.isSet()) {
        obj.insert(QString("securityAnimation"), ::OpenAPI::toJsonValue(m_security_animation));
    }
    if (m_text_modules_data.size() > 0) {
        obj.insert(QString("textModulesData"), ::OpenAPI::toJsonValue(m_text_modules_data));
    }
    if (m_view_unlock_requirement_isSet) {
        obj.insert(QString("viewUnlockRequirement"), ::OpenAPI::toJsonValue(m_view_unlock_requirement));
    }
    return obj;
}

OAICallbackOptions OAIGenericClass::getCallbackOptions() const {
    return m_callback_options;
}
void OAIGenericClass::setCallbackOptions(const OAICallbackOptions &callback_options) {
    m_callback_options = callback_options;
    m_callback_options_isSet = true;
}

bool OAIGenericClass::is_callback_options_Set() const{
    return m_callback_options_isSet;
}

bool OAIGenericClass::is_callback_options_Valid() const{
    return m_callback_options_isValid;
}

OAIClassTemplateInfo OAIGenericClass::getClassTemplateInfo() const {
    return m_class_template_info;
}
void OAIGenericClass::setClassTemplateInfo(const OAIClassTemplateInfo &class_template_info) {
    m_class_template_info = class_template_info;
    m_class_template_info_isSet = true;
}

bool OAIGenericClass::is_class_template_info_Set() const{
    return m_class_template_info_isSet;
}

bool OAIGenericClass::is_class_template_info_Valid() const{
    return m_class_template_info_isValid;
}

bool OAIGenericClass::isEnableSmartTap() const {
    return m_enable_smart_tap;
}
void OAIGenericClass::setEnableSmartTap(const bool &enable_smart_tap) {
    m_enable_smart_tap = enable_smart_tap;
    m_enable_smart_tap_isSet = true;
}

bool OAIGenericClass::is_enable_smart_tap_Set() const{
    return m_enable_smart_tap_isSet;
}

bool OAIGenericClass::is_enable_smart_tap_Valid() const{
    return m_enable_smart_tap_isValid;
}

QString OAIGenericClass::getId() const {
    return m_id;
}
void OAIGenericClass::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGenericClass::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGenericClass::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIImageModuleData> OAIGenericClass::getImageModulesData() const {
    return m_image_modules_data;
}
void OAIGenericClass::setImageModulesData(const QList<OAIImageModuleData> &image_modules_data) {
    m_image_modules_data = image_modules_data;
    m_image_modules_data_isSet = true;
}

bool OAIGenericClass::is_image_modules_data_Set() const{
    return m_image_modules_data_isSet;
}

bool OAIGenericClass::is_image_modules_data_Valid() const{
    return m_image_modules_data_isValid;
}

OAILinksModuleData OAIGenericClass::getLinksModuleData() const {
    return m_links_module_data;
}
void OAIGenericClass::setLinksModuleData(const OAILinksModuleData &links_module_data) {
    m_links_module_data = links_module_data;
    m_links_module_data_isSet = true;
}

bool OAIGenericClass::is_links_module_data_Set() const{
    return m_links_module_data_isSet;
}

bool OAIGenericClass::is_links_module_data_Valid() const{
    return m_links_module_data_isValid;
}

QList<OAIMessage> OAIGenericClass::getMessages() const {
    return m_messages;
}
void OAIGenericClass::setMessages(const QList<OAIMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIGenericClass::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIGenericClass::is_messages_Valid() const{
    return m_messages_isValid;
}

QString OAIGenericClass::getMultipleDevicesAndHoldersAllowedStatus() const {
    return m_multiple_devices_and_holders_allowed_status;
}
void OAIGenericClass::setMultipleDevicesAndHoldersAllowedStatus(const QString &multiple_devices_and_holders_allowed_status) {
    m_multiple_devices_and_holders_allowed_status = multiple_devices_and_holders_allowed_status;
    m_multiple_devices_and_holders_allowed_status_isSet = true;
}

bool OAIGenericClass::is_multiple_devices_and_holders_allowed_status_Set() const{
    return m_multiple_devices_and_holders_allowed_status_isSet;
}

bool OAIGenericClass::is_multiple_devices_and_holders_allowed_status_Valid() const{
    return m_multiple_devices_and_holders_allowed_status_isValid;
}

QList<QString> OAIGenericClass::getRedemptionIssuers() const {
    return m_redemption_issuers;
}
void OAIGenericClass::setRedemptionIssuers(const QList<QString> &redemption_issuers) {
    m_redemption_issuers = redemption_issuers;
    m_redemption_issuers_isSet = true;
}

bool OAIGenericClass::is_redemption_issuers_Set() const{
    return m_redemption_issuers_isSet;
}

bool OAIGenericClass::is_redemption_issuers_Valid() const{
    return m_redemption_issuers_isValid;
}

OAISecurityAnimation OAIGenericClass::getSecurityAnimation() const {
    return m_security_animation;
}
void OAIGenericClass::setSecurityAnimation(const OAISecurityAnimation &security_animation) {
    m_security_animation = security_animation;
    m_security_animation_isSet = true;
}

bool OAIGenericClass::is_security_animation_Set() const{
    return m_security_animation_isSet;
}

bool OAIGenericClass::is_security_animation_Valid() const{
    return m_security_animation_isValid;
}

QList<OAITextModuleData> OAIGenericClass::getTextModulesData() const {
    return m_text_modules_data;
}
void OAIGenericClass::setTextModulesData(const QList<OAITextModuleData> &text_modules_data) {
    m_text_modules_data = text_modules_data;
    m_text_modules_data_isSet = true;
}

bool OAIGenericClass::is_text_modules_data_Set() const{
    return m_text_modules_data_isSet;
}

bool OAIGenericClass::is_text_modules_data_Valid() const{
    return m_text_modules_data_isValid;
}

QString OAIGenericClass::getViewUnlockRequirement() const {
    return m_view_unlock_requirement;
}
void OAIGenericClass::setViewUnlockRequirement(const QString &view_unlock_requirement) {
    m_view_unlock_requirement = view_unlock_requirement;
    m_view_unlock_requirement_isSet = true;
}

bool OAIGenericClass::is_view_unlock_requirement_Set() const{
    return m_view_unlock_requirement_isSet;
}

bool OAIGenericClass::is_view_unlock_requirement_Valid() const{
    return m_view_unlock_requirement_isValid;
}

bool OAIGenericClass::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_callback_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_template_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_smart_tap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_modules_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_module_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_devices_and_holders_allowed_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_issuers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_animation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_modules_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_unlock_requirement_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenericClass::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
