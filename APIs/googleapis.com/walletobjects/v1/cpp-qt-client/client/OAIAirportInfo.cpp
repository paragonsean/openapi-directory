/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAirportInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAirportInfo::OAIAirportInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAirportInfo::OAIAirportInfo() {
    this->initializeModel();
}

OAIAirportInfo::~OAIAirportInfo() {}

void OAIAirportInfo::initializeModel() {

    m_airport_iata_code_isSet = false;
    m_airport_iata_code_isValid = false;

    m_airport_name_override_isSet = false;
    m_airport_name_override_isValid = false;

    m_gate_isSet = false;
    m_gate_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_terminal_isSet = false;
    m_terminal_isValid = false;
}

void OAIAirportInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAirportInfo::fromJsonObject(QJsonObject json) {

    m_airport_iata_code_isValid = ::OpenAPI::fromJsonValue(m_airport_iata_code, json[QString("airportIataCode")]);
    m_airport_iata_code_isSet = !json[QString("airportIataCode")].isNull() && m_airport_iata_code_isValid;

    m_airport_name_override_isValid = ::OpenAPI::fromJsonValue(m_airport_name_override, json[QString("airportNameOverride")]);
    m_airport_name_override_isSet = !json[QString("airportNameOverride")].isNull() && m_airport_name_override_isValid;

    m_gate_isValid = ::OpenAPI::fromJsonValue(m_gate, json[QString("gate")]);
    m_gate_isSet = !json[QString("gate")].isNull() && m_gate_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_terminal_isValid = ::OpenAPI::fromJsonValue(m_terminal, json[QString("terminal")]);
    m_terminal_isSet = !json[QString("terminal")].isNull() && m_terminal_isValid;
}

QString OAIAirportInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAirportInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_airport_iata_code_isSet) {
        obj.insert(QString("airportIataCode"), ::OpenAPI::toJsonValue(m_airport_iata_code));
    }
    if (m_airport_name_override.isSet()) {
        obj.insert(QString("airportNameOverride"), ::OpenAPI::toJsonValue(m_airport_name_override));
    }
    if (m_gate_isSet) {
        obj.insert(QString("gate"), ::OpenAPI::toJsonValue(m_gate));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_terminal_isSet) {
        obj.insert(QString("terminal"), ::OpenAPI::toJsonValue(m_terminal));
    }
    return obj;
}

QString OAIAirportInfo::getAirportIataCode() const {
    return m_airport_iata_code;
}
void OAIAirportInfo::setAirportIataCode(const QString &airport_iata_code) {
    m_airport_iata_code = airport_iata_code;
    m_airport_iata_code_isSet = true;
}

bool OAIAirportInfo::is_airport_iata_code_Set() const{
    return m_airport_iata_code_isSet;
}

bool OAIAirportInfo::is_airport_iata_code_Valid() const{
    return m_airport_iata_code_isValid;
}

OAILocalizedString OAIAirportInfo::getAirportNameOverride() const {
    return m_airport_name_override;
}
void OAIAirportInfo::setAirportNameOverride(const OAILocalizedString &airport_name_override) {
    m_airport_name_override = airport_name_override;
    m_airport_name_override_isSet = true;
}

bool OAIAirportInfo::is_airport_name_override_Set() const{
    return m_airport_name_override_isSet;
}

bool OAIAirportInfo::is_airport_name_override_Valid() const{
    return m_airport_name_override_isValid;
}

QString OAIAirportInfo::getGate() const {
    return m_gate;
}
void OAIAirportInfo::setGate(const QString &gate) {
    m_gate = gate;
    m_gate_isSet = true;
}

bool OAIAirportInfo::is_gate_Set() const{
    return m_gate_isSet;
}

bool OAIAirportInfo::is_gate_Valid() const{
    return m_gate_isValid;
}

QString OAIAirportInfo::getKind() const {
    return m_kind;
}
void OAIAirportInfo::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAirportInfo::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAirportInfo::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIAirportInfo::getTerminal() const {
    return m_terminal;
}
void OAIAirportInfo::setTerminal(const QString &terminal) {
    m_terminal = terminal;
    m_terminal_isSet = true;
}

bool OAIAirportInfo::is_terminal_Set() const{
    return m_terminal_isSet;
}

bool OAIAirportInfo::is_terminal_Valid() const{
    return m_terminal_isValid;
}

bool OAIAirportInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_airport_iata_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airport_name_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminal_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAirportInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
