/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotifications.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotifications::OAINotifications(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotifications::OAINotifications() {
    this->initializeModel();
}

OAINotifications::~OAINotifications() {}

void OAINotifications::initializeModel() {

    m_expiry_notification_isSet = false;
    m_expiry_notification_isValid = false;

    m_upcoming_notification_isSet = false;
    m_upcoming_notification_isValid = false;
}

void OAINotifications::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotifications::fromJsonObject(QJsonObject json) {

    m_expiry_notification_isValid = ::OpenAPI::fromJsonValue(m_expiry_notification, json[QString("expiryNotification")]);
    m_expiry_notification_isSet = !json[QString("expiryNotification")].isNull() && m_expiry_notification_isValid;

    m_upcoming_notification_isValid = ::OpenAPI::fromJsonValue(m_upcoming_notification, json[QString("upcomingNotification")]);
    m_upcoming_notification_isSet = !json[QString("upcomingNotification")].isNull() && m_upcoming_notification_isValid;
}

QString OAINotifications::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotifications::asJsonObject() const {
    QJsonObject obj;
    if (m_expiry_notification.isSet()) {
        obj.insert(QString("expiryNotification"), ::OpenAPI::toJsonValue(m_expiry_notification));
    }
    if (m_upcoming_notification.isSet()) {
        obj.insert(QString("upcomingNotification"), ::OpenAPI::toJsonValue(m_upcoming_notification));
    }
    return obj;
}

OAIExpiryNotification OAINotifications::getExpiryNotification() const {
    return m_expiry_notification;
}
void OAINotifications::setExpiryNotification(const OAIExpiryNotification &expiry_notification) {
    m_expiry_notification = expiry_notification;
    m_expiry_notification_isSet = true;
}

bool OAINotifications::is_expiry_notification_Set() const{
    return m_expiry_notification_isSet;
}

bool OAINotifications::is_expiry_notification_Valid() const{
    return m_expiry_notification_isValid;
}

OAIUpcomingNotification OAINotifications::getUpcomingNotification() const {
    return m_upcoming_notification;
}
void OAINotifications::setUpcomingNotification(const OAIUpcomingNotification &upcoming_notification) {
    m_upcoming_notification = upcoming_notification;
    m_upcoming_notification_isSet = true;
}

bool OAINotifications::is_upcoming_notification_Set() const{
    return m_upcoming_notification_isSet;
}

bool OAINotifications::is_upcoming_notification_Valid() const{
    return m_upcoming_notification_isValid;
}

bool OAINotifications::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiry_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upcoming_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotifications::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
