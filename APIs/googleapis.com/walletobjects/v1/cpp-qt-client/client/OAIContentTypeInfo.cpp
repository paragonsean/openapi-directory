/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentTypeInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentTypeInfo::OAIContentTypeInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentTypeInfo::OAIContentTypeInfo() {
    this->initializeModel();
}

OAIContentTypeInfo::~OAIContentTypeInfo() {}

void OAIContentTypeInfo::initializeModel() {

    m_best_guess_isSet = false;
    m_best_guess_isValid = false;

    m_from_bytes_isSet = false;
    m_from_bytes_isValid = false;

    m_from_file_name_isSet = false;
    m_from_file_name_isValid = false;

    m_from_header_isSet = false;
    m_from_header_isValid = false;

    m_from_url_path_isSet = false;
    m_from_url_path_isValid = false;
}

void OAIContentTypeInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentTypeInfo::fromJsonObject(QJsonObject json) {

    m_best_guess_isValid = ::OpenAPI::fromJsonValue(m_best_guess, json[QString("bestGuess")]);
    m_best_guess_isSet = !json[QString("bestGuess")].isNull() && m_best_guess_isValid;

    m_from_bytes_isValid = ::OpenAPI::fromJsonValue(m_from_bytes, json[QString("fromBytes")]);
    m_from_bytes_isSet = !json[QString("fromBytes")].isNull() && m_from_bytes_isValid;

    m_from_file_name_isValid = ::OpenAPI::fromJsonValue(m_from_file_name, json[QString("fromFileName")]);
    m_from_file_name_isSet = !json[QString("fromFileName")].isNull() && m_from_file_name_isValid;

    m_from_header_isValid = ::OpenAPI::fromJsonValue(m_from_header, json[QString("fromHeader")]);
    m_from_header_isSet = !json[QString("fromHeader")].isNull() && m_from_header_isValid;

    m_from_url_path_isValid = ::OpenAPI::fromJsonValue(m_from_url_path, json[QString("fromUrlPath")]);
    m_from_url_path_isSet = !json[QString("fromUrlPath")].isNull() && m_from_url_path_isValid;
}

QString OAIContentTypeInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentTypeInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_best_guess_isSet) {
        obj.insert(QString("bestGuess"), ::OpenAPI::toJsonValue(m_best_guess));
    }
    if (m_from_bytes_isSet) {
        obj.insert(QString("fromBytes"), ::OpenAPI::toJsonValue(m_from_bytes));
    }
    if (m_from_file_name_isSet) {
        obj.insert(QString("fromFileName"), ::OpenAPI::toJsonValue(m_from_file_name));
    }
    if (m_from_header_isSet) {
        obj.insert(QString("fromHeader"), ::OpenAPI::toJsonValue(m_from_header));
    }
    if (m_from_url_path_isSet) {
        obj.insert(QString("fromUrlPath"), ::OpenAPI::toJsonValue(m_from_url_path));
    }
    return obj;
}

QString OAIContentTypeInfo::getBestGuess() const {
    return m_best_guess;
}
void OAIContentTypeInfo::setBestGuess(const QString &best_guess) {
    m_best_guess = best_guess;
    m_best_guess_isSet = true;
}

bool OAIContentTypeInfo::is_best_guess_Set() const{
    return m_best_guess_isSet;
}

bool OAIContentTypeInfo::is_best_guess_Valid() const{
    return m_best_guess_isValid;
}

QString OAIContentTypeInfo::getFromBytes() const {
    return m_from_bytes;
}
void OAIContentTypeInfo::setFromBytes(const QString &from_bytes) {
    m_from_bytes = from_bytes;
    m_from_bytes_isSet = true;
}

bool OAIContentTypeInfo::is_from_bytes_Set() const{
    return m_from_bytes_isSet;
}

bool OAIContentTypeInfo::is_from_bytes_Valid() const{
    return m_from_bytes_isValid;
}

QString OAIContentTypeInfo::getFromFileName() const {
    return m_from_file_name;
}
void OAIContentTypeInfo::setFromFileName(const QString &from_file_name) {
    m_from_file_name = from_file_name;
    m_from_file_name_isSet = true;
}

bool OAIContentTypeInfo::is_from_file_name_Set() const{
    return m_from_file_name_isSet;
}

bool OAIContentTypeInfo::is_from_file_name_Valid() const{
    return m_from_file_name_isValid;
}

QString OAIContentTypeInfo::getFromHeader() const {
    return m_from_header;
}
void OAIContentTypeInfo::setFromHeader(const QString &from_header) {
    m_from_header = from_header;
    m_from_header_isSet = true;
}

bool OAIContentTypeInfo::is_from_header_Set() const{
    return m_from_header_isSet;
}

bool OAIContentTypeInfo::is_from_header_Valid() const{
    return m_from_header_isValid;
}

QString OAIContentTypeInfo::getFromUrlPath() const {
    return m_from_url_path;
}
void OAIContentTypeInfo::setFromUrlPath(const QString &from_url_path) {
    m_from_url_path = from_url_path;
    m_from_url_path_isSet = true;
}

bool OAIContentTypeInfo::is_from_url_path_Set() const{
    return m_from_url_path_isSet;
}

bool OAIContentTypeInfo::is_from_url_path_Valid() const{
    return m_from_url_path_isValid;
}

bool OAIContentTypeInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_best_guess_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_url_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentTypeInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
