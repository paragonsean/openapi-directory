/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITicketRestrictions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITicketRestrictions::OAITicketRestrictions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITicketRestrictions::OAITicketRestrictions() {
    this->initializeModel();
}

OAITicketRestrictions::~OAITicketRestrictions() {}

void OAITicketRestrictions::initializeModel() {

    m_other_restrictions_isSet = false;
    m_other_restrictions_isValid = false;

    m_route_restrictions_isSet = false;
    m_route_restrictions_isValid = false;

    m_route_restrictions_details_isSet = false;
    m_route_restrictions_details_isValid = false;

    m_time_restrictions_isSet = false;
    m_time_restrictions_isValid = false;
}

void OAITicketRestrictions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITicketRestrictions::fromJsonObject(QJsonObject json) {

    m_other_restrictions_isValid = ::OpenAPI::fromJsonValue(m_other_restrictions, json[QString("otherRestrictions")]);
    m_other_restrictions_isSet = !json[QString("otherRestrictions")].isNull() && m_other_restrictions_isValid;

    m_route_restrictions_isValid = ::OpenAPI::fromJsonValue(m_route_restrictions, json[QString("routeRestrictions")]);
    m_route_restrictions_isSet = !json[QString("routeRestrictions")].isNull() && m_route_restrictions_isValid;

    m_route_restrictions_details_isValid = ::OpenAPI::fromJsonValue(m_route_restrictions_details, json[QString("routeRestrictionsDetails")]);
    m_route_restrictions_details_isSet = !json[QString("routeRestrictionsDetails")].isNull() && m_route_restrictions_details_isValid;

    m_time_restrictions_isValid = ::OpenAPI::fromJsonValue(m_time_restrictions, json[QString("timeRestrictions")]);
    m_time_restrictions_isSet = !json[QString("timeRestrictions")].isNull() && m_time_restrictions_isValid;
}

QString OAITicketRestrictions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITicketRestrictions::asJsonObject() const {
    QJsonObject obj;
    if (m_other_restrictions.isSet()) {
        obj.insert(QString("otherRestrictions"), ::OpenAPI::toJsonValue(m_other_restrictions));
    }
    if (m_route_restrictions.isSet()) {
        obj.insert(QString("routeRestrictions"), ::OpenAPI::toJsonValue(m_route_restrictions));
    }
    if (m_route_restrictions_details.isSet()) {
        obj.insert(QString("routeRestrictionsDetails"), ::OpenAPI::toJsonValue(m_route_restrictions_details));
    }
    if (m_time_restrictions.isSet()) {
        obj.insert(QString("timeRestrictions"), ::OpenAPI::toJsonValue(m_time_restrictions));
    }
    return obj;
}

OAILocalizedString OAITicketRestrictions::getOtherRestrictions() const {
    return m_other_restrictions;
}
void OAITicketRestrictions::setOtherRestrictions(const OAILocalizedString &other_restrictions) {
    m_other_restrictions = other_restrictions;
    m_other_restrictions_isSet = true;
}

bool OAITicketRestrictions::is_other_restrictions_Set() const{
    return m_other_restrictions_isSet;
}

bool OAITicketRestrictions::is_other_restrictions_Valid() const{
    return m_other_restrictions_isValid;
}

OAILocalizedString OAITicketRestrictions::getRouteRestrictions() const {
    return m_route_restrictions;
}
void OAITicketRestrictions::setRouteRestrictions(const OAILocalizedString &route_restrictions) {
    m_route_restrictions = route_restrictions;
    m_route_restrictions_isSet = true;
}

bool OAITicketRestrictions::is_route_restrictions_Set() const{
    return m_route_restrictions_isSet;
}

bool OAITicketRestrictions::is_route_restrictions_Valid() const{
    return m_route_restrictions_isValid;
}

OAILocalizedString OAITicketRestrictions::getRouteRestrictionsDetails() const {
    return m_route_restrictions_details;
}
void OAITicketRestrictions::setRouteRestrictionsDetails(const OAILocalizedString &route_restrictions_details) {
    m_route_restrictions_details = route_restrictions_details;
    m_route_restrictions_details_isSet = true;
}

bool OAITicketRestrictions::is_route_restrictions_details_Set() const{
    return m_route_restrictions_details_isSet;
}

bool OAITicketRestrictions::is_route_restrictions_details_Valid() const{
    return m_route_restrictions_details_isValid;
}

OAILocalizedString OAITicketRestrictions::getTimeRestrictions() const {
    return m_time_restrictions;
}
void OAITicketRestrictions::setTimeRestrictions(const OAILocalizedString &time_restrictions) {
    m_time_restrictions = time_restrictions;
    m_time_restrictions_isSet = true;
}

bool OAITicketRestrictions::is_time_restrictions_Set() const{
    return m_time_restrictions_isSet;
}

bool OAITicketRestrictions::is_time_restrictions_Valid() const{
    return m_time_restrictions_isValid;
}

bool OAITicketRestrictions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_other_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_restrictions_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITicketRestrictions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
