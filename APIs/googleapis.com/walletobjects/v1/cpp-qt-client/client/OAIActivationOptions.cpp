/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivationOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivationOptions::OAIActivationOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivationOptions::OAIActivationOptions() {
    this->initializeModel();
}

OAIActivationOptions::~OAIActivationOptions() {}

void OAIActivationOptions::initializeModel() {

    m_activation_url_isSet = false;
    m_activation_url_isValid = false;

    m_allow_reactivation_isSet = false;
    m_allow_reactivation_isValid = false;
}

void OAIActivationOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivationOptions::fromJsonObject(QJsonObject json) {

    m_activation_url_isValid = ::OpenAPI::fromJsonValue(m_activation_url, json[QString("activationUrl")]);
    m_activation_url_isSet = !json[QString("activationUrl")].isNull() && m_activation_url_isValid;

    m_allow_reactivation_isValid = ::OpenAPI::fromJsonValue(m_allow_reactivation, json[QString("allowReactivation")]);
    m_allow_reactivation_isSet = !json[QString("allowReactivation")].isNull() && m_allow_reactivation_isValid;
}

QString OAIActivationOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivationOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_activation_url_isSet) {
        obj.insert(QString("activationUrl"), ::OpenAPI::toJsonValue(m_activation_url));
    }
    if (m_allow_reactivation_isSet) {
        obj.insert(QString("allowReactivation"), ::OpenAPI::toJsonValue(m_allow_reactivation));
    }
    return obj;
}

QString OAIActivationOptions::getActivationUrl() const {
    return m_activation_url;
}
void OAIActivationOptions::setActivationUrl(const QString &activation_url) {
    m_activation_url = activation_url;
    m_activation_url_isSet = true;
}

bool OAIActivationOptions::is_activation_url_Set() const{
    return m_activation_url_isSet;
}

bool OAIActivationOptions::is_activation_url_Valid() const{
    return m_activation_url_isValid;
}

bool OAIActivationOptions::isAllowReactivation() const {
    return m_allow_reactivation;
}
void OAIActivationOptions::setAllowReactivation(const bool &allow_reactivation) {
    m_allow_reactivation = allow_reactivation;
    m_allow_reactivation_isSet = true;
}

bool OAIActivationOptions::is_allow_reactivation_Set() const{
    return m_allow_reactivation_isSet;
}

bool OAIActivationOptions::is_allow_reactivation_Valid() const{
    return m_allow_reactivation_isValid;
}

bool OAIActivationOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activation_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_reactivation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivationOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
