/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRotatingBarcode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRotatingBarcode::OAIRotatingBarcode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRotatingBarcode::OAIRotatingBarcode() {
    this->initializeModel();
}

OAIRotatingBarcode::~OAIRotatingBarcode() {}

void OAIRotatingBarcode::initializeModel() {

    m_alternate_text_isSet = false;
    m_alternate_text_isValid = false;

    m_initial_rotating_barcode_values_isSet = false;
    m_initial_rotating_barcode_values_isValid = false;

    m_render_encoding_isSet = false;
    m_render_encoding_isValid = false;

    m_show_code_text_isSet = false;
    m_show_code_text_isValid = false;

    m_totp_details_isSet = false;
    m_totp_details_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_pattern_isSet = false;
    m_value_pattern_isValid = false;
}

void OAIRotatingBarcode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRotatingBarcode::fromJsonObject(QJsonObject json) {

    m_alternate_text_isValid = ::OpenAPI::fromJsonValue(m_alternate_text, json[QString("alternateText")]);
    m_alternate_text_isSet = !json[QString("alternateText")].isNull() && m_alternate_text_isValid;

    m_initial_rotating_barcode_values_isValid = ::OpenAPI::fromJsonValue(m_initial_rotating_barcode_values, json[QString("initialRotatingBarcodeValues")]);
    m_initial_rotating_barcode_values_isSet = !json[QString("initialRotatingBarcodeValues")].isNull() && m_initial_rotating_barcode_values_isValid;

    m_render_encoding_isValid = ::OpenAPI::fromJsonValue(m_render_encoding, json[QString("renderEncoding")]);
    m_render_encoding_isSet = !json[QString("renderEncoding")].isNull() && m_render_encoding_isValid;

    m_show_code_text_isValid = ::OpenAPI::fromJsonValue(m_show_code_text, json[QString("showCodeText")]);
    m_show_code_text_isSet = !json[QString("showCodeText")].isNull() && m_show_code_text_isValid;

    m_totp_details_isValid = ::OpenAPI::fromJsonValue(m_totp_details, json[QString("totpDetails")]);
    m_totp_details_isSet = !json[QString("totpDetails")].isNull() && m_totp_details_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_pattern_isValid = ::OpenAPI::fromJsonValue(m_value_pattern, json[QString("valuePattern")]);
    m_value_pattern_isSet = !json[QString("valuePattern")].isNull() && m_value_pattern_isValid;
}

QString OAIRotatingBarcode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRotatingBarcode::asJsonObject() const {
    QJsonObject obj;
    if (m_alternate_text_isSet) {
        obj.insert(QString("alternateText"), ::OpenAPI::toJsonValue(m_alternate_text));
    }
    if (m_initial_rotating_barcode_values.isSet()) {
        obj.insert(QString("initialRotatingBarcodeValues"), ::OpenAPI::toJsonValue(m_initial_rotating_barcode_values));
    }
    if (m_render_encoding_isSet) {
        obj.insert(QString("renderEncoding"), ::OpenAPI::toJsonValue(m_render_encoding));
    }
    if (m_show_code_text.isSet()) {
        obj.insert(QString("showCodeText"), ::OpenAPI::toJsonValue(m_show_code_text));
    }
    if (m_totp_details.isSet()) {
        obj.insert(QString("totpDetails"), ::OpenAPI::toJsonValue(m_totp_details));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_pattern_isSet) {
        obj.insert(QString("valuePattern"), ::OpenAPI::toJsonValue(m_value_pattern));
    }
    return obj;
}

QString OAIRotatingBarcode::getAlternateText() const {
    return m_alternate_text;
}
void OAIRotatingBarcode::setAlternateText(const QString &alternate_text) {
    m_alternate_text = alternate_text;
    m_alternate_text_isSet = true;
}

bool OAIRotatingBarcode::is_alternate_text_Set() const{
    return m_alternate_text_isSet;
}

bool OAIRotatingBarcode::is_alternate_text_Valid() const{
    return m_alternate_text_isValid;
}

OAIRotatingBarcodeValues OAIRotatingBarcode::getInitialRotatingBarcodeValues() const {
    return m_initial_rotating_barcode_values;
}
void OAIRotatingBarcode::setInitialRotatingBarcodeValues(const OAIRotatingBarcodeValues &initial_rotating_barcode_values) {
    m_initial_rotating_barcode_values = initial_rotating_barcode_values;
    m_initial_rotating_barcode_values_isSet = true;
}

bool OAIRotatingBarcode::is_initial_rotating_barcode_values_Set() const{
    return m_initial_rotating_barcode_values_isSet;
}

bool OAIRotatingBarcode::is_initial_rotating_barcode_values_Valid() const{
    return m_initial_rotating_barcode_values_isValid;
}

QString OAIRotatingBarcode::getRenderEncoding() const {
    return m_render_encoding;
}
void OAIRotatingBarcode::setRenderEncoding(const QString &render_encoding) {
    m_render_encoding = render_encoding;
    m_render_encoding_isSet = true;
}

bool OAIRotatingBarcode::is_render_encoding_Set() const{
    return m_render_encoding_isSet;
}

bool OAIRotatingBarcode::is_render_encoding_Valid() const{
    return m_render_encoding_isValid;
}

OAILocalizedString OAIRotatingBarcode::getShowCodeText() const {
    return m_show_code_text;
}
void OAIRotatingBarcode::setShowCodeText(const OAILocalizedString &show_code_text) {
    m_show_code_text = show_code_text;
    m_show_code_text_isSet = true;
}

bool OAIRotatingBarcode::is_show_code_text_Set() const{
    return m_show_code_text_isSet;
}

bool OAIRotatingBarcode::is_show_code_text_Valid() const{
    return m_show_code_text_isValid;
}

OAIRotatingBarcodeTotpDetails OAIRotatingBarcode::getTotpDetails() const {
    return m_totp_details;
}
void OAIRotatingBarcode::setTotpDetails(const OAIRotatingBarcodeTotpDetails &totp_details) {
    m_totp_details = totp_details;
    m_totp_details_isSet = true;
}

bool OAIRotatingBarcode::is_totp_details_Set() const{
    return m_totp_details_isSet;
}

bool OAIRotatingBarcode::is_totp_details_Valid() const{
    return m_totp_details_isValid;
}

QString OAIRotatingBarcode::getType() const {
    return m_type;
}
void OAIRotatingBarcode::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRotatingBarcode::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRotatingBarcode::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIRotatingBarcode::getValuePattern() const {
    return m_value_pattern;
}
void OAIRotatingBarcode::setValuePattern(const QString &value_pattern) {
    m_value_pattern = value_pattern;
    m_value_pattern_isSet = true;
}

bool OAIRotatingBarcode::is_value_pattern_Set() const{
    return m_value_pattern_isSet;
}

bool OAIRotatingBarcode::is_value_pattern_Valid() const{
    return m_value_pattern_isValid;
}

bool OAIRotatingBarcode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternate_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_rotating_barcode_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_render_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_code_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_totp_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRotatingBarcode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
