/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlightObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlightObject::OAIFlightObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlightObject::OAIFlightObject() {
    this->initializeModel();
}

OAIFlightObject::~OAIFlightObject() {}

void OAIFlightObject::initializeModel() {

    m_app_link_data_isSet = false;
    m_app_link_data_isValid = false;

    m_barcode_isSet = false;
    m_barcode_isValid = false;

    m_boarding_and_seating_info_isSet = false;
    m_boarding_and_seating_info_isValid = false;

    m_class_id_isSet = false;
    m_class_id_isValid = false;

    m_class_reference_isSet = false;
    m_class_reference_isValid = false;

    m_disable_expiration_notification_isSet = false;
    m_disable_expiration_notification_isValid = false;

    m_grouping_info_isSet = false;
    m_grouping_info_isValid = false;

    m_has_linked_device_isSet = false;
    m_has_linked_device_isValid = false;

    m_has_users_isSet = false;
    m_has_users_isValid = false;

    m_hero_image_isSet = false;
    m_hero_image_isValid = false;

    m_hex_background_color_isSet = false;
    m_hex_background_color_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_modules_data_isSet = false;
    m_image_modules_data_isValid = false;

    m_info_module_data_isSet = false;
    m_info_module_data_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_links_module_data_isSet = false;
    m_links_module_data_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_pass_constraints_isSet = false;
    m_pass_constraints_isValid = false;

    m_passenger_name_isSet = false;
    m_passenger_name_isValid = false;

    m_reservation_info_isSet = false;
    m_reservation_info_isValid = false;

    m_rotating_barcode_isSet = false;
    m_rotating_barcode_isValid = false;

    m_security_program_logo_isSet = false;
    m_security_program_logo_isValid = false;

    m_smart_tap_redemption_value_isSet = false;
    m_smart_tap_redemption_value_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_text_modules_data_isSet = false;
    m_text_modules_data_isValid = false;

    m_valid_time_interval_isSet = false;
    m_valid_time_interval_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIFlightObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlightObject::fromJsonObject(QJsonObject json) {

    m_app_link_data_isValid = ::OpenAPI::fromJsonValue(m_app_link_data, json[QString("appLinkData")]);
    m_app_link_data_isSet = !json[QString("appLinkData")].isNull() && m_app_link_data_isValid;

    m_barcode_isValid = ::OpenAPI::fromJsonValue(m_barcode, json[QString("barcode")]);
    m_barcode_isSet = !json[QString("barcode")].isNull() && m_barcode_isValid;

    m_boarding_and_seating_info_isValid = ::OpenAPI::fromJsonValue(m_boarding_and_seating_info, json[QString("boardingAndSeatingInfo")]);
    m_boarding_and_seating_info_isSet = !json[QString("boardingAndSeatingInfo")].isNull() && m_boarding_and_seating_info_isValid;

    m_class_id_isValid = ::OpenAPI::fromJsonValue(m_class_id, json[QString("classId")]);
    m_class_id_isSet = !json[QString("classId")].isNull() && m_class_id_isValid;

    m_class_reference_isValid = ::OpenAPI::fromJsonValue(m_class_reference, json[QString("classReference")]);
    m_class_reference_isSet = !json[QString("classReference")].isNull() && m_class_reference_isValid;

    m_disable_expiration_notification_isValid = ::OpenAPI::fromJsonValue(m_disable_expiration_notification, json[QString("disableExpirationNotification")]);
    m_disable_expiration_notification_isSet = !json[QString("disableExpirationNotification")].isNull() && m_disable_expiration_notification_isValid;

    m_grouping_info_isValid = ::OpenAPI::fromJsonValue(m_grouping_info, json[QString("groupingInfo")]);
    m_grouping_info_isSet = !json[QString("groupingInfo")].isNull() && m_grouping_info_isValid;

    m_has_linked_device_isValid = ::OpenAPI::fromJsonValue(m_has_linked_device, json[QString("hasLinkedDevice")]);
    m_has_linked_device_isSet = !json[QString("hasLinkedDevice")].isNull() && m_has_linked_device_isValid;

    m_has_users_isValid = ::OpenAPI::fromJsonValue(m_has_users, json[QString("hasUsers")]);
    m_has_users_isSet = !json[QString("hasUsers")].isNull() && m_has_users_isValid;

    m_hero_image_isValid = ::OpenAPI::fromJsonValue(m_hero_image, json[QString("heroImage")]);
    m_hero_image_isSet = !json[QString("heroImage")].isNull() && m_hero_image_isValid;

    m_hex_background_color_isValid = ::OpenAPI::fromJsonValue(m_hex_background_color, json[QString("hexBackgroundColor")]);
    m_hex_background_color_isSet = !json[QString("hexBackgroundColor")].isNull() && m_hex_background_color_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_modules_data_isValid = ::OpenAPI::fromJsonValue(m_image_modules_data, json[QString("imageModulesData")]);
    m_image_modules_data_isSet = !json[QString("imageModulesData")].isNull() && m_image_modules_data_isValid;

    m_info_module_data_isValid = ::OpenAPI::fromJsonValue(m_info_module_data, json[QString("infoModuleData")]);
    m_info_module_data_isSet = !json[QString("infoModuleData")].isNull() && m_info_module_data_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_links_module_data_isValid = ::OpenAPI::fromJsonValue(m_links_module_data, json[QString("linksModuleData")]);
    m_links_module_data_isSet = !json[QString("linksModuleData")].isNull() && m_links_module_data_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_pass_constraints_isValid = ::OpenAPI::fromJsonValue(m_pass_constraints, json[QString("passConstraints")]);
    m_pass_constraints_isSet = !json[QString("passConstraints")].isNull() && m_pass_constraints_isValid;

    m_passenger_name_isValid = ::OpenAPI::fromJsonValue(m_passenger_name, json[QString("passengerName")]);
    m_passenger_name_isSet = !json[QString("passengerName")].isNull() && m_passenger_name_isValid;

    m_reservation_info_isValid = ::OpenAPI::fromJsonValue(m_reservation_info, json[QString("reservationInfo")]);
    m_reservation_info_isSet = !json[QString("reservationInfo")].isNull() && m_reservation_info_isValid;

    m_rotating_barcode_isValid = ::OpenAPI::fromJsonValue(m_rotating_barcode, json[QString("rotatingBarcode")]);
    m_rotating_barcode_isSet = !json[QString("rotatingBarcode")].isNull() && m_rotating_barcode_isValid;

    m_security_program_logo_isValid = ::OpenAPI::fromJsonValue(m_security_program_logo, json[QString("securityProgramLogo")]);
    m_security_program_logo_isSet = !json[QString("securityProgramLogo")].isNull() && m_security_program_logo_isValid;

    m_smart_tap_redemption_value_isValid = ::OpenAPI::fromJsonValue(m_smart_tap_redemption_value, json[QString("smartTapRedemptionValue")]);
    m_smart_tap_redemption_value_isSet = !json[QString("smartTapRedemptionValue")].isNull() && m_smart_tap_redemption_value_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_text_modules_data_isValid = ::OpenAPI::fromJsonValue(m_text_modules_data, json[QString("textModulesData")]);
    m_text_modules_data_isSet = !json[QString("textModulesData")].isNull() && m_text_modules_data_isValid;

    m_valid_time_interval_isValid = ::OpenAPI::fromJsonValue(m_valid_time_interval, json[QString("validTimeInterval")]);
    m_valid_time_interval_isSet = !json[QString("validTimeInterval")].isNull() && m_valid_time_interval_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIFlightObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlightObject::asJsonObject() const {
    QJsonObject obj;
    if (m_app_link_data.isSet()) {
        obj.insert(QString("appLinkData"), ::OpenAPI::toJsonValue(m_app_link_data));
    }
    if (m_barcode.isSet()) {
        obj.insert(QString("barcode"), ::OpenAPI::toJsonValue(m_barcode));
    }
    if (m_boarding_and_seating_info.isSet()) {
        obj.insert(QString("boardingAndSeatingInfo"), ::OpenAPI::toJsonValue(m_boarding_and_seating_info));
    }
    if (m_class_id_isSet) {
        obj.insert(QString("classId"), ::OpenAPI::toJsonValue(m_class_id));
    }
    if (m_class_reference.isSet()) {
        obj.insert(QString("classReference"), ::OpenAPI::toJsonValue(m_class_reference));
    }
    if (m_disable_expiration_notification_isSet) {
        obj.insert(QString("disableExpirationNotification"), ::OpenAPI::toJsonValue(m_disable_expiration_notification));
    }
    if (m_grouping_info.isSet()) {
        obj.insert(QString("groupingInfo"), ::OpenAPI::toJsonValue(m_grouping_info));
    }
    if (m_has_linked_device_isSet) {
        obj.insert(QString("hasLinkedDevice"), ::OpenAPI::toJsonValue(m_has_linked_device));
    }
    if (m_has_users_isSet) {
        obj.insert(QString("hasUsers"), ::OpenAPI::toJsonValue(m_has_users));
    }
    if (m_hero_image.isSet()) {
        obj.insert(QString("heroImage"), ::OpenAPI::toJsonValue(m_hero_image));
    }
    if (m_hex_background_color_isSet) {
        obj.insert(QString("hexBackgroundColor"), ::OpenAPI::toJsonValue(m_hex_background_color));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_modules_data.size() > 0) {
        obj.insert(QString("imageModulesData"), ::OpenAPI::toJsonValue(m_image_modules_data));
    }
    if (m_info_module_data.isSet()) {
        obj.insert(QString("infoModuleData"), ::OpenAPI::toJsonValue(m_info_module_data));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_links_module_data.isSet()) {
        obj.insert(QString("linksModuleData"), ::OpenAPI::toJsonValue(m_links_module_data));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_pass_constraints.isSet()) {
        obj.insert(QString("passConstraints"), ::OpenAPI::toJsonValue(m_pass_constraints));
    }
    if (m_passenger_name_isSet) {
        obj.insert(QString("passengerName"), ::OpenAPI::toJsonValue(m_passenger_name));
    }
    if (m_reservation_info.isSet()) {
        obj.insert(QString("reservationInfo"), ::OpenAPI::toJsonValue(m_reservation_info));
    }
    if (m_rotating_barcode.isSet()) {
        obj.insert(QString("rotatingBarcode"), ::OpenAPI::toJsonValue(m_rotating_barcode));
    }
    if (m_security_program_logo.isSet()) {
        obj.insert(QString("securityProgramLogo"), ::OpenAPI::toJsonValue(m_security_program_logo));
    }
    if (m_smart_tap_redemption_value_isSet) {
        obj.insert(QString("smartTapRedemptionValue"), ::OpenAPI::toJsonValue(m_smart_tap_redemption_value));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_text_modules_data.size() > 0) {
        obj.insert(QString("textModulesData"), ::OpenAPI::toJsonValue(m_text_modules_data));
    }
    if (m_valid_time_interval.isSet()) {
        obj.insert(QString("validTimeInterval"), ::OpenAPI::toJsonValue(m_valid_time_interval));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIAppLinkData OAIFlightObject::getAppLinkData() const {
    return m_app_link_data;
}
void OAIFlightObject::setAppLinkData(const OAIAppLinkData &app_link_data) {
    m_app_link_data = app_link_data;
    m_app_link_data_isSet = true;
}

bool OAIFlightObject::is_app_link_data_Set() const{
    return m_app_link_data_isSet;
}

bool OAIFlightObject::is_app_link_data_Valid() const{
    return m_app_link_data_isValid;
}

OAIBarcode OAIFlightObject::getBarcode() const {
    return m_barcode;
}
void OAIFlightObject::setBarcode(const OAIBarcode &barcode) {
    m_barcode = barcode;
    m_barcode_isSet = true;
}

bool OAIFlightObject::is_barcode_Set() const{
    return m_barcode_isSet;
}

bool OAIFlightObject::is_barcode_Valid() const{
    return m_barcode_isValid;
}

OAIBoardingAndSeatingInfo OAIFlightObject::getBoardingAndSeatingInfo() const {
    return m_boarding_and_seating_info;
}
void OAIFlightObject::setBoardingAndSeatingInfo(const OAIBoardingAndSeatingInfo &boarding_and_seating_info) {
    m_boarding_and_seating_info = boarding_and_seating_info;
    m_boarding_and_seating_info_isSet = true;
}

bool OAIFlightObject::is_boarding_and_seating_info_Set() const{
    return m_boarding_and_seating_info_isSet;
}

bool OAIFlightObject::is_boarding_and_seating_info_Valid() const{
    return m_boarding_and_seating_info_isValid;
}

QString OAIFlightObject::getClassId() const {
    return m_class_id;
}
void OAIFlightObject::setClassId(const QString &class_id) {
    m_class_id = class_id;
    m_class_id_isSet = true;
}

bool OAIFlightObject::is_class_id_Set() const{
    return m_class_id_isSet;
}

bool OAIFlightObject::is_class_id_Valid() const{
    return m_class_id_isValid;
}

OAIFlightClass OAIFlightObject::getClassReference() const {
    return m_class_reference;
}
void OAIFlightObject::setClassReference(const OAIFlightClass &class_reference) {
    m_class_reference = class_reference;
    m_class_reference_isSet = true;
}

bool OAIFlightObject::is_class_reference_Set() const{
    return m_class_reference_isSet;
}

bool OAIFlightObject::is_class_reference_Valid() const{
    return m_class_reference_isValid;
}

bool OAIFlightObject::isDisableExpirationNotification() const {
    return m_disable_expiration_notification;
}
void OAIFlightObject::setDisableExpirationNotification(const bool &disable_expiration_notification) {
    m_disable_expiration_notification = disable_expiration_notification;
    m_disable_expiration_notification_isSet = true;
}

bool OAIFlightObject::is_disable_expiration_notification_Set() const{
    return m_disable_expiration_notification_isSet;
}

bool OAIFlightObject::is_disable_expiration_notification_Valid() const{
    return m_disable_expiration_notification_isValid;
}

OAIGroupingInfo OAIFlightObject::getGroupingInfo() const {
    return m_grouping_info;
}
void OAIFlightObject::setGroupingInfo(const OAIGroupingInfo &grouping_info) {
    m_grouping_info = grouping_info;
    m_grouping_info_isSet = true;
}

bool OAIFlightObject::is_grouping_info_Set() const{
    return m_grouping_info_isSet;
}

bool OAIFlightObject::is_grouping_info_Valid() const{
    return m_grouping_info_isValid;
}

bool OAIFlightObject::isHasLinkedDevice() const {
    return m_has_linked_device;
}
void OAIFlightObject::setHasLinkedDevice(const bool &has_linked_device) {
    m_has_linked_device = has_linked_device;
    m_has_linked_device_isSet = true;
}

bool OAIFlightObject::is_has_linked_device_Set() const{
    return m_has_linked_device_isSet;
}

bool OAIFlightObject::is_has_linked_device_Valid() const{
    return m_has_linked_device_isValid;
}

bool OAIFlightObject::isHasUsers() const {
    return m_has_users;
}
void OAIFlightObject::setHasUsers(const bool &has_users) {
    m_has_users = has_users;
    m_has_users_isSet = true;
}

bool OAIFlightObject::is_has_users_Set() const{
    return m_has_users_isSet;
}

bool OAIFlightObject::is_has_users_Valid() const{
    return m_has_users_isValid;
}

OAIImage OAIFlightObject::getHeroImage() const {
    return m_hero_image;
}
void OAIFlightObject::setHeroImage(const OAIImage &hero_image) {
    m_hero_image = hero_image;
    m_hero_image_isSet = true;
}

bool OAIFlightObject::is_hero_image_Set() const{
    return m_hero_image_isSet;
}

bool OAIFlightObject::is_hero_image_Valid() const{
    return m_hero_image_isValid;
}

QString OAIFlightObject::getHexBackgroundColor() const {
    return m_hex_background_color;
}
void OAIFlightObject::setHexBackgroundColor(const QString &hex_background_color) {
    m_hex_background_color = hex_background_color;
    m_hex_background_color_isSet = true;
}

bool OAIFlightObject::is_hex_background_color_Set() const{
    return m_hex_background_color_isSet;
}

bool OAIFlightObject::is_hex_background_color_Valid() const{
    return m_hex_background_color_isValid;
}

QString OAIFlightObject::getId() const {
    return m_id;
}
void OAIFlightObject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFlightObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFlightObject::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIImageModuleData> OAIFlightObject::getImageModulesData() const {
    return m_image_modules_data;
}
void OAIFlightObject::setImageModulesData(const QList<OAIImageModuleData> &image_modules_data) {
    m_image_modules_data = image_modules_data;
    m_image_modules_data_isSet = true;
}

bool OAIFlightObject::is_image_modules_data_Set() const{
    return m_image_modules_data_isSet;
}

bool OAIFlightObject::is_image_modules_data_Valid() const{
    return m_image_modules_data_isValid;
}

OAIInfoModuleData OAIFlightObject::getInfoModuleData() const {
    return m_info_module_data;
}
void OAIFlightObject::setInfoModuleData(const OAIInfoModuleData &info_module_data) {
    m_info_module_data = info_module_data;
    m_info_module_data_isSet = true;
}

bool OAIFlightObject::is_info_module_data_Set() const{
    return m_info_module_data_isSet;
}

bool OAIFlightObject::is_info_module_data_Valid() const{
    return m_info_module_data_isValid;
}

QString OAIFlightObject::getKind() const {
    return m_kind;
}
void OAIFlightObject::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIFlightObject::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIFlightObject::is_kind_Valid() const{
    return m_kind_isValid;
}

OAILinksModuleData OAIFlightObject::getLinksModuleData() const {
    return m_links_module_data;
}
void OAIFlightObject::setLinksModuleData(const OAILinksModuleData &links_module_data) {
    m_links_module_data = links_module_data;
    m_links_module_data_isSet = true;
}

bool OAIFlightObject::is_links_module_data_Set() const{
    return m_links_module_data_isSet;
}

bool OAIFlightObject::is_links_module_data_Valid() const{
    return m_links_module_data_isValid;
}

QList<OAILatLongPoint> OAIFlightObject::getLocations() const {
    return m_locations;
}
void OAIFlightObject::setLocations(const QList<OAILatLongPoint> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIFlightObject::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIFlightObject::is_locations_Valid() const{
    return m_locations_isValid;
}

QList<OAIMessage> OAIFlightObject::getMessages() const {
    return m_messages;
}
void OAIFlightObject::setMessages(const QList<OAIMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIFlightObject::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIFlightObject::is_messages_Valid() const{
    return m_messages_isValid;
}

OAIPassConstraints OAIFlightObject::getPassConstraints() const {
    return m_pass_constraints;
}
void OAIFlightObject::setPassConstraints(const OAIPassConstraints &pass_constraints) {
    m_pass_constraints = pass_constraints;
    m_pass_constraints_isSet = true;
}

bool OAIFlightObject::is_pass_constraints_Set() const{
    return m_pass_constraints_isSet;
}

bool OAIFlightObject::is_pass_constraints_Valid() const{
    return m_pass_constraints_isValid;
}

QString OAIFlightObject::getPassengerName() const {
    return m_passenger_name;
}
void OAIFlightObject::setPassengerName(const QString &passenger_name) {
    m_passenger_name = passenger_name;
    m_passenger_name_isSet = true;
}

bool OAIFlightObject::is_passenger_name_Set() const{
    return m_passenger_name_isSet;
}

bool OAIFlightObject::is_passenger_name_Valid() const{
    return m_passenger_name_isValid;
}

OAIReservationInfo OAIFlightObject::getReservationInfo() const {
    return m_reservation_info;
}
void OAIFlightObject::setReservationInfo(const OAIReservationInfo &reservation_info) {
    m_reservation_info = reservation_info;
    m_reservation_info_isSet = true;
}

bool OAIFlightObject::is_reservation_info_Set() const{
    return m_reservation_info_isSet;
}

bool OAIFlightObject::is_reservation_info_Valid() const{
    return m_reservation_info_isValid;
}

OAIRotatingBarcode OAIFlightObject::getRotatingBarcode() const {
    return m_rotating_barcode;
}
void OAIFlightObject::setRotatingBarcode(const OAIRotatingBarcode &rotating_barcode) {
    m_rotating_barcode = rotating_barcode;
    m_rotating_barcode_isSet = true;
}

bool OAIFlightObject::is_rotating_barcode_Set() const{
    return m_rotating_barcode_isSet;
}

bool OAIFlightObject::is_rotating_barcode_Valid() const{
    return m_rotating_barcode_isValid;
}

OAIImage OAIFlightObject::getSecurityProgramLogo() const {
    return m_security_program_logo;
}
void OAIFlightObject::setSecurityProgramLogo(const OAIImage &security_program_logo) {
    m_security_program_logo = security_program_logo;
    m_security_program_logo_isSet = true;
}

bool OAIFlightObject::is_security_program_logo_Set() const{
    return m_security_program_logo_isSet;
}

bool OAIFlightObject::is_security_program_logo_Valid() const{
    return m_security_program_logo_isValid;
}

QString OAIFlightObject::getSmartTapRedemptionValue() const {
    return m_smart_tap_redemption_value;
}
void OAIFlightObject::setSmartTapRedemptionValue(const QString &smart_tap_redemption_value) {
    m_smart_tap_redemption_value = smart_tap_redemption_value;
    m_smart_tap_redemption_value_isSet = true;
}

bool OAIFlightObject::is_smart_tap_redemption_value_Set() const{
    return m_smart_tap_redemption_value_isSet;
}

bool OAIFlightObject::is_smart_tap_redemption_value_Valid() const{
    return m_smart_tap_redemption_value_isValid;
}

QString OAIFlightObject::getState() const {
    return m_state;
}
void OAIFlightObject::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIFlightObject::is_state_Set() const{
    return m_state_isSet;
}

bool OAIFlightObject::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAITextModuleData> OAIFlightObject::getTextModulesData() const {
    return m_text_modules_data;
}
void OAIFlightObject::setTextModulesData(const QList<OAITextModuleData> &text_modules_data) {
    m_text_modules_data = text_modules_data;
    m_text_modules_data_isSet = true;
}

bool OAIFlightObject::is_text_modules_data_Set() const{
    return m_text_modules_data_isSet;
}

bool OAIFlightObject::is_text_modules_data_Valid() const{
    return m_text_modules_data_isValid;
}

OAITimeInterval OAIFlightObject::getValidTimeInterval() const {
    return m_valid_time_interval;
}
void OAIFlightObject::setValidTimeInterval(const OAITimeInterval &valid_time_interval) {
    m_valid_time_interval = valid_time_interval;
    m_valid_time_interval_isSet = true;
}

bool OAIFlightObject::is_valid_time_interval_Set() const{
    return m_valid_time_interval_isSet;
}

bool OAIFlightObject::is_valid_time_interval_Valid() const{
    return m_valid_time_interval_isValid;
}

QString OAIFlightObject::getVersion() const {
    return m_version;
}
void OAIFlightObject::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIFlightObject::is_version_Set() const{
    return m_version_isSet;
}

bool OAIFlightObject::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIFlightObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_link_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_barcode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_boarding_and_seating_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_expiration_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grouping_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_linked_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hero_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hex_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_modules_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_module_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_module_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pass_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_passenger_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotating_barcode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_program_logo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_smart_tap_redemption_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_modules_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_time_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlightObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
