/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferClass.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferClass::OAIOfferClass(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferClass::OAIOfferClass() {
    this->initializeModel();
}

OAIOfferClass::~OAIOfferClass() {}

void OAIOfferClass::initializeModel() {

    m_allow_multiple_users_per_object_isSet = false;
    m_allow_multiple_users_per_object_isValid = false;

    m_callback_options_isSet = false;
    m_callback_options_isValid = false;

    m_class_template_info_isSet = false;
    m_class_template_info_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_enable_smart_tap_isSet = false;
    m_enable_smart_tap_isValid = false;

    m_fine_print_isSet = false;
    m_fine_print_isValid = false;

    m_help_uri_isSet = false;
    m_help_uri_isValid = false;

    m_hero_image_isSet = false;
    m_hero_image_isValid = false;

    m_hex_background_color_isSet = false;
    m_hex_background_color_isValid = false;

    m_homepage_uri_isSet = false;
    m_homepage_uri_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_modules_data_isSet = false;
    m_image_modules_data_isValid = false;

    m_info_module_data_isSet = false;
    m_info_module_data_isValid = false;

    m_issuer_name_isSet = false;
    m_issuer_name_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_links_module_data_isSet = false;
    m_links_module_data_isValid = false;

    m_localized_details_isSet = false;
    m_localized_details_isValid = false;

    m_localized_fine_print_isSet = false;
    m_localized_fine_print_isValid = false;

    m_localized_issuer_name_isSet = false;
    m_localized_issuer_name_isValid = false;

    m_localized_provider_isSet = false;
    m_localized_provider_isValid = false;

    m_localized_short_title_isSet = false;
    m_localized_short_title_isValid = false;

    m_localized_title_isSet = false;
    m_localized_title_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_multiple_devices_and_holders_allowed_status_isSet = false;
    m_multiple_devices_and_holders_allowed_status_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_redemption_channel_isSet = false;
    m_redemption_channel_isValid = false;

    m_redemption_issuers_isSet = false;
    m_redemption_issuers_isValid = false;

    m_review_isSet = false;
    m_review_isValid = false;

    m_review_status_isSet = false;
    m_review_status_isValid = false;

    m_security_animation_isSet = false;
    m_security_animation_isValid = false;

    m_short_title_isSet = false;
    m_short_title_isValid = false;

    m_text_modules_data_isSet = false;
    m_text_modules_data_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_title_image_isSet = false;
    m_title_image_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_view_unlock_requirement_isSet = false;
    m_view_unlock_requirement_isValid = false;

    m_wide_title_image_isSet = false;
    m_wide_title_image_isValid = false;

    m_word_mark_isSet = false;
    m_word_mark_isValid = false;
}

void OAIOfferClass::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfferClass::fromJsonObject(QJsonObject json) {

    m_allow_multiple_users_per_object_isValid = ::OpenAPI::fromJsonValue(m_allow_multiple_users_per_object, json[QString("allowMultipleUsersPerObject")]);
    m_allow_multiple_users_per_object_isSet = !json[QString("allowMultipleUsersPerObject")].isNull() && m_allow_multiple_users_per_object_isValid;

    m_callback_options_isValid = ::OpenAPI::fromJsonValue(m_callback_options, json[QString("callbackOptions")]);
    m_callback_options_isSet = !json[QString("callbackOptions")].isNull() && m_callback_options_isValid;

    m_class_template_info_isValid = ::OpenAPI::fromJsonValue(m_class_template_info, json[QString("classTemplateInfo")]);
    m_class_template_info_isSet = !json[QString("classTemplateInfo")].isNull() && m_class_template_info_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_enable_smart_tap_isValid = ::OpenAPI::fromJsonValue(m_enable_smart_tap, json[QString("enableSmartTap")]);
    m_enable_smart_tap_isSet = !json[QString("enableSmartTap")].isNull() && m_enable_smart_tap_isValid;

    m_fine_print_isValid = ::OpenAPI::fromJsonValue(m_fine_print, json[QString("finePrint")]);
    m_fine_print_isSet = !json[QString("finePrint")].isNull() && m_fine_print_isValid;

    m_help_uri_isValid = ::OpenAPI::fromJsonValue(m_help_uri, json[QString("helpUri")]);
    m_help_uri_isSet = !json[QString("helpUri")].isNull() && m_help_uri_isValid;

    m_hero_image_isValid = ::OpenAPI::fromJsonValue(m_hero_image, json[QString("heroImage")]);
    m_hero_image_isSet = !json[QString("heroImage")].isNull() && m_hero_image_isValid;

    m_hex_background_color_isValid = ::OpenAPI::fromJsonValue(m_hex_background_color, json[QString("hexBackgroundColor")]);
    m_hex_background_color_isSet = !json[QString("hexBackgroundColor")].isNull() && m_hex_background_color_isValid;

    m_homepage_uri_isValid = ::OpenAPI::fromJsonValue(m_homepage_uri, json[QString("homepageUri")]);
    m_homepage_uri_isSet = !json[QString("homepageUri")].isNull() && m_homepage_uri_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_modules_data_isValid = ::OpenAPI::fromJsonValue(m_image_modules_data, json[QString("imageModulesData")]);
    m_image_modules_data_isSet = !json[QString("imageModulesData")].isNull() && m_image_modules_data_isValid;

    m_info_module_data_isValid = ::OpenAPI::fromJsonValue(m_info_module_data, json[QString("infoModuleData")]);
    m_info_module_data_isSet = !json[QString("infoModuleData")].isNull() && m_info_module_data_isValid;

    m_issuer_name_isValid = ::OpenAPI::fromJsonValue(m_issuer_name, json[QString("issuerName")]);
    m_issuer_name_isSet = !json[QString("issuerName")].isNull() && m_issuer_name_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_links_module_data_isValid = ::OpenAPI::fromJsonValue(m_links_module_data, json[QString("linksModuleData")]);
    m_links_module_data_isSet = !json[QString("linksModuleData")].isNull() && m_links_module_data_isValid;

    m_localized_details_isValid = ::OpenAPI::fromJsonValue(m_localized_details, json[QString("localizedDetails")]);
    m_localized_details_isSet = !json[QString("localizedDetails")].isNull() && m_localized_details_isValid;

    m_localized_fine_print_isValid = ::OpenAPI::fromJsonValue(m_localized_fine_print, json[QString("localizedFinePrint")]);
    m_localized_fine_print_isSet = !json[QString("localizedFinePrint")].isNull() && m_localized_fine_print_isValid;

    m_localized_issuer_name_isValid = ::OpenAPI::fromJsonValue(m_localized_issuer_name, json[QString("localizedIssuerName")]);
    m_localized_issuer_name_isSet = !json[QString("localizedIssuerName")].isNull() && m_localized_issuer_name_isValid;

    m_localized_provider_isValid = ::OpenAPI::fromJsonValue(m_localized_provider, json[QString("localizedProvider")]);
    m_localized_provider_isSet = !json[QString("localizedProvider")].isNull() && m_localized_provider_isValid;

    m_localized_short_title_isValid = ::OpenAPI::fromJsonValue(m_localized_short_title, json[QString("localizedShortTitle")]);
    m_localized_short_title_isSet = !json[QString("localizedShortTitle")].isNull() && m_localized_short_title_isValid;

    m_localized_title_isValid = ::OpenAPI::fromJsonValue(m_localized_title, json[QString("localizedTitle")]);
    m_localized_title_isSet = !json[QString("localizedTitle")].isNull() && m_localized_title_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_multiple_devices_and_holders_allowed_status_isValid = ::OpenAPI::fromJsonValue(m_multiple_devices_and_holders_allowed_status, json[QString("multipleDevicesAndHoldersAllowedStatus")]);
    m_multiple_devices_and_holders_allowed_status_isSet = !json[QString("multipleDevicesAndHoldersAllowedStatus")].isNull() && m_multiple_devices_and_holders_allowed_status_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_redemption_channel_isValid = ::OpenAPI::fromJsonValue(m_redemption_channel, json[QString("redemptionChannel")]);
    m_redemption_channel_isSet = !json[QString("redemptionChannel")].isNull() && m_redemption_channel_isValid;

    m_redemption_issuers_isValid = ::OpenAPI::fromJsonValue(m_redemption_issuers, json[QString("redemptionIssuers")]);
    m_redemption_issuers_isSet = !json[QString("redemptionIssuers")].isNull() && m_redemption_issuers_isValid;

    m_review_isValid = ::OpenAPI::fromJsonValue(m_review, json[QString("review")]);
    m_review_isSet = !json[QString("review")].isNull() && m_review_isValid;

    m_review_status_isValid = ::OpenAPI::fromJsonValue(m_review_status, json[QString("reviewStatus")]);
    m_review_status_isSet = !json[QString("reviewStatus")].isNull() && m_review_status_isValid;

    m_security_animation_isValid = ::OpenAPI::fromJsonValue(m_security_animation, json[QString("securityAnimation")]);
    m_security_animation_isSet = !json[QString("securityAnimation")].isNull() && m_security_animation_isValid;

    m_short_title_isValid = ::OpenAPI::fromJsonValue(m_short_title, json[QString("shortTitle")]);
    m_short_title_isSet = !json[QString("shortTitle")].isNull() && m_short_title_isValid;

    m_text_modules_data_isValid = ::OpenAPI::fromJsonValue(m_text_modules_data, json[QString("textModulesData")]);
    m_text_modules_data_isSet = !json[QString("textModulesData")].isNull() && m_text_modules_data_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_title_image_isValid = ::OpenAPI::fromJsonValue(m_title_image, json[QString("titleImage")]);
    m_title_image_isSet = !json[QString("titleImage")].isNull() && m_title_image_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_view_unlock_requirement_isValid = ::OpenAPI::fromJsonValue(m_view_unlock_requirement, json[QString("viewUnlockRequirement")]);
    m_view_unlock_requirement_isSet = !json[QString("viewUnlockRequirement")].isNull() && m_view_unlock_requirement_isValid;

    m_wide_title_image_isValid = ::OpenAPI::fromJsonValue(m_wide_title_image, json[QString("wideTitleImage")]);
    m_wide_title_image_isSet = !json[QString("wideTitleImage")].isNull() && m_wide_title_image_isValid;

    m_word_mark_isValid = ::OpenAPI::fromJsonValue(m_word_mark, json[QString("wordMark")]);
    m_word_mark_isSet = !json[QString("wordMark")].isNull() && m_word_mark_isValid;
}

QString OAIOfferClass::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfferClass::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_multiple_users_per_object_isSet) {
        obj.insert(QString("allowMultipleUsersPerObject"), ::OpenAPI::toJsonValue(m_allow_multiple_users_per_object));
    }
    if (m_callback_options.isSet()) {
        obj.insert(QString("callbackOptions"), ::OpenAPI::toJsonValue(m_callback_options));
    }
    if (m_class_template_info.isSet()) {
        obj.insert(QString("classTemplateInfo"), ::OpenAPI::toJsonValue(m_class_template_info));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_enable_smart_tap_isSet) {
        obj.insert(QString("enableSmartTap"), ::OpenAPI::toJsonValue(m_enable_smart_tap));
    }
    if (m_fine_print_isSet) {
        obj.insert(QString("finePrint"), ::OpenAPI::toJsonValue(m_fine_print));
    }
    if (m_help_uri.isSet()) {
        obj.insert(QString("helpUri"), ::OpenAPI::toJsonValue(m_help_uri));
    }
    if (m_hero_image.isSet()) {
        obj.insert(QString("heroImage"), ::OpenAPI::toJsonValue(m_hero_image));
    }
    if (m_hex_background_color_isSet) {
        obj.insert(QString("hexBackgroundColor"), ::OpenAPI::toJsonValue(m_hex_background_color));
    }
    if (m_homepage_uri.isSet()) {
        obj.insert(QString("homepageUri"), ::OpenAPI::toJsonValue(m_homepage_uri));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_modules_data.size() > 0) {
        obj.insert(QString("imageModulesData"), ::OpenAPI::toJsonValue(m_image_modules_data));
    }
    if (m_info_module_data.isSet()) {
        obj.insert(QString("infoModuleData"), ::OpenAPI::toJsonValue(m_info_module_data));
    }
    if (m_issuer_name_isSet) {
        obj.insert(QString("issuerName"), ::OpenAPI::toJsonValue(m_issuer_name));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_links_module_data.isSet()) {
        obj.insert(QString("linksModuleData"), ::OpenAPI::toJsonValue(m_links_module_data));
    }
    if (m_localized_details.isSet()) {
        obj.insert(QString("localizedDetails"), ::OpenAPI::toJsonValue(m_localized_details));
    }
    if (m_localized_fine_print.isSet()) {
        obj.insert(QString("localizedFinePrint"), ::OpenAPI::toJsonValue(m_localized_fine_print));
    }
    if (m_localized_issuer_name.isSet()) {
        obj.insert(QString("localizedIssuerName"), ::OpenAPI::toJsonValue(m_localized_issuer_name));
    }
    if (m_localized_provider.isSet()) {
        obj.insert(QString("localizedProvider"), ::OpenAPI::toJsonValue(m_localized_provider));
    }
    if (m_localized_short_title.isSet()) {
        obj.insert(QString("localizedShortTitle"), ::OpenAPI::toJsonValue(m_localized_short_title));
    }
    if (m_localized_title.isSet()) {
        obj.insert(QString("localizedTitle"), ::OpenAPI::toJsonValue(m_localized_title));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_multiple_devices_and_holders_allowed_status_isSet) {
        obj.insert(QString("multipleDevicesAndHoldersAllowedStatus"), ::OpenAPI::toJsonValue(m_multiple_devices_and_holders_allowed_status));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_redemption_channel_isSet) {
        obj.insert(QString("redemptionChannel"), ::OpenAPI::toJsonValue(m_redemption_channel));
    }
    if (m_redemption_issuers.size() > 0) {
        obj.insert(QString("redemptionIssuers"), ::OpenAPI::toJsonValue(m_redemption_issuers));
    }
    if (m_review.isSet()) {
        obj.insert(QString("review"), ::OpenAPI::toJsonValue(m_review));
    }
    if (m_review_status_isSet) {
        obj.insert(QString("reviewStatus"), ::OpenAPI::toJsonValue(m_review_status));
    }
    if (m_security_animation.isSet()) {
        obj.insert(QString("securityAnimation"), ::OpenAPI::toJsonValue(m_security_animation));
    }
    if (m_short_title_isSet) {
        obj.insert(QString("shortTitle"), ::OpenAPI::toJsonValue(m_short_title));
    }
    if (m_text_modules_data.size() > 0) {
        obj.insert(QString("textModulesData"), ::OpenAPI::toJsonValue(m_text_modules_data));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_title_image.isSet()) {
        obj.insert(QString("titleImage"), ::OpenAPI::toJsonValue(m_title_image));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_view_unlock_requirement_isSet) {
        obj.insert(QString("viewUnlockRequirement"), ::OpenAPI::toJsonValue(m_view_unlock_requirement));
    }
    if (m_wide_title_image.isSet()) {
        obj.insert(QString("wideTitleImage"), ::OpenAPI::toJsonValue(m_wide_title_image));
    }
    if (m_word_mark.isSet()) {
        obj.insert(QString("wordMark"), ::OpenAPI::toJsonValue(m_word_mark));
    }
    return obj;
}

bool OAIOfferClass::isAllowMultipleUsersPerObject() const {
    return m_allow_multiple_users_per_object;
}
void OAIOfferClass::setAllowMultipleUsersPerObject(const bool &allow_multiple_users_per_object) {
    m_allow_multiple_users_per_object = allow_multiple_users_per_object;
    m_allow_multiple_users_per_object_isSet = true;
}

bool OAIOfferClass::is_allow_multiple_users_per_object_Set() const{
    return m_allow_multiple_users_per_object_isSet;
}

bool OAIOfferClass::is_allow_multiple_users_per_object_Valid() const{
    return m_allow_multiple_users_per_object_isValid;
}

OAICallbackOptions OAIOfferClass::getCallbackOptions() const {
    return m_callback_options;
}
void OAIOfferClass::setCallbackOptions(const OAICallbackOptions &callback_options) {
    m_callback_options = callback_options;
    m_callback_options_isSet = true;
}

bool OAIOfferClass::is_callback_options_Set() const{
    return m_callback_options_isSet;
}

bool OAIOfferClass::is_callback_options_Valid() const{
    return m_callback_options_isValid;
}

OAIClassTemplateInfo OAIOfferClass::getClassTemplateInfo() const {
    return m_class_template_info;
}
void OAIOfferClass::setClassTemplateInfo(const OAIClassTemplateInfo &class_template_info) {
    m_class_template_info = class_template_info;
    m_class_template_info_isSet = true;
}

bool OAIOfferClass::is_class_template_info_Set() const{
    return m_class_template_info_isSet;
}

bool OAIOfferClass::is_class_template_info_Valid() const{
    return m_class_template_info_isValid;
}

QString OAIOfferClass::getCountryCode() const {
    return m_country_code;
}
void OAIOfferClass::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIOfferClass::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIOfferClass::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIOfferClass::getDetails() const {
    return m_details;
}
void OAIOfferClass::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIOfferClass::is_details_Set() const{
    return m_details_isSet;
}

bool OAIOfferClass::is_details_Valid() const{
    return m_details_isValid;
}

bool OAIOfferClass::isEnableSmartTap() const {
    return m_enable_smart_tap;
}
void OAIOfferClass::setEnableSmartTap(const bool &enable_smart_tap) {
    m_enable_smart_tap = enable_smart_tap;
    m_enable_smart_tap_isSet = true;
}

bool OAIOfferClass::is_enable_smart_tap_Set() const{
    return m_enable_smart_tap_isSet;
}

bool OAIOfferClass::is_enable_smart_tap_Valid() const{
    return m_enable_smart_tap_isValid;
}

QString OAIOfferClass::getFinePrint() const {
    return m_fine_print;
}
void OAIOfferClass::setFinePrint(const QString &fine_print) {
    m_fine_print = fine_print;
    m_fine_print_isSet = true;
}

bool OAIOfferClass::is_fine_print_Set() const{
    return m_fine_print_isSet;
}

bool OAIOfferClass::is_fine_print_Valid() const{
    return m_fine_print_isValid;
}

OAIUri OAIOfferClass::getHelpUri() const {
    return m_help_uri;
}
void OAIOfferClass::setHelpUri(const OAIUri &help_uri) {
    m_help_uri = help_uri;
    m_help_uri_isSet = true;
}

bool OAIOfferClass::is_help_uri_Set() const{
    return m_help_uri_isSet;
}

bool OAIOfferClass::is_help_uri_Valid() const{
    return m_help_uri_isValid;
}

OAIImage OAIOfferClass::getHeroImage() const {
    return m_hero_image;
}
void OAIOfferClass::setHeroImage(const OAIImage &hero_image) {
    m_hero_image = hero_image;
    m_hero_image_isSet = true;
}

bool OAIOfferClass::is_hero_image_Set() const{
    return m_hero_image_isSet;
}

bool OAIOfferClass::is_hero_image_Valid() const{
    return m_hero_image_isValid;
}

QString OAIOfferClass::getHexBackgroundColor() const {
    return m_hex_background_color;
}
void OAIOfferClass::setHexBackgroundColor(const QString &hex_background_color) {
    m_hex_background_color = hex_background_color;
    m_hex_background_color_isSet = true;
}

bool OAIOfferClass::is_hex_background_color_Set() const{
    return m_hex_background_color_isSet;
}

bool OAIOfferClass::is_hex_background_color_Valid() const{
    return m_hex_background_color_isValid;
}

OAIUri OAIOfferClass::getHomepageUri() const {
    return m_homepage_uri;
}
void OAIOfferClass::setHomepageUri(const OAIUri &homepage_uri) {
    m_homepage_uri = homepage_uri;
    m_homepage_uri_isSet = true;
}

bool OAIOfferClass::is_homepage_uri_Set() const{
    return m_homepage_uri_isSet;
}

bool OAIOfferClass::is_homepage_uri_Valid() const{
    return m_homepage_uri_isValid;
}

QString OAIOfferClass::getId() const {
    return m_id;
}
void OAIOfferClass::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOfferClass::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOfferClass::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIImageModuleData> OAIOfferClass::getImageModulesData() const {
    return m_image_modules_data;
}
void OAIOfferClass::setImageModulesData(const QList<OAIImageModuleData> &image_modules_data) {
    m_image_modules_data = image_modules_data;
    m_image_modules_data_isSet = true;
}

bool OAIOfferClass::is_image_modules_data_Set() const{
    return m_image_modules_data_isSet;
}

bool OAIOfferClass::is_image_modules_data_Valid() const{
    return m_image_modules_data_isValid;
}

OAIInfoModuleData OAIOfferClass::getInfoModuleData() const {
    return m_info_module_data;
}
void OAIOfferClass::setInfoModuleData(const OAIInfoModuleData &info_module_data) {
    m_info_module_data = info_module_data;
    m_info_module_data_isSet = true;
}

bool OAIOfferClass::is_info_module_data_Set() const{
    return m_info_module_data_isSet;
}

bool OAIOfferClass::is_info_module_data_Valid() const{
    return m_info_module_data_isValid;
}

QString OAIOfferClass::getIssuerName() const {
    return m_issuer_name;
}
void OAIOfferClass::setIssuerName(const QString &issuer_name) {
    m_issuer_name = issuer_name;
    m_issuer_name_isSet = true;
}

bool OAIOfferClass::is_issuer_name_Set() const{
    return m_issuer_name_isSet;
}

bool OAIOfferClass::is_issuer_name_Valid() const{
    return m_issuer_name_isValid;
}

QString OAIOfferClass::getKind() const {
    return m_kind;
}
void OAIOfferClass::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIOfferClass::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIOfferClass::is_kind_Valid() const{
    return m_kind_isValid;
}

OAILinksModuleData OAIOfferClass::getLinksModuleData() const {
    return m_links_module_data;
}
void OAIOfferClass::setLinksModuleData(const OAILinksModuleData &links_module_data) {
    m_links_module_data = links_module_data;
    m_links_module_data_isSet = true;
}

bool OAIOfferClass::is_links_module_data_Set() const{
    return m_links_module_data_isSet;
}

bool OAIOfferClass::is_links_module_data_Valid() const{
    return m_links_module_data_isValid;
}

OAILocalizedString OAIOfferClass::getLocalizedDetails() const {
    return m_localized_details;
}
void OAIOfferClass::setLocalizedDetails(const OAILocalizedString &localized_details) {
    m_localized_details = localized_details;
    m_localized_details_isSet = true;
}

bool OAIOfferClass::is_localized_details_Set() const{
    return m_localized_details_isSet;
}

bool OAIOfferClass::is_localized_details_Valid() const{
    return m_localized_details_isValid;
}

OAILocalizedString OAIOfferClass::getLocalizedFinePrint() const {
    return m_localized_fine_print;
}
void OAIOfferClass::setLocalizedFinePrint(const OAILocalizedString &localized_fine_print) {
    m_localized_fine_print = localized_fine_print;
    m_localized_fine_print_isSet = true;
}

bool OAIOfferClass::is_localized_fine_print_Set() const{
    return m_localized_fine_print_isSet;
}

bool OAIOfferClass::is_localized_fine_print_Valid() const{
    return m_localized_fine_print_isValid;
}

OAILocalizedString OAIOfferClass::getLocalizedIssuerName() const {
    return m_localized_issuer_name;
}
void OAIOfferClass::setLocalizedIssuerName(const OAILocalizedString &localized_issuer_name) {
    m_localized_issuer_name = localized_issuer_name;
    m_localized_issuer_name_isSet = true;
}

bool OAIOfferClass::is_localized_issuer_name_Set() const{
    return m_localized_issuer_name_isSet;
}

bool OAIOfferClass::is_localized_issuer_name_Valid() const{
    return m_localized_issuer_name_isValid;
}

OAILocalizedString OAIOfferClass::getLocalizedProvider() const {
    return m_localized_provider;
}
void OAIOfferClass::setLocalizedProvider(const OAILocalizedString &localized_provider) {
    m_localized_provider = localized_provider;
    m_localized_provider_isSet = true;
}

bool OAIOfferClass::is_localized_provider_Set() const{
    return m_localized_provider_isSet;
}

bool OAIOfferClass::is_localized_provider_Valid() const{
    return m_localized_provider_isValid;
}

OAILocalizedString OAIOfferClass::getLocalizedShortTitle() const {
    return m_localized_short_title;
}
void OAIOfferClass::setLocalizedShortTitle(const OAILocalizedString &localized_short_title) {
    m_localized_short_title = localized_short_title;
    m_localized_short_title_isSet = true;
}

bool OAIOfferClass::is_localized_short_title_Set() const{
    return m_localized_short_title_isSet;
}

bool OAIOfferClass::is_localized_short_title_Valid() const{
    return m_localized_short_title_isValid;
}

OAILocalizedString OAIOfferClass::getLocalizedTitle() const {
    return m_localized_title;
}
void OAIOfferClass::setLocalizedTitle(const OAILocalizedString &localized_title) {
    m_localized_title = localized_title;
    m_localized_title_isSet = true;
}

bool OAIOfferClass::is_localized_title_Set() const{
    return m_localized_title_isSet;
}

bool OAIOfferClass::is_localized_title_Valid() const{
    return m_localized_title_isValid;
}

QList<OAILatLongPoint> OAIOfferClass::getLocations() const {
    return m_locations;
}
void OAIOfferClass::setLocations(const QList<OAILatLongPoint> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIOfferClass::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIOfferClass::is_locations_Valid() const{
    return m_locations_isValid;
}

QList<OAIMessage> OAIOfferClass::getMessages() const {
    return m_messages;
}
void OAIOfferClass::setMessages(const QList<OAIMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIOfferClass::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIOfferClass::is_messages_Valid() const{
    return m_messages_isValid;
}

QString OAIOfferClass::getMultipleDevicesAndHoldersAllowedStatus() const {
    return m_multiple_devices_and_holders_allowed_status;
}
void OAIOfferClass::setMultipleDevicesAndHoldersAllowedStatus(const QString &multiple_devices_and_holders_allowed_status) {
    m_multiple_devices_and_holders_allowed_status = multiple_devices_and_holders_allowed_status;
    m_multiple_devices_and_holders_allowed_status_isSet = true;
}

bool OAIOfferClass::is_multiple_devices_and_holders_allowed_status_Set() const{
    return m_multiple_devices_and_holders_allowed_status_isSet;
}

bool OAIOfferClass::is_multiple_devices_and_holders_allowed_status_Valid() const{
    return m_multiple_devices_and_holders_allowed_status_isValid;
}

QString OAIOfferClass::getProvider() const {
    return m_provider;
}
void OAIOfferClass::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIOfferClass::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIOfferClass::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIOfferClass::getRedemptionChannel() const {
    return m_redemption_channel;
}
void OAIOfferClass::setRedemptionChannel(const QString &redemption_channel) {
    m_redemption_channel = redemption_channel;
    m_redemption_channel_isSet = true;
}

bool OAIOfferClass::is_redemption_channel_Set() const{
    return m_redemption_channel_isSet;
}

bool OAIOfferClass::is_redemption_channel_Valid() const{
    return m_redemption_channel_isValid;
}

QList<QString> OAIOfferClass::getRedemptionIssuers() const {
    return m_redemption_issuers;
}
void OAIOfferClass::setRedemptionIssuers(const QList<QString> &redemption_issuers) {
    m_redemption_issuers = redemption_issuers;
    m_redemption_issuers_isSet = true;
}

bool OAIOfferClass::is_redemption_issuers_Set() const{
    return m_redemption_issuers_isSet;
}

bool OAIOfferClass::is_redemption_issuers_Valid() const{
    return m_redemption_issuers_isValid;
}

OAIReview OAIOfferClass::getReview() const {
    return m_review;
}
void OAIOfferClass::setReview(const OAIReview &review) {
    m_review = review;
    m_review_isSet = true;
}

bool OAIOfferClass::is_review_Set() const{
    return m_review_isSet;
}

bool OAIOfferClass::is_review_Valid() const{
    return m_review_isValid;
}

QString OAIOfferClass::getReviewStatus() const {
    return m_review_status;
}
void OAIOfferClass::setReviewStatus(const QString &review_status) {
    m_review_status = review_status;
    m_review_status_isSet = true;
}

bool OAIOfferClass::is_review_status_Set() const{
    return m_review_status_isSet;
}

bool OAIOfferClass::is_review_status_Valid() const{
    return m_review_status_isValid;
}

OAISecurityAnimation OAIOfferClass::getSecurityAnimation() const {
    return m_security_animation;
}
void OAIOfferClass::setSecurityAnimation(const OAISecurityAnimation &security_animation) {
    m_security_animation = security_animation;
    m_security_animation_isSet = true;
}

bool OAIOfferClass::is_security_animation_Set() const{
    return m_security_animation_isSet;
}

bool OAIOfferClass::is_security_animation_Valid() const{
    return m_security_animation_isValid;
}

QString OAIOfferClass::getShortTitle() const {
    return m_short_title;
}
void OAIOfferClass::setShortTitle(const QString &short_title) {
    m_short_title = short_title;
    m_short_title_isSet = true;
}

bool OAIOfferClass::is_short_title_Set() const{
    return m_short_title_isSet;
}

bool OAIOfferClass::is_short_title_Valid() const{
    return m_short_title_isValid;
}

QList<OAITextModuleData> OAIOfferClass::getTextModulesData() const {
    return m_text_modules_data;
}
void OAIOfferClass::setTextModulesData(const QList<OAITextModuleData> &text_modules_data) {
    m_text_modules_data = text_modules_data;
    m_text_modules_data_isSet = true;
}

bool OAIOfferClass::is_text_modules_data_Set() const{
    return m_text_modules_data_isSet;
}

bool OAIOfferClass::is_text_modules_data_Valid() const{
    return m_text_modules_data_isValid;
}

QString OAIOfferClass::getTitle() const {
    return m_title;
}
void OAIOfferClass::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIOfferClass::is_title_Set() const{
    return m_title_isSet;
}

bool OAIOfferClass::is_title_Valid() const{
    return m_title_isValid;
}

OAIImage OAIOfferClass::getTitleImage() const {
    return m_title_image;
}
void OAIOfferClass::setTitleImage(const OAIImage &title_image) {
    m_title_image = title_image;
    m_title_image_isSet = true;
}

bool OAIOfferClass::is_title_image_Set() const{
    return m_title_image_isSet;
}

bool OAIOfferClass::is_title_image_Valid() const{
    return m_title_image_isValid;
}

QString OAIOfferClass::getVersion() const {
    return m_version;
}
void OAIOfferClass::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIOfferClass::is_version_Set() const{
    return m_version_isSet;
}

bool OAIOfferClass::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIOfferClass::getViewUnlockRequirement() const {
    return m_view_unlock_requirement;
}
void OAIOfferClass::setViewUnlockRequirement(const QString &view_unlock_requirement) {
    m_view_unlock_requirement = view_unlock_requirement;
    m_view_unlock_requirement_isSet = true;
}

bool OAIOfferClass::is_view_unlock_requirement_Set() const{
    return m_view_unlock_requirement_isSet;
}

bool OAIOfferClass::is_view_unlock_requirement_Valid() const{
    return m_view_unlock_requirement_isValid;
}

OAIImage OAIOfferClass::getWideTitleImage() const {
    return m_wide_title_image;
}
void OAIOfferClass::setWideTitleImage(const OAIImage &wide_title_image) {
    m_wide_title_image = wide_title_image;
    m_wide_title_image_isSet = true;
}

bool OAIOfferClass::is_wide_title_image_Set() const{
    return m_wide_title_image_isSet;
}

bool OAIOfferClass::is_wide_title_image_Valid() const{
    return m_wide_title_image_isValid;
}

OAIImage OAIOfferClass::getWordMark() const {
    return m_word_mark;
}
void OAIOfferClass::setWordMark(const OAIImage &word_mark) {
    m_word_mark = word_mark;
    m_word_mark_isSet = true;
}

bool OAIOfferClass::is_word_mark_Set() const{
    return m_word_mark_isSet;
}

bool OAIOfferClass::is_word_mark_Valid() const{
    return m_word_mark_isValid;
}

bool OAIOfferClass::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_multiple_users_per_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_template_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_smart_tap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fine_print_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_help_uri.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hero_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hex_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_homepage_uri.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_modules_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_module_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_module_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_fine_print.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_issuer_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_short_title.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_title.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_devices_and_holders_allowed_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_issuers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_review.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_animation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_modules_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_unlock_requirement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wide_title_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_mark.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfferClass::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
