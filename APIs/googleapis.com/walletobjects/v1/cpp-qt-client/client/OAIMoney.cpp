/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMoney.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMoney::OAIMoney(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMoney::OAIMoney() {
    this->initializeModel();
}

OAIMoney::~OAIMoney() {}

void OAIMoney::initializeModel() {

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_micros_isSet = false;
    m_micros_isValid = false;
}

void OAIMoney::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMoney::fromJsonObject(QJsonObject json) {

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_micros_isValid = ::OpenAPI::fromJsonValue(m_micros, json[QString("micros")]);
    m_micros_isSet = !json[QString("micros")].isNull() && m_micros_isValid;
}

QString OAIMoney::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMoney::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_micros_isSet) {
        obj.insert(QString("micros"), ::OpenAPI::toJsonValue(m_micros));
    }
    return obj;
}

QString OAIMoney::getCurrencyCode() const {
    return m_currency_code;
}
void OAIMoney::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIMoney::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIMoney::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIMoney::getKind() const {
    return m_kind;
}
void OAIMoney::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIMoney::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIMoney::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIMoney::getMicros() const {
    return m_micros;
}
void OAIMoney::setMicros(const QString &micros) {
    m_micros = micros;
    m_micros_isSet = true;
}

bool OAIMoney::is_micros_Set() const{
    return m_micros_isSet;
}

bool OAIMoney::is_micros_Valid() const{
    return m_micros_isValid;
}

bool OAIMoney::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_micros_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMoney::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
