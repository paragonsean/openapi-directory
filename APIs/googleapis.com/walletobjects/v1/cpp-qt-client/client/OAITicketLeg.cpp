/**
 * Google Wallet API
 * API for issuers to save and manage Google Wallet Objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITicketLeg.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITicketLeg::OAITicketLeg(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITicketLeg::OAITicketLeg() {
    this->initializeModel();
}

OAITicketLeg::~OAITicketLeg() {}

void OAITicketLeg::initializeModel() {

    m_arrival_date_time_isSet = false;
    m_arrival_date_time_isValid = false;

    m_carriage_isSet = false;
    m_carriage_isValid = false;

    m_departure_date_time_isSet = false;
    m_departure_date_time_isValid = false;

    m_destination_name_isSet = false;
    m_destination_name_isValid = false;

    m_destination_station_code_isSet = false;
    m_destination_station_code_isValid = false;

    m_fare_name_isSet = false;
    m_fare_name_isValid = false;

    m_origin_name_isSet = false;
    m_origin_name_isValid = false;

    m_origin_station_code_isSet = false;
    m_origin_station_code_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_ticket_seat_isSet = false;
    m_ticket_seat_isValid = false;

    m_ticket_seats_isSet = false;
    m_ticket_seats_isValid = false;

    m_transit_operator_name_isSet = false;
    m_transit_operator_name_isValid = false;

    m_transit_terminus_name_isSet = false;
    m_transit_terminus_name_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAITicketLeg::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITicketLeg::fromJsonObject(QJsonObject json) {

    m_arrival_date_time_isValid = ::OpenAPI::fromJsonValue(m_arrival_date_time, json[QString("arrivalDateTime")]);
    m_arrival_date_time_isSet = !json[QString("arrivalDateTime")].isNull() && m_arrival_date_time_isValid;

    m_carriage_isValid = ::OpenAPI::fromJsonValue(m_carriage, json[QString("carriage")]);
    m_carriage_isSet = !json[QString("carriage")].isNull() && m_carriage_isValid;

    m_departure_date_time_isValid = ::OpenAPI::fromJsonValue(m_departure_date_time, json[QString("departureDateTime")]);
    m_departure_date_time_isSet = !json[QString("departureDateTime")].isNull() && m_departure_date_time_isValid;

    m_destination_name_isValid = ::OpenAPI::fromJsonValue(m_destination_name, json[QString("destinationName")]);
    m_destination_name_isSet = !json[QString("destinationName")].isNull() && m_destination_name_isValid;

    m_destination_station_code_isValid = ::OpenAPI::fromJsonValue(m_destination_station_code, json[QString("destinationStationCode")]);
    m_destination_station_code_isSet = !json[QString("destinationStationCode")].isNull() && m_destination_station_code_isValid;

    m_fare_name_isValid = ::OpenAPI::fromJsonValue(m_fare_name, json[QString("fareName")]);
    m_fare_name_isSet = !json[QString("fareName")].isNull() && m_fare_name_isValid;

    m_origin_name_isValid = ::OpenAPI::fromJsonValue(m_origin_name, json[QString("originName")]);
    m_origin_name_isSet = !json[QString("originName")].isNull() && m_origin_name_isValid;

    m_origin_station_code_isValid = ::OpenAPI::fromJsonValue(m_origin_station_code, json[QString("originStationCode")]);
    m_origin_station_code_isSet = !json[QString("originStationCode")].isNull() && m_origin_station_code_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_ticket_seat_isValid = ::OpenAPI::fromJsonValue(m_ticket_seat, json[QString("ticketSeat")]);
    m_ticket_seat_isSet = !json[QString("ticketSeat")].isNull() && m_ticket_seat_isValid;

    m_ticket_seats_isValid = ::OpenAPI::fromJsonValue(m_ticket_seats, json[QString("ticketSeats")]);
    m_ticket_seats_isSet = !json[QString("ticketSeats")].isNull() && m_ticket_seats_isValid;

    m_transit_operator_name_isValid = ::OpenAPI::fromJsonValue(m_transit_operator_name, json[QString("transitOperatorName")]);
    m_transit_operator_name_isSet = !json[QString("transitOperatorName")].isNull() && m_transit_operator_name_isValid;

    m_transit_terminus_name_isValid = ::OpenAPI::fromJsonValue(m_transit_terminus_name, json[QString("transitTerminusName")]);
    m_transit_terminus_name_isSet = !json[QString("transitTerminusName")].isNull() && m_transit_terminus_name_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAITicketLeg::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITicketLeg::asJsonObject() const {
    QJsonObject obj;
    if (m_arrival_date_time_isSet) {
        obj.insert(QString("arrivalDateTime"), ::OpenAPI::toJsonValue(m_arrival_date_time));
    }
    if (m_carriage_isSet) {
        obj.insert(QString("carriage"), ::OpenAPI::toJsonValue(m_carriage));
    }
    if (m_departure_date_time_isSet) {
        obj.insert(QString("departureDateTime"), ::OpenAPI::toJsonValue(m_departure_date_time));
    }
    if (m_destination_name.isSet()) {
        obj.insert(QString("destinationName"), ::OpenAPI::toJsonValue(m_destination_name));
    }
    if (m_destination_station_code_isSet) {
        obj.insert(QString("destinationStationCode"), ::OpenAPI::toJsonValue(m_destination_station_code));
    }
    if (m_fare_name.isSet()) {
        obj.insert(QString("fareName"), ::OpenAPI::toJsonValue(m_fare_name));
    }
    if (m_origin_name.isSet()) {
        obj.insert(QString("originName"), ::OpenAPI::toJsonValue(m_origin_name));
    }
    if (m_origin_station_code_isSet) {
        obj.insert(QString("originStationCode"), ::OpenAPI::toJsonValue(m_origin_station_code));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_ticket_seat.isSet()) {
        obj.insert(QString("ticketSeat"), ::OpenAPI::toJsonValue(m_ticket_seat));
    }
    if (m_ticket_seats.size() > 0) {
        obj.insert(QString("ticketSeats"), ::OpenAPI::toJsonValue(m_ticket_seats));
    }
    if (m_transit_operator_name.isSet()) {
        obj.insert(QString("transitOperatorName"), ::OpenAPI::toJsonValue(m_transit_operator_name));
    }
    if (m_transit_terminus_name.isSet()) {
        obj.insert(QString("transitTerminusName"), ::OpenAPI::toJsonValue(m_transit_terminus_name));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QString OAITicketLeg::getArrivalDateTime() const {
    return m_arrival_date_time;
}
void OAITicketLeg::setArrivalDateTime(const QString &arrival_date_time) {
    m_arrival_date_time = arrival_date_time;
    m_arrival_date_time_isSet = true;
}

bool OAITicketLeg::is_arrival_date_time_Set() const{
    return m_arrival_date_time_isSet;
}

bool OAITicketLeg::is_arrival_date_time_Valid() const{
    return m_arrival_date_time_isValid;
}

QString OAITicketLeg::getCarriage() const {
    return m_carriage;
}
void OAITicketLeg::setCarriage(const QString &carriage) {
    m_carriage = carriage;
    m_carriage_isSet = true;
}

bool OAITicketLeg::is_carriage_Set() const{
    return m_carriage_isSet;
}

bool OAITicketLeg::is_carriage_Valid() const{
    return m_carriage_isValid;
}

QString OAITicketLeg::getDepartureDateTime() const {
    return m_departure_date_time;
}
void OAITicketLeg::setDepartureDateTime(const QString &departure_date_time) {
    m_departure_date_time = departure_date_time;
    m_departure_date_time_isSet = true;
}

bool OAITicketLeg::is_departure_date_time_Set() const{
    return m_departure_date_time_isSet;
}

bool OAITicketLeg::is_departure_date_time_Valid() const{
    return m_departure_date_time_isValid;
}

OAILocalizedString OAITicketLeg::getDestinationName() const {
    return m_destination_name;
}
void OAITicketLeg::setDestinationName(const OAILocalizedString &destination_name) {
    m_destination_name = destination_name;
    m_destination_name_isSet = true;
}

bool OAITicketLeg::is_destination_name_Set() const{
    return m_destination_name_isSet;
}

bool OAITicketLeg::is_destination_name_Valid() const{
    return m_destination_name_isValid;
}

QString OAITicketLeg::getDestinationStationCode() const {
    return m_destination_station_code;
}
void OAITicketLeg::setDestinationStationCode(const QString &destination_station_code) {
    m_destination_station_code = destination_station_code;
    m_destination_station_code_isSet = true;
}

bool OAITicketLeg::is_destination_station_code_Set() const{
    return m_destination_station_code_isSet;
}

bool OAITicketLeg::is_destination_station_code_Valid() const{
    return m_destination_station_code_isValid;
}

OAILocalizedString OAITicketLeg::getFareName() const {
    return m_fare_name;
}
void OAITicketLeg::setFareName(const OAILocalizedString &fare_name) {
    m_fare_name = fare_name;
    m_fare_name_isSet = true;
}

bool OAITicketLeg::is_fare_name_Set() const{
    return m_fare_name_isSet;
}

bool OAITicketLeg::is_fare_name_Valid() const{
    return m_fare_name_isValid;
}

OAILocalizedString OAITicketLeg::getOriginName() const {
    return m_origin_name;
}
void OAITicketLeg::setOriginName(const OAILocalizedString &origin_name) {
    m_origin_name = origin_name;
    m_origin_name_isSet = true;
}

bool OAITicketLeg::is_origin_name_Set() const{
    return m_origin_name_isSet;
}

bool OAITicketLeg::is_origin_name_Valid() const{
    return m_origin_name_isValid;
}

QString OAITicketLeg::getOriginStationCode() const {
    return m_origin_station_code;
}
void OAITicketLeg::setOriginStationCode(const QString &origin_station_code) {
    m_origin_station_code = origin_station_code;
    m_origin_station_code_isSet = true;
}

bool OAITicketLeg::is_origin_station_code_Set() const{
    return m_origin_station_code_isSet;
}

bool OAITicketLeg::is_origin_station_code_Valid() const{
    return m_origin_station_code_isValid;
}

QString OAITicketLeg::getPlatform() const {
    return m_platform;
}
void OAITicketLeg::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAITicketLeg::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAITicketLeg::is_platform_Valid() const{
    return m_platform_isValid;
}

OAITicketSeat OAITicketLeg::getTicketSeat() const {
    return m_ticket_seat;
}
void OAITicketLeg::setTicketSeat(const OAITicketSeat &ticket_seat) {
    m_ticket_seat = ticket_seat;
    m_ticket_seat_isSet = true;
}

bool OAITicketLeg::is_ticket_seat_Set() const{
    return m_ticket_seat_isSet;
}

bool OAITicketLeg::is_ticket_seat_Valid() const{
    return m_ticket_seat_isValid;
}

QList<OAITicketSeat> OAITicketLeg::getTicketSeats() const {
    return m_ticket_seats;
}
void OAITicketLeg::setTicketSeats(const QList<OAITicketSeat> &ticket_seats) {
    m_ticket_seats = ticket_seats;
    m_ticket_seats_isSet = true;
}

bool OAITicketLeg::is_ticket_seats_Set() const{
    return m_ticket_seats_isSet;
}

bool OAITicketLeg::is_ticket_seats_Valid() const{
    return m_ticket_seats_isValid;
}

OAILocalizedString OAITicketLeg::getTransitOperatorName() const {
    return m_transit_operator_name;
}
void OAITicketLeg::setTransitOperatorName(const OAILocalizedString &transit_operator_name) {
    m_transit_operator_name = transit_operator_name;
    m_transit_operator_name_isSet = true;
}

bool OAITicketLeg::is_transit_operator_name_Set() const{
    return m_transit_operator_name_isSet;
}

bool OAITicketLeg::is_transit_operator_name_Valid() const{
    return m_transit_operator_name_isValid;
}

OAILocalizedString OAITicketLeg::getTransitTerminusName() const {
    return m_transit_terminus_name;
}
void OAITicketLeg::setTransitTerminusName(const OAILocalizedString &transit_terminus_name) {
    m_transit_terminus_name = transit_terminus_name;
    m_transit_terminus_name_isSet = true;
}

bool OAITicketLeg::is_transit_terminus_name_Set() const{
    return m_transit_terminus_name_isSet;
}

bool OAITicketLeg::is_transit_terminus_name_Valid() const{
    return m_transit_terminus_name_isValid;
}

QString OAITicketLeg::getZone() const {
    return m_zone;
}
void OAITicketLeg::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAITicketLeg::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAITicketLeg::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAITicketLeg::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arrival_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carriage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_station_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fare_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_station_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticket_seat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticket_seats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transit_operator_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transit_terminus_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITicketLeg::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
