/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AnalyzeEntitiesRequest model module.
 * @module model/AnalyzeEntitiesRequest
 * @version v1beta1
 */
class AnalyzeEntitiesRequest {
    /**
     * Constructs a new <code>AnalyzeEntitiesRequest</code>.
     * The request to analyze healthcare entities in a document.
     * @alias module:model/AnalyzeEntitiesRequest
     */
    constructor() { 
        
        AnalyzeEntitiesRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnalyzeEntitiesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnalyzeEntitiesRequest} obj Optional instance to populate.
     * @return {module:model/AnalyzeEntitiesRequest} The populated <code>AnalyzeEntitiesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnalyzeEntitiesRequest();

            if (data.hasOwnProperty('alternativeOutputFormat')) {
                obj['alternativeOutputFormat'] = ApiClient.convertToType(data['alternativeOutputFormat'], 'String');
            }
            if (data.hasOwnProperty('documentContent')) {
                obj['documentContent'] = ApiClient.convertToType(data['documentContent'], 'String');
            }
            if (data.hasOwnProperty('licensedVocabularies')) {
                obj['licensedVocabularies'] = ApiClient.convertToType(data['licensedVocabularies'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnalyzeEntitiesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnalyzeEntitiesRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alternativeOutputFormat'] && !(typeof data['alternativeOutputFormat'] === 'string' || data['alternativeOutputFormat'] instanceof String)) {
            throw new Error("Expected the field `alternativeOutputFormat` to be a primitive type in the JSON string but got " + data['alternativeOutputFormat']);
        }
        // ensure the json data is a string
        if (data['documentContent'] && !(typeof data['documentContent'] === 'string' || data['documentContent'] instanceof String)) {
            throw new Error("Expected the field `documentContent` to be a primitive type in the JSON string but got " + data['documentContent']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['licensedVocabularies'])) {
            throw new Error("Expected the field `licensedVocabularies` to be an array in the JSON data but got " + data['licensedVocabularies']);
        }

        return true;
    }


}



/**
 * Optional. Alternative output format to be generated based on the results of analysis.
 * @member {module:model/AnalyzeEntitiesRequest.AlternativeOutputFormatEnum} alternativeOutputFormat
 */
AnalyzeEntitiesRequest.prototype['alternativeOutputFormat'] = undefined;

/**
 * document_content is a document to be annotated.
 * @member {String} documentContent
 */
AnalyzeEntitiesRequest.prototype['documentContent'] = undefined;

/**
 * A list of licensed vocabularies to use in the request, in addition to the default unlicensed vocabularies.
 * @member {Array.<module:model/AnalyzeEntitiesRequest.LicensedVocabulariesEnum>} licensedVocabularies
 */
AnalyzeEntitiesRequest.prototype['licensedVocabularies'] = undefined;





/**
 * Allowed values for the <code>alternativeOutputFormat</code> property.
 * @enum {String}
 * @readonly
 */
AnalyzeEntitiesRequest['AlternativeOutputFormatEnum'] = {

    /**
     * value: "ALTERNATIVE_OUTPUT_FORMAT_UNSPECIFIED"
     * @const
     */
    "ALTERNATIVE_OUTPUT_FORMAT_UNSPECIFIED": "ALTERNATIVE_OUTPUT_FORMAT_UNSPECIFIED",

    /**
     * value: "FHIR_BUNDLE"
     * @const
     */
    "FHIR_BUNDLE": "FHIR_BUNDLE"
};


/**
 * Allowed values for the <code>licensedVocabularies</code> property.
 * @enum {String}
 * @readonly
 */
AnalyzeEntitiesRequest['LicensedVocabulariesEnum'] = {

    /**
     * value: "LICENSED_VOCABULARY_UNSPECIFIED"
     * @const
     */
    "LICENSED_VOCABULARY_UNSPECIFIED": "LICENSED_VOCABULARY_UNSPECIFIED",

    /**
     * value: "ICD10CM"
     * @const
     */
    "ICD10CM": "ICD10CM",

    /**
     * value: "SNOMEDCT_US"
     * @const
     */
    "SNOMEDCT_US": "SNOMEDCT_US"
};



export default AnalyzeEntitiesRequest;

