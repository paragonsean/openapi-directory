/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ActivateConsentRequest model module.
 * @module model/ActivateConsentRequest
 * @version v1beta1
 */
class ActivateConsentRequest {
    /**
     * Constructs a new <code>ActivateConsentRequest</code>.
     * Activates the latest revision of the specified Consent by committing a new revision with &#x60;state&#x60; updated to &#x60;ACTIVE&#x60;. If the latest revision of the given Consent is in the &#x60;ACTIVE&#x60; state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the given consent is in the &#x60;REJECTED&#x60; or &#x60;REVOKED&#x60; state.
     * @alias module:model/ActivateConsentRequest
     */
    constructor() { 
        
        ActivateConsentRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ActivateConsentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActivateConsentRequest} obj Optional instance to populate.
     * @return {module:model/ActivateConsentRequest} The populated <code>ActivateConsentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActivateConsentRequest();

            if (data.hasOwnProperty('consentArtifact')) {
                obj['consentArtifact'] = ApiClient.convertToType(data['consentArtifact'], 'String');
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'String');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActivateConsentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActivateConsentRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['consentArtifact'] && !(typeof data['consentArtifact'] === 'string' || data['consentArtifact'] instanceof String)) {
            throw new Error("Expected the field `consentArtifact` to be a primitive type in the JSON string but got " + data['consentArtifact']);
        }
        // ensure the json data is a string
        if (data['expireTime'] && !(typeof data['expireTime'] === 'string' || data['expireTime'] instanceof String)) {
            throw new Error("Expected the field `expireTime` to be a primitive type in the JSON string but got " + data['expireTime']);
        }
        // ensure the json data is a string
        if (data['ttl'] && !(typeof data['ttl'] === 'string' || data['ttl'] instanceof String)) {
            throw new Error("Expected the field `ttl` to be a primitive type in the JSON string but got " + data['ttl']);
        }

        return true;
    }


}



/**
 * Required. The resource name of the Consent artifact that contains documentation of the user's consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`. If the draft Consent had a Consent artifact, this Consent artifact overwrites it.
 * @member {String} consentArtifact
 */
ActivateConsentRequest.prototype['consentArtifact'] = undefined;

/**
 * Timestamp in UTC of when this Consent is considered expired.
 * @member {String} expireTime
 */
ActivateConsentRequest.prototype['expireTime'] = undefined;

/**
 * The time to live for this Consent from when it is marked as active.
 * @member {String} ttl
 */
ActivateConsentRequest.prototype['ttl'] = undefined;






export default ActivateConsentRequest;

