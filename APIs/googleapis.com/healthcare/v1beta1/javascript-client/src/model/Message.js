/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ParsedData from './ParsedData';
import PatientId from './PatientId';
import SchematizedData from './SchematizedData';

/**
 * The Message model module.
 * @module model/Message
 * @version v1beta1
 */
class Message {
    /**
     * Constructs a new <code>Message</code>.
     * A complete HL7v2 message. See [Introduction to HL7 Standards] (https://www.hl7.org/implement/standards/index.cfm?ref&#x3D;common) for details on the standard.
     * @alias module:model/Message
     */
    constructor() { 
        
        Message.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Message</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Message} obj Optional instance to populate.
     * @return {module:model/Message} The populated <code>Message</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Message();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'Blob');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('messageType')) {
                obj['messageType'] = ApiClient.convertToType(data['messageType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parsedData')) {
                obj['parsedData'] = ParsedData.constructFromObject(data['parsedData']);
            }
            if (data.hasOwnProperty('patientIds')) {
                obj['patientIds'] = ApiClient.convertToType(data['patientIds'], [PatientId]);
            }
            if (data.hasOwnProperty('schematizedData')) {
                obj['schematizedData'] = SchematizedData.constructFromObject(data['schematizedData']);
            }
            if (data.hasOwnProperty('sendFacility')) {
                obj['sendFacility'] = ApiClient.convertToType(data['sendFacility'], 'String');
            }
            if (data.hasOwnProperty('sendTime')) {
                obj['sendTime'] = ApiClient.convertToType(data['sendTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Message</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Message</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['messageType'] && !(typeof data['messageType'] === 'string' || data['messageType'] instanceof String)) {
            throw new Error("Expected the field `messageType` to be a primitive type in the JSON string but got " + data['messageType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `parsedData`
        if (data['parsedData']) { // data not null
          ParsedData.validateJSON(data['parsedData']);
        }
        if (data['patientIds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['patientIds'])) {
                throw new Error("Expected the field `patientIds` to be an array in the JSON data but got " + data['patientIds']);
            }
            // validate the optional field `patientIds` (array)
            for (const item of data['patientIds']) {
                PatientId.validateJSON(item);
            };
        }
        // validate the optional field `schematizedData`
        if (data['schematizedData']) { // data not null
          SchematizedData.validateJSON(data['schematizedData']);
        }
        // ensure the json data is a string
        if (data['sendFacility'] && !(typeof data['sendFacility'] === 'string' || data['sendFacility'] instanceof String)) {
            throw new Error("Expected the field `sendFacility` to be a primitive type in the JSON string but got " + data['sendFacility']);
        }
        // ensure the json data is a string
        if (data['sendTime'] && !(typeof data['sendTime'] === 'string' || data['sendTime'] instanceof String)) {
            throw new Error("Expected the field `sendTime` to be a primitive type in the JSON string but got " + data['sendTime']);
        }

        return true;
    }


}



/**
 * Output only. The datetime when the message was created. Set by the server.
 * @member {String} createTime
 */
Message.prototype['createTime'] = undefined;

/**
 * Required. Raw message bytes.
 * @member {Blob} data
 */
Message.prototype['data'] = undefined;

/**
 * User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
 * @member {Object.<String, String>} labels
 */
Message.prototype['labels'] = undefined;

/**
 * The message type for this message. MSH-9.1.
 * @member {String} messageType
 */
Message.prototype['messageType'] = undefined;

/**
 * Output only. Resource name of the Message, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`. Assigned by the server.
 * @member {String} name
 */
Message.prototype['name'] = undefined;

/**
 * @member {module:model/ParsedData} parsedData
 */
Message.prototype['parsedData'] = undefined;

/**
 * All patient IDs listed in the PID-2, PID-3, and PID-4 segments of this message.
 * @member {Array.<module:model/PatientId>} patientIds
 */
Message.prototype['patientIds'] = undefined;

/**
 * @member {module:model/SchematizedData} schematizedData
 */
Message.prototype['schematizedData'] = undefined;

/**
 * The hospital that this message came from. MSH-4.
 * @member {String} sendFacility
 */
Message.prototype['sendFacility'] = undefined;

/**
 * The datetime the sending application sent this message. MSH-7.
 * @member {String} sendTime
 */
Message.prototype['sendTime'] = undefined;






export default Message;

