/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConsentAccessorScope from './ConsentAccessorScope';

/**
 * The ExplainDataAccessConsentInfo model module.
 * @module model/ExplainDataAccessConsentInfo
 * @version v1beta1
 */
class ExplainDataAccessConsentInfo {
    /**
     * Constructs a new <code>ExplainDataAccessConsentInfo</code>.
     * The enforcing consent&#39;s metadata.
     * @alias module:model/ExplainDataAccessConsentInfo
     */
    constructor() { 
        
        ExplainDataAccessConsentInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExplainDataAccessConsentInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExplainDataAccessConsentInfo} obj Optional instance to populate.
     * @return {module:model/ExplainDataAccessConsentInfo} The populated <code>ExplainDataAccessConsentInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExplainDataAccessConsentInfo();

            if (data.hasOwnProperty('cascadeOrigins')) {
                obj['cascadeOrigins'] = ApiClient.convertToType(data['cascadeOrigins'], ['String']);
            }
            if (data.hasOwnProperty('consentResource')) {
                obj['consentResource'] = ApiClient.convertToType(data['consentResource'], 'String');
            }
            if (data.hasOwnProperty('enforcementTime')) {
                obj['enforcementTime'] = ApiClient.convertToType(data['enforcementTime'], 'String');
            }
            if (data.hasOwnProperty('matchingAccessorScopes')) {
                obj['matchingAccessorScopes'] = ApiClient.convertToType(data['matchingAccessorScopes'], [ConsentAccessorScope]);
            }
            if (data.hasOwnProperty('patientConsentOwner')) {
                obj['patientConsentOwner'] = ApiClient.convertToType(data['patientConsentOwner'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('variants')) {
                obj['variants'] = ApiClient.convertToType(data['variants'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExplainDataAccessConsentInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExplainDataAccessConsentInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['cascadeOrigins'])) {
            throw new Error("Expected the field `cascadeOrigins` to be an array in the JSON data but got " + data['cascadeOrigins']);
        }
        // ensure the json data is a string
        if (data['consentResource'] && !(typeof data['consentResource'] === 'string' || data['consentResource'] instanceof String)) {
            throw new Error("Expected the field `consentResource` to be a primitive type in the JSON string but got " + data['consentResource']);
        }
        // ensure the json data is a string
        if (data['enforcementTime'] && !(typeof data['enforcementTime'] === 'string' || data['enforcementTime'] instanceof String)) {
            throw new Error("Expected the field `enforcementTime` to be a primitive type in the JSON string but got " + data['enforcementTime']);
        }
        if (data['matchingAccessorScopes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['matchingAccessorScopes'])) {
                throw new Error("Expected the field `matchingAccessorScopes` to be an array in the JSON data but got " + data['matchingAccessorScopes']);
            }
            // validate the optional field `matchingAccessorScopes` (array)
            for (const item of data['matchingAccessorScopes']) {
                ConsentAccessorScope.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['patientConsentOwner'] && !(typeof data['patientConsentOwner'] === 'string' || data['patientConsentOwner'] instanceof String)) {
            throw new Error("Expected the field `patientConsentOwner` to be a primitive type in the JSON string but got " + data['patientConsentOwner']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['variants'])) {
            throw new Error("Expected the field `variants` to be an array in the JSON data but got " + data['variants']);
        }

        return true;
    }


}



/**
 * The compartment base resources that matched a cascading policy. Each resource has the following format: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/{resource_type}/{resource_id}`
 * @member {Array.<String>} cascadeOrigins
 */
ExplainDataAccessConsentInfo.prototype['cascadeOrigins'] = undefined;

/**
 * The resource name of this consent resource. Format: `projects/{projectId}/datasets/{datasetId}/fhirStores/{fhirStoreId}/fhir/{resourceType}/{id}`.
 * @member {String} consentResource
 */
ExplainDataAccessConsentInfo.prototype['consentResource'] = undefined;

/**
 * Last enforcement timestamp of this consent resource.
 * @member {String} enforcementTime
 */
ExplainDataAccessConsentInfo.prototype['enforcementTime'] = undefined;

/**
 * A list of all the matching accessor scopes of this consent policy that enforced ExplainDataAccessConsentScope.accessor_scope.
 * @member {Array.<module:model/ConsentAccessorScope>} matchingAccessorScopes
 */
ExplainDataAccessConsentInfo.prototype['matchingAccessorScopes'] = undefined;

/**
 * The patient owning the consent (only applicable for patient consents), in the format: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Patient/{patient_id}`
 * @member {String} patientConsentOwner
 */
ExplainDataAccessConsentInfo.prototype['patientConsentOwner'] = undefined;

/**
 * The policy type of consent resource (e.g. PATIENT, ADMIN).
 * @member {module:model/ExplainDataAccessConsentInfo.TypeEnum} type
 */
ExplainDataAccessConsentInfo.prototype['type'] = undefined;

/**
 * The consent's variant combinations. A single consent may have multiple variants.
 * @member {Array.<module:model/ExplainDataAccessConsentInfo.VariantsEnum>} variants
 */
ExplainDataAccessConsentInfo.prototype['variants'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ExplainDataAccessConsentInfo['TypeEnum'] = {

    /**
     * value: "CONSENT_POLICY_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "CONSENT_POLICY_TYPE_UNSPECIFIED",

    /**
     * value: "CONSENT_POLICY_TYPE_PATIENT"
     * @const
     */
    "PATIENT": "CONSENT_POLICY_TYPE_PATIENT",

    /**
     * value: "CONSENT_POLICY_TYPE_ADMIN"
     * @const
     */
    "ADMIN": "CONSENT_POLICY_TYPE_ADMIN"
};


/**
 * Allowed values for the <code>variants</code> property.
 * @enum {String}
 * @readonly
 */
ExplainDataAccessConsentInfo['VariantsEnum'] = {

    /**
     * value: "VARIANT_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "VARIANT_UNSPECIFIED",

    /**
     * value: "VARIANT_STANDARD"
     * @const
     */
    "STANDARD": "VARIANT_STANDARD",

    /**
     * value: "VARIANT_CASCADE"
     * @const
     */
    "CASCADE": "VARIANT_CASCADE"
};



export default ExplainDataAccessConsentInfo;

