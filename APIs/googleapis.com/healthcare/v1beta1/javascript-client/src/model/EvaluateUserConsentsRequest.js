/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConsentList from './ConsentList';

/**
 * The EvaluateUserConsentsRequest model module.
 * @module model/EvaluateUserConsentsRequest
 * @version v1beta1
 */
class EvaluateUserConsentsRequest {
    /**
     * Constructs a new <code>EvaluateUserConsentsRequest</code>.
     * Evaluate a user&#39;s Consents for all matching User data mappings. Note: User data mappings are indexed asynchronously, causing slight delays between the time mappings are created or updated and when they are included in EvaluateUserConsents results.
     * @alias module:model/EvaluateUserConsentsRequest
     */
    constructor() { 
        
        EvaluateUserConsentsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EvaluateUserConsentsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EvaluateUserConsentsRequest} obj Optional instance to populate.
     * @return {module:model/EvaluateUserConsentsRequest} The populated <code>EvaluateUserConsentsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EvaluateUserConsentsRequest();

            if (data.hasOwnProperty('consentList')) {
                obj['consentList'] = ConsentList.constructFromObject(data['consentList']);
            }
            if (data.hasOwnProperty('pageSize')) {
                obj['pageSize'] = ApiClient.convertToType(data['pageSize'], 'Number');
            }
            if (data.hasOwnProperty('pageToken')) {
                obj['pageToken'] = ApiClient.convertToType(data['pageToken'], 'String');
            }
            if (data.hasOwnProperty('requestAttributes')) {
                obj['requestAttributes'] = ApiClient.convertToType(data['requestAttributes'], {'String': 'String'});
            }
            if (data.hasOwnProperty('resourceAttributes')) {
                obj['resourceAttributes'] = ApiClient.convertToType(data['resourceAttributes'], {'String': 'String'});
            }
            if (data.hasOwnProperty('responseView')) {
                obj['responseView'] = ApiClient.convertToType(data['responseView'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EvaluateUserConsentsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EvaluateUserConsentsRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `consentList`
        if (data['consentList']) { // data not null
          ConsentList.validateJSON(data['consentList']);
        }
        // ensure the json data is a string
        if (data['pageToken'] && !(typeof data['pageToken'] === 'string' || data['pageToken'] instanceof String)) {
            throw new Error("Expected the field `pageToken` to be a primitive type in the JSON string but got " + data['pageToken']);
        }
        // ensure the json data is a string
        if (data['responseView'] && !(typeof data['responseView'] === 'string' || data['responseView'] instanceof String)) {
            throw new Error("Expected the field `responseView` to be a primitive type in the JSON string but got " + data['responseView']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * @member {module:model/ConsentList} consentList
 */
EvaluateUserConsentsRequest.prototype['consentList'] = undefined;

/**
 * Optional. Limit on the number of User data mappings to return in a single response. If not specified, 100 is used. May not be larger than 1000.
 * @member {Number} pageSize
 */
EvaluateUserConsentsRequest.prototype['pageSize'] = undefined;

/**
 * Optional. Token to retrieve the next page of results, or empty to get the first page.
 * @member {String} pageToken
 */
EvaluateUserConsentsRequest.prototype['pageToken'] = undefined;

/**
 * Required. The values of request attributes associated with this access request.
 * @member {Object.<String, String>} requestAttributes
 */
EvaluateUserConsentsRequest.prototype['requestAttributes'] = undefined;

/**
 * Optional. The values of resource attributes associated with the resources being requested. If no values are specified, then all resources are queried.
 * @member {Object.<String, String>} resourceAttributes
 */
EvaluateUserConsentsRequest.prototype['resourceAttributes'] = undefined;

/**
 * Optional. The view for EvaluateUserConsentsResponse. If unspecified, defaults to `BASIC` and returns `consented` as `TRUE` or `FALSE`.
 * @member {module:model/EvaluateUserConsentsRequest.ResponseViewEnum} responseView
 */
EvaluateUserConsentsRequest.prototype['responseView'] = undefined;

/**
 * Required. User ID to evaluate consents for.
 * @member {String} userId
 */
EvaluateUserConsentsRequest.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>responseView</code> property.
 * @enum {String}
 * @readonly
 */
EvaluateUserConsentsRequest['ResponseViewEnum'] = {

    /**
     * value: "RESPONSE_VIEW_UNSPECIFIED"
     * @const
     */
    "RESPONSE_VIEW_UNSPECIFIED": "RESPONSE_VIEW_UNSPECIFIED",

    /**
     * value: "BASIC"
     * @const
     */
    "BASIC": "BASIC",

    /**
     * value: "FULL"
     * @const
     */
    "FULL": "FULL"
};



export default EvaluateUserConsentsRequest;

