/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccessDeterminationLogConfig from './AccessDeterminationLogConfig';
import ConsentHeaderHandling from './ConsentHeaderHandling';

/**
 * The ConsentConfig model module.
 * @module model/ConsentConfig
 * @version v1beta1
 */
class ConsentConfig {
    /**
     * Constructs a new <code>ConsentConfig</code>.
     * Configures whether to enforce consent for the FHIR store and which consent enforcement version is being used.
     * @alias module:model/ConsentConfig
     */
    constructor() { 
        
        ConsentConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConsentConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConsentConfig} obj Optional instance to populate.
     * @return {module:model/ConsentConfig} The populated <code>ConsentConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConsentConfig();

            if (data.hasOwnProperty('accessDeterminationLogConfig')) {
                obj['accessDeterminationLogConfig'] = AccessDeterminationLogConfig.constructFromObject(data['accessDeterminationLogConfig']);
            }
            if (data.hasOwnProperty('accessEnforced')) {
                obj['accessEnforced'] = ApiClient.convertToType(data['accessEnforced'], 'Boolean');
            }
            if (data.hasOwnProperty('consentHeaderHandling')) {
                obj['consentHeaderHandling'] = ConsentHeaderHandling.constructFromObject(data['consentHeaderHandling']);
            }
            if (data.hasOwnProperty('enforcedAdminConsents')) {
                obj['enforcedAdminConsents'] = ApiClient.convertToType(data['enforcedAdminConsents'], ['String']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConsentConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConsentConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `accessDeterminationLogConfig`
        if (data['accessDeterminationLogConfig']) { // data not null
          AccessDeterminationLogConfig.validateJSON(data['accessDeterminationLogConfig']);
        }
        // validate the optional field `consentHeaderHandling`
        if (data['consentHeaderHandling']) { // data not null
          ConsentHeaderHandling.validateJSON(data['consentHeaderHandling']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['enforcedAdminConsents'])) {
            throw new Error("Expected the field `enforcedAdminConsents` to be an array in the JSON data but got " + data['enforcedAdminConsents']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * @member {module:model/AccessDeterminationLogConfig} accessDeterminationLogConfig
 */
ConsentConfig.prototype['accessDeterminationLogConfig'] = undefined;

/**
 * Optional. If set to true, when accessing FHIR resources, the consent headers will be verified against consents given by patients. See the ConsentEnforcementVersion for the supported consent headers.
 * @member {Boolean} accessEnforced
 */
ConsentConfig.prototype['accessEnforced'] = undefined;

/**
 * @member {module:model/ConsentHeaderHandling} consentHeaderHandling
 */
ConsentConfig.prototype['consentHeaderHandling'] = undefined;

/**
 * The versioned names of the enforced admin Consent resource(s), in the format `projects/{project_id}/locations/{location}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Consent/{resource_id}/_history/{version_id}`. For FHIR stores with `disable_resource_versioning=true`, the format is `projects/{project_id}/locations/{location}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Consent/{resource_id}`. This field can only be updated using ApplyAdminConsents.
 * @member {Array.<String>} enforcedAdminConsents
 */
ConsentConfig.prototype['enforcedAdminConsents'] = undefined;

/**
 * Required. Specifies which consent enforcement version is being used for this FHIR store. This field can only be set once by either CreateFhirStore or UpdateFhirStore. After that, you must call ApplyConsents to change the version.
 * @member {module:model/ConsentConfig.VersionEnum} version
 */
ConsentConfig.prototype['version'] = undefined;





/**
 * Allowed values for the <code>version</code> property.
 * @enum {String}
 * @readonly
 */
ConsentConfig['VersionEnum'] = {

    /**
     * value: "CONSENT_ENFORCEMENT_VERSION_UNSPECIFIED"
     * @const
     */
    "CONSENT_ENFORCEMENT_VERSION_UNSPECIFIED": "CONSENT_ENFORCEMENT_VERSION_UNSPECIFIED",

    /**
     * value: "V1"
     * @const
     */
    "V1": "V1"
};



export default ConsentConfig;

