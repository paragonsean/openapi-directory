/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SchemaPackage from './SchemaPackage';

/**
 * The ParserConfig model module.
 * @module model/ParserConfig
 * @version v1beta1
 */
class ParserConfig {
    /**
     * Constructs a new <code>ParserConfig</code>.
     * The configuration for the parser. It determines how the server parses the messages.
     * @alias module:model/ParserConfig
     */
    constructor() { 
        
        ParserConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ParserConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ParserConfig} obj Optional instance to populate.
     * @return {module:model/ParserConfig} The populated <code>ParserConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ParserConfig();

            if (data.hasOwnProperty('allowNullHeader')) {
                obj['allowNullHeader'] = ApiClient.convertToType(data['allowNullHeader'], 'Boolean');
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = SchemaPackage.constructFromObject(data['schema']);
            }
            if (data.hasOwnProperty('segmentTerminator')) {
                obj['segmentTerminator'] = ApiClient.convertToType(data['segmentTerminator'], 'Blob');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ParserConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ParserConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `schema`
        if (data['schema']) { // data not null
          SchemaPackage.validateJSON(data['schema']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * Determines whether messages with no header are allowed.
 * @member {Boolean} allowNullHeader
 */
ParserConfig.prototype['allowNullHeader'] = undefined;

/**
 * @member {module:model/SchemaPackage} schema
 */
ParserConfig.prototype['schema'] = undefined;

/**
 * Byte(s) to use as the segment terminator. If this is unset, '\\r' is used as segment terminator, matching the HL7 version 2 specification.
 * @member {Blob} segmentTerminator
 */
ParserConfig.prototype['segmentTerminator'] = undefined;

/**
 * Immutable. Determines the version of both the default parser to be used when `schema` is not given, as well as the schematized parser used when `schema` is specified. This field is immutable after HL7v2 store creation.
 * @member {module:model/ParserConfig.VersionEnum} version
 */
ParserConfig.prototype['version'] = undefined;





/**
 * Allowed values for the <code>version</code> property.
 * @enum {String}
 * @readonly
 */
ParserConfig['VersionEnum'] = {

    /**
     * value: "PARSER_VERSION_UNSPECIFIED"
     * @const
     */
    "PARSER_VERSION_UNSPECIFIED": "PARSER_VERSION_UNSPECIFIED",

    /**
     * value: "V1"
     * @const
     */
    "V1": "V1",

    /**
     * value: "V2"
     * @const
     */
    "V2": "V2",

    /**
     * value: "V3"
     * @const
     */
    "V3": "V3"
};



export default ParserConfig;

