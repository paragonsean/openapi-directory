/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Entity from './Entity';
import EntityMention from './EntityMention';
import EntityMentionRelationship from './EntityMentionRelationship';

/**
 * The AnalyzeEntitiesResponse model module.
 * @module model/AnalyzeEntitiesResponse
 * @version v1beta1
 */
class AnalyzeEntitiesResponse {
    /**
     * Constructs a new <code>AnalyzeEntitiesResponse</code>.
     * Includes recognized entity mentions and relationships between them.
     * @alias module:model/AnalyzeEntitiesResponse
     */
    constructor() { 
        
        AnalyzeEntitiesResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnalyzeEntitiesResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnalyzeEntitiesResponse} obj Optional instance to populate.
     * @return {module:model/AnalyzeEntitiesResponse} The populated <code>AnalyzeEntitiesResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnalyzeEntitiesResponse();

            if (data.hasOwnProperty('entities')) {
                obj['entities'] = ApiClient.convertToType(data['entities'], [Entity]);
            }
            if (data.hasOwnProperty('entityMentions')) {
                obj['entityMentions'] = ApiClient.convertToType(data['entityMentions'], [EntityMention]);
            }
            if (data.hasOwnProperty('fhirBundle')) {
                obj['fhirBundle'] = ApiClient.convertToType(data['fhirBundle'], 'String');
            }
            if (data.hasOwnProperty('relationships')) {
                obj['relationships'] = ApiClient.convertToType(data['relationships'], [EntityMentionRelationship]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnalyzeEntitiesResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnalyzeEntitiesResponse</code>.
     */
    static validateJSON(data) {
        if (data['entities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entities'])) {
                throw new Error("Expected the field `entities` to be an array in the JSON data but got " + data['entities']);
            }
            // validate the optional field `entities` (array)
            for (const item of data['entities']) {
                Entity.validateJSON(item);
            };
        }
        if (data['entityMentions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entityMentions'])) {
                throw new Error("Expected the field `entityMentions` to be an array in the JSON data but got " + data['entityMentions']);
            }
            // validate the optional field `entityMentions` (array)
            for (const item of data['entityMentions']) {
                EntityMention.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['fhirBundle'] && !(typeof data['fhirBundle'] === 'string' || data['fhirBundle'] instanceof String)) {
            throw new Error("Expected the field `fhirBundle` to be a primitive type in the JSON string but got " + data['fhirBundle']);
        }
        if (data['relationships']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['relationships'])) {
                throw new Error("Expected the field `relationships` to be an array in the JSON data but got " + data['relationships']);
            }
            // validate the optional field `relationships` (array)
            for (const item of data['relationships']) {
                EntityMentionRelationship.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The union of all the candidate entities that the entity_mentions in this response could link to. These are UMLS concepts or normalized mention content.
 * @member {Array.<module:model/Entity>} entities
 */
AnalyzeEntitiesResponse.prototype['entities'] = undefined;

/**
 * The `entity_mentions` field contains all the annotated medical entities that were mentioned in the provided document.
 * @member {Array.<module:model/EntityMention>} entityMentions
 */
AnalyzeEntitiesResponse.prototype['entityMentions'] = undefined;

/**
 * The FHIR bundle ([`R4`](http://hl7.org/fhir/R4/bundle.html)) that includes all the entities, the entity mentions, and the relationships in JSON format.
 * @member {String} fhirBundle
 */
AnalyzeEntitiesResponse.prototype['fhirBundle'] = undefined;

/**
 * relationships contains all the binary relationships that were identified between entity mentions within the provided document.
 * @member {Array.<module:model/EntityMentionRelationship>} relationships
 */
AnalyzeEntitiesResponse.prototype['relationships'] = undefined;






export default AnalyzeEntitiesResponse;

