/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata model module.
 * @module model/GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata
 * @version v1beta1
 */
class GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata {
    /**
     * Constructs a new <code>GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata</code>.
     * Specifies the FHIR paths to match and how to handle the de-identification of matching fields.
     * @alias module:model/GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata
     */
    constructor() { 
        
        GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata} obj Optional instance to populate.
     * @return {module:model/GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata} The populated <code>GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata();

            if (data.hasOwnProperty('characterMaskField')) {
                obj['characterMaskField'] = ApiClient.convertToType(data['characterMaskField'], Object);
            }
            if (data.hasOwnProperty('cleanTextField')) {
                obj['cleanTextField'] = ApiClient.convertToType(data['cleanTextField'], Object);
            }
            if (data.hasOwnProperty('cryptoHashField')) {
                obj['cryptoHashField'] = ApiClient.convertToType(data['cryptoHashField'], Object);
            }
            if (data.hasOwnProperty('dateShiftField')) {
                obj['dateShiftField'] = ApiClient.convertToType(data['dateShiftField'], Object);
            }
            if (data.hasOwnProperty('keepField')) {
                obj['keepField'] = ApiClient.convertToType(data['keepField'], Object);
            }
            if (data.hasOwnProperty('paths')) {
                obj['paths'] = ApiClient.convertToType(data['paths'], ['String']);
            }
            if (data.hasOwnProperty('removeField')) {
                obj['removeField'] = ApiClient.convertToType(data['removeField'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['paths'])) {
            throw new Error("Expected the field `paths` to be an array in the JSON data but got " + data['paths']);
        }

        return true;
    }


}



/**
 * Replace field value with masking character. Supported [types](https://www.hl7.org/fhir/datatypes.html): Code, Decimal, HumanName, Id, LanguageCode, Markdown, Oid, String, Uri, Uuid, Xhtml.
 * @member {Object} characterMaskField
 */
GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata.prototype['characterMaskField'] = undefined;

/**
 * Inspect text and transform sensitive text. Configure using TextConfig. Supported [types](https://www.hl7.org/fhir/datatypes.html): Code, Date, DateTime, Decimal, HumanName, Id, LanguageCode, Markdown, Oid, String, Uri, Uuid, Xhtml.
 * @member {Object} cleanTextField
 */
GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata.prototype['cleanTextField'] = undefined;

/**
 * Replace field value with a hash of that value. Supported [types](https://www.hl7.org/fhir/datatypes.html): Code, Decimal, HumanName, Id, LanguageCode, Markdown, Oid, String, Uri, Uuid, Xhtml.
 * @member {Object} cryptoHashField
 */
GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata.prototype['cryptoHashField'] = undefined;

/**
 * Shift the date by a randomized number of days. See [date shifting](https://cloud.google.com/dlp/docs/concepts-date-shifting) for more information. Supported [types](https://www.hl7.org/fhir/datatypes.html): Date, DateTime.
 * @member {Object} dateShiftField
 */
GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata.prototype['dateShiftField'] = undefined;

/**
 * Keep field unchanged.
 * @member {Object} keepField
 */
GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata.prototype['keepField'] = undefined;

/**
 * List of paths to FHIR fields to redact. Each path is a period-separated list where each component is either a field name or FHIR [type](https://www.hl7.org/fhir/datatypes.html) name. All types begin with an upper case letter. For example, the resource field `Patient.Address.city`, which uses a [string](https://www.hl7.org/fhir/datatypes-definitions.html#Address.city) type, can be matched by `Patient.Address.String`. Partial matching is supported. For example, `Patient.Address.city` can be matched by `Address.city` (with `Patient` omitted). Partial matching and type matching can be combined, for example `Patient.Address.city` can be matched by `Address.String`. For \"choice\" types (those defined in the FHIR spec with the format `field[x]`), use two separate components. For example, `deceasedAge.unit` is matched by `Deceased.Age.unit`. The following types are supported: AdministrativeGenderCode, Base64Binary, Boolean, Code, Date, DateTime, Decimal, HumanName, Id, Instant, Integer, LanguageCode, Markdown, Oid, PositiveInt, String, UnsignedInt, Uri, Uuid, Xhtml. The sub-type for HumanName (for example `HumanName.given`, `HumanName.family`) can be omitted.
 * @member {Array.<String>} paths
 */
GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata.prototype['paths'] = undefined;

/**
 * Remove field.
 * @member {Object} removeField
 */
GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata.prototype['removeField'] = undefined;






export default GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata;

