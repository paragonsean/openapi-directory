/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageConfig from './ImageConfig';

/**
 * The Action model module.
 * @module model/Action
 * @version v1beta1
 */
class Action {
    /**
     * Constructs a new <code>Action</code>.
     * Specifies a selection of tags and an &#x60;Action&#x60; to apply to each one.
     * @alias module:model/Action
     */
    constructor() { 
        
        Action.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Action</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Action} obj Optional instance to populate.
     * @return {module:model/Action} The populated <code>Action</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Action();

            if (data.hasOwnProperty('cleanImageTag')) {
                obj['cleanImageTag'] = ImageConfig.constructFromObject(data['cleanImageTag']);
            }
            if (data.hasOwnProperty('cleanTextTag')) {
                obj['cleanTextTag'] = ApiClient.convertToType(data['cleanTextTag'], Object);
            }
            if (data.hasOwnProperty('deleteTag')) {
                obj['deleteTag'] = ApiClient.convertToType(data['deleteTag'], Object);
            }
            if (data.hasOwnProperty('keepTag')) {
                obj['keepTag'] = ApiClient.convertToType(data['keepTag'], Object);
            }
            if (data.hasOwnProperty('queries')) {
                obj['queries'] = ApiClient.convertToType(data['queries'], ['String']);
            }
            if (data.hasOwnProperty('recurseTag')) {
                obj['recurseTag'] = ApiClient.convertToType(data['recurseTag'], Object);
            }
            if (data.hasOwnProperty('regenUidTag')) {
                obj['regenUidTag'] = ApiClient.convertToType(data['regenUidTag'], Object);
            }
            if (data.hasOwnProperty('removeTag')) {
                obj['removeTag'] = ApiClient.convertToType(data['removeTag'], Object);
            }
            if (data.hasOwnProperty('resetTag')) {
                obj['resetTag'] = ApiClient.convertToType(data['resetTag'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Action</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Action</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cleanImageTag`
        if (data['cleanImageTag']) { // data not null
          ImageConfig.validateJSON(data['cleanImageTag']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['queries'])) {
            throw new Error("Expected the field `queries` to be an array in the JSON data but got " + data['queries']);
        }

        return true;
    }


}



/**
 * @member {module:model/ImageConfig} cleanImageTag
 */
Action.prototype['cleanImageTag'] = undefined;

/**
 * Inspect text and transform sensitive text. Configurable using TextConfig. Supported [Value Representations] (http://dicom.nema.org/medical/dicom/2018e/output/chtml/part05/sect_6.2.html#table_6.2-1): AE, LO, LT, PN, SH, ST, UC, UT, DA, DT, AS
 * @member {Object} cleanTextTag
 */
Action.prototype['cleanTextTag'] = undefined;

/**
 * Delete tag.
 * @member {Object} deleteTag
 */
Action.prototype['deleteTag'] = undefined;

/**
 * Keep tag unchanged.
 * @member {Object} keepTag
 */
Action.prototype['keepTag'] = undefined;

/**
 * Select all tags with the listed tag IDs, names, or Value Representations (VRs). Examples: ID: \"00100010\" Keyword: \"PatientName\" VR: \"PN\"
 * @member {Array.<String>} queries
 */
Action.prototype['queries'] = undefined;

/**
 * Recursively apply DICOM de-id to tags nested in a sequence. Supported [Value Representation] (http://dicom.nema.org/medical/dicom/2018e/output/chtml/part05/sect_6.2.html#table_6.2-1): SQ
 * @member {Object} recurseTag
 */
Action.prototype['recurseTag'] = undefined;

/**
 * Replace UID with a new generated UID. Supported [Value Representation] (http://dicom.nema.org/medical/dicom/2018e/output/chtml/part05/sect_6.2.html#table_6.2-1): UI
 * @member {Object} regenUidTag
 */
Action.prototype['regenUidTag'] = undefined;

/**
 * Replace with empty tag.
 * @member {Object} removeTag
 */
Action.prototype['removeTag'] = undefined;

/**
 * Reset tag to a placeholder value.
 * @member {Object} resetTag
 */
Action.prototype['resetTag'] = undefined;






export default Action;

