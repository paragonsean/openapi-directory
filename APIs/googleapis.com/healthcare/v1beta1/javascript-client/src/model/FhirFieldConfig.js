/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata from './GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata';
import GoogleCloudHealthcareV1beta1DeidentifyOptions from './GoogleCloudHealthcareV1beta1DeidentifyOptions';

/**
 * The FhirFieldConfig model module.
 * @module model/FhirFieldConfig
 * @version v1beta1
 */
class FhirFieldConfig {
    /**
     * Constructs a new <code>FhirFieldConfig</code>.
     * Specifies how to handle the de-identification of a FHIR store.
     * @alias module:model/FhirFieldConfig
     */
    constructor() { 
        
        FhirFieldConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FhirFieldConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FhirFieldConfig} obj Optional instance to populate.
     * @return {module:model/FhirFieldConfig} The populated <code>FhirFieldConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FhirFieldConfig();

            if (data.hasOwnProperty('fieldMetadataList')) {
                obj['fieldMetadataList'] = ApiClient.convertToType(data['fieldMetadataList'], [GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata]);
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = GoogleCloudHealthcareV1beta1DeidentifyOptions.constructFromObject(data['options']);
            }
            if (data.hasOwnProperty('profileType')) {
                obj['profileType'] = ApiClient.convertToType(data['profileType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FhirFieldConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FhirFieldConfig</code>.
     */
    static validateJSON(data) {
        if (data['fieldMetadataList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fieldMetadataList'])) {
                throw new Error("Expected the field `fieldMetadataList` to be an array in the JSON data but got " + data['fieldMetadataList']);
            }
            // validate the optional field `fieldMetadataList` (array)
            for (const item of data['fieldMetadataList']) {
                GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata.validateJSON(item);
            };
        }
        // validate the optional field `options`
        if (data['options']) { // data not null
          GoogleCloudHealthcareV1beta1DeidentifyOptions.validateJSON(data['options']);
        }
        // ensure the json data is a string
        if (data['profileType'] && !(typeof data['profileType'] === 'string' || data['profileType'] instanceof String)) {
            throw new Error("Expected the field `profileType` to be a primitive type in the JSON string but got " + data['profileType']);
        }

        return true;
    }


}



/**
 * Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata `action` is passed through to the output dataset unmodified. All extensions will be processed according to keep_extensions. If a field can be matched by more than one FieldMetadata `action`, the first `action` option is applied. Overrides options and the union field `profile` in FhirFieldConfig.
 * @member {Array.<module:model/GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata>} fieldMetadataList
 */
FhirFieldConfig.prototype['fieldMetadataList'] = undefined;

/**
 * @member {module:model/GoogleCloudHealthcareV1beta1DeidentifyOptions} options
 */
FhirFieldConfig.prototype['options'] = undefined;

/**
 * Base profile type for handling FHIR fields.
 * @member {module:model/FhirFieldConfig.ProfileTypeEnum} profileType
 */
FhirFieldConfig.prototype['profileType'] = undefined;





/**
 * Allowed values for the <code>profileType</code> property.
 * @enum {String}
 * @readonly
 */
FhirFieldConfig['ProfileTypeEnum'] = {

    /**
     * value: "PROFILE_TYPE_UNSPECIFIED"
     * @const
     */
    "PROFILE_TYPE_UNSPECIFIED": "PROFILE_TYPE_UNSPECIFIED",

    /**
     * value: "KEEP_ALL"
     * @const
     */
    "KEEP_ALL": "KEEP_ALL",

    /**
     * value: "BASIC"
     * @const
     */
    "BASIC": "BASIC",

    /**
     * value: "CLEAN_ALL"
     * @const
     */
    "CLEAN_ALL": "CLEAN_ALL"
};



export default FhirFieldConfig;

