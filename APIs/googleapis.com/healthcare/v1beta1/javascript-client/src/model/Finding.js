/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Finding model module.
 * @module model/Finding
 * @version v1beta1
 */
class Finding {
    /**
     * Constructs a new <code>Finding</code>.
     * @alias module:model/Finding
     */
    constructor() { 
        
        Finding.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Finding</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Finding} obj Optional instance to populate.
     * @return {module:model/Finding} The populated <code>Finding</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Finding();

            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'String');
            }
            if (data.hasOwnProperty('infoType')) {
                obj['infoType'] = ApiClient.convertToType(data['infoType'], 'String');
            }
            if (data.hasOwnProperty('quote')) {
                obj['quote'] = ApiClient.convertToType(data['quote'], 'String');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Finding</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Finding</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['end'] && !(typeof data['end'] === 'string' || data['end'] instanceof String)) {
            throw new Error("Expected the field `end` to be a primitive type in the JSON string but got " + data['end']);
        }
        // ensure the json data is a string
        if (data['infoType'] && !(typeof data['infoType'] === 'string' || data['infoType'] instanceof String)) {
            throw new Error("Expected the field `infoType` to be a primitive type in the JSON string but got " + data['infoType']);
        }
        // ensure the json data is a string
        if (data['quote'] && !(typeof data['quote'] === 'string' || data['quote'] instanceof String)) {
            throw new Error("Expected the field `quote` to be a primitive type in the JSON string but got " + data['quote']);
        }
        // ensure the json data is a string
        if (data['start'] && !(typeof data['start'] === 'string' || data['start'] instanceof String)) {
            throw new Error("Expected the field `start` to be a primitive type in the JSON string but got " + data['start']);
        }

        return true;
    }


}



/**
 * Zero-based ending index of the found text, exclusively.
 * @member {String} end
 */
Finding.prototype['end'] = undefined;

/**
 * The type of information stored in this text range. For example, HumanName, BirthDate, or Address.
 * @member {String} infoType
 */
Finding.prototype['infoType'] = undefined;

/**
 * The snippet of the sensitive text. This field is only populated during deidentification if `store_quote` is set to true in DeidentifyConfig.
 * @member {String} quote
 */
Finding.prototype['quote'] = undefined;

/**
 * Zero-based starting index of the found text, inclusively.
 * @member {String} start
 */
Finding.prototype['start'] = undefined;






export default Finding;

