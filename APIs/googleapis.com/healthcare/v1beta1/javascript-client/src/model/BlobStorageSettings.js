/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BlobStorageSettings model module.
 * @module model/BlobStorageSettings
 * @version v1beta1
 */
class BlobStorageSettings {
    /**
     * Constructs a new <code>BlobStorageSettings</code>.
     * Settings for data stored in Blob storage.
     * @alias module:model/BlobStorageSettings
     */
    constructor() { 
        
        BlobStorageSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BlobStorageSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlobStorageSettings} obj Optional instance to populate.
     * @return {module:model/BlobStorageSettings} The populated <code>BlobStorageSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlobStorageSettings();

            if (data.hasOwnProperty('blobStorageClass')) {
                obj['blobStorageClass'] = ApiClient.convertToType(data['blobStorageClass'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BlobStorageSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BlobStorageSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['blobStorageClass'] && !(typeof data['blobStorageClass'] === 'string' || data['blobStorageClass'] instanceof String)) {
            throw new Error("Expected the field `blobStorageClass` to be a primitive type in the JSON string but got " + data['blobStorageClass']);
        }

        return true;
    }


}



/**
 * The Storage class in which the Blob data is stored.
 * @member {module:model/BlobStorageSettings.BlobStorageClassEnum} blobStorageClass
 */
BlobStorageSettings.prototype['blobStorageClass'] = undefined;





/**
 * Allowed values for the <code>blobStorageClass</code> property.
 * @enum {String}
 * @readonly
 */
BlobStorageSettings['BlobStorageClassEnum'] = {

    /**
     * value: "BLOB_STORAGE_CLASS_UNSPECIFIED"
     * @const
     */
    "BLOB_STORAGE_CLASS_UNSPECIFIED": "BLOB_STORAGE_CLASS_UNSPECIFIED",

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD",

    /**
     * value: "NEARLINE"
     * @const
     */
    "NEARLINE": "NEARLINE",

    /**
     * value: "COLDLINE"
     * @const
     */
    "COLDLINE": "COLDLINE",

    /**
     * value: "ARCHIVE"
     * @const
     */
    "ARCHIVE": "ARCHIVE"
};



export default BlobStorageSettings;

