/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AttributeDefinition model module.
 * @module model/AttributeDefinition
 * @version v1beta1
 */
class AttributeDefinition {
    /**
     * Constructs a new <code>AttributeDefinition</code>.
     * A client-defined consent attribute.
     * @alias module:model/AttributeDefinition
     */
    constructor() { 
        
        AttributeDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AttributeDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttributeDefinition} obj Optional instance to populate.
     * @return {module:model/AttributeDefinition} The populated <code>AttributeDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttributeDefinition();

            if (data.hasOwnProperty('allowedValues')) {
                obj['allowedValues'] = ApiClient.convertToType(data['allowedValues'], ['String']);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('consentDefaultValues')) {
                obj['consentDefaultValues'] = ApiClient.convertToType(data['consentDefaultValues'], ['String']);
            }
            if (data.hasOwnProperty('dataMappingDefaultValue')) {
                obj['dataMappingDefaultValue'] = ApiClient.convertToType(data['dataMappingDefaultValue'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttributeDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttributeDefinition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['allowedValues'])) {
            throw new Error("Expected the field `allowedValues` to be an array in the JSON data but got " + data['allowedValues']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['consentDefaultValues'])) {
            throw new Error("Expected the field `consentDefaultValues` to be an array in the JSON data but got " + data['consentDefaultValues']);
        }
        // ensure the json data is a string
        if (data['dataMappingDefaultValue'] && !(typeof data['dataMappingDefaultValue'] === 'string' || data['dataMappingDefaultValue'] instanceof String)) {
            throw new Error("Expected the field `dataMappingDefaultValue` to be a primitive type in the JSON string but got " + data['dataMappingDefaultValue']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Required. Possible values for the attribute. The number of allowed values must not exceed 500. An empty list is invalid. The list can only be expanded after creation.
 * @member {Array.<String>} allowedValues
 */
AttributeDefinition.prototype['allowedValues'] = undefined;

/**
 * Required. The category of the attribute. The value of this field cannot be changed after creation.
 * @member {module:model/AttributeDefinition.CategoryEnum} category
 */
AttributeDefinition.prototype['category'] = undefined;

/**
 * Optional. Default values of the attribute in Consents. If no default values are specified, it defaults to an empty value.
 * @member {Array.<String>} consentDefaultValues
 */
AttributeDefinition.prototype['consentDefaultValues'] = undefined;

/**
 * Optional. Default value of the attribute in User data mappings. If no default value is specified, it defaults to an empty value. This field is only applicable to attributes of the category `RESOURCE`.
 * @member {String} dataMappingDefaultValue
 */
AttributeDefinition.prototype['dataMappingDefaultValue'] = undefined;

/**
 * Optional. A description of the attribute.
 * @member {String} description
 */
AttributeDefinition.prototype['description'] = undefined;

/**
 * Identifier. Resource name of the Attribute definition, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/attributeDefinitions/{attribute_definition_id}`. Cannot be changed after creation.
 * @member {String} name
 */
AttributeDefinition.prototype['name'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
AttributeDefinition['CategoryEnum'] = {

    /**
     * value: "CATEGORY_UNSPECIFIED"
     * @const
     */
    "CATEGORY_UNSPECIFIED": "CATEGORY_UNSPECIFIED",

    /**
     * value: "RESOURCE"
     * @const
     */
    "RESOURCE": "RESOURCE",

    /**
     * value: "REQUEST"
     * @const
     */
    "REQUEST": "REQUEST"
};



export default AttributeDefinition;

