/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AnnotationConfig model module.
 * @module model/AnnotationConfig
 * @version v1beta1
 */
class AnnotationConfig {
    /**
     * Constructs a new <code>AnnotationConfig</code>.
     * Specifies how to store annotations during de-identification operation.
     * @alias module:model/AnnotationConfig
     */
    constructor() { 
        
        AnnotationConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnnotationConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnnotationConfig} obj Optional instance to populate.
     * @return {module:model/AnnotationConfig} The populated <code>AnnotationConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnnotationConfig();

            if (data.hasOwnProperty('annotationStoreName')) {
                obj['annotationStoreName'] = ApiClient.convertToType(data['annotationStoreName'], 'String');
            }
            if (data.hasOwnProperty('storeQuote')) {
                obj['storeQuote'] = ApiClient.convertToType(data['storeQuote'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnnotationConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnnotationConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['annotationStoreName'] && !(typeof data['annotationStoreName'] === 'string' || data['annotationStoreName'] instanceof String)) {
            throw new Error("Expected the field `annotationStoreName` to be a primitive type in the JSON string but got " + data['annotationStoreName']);
        }

        return true;
    }


}



/**
 * The name of the annotation store, in the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`). * The destination annotation store must be in the same project as the source data. De-identifying data across multiple projects is not supported. * The destination annotation store must exist when using DeidentifyDicomStore or DeidentifyFhirStore. DeidentifyDataset automatically creates the destination annotation store.
 * @member {String} annotationStoreName
 */
AnnotationConfig.prototype['annotationStoreName'] = undefined;

/**
 * If set to true, the sensitive texts are included in SensitiveTextAnnotation of Annotation.
 * @member {Boolean} storeQuote
 */
AnnotationConfig.prototype['storeQuote'] = undefined;






export default AnnotationConfig;

