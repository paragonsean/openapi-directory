/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConsentHeaderHandling model module.
 * @module model/ConsentHeaderHandling
 * @version v1beta1
 */
class ConsentHeaderHandling {
    /**
     * Constructs a new <code>ConsentHeaderHandling</code>.
     * How the server handles the consent header.
     * @alias module:model/ConsentHeaderHandling
     */
    constructor() { 
        
        ConsentHeaderHandling.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConsentHeaderHandling</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConsentHeaderHandling} obj Optional instance to populate.
     * @return {module:model/ConsentHeaderHandling} The populated <code>ConsentHeaderHandling</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConsentHeaderHandling();

            if (data.hasOwnProperty('profile')) {
                obj['profile'] = ApiClient.convertToType(data['profile'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConsentHeaderHandling</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConsentHeaderHandling</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['profile'] && !(typeof data['profile'] === 'string' || data['profile'] instanceof String)) {
            throw new Error("Expected the field `profile` to be a primitive type in the JSON string but got " + data['profile']);
        }

        return true;
    }


}



/**
 * Optional. Specifies the default server behavior when the header is empty. If not specified, the `ScopeProfile.PERMIT_EMPTY_SCOPE` option is used.
 * @member {module:model/ConsentHeaderHandling.ProfileEnum} profile
 */
ConsentHeaderHandling.prototype['profile'] = undefined;





/**
 * Allowed values for the <code>profile</code> property.
 * @enum {String}
 * @readonly
 */
ConsentHeaderHandling['ProfileEnum'] = {

    /**
     * value: "SCOPE_PROFILE_UNSPECIFIED"
     * @const
     */
    "SCOPE_PROFILE_UNSPECIFIED": "SCOPE_PROFILE_UNSPECIFIED",

    /**
     * value: "PERMIT_EMPTY_SCOPE"
     * @const
     */
    "PERMIT_EMPTY_SCOPE": "PERMIT_EMPTY_SCOPE",

    /**
     * value: "REQUIRED_ON_READ"
     * @const
     */
    "REQUIRED_ON_READ": "REQUIRED_ON_READ"
};



export default ConsentHeaderHandling;

