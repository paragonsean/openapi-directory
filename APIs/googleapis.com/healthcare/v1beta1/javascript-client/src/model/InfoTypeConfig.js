/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FilterList from './FilterList';

/**
 * The InfoTypeConfig model module.
 * @module model/InfoTypeConfig
 * @version v1beta1
 */
class InfoTypeConfig {
    /**
     * Constructs a new <code>InfoTypeConfig</code>.
     * Specifies how to use infoTypes for evaluation. For example, a user might only want to evaluate &#x60;PERSON&#x60;, &#x60;LOCATION&#x60;, and &#x60;AGE&#x60;.
     * @alias module:model/InfoTypeConfig
     */
    constructor() { 
        
        InfoTypeConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InfoTypeConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InfoTypeConfig} obj Optional instance to populate.
     * @return {module:model/InfoTypeConfig} The populated <code>InfoTypeConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InfoTypeConfig();

            if (data.hasOwnProperty('evaluateList')) {
                obj['evaluateList'] = FilterList.constructFromObject(data['evaluateList']);
            }
            if (data.hasOwnProperty('ignoreList')) {
                obj['ignoreList'] = FilterList.constructFromObject(data['ignoreList']);
            }
            if (data.hasOwnProperty('strictMatching')) {
                obj['strictMatching'] = ApiClient.convertToType(data['strictMatching'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InfoTypeConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InfoTypeConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `evaluateList`
        if (data['evaluateList']) { // data not null
          FilterList.validateJSON(data['evaluateList']);
        }
        // validate the optional field `ignoreList`
        if (data['ignoreList']) { // data not null
          FilterList.validateJSON(data['ignoreList']);
        }

        return true;
    }


}



/**
 * @member {module:model/FilterList} evaluateList
 */
InfoTypeConfig.prototype['evaluateList'] = undefined;

/**
 * @member {module:model/FilterList} ignoreList
 */
InfoTypeConfig.prototype['ignoreList'] = undefined;

/**
 * If `TRUE`, infoTypes described by `filter` are used for evaluation. Otherwise, infoTypes are not considered for evaluation. For example: * Annotated text: \"Toronto is a location\" * Finding 1: `{\"infoType\": \"PERSON\", \"quote\": \"Toronto\", \"start\": 0, \"end\": 7}` * Finding 2: `{\"infoType\": \"CITY\", \"quote\": \"Toronto\", \"start\": 0, \"end\": 7}` * Finding 3: `{}` * Ground truth: `{\"infoType\": \"LOCATION\", \"quote\": \"Toronto\", \"start\": 0, \"end\": 7}` When `strict_matching` is `TRUE`: * Finding 1: 1 false positive * Finding 2: 1 false positive * Finding 3: 1 false negative When `strict_matching` is `FALSE`: * Finding 1: 1 true positive * Finding 2: 1 true positive * Finding 3: 1 false negative
 * @member {Boolean} strictMatching
 */
InfoTypeConfig.prototype['strictMatching'] = undefined;






export default InfoTypeConfig;

