/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EntityMentionRelationship model module.
 * @module model/EntityMentionRelationship
 * @version v1beta1
 */
class EntityMentionRelationship {
    /**
     * Constructs a new <code>EntityMentionRelationship</code>.
     * Defines directed relationship from one entity mention to another.
     * @alias module:model/EntityMentionRelationship
     */
    constructor() { 
        
        EntityMentionRelationship.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EntityMentionRelationship</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntityMentionRelationship} obj Optional instance to populate.
     * @return {module:model/EntityMentionRelationship} The populated <code>EntityMentionRelationship</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntityMentionRelationship();

            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'Number');
            }
            if (data.hasOwnProperty('objectId')) {
                obj['objectId'] = ApiClient.convertToType(data['objectId'], 'String');
            }
            if (data.hasOwnProperty('subjectId')) {
                obj['subjectId'] = ApiClient.convertToType(data['subjectId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EntityMentionRelationship</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EntityMentionRelationship</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['objectId'] && !(typeof data['objectId'] === 'string' || data['objectId'] instanceof String)) {
            throw new Error("Expected the field `objectId` to be a primitive type in the JSON string but got " + data['objectId']);
        }
        // ensure the json data is a string
        if (data['subjectId'] && !(typeof data['subjectId'] === 'string' || data['subjectId'] instanceof String)) {
            throw new Error("Expected the field `subjectId` to be a primitive type in the JSON string but got " + data['subjectId']);
        }

        return true;
    }


}



/**
 * The model's confidence in this annotation. A number between 0 and 1.
 * @member {Number} confidence
 */
EntityMentionRelationship.prototype['confidence'] = undefined;

/**
 * object_id is the id of the object entity mention.
 * @member {String} objectId
 */
EntityMentionRelationship.prototype['objectId'] = undefined;

/**
 * subject_id is the id of the subject entity mention.
 * @member {String} subjectId
 */
EntityMentionRelationship.prototype['subjectId'] = undefined;






export default EntityMentionRelationship;

