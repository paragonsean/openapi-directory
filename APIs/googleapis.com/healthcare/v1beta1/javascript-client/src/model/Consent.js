/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudHealthcareV1beta1ConsentPolicy from './GoogleCloudHealthcareV1beta1ConsentPolicy';

/**
 * The Consent model module.
 * @module model/Consent
 * @version v1beta1
 */
class Consent {
    /**
     * Constructs a new <code>Consent</code>.
     * Represents a user&#39;s consent.
     * @alias module:model/Consent
     */
    constructor() { 
        
        Consent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Consent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Consent} obj Optional instance to populate.
     * @return {module:model/Consent} The populated <code>Consent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Consent();

            if (data.hasOwnProperty('consentArtifact')) {
                obj['consentArtifact'] = ApiClient.convertToType(data['consentArtifact'], 'String');
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('policies')) {
                obj['policies'] = ApiClient.convertToType(data['policies'], [GoogleCloudHealthcareV1beta1ConsentPolicy]);
            }
            if (data.hasOwnProperty('revisionCreateTime')) {
                obj['revisionCreateTime'] = ApiClient.convertToType(data['revisionCreateTime'], 'String');
            }
            if (data.hasOwnProperty('revisionId')) {
                obj['revisionId'] = ApiClient.convertToType(data['revisionId'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Consent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Consent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['consentArtifact'] && !(typeof data['consentArtifact'] === 'string' || data['consentArtifact'] instanceof String)) {
            throw new Error("Expected the field `consentArtifact` to be a primitive type in the JSON string but got " + data['consentArtifact']);
        }
        // ensure the json data is a string
        if (data['expireTime'] && !(typeof data['expireTime'] === 'string' || data['expireTime'] instanceof String)) {
            throw new Error("Expected the field `expireTime` to be a primitive type in the JSON string but got " + data['expireTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['policies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['policies'])) {
                throw new Error("Expected the field `policies` to be an array in the JSON data but got " + data['policies']);
            }
            // validate the optional field `policies` (array)
            for (const item of data['policies']) {
                GoogleCloudHealthcareV1beta1ConsentPolicy.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['revisionCreateTime'] && !(typeof data['revisionCreateTime'] === 'string' || data['revisionCreateTime'] instanceof String)) {
            throw new Error("Expected the field `revisionCreateTime` to be a primitive type in the JSON string but got " + data['revisionCreateTime']);
        }
        // ensure the json data is a string
        if (data['revisionId'] && !(typeof data['revisionId'] === 'string' || data['revisionId'] instanceof String)) {
            throw new Error("Expected the field `revisionId` to be a primitive type in the JSON string but got " + data['revisionId']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['ttl'] && !(typeof data['ttl'] === 'string' || data['ttl'] instanceof String)) {
            throw new Error("Expected the field `ttl` to be a primitive type in the JSON string but got " + data['ttl']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * Required. The resource name of the Consent artifact that contains proof of the end user's consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
 * @member {String} consentArtifact
 */
Consent.prototype['consentArtifact'] = undefined;

/**
 * Timestamp in UTC of when this Consent is considered expired.
 * @member {String} expireTime
 */
Consent.prototype['expireTime'] = undefined;

/**
 * Optional. User-supplied key-value pairs used to organize Consent resources. Metadata keys must: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - begin with a letter - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes Metadata values must be: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes No more than 64 metadata entries can be associated with a given consent.
 * @member {Object.<String, String>} metadata
 */
Consent.prototype['metadata'] = undefined;

/**
 * Identifier. Resource name of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. Cannot be changed after creation.
 * @member {String} name
 */
Consent.prototype['name'] = undefined;

/**
 * Optional. Represents a user's consent in terms of the resources that can be accessed and under what conditions.
 * @member {Array.<module:model/GoogleCloudHealthcareV1beta1ConsentPolicy>} policies
 */
Consent.prototype['policies'] = undefined;

/**
 * Output only. The timestamp that the revision was created.
 * @member {String} revisionCreateTime
 */
Consent.prototype['revisionCreateTime'] = undefined;

/**
 * Output only. The revision ID of the Consent. The format is an 8-character hexadecimal string. Refer to a specific revision of a Consent by appending `@{revision_id}` to the Consent's resource name.
 * @member {String} revisionId
 */
Consent.prototype['revisionId'] = undefined;

/**
 * Required. Indicates the current state of this Consent.
 * @member {module:model/Consent.StateEnum} state
 */
Consent.prototype['state'] = undefined;

/**
 * Input only. The time to live for this Consent from when it is created.
 * @member {String} ttl
 */
Consent.prototype['ttl'] = undefined;

/**
 * Required. User's UUID provided by the client.
 * @member {String} userId
 */
Consent.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Consent['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "ARCHIVED"
     * @const
     */
    "ARCHIVED": "ARCHIVED",

    /**
     * value: "REVOKED"
     * @const
     */
    "REVOKED": "REVOKED",

    /**
     * value: "DRAFT"
     * @const
     */
    "DRAFT": "DRAFT",

    /**
     * value: "REJECTED"
     * @const
     */
    "REJECTED": "REJECTED"
};



export default Consent;

