/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Feature from './Feature';
import LinkedEntity from './LinkedEntity';
import TextSpan from './TextSpan';

/**
 * The EntityMention model module.
 * @module model/EntityMention
 * @version v1beta1
 */
class EntityMention {
    /**
     * Constructs a new <code>EntityMention</code>.
     * An entity mention in the document.
     * @alias module:model/EntityMention
     */
    constructor() { 
        
        EntityMention.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EntityMention</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntityMention} obj Optional instance to populate.
     * @return {module:model/EntityMention} The populated <code>EntityMention</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntityMention();

            if (data.hasOwnProperty('additionalInfo')) {
                obj['additionalInfo'] = ApiClient.convertToType(data['additionalInfo'], [Feature]);
            }
            if (data.hasOwnProperty('certaintyAssessment')) {
                obj['certaintyAssessment'] = Feature.constructFromObject(data['certaintyAssessment']);
            }
            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'Number');
            }
            if (data.hasOwnProperty('linkedEntities')) {
                obj['linkedEntities'] = ApiClient.convertToType(data['linkedEntities'], [LinkedEntity]);
            }
            if (data.hasOwnProperty('mentionId')) {
                obj['mentionId'] = ApiClient.convertToType(data['mentionId'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = Feature.constructFromObject(data['subject']);
            }
            if (data.hasOwnProperty('temporalAssessment')) {
                obj['temporalAssessment'] = Feature.constructFromObject(data['temporalAssessment']);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = TextSpan.constructFromObject(data['text']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EntityMention</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EntityMention</code>.
     */
    static validateJSON(data) {
        if (data['additionalInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalInfo'])) {
                throw new Error("Expected the field `additionalInfo` to be an array in the JSON data but got " + data['additionalInfo']);
            }
            // validate the optional field `additionalInfo` (array)
            for (const item of data['additionalInfo']) {
                Feature.validateJSON(item);
            };
        }
        // validate the optional field `certaintyAssessment`
        if (data['certaintyAssessment']) { // data not null
          Feature.validateJSON(data['certaintyAssessment']);
        }
        if (data['linkedEntities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['linkedEntities'])) {
                throw new Error("Expected the field `linkedEntities` to be an array in the JSON data but got " + data['linkedEntities']);
            }
            // validate the optional field `linkedEntities` (array)
            for (const item of data['linkedEntities']) {
                LinkedEntity.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['mentionId'] && !(typeof data['mentionId'] === 'string' || data['mentionId'] instanceof String)) {
            throw new Error("Expected the field `mentionId` to be a primitive type in the JSON string but got " + data['mentionId']);
        }
        // validate the optional field `subject`
        if (data['subject']) { // data not null
          Feature.validateJSON(data['subject']);
        }
        // validate the optional field `temporalAssessment`
        if (data['temporalAssessment']) { // data not null
          Feature.validateJSON(data['temporalAssessment']);
        }
        // validate the optional field `text`
        if (data['text']) { // data not null
          TextSpan.validateJSON(data['text']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Additional information about the entity mention. For example, for an entity mention of type `DATE` this can be its more specific date types from the following list: `ADMISSION_DATE`, `CONSULTATION_DATE`, `DISCHARGE_DATE`, `SERVICE_DATE`, `VISIT_DATE`, `DIAGNOSIS_DATE`, `MED_STARTED_DATE`, `MED_ENDED_DATE`, `NOTE_DATE`, `PROCEDURE_DATE`, `RADIATION_STARTED_DATE`, `RADIATION_ENDED_DATE`, `STAGE_DATE`
 * @member {Array.<module:model/Feature>} additionalInfo
 */
EntityMention.prototype['additionalInfo'] = undefined;

/**
 * @member {module:model/Feature} certaintyAssessment
 */
EntityMention.prototype['certaintyAssessment'] = undefined;

/**
 * The model's confidence in this entity mention annotation. A number between 0 and 1.
 * @member {Number} confidence
 */
EntityMention.prototype['confidence'] = undefined;

/**
 * linked_entities are candidate ontological concepts that this entity mention may refer to. They are sorted by decreasing confidence.
 * @member {Array.<module:model/LinkedEntity>} linkedEntities
 */
EntityMention.prototype['linkedEntities'] = undefined;

/**
 * mention_id uniquely identifies each entity mention in a single response.
 * @member {String} mentionId
 */
EntityMention.prototype['mentionId'] = undefined;

/**
 * @member {module:model/Feature} subject
 */
EntityMention.prototype['subject'] = undefined;

/**
 * @member {module:model/Feature} temporalAssessment
 */
EntityMention.prototype['temporalAssessment'] = undefined;

/**
 * @member {module:model/TextSpan} text
 */
EntityMention.prototype['text'] = undefined;

/**
 * The semantic type of the entity: UNKNOWN_ENTITY_TYPE, ALONE, ANATOMICAL_STRUCTURE, ASSISTED_LIVING, BF_RESULT, BM_RESULT, BM_UNIT, BM_VALUE, BODY_FUNCTION, BODY_MEASUREMENT, COMPLIANT, DOESNOT_FOLLOWUP, FAMILY, FOLLOWSUP, LABORATORY_DATA, LAB_RESULT, LAB_UNIT, LAB_VALUE, MEDICAL_DEVICE, MEDICINE, MED_DOSE, MED_DURATION, MED_FORM, MED_FREQUENCY, MED_ROUTE, MED_STATUS, MED_STRENGTH, MED_TOTALDOSE, MED_UNIT, NON_COMPLIANT, OTHER_LIVINGSTATUS, PROBLEM, PROCEDURE, PROCEDURE_RESULT, PROC_METHOD, REASON_FOR_NONCOMPLIANCE, SEVERITY, SUBSTANCE_ABUSE, UNCLEAR_FOLLOWUP.
 * @member {String} type
 */
EntityMention.prototype['type'] = undefined;






export default EntityMention;

