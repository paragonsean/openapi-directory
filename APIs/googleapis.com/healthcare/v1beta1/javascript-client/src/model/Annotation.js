/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnnotationSource from './AnnotationSource';
import ImageAnnotation from './ImageAnnotation';
import ResourceAnnotation from './ResourceAnnotation';
import SensitiveTextAnnotation from './SensitiveTextAnnotation';

/**
 * The Annotation model module.
 * @module model/Annotation
 * @version v1beta1
 */
class Annotation {
    /**
     * Constructs a new <code>Annotation</code>.
     * An annotation record.
     * @alias module:model/Annotation
     */
    constructor() { 
        
        Annotation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Annotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Annotation} obj Optional instance to populate.
     * @return {module:model/Annotation} The populated <code>Annotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Annotation();

            if (data.hasOwnProperty('annotationSource')) {
                obj['annotationSource'] = AnnotationSource.constructFromObject(data['annotationSource']);
            }
            if (data.hasOwnProperty('customData')) {
                obj['customData'] = ApiClient.convertToType(data['customData'], {'String': 'String'});
            }
            if (data.hasOwnProperty('imageAnnotation')) {
                obj['imageAnnotation'] = ImageAnnotation.constructFromObject(data['imageAnnotation']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resourceAnnotation')) {
                obj['resourceAnnotation'] = ResourceAnnotation.constructFromObject(data['resourceAnnotation']);
            }
            if (data.hasOwnProperty('textAnnotation')) {
                obj['textAnnotation'] = SensitiveTextAnnotation.constructFromObject(data['textAnnotation']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Annotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Annotation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `annotationSource`
        if (data['annotationSource']) { // data not null
          AnnotationSource.validateJSON(data['annotationSource']);
        }
        // validate the optional field `imageAnnotation`
        if (data['imageAnnotation']) { // data not null
          ImageAnnotation.validateJSON(data['imageAnnotation']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `resourceAnnotation`
        if (data['resourceAnnotation']) { // data not null
          ResourceAnnotation.validateJSON(data['resourceAnnotation']);
        }
        // validate the optional field `textAnnotation`
        if (data['textAnnotation']) { // data not null
          SensitiveTextAnnotation.validateJSON(data['textAnnotation']);
        }

        return true;
    }


}



/**
 * @member {module:model/AnnotationSource} annotationSource
 */
Annotation.prototype['annotationSource'] = undefined;

/**
 * Additional information for this annotation record, such as annotator and verifier information or study campaign.
 * @member {Object.<String, String>} customData
 */
Annotation.prototype['customData'] = undefined;

/**
 * @member {module:model/ImageAnnotation} imageAnnotation
 */
Annotation.prototype['imageAnnotation'] = undefined;

/**
 * Identifier. Resource name of the Annotation, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}/annotations/{annotation_id}`.
 * @member {String} name
 */
Annotation.prototype['name'] = undefined;

/**
 * @member {module:model/ResourceAnnotation} resourceAnnotation
 */
Annotation.prototype['resourceAnnotation'] = undefined;

/**
 * @member {module:model/SensitiveTextAnnotation} textAnnotation
 */
Annotation.prototype['textAnnotation'] = undefined;






export default Annotation;

