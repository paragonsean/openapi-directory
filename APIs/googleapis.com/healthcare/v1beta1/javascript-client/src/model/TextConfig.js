/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InfoTypeTransformation from './InfoTypeTransformation';

/**
 * The TextConfig model module.
 * @module model/TextConfig
 * @version v1beta1
 */
class TextConfig {
    /**
     * Constructs a new <code>TextConfig</code>.
     * Configures how to transform sensitive text &#x60;InfoTypes&#x60;.
     * @alias module:model/TextConfig
     */
    constructor() { 
        
        TextConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TextConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextConfig} obj Optional instance to populate.
     * @return {module:model/TextConfig} The populated <code>TextConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TextConfig();

            if (data.hasOwnProperty('additionalTransformations')) {
                obj['additionalTransformations'] = ApiClient.convertToType(data['additionalTransformations'], [InfoTypeTransformation]);
            }
            if (data.hasOwnProperty('excludeInfoTypes')) {
                obj['excludeInfoTypes'] = ApiClient.convertToType(data['excludeInfoTypes'], ['String']);
            }
            if (data.hasOwnProperty('profileType')) {
                obj['profileType'] = ApiClient.convertToType(data['profileType'], 'String');
            }
            if (data.hasOwnProperty('transformations')) {
                obj['transformations'] = ApiClient.convertToType(data['transformations'], [InfoTypeTransformation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TextConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TextConfig</code>.
     */
    static validateJSON(data) {
        if (data['additionalTransformations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalTransformations'])) {
                throw new Error("Expected the field `additionalTransformations` to be an array in the JSON data but got " + data['additionalTransformations']);
            }
            // validate the optional field `additionalTransformations` (array)
            for (const item of data['additionalTransformations']) {
                InfoTypeTransformation.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['excludeInfoTypes'])) {
            throw new Error("Expected the field `excludeInfoTypes` to be an array in the JSON data but got " + data['excludeInfoTypes']);
        }
        // ensure the json data is a string
        if (data['profileType'] && !(typeof data['profileType'] === 'string' || data['profileType'] instanceof String)) {
            throw new Error("Expected the field `profileType` to be a primitive type in the JSON string but got " + data['profileType']);
        }
        if (data['transformations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transformations'])) {
                throw new Error("Expected the field `transformations` to be an array in the JSON data but got " + data['transformations']);
            }
            // validate the optional field `transformations` (array)
            for (const item of data['transformations']) {
                InfoTypeTransformation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Additional transformations to apply to the detected data, overriding `profile`.
 * @member {Array.<module:model/InfoTypeTransformation>} additionalTransformations
 */
TextConfig.prototype['additionalTransformations'] = undefined;

/**
 * InfoTypes to skip transforming, overriding `profile`.
 * @member {Array.<String>} excludeInfoTypes
 */
TextConfig.prototype['excludeInfoTypes'] = undefined;

/**
 * Base profile type for text transformation.
 * @member {module:model/TextConfig.ProfileTypeEnum} profileType
 */
TextConfig.prototype['profileType'] = undefined;

/**
 * The transformations to apply to the detected data. Deprecated. Use `additional_transformations` instead.
 * @member {Array.<module:model/InfoTypeTransformation>} transformations
 */
TextConfig.prototype['transformations'] = undefined;





/**
 * Allowed values for the <code>profileType</code> property.
 * @enum {String}
 * @readonly
 */
TextConfig['ProfileTypeEnum'] = {

    /**
     * value: "PROFILE_TYPE_UNSPECIFIED"
     * @const
     */
    "PROFILE_TYPE_UNSPECIFIED": "PROFILE_TYPE_UNSPECIFIED",

    /**
     * value: "EMPTY"
     * @const
     */
    "EMPTY": "EMPTY",

    /**
     * value: "BASIC"
     * @const
     */
    "BASIC": "BASIC"
};



export default TextConfig;

