/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KmsWrappedCryptoKey model module.
 * @module model/KmsWrappedCryptoKey
 * @version v1beta1
 */
class KmsWrappedCryptoKey {
    /**
     * Constructs a new <code>KmsWrappedCryptoKey</code>.
     * Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. The key must grant the Cloud IAM permission &#x60;cloudkms.cryptoKeyVersions.useToDecrypt&#x60; to the project&#39;s Cloud Healthcare Service Agent service account. For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key).
     * @alias module:model/KmsWrappedCryptoKey
     */
    constructor() { 
        
        KmsWrappedCryptoKey.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KmsWrappedCryptoKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KmsWrappedCryptoKey} obj Optional instance to populate.
     * @return {module:model/KmsWrappedCryptoKey} The populated <code>KmsWrappedCryptoKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KmsWrappedCryptoKey();

            if (data.hasOwnProperty('cryptoKey')) {
                obj['cryptoKey'] = ApiClient.convertToType(data['cryptoKey'], 'String');
            }
            if (data.hasOwnProperty('wrappedKey')) {
                obj['wrappedKey'] = ApiClient.convertToType(data['wrappedKey'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KmsWrappedCryptoKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KmsWrappedCryptoKey</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cryptoKey'] && !(typeof data['cryptoKey'] === 'string' || data['cryptoKey'] instanceof String)) {
            throw new Error("Expected the field `cryptoKey` to be a primitive type in the JSON string but got " + data['cryptoKey']);
        }

        return true;
    }


}



/**
 * Required. The resource name of the KMS CryptoKey to use for unwrapping. For example, `projects/{project_id}/locations/{location_id}/keyRings/{keyring}/cryptoKeys/{key}`.
 * @member {String} cryptoKey
 */
KmsWrappedCryptoKey.prototype['cryptoKey'] = undefined;

/**
 * Required. The wrapped data crypto key.
 * @member {Blob} wrappedKey
 */
KmsWrappedCryptoKey.prototype['wrappedKey'] = undefined;






export default KmsWrappedCryptoKey;

