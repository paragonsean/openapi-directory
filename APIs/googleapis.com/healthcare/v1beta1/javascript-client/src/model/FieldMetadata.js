/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FieldMetadata model module.
 * @module model/FieldMetadata
 * @version v1beta1
 */
class FieldMetadata {
    /**
     * Constructs a new <code>FieldMetadata</code>.
     * Specifies FHIR paths to match, and how to handle de-identification of matching fields.
     * @alias module:model/FieldMetadata
     */
    constructor() { 
        
        FieldMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FieldMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FieldMetadata} obj Optional instance to populate.
     * @return {module:model/FieldMetadata} The populated <code>FieldMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FieldMetadata();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('paths')) {
                obj['paths'] = ApiClient.convertToType(data['paths'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FieldMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FieldMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['paths'])) {
            throw new Error("Expected the field `paths` to be an array in the JSON data but got " + data['paths']);
        }

        return true;
    }


}



/**
 * Deidentify action for one field.
 * @member {module:model/FieldMetadata.ActionEnum} action
 */
FieldMetadata.prototype['action'] = undefined;

/**
 * List of paths to FHIR fields to redact. Each path is a period-separated list where each component is either a field name or FHIR type name. All types begin with an upper case letter. For example, the resource field \"Patient.Address.city\", which uses a string type, can be matched by \"Patient.Address.String\". Path also supports partial matching. For example, \"Patient.Address.city\" can be matched by \"Address.city\" (Patient omitted). Partial matching and type matching can be combined. For example, \"Patient.Address.city\" can be matched by \"Address.String\". For \"choice\" types (those defined in the FHIR spec with the form: field[x]), use two separate components. For example, \"deceasedAge.unit\" is matched by \"Deceased.Age.unit\". Supported types are: AdministrativeGenderCode, Base64Binary, Boolean, Code, Date, DateTime, Decimal, HumanName, Id, Instant, Integer, LanguageCode, Markdown, Oid, PositiveInt, String, UnsignedInt, Uri, Uuid, Xhtml. The sub-type for HumanName(for example HumanName.given, HumanName.family) can be omitted.
 * @member {Array.<String>} paths
 */
FieldMetadata.prototype['paths'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
FieldMetadata['ActionEnum'] = {

    /**
     * value: "ACTION_UNSPECIFIED"
     * @const
     */
    "ACTION_UNSPECIFIED": "ACTION_UNSPECIFIED",

    /**
     * value: "TRANSFORM"
     * @const
     */
    "TRANSFORM": "TRANSFORM",

    /**
     * value: "INSPECT_AND_TRANSFORM"
     * @const
     */
    "INSPECT_AND_TRANSFORM": "INSPECT_AND_TRANSFORM",

    /**
     * value: "DO_NOT_TRANSFORM"
     * @const
     */
    "DO_NOT_TRANSFORM": "DO_NOT_TRANSFORM"
};



export default FieldMetadata;

