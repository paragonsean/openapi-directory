/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConsentAccessorScope from './ConsentAccessorScope';
import ExplainDataAccessConsentInfo from './ExplainDataAccessConsentInfo';

/**
 * The ExplainDataAccessConsentScope model module.
 * @module model/ExplainDataAccessConsentScope
 * @version v1beta1
 */
class ExplainDataAccessConsentScope {
    /**
     * Constructs a new <code>ExplainDataAccessConsentScope</code>.
     * A single consent scope that provides info on who has access to the requested resource scope for a particular purpose and environment, enforced by which consent.
     * @alias module:model/ExplainDataAccessConsentScope
     */
    constructor() { 
        
        ExplainDataAccessConsentScope.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExplainDataAccessConsentScope</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExplainDataAccessConsentScope} obj Optional instance to populate.
     * @return {module:model/ExplainDataAccessConsentScope} The populated <code>ExplainDataAccessConsentScope</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExplainDataAccessConsentScope();

            if (data.hasOwnProperty('accessorScope')) {
                obj['accessorScope'] = ConsentAccessorScope.constructFromObject(data['accessorScope']);
            }
            if (data.hasOwnProperty('decision')) {
                obj['decision'] = ApiClient.convertToType(data['decision'], 'String');
            }
            if (data.hasOwnProperty('enforcingConsents')) {
                obj['enforcingConsents'] = ApiClient.convertToType(data['enforcingConsents'], [ExplainDataAccessConsentInfo]);
            }
            if (data.hasOwnProperty('exceptions')) {
                obj['exceptions'] = ApiClient.convertToType(data['exceptions'], [ExplainDataAccessConsentScope]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExplainDataAccessConsentScope</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExplainDataAccessConsentScope</code>.
     */
    static validateJSON(data) {
        // validate the optional field `accessorScope`
        if (data['accessorScope']) { // data not null
          ConsentAccessorScope.validateJSON(data['accessorScope']);
        }
        // ensure the json data is a string
        if (data['decision'] && !(typeof data['decision'] === 'string' || data['decision'] instanceof String)) {
            throw new Error("Expected the field `decision` to be a primitive type in the JSON string but got " + data['decision']);
        }
        if (data['enforcingConsents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['enforcingConsents'])) {
                throw new Error("Expected the field `enforcingConsents` to be an array in the JSON data but got " + data['enforcingConsents']);
            }
            // validate the optional field `enforcingConsents` (array)
            for (const item of data['enforcingConsents']) {
                ExplainDataAccessConsentInfo.validateJSON(item);
            };
        }
        if (data['exceptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['exceptions'])) {
                throw new Error("Expected the field `exceptions` to be an array in the JSON data but got " + data['exceptions']);
            }
            // validate the optional field `exceptions` (array)
            for (const item of data['exceptions']) {
                ExplainDataAccessConsentScope.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/ConsentAccessorScope} accessorScope
 */
ExplainDataAccessConsentScope.prototype['accessorScope'] = undefined;

/**
 * Whether the current consent scope is permitted or denied access on the requested resource.
 * @member {module:model/ExplainDataAccessConsentScope.DecisionEnum} decision
 */
ExplainDataAccessConsentScope.prototype['decision'] = undefined;

/**
 * Metadata of the consent resources that enforce the consent scope's access.
 * @member {Array.<module:model/ExplainDataAccessConsentInfo>} enforcingConsents
 */
ExplainDataAccessConsentScope.prototype['enforcingConsents'] = undefined;

/**
 * Other consent scopes that created exceptions within this scope.
 * @member {Array.<module:model/ExplainDataAccessConsentScope>} exceptions
 */
ExplainDataAccessConsentScope.prototype['exceptions'] = undefined;





/**
 * Allowed values for the <code>decision</code> property.
 * @enum {String}
 * @readonly
 */
ExplainDataAccessConsentScope['DecisionEnum'] = {

    /**
     * value: "CONSENT_DECISION_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "CONSENT_DECISION_TYPE_UNSPECIFIED",

    /**
     * value: "CONSENT_DECISION_TYPE_PERMIT"
     * @const
     */
    "PERMIT": "CONSENT_DECISION_TYPE_PERMIT",

    /**
     * value: "CONSENT_DECISION_TYPE_DENY"
     * @const
     */
    "DENY": "CONSENT_DECISION_TYPE_DENY"
};



export default ExplainDataAccessConsentScope;

