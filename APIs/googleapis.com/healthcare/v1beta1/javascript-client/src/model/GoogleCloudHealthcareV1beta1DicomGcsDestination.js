/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudHealthcareV1beta1DicomGcsDestination model module.
 * @module model/GoogleCloudHealthcareV1beta1DicomGcsDestination
 * @version v1beta1
 */
class GoogleCloudHealthcareV1beta1DicomGcsDestination {
    /**
     * Constructs a new <code>GoogleCloudHealthcareV1beta1DicomGcsDestination</code>.
     * The Cloud Storage location where the server writes the output and the export configuration.
     * @alias module:model/GoogleCloudHealthcareV1beta1DicomGcsDestination
     */
    constructor() { 
        
        GoogleCloudHealthcareV1beta1DicomGcsDestination.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudHealthcareV1beta1DicomGcsDestination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudHealthcareV1beta1DicomGcsDestination} obj Optional instance to populate.
     * @return {module:model/GoogleCloudHealthcareV1beta1DicomGcsDestination} The populated <code>GoogleCloudHealthcareV1beta1DicomGcsDestination</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudHealthcareV1beta1DicomGcsDestination();

            if (data.hasOwnProperty('mimeType')) {
                obj['mimeType'] = ApiClient.convertToType(data['mimeType'], 'String');
            }
            if (data.hasOwnProperty('uriPrefix')) {
                obj['uriPrefix'] = ApiClient.convertToType(data['uriPrefix'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudHealthcareV1beta1DicomGcsDestination</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudHealthcareV1beta1DicomGcsDestination</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['mimeType'] && !(typeof data['mimeType'] === 'string' || data['mimeType'] instanceof String)) {
            throw new Error("Expected the field `mimeType` to be a primitive type in the JSON string but got " + data['mimeType']);
        }
        // ensure the json data is a string
        if (data['uriPrefix'] && !(typeof data['uriPrefix'] === 'string' || data['uriPrefix'] instanceof String)) {
            throw new Error("Expected the field `uriPrefix` to be a primitive type in the JSON string but got " + data['uriPrefix']);
        }

        return true;
    }


}



/**
 * MIME types supported by DICOM spec. Each file is written in the following format: `.../{study_id}/{series_id}/{instance_id}[/{frame_number}].{extension}` The frame_number component exists only for multi-frame instances. Supported MIME types are consistent with supported formats in DICOMweb: https://cloud.google.com/healthcare/docs/dicom#retrieve_transaction. Specifically, the following are supported: - application/dicom; transfer-syntax=1.2.840.10008.1.2.1 (uncompressed DICOM) - application/dicom; transfer-syntax=1.2.840.10008.1.2.4.50 (DICOM with embedded JPEG Baseline) - application/dicom; transfer-syntax=1.2.840.10008.1.2.4.90 (DICOM with embedded JPEG 2000 Lossless Only) - application/dicom; transfer-syntax=1.2.840.10008.1.2.4.91 (DICOM with embedded JPEG 2000)h - application/dicom; transfer-syntax=* (DICOM with no transcoding) - application/octet-stream; transfer-syntax=1.2.840.10008.1.2.1 (raw uncompressed PixelData) - application/octet-stream; transfer-syntax=* (raw PixelData in whatever format it was uploaded in) - image/jpeg; transfer-syntax=1.2.840.10008.1.2.4.50 (Consumer JPEG) - image/png The following extensions are used for output files: - application/dicom -> .dcm - image/jpeg -> .jpg - image/png -> .png - application/octet-stream -> no extension If unspecified, the instances are exported in the original DICOM format they were uploaded in.
 * @member {String} mimeType
 */
GoogleCloudHealthcareV1beta1DicomGcsDestination.prototype['mimeType'] = undefined;

/**
 * The Cloud Storage destination to export to. URI for a Cloud Storage directory where the server writes the result files, in the format `gs://{bucket-id}/{path/to/destination/dir}`). If there is no trailing slash, the service appends one when composing the object path. The user is responsible for creating the Cloud Storage bucket referenced in `uri_prefix`.
 * @member {String} uriPrefix
 */
GoogleCloudHealthcareV1beta1DicomGcsDestination.prototype['uriPrefix'] = undefined;






export default GoogleCloudHealthcareV1beta1DicomGcsDestination;

