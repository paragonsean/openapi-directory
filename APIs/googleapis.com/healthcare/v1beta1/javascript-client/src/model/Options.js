/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageConfig from './ImageConfig';

/**
 * The Options model module.
 * @module model/Options
 * @version v1beta1
 */
class Options {
    /**
     * Constructs a new <code>Options</code>.
     * Specifies additional options to apply to the base profile.
     * @alias module:model/Options
     */
    constructor() { 
        
        Options.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Options</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Options} obj Optional instance to populate.
     * @return {module:model/Options} The populated <code>Options</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Options();

            if (data.hasOwnProperty('cleanDescriptors')) {
                obj['cleanDescriptors'] = ApiClient.convertToType(data['cleanDescriptors'], Object);
            }
            if (data.hasOwnProperty('cleanImage')) {
                obj['cleanImage'] = ImageConfig.constructFromObject(data['cleanImage']);
            }
            if (data.hasOwnProperty('primaryIds')) {
                obj['primaryIds'] = ApiClient.convertToType(data['primaryIds'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Options</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Options</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cleanImage`
        if (data['cleanImage']) { // data not null
          ImageConfig.validateJSON(data['cleanImage']);
        }
        // ensure the json data is a string
        if (data['primaryIds'] && !(typeof data['primaryIds'] === 'string' || data['primaryIds'] instanceof String)) {
            throw new Error("Expected the field `primaryIds` to be a primitive type in the JSON string but got " + data['primaryIds']);
        }

        return true;
    }


}



/**
 * This option is based on the DICOM Standard's [Clean Descriptors Option](http://dicom.nema.org/medical/dicom/2018e/output/chtml/part15/sect_E.3.5.html), and the `CleanText` `Action` is applied to all the specified fields. When cleaning text, the process attempts to transform phrases matching any of the tags marked for removal (action codes D, Z, X, and U) in the [Basic Profile](http://dicom.nema.org/medical/dicom/2018e/output/chtml/part15/chapter_E.html). These contextual phrases are replaced with the token \"[CTX]\". This option uses an additional infoType during inspection.
 * @member {Object} cleanDescriptors
 */
Options.prototype['cleanDescriptors'] = undefined;

/**
 * @member {module:model/ImageConfig} cleanImage
 */
Options.prototype['cleanImage'] = undefined;

/**
 * Set `Action` for [`StudyInstanceUID`, `SeriesInstanceUID`, `SOPInstanceUID`, and `MediaStorageSOPInstanceUID`](http://dicom.nema.org/medical/dicom/2018e/output/chtml/part06/chapter_6.html).
 * @member {module:model/Options.PrimaryIdsEnum} primaryIds
 */
Options.prototype['primaryIds'] = undefined;





/**
 * Allowed values for the <code>primaryIds</code> property.
 * @enum {String}
 * @readonly
 */
Options['PrimaryIdsEnum'] = {

    /**
     * value: "PRIMARY_IDS_OPTION_UNSPECIFIED"
     * @const
     */
    "PRIMARY_IDS_OPTION_UNSPECIFIED": "PRIMARY_IDS_OPTION_UNSPECIFIED",

    /**
     * value: "KEEP"
     * @const
     */
    "KEEP": "KEEP",

    /**
     * value: "REGEN"
     * @const
     */
    "REGEN": "REGEN"
};



export default Options;

