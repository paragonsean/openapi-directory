/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Action from './Action';
import Options from './Options';

/**
 * The DicomTagConfig model module.
 * @module model/DicomTagConfig
 * @version v1beta1
 */
class DicomTagConfig {
    /**
     * Constructs a new <code>DicomTagConfig</code>.
     * Specifies the parameters needed for the de-identification of DICOM stores.
     * @alias module:model/DicomTagConfig
     */
    constructor() { 
        
        DicomTagConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DicomTagConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DicomTagConfig} obj Optional instance to populate.
     * @return {module:model/DicomTagConfig} The populated <code>DicomTagConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DicomTagConfig();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], [Action]);
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = Options.constructFromObject(data['options']);
            }
            if (data.hasOwnProperty('profileType')) {
                obj['profileType'] = ApiClient.convertToType(data['profileType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DicomTagConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DicomTagConfig</code>.
     */
    static validateJSON(data) {
        if (data['actions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['actions'])) {
                throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
            }
            // validate the optional field `actions` (array)
            for (const item of data['actions']) {
                Action.validateJSON(item);
            };
        }
        // validate the optional field `options`
        if (data['options']) { // data not null
          Options.validateJSON(data['options']);
        }
        // ensure the json data is a string
        if (data['profileType'] && !(typeof data['profileType'] === 'string' || data['profileType'] instanceof String)) {
            throw new Error("Expected the field `profileType` to be a primitive type in the JSON string but got " + data['profileType']);
        }

        return true;
    }


}



/**
 * Specifies custom tag selections and `Actions` to apply to them. Overrides `options` and `profile`. Conflicting `Actions` are applied in the order given.
 * @member {Array.<module:model/Action>} actions
 */
DicomTagConfig.prototype['actions'] = undefined;

/**
 * @member {module:model/Options} options
 */
DicomTagConfig.prototype['options'] = undefined;

/**
 * Base profile type for handling DICOM tags.
 * @member {module:model/DicomTagConfig.ProfileTypeEnum} profileType
 */
DicomTagConfig.prototype['profileType'] = undefined;





/**
 * Allowed values for the <code>profileType</code> property.
 * @enum {String}
 * @readonly
 */
DicomTagConfig['ProfileTypeEnum'] = {

    /**
     * value: "PROFILE_TYPE_UNSPECIFIED"
     * @const
     */
    "PROFILE_TYPE_UNSPECIFIED": "PROFILE_TYPE_UNSPECIFIED",

    /**
     * value: "MINIMAL_KEEP_LIST_PROFILE"
     * @const
     */
    "MINIMAL_KEEP_LIST_PROFILE": "MINIMAL_KEEP_LIST_PROFILE",

    /**
     * value: "ATTRIBUTE_CONFIDENTIALITY_BASIC_PROFILE"
     * @const
     */
    "ATTRIBUTE_CONFIDENTIALITY_BASIC_PROFILE": "ATTRIBUTE_CONFIDENTIALITY_BASIC_PROFILE",

    /**
     * value: "KEEP_ALL_PROFILE"
     * @const
     */
    "KEEP_ALL_PROFILE": "KEEP_ALL_PROFILE",

    /**
     * value: "DEIDENTIFY_TAG_CONTENTS"
     * @const
     */
    "DEIDENTIFY_TAG_CONTENTS": "DEIDENTIFY_TAG_CONTENTS"
};



export default DicomTagConfig;

