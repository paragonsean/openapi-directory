/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Hl7SchemaConfig from './Hl7SchemaConfig';
import Hl7TypesConfig from './Hl7TypesConfig';

/**
 * The SchemaPackage model module.
 * @module model/SchemaPackage
 * @version v1beta1
 */
class SchemaPackage {
    /**
     * Constructs a new <code>SchemaPackage</code>.
     * A schema package contains a set of schemas and type definitions.
     * @alias module:model/SchemaPackage
     */
    constructor() { 
        
        SchemaPackage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SchemaPackage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SchemaPackage} obj Optional instance to populate.
     * @return {module:model/SchemaPackage} The populated <code>SchemaPackage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SchemaPackage();

            if (data.hasOwnProperty('ignoreMinOccurs')) {
                obj['ignoreMinOccurs'] = ApiClient.convertToType(data['ignoreMinOccurs'], 'Boolean');
            }
            if (data.hasOwnProperty('schemas')) {
                obj['schemas'] = ApiClient.convertToType(data['schemas'], [Hl7SchemaConfig]);
            }
            if (data.hasOwnProperty('schematizedParsingType')) {
                obj['schematizedParsingType'] = ApiClient.convertToType(data['schematizedParsingType'], 'String');
            }
            if (data.hasOwnProperty('types')) {
                obj['types'] = ApiClient.convertToType(data['types'], [Hl7TypesConfig]);
            }
            if (data.hasOwnProperty('unexpectedSegmentHandling')) {
                obj['unexpectedSegmentHandling'] = ApiClient.convertToType(data['unexpectedSegmentHandling'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SchemaPackage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SchemaPackage</code>.
     */
    static validateJSON(data) {
        if (data['schemas']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['schemas'])) {
                throw new Error("Expected the field `schemas` to be an array in the JSON data but got " + data['schemas']);
            }
            // validate the optional field `schemas` (array)
            for (const item of data['schemas']) {
                Hl7SchemaConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['schematizedParsingType'] && !(typeof data['schematizedParsingType'] === 'string' || data['schematizedParsingType'] instanceof String)) {
            throw new Error("Expected the field `schematizedParsingType` to be a primitive type in the JSON string but got " + data['schematizedParsingType']);
        }
        if (data['types']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['types'])) {
                throw new Error("Expected the field `types` to be an array in the JSON data but got " + data['types']);
            }
            // validate the optional field `types` (array)
            for (const item of data['types']) {
                Hl7TypesConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['unexpectedSegmentHandling'] && !(typeof data['unexpectedSegmentHandling'] === 'string' || data['unexpectedSegmentHandling'] instanceof String)) {
            throw new Error("Expected the field `unexpectedSegmentHandling` to be a primitive type in the JSON string but got " + data['unexpectedSegmentHandling']);
        }

        return true;
    }


}



/**
 * Flag to ignore all min_occurs restrictions in the schema. This means that incoming messages can omit any group, segment, field, component, or subcomponent.
 * @member {Boolean} ignoreMinOccurs
 */
SchemaPackage.prototype['ignoreMinOccurs'] = undefined;

/**
 * Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message.
 * @member {Array.<module:model/Hl7SchemaConfig>} schemas
 */
SchemaPackage.prototype['schemas'] = undefined;

/**
 * Determines how messages that fail to parse are handled.
 * @member {module:model/SchemaPackage.SchematizedParsingTypeEnum} schematizedParsingType
 */
SchemaPackage.prototype['schematizedParsingType'] = undefined;

/**
 * Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message.
 * @member {Array.<module:model/Hl7TypesConfig>} types
 */
SchemaPackage.prototype['types'] = undefined;

/**
 * Determines how unexpected segments (segments not matched to the schema) are handled.
 * @member {module:model/SchemaPackage.UnexpectedSegmentHandlingEnum} unexpectedSegmentHandling
 */
SchemaPackage.prototype['unexpectedSegmentHandling'] = undefined;





/**
 * Allowed values for the <code>schematizedParsingType</code> property.
 * @enum {String}
 * @readonly
 */
SchemaPackage['SchematizedParsingTypeEnum'] = {

    /**
     * value: "SCHEMATIZED_PARSING_TYPE_UNSPECIFIED"
     * @const
     */
    "SCHEMATIZED_PARSING_TYPE_UNSPECIFIED": "SCHEMATIZED_PARSING_TYPE_UNSPECIFIED",

    /**
     * value: "SOFT_FAIL"
     * @const
     */
    "SOFT_FAIL": "SOFT_FAIL",

    /**
     * value: "HARD_FAIL"
     * @const
     */
    "HARD_FAIL": "HARD_FAIL"
};


/**
 * Allowed values for the <code>unexpectedSegmentHandling</code> property.
 * @enum {String}
 * @readonly
 */
SchemaPackage['UnexpectedSegmentHandlingEnum'] = {

    /**
     * value: "UNEXPECTED_SEGMENT_HANDLING_MODE_UNSPECIFIED"
     * @const
     */
    "UNEXPECTED_SEGMENT_HANDLING_MODE_UNSPECIFIED": "UNEXPECTED_SEGMENT_HANDLING_MODE_UNSPECIFIED",

    /**
     * value: "FAIL"
     * @const
     */
    "FAIL": "FAIL",

    /**
     * value: "SKIP"
     * @const
     */
    "SKIP": "SKIP",

    /**
     * value: "PARSE"
     * @const
     */
    "PARSE": "PARSE"
};



export default SchemaPackage;

