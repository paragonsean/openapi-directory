/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination from './GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination';
import InfoTypeConfig from './InfoTypeConfig';

/**
 * The EvaluateAnnotationStoreRequest model module.
 * @module model/EvaluateAnnotationStoreRequest
 * @version v1beta1
 */
class EvaluateAnnotationStoreRequest {
    /**
     * Constructs a new <code>EvaluateAnnotationStoreRequest</code>.
     * Request to evaluate an Annotation store against a ground truth [Annotation store].
     * @alias module:model/EvaluateAnnotationStoreRequest
     */
    constructor() { 
        
        EvaluateAnnotationStoreRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EvaluateAnnotationStoreRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EvaluateAnnotationStoreRequest} obj Optional instance to populate.
     * @return {module:model/EvaluateAnnotationStoreRequest} The populated <code>EvaluateAnnotationStoreRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EvaluateAnnotationStoreRequest();

            if (data.hasOwnProperty('bigqueryDestination')) {
                obj['bigqueryDestination'] = GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.constructFromObject(data['bigqueryDestination']);
            }
            if (data.hasOwnProperty('evalInfoTypeMapping')) {
                obj['evalInfoTypeMapping'] = ApiClient.convertToType(data['evalInfoTypeMapping'], {'String': 'String'});
            }
            if (data.hasOwnProperty('goldenInfoTypeMapping')) {
                obj['goldenInfoTypeMapping'] = ApiClient.convertToType(data['goldenInfoTypeMapping'], {'String': 'String'});
            }
            if (data.hasOwnProperty('goldenStore')) {
                obj['goldenStore'] = ApiClient.convertToType(data['goldenStore'], 'String');
            }
            if (data.hasOwnProperty('infoTypeConfig')) {
                obj['infoTypeConfig'] = InfoTypeConfig.constructFromObject(data['infoTypeConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EvaluateAnnotationStoreRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EvaluateAnnotationStoreRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bigqueryDestination`
        if (data['bigqueryDestination']) { // data not null
          GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.validateJSON(data['bigqueryDestination']);
        }
        // ensure the json data is a string
        if (data['goldenStore'] && !(typeof data['goldenStore'] === 'string' || data['goldenStore'] instanceof String)) {
            throw new Error("Expected the field `goldenStore` to be a primitive type in the JSON string but got " + data['goldenStore']);
        }
        // validate the optional field `infoTypeConfig`
        if (data['infoTypeConfig']) { // data not null
          InfoTypeConfig.validateJSON(data['infoTypeConfig']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination} bigqueryDestination
 */
EvaluateAnnotationStoreRequest.prototype['bigqueryDestination'] = undefined;

/**
 * Optional. InfoType mapping for `eval_store`. Different resources can map to the same infoType. For example, `PERSON_NAME`, `PERSON`, `NAME`, and `HUMAN` are different. To map all of these into a single infoType (such as `PERSON_NAME`), specify the following mapping: ``` info_type_mapping[\"PERSON\"] = \"PERSON_NAME\" info_type_mapping[\"NAME\"] = \"PERSON_NAME\" info_type_mapping[\"HUMAN\"] = \"PERSON_NAME\" ``` Unmentioned infoTypes, such as `DATE`, are treated as identity mapping. For example: ``` info_type_mapping[\"DATE\"] = \"DATE\" ``` InfoTypes are case-insensitive.
 * @member {Object.<String, String>} evalInfoTypeMapping
 */
EvaluateAnnotationStoreRequest.prototype['evalInfoTypeMapping'] = undefined;

/**
 * Optional. Similar to `eval_info_type_mapping`, infoType mapping for `golden_store`.
 * @member {Object.<String, String>} goldenInfoTypeMapping
 */
EvaluateAnnotationStoreRequest.prototype['goldenInfoTypeMapping'] = undefined;

/**
 * Required. The Annotation store to use as ground truth, in the format of `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`.
 * @member {String} goldenStore
 */
EvaluateAnnotationStoreRequest.prototype['goldenStore'] = undefined;

/**
 * @member {module:model/InfoTypeConfig} infoTypeConfig
 */
EvaluateAnnotationStoreRequest.prototype['infoTypeConfig'] = undefined;






export default EvaluateAnnotationStoreRequest;

