/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConsentAccessorScope model module.
 * @module model/ConsentAccessorScope
 * @version v1beta1
 */
class ConsentAccessorScope {
    /**
     * Constructs a new <code>ConsentAccessorScope</code>.
     * The accessor scope that describes who can access, for what purpose, in which environment.
     * @alias module:model/ConsentAccessorScope
     */
    constructor() { 
        
        ConsentAccessorScope.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConsentAccessorScope</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConsentAccessorScope} obj Optional instance to populate.
     * @return {module:model/ConsentAccessorScope} The populated <code>ConsentAccessorScope</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConsentAccessorScope();

            if (data.hasOwnProperty('actor')) {
                obj['actor'] = ApiClient.convertToType(data['actor'], 'String');
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = ApiClient.convertToType(data['environment'], 'String');
            }
            if (data.hasOwnProperty('purpose')) {
                obj['purpose'] = ApiClient.convertToType(data['purpose'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConsentAccessorScope</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConsentAccessorScope</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['actor'] && !(typeof data['actor'] === 'string' || data['actor'] instanceof String)) {
            throw new Error("Expected the field `actor` to be a primitive type in the JSON string but got " + data['actor']);
        }
        // ensure the json data is a string
        if (data['environment'] && !(typeof data['environment'] === 'string' || data['environment'] instanceof String)) {
            throw new Error("Expected the field `environment` to be a primitive type in the JSON string but got " + data['environment']);
        }
        // ensure the json data is a string
        if (data['purpose'] && !(typeof data['purpose'] === 'string' || data['purpose'] instanceof String)) {
            throw new Error("Expected the field `purpose` to be a primitive type in the JSON string but got " + data['purpose']);
        }

        return true;
    }


}



/**
 * An individual, group, or access role that identifies the accessor or a characteristic of the accessor. This can be a resource ID (such as `{resourceType}/{id}`) or an external URI. This value must be present.
 * @member {String} actor
 */
ConsentAccessorScope.prototype['actor'] = undefined;

/**
 * An abstract identifier that describes the environment or conditions under which the accessor is acting. Can be “*” if it applies to all environments.
 * @member {String} environment
 */
ConsentAccessorScope.prototype['environment'] = undefined;

/**
 * The intent of data use. Can be “*” if it applies to all purposes.
 * @member {String} purpose
 */
ConsentAccessorScope.prototype['purpose'] = undefined;






export default ConsentAccessorScope;

