/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NotificationConfig model module.
 * @module model/NotificationConfig
 * @version v1beta1
 */
class NotificationConfig {
    /**
     * Constructs a new <code>NotificationConfig</code>.
     * Specifies where to send notifications upon changes to a data store.
     * @alias module:model/NotificationConfig
     */
    constructor() { 
        
        NotificationConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NotificationConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationConfig} obj Optional instance to populate.
     * @return {module:model/NotificationConfig} The populated <code>NotificationConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationConfig();

            if (data.hasOwnProperty('pubsubTopic')) {
                obj['pubsubTopic'] = ApiClient.convertToType(data['pubsubTopic'], 'String');
            }
            if (data.hasOwnProperty('sendForBulkImport')) {
                obj['sendForBulkImport'] = ApiClient.convertToType(data['sendForBulkImport'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['pubsubTopic'] && !(typeof data['pubsubTopic'] === 'string' || data['pubsubTopic'] instanceof String)) {
            throw new Error("Expected the field `pubsubTopic` to be a primitive type in the JSON string but got " + data['pubsubTopic']);
        }

        return true;
    }


}



/**
 * The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. PubsubMessage.Data contains the resource name. PubsubMessage.MessageId is the ID of this message. It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message was published. Notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). If the number of errors exceeds a certain rate, some aren't submitted. Note that not all operations trigger notifications, see [Configuring Pub/Sub notifications](https://cloud.google.com/healthcare/docs/how-tos/pubsub) for specific details.
 * @member {String} pubsubTopic
 */
NotificationConfig.prototype['pubsubTopic'] = undefined;

/**
 * Indicates whether or not to send Pub/Sub notifications on bulk import. Only supported for DICOM imports.
 * @member {Boolean} sendForBulkImport
 */
NotificationConfig.prototype['sendForBulkImport'] = undefined;






export default NotificationConfig;

