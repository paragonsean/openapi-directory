/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImageConfig model module.
 * @module model/ImageConfig
 * @version v1beta1
 */
class ImageConfig {
    /**
     * Constructs a new <code>ImageConfig</code>.
     * Specifies how to handle de-identification of image pixels.
     * @alias module:model/ImageConfig
     */
    constructor() { 
        
        ImageConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageConfig} obj Optional instance to populate.
     * @return {module:model/ImageConfig} The populated <code>ImageConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageConfig();

            if (data.hasOwnProperty('additionalInfoTypes')) {
                obj['additionalInfoTypes'] = ApiClient.convertToType(data['additionalInfoTypes'], ['String']);
            }
            if (data.hasOwnProperty('excludeInfoTypes')) {
                obj['excludeInfoTypes'] = ApiClient.convertToType(data['excludeInfoTypes'], ['String']);
            }
            if (data.hasOwnProperty('textRedactionMode')) {
                obj['textRedactionMode'] = ApiClient.convertToType(data['textRedactionMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['additionalInfoTypes'])) {
            throw new Error("Expected the field `additionalInfoTypes` to be an array in the JSON data but got " + data['additionalInfoTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['excludeInfoTypes'])) {
            throw new Error("Expected the field `excludeInfoTypes` to be an array in the JSON data but got " + data['excludeInfoTypes']);
        }
        // ensure the json data is a string
        if (data['textRedactionMode'] && !(typeof data['textRedactionMode'] === 'string' || data['textRedactionMode'] instanceof String)) {
            throw new Error("Expected the field `textRedactionMode` to be a primitive type in the JSON string but got " + data['textRedactionMode']);
        }

        return true;
    }


}



/**
 * Additional InfoTypes to redact in the images in addition to those used by `text_redaction_mode`. Can only be used when `text_redaction_mode` is set to `REDACT_SENSITIVE_TEXT`, `REDACT_SENSITIVE_TEXT_CLEAN_DESCRIPTORS` or `TEXT_REDACTION_MODE_UNSPECIFIED`.
 * @member {Array.<String>} additionalInfoTypes
 */
ImageConfig.prototype['additionalInfoTypes'] = undefined;

/**
 * InfoTypes to skip redacting, overriding those used by `text_redaction_mode`. Can only be used when `text_redaction_mode` is set to `REDACT_SENSITIVE_TEXT` or `REDACT_SENSITIVE_TEXT_CLEAN_DESCRIPTORS`.
 * @member {Array.<String>} excludeInfoTypes
 */
ImageConfig.prototype['excludeInfoTypes'] = undefined;

/**
 * Determines how to redact text from image.
 * @member {module:model/ImageConfig.TextRedactionModeEnum} textRedactionMode
 */
ImageConfig.prototype['textRedactionMode'] = undefined;





/**
 * Allowed values for the <code>textRedactionMode</code> property.
 * @enum {String}
 * @readonly
 */
ImageConfig['TextRedactionModeEnum'] = {

    /**
     * value: "TEXT_REDACTION_MODE_UNSPECIFIED"
     * @const
     */
    "TEXT_REDACTION_MODE_UNSPECIFIED": "TEXT_REDACTION_MODE_UNSPECIFIED",

    /**
     * value: "REDACT_ALL_TEXT"
     * @const
     */
    "REDACT_ALL_TEXT": "REDACT_ALL_TEXT",

    /**
     * value: "REDACT_SENSITIVE_TEXT"
     * @const
     */
    "REDACT_SENSITIVE_TEXT": "REDACT_SENSITIVE_TEXT",

    /**
     * value: "REDACT_NO_TEXT"
     * @const
     */
    "REDACT_NO_TEXT": "REDACT_NO_TEXT",

    /**
     * value: "REDACT_SENSITIVE_TEXT_CLEAN_DESCRIPTORS"
     * @const
     */
    "REDACT_SENSITIVE_TEXT_CLEAN_DESCRIPTORS": "REDACT_SENSITIVE_TEXT_CLEAN_DESCRIPTORS"
};



export default ImageConfig;

