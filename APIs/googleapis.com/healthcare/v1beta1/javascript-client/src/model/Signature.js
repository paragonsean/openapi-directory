/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Image from './Image';

/**
 * The Signature model module.
 * @module model/Signature
 * @version v1beta1
 */
class Signature {
    /**
     * Constructs a new <code>Signature</code>.
     * User signature.
     * @alias module:model/Signature
     */
    constructor() { 
        
        Signature.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Signature</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Signature} obj Optional instance to populate.
     * @return {module:model/Signature} The populated <code>Signature</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Signature();

            if (data.hasOwnProperty('image')) {
                obj['image'] = Image.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('signatureTime')) {
                obj['signatureTime'] = ApiClient.convertToType(data['signatureTime'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Signature</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Signature</code>.
     */
    static validateJSON(data) {
        // validate the optional field `image`
        if (data['image']) { // data not null
          Image.validateJSON(data['image']);
        }
        // ensure the json data is a string
        if (data['signatureTime'] && !(typeof data['signatureTime'] === 'string' || data['signatureTime'] instanceof String)) {
            throw new Error("Expected the field `signatureTime` to be a primitive type in the JSON string but got " + data['signatureTime']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * @member {module:model/Image} image
 */
Signature.prototype['image'] = undefined;

/**
 * Optional. Metadata associated with the user's signature. For example, the user's name or the user's title.
 * @member {Object.<String, String>} metadata
 */
Signature.prototype['metadata'] = undefined;

/**
 * Optional. Timestamp of the signature.
 * @member {String} signatureTime
 */
Signature.prototype['signatureTime'] = undefined;

/**
 * Required. User's UUID provided by the client.
 * @member {String} userId
 */
Signature.prototype['userId'] = undefined;






export default Signature;

