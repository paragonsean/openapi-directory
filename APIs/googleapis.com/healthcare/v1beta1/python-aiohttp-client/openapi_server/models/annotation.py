# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.annotation_source import AnnotationSource
from openapi_server.models.image_annotation import ImageAnnotation
from openapi_server.models.resource_annotation import ResourceAnnotation
from openapi_server.models.sensitive_text_annotation import SensitiveTextAnnotation
from openapi_server import util


class Annotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_source: AnnotationSource=None, custom_data: Dict[str, str]=None, image_annotation: ImageAnnotation=None, name: str=None, resource_annotation: ResourceAnnotation=None, text_annotation: SensitiveTextAnnotation=None):
        """Annotation - a model defined in OpenAPI

        :param annotation_source: The annotation_source of this Annotation.
        :param custom_data: The custom_data of this Annotation.
        :param image_annotation: The image_annotation of this Annotation.
        :param name: The name of this Annotation.
        :param resource_annotation: The resource_annotation of this Annotation.
        :param text_annotation: The text_annotation of this Annotation.
        """
        self.openapi_types = {
            'annotation_source': AnnotationSource,
            'custom_data': Dict[str, str],
            'image_annotation': ImageAnnotation,
            'name': str,
            'resource_annotation': ResourceAnnotation,
            'text_annotation': SensitiveTextAnnotation
        }

        self.attribute_map = {
            'annotation_source': 'annotationSource',
            'custom_data': 'customData',
            'image_annotation': 'imageAnnotation',
            'name': 'name',
            'resource_annotation': 'resourceAnnotation',
            'text_annotation': 'textAnnotation'
        }

        self._annotation_source = annotation_source
        self._custom_data = custom_data
        self._image_annotation = image_annotation
        self._name = name
        self._resource_annotation = resource_annotation
        self._text_annotation = text_annotation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Annotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Annotation of this Annotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_source(self):
        """Gets the annotation_source of this Annotation.


        :return: The annotation_source of this Annotation.
        :rtype: AnnotationSource
        """
        return self._annotation_source

    @annotation_source.setter
    def annotation_source(self, annotation_source):
        """Sets the annotation_source of this Annotation.


        :param annotation_source: The annotation_source of this Annotation.
        :type annotation_source: AnnotationSource
        """

        self._annotation_source = annotation_source

    @property
    def custom_data(self):
        """Gets the custom_data of this Annotation.

        Additional information for this annotation record, such as annotator and verifier information or study campaign.

        :return: The custom_data of this Annotation.
        :rtype: Dict[str, str]
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """Sets the custom_data of this Annotation.

        Additional information for this annotation record, such as annotator and verifier information or study campaign.

        :param custom_data: The custom_data of this Annotation.
        :type custom_data: Dict[str, str]
        """

        self._custom_data = custom_data

    @property
    def image_annotation(self):
        """Gets the image_annotation of this Annotation.


        :return: The image_annotation of this Annotation.
        :rtype: ImageAnnotation
        """
        return self._image_annotation

    @image_annotation.setter
    def image_annotation(self, image_annotation):
        """Sets the image_annotation of this Annotation.


        :param image_annotation: The image_annotation of this Annotation.
        :type image_annotation: ImageAnnotation
        """

        self._image_annotation = image_annotation

    @property
    def name(self):
        """Gets the name of this Annotation.

        Identifier. Resource name of the Annotation, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}/annotations/{annotation_id}`.

        :return: The name of this Annotation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Annotation.

        Identifier. Resource name of the Annotation, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}/annotations/{annotation_id}`.

        :param name: The name of this Annotation.
        :type name: str
        """

        self._name = name

    @property
    def resource_annotation(self):
        """Gets the resource_annotation of this Annotation.


        :return: The resource_annotation of this Annotation.
        :rtype: ResourceAnnotation
        """
        return self._resource_annotation

    @resource_annotation.setter
    def resource_annotation(self, resource_annotation):
        """Sets the resource_annotation of this Annotation.


        :param resource_annotation: The resource_annotation of this Annotation.
        :type resource_annotation: ResourceAnnotation
        """

        self._resource_annotation = resource_annotation

    @property
    def text_annotation(self):
        """Gets the text_annotation of this Annotation.


        :return: The text_annotation of this Annotation.
        :rtype: SensitiveTextAnnotation
        """
        return self._text_annotation

    @text_annotation.setter
    def text_annotation(self, text_annotation):
        """Sets the text_annotation of this Annotation.


        :param text_annotation: The text_annotation of this Annotation.
        :type text_annotation: SensitiveTextAnnotation
        """

        self._text_annotation = text_annotation
