# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigureSearchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, canonical_urls: List[str]=None, validate_only: bool=None):
        """ConfigureSearchRequest - a model defined in OpenAPI

        :param canonical_urls: The canonical_urls of this ConfigureSearchRequest.
        :param validate_only: The validate_only of this ConfigureSearchRequest.
        """
        self.openapi_types = {
            'canonical_urls': List[str],
            'validate_only': bool
        }

        self.attribute_map = {
            'canonical_urls': 'canonicalUrls',
            'validate_only': 'validateOnly'
        }

        self._canonical_urls = canonical_urls
        self._validate_only = validate_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigureSearchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigureSearchRequest of this ConfigureSearchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def canonical_urls(self):
        """Gets the canonical_urls of this ConfigureSearchRequest.

        The canonical URLs of the search parameters that are intended to be used for the FHIR store. See https://www.hl7.org/fhir/references.html#canonical for explanation on FHIR canonical urls

        :return: The canonical_urls of this ConfigureSearchRequest.
        :rtype: List[str]
        """
        return self._canonical_urls

    @canonical_urls.setter
    def canonical_urls(self, canonical_urls):
        """Sets the canonical_urls of this ConfigureSearchRequest.

        The canonical URLs of the search parameters that are intended to be used for the FHIR store. See https://www.hl7.org/fhir/references.html#canonical for explanation on FHIR canonical urls

        :param canonical_urls: The canonical_urls of this ConfigureSearchRequest.
        :type canonical_urls: List[str]
        """

        self._canonical_urls = canonical_urls

    @property
    def validate_only(self):
        """Gets the validate_only of this ConfigureSearchRequest.

        If `validate_only` is set to true, the method will compile all the search parameters without actually setting the search config for the store and triggering the reindex.

        :return: The validate_only of this ConfigureSearchRequest.
        :rtype: bool
        """
        return self._validate_only

    @validate_only.setter
    def validate_only(self, validate_only):
        """Sets the validate_only of this ConfigureSearchRequest.

        If `validate_only` is set to true, the method will compile all the search parameters without actually setting the search config for the store and triggering the reindex.

        :param validate_only: The validate_only of this ConfigureSearchRequest.
        :type validate_only: bool
        """

        self._validate_only = validate_only
