# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CharacterMaskConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, masking_character: str=None):
        """CharacterMaskConfig - a model defined in OpenAPI

        :param masking_character: The masking_character of this CharacterMaskConfig.
        """
        self.openapi_types = {
            'masking_character': str
        }

        self.attribute_map = {
            'masking_character': 'maskingCharacter'
        }

        self._masking_character = masking_character

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CharacterMaskConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CharacterMaskConfig of this CharacterMaskConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def masking_character(self):
        """Gets the masking_character of this CharacterMaskConfig.

        Character to mask the sensitive values. If not supplied, defaults to \"*\".

        :return: The masking_character of this CharacterMaskConfig.
        :rtype: str
        """
        return self._masking_character

    @masking_character.setter
    def masking_character(self, masking_character):
        """Sets the masking_character of this CharacterMaskConfig.

        Character to mask the sensitive values. If not supplied, defaults to \"*\".

        :param masking_character: The masking_character of this CharacterMaskConfig.
        :type masking_character: str
        """

        self._masking_character = masking_character
