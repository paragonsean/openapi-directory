# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FieldMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, paths: List[str]=None):
        """FieldMetadata - a model defined in OpenAPI

        :param action: The action of this FieldMetadata.
        :param paths: The paths of this FieldMetadata.
        """
        self.openapi_types = {
            'action': str,
            'paths': List[str]
        }

        self.attribute_map = {
            'action': 'action',
            'paths': 'paths'
        }

        self._action = action
        self._paths = paths

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldMetadata of this FieldMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this FieldMetadata.

        Deidentify action for one field.

        :return: The action of this FieldMetadata.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this FieldMetadata.

        Deidentify action for one field.

        :param action: The action of this FieldMetadata.
        :type action: str
        """
        allowed_values = ["ACTION_UNSPECIFIED", "TRANSFORM", "INSPECT_AND_TRANSFORM", "DO_NOT_TRANSFORM"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def paths(self):
        """Gets the paths of this FieldMetadata.

        List of paths to FHIR fields to redact. Each path is a period-separated list where each component is either a field name or FHIR type name. All types begin with an upper case letter. For example, the resource field \"Patient.Address.city\", which uses a string type, can be matched by \"Patient.Address.String\". Path also supports partial matching. For example, \"Patient.Address.city\" can be matched by \"Address.city\" (Patient omitted). Partial matching and type matching can be combined. For example, \"Patient.Address.city\" can be matched by \"Address.String\". For \"choice\" types (those defined in the FHIR spec with the form: field[x]), use two separate components. For example, \"deceasedAge.unit\" is matched by \"Deceased.Age.unit\". Supported types are: AdministrativeGenderCode, Base64Binary, Boolean, Code, Date, DateTime, Decimal, HumanName, Id, Instant, Integer, LanguageCode, Markdown, Oid, PositiveInt, String, UnsignedInt, Uri, Uuid, Xhtml. The sub-type for HumanName(for example HumanName.given, HumanName.family) can be omitted.

        :return: The paths of this FieldMetadata.
        :rtype: List[str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this FieldMetadata.

        List of paths to FHIR fields to redact. Each path is a period-separated list where each component is either a field name or FHIR type name. All types begin with an upper case letter. For example, the resource field \"Patient.Address.city\", which uses a string type, can be matched by \"Patient.Address.String\". Path also supports partial matching. For example, \"Patient.Address.city\" can be matched by \"Address.city\" (Patient omitted). Partial matching and type matching can be combined. For example, \"Patient.Address.city\" can be matched by \"Address.String\". For \"choice\" types (those defined in the FHIR spec with the form: field[x]), use two separate components. For example, \"deceasedAge.unit\" is matched by \"Deceased.Age.unit\". Supported types are: AdministrativeGenderCode, Base64Binary, Boolean, Code, Date, DateTime, Decimal, HumanName, Id, Instant, Integer, LanguageCode, Markdown, Oid, PositiveInt, String, UnsignedInt, Uri, Uuid, Xhtml. The sub-type for HumanName(for example HumanName.given, HumanName.family) can be omitted.

        :param paths: The paths of this FieldMetadata.
        :type paths: List[str]
        """

        self._paths = paths
