# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.character_mask_config import CharacterMaskConfig
from openapi_server.models.crypto_hash_config import CryptoHashConfig
from openapi_server.models.date_shift_config import DateShiftConfig
from openapi_server import util


class InfoTypeTransformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, character_mask_config: CharacterMaskConfig=None, crypto_hash_config: CryptoHashConfig=None, date_shift_config: DateShiftConfig=None, info_types: List[str]=None, redact_config: object=None, replace_with_info_type_config: object=None):
        """InfoTypeTransformation - a model defined in OpenAPI

        :param character_mask_config: The character_mask_config of this InfoTypeTransformation.
        :param crypto_hash_config: The crypto_hash_config of this InfoTypeTransformation.
        :param date_shift_config: The date_shift_config of this InfoTypeTransformation.
        :param info_types: The info_types of this InfoTypeTransformation.
        :param redact_config: The redact_config of this InfoTypeTransformation.
        :param replace_with_info_type_config: The replace_with_info_type_config of this InfoTypeTransformation.
        """
        self.openapi_types = {
            'character_mask_config': CharacterMaskConfig,
            'crypto_hash_config': CryptoHashConfig,
            'date_shift_config': DateShiftConfig,
            'info_types': List[str],
            'redact_config': object,
            'replace_with_info_type_config': object
        }

        self.attribute_map = {
            'character_mask_config': 'characterMaskConfig',
            'crypto_hash_config': 'cryptoHashConfig',
            'date_shift_config': 'dateShiftConfig',
            'info_types': 'infoTypes',
            'redact_config': 'redactConfig',
            'replace_with_info_type_config': 'replaceWithInfoTypeConfig'
        }

        self._character_mask_config = character_mask_config
        self._crypto_hash_config = crypto_hash_config
        self._date_shift_config = date_shift_config
        self._info_types = info_types
        self._redact_config = redact_config
        self._replace_with_info_type_config = replace_with_info_type_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InfoTypeTransformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InfoTypeTransformation of this InfoTypeTransformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def character_mask_config(self):
        """Gets the character_mask_config of this InfoTypeTransformation.


        :return: The character_mask_config of this InfoTypeTransformation.
        :rtype: CharacterMaskConfig
        """
        return self._character_mask_config

    @character_mask_config.setter
    def character_mask_config(self, character_mask_config):
        """Sets the character_mask_config of this InfoTypeTransformation.


        :param character_mask_config: The character_mask_config of this InfoTypeTransformation.
        :type character_mask_config: CharacterMaskConfig
        """

        self._character_mask_config = character_mask_config

    @property
    def crypto_hash_config(self):
        """Gets the crypto_hash_config of this InfoTypeTransformation.


        :return: The crypto_hash_config of this InfoTypeTransformation.
        :rtype: CryptoHashConfig
        """
        return self._crypto_hash_config

    @crypto_hash_config.setter
    def crypto_hash_config(self, crypto_hash_config):
        """Sets the crypto_hash_config of this InfoTypeTransformation.


        :param crypto_hash_config: The crypto_hash_config of this InfoTypeTransformation.
        :type crypto_hash_config: CryptoHashConfig
        """

        self._crypto_hash_config = crypto_hash_config

    @property
    def date_shift_config(self):
        """Gets the date_shift_config of this InfoTypeTransformation.


        :return: The date_shift_config of this InfoTypeTransformation.
        :rtype: DateShiftConfig
        """
        return self._date_shift_config

    @date_shift_config.setter
    def date_shift_config(self, date_shift_config):
        """Sets the date_shift_config of this InfoTypeTransformation.


        :param date_shift_config: The date_shift_config of this InfoTypeTransformation.
        :type date_shift_config: DateShiftConfig
        """

        self._date_shift_config = date_shift_config

    @property
    def info_types(self):
        """Gets the info_types of this InfoTypeTransformation.

        `InfoTypes` to apply this transformation to. If this is not specified, this transformation becomes the default transformation, and is used for any `info_type` that is not specified in another transformation.

        :return: The info_types of this InfoTypeTransformation.
        :rtype: List[str]
        """
        return self._info_types

    @info_types.setter
    def info_types(self, info_types):
        """Sets the info_types of this InfoTypeTransformation.

        `InfoTypes` to apply this transformation to. If this is not specified, this transformation becomes the default transformation, and is used for any `info_type` that is not specified in another transformation.

        :param info_types: The info_types of this InfoTypeTransformation.
        :type info_types: List[str]
        """

        self._info_types = info_types

    @property
    def redact_config(self):
        """Gets the redact_config of this InfoTypeTransformation.

        Define how to redact sensitive values. Default behaviour is erase. For example, \"My name is Jane.\" becomes \"My name is .\"

        :return: The redact_config of this InfoTypeTransformation.
        :rtype: object
        """
        return self._redact_config

    @redact_config.setter
    def redact_config(self, redact_config):
        """Sets the redact_config of this InfoTypeTransformation.

        Define how to redact sensitive values. Default behaviour is erase. For example, \"My name is Jane.\" becomes \"My name is .\"

        :param redact_config: The redact_config of this InfoTypeTransformation.
        :type redact_config: object
        """

        self._redact_config = redact_config

    @property
    def replace_with_info_type_config(self):
        """Gets the replace_with_info_type_config of this InfoTypeTransformation.

        When using the INSPECT_AND_TRANSFORM action, each match is replaced with the name of the info_type. For example, \"My name is Jane\" becomes \"My name is [PERSON_NAME].\" The TRANSFORM action is equivalent to redacting.

        :return: The replace_with_info_type_config of this InfoTypeTransformation.
        :rtype: object
        """
        return self._replace_with_info_type_config

    @replace_with_info_type_config.setter
    def replace_with_info_type_config(self, replace_with_info_type_config):
        """Sets the replace_with_info_type_config of this InfoTypeTransformation.

        When using the INSPECT_AND_TRANSFORM action, each match is replaced with the name of the info_type. For example, \"My name is Jane\" becomes \"My name is [PERSON_NAME].\" The TRANSFORM action is equivalent to redacting.

        :param replace_with_info_type_config: The replace_with_info_type_config of this InfoTypeTransformation.
        :type replace_with_info_type_config: object
        """

        self._replace_with_info_type_config = replace_with_info_type_config
