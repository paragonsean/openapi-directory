# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consent_evaluation import ConsentEvaluation
from openapi_server import util


class CheckDataAccessResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consent_details: Dict[str, ConsentEvaluation]=None, consented: bool=None):
        """CheckDataAccessResponse - a model defined in OpenAPI

        :param consent_details: The consent_details of this CheckDataAccessResponse.
        :param consented: The consented of this CheckDataAccessResponse.
        """
        self.openapi_types = {
            'consent_details': Dict[str, ConsentEvaluation],
            'consented': bool
        }

        self.attribute_map = {
            'consent_details': 'consentDetails',
            'consented': 'consented'
        }

        self._consent_details = consent_details
        self._consented = consented

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckDataAccessResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckDataAccessResponse of this CheckDataAccessResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consent_details(self):
        """Gets the consent_details of this CheckDataAccessResponse.

        The resource names of all evaluated Consents mapped to their evaluation.

        :return: The consent_details of this CheckDataAccessResponse.
        :rtype: Dict[str, ConsentEvaluation]
        """
        return self._consent_details

    @consent_details.setter
    def consent_details(self, consent_details):
        """Sets the consent_details of this CheckDataAccessResponse.

        The resource names of all evaluated Consents mapped to their evaluation.

        :param consent_details: The consent_details of this CheckDataAccessResponse.
        :type consent_details: Dict[str, ConsentEvaluation]
        """

        self._consent_details = consent_details

    @property
    def consented(self):
        """Gets the consented of this CheckDataAccessResponse.

        Whether the requested resource is consented for the given use.

        :return: The consented of this CheckDataAccessResponse.
        :rtype: bool
        """
        return self._consented

    @consented.setter
    def consented(self, consented):
        """Sets the consented of this CheckDataAccessResponse.

        Whether the requested resource is consented for the given use.

        :param consented: The consented of this CheckDataAccessResponse.
        :type consented: bool
        """

        self._consented = consented
