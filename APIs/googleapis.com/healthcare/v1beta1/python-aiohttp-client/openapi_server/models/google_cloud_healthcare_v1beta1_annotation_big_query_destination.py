# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, force: bool=None, schema_type: str=None, table_uri: str=None, write_disposition: str=None):
        """GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination - a model defined in OpenAPI

        :param force: The force of this GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.
        :param schema_type: The schema_type of this GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.
        :param table_uri: The table_uri of this GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.
        :param write_disposition: The write_disposition of this GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.
        """
        self.openapi_types = {
            'force': bool,
            'schema_type': str,
            'table_uri': str,
            'write_disposition': str
        }

        self.attribute_map = {
            'force': 'force',
            'schema_type': 'schemaType',
            'table_uri': 'tableUri',
            'write_disposition': 'writeDisposition'
        }

        self._force = force
        self._schema_type = schema_type
        self._table_uri = table_uri
        self._write_disposition = write_disposition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination of this GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def force(self):
        """Gets the force of this GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.

        Use `write_disposition` instead. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.

        :return: The force of this GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.

        Use `write_disposition` instead. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.

        :param force: The force of this GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.
        :type force: bool
        """

        self._force = force

    @property
    def schema_type(self):
        """Gets the schema_type of this GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.

        Specifies the schema format to export.

        :return: The schema_type of this GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.
        :rtype: str
        """
        return self._schema_type

    @schema_type.setter
    def schema_type(self, schema_type):
        """Sets the schema_type of this GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.

        Specifies the schema format to export.

        :param schema_type: The schema_type of this GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.
        :type schema_type: str
        """
        allowed_values = ["SCHEMA_TYPE_UNSPECIFIED", "SIMPLE"]  # noqa: E501
        if schema_type not in allowed_values:
            raise ValueError(
                "Invalid value for `schema_type` ({0}), must be one of {1}"
                .format(schema_type, allowed_values)
            )

        self._schema_type = schema_type

    @property
    def table_uri(self):
        """Gets the table_uri of this GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.

        BigQuery URI to a table, up to 2000 characters long, must be of the form bq://projectId.bqDatasetId.tableId.

        :return: The table_uri of this GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.
        :rtype: str
        """
        return self._table_uri

    @table_uri.setter
    def table_uri(self, table_uri):
        """Sets the table_uri of this GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.

        BigQuery URI to a table, up to 2000 characters long, must be of the form bq://projectId.bqDatasetId.tableId.

        :param table_uri: The table_uri of this GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.
        :type table_uri: str
        """

        self._table_uri = table_uri

    @property
    def write_disposition(self):
        """Gets the write_disposition of this GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.

        Determines if existing data in the destination dataset is overwritten, appended to, or not written if the tables contain data. If a write_disposition is specified, the `force` parameter is ignored.

        :return: The write_disposition of this GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.
        :rtype: str
        """
        return self._write_disposition

    @write_disposition.setter
    def write_disposition(self, write_disposition):
        """Sets the write_disposition of this GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.

        Determines if existing data in the destination dataset is overwritten, appended to, or not written if the tables contain data. If a write_disposition is specified, the `force` parameter is ignored.

        :param write_disposition: The write_disposition of this GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.
        :type write_disposition: str
        """
        allowed_values = ["WRITE_DISPOSITION_UNSPECIFIED", "WRITE_EMPTY", "WRITE_TRUNCATE", "WRITE_APPEND"]  # noqa: E501
        if write_disposition not in allowed_values:
            raise ValueError(
                "Invalid value for `write_disposition` ({0}), must be one of {1}"
                .format(write_disposition, allowed_values)
            )

        self._write_disposition = write_disposition
