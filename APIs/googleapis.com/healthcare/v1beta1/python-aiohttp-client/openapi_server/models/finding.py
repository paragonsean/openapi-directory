# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Finding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end: str=None, info_type: str=None, quote: str=None, start: str=None):
        """Finding - a model defined in OpenAPI

        :param end: The end of this Finding.
        :param info_type: The info_type of this Finding.
        :param quote: The quote of this Finding.
        :param start: The start of this Finding.
        """
        self.openapi_types = {
            'end': str,
            'info_type': str,
            'quote': str,
            'start': str
        }

        self.attribute_map = {
            'end': 'end',
            'info_type': 'infoType',
            'quote': 'quote',
            'start': 'start'
        }

        self._end = end
        self._info_type = info_type
        self._quote = quote
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Finding':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Finding of this Finding.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end(self):
        """Gets the end of this Finding.

        Zero-based ending index of the found text, exclusively.

        :return: The end of this Finding.
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Finding.

        Zero-based ending index of the found text, exclusively.

        :param end: The end of this Finding.
        :type end: str
        """

        self._end = end

    @property
    def info_type(self):
        """Gets the info_type of this Finding.

        The type of information stored in this text range. For example, HumanName, BirthDate, or Address.

        :return: The info_type of this Finding.
        :rtype: str
        """
        return self._info_type

    @info_type.setter
    def info_type(self, info_type):
        """Sets the info_type of this Finding.

        The type of information stored in this text range. For example, HumanName, BirthDate, or Address.

        :param info_type: The info_type of this Finding.
        :type info_type: str
        """

        self._info_type = info_type

    @property
    def quote(self):
        """Gets the quote of this Finding.

        The snippet of the sensitive text. This field is only populated during deidentification if `store_quote` is set to true in DeidentifyConfig.

        :return: The quote of this Finding.
        :rtype: str
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this Finding.

        The snippet of the sensitive text. This field is only populated during deidentification if `store_quote` is set to true in DeidentifyConfig.

        :param quote: The quote of this Finding.
        :type quote: str
        """

        self._quote = quote

    @property
    def start(self):
        """Gets the start of this Finding.

        Zero-based starting index of the found text, inclusively.

        :return: The start of this Finding.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Finding.

        Zero-based starting index of the found text, inclusively.

        :param start: The start of this Finding.
        :type start: str
        """

        self._start = start
