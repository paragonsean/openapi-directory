# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudHealthcareV1beta1DicomGcsDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mime_type: str=None, uri_prefix: str=None):
        """GoogleCloudHealthcareV1beta1DicomGcsDestination - a model defined in OpenAPI

        :param mime_type: The mime_type of this GoogleCloudHealthcareV1beta1DicomGcsDestination.
        :param uri_prefix: The uri_prefix of this GoogleCloudHealthcareV1beta1DicomGcsDestination.
        """
        self.openapi_types = {
            'mime_type': str,
            'uri_prefix': str
        }

        self.attribute_map = {
            'mime_type': 'mimeType',
            'uri_prefix': 'uriPrefix'
        }

        self._mime_type = mime_type
        self._uri_prefix = uri_prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudHealthcareV1beta1DicomGcsDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudHealthcareV1beta1DicomGcsDestination of this GoogleCloudHealthcareV1beta1DicomGcsDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mime_type(self):
        """Gets the mime_type of this GoogleCloudHealthcareV1beta1DicomGcsDestination.

        MIME types supported by DICOM spec. Each file is written in the following format: `.../{study_id}/{series_id}/{instance_id}[/{frame_number}].{extension}` The frame_number component exists only for multi-frame instances. Supported MIME types are consistent with supported formats in DICOMweb: https://cloud.google.com/healthcare/docs/dicom#retrieve_transaction. Specifically, the following are supported: - application/dicom; transfer-syntax=1.2.840.10008.1.2.1 (uncompressed DICOM) - application/dicom; transfer-syntax=1.2.840.10008.1.2.4.50 (DICOM with embedded JPEG Baseline) - application/dicom; transfer-syntax=1.2.840.10008.1.2.4.90 (DICOM with embedded JPEG 2000 Lossless Only) - application/dicom; transfer-syntax=1.2.840.10008.1.2.4.91 (DICOM with embedded JPEG 2000)h - application/dicom; transfer-syntax=* (DICOM with no transcoding) - application/octet-stream; transfer-syntax=1.2.840.10008.1.2.1 (raw uncompressed PixelData) - application/octet-stream; transfer-syntax=* (raw PixelData in whatever format it was uploaded in) - image/jpeg; transfer-syntax=1.2.840.10008.1.2.4.50 (Consumer JPEG) - image/png The following extensions are used for output files: - application/dicom -> .dcm - image/jpeg -> .jpg - image/png -> .png - application/octet-stream -> no extension If unspecified, the instances are exported in the original DICOM format they were uploaded in.

        :return: The mime_type of this GoogleCloudHealthcareV1beta1DicomGcsDestination.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this GoogleCloudHealthcareV1beta1DicomGcsDestination.

        MIME types supported by DICOM spec. Each file is written in the following format: `.../{study_id}/{series_id}/{instance_id}[/{frame_number}].{extension}` The frame_number component exists only for multi-frame instances. Supported MIME types are consistent with supported formats in DICOMweb: https://cloud.google.com/healthcare/docs/dicom#retrieve_transaction. Specifically, the following are supported: - application/dicom; transfer-syntax=1.2.840.10008.1.2.1 (uncompressed DICOM) - application/dicom; transfer-syntax=1.2.840.10008.1.2.4.50 (DICOM with embedded JPEG Baseline) - application/dicom; transfer-syntax=1.2.840.10008.1.2.4.90 (DICOM with embedded JPEG 2000 Lossless Only) - application/dicom; transfer-syntax=1.2.840.10008.1.2.4.91 (DICOM with embedded JPEG 2000)h - application/dicom; transfer-syntax=* (DICOM with no transcoding) - application/octet-stream; transfer-syntax=1.2.840.10008.1.2.1 (raw uncompressed PixelData) - application/octet-stream; transfer-syntax=* (raw PixelData in whatever format it was uploaded in) - image/jpeg; transfer-syntax=1.2.840.10008.1.2.4.50 (Consumer JPEG) - image/png The following extensions are used for output files: - application/dicom -> .dcm - image/jpeg -> .jpg - image/png -> .png - application/octet-stream -> no extension If unspecified, the instances are exported in the original DICOM format they were uploaded in.

        :param mime_type: The mime_type of this GoogleCloudHealthcareV1beta1DicomGcsDestination.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def uri_prefix(self):
        """Gets the uri_prefix of this GoogleCloudHealthcareV1beta1DicomGcsDestination.

        The Cloud Storage destination to export to. URI for a Cloud Storage directory where the server writes the result files, in the format `gs://{bucket-id}/{path/to/destination/dir}`). If there is no trailing slash, the service appends one when composing the object path. The user is responsible for creating the Cloud Storage bucket referenced in `uri_prefix`.

        :return: The uri_prefix of this GoogleCloudHealthcareV1beta1DicomGcsDestination.
        :rtype: str
        """
        return self._uri_prefix

    @uri_prefix.setter
    def uri_prefix(self, uri_prefix):
        """Sets the uri_prefix of this GoogleCloudHealthcareV1beta1DicomGcsDestination.

        The Cloud Storage destination to export to. URI for a Cloud Storage directory where the server writes the result files, in the format `gs://{bucket-id}/{path/to/destination/dir}`). If there is no trailing slash, the service appends one when composing the object path. The user is responsible for creating the Cloud Storage bucket referenced in `uri_prefix`.

        :param uri_prefix: The uri_prefix of this GoogleCloudHealthcareV1beta1DicomGcsDestination.
        :type uri_prefix: str
        """

        self._uri_prefix = uri_prefix
