# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feature import Feature
from openapi_server.models.linked_entity import LinkedEntity
from openapi_server.models.text_span import TextSpan
from openapi_server import util


class EntityMention(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_info: List[Feature]=None, certainty_assessment: Feature=None, confidence: float=None, linked_entities: List[LinkedEntity]=None, mention_id: str=None, subject: Feature=None, temporal_assessment: Feature=None, text: TextSpan=None, type: str=None):
        """EntityMention - a model defined in OpenAPI

        :param additional_info: The additional_info of this EntityMention.
        :param certainty_assessment: The certainty_assessment of this EntityMention.
        :param confidence: The confidence of this EntityMention.
        :param linked_entities: The linked_entities of this EntityMention.
        :param mention_id: The mention_id of this EntityMention.
        :param subject: The subject of this EntityMention.
        :param temporal_assessment: The temporal_assessment of this EntityMention.
        :param text: The text of this EntityMention.
        :param type: The type of this EntityMention.
        """
        self.openapi_types = {
            'additional_info': List[Feature],
            'certainty_assessment': Feature,
            'confidence': float,
            'linked_entities': List[LinkedEntity],
            'mention_id': str,
            'subject': Feature,
            'temporal_assessment': Feature,
            'text': TextSpan,
            'type': str
        }

        self.attribute_map = {
            'additional_info': 'additionalInfo',
            'certainty_assessment': 'certaintyAssessment',
            'confidence': 'confidence',
            'linked_entities': 'linkedEntities',
            'mention_id': 'mentionId',
            'subject': 'subject',
            'temporal_assessment': 'temporalAssessment',
            'text': 'text',
            'type': 'type'
        }

        self._additional_info = additional_info
        self._certainty_assessment = certainty_assessment
        self._confidence = confidence
        self._linked_entities = linked_entities
        self._mention_id = mention_id
        self._subject = subject
        self._temporal_assessment = temporal_assessment
        self._text = text
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityMention':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityMention of this EntityMention.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_info(self):
        """Gets the additional_info of this EntityMention.

        Additional information about the entity mention. For example, for an entity mention of type `DATE` this can be its more specific date types from the following list: `ADMISSION_DATE`, `CONSULTATION_DATE`, `DISCHARGE_DATE`, `SERVICE_DATE`, `VISIT_DATE`, `DIAGNOSIS_DATE`, `MED_STARTED_DATE`, `MED_ENDED_DATE`, `NOTE_DATE`, `PROCEDURE_DATE`, `RADIATION_STARTED_DATE`, `RADIATION_ENDED_DATE`, `STAGE_DATE`

        :return: The additional_info of this EntityMention.
        :rtype: List[Feature]
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this EntityMention.

        Additional information about the entity mention. For example, for an entity mention of type `DATE` this can be its more specific date types from the following list: `ADMISSION_DATE`, `CONSULTATION_DATE`, `DISCHARGE_DATE`, `SERVICE_DATE`, `VISIT_DATE`, `DIAGNOSIS_DATE`, `MED_STARTED_DATE`, `MED_ENDED_DATE`, `NOTE_DATE`, `PROCEDURE_DATE`, `RADIATION_STARTED_DATE`, `RADIATION_ENDED_DATE`, `STAGE_DATE`

        :param additional_info: The additional_info of this EntityMention.
        :type additional_info: List[Feature]
        """

        self._additional_info = additional_info

    @property
    def certainty_assessment(self):
        """Gets the certainty_assessment of this EntityMention.


        :return: The certainty_assessment of this EntityMention.
        :rtype: Feature
        """
        return self._certainty_assessment

    @certainty_assessment.setter
    def certainty_assessment(self, certainty_assessment):
        """Sets the certainty_assessment of this EntityMention.


        :param certainty_assessment: The certainty_assessment of this EntityMention.
        :type certainty_assessment: Feature
        """

        self._certainty_assessment = certainty_assessment

    @property
    def confidence(self):
        """Gets the confidence of this EntityMention.

        The model's confidence in this entity mention annotation. A number between 0 and 1.

        :return: The confidence of this EntityMention.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this EntityMention.

        The model's confidence in this entity mention annotation. A number between 0 and 1.

        :param confidence: The confidence of this EntityMention.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def linked_entities(self):
        """Gets the linked_entities of this EntityMention.

        linked_entities are candidate ontological concepts that this entity mention may refer to. They are sorted by decreasing confidence.

        :return: The linked_entities of this EntityMention.
        :rtype: List[LinkedEntity]
        """
        return self._linked_entities

    @linked_entities.setter
    def linked_entities(self, linked_entities):
        """Sets the linked_entities of this EntityMention.

        linked_entities are candidate ontological concepts that this entity mention may refer to. They are sorted by decreasing confidence.

        :param linked_entities: The linked_entities of this EntityMention.
        :type linked_entities: List[LinkedEntity]
        """

        self._linked_entities = linked_entities

    @property
    def mention_id(self):
        """Gets the mention_id of this EntityMention.

        mention_id uniquely identifies each entity mention in a single response.

        :return: The mention_id of this EntityMention.
        :rtype: str
        """
        return self._mention_id

    @mention_id.setter
    def mention_id(self, mention_id):
        """Sets the mention_id of this EntityMention.

        mention_id uniquely identifies each entity mention in a single response.

        :param mention_id: The mention_id of this EntityMention.
        :type mention_id: str
        """

        self._mention_id = mention_id

    @property
    def subject(self):
        """Gets the subject of this EntityMention.


        :return: The subject of this EntityMention.
        :rtype: Feature
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this EntityMention.


        :param subject: The subject of this EntityMention.
        :type subject: Feature
        """

        self._subject = subject

    @property
    def temporal_assessment(self):
        """Gets the temporal_assessment of this EntityMention.


        :return: The temporal_assessment of this EntityMention.
        :rtype: Feature
        """
        return self._temporal_assessment

    @temporal_assessment.setter
    def temporal_assessment(self, temporal_assessment):
        """Sets the temporal_assessment of this EntityMention.


        :param temporal_assessment: The temporal_assessment of this EntityMention.
        :type temporal_assessment: Feature
        """

        self._temporal_assessment = temporal_assessment

    @property
    def text(self):
        """Gets the text of this EntityMention.


        :return: The text of this EntityMention.
        :rtype: TextSpan
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this EntityMention.


        :param text: The text of this EntityMention.
        :type text: TextSpan
        """

        self._text = text

    @property
    def type(self):
        """Gets the type of this EntityMention.

        The semantic type of the entity: UNKNOWN_ENTITY_TYPE, ALONE, ANATOMICAL_STRUCTURE, ASSISTED_LIVING, BF_RESULT, BM_RESULT, BM_UNIT, BM_VALUE, BODY_FUNCTION, BODY_MEASUREMENT, COMPLIANT, DOESNOT_FOLLOWUP, FAMILY, FOLLOWSUP, LABORATORY_DATA, LAB_RESULT, LAB_UNIT, LAB_VALUE, MEDICAL_DEVICE, MEDICINE, MED_DOSE, MED_DURATION, MED_FORM, MED_FREQUENCY, MED_ROUTE, MED_STATUS, MED_STRENGTH, MED_TOTALDOSE, MED_UNIT, NON_COMPLIANT, OTHER_LIVINGSTATUS, PROBLEM, PROCEDURE, PROCEDURE_RESULT, PROC_METHOD, REASON_FOR_NONCOMPLIANCE, SEVERITY, SUBSTANCE_ABUSE, UNCLEAR_FOLLOWUP.

        :return: The type of this EntityMention.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EntityMention.

        The semantic type of the entity: UNKNOWN_ENTITY_TYPE, ALONE, ANATOMICAL_STRUCTURE, ASSISTED_LIVING, BF_RESULT, BM_RESULT, BM_UNIT, BM_VALUE, BODY_FUNCTION, BODY_MEASUREMENT, COMPLIANT, DOESNOT_FOLLOWUP, FAMILY, FOLLOWSUP, LABORATORY_DATA, LAB_RESULT, LAB_UNIT, LAB_VALUE, MEDICAL_DEVICE, MEDICINE, MED_DOSE, MED_DURATION, MED_FORM, MED_FREQUENCY, MED_ROUTE, MED_STATUS, MED_STRENGTH, MED_TOTALDOSE, MED_UNIT, NON_COMPLIANT, OTHER_LIVINGSTATUS, PROBLEM, PROCEDURE, PROCEDURE_RESULT, PROC_METHOD, REASON_FOR_NONCOMPLIANCE, SEVERITY, SUBSTANCE_ABUSE, UNCLEAR_FOLLOWUP.

        :param type: The type of this EntityMention.
        :type type: str
        """

        self._type = type
