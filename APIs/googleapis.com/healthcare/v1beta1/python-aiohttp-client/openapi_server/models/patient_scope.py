# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PatientScope(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, patient_ids: List[str]=None):
        """PatientScope - a model defined in OpenAPI

        :param patient_ids: The patient_ids of this PatientScope.
        """
        self.openapi_types = {
            'patient_ids': List[str]
        }

        self.attribute_map = {
            'patient_ids': 'patientIds'
        }

        self._patient_ids = patient_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientScope':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientScope of this PatientScope.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def patient_ids(self):
        """Gets the patient_ids of this PatientScope.

        Optional. The list of patient IDs whose Consent resources will be enforced. At most 10,000 patients can be specified. An empty list is equivalent to all patients (meaning the entire FHIR store).

        :return: The patient_ids of this PatientScope.
        :rtype: List[str]
        """
        return self._patient_ids

    @patient_ids.setter
    def patient_ids(self, patient_ids):
        """Sets the patient_ids of this PatientScope.

        Optional. The list of patient IDs whose Consent resources will be enforced. At most 10,000 patients can be specified. An empty list is equivalent to all patients (meaning the entire FHIR store).

        :param patient_ids: The patient_ids of this PatientScope.
        :type patient_ids: List[str]
        """

        self._patient_ids = patient_ids
