# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter_list import FilterList
from openapi_server import util


class InfoTypeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evaluate_list: FilterList=None, ignore_list: FilterList=None, strict_matching: bool=None):
        """InfoTypeConfig - a model defined in OpenAPI

        :param evaluate_list: The evaluate_list of this InfoTypeConfig.
        :param ignore_list: The ignore_list of this InfoTypeConfig.
        :param strict_matching: The strict_matching of this InfoTypeConfig.
        """
        self.openapi_types = {
            'evaluate_list': FilterList,
            'ignore_list': FilterList,
            'strict_matching': bool
        }

        self.attribute_map = {
            'evaluate_list': 'evaluateList',
            'ignore_list': 'ignoreList',
            'strict_matching': 'strictMatching'
        }

        self._evaluate_list = evaluate_list
        self._ignore_list = ignore_list
        self._strict_matching = strict_matching

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InfoTypeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InfoTypeConfig of this InfoTypeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evaluate_list(self):
        """Gets the evaluate_list of this InfoTypeConfig.


        :return: The evaluate_list of this InfoTypeConfig.
        :rtype: FilterList
        """
        return self._evaluate_list

    @evaluate_list.setter
    def evaluate_list(self, evaluate_list):
        """Sets the evaluate_list of this InfoTypeConfig.


        :param evaluate_list: The evaluate_list of this InfoTypeConfig.
        :type evaluate_list: FilterList
        """

        self._evaluate_list = evaluate_list

    @property
    def ignore_list(self):
        """Gets the ignore_list of this InfoTypeConfig.


        :return: The ignore_list of this InfoTypeConfig.
        :rtype: FilterList
        """
        return self._ignore_list

    @ignore_list.setter
    def ignore_list(self, ignore_list):
        """Sets the ignore_list of this InfoTypeConfig.


        :param ignore_list: The ignore_list of this InfoTypeConfig.
        :type ignore_list: FilterList
        """

        self._ignore_list = ignore_list

    @property
    def strict_matching(self):
        """Gets the strict_matching of this InfoTypeConfig.

        If `TRUE`, infoTypes described by `filter` are used for evaluation. Otherwise, infoTypes are not considered for evaluation. For example: * Annotated text: \"Toronto is a location\" * Finding 1: `{\"infoType\": \"PERSON\", \"quote\": \"Toronto\", \"start\": 0, \"end\": 7}` * Finding 2: `{\"infoType\": \"CITY\", \"quote\": \"Toronto\", \"start\": 0, \"end\": 7}` * Finding 3: `{}` * Ground truth: `{\"infoType\": \"LOCATION\", \"quote\": \"Toronto\", \"start\": 0, \"end\": 7}` When `strict_matching` is `TRUE`: * Finding 1: 1 false positive * Finding 2: 1 false positive * Finding 3: 1 false negative When `strict_matching` is `FALSE`: * Finding 1: 1 true positive * Finding 2: 1 true positive * Finding 3: 1 false negative

        :return: The strict_matching of this InfoTypeConfig.
        :rtype: bool
        """
        return self._strict_matching

    @strict_matching.setter
    def strict_matching(self, strict_matching):
        """Sets the strict_matching of this InfoTypeConfig.

        If `TRUE`, infoTypes described by `filter` are used for evaluation. Otherwise, infoTypes are not considered for evaluation. For example: * Annotated text: \"Toronto is a location\" * Finding 1: `{\"infoType\": \"PERSON\", \"quote\": \"Toronto\", \"start\": 0, \"end\": 7}` * Finding 2: `{\"infoType\": \"CITY\", \"quote\": \"Toronto\", \"start\": 0, \"end\": 7}` * Finding 3: `{}` * Ground truth: `{\"infoType\": \"LOCATION\", \"quote\": \"Toronto\", \"start\": 0, \"end\": 7}` When `strict_matching` is `TRUE`: * Finding 1: 1 false positive * Finding 2: 1 false positive * Finding 3: 1 false negative When `strict_matching` is `FALSE`: * Finding 1: 1 true positive * Finding 2: 1 true positive * Finding 3: 1 false negative

        :param strict_matching: The strict_matching of this InfoTypeConfig.
        :type strict_matching: bool
        """

        self._strict_matching = strict_matching
