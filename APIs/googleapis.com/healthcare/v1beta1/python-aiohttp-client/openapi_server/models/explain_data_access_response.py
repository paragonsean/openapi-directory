# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.explain_data_access_consent_scope import ExplainDataAccessConsentScope
from openapi_server import util


class ExplainDataAccessResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consent_scopes: List[ExplainDataAccessConsentScope]=None, warning: str=None):
        """ExplainDataAccessResponse - a model defined in OpenAPI

        :param consent_scopes: The consent_scopes of this ExplainDataAccessResponse.
        :param warning: The warning of this ExplainDataAccessResponse.
        """
        self.openapi_types = {
            'consent_scopes': List[ExplainDataAccessConsentScope],
            'warning': str
        }

        self.attribute_map = {
            'consent_scopes': 'consentScopes',
            'warning': 'warning'
        }

        self._consent_scopes = consent_scopes
        self._warning = warning

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExplainDataAccessResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExplainDataAccessResponse of this ExplainDataAccessResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consent_scopes(self):
        """Gets the consent_scopes of this ExplainDataAccessResponse.

        List of applicable consent scopes. Sorted in order of actor such that scopes belonging to the same actor will be adjacent to each other in the list.

        :return: The consent_scopes of this ExplainDataAccessResponse.
        :rtype: List[ExplainDataAccessConsentScope]
        """
        return self._consent_scopes

    @consent_scopes.setter
    def consent_scopes(self, consent_scopes):
        """Sets the consent_scopes of this ExplainDataAccessResponse.

        List of applicable consent scopes. Sorted in order of actor such that scopes belonging to the same actor will be adjacent to each other in the list.

        :param consent_scopes: The consent_scopes of this ExplainDataAccessResponse.
        :type consent_scopes: List[ExplainDataAccessConsentScope]
        """

        self._consent_scopes = consent_scopes

    @property
    def warning(self):
        """Gets the warning of this ExplainDataAccessResponse.

        Warnings associated with this response. It inform user with exceeded scope limit errors.

        :return: The warning of this ExplainDataAccessResponse.
        :rtype: str
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this ExplainDataAccessResponse.

        Warnings associated with this response. It inform user with exceeded scope limit errors.

        :param warning: The warning of this ExplainDataAccessResponse.
        :type warning: str
        """

        self._warning = warning
