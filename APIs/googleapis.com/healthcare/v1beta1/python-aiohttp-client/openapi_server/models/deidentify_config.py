# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.annotation_config import AnnotationConfig
from openapi_server.models.deidentify_operation_metadata import DeidentifyOperationMetadata
from openapi_server.models.dicom_config import DicomConfig
from openapi_server.models.dicom_tag_config import DicomTagConfig
from openapi_server.models.fhir_config import FhirConfig
from openapi_server.models.fhir_field_config import FhirFieldConfig
from openapi_server.models.image_config import ImageConfig
from openapi_server.models.text_config import TextConfig
from openapi_server import util


class DeidentifyConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation: AnnotationConfig=None, dicom: DicomConfig=None, dicom_tag_config: DicomTagConfig=None, fhir: FhirConfig=None, fhir_field_config: FhirFieldConfig=None, image: ImageConfig=None, operation_metadata: DeidentifyOperationMetadata=None, text: TextConfig=None, use_regional_data_processing: bool=None):
        """DeidentifyConfig - a model defined in OpenAPI

        :param annotation: The annotation of this DeidentifyConfig.
        :param dicom: The dicom of this DeidentifyConfig.
        :param dicom_tag_config: The dicom_tag_config of this DeidentifyConfig.
        :param fhir: The fhir of this DeidentifyConfig.
        :param fhir_field_config: The fhir_field_config of this DeidentifyConfig.
        :param image: The image of this DeidentifyConfig.
        :param operation_metadata: The operation_metadata of this DeidentifyConfig.
        :param text: The text of this DeidentifyConfig.
        :param use_regional_data_processing: The use_regional_data_processing of this DeidentifyConfig.
        """
        self.openapi_types = {
            'annotation': AnnotationConfig,
            'dicom': DicomConfig,
            'dicom_tag_config': DicomTagConfig,
            'fhir': FhirConfig,
            'fhir_field_config': FhirFieldConfig,
            'image': ImageConfig,
            'operation_metadata': DeidentifyOperationMetadata,
            'text': TextConfig,
            'use_regional_data_processing': bool
        }

        self.attribute_map = {
            'annotation': 'annotation',
            'dicom': 'dicom',
            'dicom_tag_config': 'dicomTagConfig',
            'fhir': 'fhir',
            'fhir_field_config': 'fhirFieldConfig',
            'image': 'image',
            'operation_metadata': 'operationMetadata',
            'text': 'text',
            'use_regional_data_processing': 'useRegionalDataProcessing'
        }

        self._annotation = annotation
        self._dicom = dicom
        self._dicom_tag_config = dicom_tag_config
        self._fhir = fhir
        self._fhir_field_config = fhir_field_config
        self._image = image
        self._operation_metadata = operation_metadata
        self._text = text
        self._use_regional_data_processing = use_regional_data_processing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeidentifyConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeidentifyConfig of this DeidentifyConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation(self):
        """Gets the annotation of this DeidentifyConfig.


        :return: The annotation of this DeidentifyConfig.
        :rtype: AnnotationConfig
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        """Sets the annotation of this DeidentifyConfig.


        :param annotation: The annotation of this DeidentifyConfig.
        :type annotation: AnnotationConfig
        """

        self._annotation = annotation

    @property
    def dicom(self):
        """Gets the dicom of this DeidentifyConfig.


        :return: The dicom of this DeidentifyConfig.
        :rtype: DicomConfig
        """
        return self._dicom

    @dicom.setter
    def dicom(self, dicom):
        """Sets the dicom of this DeidentifyConfig.


        :param dicom: The dicom of this DeidentifyConfig.
        :type dicom: DicomConfig
        """

        self._dicom = dicom

    @property
    def dicom_tag_config(self):
        """Gets the dicom_tag_config of this DeidentifyConfig.


        :return: The dicom_tag_config of this DeidentifyConfig.
        :rtype: DicomTagConfig
        """
        return self._dicom_tag_config

    @dicom_tag_config.setter
    def dicom_tag_config(self, dicom_tag_config):
        """Sets the dicom_tag_config of this DeidentifyConfig.


        :param dicom_tag_config: The dicom_tag_config of this DeidentifyConfig.
        :type dicom_tag_config: DicomTagConfig
        """

        self._dicom_tag_config = dicom_tag_config

    @property
    def fhir(self):
        """Gets the fhir of this DeidentifyConfig.


        :return: The fhir of this DeidentifyConfig.
        :rtype: FhirConfig
        """
        return self._fhir

    @fhir.setter
    def fhir(self, fhir):
        """Sets the fhir of this DeidentifyConfig.


        :param fhir: The fhir of this DeidentifyConfig.
        :type fhir: FhirConfig
        """

        self._fhir = fhir

    @property
    def fhir_field_config(self):
        """Gets the fhir_field_config of this DeidentifyConfig.


        :return: The fhir_field_config of this DeidentifyConfig.
        :rtype: FhirFieldConfig
        """
        return self._fhir_field_config

    @fhir_field_config.setter
    def fhir_field_config(self, fhir_field_config):
        """Sets the fhir_field_config of this DeidentifyConfig.


        :param fhir_field_config: The fhir_field_config of this DeidentifyConfig.
        :type fhir_field_config: FhirFieldConfig
        """

        self._fhir_field_config = fhir_field_config

    @property
    def image(self):
        """Gets the image of this DeidentifyConfig.


        :return: The image of this DeidentifyConfig.
        :rtype: ImageConfig
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this DeidentifyConfig.


        :param image: The image of this DeidentifyConfig.
        :type image: ImageConfig
        """

        self._image = image

    @property
    def operation_metadata(self):
        """Gets the operation_metadata of this DeidentifyConfig.


        :return: The operation_metadata of this DeidentifyConfig.
        :rtype: DeidentifyOperationMetadata
        """
        return self._operation_metadata

    @operation_metadata.setter
    def operation_metadata(self, operation_metadata):
        """Sets the operation_metadata of this DeidentifyConfig.


        :param operation_metadata: The operation_metadata of this DeidentifyConfig.
        :type operation_metadata: DeidentifyOperationMetadata
        """

        self._operation_metadata = operation_metadata

    @property
    def text(self):
        """Gets the text of this DeidentifyConfig.


        :return: The text of this DeidentifyConfig.
        :rtype: TextConfig
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this DeidentifyConfig.


        :param text: The text of this DeidentifyConfig.
        :type text: TextConfig
        """

        self._text = text

    @property
    def use_regional_data_processing(self):
        """Gets the use_regional_data_processing of this DeidentifyConfig.

        Ensures in-flight data remains in the region of origin during de-identification. Using this option results in a significant reduction of throughput, and is not compatible with `LOCATION` or `ORGANIZATION_NAME` infoTypes. If the deprecated DicomConfig or FhirConfig are used, then `LOCATION` must be excluded within TextConfig, and must also be excluded within ImageConfig if image redaction is required.

        :return: The use_regional_data_processing of this DeidentifyConfig.
        :rtype: bool
        """
        return self._use_regional_data_processing

    @use_regional_data_processing.setter
    def use_regional_data_processing(self, use_regional_data_processing):
        """Sets the use_regional_data_processing of this DeidentifyConfig.

        Ensures in-flight data remains in the region of origin during de-identification. Using this option results in a significant reduction of throughput, and is not compatible with `LOCATION` or `ORGANIZATION_NAME` infoTypes. If the deprecated DicomConfig or FhirConfig are used, then `LOCATION` must be excluded within TextConfig, and must also be excluded within ImageConfig if image redaction is required.

        :param use_regional_data_processing: The use_regional_data_processing of this DeidentifyConfig.
        :type use_regional_data_processing: bool
        """

        self._use_regional_data_processing = use_regional_data_processing
