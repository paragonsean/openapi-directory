# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimePartitioning(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiration_ms: str=None, type: str=None):
        """TimePartitioning - a model defined in OpenAPI

        :param expiration_ms: The expiration_ms of this TimePartitioning.
        :param type: The type of this TimePartitioning.
        """
        self.openapi_types = {
            'expiration_ms': str,
            'type': str
        }

        self.attribute_map = {
            'expiration_ms': 'expirationMs',
            'type': 'type'
        }

        self._expiration_ms = expiration_ms
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimePartitioning':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimePartitioning of this TimePartitioning.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiration_ms(self):
        """Gets the expiration_ms of this TimePartitioning.

        Number of milliseconds for which to keep the storage for a partition.

        :return: The expiration_ms of this TimePartitioning.
        :rtype: str
        """
        return self._expiration_ms

    @expiration_ms.setter
    def expiration_ms(self, expiration_ms):
        """Sets the expiration_ms of this TimePartitioning.

        Number of milliseconds for which to keep the storage for a partition.

        :param expiration_ms: The expiration_ms of this TimePartitioning.
        :type expiration_ms: str
        """

        self._expiration_ms = expiration_ms

    @property
    def type(self):
        """Gets the type of this TimePartitioning.

        Type of partitioning.

        :return: The type of this TimePartitioning.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TimePartitioning.

        Type of partitioning.

        :param type: The type of this TimePartitioning.
        :type type: str
        """
        allowed_values = ["PARTITION_TYPE_UNSPECIFIED", "HOUR", "DAY", "MONTH", "YEAR"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
