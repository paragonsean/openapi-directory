# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BlobStorageInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, size_bytes: str=None, storage_class: str=None, storage_class_update_time: str=None):
        """BlobStorageInfo - a model defined in OpenAPI

        :param size_bytes: The size_bytes of this BlobStorageInfo.
        :param storage_class: The storage_class of this BlobStorageInfo.
        :param storage_class_update_time: The storage_class_update_time of this BlobStorageInfo.
        """
        self.openapi_types = {
            'size_bytes': str,
            'storage_class': str,
            'storage_class_update_time': str
        }

        self.attribute_map = {
            'size_bytes': 'sizeBytes',
            'storage_class': 'storageClass',
            'storage_class_update_time': 'storageClassUpdateTime'
        }

        self._size_bytes = size_bytes
        self._storage_class = storage_class
        self._storage_class_update_time = storage_class_update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlobStorageInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlobStorageInfo of this BlobStorageInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def size_bytes(self):
        """Gets the size_bytes of this BlobStorageInfo.

        Size in bytes of data stored in Blob Storage.

        :return: The size_bytes of this BlobStorageInfo.
        :rtype: str
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this BlobStorageInfo.

        Size in bytes of data stored in Blob Storage.

        :param size_bytes: The size_bytes of this BlobStorageInfo.
        :type size_bytes: str
        """

        self._size_bytes = size_bytes

    @property
    def storage_class(self):
        """Gets the storage_class of this BlobStorageInfo.

        The storage class in which the Blob data is stored.

        :return: The storage_class of this BlobStorageInfo.
        :rtype: str
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """Sets the storage_class of this BlobStorageInfo.

        The storage class in which the Blob data is stored.

        :param storage_class: The storage_class of this BlobStorageInfo.
        :type storage_class: str
        """
        allowed_values = ["BLOB_STORAGE_CLASS_UNSPECIFIED", "STANDARD", "NEARLINE", "COLDLINE", "ARCHIVE"]  # noqa: E501
        if storage_class not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_class` ({0}), must be one of {1}"
                .format(storage_class, allowed_values)
            )

        self._storage_class = storage_class

    @property
    def storage_class_update_time(self):
        """Gets the storage_class_update_time of this BlobStorageInfo.

        The time at which the storage class was updated. This is used to compute early deletion fees of the resource.

        :return: The storage_class_update_time of this BlobStorageInfo.
        :rtype: str
        """
        return self._storage_class_update_time

    @storage_class_update_time.setter
    def storage_class_update_time(self, storage_class_update_time):
        """Sets the storage_class_update_time of this BlobStorageInfo.

        The time at which the storage class was updated. This is used to compute early deletion fees of the resource.

        :param storage_class_update_time: The storage_class_update_time of this BlobStorageInfo.
        :type storage_class_update_time: str
        """

        self._storage_class_update_time = storage_class_update_time
