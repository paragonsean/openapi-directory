# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_healthcare_v1beta1_annotation_big_query_destination import GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination
from openapi_server.models.info_type_config import InfoTypeConfig
from openapi_server import util


class EvaluateAnnotationStoreRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bigquery_destination: GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination=None, eval_info_type_mapping: Dict[str, str]=None, golden_info_type_mapping: Dict[str, str]=None, golden_store: str=None, info_type_config: InfoTypeConfig=None):
        """EvaluateAnnotationStoreRequest - a model defined in OpenAPI

        :param bigquery_destination: The bigquery_destination of this EvaluateAnnotationStoreRequest.
        :param eval_info_type_mapping: The eval_info_type_mapping of this EvaluateAnnotationStoreRequest.
        :param golden_info_type_mapping: The golden_info_type_mapping of this EvaluateAnnotationStoreRequest.
        :param golden_store: The golden_store of this EvaluateAnnotationStoreRequest.
        :param info_type_config: The info_type_config of this EvaluateAnnotationStoreRequest.
        """
        self.openapi_types = {
            'bigquery_destination': GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination,
            'eval_info_type_mapping': Dict[str, str],
            'golden_info_type_mapping': Dict[str, str],
            'golden_store': str,
            'info_type_config': InfoTypeConfig
        }

        self.attribute_map = {
            'bigquery_destination': 'bigqueryDestination',
            'eval_info_type_mapping': 'evalInfoTypeMapping',
            'golden_info_type_mapping': 'goldenInfoTypeMapping',
            'golden_store': 'goldenStore',
            'info_type_config': 'infoTypeConfig'
        }

        self._bigquery_destination = bigquery_destination
        self._eval_info_type_mapping = eval_info_type_mapping
        self._golden_info_type_mapping = golden_info_type_mapping
        self._golden_store = golden_store
        self._info_type_config = info_type_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EvaluateAnnotationStoreRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EvaluateAnnotationStoreRequest of this EvaluateAnnotationStoreRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bigquery_destination(self):
        """Gets the bigquery_destination of this EvaluateAnnotationStoreRequest.


        :return: The bigquery_destination of this EvaluateAnnotationStoreRequest.
        :rtype: GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination
        """
        return self._bigquery_destination

    @bigquery_destination.setter
    def bigquery_destination(self, bigquery_destination):
        """Sets the bigquery_destination of this EvaluateAnnotationStoreRequest.


        :param bigquery_destination: The bigquery_destination of this EvaluateAnnotationStoreRequest.
        :type bigquery_destination: GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination
        """

        self._bigquery_destination = bigquery_destination

    @property
    def eval_info_type_mapping(self):
        """Gets the eval_info_type_mapping of this EvaluateAnnotationStoreRequest.

        Optional. InfoType mapping for `eval_store`. Different resources can map to the same infoType. For example, `PERSON_NAME`, `PERSON`, `NAME`, and `HUMAN` are different. To map all of these into a single infoType (such as `PERSON_NAME`), specify the following mapping: ``` info_type_mapping[\"PERSON\"] = \"PERSON_NAME\" info_type_mapping[\"NAME\"] = \"PERSON_NAME\" info_type_mapping[\"HUMAN\"] = \"PERSON_NAME\" ``` Unmentioned infoTypes, such as `DATE`, are treated as identity mapping. For example: ``` info_type_mapping[\"DATE\"] = \"DATE\" ``` InfoTypes are case-insensitive.

        :return: The eval_info_type_mapping of this EvaluateAnnotationStoreRequest.
        :rtype: Dict[str, str]
        """
        return self._eval_info_type_mapping

    @eval_info_type_mapping.setter
    def eval_info_type_mapping(self, eval_info_type_mapping):
        """Sets the eval_info_type_mapping of this EvaluateAnnotationStoreRequest.

        Optional. InfoType mapping for `eval_store`. Different resources can map to the same infoType. For example, `PERSON_NAME`, `PERSON`, `NAME`, and `HUMAN` are different. To map all of these into a single infoType (such as `PERSON_NAME`), specify the following mapping: ``` info_type_mapping[\"PERSON\"] = \"PERSON_NAME\" info_type_mapping[\"NAME\"] = \"PERSON_NAME\" info_type_mapping[\"HUMAN\"] = \"PERSON_NAME\" ``` Unmentioned infoTypes, such as `DATE`, are treated as identity mapping. For example: ``` info_type_mapping[\"DATE\"] = \"DATE\" ``` InfoTypes are case-insensitive.

        :param eval_info_type_mapping: The eval_info_type_mapping of this EvaluateAnnotationStoreRequest.
        :type eval_info_type_mapping: Dict[str, str]
        """

        self._eval_info_type_mapping = eval_info_type_mapping

    @property
    def golden_info_type_mapping(self):
        """Gets the golden_info_type_mapping of this EvaluateAnnotationStoreRequest.

        Optional. Similar to `eval_info_type_mapping`, infoType mapping for `golden_store`.

        :return: The golden_info_type_mapping of this EvaluateAnnotationStoreRequest.
        :rtype: Dict[str, str]
        """
        return self._golden_info_type_mapping

    @golden_info_type_mapping.setter
    def golden_info_type_mapping(self, golden_info_type_mapping):
        """Sets the golden_info_type_mapping of this EvaluateAnnotationStoreRequest.

        Optional. Similar to `eval_info_type_mapping`, infoType mapping for `golden_store`.

        :param golden_info_type_mapping: The golden_info_type_mapping of this EvaluateAnnotationStoreRequest.
        :type golden_info_type_mapping: Dict[str, str]
        """

        self._golden_info_type_mapping = golden_info_type_mapping

    @property
    def golden_store(self):
        """Gets the golden_store of this EvaluateAnnotationStoreRequest.

        Required. The Annotation store to use as ground truth, in the format of `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`.

        :return: The golden_store of this EvaluateAnnotationStoreRequest.
        :rtype: str
        """
        return self._golden_store

    @golden_store.setter
    def golden_store(self, golden_store):
        """Sets the golden_store of this EvaluateAnnotationStoreRequest.

        Required. The Annotation store to use as ground truth, in the format of `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`.

        :param golden_store: The golden_store of this EvaluateAnnotationStoreRequest.
        :type golden_store: str
        """

        self._golden_store = golden_store

    @property
    def info_type_config(self):
        """Gets the info_type_config of this EvaluateAnnotationStoreRequest.


        :return: The info_type_config of this EvaluateAnnotationStoreRequest.
        :rtype: InfoTypeConfig
        """
        return self._info_type_config

    @info_type_config.setter
    def info_type_config(self, info_type_config):
        """Sets the info_type_config of this EvaluateAnnotationStoreRequest.


        :param info_type_config: The info_type_config of this EvaluateAnnotationStoreRequest.
        :type info_type_config: InfoTypeConfig
        """

        self._info_type_config = info_type_config
