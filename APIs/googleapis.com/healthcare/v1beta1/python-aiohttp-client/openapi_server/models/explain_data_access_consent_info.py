# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consent_accessor_scope import ConsentAccessorScope
from openapi_server import util


class ExplainDataAccessConsentInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cascade_origins: List[str]=None, consent_resource: str=None, enforcement_time: str=None, matching_accessor_scopes: List[ConsentAccessorScope]=None, patient_consent_owner: str=None, type: str=None, variants: List[str]=None):
        """ExplainDataAccessConsentInfo - a model defined in OpenAPI

        :param cascade_origins: The cascade_origins of this ExplainDataAccessConsentInfo.
        :param consent_resource: The consent_resource of this ExplainDataAccessConsentInfo.
        :param enforcement_time: The enforcement_time of this ExplainDataAccessConsentInfo.
        :param matching_accessor_scopes: The matching_accessor_scopes of this ExplainDataAccessConsentInfo.
        :param patient_consent_owner: The patient_consent_owner of this ExplainDataAccessConsentInfo.
        :param type: The type of this ExplainDataAccessConsentInfo.
        :param variants: The variants of this ExplainDataAccessConsentInfo.
        """
        self.openapi_types = {
            'cascade_origins': List[str],
            'consent_resource': str,
            'enforcement_time': str,
            'matching_accessor_scopes': List[ConsentAccessorScope],
            'patient_consent_owner': str,
            'type': str,
            'variants': List[str]
        }

        self.attribute_map = {
            'cascade_origins': 'cascadeOrigins',
            'consent_resource': 'consentResource',
            'enforcement_time': 'enforcementTime',
            'matching_accessor_scopes': 'matchingAccessorScopes',
            'patient_consent_owner': 'patientConsentOwner',
            'type': 'type',
            'variants': 'variants'
        }

        self._cascade_origins = cascade_origins
        self._consent_resource = consent_resource
        self._enforcement_time = enforcement_time
        self._matching_accessor_scopes = matching_accessor_scopes
        self._patient_consent_owner = patient_consent_owner
        self._type = type
        self._variants = variants

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExplainDataAccessConsentInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExplainDataAccessConsentInfo of this ExplainDataAccessConsentInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cascade_origins(self):
        """Gets the cascade_origins of this ExplainDataAccessConsentInfo.

        The compartment base resources that matched a cascading policy. Each resource has the following format: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/{resource_type}/{resource_id}`

        :return: The cascade_origins of this ExplainDataAccessConsentInfo.
        :rtype: List[str]
        """
        return self._cascade_origins

    @cascade_origins.setter
    def cascade_origins(self, cascade_origins):
        """Sets the cascade_origins of this ExplainDataAccessConsentInfo.

        The compartment base resources that matched a cascading policy. Each resource has the following format: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/{resource_type}/{resource_id}`

        :param cascade_origins: The cascade_origins of this ExplainDataAccessConsentInfo.
        :type cascade_origins: List[str]
        """

        self._cascade_origins = cascade_origins

    @property
    def consent_resource(self):
        """Gets the consent_resource of this ExplainDataAccessConsentInfo.

        The resource name of this consent resource. Format: `projects/{projectId}/datasets/{datasetId}/fhirStores/{fhirStoreId}/fhir/{resourceType}/{id}`.

        :return: The consent_resource of this ExplainDataAccessConsentInfo.
        :rtype: str
        """
        return self._consent_resource

    @consent_resource.setter
    def consent_resource(self, consent_resource):
        """Sets the consent_resource of this ExplainDataAccessConsentInfo.

        The resource name of this consent resource. Format: `projects/{projectId}/datasets/{datasetId}/fhirStores/{fhirStoreId}/fhir/{resourceType}/{id}`.

        :param consent_resource: The consent_resource of this ExplainDataAccessConsentInfo.
        :type consent_resource: str
        """

        self._consent_resource = consent_resource

    @property
    def enforcement_time(self):
        """Gets the enforcement_time of this ExplainDataAccessConsentInfo.

        Last enforcement timestamp of this consent resource.

        :return: The enforcement_time of this ExplainDataAccessConsentInfo.
        :rtype: str
        """
        return self._enforcement_time

    @enforcement_time.setter
    def enforcement_time(self, enforcement_time):
        """Sets the enforcement_time of this ExplainDataAccessConsentInfo.

        Last enforcement timestamp of this consent resource.

        :param enforcement_time: The enforcement_time of this ExplainDataAccessConsentInfo.
        :type enforcement_time: str
        """

        self._enforcement_time = enforcement_time

    @property
    def matching_accessor_scopes(self):
        """Gets the matching_accessor_scopes of this ExplainDataAccessConsentInfo.

        A list of all the matching accessor scopes of this consent policy that enforced ExplainDataAccessConsentScope.accessor_scope.

        :return: The matching_accessor_scopes of this ExplainDataAccessConsentInfo.
        :rtype: List[ConsentAccessorScope]
        """
        return self._matching_accessor_scopes

    @matching_accessor_scopes.setter
    def matching_accessor_scopes(self, matching_accessor_scopes):
        """Sets the matching_accessor_scopes of this ExplainDataAccessConsentInfo.

        A list of all the matching accessor scopes of this consent policy that enforced ExplainDataAccessConsentScope.accessor_scope.

        :param matching_accessor_scopes: The matching_accessor_scopes of this ExplainDataAccessConsentInfo.
        :type matching_accessor_scopes: List[ConsentAccessorScope]
        """

        self._matching_accessor_scopes = matching_accessor_scopes

    @property
    def patient_consent_owner(self):
        """Gets the patient_consent_owner of this ExplainDataAccessConsentInfo.

        The patient owning the consent (only applicable for patient consents), in the format: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Patient/{patient_id}`

        :return: The patient_consent_owner of this ExplainDataAccessConsentInfo.
        :rtype: str
        """
        return self._patient_consent_owner

    @patient_consent_owner.setter
    def patient_consent_owner(self, patient_consent_owner):
        """Sets the patient_consent_owner of this ExplainDataAccessConsentInfo.

        The patient owning the consent (only applicable for patient consents), in the format: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Patient/{patient_id}`

        :param patient_consent_owner: The patient_consent_owner of this ExplainDataAccessConsentInfo.
        :type patient_consent_owner: str
        """

        self._patient_consent_owner = patient_consent_owner

    @property
    def type(self):
        """Gets the type of this ExplainDataAccessConsentInfo.

        The policy type of consent resource (e.g. PATIENT, ADMIN).

        :return: The type of this ExplainDataAccessConsentInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExplainDataAccessConsentInfo.

        The policy type of consent resource (e.g. PATIENT, ADMIN).

        :param type: The type of this ExplainDataAccessConsentInfo.
        :type type: str
        """
        allowed_values = ["CONSENT_POLICY_TYPE_UNSPECIFIED", "CONSENT_POLICY_TYPE_PATIENT", "CONSENT_POLICY_TYPE_ADMIN"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def variants(self):
        """Gets the variants of this ExplainDataAccessConsentInfo.

        The consent's variant combinations. A single consent may have multiple variants.

        :return: The variants of this ExplainDataAccessConsentInfo.
        :rtype: List[str]
        """
        return self._variants

    @variants.setter
    def variants(self, variants):
        """Sets the variants of this ExplainDataAccessConsentInfo.

        The consent's variant combinations. A single consent may have multiple variants.

        :param variants: The variants of this ExplainDataAccessConsentInfo.
        :type variants: List[str]
        """
        allowed_values = ["VARIANT_UNSPECIFIED", "VARIANT_STANDARD", "VARIANT_CASCADE"]  # noqa: E501
        if not set(variants).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `variants` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(variants) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._variants = variants
