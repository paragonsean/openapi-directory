# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DicomStoreMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blob_storage_size_bytes: str=None, instance_count: str=None, name: str=None, series_count: str=None, structured_storage_size_bytes: str=None, study_count: str=None):
        """DicomStoreMetrics - a model defined in OpenAPI

        :param blob_storage_size_bytes: The blob_storage_size_bytes of this DicomStoreMetrics.
        :param instance_count: The instance_count of this DicomStoreMetrics.
        :param name: The name of this DicomStoreMetrics.
        :param series_count: The series_count of this DicomStoreMetrics.
        :param structured_storage_size_bytes: The structured_storage_size_bytes of this DicomStoreMetrics.
        :param study_count: The study_count of this DicomStoreMetrics.
        """
        self.openapi_types = {
            'blob_storage_size_bytes': str,
            'instance_count': str,
            'name': str,
            'series_count': str,
            'structured_storage_size_bytes': str,
            'study_count': str
        }

        self.attribute_map = {
            'blob_storage_size_bytes': 'blobStorageSizeBytes',
            'instance_count': 'instanceCount',
            'name': 'name',
            'series_count': 'seriesCount',
            'structured_storage_size_bytes': 'structuredStorageSizeBytes',
            'study_count': 'studyCount'
        }

        self._blob_storage_size_bytes = blob_storage_size_bytes
        self._instance_count = instance_count
        self._name = name
        self._series_count = series_count
        self._structured_storage_size_bytes = structured_storage_size_bytes
        self._study_count = study_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DicomStoreMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DicomStoreMetrics of this DicomStoreMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blob_storage_size_bytes(self):
        """Gets the blob_storage_size_bytes of this DicomStoreMetrics.

        Total blob storage bytes for all instances in the store.

        :return: The blob_storage_size_bytes of this DicomStoreMetrics.
        :rtype: str
        """
        return self._blob_storage_size_bytes

    @blob_storage_size_bytes.setter
    def blob_storage_size_bytes(self, blob_storage_size_bytes):
        """Sets the blob_storage_size_bytes of this DicomStoreMetrics.

        Total blob storage bytes for all instances in the store.

        :param blob_storage_size_bytes: The blob_storage_size_bytes of this DicomStoreMetrics.
        :type blob_storage_size_bytes: str
        """

        self._blob_storage_size_bytes = blob_storage_size_bytes

    @property
    def instance_count(self):
        """Gets the instance_count of this DicomStoreMetrics.

        Number of instances in the store.

        :return: The instance_count of this DicomStoreMetrics.
        :rtype: str
        """
        return self._instance_count

    @instance_count.setter
    def instance_count(self, instance_count):
        """Sets the instance_count of this DicomStoreMetrics.

        Number of instances in the store.

        :param instance_count: The instance_count of this DicomStoreMetrics.
        :type instance_count: str
        """

        self._instance_count = instance_count

    @property
    def name(self):
        """Gets the name of this DicomStoreMetrics.

        Resource name of the DICOM store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.

        :return: The name of this DicomStoreMetrics.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DicomStoreMetrics.

        Resource name of the DICOM store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.

        :param name: The name of this DicomStoreMetrics.
        :type name: str
        """

        self._name = name

    @property
    def series_count(self):
        """Gets the series_count of this DicomStoreMetrics.

        Number of series in the store.

        :return: The series_count of this DicomStoreMetrics.
        :rtype: str
        """
        return self._series_count

    @series_count.setter
    def series_count(self, series_count):
        """Sets the series_count of this DicomStoreMetrics.

        Number of series in the store.

        :param series_count: The series_count of this DicomStoreMetrics.
        :type series_count: str
        """

        self._series_count = series_count

    @property
    def structured_storage_size_bytes(self):
        """Gets the structured_storage_size_bytes of this DicomStoreMetrics.

        Total structured storage bytes for all instances in the store.

        :return: The structured_storage_size_bytes of this DicomStoreMetrics.
        :rtype: str
        """
        return self._structured_storage_size_bytes

    @structured_storage_size_bytes.setter
    def structured_storage_size_bytes(self, structured_storage_size_bytes):
        """Sets the structured_storage_size_bytes of this DicomStoreMetrics.

        Total structured storage bytes for all instances in the store.

        :param structured_storage_size_bytes: The structured_storage_size_bytes of this DicomStoreMetrics.
        :type structured_storage_size_bytes: str
        """

        self._structured_storage_size_bytes = structured_storage_size_bytes

    @property
    def study_count(self):
        """Gets the study_count of this DicomStoreMetrics.

        Number of studies in the store.

        :return: The study_count of this DicomStoreMetrics.
        :rtype: str
        """
        return self._study_count

    @study_count.setter
    def study_count(self, study_count):
        """Sets the study_count of this DicomStoreMetrics.

        Number of studies in the store.

        :param study_count: The study_count of this DicomStoreMetrics.
        :type study_count: str
        """

        self._study_count = study_count
