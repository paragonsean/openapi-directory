# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_config import ImageConfig
from openapi_server import util


class Action(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clean_image_tag: ImageConfig=None, clean_text_tag: object=None, delete_tag: object=None, keep_tag: object=None, queries: List[str]=None, recurse_tag: object=None, regen_uid_tag: object=None, remove_tag: object=None, reset_tag: object=None):
        """Action - a model defined in OpenAPI

        :param clean_image_tag: The clean_image_tag of this Action.
        :param clean_text_tag: The clean_text_tag of this Action.
        :param delete_tag: The delete_tag of this Action.
        :param keep_tag: The keep_tag of this Action.
        :param queries: The queries of this Action.
        :param recurse_tag: The recurse_tag of this Action.
        :param regen_uid_tag: The regen_uid_tag of this Action.
        :param remove_tag: The remove_tag of this Action.
        :param reset_tag: The reset_tag of this Action.
        """
        self.openapi_types = {
            'clean_image_tag': ImageConfig,
            'clean_text_tag': object,
            'delete_tag': object,
            'keep_tag': object,
            'queries': List[str],
            'recurse_tag': object,
            'regen_uid_tag': object,
            'remove_tag': object,
            'reset_tag': object
        }

        self.attribute_map = {
            'clean_image_tag': 'cleanImageTag',
            'clean_text_tag': 'cleanTextTag',
            'delete_tag': 'deleteTag',
            'keep_tag': 'keepTag',
            'queries': 'queries',
            'recurse_tag': 'recurseTag',
            'regen_uid_tag': 'regenUidTag',
            'remove_tag': 'removeTag',
            'reset_tag': 'resetTag'
        }

        self._clean_image_tag = clean_image_tag
        self._clean_text_tag = clean_text_tag
        self._delete_tag = delete_tag
        self._keep_tag = keep_tag
        self._queries = queries
        self._recurse_tag = recurse_tag
        self._regen_uid_tag = regen_uid_tag
        self._remove_tag = remove_tag
        self._reset_tag = reset_tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Action':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Action of this Action.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clean_image_tag(self):
        """Gets the clean_image_tag of this Action.


        :return: The clean_image_tag of this Action.
        :rtype: ImageConfig
        """
        return self._clean_image_tag

    @clean_image_tag.setter
    def clean_image_tag(self, clean_image_tag):
        """Sets the clean_image_tag of this Action.


        :param clean_image_tag: The clean_image_tag of this Action.
        :type clean_image_tag: ImageConfig
        """

        self._clean_image_tag = clean_image_tag

    @property
    def clean_text_tag(self):
        """Gets the clean_text_tag of this Action.

        Inspect text and transform sensitive text. Configurable using TextConfig. Supported [Value Representations] (http://dicom.nema.org/medical/dicom/2018e/output/chtml/part05/sect_6.2.html#table_6.2-1): AE, LO, LT, PN, SH, ST, UC, UT, DA, DT, AS

        :return: The clean_text_tag of this Action.
        :rtype: object
        """
        return self._clean_text_tag

    @clean_text_tag.setter
    def clean_text_tag(self, clean_text_tag):
        """Sets the clean_text_tag of this Action.

        Inspect text and transform sensitive text. Configurable using TextConfig. Supported [Value Representations] (http://dicom.nema.org/medical/dicom/2018e/output/chtml/part05/sect_6.2.html#table_6.2-1): AE, LO, LT, PN, SH, ST, UC, UT, DA, DT, AS

        :param clean_text_tag: The clean_text_tag of this Action.
        :type clean_text_tag: object
        """

        self._clean_text_tag = clean_text_tag

    @property
    def delete_tag(self):
        """Gets the delete_tag of this Action.

        Delete tag.

        :return: The delete_tag of this Action.
        :rtype: object
        """
        return self._delete_tag

    @delete_tag.setter
    def delete_tag(self, delete_tag):
        """Sets the delete_tag of this Action.

        Delete tag.

        :param delete_tag: The delete_tag of this Action.
        :type delete_tag: object
        """

        self._delete_tag = delete_tag

    @property
    def keep_tag(self):
        """Gets the keep_tag of this Action.

        Keep tag unchanged.

        :return: The keep_tag of this Action.
        :rtype: object
        """
        return self._keep_tag

    @keep_tag.setter
    def keep_tag(self, keep_tag):
        """Sets the keep_tag of this Action.

        Keep tag unchanged.

        :param keep_tag: The keep_tag of this Action.
        :type keep_tag: object
        """

        self._keep_tag = keep_tag

    @property
    def queries(self):
        """Gets the queries of this Action.

        Select all tags with the listed tag IDs, names, or Value Representations (VRs). Examples: ID: \"00100010\" Keyword: \"PatientName\" VR: \"PN\"

        :return: The queries of this Action.
        :rtype: List[str]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this Action.

        Select all tags with the listed tag IDs, names, or Value Representations (VRs). Examples: ID: \"00100010\" Keyword: \"PatientName\" VR: \"PN\"

        :param queries: The queries of this Action.
        :type queries: List[str]
        """

        self._queries = queries

    @property
    def recurse_tag(self):
        """Gets the recurse_tag of this Action.

        Recursively apply DICOM de-id to tags nested in a sequence. Supported [Value Representation] (http://dicom.nema.org/medical/dicom/2018e/output/chtml/part05/sect_6.2.html#table_6.2-1): SQ

        :return: The recurse_tag of this Action.
        :rtype: object
        """
        return self._recurse_tag

    @recurse_tag.setter
    def recurse_tag(self, recurse_tag):
        """Sets the recurse_tag of this Action.

        Recursively apply DICOM de-id to tags nested in a sequence. Supported [Value Representation] (http://dicom.nema.org/medical/dicom/2018e/output/chtml/part05/sect_6.2.html#table_6.2-1): SQ

        :param recurse_tag: The recurse_tag of this Action.
        :type recurse_tag: object
        """

        self._recurse_tag = recurse_tag

    @property
    def regen_uid_tag(self):
        """Gets the regen_uid_tag of this Action.

        Replace UID with a new generated UID. Supported [Value Representation] (http://dicom.nema.org/medical/dicom/2018e/output/chtml/part05/sect_6.2.html#table_6.2-1): UI

        :return: The regen_uid_tag of this Action.
        :rtype: object
        """
        return self._regen_uid_tag

    @regen_uid_tag.setter
    def regen_uid_tag(self, regen_uid_tag):
        """Sets the regen_uid_tag of this Action.

        Replace UID with a new generated UID. Supported [Value Representation] (http://dicom.nema.org/medical/dicom/2018e/output/chtml/part05/sect_6.2.html#table_6.2-1): UI

        :param regen_uid_tag: The regen_uid_tag of this Action.
        :type regen_uid_tag: object
        """

        self._regen_uid_tag = regen_uid_tag

    @property
    def remove_tag(self):
        """Gets the remove_tag of this Action.

        Replace with empty tag.

        :return: The remove_tag of this Action.
        :rtype: object
        """
        return self._remove_tag

    @remove_tag.setter
    def remove_tag(self, remove_tag):
        """Sets the remove_tag of this Action.

        Replace with empty tag.

        :param remove_tag: The remove_tag of this Action.
        :type remove_tag: object
        """

        self._remove_tag = remove_tag

    @property
    def reset_tag(self):
        """Gets the reset_tag of this Action.

        Reset tag to a placeholder value.

        :return: The reset_tag of this Action.
        :rtype: object
        """
        return self._reset_tag

    @reset_tag.setter
    def reset_tag(self, reset_tag):
        """Sets the reset_tag of this Action.

        Reset tag to a placeholder value.

        :param reset_tag: The reset_tag of this Action.
        :type reset_tag: object
        """

        self._reset_tag = reset_tag
