# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnalyzeEntitiesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternative_output_format: str=None, document_content: str=None, licensed_vocabularies: List[str]=None):
        """AnalyzeEntitiesRequest - a model defined in OpenAPI

        :param alternative_output_format: The alternative_output_format of this AnalyzeEntitiesRequest.
        :param document_content: The document_content of this AnalyzeEntitiesRequest.
        :param licensed_vocabularies: The licensed_vocabularies of this AnalyzeEntitiesRequest.
        """
        self.openapi_types = {
            'alternative_output_format': str,
            'document_content': str,
            'licensed_vocabularies': List[str]
        }

        self.attribute_map = {
            'alternative_output_format': 'alternativeOutputFormat',
            'document_content': 'documentContent',
            'licensed_vocabularies': 'licensedVocabularies'
        }

        self._alternative_output_format = alternative_output_format
        self._document_content = document_content
        self._licensed_vocabularies = licensed_vocabularies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyzeEntitiesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalyzeEntitiesRequest of this AnalyzeEntitiesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternative_output_format(self):
        """Gets the alternative_output_format of this AnalyzeEntitiesRequest.

        Optional. Alternative output format to be generated based on the results of analysis.

        :return: The alternative_output_format of this AnalyzeEntitiesRequest.
        :rtype: str
        """
        return self._alternative_output_format

    @alternative_output_format.setter
    def alternative_output_format(self, alternative_output_format):
        """Sets the alternative_output_format of this AnalyzeEntitiesRequest.

        Optional. Alternative output format to be generated based on the results of analysis.

        :param alternative_output_format: The alternative_output_format of this AnalyzeEntitiesRequest.
        :type alternative_output_format: str
        """
        allowed_values = ["ALTERNATIVE_OUTPUT_FORMAT_UNSPECIFIED", "FHIR_BUNDLE"]  # noqa: E501
        if alternative_output_format not in allowed_values:
            raise ValueError(
                "Invalid value for `alternative_output_format` ({0}), must be one of {1}"
                .format(alternative_output_format, allowed_values)
            )

        self._alternative_output_format = alternative_output_format

    @property
    def document_content(self):
        """Gets the document_content of this AnalyzeEntitiesRequest.

        document_content is a document to be annotated.

        :return: The document_content of this AnalyzeEntitiesRequest.
        :rtype: str
        """
        return self._document_content

    @document_content.setter
    def document_content(self, document_content):
        """Sets the document_content of this AnalyzeEntitiesRequest.

        document_content is a document to be annotated.

        :param document_content: The document_content of this AnalyzeEntitiesRequest.
        :type document_content: str
        """

        self._document_content = document_content

    @property
    def licensed_vocabularies(self):
        """Gets the licensed_vocabularies of this AnalyzeEntitiesRequest.

        A list of licensed vocabularies to use in the request, in addition to the default unlicensed vocabularies.

        :return: The licensed_vocabularies of this AnalyzeEntitiesRequest.
        :rtype: List[str]
        """
        return self._licensed_vocabularies

    @licensed_vocabularies.setter
    def licensed_vocabularies(self, licensed_vocabularies):
        """Sets the licensed_vocabularies of this AnalyzeEntitiesRequest.

        A list of licensed vocabularies to use in the request, in addition to the default unlicensed vocabularies.

        :param licensed_vocabularies: The licensed_vocabularies of this AnalyzeEntitiesRequest.
        :type licensed_vocabularies: List[str]
        """
        allowed_values = ["LICENSED_VOCABULARY_UNSPECIFIED", "ICD10CM", "SNOMEDCT_US"]  # noqa: E501
        if not set(licensed_vocabularies).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `licensed_vocabularies` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(licensed_vocabularies) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._licensed_vocabularies = licensed_vocabularies
