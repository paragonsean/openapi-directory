# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.admin_consents import AdminConsents
from openapi_server import util


class ApplyAdminConsentsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_consents_list: AdminConsents=None, validate_only: bool=None):
        """ApplyAdminConsentsRequest - a model defined in OpenAPI

        :param new_consents_list: The new_consents_list of this ApplyAdminConsentsRequest.
        :param validate_only: The validate_only of this ApplyAdminConsentsRequest.
        """
        self.openapi_types = {
            'new_consents_list': AdminConsents,
            'validate_only': bool
        }

        self.attribute_map = {
            'new_consents_list': 'newConsentsList',
            'validate_only': 'validateOnly'
        }

        self._new_consents_list = new_consents_list
        self._validate_only = validate_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplyAdminConsentsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplyAdminConsentsRequest of this ApplyAdminConsentsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_consents_list(self):
        """Gets the new_consents_list of this ApplyAdminConsentsRequest.


        :return: The new_consents_list of this ApplyAdminConsentsRequest.
        :rtype: AdminConsents
        """
        return self._new_consents_list

    @new_consents_list.setter
    def new_consents_list(self, new_consents_list):
        """Sets the new_consents_list of this ApplyAdminConsentsRequest.


        :param new_consents_list: The new_consents_list of this ApplyAdminConsentsRequest.
        :type new_consents_list: AdminConsents
        """

        self._new_consents_list = new_consents_list

    @property
    def validate_only(self):
        """Gets the validate_only of this ApplyAdminConsentsRequest.

        If true, the method only validates Consent resources to make sure they are supported. Otherwise, the method applies the aggregate consent information to update the enforcement model and reindex the FHIR resources. If all Consent resources can be applied successfully, the ApplyAdminConsentsResponse is returned containing the following fields: * `consent_apply_success` to indicate the number of Consent resources applied. * `affected_resources` to indicate the number of resources that might have had their consent access changed. If, however, one or more Consent resources are unsupported or cannot be applied, the method fails and ApplyAdminConsentsErrorDetail is is returned with details about the unsupported Consent resources.

        :return: The validate_only of this ApplyAdminConsentsRequest.
        :rtype: bool
        """
        return self._validate_only

    @validate_only.setter
    def validate_only(self, validate_only):
        """Sets the validate_only of this ApplyAdminConsentsRequest.

        If true, the method only validates Consent resources to make sure they are supported. Otherwise, the method applies the aggregate consent information to update the enforcement model and reindex the FHIR resources. If all Consent resources can be applied successfully, the ApplyAdminConsentsResponse is returned containing the following fields: * `consent_apply_success` to indicate the number of Consent resources applied. * `affected_resources` to indicate the number of resources that might have had their consent access changed. If, however, one or more Consent resources are unsupported or cannot be applied, the method fails and ApplyAdminConsentsErrorDetail is is returned with details about the unsupported Consent resources.

        :param validate_only: The validate_only of this ApplyAdminConsentsRequest.
        :type validate_only: bool
        """

        self._validate_only = validate_only
