# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FhirNotificationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pubsub_topic: str=None, send_full_resource: bool=None, send_previous_resource_on_delete: bool=None):
        """FhirNotificationConfig - a model defined in OpenAPI

        :param pubsub_topic: The pubsub_topic of this FhirNotificationConfig.
        :param send_full_resource: The send_full_resource of this FhirNotificationConfig.
        :param send_previous_resource_on_delete: The send_previous_resource_on_delete of this FhirNotificationConfig.
        """
        self.openapi_types = {
            'pubsub_topic': str,
            'send_full_resource': bool,
            'send_previous_resource_on_delete': bool
        }

        self.attribute_map = {
            'pubsub_topic': 'pubsubTopic',
            'send_full_resource': 'sendFullResource',
            'send_previous_resource_on_delete': 'sendPreviousResourceOnDelete'
        }

        self._pubsub_topic = pubsub_topic
        self._send_full_resource = send_full_resource
        self._send_previous_resource_on_delete = send_previous_resource_on_delete

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FhirNotificationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FhirNotificationConfig of this FhirNotificationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pubsub_topic(self):
        """Gets the pubsub_topic of this FhirNotificationConfig.

        The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. The notification is a `PubsubMessage` with the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It is guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. Note that notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. The Cloud Healthcare API service account, service-@gcp-sa-healthcare.iam.gserviceaccount.com, must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail (https://cloud.google.com/healthcare-api/docs/permissions-healthcare-api-gcp-products#dicom_fhir_and_hl7v2_store_cloud_pubsub_permissions). If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare-api/docs/how-tos/logging).

        :return: The pubsub_topic of this FhirNotificationConfig.
        :rtype: str
        """
        return self._pubsub_topic

    @pubsub_topic.setter
    def pubsub_topic(self, pubsub_topic):
        """Sets the pubsub_topic of this FhirNotificationConfig.

        The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. The notification is a `PubsubMessage` with the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It is guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. Note that notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. The Cloud Healthcare API service account, service-@gcp-sa-healthcare.iam.gserviceaccount.com, must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail (https://cloud.google.com/healthcare-api/docs/permissions-healthcare-api-gcp-products#dicom_fhir_and_hl7v2_store_cloud_pubsub_permissions). If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare-api/docs/how-tos/logging).

        :param pubsub_topic: The pubsub_topic of this FhirNotificationConfig.
        :type pubsub_topic: str
        """

        self._pubsub_topic = pubsub_topic

    @property
    def send_full_resource(self):
        """Gets the send_full_resource of this FhirNotificationConfig.

        Whether to send full FHIR resource to this Pub/Sub topic for Create and Update operation. Note that setting this to true does not guarantee that all resources will be sent in the format of full FHIR resource. When a resource change is too large or during heavy traffic, only the resource name will be sent. Clients should always check the \"payloadType\" label from a Pub/Sub message to determine whether it needs to fetch the full resource as a separate operation.

        :return: The send_full_resource of this FhirNotificationConfig.
        :rtype: bool
        """
        return self._send_full_resource

    @send_full_resource.setter
    def send_full_resource(self, send_full_resource):
        """Sets the send_full_resource of this FhirNotificationConfig.

        Whether to send full FHIR resource to this Pub/Sub topic for Create and Update operation. Note that setting this to true does not guarantee that all resources will be sent in the format of full FHIR resource. When a resource change is too large or during heavy traffic, only the resource name will be sent. Clients should always check the \"payloadType\" label from a Pub/Sub message to determine whether it needs to fetch the full resource as a separate operation.

        :param send_full_resource: The send_full_resource of this FhirNotificationConfig.
        :type send_full_resource: bool
        """

        self._send_full_resource = send_full_resource

    @property
    def send_previous_resource_on_delete(self):
        """Gets the send_previous_resource_on_delete of this FhirNotificationConfig.

        Whether to send full FHIR resource to this Pub/Sub topic for deleting FHIR resource. Note that setting this to true does not guarantee that all previous resources will be sent in the format of full FHIR resource. When a resource change is too large or during heavy traffic, only the resource name will be sent. Clients should always check the \"payloadType\" label from a Pub/Sub message to determine whether it needs to fetch the full previous resource as a separate operation.

        :return: The send_previous_resource_on_delete of this FhirNotificationConfig.
        :rtype: bool
        """
        return self._send_previous_resource_on_delete

    @send_previous_resource_on_delete.setter
    def send_previous_resource_on_delete(self, send_previous_resource_on_delete):
        """Sets the send_previous_resource_on_delete of this FhirNotificationConfig.

        Whether to send full FHIR resource to this Pub/Sub topic for deleting FHIR resource. Note that setting this to true does not guarantee that all previous resources will be sent in the format of full FHIR resource. When a resource change is too large or during heavy traffic, only the resource name will be sent. Clients should always check the \"payloadType\" label from a Pub/Sub message to determine whether it needs to fetch the full previous resource as a separate operation.

        :param send_previous_resource_on_delete: The send_previous_resource_on_delete of this FhirNotificationConfig.
        :type send_previous_resource_on_delete: bool
        """

        self._send_previous_resource_on_delete = send_previous_resource_on_delete
