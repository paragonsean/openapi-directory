# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.schema_group import SchemaGroup
from openapi_server.models.schema_segment import SchemaSegment
from openapi_server import util


class GroupOrSegment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group: SchemaGroup=None, segment: SchemaSegment=None):
        """GroupOrSegment - a model defined in OpenAPI

        :param group: The group of this GroupOrSegment.
        :param segment: The segment of this GroupOrSegment.
        """
        self.openapi_types = {
            'group': SchemaGroup,
            'segment': SchemaSegment
        }

        self.attribute_map = {
            'group': 'group',
            'segment': 'segment'
        }

        self._group = group
        self._segment = segment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupOrSegment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupOrSegment of this GroupOrSegment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self):
        """Gets the group of this GroupOrSegment.


        :return: The group of this GroupOrSegment.
        :rtype: SchemaGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this GroupOrSegment.


        :param group: The group of this GroupOrSegment.
        :type group: SchemaGroup
        """

        self._group = group

    @property
    def segment(self):
        """Gets the segment of this GroupOrSegment.


        :return: The segment of this GroupOrSegment.
        :rtype: SchemaSegment
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this GroupOrSegment.


        :param segment: The segment of this GroupOrSegment.
        :type segment: SchemaSegment
        """

        self._segment = segment
