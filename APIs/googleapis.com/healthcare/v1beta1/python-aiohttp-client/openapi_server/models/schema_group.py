# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_or_segment import GroupOrSegment
from openapi_server import util


class SchemaGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, choice: bool=None, max_occurs: int=None, members: List[GroupOrSegment]=None, min_occurs: int=None, name: str=None):
        """SchemaGroup - a model defined in OpenAPI

        :param choice: The choice of this SchemaGroup.
        :param max_occurs: The max_occurs of this SchemaGroup.
        :param members: The members of this SchemaGroup.
        :param min_occurs: The min_occurs of this SchemaGroup.
        :param name: The name of this SchemaGroup.
        """
        self.openapi_types = {
            'choice': bool,
            'max_occurs': int,
            'members': List[GroupOrSegment],
            'min_occurs': int,
            'name': str
        }

        self.attribute_map = {
            'choice': 'choice',
            'max_occurs': 'maxOccurs',
            'members': 'members',
            'min_occurs': 'minOccurs',
            'name': 'name'
        }

        self._choice = choice
        self._max_occurs = max_occurs
        self._members = members
        self._min_occurs = min_occurs
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SchemaGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SchemaGroup of this SchemaGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def choice(self):
        """Gets the choice of this SchemaGroup.

        True indicates that this is a choice group, meaning that only one of its segments can exist in a given message.

        :return: The choice of this SchemaGroup.
        :rtype: bool
        """
        return self._choice

    @choice.setter
    def choice(self, choice):
        """Sets the choice of this SchemaGroup.

        True indicates that this is a choice group, meaning that only one of its segments can exist in a given message.

        :param choice: The choice of this SchemaGroup.
        :type choice: bool
        """

        self._choice = choice

    @property
    def max_occurs(self):
        """Gets the max_occurs of this SchemaGroup.

        The maximum number of times this group can be repeated. 0 or -1 means unbounded.

        :return: The max_occurs of this SchemaGroup.
        :rtype: int
        """
        return self._max_occurs

    @max_occurs.setter
    def max_occurs(self, max_occurs):
        """Sets the max_occurs of this SchemaGroup.

        The maximum number of times this group can be repeated. 0 or -1 means unbounded.

        :param max_occurs: The max_occurs of this SchemaGroup.
        :type max_occurs: int
        """

        self._max_occurs = max_occurs

    @property
    def members(self):
        """Gets the members of this SchemaGroup.

        Nested groups and/or segments.

        :return: The members of this SchemaGroup.
        :rtype: List[GroupOrSegment]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this SchemaGroup.

        Nested groups and/or segments.

        :param members: The members of this SchemaGroup.
        :type members: List[GroupOrSegment]
        """

        self._members = members

    @property
    def min_occurs(self):
        """Gets the min_occurs of this SchemaGroup.

        The minimum number of times this group must be present/repeated.

        :return: The min_occurs of this SchemaGroup.
        :rtype: int
        """
        return self._min_occurs

    @min_occurs.setter
    def min_occurs(self, min_occurs):
        """Sets the min_occurs of this SchemaGroup.

        The minimum number of times this group must be present/repeated.

        :param min_occurs: The min_occurs of this SchemaGroup.
        :type min_occurs: int
        """

        self._min_occurs = min_occurs

    @property
    def name(self):
        """Gets the name of this SchemaGroup.

        The name of this group. For example, \"ORDER_DETAIL\".

        :return: The name of this SchemaGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SchemaGroup.

        The name of this group. For example, \"ORDER_DETAIL\".

        :param name: The name of this SchemaGroup.
        :type name: str
        """

        self._name = name
