# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplyConsentsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affected_resources: str=None, consent_apply_failure: str=None, consent_apply_success: str=None, failed_resources: str=None):
        """ApplyConsentsResponse - a model defined in OpenAPI

        :param affected_resources: The affected_resources of this ApplyConsentsResponse.
        :param consent_apply_failure: The consent_apply_failure of this ApplyConsentsResponse.
        :param consent_apply_success: The consent_apply_success of this ApplyConsentsResponse.
        :param failed_resources: The failed_resources of this ApplyConsentsResponse.
        """
        self.openapi_types = {
            'affected_resources': str,
            'consent_apply_failure': str,
            'consent_apply_success': str,
            'failed_resources': str
        }

        self.attribute_map = {
            'affected_resources': 'affectedResources',
            'consent_apply_failure': 'consentApplyFailure',
            'consent_apply_success': 'consentApplySuccess',
            'failed_resources': 'failedResources'
        }

        self._affected_resources = affected_resources
        self._consent_apply_failure = consent_apply_failure
        self._consent_apply_success = consent_apply_success
        self._failed_resources = failed_resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplyConsentsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplyConsentsResponse of this ApplyConsentsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affected_resources(self):
        """Gets the affected_resources of this ApplyConsentsResponse.

        The number of resources (including the Consent resources) that may have consensual access change.

        :return: The affected_resources of this ApplyConsentsResponse.
        :rtype: str
        """
        return self._affected_resources

    @affected_resources.setter
    def affected_resources(self, affected_resources):
        """Sets the affected_resources of this ApplyConsentsResponse.

        The number of resources (including the Consent resources) that may have consensual access change.

        :param affected_resources: The affected_resources of this ApplyConsentsResponse.
        :type affected_resources: str
        """

        self._affected_resources = affected_resources

    @property
    def consent_apply_failure(self):
        """Gets the consent_apply_failure of this ApplyConsentsResponse.

        If `validate_only = false` in ApplyConsentsRequest, this counter is the number of Consent resources that were failed to apply. Otherwise, it is the number of Consent resources that are not supported or invalid.

        :return: The consent_apply_failure of this ApplyConsentsResponse.
        :rtype: str
        """
        return self._consent_apply_failure

    @consent_apply_failure.setter
    def consent_apply_failure(self, consent_apply_failure):
        """Sets the consent_apply_failure of this ApplyConsentsResponse.

        If `validate_only = false` in ApplyConsentsRequest, this counter is the number of Consent resources that were failed to apply. Otherwise, it is the number of Consent resources that are not supported or invalid.

        :param consent_apply_failure: The consent_apply_failure of this ApplyConsentsResponse.
        :type consent_apply_failure: str
        """

        self._consent_apply_failure = consent_apply_failure

    @property
    def consent_apply_success(self):
        """Gets the consent_apply_success of this ApplyConsentsResponse.

        If `validate_only = false` in ApplyConsentsRequest, this counter is the number of Consent resources that were successfully applied. Otherwise, it is the number of Consent resources that are supported.

        :return: The consent_apply_success of this ApplyConsentsResponse.
        :rtype: str
        """
        return self._consent_apply_success

    @consent_apply_success.setter
    def consent_apply_success(self, consent_apply_success):
        """Sets the consent_apply_success of this ApplyConsentsResponse.

        If `validate_only = false` in ApplyConsentsRequest, this counter is the number of Consent resources that were successfully applied. Otherwise, it is the number of Consent resources that are supported.

        :param consent_apply_success: The consent_apply_success of this ApplyConsentsResponse.
        :type consent_apply_success: str
        """

        self._consent_apply_success = consent_apply_success

    @property
    def failed_resources(self):
        """Gets the failed_resources of this ApplyConsentsResponse.

        The number of resources (including the Consent resources) that ApplyConsents failed to re-index.

        :return: The failed_resources of this ApplyConsentsResponse.
        :rtype: str
        """
        return self._failed_resources

    @failed_resources.setter
    def failed_resources(self, failed_resources):
        """Sets the failed_resources of this ApplyConsentsResponse.

        The number of resources (including the Consent resources) that ApplyConsents failed to re-index.

        :param failed_resources: The failed_resources of this ApplyConsentsResponse.
        :type failed_resources: str
        """

        self._failed_resources = failed_resources
