# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModelField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_occurs: int=None, min_occurs: int=None, name: str=None, table: str=None, type: str=None):
        """ModelField - a model defined in OpenAPI

        :param max_occurs: The max_occurs of this ModelField.
        :param min_occurs: The min_occurs of this ModelField.
        :param name: The name of this ModelField.
        :param table: The table of this ModelField.
        :param type: The type of this ModelField.
        """
        self.openapi_types = {
            'max_occurs': int,
            'min_occurs': int,
            'name': str,
            'table': str,
            'type': str
        }

        self.attribute_map = {
            'max_occurs': 'maxOccurs',
            'min_occurs': 'minOccurs',
            'name': 'name',
            'table': 'table',
            'type': 'type'
        }

        self._max_occurs = max_occurs
        self._min_occurs = min_occurs
        self._name = name
        self._table = table
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Field of this ModelField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_occurs(self):
        """Gets the max_occurs of this ModelField.

        The maximum number of times this field can be repeated. 0 or -1 means unbounded.

        :return: The max_occurs of this ModelField.
        :rtype: int
        """
        return self._max_occurs

    @max_occurs.setter
    def max_occurs(self, max_occurs):
        """Sets the max_occurs of this ModelField.

        The maximum number of times this field can be repeated. 0 or -1 means unbounded.

        :param max_occurs: The max_occurs of this ModelField.
        :type max_occurs: int
        """

        self._max_occurs = max_occurs

    @property
    def min_occurs(self):
        """Gets the min_occurs of this ModelField.

        The minimum number of times this field must be present/repeated.

        :return: The min_occurs of this ModelField.
        :rtype: int
        """
        return self._min_occurs

    @min_occurs.setter
    def min_occurs(self, min_occurs):
        """Sets the min_occurs of this ModelField.

        The minimum number of times this field must be present/repeated.

        :param min_occurs: The min_occurs of this ModelField.
        :type min_occurs: int
        """

        self._min_occurs = min_occurs

    @property
    def name(self):
        """Gets the name of this ModelField.

        The name of the field. For example, \"PID-1\" or just \"1\".

        :return: The name of this ModelField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelField.

        The name of the field. For example, \"PID-1\" or just \"1\".

        :param name: The name of this ModelField.
        :type name: str
        """

        self._name = name

    @property
    def table(self):
        """Gets the table of this ModelField.

        The HL7v2 table this field refers to. For example, PID-15 (Patient's Primary Language) usually refers to table \"0296\".

        :return: The table of this ModelField.
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this ModelField.

        The HL7v2 table this field refers to. For example, PID-15 (Patient's Primary Language) usually refers to table \"0296\".

        :param table: The table of this ModelField.
        :type table: str
        """

        self._table = table

    @property
    def type(self):
        """Gets the type of this ModelField.

        The type of this field. A Type with this name must be defined in an Hl7TypesConfig.

        :return: The type of this ModelField.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelField.

        The type of this field. A Type with this name must be defined in an Hl7TypesConfig.

        :param type: The type of this ModelField.
        :type type: str
        """

        self._type = type
