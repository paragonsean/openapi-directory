# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hl7_schema_config import Hl7SchemaConfig
from openapi_server.models.hl7_types_config import Hl7TypesConfig
from openapi_server import util


class SchemaPackage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ignore_min_occurs: bool=None, schemas: List[Hl7SchemaConfig]=None, schematized_parsing_type: str=None, types: List[Hl7TypesConfig]=None, unexpected_segment_handling: str=None):
        """SchemaPackage - a model defined in OpenAPI

        :param ignore_min_occurs: The ignore_min_occurs of this SchemaPackage.
        :param schemas: The schemas of this SchemaPackage.
        :param schematized_parsing_type: The schematized_parsing_type of this SchemaPackage.
        :param types: The types of this SchemaPackage.
        :param unexpected_segment_handling: The unexpected_segment_handling of this SchemaPackage.
        """
        self.openapi_types = {
            'ignore_min_occurs': bool,
            'schemas': List[Hl7SchemaConfig],
            'schematized_parsing_type': str,
            'types': List[Hl7TypesConfig],
            'unexpected_segment_handling': str
        }

        self.attribute_map = {
            'ignore_min_occurs': 'ignoreMinOccurs',
            'schemas': 'schemas',
            'schematized_parsing_type': 'schematizedParsingType',
            'types': 'types',
            'unexpected_segment_handling': 'unexpectedSegmentHandling'
        }

        self._ignore_min_occurs = ignore_min_occurs
        self._schemas = schemas
        self._schematized_parsing_type = schematized_parsing_type
        self._types = types
        self._unexpected_segment_handling = unexpected_segment_handling

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SchemaPackage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SchemaPackage of this SchemaPackage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ignore_min_occurs(self):
        """Gets the ignore_min_occurs of this SchemaPackage.

        Flag to ignore all min_occurs restrictions in the schema. This means that incoming messages can omit any group, segment, field, component, or subcomponent.

        :return: The ignore_min_occurs of this SchemaPackage.
        :rtype: bool
        """
        return self._ignore_min_occurs

    @ignore_min_occurs.setter
    def ignore_min_occurs(self, ignore_min_occurs):
        """Sets the ignore_min_occurs of this SchemaPackage.

        Flag to ignore all min_occurs restrictions in the schema. This means that incoming messages can omit any group, segment, field, component, or subcomponent.

        :param ignore_min_occurs: The ignore_min_occurs of this SchemaPackage.
        :type ignore_min_occurs: bool
        """

        self._ignore_min_occurs = ignore_min_occurs

    @property
    def schemas(self):
        """Gets the schemas of this SchemaPackage.

        Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message.

        :return: The schemas of this SchemaPackage.
        :rtype: List[Hl7SchemaConfig]
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas):
        """Sets the schemas of this SchemaPackage.

        Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message.

        :param schemas: The schemas of this SchemaPackage.
        :type schemas: List[Hl7SchemaConfig]
        """

        self._schemas = schemas

    @property
    def schematized_parsing_type(self):
        """Gets the schematized_parsing_type of this SchemaPackage.

        Determines how messages that fail to parse are handled.

        :return: The schematized_parsing_type of this SchemaPackage.
        :rtype: str
        """
        return self._schematized_parsing_type

    @schematized_parsing_type.setter
    def schematized_parsing_type(self, schematized_parsing_type):
        """Sets the schematized_parsing_type of this SchemaPackage.

        Determines how messages that fail to parse are handled.

        :param schematized_parsing_type: The schematized_parsing_type of this SchemaPackage.
        :type schematized_parsing_type: str
        """
        allowed_values = ["SCHEMATIZED_PARSING_TYPE_UNSPECIFIED", "SOFT_FAIL", "HARD_FAIL"]  # noqa: E501
        if schematized_parsing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `schematized_parsing_type` ({0}), must be one of {1}"
                .format(schematized_parsing_type, allowed_values)
            )

        self._schematized_parsing_type = schematized_parsing_type

    @property
    def types(self):
        """Gets the types of this SchemaPackage.

        Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message.

        :return: The types of this SchemaPackage.
        :rtype: List[Hl7TypesConfig]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this SchemaPackage.

        Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message.

        :param types: The types of this SchemaPackage.
        :type types: List[Hl7TypesConfig]
        """

        self._types = types

    @property
    def unexpected_segment_handling(self):
        """Gets the unexpected_segment_handling of this SchemaPackage.

        Determines how unexpected segments (segments not matched to the schema) are handled.

        :return: The unexpected_segment_handling of this SchemaPackage.
        :rtype: str
        """
        return self._unexpected_segment_handling

    @unexpected_segment_handling.setter
    def unexpected_segment_handling(self, unexpected_segment_handling):
        """Sets the unexpected_segment_handling of this SchemaPackage.

        Determines how unexpected segments (segments not matched to the schema) are handled.

        :param unexpected_segment_handling: The unexpected_segment_handling of this SchemaPackage.
        :type unexpected_segment_handling: str
        """
        allowed_values = ["UNEXPECTED_SEGMENT_HANDLING_MODE_UNSPECIFIED", "FAIL", "SKIP", "PARSE"]  # noqa: E501
        if unexpected_segment_handling not in allowed_values:
            raise ValueError(
                "Invalid value for `unexpected_segment_handling` ({0}), must be one of {1}"
                .format(unexpected_segment_handling, allowed_values)
            )

        self._unexpected_segment_handling = unexpected_segment_handling
