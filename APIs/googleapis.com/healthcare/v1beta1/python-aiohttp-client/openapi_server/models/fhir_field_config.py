# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_healthcare_v1beta1_deidentify_field_metadata import GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata
from openapi_server.models.google_cloud_healthcare_v1beta1_deidentify_options import GoogleCloudHealthcareV1beta1DeidentifyOptions
from openapi_server import util


class FhirFieldConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_metadata_list: List[GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata]=None, options: GoogleCloudHealthcareV1beta1DeidentifyOptions=None, profile_type: str=None):
        """FhirFieldConfig - a model defined in OpenAPI

        :param field_metadata_list: The field_metadata_list of this FhirFieldConfig.
        :param options: The options of this FhirFieldConfig.
        :param profile_type: The profile_type of this FhirFieldConfig.
        """
        self.openapi_types = {
            'field_metadata_list': List[GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata],
            'options': GoogleCloudHealthcareV1beta1DeidentifyOptions,
            'profile_type': str
        }

        self.attribute_map = {
            'field_metadata_list': 'fieldMetadataList',
            'options': 'options',
            'profile_type': 'profileType'
        }

        self._field_metadata_list = field_metadata_list
        self._options = options
        self._profile_type = profile_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FhirFieldConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FhirFieldConfig of this FhirFieldConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_metadata_list(self):
        """Gets the field_metadata_list of this FhirFieldConfig.

        Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata `action` is passed through to the output dataset unmodified. All extensions will be processed according to keep_extensions. If a field can be matched by more than one FieldMetadata `action`, the first `action` option is applied. Overrides options and the union field `profile` in FhirFieldConfig.

        :return: The field_metadata_list of this FhirFieldConfig.
        :rtype: List[GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata]
        """
        return self._field_metadata_list

    @field_metadata_list.setter
    def field_metadata_list(self, field_metadata_list):
        """Sets the field_metadata_list of this FhirFieldConfig.

        Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata `action` is passed through to the output dataset unmodified. All extensions will be processed according to keep_extensions. If a field can be matched by more than one FieldMetadata `action`, the first `action` option is applied. Overrides options and the union field `profile` in FhirFieldConfig.

        :param field_metadata_list: The field_metadata_list of this FhirFieldConfig.
        :type field_metadata_list: List[GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata]
        """

        self._field_metadata_list = field_metadata_list

    @property
    def options(self):
        """Gets the options of this FhirFieldConfig.


        :return: The options of this FhirFieldConfig.
        :rtype: GoogleCloudHealthcareV1beta1DeidentifyOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this FhirFieldConfig.


        :param options: The options of this FhirFieldConfig.
        :type options: GoogleCloudHealthcareV1beta1DeidentifyOptions
        """

        self._options = options

    @property
    def profile_type(self):
        """Gets the profile_type of this FhirFieldConfig.

        Base profile type for handling FHIR fields.

        :return: The profile_type of this FhirFieldConfig.
        :rtype: str
        """
        return self._profile_type

    @profile_type.setter
    def profile_type(self, profile_type):
        """Sets the profile_type of this FhirFieldConfig.

        Base profile type for handling FHIR fields.

        :param profile_type: The profile_type of this FhirFieldConfig.
        :type profile_type: str
        """
        allowed_values = ["PROFILE_TYPE_UNSPECIFIED", "KEEP_ALL", "BASIC", "CLEAN_ALL"]  # noqa: E501
        if profile_type not in allowed_values:
            raise ValueError(
                "Invalid value for `profile_type` ({0}), must be one of {1}"
                .format(profile_type, allowed_values)
            )

        self._profile_type = profile_type
