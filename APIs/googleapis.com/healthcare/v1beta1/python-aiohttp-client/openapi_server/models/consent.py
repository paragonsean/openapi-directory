# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_healthcare_v1beta1_consent_policy import GoogleCloudHealthcareV1beta1ConsentPolicy
from openapi_server import util


class Consent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consent_artifact: str=None, expire_time: str=None, metadata: Dict[str, str]=None, name: str=None, policies: List[GoogleCloudHealthcareV1beta1ConsentPolicy]=None, revision_create_time: str=None, revision_id: str=None, state: str=None, ttl: str=None, user_id: str=None):
        """Consent - a model defined in OpenAPI

        :param consent_artifact: The consent_artifact of this Consent.
        :param expire_time: The expire_time of this Consent.
        :param metadata: The metadata of this Consent.
        :param name: The name of this Consent.
        :param policies: The policies of this Consent.
        :param revision_create_time: The revision_create_time of this Consent.
        :param revision_id: The revision_id of this Consent.
        :param state: The state of this Consent.
        :param ttl: The ttl of this Consent.
        :param user_id: The user_id of this Consent.
        """
        self.openapi_types = {
            'consent_artifact': str,
            'expire_time': str,
            'metadata': Dict[str, str],
            'name': str,
            'policies': List[GoogleCloudHealthcareV1beta1ConsentPolicy],
            'revision_create_time': str,
            'revision_id': str,
            'state': str,
            'ttl': str,
            'user_id': str
        }

        self.attribute_map = {
            'consent_artifact': 'consentArtifact',
            'expire_time': 'expireTime',
            'metadata': 'metadata',
            'name': 'name',
            'policies': 'policies',
            'revision_create_time': 'revisionCreateTime',
            'revision_id': 'revisionId',
            'state': 'state',
            'ttl': 'ttl',
            'user_id': 'userId'
        }

        self._consent_artifact = consent_artifact
        self._expire_time = expire_time
        self._metadata = metadata
        self._name = name
        self._policies = policies
        self._revision_create_time = revision_create_time
        self._revision_id = revision_id
        self._state = state
        self._ttl = ttl
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Consent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Consent of this Consent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consent_artifact(self):
        """Gets the consent_artifact of this Consent.

        Required. The resource name of the Consent artifact that contains proof of the end user's consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.

        :return: The consent_artifact of this Consent.
        :rtype: str
        """
        return self._consent_artifact

    @consent_artifact.setter
    def consent_artifact(self, consent_artifact):
        """Sets the consent_artifact of this Consent.

        Required. The resource name of the Consent artifact that contains proof of the end user's consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.

        :param consent_artifact: The consent_artifact of this Consent.
        :type consent_artifact: str
        """

        self._consent_artifact = consent_artifact

    @property
    def expire_time(self):
        """Gets the expire_time of this Consent.

        Timestamp in UTC of when this Consent is considered expired.

        :return: The expire_time of this Consent.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this Consent.

        Timestamp in UTC of when this Consent is considered expired.

        :param expire_time: The expire_time of this Consent.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def metadata(self):
        """Gets the metadata of this Consent.

        Optional. User-supplied key-value pairs used to organize Consent resources. Metadata keys must: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - begin with a letter - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes Metadata values must be: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes No more than 64 metadata entries can be associated with a given consent.

        :return: The metadata of this Consent.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Consent.

        Optional. User-supplied key-value pairs used to organize Consent resources. Metadata keys must: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - begin with a letter - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes Metadata values must be: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes No more than 64 metadata entries can be associated with a given consent.

        :param metadata: The metadata of this Consent.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Consent.

        Identifier. Resource name of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. Cannot be changed after creation.

        :return: The name of this Consent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Consent.

        Identifier. Resource name of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. Cannot be changed after creation.

        :param name: The name of this Consent.
        :type name: str
        """

        self._name = name

    @property
    def policies(self):
        """Gets the policies of this Consent.

        Optional. Represents a user's consent in terms of the resources that can be accessed and under what conditions.

        :return: The policies of this Consent.
        :rtype: List[GoogleCloudHealthcareV1beta1ConsentPolicy]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this Consent.

        Optional. Represents a user's consent in terms of the resources that can be accessed and under what conditions.

        :param policies: The policies of this Consent.
        :type policies: List[GoogleCloudHealthcareV1beta1ConsentPolicy]
        """

        self._policies = policies

    @property
    def revision_create_time(self):
        """Gets the revision_create_time of this Consent.

        Output only. The timestamp that the revision was created.

        :return: The revision_create_time of this Consent.
        :rtype: str
        """
        return self._revision_create_time

    @revision_create_time.setter
    def revision_create_time(self, revision_create_time):
        """Sets the revision_create_time of this Consent.

        Output only. The timestamp that the revision was created.

        :param revision_create_time: The revision_create_time of this Consent.
        :type revision_create_time: str
        """

        self._revision_create_time = revision_create_time

    @property
    def revision_id(self):
        """Gets the revision_id of this Consent.

        Output only. The revision ID of the Consent. The format is an 8-character hexadecimal string. Refer to a specific revision of a Consent by appending `@{revision_id}` to the Consent's resource name.

        :return: The revision_id of this Consent.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this Consent.

        Output only. The revision ID of the Consent. The format is an 8-character hexadecimal string. Refer to a specific revision of a Consent by appending `@{revision_id}` to the Consent's resource name.

        :param revision_id: The revision_id of this Consent.
        :type revision_id: str
        """

        self._revision_id = revision_id

    @property
    def state(self):
        """Gets the state of this Consent.

        Required. Indicates the current state of this Consent.

        :return: The state of this Consent.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Consent.

        Required. Indicates the current state of this Consent.

        :param state: The state of this Consent.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "ARCHIVED", "REVOKED", "DRAFT", "REJECTED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def ttl(self):
        """Gets the ttl of this Consent.

        Input only. The time to live for this Consent from when it is created.

        :return: The ttl of this Consent.
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this Consent.

        Input only. The time to live for this Consent from when it is created.

        :param ttl: The ttl of this Consent.
        :type ttl: str
        """

        self._ttl = ttl

    @property
    def user_id(self):
        """Gets the user_id of this Consent.

        Required. User's UUID provided by the client.

        :return: The user_id of this Consent.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Consent.

        Required. User's UUID provided by the client.

        :param user_id: The user_id of this Consent.
        :type user_id: str
        """

        self._user_id = user_id
