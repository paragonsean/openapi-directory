# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image import Image
from openapi_server import util


class Signature(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image: Image=None, metadata: Dict[str, str]=None, signature_time: str=None, user_id: str=None):
        """Signature - a model defined in OpenAPI

        :param image: The image of this Signature.
        :param metadata: The metadata of this Signature.
        :param signature_time: The signature_time of this Signature.
        :param user_id: The user_id of this Signature.
        """
        self.openapi_types = {
            'image': Image,
            'metadata': Dict[str, str],
            'signature_time': str,
            'user_id': str
        }

        self.attribute_map = {
            'image': 'image',
            'metadata': 'metadata',
            'signature_time': 'signatureTime',
            'user_id': 'userId'
        }

        self._image = image
        self._metadata = metadata
        self._signature_time = signature_time
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Signature':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Signature of this Signature.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image(self):
        """Gets the image of this Signature.


        :return: The image of this Signature.
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Signature.


        :param image: The image of this Signature.
        :type image: Image
        """

        self._image = image

    @property
    def metadata(self):
        """Gets the metadata of this Signature.

        Optional. Metadata associated with the user's signature. For example, the user's name or the user's title.

        :return: The metadata of this Signature.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Signature.

        Optional. Metadata associated with the user's signature. For example, the user's name or the user's title.

        :param metadata: The metadata of this Signature.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def signature_time(self):
        """Gets the signature_time of this Signature.

        Optional. Timestamp of the signature.

        :return: The signature_time of this Signature.
        :rtype: str
        """
        return self._signature_time

    @signature_time.setter
    def signature_time(self, signature_time):
        """Sets the signature_time of this Signature.

        Optional. Timestamp of the signature.

        :param signature_time: The signature_time of this Signature.
        :type signature_time: str
        """

        self._signature_time = signature_time

    @property
    def user_id(self):
        """Gets the user_id of this Signature.

        Required. User's UUID provided by the client.

        :return: The user_id of this Signature.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Signature.

        Required. User's UUID provided by the client.

        :param user_id: The user_id of this Signature.
        :type user_id: str
        """

        self._user_id = user_id
