# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FhirStoreMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: str=None, resource_type: str=None, structured_storage_size_bytes: str=None):
        """FhirStoreMetric - a model defined in OpenAPI

        :param count: The count of this FhirStoreMetric.
        :param resource_type: The resource_type of this FhirStoreMetric.
        :param structured_storage_size_bytes: The structured_storage_size_bytes of this FhirStoreMetric.
        """
        self.openapi_types = {
            'count': str,
            'resource_type': str,
            'structured_storage_size_bytes': str
        }

        self.attribute_map = {
            'count': 'count',
            'resource_type': 'resourceType',
            'structured_storage_size_bytes': 'structuredStorageSizeBytes'
        }

        self._count = count
        self._resource_type = resource_type
        self._structured_storage_size_bytes = structured_storage_size_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FhirStoreMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FhirStoreMetric of this FhirStoreMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this FhirStoreMetric.

        The total count of FHIR resources in the store of this resource type.

        :return: The count of this FhirStoreMetric.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this FhirStoreMetric.

        The total count of FHIR resources in the store of this resource type.

        :param count: The count of this FhirStoreMetric.
        :type count: str
        """

        self._count = count

    @property
    def resource_type(self):
        """Gets the resource_type of this FhirStoreMetric.

        The FHIR resource type this metric applies to.

        :return: The resource_type of this FhirStoreMetric.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this FhirStoreMetric.

        The FHIR resource type this metric applies to.

        :param resource_type: The resource_type of this FhirStoreMetric.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def structured_storage_size_bytes(self):
        """Gets the structured_storage_size_bytes of this FhirStoreMetric.

        The total amount of structured storage used by FHIR resources of this resource type in the store.

        :return: The structured_storage_size_bytes of this FhirStoreMetric.
        :rtype: str
        """
        return self._structured_storage_size_bytes

    @structured_storage_size_bytes.setter
    def structured_storage_size_bytes(self, structured_storage_size_bytes):
        """Sets the structured_storage_size_bytes of this FhirStoreMetric.

        The total amount of structured storage used by FHIR resources of this resource type in the store.

        :param structured_storage_size_bytes: The structured_storage_size_bytes of this FhirStoreMetric.
        :type structured_storage_size_bytes: str
        """

        self._structured_storage_size_bytes = structured_storage_size_bytes
