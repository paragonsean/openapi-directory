# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patient_scope import PatientScope
from openapi_server.models.time_range import TimeRange
from openapi_server import util


class ApplyConsentsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, patient_scope: PatientScope=None, time_range: TimeRange=None, validate_only: bool=None):
        """ApplyConsentsRequest - a model defined in OpenAPI

        :param patient_scope: The patient_scope of this ApplyConsentsRequest.
        :param time_range: The time_range of this ApplyConsentsRequest.
        :param validate_only: The validate_only of this ApplyConsentsRequest.
        """
        self.openapi_types = {
            'patient_scope': PatientScope,
            'time_range': TimeRange,
            'validate_only': bool
        }

        self.attribute_map = {
            'patient_scope': 'patientScope',
            'time_range': 'timeRange',
            'validate_only': 'validateOnly'
        }

        self._patient_scope = patient_scope
        self._time_range = time_range
        self._validate_only = validate_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplyConsentsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplyConsentsRequest of this ApplyConsentsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def patient_scope(self):
        """Gets the patient_scope of this ApplyConsentsRequest.


        :return: The patient_scope of this ApplyConsentsRequest.
        :rtype: PatientScope
        """
        return self._patient_scope

    @patient_scope.setter
    def patient_scope(self, patient_scope):
        """Sets the patient_scope of this ApplyConsentsRequest.


        :param patient_scope: The patient_scope of this ApplyConsentsRequest.
        :type patient_scope: PatientScope
        """

        self._patient_scope = patient_scope

    @property
    def time_range(self):
        """Gets the time_range of this ApplyConsentsRequest.


        :return: The time_range of this ApplyConsentsRequest.
        :rtype: TimeRange
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this ApplyConsentsRequest.


        :param time_range: The time_range of this ApplyConsentsRequest.
        :type time_range: TimeRange
        """

        self._time_range = time_range

    @property
    def validate_only(self):
        """Gets the validate_only of this ApplyConsentsRequest.

        Optional. If true, the method only validates Consent resources to make sure they are supported. When the operation completes, ApplyConsentsResponse is returned where `consent_apply_success` and `consent_apply_failure` indicate supported and unsupported (or invalid) Consent resources, respectively. Otherwise, the method propagates the aggregate consensual information to the patient's resources. Upon success, `affected_resources` in the ApplyConsentsResponse indicates the number of resources that may have consensual access changed.

        :return: The validate_only of this ApplyConsentsRequest.
        :rtype: bool
        """
        return self._validate_only

    @validate_only.setter
    def validate_only(self, validate_only):
        """Sets the validate_only of this ApplyConsentsRequest.

        Optional. If true, the method only validates Consent resources to make sure they are supported. When the operation completes, ApplyConsentsResponse is returned where `consent_apply_success` and `consent_apply_failure` indicate supported and unsupported (or invalid) Consent resources, respectively. Otherwise, the method propagates the aggregate consensual information to the patient's resources. Upon success, `affected_resources` in the ApplyConsentsResponse indicates the number of resources that may have consensual access changed.

        :param validate_only: The validate_only of this ApplyConsentsRequest.
        :type validate_only: bool
        """

        self._validate_only = validate_only
