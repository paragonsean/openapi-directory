# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consent_accessor_scope import ConsentAccessorScope
from openapi_server.models.explain_data_access_consent_info import ExplainDataAccessConsentInfo
from openapi_server import util


class ExplainDataAccessConsentScope(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accessor_scope: ConsentAccessorScope=None, decision: str=None, enforcing_consents: List[ExplainDataAccessConsentInfo]=None, exceptions: List[ExplainDataAccessConsentScope]=None):
        """ExplainDataAccessConsentScope - a model defined in OpenAPI

        :param accessor_scope: The accessor_scope of this ExplainDataAccessConsentScope.
        :param decision: The decision of this ExplainDataAccessConsentScope.
        :param enforcing_consents: The enforcing_consents of this ExplainDataAccessConsentScope.
        :param exceptions: The exceptions of this ExplainDataAccessConsentScope.
        """
        self.openapi_types = {
            'accessor_scope': ConsentAccessorScope,
            'decision': str,
            'enforcing_consents': List[ExplainDataAccessConsentInfo],
            'exceptions': List[ExplainDataAccessConsentScope]
        }

        self.attribute_map = {
            'accessor_scope': 'accessorScope',
            'decision': 'decision',
            'enforcing_consents': 'enforcingConsents',
            'exceptions': 'exceptions'
        }

        self._accessor_scope = accessor_scope
        self._decision = decision
        self._enforcing_consents = enforcing_consents
        self._exceptions = exceptions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExplainDataAccessConsentScope':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExplainDataAccessConsentScope of this ExplainDataAccessConsentScope.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accessor_scope(self):
        """Gets the accessor_scope of this ExplainDataAccessConsentScope.


        :return: The accessor_scope of this ExplainDataAccessConsentScope.
        :rtype: ConsentAccessorScope
        """
        return self._accessor_scope

    @accessor_scope.setter
    def accessor_scope(self, accessor_scope):
        """Sets the accessor_scope of this ExplainDataAccessConsentScope.


        :param accessor_scope: The accessor_scope of this ExplainDataAccessConsentScope.
        :type accessor_scope: ConsentAccessorScope
        """

        self._accessor_scope = accessor_scope

    @property
    def decision(self):
        """Gets the decision of this ExplainDataAccessConsentScope.

        Whether the current consent scope is permitted or denied access on the requested resource.

        :return: The decision of this ExplainDataAccessConsentScope.
        :rtype: str
        """
        return self._decision

    @decision.setter
    def decision(self, decision):
        """Sets the decision of this ExplainDataAccessConsentScope.

        Whether the current consent scope is permitted or denied access on the requested resource.

        :param decision: The decision of this ExplainDataAccessConsentScope.
        :type decision: str
        """
        allowed_values = ["CONSENT_DECISION_TYPE_UNSPECIFIED", "CONSENT_DECISION_TYPE_PERMIT", "CONSENT_DECISION_TYPE_DENY"]  # noqa: E501
        if decision not in allowed_values:
            raise ValueError(
                "Invalid value for `decision` ({0}), must be one of {1}"
                .format(decision, allowed_values)
            )

        self._decision = decision

    @property
    def enforcing_consents(self):
        """Gets the enforcing_consents of this ExplainDataAccessConsentScope.

        Metadata of the consent resources that enforce the consent scope's access.

        :return: The enforcing_consents of this ExplainDataAccessConsentScope.
        :rtype: List[ExplainDataAccessConsentInfo]
        """
        return self._enforcing_consents

    @enforcing_consents.setter
    def enforcing_consents(self, enforcing_consents):
        """Sets the enforcing_consents of this ExplainDataAccessConsentScope.

        Metadata of the consent resources that enforce the consent scope's access.

        :param enforcing_consents: The enforcing_consents of this ExplainDataAccessConsentScope.
        :type enforcing_consents: List[ExplainDataAccessConsentInfo]
        """

        self._enforcing_consents = enforcing_consents

    @property
    def exceptions(self):
        """Gets the exceptions of this ExplainDataAccessConsentScope.

        Other consent scopes that created exceptions within this scope.

        :return: The exceptions of this ExplainDataAccessConsentScope.
        :rtype: List[ExplainDataAccessConsentScope]
        """
        return self._exceptions

    @exceptions.setter
    def exceptions(self, exceptions):
        """Sets the exceptions of this ExplainDataAccessConsentScope.

        Other consent scopes that created exceptions within this scope.

        :param exceptions: The exceptions of this ExplainDataAccessConsentScope.
        :type exceptions: List[ExplainDataAccessConsentScope]
        """

        self._exceptions = exceptions
