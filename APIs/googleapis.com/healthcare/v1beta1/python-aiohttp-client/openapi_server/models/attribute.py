# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_definition_id: str=None, values: List[str]=None):
        """Attribute - a model defined in OpenAPI

        :param attribute_definition_id: The attribute_definition_id of this Attribute.
        :param values: The values of this Attribute.
        """
        self.openapi_types = {
            'attribute_definition_id': str,
            'values': List[str]
        }

        self.attribute_map = {
            'attribute_definition_id': 'attributeDefinitionId',
            'values': 'values'
        }

        self._attribute_definition_id = attribute_definition_id
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attribute of this Attribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_definition_id(self):
        """Gets the attribute_definition_id of this Attribute.

        Indicates the name of an attribute defined in the consent store.

        :return: The attribute_definition_id of this Attribute.
        :rtype: str
        """
        return self._attribute_definition_id

    @attribute_definition_id.setter
    def attribute_definition_id(self, attribute_definition_id):
        """Sets the attribute_definition_id of this Attribute.

        Indicates the name of an attribute defined in the consent store.

        :param attribute_definition_id: The attribute_definition_id of this Attribute.
        :type attribute_definition_id: str
        """

        self._attribute_definition_id = attribute_definition_id

    @property
    def values(self):
        """Gets the values of this Attribute.

        The value of the attribute. Must be an acceptable value as defined in the consent store. For example, if the consent store defines \"data type\" with acceptable values \"questionnaire\" and \"step-count\", when the attribute name is data type, this field must contain one of those values.

        :return: The values of this Attribute.
        :rtype: List[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Attribute.

        The value of the attribute. Must be an acceptable value as defined in the consent store. For example, if the consent store defines \"data type\" with acceptable values \"questionnaire\" and \"step-count\", when the attribute name is data type, this field must contain one of those values.

        :param values: The values of this Attribute.
        :type values: List[str]
        """

        self._values = values
