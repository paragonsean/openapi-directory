# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_healthcare_v1beta1_dicom_stream_config import GoogleCloudHealthcareV1beta1DicomStreamConfig
from openapi_server.models.notification_config import NotificationConfig
from openapi_server import util


class DicomStore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labels: Dict[str, str]=None, name: str=None, notification_config: NotificationConfig=None, stream_configs: List[GoogleCloudHealthcareV1beta1DicomStreamConfig]=None):
        """DicomStore - a model defined in OpenAPI

        :param labels: The labels of this DicomStore.
        :param name: The name of this DicomStore.
        :param notification_config: The notification_config of this DicomStore.
        :param stream_configs: The stream_configs of this DicomStore.
        """
        self.openapi_types = {
            'labels': Dict[str, str],
            'name': str,
            'notification_config': NotificationConfig,
            'stream_configs': List[GoogleCloudHealthcareV1beta1DicomStreamConfig]
        }

        self.attribute_map = {
            'labels': 'labels',
            'name': 'name',
            'notification_config': 'notificationConfig',
            'stream_configs': 'streamConfigs'
        }

        self._labels = labels
        self._name = name
        self._notification_config = notification_config
        self._stream_configs = stream_configs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DicomStore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DicomStore of this DicomStore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labels(self):
        """Gets the labels of this DicomStore.

        User-supplied key-value pairs used to organize DICOM stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.

        :return: The labels of this DicomStore.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this DicomStore.

        User-supplied key-value pairs used to organize DICOM stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.

        :param labels: The labels of this DicomStore.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this DicomStore.

        Identifier. Resource name of the DICOM store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.

        :return: The name of this DicomStore.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DicomStore.

        Identifier. Resource name of the DICOM store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.

        :param name: The name of this DicomStore.
        :type name: str
        """

        self._name = name

    @property
    def notification_config(self):
        """Gets the notification_config of this DicomStore.


        :return: The notification_config of this DicomStore.
        :rtype: NotificationConfig
        """
        return self._notification_config

    @notification_config.setter
    def notification_config(self, notification_config):
        """Sets the notification_config of this DicomStore.


        :param notification_config: The notification_config of this DicomStore.
        :type notification_config: NotificationConfig
        """

        self._notification_config = notification_config

    @property
    def stream_configs(self):
        """Gets the stream_configs of this DicomStore.

        Optional. A list of streaming configs used to configure the destination of streaming exports for every DICOM instance insertion in this DICOM store. After a new config is added to `stream_configs`, DICOM instance insertions are streamed to the new destination. When a config is removed from `stream_configs`, the server stops streaming to that destination. Each config must contain a unique destination.

        :return: The stream_configs of this DicomStore.
        :rtype: List[GoogleCloudHealthcareV1beta1DicomStreamConfig]
        """
        return self._stream_configs

    @stream_configs.setter
    def stream_configs(self, stream_configs):
        """Sets the stream_configs of this DicomStore.

        Optional. A list of streaming configs used to configure the destination of streaming exports for every DICOM instance insertion in this DICOM store. After a new config is added to `stream_configs`, DICOM instance insertions are streamed to the new destination. When a config is removed from `stream_configs`, the server stops streaming to that destination. Each config must contain a unique destination.

        :param stream_configs: The stream_configs of this DicomStore.
        :type stream_configs: List[GoogleCloudHealthcareV1beta1DicomStreamConfig]
        """

        self._stream_configs = stream_configs
