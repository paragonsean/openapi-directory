# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consent_list import ConsentList
from openapi_server import util


class CheckDataAccessRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consent_list: ConsentList=None, data_id: str=None, request_attributes: Dict[str, str]=None, response_view: str=None):
        """CheckDataAccessRequest - a model defined in OpenAPI

        :param consent_list: The consent_list of this CheckDataAccessRequest.
        :param data_id: The data_id of this CheckDataAccessRequest.
        :param request_attributes: The request_attributes of this CheckDataAccessRequest.
        :param response_view: The response_view of this CheckDataAccessRequest.
        """
        self.openapi_types = {
            'consent_list': ConsentList,
            'data_id': str,
            'request_attributes': Dict[str, str],
            'response_view': str
        }

        self.attribute_map = {
            'consent_list': 'consentList',
            'data_id': 'dataId',
            'request_attributes': 'requestAttributes',
            'response_view': 'responseView'
        }

        self._consent_list = consent_list
        self._data_id = data_id
        self._request_attributes = request_attributes
        self._response_view = response_view

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckDataAccessRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckDataAccessRequest of this CheckDataAccessRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consent_list(self):
        """Gets the consent_list of this CheckDataAccessRequest.


        :return: The consent_list of this CheckDataAccessRequest.
        :rtype: ConsentList
        """
        return self._consent_list

    @consent_list.setter
    def consent_list(self, consent_list):
        """Sets the consent_list of this CheckDataAccessRequest.


        :param consent_list: The consent_list of this CheckDataAccessRequest.
        :type consent_list: ConsentList
        """

        self._consent_list = consent_list

    @property
    def data_id(self):
        """Gets the data_id of this CheckDataAccessRequest.

        Required. The unique identifier of the resource to check access for. This identifier must correspond to a User data mapping in the given consent store.

        :return: The data_id of this CheckDataAccessRequest.
        :rtype: str
        """
        return self._data_id

    @data_id.setter
    def data_id(self, data_id):
        """Sets the data_id of this CheckDataAccessRequest.

        Required. The unique identifier of the resource to check access for. This identifier must correspond to a User data mapping in the given consent store.

        :param data_id: The data_id of this CheckDataAccessRequest.
        :type data_id: str
        """

        self._data_id = data_id

    @property
    def request_attributes(self):
        """Gets the request_attributes of this CheckDataAccessRequest.

        The values of request attributes associated with this access request.

        :return: The request_attributes of this CheckDataAccessRequest.
        :rtype: Dict[str, str]
        """
        return self._request_attributes

    @request_attributes.setter
    def request_attributes(self, request_attributes):
        """Sets the request_attributes of this CheckDataAccessRequest.

        The values of request attributes associated with this access request.

        :param request_attributes: The request_attributes of this CheckDataAccessRequest.
        :type request_attributes: Dict[str, str]
        """

        self._request_attributes = request_attributes

    @property
    def response_view(self):
        """Gets the response_view of this CheckDataAccessRequest.

        Optional. The view for CheckDataAccessResponse. If unspecified, defaults to `BASIC` and returns `consented` as `TRUE` or `FALSE`.

        :return: The response_view of this CheckDataAccessRequest.
        :rtype: str
        """
        return self._response_view

    @response_view.setter
    def response_view(self, response_view):
        """Sets the response_view of this CheckDataAccessRequest.

        Optional. The view for CheckDataAccessResponse. If unspecified, defaults to `BASIC` and returns `consented` as `TRUE` or `FALSE`.

        :param response_view: The response_view of this CheckDataAccessRequest.
        :type response_view: str
        """
        allowed_values = ["RESPONSE_VIEW_UNSPECIFIED", "BASIC", "FULL"]  # noqa: E501
        if response_view not in allowed_values:
            raise ValueError(
                "Invalid value for `response_view` ({0}), must be one of {1}"
                .format(response_view, allowed_values)
            )

        self._response_view = response_view
