# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConsentAccessorScope(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actor: str=None, environment: str=None, purpose: str=None):
        """ConsentAccessorScope - a model defined in OpenAPI

        :param actor: The actor of this ConsentAccessorScope.
        :param environment: The environment of this ConsentAccessorScope.
        :param purpose: The purpose of this ConsentAccessorScope.
        """
        self.openapi_types = {
            'actor': str,
            'environment': str,
            'purpose': str
        }

        self.attribute_map = {
            'actor': 'actor',
            'environment': 'environment',
            'purpose': 'purpose'
        }

        self._actor = actor
        self._environment = environment
        self._purpose = purpose

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsentAccessorScope':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsentAccessorScope of this ConsentAccessorScope.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actor(self):
        """Gets the actor of this ConsentAccessorScope.

        An individual, group, or access role that identifies the accessor or a characteristic of the accessor. This can be a resource ID (such as `{resourceType}/{id}`) or an external URI. This value must be present.

        :return: The actor of this ConsentAccessorScope.
        :rtype: str
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this ConsentAccessorScope.

        An individual, group, or access role that identifies the accessor or a characteristic of the accessor. This can be a resource ID (such as `{resourceType}/{id}`) or an external URI. This value must be present.

        :param actor: The actor of this ConsentAccessorScope.
        :type actor: str
        """

        self._actor = actor

    @property
    def environment(self):
        """Gets the environment of this ConsentAccessorScope.

        An abstract identifier that describes the environment or conditions under which the accessor is acting. Can be “*” if it applies to all environments.

        :return: The environment of this ConsentAccessorScope.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this ConsentAccessorScope.

        An abstract identifier that describes the environment or conditions under which the accessor is acting. Can be “*” if it applies to all environments.

        :param environment: The environment of this ConsentAccessorScope.
        :type environment: str
        """

        self._environment = environment

    @property
    def purpose(self):
        """Gets the purpose of this ConsentAccessorScope.

        The intent of data use. Can be “*” if it applies to all purposes.

        :return: The purpose of this ConsentAccessorScope.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this ConsentAccessorScope.

        The intent of data use. Can be “*” if it applies to all purposes.

        :param purpose: The purpose of this ConsentAccessorScope.
        :type purpose: str
        """

        self._purpose = purpose
