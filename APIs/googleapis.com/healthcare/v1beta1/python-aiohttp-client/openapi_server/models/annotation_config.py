# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnnotationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_store_name: str=None, store_quote: bool=None):
        """AnnotationConfig - a model defined in OpenAPI

        :param annotation_store_name: The annotation_store_name of this AnnotationConfig.
        :param store_quote: The store_quote of this AnnotationConfig.
        """
        self.openapi_types = {
            'annotation_store_name': str,
            'store_quote': bool
        }

        self.attribute_map = {
            'annotation_store_name': 'annotationStoreName',
            'store_quote': 'storeQuote'
        }

        self._annotation_store_name = annotation_store_name
        self._store_quote = store_quote

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnnotationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnnotationConfig of this AnnotationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_store_name(self):
        """Gets the annotation_store_name of this AnnotationConfig.

        The name of the annotation store, in the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`). * The destination annotation store must be in the same project as the source data. De-identifying data across multiple projects is not supported. * The destination annotation store must exist when using DeidentifyDicomStore or DeidentifyFhirStore. DeidentifyDataset automatically creates the destination annotation store.

        :return: The annotation_store_name of this AnnotationConfig.
        :rtype: str
        """
        return self._annotation_store_name

    @annotation_store_name.setter
    def annotation_store_name(self, annotation_store_name):
        """Sets the annotation_store_name of this AnnotationConfig.

        The name of the annotation store, in the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`). * The destination annotation store must be in the same project as the source data. De-identifying data across multiple projects is not supported. * The destination annotation store must exist when using DeidentifyDicomStore or DeidentifyFhirStore. DeidentifyDataset automatically creates the destination annotation store.

        :param annotation_store_name: The annotation_store_name of this AnnotationConfig.
        :type annotation_store_name: str
        """

        self._annotation_store_name = annotation_store_name

    @property
    def store_quote(self):
        """Gets the store_quote of this AnnotationConfig.

        If set to true, the sensitive texts are included in SensitiveTextAnnotation of Annotation.

        :return: The store_quote of this AnnotationConfig.
        :rtype: bool
        """
        return self._store_quote

    @store_quote.setter
    def store_quote(self, store_quote):
        """Sets the store_quote of this AnnotationConfig.

        If set to true, the sensitive texts are included in SensitiveTextAnnotation of Annotation.

        :param store_quote: The store_quote of this AnnotationConfig.
        :type store_quote: bool
        """

        self._store_quote = store_quote
