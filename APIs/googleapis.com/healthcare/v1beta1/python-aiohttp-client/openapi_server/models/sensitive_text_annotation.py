# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.detail import Detail
from openapi_server import util


class SensitiveTextAnnotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: Dict[str, Detail]=None):
        """SensitiveTextAnnotation - a model defined in OpenAPI

        :param details: The details of this SensitiveTextAnnotation.
        """
        self.openapi_types = {
            'details': Dict[str, Detail]
        }

        self.attribute_map = {
            'details': 'details'
        }

        self._details = details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SensitiveTextAnnotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SensitiveTextAnnotation of this SensitiveTextAnnotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this SensitiveTextAnnotation.

        Maps from a resource slice. For example, FHIR resource field path to a set of sensitive text findings. For example, Appointment.Narrative text1 --> {findings_1, findings_2, findings_3}

        :return: The details of this SensitiveTextAnnotation.
        :rtype: Dict[str, Detail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this SensitiveTextAnnotation.

        Maps from a resource slice. For example, FHIR resource field path to a set of sensitive text findings. For example, Appointment.Narrative text1 --> {findings_1, findings_2, findings_3}

        :param details: The details of this SensitiveTextAnnotation.
        :type details: Dict[str, Detail]
        """

        self._details = details
