# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity import Entity
from openapi_server.models.entity_mention import EntityMention
from openapi_server.models.entity_mention_relationship import EntityMentionRelationship
from openapi_server import util


class AnalyzeEntitiesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entities: List[Entity]=None, entity_mentions: List[EntityMention]=None, fhir_bundle: str=None, relationships: List[EntityMentionRelationship]=None):
        """AnalyzeEntitiesResponse - a model defined in OpenAPI

        :param entities: The entities of this AnalyzeEntitiesResponse.
        :param entity_mentions: The entity_mentions of this AnalyzeEntitiesResponse.
        :param fhir_bundle: The fhir_bundle of this AnalyzeEntitiesResponse.
        :param relationships: The relationships of this AnalyzeEntitiesResponse.
        """
        self.openapi_types = {
            'entities': List[Entity],
            'entity_mentions': List[EntityMention],
            'fhir_bundle': str,
            'relationships': List[EntityMentionRelationship]
        }

        self.attribute_map = {
            'entities': 'entities',
            'entity_mentions': 'entityMentions',
            'fhir_bundle': 'fhirBundle',
            'relationships': 'relationships'
        }

        self._entities = entities
        self._entity_mentions = entity_mentions
        self._fhir_bundle = fhir_bundle
        self._relationships = relationships

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyzeEntitiesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalyzeEntitiesResponse of this AnalyzeEntitiesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entities(self):
        """Gets the entities of this AnalyzeEntitiesResponse.

        The union of all the candidate entities that the entity_mentions in this response could link to. These are UMLS concepts or normalized mention content.

        :return: The entities of this AnalyzeEntitiesResponse.
        :rtype: List[Entity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this AnalyzeEntitiesResponse.

        The union of all the candidate entities that the entity_mentions in this response could link to. These are UMLS concepts or normalized mention content.

        :param entities: The entities of this AnalyzeEntitiesResponse.
        :type entities: List[Entity]
        """

        self._entities = entities

    @property
    def entity_mentions(self):
        """Gets the entity_mentions of this AnalyzeEntitiesResponse.

        The `entity_mentions` field contains all the annotated medical entities that were mentioned in the provided document.

        :return: The entity_mentions of this AnalyzeEntitiesResponse.
        :rtype: List[EntityMention]
        """
        return self._entity_mentions

    @entity_mentions.setter
    def entity_mentions(self, entity_mentions):
        """Sets the entity_mentions of this AnalyzeEntitiesResponse.

        The `entity_mentions` field contains all the annotated medical entities that were mentioned in the provided document.

        :param entity_mentions: The entity_mentions of this AnalyzeEntitiesResponse.
        :type entity_mentions: List[EntityMention]
        """

        self._entity_mentions = entity_mentions

    @property
    def fhir_bundle(self):
        """Gets the fhir_bundle of this AnalyzeEntitiesResponse.

        The FHIR bundle ([`R4`](http://hl7.org/fhir/R4/bundle.html)) that includes all the entities, the entity mentions, and the relationships in JSON format.

        :return: The fhir_bundle of this AnalyzeEntitiesResponse.
        :rtype: str
        """
        return self._fhir_bundle

    @fhir_bundle.setter
    def fhir_bundle(self, fhir_bundle):
        """Sets the fhir_bundle of this AnalyzeEntitiesResponse.

        The FHIR bundle ([`R4`](http://hl7.org/fhir/R4/bundle.html)) that includes all the entities, the entity mentions, and the relationships in JSON format.

        :param fhir_bundle: The fhir_bundle of this AnalyzeEntitiesResponse.
        :type fhir_bundle: str
        """

        self._fhir_bundle = fhir_bundle

    @property
    def relationships(self):
        """Gets the relationships of this AnalyzeEntitiesResponse.

        relationships contains all the binary relationships that were identified between entity mentions within the provided document.

        :return: The relationships of this AnalyzeEntitiesResponse.
        :rtype: List[EntityMentionRelationship]
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships):
        """Sets the relationships of this AnalyzeEntitiesResponse.

        relationships contains all the binary relationships that were identified between entity mentions within the provided document.

        :param relationships: The relationships of this AnalyzeEntitiesResponse.
        :type relationships: List[EntityMentionRelationship]
        """

        self._relationships = relationships
