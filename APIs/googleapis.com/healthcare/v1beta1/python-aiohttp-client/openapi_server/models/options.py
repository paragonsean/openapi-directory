# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_config import ImageConfig
from openapi_server import util


class Options(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clean_descriptors: object=None, clean_image: ImageConfig=None, primary_ids: str=None):
        """Options - a model defined in OpenAPI

        :param clean_descriptors: The clean_descriptors of this Options.
        :param clean_image: The clean_image of this Options.
        :param primary_ids: The primary_ids of this Options.
        """
        self.openapi_types = {
            'clean_descriptors': object,
            'clean_image': ImageConfig,
            'primary_ids': str
        }

        self.attribute_map = {
            'clean_descriptors': 'cleanDescriptors',
            'clean_image': 'cleanImage',
            'primary_ids': 'primaryIds'
        }

        self._clean_descriptors = clean_descriptors
        self._clean_image = clean_image
        self._primary_ids = primary_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Options':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Options of this Options.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clean_descriptors(self):
        """Gets the clean_descriptors of this Options.

        This option is based on the DICOM Standard's [Clean Descriptors Option](http://dicom.nema.org/medical/dicom/2018e/output/chtml/part15/sect_E.3.5.html), and the `CleanText` `Action` is applied to all the specified fields. When cleaning text, the process attempts to transform phrases matching any of the tags marked for removal (action codes D, Z, X, and U) in the [Basic Profile](http://dicom.nema.org/medical/dicom/2018e/output/chtml/part15/chapter_E.html). These contextual phrases are replaced with the token \"[CTX]\". This option uses an additional infoType during inspection.

        :return: The clean_descriptors of this Options.
        :rtype: object
        """
        return self._clean_descriptors

    @clean_descriptors.setter
    def clean_descriptors(self, clean_descriptors):
        """Sets the clean_descriptors of this Options.

        This option is based on the DICOM Standard's [Clean Descriptors Option](http://dicom.nema.org/medical/dicom/2018e/output/chtml/part15/sect_E.3.5.html), and the `CleanText` `Action` is applied to all the specified fields. When cleaning text, the process attempts to transform phrases matching any of the tags marked for removal (action codes D, Z, X, and U) in the [Basic Profile](http://dicom.nema.org/medical/dicom/2018e/output/chtml/part15/chapter_E.html). These contextual phrases are replaced with the token \"[CTX]\". This option uses an additional infoType during inspection.

        :param clean_descriptors: The clean_descriptors of this Options.
        :type clean_descriptors: object
        """

        self._clean_descriptors = clean_descriptors

    @property
    def clean_image(self):
        """Gets the clean_image of this Options.


        :return: The clean_image of this Options.
        :rtype: ImageConfig
        """
        return self._clean_image

    @clean_image.setter
    def clean_image(self, clean_image):
        """Sets the clean_image of this Options.


        :param clean_image: The clean_image of this Options.
        :type clean_image: ImageConfig
        """

        self._clean_image = clean_image

    @property
    def primary_ids(self):
        """Gets the primary_ids of this Options.

        Set `Action` for [`StudyInstanceUID`, `SeriesInstanceUID`, `SOPInstanceUID`, and `MediaStorageSOPInstanceUID`](http://dicom.nema.org/medical/dicom/2018e/output/chtml/part06/chapter_6.html).

        :return: The primary_ids of this Options.
        :rtype: str
        """
        return self._primary_ids

    @primary_ids.setter
    def primary_ids(self, primary_ids):
        """Sets the primary_ids of this Options.

        Set `Action` for [`StudyInstanceUID`, `SeriesInstanceUID`, `SOPInstanceUID`, and `MediaStorageSOPInstanceUID`](http://dicom.nema.org/medical/dicom/2018e/output/chtml/part06/chapter_6.html).

        :param primary_ids: The primary_ids of this Options.
        :type primary_ids: str
        """
        allowed_values = ["PRIMARY_IDS_OPTION_UNSPECIFIED", "KEEP", "REGEN"]  # noqa: E501
        if primary_ids not in allowed_values:
            raise ValueError(
                "Invalid value for `primary_ids` ({0}), must be one of {1}"
                .format(primary_ids, allowed_values)
            )

        self._primary_ids = primary_ids
