# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bounding_poly import BoundingPoly
from openapi_server import util


class ImageAnnotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bounding_polys: List[BoundingPoly]=None, frame_index: int=None):
        """ImageAnnotation - a model defined in OpenAPI

        :param bounding_polys: The bounding_polys of this ImageAnnotation.
        :param frame_index: The frame_index of this ImageAnnotation.
        """
        self.openapi_types = {
            'bounding_polys': List[BoundingPoly],
            'frame_index': int
        }

        self.attribute_map = {
            'bounding_polys': 'boundingPolys',
            'frame_index': 'frameIndex'
        }

        self._bounding_polys = bounding_polys
        self._frame_index = frame_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageAnnotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageAnnotation of this ImageAnnotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bounding_polys(self):
        """Gets the bounding_polys of this ImageAnnotation.

        The list of polygons outlining the sensitive regions in the image.

        :return: The bounding_polys of this ImageAnnotation.
        :rtype: List[BoundingPoly]
        """
        return self._bounding_polys

    @bounding_polys.setter
    def bounding_polys(self, bounding_polys):
        """Sets the bounding_polys of this ImageAnnotation.

        The list of polygons outlining the sensitive regions in the image.

        :param bounding_polys: The bounding_polys of this ImageAnnotation.
        :type bounding_polys: List[BoundingPoly]
        """

        self._bounding_polys = bounding_polys

    @property
    def frame_index(self):
        """Gets the frame_index of this ImageAnnotation.

        0-based index of the image frame. For example, an image frame in a DICOM instance.

        :return: The frame_index of this ImageAnnotation.
        :rtype: int
        """
        return self._frame_index

    @frame_index.setter
    def frame_index(self, frame_index):
        """Sets the frame_index of this ImageAnnotation.

        0-based index of the image frame. For example, an image frame in a DICOM instance.

        :param frame_index: The frame_index of this ImageAnnotation.
        :type frame_index: int
        """

        self._frame_index = frame_index
