# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
from openapi_server.models.options import Options
from openapi_server import util


class DicomTagConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[Action]=None, options: Options=None, profile_type: str=None):
        """DicomTagConfig - a model defined in OpenAPI

        :param actions: The actions of this DicomTagConfig.
        :param options: The options of this DicomTagConfig.
        :param profile_type: The profile_type of this DicomTagConfig.
        """
        self.openapi_types = {
            'actions': List[Action],
            'options': Options,
            'profile_type': str
        }

        self.attribute_map = {
            'actions': 'actions',
            'options': 'options',
            'profile_type': 'profileType'
        }

        self._actions = actions
        self._options = options
        self._profile_type = profile_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DicomTagConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DicomTagConfig of this DicomTagConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this DicomTagConfig.

        Specifies custom tag selections and `Actions` to apply to them. Overrides `options` and `profile`. Conflicting `Actions` are applied in the order given.

        :return: The actions of this DicomTagConfig.
        :rtype: List[Action]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this DicomTagConfig.

        Specifies custom tag selections and `Actions` to apply to them. Overrides `options` and `profile`. Conflicting `Actions` are applied in the order given.

        :param actions: The actions of this DicomTagConfig.
        :type actions: List[Action]
        """

        self._actions = actions

    @property
    def options(self):
        """Gets the options of this DicomTagConfig.


        :return: The options of this DicomTagConfig.
        :rtype: Options
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this DicomTagConfig.


        :param options: The options of this DicomTagConfig.
        :type options: Options
        """

        self._options = options

    @property
    def profile_type(self):
        """Gets the profile_type of this DicomTagConfig.

        Base profile type for handling DICOM tags.

        :return: The profile_type of this DicomTagConfig.
        :rtype: str
        """
        return self._profile_type

    @profile_type.setter
    def profile_type(self, profile_type):
        """Sets the profile_type of this DicomTagConfig.

        Base profile type for handling DICOM tags.

        :param profile_type: The profile_type of this DicomTagConfig.
        :type profile_type: str
        """
        allowed_values = ["PROFILE_TYPE_UNSPECIFIED", "MINIMAL_KEEP_LIST_PROFILE", "ATTRIBUTE_CONFIDENTIALITY_BASIC_PROFILE", "KEEP_ALL_PROFILE", "DEIDENTIFY_TAG_CONTENTS"]  # noqa: E501
        if profile_type not in allowed_values:
            raise ValueError(
                "Invalid value for `profile_type` ({0}), must be one of {1}"
                .format(profile_type, allowed_values)
            )

        self._profile_type = profile_type
