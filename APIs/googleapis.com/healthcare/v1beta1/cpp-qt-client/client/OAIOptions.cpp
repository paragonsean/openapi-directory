/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOptions::OAIOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOptions::OAIOptions() {
    this->initializeModel();
}

OAIOptions::~OAIOptions() {}

void OAIOptions::initializeModel() {

    m_clean_descriptors_isSet = false;
    m_clean_descriptors_isValid = false;

    m_clean_image_isSet = false;
    m_clean_image_isValid = false;

    m_primary_ids_isSet = false;
    m_primary_ids_isValid = false;
}

void OAIOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOptions::fromJsonObject(QJsonObject json) {

    m_clean_descriptors_isValid = ::OpenAPI::fromJsonValue(m_clean_descriptors, json[QString("cleanDescriptors")]);
    m_clean_descriptors_isSet = !json[QString("cleanDescriptors")].isNull() && m_clean_descriptors_isValid;

    m_clean_image_isValid = ::OpenAPI::fromJsonValue(m_clean_image, json[QString("cleanImage")]);
    m_clean_image_isSet = !json[QString("cleanImage")].isNull() && m_clean_image_isValid;

    m_primary_ids_isValid = ::OpenAPI::fromJsonValue(m_primary_ids, json[QString("primaryIds")]);
    m_primary_ids_isSet = !json[QString("primaryIds")].isNull() && m_primary_ids_isValid;
}

QString OAIOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_clean_descriptors_isSet) {
        obj.insert(QString("cleanDescriptors"), ::OpenAPI::toJsonValue(m_clean_descriptors));
    }
    if (m_clean_image.isSet()) {
        obj.insert(QString("cleanImage"), ::OpenAPI::toJsonValue(m_clean_image));
    }
    if (m_primary_ids_isSet) {
        obj.insert(QString("primaryIds"), ::OpenAPI::toJsonValue(m_primary_ids));
    }
    return obj;
}

OAIObject OAIOptions::getCleanDescriptors() const {
    return m_clean_descriptors;
}
void OAIOptions::setCleanDescriptors(const OAIObject &clean_descriptors) {
    m_clean_descriptors = clean_descriptors;
    m_clean_descriptors_isSet = true;
}

bool OAIOptions::is_clean_descriptors_Set() const{
    return m_clean_descriptors_isSet;
}

bool OAIOptions::is_clean_descriptors_Valid() const{
    return m_clean_descriptors_isValid;
}

OAIImageConfig OAIOptions::getCleanImage() const {
    return m_clean_image;
}
void OAIOptions::setCleanImage(const OAIImageConfig &clean_image) {
    m_clean_image = clean_image;
    m_clean_image_isSet = true;
}

bool OAIOptions::is_clean_image_Set() const{
    return m_clean_image_isSet;
}

bool OAIOptions::is_clean_image_Valid() const{
    return m_clean_image_isValid;
}

QString OAIOptions::getPrimaryIds() const {
    return m_primary_ids;
}
void OAIOptions::setPrimaryIds(const QString &primary_ids) {
    m_primary_ids = primary_ids;
    m_primary_ids_isSet = true;
}

bool OAIOptions::is_primary_ids_Set() const{
    return m_primary_ids_isSet;
}

bool OAIOptions::is_primary_ids_Valid() const{
    return m_primary_ids_isValid;
}

bool OAIOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clean_descriptors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clean_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_ids_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
