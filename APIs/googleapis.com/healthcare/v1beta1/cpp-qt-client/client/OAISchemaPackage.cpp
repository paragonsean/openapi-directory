/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchemaPackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchemaPackage::OAISchemaPackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchemaPackage::OAISchemaPackage() {
    this->initializeModel();
}

OAISchemaPackage::~OAISchemaPackage() {}

void OAISchemaPackage::initializeModel() {

    m_ignore_min_occurs_isSet = false;
    m_ignore_min_occurs_isValid = false;

    m_schemas_isSet = false;
    m_schemas_isValid = false;

    m_schematized_parsing_type_isSet = false;
    m_schematized_parsing_type_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;

    m_unexpected_segment_handling_isSet = false;
    m_unexpected_segment_handling_isValid = false;
}

void OAISchemaPackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchemaPackage::fromJsonObject(QJsonObject json) {

    m_ignore_min_occurs_isValid = ::OpenAPI::fromJsonValue(m_ignore_min_occurs, json[QString("ignoreMinOccurs")]);
    m_ignore_min_occurs_isSet = !json[QString("ignoreMinOccurs")].isNull() && m_ignore_min_occurs_isValid;

    m_schemas_isValid = ::OpenAPI::fromJsonValue(m_schemas, json[QString("schemas")]);
    m_schemas_isSet = !json[QString("schemas")].isNull() && m_schemas_isValid;

    m_schematized_parsing_type_isValid = ::OpenAPI::fromJsonValue(m_schematized_parsing_type, json[QString("schematizedParsingType")]);
    m_schematized_parsing_type_isSet = !json[QString("schematizedParsingType")].isNull() && m_schematized_parsing_type_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;

    m_unexpected_segment_handling_isValid = ::OpenAPI::fromJsonValue(m_unexpected_segment_handling, json[QString("unexpectedSegmentHandling")]);
    m_unexpected_segment_handling_isSet = !json[QString("unexpectedSegmentHandling")].isNull() && m_unexpected_segment_handling_isValid;
}

QString OAISchemaPackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchemaPackage::asJsonObject() const {
    QJsonObject obj;
    if (m_ignore_min_occurs_isSet) {
        obj.insert(QString("ignoreMinOccurs"), ::OpenAPI::toJsonValue(m_ignore_min_occurs));
    }
    if (m_schemas.size() > 0) {
        obj.insert(QString("schemas"), ::OpenAPI::toJsonValue(m_schemas));
    }
    if (m_schematized_parsing_type_isSet) {
        obj.insert(QString("schematizedParsingType"), ::OpenAPI::toJsonValue(m_schematized_parsing_type));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    if (m_unexpected_segment_handling_isSet) {
        obj.insert(QString("unexpectedSegmentHandling"), ::OpenAPI::toJsonValue(m_unexpected_segment_handling));
    }
    return obj;
}

bool OAISchemaPackage::isIgnoreMinOccurs() const {
    return m_ignore_min_occurs;
}
void OAISchemaPackage::setIgnoreMinOccurs(const bool &ignore_min_occurs) {
    m_ignore_min_occurs = ignore_min_occurs;
    m_ignore_min_occurs_isSet = true;
}

bool OAISchemaPackage::is_ignore_min_occurs_Set() const{
    return m_ignore_min_occurs_isSet;
}

bool OAISchemaPackage::is_ignore_min_occurs_Valid() const{
    return m_ignore_min_occurs_isValid;
}

QList<OAIHl7SchemaConfig> OAISchemaPackage::getSchemas() const {
    return m_schemas;
}
void OAISchemaPackage::setSchemas(const QList<OAIHl7SchemaConfig> &schemas) {
    m_schemas = schemas;
    m_schemas_isSet = true;
}

bool OAISchemaPackage::is_schemas_Set() const{
    return m_schemas_isSet;
}

bool OAISchemaPackage::is_schemas_Valid() const{
    return m_schemas_isValid;
}

QString OAISchemaPackage::getSchematizedParsingType() const {
    return m_schematized_parsing_type;
}
void OAISchemaPackage::setSchematizedParsingType(const QString &schematized_parsing_type) {
    m_schematized_parsing_type = schematized_parsing_type;
    m_schematized_parsing_type_isSet = true;
}

bool OAISchemaPackage::is_schematized_parsing_type_Set() const{
    return m_schematized_parsing_type_isSet;
}

bool OAISchemaPackage::is_schematized_parsing_type_Valid() const{
    return m_schematized_parsing_type_isValid;
}

QList<OAIHl7TypesConfig> OAISchemaPackage::getTypes() const {
    return m_types;
}
void OAISchemaPackage::setTypes(const QList<OAIHl7TypesConfig> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAISchemaPackage::is_types_Set() const{
    return m_types_isSet;
}

bool OAISchemaPackage::is_types_Valid() const{
    return m_types_isValid;
}

QString OAISchemaPackage::getUnexpectedSegmentHandling() const {
    return m_unexpected_segment_handling;
}
void OAISchemaPackage::setUnexpectedSegmentHandling(const QString &unexpected_segment_handling) {
    m_unexpected_segment_handling = unexpected_segment_handling;
    m_unexpected_segment_handling_isSet = true;
}

bool OAISchemaPackage::is_unexpected_segment_handling_Set() const{
    return m_unexpected_segment_handling_isSet;
}

bool OAISchemaPackage::is_unexpected_segment_handling_Valid() const{
    return m_unexpected_segment_handling_isValid;
}

bool OAISchemaPackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ignore_min_occurs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schemas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schematized_parsing_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unexpected_segment_handling_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchemaPackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
