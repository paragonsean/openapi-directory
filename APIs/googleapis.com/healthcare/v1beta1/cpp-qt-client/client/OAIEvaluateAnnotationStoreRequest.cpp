/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluateAnnotationStoreRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluateAnnotationStoreRequest::OAIEvaluateAnnotationStoreRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluateAnnotationStoreRequest::OAIEvaluateAnnotationStoreRequest() {
    this->initializeModel();
}

OAIEvaluateAnnotationStoreRequest::~OAIEvaluateAnnotationStoreRequest() {}

void OAIEvaluateAnnotationStoreRequest::initializeModel() {

    m_bigquery_destination_isSet = false;
    m_bigquery_destination_isValid = false;

    m_eval_info_type_mapping_isSet = false;
    m_eval_info_type_mapping_isValid = false;

    m_golden_info_type_mapping_isSet = false;
    m_golden_info_type_mapping_isValid = false;

    m_golden_store_isSet = false;
    m_golden_store_isValid = false;

    m_info_type_config_isSet = false;
    m_info_type_config_isValid = false;
}

void OAIEvaluateAnnotationStoreRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluateAnnotationStoreRequest::fromJsonObject(QJsonObject json) {

    m_bigquery_destination_isValid = ::OpenAPI::fromJsonValue(m_bigquery_destination, json[QString("bigqueryDestination")]);
    m_bigquery_destination_isSet = !json[QString("bigqueryDestination")].isNull() && m_bigquery_destination_isValid;

    m_eval_info_type_mapping_isValid = ::OpenAPI::fromJsonValue(m_eval_info_type_mapping, json[QString("evalInfoTypeMapping")]);
    m_eval_info_type_mapping_isSet = !json[QString("evalInfoTypeMapping")].isNull() && m_eval_info_type_mapping_isValid;

    m_golden_info_type_mapping_isValid = ::OpenAPI::fromJsonValue(m_golden_info_type_mapping, json[QString("goldenInfoTypeMapping")]);
    m_golden_info_type_mapping_isSet = !json[QString("goldenInfoTypeMapping")].isNull() && m_golden_info_type_mapping_isValid;

    m_golden_store_isValid = ::OpenAPI::fromJsonValue(m_golden_store, json[QString("goldenStore")]);
    m_golden_store_isSet = !json[QString("goldenStore")].isNull() && m_golden_store_isValid;

    m_info_type_config_isValid = ::OpenAPI::fromJsonValue(m_info_type_config, json[QString("infoTypeConfig")]);
    m_info_type_config_isSet = !json[QString("infoTypeConfig")].isNull() && m_info_type_config_isValid;
}

QString OAIEvaluateAnnotationStoreRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluateAnnotationStoreRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_bigquery_destination.isSet()) {
        obj.insert(QString("bigqueryDestination"), ::OpenAPI::toJsonValue(m_bigquery_destination));
    }
    if (m_eval_info_type_mapping.size() > 0) {
        obj.insert(QString("evalInfoTypeMapping"), ::OpenAPI::toJsonValue(m_eval_info_type_mapping));
    }
    if (m_golden_info_type_mapping.size() > 0) {
        obj.insert(QString("goldenInfoTypeMapping"), ::OpenAPI::toJsonValue(m_golden_info_type_mapping));
    }
    if (m_golden_store_isSet) {
        obj.insert(QString("goldenStore"), ::OpenAPI::toJsonValue(m_golden_store));
    }
    if (m_info_type_config.isSet()) {
        obj.insert(QString("infoTypeConfig"), ::OpenAPI::toJsonValue(m_info_type_config));
    }
    return obj;
}

OAIGoogleCloudHealthcareV1beta1AnnotationBigQueryDestination OAIEvaluateAnnotationStoreRequest::getBigqueryDestination() const {
    return m_bigquery_destination;
}
void OAIEvaluateAnnotationStoreRequest::setBigqueryDestination(const OAIGoogleCloudHealthcareV1beta1AnnotationBigQueryDestination &bigquery_destination) {
    m_bigquery_destination = bigquery_destination;
    m_bigquery_destination_isSet = true;
}

bool OAIEvaluateAnnotationStoreRequest::is_bigquery_destination_Set() const{
    return m_bigquery_destination_isSet;
}

bool OAIEvaluateAnnotationStoreRequest::is_bigquery_destination_Valid() const{
    return m_bigquery_destination_isValid;
}

QMap<QString, QString> OAIEvaluateAnnotationStoreRequest::getEvalInfoTypeMapping() const {
    return m_eval_info_type_mapping;
}
void OAIEvaluateAnnotationStoreRequest::setEvalInfoTypeMapping(const QMap<QString, QString> &eval_info_type_mapping) {
    m_eval_info_type_mapping = eval_info_type_mapping;
    m_eval_info_type_mapping_isSet = true;
}

bool OAIEvaluateAnnotationStoreRequest::is_eval_info_type_mapping_Set() const{
    return m_eval_info_type_mapping_isSet;
}

bool OAIEvaluateAnnotationStoreRequest::is_eval_info_type_mapping_Valid() const{
    return m_eval_info_type_mapping_isValid;
}

QMap<QString, QString> OAIEvaluateAnnotationStoreRequest::getGoldenInfoTypeMapping() const {
    return m_golden_info_type_mapping;
}
void OAIEvaluateAnnotationStoreRequest::setGoldenInfoTypeMapping(const QMap<QString, QString> &golden_info_type_mapping) {
    m_golden_info_type_mapping = golden_info_type_mapping;
    m_golden_info_type_mapping_isSet = true;
}

bool OAIEvaluateAnnotationStoreRequest::is_golden_info_type_mapping_Set() const{
    return m_golden_info_type_mapping_isSet;
}

bool OAIEvaluateAnnotationStoreRequest::is_golden_info_type_mapping_Valid() const{
    return m_golden_info_type_mapping_isValid;
}

QString OAIEvaluateAnnotationStoreRequest::getGoldenStore() const {
    return m_golden_store;
}
void OAIEvaluateAnnotationStoreRequest::setGoldenStore(const QString &golden_store) {
    m_golden_store = golden_store;
    m_golden_store_isSet = true;
}

bool OAIEvaluateAnnotationStoreRequest::is_golden_store_Set() const{
    return m_golden_store_isSet;
}

bool OAIEvaluateAnnotationStoreRequest::is_golden_store_Valid() const{
    return m_golden_store_isValid;
}

OAIInfoTypeConfig OAIEvaluateAnnotationStoreRequest::getInfoTypeConfig() const {
    return m_info_type_config;
}
void OAIEvaluateAnnotationStoreRequest::setInfoTypeConfig(const OAIInfoTypeConfig &info_type_config) {
    m_info_type_config = info_type_config;
    m_info_type_config_isSet = true;
}

bool OAIEvaluateAnnotationStoreRequest::is_info_type_config_Set() const{
    return m_info_type_config_isSet;
}

bool OAIEvaluateAnnotationStoreRequest::is_info_type_config_Valid() const{
    return m_info_type_config_isValid;
}

bool OAIEvaluateAnnotationStoreRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bigquery_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eval_info_type_mapping.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_golden_info_type_mapping.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_golden_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_type_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluateAnnotationStoreRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
