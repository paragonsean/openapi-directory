/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExplainDataAccessConsentScope.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExplainDataAccessConsentScope::OAIExplainDataAccessConsentScope(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExplainDataAccessConsentScope::OAIExplainDataAccessConsentScope() {
    this->initializeModel();
}

OAIExplainDataAccessConsentScope::~OAIExplainDataAccessConsentScope() {}

void OAIExplainDataAccessConsentScope::initializeModel() {

    m_accessor_scope_isSet = false;
    m_accessor_scope_isValid = false;

    m_decision_isSet = false;
    m_decision_isValid = false;

    m_enforcing_consents_isSet = false;
    m_enforcing_consents_isValid = false;

    m_exceptions_isSet = false;
    m_exceptions_isValid = false;
}

void OAIExplainDataAccessConsentScope::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExplainDataAccessConsentScope::fromJsonObject(QJsonObject json) {

    m_accessor_scope_isValid = ::OpenAPI::fromJsonValue(m_accessor_scope, json[QString("accessorScope")]);
    m_accessor_scope_isSet = !json[QString("accessorScope")].isNull() && m_accessor_scope_isValid;

    m_decision_isValid = ::OpenAPI::fromJsonValue(m_decision, json[QString("decision")]);
    m_decision_isSet = !json[QString("decision")].isNull() && m_decision_isValid;

    m_enforcing_consents_isValid = ::OpenAPI::fromJsonValue(m_enforcing_consents, json[QString("enforcingConsents")]);
    m_enforcing_consents_isSet = !json[QString("enforcingConsents")].isNull() && m_enforcing_consents_isValid;

    m_exceptions_isValid = ::OpenAPI::fromJsonValue(m_exceptions, json[QString("exceptions")]);
    m_exceptions_isSet = !json[QString("exceptions")].isNull() && m_exceptions_isValid;
}

QString OAIExplainDataAccessConsentScope::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExplainDataAccessConsentScope::asJsonObject() const {
    QJsonObject obj;
    if (m_accessor_scope.isSet()) {
        obj.insert(QString("accessorScope"), ::OpenAPI::toJsonValue(m_accessor_scope));
    }
    if (m_decision_isSet) {
        obj.insert(QString("decision"), ::OpenAPI::toJsonValue(m_decision));
    }
    if (m_enforcing_consents.size() > 0) {
        obj.insert(QString("enforcingConsents"), ::OpenAPI::toJsonValue(m_enforcing_consents));
    }
    if (m_exceptions.size() > 0) {
        obj.insert(QString("exceptions"), ::OpenAPI::toJsonValue(m_exceptions));
    }
    return obj;
}

OAIConsentAccessorScope OAIExplainDataAccessConsentScope::getAccessorScope() const {
    return m_accessor_scope;
}
void OAIExplainDataAccessConsentScope::setAccessorScope(const OAIConsentAccessorScope &accessor_scope) {
    m_accessor_scope = accessor_scope;
    m_accessor_scope_isSet = true;
}

bool OAIExplainDataAccessConsentScope::is_accessor_scope_Set() const{
    return m_accessor_scope_isSet;
}

bool OAIExplainDataAccessConsentScope::is_accessor_scope_Valid() const{
    return m_accessor_scope_isValid;
}

QString OAIExplainDataAccessConsentScope::getDecision() const {
    return m_decision;
}
void OAIExplainDataAccessConsentScope::setDecision(const QString &decision) {
    m_decision = decision;
    m_decision_isSet = true;
}

bool OAIExplainDataAccessConsentScope::is_decision_Set() const{
    return m_decision_isSet;
}

bool OAIExplainDataAccessConsentScope::is_decision_Valid() const{
    return m_decision_isValid;
}

QList<OAIExplainDataAccessConsentInfo> OAIExplainDataAccessConsentScope::getEnforcingConsents() const {
    return m_enforcing_consents;
}
void OAIExplainDataAccessConsentScope::setEnforcingConsents(const QList<OAIExplainDataAccessConsentInfo> &enforcing_consents) {
    m_enforcing_consents = enforcing_consents;
    m_enforcing_consents_isSet = true;
}

bool OAIExplainDataAccessConsentScope::is_enforcing_consents_Set() const{
    return m_enforcing_consents_isSet;
}

bool OAIExplainDataAccessConsentScope::is_enforcing_consents_Valid() const{
    return m_enforcing_consents_isValid;
}

QList<OAIExplainDataAccessConsentScope> OAIExplainDataAccessConsentScope::getExceptions() const {
    return m_exceptions;
}
void OAIExplainDataAccessConsentScope::setExceptions(const QList<OAIExplainDataAccessConsentScope> &exceptions) {
    m_exceptions = exceptions;
    m_exceptions_isSet = true;
}

bool OAIExplainDataAccessConsentScope::is_exceptions_Set() const{
    return m_exceptions_isSet;
}

bool OAIExplainDataAccessConsentScope::is_exceptions_Valid() const{
    return m_exceptions_isValid;
}

bool OAIExplainDataAccessConsentScope::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accessor_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_decision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforcing_consents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exceptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExplainDataAccessConsentScope::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
