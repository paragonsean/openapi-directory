/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDicomStoreMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDicomStoreMetrics::OAIDicomStoreMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDicomStoreMetrics::OAIDicomStoreMetrics() {
    this->initializeModel();
}

OAIDicomStoreMetrics::~OAIDicomStoreMetrics() {}

void OAIDicomStoreMetrics::initializeModel() {

    m_blob_storage_size_bytes_isSet = false;
    m_blob_storage_size_bytes_isValid = false;

    m_instance_count_isSet = false;
    m_instance_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_series_count_isSet = false;
    m_series_count_isValid = false;

    m_structured_storage_size_bytes_isSet = false;
    m_structured_storage_size_bytes_isValid = false;

    m_study_count_isSet = false;
    m_study_count_isValid = false;
}

void OAIDicomStoreMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDicomStoreMetrics::fromJsonObject(QJsonObject json) {

    m_blob_storage_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_blob_storage_size_bytes, json[QString("blobStorageSizeBytes")]);
    m_blob_storage_size_bytes_isSet = !json[QString("blobStorageSizeBytes")].isNull() && m_blob_storage_size_bytes_isValid;

    m_instance_count_isValid = ::OpenAPI::fromJsonValue(m_instance_count, json[QString("instanceCount")]);
    m_instance_count_isSet = !json[QString("instanceCount")].isNull() && m_instance_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_series_count_isValid = ::OpenAPI::fromJsonValue(m_series_count, json[QString("seriesCount")]);
    m_series_count_isSet = !json[QString("seriesCount")].isNull() && m_series_count_isValid;

    m_structured_storage_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_structured_storage_size_bytes, json[QString("structuredStorageSizeBytes")]);
    m_structured_storage_size_bytes_isSet = !json[QString("structuredStorageSizeBytes")].isNull() && m_structured_storage_size_bytes_isValid;

    m_study_count_isValid = ::OpenAPI::fromJsonValue(m_study_count, json[QString("studyCount")]);
    m_study_count_isSet = !json[QString("studyCount")].isNull() && m_study_count_isValid;
}

QString OAIDicomStoreMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDicomStoreMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_blob_storage_size_bytes_isSet) {
        obj.insert(QString("blobStorageSizeBytes"), ::OpenAPI::toJsonValue(m_blob_storage_size_bytes));
    }
    if (m_instance_count_isSet) {
        obj.insert(QString("instanceCount"), ::OpenAPI::toJsonValue(m_instance_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_series_count_isSet) {
        obj.insert(QString("seriesCount"), ::OpenAPI::toJsonValue(m_series_count));
    }
    if (m_structured_storage_size_bytes_isSet) {
        obj.insert(QString("structuredStorageSizeBytes"), ::OpenAPI::toJsonValue(m_structured_storage_size_bytes));
    }
    if (m_study_count_isSet) {
        obj.insert(QString("studyCount"), ::OpenAPI::toJsonValue(m_study_count));
    }
    return obj;
}

QString OAIDicomStoreMetrics::getBlobStorageSizeBytes() const {
    return m_blob_storage_size_bytes;
}
void OAIDicomStoreMetrics::setBlobStorageSizeBytes(const QString &blob_storage_size_bytes) {
    m_blob_storage_size_bytes = blob_storage_size_bytes;
    m_blob_storage_size_bytes_isSet = true;
}

bool OAIDicomStoreMetrics::is_blob_storage_size_bytes_Set() const{
    return m_blob_storage_size_bytes_isSet;
}

bool OAIDicomStoreMetrics::is_blob_storage_size_bytes_Valid() const{
    return m_blob_storage_size_bytes_isValid;
}

QString OAIDicomStoreMetrics::getInstanceCount() const {
    return m_instance_count;
}
void OAIDicomStoreMetrics::setInstanceCount(const QString &instance_count) {
    m_instance_count = instance_count;
    m_instance_count_isSet = true;
}

bool OAIDicomStoreMetrics::is_instance_count_Set() const{
    return m_instance_count_isSet;
}

bool OAIDicomStoreMetrics::is_instance_count_Valid() const{
    return m_instance_count_isValid;
}

QString OAIDicomStoreMetrics::getName() const {
    return m_name;
}
void OAIDicomStoreMetrics::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDicomStoreMetrics::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDicomStoreMetrics::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDicomStoreMetrics::getSeriesCount() const {
    return m_series_count;
}
void OAIDicomStoreMetrics::setSeriesCount(const QString &series_count) {
    m_series_count = series_count;
    m_series_count_isSet = true;
}

bool OAIDicomStoreMetrics::is_series_count_Set() const{
    return m_series_count_isSet;
}

bool OAIDicomStoreMetrics::is_series_count_Valid() const{
    return m_series_count_isValid;
}

QString OAIDicomStoreMetrics::getStructuredStorageSizeBytes() const {
    return m_structured_storage_size_bytes;
}
void OAIDicomStoreMetrics::setStructuredStorageSizeBytes(const QString &structured_storage_size_bytes) {
    m_structured_storage_size_bytes = structured_storage_size_bytes;
    m_structured_storage_size_bytes_isSet = true;
}

bool OAIDicomStoreMetrics::is_structured_storage_size_bytes_Set() const{
    return m_structured_storage_size_bytes_isSet;
}

bool OAIDicomStoreMetrics::is_structured_storage_size_bytes_Valid() const{
    return m_structured_storage_size_bytes_isValid;
}

QString OAIDicomStoreMetrics::getStudyCount() const {
    return m_study_count;
}
void OAIDicomStoreMetrics::setStudyCount(const QString &study_count) {
    m_study_count = study_count;
    m_study_count_isSet = true;
}

bool OAIDicomStoreMetrics::is_study_count_Set() const{
    return m_study_count_isSet;
}

bool OAIDicomStoreMetrics::is_study_count_Valid() const{
    return m_study_count_isValid;
}

bool OAIDicomStoreMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blob_storage_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_structured_storage_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_study_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDicomStoreMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
