/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportMessagesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportMessagesRequest::OAIExportMessagesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportMessagesRequest::OAIExportMessagesRequest() {
    this->initializeModel();
}

OAIExportMessagesRequest::~OAIExportMessagesRequest() {}

void OAIExportMessagesRequest::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_gcs_destination_isSet = false;
    m_gcs_destination_isValid = false;

    m_pubsub_destination_isSet = false;
    m_pubsub_destination_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIExportMessagesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportMessagesRequest::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_gcs_destination_isValid = ::OpenAPI::fromJsonValue(m_gcs_destination, json[QString("gcsDestination")]);
    m_gcs_destination_isSet = !json[QString("gcsDestination")].isNull() && m_gcs_destination_isValid;

    m_pubsub_destination_isValid = ::OpenAPI::fromJsonValue(m_pubsub_destination, json[QString("pubsubDestination")]);
    m_pubsub_destination_isSet = !json[QString("pubsubDestination")].isNull() && m_pubsub_destination_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIExportMessagesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportMessagesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_gcs_destination.isSet()) {
        obj.insert(QString("gcsDestination"), ::OpenAPI::toJsonValue(m_gcs_destination));
    }
    if (m_pubsub_destination.isSet()) {
        obj.insert(QString("pubsubDestination"), ::OpenAPI::toJsonValue(m_pubsub_destination));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAIExportMessagesRequest::getEndTime() const {
    return m_end_time;
}
void OAIExportMessagesRequest::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIExportMessagesRequest::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIExportMessagesRequest::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIExportMessagesRequest::getFilter() const {
    return m_filter;
}
void OAIExportMessagesRequest::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIExportMessagesRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIExportMessagesRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

OAIGcsDestination OAIExportMessagesRequest::getGcsDestination() const {
    return m_gcs_destination;
}
void OAIExportMessagesRequest::setGcsDestination(const OAIGcsDestination &gcs_destination) {
    m_gcs_destination = gcs_destination;
    m_gcs_destination_isSet = true;
}

bool OAIExportMessagesRequest::is_gcs_destination_Set() const{
    return m_gcs_destination_isSet;
}

bool OAIExportMessagesRequest::is_gcs_destination_Valid() const{
    return m_gcs_destination_isValid;
}

OAIPubsubDestination OAIExportMessagesRequest::getPubsubDestination() const {
    return m_pubsub_destination;
}
void OAIExportMessagesRequest::setPubsubDestination(const OAIPubsubDestination &pubsub_destination) {
    m_pubsub_destination = pubsub_destination;
    m_pubsub_destination_isSet = true;
}

bool OAIExportMessagesRequest::is_pubsub_destination_Set() const{
    return m_pubsub_destination_isSet;
}

bool OAIExportMessagesRequest::is_pubsub_destination_Valid() const{
    return m_pubsub_destination_isValid;
}

QString OAIExportMessagesRequest::getStartTime() const {
    return m_start_time;
}
void OAIExportMessagesRequest::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIExportMessagesRequest::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIExportMessagesRequest::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIExportMessagesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pubsub_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportMessagesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
