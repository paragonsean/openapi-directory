/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeidentifyFhirStoreRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeidentifyFhirStoreRequest::OAIDeidentifyFhirStoreRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeidentifyFhirStoreRequest::OAIDeidentifyFhirStoreRequest() {
    this->initializeModel();
}

OAIDeidentifyFhirStoreRequest::~OAIDeidentifyFhirStoreRequest() {}

void OAIDeidentifyFhirStoreRequest::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_destination_store_isSet = false;
    m_destination_store_isValid = false;

    m_gcs_config_uri_isSet = false;
    m_gcs_config_uri_isValid = false;

    m_resource_filter_isSet = false;
    m_resource_filter_isValid = false;

    m_skip_modified_resources_isSet = false;
    m_skip_modified_resources_isValid = false;
}

void OAIDeidentifyFhirStoreRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeidentifyFhirStoreRequest::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_destination_store_isValid = ::OpenAPI::fromJsonValue(m_destination_store, json[QString("destinationStore")]);
    m_destination_store_isSet = !json[QString("destinationStore")].isNull() && m_destination_store_isValid;

    m_gcs_config_uri_isValid = ::OpenAPI::fromJsonValue(m_gcs_config_uri, json[QString("gcsConfigUri")]);
    m_gcs_config_uri_isSet = !json[QString("gcsConfigUri")].isNull() && m_gcs_config_uri_isValid;

    m_resource_filter_isValid = ::OpenAPI::fromJsonValue(m_resource_filter, json[QString("resourceFilter")]);
    m_resource_filter_isSet = !json[QString("resourceFilter")].isNull() && m_resource_filter_isValid;

    m_skip_modified_resources_isValid = ::OpenAPI::fromJsonValue(m_skip_modified_resources, json[QString("skipModifiedResources")]);
    m_skip_modified_resources_isSet = !json[QString("skipModifiedResources")].isNull() && m_skip_modified_resources_isValid;
}

QString OAIDeidentifyFhirStoreRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeidentifyFhirStoreRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_destination_store_isSet) {
        obj.insert(QString("destinationStore"), ::OpenAPI::toJsonValue(m_destination_store));
    }
    if (m_gcs_config_uri_isSet) {
        obj.insert(QString("gcsConfigUri"), ::OpenAPI::toJsonValue(m_gcs_config_uri));
    }
    if (m_resource_filter.isSet()) {
        obj.insert(QString("resourceFilter"), ::OpenAPI::toJsonValue(m_resource_filter));
    }
    if (m_skip_modified_resources_isSet) {
        obj.insert(QString("skipModifiedResources"), ::OpenAPI::toJsonValue(m_skip_modified_resources));
    }
    return obj;
}

OAIDeidentifyConfig OAIDeidentifyFhirStoreRequest::getConfig() const {
    return m_config;
}
void OAIDeidentifyFhirStoreRequest::setConfig(const OAIDeidentifyConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIDeidentifyFhirStoreRequest::is_config_Set() const{
    return m_config_isSet;
}

bool OAIDeidentifyFhirStoreRequest::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIDeidentifyFhirStoreRequest::getDestinationStore() const {
    return m_destination_store;
}
void OAIDeidentifyFhirStoreRequest::setDestinationStore(const QString &destination_store) {
    m_destination_store = destination_store;
    m_destination_store_isSet = true;
}

bool OAIDeidentifyFhirStoreRequest::is_destination_store_Set() const{
    return m_destination_store_isSet;
}

bool OAIDeidentifyFhirStoreRequest::is_destination_store_Valid() const{
    return m_destination_store_isValid;
}

QString OAIDeidentifyFhirStoreRequest::getGcsConfigUri() const {
    return m_gcs_config_uri;
}
void OAIDeidentifyFhirStoreRequest::setGcsConfigUri(const QString &gcs_config_uri) {
    m_gcs_config_uri = gcs_config_uri;
    m_gcs_config_uri_isSet = true;
}

bool OAIDeidentifyFhirStoreRequest::is_gcs_config_uri_Set() const{
    return m_gcs_config_uri_isSet;
}

bool OAIDeidentifyFhirStoreRequest::is_gcs_config_uri_Valid() const{
    return m_gcs_config_uri_isValid;
}

OAIFhirFilter OAIDeidentifyFhirStoreRequest::getResourceFilter() const {
    return m_resource_filter;
}
void OAIDeidentifyFhirStoreRequest::setResourceFilter(const OAIFhirFilter &resource_filter) {
    m_resource_filter = resource_filter;
    m_resource_filter_isSet = true;
}

bool OAIDeidentifyFhirStoreRequest::is_resource_filter_Set() const{
    return m_resource_filter_isSet;
}

bool OAIDeidentifyFhirStoreRequest::is_resource_filter_Valid() const{
    return m_resource_filter_isValid;
}

bool OAIDeidentifyFhirStoreRequest::isSkipModifiedResources() const {
    return m_skip_modified_resources;
}
void OAIDeidentifyFhirStoreRequest::setSkipModifiedResources(const bool &skip_modified_resources) {
    m_skip_modified_resources = skip_modified_resources;
    m_skip_modified_resources_isSet = true;
}

bool OAIDeidentifyFhirStoreRequest::is_skip_modified_resources_Set() const{
    return m_skip_modified_resources_isSet;
}

bool OAIDeidentifyFhirStoreRequest::is_skip_modified_resources_Valid() const{
    return m_skip_modified_resources_isValid;
}

bool OAIDeidentifyFhirStoreRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_config_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_modified_resources_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeidentifyFhirStoreRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
