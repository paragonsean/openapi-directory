/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHl7SchemaConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHl7SchemaConfig::OAIHl7SchemaConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHl7SchemaConfig::OAIHl7SchemaConfig() {
    this->initializeModel();
}

OAIHl7SchemaConfig::~OAIHl7SchemaConfig() {}

void OAIHl7SchemaConfig::initializeModel() {

    m_message_schema_configs_isSet = false;
    m_message_schema_configs_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIHl7SchemaConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHl7SchemaConfig::fromJsonObject(QJsonObject json) {

    m_message_schema_configs_isValid = ::OpenAPI::fromJsonValue(m_message_schema_configs, json[QString("messageSchemaConfigs")]);
    m_message_schema_configs_isSet = !json[QString("messageSchemaConfigs")].isNull() && m_message_schema_configs_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIHl7SchemaConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHl7SchemaConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_message_schema_configs.size() > 0) {
        obj.insert(QString("messageSchemaConfigs"), ::OpenAPI::toJsonValue(m_message_schema_configs));
    }
    if (m_version.size() > 0) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QMap<QString, OAISchemaGroup> OAIHl7SchemaConfig::getMessageSchemaConfigs() const {
    return m_message_schema_configs;
}
void OAIHl7SchemaConfig::setMessageSchemaConfigs(const QMap<QString, OAISchemaGroup> &message_schema_configs) {
    m_message_schema_configs = message_schema_configs;
    m_message_schema_configs_isSet = true;
}

bool OAIHl7SchemaConfig::is_message_schema_configs_Set() const{
    return m_message_schema_configs_isSet;
}

bool OAIHl7SchemaConfig::is_message_schema_configs_Valid() const{
    return m_message_schema_configs_isValid;
}

QList<OAIVersionSource> OAIHl7SchemaConfig::getVersion() const {
    return m_version;
}
void OAIHl7SchemaConfig::setVersion(const QList<OAIVersionSource> &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIHl7SchemaConfig::is_version_Set() const{
    return m_version_isSet;
}

bool OAIHl7SchemaConfig::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIHl7SchemaConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_schema_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHl7SchemaConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
