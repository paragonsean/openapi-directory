/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHl7V2Store.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHl7V2Store::OAIHl7V2Store(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHl7V2Store::OAIHl7V2Store() {
    this->initializeModel();
}

OAIHl7V2Store::~OAIHl7V2Store() {}

void OAIHl7V2Store::initializeModel() {

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notification_config_isSet = false;
    m_notification_config_isValid = false;

    m_notification_configs_isSet = false;
    m_notification_configs_isValid = false;

    m_parser_config_isSet = false;
    m_parser_config_isValid = false;

    m_reject_duplicate_message_isSet = false;
    m_reject_duplicate_message_isValid = false;
}

void OAIHl7V2Store::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHl7V2Store::fromJsonObject(QJsonObject json) {

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notification_config_isValid = ::OpenAPI::fromJsonValue(m_notification_config, json[QString("notificationConfig")]);
    m_notification_config_isSet = !json[QString("notificationConfig")].isNull() && m_notification_config_isValid;

    m_notification_configs_isValid = ::OpenAPI::fromJsonValue(m_notification_configs, json[QString("notificationConfigs")]);
    m_notification_configs_isSet = !json[QString("notificationConfigs")].isNull() && m_notification_configs_isValid;

    m_parser_config_isValid = ::OpenAPI::fromJsonValue(m_parser_config, json[QString("parserConfig")]);
    m_parser_config_isSet = !json[QString("parserConfig")].isNull() && m_parser_config_isValid;

    m_reject_duplicate_message_isValid = ::OpenAPI::fromJsonValue(m_reject_duplicate_message, json[QString("rejectDuplicateMessage")]);
    m_reject_duplicate_message_isSet = !json[QString("rejectDuplicateMessage")].isNull() && m_reject_duplicate_message_isValid;
}

QString OAIHl7V2Store::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHl7V2Store::asJsonObject() const {
    QJsonObject obj;
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notification_config.isSet()) {
        obj.insert(QString("notificationConfig"), ::OpenAPI::toJsonValue(m_notification_config));
    }
    if (m_notification_configs.size() > 0) {
        obj.insert(QString("notificationConfigs"), ::OpenAPI::toJsonValue(m_notification_configs));
    }
    if (m_parser_config.isSet()) {
        obj.insert(QString("parserConfig"), ::OpenAPI::toJsonValue(m_parser_config));
    }
    if (m_reject_duplicate_message_isSet) {
        obj.insert(QString("rejectDuplicateMessage"), ::OpenAPI::toJsonValue(m_reject_duplicate_message));
    }
    return obj;
}

QMap<QString, QString> OAIHl7V2Store::getLabels() const {
    return m_labels;
}
void OAIHl7V2Store::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIHl7V2Store::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIHl7V2Store::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIHl7V2Store::getName() const {
    return m_name;
}
void OAIHl7V2Store::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIHl7V2Store::is_name_Set() const{
    return m_name_isSet;
}

bool OAIHl7V2Store::is_name_Valid() const{
    return m_name_isValid;
}

OAINotificationConfig OAIHl7V2Store::getNotificationConfig() const {
    return m_notification_config;
}
void OAIHl7V2Store::setNotificationConfig(const OAINotificationConfig &notification_config) {
    m_notification_config = notification_config;
    m_notification_config_isSet = true;
}

bool OAIHl7V2Store::is_notification_config_Set() const{
    return m_notification_config_isSet;
}

bool OAIHl7V2Store::is_notification_config_Valid() const{
    return m_notification_config_isValid;
}

QList<OAIHl7V2NotificationConfig> OAIHl7V2Store::getNotificationConfigs() const {
    return m_notification_configs;
}
void OAIHl7V2Store::setNotificationConfigs(const QList<OAIHl7V2NotificationConfig> &notification_configs) {
    m_notification_configs = notification_configs;
    m_notification_configs_isSet = true;
}

bool OAIHl7V2Store::is_notification_configs_Set() const{
    return m_notification_configs_isSet;
}

bool OAIHl7V2Store::is_notification_configs_Valid() const{
    return m_notification_configs_isValid;
}

OAIParserConfig OAIHl7V2Store::getParserConfig() const {
    return m_parser_config;
}
void OAIHl7V2Store::setParserConfig(const OAIParserConfig &parser_config) {
    m_parser_config = parser_config;
    m_parser_config_isSet = true;
}

bool OAIHl7V2Store::is_parser_config_Set() const{
    return m_parser_config_isSet;
}

bool OAIHl7V2Store::is_parser_config_Valid() const{
    return m_parser_config_isValid;
}

bool OAIHl7V2Store::isRejectDuplicateMessage() const {
    return m_reject_duplicate_message;
}
void OAIHl7V2Store::setRejectDuplicateMessage(const bool &reject_duplicate_message) {
    m_reject_duplicate_message = reject_duplicate_message;
    m_reject_duplicate_message_isSet = true;
}

bool OAIHl7V2Store::is_reject_duplicate_message_Set() const{
    return m_reject_duplicate_message_isSet;
}

bool OAIHl7V2Store::is_reject_duplicate_message_Valid() const{
    return m_reject_duplicate_message_isValid;
}

bool OAIHl7V2Store::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parser_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reject_duplicate_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHl7V2Store::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
