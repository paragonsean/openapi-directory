/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserDataMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserDataMapping::OAIUserDataMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserDataMapping::OAIUserDataMapping() {
    this->initializeModel();
}

OAIUserDataMapping::~OAIUserDataMapping() {}

void OAIUserDataMapping::initializeModel() {

    m_archive_time_isSet = false;
    m_archive_time_isValid = false;

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_data_id_isSet = false;
    m_data_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_attributes_isSet = false;
    m_resource_attributes_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIUserDataMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserDataMapping::fromJsonObject(QJsonObject json) {

    m_archive_time_isValid = ::OpenAPI::fromJsonValue(m_archive_time, json[QString("archiveTime")]);
    m_archive_time_isSet = !json[QString("archiveTime")].isNull() && m_archive_time_isValid;

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_data_id_isValid = ::OpenAPI::fromJsonValue(m_data_id, json[QString("dataId")]);
    m_data_id_isSet = !json[QString("dataId")].isNull() && m_data_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_attributes_isValid = ::OpenAPI::fromJsonValue(m_resource_attributes, json[QString("resourceAttributes")]);
    m_resource_attributes_isSet = !json[QString("resourceAttributes")].isNull() && m_resource_attributes_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIUserDataMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserDataMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_archive_time_isSet) {
        obj.insert(QString("archiveTime"), ::OpenAPI::toJsonValue(m_archive_time));
    }
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_data_id_isSet) {
        obj.insert(QString("dataId"), ::OpenAPI::toJsonValue(m_data_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_attributes.size() > 0) {
        obj.insert(QString("resourceAttributes"), ::OpenAPI::toJsonValue(m_resource_attributes));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIUserDataMapping::getArchiveTime() const {
    return m_archive_time;
}
void OAIUserDataMapping::setArchiveTime(const QString &archive_time) {
    m_archive_time = archive_time;
    m_archive_time_isSet = true;
}

bool OAIUserDataMapping::is_archive_time_Set() const{
    return m_archive_time_isSet;
}

bool OAIUserDataMapping::is_archive_time_Valid() const{
    return m_archive_time_isValid;
}

bool OAIUserDataMapping::isArchived() const {
    return m_archived;
}
void OAIUserDataMapping::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIUserDataMapping::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIUserDataMapping::is_archived_Valid() const{
    return m_archived_isValid;
}

QString OAIUserDataMapping::getDataId() const {
    return m_data_id;
}
void OAIUserDataMapping::setDataId(const QString &data_id) {
    m_data_id = data_id;
    m_data_id_isSet = true;
}

bool OAIUserDataMapping::is_data_id_Set() const{
    return m_data_id_isSet;
}

bool OAIUserDataMapping::is_data_id_Valid() const{
    return m_data_id_isValid;
}

QString OAIUserDataMapping::getName() const {
    return m_name;
}
void OAIUserDataMapping::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserDataMapping::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserDataMapping::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIAttribute> OAIUserDataMapping::getResourceAttributes() const {
    return m_resource_attributes;
}
void OAIUserDataMapping::setResourceAttributes(const QList<OAIAttribute> &resource_attributes) {
    m_resource_attributes = resource_attributes;
    m_resource_attributes_isSet = true;
}

bool OAIUserDataMapping::is_resource_attributes_Set() const{
    return m_resource_attributes_isSet;
}

bool OAIUserDataMapping::is_resource_attributes_Valid() const{
    return m_resource_attributes_isValid;
}

QString OAIUserDataMapping::getUserId() const {
    return m_user_id;
}
void OAIUserDataMapping::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUserDataMapping::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUserDataMapping::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIUserDataMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archive_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserDataMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
