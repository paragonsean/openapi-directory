/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExplainDataAccessResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExplainDataAccessResponse::OAIExplainDataAccessResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExplainDataAccessResponse::OAIExplainDataAccessResponse() {
    this->initializeModel();
}

OAIExplainDataAccessResponse::~OAIExplainDataAccessResponse() {}

void OAIExplainDataAccessResponse::initializeModel() {

    m_consent_scopes_isSet = false;
    m_consent_scopes_isValid = false;

    m_warning_isSet = false;
    m_warning_isValid = false;
}

void OAIExplainDataAccessResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExplainDataAccessResponse::fromJsonObject(QJsonObject json) {

    m_consent_scopes_isValid = ::OpenAPI::fromJsonValue(m_consent_scopes, json[QString("consentScopes")]);
    m_consent_scopes_isSet = !json[QString("consentScopes")].isNull() && m_consent_scopes_isValid;

    m_warning_isValid = ::OpenAPI::fromJsonValue(m_warning, json[QString("warning")]);
    m_warning_isSet = !json[QString("warning")].isNull() && m_warning_isValid;
}

QString OAIExplainDataAccessResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExplainDataAccessResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_consent_scopes.size() > 0) {
        obj.insert(QString("consentScopes"), ::OpenAPI::toJsonValue(m_consent_scopes));
    }
    if (m_warning_isSet) {
        obj.insert(QString("warning"), ::OpenAPI::toJsonValue(m_warning));
    }
    return obj;
}

QList<OAIExplainDataAccessConsentScope> OAIExplainDataAccessResponse::getConsentScopes() const {
    return m_consent_scopes;
}
void OAIExplainDataAccessResponse::setConsentScopes(const QList<OAIExplainDataAccessConsentScope> &consent_scopes) {
    m_consent_scopes = consent_scopes;
    m_consent_scopes_isSet = true;
}

bool OAIExplainDataAccessResponse::is_consent_scopes_Set() const{
    return m_consent_scopes_isSet;
}

bool OAIExplainDataAccessResponse::is_consent_scopes_Valid() const{
    return m_consent_scopes_isValid;
}

QString OAIExplainDataAccessResponse::getWarning() const {
    return m_warning;
}
void OAIExplainDataAccessResponse::setWarning(const QString &warning) {
    m_warning = warning;
    m_warning_isSet = true;
}

bool OAIExplainDataAccessResponse::is_warning_Set() const{
    return m_warning_isSet;
}

bool OAIExplainDataAccessResponse::is_warning_Valid() const{
    return m_warning_isValid;
}

bool OAIExplainDataAccessResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExplainDataAccessResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
