/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnotation::OAIAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnotation::OAIAnnotation() {
    this->initializeModel();
}

OAIAnnotation::~OAIAnnotation() {}

void OAIAnnotation::initializeModel() {

    m_annotation_source_isSet = false;
    m_annotation_source_isValid = false;

    m_custom_data_isSet = false;
    m_custom_data_isValid = false;

    m_image_annotation_isSet = false;
    m_image_annotation_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_annotation_isSet = false;
    m_resource_annotation_isValid = false;

    m_text_annotation_isSet = false;
    m_text_annotation_isValid = false;
}

void OAIAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnnotation::fromJsonObject(QJsonObject json) {

    m_annotation_source_isValid = ::OpenAPI::fromJsonValue(m_annotation_source, json[QString("annotationSource")]);
    m_annotation_source_isSet = !json[QString("annotationSource")].isNull() && m_annotation_source_isValid;

    m_custom_data_isValid = ::OpenAPI::fromJsonValue(m_custom_data, json[QString("customData")]);
    m_custom_data_isSet = !json[QString("customData")].isNull() && m_custom_data_isValid;

    m_image_annotation_isValid = ::OpenAPI::fromJsonValue(m_image_annotation, json[QString("imageAnnotation")]);
    m_image_annotation_isSet = !json[QString("imageAnnotation")].isNull() && m_image_annotation_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_annotation_isValid = ::OpenAPI::fromJsonValue(m_resource_annotation, json[QString("resourceAnnotation")]);
    m_resource_annotation_isSet = !json[QString("resourceAnnotation")].isNull() && m_resource_annotation_isValid;

    m_text_annotation_isValid = ::OpenAPI::fromJsonValue(m_text_annotation, json[QString("textAnnotation")]);
    m_text_annotation_isSet = !json[QString("textAnnotation")].isNull() && m_text_annotation_isValid;
}

QString OAIAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_source.isSet()) {
        obj.insert(QString("annotationSource"), ::OpenAPI::toJsonValue(m_annotation_source));
    }
    if (m_custom_data.size() > 0) {
        obj.insert(QString("customData"), ::OpenAPI::toJsonValue(m_custom_data));
    }
    if (m_image_annotation.isSet()) {
        obj.insert(QString("imageAnnotation"), ::OpenAPI::toJsonValue(m_image_annotation));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_annotation.isSet()) {
        obj.insert(QString("resourceAnnotation"), ::OpenAPI::toJsonValue(m_resource_annotation));
    }
    if (m_text_annotation.isSet()) {
        obj.insert(QString("textAnnotation"), ::OpenAPI::toJsonValue(m_text_annotation));
    }
    return obj;
}

OAIAnnotationSource OAIAnnotation::getAnnotationSource() const {
    return m_annotation_source;
}
void OAIAnnotation::setAnnotationSource(const OAIAnnotationSource &annotation_source) {
    m_annotation_source = annotation_source;
    m_annotation_source_isSet = true;
}

bool OAIAnnotation::is_annotation_source_Set() const{
    return m_annotation_source_isSet;
}

bool OAIAnnotation::is_annotation_source_Valid() const{
    return m_annotation_source_isValid;
}

QMap<QString, QString> OAIAnnotation::getCustomData() const {
    return m_custom_data;
}
void OAIAnnotation::setCustomData(const QMap<QString, QString> &custom_data) {
    m_custom_data = custom_data;
    m_custom_data_isSet = true;
}

bool OAIAnnotation::is_custom_data_Set() const{
    return m_custom_data_isSet;
}

bool OAIAnnotation::is_custom_data_Valid() const{
    return m_custom_data_isValid;
}

OAIImageAnnotation OAIAnnotation::getImageAnnotation() const {
    return m_image_annotation;
}
void OAIAnnotation::setImageAnnotation(const OAIImageAnnotation &image_annotation) {
    m_image_annotation = image_annotation;
    m_image_annotation_isSet = true;
}

bool OAIAnnotation::is_image_annotation_Set() const{
    return m_image_annotation_isSet;
}

bool OAIAnnotation::is_image_annotation_Valid() const{
    return m_image_annotation_isValid;
}

QString OAIAnnotation::getName() const {
    return m_name;
}
void OAIAnnotation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAnnotation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAnnotation::is_name_Valid() const{
    return m_name_isValid;
}

OAIResourceAnnotation OAIAnnotation::getResourceAnnotation() const {
    return m_resource_annotation;
}
void OAIAnnotation::setResourceAnnotation(const OAIResourceAnnotation &resource_annotation) {
    m_resource_annotation = resource_annotation;
    m_resource_annotation_isSet = true;
}

bool OAIAnnotation::is_resource_annotation_Set() const{
    return m_resource_annotation_isSet;
}

bool OAIAnnotation::is_resource_annotation_Valid() const{
    return m_resource_annotation_isValid;
}

OAISensitiveTextAnnotation OAIAnnotation::getTextAnnotation() const {
    return m_text_annotation;
}
void OAIAnnotation::setTextAnnotation(const OAISensitiveTextAnnotation &text_annotation) {
    m_text_annotation = text_annotation;
    m_text_annotation_isSet = true;
}

bool OAIAnnotation::is_text_annotation_Set() const{
    return m_text_annotation_isSet;
}

bool OAIAnnotation::is_text_annotation_Valid() const{
    return m_text_annotation_isValid;
}

bool OAIAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_annotation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_annotation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_annotation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
