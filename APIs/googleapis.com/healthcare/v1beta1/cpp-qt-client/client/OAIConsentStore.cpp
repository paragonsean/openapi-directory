/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsentStore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsentStore::OAIConsentStore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsentStore::OAIConsentStore() {
    this->initializeModel();
}

OAIConsentStore::~OAIConsentStore() {}

void OAIConsentStore::initializeModel() {

    m_default_consent_ttl_isSet = false;
    m_default_consent_ttl_isValid = false;

    m_enable_consent_create_on_update_isSet = false;
    m_enable_consent_create_on_update_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIConsentStore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsentStore::fromJsonObject(QJsonObject json) {

    m_default_consent_ttl_isValid = ::OpenAPI::fromJsonValue(m_default_consent_ttl, json[QString("defaultConsentTtl")]);
    m_default_consent_ttl_isSet = !json[QString("defaultConsentTtl")].isNull() && m_default_consent_ttl_isValid;

    m_enable_consent_create_on_update_isValid = ::OpenAPI::fromJsonValue(m_enable_consent_create_on_update, json[QString("enableConsentCreateOnUpdate")]);
    m_enable_consent_create_on_update_isSet = !json[QString("enableConsentCreateOnUpdate")].isNull() && m_enable_consent_create_on_update_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIConsentStore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsentStore::asJsonObject() const {
    QJsonObject obj;
    if (m_default_consent_ttl_isSet) {
        obj.insert(QString("defaultConsentTtl"), ::OpenAPI::toJsonValue(m_default_consent_ttl));
    }
    if (m_enable_consent_create_on_update_isSet) {
        obj.insert(QString("enableConsentCreateOnUpdate"), ::OpenAPI::toJsonValue(m_enable_consent_create_on_update));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIConsentStore::getDefaultConsentTtl() const {
    return m_default_consent_ttl;
}
void OAIConsentStore::setDefaultConsentTtl(const QString &default_consent_ttl) {
    m_default_consent_ttl = default_consent_ttl;
    m_default_consent_ttl_isSet = true;
}

bool OAIConsentStore::is_default_consent_ttl_Set() const{
    return m_default_consent_ttl_isSet;
}

bool OAIConsentStore::is_default_consent_ttl_Valid() const{
    return m_default_consent_ttl_isValid;
}

bool OAIConsentStore::isEnableConsentCreateOnUpdate() const {
    return m_enable_consent_create_on_update;
}
void OAIConsentStore::setEnableConsentCreateOnUpdate(const bool &enable_consent_create_on_update) {
    m_enable_consent_create_on_update = enable_consent_create_on_update;
    m_enable_consent_create_on_update_isSet = true;
}

bool OAIConsentStore::is_enable_consent_create_on_update_Set() const{
    return m_enable_consent_create_on_update_isSet;
}

bool OAIConsentStore::is_enable_consent_create_on_update_Valid() const{
    return m_enable_consent_create_on_update_isValid;
}

QMap<QString, QString> OAIConsentStore::getLabels() const {
    return m_labels;
}
void OAIConsentStore::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIConsentStore::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIConsentStore::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIConsentStore::getName() const {
    return m_name;
}
void OAIConsentStore::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConsentStore::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConsentStore::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIConsentStore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_consent_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_consent_create_on_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsentStore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
