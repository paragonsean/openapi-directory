/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFhirNotificationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFhirNotificationConfig::OAIFhirNotificationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFhirNotificationConfig::OAIFhirNotificationConfig() {
    this->initializeModel();
}

OAIFhirNotificationConfig::~OAIFhirNotificationConfig() {}

void OAIFhirNotificationConfig::initializeModel() {

    m_pubsub_topic_isSet = false;
    m_pubsub_topic_isValid = false;

    m_send_full_resource_isSet = false;
    m_send_full_resource_isValid = false;

    m_send_previous_resource_on_delete_isSet = false;
    m_send_previous_resource_on_delete_isValid = false;
}

void OAIFhirNotificationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFhirNotificationConfig::fromJsonObject(QJsonObject json) {

    m_pubsub_topic_isValid = ::OpenAPI::fromJsonValue(m_pubsub_topic, json[QString("pubsubTopic")]);
    m_pubsub_topic_isSet = !json[QString("pubsubTopic")].isNull() && m_pubsub_topic_isValid;

    m_send_full_resource_isValid = ::OpenAPI::fromJsonValue(m_send_full_resource, json[QString("sendFullResource")]);
    m_send_full_resource_isSet = !json[QString("sendFullResource")].isNull() && m_send_full_resource_isValid;

    m_send_previous_resource_on_delete_isValid = ::OpenAPI::fromJsonValue(m_send_previous_resource_on_delete, json[QString("sendPreviousResourceOnDelete")]);
    m_send_previous_resource_on_delete_isSet = !json[QString("sendPreviousResourceOnDelete")].isNull() && m_send_previous_resource_on_delete_isValid;
}

QString OAIFhirNotificationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFhirNotificationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_pubsub_topic_isSet) {
        obj.insert(QString("pubsubTopic"), ::OpenAPI::toJsonValue(m_pubsub_topic));
    }
    if (m_send_full_resource_isSet) {
        obj.insert(QString("sendFullResource"), ::OpenAPI::toJsonValue(m_send_full_resource));
    }
    if (m_send_previous_resource_on_delete_isSet) {
        obj.insert(QString("sendPreviousResourceOnDelete"), ::OpenAPI::toJsonValue(m_send_previous_resource_on_delete));
    }
    return obj;
}

QString OAIFhirNotificationConfig::getPubsubTopic() const {
    return m_pubsub_topic;
}
void OAIFhirNotificationConfig::setPubsubTopic(const QString &pubsub_topic) {
    m_pubsub_topic = pubsub_topic;
    m_pubsub_topic_isSet = true;
}

bool OAIFhirNotificationConfig::is_pubsub_topic_Set() const{
    return m_pubsub_topic_isSet;
}

bool OAIFhirNotificationConfig::is_pubsub_topic_Valid() const{
    return m_pubsub_topic_isValid;
}

bool OAIFhirNotificationConfig::isSendFullResource() const {
    return m_send_full_resource;
}
void OAIFhirNotificationConfig::setSendFullResource(const bool &send_full_resource) {
    m_send_full_resource = send_full_resource;
    m_send_full_resource_isSet = true;
}

bool OAIFhirNotificationConfig::is_send_full_resource_Set() const{
    return m_send_full_resource_isSet;
}

bool OAIFhirNotificationConfig::is_send_full_resource_Valid() const{
    return m_send_full_resource_isValid;
}

bool OAIFhirNotificationConfig::isSendPreviousResourceOnDelete() const {
    return m_send_previous_resource_on_delete;
}
void OAIFhirNotificationConfig::setSendPreviousResourceOnDelete(const bool &send_previous_resource_on_delete) {
    m_send_previous_resource_on_delete = send_previous_resource_on_delete;
    m_send_previous_resource_on_delete_isSet = true;
}

bool OAIFhirNotificationConfig::is_send_previous_resource_on_delete_Set() const{
    return m_send_previous_resource_on_delete_isSet;
}

bool OAIFhirNotificationConfig::is_send_previous_resource_on_delete_Valid() const{
    return m_send_previous_resource_on_delete_isValid;
}

bool OAIFhirNotificationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pubsub_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_full_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_previous_resource_on_delete_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFhirNotificationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
