/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRevokeConsentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRevokeConsentRequest::OAIRevokeConsentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRevokeConsentRequest::OAIRevokeConsentRequest() {
    this->initializeModel();
}

OAIRevokeConsentRequest::~OAIRevokeConsentRequest() {}

void OAIRevokeConsentRequest::initializeModel() {

    m_consent_artifact_isSet = false;
    m_consent_artifact_isValid = false;
}

void OAIRevokeConsentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRevokeConsentRequest::fromJsonObject(QJsonObject json) {

    m_consent_artifact_isValid = ::OpenAPI::fromJsonValue(m_consent_artifact, json[QString("consentArtifact")]);
    m_consent_artifact_isSet = !json[QString("consentArtifact")].isNull() && m_consent_artifact_isValid;
}

QString OAIRevokeConsentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRevokeConsentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_consent_artifact_isSet) {
        obj.insert(QString("consentArtifact"), ::OpenAPI::toJsonValue(m_consent_artifact));
    }
    return obj;
}

QString OAIRevokeConsentRequest::getConsentArtifact() const {
    return m_consent_artifact;
}
void OAIRevokeConsentRequest::setConsentArtifact(const QString &consent_artifact) {
    m_consent_artifact = consent_artifact;
    m_consent_artifact_isSet = true;
}

bool OAIRevokeConsentRequest::is_consent_artifact_Set() const{
    return m_consent_artifact_isSet;
}

bool OAIRevokeConsentRequest::is_consent_artifact_Valid() const{
    return m_consent_artifact_isValid;
}

bool OAIRevokeConsentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent_artifact_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRevokeConsentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
