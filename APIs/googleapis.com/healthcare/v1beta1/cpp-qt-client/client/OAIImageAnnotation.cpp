/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageAnnotation::OAIImageAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageAnnotation::OAIImageAnnotation() {
    this->initializeModel();
}

OAIImageAnnotation::~OAIImageAnnotation() {}

void OAIImageAnnotation::initializeModel() {

    m_bounding_polys_isSet = false;
    m_bounding_polys_isValid = false;

    m_frame_index_isSet = false;
    m_frame_index_isValid = false;
}

void OAIImageAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageAnnotation::fromJsonObject(QJsonObject json) {

    m_bounding_polys_isValid = ::OpenAPI::fromJsonValue(m_bounding_polys, json[QString("boundingPolys")]);
    m_bounding_polys_isSet = !json[QString("boundingPolys")].isNull() && m_bounding_polys_isValid;

    m_frame_index_isValid = ::OpenAPI::fromJsonValue(m_frame_index, json[QString("frameIndex")]);
    m_frame_index_isSet = !json[QString("frameIndex")].isNull() && m_frame_index_isValid;
}

QString OAIImageAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_bounding_polys.size() > 0) {
        obj.insert(QString("boundingPolys"), ::OpenAPI::toJsonValue(m_bounding_polys));
    }
    if (m_frame_index_isSet) {
        obj.insert(QString("frameIndex"), ::OpenAPI::toJsonValue(m_frame_index));
    }
    return obj;
}

QList<OAIBoundingPoly> OAIImageAnnotation::getBoundingPolys() const {
    return m_bounding_polys;
}
void OAIImageAnnotation::setBoundingPolys(const QList<OAIBoundingPoly> &bounding_polys) {
    m_bounding_polys = bounding_polys;
    m_bounding_polys_isSet = true;
}

bool OAIImageAnnotation::is_bounding_polys_Set() const{
    return m_bounding_polys_isSet;
}

bool OAIImageAnnotation::is_bounding_polys_Valid() const{
    return m_bounding_polys_isValid;
}

qint32 OAIImageAnnotation::getFrameIndex() const {
    return m_frame_index;
}
void OAIImageAnnotation::setFrameIndex(const qint32 &frame_index) {
    m_frame_index = frame_index;
    m_frame_index_isSet = true;
}

bool OAIImageAnnotation::is_frame_index_Set() const{
    return m_frame_index_isSet;
}

bool OAIImageAnnotation::is_frame_index_Valid() const{
    return m_frame_index_isValid;
}

bool OAIImageAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounding_polys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
