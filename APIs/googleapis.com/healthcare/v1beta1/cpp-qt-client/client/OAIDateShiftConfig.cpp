/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDateShiftConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDateShiftConfig::OAIDateShiftConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDateShiftConfig::OAIDateShiftConfig() {
    this->initializeModel();
}

OAIDateShiftConfig::~OAIDateShiftConfig() {}

void OAIDateShiftConfig::initializeModel() {

    m_crypto_key_isSet = false;
    m_crypto_key_isValid = false;

    m_kms_wrapped_isSet = false;
    m_kms_wrapped_isValid = false;
}

void OAIDateShiftConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDateShiftConfig::fromJsonObject(QJsonObject json) {

    m_crypto_key_isValid = ::OpenAPI::fromJsonValue(m_crypto_key, json[QString("cryptoKey")]);
    m_crypto_key_isSet = !json[QString("cryptoKey")].isNull() && m_crypto_key_isValid;

    m_kms_wrapped_isValid = ::OpenAPI::fromJsonValue(m_kms_wrapped, json[QString("kmsWrapped")]);
    m_kms_wrapped_isSet = !json[QString("kmsWrapped")].isNull() && m_kms_wrapped_isValid;
}

QString OAIDateShiftConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDateShiftConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_crypto_key_isSet) {
        obj.insert(QString("cryptoKey"), ::OpenAPI::toJsonValue(m_crypto_key));
    }
    if (m_kms_wrapped.isSet()) {
        obj.insert(QString("kmsWrapped"), ::OpenAPI::toJsonValue(m_kms_wrapped));
    }
    return obj;
}

QByteArray OAIDateShiftConfig::getCryptoKey() const {
    return m_crypto_key;
}
void OAIDateShiftConfig::setCryptoKey(const QByteArray &crypto_key) {
    m_crypto_key = crypto_key;
    m_crypto_key_isSet = true;
}

bool OAIDateShiftConfig::is_crypto_key_Set() const{
    return m_crypto_key_isSet;
}

bool OAIDateShiftConfig::is_crypto_key_Valid() const{
    return m_crypto_key_isValid;
}

OAIKmsWrappedCryptoKey OAIDateShiftConfig::getKmsWrapped() const {
    return m_kms_wrapped;
}
void OAIDateShiftConfig::setKmsWrapped(const OAIKmsWrappedCryptoKey &kms_wrapped) {
    m_kms_wrapped = kms_wrapped;
    m_kms_wrapped_isSet = true;
}

bool OAIDateShiftConfig::is_kms_wrapped_Set() const{
    return m_kms_wrapped_isSet;
}

bool OAIDateShiftConfig::is_kms_wrapped_Valid() const{
    return m_kms_wrapped_isValid;
}

bool OAIDateShiftConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crypto_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_wrapped.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDateShiftConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
