/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchParameter::OAISearchParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchParameter::OAISearchParameter() {
    this->initializeModel();
}

OAISearchParameter::~OAISearchParameter() {}

void OAISearchParameter::initializeModel() {

    m_canonical_url_isSet = false;
    m_canonical_url_isValid = false;

    m_parameter_isSet = false;
    m_parameter_isValid = false;
}

void OAISearchParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchParameter::fromJsonObject(QJsonObject json) {

    m_canonical_url_isValid = ::OpenAPI::fromJsonValue(m_canonical_url, json[QString("canonicalUrl")]);
    m_canonical_url_isSet = !json[QString("canonicalUrl")].isNull() && m_canonical_url_isValid;

    m_parameter_isValid = ::OpenAPI::fromJsonValue(m_parameter, json[QString("parameter")]);
    m_parameter_isSet = !json[QString("parameter")].isNull() && m_parameter_isValid;
}

QString OAISearchParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_canonical_url_isSet) {
        obj.insert(QString("canonicalUrl"), ::OpenAPI::toJsonValue(m_canonical_url));
    }
    if (m_parameter_isSet) {
        obj.insert(QString("parameter"), ::OpenAPI::toJsonValue(m_parameter));
    }
    return obj;
}

QString OAISearchParameter::getCanonicalUrl() const {
    return m_canonical_url;
}
void OAISearchParameter::setCanonicalUrl(const QString &canonical_url) {
    m_canonical_url = canonical_url;
    m_canonical_url_isSet = true;
}

bool OAISearchParameter::is_canonical_url_Set() const{
    return m_canonical_url_isSet;
}

bool OAISearchParameter::is_canonical_url_Valid() const{
    return m_canonical_url_isValid;
}

QString OAISearchParameter::getParameter() const {
    return m_parameter;
}
void OAISearchParameter::setParameter(const QString &parameter) {
    m_parameter = parameter;
    m_parameter_isSet = true;
}

bool OAISearchParameter::is_parameter_Set() const{
    return m_parameter_isSet;
}

bool OAISearchParameter::is_parameter_Valid() const{
    return m_parameter_isValid;
}

bool OAISearchParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_canonical_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
