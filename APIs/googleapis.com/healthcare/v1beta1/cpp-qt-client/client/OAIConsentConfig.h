/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConsentConfig.h
 *
 * Configures whether to enforce consent for the FHIR store and which consent enforcement version is being used.
 */

#ifndef OAIConsentConfig_H
#define OAIConsentConfig_H

#include <QJsonObject>

#include "OAIAccessDeterminationLogConfig.h"
#include "OAIConsentHeaderHandling.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAccessDeterminationLogConfig;
class OAIConsentHeaderHandling;

class OAIConsentConfig : public OAIObject {
public:
    OAIConsentConfig();
    OAIConsentConfig(QString json);
    ~OAIConsentConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAccessDeterminationLogConfig getAccessDeterminationLogConfig() const;
    void setAccessDeterminationLogConfig(const OAIAccessDeterminationLogConfig &access_determination_log_config);
    bool is_access_determination_log_config_Set() const;
    bool is_access_determination_log_config_Valid() const;

    bool isAccessEnforced() const;
    void setAccessEnforced(const bool &access_enforced);
    bool is_access_enforced_Set() const;
    bool is_access_enforced_Valid() const;

    OAIConsentHeaderHandling getConsentHeaderHandling() const;
    void setConsentHeaderHandling(const OAIConsentHeaderHandling &consent_header_handling);
    bool is_consent_header_handling_Set() const;
    bool is_consent_header_handling_Valid() const;

    QList<QString> getEnforcedAdminConsents() const;
    void setEnforcedAdminConsents(const QList<QString> &enforced_admin_consents);
    bool is_enforced_admin_consents_Set() const;
    bool is_enforced_admin_consents_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAccessDeterminationLogConfig m_access_determination_log_config;
    bool m_access_determination_log_config_isSet;
    bool m_access_determination_log_config_isValid;

    bool m_access_enforced;
    bool m_access_enforced_isSet;
    bool m_access_enforced_isValid;

    OAIConsentHeaderHandling m_consent_header_handling;
    bool m_consent_header_handling_isSet;
    bool m_consent_header_handling_isValid;

    QList<QString> m_enforced_admin_consents;
    bool m_enforced_admin_consents_isSet;
    bool m_enforced_admin_consents_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConsentConfig)

#endif // OAIConsentConfig_H
