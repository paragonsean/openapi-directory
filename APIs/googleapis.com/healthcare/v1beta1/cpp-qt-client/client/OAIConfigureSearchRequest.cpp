/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigureSearchRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigureSearchRequest::OAIConfigureSearchRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigureSearchRequest::OAIConfigureSearchRequest() {
    this->initializeModel();
}

OAIConfigureSearchRequest::~OAIConfigureSearchRequest() {}

void OAIConfigureSearchRequest::initializeModel() {

    m_canonical_urls_isSet = false;
    m_canonical_urls_isValid = false;

    m_validate_only_isSet = false;
    m_validate_only_isValid = false;
}

void OAIConfigureSearchRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigureSearchRequest::fromJsonObject(QJsonObject json) {

    m_canonical_urls_isValid = ::OpenAPI::fromJsonValue(m_canonical_urls, json[QString("canonicalUrls")]);
    m_canonical_urls_isSet = !json[QString("canonicalUrls")].isNull() && m_canonical_urls_isValid;

    m_validate_only_isValid = ::OpenAPI::fromJsonValue(m_validate_only, json[QString("validateOnly")]);
    m_validate_only_isSet = !json[QString("validateOnly")].isNull() && m_validate_only_isValid;
}

QString OAIConfigureSearchRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigureSearchRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_canonical_urls.size() > 0) {
        obj.insert(QString("canonicalUrls"), ::OpenAPI::toJsonValue(m_canonical_urls));
    }
    if (m_validate_only_isSet) {
        obj.insert(QString("validateOnly"), ::OpenAPI::toJsonValue(m_validate_only));
    }
    return obj;
}

QList<QString> OAIConfigureSearchRequest::getCanonicalUrls() const {
    return m_canonical_urls;
}
void OAIConfigureSearchRequest::setCanonicalUrls(const QList<QString> &canonical_urls) {
    m_canonical_urls = canonical_urls;
    m_canonical_urls_isSet = true;
}

bool OAIConfigureSearchRequest::is_canonical_urls_Set() const{
    return m_canonical_urls_isSet;
}

bool OAIConfigureSearchRequest::is_canonical_urls_Valid() const{
    return m_canonical_urls_isValid;
}

bool OAIConfigureSearchRequest::isValidateOnly() const {
    return m_validate_only;
}
void OAIConfigureSearchRequest::setValidateOnly(const bool &validate_only) {
    m_validate_only = validate_only;
    m_validate_only_isSet = true;
}

bool OAIConfigureSearchRequest::is_validate_only_Set() const{
    return m_validate_only_isSet;
}

bool OAIConfigureSearchRequest::is_validate_only_Valid() const{
    return m_validate_only_isValid;
}

bool OAIConfigureSearchRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_canonical_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigureSearchRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
