/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISignature.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISignature::OAISignature(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISignature::OAISignature() {
    this->initializeModel();
}

OAISignature::~OAISignature() {}

void OAISignature::initializeModel() {

    m_image_isSet = false;
    m_image_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_signature_time_isSet = false;
    m_signature_time_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAISignature::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISignature::fromJsonObject(QJsonObject json) {

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_signature_time_isValid = ::OpenAPI::fromJsonValue(m_signature_time, json[QString("signatureTime")]);
    m_signature_time_isSet = !json[QString("signatureTime")].isNull() && m_signature_time_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAISignature::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISignature::asJsonObject() const {
    QJsonObject obj;
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_signature_time_isSet) {
        obj.insert(QString("signatureTime"), ::OpenAPI::toJsonValue(m_signature_time));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

OAIImage OAISignature::getImage() const {
    return m_image;
}
void OAISignature::setImage(const OAIImage &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAISignature::is_image_Set() const{
    return m_image_isSet;
}

bool OAISignature::is_image_Valid() const{
    return m_image_isValid;
}

QMap<QString, QString> OAISignature::getMetadata() const {
    return m_metadata;
}
void OAISignature::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISignature::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISignature::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAISignature::getSignatureTime() const {
    return m_signature_time;
}
void OAISignature::setSignatureTime(const QString &signature_time) {
    m_signature_time = signature_time;
    m_signature_time_isSet = true;
}

bool OAISignature::is_signature_time_Set() const{
    return m_signature_time_isSet;
}

bool OAISignature::is_signature_time_Valid() const{
    return m_signature_time_isValid;
}

QString OAISignature::getUserId() const {
    return m_user_id;
}
void OAISignature::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAISignature::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAISignature::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAISignature::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISignature::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
