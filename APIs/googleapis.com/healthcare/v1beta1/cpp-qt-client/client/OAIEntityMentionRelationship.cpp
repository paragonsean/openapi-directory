/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityMentionRelationship.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityMentionRelationship::OAIEntityMentionRelationship(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityMentionRelationship::OAIEntityMentionRelationship() {
    this->initializeModel();
}

OAIEntityMentionRelationship::~OAIEntityMentionRelationship() {}

void OAIEntityMentionRelationship::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_subject_id_isSet = false;
    m_subject_id_isValid = false;
}

void OAIEntityMentionRelationship::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntityMentionRelationship::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_subject_id_isValid = ::OpenAPI::fromJsonValue(m_subject_id, json[QString("subjectId")]);
    m_subject_id_isSet = !json[QString("subjectId")].isNull() && m_subject_id_isValid;
}

QString OAIEntityMentionRelationship::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntityMentionRelationship::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_subject_id_isSet) {
        obj.insert(QString("subjectId"), ::OpenAPI::toJsonValue(m_subject_id));
    }
    return obj;
}

double OAIEntityMentionRelationship::getConfidence() const {
    return m_confidence;
}
void OAIEntityMentionRelationship::setConfidence(const double &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIEntityMentionRelationship::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIEntityMentionRelationship::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAIEntityMentionRelationship::getObjectId() const {
    return m_object_id;
}
void OAIEntityMentionRelationship::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIEntityMentionRelationship::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIEntityMentionRelationship::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAIEntityMentionRelationship::getSubjectId() const {
    return m_subject_id;
}
void OAIEntityMentionRelationship::setSubjectId(const QString &subject_id) {
    m_subject_id = subject_id;
    m_subject_id_isSet = true;
}

bool OAIEntityMentionRelationship::is_subject_id_Set() const{
    return m_subject_id_isSet;
}

bool OAIEntityMentionRelationship::is_subject_id_Valid() const{
    return m_subject_id_isValid;
}

bool OAIEntityMentionRelationship::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntityMentionRelationship::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
