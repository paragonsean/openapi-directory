/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISegment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISegment::OAISegment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISegment::OAISegment() {
    this->initializeModel();
}

OAISegment::~OAISegment() {}

void OAISegment::initializeModel() {

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_segment_id_isSet = false;
    m_segment_id_isValid = false;

    m_set_id_isSet = false;
    m_set_id_isValid = false;
}

void OAISegment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISegment::fromJsonObject(QJsonObject json) {

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_segment_id_isValid = ::OpenAPI::fromJsonValue(m_segment_id, json[QString("segmentId")]);
    m_segment_id_isSet = !json[QString("segmentId")].isNull() && m_segment_id_isValid;

    m_set_id_isValid = ::OpenAPI::fromJsonValue(m_set_id, json[QString("setId")]);
    m_set_id_isSet = !json[QString("setId")].isNull() && m_set_id_isValid;
}

QString OAISegment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISegment::asJsonObject() const {
    QJsonObject obj;
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_segment_id_isSet) {
        obj.insert(QString("segmentId"), ::OpenAPI::toJsonValue(m_segment_id));
    }
    if (m_set_id_isSet) {
        obj.insert(QString("setId"), ::OpenAPI::toJsonValue(m_set_id));
    }
    return obj;
}

QMap<QString, QString> OAISegment::getFields() const {
    return m_fields;
}
void OAISegment::setFields(const QMap<QString, QString> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAISegment::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAISegment::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAISegment::getSegmentId() const {
    return m_segment_id;
}
void OAISegment::setSegmentId(const QString &segment_id) {
    m_segment_id = segment_id;
    m_segment_id_isSet = true;
}

bool OAISegment::is_segment_id_Set() const{
    return m_segment_id_isSet;
}

bool OAISegment::is_segment_id_Valid() const{
    return m_segment_id_isValid;
}

QString OAISegment::getSetId() const {
    return m_set_id;
}
void OAISegment::setSetId(const QString &set_id) {
    m_set_id = set_id;
    m_set_id_isSet = true;
}

bool OAISegment::is_set_id_Set() const{
    return m_set_id_isSet;
}

bool OAISegment::is_set_id_Valid() const{
    return m_set_id_isValid;
}

bool OAISegment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISegment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
