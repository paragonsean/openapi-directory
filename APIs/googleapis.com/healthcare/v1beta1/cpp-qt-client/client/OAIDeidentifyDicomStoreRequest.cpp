/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeidentifyDicomStoreRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeidentifyDicomStoreRequest::OAIDeidentifyDicomStoreRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeidentifyDicomStoreRequest::OAIDeidentifyDicomStoreRequest() {
    this->initializeModel();
}

OAIDeidentifyDicomStoreRequest::~OAIDeidentifyDicomStoreRequest() {}

void OAIDeidentifyDicomStoreRequest::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_destination_store_isSet = false;
    m_destination_store_isValid = false;

    m_filter_config_isSet = false;
    m_filter_config_isValid = false;

    m_gcs_config_uri_isSet = false;
    m_gcs_config_uri_isValid = false;
}

void OAIDeidentifyDicomStoreRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeidentifyDicomStoreRequest::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_destination_store_isValid = ::OpenAPI::fromJsonValue(m_destination_store, json[QString("destinationStore")]);
    m_destination_store_isSet = !json[QString("destinationStore")].isNull() && m_destination_store_isValid;

    m_filter_config_isValid = ::OpenAPI::fromJsonValue(m_filter_config, json[QString("filterConfig")]);
    m_filter_config_isSet = !json[QString("filterConfig")].isNull() && m_filter_config_isValid;

    m_gcs_config_uri_isValid = ::OpenAPI::fromJsonValue(m_gcs_config_uri, json[QString("gcsConfigUri")]);
    m_gcs_config_uri_isSet = !json[QString("gcsConfigUri")].isNull() && m_gcs_config_uri_isValid;
}

QString OAIDeidentifyDicomStoreRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeidentifyDicomStoreRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_destination_store_isSet) {
        obj.insert(QString("destinationStore"), ::OpenAPI::toJsonValue(m_destination_store));
    }
    if (m_filter_config.isSet()) {
        obj.insert(QString("filterConfig"), ::OpenAPI::toJsonValue(m_filter_config));
    }
    if (m_gcs_config_uri_isSet) {
        obj.insert(QString("gcsConfigUri"), ::OpenAPI::toJsonValue(m_gcs_config_uri));
    }
    return obj;
}

OAIDeidentifyConfig OAIDeidentifyDicomStoreRequest::getConfig() const {
    return m_config;
}
void OAIDeidentifyDicomStoreRequest::setConfig(const OAIDeidentifyConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIDeidentifyDicomStoreRequest::is_config_Set() const{
    return m_config_isSet;
}

bool OAIDeidentifyDicomStoreRequest::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIDeidentifyDicomStoreRequest::getDestinationStore() const {
    return m_destination_store;
}
void OAIDeidentifyDicomStoreRequest::setDestinationStore(const QString &destination_store) {
    m_destination_store = destination_store;
    m_destination_store_isSet = true;
}

bool OAIDeidentifyDicomStoreRequest::is_destination_store_Set() const{
    return m_destination_store_isSet;
}

bool OAIDeidentifyDicomStoreRequest::is_destination_store_Valid() const{
    return m_destination_store_isValid;
}

OAIDicomFilterConfig OAIDeidentifyDicomStoreRequest::getFilterConfig() const {
    return m_filter_config;
}
void OAIDeidentifyDicomStoreRequest::setFilterConfig(const OAIDicomFilterConfig &filter_config) {
    m_filter_config = filter_config;
    m_filter_config_isSet = true;
}

bool OAIDeidentifyDicomStoreRequest::is_filter_config_Set() const{
    return m_filter_config_isSet;
}

bool OAIDeidentifyDicomStoreRequest::is_filter_config_Valid() const{
    return m_filter_config_isValid;
}

QString OAIDeidentifyDicomStoreRequest::getGcsConfigUri() const {
    return m_gcs_config_uri;
}
void OAIDeidentifyDicomStoreRequest::setGcsConfigUri(const QString &gcs_config_uri) {
    m_gcs_config_uri = gcs_config_uri;
    m_gcs_config_uri_isSet = true;
}

bool OAIDeidentifyDicomStoreRequest::is_gcs_config_uri_Set() const{
    return m_gcs_config_uri_isSet;
}

bool OAIDeidentifyDicomStoreRequest::is_gcs_config_uri_Valid() const{
    return m_gcs_config_uri_isValid;
}

bool OAIDeidentifyDicomStoreRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_config_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeidentifyDicomStoreRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
