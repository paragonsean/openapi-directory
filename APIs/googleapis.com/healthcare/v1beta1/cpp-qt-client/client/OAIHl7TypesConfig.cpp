/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHl7TypesConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHl7TypesConfig::OAIHl7TypesConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHl7TypesConfig::OAIHl7TypesConfig() {
    this->initializeModel();
}

OAIHl7TypesConfig::~OAIHl7TypesConfig() {}

void OAIHl7TypesConfig::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIHl7TypesConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHl7TypesConfig::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIHl7TypesConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHl7TypesConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_type.size() > 0) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version.size() > 0) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIType> OAIHl7TypesConfig::getType() const {
    return m_type;
}
void OAIHl7TypesConfig::setType(const QList<OAIType> &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIHl7TypesConfig::is_type_Set() const{
    return m_type_isSet;
}

bool OAIHl7TypesConfig::is_type_Valid() const{
    return m_type_isValid;
}

QList<OAIVersionSource> OAIHl7TypesConfig::getVersion() const {
    return m_version;
}
void OAIHl7TypesConfig::setVersion(const QList<OAIVersionSource> &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIHl7TypesConfig::is_version_Set() const{
    return m_version_isSet;
}

bool OAIHl7TypesConfig::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIHl7TypesConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHl7TypesConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
