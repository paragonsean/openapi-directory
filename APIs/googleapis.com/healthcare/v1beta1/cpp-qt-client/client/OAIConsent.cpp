/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsent::OAIConsent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsent::OAIConsent() {
    this->initializeModel();
}

OAIConsent::~OAIConsent() {}

void OAIConsent::initializeModel() {

    m_consent_artifact_isSet = false;
    m_consent_artifact_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_policies_isSet = false;
    m_policies_isValid = false;

    m_revision_create_time_isSet = false;
    m_revision_create_time_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIConsent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsent::fromJsonObject(QJsonObject json) {

    m_consent_artifact_isValid = ::OpenAPI::fromJsonValue(m_consent_artifact, json[QString("consentArtifact")]);
    m_consent_artifact_isSet = !json[QString("consentArtifact")].isNull() && m_consent_artifact_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_policies_isValid = ::OpenAPI::fromJsonValue(m_policies, json[QString("policies")]);
    m_policies_isSet = !json[QString("policies")].isNull() && m_policies_isValid;

    m_revision_create_time_isValid = ::OpenAPI::fromJsonValue(m_revision_create_time, json[QString("revisionCreateTime")]);
    m_revision_create_time_isSet = !json[QString("revisionCreateTime")].isNull() && m_revision_create_time_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIConsent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsent::asJsonObject() const {
    QJsonObject obj;
    if (m_consent_artifact_isSet) {
        obj.insert(QString("consentArtifact"), ::OpenAPI::toJsonValue(m_consent_artifact));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_policies.size() > 0) {
        obj.insert(QString("policies"), ::OpenAPI::toJsonValue(m_policies));
    }
    if (m_revision_create_time_isSet) {
        obj.insert(QString("revisionCreateTime"), ::OpenAPI::toJsonValue(m_revision_create_time));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIConsent::getConsentArtifact() const {
    return m_consent_artifact;
}
void OAIConsent::setConsentArtifact(const QString &consent_artifact) {
    m_consent_artifact = consent_artifact;
    m_consent_artifact_isSet = true;
}

bool OAIConsent::is_consent_artifact_Set() const{
    return m_consent_artifact_isSet;
}

bool OAIConsent::is_consent_artifact_Valid() const{
    return m_consent_artifact_isValid;
}

QString OAIConsent::getExpireTime() const {
    return m_expire_time;
}
void OAIConsent::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIConsent::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIConsent::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QMap<QString, QString> OAIConsent::getMetadata() const {
    return m_metadata;
}
void OAIConsent::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIConsent::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIConsent::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIConsent::getName() const {
    return m_name;
}
void OAIConsent::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConsent::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConsent::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIGoogleCloudHealthcareV1beta1ConsentPolicy> OAIConsent::getPolicies() const {
    return m_policies;
}
void OAIConsent::setPolicies(const QList<OAIGoogleCloudHealthcareV1beta1ConsentPolicy> &policies) {
    m_policies = policies;
    m_policies_isSet = true;
}

bool OAIConsent::is_policies_Set() const{
    return m_policies_isSet;
}

bool OAIConsent::is_policies_Valid() const{
    return m_policies_isValid;
}

QString OAIConsent::getRevisionCreateTime() const {
    return m_revision_create_time;
}
void OAIConsent::setRevisionCreateTime(const QString &revision_create_time) {
    m_revision_create_time = revision_create_time;
    m_revision_create_time_isSet = true;
}

bool OAIConsent::is_revision_create_time_Set() const{
    return m_revision_create_time_isSet;
}

bool OAIConsent::is_revision_create_time_Valid() const{
    return m_revision_create_time_isValid;
}

QString OAIConsent::getRevisionId() const {
    return m_revision_id;
}
void OAIConsent::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAIConsent::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAIConsent::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

QString OAIConsent::getState() const {
    return m_state;
}
void OAIConsent::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIConsent::is_state_Set() const{
    return m_state_isSet;
}

bool OAIConsent::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIConsent::getTtl() const {
    return m_ttl;
}
void OAIConsent::setTtl(const QString &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIConsent::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIConsent::is_ttl_Valid() const{
    return m_ttl_isValid;
}

QString OAIConsent::getUserId() const {
    return m_user_id;
}
void OAIConsent::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIConsent::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIConsent::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIConsent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent_artifact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
