/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInfoTypeTransformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInfoTypeTransformation::OAIInfoTypeTransformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInfoTypeTransformation::OAIInfoTypeTransformation() {
    this->initializeModel();
}

OAIInfoTypeTransformation::~OAIInfoTypeTransformation() {}

void OAIInfoTypeTransformation::initializeModel() {

    m_character_mask_config_isSet = false;
    m_character_mask_config_isValid = false;

    m_crypto_hash_config_isSet = false;
    m_crypto_hash_config_isValid = false;

    m_date_shift_config_isSet = false;
    m_date_shift_config_isValid = false;

    m_info_types_isSet = false;
    m_info_types_isValid = false;

    m_redact_config_isSet = false;
    m_redact_config_isValid = false;

    m_replace_with_info_type_config_isSet = false;
    m_replace_with_info_type_config_isValid = false;
}

void OAIInfoTypeTransformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInfoTypeTransformation::fromJsonObject(QJsonObject json) {

    m_character_mask_config_isValid = ::OpenAPI::fromJsonValue(m_character_mask_config, json[QString("characterMaskConfig")]);
    m_character_mask_config_isSet = !json[QString("characterMaskConfig")].isNull() && m_character_mask_config_isValid;

    m_crypto_hash_config_isValid = ::OpenAPI::fromJsonValue(m_crypto_hash_config, json[QString("cryptoHashConfig")]);
    m_crypto_hash_config_isSet = !json[QString("cryptoHashConfig")].isNull() && m_crypto_hash_config_isValid;

    m_date_shift_config_isValid = ::OpenAPI::fromJsonValue(m_date_shift_config, json[QString("dateShiftConfig")]);
    m_date_shift_config_isSet = !json[QString("dateShiftConfig")].isNull() && m_date_shift_config_isValid;

    m_info_types_isValid = ::OpenAPI::fromJsonValue(m_info_types, json[QString("infoTypes")]);
    m_info_types_isSet = !json[QString("infoTypes")].isNull() && m_info_types_isValid;

    m_redact_config_isValid = ::OpenAPI::fromJsonValue(m_redact_config, json[QString("redactConfig")]);
    m_redact_config_isSet = !json[QString("redactConfig")].isNull() && m_redact_config_isValid;

    m_replace_with_info_type_config_isValid = ::OpenAPI::fromJsonValue(m_replace_with_info_type_config, json[QString("replaceWithInfoTypeConfig")]);
    m_replace_with_info_type_config_isSet = !json[QString("replaceWithInfoTypeConfig")].isNull() && m_replace_with_info_type_config_isValid;
}

QString OAIInfoTypeTransformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInfoTypeTransformation::asJsonObject() const {
    QJsonObject obj;
    if (m_character_mask_config.isSet()) {
        obj.insert(QString("characterMaskConfig"), ::OpenAPI::toJsonValue(m_character_mask_config));
    }
    if (m_crypto_hash_config.isSet()) {
        obj.insert(QString("cryptoHashConfig"), ::OpenAPI::toJsonValue(m_crypto_hash_config));
    }
    if (m_date_shift_config.isSet()) {
        obj.insert(QString("dateShiftConfig"), ::OpenAPI::toJsonValue(m_date_shift_config));
    }
    if (m_info_types.size() > 0) {
        obj.insert(QString("infoTypes"), ::OpenAPI::toJsonValue(m_info_types));
    }
    if (m_redact_config_isSet) {
        obj.insert(QString("redactConfig"), ::OpenAPI::toJsonValue(m_redact_config));
    }
    if (m_replace_with_info_type_config_isSet) {
        obj.insert(QString("replaceWithInfoTypeConfig"), ::OpenAPI::toJsonValue(m_replace_with_info_type_config));
    }
    return obj;
}

OAICharacterMaskConfig OAIInfoTypeTransformation::getCharacterMaskConfig() const {
    return m_character_mask_config;
}
void OAIInfoTypeTransformation::setCharacterMaskConfig(const OAICharacterMaskConfig &character_mask_config) {
    m_character_mask_config = character_mask_config;
    m_character_mask_config_isSet = true;
}

bool OAIInfoTypeTransformation::is_character_mask_config_Set() const{
    return m_character_mask_config_isSet;
}

bool OAIInfoTypeTransformation::is_character_mask_config_Valid() const{
    return m_character_mask_config_isValid;
}

OAICryptoHashConfig OAIInfoTypeTransformation::getCryptoHashConfig() const {
    return m_crypto_hash_config;
}
void OAIInfoTypeTransformation::setCryptoHashConfig(const OAICryptoHashConfig &crypto_hash_config) {
    m_crypto_hash_config = crypto_hash_config;
    m_crypto_hash_config_isSet = true;
}

bool OAIInfoTypeTransformation::is_crypto_hash_config_Set() const{
    return m_crypto_hash_config_isSet;
}

bool OAIInfoTypeTransformation::is_crypto_hash_config_Valid() const{
    return m_crypto_hash_config_isValid;
}

OAIDateShiftConfig OAIInfoTypeTransformation::getDateShiftConfig() const {
    return m_date_shift_config;
}
void OAIInfoTypeTransformation::setDateShiftConfig(const OAIDateShiftConfig &date_shift_config) {
    m_date_shift_config = date_shift_config;
    m_date_shift_config_isSet = true;
}

bool OAIInfoTypeTransformation::is_date_shift_config_Set() const{
    return m_date_shift_config_isSet;
}

bool OAIInfoTypeTransformation::is_date_shift_config_Valid() const{
    return m_date_shift_config_isValid;
}

QList<QString> OAIInfoTypeTransformation::getInfoTypes() const {
    return m_info_types;
}
void OAIInfoTypeTransformation::setInfoTypes(const QList<QString> &info_types) {
    m_info_types = info_types;
    m_info_types_isSet = true;
}

bool OAIInfoTypeTransformation::is_info_types_Set() const{
    return m_info_types_isSet;
}

bool OAIInfoTypeTransformation::is_info_types_Valid() const{
    return m_info_types_isValid;
}

OAIObject OAIInfoTypeTransformation::getRedactConfig() const {
    return m_redact_config;
}
void OAIInfoTypeTransformation::setRedactConfig(const OAIObject &redact_config) {
    m_redact_config = redact_config;
    m_redact_config_isSet = true;
}

bool OAIInfoTypeTransformation::is_redact_config_Set() const{
    return m_redact_config_isSet;
}

bool OAIInfoTypeTransformation::is_redact_config_Valid() const{
    return m_redact_config_isValid;
}

OAIObject OAIInfoTypeTransformation::getReplaceWithInfoTypeConfig() const {
    return m_replace_with_info_type_config;
}
void OAIInfoTypeTransformation::setReplaceWithInfoTypeConfig(const OAIObject &replace_with_info_type_config) {
    m_replace_with_info_type_config = replace_with_info_type_config;
    m_replace_with_info_type_config_isSet = true;
}

bool OAIInfoTypeTransformation::is_replace_with_info_type_config_Set() const{
    return m_replace_with_info_type_config_isSet;
}

bool OAIInfoTypeTransformation::is_replace_with_info_type_config_Valid() const{
    return m_replace_with_info_type_config_isValid;
}

bool OAIInfoTypeTransformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_character_mask_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crypto_hash_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_shift_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_redact_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_with_info_type_config_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInfoTypeTransformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
