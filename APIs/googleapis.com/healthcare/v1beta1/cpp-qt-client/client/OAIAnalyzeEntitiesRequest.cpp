/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyzeEntitiesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyzeEntitiesRequest::OAIAnalyzeEntitiesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyzeEntitiesRequest::OAIAnalyzeEntitiesRequest() {
    this->initializeModel();
}

OAIAnalyzeEntitiesRequest::~OAIAnalyzeEntitiesRequest() {}

void OAIAnalyzeEntitiesRequest::initializeModel() {

    m_alternative_output_format_isSet = false;
    m_alternative_output_format_isValid = false;

    m_document_content_isSet = false;
    m_document_content_isValid = false;

    m_licensed_vocabularies_isSet = false;
    m_licensed_vocabularies_isValid = false;
}

void OAIAnalyzeEntitiesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyzeEntitiesRequest::fromJsonObject(QJsonObject json) {

    m_alternative_output_format_isValid = ::OpenAPI::fromJsonValue(m_alternative_output_format, json[QString("alternativeOutputFormat")]);
    m_alternative_output_format_isSet = !json[QString("alternativeOutputFormat")].isNull() && m_alternative_output_format_isValid;

    m_document_content_isValid = ::OpenAPI::fromJsonValue(m_document_content, json[QString("documentContent")]);
    m_document_content_isSet = !json[QString("documentContent")].isNull() && m_document_content_isValid;

    m_licensed_vocabularies_isValid = ::OpenAPI::fromJsonValue(m_licensed_vocabularies, json[QString("licensedVocabularies")]);
    m_licensed_vocabularies_isSet = !json[QString("licensedVocabularies")].isNull() && m_licensed_vocabularies_isValid;
}

QString OAIAnalyzeEntitiesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyzeEntitiesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_alternative_output_format_isSet) {
        obj.insert(QString("alternativeOutputFormat"), ::OpenAPI::toJsonValue(m_alternative_output_format));
    }
    if (m_document_content_isSet) {
        obj.insert(QString("documentContent"), ::OpenAPI::toJsonValue(m_document_content));
    }
    if (m_licensed_vocabularies.size() > 0) {
        obj.insert(QString("licensedVocabularies"), ::OpenAPI::toJsonValue(m_licensed_vocabularies));
    }
    return obj;
}

QString OAIAnalyzeEntitiesRequest::getAlternativeOutputFormat() const {
    return m_alternative_output_format;
}
void OAIAnalyzeEntitiesRequest::setAlternativeOutputFormat(const QString &alternative_output_format) {
    m_alternative_output_format = alternative_output_format;
    m_alternative_output_format_isSet = true;
}

bool OAIAnalyzeEntitiesRequest::is_alternative_output_format_Set() const{
    return m_alternative_output_format_isSet;
}

bool OAIAnalyzeEntitiesRequest::is_alternative_output_format_Valid() const{
    return m_alternative_output_format_isValid;
}

QString OAIAnalyzeEntitiesRequest::getDocumentContent() const {
    return m_document_content;
}
void OAIAnalyzeEntitiesRequest::setDocumentContent(const QString &document_content) {
    m_document_content = document_content;
    m_document_content_isSet = true;
}

bool OAIAnalyzeEntitiesRequest::is_document_content_Set() const{
    return m_document_content_isSet;
}

bool OAIAnalyzeEntitiesRequest::is_document_content_Valid() const{
    return m_document_content_isValid;
}

QList<QString> OAIAnalyzeEntitiesRequest::getLicensedVocabularies() const {
    return m_licensed_vocabularies;
}
void OAIAnalyzeEntitiesRequest::setLicensedVocabularies(const QList<QString> &licensed_vocabularies) {
    m_licensed_vocabularies = licensed_vocabularies;
    m_licensed_vocabularies_isSet = true;
}

bool OAIAnalyzeEntitiesRequest::is_licensed_vocabularies_Set() const{
    return m_licensed_vocabularies_isSet;
}

bool OAIAnalyzeEntitiesRequest::is_licensed_vocabularies_Valid() const{
    return m_licensed_vocabularies_isValid;
}

bool OAIAnalyzeEntitiesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternative_output_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_licensed_vocabularies.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyzeEntitiesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
