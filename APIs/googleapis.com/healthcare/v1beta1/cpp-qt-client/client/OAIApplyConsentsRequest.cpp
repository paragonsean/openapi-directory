/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplyConsentsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplyConsentsRequest::OAIApplyConsentsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplyConsentsRequest::OAIApplyConsentsRequest() {
    this->initializeModel();
}

OAIApplyConsentsRequest::~OAIApplyConsentsRequest() {}

void OAIApplyConsentsRequest::initializeModel() {

    m_patient_scope_isSet = false;
    m_patient_scope_isValid = false;

    m_time_range_isSet = false;
    m_time_range_isValid = false;

    m_validate_only_isSet = false;
    m_validate_only_isValid = false;
}

void OAIApplyConsentsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplyConsentsRequest::fromJsonObject(QJsonObject json) {

    m_patient_scope_isValid = ::OpenAPI::fromJsonValue(m_patient_scope, json[QString("patientScope")]);
    m_patient_scope_isSet = !json[QString("patientScope")].isNull() && m_patient_scope_isValid;

    m_time_range_isValid = ::OpenAPI::fromJsonValue(m_time_range, json[QString("timeRange")]);
    m_time_range_isSet = !json[QString("timeRange")].isNull() && m_time_range_isValid;

    m_validate_only_isValid = ::OpenAPI::fromJsonValue(m_validate_only, json[QString("validateOnly")]);
    m_validate_only_isSet = !json[QString("validateOnly")].isNull() && m_validate_only_isValid;
}

QString OAIApplyConsentsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplyConsentsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_patient_scope.isSet()) {
        obj.insert(QString("patientScope"), ::OpenAPI::toJsonValue(m_patient_scope));
    }
    if (m_time_range.isSet()) {
        obj.insert(QString("timeRange"), ::OpenAPI::toJsonValue(m_time_range));
    }
    if (m_validate_only_isSet) {
        obj.insert(QString("validateOnly"), ::OpenAPI::toJsonValue(m_validate_only));
    }
    return obj;
}

OAIPatientScope OAIApplyConsentsRequest::getPatientScope() const {
    return m_patient_scope;
}
void OAIApplyConsentsRequest::setPatientScope(const OAIPatientScope &patient_scope) {
    m_patient_scope = patient_scope;
    m_patient_scope_isSet = true;
}

bool OAIApplyConsentsRequest::is_patient_scope_Set() const{
    return m_patient_scope_isSet;
}

bool OAIApplyConsentsRequest::is_patient_scope_Valid() const{
    return m_patient_scope_isValid;
}

OAITimeRange OAIApplyConsentsRequest::getTimeRange() const {
    return m_time_range;
}
void OAIApplyConsentsRequest::setTimeRange(const OAITimeRange &time_range) {
    m_time_range = time_range;
    m_time_range_isSet = true;
}

bool OAIApplyConsentsRequest::is_time_range_Set() const{
    return m_time_range_isSet;
}

bool OAIApplyConsentsRequest::is_time_range_Valid() const{
    return m_time_range_isValid;
}

bool OAIApplyConsentsRequest::isValidateOnly() const {
    return m_validate_only;
}
void OAIApplyConsentsRequest::setValidateOnly(const bool &validate_only) {
    m_validate_only = validate_only;
    m_validate_only_isSet = true;
}

bool OAIApplyConsentsRequest::is_validate_only_Set() const{
    return m_validate_only_isSet;
}

bool OAIApplyConsentsRequest::is_validate_only_Valid() const{
    return m_validate_only_isValid;
}

bool OAIApplyConsentsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_patient_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplyConsentsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
