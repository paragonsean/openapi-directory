/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckDataAccessResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckDataAccessResponse::OAICheckDataAccessResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckDataAccessResponse::OAICheckDataAccessResponse() {
    this->initializeModel();
}

OAICheckDataAccessResponse::~OAICheckDataAccessResponse() {}

void OAICheckDataAccessResponse::initializeModel() {

    m_consent_details_isSet = false;
    m_consent_details_isValid = false;

    m_consented_isSet = false;
    m_consented_isValid = false;
}

void OAICheckDataAccessResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckDataAccessResponse::fromJsonObject(QJsonObject json) {

    m_consent_details_isValid = ::OpenAPI::fromJsonValue(m_consent_details, json[QString("consentDetails")]);
    m_consent_details_isSet = !json[QString("consentDetails")].isNull() && m_consent_details_isValid;

    m_consented_isValid = ::OpenAPI::fromJsonValue(m_consented, json[QString("consented")]);
    m_consented_isSet = !json[QString("consented")].isNull() && m_consented_isValid;
}

QString OAICheckDataAccessResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckDataAccessResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_consent_details.size() > 0) {
        obj.insert(QString("consentDetails"), ::OpenAPI::toJsonValue(m_consent_details));
    }
    if (m_consented_isSet) {
        obj.insert(QString("consented"), ::OpenAPI::toJsonValue(m_consented));
    }
    return obj;
}

QMap<QString, OAIConsentEvaluation> OAICheckDataAccessResponse::getConsentDetails() const {
    return m_consent_details;
}
void OAICheckDataAccessResponse::setConsentDetails(const QMap<QString, OAIConsentEvaluation> &consent_details) {
    m_consent_details = consent_details;
    m_consent_details_isSet = true;
}

bool OAICheckDataAccessResponse::is_consent_details_Set() const{
    return m_consent_details_isSet;
}

bool OAICheckDataAccessResponse::is_consent_details_Valid() const{
    return m_consent_details_isValid;
}

bool OAICheckDataAccessResponse::isConsented() const {
    return m_consented;
}
void OAICheckDataAccessResponse::setConsented(const bool &consented) {
    m_consented = consented;
    m_consented_isSet = true;
}

bool OAICheckDataAccessResponse::is_consented_Set() const{
    return m_consented_isSet;
}

bool OAICheckDataAccessResponse::is_consented_Valid() const{
    return m_consented_isValid;
}

bool OAICheckDataAccessResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_consented_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckDataAccessResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
