/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextConfig::OAITextConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextConfig::OAITextConfig() {
    this->initializeModel();
}

OAITextConfig::~OAITextConfig() {}

void OAITextConfig::initializeModel() {

    m_additional_transformations_isSet = false;
    m_additional_transformations_isValid = false;

    m_exclude_info_types_isSet = false;
    m_exclude_info_types_isValid = false;

    m_profile_type_isSet = false;
    m_profile_type_isValid = false;

    m_transformations_isSet = false;
    m_transformations_isValid = false;
}

void OAITextConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextConfig::fromJsonObject(QJsonObject json) {

    m_additional_transformations_isValid = ::OpenAPI::fromJsonValue(m_additional_transformations, json[QString("additionalTransformations")]);
    m_additional_transformations_isSet = !json[QString("additionalTransformations")].isNull() && m_additional_transformations_isValid;

    m_exclude_info_types_isValid = ::OpenAPI::fromJsonValue(m_exclude_info_types, json[QString("excludeInfoTypes")]);
    m_exclude_info_types_isSet = !json[QString("excludeInfoTypes")].isNull() && m_exclude_info_types_isValid;

    m_profile_type_isValid = ::OpenAPI::fromJsonValue(m_profile_type, json[QString("profileType")]);
    m_profile_type_isSet = !json[QString("profileType")].isNull() && m_profile_type_isValid;

    m_transformations_isValid = ::OpenAPI::fromJsonValue(m_transformations, json[QString("transformations")]);
    m_transformations_isSet = !json[QString("transformations")].isNull() && m_transformations_isValid;
}

QString OAITextConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_transformations.size() > 0) {
        obj.insert(QString("additionalTransformations"), ::OpenAPI::toJsonValue(m_additional_transformations));
    }
    if (m_exclude_info_types.size() > 0) {
        obj.insert(QString("excludeInfoTypes"), ::OpenAPI::toJsonValue(m_exclude_info_types));
    }
    if (m_profile_type_isSet) {
        obj.insert(QString("profileType"), ::OpenAPI::toJsonValue(m_profile_type));
    }
    if (m_transformations.size() > 0) {
        obj.insert(QString("transformations"), ::OpenAPI::toJsonValue(m_transformations));
    }
    return obj;
}

QList<OAIInfoTypeTransformation> OAITextConfig::getAdditionalTransformations() const {
    return m_additional_transformations;
}
void OAITextConfig::setAdditionalTransformations(const QList<OAIInfoTypeTransformation> &additional_transformations) {
    m_additional_transformations = additional_transformations;
    m_additional_transformations_isSet = true;
}

bool OAITextConfig::is_additional_transformations_Set() const{
    return m_additional_transformations_isSet;
}

bool OAITextConfig::is_additional_transformations_Valid() const{
    return m_additional_transformations_isValid;
}

QList<QString> OAITextConfig::getExcludeInfoTypes() const {
    return m_exclude_info_types;
}
void OAITextConfig::setExcludeInfoTypes(const QList<QString> &exclude_info_types) {
    m_exclude_info_types = exclude_info_types;
    m_exclude_info_types_isSet = true;
}

bool OAITextConfig::is_exclude_info_types_Set() const{
    return m_exclude_info_types_isSet;
}

bool OAITextConfig::is_exclude_info_types_Valid() const{
    return m_exclude_info_types_isValid;
}

QString OAITextConfig::getProfileType() const {
    return m_profile_type;
}
void OAITextConfig::setProfileType(const QString &profile_type) {
    m_profile_type = profile_type;
    m_profile_type_isSet = true;
}

bool OAITextConfig::is_profile_type_Set() const{
    return m_profile_type_isSet;
}

bool OAITextConfig::is_profile_type_Valid() const{
    return m_profile_type_isValid;
}

QList<OAIInfoTypeTransformation> OAITextConfig::getTransformations() const {
    return m_transformations;
}
void OAITextConfig::setTransformations(const QList<OAIInfoTypeTransformation> &transformations) {
    m_transformations = transformations;
    m_transformations_isSet = true;
}

bool OAITextConfig::is_transformations_Set() const{
    return m_transformations_isSet;
}

bool OAITextConfig::is_transformations_Valid() const{
    return m_transformations_isValid;
}

bool OAITextConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_transformations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_info_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
