/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationMetadata::OAIOperationMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationMetadata::OAIOperationMetadata() {
    this->initializeModel();
}

OAIOperationMetadata::~OAIOperationMetadata() {}

void OAIOperationMetadata::initializeModel() {

    m_api_method_name_isSet = false;
    m_api_method_name_isValid = false;

    m_cancel_requested_isSet = false;
    m_cancel_requested_isValid = false;

    m_counter_isSet = false;
    m_counter_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_logs_url_isSet = false;
    m_logs_url_isValid = false;
}

void OAIOperationMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperationMetadata::fromJsonObject(QJsonObject json) {

    m_api_method_name_isValid = ::OpenAPI::fromJsonValue(m_api_method_name, json[QString("apiMethodName")]);
    m_api_method_name_isSet = !json[QString("apiMethodName")].isNull() && m_api_method_name_isValid;

    m_cancel_requested_isValid = ::OpenAPI::fromJsonValue(m_cancel_requested, json[QString("cancelRequested")]);
    m_cancel_requested_isSet = !json[QString("cancelRequested")].isNull() && m_cancel_requested_isValid;

    m_counter_isValid = ::OpenAPI::fromJsonValue(m_counter, json[QString("counter")]);
    m_counter_isSet = !json[QString("counter")].isNull() && m_counter_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_logs_url_isValid = ::OpenAPI::fromJsonValue(m_logs_url, json[QString("logsUrl")]);
    m_logs_url_isSet = !json[QString("logsUrl")].isNull() && m_logs_url_isValid;
}

QString OAIOperationMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperationMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_api_method_name_isSet) {
        obj.insert(QString("apiMethodName"), ::OpenAPI::toJsonValue(m_api_method_name));
    }
    if (m_cancel_requested_isSet) {
        obj.insert(QString("cancelRequested"), ::OpenAPI::toJsonValue(m_cancel_requested));
    }
    if (m_counter.isSet()) {
        obj.insert(QString("counter"), ::OpenAPI::toJsonValue(m_counter));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_logs_url_isSet) {
        obj.insert(QString("logsUrl"), ::OpenAPI::toJsonValue(m_logs_url));
    }
    return obj;
}

QString OAIOperationMetadata::getApiMethodName() const {
    return m_api_method_name;
}
void OAIOperationMetadata::setApiMethodName(const QString &api_method_name) {
    m_api_method_name = api_method_name;
    m_api_method_name_isSet = true;
}

bool OAIOperationMetadata::is_api_method_name_Set() const{
    return m_api_method_name_isSet;
}

bool OAIOperationMetadata::is_api_method_name_Valid() const{
    return m_api_method_name_isValid;
}

bool OAIOperationMetadata::isCancelRequested() const {
    return m_cancel_requested;
}
void OAIOperationMetadata::setCancelRequested(const bool &cancel_requested) {
    m_cancel_requested = cancel_requested;
    m_cancel_requested_isSet = true;
}

bool OAIOperationMetadata::is_cancel_requested_Set() const{
    return m_cancel_requested_isSet;
}

bool OAIOperationMetadata::is_cancel_requested_Valid() const{
    return m_cancel_requested_isValid;
}

OAIProgressCounter OAIOperationMetadata::getCounter() const {
    return m_counter;
}
void OAIOperationMetadata::setCounter(const OAIProgressCounter &counter) {
    m_counter = counter;
    m_counter_isSet = true;
}

bool OAIOperationMetadata::is_counter_Set() const{
    return m_counter_isSet;
}

bool OAIOperationMetadata::is_counter_Valid() const{
    return m_counter_isValid;
}

QString OAIOperationMetadata::getCreateTime() const {
    return m_create_time;
}
void OAIOperationMetadata::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIOperationMetadata::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIOperationMetadata::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIOperationMetadata::getEndTime() const {
    return m_end_time;
}
void OAIOperationMetadata::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIOperationMetadata::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIOperationMetadata::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIOperationMetadata::getLogsUrl() const {
    return m_logs_url;
}
void OAIOperationMetadata::setLogsUrl(const QString &logs_url) {
    m_logs_url = logs_url;
    m_logs_url_isSet = true;
}

bool OAIOperationMetadata::is_logs_url_Set() const{
    return m_logs_url_isSet;
}

bool OAIOperationMetadata::is_logs_url_Valid() const{
    return m_logs_url_isValid;
}

bool OAIOperationMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_method_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperationMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
