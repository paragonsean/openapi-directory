/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage::OAIMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage::OAIMessage() {
    this->initializeModel();
}

OAIMessage::~OAIMessage() {}

void OAIMessage::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_message_type_isSet = false;
    m_message_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parsed_data_isSet = false;
    m_parsed_data_isValid = false;

    m_patient_ids_isSet = false;
    m_patient_ids_isValid = false;

    m_schematized_data_isSet = false;
    m_schematized_data_isValid = false;

    m_send_facility_isSet = false;
    m_send_facility_isValid = false;

    m_send_time_isSet = false;
    m_send_time_isValid = false;
}

void OAIMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_message_type_isValid = ::OpenAPI::fromJsonValue(m_message_type, json[QString("messageType")]);
    m_message_type_isSet = !json[QString("messageType")].isNull() && m_message_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parsed_data_isValid = ::OpenAPI::fromJsonValue(m_parsed_data, json[QString("parsedData")]);
    m_parsed_data_isSet = !json[QString("parsedData")].isNull() && m_parsed_data_isValid;

    m_patient_ids_isValid = ::OpenAPI::fromJsonValue(m_patient_ids, json[QString("patientIds")]);
    m_patient_ids_isSet = !json[QString("patientIds")].isNull() && m_patient_ids_isValid;

    m_schematized_data_isValid = ::OpenAPI::fromJsonValue(m_schematized_data, json[QString("schematizedData")]);
    m_schematized_data_isSet = !json[QString("schematizedData")].isNull() && m_schematized_data_isValid;

    m_send_facility_isValid = ::OpenAPI::fromJsonValue(m_send_facility, json[QString("sendFacility")]);
    m_send_facility_isSet = !json[QString("sendFacility")].isNull() && m_send_facility_isValid;

    m_send_time_isValid = ::OpenAPI::fromJsonValue(m_send_time, json[QString("sendTime")]);
    m_send_time_isSet = !json[QString("sendTime")].isNull() && m_send_time_isValid;
}

QString OAIMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_message_type_isSet) {
        obj.insert(QString("messageType"), ::OpenAPI::toJsonValue(m_message_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parsed_data.isSet()) {
        obj.insert(QString("parsedData"), ::OpenAPI::toJsonValue(m_parsed_data));
    }
    if (m_patient_ids.size() > 0) {
        obj.insert(QString("patientIds"), ::OpenAPI::toJsonValue(m_patient_ids));
    }
    if (m_schematized_data.isSet()) {
        obj.insert(QString("schematizedData"), ::OpenAPI::toJsonValue(m_schematized_data));
    }
    if (m_send_facility_isSet) {
        obj.insert(QString("sendFacility"), ::OpenAPI::toJsonValue(m_send_facility));
    }
    if (m_send_time_isSet) {
        obj.insert(QString("sendTime"), ::OpenAPI::toJsonValue(m_send_time));
    }
    return obj;
}

QString OAIMessage::getCreateTime() const {
    return m_create_time;
}
void OAIMessage::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIMessage::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIMessage::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QByteArray OAIMessage::getData() const {
    return m_data;
}
void OAIMessage::setData(const QByteArray &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIMessage::is_data_Set() const{
    return m_data_isSet;
}

bool OAIMessage::is_data_Valid() const{
    return m_data_isValid;
}

QMap<QString, QString> OAIMessage::getLabels() const {
    return m_labels;
}
void OAIMessage::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIMessage::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIMessage::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIMessage::getMessageType() const {
    return m_message_type;
}
void OAIMessage::setMessageType(const QString &message_type) {
    m_message_type = message_type;
    m_message_type_isSet = true;
}

bool OAIMessage::is_message_type_Set() const{
    return m_message_type_isSet;
}

bool OAIMessage::is_message_type_Valid() const{
    return m_message_type_isValid;
}

QString OAIMessage::getName() const {
    return m_name;
}
void OAIMessage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMessage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMessage::is_name_Valid() const{
    return m_name_isValid;
}

OAIParsedData OAIMessage::getParsedData() const {
    return m_parsed_data;
}
void OAIMessage::setParsedData(const OAIParsedData &parsed_data) {
    m_parsed_data = parsed_data;
    m_parsed_data_isSet = true;
}

bool OAIMessage::is_parsed_data_Set() const{
    return m_parsed_data_isSet;
}

bool OAIMessage::is_parsed_data_Valid() const{
    return m_parsed_data_isValid;
}

QList<OAIPatientId> OAIMessage::getPatientIds() const {
    return m_patient_ids;
}
void OAIMessage::setPatientIds(const QList<OAIPatientId> &patient_ids) {
    m_patient_ids = patient_ids;
    m_patient_ids_isSet = true;
}

bool OAIMessage::is_patient_ids_Set() const{
    return m_patient_ids_isSet;
}

bool OAIMessage::is_patient_ids_Valid() const{
    return m_patient_ids_isValid;
}

OAISchematizedData OAIMessage::getSchematizedData() const {
    return m_schematized_data;
}
void OAIMessage::setSchematizedData(const OAISchematizedData &schematized_data) {
    m_schematized_data = schematized_data;
    m_schematized_data_isSet = true;
}

bool OAIMessage::is_schematized_data_Set() const{
    return m_schematized_data_isSet;
}

bool OAIMessage::is_schematized_data_Valid() const{
    return m_schematized_data_isValid;
}

QString OAIMessage::getSendFacility() const {
    return m_send_facility;
}
void OAIMessage::setSendFacility(const QString &send_facility) {
    m_send_facility = send_facility;
    m_send_facility_isSet = true;
}

bool OAIMessage::is_send_facility_Set() const{
    return m_send_facility_isSet;
}

bool OAIMessage::is_send_facility_Valid() const{
    return m_send_facility_isValid;
}

QString OAIMessage::getSendTime() const {
    return m_send_time;
}
void OAIMessage::setSendTime(const QString &send_time) {
    m_send_time = send_time;
    m_send_time_isSet = true;
}

bool OAIMessage::is_send_time_Set() const{
    return m_send_time_isSet;
}

bool OAIMessage::is_send_time_Valid() const{
    return m_send_time_isValid;
}

bool OAIMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parsed_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_patient_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schematized_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_facility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
