/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExplainDataAccessConsentInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExplainDataAccessConsentInfo::OAIExplainDataAccessConsentInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExplainDataAccessConsentInfo::OAIExplainDataAccessConsentInfo() {
    this->initializeModel();
}

OAIExplainDataAccessConsentInfo::~OAIExplainDataAccessConsentInfo() {}

void OAIExplainDataAccessConsentInfo::initializeModel() {

    m_cascade_origins_isSet = false;
    m_cascade_origins_isValid = false;

    m_consent_resource_isSet = false;
    m_consent_resource_isValid = false;

    m_enforcement_time_isSet = false;
    m_enforcement_time_isValid = false;

    m_matching_accessor_scopes_isSet = false;
    m_matching_accessor_scopes_isValid = false;

    m_patient_consent_owner_isSet = false;
    m_patient_consent_owner_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_variants_isSet = false;
    m_variants_isValid = false;
}

void OAIExplainDataAccessConsentInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExplainDataAccessConsentInfo::fromJsonObject(QJsonObject json) {

    m_cascade_origins_isValid = ::OpenAPI::fromJsonValue(m_cascade_origins, json[QString("cascadeOrigins")]);
    m_cascade_origins_isSet = !json[QString("cascadeOrigins")].isNull() && m_cascade_origins_isValid;

    m_consent_resource_isValid = ::OpenAPI::fromJsonValue(m_consent_resource, json[QString("consentResource")]);
    m_consent_resource_isSet = !json[QString("consentResource")].isNull() && m_consent_resource_isValid;

    m_enforcement_time_isValid = ::OpenAPI::fromJsonValue(m_enforcement_time, json[QString("enforcementTime")]);
    m_enforcement_time_isSet = !json[QString("enforcementTime")].isNull() && m_enforcement_time_isValid;

    m_matching_accessor_scopes_isValid = ::OpenAPI::fromJsonValue(m_matching_accessor_scopes, json[QString("matchingAccessorScopes")]);
    m_matching_accessor_scopes_isSet = !json[QString("matchingAccessorScopes")].isNull() && m_matching_accessor_scopes_isValid;

    m_patient_consent_owner_isValid = ::OpenAPI::fromJsonValue(m_patient_consent_owner, json[QString("patientConsentOwner")]);
    m_patient_consent_owner_isSet = !json[QString("patientConsentOwner")].isNull() && m_patient_consent_owner_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_variants_isValid = ::OpenAPI::fromJsonValue(m_variants, json[QString("variants")]);
    m_variants_isSet = !json[QString("variants")].isNull() && m_variants_isValid;
}

QString OAIExplainDataAccessConsentInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExplainDataAccessConsentInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_cascade_origins.size() > 0) {
        obj.insert(QString("cascadeOrigins"), ::OpenAPI::toJsonValue(m_cascade_origins));
    }
    if (m_consent_resource_isSet) {
        obj.insert(QString("consentResource"), ::OpenAPI::toJsonValue(m_consent_resource));
    }
    if (m_enforcement_time_isSet) {
        obj.insert(QString("enforcementTime"), ::OpenAPI::toJsonValue(m_enforcement_time));
    }
    if (m_matching_accessor_scopes.size() > 0) {
        obj.insert(QString("matchingAccessorScopes"), ::OpenAPI::toJsonValue(m_matching_accessor_scopes));
    }
    if (m_patient_consent_owner_isSet) {
        obj.insert(QString("patientConsentOwner"), ::OpenAPI::toJsonValue(m_patient_consent_owner));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_variants.size() > 0) {
        obj.insert(QString("variants"), ::OpenAPI::toJsonValue(m_variants));
    }
    return obj;
}

QList<QString> OAIExplainDataAccessConsentInfo::getCascadeOrigins() const {
    return m_cascade_origins;
}
void OAIExplainDataAccessConsentInfo::setCascadeOrigins(const QList<QString> &cascade_origins) {
    m_cascade_origins = cascade_origins;
    m_cascade_origins_isSet = true;
}

bool OAIExplainDataAccessConsentInfo::is_cascade_origins_Set() const{
    return m_cascade_origins_isSet;
}

bool OAIExplainDataAccessConsentInfo::is_cascade_origins_Valid() const{
    return m_cascade_origins_isValid;
}

QString OAIExplainDataAccessConsentInfo::getConsentResource() const {
    return m_consent_resource;
}
void OAIExplainDataAccessConsentInfo::setConsentResource(const QString &consent_resource) {
    m_consent_resource = consent_resource;
    m_consent_resource_isSet = true;
}

bool OAIExplainDataAccessConsentInfo::is_consent_resource_Set() const{
    return m_consent_resource_isSet;
}

bool OAIExplainDataAccessConsentInfo::is_consent_resource_Valid() const{
    return m_consent_resource_isValid;
}

QString OAIExplainDataAccessConsentInfo::getEnforcementTime() const {
    return m_enforcement_time;
}
void OAIExplainDataAccessConsentInfo::setEnforcementTime(const QString &enforcement_time) {
    m_enforcement_time = enforcement_time;
    m_enforcement_time_isSet = true;
}

bool OAIExplainDataAccessConsentInfo::is_enforcement_time_Set() const{
    return m_enforcement_time_isSet;
}

bool OAIExplainDataAccessConsentInfo::is_enforcement_time_Valid() const{
    return m_enforcement_time_isValid;
}

QList<OAIConsentAccessorScope> OAIExplainDataAccessConsentInfo::getMatchingAccessorScopes() const {
    return m_matching_accessor_scopes;
}
void OAIExplainDataAccessConsentInfo::setMatchingAccessorScopes(const QList<OAIConsentAccessorScope> &matching_accessor_scopes) {
    m_matching_accessor_scopes = matching_accessor_scopes;
    m_matching_accessor_scopes_isSet = true;
}

bool OAIExplainDataAccessConsentInfo::is_matching_accessor_scopes_Set() const{
    return m_matching_accessor_scopes_isSet;
}

bool OAIExplainDataAccessConsentInfo::is_matching_accessor_scopes_Valid() const{
    return m_matching_accessor_scopes_isValid;
}

QString OAIExplainDataAccessConsentInfo::getPatientConsentOwner() const {
    return m_patient_consent_owner;
}
void OAIExplainDataAccessConsentInfo::setPatientConsentOwner(const QString &patient_consent_owner) {
    m_patient_consent_owner = patient_consent_owner;
    m_patient_consent_owner_isSet = true;
}

bool OAIExplainDataAccessConsentInfo::is_patient_consent_owner_Set() const{
    return m_patient_consent_owner_isSet;
}

bool OAIExplainDataAccessConsentInfo::is_patient_consent_owner_Valid() const{
    return m_patient_consent_owner_isValid;
}

QString OAIExplainDataAccessConsentInfo::getType() const {
    return m_type;
}
void OAIExplainDataAccessConsentInfo::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIExplainDataAccessConsentInfo::is_type_Set() const{
    return m_type_isSet;
}

bool OAIExplainDataAccessConsentInfo::is_type_Valid() const{
    return m_type_isValid;
}

QList<QString> OAIExplainDataAccessConsentInfo::getVariants() const {
    return m_variants;
}
void OAIExplainDataAccessConsentInfo::setVariants(const QList<QString> &variants) {
    m_variants = variants;
    m_variants_isSet = true;
}

bool OAIExplainDataAccessConsentInfo::is_variants_Set() const{
    return m_variants_isSet;
}

bool OAIExplainDataAccessConsentInfo::is_variants_Valid() const{
    return m_variants_isValid;
}

bool OAIExplainDataAccessConsentInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cascade_origins.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforcement_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matching_accessor_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_patient_consent_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variants.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExplainDataAccessConsentInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
