/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplyConsentsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplyConsentsResponse::OAIApplyConsentsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplyConsentsResponse::OAIApplyConsentsResponse() {
    this->initializeModel();
}

OAIApplyConsentsResponse::~OAIApplyConsentsResponse() {}

void OAIApplyConsentsResponse::initializeModel() {

    m_affected_resources_isSet = false;
    m_affected_resources_isValid = false;

    m_consent_apply_failure_isSet = false;
    m_consent_apply_failure_isValid = false;

    m_consent_apply_success_isSet = false;
    m_consent_apply_success_isValid = false;

    m_failed_resources_isSet = false;
    m_failed_resources_isValid = false;
}

void OAIApplyConsentsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplyConsentsResponse::fromJsonObject(QJsonObject json) {

    m_affected_resources_isValid = ::OpenAPI::fromJsonValue(m_affected_resources, json[QString("affectedResources")]);
    m_affected_resources_isSet = !json[QString("affectedResources")].isNull() && m_affected_resources_isValid;

    m_consent_apply_failure_isValid = ::OpenAPI::fromJsonValue(m_consent_apply_failure, json[QString("consentApplyFailure")]);
    m_consent_apply_failure_isSet = !json[QString("consentApplyFailure")].isNull() && m_consent_apply_failure_isValid;

    m_consent_apply_success_isValid = ::OpenAPI::fromJsonValue(m_consent_apply_success, json[QString("consentApplySuccess")]);
    m_consent_apply_success_isSet = !json[QString("consentApplySuccess")].isNull() && m_consent_apply_success_isValid;

    m_failed_resources_isValid = ::OpenAPI::fromJsonValue(m_failed_resources, json[QString("failedResources")]);
    m_failed_resources_isSet = !json[QString("failedResources")].isNull() && m_failed_resources_isValid;
}

QString OAIApplyConsentsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplyConsentsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_affected_resources_isSet) {
        obj.insert(QString("affectedResources"), ::OpenAPI::toJsonValue(m_affected_resources));
    }
    if (m_consent_apply_failure_isSet) {
        obj.insert(QString("consentApplyFailure"), ::OpenAPI::toJsonValue(m_consent_apply_failure));
    }
    if (m_consent_apply_success_isSet) {
        obj.insert(QString("consentApplySuccess"), ::OpenAPI::toJsonValue(m_consent_apply_success));
    }
    if (m_failed_resources_isSet) {
        obj.insert(QString("failedResources"), ::OpenAPI::toJsonValue(m_failed_resources));
    }
    return obj;
}

QString OAIApplyConsentsResponse::getAffectedResources() const {
    return m_affected_resources;
}
void OAIApplyConsentsResponse::setAffectedResources(const QString &affected_resources) {
    m_affected_resources = affected_resources;
    m_affected_resources_isSet = true;
}

bool OAIApplyConsentsResponse::is_affected_resources_Set() const{
    return m_affected_resources_isSet;
}

bool OAIApplyConsentsResponse::is_affected_resources_Valid() const{
    return m_affected_resources_isValid;
}

QString OAIApplyConsentsResponse::getConsentApplyFailure() const {
    return m_consent_apply_failure;
}
void OAIApplyConsentsResponse::setConsentApplyFailure(const QString &consent_apply_failure) {
    m_consent_apply_failure = consent_apply_failure;
    m_consent_apply_failure_isSet = true;
}

bool OAIApplyConsentsResponse::is_consent_apply_failure_Set() const{
    return m_consent_apply_failure_isSet;
}

bool OAIApplyConsentsResponse::is_consent_apply_failure_Valid() const{
    return m_consent_apply_failure_isValid;
}

QString OAIApplyConsentsResponse::getConsentApplySuccess() const {
    return m_consent_apply_success;
}
void OAIApplyConsentsResponse::setConsentApplySuccess(const QString &consent_apply_success) {
    m_consent_apply_success = consent_apply_success;
    m_consent_apply_success_isSet = true;
}

bool OAIApplyConsentsResponse::is_consent_apply_success_Set() const{
    return m_consent_apply_success_isSet;
}

bool OAIApplyConsentsResponse::is_consent_apply_success_Valid() const{
    return m_consent_apply_success_isValid;
}

QString OAIApplyConsentsResponse::getFailedResources() const {
    return m_failed_resources;
}
void OAIApplyConsentsResponse::setFailedResources(const QString &failed_resources) {
    m_failed_resources = failed_resources;
    m_failed_resources_isSet = true;
}

bool OAIApplyConsentsResponse::is_failed_resources_Set() const{
    return m_failed_resources_isSet;
}

bool OAIApplyConsentsResponse::is_failed_resources_Valid() const{
    return m_failed_resources_isValid;
}

bool OAIApplyConsentsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affected_resources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent_apply_failure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent_apply_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_resources_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplyConsentsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
