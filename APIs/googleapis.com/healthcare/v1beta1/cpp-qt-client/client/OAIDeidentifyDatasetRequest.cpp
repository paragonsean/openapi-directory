/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeidentifyDatasetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeidentifyDatasetRequest::OAIDeidentifyDatasetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeidentifyDatasetRequest::OAIDeidentifyDatasetRequest() {
    this->initializeModel();
}

OAIDeidentifyDatasetRequest::~OAIDeidentifyDatasetRequest() {}

void OAIDeidentifyDatasetRequest::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_destination_dataset_isSet = false;
    m_destination_dataset_isValid = false;

    m_gcs_config_uri_isSet = false;
    m_gcs_config_uri_isValid = false;
}

void OAIDeidentifyDatasetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeidentifyDatasetRequest::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_destination_dataset_isValid = ::OpenAPI::fromJsonValue(m_destination_dataset, json[QString("destinationDataset")]);
    m_destination_dataset_isSet = !json[QString("destinationDataset")].isNull() && m_destination_dataset_isValid;

    m_gcs_config_uri_isValid = ::OpenAPI::fromJsonValue(m_gcs_config_uri, json[QString("gcsConfigUri")]);
    m_gcs_config_uri_isSet = !json[QString("gcsConfigUri")].isNull() && m_gcs_config_uri_isValid;
}

QString OAIDeidentifyDatasetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeidentifyDatasetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_destination_dataset_isSet) {
        obj.insert(QString("destinationDataset"), ::OpenAPI::toJsonValue(m_destination_dataset));
    }
    if (m_gcs_config_uri_isSet) {
        obj.insert(QString("gcsConfigUri"), ::OpenAPI::toJsonValue(m_gcs_config_uri));
    }
    return obj;
}

OAIDeidentifyConfig OAIDeidentifyDatasetRequest::getConfig() const {
    return m_config;
}
void OAIDeidentifyDatasetRequest::setConfig(const OAIDeidentifyConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIDeidentifyDatasetRequest::is_config_Set() const{
    return m_config_isSet;
}

bool OAIDeidentifyDatasetRequest::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIDeidentifyDatasetRequest::getDestinationDataset() const {
    return m_destination_dataset;
}
void OAIDeidentifyDatasetRequest::setDestinationDataset(const QString &destination_dataset) {
    m_destination_dataset = destination_dataset;
    m_destination_dataset_isSet = true;
}

bool OAIDeidentifyDatasetRequest::is_destination_dataset_Set() const{
    return m_destination_dataset_isSet;
}

bool OAIDeidentifyDatasetRequest::is_destination_dataset_Valid() const{
    return m_destination_dataset_isValid;
}

QString OAIDeidentifyDatasetRequest::getGcsConfigUri() const {
    return m_gcs_config_uri;
}
void OAIDeidentifyDatasetRequest::setGcsConfigUri(const QString &gcs_config_uri) {
    m_gcs_config_uri = gcs_config_uri;
    m_gcs_config_uri_isSet = true;
}

bool OAIDeidentifyDatasetRequest::is_gcs_config_uri_Set() const{
    return m_gcs_config_uri_isSet;
}

bool OAIDeidentifyDatasetRequest::is_gcs_config_uri_Valid() const{
    return m_gcs_config_uri_isValid;
}

bool OAIDeidentifyDatasetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_dataset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_config_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeidentifyDatasetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
