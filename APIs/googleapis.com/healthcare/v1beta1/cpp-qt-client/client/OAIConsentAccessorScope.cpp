/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsentAccessorScope.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsentAccessorScope::OAIConsentAccessorScope(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsentAccessorScope::OAIConsentAccessorScope() {
    this->initializeModel();
}

OAIConsentAccessorScope::~OAIConsentAccessorScope() {}

void OAIConsentAccessorScope::initializeModel() {

    m_actor_isSet = false;
    m_actor_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_purpose_isSet = false;
    m_purpose_isValid = false;
}

void OAIConsentAccessorScope::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsentAccessorScope::fromJsonObject(QJsonObject json) {

    m_actor_isValid = ::OpenAPI::fromJsonValue(m_actor, json[QString("actor")]);
    m_actor_isSet = !json[QString("actor")].isNull() && m_actor_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_purpose_isValid = ::OpenAPI::fromJsonValue(m_purpose, json[QString("purpose")]);
    m_purpose_isSet = !json[QString("purpose")].isNull() && m_purpose_isValid;
}

QString OAIConsentAccessorScope::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsentAccessorScope::asJsonObject() const {
    QJsonObject obj;
    if (m_actor_isSet) {
        obj.insert(QString("actor"), ::OpenAPI::toJsonValue(m_actor));
    }
    if (m_environment_isSet) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_purpose_isSet) {
        obj.insert(QString("purpose"), ::OpenAPI::toJsonValue(m_purpose));
    }
    return obj;
}

QString OAIConsentAccessorScope::getActor() const {
    return m_actor;
}
void OAIConsentAccessorScope::setActor(const QString &actor) {
    m_actor = actor;
    m_actor_isSet = true;
}

bool OAIConsentAccessorScope::is_actor_Set() const{
    return m_actor_isSet;
}

bool OAIConsentAccessorScope::is_actor_Valid() const{
    return m_actor_isValid;
}

QString OAIConsentAccessorScope::getEnvironment() const {
    return m_environment;
}
void OAIConsentAccessorScope::setEnvironment(const QString &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIConsentAccessorScope::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIConsentAccessorScope::is_environment_Valid() const{
    return m_environment_isValid;
}

QString OAIConsentAccessorScope::getPurpose() const {
    return m_purpose;
}
void OAIConsentAccessorScope::setPurpose(const QString &purpose) {
    m_purpose = purpose;
    m_purpose_isSet = true;
}

bool OAIConsentAccessorScope::is_purpose_Set() const{
    return m_purpose_isSet;
}

bool OAIConsentAccessorScope::is_purpose_Valid() const{
    return m_purpose_isValid;
}

bool OAIConsentAccessorScope::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purpose_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsentAccessorScope::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
