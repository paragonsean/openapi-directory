/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeidentifyConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeidentifyConfig::OAIDeidentifyConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeidentifyConfig::OAIDeidentifyConfig() {
    this->initializeModel();
}

OAIDeidentifyConfig::~OAIDeidentifyConfig() {}

void OAIDeidentifyConfig::initializeModel() {

    m_annotation_isSet = false;
    m_annotation_isValid = false;

    m_dicom_isSet = false;
    m_dicom_isValid = false;

    m_dicom_tag_config_isSet = false;
    m_dicom_tag_config_isValid = false;

    m_fhir_isSet = false;
    m_fhir_isValid = false;

    m_fhir_field_config_isSet = false;
    m_fhir_field_config_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_operation_metadata_isSet = false;
    m_operation_metadata_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_use_regional_data_processing_isSet = false;
    m_use_regional_data_processing_isValid = false;
}

void OAIDeidentifyConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeidentifyConfig::fromJsonObject(QJsonObject json) {

    m_annotation_isValid = ::OpenAPI::fromJsonValue(m_annotation, json[QString("annotation")]);
    m_annotation_isSet = !json[QString("annotation")].isNull() && m_annotation_isValid;

    m_dicom_isValid = ::OpenAPI::fromJsonValue(m_dicom, json[QString("dicom")]);
    m_dicom_isSet = !json[QString("dicom")].isNull() && m_dicom_isValid;

    m_dicom_tag_config_isValid = ::OpenAPI::fromJsonValue(m_dicom_tag_config, json[QString("dicomTagConfig")]);
    m_dicom_tag_config_isSet = !json[QString("dicomTagConfig")].isNull() && m_dicom_tag_config_isValid;

    m_fhir_isValid = ::OpenAPI::fromJsonValue(m_fhir, json[QString("fhir")]);
    m_fhir_isSet = !json[QString("fhir")].isNull() && m_fhir_isValid;

    m_fhir_field_config_isValid = ::OpenAPI::fromJsonValue(m_fhir_field_config, json[QString("fhirFieldConfig")]);
    m_fhir_field_config_isSet = !json[QString("fhirFieldConfig")].isNull() && m_fhir_field_config_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_operation_metadata_isValid = ::OpenAPI::fromJsonValue(m_operation_metadata, json[QString("operationMetadata")]);
    m_operation_metadata_isSet = !json[QString("operationMetadata")].isNull() && m_operation_metadata_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_use_regional_data_processing_isValid = ::OpenAPI::fromJsonValue(m_use_regional_data_processing, json[QString("useRegionalDataProcessing")]);
    m_use_regional_data_processing_isSet = !json[QString("useRegionalDataProcessing")].isNull() && m_use_regional_data_processing_isValid;
}

QString OAIDeidentifyConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeidentifyConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation.isSet()) {
        obj.insert(QString("annotation"), ::OpenAPI::toJsonValue(m_annotation));
    }
    if (m_dicom.isSet()) {
        obj.insert(QString("dicom"), ::OpenAPI::toJsonValue(m_dicom));
    }
    if (m_dicom_tag_config.isSet()) {
        obj.insert(QString("dicomTagConfig"), ::OpenAPI::toJsonValue(m_dicom_tag_config));
    }
    if (m_fhir.isSet()) {
        obj.insert(QString("fhir"), ::OpenAPI::toJsonValue(m_fhir));
    }
    if (m_fhir_field_config.isSet()) {
        obj.insert(QString("fhirFieldConfig"), ::OpenAPI::toJsonValue(m_fhir_field_config));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_operation_metadata.isSet()) {
        obj.insert(QString("operationMetadata"), ::OpenAPI::toJsonValue(m_operation_metadata));
    }
    if (m_text.isSet()) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_use_regional_data_processing_isSet) {
        obj.insert(QString("useRegionalDataProcessing"), ::OpenAPI::toJsonValue(m_use_regional_data_processing));
    }
    return obj;
}

OAIAnnotationConfig OAIDeidentifyConfig::getAnnotation() const {
    return m_annotation;
}
void OAIDeidentifyConfig::setAnnotation(const OAIAnnotationConfig &annotation) {
    m_annotation = annotation;
    m_annotation_isSet = true;
}

bool OAIDeidentifyConfig::is_annotation_Set() const{
    return m_annotation_isSet;
}

bool OAIDeidentifyConfig::is_annotation_Valid() const{
    return m_annotation_isValid;
}

OAIDicomConfig OAIDeidentifyConfig::getDicom() const {
    return m_dicom;
}
void OAIDeidentifyConfig::setDicom(const OAIDicomConfig &dicom) {
    m_dicom = dicom;
    m_dicom_isSet = true;
}

bool OAIDeidentifyConfig::is_dicom_Set() const{
    return m_dicom_isSet;
}

bool OAIDeidentifyConfig::is_dicom_Valid() const{
    return m_dicom_isValid;
}

OAIDicomTagConfig OAIDeidentifyConfig::getDicomTagConfig() const {
    return m_dicom_tag_config;
}
void OAIDeidentifyConfig::setDicomTagConfig(const OAIDicomTagConfig &dicom_tag_config) {
    m_dicom_tag_config = dicom_tag_config;
    m_dicom_tag_config_isSet = true;
}

bool OAIDeidentifyConfig::is_dicom_tag_config_Set() const{
    return m_dicom_tag_config_isSet;
}

bool OAIDeidentifyConfig::is_dicom_tag_config_Valid() const{
    return m_dicom_tag_config_isValid;
}

OAIFhirConfig OAIDeidentifyConfig::getFhir() const {
    return m_fhir;
}
void OAIDeidentifyConfig::setFhir(const OAIFhirConfig &fhir) {
    m_fhir = fhir;
    m_fhir_isSet = true;
}

bool OAIDeidentifyConfig::is_fhir_Set() const{
    return m_fhir_isSet;
}

bool OAIDeidentifyConfig::is_fhir_Valid() const{
    return m_fhir_isValid;
}

OAIFhirFieldConfig OAIDeidentifyConfig::getFhirFieldConfig() const {
    return m_fhir_field_config;
}
void OAIDeidentifyConfig::setFhirFieldConfig(const OAIFhirFieldConfig &fhir_field_config) {
    m_fhir_field_config = fhir_field_config;
    m_fhir_field_config_isSet = true;
}

bool OAIDeidentifyConfig::is_fhir_field_config_Set() const{
    return m_fhir_field_config_isSet;
}

bool OAIDeidentifyConfig::is_fhir_field_config_Valid() const{
    return m_fhir_field_config_isValid;
}

OAIImageConfig OAIDeidentifyConfig::getImage() const {
    return m_image;
}
void OAIDeidentifyConfig::setImage(const OAIImageConfig &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIDeidentifyConfig::is_image_Set() const{
    return m_image_isSet;
}

bool OAIDeidentifyConfig::is_image_Valid() const{
    return m_image_isValid;
}

OAIDeidentifyOperationMetadata OAIDeidentifyConfig::getOperationMetadata() const {
    return m_operation_metadata;
}
void OAIDeidentifyConfig::setOperationMetadata(const OAIDeidentifyOperationMetadata &operation_metadata) {
    m_operation_metadata = operation_metadata;
    m_operation_metadata_isSet = true;
}

bool OAIDeidentifyConfig::is_operation_metadata_Set() const{
    return m_operation_metadata_isSet;
}

bool OAIDeidentifyConfig::is_operation_metadata_Valid() const{
    return m_operation_metadata_isValid;
}

OAITextConfig OAIDeidentifyConfig::getText() const {
    return m_text;
}
void OAIDeidentifyConfig::setText(const OAITextConfig &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIDeidentifyConfig::is_text_Set() const{
    return m_text_isSet;
}

bool OAIDeidentifyConfig::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIDeidentifyConfig::isUseRegionalDataProcessing() const {
    return m_use_regional_data_processing;
}
void OAIDeidentifyConfig::setUseRegionalDataProcessing(const bool &use_regional_data_processing) {
    m_use_regional_data_processing = use_regional_data_processing;
    m_use_regional_data_processing_isSet = true;
}

bool OAIDeidentifyConfig::is_use_regional_data_processing_Set() const{
    return m_use_regional_data_processing_isSet;
}

bool OAIDeidentifyConfig::is_use_regional_data_processing_Valid() const{
    return m_use_regional_data_processing_isValid;
}

bool OAIDeidentifyConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dicom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dicom_tag_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fhir.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fhir_field_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_regional_data_processing_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeidentifyConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
