/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsentConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsentConfig::OAIConsentConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsentConfig::OAIConsentConfig() {
    this->initializeModel();
}

OAIConsentConfig::~OAIConsentConfig() {}

void OAIConsentConfig::initializeModel() {

    m_access_determination_log_config_isSet = false;
    m_access_determination_log_config_isValid = false;

    m_access_enforced_isSet = false;
    m_access_enforced_isValid = false;

    m_consent_header_handling_isSet = false;
    m_consent_header_handling_isValid = false;

    m_enforced_admin_consents_isSet = false;
    m_enforced_admin_consents_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIConsentConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsentConfig::fromJsonObject(QJsonObject json) {

    m_access_determination_log_config_isValid = ::OpenAPI::fromJsonValue(m_access_determination_log_config, json[QString("accessDeterminationLogConfig")]);
    m_access_determination_log_config_isSet = !json[QString("accessDeterminationLogConfig")].isNull() && m_access_determination_log_config_isValid;

    m_access_enforced_isValid = ::OpenAPI::fromJsonValue(m_access_enforced, json[QString("accessEnforced")]);
    m_access_enforced_isSet = !json[QString("accessEnforced")].isNull() && m_access_enforced_isValid;

    m_consent_header_handling_isValid = ::OpenAPI::fromJsonValue(m_consent_header_handling, json[QString("consentHeaderHandling")]);
    m_consent_header_handling_isSet = !json[QString("consentHeaderHandling")].isNull() && m_consent_header_handling_isValid;

    m_enforced_admin_consents_isValid = ::OpenAPI::fromJsonValue(m_enforced_admin_consents, json[QString("enforcedAdminConsents")]);
    m_enforced_admin_consents_isSet = !json[QString("enforcedAdminConsents")].isNull() && m_enforced_admin_consents_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIConsentConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsentConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_access_determination_log_config.isSet()) {
        obj.insert(QString("accessDeterminationLogConfig"), ::OpenAPI::toJsonValue(m_access_determination_log_config));
    }
    if (m_access_enforced_isSet) {
        obj.insert(QString("accessEnforced"), ::OpenAPI::toJsonValue(m_access_enforced));
    }
    if (m_consent_header_handling.isSet()) {
        obj.insert(QString("consentHeaderHandling"), ::OpenAPI::toJsonValue(m_consent_header_handling));
    }
    if (m_enforced_admin_consents.size() > 0) {
        obj.insert(QString("enforcedAdminConsents"), ::OpenAPI::toJsonValue(m_enforced_admin_consents));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIAccessDeterminationLogConfig OAIConsentConfig::getAccessDeterminationLogConfig() const {
    return m_access_determination_log_config;
}
void OAIConsentConfig::setAccessDeterminationLogConfig(const OAIAccessDeterminationLogConfig &access_determination_log_config) {
    m_access_determination_log_config = access_determination_log_config;
    m_access_determination_log_config_isSet = true;
}

bool OAIConsentConfig::is_access_determination_log_config_Set() const{
    return m_access_determination_log_config_isSet;
}

bool OAIConsentConfig::is_access_determination_log_config_Valid() const{
    return m_access_determination_log_config_isValid;
}

bool OAIConsentConfig::isAccessEnforced() const {
    return m_access_enforced;
}
void OAIConsentConfig::setAccessEnforced(const bool &access_enforced) {
    m_access_enforced = access_enforced;
    m_access_enforced_isSet = true;
}

bool OAIConsentConfig::is_access_enforced_Set() const{
    return m_access_enforced_isSet;
}

bool OAIConsentConfig::is_access_enforced_Valid() const{
    return m_access_enforced_isValid;
}

OAIConsentHeaderHandling OAIConsentConfig::getConsentHeaderHandling() const {
    return m_consent_header_handling;
}
void OAIConsentConfig::setConsentHeaderHandling(const OAIConsentHeaderHandling &consent_header_handling) {
    m_consent_header_handling = consent_header_handling;
    m_consent_header_handling_isSet = true;
}

bool OAIConsentConfig::is_consent_header_handling_Set() const{
    return m_consent_header_handling_isSet;
}

bool OAIConsentConfig::is_consent_header_handling_Valid() const{
    return m_consent_header_handling_isValid;
}

QList<QString> OAIConsentConfig::getEnforcedAdminConsents() const {
    return m_enforced_admin_consents;
}
void OAIConsentConfig::setEnforcedAdminConsents(const QList<QString> &enforced_admin_consents) {
    m_enforced_admin_consents = enforced_admin_consents;
    m_enforced_admin_consents_isSet = true;
}

bool OAIConsentConfig::is_enforced_admin_consents_Set() const{
    return m_enforced_admin_consents_isSet;
}

bool OAIConsentConfig::is_enforced_admin_consents_Valid() const{
    return m_enforced_admin_consents_isValid;
}

QString OAIConsentConfig::getVersion() const {
    return m_version;
}
void OAIConsentConfig::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIConsentConfig::is_version_Set() const{
    return m_version_isSet;
}

bool OAIConsentConfig::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIConsentConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_determination_log_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_enforced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent_header_handling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforced_admin_consents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsentConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
