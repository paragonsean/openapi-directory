/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetBlobStorageSettingsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetBlobStorageSettingsRequest::OAISetBlobStorageSettingsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetBlobStorageSettingsRequest::OAISetBlobStorageSettingsRequest() {
    this->initializeModel();
}

OAISetBlobStorageSettingsRequest::~OAISetBlobStorageSettingsRequest() {}

void OAISetBlobStorageSettingsRequest::initializeModel() {

    m_blob_storage_settings_isSet = false;
    m_blob_storage_settings_isValid = false;

    m_filter_config_isSet = false;
    m_filter_config_isValid = false;
}

void OAISetBlobStorageSettingsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetBlobStorageSettingsRequest::fromJsonObject(QJsonObject json) {

    m_blob_storage_settings_isValid = ::OpenAPI::fromJsonValue(m_blob_storage_settings, json[QString("blobStorageSettings")]);
    m_blob_storage_settings_isSet = !json[QString("blobStorageSettings")].isNull() && m_blob_storage_settings_isValid;

    m_filter_config_isValid = ::OpenAPI::fromJsonValue(m_filter_config, json[QString("filterConfig")]);
    m_filter_config_isSet = !json[QString("filterConfig")].isNull() && m_filter_config_isValid;
}

QString OAISetBlobStorageSettingsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetBlobStorageSettingsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_blob_storage_settings.isSet()) {
        obj.insert(QString("blobStorageSettings"), ::OpenAPI::toJsonValue(m_blob_storage_settings));
    }
    if (m_filter_config.isSet()) {
        obj.insert(QString("filterConfig"), ::OpenAPI::toJsonValue(m_filter_config));
    }
    return obj;
}

OAIBlobStorageSettings OAISetBlobStorageSettingsRequest::getBlobStorageSettings() const {
    return m_blob_storage_settings;
}
void OAISetBlobStorageSettingsRequest::setBlobStorageSettings(const OAIBlobStorageSettings &blob_storage_settings) {
    m_blob_storage_settings = blob_storage_settings;
    m_blob_storage_settings_isSet = true;
}

bool OAISetBlobStorageSettingsRequest::is_blob_storage_settings_Set() const{
    return m_blob_storage_settings_isSet;
}

bool OAISetBlobStorageSettingsRequest::is_blob_storage_settings_Valid() const{
    return m_blob_storage_settings_isValid;
}

OAIDicomFilterConfig OAISetBlobStorageSettingsRequest::getFilterConfig() const {
    return m_filter_config;
}
void OAISetBlobStorageSettingsRequest::setFilterConfig(const OAIDicomFilterConfig &filter_config) {
    m_filter_config = filter_config;
    m_filter_config_isSet = true;
}

bool OAISetBlobStorageSettingsRequest::is_filter_config_Set() const{
    return m_filter_config_isSet;
}

bool OAISetBlobStorageSettingsRequest::is_filter_config_Valid() const{
    return m_filter_config_isValid;
}

bool OAISetBlobStorageSettingsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blob_storage_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetBlobStorageSettingsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
