/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnotationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnotationConfig::OAIAnnotationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnotationConfig::OAIAnnotationConfig() {
    this->initializeModel();
}

OAIAnnotationConfig::~OAIAnnotationConfig() {}

void OAIAnnotationConfig::initializeModel() {

    m_annotation_store_name_isSet = false;
    m_annotation_store_name_isValid = false;

    m_store_quote_isSet = false;
    m_store_quote_isValid = false;
}

void OAIAnnotationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnnotationConfig::fromJsonObject(QJsonObject json) {

    m_annotation_store_name_isValid = ::OpenAPI::fromJsonValue(m_annotation_store_name, json[QString("annotationStoreName")]);
    m_annotation_store_name_isSet = !json[QString("annotationStoreName")].isNull() && m_annotation_store_name_isValid;

    m_store_quote_isValid = ::OpenAPI::fromJsonValue(m_store_quote, json[QString("storeQuote")]);
    m_store_quote_isSet = !json[QString("storeQuote")].isNull() && m_store_quote_isValid;
}

QString OAIAnnotationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnnotationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_store_name_isSet) {
        obj.insert(QString("annotationStoreName"), ::OpenAPI::toJsonValue(m_annotation_store_name));
    }
    if (m_store_quote_isSet) {
        obj.insert(QString("storeQuote"), ::OpenAPI::toJsonValue(m_store_quote));
    }
    return obj;
}

QString OAIAnnotationConfig::getAnnotationStoreName() const {
    return m_annotation_store_name;
}
void OAIAnnotationConfig::setAnnotationStoreName(const QString &annotation_store_name) {
    m_annotation_store_name = annotation_store_name;
    m_annotation_store_name_isSet = true;
}

bool OAIAnnotationConfig::is_annotation_store_name_Set() const{
    return m_annotation_store_name_isSet;
}

bool OAIAnnotationConfig::is_annotation_store_name_Valid() const{
    return m_annotation_store_name_isValid;
}

bool OAIAnnotationConfig::isStoreQuote() const {
    return m_store_quote;
}
void OAIAnnotationConfig::setStoreQuote(const bool &store_quote) {
    m_store_quote = store_quote;
    m_store_quote_isSet = true;
}

bool OAIAnnotationConfig::is_store_quote_Set() const{
    return m_store_quote_isSet;
}

bool OAIAnnotationConfig::is_store_quote_Valid() const{
    return m_store_quote_isValid;
}

bool OAIAnnotationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_store_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_quote_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnnotationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
