/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInfoTypeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInfoTypeConfig::OAIInfoTypeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInfoTypeConfig::OAIInfoTypeConfig() {
    this->initializeModel();
}

OAIInfoTypeConfig::~OAIInfoTypeConfig() {}

void OAIInfoTypeConfig::initializeModel() {

    m_evaluate_list_isSet = false;
    m_evaluate_list_isValid = false;

    m_ignore_list_isSet = false;
    m_ignore_list_isValid = false;

    m_strict_matching_isSet = false;
    m_strict_matching_isValid = false;
}

void OAIInfoTypeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInfoTypeConfig::fromJsonObject(QJsonObject json) {

    m_evaluate_list_isValid = ::OpenAPI::fromJsonValue(m_evaluate_list, json[QString("evaluateList")]);
    m_evaluate_list_isSet = !json[QString("evaluateList")].isNull() && m_evaluate_list_isValid;

    m_ignore_list_isValid = ::OpenAPI::fromJsonValue(m_ignore_list, json[QString("ignoreList")]);
    m_ignore_list_isSet = !json[QString("ignoreList")].isNull() && m_ignore_list_isValid;

    m_strict_matching_isValid = ::OpenAPI::fromJsonValue(m_strict_matching, json[QString("strictMatching")]);
    m_strict_matching_isSet = !json[QString("strictMatching")].isNull() && m_strict_matching_isValid;
}

QString OAIInfoTypeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInfoTypeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_evaluate_list.isSet()) {
        obj.insert(QString("evaluateList"), ::OpenAPI::toJsonValue(m_evaluate_list));
    }
    if (m_ignore_list.isSet()) {
        obj.insert(QString("ignoreList"), ::OpenAPI::toJsonValue(m_ignore_list));
    }
    if (m_strict_matching_isSet) {
        obj.insert(QString("strictMatching"), ::OpenAPI::toJsonValue(m_strict_matching));
    }
    return obj;
}

OAIFilterList OAIInfoTypeConfig::getEvaluateList() const {
    return m_evaluate_list;
}
void OAIInfoTypeConfig::setEvaluateList(const OAIFilterList &evaluate_list) {
    m_evaluate_list = evaluate_list;
    m_evaluate_list_isSet = true;
}

bool OAIInfoTypeConfig::is_evaluate_list_Set() const{
    return m_evaluate_list_isSet;
}

bool OAIInfoTypeConfig::is_evaluate_list_Valid() const{
    return m_evaluate_list_isValid;
}

OAIFilterList OAIInfoTypeConfig::getIgnoreList() const {
    return m_ignore_list;
}
void OAIInfoTypeConfig::setIgnoreList(const OAIFilterList &ignore_list) {
    m_ignore_list = ignore_list;
    m_ignore_list_isSet = true;
}

bool OAIInfoTypeConfig::is_ignore_list_Set() const{
    return m_ignore_list_isSet;
}

bool OAIInfoTypeConfig::is_ignore_list_Valid() const{
    return m_ignore_list_isValid;
}

bool OAIInfoTypeConfig::isStrictMatching() const {
    return m_strict_matching;
}
void OAIInfoTypeConfig::setStrictMatching(const bool &strict_matching) {
    m_strict_matching = strict_matching;
    m_strict_matching_isSet = true;
}

bool OAIInfoTypeConfig::is_strict_matching_Set() const{
    return m_strict_matching_isSet;
}

bool OAIInfoTypeConfig::is_strict_matching_Valid() const{
    return m_strict_matching_isValid;
}

bool OAIInfoTypeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evaluate_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_strict_matching_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInfoTypeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
