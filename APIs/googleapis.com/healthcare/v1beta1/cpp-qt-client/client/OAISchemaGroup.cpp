/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchemaGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchemaGroup::OAISchemaGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchemaGroup::OAISchemaGroup() {
    this->initializeModel();
}

OAISchemaGroup::~OAISchemaGroup() {}

void OAISchemaGroup::initializeModel() {

    m_choice_isSet = false;
    m_choice_isValid = false;

    m_max_occurs_isSet = false;
    m_max_occurs_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_min_occurs_isSet = false;
    m_min_occurs_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAISchemaGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchemaGroup::fromJsonObject(QJsonObject json) {

    m_choice_isValid = ::OpenAPI::fromJsonValue(m_choice, json[QString("choice")]);
    m_choice_isSet = !json[QString("choice")].isNull() && m_choice_isValid;

    m_max_occurs_isValid = ::OpenAPI::fromJsonValue(m_max_occurs, json[QString("maxOccurs")]);
    m_max_occurs_isSet = !json[QString("maxOccurs")].isNull() && m_max_occurs_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_min_occurs_isValid = ::OpenAPI::fromJsonValue(m_min_occurs, json[QString("minOccurs")]);
    m_min_occurs_isSet = !json[QString("minOccurs")].isNull() && m_min_occurs_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAISchemaGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchemaGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_choice_isSet) {
        obj.insert(QString("choice"), ::OpenAPI::toJsonValue(m_choice));
    }
    if (m_max_occurs_isSet) {
        obj.insert(QString("maxOccurs"), ::OpenAPI::toJsonValue(m_max_occurs));
    }
    if (m_members.size() > 0) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_min_occurs_isSet) {
        obj.insert(QString("minOccurs"), ::OpenAPI::toJsonValue(m_min_occurs));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

bool OAISchemaGroup::isChoice() const {
    return m_choice;
}
void OAISchemaGroup::setChoice(const bool &choice) {
    m_choice = choice;
    m_choice_isSet = true;
}

bool OAISchemaGroup::is_choice_Set() const{
    return m_choice_isSet;
}

bool OAISchemaGroup::is_choice_Valid() const{
    return m_choice_isValid;
}

qint32 OAISchemaGroup::getMaxOccurs() const {
    return m_max_occurs;
}
void OAISchemaGroup::setMaxOccurs(const qint32 &max_occurs) {
    m_max_occurs = max_occurs;
    m_max_occurs_isSet = true;
}

bool OAISchemaGroup::is_max_occurs_Set() const{
    return m_max_occurs_isSet;
}

bool OAISchemaGroup::is_max_occurs_Valid() const{
    return m_max_occurs_isValid;
}

QList<OAIGroupOrSegment> OAISchemaGroup::getMembers() const {
    return m_members;
}
void OAISchemaGroup::setMembers(const QList<OAIGroupOrSegment> &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAISchemaGroup::is_members_Set() const{
    return m_members_isSet;
}

bool OAISchemaGroup::is_members_Valid() const{
    return m_members_isValid;
}

qint32 OAISchemaGroup::getMinOccurs() const {
    return m_min_occurs;
}
void OAISchemaGroup::setMinOccurs(const qint32 &min_occurs) {
    m_min_occurs = min_occurs;
    m_min_occurs_isSet = true;
}

bool OAISchemaGroup::is_min_occurs_Set() const{
    return m_min_occurs_isSet;
}

bool OAISchemaGroup::is_min_occurs_Valid() const{
    return m_min_occurs_isValid;
}

QString OAISchemaGroup::getName() const {
    return m_name;
}
void OAISchemaGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISchemaGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAISchemaGroup::is_name_Valid() const{
    return m_name_isValid;
}

bool OAISchemaGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_choice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_occurs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_occurs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchemaGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
