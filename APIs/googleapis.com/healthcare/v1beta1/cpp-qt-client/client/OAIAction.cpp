/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAction::OAIAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAction::OAIAction() {
    this->initializeModel();
}

OAIAction::~OAIAction() {}

void OAIAction::initializeModel() {

    m_clean_image_tag_isSet = false;
    m_clean_image_tag_isValid = false;

    m_clean_text_tag_isSet = false;
    m_clean_text_tag_isValid = false;

    m_delete_tag_isSet = false;
    m_delete_tag_isValid = false;

    m_keep_tag_isSet = false;
    m_keep_tag_isValid = false;

    m_queries_isSet = false;
    m_queries_isValid = false;

    m_recurse_tag_isSet = false;
    m_recurse_tag_isValid = false;

    m_regen_uid_tag_isSet = false;
    m_regen_uid_tag_isValid = false;

    m_remove_tag_isSet = false;
    m_remove_tag_isValid = false;

    m_reset_tag_isSet = false;
    m_reset_tag_isValid = false;
}

void OAIAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAction::fromJsonObject(QJsonObject json) {

    m_clean_image_tag_isValid = ::OpenAPI::fromJsonValue(m_clean_image_tag, json[QString("cleanImageTag")]);
    m_clean_image_tag_isSet = !json[QString("cleanImageTag")].isNull() && m_clean_image_tag_isValid;

    m_clean_text_tag_isValid = ::OpenAPI::fromJsonValue(m_clean_text_tag, json[QString("cleanTextTag")]);
    m_clean_text_tag_isSet = !json[QString("cleanTextTag")].isNull() && m_clean_text_tag_isValid;

    m_delete_tag_isValid = ::OpenAPI::fromJsonValue(m_delete_tag, json[QString("deleteTag")]);
    m_delete_tag_isSet = !json[QString("deleteTag")].isNull() && m_delete_tag_isValid;

    m_keep_tag_isValid = ::OpenAPI::fromJsonValue(m_keep_tag, json[QString("keepTag")]);
    m_keep_tag_isSet = !json[QString("keepTag")].isNull() && m_keep_tag_isValid;

    m_queries_isValid = ::OpenAPI::fromJsonValue(m_queries, json[QString("queries")]);
    m_queries_isSet = !json[QString("queries")].isNull() && m_queries_isValid;

    m_recurse_tag_isValid = ::OpenAPI::fromJsonValue(m_recurse_tag, json[QString("recurseTag")]);
    m_recurse_tag_isSet = !json[QString("recurseTag")].isNull() && m_recurse_tag_isValid;

    m_regen_uid_tag_isValid = ::OpenAPI::fromJsonValue(m_regen_uid_tag, json[QString("regenUidTag")]);
    m_regen_uid_tag_isSet = !json[QString("regenUidTag")].isNull() && m_regen_uid_tag_isValid;

    m_remove_tag_isValid = ::OpenAPI::fromJsonValue(m_remove_tag, json[QString("removeTag")]);
    m_remove_tag_isSet = !json[QString("removeTag")].isNull() && m_remove_tag_isValid;

    m_reset_tag_isValid = ::OpenAPI::fromJsonValue(m_reset_tag, json[QString("resetTag")]);
    m_reset_tag_isSet = !json[QString("resetTag")].isNull() && m_reset_tag_isValid;
}

QString OAIAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAction::asJsonObject() const {
    QJsonObject obj;
    if (m_clean_image_tag.isSet()) {
        obj.insert(QString("cleanImageTag"), ::OpenAPI::toJsonValue(m_clean_image_tag));
    }
    if (m_clean_text_tag_isSet) {
        obj.insert(QString("cleanTextTag"), ::OpenAPI::toJsonValue(m_clean_text_tag));
    }
    if (m_delete_tag_isSet) {
        obj.insert(QString("deleteTag"), ::OpenAPI::toJsonValue(m_delete_tag));
    }
    if (m_keep_tag_isSet) {
        obj.insert(QString("keepTag"), ::OpenAPI::toJsonValue(m_keep_tag));
    }
    if (m_queries.size() > 0) {
        obj.insert(QString("queries"), ::OpenAPI::toJsonValue(m_queries));
    }
    if (m_recurse_tag_isSet) {
        obj.insert(QString("recurseTag"), ::OpenAPI::toJsonValue(m_recurse_tag));
    }
    if (m_regen_uid_tag_isSet) {
        obj.insert(QString("regenUidTag"), ::OpenAPI::toJsonValue(m_regen_uid_tag));
    }
    if (m_remove_tag_isSet) {
        obj.insert(QString("removeTag"), ::OpenAPI::toJsonValue(m_remove_tag));
    }
    if (m_reset_tag_isSet) {
        obj.insert(QString("resetTag"), ::OpenAPI::toJsonValue(m_reset_tag));
    }
    return obj;
}

OAIImageConfig OAIAction::getCleanImageTag() const {
    return m_clean_image_tag;
}
void OAIAction::setCleanImageTag(const OAIImageConfig &clean_image_tag) {
    m_clean_image_tag = clean_image_tag;
    m_clean_image_tag_isSet = true;
}

bool OAIAction::is_clean_image_tag_Set() const{
    return m_clean_image_tag_isSet;
}

bool OAIAction::is_clean_image_tag_Valid() const{
    return m_clean_image_tag_isValid;
}

OAIObject OAIAction::getCleanTextTag() const {
    return m_clean_text_tag;
}
void OAIAction::setCleanTextTag(const OAIObject &clean_text_tag) {
    m_clean_text_tag = clean_text_tag;
    m_clean_text_tag_isSet = true;
}

bool OAIAction::is_clean_text_tag_Set() const{
    return m_clean_text_tag_isSet;
}

bool OAIAction::is_clean_text_tag_Valid() const{
    return m_clean_text_tag_isValid;
}

OAIObject OAIAction::getDeleteTag() const {
    return m_delete_tag;
}
void OAIAction::setDeleteTag(const OAIObject &delete_tag) {
    m_delete_tag = delete_tag;
    m_delete_tag_isSet = true;
}

bool OAIAction::is_delete_tag_Set() const{
    return m_delete_tag_isSet;
}

bool OAIAction::is_delete_tag_Valid() const{
    return m_delete_tag_isValid;
}

OAIObject OAIAction::getKeepTag() const {
    return m_keep_tag;
}
void OAIAction::setKeepTag(const OAIObject &keep_tag) {
    m_keep_tag = keep_tag;
    m_keep_tag_isSet = true;
}

bool OAIAction::is_keep_tag_Set() const{
    return m_keep_tag_isSet;
}

bool OAIAction::is_keep_tag_Valid() const{
    return m_keep_tag_isValid;
}

QList<QString> OAIAction::getQueries() const {
    return m_queries;
}
void OAIAction::setQueries(const QList<QString> &queries) {
    m_queries = queries;
    m_queries_isSet = true;
}

bool OAIAction::is_queries_Set() const{
    return m_queries_isSet;
}

bool OAIAction::is_queries_Valid() const{
    return m_queries_isValid;
}

OAIObject OAIAction::getRecurseTag() const {
    return m_recurse_tag;
}
void OAIAction::setRecurseTag(const OAIObject &recurse_tag) {
    m_recurse_tag = recurse_tag;
    m_recurse_tag_isSet = true;
}

bool OAIAction::is_recurse_tag_Set() const{
    return m_recurse_tag_isSet;
}

bool OAIAction::is_recurse_tag_Valid() const{
    return m_recurse_tag_isValid;
}

OAIObject OAIAction::getRegenUidTag() const {
    return m_regen_uid_tag;
}
void OAIAction::setRegenUidTag(const OAIObject &regen_uid_tag) {
    m_regen_uid_tag = regen_uid_tag;
    m_regen_uid_tag_isSet = true;
}

bool OAIAction::is_regen_uid_tag_Set() const{
    return m_regen_uid_tag_isSet;
}

bool OAIAction::is_regen_uid_tag_Valid() const{
    return m_regen_uid_tag_isValid;
}

OAIObject OAIAction::getRemoveTag() const {
    return m_remove_tag;
}
void OAIAction::setRemoveTag(const OAIObject &remove_tag) {
    m_remove_tag = remove_tag;
    m_remove_tag_isSet = true;
}

bool OAIAction::is_remove_tag_Set() const{
    return m_remove_tag_isSet;
}

bool OAIAction::is_remove_tag_Valid() const{
    return m_remove_tag_isValid;
}

OAIObject OAIAction::getResetTag() const {
    return m_reset_tag;
}
void OAIAction::setResetTag(const OAIObject &reset_tag) {
    m_reset_tag = reset_tag;
    m_reset_tag_isSet = true;
}

bool OAIAction::is_reset_tag_Set() const{
    return m_reset_tag_isSet;
}

bool OAIAction::is_reset_tag_Valid() const{
    return m_reset_tag_isValid;
}

bool OAIAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clean_image_tag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clean_text_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurse_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regen_uid_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
