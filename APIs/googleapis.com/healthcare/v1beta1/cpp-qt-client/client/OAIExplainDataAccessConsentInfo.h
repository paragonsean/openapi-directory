/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExplainDataAccessConsentInfo.h
 *
 * The enforcing consent&#39;s metadata.
 */

#ifndef OAIExplainDataAccessConsentInfo_H
#define OAIExplainDataAccessConsentInfo_H

#include <QJsonObject>

#include "OAIConsentAccessorScope.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConsentAccessorScope;

class OAIExplainDataAccessConsentInfo : public OAIObject {
public:
    OAIExplainDataAccessConsentInfo();
    OAIExplainDataAccessConsentInfo(QString json);
    ~OAIExplainDataAccessConsentInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getCascadeOrigins() const;
    void setCascadeOrigins(const QList<QString> &cascade_origins);
    bool is_cascade_origins_Set() const;
    bool is_cascade_origins_Valid() const;

    QString getConsentResource() const;
    void setConsentResource(const QString &consent_resource);
    bool is_consent_resource_Set() const;
    bool is_consent_resource_Valid() const;

    QString getEnforcementTime() const;
    void setEnforcementTime(const QString &enforcement_time);
    bool is_enforcement_time_Set() const;
    bool is_enforcement_time_Valid() const;

    QList<OAIConsentAccessorScope> getMatchingAccessorScopes() const;
    void setMatchingAccessorScopes(const QList<OAIConsentAccessorScope> &matching_accessor_scopes);
    bool is_matching_accessor_scopes_Set() const;
    bool is_matching_accessor_scopes_Valid() const;

    QString getPatientConsentOwner() const;
    void setPatientConsentOwner(const QString &patient_consent_owner);
    bool is_patient_consent_owner_Set() const;
    bool is_patient_consent_owner_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QList<QString> getVariants() const;
    void setVariants(const QList<QString> &variants);
    bool is_variants_Set() const;
    bool is_variants_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_cascade_origins;
    bool m_cascade_origins_isSet;
    bool m_cascade_origins_isValid;

    QString m_consent_resource;
    bool m_consent_resource_isSet;
    bool m_consent_resource_isValid;

    QString m_enforcement_time;
    bool m_enforcement_time_isSet;
    bool m_enforcement_time_isValid;

    QList<OAIConsentAccessorScope> m_matching_accessor_scopes;
    bool m_matching_accessor_scopes_isSet;
    bool m_matching_accessor_scopes_isValid;

    QString m_patient_consent_owner;
    bool m_patient_consent_owner_isSet;
    bool m_patient_consent_owner_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QList<QString> m_variants;
    bool m_variants_isSet;
    bool m_variants_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExplainDataAccessConsentInfo)

#endif // OAIExplainDataAccessConsentInfo_H
