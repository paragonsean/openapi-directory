/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributeDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributeDefinition::OAIAttributeDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributeDefinition::OAIAttributeDefinition() {
    this->initializeModel();
}

OAIAttributeDefinition::~OAIAttributeDefinition() {}

void OAIAttributeDefinition::initializeModel() {

    m_allowed_values_isSet = false;
    m_allowed_values_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_consent_default_values_isSet = false;
    m_consent_default_values_isValid = false;

    m_data_mapping_default_value_isSet = false;
    m_data_mapping_default_value_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIAttributeDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributeDefinition::fromJsonObject(QJsonObject json) {

    m_allowed_values_isValid = ::OpenAPI::fromJsonValue(m_allowed_values, json[QString("allowedValues")]);
    m_allowed_values_isSet = !json[QString("allowedValues")].isNull() && m_allowed_values_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_consent_default_values_isValid = ::OpenAPI::fromJsonValue(m_consent_default_values, json[QString("consentDefaultValues")]);
    m_consent_default_values_isSet = !json[QString("consentDefaultValues")].isNull() && m_consent_default_values_isValid;

    m_data_mapping_default_value_isValid = ::OpenAPI::fromJsonValue(m_data_mapping_default_value, json[QString("dataMappingDefaultValue")]);
    m_data_mapping_default_value_isSet = !json[QString("dataMappingDefaultValue")].isNull() && m_data_mapping_default_value_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIAttributeDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributeDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_values.size() > 0) {
        obj.insert(QString("allowedValues"), ::OpenAPI::toJsonValue(m_allowed_values));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_consent_default_values.size() > 0) {
        obj.insert(QString("consentDefaultValues"), ::OpenAPI::toJsonValue(m_consent_default_values));
    }
    if (m_data_mapping_default_value_isSet) {
        obj.insert(QString("dataMappingDefaultValue"), ::OpenAPI::toJsonValue(m_data_mapping_default_value));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<QString> OAIAttributeDefinition::getAllowedValues() const {
    return m_allowed_values;
}
void OAIAttributeDefinition::setAllowedValues(const QList<QString> &allowed_values) {
    m_allowed_values = allowed_values;
    m_allowed_values_isSet = true;
}

bool OAIAttributeDefinition::is_allowed_values_Set() const{
    return m_allowed_values_isSet;
}

bool OAIAttributeDefinition::is_allowed_values_Valid() const{
    return m_allowed_values_isValid;
}

QString OAIAttributeDefinition::getCategory() const {
    return m_category;
}
void OAIAttributeDefinition::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIAttributeDefinition::is_category_Set() const{
    return m_category_isSet;
}

bool OAIAttributeDefinition::is_category_Valid() const{
    return m_category_isValid;
}

QList<QString> OAIAttributeDefinition::getConsentDefaultValues() const {
    return m_consent_default_values;
}
void OAIAttributeDefinition::setConsentDefaultValues(const QList<QString> &consent_default_values) {
    m_consent_default_values = consent_default_values;
    m_consent_default_values_isSet = true;
}

bool OAIAttributeDefinition::is_consent_default_values_Set() const{
    return m_consent_default_values_isSet;
}

bool OAIAttributeDefinition::is_consent_default_values_Valid() const{
    return m_consent_default_values_isValid;
}

QString OAIAttributeDefinition::getDataMappingDefaultValue() const {
    return m_data_mapping_default_value;
}
void OAIAttributeDefinition::setDataMappingDefaultValue(const QString &data_mapping_default_value) {
    m_data_mapping_default_value = data_mapping_default_value;
    m_data_mapping_default_value_isSet = true;
}

bool OAIAttributeDefinition::is_data_mapping_default_value_Set() const{
    return m_data_mapping_default_value_isSet;
}

bool OAIAttributeDefinition::is_data_mapping_default_value_Valid() const{
    return m_data_mapping_default_value_isValid;
}

QString OAIAttributeDefinition::getDescription() const {
    return m_description;
}
void OAIAttributeDefinition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAttributeDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAttributeDefinition::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAttributeDefinition::getName() const {
    return m_name;
}
void OAIAttributeDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAttributeDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAttributeDefinition::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIAttributeDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent_default_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_mapping_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributeDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
