/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageConfig::OAIImageConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageConfig::OAIImageConfig() {
    this->initializeModel();
}

OAIImageConfig::~OAIImageConfig() {}

void OAIImageConfig::initializeModel() {

    m_additional_info_types_isSet = false;
    m_additional_info_types_isValid = false;

    m_exclude_info_types_isSet = false;
    m_exclude_info_types_isValid = false;

    m_text_redaction_mode_isSet = false;
    m_text_redaction_mode_isValid = false;
}

void OAIImageConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageConfig::fromJsonObject(QJsonObject json) {

    m_additional_info_types_isValid = ::OpenAPI::fromJsonValue(m_additional_info_types, json[QString("additionalInfoTypes")]);
    m_additional_info_types_isSet = !json[QString("additionalInfoTypes")].isNull() && m_additional_info_types_isValid;

    m_exclude_info_types_isValid = ::OpenAPI::fromJsonValue(m_exclude_info_types, json[QString("excludeInfoTypes")]);
    m_exclude_info_types_isSet = !json[QString("excludeInfoTypes")].isNull() && m_exclude_info_types_isValid;

    m_text_redaction_mode_isValid = ::OpenAPI::fromJsonValue(m_text_redaction_mode, json[QString("textRedactionMode")]);
    m_text_redaction_mode_isSet = !json[QString("textRedactionMode")].isNull() && m_text_redaction_mode_isValid;
}

QString OAIImageConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_info_types.size() > 0) {
        obj.insert(QString("additionalInfoTypes"), ::OpenAPI::toJsonValue(m_additional_info_types));
    }
    if (m_exclude_info_types.size() > 0) {
        obj.insert(QString("excludeInfoTypes"), ::OpenAPI::toJsonValue(m_exclude_info_types));
    }
    if (m_text_redaction_mode_isSet) {
        obj.insert(QString("textRedactionMode"), ::OpenAPI::toJsonValue(m_text_redaction_mode));
    }
    return obj;
}

QList<QString> OAIImageConfig::getAdditionalInfoTypes() const {
    return m_additional_info_types;
}
void OAIImageConfig::setAdditionalInfoTypes(const QList<QString> &additional_info_types) {
    m_additional_info_types = additional_info_types;
    m_additional_info_types_isSet = true;
}

bool OAIImageConfig::is_additional_info_types_Set() const{
    return m_additional_info_types_isSet;
}

bool OAIImageConfig::is_additional_info_types_Valid() const{
    return m_additional_info_types_isValid;
}

QList<QString> OAIImageConfig::getExcludeInfoTypes() const {
    return m_exclude_info_types;
}
void OAIImageConfig::setExcludeInfoTypes(const QList<QString> &exclude_info_types) {
    m_exclude_info_types = exclude_info_types;
    m_exclude_info_types_isSet = true;
}

bool OAIImageConfig::is_exclude_info_types_Set() const{
    return m_exclude_info_types_isSet;
}

bool OAIImageConfig::is_exclude_info_types_Valid() const{
    return m_exclude_info_types_isValid;
}

QString OAIImageConfig::getTextRedactionMode() const {
    return m_text_redaction_mode;
}
void OAIImageConfig::setTextRedactionMode(const QString &text_redaction_mode) {
    m_text_redaction_mode = text_redaction_mode;
    m_text_redaction_mode_isSet = true;
}

bool OAIImageConfig::is_text_redaction_mode_Set() const{
    return m_text_redaction_mode_isSet;
}

bool OAIImageConfig::is_text_redaction_mode_Valid() const{
    return m_text_redaction_mode_isValid;
}

bool OAIImageConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_info_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_info_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_redaction_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
