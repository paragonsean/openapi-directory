/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExplainDataAccessConsentScope.h
 *
 * A single consent scope that provides info on who has access to the requested resource scope for a particular purpose and environment, enforced by which consent.
 */

#ifndef OAIExplainDataAccessConsentScope_H
#define OAIExplainDataAccessConsentScope_H

#include <QJsonObject>

#include "OAIConsentAccessorScope.h"
#include "OAIExplainDataAccessConsentInfo.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConsentAccessorScope;
class OAIExplainDataAccessConsentInfo;

class OAIExplainDataAccessConsentScope : public OAIObject {
public:
    OAIExplainDataAccessConsentScope();
    OAIExplainDataAccessConsentScope(QString json);
    ~OAIExplainDataAccessConsentScope() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConsentAccessorScope getAccessorScope() const;
    void setAccessorScope(const OAIConsentAccessorScope &accessor_scope);
    bool is_accessor_scope_Set() const;
    bool is_accessor_scope_Valid() const;

    QString getDecision() const;
    void setDecision(const QString &decision);
    bool is_decision_Set() const;
    bool is_decision_Valid() const;

    QList<OAIExplainDataAccessConsentInfo> getEnforcingConsents() const;
    void setEnforcingConsents(const QList<OAIExplainDataAccessConsentInfo> &enforcing_consents);
    bool is_enforcing_consents_Set() const;
    bool is_enforcing_consents_Valid() const;

    QList<OAIExplainDataAccessConsentScope> getExceptions() const;
    void setExceptions(const QList<OAIExplainDataAccessConsentScope> &exceptions);
    bool is_exceptions_Set() const;
    bool is_exceptions_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIConsentAccessorScope m_accessor_scope;
    bool m_accessor_scope_isSet;
    bool m_accessor_scope_isValid;

    QString m_decision;
    bool m_decision_isSet;
    bool m_decision_isValid;

    QList<OAIExplainDataAccessConsentInfo> m_enforcing_consents;
    bool m_enforcing_consents_isSet;
    bool m_enforcing_consents_isValid;

    QList<OAIExplainDataAccessConsentScope> m_exceptions;
    bool m_exceptions_isSet;
    bool m_exceptions_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExplainDataAccessConsentScope)

#endif // OAIExplainDataAccessConsentScope_H
