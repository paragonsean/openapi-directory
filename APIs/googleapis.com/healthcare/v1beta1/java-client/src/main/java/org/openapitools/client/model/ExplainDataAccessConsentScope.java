/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConsentAccessorScope;
import org.openapitools.client.model.ExplainDataAccessConsentInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single consent scope that provides info on who has access to the requested resource scope for a particular purpose and environment, enforced by which consent.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:11.528078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExplainDataAccessConsentScope {
  public static final String SERIALIZED_NAME_ACCESSOR_SCOPE = "accessorScope";
  @SerializedName(SERIALIZED_NAME_ACCESSOR_SCOPE)
  private ConsentAccessorScope accessorScope;

  /**
   * Whether the current consent scope is permitted or denied access on the requested resource.
   */
  @JsonAdapter(DecisionEnum.Adapter.class)
  public enum DecisionEnum {
    UNSPECIFIED("CONSENT_DECISION_TYPE_UNSPECIFIED"),
    
    PERMIT("CONSENT_DECISION_TYPE_PERMIT"),
    
    DENY("CONSENT_DECISION_TYPE_DENY");

    private String value;

    DecisionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DecisionEnum fromValue(String value) {
      for (DecisionEnum b : DecisionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DecisionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DecisionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DecisionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DecisionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DecisionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DECISION = "decision";
  @SerializedName(SERIALIZED_NAME_DECISION)
  private DecisionEnum decision;

  public static final String SERIALIZED_NAME_ENFORCING_CONSENTS = "enforcingConsents";
  @SerializedName(SERIALIZED_NAME_ENFORCING_CONSENTS)
  private List<ExplainDataAccessConsentInfo> enforcingConsents = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCEPTIONS = "exceptions";
  @SerializedName(SERIALIZED_NAME_EXCEPTIONS)
  private List<ExplainDataAccessConsentScope> exceptions = new ArrayList<>();

  public ExplainDataAccessConsentScope() {
  }

  public ExplainDataAccessConsentScope accessorScope(ConsentAccessorScope accessorScope) {
    this.accessorScope = accessorScope;
    return this;
  }

  /**
   * Get accessorScope
   * @return accessorScope
   */
  @javax.annotation.Nullable
  public ConsentAccessorScope getAccessorScope() {
    return accessorScope;
  }

  public void setAccessorScope(ConsentAccessorScope accessorScope) {
    this.accessorScope = accessorScope;
  }


  public ExplainDataAccessConsentScope decision(DecisionEnum decision) {
    this.decision = decision;
    return this;
  }

  /**
   * Whether the current consent scope is permitted or denied access on the requested resource.
   * @return decision
   */
  @javax.annotation.Nullable
  public DecisionEnum getDecision() {
    return decision;
  }

  public void setDecision(DecisionEnum decision) {
    this.decision = decision;
  }


  public ExplainDataAccessConsentScope enforcingConsents(List<ExplainDataAccessConsentInfo> enforcingConsents) {
    this.enforcingConsents = enforcingConsents;
    return this;
  }

  public ExplainDataAccessConsentScope addEnforcingConsentsItem(ExplainDataAccessConsentInfo enforcingConsentsItem) {
    if (this.enforcingConsents == null) {
      this.enforcingConsents = new ArrayList<>();
    }
    this.enforcingConsents.add(enforcingConsentsItem);
    return this;
  }

  /**
   * Metadata of the consent resources that enforce the consent scope&#39;s access.
   * @return enforcingConsents
   */
  @javax.annotation.Nullable
  public List<ExplainDataAccessConsentInfo> getEnforcingConsents() {
    return enforcingConsents;
  }

  public void setEnforcingConsents(List<ExplainDataAccessConsentInfo> enforcingConsents) {
    this.enforcingConsents = enforcingConsents;
  }


  public ExplainDataAccessConsentScope exceptions(List<ExplainDataAccessConsentScope> exceptions) {
    this.exceptions = exceptions;
    return this;
  }

  public ExplainDataAccessConsentScope addExceptionsItem(ExplainDataAccessConsentScope exceptionsItem) {
    if (this.exceptions == null) {
      this.exceptions = new ArrayList<>();
    }
    this.exceptions.add(exceptionsItem);
    return this;
  }

  /**
   * Other consent scopes that created exceptions within this scope.
   * @return exceptions
   */
  @javax.annotation.Nullable
  public List<ExplainDataAccessConsentScope> getExceptions() {
    return exceptions;
  }

  public void setExceptions(List<ExplainDataAccessConsentScope> exceptions) {
    this.exceptions = exceptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExplainDataAccessConsentScope explainDataAccessConsentScope = (ExplainDataAccessConsentScope) o;
    return Objects.equals(this.accessorScope, explainDataAccessConsentScope.accessorScope) &&
        Objects.equals(this.decision, explainDataAccessConsentScope.decision) &&
        Objects.equals(this.enforcingConsents, explainDataAccessConsentScope.enforcingConsents) &&
        Objects.equals(this.exceptions, explainDataAccessConsentScope.exceptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessorScope, decision, enforcingConsents, exceptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExplainDataAccessConsentScope {\n");
    sb.append("    accessorScope: ").append(toIndentedString(accessorScope)).append("\n");
    sb.append("    decision: ").append(toIndentedString(decision)).append("\n");
    sb.append("    enforcingConsents: ").append(toIndentedString(enforcingConsents)).append("\n");
    sb.append("    exceptions: ").append(toIndentedString(exceptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessorScope");
    openapiFields.add("decision");
    openapiFields.add("enforcingConsents");
    openapiFields.add("exceptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExplainDataAccessConsentScope
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExplainDataAccessConsentScope.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExplainDataAccessConsentScope is not found in the empty JSON string", ExplainDataAccessConsentScope.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExplainDataAccessConsentScope.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExplainDataAccessConsentScope` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accessorScope`
      if (jsonObj.get("accessorScope") != null && !jsonObj.get("accessorScope").isJsonNull()) {
        ConsentAccessorScope.validateJsonElement(jsonObj.get("accessorScope"));
      }
      if ((jsonObj.get("decision") != null && !jsonObj.get("decision").isJsonNull()) && !jsonObj.get("decision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decision").toString()));
      }
      // validate the optional field `decision`
      if (jsonObj.get("decision") != null && !jsonObj.get("decision").isJsonNull()) {
        DecisionEnum.validateJsonElement(jsonObj.get("decision"));
      }
      if (jsonObj.get("enforcingConsents") != null && !jsonObj.get("enforcingConsents").isJsonNull()) {
        JsonArray jsonArrayenforcingConsents = jsonObj.getAsJsonArray("enforcingConsents");
        if (jsonArrayenforcingConsents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enforcingConsents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enforcingConsents` to be an array in the JSON string but got `%s`", jsonObj.get("enforcingConsents").toString()));
          }

          // validate the optional field `enforcingConsents` (array)
          for (int i = 0; i < jsonArrayenforcingConsents.size(); i++) {
            ExplainDataAccessConsentInfo.validateJsonElement(jsonArrayenforcingConsents.get(i));
          };
        }
      }
      if (jsonObj.get("exceptions") != null && !jsonObj.get("exceptions").isJsonNull()) {
        JsonArray jsonArrayexceptions = jsonObj.getAsJsonArray("exceptions");
        if (jsonArrayexceptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exceptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exceptions` to be an array in the JSON string but got `%s`", jsonObj.get("exceptions").toString()));
          }

          // validate the optional field `exceptions` (array)
          for (int i = 0; i < jsonArrayexceptions.size(); i++) {
            ExplainDataAccessConsentScope.validateJsonElement(jsonArrayexceptions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExplainDataAccessConsentScope.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExplainDataAccessConsentScope' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExplainDataAccessConsentScope> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExplainDataAccessConsentScope.class));

       return (TypeAdapter<T>) new TypeAdapter<ExplainDataAccessConsentScope>() {
           @Override
           public void write(JsonWriter out, ExplainDataAccessConsentScope value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExplainDataAccessConsentScope read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExplainDataAccessConsentScope given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExplainDataAccessConsentScope
   * @throws IOException if the JSON string is invalid with respect to ExplainDataAccessConsentScope
   */
  public static ExplainDataAccessConsentScope fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExplainDataAccessConsentScope.class);
  }

  /**
   * Convert an instance of ExplainDataAccessConsentScope to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

