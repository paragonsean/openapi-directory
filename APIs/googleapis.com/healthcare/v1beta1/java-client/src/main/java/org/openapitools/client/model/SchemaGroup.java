/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GroupOrSegment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An HL7v2 logical group construct.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:11.528078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SchemaGroup {
  public static final String SERIALIZED_NAME_CHOICE = "choice";
  @SerializedName(SERIALIZED_NAME_CHOICE)
  private Boolean choice;

  public static final String SERIALIZED_NAME_MAX_OCCURS = "maxOccurs";
  @SerializedName(SERIALIZED_NAME_MAX_OCCURS)
  private Integer maxOccurs;

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private List<GroupOrSegment> members = new ArrayList<>();

  public static final String SERIALIZED_NAME_MIN_OCCURS = "minOccurs";
  @SerializedName(SERIALIZED_NAME_MIN_OCCURS)
  private Integer minOccurs;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public SchemaGroup() {
  }

  public SchemaGroup choice(Boolean choice) {
    this.choice = choice;
    return this;
  }

  /**
   * True indicates that this is a choice group, meaning that only one of its segments can exist in a given message.
   * @return choice
   */
  @javax.annotation.Nullable
  public Boolean getChoice() {
    return choice;
  }

  public void setChoice(Boolean choice) {
    this.choice = choice;
  }


  public SchemaGroup maxOccurs(Integer maxOccurs) {
    this.maxOccurs = maxOccurs;
    return this;
  }

  /**
   * The maximum number of times this group can be repeated. 0 or -1 means unbounded.
   * @return maxOccurs
   */
  @javax.annotation.Nullable
  public Integer getMaxOccurs() {
    return maxOccurs;
  }

  public void setMaxOccurs(Integer maxOccurs) {
    this.maxOccurs = maxOccurs;
  }


  public SchemaGroup members(List<GroupOrSegment> members) {
    this.members = members;
    return this;
  }

  public SchemaGroup addMembersItem(GroupOrSegment membersItem) {
    if (this.members == null) {
      this.members = new ArrayList<>();
    }
    this.members.add(membersItem);
    return this;
  }

  /**
   * Nested groups and/or segments.
   * @return members
   */
  @javax.annotation.Nullable
  public List<GroupOrSegment> getMembers() {
    return members;
  }

  public void setMembers(List<GroupOrSegment> members) {
    this.members = members;
  }


  public SchemaGroup minOccurs(Integer minOccurs) {
    this.minOccurs = minOccurs;
    return this;
  }

  /**
   * The minimum number of times this group must be present/repeated.
   * @return minOccurs
   */
  @javax.annotation.Nullable
  public Integer getMinOccurs() {
    return minOccurs;
  }

  public void setMinOccurs(Integer minOccurs) {
    this.minOccurs = minOccurs;
  }


  public SchemaGroup name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of this group. For example, \&quot;ORDER_DETAIL\&quot;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaGroup schemaGroup = (SchemaGroup) o;
    return Objects.equals(this.choice, schemaGroup.choice) &&
        Objects.equals(this.maxOccurs, schemaGroup.maxOccurs) &&
        Objects.equals(this.members, schemaGroup.members) &&
        Objects.equals(this.minOccurs, schemaGroup.minOccurs) &&
        Objects.equals(this.name, schemaGroup.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(choice, maxOccurs, members, minOccurs, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaGroup {\n");
    sb.append("    choice: ").append(toIndentedString(choice)).append("\n");
    sb.append("    maxOccurs: ").append(toIndentedString(maxOccurs)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    minOccurs: ").append(toIndentedString(minOccurs)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("choice");
    openapiFields.add("maxOccurs");
    openapiFields.add("members");
    openapiFields.add("minOccurs");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SchemaGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SchemaGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SchemaGroup is not found in the empty JSON string", SchemaGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SchemaGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SchemaGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("members") != null && !jsonObj.get("members").isJsonNull()) {
        JsonArray jsonArraymembers = jsonObj.getAsJsonArray("members");
        if (jsonArraymembers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("members").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `members` to be an array in the JSON string but got `%s`", jsonObj.get("members").toString()));
          }

          // validate the optional field `members` (array)
          for (int i = 0; i < jsonArraymembers.size(); i++) {
            GroupOrSegment.validateJsonElement(jsonArraymembers.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SchemaGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SchemaGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SchemaGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SchemaGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<SchemaGroup>() {
           @Override
           public void write(JsonWriter out, SchemaGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SchemaGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SchemaGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SchemaGroup
   * @throws IOException if the JSON string is invalid with respect to SchemaGroup
   */
  public static SchemaGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SchemaGroup.class);
  }

  /**
   * Convert an instance of SchemaGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

