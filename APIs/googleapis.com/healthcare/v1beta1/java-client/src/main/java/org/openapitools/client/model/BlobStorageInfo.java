/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BlobStorageInfo contains details about the data stored in Blob Storage for the referenced resource. Note: Storage class is only valid for DICOM and hence will only be populated for DICOM resources.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:11.528078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BlobStorageInfo {
  public static final String SERIALIZED_NAME_SIZE_BYTES = "sizeBytes";
  @SerializedName(SERIALIZED_NAME_SIZE_BYTES)
  private String sizeBytes;

  /**
   * The storage class in which the Blob data is stored.
   */
  @JsonAdapter(StorageClassEnum.Adapter.class)
  public enum StorageClassEnum {
    BLOB_STORAGE_CLASS_UNSPECIFIED("BLOB_STORAGE_CLASS_UNSPECIFIED"),
    
    STANDARD("STANDARD"),
    
    NEARLINE("NEARLINE"),
    
    COLDLINE("COLDLINE"),
    
    ARCHIVE("ARCHIVE");

    private String value;

    StorageClassEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StorageClassEnum fromValue(String value) {
      for (StorageClassEnum b : StorageClassEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StorageClassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StorageClassEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StorageClassEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StorageClassEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StorageClassEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STORAGE_CLASS = "storageClass";
  @SerializedName(SERIALIZED_NAME_STORAGE_CLASS)
  private StorageClassEnum storageClass;

  public static final String SERIALIZED_NAME_STORAGE_CLASS_UPDATE_TIME = "storageClassUpdateTime";
  @SerializedName(SERIALIZED_NAME_STORAGE_CLASS_UPDATE_TIME)
  private String storageClassUpdateTime;

  public BlobStorageInfo() {
  }

  public BlobStorageInfo sizeBytes(String sizeBytes) {
    this.sizeBytes = sizeBytes;
    return this;
  }

  /**
   * Size in bytes of data stored in Blob Storage.
   * @return sizeBytes
   */
  @javax.annotation.Nullable
  public String getSizeBytes() {
    return sizeBytes;
  }

  public void setSizeBytes(String sizeBytes) {
    this.sizeBytes = sizeBytes;
  }


  public BlobStorageInfo storageClass(StorageClassEnum storageClass) {
    this.storageClass = storageClass;
    return this;
  }

  /**
   * The storage class in which the Blob data is stored.
   * @return storageClass
   */
  @javax.annotation.Nullable
  public StorageClassEnum getStorageClass() {
    return storageClass;
  }

  public void setStorageClass(StorageClassEnum storageClass) {
    this.storageClass = storageClass;
  }


  public BlobStorageInfo storageClassUpdateTime(String storageClassUpdateTime) {
    this.storageClassUpdateTime = storageClassUpdateTime;
    return this;
  }

  /**
   * The time at which the storage class was updated. This is used to compute early deletion fees of the resource.
   * @return storageClassUpdateTime
   */
  @javax.annotation.Nullable
  public String getStorageClassUpdateTime() {
    return storageClassUpdateTime;
  }

  public void setStorageClassUpdateTime(String storageClassUpdateTime) {
    this.storageClassUpdateTime = storageClassUpdateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlobStorageInfo blobStorageInfo = (BlobStorageInfo) o;
    return Objects.equals(this.sizeBytes, blobStorageInfo.sizeBytes) &&
        Objects.equals(this.storageClass, blobStorageInfo.storageClass) &&
        Objects.equals(this.storageClassUpdateTime, blobStorageInfo.storageClassUpdateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sizeBytes, storageClass, storageClassUpdateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlobStorageInfo {\n");
    sb.append("    sizeBytes: ").append(toIndentedString(sizeBytes)).append("\n");
    sb.append("    storageClass: ").append(toIndentedString(storageClass)).append("\n");
    sb.append("    storageClassUpdateTime: ").append(toIndentedString(storageClassUpdateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sizeBytes");
    openapiFields.add("storageClass");
    openapiFields.add("storageClassUpdateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BlobStorageInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlobStorageInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlobStorageInfo is not found in the empty JSON string", BlobStorageInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BlobStorageInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BlobStorageInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sizeBytes") != null && !jsonObj.get("sizeBytes").isJsonNull()) && !jsonObj.get("sizeBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sizeBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sizeBytes").toString()));
      }
      if ((jsonObj.get("storageClass") != null && !jsonObj.get("storageClass").isJsonNull()) && !jsonObj.get("storageClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageClass").toString()));
      }
      // validate the optional field `storageClass`
      if (jsonObj.get("storageClass") != null && !jsonObj.get("storageClass").isJsonNull()) {
        StorageClassEnum.validateJsonElement(jsonObj.get("storageClass"));
      }
      if ((jsonObj.get("storageClassUpdateTime") != null && !jsonObj.get("storageClassUpdateTime").isJsonNull()) && !jsonObj.get("storageClassUpdateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageClassUpdateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageClassUpdateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlobStorageInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlobStorageInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlobStorageInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlobStorageInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BlobStorageInfo>() {
           @Override
           public void write(JsonWriter out, BlobStorageInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlobStorageInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BlobStorageInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BlobStorageInfo
   * @throws IOException if the JSON string is invalid with respect to BlobStorageInfo
   */
  public static BlobStorageInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlobStorageInfo.class);
  }

  /**
   * Convert an instance of BlobStorageInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

