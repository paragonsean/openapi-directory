/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AnnotationConfig;
import org.openapitools.client.model.DeidentifyOperationMetadata;
import org.openapitools.client.model.DicomConfig;
import org.openapitools.client.model.DicomTagConfig;
import org.openapitools.client.model.FhirConfig;
import org.openapitools.client.model.FhirFieldConfig;
import org.openapitools.client.model.ImageConfig;
import org.openapitools.client.model.TextConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configures de-id options specific to different types of content. Each submessage customizes the handling of an https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are applied in a nested manner at runtime.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:11.528078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeidentifyConfig {
  public static final String SERIALIZED_NAME_ANNOTATION = "annotation";
  @SerializedName(SERIALIZED_NAME_ANNOTATION)
  private AnnotationConfig annotation;

  public static final String SERIALIZED_NAME_DICOM = "dicom";
  @SerializedName(SERIALIZED_NAME_DICOM)
  private DicomConfig dicom;

  public static final String SERIALIZED_NAME_DICOM_TAG_CONFIG = "dicomTagConfig";
  @SerializedName(SERIALIZED_NAME_DICOM_TAG_CONFIG)
  private DicomTagConfig dicomTagConfig;

  public static final String SERIALIZED_NAME_FHIR = "fhir";
  @SerializedName(SERIALIZED_NAME_FHIR)
  private FhirConfig fhir;

  public static final String SERIALIZED_NAME_FHIR_FIELD_CONFIG = "fhirFieldConfig";
  @SerializedName(SERIALIZED_NAME_FHIR_FIELD_CONFIG)
  private FhirFieldConfig fhirFieldConfig;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private ImageConfig image;

  public static final String SERIALIZED_NAME_OPERATION_METADATA = "operationMetadata";
  @SerializedName(SERIALIZED_NAME_OPERATION_METADATA)
  private DeidentifyOperationMetadata operationMetadata;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private TextConfig text;

  public static final String SERIALIZED_NAME_USE_REGIONAL_DATA_PROCESSING = "useRegionalDataProcessing";
  @SerializedName(SERIALIZED_NAME_USE_REGIONAL_DATA_PROCESSING)
  private Boolean useRegionalDataProcessing;

  public DeidentifyConfig() {
  }

  public DeidentifyConfig annotation(AnnotationConfig annotation) {
    this.annotation = annotation;
    return this;
  }

  /**
   * Get annotation
   * @return annotation
   */
  @javax.annotation.Nullable
  public AnnotationConfig getAnnotation() {
    return annotation;
  }

  public void setAnnotation(AnnotationConfig annotation) {
    this.annotation = annotation;
  }


  public DeidentifyConfig dicom(DicomConfig dicom) {
    this.dicom = dicom;
    return this;
  }

  /**
   * Get dicom
   * @return dicom
   */
  @javax.annotation.Nullable
  public DicomConfig getDicom() {
    return dicom;
  }

  public void setDicom(DicomConfig dicom) {
    this.dicom = dicom;
  }


  public DeidentifyConfig dicomTagConfig(DicomTagConfig dicomTagConfig) {
    this.dicomTagConfig = dicomTagConfig;
    return this;
  }

  /**
   * Get dicomTagConfig
   * @return dicomTagConfig
   */
  @javax.annotation.Nullable
  public DicomTagConfig getDicomTagConfig() {
    return dicomTagConfig;
  }

  public void setDicomTagConfig(DicomTagConfig dicomTagConfig) {
    this.dicomTagConfig = dicomTagConfig;
  }


  public DeidentifyConfig fhir(FhirConfig fhir) {
    this.fhir = fhir;
    return this;
  }

  /**
   * Get fhir
   * @return fhir
   */
  @javax.annotation.Nullable
  public FhirConfig getFhir() {
    return fhir;
  }

  public void setFhir(FhirConfig fhir) {
    this.fhir = fhir;
  }


  public DeidentifyConfig fhirFieldConfig(FhirFieldConfig fhirFieldConfig) {
    this.fhirFieldConfig = fhirFieldConfig;
    return this;
  }

  /**
   * Get fhirFieldConfig
   * @return fhirFieldConfig
   */
  @javax.annotation.Nullable
  public FhirFieldConfig getFhirFieldConfig() {
    return fhirFieldConfig;
  }

  public void setFhirFieldConfig(FhirFieldConfig fhirFieldConfig) {
    this.fhirFieldConfig = fhirFieldConfig;
  }


  public DeidentifyConfig image(ImageConfig image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public ImageConfig getImage() {
    return image;
  }

  public void setImage(ImageConfig image) {
    this.image = image;
  }


  public DeidentifyConfig operationMetadata(DeidentifyOperationMetadata operationMetadata) {
    this.operationMetadata = operationMetadata;
    return this;
  }

  /**
   * Get operationMetadata
   * @return operationMetadata
   */
  @javax.annotation.Nullable
  public DeidentifyOperationMetadata getOperationMetadata() {
    return operationMetadata;
  }

  public void setOperationMetadata(DeidentifyOperationMetadata operationMetadata) {
    this.operationMetadata = operationMetadata;
  }


  public DeidentifyConfig text(TextConfig text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public TextConfig getText() {
    return text;
  }

  public void setText(TextConfig text) {
    this.text = text;
  }


  public DeidentifyConfig useRegionalDataProcessing(Boolean useRegionalDataProcessing) {
    this.useRegionalDataProcessing = useRegionalDataProcessing;
    return this;
  }

  /**
   * Ensures in-flight data remains in the region of origin during de-identification. Using this option results in a significant reduction of throughput, and is not compatible with &#x60;LOCATION&#x60; or &#x60;ORGANIZATION_NAME&#x60; infoTypes. If the deprecated DicomConfig or FhirConfig are used, then &#x60;LOCATION&#x60; must be excluded within TextConfig, and must also be excluded within ImageConfig if image redaction is required.
   * @return useRegionalDataProcessing
   */
  @javax.annotation.Nullable
  public Boolean getUseRegionalDataProcessing() {
    return useRegionalDataProcessing;
  }

  public void setUseRegionalDataProcessing(Boolean useRegionalDataProcessing) {
    this.useRegionalDataProcessing = useRegionalDataProcessing;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeidentifyConfig deidentifyConfig = (DeidentifyConfig) o;
    return Objects.equals(this.annotation, deidentifyConfig.annotation) &&
        Objects.equals(this.dicom, deidentifyConfig.dicom) &&
        Objects.equals(this.dicomTagConfig, deidentifyConfig.dicomTagConfig) &&
        Objects.equals(this.fhir, deidentifyConfig.fhir) &&
        Objects.equals(this.fhirFieldConfig, deidentifyConfig.fhirFieldConfig) &&
        Objects.equals(this.image, deidentifyConfig.image) &&
        Objects.equals(this.operationMetadata, deidentifyConfig.operationMetadata) &&
        Objects.equals(this.text, deidentifyConfig.text) &&
        Objects.equals(this.useRegionalDataProcessing, deidentifyConfig.useRegionalDataProcessing);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotation, dicom, dicomTagConfig, fhir, fhirFieldConfig, image, operationMetadata, text, useRegionalDataProcessing);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeidentifyConfig {\n");
    sb.append("    annotation: ").append(toIndentedString(annotation)).append("\n");
    sb.append("    dicom: ").append(toIndentedString(dicom)).append("\n");
    sb.append("    dicomTagConfig: ").append(toIndentedString(dicomTagConfig)).append("\n");
    sb.append("    fhir: ").append(toIndentedString(fhir)).append("\n");
    sb.append("    fhirFieldConfig: ").append(toIndentedString(fhirFieldConfig)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    operationMetadata: ").append(toIndentedString(operationMetadata)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    useRegionalDataProcessing: ").append(toIndentedString(useRegionalDataProcessing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotation");
    openapiFields.add("dicom");
    openapiFields.add("dicomTagConfig");
    openapiFields.add("fhir");
    openapiFields.add("fhirFieldConfig");
    openapiFields.add("image");
    openapiFields.add("operationMetadata");
    openapiFields.add("text");
    openapiFields.add("useRegionalDataProcessing");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeidentifyConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeidentifyConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeidentifyConfig is not found in the empty JSON string", DeidentifyConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeidentifyConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeidentifyConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `annotation`
      if (jsonObj.get("annotation") != null && !jsonObj.get("annotation").isJsonNull()) {
        AnnotationConfig.validateJsonElement(jsonObj.get("annotation"));
      }
      // validate the optional field `dicom`
      if (jsonObj.get("dicom") != null && !jsonObj.get("dicom").isJsonNull()) {
        DicomConfig.validateJsonElement(jsonObj.get("dicom"));
      }
      // validate the optional field `dicomTagConfig`
      if (jsonObj.get("dicomTagConfig") != null && !jsonObj.get("dicomTagConfig").isJsonNull()) {
        DicomTagConfig.validateJsonElement(jsonObj.get("dicomTagConfig"));
      }
      // validate the optional field `fhir`
      if (jsonObj.get("fhir") != null && !jsonObj.get("fhir").isJsonNull()) {
        FhirConfig.validateJsonElement(jsonObj.get("fhir"));
      }
      // validate the optional field `fhirFieldConfig`
      if (jsonObj.get("fhirFieldConfig") != null && !jsonObj.get("fhirFieldConfig").isJsonNull()) {
        FhirFieldConfig.validateJsonElement(jsonObj.get("fhirFieldConfig"));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        ImageConfig.validateJsonElement(jsonObj.get("image"));
      }
      // validate the optional field `operationMetadata`
      if (jsonObj.get("operationMetadata") != null && !jsonObj.get("operationMetadata").isJsonNull()) {
        DeidentifyOperationMetadata.validateJsonElement(jsonObj.get("operationMetadata"));
      }
      // validate the optional field `text`
      if (jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) {
        TextConfig.validateJsonElement(jsonObj.get("text"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeidentifyConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeidentifyConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeidentifyConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeidentifyConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DeidentifyConfig>() {
           @Override
           public void write(JsonWriter out, DeidentifyConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeidentifyConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeidentifyConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeidentifyConfig
   * @throws IOException if the JSON string is invalid with respect to DeidentifyConfig
   */
  public static DeidentifyConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeidentifyConfig.class);
  }

  /**
   * Convert an instance of DeidentifyConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

