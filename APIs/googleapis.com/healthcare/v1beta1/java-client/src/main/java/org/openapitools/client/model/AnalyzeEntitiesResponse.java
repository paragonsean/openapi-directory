/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Entity;
import org.openapitools.client.model.EntityMention;
import org.openapitools.client.model.EntityMentionRelationship;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Includes recognized entity mentions and relationships between them.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:11.528078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalyzeEntitiesResponse {
  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  private List<Entity> entities = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTITY_MENTIONS = "entityMentions";
  @SerializedName(SERIALIZED_NAME_ENTITY_MENTIONS)
  private List<EntityMention> entityMentions = new ArrayList<>();

  public static final String SERIALIZED_NAME_FHIR_BUNDLE = "fhirBundle";
  @SerializedName(SERIALIZED_NAME_FHIR_BUNDLE)
  private String fhirBundle;

  public static final String SERIALIZED_NAME_RELATIONSHIPS = "relationships";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIPS)
  private List<EntityMentionRelationship> relationships = new ArrayList<>();

  public AnalyzeEntitiesResponse() {
  }

  public AnalyzeEntitiesResponse entities(List<Entity> entities) {
    this.entities = entities;
    return this;
  }

  public AnalyzeEntitiesResponse addEntitiesItem(Entity entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

  /**
   * The union of all the candidate entities that the entity_mentions in this response could link to. These are UMLS concepts or normalized mention content.
   * @return entities
   */
  @javax.annotation.Nullable
  public List<Entity> getEntities() {
    return entities;
  }

  public void setEntities(List<Entity> entities) {
    this.entities = entities;
  }


  public AnalyzeEntitiesResponse entityMentions(List<EntityMention> entityMentions) {
    this.entityMentions = entityMentions;
    return this;
  }

  public AnalyzeEntitiesResponse addEntityMentionsItem(EntityMention entityMentionsItem) {
    if (this.entityMentions == null) {
      this.entityMentions = new ArrayList<>();
    }
    this.entityMentions.add(entityMentionsItem);
    return this;
  }

  /**
   * The &#x60;entity_mentions&#x60; field contains all the annotated medical entities that were mentioned in the provided document.
   * @return entityMentions
   */
  @javax.annotation.Nullable
  public List<EntityMention> getEntityMentions() {
    return entityMentions;
  }

  public void setEntityMentions(List<EntityMention> entityMentions) {
    this.entityMentions = entityMentions;
  }


  public AnalyzeEntitiesResponse fhirBundle(String fhirBundle) {
    this.fhirBundle = fhirBundle;
    return this;
  }

  /**
   * The FHIR bundle ([&#x60;R4&#x60;](http://hl7.org/fhir/R4/bundle.html)) that includes all the entities, the entity mentions, and the relationships in JSON format.
   * @return fhirBundle
   */
  @javax.annotation.Nullable
  public String getFhirBundle() {
    return fhirBundle;
  }

  public void setFhirBundle(String fhirBundle) {
    this.fhirBundle = fhirBundle;
  }


  public AnalyzeEntitiesResponse relationships(List<EntityMentionRelationship> relationships) {
    this.relationships = relationships;
    return this;
  }

  public AnalyzeEntitiesResponse addRelationshipsItem(EntityMentionRelationship relationshipsItem) {
    if (this.relationships == null) {
      this.relationships = new ArrayList<>();
    }
    this.relationships.add(relationshipsItem);
    return this;
  }

  /**
   * relationships contains all the binary relationships that were identified between entity mentions within the provided document.
   * @return relationships
   */
  @javax.annotation.Nullable
  public List<EntityMentionRelationship> getRelationships() {
    return relationships;
  }

  public void setRelationships(List<EntityMentionRelationship> relationships) {
    this.relationships = relationships;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyzeEntitiesResponse analyzeEntitiesResponse = (AnalyzeEntitiesResponse) o;
    return Objects.equals(this.entities, analyzeEntitiesResponse.entities) &&
        Objects.equals(this.entityMentions, analyzeEntitiesResponse.entityMentions) &&
        Objects.equals(this.fhirBundle, analyzeEntitiesResponse.fhirBundle) &&
        Objects.equals(this.relationships, analyzeEntitiesResponse.relationships);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entities, entityMentions, fhirBundle, relationships);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyzeEntitiesResponse {\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    entityMentions: ").append(toIndentedString(entityMentions)).append("\n");
    sb.append("    fhirBundle: ").append(toIndentedString(fhirBundle)).append("\n");
    sb.append("    relationships: ").append(toIndentedString(relationships)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entities");
    openapiFields.add("entityMentions");
    openapiFields.add("fhirBundle");
    openapiFields.add("relationships");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalyzeEntitiesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalyzeEntitiesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalyzeEntitiesResponse is not found in the empty JSON string", AnalyzeEntitiesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalyzeEntitiesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalyzeEntitiesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("entities") != null && !jsonObj.get("entities").isJsonNull()) {
        JsonArray jsonArrayentities = jsonObj.getAsJsonArray("entities");
        if (jsonArrayentities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entities` to be an array in the JSON string but got `%s`", jsonObj.get("entities").toString()));
          }

          // validate the optional field `entities` (array)
          for (int i = 0; i < jsonArrayentities.size(); i++) {
            Entity.validateJsonElement(jsonArrayentities.get(i));
          };
        }
      }
      if (jsonObj.get("entityMentions") != null && !jsonObj.get("entityMentions").isJsonNull()) {
        JsonArray jsonArrayentityMentions = jsonObj.getAsJsonArray("entityMentions");
        if (jsonArrayentityMentions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entityMentions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entityMentions` to be an array in the JSON string but got `%s`", jsonObj.get("entityMentions").toString()));
          }

          // validate the optional field `entityMentions` (array)
          for (int i = 0; i < jsonArrayentityMentions.size(); i++) {
            EntityMention.validateJsonElement(jsonArrayentityMentions.get(i));
          };
        }
      }
      if ((jsonObj.get("fhirBundle") != null && !jsonObj.get("fhirBundle").isJsonNull()) && !jsonObj.get("fhirBundle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fhirBundle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fhirBundle").toString()));
      }
      if (jsonObj.get("relationships") != null && !jsonObj.get("relationships").isJsonNull()) {
        JsonArray jsonArrayrelationships = jsonObj.getAsJsonArray("relationships");
        if (jsonArrayrelationships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relationships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relationships` to be an array in the JSON string but got `%s`", jsonObj.get("relationships").toString()));
          }

          // validate the optional field `relationships` (array)
          for (int i = 0; i < jsonArrayrelationships.size(); i++) {
            EntityMentionRelationship.validateJsonElement(jsonArrayrelationships.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalyzeEntitiesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalyzeEntitiesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalyzeEntitiesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalyzeEntitiesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalyzeEntitiesResponse>() {
           @Override
           public void write(JsonWriter out, AnalyzeEntitiesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalyzeEntitiesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalyzeEntitiesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalyzeEntitiesResponse
   * @throws IOException if the JSON string is invalid with respect to AnalyzeEntitiesResponse
   */
  public static AnalyzeEntitiesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalyzeEntitiesResponse.class);
  }

  /**
   * Convert an instance of AnalyzeEntitiesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

