/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProgressCounter provides counters to describe an operation&#39;s progress.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:11.528078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProgressCounter {
  public static final String SERIALIZED_NAME_FAILURE = "failure";
  @SerializedName(SERIALIZED_NAME_FAILURE)
  private String failure;

  public static final String SERIALIZED_NAME_PENDING = "pending";
  @SerializedName(SERIALIZED_NAME_PENDING)
  private String pending;

  public static final String SERIALIZED_NAME_SECONDARY_FAILURE = "secondaryFailure";
  @SerializedName(SERIALIZED_NAME_SECONDARY_FAILURE)
  private String secondaryFailure;

  public static final String SERIALIZED_NAME_SECONDARY_SUCCESS = "secondarySuccess";
  @SerializedName(SERIALIZED_NAME_SECONDARY_SUCCESS)
  private String secondarySuccess;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private String success;

  public ProgressCounter() {
  }

  public ProgressCounter failure(String failure) {
    this.failure = failure;
    return this;
  }

  /**
   * The number of units that failed in the operation.
   * @return failure
   */
  @javax.annotation.Nullable
  public String getFailure() {
    return failure;
  }

  public void setFailure(String failure) {
    this.failure = failure;
  }


  public ProgressCounter pending(String pending) {
    this.pending = pending;
    return this;
  }

  /**
   * The number of units that are pending in the operation.
   * @return pending
   */
  @javax.annotation.Nullable
  public String getPending() {
    return pending;
  }

  public void setPending(String pending) {
    this.pending = pending;
  }


  public ProgressCounter secondaryFailure(String secondaryFailure) {
    this.secondaryFailure = secondaryFailure;
    return this;
  }

  /**
   * The number of secondary units that failed in the operation.
   * @return secondaryFailure
   */
  @javax.annotation.Nullable
  public String getSecondaryFailure() {
    return secondaryFailure;
  }

  public void setSecondaryFailure(String secondaryFailure) {
    this.secondaryFailure = secondaryFailure;
  }


  public ProgressCounter secondarySuccess(String secondarySuccess) {
    this.secondarySuccess = secondarySuccess;
    return this;
  }

  /**
   * The number of secondary units that succeeded in the operation.
   * @return secondarySuccess
   */
  @javax.annotation.Nullable
  public String getSecondarySuccess() {
    return secondarySuccess;
  }

  public void setSecondarySuccess(String secondarySuccess) {
    this.secondarySuccess = secondarySuccess;
  }


  public ProgressCounter success(String success) {
    this.success = success;
    return this;
  }

  /**
   * The number of units that succeeded in the operation.
   * @return success
   */
  @javax.annotation.Nullable
  public String getSuccess() {
    return success;
  }

  public void setSuccess(String success) {
    this.success = success;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProgressCounter progressCounter = (ProgressCounter) o;
    return Objects.equals(this.failure, progressCounter.failure) &&
        Objects.equals(this.pending, progressCounter.pending) &&
        Objects.equals(this.secondaryFailure, progressCounter.secondaryFailure) &&
        Objects.equals(this.secondarySuccess, progressCounter.secondarySuccess) &&
        Objects.equals(this.success, progressCounter.success);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failure, pending, secondaryFailure, secondarySuccess, success);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProgressCounter {\n");
    sb.append("    failure: ").append(toIndentedString(failure)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    secondaryFailure: ").append(toIndentedString(secondaryFailure)).append("\n");
    sb.append("    secondarySuccess: ").append(toIndentedString(secondarySuccess)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("failure");
    openapiFields.add("pending");
    openapiFields.add("secondaryFailure");
    openapiFields.add("secondarySuccess");
    openapiFields.add("success");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProgressCounter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProgressCounter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProgressCounter is not found in the empty JSON string", ProgressCounter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProgressCounter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProgressCounter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("failure") != null && !jsonObj.get("failure").isJsonNull()) && !jsonObj.get("failure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failure").toString()));
      }
      if ((jsonObj.get("pending") != null && !jsonObj.get("pending").isJsonNull()) && !jsonObj.get("pending").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pending` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pending").toString()));
      }
      if ((jsonObj.get("secondaryFailure") != null && !jsonObj.get("secondaryFailure").isJsonNull()) && !jsonObj.get("secondaryFailure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryFailure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryFailure").toString()));
      }
      if ((jsonObj.get("secondarySuccess") != null && !jsonObj.get("secondarySuccess").isJsonNull()) && !jsonObj.get("secondarySuccess").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondarySuccess` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondarySuccess").toString()));
      }
      if ((jsonObj.get("success") != null && !jsonObj.get("success").isJsonNull()) && !jsonObj.get("success").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `success` to be a primitive type in the JSON string but got `%s`", jsonObj.get("success").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProgressCounter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProgressCounter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProgressCounter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProgressCounter.class));

       return (TypeAdapter<T>) new TypeAdapter<ProgressCounter>() {
           @Override
           public void write(JsonWriter out, ProgressCounter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProgressCounter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProgressCounter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProgressCounter
   * @throws IOException if the JSON string is invalid with respect to ProgressCounter
   */
  public static ProgressCounter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProgressCounter.class);
  }

  /**
   * Convert an instance of ProgressCounter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

