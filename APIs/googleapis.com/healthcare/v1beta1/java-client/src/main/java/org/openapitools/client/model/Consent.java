/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudHealthcareV1beta1ConsentPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a user&#39;s consent.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:11.528078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Consent {
  public static final String SERIALIZED_NAME_CONSENT_ARTIFACT = "consentArtifact";
  @SerializedName(SERIALIZED_NAME_CONSENT_ARTIFACT)
  private String consentArtifact;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private String expireTime;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POLICIES = "policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  private List<GoogleCloudHealthcareV1beta1ConsentPolicy> policies = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVISION_CREATE_TIME = "revisionCreateTime";
  @SerializedName(SERIALIZED_NAME_REVISION_CREATE_TIME)
  private String revisionCreateTime;

  public static final String SERIALIZED_NAME_REVISION_ID = "revisionId";
  @SerializedName(SERIALIZED_NAME_REVISION_ID)
  private String revisionId;

  /**
   * Required. Indicates the current state of this Consent.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    ARCHIVED("ARCHIVED"),
    
    REVOKED("REVOKED"),
    
    DRAFT("DRAFT"),
    
    REJECTED("REJECTED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private String ttl;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public Consent() {
  }

  public Consent(
     String revisionCreateTime, 
     String revisionId
  ) {
    this();
    this.revisionCreateTime = revisionCreateTime;
    this.revisionId = revisionId;
  }

  public Consent consentArtifact(String consentArtifact) {
    this.consentArtifact = consentArtifact;
    return this;
  }

  /**
   * Required. The resource name of the Consent artifact that contains proof of the end user&#39;s consent, of the form &#x60;projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}&#x60;.
   * @return consentArtifact
   */
  @javax.annotation.Nullable
  public String getConsentArtifact() {
    return consentArtifact;
  }

  public void setConsentArtifact(String consentArtifact) {
    this.consentArtifact = consentArtifact;
  }


  public Consent expireTime(String expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * Timestamp in UTC of when this Consent is considered expired.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }

  public void setExpireTime(String expireTime) {
    this.expireTime = expireTime;
  }


  public Consent metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public Consent putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Optional. User-supplied key-value pairs used to organize Consent resources. Metadata keys must: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - begin with a letter - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes Metadata values must be: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes No more than 64 metadata entries can be associated with a given consent.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public Consent name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Identifier. Resource name of the Consent, of the form &#x60;projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}&#x60;. Cannot be changed after creation.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Consent policies(List<GoogleCloudHealthcareV1beta1ConsentPolicy> policies) {
    this.policies = policies;
    return this;
  }

  public Consent addPoliciesItem(GoogleCloudHealthcareV1beta1ConsentPolicy policiesItem) {
    if (this.policies == null) {
      this.policies = new ArrayList<>();
    }
    this.policies.add(policiesItem);
    return this;
  }

  /**
   * Optional. Represents a user&#39;s consent in terms of the resources that can be accessed and under what conditions.
   * @return policies
   */
  @javax.annotation.Nullable
  public List<GoogleCloudHealthcareV1beta1ConsentPolicy> getPolicies() {
    return policies;
  }

  public void setPolicies(List<GoogleCloudHealthcareV1beta1ConsentPolicy> policies) {
    this.policies = policies;
  }


  /**
   * Output only. The timestamp that the revision was created.
   * @return revisionCreateTime
   */
  @javax.annotation.Nullable
  public String getRevisionCreateTime() {
    return revisionCreateTime;
  }



  /**
   * Output only. The revision ID of the Consent. The format is an 8-character hexadecimal string. Refer to a specific revision of a Consent by appending &#x60;@{revision_id}&#x60; to the Consent&#39;s resource name.
   * @return revisionId
   */
  @javax.annotation.Nullable
  public String getRevisionId() {
    return revisionId;
  }



  public Consent state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Required. Indicates the current state of this Consent.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public Consent ttl(String ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Input only. The time to live for this Consent from when it is created.
   * @return ttl
   */
  @javax.annotation.Nullable
  public String getTtl() {
    return ttl;
  }

  public void setTtl(String ttl) {
    this.ttl = ttl;
  }


  public Consent userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Required. User&#39;s UUID provided by the client.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Consent consent = (Consent) o;
    return Objects.equals(this.consentArtifact, consent.consentArtifact) &&
        Objects.equals(this.expireTime, consent.expireTime) &&
        Objects.equals(this.metadata, consent.metadata) &&
        Objects.equals(this.name, consent.name) &&
        Objects.equals(this.policies, consent.policies) &&
        Objects.equals(this.revisionCreateTime, consent.revisionCreateTime) &&
        Objects.equals(this.revisionId, consent.revisionId) &&
        Objects.equals(this.state, consent.state) &&
        Objects.equals(this.ttl, consent.ttl) &&
        Objects.equals(this.userId, consent.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consentArtifact, expireTime, metadata, name, policies, revisionCreateTime, revisionId, state, ttl, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Consent {\n");
    sb.append("    consentArtifact: ").append(toIndentedString(consentArtifact)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    revisionCreateTime: ").append(toIndentedString(revisionCreateTime)).append("\n");
    sb.append("    revisionId: ").append(toIndentedString(revisionId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consentArtifact");
    openapiFields.add("expireTime");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("policies");
    openapiFields.add("revisionCreateTime");
    openapiFields.add("revisionId");
    openapiFields.add("state");
    openapiFields.add("ttl");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Consent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Consent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Consent is not found in the empty JSON string", Consent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Consent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Consent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("consentArtifact") != null && !jsonObj.get("consentArtifact").isJsonNull()) && !jsonObj.get("consentArtifact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consentArtifact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consentArtifact").toString()));
      }
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("policies") != null && !jsonObj.get("policies").isJsonNull()) {
        JsonArray jsonArraypolicies = jsonObj.getAsJsonArray("policies");
        if (jsonArraypolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("policies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `policies` to be an array in the JSON string but got `%s`", jsonObj.get("policies").toString()));
          }

          // validate the optional field `policies` (array)
          for (int i = 0; i < jsonArraypolicies.size(); i++) {
            GoogleCloudHealthcareV1beta1ConsentPolicy.validateJsonElement(jsonArraypolicies.get(i));
          };
        }
      }
      if ((jsonObj.get("revisionCreateTime") != null && !jsonObj.get("revisionCreateTime").isJsonNull()) && !jsonObj.get("revisionCreateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revisionCreateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revisionCreateTime").toString()));
      }
      if ((jsonObj.get("revisionId") != null && !jsonObj.get("revisionId").isJsonNull()) && !jsonObj.get("revisionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revisionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revisionId").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("ttl") != null && !jsonObj.get("ttl").isJsonNull()) && !jsonObj.get("ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ttl").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Consent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Consent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Consent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Consent.class));

       return (TypeAdapter<T>) new TypeAdapter<Consent>() {
           @Override
           public void write(JsonWriter out, Consent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Consent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Consent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Consent
   * @throws IOException if the JSON string is invalid with respect to Consent
   */
  public static Consent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Consent.class);
  }

  /**
   * Convert an instance of Consent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

