/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FilterList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies how to use infoTypes for evaluation. For example, a user might only want to evaluate &#x60;PERSON&#x60;, &#x60;LOCATION&#x60;, and &#x60;AGE&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:11.528078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InfoTypeConfig {
  public static final String SERIALIZED_NAME_EVALUATE_LIST = "evaluateList";
  @SerializedName(SERIALIZED_NAME_EVALUATE_LIST)
  private FilterList evaluateList;

  public static final String SERIALIZED_NAME_IGNORE_LIST = "ignoreList";
  @SerializedName(SERIALIZED_NAME_IGNORE_LIST)
  private FilterList ignoreList;

  public static final String SERIALIZED_NAME_STRICT_MATCHING = "strictMatching";
  @SerializedName(SERIALIZED_NAME_STRICT_MATCHING)
  private Boolean strictMatching;

  public InfoTypeConfig() {
  }

  public InfoTypeConfig evaluateList(FilterList evaluateList) {
    this.evaluateList = evaluateList;
    return this;
  }

  /**
   * Get evaluateList
   * @return evaluateList
   */
  @javax.annotation.Nullable
  public FilterList getEvaluateList() {
    return evaluateList;
  }

  public void setEvaluateList(FilterList evaluateList) {
    this.evaluateList = evaluateList;
  }


  public InfoTypeConfig ignoreList(FilterList ignoreList) {
    this.ignoreList = ignoreList;
    return this;
  }

  /**
   * Get ignoreList
   * @return ignoreList
   */
  @javax.annotation.Nullable
  public FilterList getIgnoreList() {
    return ignoreList;
  }

  public void setIgnoreList(FilterList ignoreList) {
    this.ignoreList = ignoreList;
  }


  public InfoTypeConfig strictMatching(Boolean strictMatching) {
    this.strictMatching = strictMatching;
    return this;
  }

  /**
   * If &#x60;TRUE&#x60;, infoTypes described by &#x60;filter&#x60; are used for evaluation. Otherwise, infoTypes are not considered for evaluation. For example: * Annotated text: \&quot;Toronto is a location\&quot; * Finding 1: &#x60;{\&quot;infoType\&quot;: \&quot;PERSON\&quot;, \&quot;quote\&quot;: \&quot;Toronto\&quot;, \&quot;start\&quot;: 0, \&quot;end\&quot;: 7}&#x60; * Finding 2: &#x60;{\&quot;infoType\&quot;: \&quot;CITY\&quot;, \&quot;quote\&quot;: \&quot;Toronto\&quot;, \&quot;start\&quot;: 0, \&quot;end\&quot;: 7}&#x60; * Finding 3: &#x60;{}&#x60; * Ground truth: &#x60;{\&quot;infoType\&quot;: \&quot;LOCATION\&quot;, \&quot;quote\&quot;: \&quot;Toronto\&quot;, \&quot;start\&quot;: 0, \&quot;end\&quot;: 7}&#x60; When &#x60;strict_matching&#x60; is &#x60;TRUE&#x60;: * Finding 1: 1 false positive * Finding 2: 1 false positive * Finding 3: 1 false negative When &#x60;strict_matching&#x60; is &#x60;FALSE&#x60;: * Finding 1: 1 true positive * Finding 2: 1 true positive * Finding 3: 1 false negative
   * @return strictMatching
   */
  @javax.annotation.Nullable
  public Boolean getStrictMatching() {
    return strictMatching;
  }

  public void setStrictMatching(Boolean strictMatching) {
    this.strictMatching = strictMatching;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InfoTypeConfig infoTypeConfig = (InfoTypeConfig) o;
    return Objects.equals(this.evaluateList, infoTypeConfig.evaluateList) &&
        Objects.equals(this.ignoreList, infoTypeConfig.ignoreList) &&
        Objects.equals(this.strictMatching, infoTypeConfig.strictMatching);
  }

  @Override
  public int hashCode() {
    return Objects.hash(evaluateList, ignoreList, strictMatching);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InfoTypeConfig {\n");
    sb.append("    evaluateList: ").append(toIndentedString(evaluateList)).append("\n");
    sb.append("    ignoreList: ").append(toIndentedString(ignoreList)).append("\n");
    sb.append("    strictMatching: ").append(toIndentedString(strictMatching)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("evaluateList");
    openapiFields.add("ignoreList");
    openapiFields.add("strictMatching");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InfoTypeConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InfoTypeConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InfoTypeConfig is not found in the empty JSON string", InfoTypeConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InfoTypeConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InfoTypeConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `evaluateList`
      if (jsonObj.get("evaluateList") != null && !jsonObj.get("evaluateList").isJsonNull()) {
        FilterList.validateJsonElement(jsonObj.get("evaluateList"));
      }
      // validate the optional field `ignoreList`
      if (jsonObj.get("ignoreList") != null && !jsonObj.get("ignoreList").isJsonNull()) {
        FilterList.validateJsonElement(jsonObj.get("ignoreList"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InfoTypeConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InfoTypeConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InfoTypeConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InfoTypeConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<InfoTypeConfig>() {
           @Override
           public void write(JsonWriter out, InfoTypeConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InfoTypeConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InfoTypeConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InfoTypeConfig
   * @throws IOException if the JSON string is invalid with respect to InfoTypeConfig
   */
  public static InfoTypeConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InfoTypeConfig.class);
  }

  /**
   * Convert an instance of InfoTypeConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

