/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AnnotationSource;
import org.openapitools.client.model.ImageAnnotation;
import org.openapitools.client.model.ResourceAnnotation;
import org.openapitools.client.model.SensitiveTextAnnotation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An annotation record.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:11.528078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Annotation {
  public static final String SERIALIZED_NAME_ANNOTATION_SOURCE = "annotationSource";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_SOURCE)
  private AnnotationSource annotationSource;

  public static final String SERIALIZED_NAME_CUSTOM_DATA = "customData";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATA)
  private Map<String, String> customData = new HashMap<>();

  public static final String SERIALIZED_NAME_IMAGE_ANNOTATION = "imageAnnotation";
  @SerializedName(SERIALIZED_NAME_IMAGE_ANNOTATION)
  private ImageAnnotation imageAnnotation;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOURCE_ANNOTATION = "resourceAnnotation";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ANNOTATION)
  private ResourceAnnotation resourceAnnotation;

  public static final String SERIALIZED_NAME_TEXT_ANNOTATION = "textAnnotation";
  @SerializedName(SERIALIZED_NAME_TEXT_ANNOTATION)
  private SensitiveTextAnnotation textAnnotation;

  public Annotation() {
  }

  public Annotation annotationSource(AnnotationSource annotationSource) {
    this.annotationSource = annotationSource;
    return this;
  }

  /**
   * Get annotationSource
   * @return annotationSource
   */
  @javax.annotation.Nullable
  public AnnotationSource getAnnotationSource() {
    return annotationSource;
  }

  public void setAnnotationSource(AnnotationSource annotationSource) {
    this.annotationSource = annotationSource;
  }


  public Annotation customData(Map<String, String> customData) {
    this.customData = customData;
    return this;
  }

  public Annotation putCustomDataItem(String key, String customDataItem) {
    if (this.customData == null) {
      this.customData = new HashMap<>();
    }
    this.customData.put(key, customDataItem);
    return this;
  }

  /**
   * Additional information for this annotation record, such as annotator and verifier information or study campaign.
   * @return customData
   */
  @javax.annotation.Nullable
  public Map<String, String> getCustomData() {
    return customData;
  }

  public void setCustomData(Map<String, String> customData) {
    this.customData = customData;
  }


  public Annotation imageAnnotation(ImageAnnotation imageAnnotation) {
    this.imageAnnotation = imageAnnotation;
    return this;
  }

  /**
   * Get imageAnnotation
   * @return imageAnnotation
   */
  @javax.annotation.Nullable
  public ImageAnnotation getImageAnnotation() {
    return imageAnnotation;
  }

  public void setImageAnnotation(ImageAnnotation imageAnnotation) {
    this.imageAnnotation = imageAnnotation;
  }


  public Annotation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Identifier. Resource name of the Annotation, of the form &#x60;projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}/annotations/{annotation_id}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Annotation resourceAnnotation(ResourceAnnotation resourceAnnotation) {
    this.resourceAnnotation = resourceAnnotation;
    return this;
  }

  /**
   * Get resourceAnnotation
   * @return resourceAnnotation
   */
  @javax.annotation.Nullable
  public ResourceAnnotation getResourceAnnotation() {
    return resourceAnnotation;
  }

  public void setResourceAnnotation(ResourceAnnotation resourceAnnotation) {
    this.resourceAnnotation = resourceAnnotation;
  }


  public Annotation textAnnotation(SensitiveTextAnnotation textAnnotation) {
    this.textAnnotation = textAnnotation;
    return this;
  }

  /**
   * Get textAnnotation
   * @return textAnnotation
   */
  @javax.annotation.Nullable
  public SensitiveTextAnnotation getTextAnnotation() {
    return textAnnotation;
  }

  public void setTextAnnotation(SensitiveTextAnnotation textAnnotation) {
    this.textAnnotation = textAnnotation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Annotation annotation = (Annotation) o;
    return Objects.equals(this.annotationSource, annotation.annotationSource) &&
        Objects.equals(this.customData, annotation.customData) &&
        Objects.equals(this.imageAnnotation, annotation.imageAnnotation) &&
        Objects.equals(this.name, annotation.name) &&
        Objects.equals(this.resourceAnnotation, annotation.resourceAnnotation) &&
        Objects.equals(this.textAnnotation, annotation.textAnnotation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationSource, customData, imageAnnotation, name, resourceAnnotation, textAnnotation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Annotation {\n");
    sb.append("    annotationSource: ").append(toIndentedString(annotationSource)).append("\n");
    sb.append("    customData: ").append(toIndentedString(customData)).append("\n");
    sb.append("    imageAnnotation: ").append(toIndentedString(imageAnnotation)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resourceAnnotation: ").append(toIndentedString(resourceAnnotation)).append("\n");
    sb.append("    textAnnotation: ").append(toIndentedString(textAnnotation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotationSource");
    openapiFields.add("customData");
    openapiFields.add("imageAnnotation");
    openapiFields.add("name");
    openapiFields.add("resourceAnnotation");
    openapiFields.add("textAnnotation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Annotation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Annotation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Annotation is not found in the empty JSON string", Annotation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Annotation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Annotation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `annotationSource`
      if (jsonObj.get("annotationSource") != null && !jsonObj.get("annotationSource").isJsonNull()) {
        AnnotationSource.validateJsonElement(jsonObj.get("annotationSource"));
      }
      // validate the optional field `imageAnnotation`
      if (jsonObj.get("imageAnnotation") != null && !jsonObj.get("imageAnnotation").isJsonNull()) {
        ImageAnnotation.validateJsonElement(jsonObj.get("imageAnnotation"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `resourceAnnotation`
      if (jsonObj.get("resourceAnnotation") != null && !jsonObj.get("resourceAnnotation").isJsonNull()) {
        ResourceAnnotation.validateJsonElement(jsonObj.get("resourceAnnotation"));
      }
      // validate the optional field `textAnnotation`
      if (jsonObj.get("textAnnotation") != null && !jsonObj.get("textAnnotation").isJsonNull()) {
        SensitiveTextAnnotation.validateJsonElement(jsonObj.get("textAnnotation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Annotation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Annotation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Annotation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Annotation.class));

       return (TypeAdapter<T>) new TypeAdapter<Annotation>() {
           @Override
           public void write(JsonWriter out, Annotation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Annotation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Annotation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Annotation
   * @throws IOException if the JSON string is invalid with respect to Annotation
   */
  public static Annotation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Annotation.class);
  }

  /**
   * Convert an instance of Annotation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

