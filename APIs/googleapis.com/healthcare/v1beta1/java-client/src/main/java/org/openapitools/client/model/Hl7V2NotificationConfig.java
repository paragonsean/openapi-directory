/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies where and whether to send notifications upon changes to a data store.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:11.528078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Hl7V2NotificationConfig {
  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_PUBSUB_TOPIC = "pubsubTopic";
  @SerializedName(SERIALIZED_NAME_PUBSUB_TOPIC)
  private String pubsubTopic;

  public Hl7V2NotificationConfig() {
  }

  public Hl7V2NotificationConfig filter(String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Restricts notifications sent for messages matching a filter. If this is empty, all messages are matched. The following syntax is available: * A string field value can be written as text inside quotation marks, for example &#x60;\&quot;query text\&quot;&#x60;. The only valid relational operation for text fields is equality (&#x60;&#x3D;&#x60;), where text is searched within the field, rather than having the field be equal to the text. For example, &#x60;\&quot;Comment &#x3D; great\&quot;&#x60; returns messages with &#x60;great&#x60; in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (&#x60;&#x3D;&#x60;), along with the less than/greater than operators (&#x60;&lt;&#x60;, &#x60;&lt;&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;&gt;&#x3D;&#x60;). Note that there is no inequality (&#x60;!&#x3D;&#x60;) operator. You can prepend the &#x60;NOT&#x60; operator to an expression to negate it. * A date field value must be written in &#x60;yyyy-mm-dd&#x60; form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (&#x60;&#x3D;&#x60;) , along with the less than/greater than operators (&#x60;&lt;&#x60;, &#x60;&lt;&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;&gt;&#x3D;&#x60;). Note that there is no inequality (&#x60;!&#x3D;&#x60;) operator. You can prepend the &#x60;NOT&#x60; operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding &#x60;AND&#x60; or &#x60;OR&#x60; operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it&#39;s just another part of the character string to be matched. You can prepend the &#x60;NOT&#x60; operator to an expression to negate it. Fields/functions available for filtering are: * &#x60;message_type&#x60;, from the MSH-9.1 field. For example, &#x60;NOT message_type &#x3D; \&quot;ADT\&quot;&#x60;. * &#x60;send_date&#x60; or &#x60;sendDate&#x60;, the YYYY-MM-DD date the message was sent in the dataset&#39;s time_zone, from the MSH-7 segment. For example, &#x60;send_date &lt; \&quot;2017-01-02\&quot;&#x60;. * &#x60;send_time&#x60;, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, &#x60;send_time &lt; \&quot;2017-01-02T00:00:00-05:00\&quot;&#x60;. * &#x60;create_time&#x60;, the timestamp when the message was created in the HL7v2 store. Use the RFC3339 time format for comparisons. For example, &#x60;create_time &lt; \&quot;2017-01-02T00:00:00-05:00\&quot;&#x60;. * &#x60;send_facility&#x60;, the care center that the message came from, from the MSH-4 segment. For example, &#x60;send_facility &#x3D; \&quot;ABC\&quot;&#x60;. * &#x60;PatientId(value, type)&#x60;, which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, &#x60;PatientId(\&quot;123456\&quot;, \&quot;MRN\&quot;)&#x60;. * &#x60;labels.x&#x60;, a string value of the label with key &#x60;x&#x60; as set using the Message.labels map. For example, &#x60;labels.\&quot;priority\&quot;&#x3D;\&quot;high\&quot;&#x60;. The operator &#x60;:*&#x60; can be used to assert the existence of a label. For example, &#x60;labels.\&quot;priority\&quot;:*&#x60;.
   * @return filter
   */
  @javax.annotation.Nullable
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }


  public Hl7V2NotificationConfig pubsubTopic(String pubsubTopic) {
    this.pubsubTopic = pubsubTopic;
    return this;
  }

  /**
   * The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. The notification is a &#x60;PubsubMessage&#x60; with the following fields: * &#x60;PubsubMessage.Data&#x60; contains the resource name. * &#x60;PubsubMessage.MessageId&#x60; is the ID of this notification. It is guaranteed to be unique within the topic. * &#x60;PubsubMessage.PublishTime&#x60; is the time when the message was published. Note that notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can&#39;t be published to Pub/Sub, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).
   * @return pubsubTopic
   */
  @javax.annotation.Nullable
  public String getPubsubTopic() {
    return pubsubTopic;
  }

  public void setPubsubTopic(String pubsubTopic) {
    this.pubsubTopic = pubsubTopic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Hl7V2NotificationConfig hl7V2NotificationConfig = (Hl7V2NotificationConfig) o;
    return Objects.equals(this.filter, hl7V2NotificationConfig.filter) &&
        Objects.equals(this.pubsubTopic, hl7V2NotificationConfig.pubsubTopic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filter, pubsubTopic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Hl7V2NotificationConfig {\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    pubsubTopic: ").append(toIndentedString(pubsubTopic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filter");
    openapiFields.add("pubsubTopic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Hl7V2NotificationConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Hl7V2NotificationConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Hl7V2NotificationConfig is not found in the empty JSON string", Hl7V2NotificationConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Hl7V2NotificationConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Hl7V2NotificationConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      if ((jsonObj.get("pubsubTopic") != null && !jsonObj.get("pubsubTopic").isJsonNull()) && !jsonObj.get("pubsubTopic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pubsubTopic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pubsubTopic").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Hl7V2NotificationConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Hl7V2NotificationConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Hl7V2NotificationConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Hl7V2NotificationConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<Hl7V2NotificationConfig>() {
           @Override
           public void write(JsonWriter out, Hl7V2NotificationConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Hl7V2NotificationConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Hl7V2NotificationConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Hl7V2NotificationConfig
   * @throws IOException if the JSON string is invalid with respect to Hl7V2NotificationConfig
   */
  public static Hl7V2NotificationConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Hl7V2NotificationConfig.class);
  }

  /**
   * Convert an instance of Hl7V2NotificationConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

