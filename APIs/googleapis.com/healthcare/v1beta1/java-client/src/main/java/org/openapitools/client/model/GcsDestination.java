/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Cloud Storage output destination. The Cloud Healthcare Service Agent requires the &#x60;roles/storage.objectAdmin&#x60; Cloud IAM roles on the Cloud Storage location.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:11.528078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GcsDestination {
  /**
   * The format of the exported HL7v2 message files.
   */
  @JsonAdapter(ContentStructureEnum.Adapter.class)
  public enum ContentStructureEnum {
    CONTENT_STRUCTURE_UNSPECIFIED("CONTENT_STRUCTURE_UNSPECIFIED"),
    
    MESSAGE_JSON("MESSAGE_JSON");

    private String value;

    ContentStructureEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentStructureEnum fromValue(String value) {
      for (ContentStructureEnum b : ContentStructureEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentStructureEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentStructureEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentStructureEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentStructureEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContentStructureEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_STRUCTURE = "contentStructure";
  @SerializedName(SERIALIZED_NAME_CONTENT_STRUCTURE)
  private ContentStructureEnum contentStructure;

  /**
   * Specifies the parts of the Message resource to include in the export. If not specified, FULL is used.
   */
  @JsonAdapter(MessageViewEnum.Adapter.class)
  public enum MessageViewEnum {
    MESSAGE_VIEW_UNSPECIFIED("MESSAGE_VIEW_UNSPECIFIED"),
    
    RAW_ONLY("RAW_ONLY"),
    
    PARSED_ONLY("PARSED_ONLY"),
    
    FULL("FULL"),
    
    SCHEMATIZED_ONLY("SCHEMATIZED_ONLY"),
    
    BASIC("BASIC");

    private String value;

    MessageViewEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MessageViewEnum fromValue(String value) {
      for (MessageViewEnum b : MessageViewEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MessageViewEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MessageViewEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MessageViewEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MessageViewEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MessageViewEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MESSAGE_VIEW = "messageView";
  @SerializedName(SERIALIZED_NAME_MESSAGE_VIEW)
  private MessageViewEnum messageView;

  public static final String SERIALIZED_NAME_URI_PREFIX = "uriPrefix";
  @SerializedName(SERIALIZED_NAME_URI_PREFIX)
  private String uriPrefix;

  public GcsDestination() {
  }

  public GcsDestination contentStructure(ContentStructureEnum contentStructure) {
    this.contentStructure = contentStructure;
    return this;
  }

  /**
   * The format of the exported HL7v2 message files.
   * @return contentStructure
   */
  @javax.annotation.Nullable
  public ContentStructureEnum getContentStructure() {
    return contentStructure;
  }

  public void setContentStructure(ContentStructureEnum contentStructure) {
    this.contentStructure = contentStructure;
  }


  public GcsDestination messageView(MessageViewEnum messageView) {
    this.messageView = messageView;
    return this;
  }

  /**
   * Specifies the parts of the Message resource to include in the export. If not specified, FULL is used.
   * @return messageView
   */
  @javax.annotation.Nullable
  public MessageViewEnum getMessageView() {
    return messageView;
  }

  public void setMessageView(MessageViewEnum messageView) {
    this.messageView = messageView;
  }


  public GcsDestination uriPrefix(String uriPrefix) {
    this.uriPrefix = uriPrefix;
    return this;
  }

  /**
   * URI of an existing Cloud Storage directory where the server writes result files, in the format &#x60;gs://{bucket-id}/{path/to/destination/dir}&#x60;. If there is no trailing slash, the service appends one when composing the object path.
   * @return uriPrefix
   */
  @javax.annotation.Nullable
  public String getUriPrefix() {
    return uriPrefix;
  }

  public void setUriPrefix(String uriPrefix) {
    this.uriPrefix = uriPrefix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GcsDestination gcsDestination = (GcsDestination) o;
    return Objects.equals(this.contentStructure, gcsDestination.contentStructure) &&
        Objects.equals(this.messageView, gcsDestination.messageView) &&
        Objects.equals(this.uriPrefix, gcsDestination.uriPrefix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentStructure, messageView, uriPrefix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GcsDestination {\n");
    sb.append("    contentStructure: ").append(toIndentedString(contentStructure)).append("\n");
    sb.append("    messageView: ").append(toIndentedString(messageView)).append("\n");
    sb.append("    uriPrefix: ").append(toIndentedString(uriPrefix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentStructure");
    openapiFields.add("messageView");
    openapiFields.add("uriPrefix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GcsDestination
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GcsDestination.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GcsDestination is not found in the empty JSON string", GcsDestination.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GcsDestination.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GcsDestination` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contentStructure") != null && !jsonObj.get("contentStructure").isJsonNull()) && !jsonObj.get("contentStructure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentStructure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentStructure").toString()));
      }
      // validate the optional field `contentStructure`
      if (jsonObj.get("contentStructure") != null && !jsonObj.get("contentStructure").isJsonNull()) {
        ContentStructureEnum.validateJsonElement(jsonObj.get("contentStructure"));
      }
      if ((jsonObj.get("messageView") != null && !jsonObj.get("messageView").isJsonNull()) && !jsonObj.get("messageView").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageView` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageView").toString()));
      }
      // validate the optional field `messageView`
      if (jsonObj.get("messageView") != null && !jsonObj.get("messageView").isJsonNull()) {
        MessageViewEnum.validateJsonElement(jsonObj.get("messageView"));
      }
      if ((jsonObj.get("uriPrefix") != null && !jsonObj.get("uriPrefix").isJsonNull()) && !jsonObj.get("uriPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uriPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uriPrefix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GcsDestination.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GcsDestination' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GcsDestination> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GcsDestination.class));

       return (TypeAdapter<T>) new TypeAdapter<GcsDestination>() {
           @Override
           public void write(JsonWriter out, GcsDestination value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GcsDestination read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GcsDestination given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GcsDestination
   * @throws IOException if the JSON string is invalid with respect to GcsDestination
   */
  public static GcsDestination fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GcsDestination.class);
  }

  /**
   * Convert an instance of GcsDestination to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

