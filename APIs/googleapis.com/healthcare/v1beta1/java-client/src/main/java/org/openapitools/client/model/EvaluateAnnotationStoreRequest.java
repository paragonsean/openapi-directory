/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination;
import org.openapitools.client.model.InfoTypeConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to evaluate an Annotation store against a ground truth [Annotation store].
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:11.528078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EvaluateAnnotationStoreRequest {
  public static final String SERIALIZED_NAME_BIGQUERY_DESTINATION = "bigqueryDestination";
  @SerializedName(SERIALIZED_NAME_BIGQUERY_DESTINATION)
  private GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination bigqueryDestination;

  public static final String SERIALIZED_NAME_EVAL_INFO_TYPE_MAPPING = "evalInfoTypeMapping";
  @SerializedName(SERIALIZED_NAME_EVAL_INFO_TYPE_MAPPING)
  private Map<String, String> evalInfoTypeMapping = new HashMap<>();

  public static final String SERIALIZED_NAME_GOLDEN_INFO_TYPE_MAPPING = "goldenInfoTypeMapping";
  @SerializedName(SERIALIZED_NAME_GOLDEN_INFO_TYPE_MAPPING)
  private Map<String, String> goldenInfoTypeMapping = new HashMap<>();

  public static final String SERIALIZED_NAME_GOLDEN_STORE = "goldenStore";
  @SerializedName(SERIALIZED_NAME_GOLDEN_STORE)
  private String goldenStore;

  public static final String SERIALIZED_NAME_INFO_TYPE_CONFIG = "infoTypeConfig";
  @SerializedName(SERIALIZED_NAME_INFO_TYPE_CONFIG)
  private InfoTypeConfig infoTypeConfig;

  public EvaluateAnnotationStoreRequest() {
  }

  public EvaluateAnnotationStoreRequest bigqueryDestination(GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination bigqueryDestination) {
    this.bigqueryDestination = bigqueryDestination;
    return this;
  }

  /**
   * Get bigqueryDestination
   * @return bigqueryDestination
   */
  @javax.annotation.Nullable
  public GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination getBigqueryDestination() {
    return bigqueryDestination;
  }

  public void setBigqueryDestination(GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination bigqueryDestination) {
    this.bigqueryDestination = bigqueryDestination;
  }


  public EvaluateAnnotationStoreRequest evalInfoTypeMapping(Map<String, String> evalInfoTypeMapping) {
    this.evalInfoTypeMapping = evalInfoTypeMapping;
    return this;
  }

  public EvaluateAnnotationStoreRequest putEvalInfoTypeMappingItem(String key, String evalInfoTypeMappingItem) {
    if (this.evalInfoTypeMapping == null) {
      this.evalInfoTypeMapping = new HashMap<>();
    }
    this.evalInfoTypeMapping.put(key, evalInfoTypeMappingItem);
    return this;
  }

  /**
   * Optional. InfoType mapping for &#x60;eval_store&#x60;. Different resources can map to the same infoType. For example, &#x60;PERSON_NAME&#x60;, &#x60;PERSON&#x60;, &#x60;NAME&#x60;, and &#x60;HUMAN&#x60; are different. To map all of these into a single infoType (such as &#x60;PERSON_NAME&#x60;), specify the following mapping: &#x60;&#x60;&#x60; info_type_mapping[\&quot;PERSON\&quot;] &#x3D; \&quot;PERSON_NAME\&quot; info_type_mapping[\&quot;NAME\&quot;] &#x3D; \&quot;PERSON_NAME\&quot; info_type_mapping[\&quot;HUMAN\&quot;] &#x3D; \&quot;PERSON_NAME\&quot; &#x60;&#x60;&#x60; Unmentioned infoTypes, such as &#x60;DATE&#x60;, are treated as identity mapping. For example: &#x60;&#x60;&#x60; info_type_mapping[\&quot;DATE\&quot;] &#x3D; \&quot;DATE\&quot; &#x60;&#x60;&#x60; InfoTypes are case-insensitive.
   * @return evalInfoTypeMapping
   */
  @javax.annotation.Nullable
  public Map<String, String> getEvalInfoTypeMapping() {
    return evalInfoTypeMapping;
  }

  public void setEvalInfoTypeMapping(Map<String, String> evalInfoTypeMapping) {
    this.evalInfoTypeMapping = evalInfoTypeMapping;
  }


  public EvaluateAnnotationStoreRequest goldenInfoTypeMapping(Map<String, String> goldenInfoTypeMapping) {
    this.goldenInfoTypeMapping = goldenInfoTypeMapping;
    return this;
  }

  public EvaluateAnnotationStoreRequest putGoldenInfoTypeMappingItem(String key, String goldenInfoTypeMappingItem) {
    if (this.goldenInfoTypeMapping == null) {
      this.goldenInfoTypeMapping = new HashMap<>();
    }
    this.goldenInfoTypeMapping.put(key, goldenInfoTypeMappingItem);
    return this;
  }

  /**
   * Optional. Similar to &#x60;eval_info_type_mapping&#x60;, infoType mapping for &#x60;golden_store&#x60;.
   * @return goldenInfoTypeMapping
   */
  @javax.annotation.Nullable
  public Map<String, String> getGoldenInfoTypeMapping() {
    return goldenInfoTypeMapping;
  }

  public void setGoldenInfoTypeMapping(Map<String, String> goldenInfoTypeMapping) {
    this.goldenInfoTypeMapping = goldenInfoTypeMapping;
  }


  public EvaluateAnnotationStoreRequest goldenStore(String goldenStore) {
    this.goldenStore = goldenStore;
    return this;
  }

  /**
   * Required. The Annotation store to use as ground truth, in the format of &#x60;projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}&#x60;.
   * @return goldenStore
   */
  @javax.annotation.Nullable
  public String getGoldenStore() {
    return goldenStore;
  }

  public void setGoldenStore(String goldenStore) {
    this.goldenStore = goldenStore;
  }


  public EvaluateAnnotationStoreRequest infoTypeConfig(InfoTypeConfig infoTypeConfig) {
    this.infoTypeConfig = infoTypeConfig;
    return this;
  }

  /**
   * Get infoTypeConfig
   * @return infoTypeConfig
   */
  @javax.annotation.Nullable
  public InfoTypeConfig getInfoTypeConfig() {
    return infoTypeConfig;
  }

  public void setInfoTypeConfig(InfoTypeConfig infoTypeConfig) {
    this.infoTypeConfig = infoTypeConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvaluateAnnotationStoreRequest evaluateAnnotationStoreRequest = (EvaluateAnnotationStoreRequest) o;
    return Objects.equals(this.bigqueryDestination, evaluateAnnotationStoreRequest.bigqueryDestination) &&
        Objects.equals(this.evalInfoTypeMapping, evaluateAnnotationStoreRequest.evalInfoTypeMapping) &&
        Objects.equals(this.goldenInfoTypeMapping, evaluateAnnotationStoreRequest.goldenInfoTypeMapping) &&
        Objects.equals(this.goldenStore, evaluateAnnotationStoreRequest.goldenStore) &&
        Objects.equals(this.infoTypeConfig, evaluateAnnotationStoreRequest.infoTypeConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bigqueryDestination, evalInfoTypeMapping, goldenInfoTypeMapping, goldenStore, infoTypeConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvaluateAnnotationStoreRequest {\n");
    sb.append("    bigqueryDestination: ").append(toIndentedString(bigqueryDestination)).append("\n");
    sb.append("    evalInfoTypeMapping: ").append(toIndentedString(evalInfoTypeMapping)).append("\n");
    sb.append("    goldenInfoTypeMapping: ").append(toIndentedString(goldenInfoTypeMapping)).append("\n");
    sb.append("    goldenStore: ").append(toIndentedString(goldenStore)).append("\n");
    sb.append("    infoTypeConfig: ").append(toIndentedString(infoTypeConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bigqueryDestination");
    openapiFields.add("evalInfoTypeMapping");
    openapiFields.add("goldenInfoTypeMapping");
    openapiFields.add("goldenStore");
    openapiFields.add("infoTypeConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EvaluateAnnotationStoreRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EvaluateAnnotationStoreRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EvaluateAnnotationStoreRequest is not found in the empty JSON string", EvaluateAnnotationStoreRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EvaluateAnnotationStoreRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EvaluateAnnotationStoreRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bigqueryDestination`
      if (jsonObj.get("bigqueryDestination") != null && !jsonObj.get("bigqueryDestination").isJsonNull()) {
        GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.validateJsonElement(jsonObj.get("bigqueryDestination"));
      }
      if ((jsonObj.get("goldenStore") != null && !jsonObj.get("goldenStore").isJsonNull()) && !jsonObj.get("goldenStore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goldenStore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goldenStore").toString()));
      }
      // validate the optional field `infoTypeConfig`
      if (jsonObj.get("infoTypeConfig") != null && !jsonObj.get("infoTypeConfig").isJsonNull()) {
        InfoTypeConfig.validateJsonElement(jsonObj.get("infoTypeConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EvaluateAnnotationStoreRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EvaluateAnnotationStoreRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EvaluateAnnotationStoreRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EvaluateAnnotationStoreRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EvaluateAnnotationStoreRequest>() {
           @Override
           public void write(JsonWriter out, EvaluateAnnotationStoreRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EvaluateAnnotationStoreRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EvaluateAnnotationStoreRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EvaluateAnnotationStoreRequest
   * @throws IOException if the JSON string is invalid with respect to EvaluateAnnotationStoreRequest
   */
  public static EvaluateAnnotationStoreRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EvaluateAnnotationStoreRequest.class);
  }

  /**
   * Convert an instance of EvaluateAnnotationStoreRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

