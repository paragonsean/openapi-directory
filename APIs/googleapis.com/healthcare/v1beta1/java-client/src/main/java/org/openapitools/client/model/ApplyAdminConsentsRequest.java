/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AdminConsents;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to apply the admin Consent resources for the specified FHIR store.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:11.528078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplyAdminConsentsRequest {
  public static final String SERIALIZED_NAME_NEW_CONSENTS_LIST = "newConsentsList";
  @SerializedName(SERIALIZED_NAME_NEW_CONSENTS_LIST)
  private AdminConsents newConsentsList;

  public static final String SERIALIZED_NAME_VALIDATE_ONLY = "validateOnly";
  @SerializedName(SERIALIZED_NAME_VALIDATE_ONLY)
  private Boolean validateOnly;

  public ApplyAdminConsentsRequest() {
  }

  public ApplyAdminConsentsRequest newConsentsList(AdminConsents newConsentsList) {
    this.newConsentsList = newConsentsList;
    return this;
  }

  /**
   * Get newConsentsList
   * @return newConsentsList
   */
  @javax.annotation.Nullable
  public AdminConsents getNewConsentsList() {
    return newConsentsList;
  }

  public void setNewConsentsList(AdminConsents newConsentsList) {
    this.newConsentsList = newConsentsList;
  }


  public ApplyAdminConsentsRequest validateOnly(Boolean validateOnly) {
    this.validateOnly = validateOnly;
    return this;
  }

  /**
   * If true, the method only validates Consent resources to make sure they are supported. Otherwise, the method applies the aggregate consent information to update the enforcement model and reindex the FHIR resources. If all Consent resources can be applied successfully, the ApplyAdminConsentsResponse is returned containing the following fields: * &#x60;consent_apply_success&#x60; to indicate the number of Consent resources applied. * &#x60;affected_resources&#x60; to indicate the number of resources that might have had their consent access changed. If, however, one or more Consent resources are unsupported or cannot be applied, the method fails and ApplyAdminConsentsErrorDetail is is returned with details about the unsupported Consent resources.
   * @return validateOnly
   */
  @javax.annotation.Nullable
  public Boolean getValidateOnly() {
    return validateOnly;
  }

  public void setValidateOnly(Boolean validateOnly) {
    this.validateOnly = validateOnly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplyAdminConsentsRequest applyAdminConsentsRequest = (ApplyAdminConsentsRequest) o;
    return Objects.equals(this.newConsentsList, applyAdminConsentsRequest.newConsentsList) &&
        Objects.equals(this.validateOnly, applyAdminConsentsRequest.validateOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(newConsentsList, validateOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplyAdminConsentsRequest {\n");
    sb.append("    newConsentsList: ").append(toIndentedString(newConsentsList)).append("\n");
    sb.append("    validateOnly: ").append(toIndentedString(validateOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("newConsentsList");
    openapiFields.add("validateOnly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplyAdminConsentsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplyAdminConsentsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplyAdminConsentsRequest is not found in the empty JSON string", ApplyAdminConsentsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplyAdminConsentsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplyAdminConsentsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `newConsentsList`
      if (jsonObj.get("newConsentsList") != null && !jsonObj.get("newConsentsList").isJsonNull()) {
        AdminConsents.validateJsonElement(jsonObj.get("newConsentsList"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplyAdminConsentsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplyAdminConsentsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplyAdminConsentsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplyAdminConsentsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplyAdminConsentsRequest>() {
           @Override
           public void write(JsonWriter out, ApplyAdminConsentsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplyAdminConsentsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplyAdminConsentsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplyAdminConsentsRequest
   * @throws IOException if the JSON string is invalid with respect to ApplyAdminConsentsRequest
   */
  public static ApplyAdminConsentsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplyAdminConsentsRequest.class);
  }

  /**
   * Convert an instance of ApplyAdminConsentsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

