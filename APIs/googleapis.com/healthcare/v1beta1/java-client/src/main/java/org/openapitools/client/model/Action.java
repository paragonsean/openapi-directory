/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImageConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies a selection of tags and an &#x60;Action&#x60; to apply to each one.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:11.528078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Action {
  public static final String SERIALIZED_NAME_CLEAN_IMAGE_TAG = "cleanImageTag";
  @SerializedName(SERIALIZED_NAME_CLEAN_IMAGE_TAG)
  private ImageConfig cleanImageTag;

  public static final String SERIALIZED_NAME_CLEAN_TEXT_TAG = "cleanTextTag";
  @SerializedName(SERIALIZED_NAME_CLEAN_TEXT_TAG)
  private Object cleanTextTag;

  public static final String SERIALIZED_NAME_DELETE_TAG = "deleteTag";
  @SerializedName(SERIALIZED_NAME_DELETE_TAG)
  private Object deleteTag;

  public static final String SERIALIZED_NAME_KEEP_TAG = "keepTag";
  @SerializedName(SERIALIZED_NAME_KEEP_TAG)
  private Object keepTag;

  public static final String SERIALIZED_NAME_QUERIES = "queries";
  @SerializedName(SERIALIZED_NAME_QUERIES)
  private List<String> queries = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECURSE_TAG = "recurseTag";
  @SerializedName(SERIALIZED_NAME_RECURSE_TAG)
  private Object recurseTag;

  public static final String SERIALIZED_NAME_REGEN_UID_TAG = "regenUidTag";
  @SerializedName(SERIALIZED_NAME_REGEN_UID_TAG)
  private Object regenUidTag;

  public static final String SERIALIZED_NAME_REMOVE_TAG = "removeTag";
  @SerializedName(SERIALIZED_NAME_REMOVE_TAG)
  private Object removeTag;

  public static final String SERIALIZED_NAME_RESET_TAG = "resetTag";
  @SerializedName(SERIALIZED_NAME_RESET_TAG)
  private Object resetTag;

  public Action() {
  }

  public Action cleanImageTag(ImageConfig cleanImageTag) {
    this.cleanImageTag = cleanImageTag;
    return this;
  }

  /**
   * Get cleanImageTag
   * @return cleanImageTag
   */
  @javax.annotation.Nullable
  public ImageConfig getCleanImageTag() {
    return cleanImageTag;
  }

  public void setCleanImageTag(ImageConfig cleanImageTag) {
    this.cleanImageTag = cleanImageTag;
  }


  public Action cleanTextTag(Object cleanTextTag) {
    this.cleanTextTag = cleanTextTag;
    return this;
  }

  /**
   * Inspect text and transform sensitive text. Configurable using TextConfig. Supported [Value Representations] (http://dicom.nema.org/medical/dicom/2018e/output/chtml/part05/sect_6.2.html#table_6.2-1): AE, LO, LT, PN, SH, ST, UC, UT, DA, DT, AS
   * @return cleanTextTag
   */
  @javax.annotation.Nullable
  public Object getCleanTextTag() {
    return cleanTextTag;
  }

  public void setCleanTextTag(Object cleanTextTag) {
    this.cleanTextTag = cleanTextTag;
  }


  public Action deleteTag(Object deleteTag) {
    this.deleteTag = deleteTag;
    return this;
  }

  /**
   * Delete tag.
   * @return deleteTag
   */
  @javax.annotation.Nullable
  public Object getDeleteTag() {
    return deleteTag;
  }

  public void setDeleteTag(Object deleteTag) {
    this.deleteTag = deleteTag;
  }


  public Action keepTag(Object keepTag) {
    this.keepTag = keepTag;
    return this;
  }

  /**
   * Keep tag unchanged.
   * @return keepTag
   */
  @javax.annotation.Nullable
  public Object getKeepTag() {
    return keepTag;
  }

  public void setKeepTag(Object keepTag) {
    this.keepTag = keepTag;
  }


  public Action queries(List<String> queries) {
    this.queries = queries;
    return this;
  }

  public Action addQueriesItem(String queriesItem) {
    if (this.queries == null) {
      this.queries = new ArrayList<>();
    }
    this.queries.add(queriesItem);
    return this;
  }

  /**
   * Select all tags with the listed tag IDs, names, or Value Representations (VRs). Examples: ID: \&quot;00100010\&quot; Keyword: \&quot;PatientName\&quot; VR: \&quot;PN\&quot;
   * @return queries
   */
  @javax.annotation.Nullable
  public List<String> getQueries() {
    return queries;
  }

  public void setQueries(List<String> queries) {
    this.queries = queries;
  }


  public Action recurseTag(Object recurseTag) {
    this.recurseTag = recurseTag;
    return this;
  }

  /**
   * Recursively apply DICOM de-id to tags nested in a sequence. Supported [Value Representation] (http://dicom.nema.org/medical/dicom/2018e/output/chtml/part05/sect_6.2.html#table_6.2-1): SQ
   * @return recurseTag
   */
  @javax.annotation.Nullable
  public Object getRecurseTag() {
    return recurseTag;
  }

  public void setRecurseTag(Object recurseTag) {
    this.recurseTag = recurseTag;
  }


  public Action regenUidTag(Object regenUidTag) {
    this.regenUidTag = regenUidTag;
    return this;
  }

  /**
   * Replace UID with a new generated UID. Supported [Value Representation] (http://dicom.nema.org/medical/dicom/2018e/output/chtml/part05/sect_6.2.html#table_6.2-1): UI
   * @return regenUidTag
   */
  @javax.annotation.Nullable
  public Object getRegenUidTag() {
    return regenUidTag;
  }

  public void setRegenUidTag(Object regenUidTag) {
    this.regenUidTag = regenUidTag;
  }


  public Action removeTag(Object removeTag) {
    this.removeTag = removeTag;
    return this;
  }

  /**
   * Replace with empty tag.
   * @return removeTag
   */
  @javax.annotation.Nullable
  public Object getRemoveTag() {
    return removeTag;
  }

  public void setRemoveTag(Object removeTag) {
    this.removeTag = removeTag;
  }


  public Action resetTag(Object resetTag) {
    this.resetTag = resetTag;
    return this;
  }

  /**
   * Reset tag to a placeholder value.
   * @return resetTag
   */
  @javax.annotation.Nullable
  public Object getResetTag() {
    return resetTag;
  }

  public void setResetTag(Object resetTag) {
    this.resetTag = resetTag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Action action = (Action) o;
    return Objects.equals(this.cleanImageTag, action.cleanImageTag) &&
        Objects.equals(this.cleanTextTag, action.cleanTextTag) &&
        Objects.equals(this.deleteTag, action.deleteTag) &&
        Objects.equals(this.keepTag, action.keepTag) &&
        Objects.equals(this.queries, action.queries) &&
        Objects.equals(this.recurseTag, action.recurseTag) &&
        Objects.equals(this.regenUidTag, action.regenUidTag) &&
        Objects.equals(this.removeTag, action.removeTag) &&
        Objects.equals(this.resetTag, action.resetTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cleanImageTag, cleanTextTag, deleteTag, keepTag, queries, recurseTag, regenUidTag, removeTag, resetTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Action {\n");
    sb.append("    cleanImageTag: ").append(toIndentedString(cleanImageTag)).append("\n");
    sb.append("    cleanTextTag: ").append(toIndentedString(cleanTextTag)).append("\n");
    sb.append("    deleteTag: ").append(toIndentedString(deleteTag)).append("\n");
    sb.append("    keepTag: ").append(toIndentedString(keepTag)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("    recurseTag: ").append(toIndentedString(recurseTag)).append("\n");
    sb.append("    regenUidTag: ").append(toIndentedString(regenUidTag)).append("\n");
    sb.append("    removeTag: ").append(toIndentedString(removeTag)).append("\n");
    sb.append("    resetTag: ").append(toIndentedString(resetTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cleanImageTag");
    openapiFields.add("cleanTextTag");
    openapiFields.add("deleteTag");
    openapiFields.add("keepTag");
    openapiFields.add("queries");
    openapiFields.add("recurseTag");
    openapiFields.add("regenUidTag");
    openapiFields.add("removeTag");
    openapiFields.add("resetTag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Action
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Action.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Action is not found in the empty JSON string", Action.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Action.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Action` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cleanImageTag`
      if (jsonObj.get("cleanImageTag") != null && !jsonObj.get("cleanImageTag").isJsonNull()) {
        ImageConfig.validateJsonElement(jsonObj.get("cleanImageTag"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("queries") != null && !jsonObj.get("queries").isJsonNull() && !jsonObj.get("queries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `queries` to be an array in the JSON string but got `%s`", jsonObj.get("queries").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Action.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Action' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Action> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Action.class));

       return (TypeAdapter<T>) new TypeAdapter<Action>() {
           @Override
           public void write(JsonWriter out, Action value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Action read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Action given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Action
   * @throws IOException if the JSON string is invalid with respect to Action
   */
  public static Action fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Action.class);
  }

  /**
   * Convert an instance of Action to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

