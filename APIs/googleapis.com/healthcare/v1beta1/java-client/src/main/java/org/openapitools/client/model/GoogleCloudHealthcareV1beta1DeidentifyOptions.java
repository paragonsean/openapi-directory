/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CharacterMaskConfig;
import org.openapitools.client.model.CryptoHashConfig;
import org.openapitools.client.model.DateShiftConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies additional options to apply to the base ProfileType.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:11.528078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudHealthcareV1beta1DeidentifyOptions {
  public static final String SERIALIZED_NAME_CHARACTER_MASK_CONFIG = "characterMaskConfig";
  @SerializedName(SERIALIZED_NAME_CHARACTER_MASK_CONFIG)
  private CharacterMaskConfig characterMaskConfig;

  public static final String SERIALIZED_NAME_CONTEXTUAL_DEID = "contextualDeid";
  @SerializedName(SERIALIZED_NAME_CONTEXTUAL_DEID)
  private Object contextualDeid;

  public static final String SERIALIZED_NAME_CRYPTO_HASH_CONFIG = "cryptoHashConfig";
  @SerializedName(SERIALIZED_NAME_CRYPTO_HASH_CONFIG)
  private CryptoHashConfig cryptoHashConfig;

  public static final String SERIALIZED_NAME_DATE_SHIFT_CONFIG = "dateShiftConfig";
  @SerializedName(SERIALIZED_NAME_DATE_SHIFT_CONFIG)
  private DateShiftConfig dateShiftConfig;

  public static final String SERIALIZED_NAME_KEEP_EXTENSIONS = "keepExtensions";
  @SerializedName(SERIALIZED_NAME_KEEP_EXTENSIONS)
  private Object keepExtensions;

  public GoogleCloudHealthcareV1beta1DeidentifyOptions() {
  }

  public GoogleCloudHealthcareV1beta1DeidentifyOptions characterMaskConfig(CharacterMaskConfig characterMaskConfig) {
    this.characterMaskConfig = characterMaskConfig;
    return this;
  }

  /**
   * Get characterMaskConfig
   * @return characterMaskConfig
   */
  @javax.annotation.Nullable
  public CharacterMaskConfig getCharacterMaskConfig() {
    return characterMaskConfig;
  }

  public void setCharacterMaskConfig(CharacterMaskConfig characterMaskConfig) {
    this.characterMaskConfig = characterMaskConfig;
  }


  public GoogleCloudHealthcareV1beta1DeidentifyOptions contextualDeid(Object contextualDeid) {
    this.contextualDeid = contextualDeid;
    return this;
  }

  /**
   * Fields that don&#39;t match a KeepField or CleanTextField &#x60;action&#x60; in the BASIC profile are collected into a contextual phrase list. For fields that match a CleanTextField &#x60;action&#x60; in FieldMetadata or ProfileType, the process attempts to transform phrases matching these contextual entries. These contextual phrases are replaced with the token \&quot;[CTX]\&quot;. This feature uses an additional InfoType during inspection.
   * @return contextualDeid
   */
  @javax.annotation.Nullable
  public Object getContextualDeid() {
    return contextualDeid;
  }

  public void setContextualDeid(Object contextualDeid) {
    this.contextualDeid = contextualDeid;
  }


  public GoogleCloudHealthcareV1beta1DeidentifyOptions cryptoHashConfig(CryptoHashConfig cryptoHashConfig) {
    this.cryptoHashConfig = cryptoHashConfig;
    return this;
  }

  /**
   * Get cryptoHashConfig
   * @return cryptoHashConfig
   */
  @javax.annotation.Nullable
  public CryptoHashConfig getCryptoHashConfig() {
    return cryptoHashConfig;
  }

  public void setCryptoHashConfig(CryptoHashConfig cryptoHashConfig) {
    this.cryptoHashConfig = cryptoHashConfig;
  }


  public GoogleCloudHealthcareV1beta1DeidentifyOptions dateShiftConfig(DateShiftConfig dateShiftConfig) {
    this.dateShiftConfig = dateShiftConfig;
    return this;
  }

  /**
   * Get dateShiftConfig
   * @return dateShiftConfig
   */
  @javax.annotation.Nullable
  public DateShiftConfig getDateShiftConfig() {
    return dateShiftConfig;
  }

  public void setDateShiftConfig(DateShiftConfig dateShiftConfig) {
    this.dateShiftConfig = dateShiftConfig;
  }


  public GoogleCloudHealthcareV1beta1DeidentifyOptions keepExtensions(Object keepExtensions) {
    this.keepExtensions = keepExtensions;
    return this;
  }

  /**
   * The behavior for handling FHIR extensions that aren&#39;t otherwise specified for de-identification. If provided, all extensions are preserved during de-identification by default. If unspecified, all extensions are removed during de-identification by default.
   * @return keepExtensions
   */
  @javax.annotation.Nullable
  public Object getKeepExtensions() {
    return keepExtensions;
  }

  public void setKeepExtensions(Object keepExtensions) {
    this.keepExtensions = keepExtensions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudHealthcareV1beta1DeidentifyOptions googleCloudHealthcareV1beta1DeidentifyOptions = (GoogleCloudHealthcareV1beta1DeidentifyOptions) o;
    return Objects.equals(this.characterMaskConfig, googleCloudHealthcareV1beta1DeidentifyOptions.characterMaskConfig) &&
        Objects.equals(this.contextualDeid, googleCloudHealthcareV1beta1DeidentifyOptions.contextualDeid) &&
        Objects.equals(this.cryptoHashConfig, googleCloudHealthcareV1beta1DeidentifyOptions.cryptoHashConfig) &&
        Objects.equals(this.dateShiftConfig, googleCloudHealthcareV1beta1DeidentifyOptions.dateShiftConfig) &&
        Objects.equals(this.keepExtensions, googleCloudHealthcareV1beta1DeidentifyOptions.keepExtensions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(characterMaskConfig, contextualDeid, cryptoHashConfig, dateShiftConfig, keepExtensions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudHealthcareV1beta1DeidentifyOptions {\n");
    sb.append("    characterMaskConfig: ").append(toIndentedString(characterMaskConfig)).append("\n");
    sb.append("    contextualDeid: ").append(toIndentedString(contextualDeid)).append("\n");
    sb.append("    cryptoHashConfig: ").append(toIndentedString(cryptoHashConfig)).append("\n");
    sb.append("    dateShiftConfig: ").append(toIndentedString(dateShiftConfig)).append("\n");
    sb.append("    keepExtensions: ").append(toIndentedString(keepExtensions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("characterMaskConfig");
    openapiFields.add("contextualDeid");
    openapiFields.add("cryptoHashConfig");
    openapiFields.add("dateShiftConfig");
    openapiFields.add("keepExtensions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudHealthcareV1beta1DeidentifyOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudHealthcareV1beta1DeidentifyOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudHealthcareV1beta1DeidentifyOptions is not found in the empty JSON string", GoogleCloudHealthcareV1beta1DeidentifyOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudHealthcareV1beta1DeidentifyOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudHealthcareV1beta1DeidentifyOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `characterMaskConfig`
      if (jsonObj.get("characterMaskConfig") != null && !jsonObj.get("characterMaskConfig").isJsonNull()) {
        CharacterMaskConfig.validateJsonElement(jsonObj.get("characterMaskConfig"));
      }
      // validate the optional field `cryptoHashConfig`
      if (jsonObj.get("cryptoHashConfig") != null && !jsonObj.get("cryptoHashConfig").isJsonNull()) {
        CryptoHashConfig.validateJsonElement(jsonObj.get("cryptoHashConfig"));
      }
      // validate the optional field `dateShiftConfig`
      if (jsonObj.get("dateShiftConfig") != null && !jsonObj.get("dateShiftConfig").isJsonNull()) {
        DateShiftConfig.validateJsonElement(jsonObj.get("dateShiftConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudHealthcareV1beta1DeidentifyOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudHealthcareV1beta1DeidentifyOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudHealthcareV1beta1DeidentifyOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudHealthcareV1beta1DeidentifyOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudHealthcareV1beta1DeidentifyOptions>() {
           @Override
           public void write(JsonWriter out, GoogleCloudHealthcareV1beta1DeidentifyOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudHealthcareV1beta1DeidentifyOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudHealthcareV1beta1DeidentifyOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudHealthcareV1beta1DeidentifyOptions
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudHealthcareV1beta1DeidentifyOptions
   */
  public static GoogleCloudHealthcareV1beta1DeidentifyOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudHealthcareV1beta1DeidentifyOptions.class);
  }

  /**
   * Convert an instance of GoogleCloudHealthcareV1beta1DeidentifyOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

