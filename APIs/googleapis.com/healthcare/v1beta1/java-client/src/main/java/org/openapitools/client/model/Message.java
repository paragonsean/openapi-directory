/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ParsedData;
import org.openapitools.client.model.PatientId;
import org.openapitools.client.model.SchematizedData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A complete HL7v2 message. See [Introduction to HL7 Standards] (https://www.hl7.org/implement/standards/index.cfm?ref&#x3D;common) for details on the standard.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:11.528078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Message {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private byte[] data;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_MESSAGE_TYPE = "messageType";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TYPE)
  private String messageType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARSED_DATA = "parsedData";
  @SerializedName(SERIALIZED_NAME_PARSED_DATA)
  private ParsedData parsedData;

  public static final String SERIALIZED_NAME_PATIENT_IDS = "patientIds";
  @SerializedName(SERIALIZED_NAME_PATIENT_IDS)
  private List<PatientId> patientIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEMATIZED_DATA = "schematizedData";
  @SerializedName(SERIALIZED_NAME_SCHEMATIZED_DATA)
  private SchematizedData schematizedData;

  public static final String SERIALIZED_NAME_SEND_FACILITY = "sendFacility";
  @SerializedName(SERIALIZED_NAME_SEND_FACILITY)
  private String sendFacility;

  public static final String SERIALIZED_NAME_SEND_TIME = "sendTime";
  @SerializedName(SERIALIZED_NAME_SEND_TIME)
  private String sendTime;

  public Message() {
  }

  public Message(
     String createTime, 
     String name
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
  }

  /**
   * Output only. The datetime when the message was created. Set by the server.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Message data(byte[] data) {
    this.data = data;
    return this;
  }

  /**
   * Required. Raw message bytes.
   * @return data
   */
  @javax.annotation.Nullable
  public byte[] getData() {
    return data;
  }

  public void setData(byte[] data) {
    this.data = data;
  }


  public Message labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Message putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Message messageType(String messageType) {
    this.messageType = messageType;
    return this;
  }

  /**
   * The message type for this message. MSH-9.1.
   * @return messageType
   */
  @javax.annotation.Nullable
  public String getMessageType() {
    return messageType;
  }

  public void setMessageType(String messageType) {
    this.messageType = messageType;
  }


  /**
   * Output only. Resource name of the Message, of the form &#x60;projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}&#x60;. Assigned by the server.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Message parsedData(ParsedData parsedData) {
    this.parsedData = parsedData;
    return this;
  }

  /**
   * Get parsedData
   * @return parsedData
   */
  @javax.annotation.Nullable
  public ParsedData getParsedData() {
    return parsedData;
  }

  public void setParsedData(ParsedData parsedData) {
    this.parsedData = parsedData;
  }


  public Message patientIds(List<PatientId> patientIds) {
    this.patientIds = patientIds;
    return this;
  }

  public Message addPatientIdsItem(PatientId patientIdsItem) {
    if (this.patientIds == null) {
      this.patientIds = new ArrayList<>();
    }
    this.patientIds.add(patientIdsItem);
    return this;
  }

  /**
   * All patient IDs listed in the PID-2, PID-3, and PID-4 segments of this message.
   * @return patientIds
   */
  @javax.annotation.Nullable
  public List<PatientId> getPatientIds() {
    return patientIds;
  }

  public void setPatientIds(List<PatientId> patientIds) {
    this.patientIds = patientIds;
  }


  public Message schematizedData(SchematizedData schematizedData) {
    this.schematizedData = schematizedData;
    return this;
  }

  /**
   * Get schematizedData
   * @return schematizedData
   */
  @javax.annotation.Nullable
  public SchematizedData getSchematizedData() {
    return schematizedData;
  }

  public void setSchematizedData(SchematizedData schematizedData) {
    this.schematizedData = schematizedData;
  }


  public Message sendFacility(String sendFacility) {
    this.sendFacility = sendFacility;
    return this;
  }

  /**
   * The hospital that this message came from. MSH-4.
   * @return sendFacility
   */
  @javax.annotation.Nullable
  public String getSendFacility() {
    return sendFacility;
  }

  public void setSendFacility(String sendFacility) {
    this.sendFacility = sendFacility;
  }


  public Message sendTime(String sendTime) {
    this.sendTime = sendTime;
    return this;
  }

  /**
   * The datetime the sending application sent this message. MSH-7.
   * @return sendTime
   */
  @javax.annotation.Nullable
  public String getSendTime() {
    return sendTime;
  }

  public void setSendTime(String sendTime) {
    this.sendTime = sendTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Message message = (Message) o;
    return Objects.equals(this.createTime, message.createTime) &&
        Arrays.equals(this.data, message.data) &&
        Objects.equals(this.labels, message.labels) &&
        Objects.equals(this.messageType, message.messageType) &&
        Objects.equals(this.name, message.name) &&
        Objects.equals(this.parsedData, message.parsedData) &&
        Objects.equals(this.patientIds, message.patientIds) &&
        Objects.equals(this.schematizedData, message.schematizedData) &&
        Objects.equals(this.sendFacility, message.sendFacility) &&
        Objects.equals(this.sendTime, message.sendTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, Arrays.hashCode(data), labels, messageType, name, parsedData, patientIds, schematizedData, sendFacility, sendTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Message {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parsedData: ").append(toIndentedString(parsedData)).append("\n");
    sb.append("    patientIds: ").append(toIndentedString(patientIds)).append("\n");
    sb.append("    schematizedData: ").append(toIndentedString(schematizedData)).append("\n");
    sb.append("    sendFacility: ").append(toIndentedString(sendFacility)).append("\n");
    sb.append("    sendTime: ").append(toIndentedString(sendTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("data");
    openapiFields.add("labels");
    openapiFields.add("messageType");
    openapiFields.add("name");
    openapiFields.add("parsedData");
    openapiFields.add("patientIds");
    openapiFields.add("schematizedData");
    openapiFields.add("sendFacility");
    openapiFields.add("sendTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Message
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Message.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Message is not found in the empty JSON string", Message.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Message.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Message` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("messageType") != null && !jsonObj.get("messageType").isJsonNull()) && !jsonObj.get("messageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageType").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `parsedData`
      if (jsonObj.get("parsedData") != null && !jsonObj.get("parsedData").isJsonNull()) {
        ParsedData.validateJsonElement(jsonObj.get("parsedData"));
      }
      if (jsonObj.get("patientIds") != null && !jsonObj.get("patientIds").isJsonNull()) {
        JsonArray jsonArraypatientIds = jsonObj.getAsJsonArray("patientIds");
        if (jsonArraypatientIds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("patientIds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `patientIds` to be an array in the JSON string but got `%s`", jsonObj.get("patientIds").toString()));
          }

          // validate the optional field `patientIds` (array)
          for (int i = 0; i < jsonArraypatientIds.size(); i++) {
            PatientId.validateJsonElement(jsonArraypatientIds.get(i));
          };
        }
      }
      // validate the optional field `schematizedData`
      if (jsonObj.get("schematizedData") != null && !jsonObj.get("schematizedData").isJsonNull()) {
        SchematizedData.validateJsonElement(jsonObj.get("schematizedData"));
      }
      if ((jsonObj.get("sendFacility") != null && !jsonObj.get("sendFacility").isJsonNull()) && !jsonObj.get("sendFacility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendFacility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendFacility").toString()));
      }
      if ((jsonObj.get("sendTime") != null && !jsonObj.get("sendTime").isJsonNull()) && !jsonObj.get("sendTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Message.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Message' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Message> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Message.class));

       return (TypeAdapter<T>) new TypeAdapter<Message>() {
           @Override
           public void write(JsonWriter out, Message value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Message read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Message given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Message
   * @throws IOException if the JSON string is invalid with respect to Message
   */
  public static Message fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Message.class);
  }

  /**
   * Convert an instance of Message to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

