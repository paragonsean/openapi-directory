/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ImageConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies additional options to apply to the base profile.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:11.528078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Options {
  public static final String SERIALIZED_NAME_CLEAN_DESCRIPTORS = "cleanDescriptors";
  @SerializedName(SERIALIZED_NAME_CLEAN_DESCRIPTORS)
  private Object cleanDescriptors;

  public static final String SERIALIZED_NAME_CLEAN_IMAGE = "cleanImage";
  @SerializedName(SERIALIZED_NAME_CLEAN_IMAGE)
  private ImageConfig cleanImage;

  /**
   * Set &#x60;Action&#x60; for [&#x60;StudyInstanceUID&#x60;, &#x60;SeriesInstanceUID&#x60;, &#x60;SOPInstanceUID&#x60;, and &#x60;MediaStorageSOPInstanceUID&#x60;](http://dicom.nema.org/medical/dicom/2018e/output/chtml/part06/chapter_6.html).
   */
  @JsonAdapter(PrimaryIdsEnum.Adapter.class)
  public enum PrimaryIdsEnum {
    PRIMARY_IDS_OPTION_UNSPECIFIED("PRIMARY_IDS_OPTION_UNSPECIFIED"),
    
    KEEP("KEEP"),
    
    REGEN("REGEN");

    private String value;

    PrimaryIdsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrimaryIdsEnum fromValue(String value) {
      for (PrimaryIdsEnum b : PrimaryIdsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrimaryIdsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrimaryIdsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrimaryIdsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrimaryIdsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PrimaryIdsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRIMARY_IDS = "primaryIds";
  @SerializedName(SERIALIZED_NAME_PRIMARY_IDS)
  private PrimaryIdsEnum primaryIds;

  public Options() {
  }

  public Options cleanDescriptors(Object cleanDescriptors) {
    this.cleanDescriptors = cleanDescriptors;
    return this;
  }

  /**
   * This option is based on the DICOM Standard&#39;s [Clean Descriptors Option](http://dicom.nema.org/medical/dicom/2018e/output/chtml/part15/sect_E.3.5.html), and the &#x60;CleanText&#x60; &#x60;Action&#x60; is applied to all the specified fields. When cleaning text, the process attempts to transform phrases matching any of the tags marked for removal (action codes D, Z, X, and U) in the [Basic Profile](http://dicom.nema.org/medical/dicom/2018e/output/chtml/part15/chapter_E.html). These contextual phrases are replaced with the token \&quot;[CTX]\&quot;. This option uses an additional infoType during inspection.
   * @return cleanDescriptors
   */
  @javax.annotation.Nullable
  public Object getCleanDescriptors() {
    return cleanDescriptors;
  }

  public void setCleanDescriptors(Object cleanDescriptors) {
    this.cleanDescriptors = cleanDescriptors;
  }


  public Options cleanImage(ImageConfig cleanImage) {
    this.cleanImage = cleanImage;
    return this;
  }

  /**
   * Get cleanImage
   * @return cleanImage
   */
  @javax.annotation.Nullable
  public ImageConfig getCleanImage() {
    return cleanImage;
  }

  public void setCleanImage(ImageConfig cleanImage) {
    this.cleanImage = cleanImage;
  }


  public Options primaryIds(PrimaryIdsEnum primaryIds) {
    this.primaryIds = primaryIds;
    return this;
  }

  /**
   * Set &#x60;Action&#x60; for [&#x60;StudyInstanceUID&#x60;, &#x60;SeriesInstanceUID&#x60;, &#x60;SOPInstanceUID&#x60;, and &#x60;MediaStorageSOPInstanceUID&#x60;](http://dicom.nema.org/medical/dicom/2018e/output/chtml/part06/chapter_6.html).
   * @return primaryIds
   */
  @javax.annotation.Nullable
  public PrimaryIdsEnum getPrimaryIds() {
    return primaryIds;
  }

  public void setPrimaryIds(PrimaryIdsEnum primaryIds) {
    this.primaryIds = primaryIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Options options = (Options) o;
    return Objects.equals(this.cleanDescriptors, options.cleanDescriptors) &&
        Objects.equals(this.cleanImage, options.cleanImage) &&
        Objects.equals(this.primaryIds, options.primaryIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cleanDescriptors, cleanImage, primaryIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Options {\n");
    sb.append("    cleanDescriptors: ").append(toIndentedString(cleanDescriptors)).append("\n");
    sb.append("    cleanImage: ").append(toIndentedString(cleanImage)).append("\n");
    sb.append("    primaryIds: ").append(toIndentedString(primaryIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cleanDescriptors");
    openapiFields.add("cleanImage");
    openapiFields.add("primaryIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Options
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Options.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Options is not found in the empty JSON string", Options.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Options.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Options` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cleanImage`
      if (jsonObj.get("cleanImage") != null && !jsonObj.get("cleanImage").isJsonNull()) {
        ImageConfig.validateJsonElement(jsonObj.get("cleanImage"));
      }
      if ((jsonObj.get("primaryIds") != null && !jsonObj.get("primaryIds").isJsonNull()) && !jsonObj.get("primaryIds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryIds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryIds").toString()));
      }
      // validate the optional field `primaryIds`
      if (jsonObj.get("primaryIds") != null && !jsonObj.get("primaryIds").isJsonNull()) {
        PrimaryIdsEnum.validateJsonElement(jsonObj.get("primaryIds"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Options.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Options' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Options> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Options.class));

       return (TypeAdapter<T>) new TypeAdapter<Options>() {
           @Override
           public void write(JsonWriter out, Options value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Options read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Options given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Options
   * @throws IOException if the JSON string is invalid with respect to Options
   */
  public static Options fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Options.class);
  }

  /**
   * Convert an instance of Options to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

