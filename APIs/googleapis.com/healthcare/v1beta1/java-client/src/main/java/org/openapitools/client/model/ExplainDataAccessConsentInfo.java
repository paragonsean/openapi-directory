/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConsentAccessorScope;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The enforcing consent&#39;s metadata.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:11.528078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExplainDataAccessConsentInfo {
  public static final String SERIALIZED_NAME_CASCADE_ORIGINS = "cascadeOrigins";
  @SerializedName(SERIALIZED_NAME_CASCADE_ORIGINS)
  private List<String> cascadeOrigins = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONSENT_RESOURCE = "consentResource";
  @SerializedName(SERIALIZED_NAME_CONSENT_RESOURCE)
  private String consentResource;

  public static final String SERIALIZED_NAME_ENFORCEMENT_TIME = "enforcementTime";
  @SerializedName(SERIALIZED_NAME_ENFORCEMENT_TIME)
  private String enforcementTime;

  public static final String SERIALIZED_NAME_MATCHING_ACCESSOR_SCOPES = "matchingAccessorScopes";
  @SerializedName(SERIALIZED_NAME_MATCHING_ACCESSOR_SCOPES)
  private List<ConsentAccessorScope> matchingAccessorScopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PATIENT_CONSENT_OWNER = "patientConsentOwner";
  @SerializedName(SERIALIZED_NAME_PATIENT_CONSENT_OWNER)
  private String patientConsentOwner;

  /**
   * The policy type of consent resource (e.g. PATIENT, ADMIN).
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    UNSPECIFIED("CONSENT_POLICY_TYPE_UNSPECIFIED"),
    
    PATIENT("CONSENT_POLICY_TYPE_PATIENT"),
    
    ADMIN("CONSENT_POLICY_TYPE_ADMIN");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * Gets or Sets variants
   */
  @JsonAdapter(VariantsEnum.Adapter.class)
  public enum VariantsEnum {
    UNSPECIFIED("VARIANT_UNSPECIFIED"),
    
    STANDARD("VARIANT_STANDARD"),
    
    CASCADE("VARIANT_CASCADE");

    private String value;

    VariantsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VariantsEnum fromValue(String value) {
      for (VariantsEnum b : VariantsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VariantsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VariantsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VariantsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VariantsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VariantsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VARIANTS = "variants";
  @SerializedName(SERIALIZED_NAME_VARIANTS)
  private List<VariantsEnum> variants = new ArrayList<>();

  public ExplainDataAccessConsentInfo() {
  }

  public ExplainDataAccessConsentInfo cascadeOrigins(List<String> cascadeOrigins) {
    this.cascadeOrigins = cascadeOrigins;
    return this;
  }

  public ExplainDataAccessConsentInfo addCascadeOriginsItem(String cascadeOriginsItem) {
    if (this.cascadeOrigins == null) {
      this.cascadeOrigins = new ArrayList<>();
    }
    this.cascadeOrigins.add(cascadeOriginsItem);
    return this;
  }

  /**
   * The compartment base resources that matched a cascading policy. Each resource has the following format: &#x60;projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/{resource_type}/{resource_id}&#x60;
   * @return cascadeOrigins
   */
  @javax.annotation.Nullable
  public List<String> getCascadeOrigins() {
    return cascadeOrigins;
  }

  public void setCascadeOrigins(List<String> cascadeOrigins) {
    this.cascadeOrigins = cascadeOrigins;
  }


  public ExplainDataAccessConsentInfo consentResource(String consentResource) {
    this.consentResource = consentResource;
    return this;
  }

  /**
   * The resource name of this consent resource. Format: &#x60;projects/{projectId}/datasets/{datasetId}/fhirStores/{fhirStoreId}/fhir/{resourceType}/{id}&#x60;.
   * @return consentResource
   */
  @javax.annotation.Nullable
  public String getConsentResource() {
    return consentResource;
  }

  public void setConsentResource(String consentResource) {
    this.consentResource = consentResource;
  }


  public ExplainDataAccessConsentInfo enforcementTime(String enforcementTime) {
    this.enforcementTime = enforcementTime;
    return this;
  }

  /**
   * Last enforcement timestamp of this consent resource.
   * @return enforcementTime
   */
  @javax.annotation.Nullable
  public String getEnforcementTime() {
    return enforcementTime;
  }

  public void setEnforcementTime(String enforcementTime) {
    this.enforcementTime = enforcementTime;
  }


  public ExplainDataAccessConsentInfo matchingAccessorScopes(List<ConsentAccessorScope> matchingAccessorScopes) {
    this.matchingAccessorScopes = matchingAccessorScopes;
    return this;
  }

  public ExplainDataAccessConsentInfo addMatchingAccessorScopesItem(ConsentAccessorScope matchingAccessorScopesItem) {
    if (this.matchingAccessorScopes == null) {
      this.matchingAccessorScopes = new ArrayList<>();
    }
    this.matchingAccessorScopes.add(matchingAccessorScopesItem);
    return this;
  }

  /**
   * A list of all the matching accessor scopes of this consent policy that enforced ExplainDataAccessConsentScope.accessor_scope.
   * @return matchingAccessorScopes
   */
  @javax.annotation.Nullable
  public List<ConsentAccessorScope> getMatchingAccessorScopes() {
    return matchingAccessorScopes;
  }

  public void setMatchingAccessorScopes(List<ConsentAccessorScope> matchingAccessorScopes) {
    this.matchingAccessorScopes = matchingAccessorScopes;
  }


  public ExplainDataAccessConsentInfo patientConsentOwner(String patientConsentOwner) {
    this.patientConsentOwner = patientConsentOwner;
    return this;
  }

  /**
   * The patient owning the consent (only applicable for patient consents), in the format: &#x60;projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Patient/{patient_id}&#x60;
   * @return patientConsentOwner
   */
  @javax.annotation.Nullable
  public String getPatientConsentOwner() {
    return patientConsentOwner;
  }

  public void setPatientConsentOwner(String patientConsentOwner) {
    this.patientConsentOwner = patientConsentOwner;
  }


  public ExplainDataAccessConsentInfo type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The policy type of consent resource (e.g. PATIENT, ADMIN).
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ExplainDataAccessConsentInfo variants(List<VariantsEnum> variants) {
    this.variants = variants;
    return this;
  }

  public ExplainDataAccessConsentInfo addVariantsItem(VariantsEnum variantsItem) {
    if (this.variants == null) {
      this.variants = new ArrayList<>();
    }
    this.variants.add(variantsItem);
    return this;
  }

  /**
   * The consent&#39;s variant combinations. A single consent may have multiple variants.
   * @return variants
   */
  @javax.annotation.Nullable
  public List<VariantsEnum> getVariants() {
    return variants;
  }

  public void setVariants(List<VariantsEnum> variants) {
    this.variants = variants;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExplainDataAccessConsentInfo explainDataAccessConsentInfo = (ExplainDataAccessConsentInfo) o;
    return Objects.equals(this.cascadeOrigins, explainDataAccessConsentInfo.cascadeOrigins) &&
        Objects.equals(this.consentResource, explainDataAccessConsentInfo.consentResource) &&
        Objects.equals(this.enforcementTime, explainDataAccessConsentInfo.enforcementTime) &&
        Objects.equals(this.matchingAccessorScopes, explainDataAccessConsentInfo.matchingAccessorScopes) &&
        Objects.equals(this.patientConsentOwner, explainDataAccessConsentInfo.patientConsentOwner) &&
        Objects.equals(this.type, explainDataAccessConsentInfo.type) &&
        Objects.equals(this.variants, explainDataAccessConsentInfo.variants);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cascadeOrigins, consentResource, enforcementTime, matchingAccessorScopes, patientConsentOwner, type, variants);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExplainDataAccessConsentInfo {\n");
    sb.append("    cascadeOrigins: ").append(toIndentedString(cascadeOrigins)).append("\n");
    sb.append("    consentResource: ").append(toIndentedString(consentResource)).append("\n");
    sb.append("    enforcementTime: ").append(toIndentedString(enforcementTime)).append("\n");
    sb.append("    matchingAccessorScopes: ").append(toIndentedString(matchingAccessorScopes)).append("\n");
    sb.append("    patientConsentOwner: ").append(toIndentedString(patientConsentOwner)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    variants: ").append(toIndentedString(variants)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cascadeOrigins");
    openapiFields.add("consentResource");
    openapiFields.add("enforcementTime");
    openapiFields.add("matchingAccessorScopes");
    openapiFields.add("patientConsentOwner");
    openapiFields.add("type");
    openapiFields.add("variants");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExplainDataAccessConsentInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExplainDataAccessConsentInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExplainDataAccessConsentInfo is not found in the empty JSON string", ExplainDataAccessConsentInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExplainDataAccessConsentInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExplainDataAccessConsentInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("cascadeOrigins") != null && !jsonObj.get("cascadeOrigins").isJsonNull() && !jsonObj.get("cascadeOrigins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cascadeOrigins` to be an array in the JSON string but got `%s`", jsonObj.get("cascadeOrigins").toString()));
      }
      if ((jsonObj.get("consentResource") != null && !jsonObj.get("consentResource").isJsonNull()) && !jsonObj.get("consentResource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consentResource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consentResource").toString()));
      }
      if ((jsonObj.get("enforcementTime") != null && !jsonObj.get("enforcementTime").isJsonNull()) && !jsonObj.get("enforcementTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enforcementTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enforcementTime").toString()));
      }
      if (jsonObj.get("matchingAccessorScopes") != null && !jsonObj.get("matchingAccessorScopes").isJsonNull()) {
        JsonArray jsonArraymatchingAccessorScopes = jsonObj.getAsJsonArray("matchingAccessorScopes");
        if (jsonArraymatchingAccessorScopes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("matchingAccessorScopes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `matchingAccessorScopes` to be an array in the JSON string but got `%s`", jsonObj.get("matchingAccessorScopes").toString()));
          }

          // validate the optional field `matchingAccessorScopes` (array)
          for (int i = 0; i < jsonArraymatchingAccessorScopes.size(); i++) {
            ConsentAccessorScope.validateJsonElement(jsonArraymatchingAccessorScopes.get(i));
          };
        }
      }
      if ((jsonObj.get("patientConsentOwner") != null && !jsonObj.get("patientConsentOwner").isJsonNull()) && !jsonObj.get("patientConsentOwner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `patientConsentOwner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("patientConsentOwner").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("variants") != null && !jsonObj.get("variants").isJsonNull() && !jsonObj.get("variants").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `variants` to be an array in the JSON string but got `%s`", jsonObj.get("variants").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExplainDataAccessConsentInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExplainDataAccessConsentInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExplainDataAccessConsentInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExplainDataAccessConsentInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ExplainDataAccessConsentInfo>() {
           @Override
           public void write(JsonWriter out, ExplainDataAccessConsentInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExplainDataAccessConsentInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExplainDataAccessConsentInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExplainDataAccessConsentInfo
   * @throws IOException if the JSON string is invalid with respect to ExplainDataAccessConsentInfo
   */
  public static ExplainDataAccessConsentInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExplainDataAccessConsentInfo.class);
  }

  /**
   * Convert an instance of ExplainDataAccessConsentInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

