/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CharacterMaskConfig;
import org.openapitools.client.model.CryptoHashConfig;
import org.openapitools.client.model.DateShiftConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A transformation to apply to text that is identified as a specific info_type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:11.528078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InfoTypeTransformation {
  public static final String SERIALIZED_NAME_CHARACTER_MASK_CONFIG = "characterMaskConfig";
  @SerializedName(SERIALIZED_NAME_CHARACTER_MASK_CONFIG)
  private CharacterMaskConfig characterMaskConfig;

  public static final String SERIALIZED_NAME_CRYPTO_HASH_CONFIG = "cryptoHashConfig";
  @SerializedName(SERIALIZED_NAME_CRYPTO_HASH_CONFIG)
  private CryptoHashConfig cryptoHashConfig;

  public static final String SERIALIZED_NAME_DATE_SHIFT_CONFIG = "dateShiftConfig";
  @SerializedName(SERIALIZED_NAME_DATE_SHIFT_CONFIG)
  private DateShiftConfig dateShiftConfig;

  public static final String SERIALIZED_NAME_INFO_TYPES = "infoTypes";
  @SerializedName(SERIALIZED_NAME_INFO_TYPES)
  private List<String> infoTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_REDACT_CONFIG = "redactConfig";
  @SerializedName(SERIALIZED_NAME_REDACT_CONFIG)
  private Object redactConfig;

  public static final String SERIALIZED_NAME_REPLACE_WITH_INFO_TYPE_CONFIG = "replaceWithInfoTypeConfig";
  @SerializedName(SERIALIZED_NAME_REPLACE_WITH_INFO_TYPE_CONFIG)
  private Object replaceWithInfoTypeConfig;

  public InfoTypeTransformation() {
  }

  public InfoTypeTransformation characterMaskConfig(CharacterMaskConfig characterMaskConfig) {
    this.characterMaskConfig = characterMaskConfig;
    return this;
  }

  /**
   * Get characterMaskConfig
   * @return characterMaskConfig
   */
  @javax.annotation.Nullable
  public CharacterMaskConfig getCharacterMaskConfig() {
    return characterMaskConfig;
  }

  public void setCharacterMaskConfig(CharacterMaskConfig characterMaskConfig) {
    this.characterMaskConfig = characterMaskConfig;
  }


  public InfoTypeTransformation cryptoHashConfig(CryptoHashConfig cryptoHashConfig) {
    this.cryptoHashConfig = cryptoHashConfig;
    return this;
  }

  /**
   * Get cryptoHashConfig
   * @return cryptoHashConfig
   */
  @javax.annotation.Nullable
  public CryptoHashConfig getCryptoHashConfig() {
    return cryptoHashConfig;
  }

  public void setCryptoHashConfig(CryptoHashConfig cryptoHashConfig) {
    this.cryptoHashConfig = cryptoHashConfig;
  }


  public InfoTypeTransformation dateShiftConfig(DateShiftConfig dateShiftConfig) {
    this.dateShiftConfig = dateShiftConfig;
    return this;
  }

  /**
   * Get dateShiftConfig
   * @return dateShiftConfig
   */
  @javax.annotation.Nullable
  public DateShiftConfig getDateShiftConfig() {
    return dateShiftConfig;
  }

  public void setDateShiftConfig(DateShiftConfig dateShiftConfig) {
    this.dateShiftConfig = dateShiftConfig;
  }


  public InfoTypeTransformation infoTypes(List<String> infoTypes) {
    this.infoTypes = infoTypes;
    return this;
  }

  public InfoTypeTransformation addInfoTypesItem(String infoTypesItem) {
    if (this.infoTypes == null) {
      this.infoTypes = new ArrayList<>();
    }
    this.infoTypes.add(infoTypesItem);
    return this;
  }

  /**
   * &#x60;InfoTypes&#x60; to apply this transformation to. If this is not specified, this transformation becomes the default transformation, and is used for any &#x60;info_type&#x60; that is not specified in another transformation.
   * @return infoTypes
   */
  @javax.annotation.Nullable
  public List<String> getInfoTypes() {
    return infoTypes;
  }

  public void setInfoTypes(List<String> infoTypes) {
    this.infoTypes = infoTypes;
  }


  public InfoTypeTransformation redactConfig(Object redactConfig) {
    this.redactConfig = redactConfig;
    return this;
  }

  /**
   * Define how to redact sensitive values. Default behaviour is erase. For example, \&quot;My name is Jane.\&quot; becomes \&quot;My name is .\&quot;
   * @return redactConfig
   */
  @javax.annotation.Nullable
  public Object getRedactConfig() {
    return redactConfig;
  }

  public void setRedactConfig(Object redactConfig) {
    this.redactConfig = redactConfig;
  }


  public InfoTypeTransformation replaceWithInfoTypeConfig(Object replaceWithInfoTypeConfig) {
    this.replaceWithInfoTypeConfig = replaceWithInfoTypeConfig;
    return this;
  }

  /**
   * When using the INSPECT_AND_TRANSFORM action, each match is replaced with the name of the info_type. For example, \&quot;My name is Jane\&quot; becomes \&quot;My name is [PERSON_NAME].\&quot; The TRANSFORM action is equivalent to redacting.
   * @return replaceWithInfoTypeConfig
   */
  @javax.annotation.Nullable
  public Object getReplaceWithInfoTypeConfig() {
    return replaceWithInfoTypeConfig;
  }

  public void setReplaceWithInfoTypeConfig(Object replaceWithInfoTypeConfig) {
    this.replaceWithInfoTypeConfig = replaceWithInfoTypeConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InfoTypeTransformation infoTypeTransformation = (InfoTypeTransformation) o;
    return Objects.equals(this.characterMaskConfig, infoTypeTransformation.characterMaskConfig) &&
        Objects.equals(this.cryptoHashConfig, infoTypeTransformation.cryptoHashConfig) &&
        Objects.equals(this.dateShiftConfig, infoTypeTransformation.dateShiftConfig) &&
        Objects.equals(this.infoTypes, infoTypeTransformation.infoTypes) &&
        Objects.equals(this.redactConfig, infoTypeTransformation.redactConfig) &&
        Objects.equals(this.replaceWithInfoTypeConfig, infoTypeTransformation.replaceWithInfoTypeConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(characterMaskConfig, cryptoHashConfig, dateShiftConfig, infoTypes, redactConfig, replaceWithInfoTypeConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InfoTypeTransformation {\n");
    sb.append("    characterMaskConfig: ").append(toIndentedString(characterMaskConfig)).append("\n");
    sb.append("    cryptoHashConfig: ").append(toIndentedString(cryptoHashConfig)).append("\n");
    sb.append("    dateShiftConfig: ").append(toIndentedString(dateShiftConfig)).append("\n");
    sb.append("    infoTypes: ").append(toIndentedString(infoTypes)).append("\n");
    sb.append("    redactConfig: ").append(toIndentedString(redactConfig)).append("\n");
    sb.append("    replaceWithInfoTypeConfig: ").append(toIndentedString(replaceWithInfoTypeConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("characterMaskConfig");
    openapiFields.add("cryptoHashConfig");
    openapiFields.add("dateShiftConfig");
    openapiFields.add("infoTypes");
    openapiFields.add("redactConfig");
    openapiFields.add("replaceWithInfoTypeConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InfoTypeTransformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InfoTypeTransformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InfoTypeTransformation is not found in the empty JSON string", InfoTypeTransformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InfoTypeTransformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InfoTypeTransformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `characterMaskConfig`
      if (jsonObj.get("characterMaskConfig") != null && !jsonObj.get("characterMaskConfig").isJsonNull()) {
        CharacterMaskConfig.validateJsonElement(jsonObj.get("characterMaskConfig"));
      }
      // validate the optional field `cryptoHashConfig`
      if (jsonObj.get("cryptoHashConfig") != null && !jsonObj.get("cryptoHashConfig").isJsonNull()) {
        CryptoHashConfig.validateJsonElement(jsonObj.get("cryptoHashConfig"));
      }
      // validate the optional field `dateShiftConfig`
      if (jsonObj.get("dateShiftConfig") != null && !jsonObj.get("dateShiftConfig").isJsonNull()) {
        DateShiftConfig.validateJsonElement(jsonObj.get("dateShiftConfig"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("infoTypes") != null && !jsonObj.get("infoTypes").isJsonNull() && !jsonObj.get("infoTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `infoTypes` to be an array in the JSON string but got `%s`", jsonObj.get("infoTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InfoTypeTransformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InfoTypeTransformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InfoTypeTransformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InfoTypeTransformation.class));

       return (TypeAdapter<T>) new TypeAdapter<InfoTypeTransformation>() {
           @Override
           public void write(JsonWriter out, InfoTypeTransformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InfoTypeTransformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InfoTypeTransformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InfoTypeTransformation
   * @throws IOException if the JSON string is invalid with respect to InfoTypeTransformation
   */
  public static InfoTypeTransformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InfoTypeTransformation.class);
  }

  /**
   * Convert an instance of InfoTypeTransformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

