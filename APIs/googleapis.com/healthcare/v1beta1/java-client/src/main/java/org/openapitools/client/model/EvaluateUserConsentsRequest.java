/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ConsentList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Evaluate a user&#39;s Consents for all matching User data mappings. Note: User data mappings are indexed asynchronously, causing slight delays between the time mappings are created or updated and when they are included in EvaluateUserConsents results.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:11.528078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EvaluateUserConsentsRequest {
  public static final String SERIALIZED_NAME_CONSENT_LIST = "consentList";
  @SerializedName(SERIALIZED_NAME_CONSENT_LIST)
  private ConsentList consentList;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_PAGE_TOKEN = "pageToken";
  @SerializedName(SERIALIZED_NAME_PAGE_TOKEN)
  private String pageToken;

  public static final String SERIALIZED_NAME_REQUEST_ATTRIBUTES = "requestAttributes";
  @SerializedName(SERIALIZED_NAME_REQUEST_ATTRIBUTES)
  private Map<String, String> requestAttributes = new HashMap<>();

  public static final String SERIALIZED_NAME_RESOURCE_ATTRIBUTES = "resourceAttributes";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ATTRIBUTES)
  private Map<String, String> resourceAttributes = new HashMap<>();

  /**
   * Optional. The view for EvaluateUserConsentsResponse. If unspecified, defaults to &#x60;BASIC&#x60; and returns &#x60;consented&#x60; as &#x60;TRUE&#x60; or &#x60;FALSE&#x60;.
   */
  @JsonAdapter(ResponseViewEnum.Adapter.class)
  public enum ResponseViewEnum {
    RESPONSE_VIEW_UNSPECIFIED("RESPONSE_VIEW_UNSPECIFIED"),
    
    BASIC("BASIC"),
    
    FULL("FULL");

    private String value;

    ResponseViewEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResponseViewEnum fromValue(String value) {
      for (ResponseViewEnum b : ResponseViewEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResponseViewEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResponseViewEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResponseViewEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResponseViewEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResponseViewEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESPONSE_VIEW = "responseView";
  @SerializedName(SERIALIZED_NAME_RESPONSE_VIEW)
  private ResponseViewEnum responseView;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public EvaluateUserConsentsRequest() {
  }

  public EvaluateUserConsentsRequest consentList(ConsentList consentList) {
    this.consentList = consentList;
    return this;
  }

  /**
   * Get consentList
   * @return consentList
   */
  @javax.annotation.Nullable
  public ConsentList getConsentList() {
    return consentList;
  }

  public void setConsentList(ConsentList consentList) {
    this.consentList = consentList;
  }


  public EvaluateUserConsentsRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Optional. Limit on the number of User data mappings to return in a single response. If not specified, 100 is used. May not be larger than 1000.
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public EvaluateUserConsentsRequest pageToken(String pageToken) {
    this.pageToken = pageToken;
    return this;
  }

  /**
   * Optional. Token to retrieve the next page of results, or empty to get the first page.
   * @return pageToken
   */
  @javax.annotation.Nullable
  public String getPageToken() {
    return pageToken;
  }

  public void setPageToken(String pageToken) {
    this.pageToken = pageToken;
  }


  public EvaluateUserConsentsRequest requestAttributes(Map<String, String> requestAttributes) {
    this.requestAttributes = requestAttributes;
    return this;
  }

  public EvaluateUserConsentsRequest putRequestAttributesItem(String key, String requestAttributesItem) {
    if (this.requestAttributes == null) {
      this.requestAttributes = new HashMap<>();
    }
    this.requestAttributes.put(key, requestAttributesItem);
    return this;
  }

  /**
   * Required. The values of request attributes associated with this access request.
   * @return requestAttributes
   */
  @javax.annotation.Nullable
  public Map<String, String> getRequestAttributes() {
    return requestAttributes;
  }

  public void setRequestAttributes(Map<String, String> requestAttributes) {
    this.requestAttributes = requestAttributes;
  }


  public EvaluateUserConsentsRequest resourceAttributes(Map<String, String> resourceAttributes) {
    this.resourceAttributes = resourceAttributes;
    return this;
  }

  public EvaluateUserConsentsRequest putResourceAttributesItem(String key, String resourceAttributesItem) {
    if (this.resourceAttributes == null) {
      this.resourceAttributes = new HashMap<>();
    }
    this.resourceAttributes.put(key, resourceAttributesItem);
    return this;
  }

  /**
   * Optional. The values of resource attributes associated with the resources being requested. If no values are specified, then all resources are queried.
   * @return resourceAttributes
   */
  @javax.annotation.Nullable
  public Map<String, String> getResourceAttributes() {
    return resourceAttributes;
  }

  public void setResourceAttributes(Map<String, String> resourceAttributes) {
    this.resourceAttributes = resourceAttributes;
  }


  public EvaluateUserConsentsRequest responseView(ResponseViewEnum responseView) {
    this.responseView = responseView;
    return this;
  }

  /**
   * Optional. The view for EvaluateUserConsentsResponse. If unspecified, defaults to &#x60;BASIC&#x60; and returns &#x60;consented&#x60; as &#x60;TRUE&#x60; or &#x60;FALSE&#x60;.
   * @return responseView
   */
  @javax.annotation.Nullable
  public ResponseViewEnum getResponseView() {
    return responseView;
  }

  public void setResponseView(ResponseViewEnum responseView) {
    this.responseView = responseView;
  }


  public EvaluateUserConsentsRequest userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Required. User ID to evaluate consents for.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvaluateUserConsentsRequest evaluateUserConsentsRequest = (EvaluateUserConsentsRequest) o;
    return Objects.equals(this.consentList, evaluateUserConsentsRequest.consentList) &&
        Objects.equals(this.pageSize, evaluateUserConsentsRequest.pageSize) &&
        Objects.equals(this.pageToken, evaluateUserConsentsRequest.pageToken) &&
        Objects.equals(this.requestAttributes, evaluateUserConsentsRequest.requestAttributes) &&
        Objects.equals(this.resourceAttributes, evaluateUserConsentsRequest.resourceAttributes) &&
        Objects.equals(this.responseView, evaluateUserConsentsRequest.responseView) &&
        Objects.equals(this.userId, evaluateUserConsentsRequest.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consentList, pageSize, pageToken, requestAttributes, resourceAttributes, responseView, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvaluateUserConsentsRequest {\n");
    sb.append("    consentList: ").append(toIndentedString(consentList)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    pageToken: ").append(toIndentedString(pageToken)).append("\n");
    sb.append("    requestAttributes: ").append(toIndentedString(requestAttributes)).append("\n");
    sb.append("    resourceAttributes: ").append(toIndentedString(resourceAttributes)).append("\n");
    sb.append("    responseView: ").append(toIndentedString(responseView)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consentList");
    openapiFields.add("pageSize");
    openapiFields.add("pageToken");
    openapiFields.add("requestAttributes");
    openapiFields.add("resourceAttributes");
    openapiFields.add("responseView");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EvaluateUserConsentsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EvaluateUserConsentsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EvaluateUserConsentsRequest is not found in the empty JSON string", EvaluateUserConsentsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EvaluateUserConsentsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EvaluateUserConsentsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `consentList`
      if (jsonObj.get("consentList") != null && !jsonObj.get("consentList").isJsonNull()) {
        ConsentList.validateJsonElement(jsonObj.get("consentList"));
      }
      if ((jsonObj.get("pageToken") != null && !jsonObj.get("pageToken").isJsonNull()) && !jsonObj.get("pageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageToken").toString()));
      }
      if ((jsonObj.get("responseView") != null && !jsonObj.get("responseView").isJsonNull()) && !jsonObj.get("responseView").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseView` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseView").toString()));
      }
      // validate the optional field `responseView`
      if (jsonObj.get("responseView") != null && !jsonObj.get("responseView").isJsonNull()) {
        ResponseViewEnum.validateJsonElement(jsonObj.get("responseView"));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EvaluateUserConsentsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EvaluateUserConsentsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EvaluateUserConsentsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EvaluateUserConsentsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EvaluateUserConsentsRequest>() {
           @Override
           public void write(JsonWriter out, EvaluateUserConsentsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EvaluateUserConsentsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EvaluateUserConsentsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EvaluateUserConsentsRequest
   * @throws IOException if the JSON string is invalid with respect to EvaluateUserConsentsRequest
   */
  public static EvaluateUserConsentsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EvaluateUserConsentsRequest.class);
  }

  /**
   * Convert an instance of EvaluateUserConsentsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

