/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudHealthcareV1beta1DicomStreamConfig;
import org.openapitools.client.model.NotificationConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a DICOM store.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:11.528078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DicomStore {
  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTIFICATION_CONFIG = "notificationConfig";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_CONFIG)
  private NotificationConfig notificationConfig;

  public static final String SERIALIZED_NAME_STREAM_CONFIGS = "streamConfigs";
  @SerializedName(SERIALIZED_NAME_STREAM_CONFIGS)
  private List<GoogleCloudHealthcareV1beta1DicomStreamConfig> streamConfigs = new ArrayList<>();

  public DicomStore() {
  }

  public DicomStore labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public DicomStore putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * User-supplied key-value pairs used to organize DICOM stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public DicomStore name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Identifier. Resource name of the DICOM store, of the form &#x60;projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DicomStore notificationConfig(NotificationConfig notificationConfig) {
    this.notificationConfig = notificationConfig;
    return this;
  }

  /**
   * Get notificationConfig
   * @return notificationConfig
   */
  @javax.annotation.Nullable
  public NotificationConfig getNotificationConfig() {
    return notificationConfig;
  }

  public void setNotificationConfig(NotificationConfig notificationConfig) {
    this.notificationConfig = notificationConfig;
  }


  public DicomStore streamConfigs(List<GoogleCloudHealthcareV1beta1DicomStreamConfig> streamConfigs) {
    this.streamConfigs = streamConfigs;
    return this;
  }

  public DicomStore addStreamConfigsItem(GoogleCloudHealthcareV1beta1DicomStreamConfig streamConfigsItem) {
    if (this.streamConfigs == null) {
      this.streamConfigs = new ArrayList<>();
    }
    this.streamConfigs.add(streamConfigsItem);
    return this;
  }

  /**
   * Optional. A list of streaming configs used to configure the destination of streaming exports for every DICOM instance insertion in this DICOM store. After a new config is added to &#x60;stream_configs&#x60;, DICOM instance insertions are streamed to the new destination. When a config is removed from &#x60;stream_configs&#x60;, the server stops streaming to that destination. Each config must contain a unique destination.
   * @return streamConfigs
   */
  @javax.annotation.Nullable
  public List<GoogleCloudHealthcareV1beta1DicomStreamConfig> getStreamConfigs() {
    return streamConfigs;
  }

  public void setStreamConfigs(List<GoogleCloudHealthcareV1beta1DicomStreamConfig> streamConfigs) {
    this.streamConfigs = streamConfigs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DicomStore dicomStore = (DicomStore) o;
    return Objects.equals(this.labels, dicomStore.labels) &&
        Objects.equals(this.name, dicomStore.name) &&
        Objects.equals(this.notificationConfig, dicomStore.notificationConfig) &&
        Objects.equals(this.streamConfigs, dicomStore.streamConfigs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(labels, name, notificationConfig, streamConfigs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DicomStore {\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notificationConfig: ").append(toIndentedString(notificationConfig)).append("\n");
    sb.append("    streamConfigs: ").append(toIndentedString(streamConfigs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("notificationConfig");
    openapiFields.add("streamConfigs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DicomStore
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DicomStore.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DicomStore is not found in the empty JSON string", DicomStore.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DicomStore.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DicomStore` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `notificationConfig`
      if (jsonObj.get("notificationConfig") != null && !jsonObj.get("notificationConfig").isJsonNull()) {
        NotificationConfig.validateJsonElement(jsonObj.get("notificationConfig"));
      }
      if (jsonObj.get("streamConfigs") != null && !jsonObj.get("streamConfigs").isJsonNull()) {
        JsonArray jsonArraystreamConfigs = jsonObj.getAsJsonArray("streamConfigs");
        if (jsonArraystreamConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("streamConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `streamConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("streamConfigs").toString()));
          }

          // validate the optional field `streamConfigs` (array)
          for (int i = 0; i < jsonArraystreamConfigs.size(); i++) {
            GoogleCloudHealthcareV1beta1DicomStreamConfig.validateJsonElement(jsonArraystreamConfigs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DicomStore.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DicomStore' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DicomStore> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DicomStore.class));

       return (TypeAdapter<T>) new TypeAdapter<DicomStore>() {
           @Override
           public void write(JsonWriter out, DicomStore value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DicomStore read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DicomStore given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DicomStore
   * @throws IOException if the JSON string is invalid with respect to DicomStore
   */
  public static DicomStore fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DicomStore.class);
  }

  /**
   * Convert an instance of DicomStore to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

