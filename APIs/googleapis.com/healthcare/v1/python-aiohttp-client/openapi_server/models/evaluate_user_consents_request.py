# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consent_list import ConsentList
from openapi_server import util


class EvaluateUserConsentsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consent_list: ConsentList=None, page_size: int=None, page_token: str=None, request_attributes: Dict[str, str]=None, resource_attributes: Dict[str, str]=None, response_view: str=None, user_id: str=None):
        """EvaluateUserConsentsRequest - a model defined in OpenAPI

        :param consent_list: The consent_list of this EvaluateUserConsentsRequest.
        :param page_size: The page_size of this EvaluateUserConsentsRequest.
        :param page_token: The page_token of this EvaluateUserConsentsRequest.
        :param request_attributes: The request_attributes of this EvaluateUserConsentsRequest.
        :param resource_attributes: The resource_attributes of this EvaluateUserConsentsRequest.
        :param response_view: The response_view of this EvaluateUserConsentsRequest.
        :param user_id: The user_id of this EvaluateUserConsentsRequest.
        """
        self.openapi_types = {
            'consent_list': ConsentList,
            'page_size': int,
            'page_token': str,
            'request_attributes': Dict[str, str],
            'resource_attributes': Dict[str, str],
            'response_view': str,
            'user_id': str
        }

        self.attribute_map = {
            'consent_list': 'consentList',
            'page_size': 'pageSize',
            'page_token': 'pageToken',
            'request_attributes': 'requestAttributes',
            'resource_attributes': 'resourceAttributes',
            'response_view': 'responseView',
            'user_id': 'userId'
        }

        self._consent_list = consent_list
        self._page_size = page_size
        self._page_token = page_token
        self._request_attributes = request_attributes
        self._resource_attributes = resource_attributes
        self._response_view = response_view
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EvaluateUserConsentsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EvaluateUserConsentsRequest of this EvaluateUserConsentsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consent_list(self):
        """Gets the consent_list of this EvaluateUserConsentsRequest.


        :return: The consent_list of this EvaluateUserConsentsRequest.
        :rtype: ConsentList
        """
        return self._consent_list

    @consent_list.setter
    def consent_list(self, consent_list):
        """Sets the consent_list of this EvaluateUserConsentsRequest.


        :param consent_list: The consent_list of this EvaluateUserConsentsRequest.
        :type consent_list: ConsentList
        """

        self._consent_list = consent_list

    @property
    def page_size(self):
        """Gets the page_size of this EvaluateUserConsentsRequest.

        Optional. Limit on the number of User data mappings to return in a single response. If not specified, 100 is used. May not be larger than 1000.

        :return: The page_size of this EvaluateUserConsentsRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this EvaluateUserConsentsRequest.

        Optional. Limit on the number of User data mappings to return in a single response. If not specified, 100 is used. May not be larger than 1000.

        :param page_size: The page_size of this EvaluateUserConsentsRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """Gets the page_token of this EvaluateUserConsentsRequest.

        Optional. Token to retrieve the next page of results, or empty to get the first page.

        :return: The page_token of this EvaluateUserConsentsRequest.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this EvaluateUserConsentsRequest.

        Optional. Token to retrieve the next page of results, or empty to get the first page.

        :param page_token: The page_token of this EvaluateUserConsentsRequest.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def request_attributes(self):
        """Gets the request_attributes of this EvaluateUserConsentsRequest.

        Required. The values of request attributes associated with this access request.

        :return: The request_attributes of this EvaluateUserConsentsRequest.
        :rtype: Dict[str, str]
        """
        return self._request_attributes

    @request_attributes.setter
    def request_attributes(self, request_attributes):
        """Sets the request_attributes of this EvaluateUserConsentsRequest.

        Required. The values of request attributes associated with this access request.

        :param request_attributes: The request_attributes of this EvaluateUserConsentsRequest.
        :type request_attributes: Dict[str, str]
        """

        self._request_attributes = request_attributes

    @property
    def resource_attributes(self):
        """Gets the resource_attributes of this EvaluateUserConsentsRequest.

        Optional. The values of resource attributes associated with the resources being requested. If no values are specified, then all resources are queried.

        :return: The resource_attributes of this EvaluateUserConsentsRequest.
        :rtype: Dict[str, str]
        """
        return self._resource_attributes

    @resource_attributes.setter
    def resource_attributes(self, resource_attributes):
        """Sets the resource_attributes of this EvaluateUserConsentsRequest.

        Optional. The values of resource attributes associated with the resources being requested. If no values are specified, then all resources are queried.

        :param resource_attributes: The resource_attributes of this EvaluateUserConsentsRequest.
        :type resource_attributes: Dict[str, str]
        """

        self._resource_attributes = resource_attributes

    @property
    def response_view(self):
        """Gets the response_view of this EvaluateUserConsentsRequest.

        Optional. The view for EvaluateUserConsentsResponse. If unspecified, defaults to `BASIC` and returns `consented` as `TRUE` or `FALSE`.

        :return: The response_view of this EvaluateUserConsentsRequest.
        :rtype: str
        """
        return self._response_view

    @response_view.setter
    def response_view(self, response_view):
        """Sets the response_view of this EvaluateUserConsentsRequest.

        Optional. The view for EvaluateUserConsentsResponse. If unspecified, defaults to `BASIC` and returns `consented` as `TRUE` or `FALSE`.

        :param response_view: The response_view of this EvaluateUserConsentsRequest.
        :type response_view: str
        """
        allowed_values = ["RESPONSE_VIEW_UNSPECIFIED", "BASIC", "FULL"]  # noqa: E501
        if response_view not in allowed_values:
            raise ValueError(
                "Invalid value for `response_view` ({0}), must be one of {1}"
                .format(response_view, allowed_values)
            )

        self._response_view = response_view

    @property
    def user_id(self):
        """Gets the user_id of this EvaluateUserConsentsRequest.

        Required. User ID to evaluate consents for.

        :return: The user_id of this EvaluateUserConsentsRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this EvaluateUserConsentsRequest.

        Required. User ID to evaluate consents for.

        :param user_id: The user_id of this EvaluateUserConsentsRequest.
        :type user_id: str
        """

        self._user_id = user_id
