# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.kms_wrapped_crypto_key import KmsWrappedCryptoKey
from openapi_server import util


class CryptoHashConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, crypto_key: str=None, kms_wrapped: KmsWrappedCryptoKey=None):
        """CryptoHashConfig - a model defined in OpenAPI

        :param crypto_key: The crypto_key of this CryptoHashConfig.
        :param kms_wrapped: The kms_wrapped of this CryptoHashConfig.
        """
        self.openapi_types = {
            'crypto_key': str,
            'kms_wrapped': KmsWrappedCryptoKey
        }

        self.attribute_map = {
            'crypto_key': 'cryptoKey',
            'kms_wrapped': 'kmsWrapped'
        }

        self._crypto_key = crypto_key
        self._kms_wrapped = kms_wrapped

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CryptoHashConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CryptoHashConfig of this CryptoHashConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crypto_key(self):
        """Gets the crypto_key of this CryptoHashConfig.

        An AES 128/192/256 bit key. Causes the hash to be computed based on this key. A default key is generated for each Deidentify operation and is used when neither `crypto_key` nor `kms_wrapped` is specified. Must not be set if `kms_wrapped` is set.

        :return: The crypto_key of this CryptoHashConfig.
        :rtype: str
        """
        return self._crypto_key

    @crypto_key.setter
    def crypto_key(self, crypto_key):
        """Sets the crypto_key of this CryptoHashConfig.

        An AES 128/192/256 bit key. Causes the hash to be computed based on this key. A default key is generated for each Deidentify operation and is used when neither `crypto_key` nor `kms_wrapped` is specified. Must not be set if `kms_wrapped` is set.

        :param crypto_key: The crypto_key of this CryptoHashConfig.
        :type crypto_key: str
        """

        self._crypto_key = crypto_key

    @property
    def kms_wrapped(self):
        """Gets the kms_wrapped of this CryptoHashConfig.


        :return: The kms_wrapped of this CryptoHashConfig.
        :rtype: KmsWrappedCryptoKey
        """
        return self._kms_wrapped

    @kms_wrapped.setter
    def kms_wrapped(self, kms_wrapped):
        """Sets the kms_wrapped of this CryptoHashConfig.


        :param kms_wrapped: The kms_wrapped of this CryptoHashConfig.
        :type kms_wrapped: KmsWrappedCryptoKey
        """

        self._kms_wrapped = kms_wrapped
