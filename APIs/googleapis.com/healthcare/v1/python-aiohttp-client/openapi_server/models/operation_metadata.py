# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.progress_counter import ProgressCounter
from openapi_server import util


class OperationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_method_name: str=None, cancel_requested: bool=None, counter: ProgressCounter=None, create_time: str=None, end_time: str=None, logs_url: str=None):
        """OperationMetadata - a model defined in OpenAPI

        :param api_method_name: The api_method_name of this OperationMetadata.
        :param cancel_requested: The cancel_requested of this OperationMetadata.
        :param counter: The counter of this OperationMetadata.
        :param create_time: The create_time of this OperationMetadata.
        :param end_time: The end_time of this OperationMetadata.
        :param logs_url: The logs_url of this OperationMetadata.
        """
        self.openapi_types = {
            'api_method_name': str,
            'cancel_requested': bool,
            'counter': ProgressCounter,
            'create_time': str,
            'end_time': str,
            'logs_url': str
        }

        self.attribute_map = {
            'api_method_name': 'apiMethodName',
            'cancel_requested': 'cancelRequested',
            'counter': 'counter',
            'create_time': 'createTime',
            'end_time': 'endTime',
            'logs_url': 'logsUrl'
        }

        self._api_method_name = api_method_name
        self._cancel_requested = cancel_requested
        self._counter = counter
        self._create_time = create_time
        self._end_time = end_time
        self._logs_url = logs_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationMetadata of this OperationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_method_name(self):
        """Gets the api_method_name of this OperationMetadata.

        The name of the API method that initiated the operation.

        :return: The api_method_name of this OperationMetadata.
        :rtype: str
        """
        return self._api_method_name

    @api_method_name.setter
    def api_method_name(self, api_method_name):
        """Sets the api_method_name of this OperationMetadata.

        The name of the API method that initiated the operation.

        :param api_method_name: The api_method_name of this OperationMetadata.
        :type api_method_name: str
        """

        self._api_method_name = api_method_name

    @property
    def cancel_requested(self):
        """Gets the cancel_requested of this OperationMetadata.

        Specifies if cancellation was requested for the operation.

        :return: The cancel_requested of this OperationMetadata.
        :rtype: bool
        """
        return self._cancel_requested

    @cancel_requested.setter
    def cancel_requested(self, cancel_requested):
        """Sets the cancel_requested of this OperationMetadata.

        Specifies if cancellation was requested for the operation.

        :param cancel_requested: The cancel_requested of this OperationMetadata.
        :type cancel_requested: bool
        """

        self._cancel_requested = cancel_requested

    @property
    def counter(self):
        """Gets the counter of this OperationMetadata.


        :return: The counter of this OperationMetadata.
        :rtype: ProgressCounter
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this OperationMetadata.


        :param counter: The counter of this OperationMetadata.
        :type counter: ProgressCounter
        """

        self._counter = counter

    @property
    def create_time(self):
        """Gets the create_time of this OperationMetadata.

        The time at which the operation was created by the API.

        :return: The create_time of this OperationMetadata.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this OperationMetadata.

        The time at which the operation was created by the API.

        :param create_time: The create_time of this OperationMetadata.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def end_time(self):
        """Gets the end_time of this OperationMetadata.

        The time at which execution was completed.

        :return: The end_time of this OperationMetadata.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this OperationMetadata.

        The time at which execution was completed.

        :param end_time: The end_time of this OperationMetadata.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def logs_url(self):
        """Gets the logs_url of this OperationMetadata.

        A link to audit and error logs in the log viewer. Error logs are generated only by some operations, listed at [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).

        :return: The logs_url of this OperationMetadata.
        :rtype: str
        """
        return self._logs_url

    @logs_url.setter
    def logs_url(self, logs_url):
        """Sets the logs_url of this OperationMetadata.

        A link to audit and error logs in the log viewer. Error logs are generated only by some operations, listed at [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).

        :param logs_url: The logs_url of this OperationMetadata.
        :type logs_url: str
        """

        self._logs_url = logs_url
