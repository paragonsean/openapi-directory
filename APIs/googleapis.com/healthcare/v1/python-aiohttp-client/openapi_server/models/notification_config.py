# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotificationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pubsub_topic: str=None, send_for_bulk_import: bool=None):
        """NotificationConfig - a model defined in OpenAPI

        :param pubsub_topic: The pubsub_topic of this NotificationConfig.
        :param send_for_bulk_import: The send_for_bulk_import of this NotificationConfig.
        """
        self.openapi_types = {
            'pubsub_topic': str,
            'send_for_bulk_import': bool
        }

        self.attribute_map = {
            'pubsub_topic': 'pubsubTopic',
            'send_for_bulk_import': 'sendForBulkImport'
        }

        self._pubsub_topic = pubsub_topic
        self._send_for_bulk_import = send_for_bulk_import

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationConfig of this NotificationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pubsub_topic(self):
        """Gets the pubsub_topic of this NotificationConfig.

        The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. PubsubMessage.Data contains the resource name. PubsubMessage.MessageId is the ID of this message. It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message was published. Notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). If the number of errors exceeds a certain rate, some aren't submitted. Note that not all operations trigger notifications, see [Configuring Pub/Sub notifications](https://cloud.google.com/healthcare/docs/how-tos/pubsub) for specific details.

        :return: The pubsub_topic of this NotificationConfig.
        :rtype: str
        """
        return self._pubsub_topic

    @pubsub_topic.setter
    def pubsub_topic(self, pubsub_topic):
        """Sets the pubsub_topic of this NotificationConfig.

        The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. PubsubMessage.Data contains the resource name. PubsubMessage.MessageId is the ID of this message. It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message was published. Notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). If the number of errors exceeds a certain rate, some aren't submitted. Note that not all operations trigger notifications, see [Configuring Pub/Sub notifications](https://cloud.google.com/healthcare/docs/how-tos/pubsub) for specific details.

        :param pubsub_topic: The pubsub_topic of this NotificationConfig.
        :type pubsub_topic: str
        """

        self._pubsub_topic = pubsub_topic

    @property
    def send_for_bulk_import(self):
        """Gets the send_for_bulk_import of this NotificationConfig.

        Indicates whether or not to send Pub/Sub notifications on bulk import. Only supported for DICOM imports.

        :return: The send_for_bulk_import of this NotificationConfig.
        :rtype: bool
        """
        return self._send_for_bulk_import

    @send_for_bulk_import.setter
    def send_for_bulk_import(self, send_for_bulk_import):
        """Sets the send_for_bulk_import of this NotificationConfig.

        Indicates whether or not to send Pub/Sub notifications on bulk import. Only supported for DICOM imports.

        :param send_for_bulk_import: The send_for_bulk_import of this NotificationConfig.
        :type send_for_bulk_import: bool
        """

        self._send_for_bulk_import = send_for_bulk_import
