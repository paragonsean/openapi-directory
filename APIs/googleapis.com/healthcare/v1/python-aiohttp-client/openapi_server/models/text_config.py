# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.info_type_transformation import InfoTypeTransformation
from openapi_server import util


class TextConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_transformations: List[InfoTypeTransformation]=None, exclude_info_types: List[str]=None, transformations: List[InfoTypeTransformation]=None):
        """TextConfig - a model defined in OpenAPI

        :param additional_transformations: The additional_transformations of this TextConfig.
        :param exclude_info_types: The exclude_info_types of this TextConfig.
        :param transformations: The transformations of this TextConfig.
        """
        self.openapi_types = {
            'additional_transformations': List[InfoTypeTransformation],
            'exclude_info_types': List[str],
            'transformations': List[InfoTypeTransformation]
        }

        self.attribute_map = {
            'additional_transformations': 'additionalTransformations',
            'exclude_info_types': 'excludeInfoTypes',
            'transformations': 'transformations'
        }

        self._additional_transformations = additional_transformations
        self._exclude_info_types = exclude_info_types
        self._transformations = transformations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextConfig of this TextConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_transformations(self):
        """Gets the additional_transformations of this TextConfig.

        Transformations to apply to the detected data, overridden by `exclude_info_types`.

        :return: The additional_transformations of this TextConfig.
        :rtype: List[InfoTypeTransformation]
        """
        return self._additional_transformations

    @additional_transformations.setter
    def additional_transformations(self, additional_transformations):
        """Sets the additional_transformations of this TextConfig.

        Transformations to apply to the detected data, overridden by `exclude_info_types`.

        :param additional_transformations: The additional_transformations of this TextConfig.
        :type additional_transformations: List[InfoTypeTransformation]
        """

        self._additional_transformations = additional_transformations

    @property
    def exclude_info_types(self):
        """Gets the exclude_info_types of this TextConfig.

        InfoTypes to skip transforming, overriding `additional_transformations`.

        :return: The exclude_info_types of this TextConfig.
        :rtype: List[str]
        """
        return self._exclude_info_types

    @exclude_info_types.setter
    def exclude_info_types(self, exclude_info_types):
        """Sets the exclude_info_types of this TextConfig.

        InfoTypes to skip transforming, overriding `additional_transformations`.

        :param exclude_info_types: The exclude_info_types of this TextConfig.
        :type exclude_info_types: List[str]
        """

        self._exclude_info_types = exclude_info_types

    @property
    def transformations(self):
        """Gets the transformations of this TextConfig.

        The transformations to apply to the detected data. Deprecated. Use `additional_transformations` instead.

        :return: The transformations of this TextConfig.
        :rtype: List[InfoTypeTransformation]
        """
        return self._transformations

    @transformations.setter
    def transformations(self, transformations):
        """Sets the transformations of this TextConfig.

        The transformations to apply to the detected data. Deprecated. Use `additional_transformations` instead.

        :param transformations: The transformations of this TextConfig.
        :type transformations: List[InfoTypeTransformation]
        """

        self._transformations = transformations
