# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.schema_package import SchemaPackage
from openapi_server import util


class ParserConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_null_header: bool=None, _schema: SchemaPackage=None, segment_terminator: str=None, version: str=None):
        """ParserConfig - a model defined in OpenAPI

        :param allow_null_header: The allow_null_header of this ParserConfig.
        :param _schema: The _schema of this ParserConfig.
        :param segment_terminator: The segment_terminator of this ParserConfig.
        :param version: The version of this ParserConfig.
        """
        self.openapi_types = {
            'allow_null_header': bool,
            '_schema': SchemaPackage,
            'segment_terminator': str,
            'version': str
        }

        self.attribute_map = {
            'allow_null_header': 'allowNullHeader',
            '_schema': 'schema',
            'segment_terminator': 'segmentTerminator',
            'version': 'version'
        }

        self._allow_null_header = allow_null_header
        self.__schema = _schema
        self._segment_terminator = segment_terminator
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParserConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParserConfig of this ParserConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_null_header(self):
        """Gets the allow_null_header of this ParserConfig.

        Determines whether messages with no header are allowed.

        :return: The allow_null_header of this ParserConfig.
        :rtype: bool
        """
        return self._allow_null_header

    @allow_null_header.setter
    def allow_null_header(self, allow_null_header):
        """Sets the allow_null_header of this ParserConfig.

        Determines whether messages with no header are allowed.

        :param allow_null_header: The allow_null_header of this ParserConfig.
        :type allow_null_header: bool
        """

        self._allow_null_header = allow_null_header

    @property
    def _schema(self):
        """Gets the _schema of this ParserConfig.


        :return: The _schema of this ParserConfig.
        :rtype: SchemaPackage
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this ParserConfig.


        :param _schema: The _schema of this ParserConfig.
        :type _schema: SchemaPackage
        """

        self.__schema = _schema

    @property
    def segment_terminator(self):
        """Gets the segment_terminator of this ParserConfig.

        Byte(s) to use as the segment terminator. If this is unset, '\\r' is used as segment terminator, matching the HL7 version 2 specification.

        :return: The segment_terminator of this ParserConfig.
        :rtype: str
        """
        return self._segment_terminator

    @segment_terminator.setter
    def segment_terminator(self, segment_terminator):
        """Sets the segment_terminator of this ParserConfig.

        Byte(s) to use as the segment terminator. If this is unset, '\\r' is used as segment terminator, matching the HL7 version 2 specification.

        :param segment_terminator: The segment_terminator of this ParserConfig.
        :type segment_terminator: str
        """

        self._segment_terminator = segment_terminator

    @property
    def version(self):
        """Gets the version of this ParserConfig.

        Immutable. Determines the version of both the default parser to be used when `schema` is not given, as well as the schematized parser used when `schema` is specified. This field is immutable after HL7v2 store creation.

        :return: The version of this ParserConfig.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ParserConfig.

        Immutable. Determines the version of both the default parser to be used when `schema` is not given, as well as the schematized parser used when `schema` is specified. This field is immutable after HL7v2 store creation.

        :param version: The version of this ParserConfig.
        :type version: str
        """
        allowed_values = ["PARSER_VERSION_UNSPECIFIED", "V1", "V2", "V3"]  # noqa: E501
        if version not in allowed_values:
            raise ValueError(
                "Invalid value for `version` ({0}), must be one of {1}"
                .format(version, allowed_values)
            )

        self._version = version
