# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Segment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: Dict[str, str]=None, segment_id: str=None, set_id: str=None):
        """Segment - a model defined in OpenAPI

        :param fields: The fields of this Segment.
        :param segment_id: The segment_id of this Segment.
        :param set_id: The set_id of this Segment.
        """
        self.openapi_types = {
            'fields': Dict[str, str],
            'segment_id': str,
            'set_id': str
        }

        self.attribute_map = {
            'fields': 'fields',
            'segment_id': 'segmentId',
            'set_id': 'setId'
        }

        self._fields = fields
        self._segment_id = segment_id
        self._set_id = set_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Segment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Segment of this Segment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this Segment.

        A mapping from the positional location to the value. The key string uses zero-based indexes separated by dots to identify Fields, components and sub-components. A bracket notation is also used to identify different instances of a repeated field. Regex for key: (\\d+)(\\[\\d+\\])?(.\\d+)?(.\\d+)? Examples of (key, value) pairs: * (0.1, \"hemoglobin\") denotes that the first component of Field 0 has the value \"hemoglobin\". * (1.1.2, \"CBC\") denotes that the second sub-component of the first component of Field 1 has the value \"CBC\". * (1[0].1, \"HbA1c\") denotes that the first component of the first Instance of Field 1, which is repeated, has the value \"HbA1c\".

        :return: The fields of this Segment.
        :rtype: Dict[str, str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Segment.

        A mapping from the positional location to the value. The key string uses zero-based indexes separated by dots to identify Fields, components and sub-components. A bracket notation is also used to identify different instances of a repeated field. Regex for key: (\\d+)(\\[\\d+\\])?(.\\d+)?(.\\d+)? Examples of (key, value) pairs: * (0.1, \"hemoglobin\") denotes that the first component of Field 0 has the value \"hemoglobin\". * (1.1.2, \"CBC\") denotes that the second sub-component of the first component of Field 1 has the value \"CBC\". * (1[0].1, \"HbA1c\") denotes that the first component of the first Instance of Field 1, which is repeated, has the value \"HbA1c\".

        :param fields: The fields of this Segment.
        :type fields: Dict[str, str]
        """

        self._fields = fields

    @property
    def segment_id(self):
        """Gets the segment_id of this Segment.

        A string that indicates the type of segment. For example, EVN or PID.

        :return: The segment_id of this Segment.
        :rtype: str
        """
        return self._segment_id

    @segment_id.setter
    def segment_id(self, segment_id):
        """Sets the segment_id of this Segment.

        A string that indicates the type of segment. For example, EVN or PID.

        :param segment_id: The segment_id of this Segment.
        :type segment_id: str
        """

        self._segment_id = segment_id

    @property
    def set_id(self):
        """Gets the set_id of this Segment.

        Set ID for segments that can be in a set. This can be empty if it's missing or isn't applicable.

        :return: The set_id of this Segment.
        :rtype: str
        """
        return self._set_id

    @set_id.setter
    def set_id(self, set_id):
        """Sets the set_id of this Segment.

        Set ID for segments that can be in a set. This can be empty if it's missing or isn't applicable.

        :param set_id: The set_id of this Segment.
        :type set_id: str
        """

        self._set_id = set_id
