# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_field import ModelField
from openapi_server import util


class Type(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: List[ModelField]=None, name: str=None, primitive: str=None):
        """Type - a model defined in OpenAPI

        :param fields: The fields of this Type.
        :param name: The name of this Type.
        :param primitive: The primitive of this Type.
        """
        self.openapi_types = {
            'fields': List[ModelField],
            'name': str,
            'primitive': str
        }

        self.attribute_map = {
            'fields': 'fields',
            'name': 'name',
            'primitive': 'primitive'
        }

        self._fields = fields
        self._name = name
        self._primitive = primitive

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Type':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Type of this Type.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this Type.

        The (sub) fields this type has (if not primitive).

        :return: The fields of this Type.
        :rtype: List[ModelField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Type.

        The (sub) fields this type has (if not primitive).

        :param fields: The fields of this Type.
        :type fields: List[ModelField]
        """

        self._fields = fields

    @property
    def name(self):
        """Gets the name of this Type.

        The name of this type. This would be the segment or datatype name. For example, \"PID\" or \"XPN\".

        :return: The name of this Type.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Type.

        The name of this type. This would be the segment or datatype name. For example, \"PID\" or \"XPN\".

        :param name: The name of this Type.
        :type name: str
        """

        self._name = name

    @property
    def primitive(self):
        """Gets the primitive of this Type.

        If this is a primitive type then this field is the type of the primitive For example, STRING. Leave unspecified for composite types.

        :return: The primitive of this Type.
        :rtype: str
        """
        return self._primitive

    @primitive.setter
    def primitive(self, primitive):
        """Sets the primitive of this Type.

        If this is a primitive type then this field is the type of the primitive For example, STRING. Leave unspecified for composite types.

        :param primitive: The primitive of this Type.
        :type primitive: str
        """
        allowed_values = ["PRIMITIVE_UNSPECIFIED", "STRING", "VARIES", "UNESCAPED_STRING"]  # noqa: E501
        if primitive not in allowed_values:
            raise ValueError(
                "Invalid value for `primitive` ({0}), must be one of {1}"
                .format(primitive, allowed_values)
            )

        self._primitive = primitive
