# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parsed_data import ParsedData
from openapi_server.models.patient_id import PatientId
from openapi_server.models.schematized_data import SchematizedData
from openapi_server import util


class Message(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, data: str=None, labels: Dict[str, str]=None, message_type: str=None, name: str=None, parsed_data: ParsedData=None, patient_ids: List[PatientId]=None, schematized_data: SchematizedData=None, send_facility: str=None, send_time: str=None):
        """Message - a model defined in OpenAPI

        :param create_time: The create_time of this Message.
        :param data: The data of this Message.
        :param labels: The labels of this Message.
        :param message_type: The message_type of this Message.
        :param name: The name of this Message.
        :param parsed_data: The parsed_data of this Message.
        :param patient_ids: The patient_ids of this Message.
        :param schematized_data: The schematized_data of this Message.
        :param send_facility: The send_facility of this Message.
        :param send_time: The send_time of this Message.
        """
        self.openapi_types = {
            'create_time': str,
            'data': str,
            'labels': Dict[str, str],
            'message_type': str,
            'name': str,
            'parsed_data': ParsedData,
            'patient_ids': List[PatientId],
            'schematized_data': SchematizedData,
            'send_facility': str,
            'send_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'data': 'data',
            'labels': 'labels',
            'message_type': 'messageType',
            'name': 'name',
            'parsed_data': 'parsedData',
            'patient_ids': 'patientIds',
            'schematized_data': 'schematizedData',
            'send_facility': 'sendFacility',
            'send_time': 'sendTime'
        }

        self._create_time = create_time
        self._data = data
        self._labels = labels
        self._message_type = message_type
        self._name = name
        self._parsed_data = parsed_data
        self._patient_ids = patient_ids
        self._schematized_data = schematized_data
        self._send_facility = send_facility
        self._send_time = send_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Message of this Message.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Message.

        Output only. The datetime when the message was created. Set by the server.

        :return: The create_time of this Message.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Message.

        Output only. The datetime when the message was created. Set by the server.

        :param create_time: The create_time of this Message.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def data(self):
        """Gets the data of this Message.

        Required. Raw message bytes.

        :return: The data of this Message.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Message.

        Required. Raw message bytes.

        :param data: The data of this Message.
        :type data: str
        """

        self._data = data

    @property
    def labels(self):
        """Gets the labels of this Message.

        User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.

        :return: The labels of this Message.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Message.

        User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.

        :param labels: The labels of this Message.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def message_type(self):
        """Gets the message_type of this Message.

        The message type for this message. MSH-9.1.

        :return: The message_type of this Message.
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this Message.

        The message type for this message. MSH-9.1.

        :param message_type: The message_type of this Message.
        :type message_type: str
        """

        self._message_type = message_type

    @property
    def name(self):
        """Gets the name of this Message.

        Output only. Resource name of the Message, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`. Assigned by the server.

        :return: The name of this Message.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Message.

        Output only. Resource name of the Message, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`. Assigned by the server.

        :param name: The name of this Message.
        :type name: str
        """

        self._name = name

    @property
    def parsed_data(self):
        """Gets the parsed_data of this Message.


        :return: The parsed_data of this Message.
        :rtype: ParsedData
        """
        return self._parsed_data

    @parsed_data.setter
    def parsed_data(self, parsed_data):
        """Sets the parsed_data of this Message.


        :param parsed_data: The parsed_data of this Message.
        :type parsed_data: ParsedData
        """

        self._parsed_data = parsed_data

    @property
    def patient_ids(self):
        """Gets the patient_ids of this Message.

        All patient IDs listed in the PID-2, PID-3, and PID-4 segments of this message.

        :return: The patient_ids of this Message.
        :rtype: List[PatientId]
        """
        return self._patient_ids

    @patient_ids.setter
    def patient_ids(self, patient_ids):
        """Sets the patient_ids of this Message.

        All patient IDs listed in the PID-2, PID-3, and PID-4 segments of this message.

        :param patient_ids: The patient_ids of this Message.
        :type patient_ids: List[PatientId]
        """

        self._patient_ids = patient_ids

    @property
    def schematized_data(self):
        """Gets the schematized_data of this Message.


        :return: The schematized_data of this Message.
        :rtype: SchematizedData
        """
        return self._schematized_data

    @schematized_data.setter
    def schematized_data(self, schematized_data):
        """Sets the schematized_data of this Message.


        :param schematized_data: The schematized_data of this Message.
        :type schematized_data: SchematizedData
        """

        self._schematized_data = schematized_data

    @property
    def send_facility(self):
        """Gets the send_facility of this Message.

        The hospital that this message came from. MSH-4.

        :return: The send_facility of this Message.
        :rtype: str
        """
        return self._send_facility

    @send_facility.setter
    def send_facility(self, send_facility):
        """Sets the send_facility of this Message.

        The hospital that this message came from. MSH-4.

        :param send_facility: The send_facility of this Message.
        :type send_facility: str
        """

        self._send_facility = send_facility

    @property
    def send_time(self):
        """Gets the send_time of this Message.

        The datetime the sending application sent this message. MSH-7.

        :return: The send_time of this Message.
        :rtype: str
        """
        return self._send_time

    @send_time.setter
    def send_time(self, send_time):
        """Sets the send_time of this Message.

        The datetime the sending application sent this message. MSH-7.

        :param send_time: The send_time of this Message.
        :type send_time: str
        """

        self._send_time = send_time
