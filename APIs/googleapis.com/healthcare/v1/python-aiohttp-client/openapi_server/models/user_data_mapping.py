# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribute import Attribute
from openapi_server import util


class UserDataMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archive_time: str=None, archived: bool=None, data_id: str=None, name: str=None, resource_attributes: List[Attribute]=None, user_id: str=None):
        """UserDataMapping - a model defined in OpenAPI

        :param archive_time: The archive_time of this UserDataMapping.
        :param archived: The archived of this UserDataMapping.
        :param data_id: The data_id of this UserDataMapping.
        :param name: The name of this UserDataMapping.
        :param resource_attributes: The resource_attributes of this UserDataMapping.
        :param user_id: The user_id of this UserDataMapping.
        """
        self.openapi_types = {
            'archive_time': str,
            'archived': bool,
            'data_id': str,
            'name': str,
            'resource_attributes': List[Attribute],
            'user_id': str
        }

        self.attribute_map = {
            'archive_time': 'archiveTime',
            'archived': 'archived',
            'data_id': 'dataId',
            'name': 'name',
            'resource_attributes': 'resourceAttributes',
            'user_id': 'userId'
        }

        self._archive_time = archive_time
        self._archived = archived
        self._data_id = data_id
        self._name = name
        self._resource_attributes = resource_attributes
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserDataMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserDataMapping of this UserDataMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archive_time(self):
        """Gets the archive_time of this UserDataMapping.

        Output only. Indicates the time when this mapping was archived.

        :return: The archive_time of this UserDataMapping.
        :rtype: str
        """
        return self._archive_time

    @archive_time.setter
    def archive_time(self, archive_time):
        """Sets the archive_time of this UserDataMapping.

        Output only. Indicates the time when this mapping was archived.

        :param archive_time: The archive_time of this UserDataMapping.
        :type archive_time: str
        """

        self._archive_time = archive_time

    @property
    def archived(self):
        """Gets the archived of this UserDataMapping.

        Output only. Indicates whether this mapping is archived.

        :return: The archived of this UserDataMapping.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this UserDataMapping.

        Output only. Indicates whether this mapping is archived.

        :param archived: The archived of this UserDataMapping.
        :type archived: bool
        """

        self._archived = archived

    @property
    def data_id(self):
        """Gets the data_id of this UserDataMapping.

        Required. A unique identifier for the mapped resource.

        :return: The data_id of this UserDataMapping.
        :rtype: str
        """
        return self._data_id

    @data_id.setter
    def data_id(self, data_id):
        """Sets the data_id of this UserDataMapping.

        Required. A unique identifier for the mapped resource.

        :param data_id: The data_id of this UserDataMapping.
        :type data_id: str
        """

        self._data_id = data_id

    @property
    def name(self):
        """Gets the name of this UserDataMapping.

        Resource name of the User data mapping, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/userDataMappings/{user_data_mapping_id}`.

        :return: The name of this UserDataMapping.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserDataMapping.

        Resource name of the User data mapping, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/userDataMappings/{user_data_mapping_id}`.

        :param name: The name of this UserDataMapping.
        :type name: str
        """

        self._name = name

    @property
    def resource_attributes(self):
        """Gets the resource_attributes of this UserDataMapping.

        Attributes of the resource. Only explicitly set attributes are displayed here. Attribute definitions with defaults set implicitly apply to these User data mappings. Attributes listed here must be single valued, that is, exactly one value is specified for the field \"values\" in each Attribute.

        :return: The resource_attributes of this UserDataMapping.
        :rtype: List[Attribute]
        """
        return self._resource_attributes

    @resource_attributes.setter
    def resource_attributes(self, resource_attributes):
        """Sets the resource_attributes of this UserDataMapping.

        Attributes of the resource. Only explicitly set attributes are displayed here. Attribute definitions with defaults set implicitly apply to these User data mappings. Attributes listed here must be single valued, that is, exactly one value is specified for the field \"values\" in each Attribute.

        :param resource_attributes: The resource_attributes of this UserDataMapping.
        :type resource_attributes: List[Attribute]
        """

        self._resource_attributes = resource_attributes

    @property
    def user_id(self):
        """Gets the user_id of this UserDataMapping.

        Required. User's UUID provided by the client.

        :return: The user_id of this UserDataMapping.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserDataMapping.

        Required. User's UUID provided by the client.

        :param user_id: The user_id of this UserDataMapping.
        :type user_id: str
        """

        self._user_id = user_id
