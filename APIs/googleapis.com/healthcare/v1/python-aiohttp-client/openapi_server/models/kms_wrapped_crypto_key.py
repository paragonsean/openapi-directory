# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KmsWrappedCryptoKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, crypto_key: str=None, wrapped_key: str=None):
        """KmsWrappedCryptoKey - a model defined in OpenAPI

        :param crypto_key: The crypto_key of this KmsWrappedCryptoKey.
        :param wrapped_key: The wrapped_key of this KmsWrappedCryptoKey.
        """
        self.openapi_types = {
            'crypto_key': str,
            'wrapped_key': str
        }

        self.attribute_map = {
            'crypto_key': 'cryptoKey',
            'wrapped_key': 'wrappedKey'
        }

        self._crypto_key = crypto_key
        self._wrapped_key = wrapped_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KmsWrappedCryptoKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KmsWrappedCryptoKey of this KmsWrappedCryptoKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crypto_key(self):
        """Gets the crypto_key of this KmsWrappedCryptoKey.

        Required. The resource name of the KMS CryptoKey to use for unwrapping. For example, `projects/{project_id}/locations/{location_id}/keyRings/{keyring}/cryptoKeys/{key}`.

        :return: The crypto_key of this KmsWrappedCryptoKey.
        :rtype: str
        """
        return self._crypto_key

    @crypto_key.setter
    def crypto_key(self, crypto_key):
        """Sets the crypto_key of this KmsWrappedCryptoKey.

        Required. The resource name of the KMS CryptoKey to use for unwrapping. For example, `projects/{project_id}/locations/{location_id}/keyRings/{keyring}/cryptoKeys/{key}`.

        :param crypto_key: The crypto_key of this KmsWrappedCryptoKey.
        :type crypto_key: str
        """

        self._crypto_key = crypto_key

    @property
    def wrapped_key(self):
        """Gets the wrapped_key of this KmsWrappedCryptoKey.

        Required. The wrapped data crypto key.

        :return: The wrapped_key of this KmsWrappedCryptoKey.
        :rtype: str
        """
        return self._wrapped_key

    @wrapped_key.setter
    def wrapped_key(self, wrapped_key):
        """Sets the wrapped_key of this KmsWrappedCryptoKey.

        Required. The wrapped data crypto key.

        :param wrapped_key: The wrapped_key of this KmsWrappedCryptoKey.
        :type wrapped_key: str
        """

        self._wrapped_key = wrapped_key
