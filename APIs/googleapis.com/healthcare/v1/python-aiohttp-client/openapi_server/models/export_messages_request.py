# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gcs_destination import GcsDestination
from openapi_server.models.pubsub_destination import PubsubDestination
from openapi_server import util


class ExportMessagesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, filter: str=None, gcs_destination: GcsDestination=None, pubsub_destination: PubsubDestination=None, start_time: str=None):
        """ExportMessagesRequest - a model defined in OpenAPI

        :param end_time: The end_time of this ExportMessagesRequest.
        :param filter: The filter of this ExportMessagesRequest.
        :param gcs_destination: The gcs_destination of this ExportMessagesRequest.
        :param pubsub_destination: The pubsub_destination of this ExportMessagesRequest.
        :param start_time: The start_time of this ExportMessagesRequest.
        """
        self.openapi_types = {
            'end_time': str,
            'filter': str,
            'gcs_destination': GcsDestination,
            'pubsub_destination': PubsubDestination,
            'start_time': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'filter': 'filter',
            'gcs_destination': 'gcsDestination',
            'pubsub_destination': 'pubsubDestination',
            'start_time': 'startTime'
        }

        self._end_time = end_time
        self._filter = filter
        self._gcs_destination = gcs_destination
        self._pubsub_destination = pubsub_destination
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportMessagesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportMessagesRequest of this ExportMessagesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this ExportMessagesRequest.

        The end of the range in `send_time` (MSH.7, https://www.hl7.org/documentcenter/public_temp_2E58C1F9-1C23-BA17-0C6126475344DA9D/wg/conf/HL7MSH.htm) to process. If not specified, the time when the export is scheduled is used. This value has to come after the `start_time` defined below. Only messages whose `send_time` lies in the range `start_time` (inclusive) to `end_time` (exclusive) are exported.

        :return: The end_time of this ExportMessagesRequest.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ExportMessagesRequest.

        The end of the range in `send_time` (MSH.7, https://www.hl7.org/documentcenter/public_temp_2E58C1F9-1C23-BA17-0C6126475344DA9D/wg/conf/HL7MSH.htm) to process. If not specified, the time when the export is scheduled is used. This value has to come after the `start_time` defined below. Only messages whose `send_time` lies in the range `start_time` (inclusive) to `end_time` (exclusive) are exported.

        :param end_time: The end_time of this ExportMessagesRequest.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def filter(self):
        """Gets the filter of this ExportMessagesRequest.

        Restricts messages exported to those matching a filter, only applicable to PubsubDestination. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `\"query text\"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `\"Comment = great\"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in the `yyyy-mm-dd` format. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, and is just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. The following fields and functions are available for filtering: * `message_type`, from the MSH-9.1 field. For example, `NOT message_type = \"ADT\"`. * `send_date` or `sendDate`, the `yyyy-mm-dd` date the message was sent in the dataset's time_zone, from the MSH-7 segment. For example, `send_date < \"2017-01-02\"`. * `send_time`, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, `send_time < \"2017-01-02T00:00:00-05:00\"`. * `create_time`, the timestamp when the message was created in the HL7v2 store. Use the RFC3339 time format for comparisons. For example, `create_time < \"2017-01-02T00:00:00-05:00\"`. * `send_facility`, the care center that the message came from, from the MSH-4 segment. For example, `send_facility = \"ABC\"`. Note: The filter will be applied to every message in the HL7v2 store whose `send_time` lies in the range defined by the `start_time` and the `end_time`. Even if the filter only matches a small set of messages, the export operation can still take a long time to finish when a lot of messages are between the specified `start_time` and `end_time` range.

        :return: The filter of this ExportMessagesRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ExportMessagesRequest.

        Restricts messages exported to those matching a filter, only applicable to PubsubDestination. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `\"query text\"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `\"Comment = great\"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in the `yyyy-mm-dd` format. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, and is just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. The following fields and functions are available for filtering: * `message_type`, from the MSH-9.1 field. For example, `NOT message_type = \"ADT\"`. * `send_date` or `sendDate`, the `yyyy-mm-dd` date the message was sent in the dataset's time_zone, from the MSH-7 segment. For example, `send_date < \"2017-01-02\"`. * `send_time`, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, `send_time < \"2017-01-02T00:00:00-05:00\"`. * `create_time`, the timestamp when the message was created in the HL7v2 store. Use the RFC3339 time format for comparisons. For example, `create_time < \"2017-01-02T00:00:00-05:00\"`. * `send_facility`, the care center that the message came from, from the MSH-4 segment. For example, `send_facility = \"ABC\"`. Note: The filter will be applied to every message in the HL7v2 store whose `send_time` lies in the range defined by the `start_time` and the `end_time`. Even if the filter only matches a small set of messages, the export operation can still take a long time to finish when a lot of messages are between the specified `start_time` and `end_time` range.

        :param filter: The filter of this ExportMessagesRequest.
        :type filter: str
        """

        self._filter = filter

    @property
    def gcs_destination(self):
        """Gets the gcs_destination of this ExportMessagesRequest.


        :return: The gcs_destination of this ExportMessagesRequest.
        :rtype: GcsDestination
        """
        return self._gcs_destination

    @gcs_destination.setter
    def gcs_destination(self, gcs_destination):
        """Sets the gcs_destination of this ExportMessagesRequest.


        :param gcs_destination: The gcs_destination of this ExportMessagesRequest.
        :type gcs_destination: GcsDestination
        """

        self._gcs_destination = gcs_destination

    @property
    def pubsub_destination(self):
        """Gets the pubsub_destination of this ExportMessagesRequest.


        :return: The pubsub_destination of this ExportMessagesRequest.
        :rtype: PubsubDestination
        """
        return self._pubsub_destination

    @pubsub_destination.setter
    def pubsub_destination(self, pubsub_destination):
        """Sets the pubsub_destination of this ExportMessagesRequest.


        :param pubsub_destination: The pubsub_destination of this ExportMessagesRequest.
        :type pubsub_destination: PubsubDestination
        """

        self._pubsub_destination = pubsub_destination

    @property
    def start_time(self):
        """Gets the start_time of this ExportMessagesRequest.

        The start of the range in `send_time` (MSH.7, https://www.hl7.org/documentcenter/public_temp_2E58C1F9-1C23-BA17-0C6126475344DA9D/wg/conf/HL7MSH.htm) to process. If not specified, the UNIX epoch (1970-01-01T00:00:00Z) is used. This value has to come before the `end_time` defined below. Only messages whose `send_time` lies in the range `start_time` (inclusive) to `end_time` (exclusive) are exported.

        :return: The start_time of this ExportMessagesRequest.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ExportMessagesRequest.

        The start of the range in `send_time` (MSH.7, https://www.hl7.org/documentcenter/public_temp_2E58C1F9-1C23-BA17-0C6126475344DA9D/wg/conf/HL7MSH.htm) to process. If not specified, the UNIX epoch (1970-01-01T00:00:00Z) is used. This value has to come before the `end_time` defined below. Only messages whose `send_time` lies in the range `start_time` (inclusive) to `end_time` (exclusive) are exported.

        :param start_time: The start_time of this ExportMessagesRequest.
        :type start_time: str
        """

        self._start_time = start_time
