# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AttributeDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_values: List[str]=None, category: str=None, consent_default_values: List[str]=None, data_mapping_default_value: str=None, description: str=None, name: str=None):
        """AttributeDefinition - a model defined in OpenAPI

        :param allowed_values: The allowed_values of this AttributeDefinition.
        :param category: The category of this AttributeDefinition.
        :param consent_default_values: The consent_default_values of this AttributeDefinition.
        :param data_mapping_default_value: The data_mapping_default_value of this AttributeDefinition.
        :param description: The description of this AttributeDefinition.
        :param name: The name of this AttributeDefinition.
        """
        self.openapi_types = {
            'allowed_values': List[str],
            'category': str,
            'consent_default_values': List[str],
            'data_mapping_default_value': str,
            'description': str,
            'name': str
        }

        self.attribute_map = {
            'allowed_values': 'allowedValues',
            'category': 'category',
            'consent_default_values': 'consentDefaultValues',
            'data_mapping_default_value': 'dataMappingDefaultValue',
            'description': 'description',
            'name': 'name'
        }

        self._allowed_values = allowed_values
        self._category = category
        self._consent_default_values = consent_default_values
        self._data_mapping_default_value = data_mapping_default_value
        self._description = description
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributeDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttributeDefinition of this AttributeDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_values(self):
        """Gets the allowed_values of this AttributeDefinition.

        Required. Possible values for the attribute. The number of allowed values must not exceed 500. An empty list is invalid. The list can only be expanded after creation.

        :return: The allowed_values of this AttributeDefinition.
        :rtype: List[str]
        """
        return self._allowed_values

    @allowed_values.setter
    def allowed_values(self, allowed_values):
        """Sets the allowed_values of this AttributeDefinition.

        Required. Possible values for the attribute. The number of allowed values must not exceed 500. An empty list is invalid. The list can only be expanded after creation.

        :param allowed_values: The allowed_values of this AttributeDefinition.
        :type allowed_values: List[str]
        """

        self._allowed_values = allowed_values

    @property
    def category(self):
        """Gets the category of this AttributeDefinition.

        Required. The category of the attribute. The value of this field cannot be changed after creation.

        :return: The category of this AttributeDefinition.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AttributeDefinition.

        Required. The category of the attribute. The value of this field cannot be changed after creation.

        :param category: The category of this AttributeDefinition.
        :type category: str
        """
        allowed_values = ["CATEGORY_UNSPECIFIED", "RESOURCE", "REQUEST"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def consent_default_values(self):
        """Gets the consent_default_values of this AttributeDefinition.

        Optional. Default values of the attribute in Consents. If no default values are specified, it defaults to an empty value.

        :return: The consent_default_values of this AttributeDefinition.
        :rtype: List[str]
        """
        return self._consent_default_values

    @consent_default_values.setter
    def consent_default_values(self, consent_default_values):
        """Sets the consent_default_values of this AttributeDefinition.

        Optional. Default values of the attribute in Consents. If no default values are specified, it defaults to an empty value.

        :param consent_default_values: The consent_default_values of this AttributeDefinition.
        :type consent_default_values: List[str]
        """

        self._consent_default_values = consent_default_values

    @property
    def data_mapping_default_value(self):
        """Gets the data_mapping_default_value of this AttributeDefinition.

        Optional. Default value of the attribute in User data mappings. If no default value is specified, it defaults to an empty value. This field is only applicable to attributes of the category `RESOURCE`.

        :return: The data_mapping_default_value of this AttributeDefinition.
        :rtype: str
        """
        return self._data_mapping_default_value

    @data_mapping_default_value.setter
    def data_mapping_default_value(self, data_mapping_default_value):
        """Sets the data_mapping_default_value of this AttributeDefinition.

        Optional. Default value of the attribute in User data mappings. If no default value is specified, it defaults to an empty value. This field is only applicable to attributes of the category `RESOURCE`.

        :param data_mapping_default_value: The data_mapping_default_value of this AttributeDefinition.
        :type data_mapping_default_value: str
        """

        self._data_mapping_default_value = data_mapping_default_value

    @property
    def description(self):
        """Gets the description of this AttributeDefinition.

        Optional. A description of the attribute.

        :return: The description of this AttributeDefinition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AttributeDefinition.

        Optional. A description of the attribute.

        :param description: The description of this AttributeDefinition.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this AttributeDefinition.

        Identifier. Resource name of the Attribute definition, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/attributeDefinitions/{attribute_definition_id}`. Cannot be changed after creation.

        :return: The name of this AttributeDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttributeDefinition.

        Identifier. Resource name of the Attribute definition, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/attributeDefinitions/{attribute_definition_id}`. Cannot be changed after creation.

        :param name: The name of this AttributeDefinition.
        :type name: str
        """

        self._name = name
