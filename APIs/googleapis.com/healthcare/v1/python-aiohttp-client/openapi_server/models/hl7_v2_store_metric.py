# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Hl7V2StoreMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: str=None, message_type: str=None, structured_storage_size_bytes: str=None):
        """Hl7V2StoreMetric - a model defined in OpenAPI

        :param count: The count of this Hl7V2StoreMetric.
        :param message_type: The message_type of this Hl7V2StoreMetric.
        :param structured_storage_size_bytes: The structured_storage_size_bytes of this Hl7V2StoreMetric.
        """
        self.openapi_types = {
            'count': str,
            'message_type': str,
            'structured_storage_size_bytes': str
        }

        self.attribute_map = {
            'count': 'count',
            'message_type': 'messageType',
            'structured_storage_size_bytes': 'structuredStorageSizeBytes'
        }

        self._count = count
        self._message_type = message_type
        self._structured_storage_size_bytes = structured_storage_size_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Hl7V2StoreMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Hl7V2StoreMetric of this Hl7V2StoreMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this Hl7V2StoreMetric.

        The total count of HL7v2 messages in the store for the given message type.

        :return: The count of this Hl7V2StoreMetric.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Hl7V2StoreMetric.

        The total count of HL7v2 messages in the store for the given message type.

        :param count: The count of this Hl7V2StoreMetric.
        :type count: str
        """

        self._count = count

    @property
    def message_type(self):
        """Gets the message_type of this Hl7V2StoreMetric.

        The Hl7v2 message type this metric applies to, such as `ADT` or `ORU`.

        :return: The message_type of this Hl7V2StoreMetric.
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this Hl7V2StoreMetric.

        The Hl7v2 message type this metric applies to, such as `ADT` or `ORU`.

        :param message_type: The message_type of this Hl7V2StoreMetric.
        :type message_type: str
        """

        self._message_type = message_type

    @property
    def structured_storage_size_bytes(self):
        """Gets the structured_storage_size_bytes of this Hl7V2StoreMetric.

        The total amount of structured storage used by HL7v2 messages of this message type in the store.

        :return: The structured_storage_size_bytes of this Hl7V2StoreMetric.
        :rtype: str
        """
        return self._structured_storage_size_bytes

    @structured_storage_size_bytes.setter
    def structured_storage_size_bytes(self, structured_storage_size_bytes):
        """Sets the structured_storage_size_bytes of this Hl7V2StoreMetric.

        The total amount of structured storage used by HL7v2 messages of this message type in the store.

        :param structured_storage_size_bytes: The structured_storage_size_bytes of this Hl7V2StoreMetric.
        :type structured_storage_size_bytes: str
        """

        self._structured_storage_size_bytes = structured_storage_size_bytes
