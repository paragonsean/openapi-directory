# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deidentify_config import DeidentifyConfig
from openapi_server.models.fhir_filter import FhirFilter
from openapi_server import util


class DeidentifyFhirStoreRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: DeidentifyConfig=None, destination_store: str=None, gcs_config_uri: str=None, resource_filter: FhirFilter=None, skip_modified_resources: bool=None):
        """DeidentifyFhirStoreRequest - a model defined in OpenAPI

        :param config: The config of this DeidentifyFhirStoreRequest.
        :param destination_store: The destination_store of this DeidentifyFhirStoreRequest.
        :param gcs_config_uri: The gcs_config_uri of this DeidentifyFhirStoreRequest.
        :param resource_filter: The resource_filter of this DeidentifyFhirStoreRequest.
        :param skip_modified_resources: The skip_modified_resources of this DeidentifyFhirStoreRequest.
        """
        self.openapi_types = {
            'config': DeidentifyConfig,
            'destination_store': str,
            'gcs_config_uri': str,
            'resource_filter': FhirFilter,
            'skip_modified_resources': bool
        }

        self.attribute_map = {
            'config': 'config',
            'destination_store': 'destinationStore',
            'gcs_config_uri': 'gcsConfigUri',
            'resource_filter': 'resourceFilter',
            'skip_modified_resources': 'skipModifiedResources'
        }

        self._config = config
        self._destination_store = destination_store
        self._gcs_config_uri = gcs_config_uri
        self._resource_filter = resource_filter
        self._skip_modified_resources = skip_modified_resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeidentifyFhirStoreRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeidentifyFhirStoreRequest of this DeidentifyFhirStoreRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this DeidentifyFhirStoreRequest.


        :return: The config of this DeidentifyFhirStoreRequest.
        :rtype: DeidentifyConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this DeidentifyFhirStoreRequest.


        :param config: The config of this DeidentifyFhirStoreRequest.
        :type config: DeidentifyConfig
        """

        self._config = config

    @property
    def destination_store(self):
        """Gets the destination_store of this DeidentifyFhirStoreRequest.

        Required. The name of the FHIR store to create and write the redacted data to. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`. * The destination dataset must exist. * The source dataset and destination dataset must both reside in the same location. De-identifying data across multiple locations is not supported. * The destination FHIR store must exist. * The caller must have the healthcare.fhirResources.update permission to write to the destination FHIR store.

        :return: The destination_store of this DeidentifyFhirStoreRequest.
        :rtype: str
        """
        return self._destination_store

    @destination_store.setter
    def destination_store(self, destination_store):
        """Sets the destination_store of this DeidentifyFhirStoreRequest.

        Required. The name of the FHIR store to create and write the redacted data to. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`. * The destination dataset must exist. * The source dataset and destination dataset must both reside in the same location. De-identifying data across multiple locations is not supported. * The destination FHIR store must exist. * The caller must have the healthcare.fhirResources.update permission to write to the destination FHIR store.

        :param destination_store: The destination_store of this DeidentifyFhirStoreRequest.
        :type destination_store: str
        """

        self._destination_store = destination_store

    @property
    def gcs_config_uri(self):
        """Gets the gcs_config_uri of this DeidentifyFhirStoreRequest.

        Cloud Storage location to read the JSON cloud.healthcare.deidentify.DeidentifyConfig from, overriding the default config. Must be of the form `gs://{bucket_id}/path/to/object`. The Cloud Storage location must grant the Cloud IAM role `roles/storage.objectViewer` to the project's Cloud Healthcare Service Agent service account. Only one of `config` and `gcs_config_uri` can be specified.

        :return: The gcs_config_uri of this DeidentifyFhirStoreRequest.
        :rtype: str
        """
        return self._gcs_config_uri

    @gcs_config_uri.setter
    def gcs_config_uri(self, gcs_config_uri):
        """Sets the gcs_config_uri of this DeidentifyFhirStoreRequest.

        Cloud Storage location to read the JSON cloud.healthcare.deidentify.DeidentifyConfig from, overriding the default config. Must be of the form `gs://{bucket_id}/path/to/object`. The Cloud Storage location must grant the Cloud IAM role `roles/storage.objectViewer` to the project's Cloud Healthcare Service Agent service account. Only one of `config` and `gcs_config_uri` can be specified.

        :param gcs_config_uri: The gcs_config_uri of this DeidentifyFhirStoreRequest.
        :type gcs_config_uri: str
        """

        self._gcs_config_uri = gcs_config_uri

    @property
    def resource_filter(self):
        """Gets the resource_filter of this DeidentifyFhirStoreRequest.


        :return: The resource_filter of this DeidentifyFhirStoreRequest.
        :rtype: FhirFilter
        """
        return self._resource_filter

    @resource_filter.setter
    def resource_filter(self, resource_filter):
        """Sets the resource_filter of this DeidentifyFhirStoreRequest.


        :param resource_filter: The resource_filter of this DeidentifyFhirStoreRequest.
        :type resource_filter: FhirFilter
        """

        self._resource_filter = resource_filter

    @property
    def skip_modified_resources(self):
        """Gets the skip_modified_resources of this DeidentifyFhirStoreRequest.

        If true, skips resources that are created or modified after the de-identify operation is created.

        :return: The skip_modified_resources of this DeidentifyFhirStoreRequest.
        :rtype: bool
        """
        return self._skip_modified_resources

    @skip_modified_resources.setter
    def skip_modified_resources(self, skip_modified_resources):
        """Sets the skip_modified_resources of this DeidentifyFhirStoreRequest.

        If true, skips resources that are created or modified after the de-identify operation is created.

        :param skip_modified_resources: The skip_modified_resources of this DeidentifyFhirStoreRequest.
        :type skip_modified_resources: bool
        """

        self._skip_modified_resources = skip_modified_resources
