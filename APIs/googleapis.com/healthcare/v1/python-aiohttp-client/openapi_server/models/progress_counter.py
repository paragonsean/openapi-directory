# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProgressCounter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failure: str=None, pending: str=None, success: str=None):
        """ProgressCounter - a model defined in OpenAPI

        :param failure: The failure of this ProgressCounter.
        :param pending: The pending of this ProgressCounter.
        :param success: The success of this ProgressCounter.
        """
        self.openapi_types = {
            'failure': str,
            'pending': str,
            'success': str
        }

        self.attribute_map = {
            'failure': 'failure',
            'pending': 'pending',
            'success': 'success'
        }

        self._failure = failure
        self._pending = pending
        self._success = success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProgressCounter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProgressCounter of this ProgressCounter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failure(self):
        """Gets the failure of this ProgressCounter.

        The number of units that failed in the operation.

        :return: The failure of this ProgressCounter.
        :rtype: str
        """
        return self._failure

    @failure.setter
    def failure(self, failure):
        """Sets the failure of this ProgressCounter.

        The number of units that failed in the operation.

        :param failure: The failure of this ProgressCounter.
        :type failure: str
        """

        self._failure = failure

    @property
    def pending(self):
        """Gets the pending of this ProgressCounter.

        The number of units that are pending in the operation.

        :return: The pending of this ProgressCounter.
        :rtype: str
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this ProgressCounter.

        The number of units that are pending in the operation.

        :param pending: The pending of this ProgressCounter.
        :type pending: str
        """

        self._pending = pending

    @property
    def success(self):
        """Gets the success of this ProgressCounter.

        The number of units that succeeded in the operation.

        :return: The success of this ProgressCounter.
        :rtype: str
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this ProgressCounter.

        The number of units that succeeded in the operation.

        :param success: The success of this ProgressCounter.
        :type success: str
        """

        self._success = success
