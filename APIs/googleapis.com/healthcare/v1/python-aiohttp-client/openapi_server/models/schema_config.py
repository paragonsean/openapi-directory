# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.time_partitioning import TimePartitioning
from openapi_server import util


class SchemaConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_updated_partition_config: TimePartitioning=None, recursive_structure_depth: str=None, schema_type: str=None):
        """SchemaConfig - a model defined in OpenAPI

        :param last_updated_partition_config: The last_updated_partition_config of this SchemaConfig.
        :param recursive_structure_depth: The recursive_structure_depth of this SchemaConfig.
        :param schema_type: The schema_type of this SchemaConfig.
        """
        self.openapi_types = {
            'last_updated_partition_config': TimePartitioning,
            'recursive_structure_depth': str,
            'schema_type': str
        }

        self.attribute_map = {
            'last_updated_partition_config': 'lastUpdatedPartitionConfig',
            'recursive_structure_depth': 'recursiveStructureDepth',
            'schema_type': 'schemaType'
        }

        self._last_updated_partition_config = last_updated_partition_config
        self._recursive_structure_depth = recursive_structure_depth
        self._schema_type = schema_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SchemaConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SchemaConfig of this SchemaConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_updated_partition_config(self):
        """Gets the last_updated_partition_config of this SchemaConfig.


        :return: The last_updated_partition_config of this SchemaConfig.
        :rtype: TimePartitioning
        """
        return self._last_updated_partition_config

    @last_updated_partition_config.setter
    def last_updated_partition_config(self, last_updated_partition_config):
        """Sets the last_updated_partition_config of this SchemaConfig.


        :param last_updated_partition_config: The last_updated_partition_config of this SchemaConfig.
        :type last_updated_partition_config: TimePartitioning
        """

        self._last_updated_partition_config = last_updated_partition_config

    @property
    def recursive_structure_depth(self):
        """Gets the recursive_structure_depth of this SchemaConfig.

        The depth for all recursive structures in the output analytics schema. For example, `concept` in the CodeSystem resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called `concept.concept` but not `concept.concept.concept`. If not specified or set to 0, the server will use the default value 2. The maximum depth allowed is 5.

        :return: The recursive_structure_depth of this SchemaConfig.
        :rtype: str
        """
        return self._recursive_structure_depth

    @recursive_structure_depth.setter
    def recursive_structure_depth(self, recursive_structure_depth):
        """Sets the recursive_structure_depth of this SchemaConfig.

        The depth for all recursive structures in the output analytics schema. For example, `concept` in the CodeSystem resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called `concept.concept` but not `concept.concept.concept`. If not specified or set to 0, the server will use the default value 2. The maximum depth allowed is 5.

        :param recursive_structure_depth: The recursive_structure_depth of this SchemaConfig.
        :type recursive_structure_depth: str
        """

        self._recursive_structure_depth = recursive_structure_depth

    @property
    def schema_type(self):
        """Gets the schema_type of this SchemaConfig.

        Specifies the output schema type. Schema type is required.

        :return: The schema_type of this SchemaConfig.
        :rtype: str
        """
        return self._schema_type

    @schema_type.setter
    def schema_type(self, schema_type):
        """Sets the schema_type of this SchemaConfig.

        Specifies the output schema type. Schema type is required.

        :param schema_type: The schema_type of this SchemaConfig.
        :type schema_type: str
        """
        allowed_values = ["SCHEMA_TYPE_UNSPECIFIED", "ANALYTICS", "ANALYTICS_V2"]  # noqa: E501
        if schema_type not in allowed_values:
            raise ValueError(
                "Invalid value for `schema_type` ({0}), must be one of {1}"
                .format(schema_type, allowed_values)
            )

        self._schema_type = schema_type
