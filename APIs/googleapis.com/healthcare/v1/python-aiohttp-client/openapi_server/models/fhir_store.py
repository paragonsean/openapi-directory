# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fhir_notification_config import FhirNotificationConfig
from openapi_server.models.notification_config import NotificationConfig
from openapi_server.models.stream_config import StreamConfig
from openapi_server.models.validation_config import ValidationConfig
from openapi_server import util


class FhirStore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, complex_data_type_reference_parsing: str=None, default_search_handling_strict: bool=None, disable_referential_integrity: bool=None, disable_resource_versioning: bool=None, enable_update_create: bool=None, labels: Dict[str, str]=None, name: str=None, notification_config: NotificationConfig=None, notification_configs: List[FhirNotificationConfig]=None, stream_configs: List[StreamConfig]=None, validation_config: ValidationConfig=None, version: str=None):
        """FhirStore - a model defined in OpenAPI

        :param complex_data_type_reference_parsing: The complex_data_type_reference_parsing of this FhirStore.
        :param default_search_handling_strict: The default_search_handling_strict of this FhirStore.
        :param disable_referential_integrity: The disable_referential_integrity of this FhirStore.
        :param disable_resource_versioning: The disable_resource_versioning of this FhirStore.
        :param enable_update_create: The enable_update_create of this FhirStore.
        :param labels: The labels of this FhirStore.
        :param name: The name of this FhirStore.
        :param notification_config: The notification_config of this FhirStore.
        :param notification_configs: The notification_configs of this FhirStore.
        :param stream_configs: The stream_configs of this FhirStore.
        :param validation_config: The validation_config of this FhirStore.
        :param version: The version of this FhirStore.
        """
        self.openapi_types = {
            'complex_data_type_reference_parsing': str,
            'default_search_handling_strict': bool,
            'disable_referential_integrity': bool,
            'disable_resource_versioning': bool,
            'enable_update_create': bool,
            'labels': Dict[str, str],
            'name': str,
            'notification_config': NotificationConfig,
            'notification_configs': List[FhirNotificationConfig],
            'stream_configs': List[StreamConfig],
            'validation_config': ValidationConfig,
            'version': str
        }

        self.attribute_map = {
            'complex_data_type_reference_parsing': 'complexDataTypeReferenceParsing',
            'default_search_handling_strict': 'defaultSearchHandlingStrict',
            'disable_referential_integrity': 'disableReferentialIntegrity',
            'disable_resource_versioning': 'disableResourceVersioning',
            'enable_update_create': 'enableUpdateCreate',
            'labels': 'labels',
            'name': 'name',
            'notification_config': 'notificationConfig',
            'notification_configs': 'notificationConfigs',
            'stream_configs': 'streamConfigs',
            'validation_config': 'validationConfig',
            'version': 'version'
        }

        self._complex_data_type_reference_parsing = complex_data_type_reference_parsing
        self._default_search_handling_strict = default_search_handling_strict
        self._disable_referential_integrity = disable_referential_integrity
        self._disable_resource_versioning = disable_resource_versioning
        self._enable_update_create = enable_update_create
        self._labels = labels
        self._name = name
        self._notification_config = notification_config
        self._notification_configs = notification_configs
        self._stream_configs = stream_configs
        self._validation_config = validation_config
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FhirStore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FhirStore of this FhirStore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def complex_data_type_reference_parsing(self):
        """Gets the complex_data_type_reference_parsing of this FhirStore.

        Enable parsing of references within complex FHIR data types such as Extensions. If this value is set to ENABLED, then features like referential integrity and Bundle reference rewriting apply to all references. If this flag has not been specified the behavior of the FHIR store will not change, references in complex data types will not be parsed. New stores will have this value set to ENABLED after a notification period. Warning: turning on this flag causes processing existing resources to fail if they contain references to non-existent resources.

        :return: The complex_data_type_reference_parsing of this FhirStore.
        :rtype: str
        """
        return self._complex_data_type_reference_parsing

    @complex_data_type_reference_parsing.setter
    def complex_data_type_reference_parsing(self, complex_data_type_reference_parsing):
        """Sets the complex_data_type_reference_parsing of this FhirStore.

        Enable parsing of references within complex FHIR data types such as Extensions. If this value is set to ENABLED, then features like referential integrity and Bundle reference rewriting apply to all references. If this flag has not been specified the behavior of the FHIR store will not change, references in complex data types will not be parsed. New stores will have this value set to ENABLED after a notification period. Warning: turning on this flag causes processing existing resources to fail if they contain references to non-existent resources.

        :param complex_data_type_reference_parsing: The complex_data_type_reference_parsing of this FhirStore.
        :type complex_data_type_reference_parsing: str
        """
        allowed_values = ["COMPLEX_DATA_TYPE_REFERENCE_PARSING_UNSPECIFIED", "DISABLED", "ENABLED"]  # noqa: E501
        if complex_data_type_reference_parsing not in allowed_values:
            raise ValueError(
                "Invalid value for `complex_data_type_reference_parsing` ({0}), must be one of {1}"
                .format(complex_data_type_reference_parsing, allowed_values)
            )

        self._complex_data_type_reference_parsing = complex_data_type_reference_parsing

    @property
    def default_search_handling_strict(self):
        """Gets the default_search_handling_strict of this FhirStore.

        If true, overrides the default search behavior for this FHIR store to `handling=strict` which returns an error for unrecognized search parameters. If false, uses the FHIR specification default `handling=lenient` which ignores unrecognized search parameters. The handling can always be changed from the default on an individual API call by setting the HTTP header `Prefer: handling=strict` or `Prefer: handling=lenient`.

        :return: The default_search_handling_strict of this FhirStore.
        :rtype: bool
        """
        return self._default_search_handling_strict

    @default_search_handling_strict.setter
    def default_search_handling_strict(self, default_search_handling_strict):
        """Sets the default_search_handling_strict of this FhirStore.

        If true, overrides the default search behavior for this FHIR store to `handling=strict` which returns an error for unrecognized search parameters. If false, uses the FHIR specification default `handling=lenient` which ignores unrecognized search parameters. The handling can always be changed from the default on an individual API call by setting the HTTP header `Prefer: handling=strict` or `Prefer: handling=lenient`.

        :param default_search_handling_strict: The default_search_handling_strict of this FhirStore.
        :type default_search_handling_strict: bool
        """

        self._default_search_handling_strict = default_search_handling_strict

    @property
    def disable_referential_integrity(self):
        """Gets the disable_referential_integrity of this FhirStore.

        Immutable. Whether to disable referential integrity in this FHIR store. This field is immutable after FHIR store creation. The default value is false, meaning that the API enforces referential integrity and fails the requests that result in inconsistent state in the FHIR store. When this field is set to true, the API skips referential integrity checks. Consequently, operations that rely on references, such as GetPatientEverything, do not return all the results if broken references exist.

        :return: The disable_referential_integrity of this FhirStore.
        :rtype: bool
        """
        return self._disable_referential_integrity

    @disable_referential_integrity.setter
    def disable_referential_integrity(self, disable_referential_integrity):
        """Sets the disable_referential_integrity of this FhirStore.

        Immutable. Whether to disable referential integrity in this FHIR store. This field is immutable after FHIR store creation. The default value is false, meaning that the API enforces referential integrity and fails the requests that result in inconsistent state in the FHIR store. When this field is set to true, the API skips referential integrity checks. Consequently, operations that rely on references, such as GetPatientEverything, do not return all the results if broken references exist.

        :param disable_referential_integrity: The disable_referential_integrity of this FhirStore.
        :type disable_referential_integrity: bool
        """

        self._disable_referential_integrity = disable_referential_integrity

    @property
    def disable_resource_versioning(self):
        """Gets the disable_resource_versioning of this FhirStore.

        Immutable. Whether to disable resource versioning for this FHIR store. This field can not be changed after the creation of FHIR store. If set to false, which is the default behavior, all write operations cause historical versions to be recorded automatically. The historical versions can be fetched through the history APIs, but cannot be updated. If set to true, no historical versions are kept. The server sends errors for attempts to read the historical versions.

        :return: The disable_resource_versioning of this FhirStore.
        :rtype: bool
        """
        return self._disable_resource_versioning

    @disable_resource_versioning.setter
    def disable_resource_versioning(self, disable_resource_versioning):
        """Sets the disable_resource_versioning of this FhirStore.

        Immutable. Whether to disable resource versioning for this FHIR store. This field can not be changed after the creation of FHIR store. If set to false, which is the default behavior, all write operations cause historical versions to be recorded automatically. The historical versions can be fetched through the history APIs, but cannot be updated. If set to true, no historical versions are kept. The server sends errors for attempts to read the historical versions.

        :param disable_resource_versioning: The disable_resource_versioning of this FhirStore.
        :type disable_resource_versioning: bool
        """

        self._disable_resource_versioning = disable_resource_versioning

    @property
    def enable_update_create(self):
        """Gets the enable_update_create of this FhirStore.

        Whether this FHIR store has the [updateCreate capability](https://www.hl7.org/fhir/capabilitystatement-definitions.html#CapabilityStatement.rest.resource.updateCreate). This determines if the client can use an Update operation to create a new resource with a client-specified ID. If false, all IDs are server-assigned through the Create operation and attempts to update a non-existent resource return errors. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud audit logs and Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources.

        :return: The enable_update_create of this FhirStore.
        :rtype: bool
        """
        return self._enable_update_create

    @enable_update_create.setter
    def enable_update_create(self, enable_update_create):
        """Sets the enable_update_create of this FhirStore.

        Whether this FHIR store has the [updateCreate capability](https://www.hl7.org/fhir/capabilitystatement-definitions.html#CapabilityStatement.rest.resource.updateCreate). This determines if the client can use an Update operation to create a new resource with a client-specified ID. If false, all IDs are server-assigned through the Create operation and attempts to update a non-existent resource return errors. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud audit logs and Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources.

        :param enable_update_create: The enable_update_create of this FhirStore.
        :type enable_update_create: bool
        """

        self._enable_update_create = enable_update_create

    @property
    def labels(self):
        """Gets the labels of this FhirStore.

        User-supplied key-value pairs used to organize FHIR stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.

        :return: The labels of this FhirStore.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this FhirStore.

        User-supplied key-value pairs used to organize FHIR stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.

        :param labels: The labels of this FhirStore.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this FhirStore.

        Output only. Identifier. Resource name of the FHIR store, of the form `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.

        :return: The name of this FhirStore.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FhirStore.

        Output only. Identifier. Resource name of the FHIR store, of the form `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.

        :param name: The name of this FhirStore.
        :type name: str
        """

        self._name = name

    @property
    def notification_config(self):
        """Gets the notification_config of this FhirStore.


        :return: The notification_config of this FhirStore.
        :rtype: NotificationConfig
        """
        return self._notification_config

    @notification_config.setter
    def notification_config(self, notification_config):
        """Sets the notification_config of this FhirStore.


        :param notification_config: The notification_config of this FhirStore.
        :type notification_config: NotificationConfig
        """

        self._notification_config = notification_config

    @property
    def notification_configs(self):
        """Gets the notification_configs of this FhirStore.

        Specifies where and whether to send notifications upon changes to a FHIR store.

        :return: The notification_configs of this FhirStore.
        :rtype: List[FhirNotificationConfig]
        """
        return self._notification_configs

    @notification_configs.setter
    def notification_configs(self, notification_configs):
        """Sets the notification_configs of this FhirStore.

        Specifies where and whether to send notifications upon changes to a FHIR store.

        :param notification_configs: The notification_configs of this FhirStore.
        :type notification_configs: List[FhirNotificationConfig]
        """

        self._notification_configs = notification_configs

    @property
    def stream_configs(self):
        """Gets the stream_configs of this FhirStore.

        A list of streaming configs that configure the destinations of streaming export for every resource mutation in this FHIR store. Each store is allowed to have up to 10 streaming configs. After a new config is added, the next resource mutation is streamed to the new location in addition to the existing ones. When a location is removed from the list, the server stops streaming to that location. Before adding a new config, you must add the required [`bigquery.dataEditor`](https://cloud.google.com/bigquery/docs/access-control#bigquery.dataEditor) role to your project's **Cloud Healthcare Service Agent** [service account](https://cloud.google.com/iam/docs/service-accounts). Some lag (typically on the order of dozens of seconds) is expected before the results show up in the streaming destination.

        :return: The stream_configs of this FhirStore.
        :rtype: List[StreamConfig]
        """
        return self._stream_configs

    @stream_configs.setter
    def stream_configs(self, stream_configs):
        """Sets the stream_configs of this FhirStore.

        A list of streaming configs that configure the destinations of streaming export for every resource mutation in this FHIR store. Each store is allowed to have up to 10 streaming configs. After a new config is added, the next resource mutation is streamed to the new location in addition to the existing ones. When a location is removed from the list, the server stops streaming to that location. Before adding a new config, you must add the required [`bigquery.dataEditor`](https://cloud.google.com/bigquery/docs/access-control#bigquery.dataEditor) role to your project's **Cloud Healthcare Service Agent** [service account](https://cloud.google.com/iam/docs/service-accounts). Some lag (typically on the order of dozens of seconds) is expected before the results show up in the streaming destination.

        :param stream_configs: The stream_configs of this FhirStore.
        :type stream_configs: List[StreamConfig]
        """

        self._stream_configs = stream_configs

    @property
    def validation_config(self):
        """Gets the validation_config of this FhirStore.


        :return: The validation_config of this FhirStore.
        :rtype: ValidationConfig
        """
        return self._validation_config

    @validation_config.setter
    def validation_config(self, validation_config):
        """Sets the validation_config of this FhirStore.


        :param validation_config: The validation_config of this FhirStore.
        :type validation_config: ValidationConfig
        """

        self._validation_config = validation_config

    @property
    def version(self):
        """Gets the version of this FhirStore.

        Required. Immutable. The FHIR specification version that this FHIR store supports natively. This field is immutable after store creation. Requests are rejected if they contain FHIR resources of a different version. Version is required for every FHIR store.

        :return: The version of this FhirStore.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FhirStore.

        Required. Immutable. The FHIR specification version that this FHIR store supports natively. This field is immutable after store creation. Requests are rejected if they contain FHIR resources of a different version. Version is required for every FHIR store.

        :param version: The version of this FhirStore.
        :type version: str
        """
        allowed_values = ["VERSION_UNSPECIFIED", "DSTU2", "STU3", "R4"]  # noqa: E501
        if version not in allowed_values:
            raise ValueError(
                "Invalid value for `version` ({0}), must be one of {1}"
                .format(version, allowed_values)
            )

        self._version = version
