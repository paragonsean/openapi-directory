# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConsentStore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_consent_ttl: str=None, enable_consent_create_on_update: bool=None, labels: Dict[str, str]=None, name: str=None):
        """ConsentStore - a model defined in OpenAPI

        :param default_consent_ttl: The default_consent_ttl of this ConsentStore.
        :param enable_consent_create_on_update: The enable_consent_create_on_update of this ConsentStore.
        :param labels: The labels of this ConsentStore.
        :param name: The name of this ConsentStore.
        """
        self.openapi_types = {
            'default_consent_ttl': str,
            'enable_consent_create_on_update': bool,
            'labels': Dict[str, str],
            'name': str
        }

        self.attribute_map = {
            'default_consent_ttl': 'defaultConsentTtl',
            'enable_consent_create_on_update': 'enableConsentCreateOnUpdate',
            'labels': 'labels',
            'name': 'name'
        }

        self._default_consent_ttl = default_consent_ttl
        self._enable_consent_create_on_update = enable_consent_create_on_update
        self._labels = labels
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsentStore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsentStore of this ConsentStore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_consent_ttl(self):
        """Gets the default_consent_ttl of this ConsentStore.

        Optional. Default time to live for Consents created in this store. Must be at least 24 hours. Updating this field will not affect the expiration time of existing consents.

        :return: The default_consent_ttl of this ConsentStore.
        :rtype: str
        """
        return self._default_consent_ttl

    @default_consent_ttl.setter
    def default_consent_ttl(self, default_consent_ttl):
        """Sets the default_consent_ttl of this ConsentStore.

        Optional. Default time to live for Consents created in this store. Must be at least 24 hours. Updating this field will not affect the expiration time of existing consents.

        :param default_consent_ttl: The default_consent_ttl of this ConsentStore.
        :type default_consent_ttl: str
        """

        self._default_consent_ttl = default_consent_ttl

    @property
    def enable_consent_create_on_update(self):
        """Gets the enable_consent_create_on_update of this ConsentStore.

        Optional. If `true`, UpdateConsent creates the Consent if it does not already exist. If unspecified, defaults to `false`.

        :return: The enable_consent_create_on_update of this ConsentStore.
        :rtype: bool
        """
        return self._enable_consent_create_on_update

    @enable_consent_create_on_update.setter
    def enable_consent_create_on_update(self, enable_consent_create_on_update):
        """Sets the enable_consent_create_on_update of this ConsentStore.

        Optional. If `true`, UpdateConsent creates the Consent if it does not already exist. If unspecified, defaults to `false`.

        :param enable_consent_create_on_update: The enable_consent_create_on_update of this ConsentStore.
        :type enable_consent_create_on_update: bool
        """

        self._enable_consent_create_on_update = enable_consent_create_on_update

    @property
    def labels(self):
        """Gets the labels of this ConsentStore.

        Optional. User-supplied key-value pairs used to organize consent stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62}. Label values must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63}. No more than 64 labels can be associated with a given store. For more information: https://cloud.google.com/healthcare/docs/how-tos/labeling-resources

        :return: The labels of this ConsentStore.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ConsentStore.

        Optional. User-supplied key-value pairs used to organize consent stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62}. Label values must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63}. No more than 64 labels can be associated with a given store. For more information: https://cloud.google.com/healthcare/docs/how-tos/labeling-resources

        :param labels: The labels of this ConsentStore.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this ConsentStore.

        Identifier. Resource name of the consent store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`. Cannot be changed after creation.

        :return: The name of this ConsentStore.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConsentStore.

        Identifier. Resource name of the consent store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`. Cannot be changed after creation.

        :param name: The name of this ConsentStore.
        :type name: str
        """

        self._name = name
