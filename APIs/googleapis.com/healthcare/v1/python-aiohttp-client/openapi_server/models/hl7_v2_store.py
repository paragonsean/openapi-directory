# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hl7_v2_notification_config import Hl7V2NotificationConfig
from openapi_server.models.parser_config import ParserConfig
from openapi_server import util


class Hl7V2Store(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labels: Dict[str, str]=None, name: str=None, notification_configs: List[Hl7V2NotificationConfig]=None, parser_config: ParserConfig=None, reject_duplicate_message: bool=None):
        """Hl7V2Store - a model defined in OpenAPI

        :param labels: The labels of this Hl7V2Store.
        :param name: The name of this Hl7V2Store.
        :param notification_configs: The notification_configs of this Hl7V2Store.
        :param parser_config: The parser_config of this Hl7V2Store.
        :param reject_duplicate_message: The reject_duplicate_message of this Hl7V2Store.
        """
        self.openapi_types = {
            'labels': Dict[str, str],
            'name': str,
            'notification_configs': List[Hl7V2NotificationConfig],
            'parser_config': ParserConfig,
            'reject_duplicate_message': bool
        }

        self.attribute_map = {
            'labels': 'labels',
            'name': 'name',
            'notification_configs': 'notificationConfigs',
            'parser_config': 'parserConfig',
            'reject_duplicate_message': 'rejectDuplicateMessage'
        }

        self._labels = labels
        self._name = name
        self._notification_configs = notification_configs
        self._parser_config = parser_config
        self._reject_duplicate_message = reject_duplicate_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Hl7V2Store':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Hl7V2Store of this Hl7V2Store.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labels(self):
        """Gets the labels of this Hl7V2Store.

        User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.

        :return: The labels of this Hl7V2Store.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Hl7V2Store.

        User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.

        :param labels: The labels of this Hl7V2Store.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Hl7V2Store.

        Identifier. Resource name of the HL7v2 store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.

        :return: The name of this Hl7V2Store.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Hl7V2Store.

        Identifier. Resource name of the HL7v2 store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.

        :param name: The name of this Hl7V2Store.
        :type name: str
        """

        self._name = name

    @property
    def notification_configs(self):
        """Gets the notification_configs of this Hl7V2Store.

        A list of notification configs. Each configuration uses a filter to determine whether to publish a message (both Ingest & Create) on the corresponding notification destination. Only the message name is sent as part of the notification. Supplied by the client.

        :return: The notification_configs of this Hl7V2Store.
        :rtype: List[Hl7V2NotificationConfig]
        """
        return self._notification_configs

    @notification_configs.setter
    def notification_configs(self, notification_configs):
        """Sets the notification_configs of this Hl7V2Store.

        A list of notification configs. Each configuration uses a filter to determine whether to publish a message (both Ingest & Create) on the corresponding notification destination. Only the message name is sent as part of the notification. Supplied by the client.

        :param notification_configs: The notification_configs of this Hl7V2Store.
        :type notification_configs: List[Hl7V2NotificationConfig]
        """

        self._notification_configs = notification_configs

    @property
    def parser_config(self):
        """Gets the parser_config of this Hl7V2Store.


        :return: The parser_config of this Hl7V2Store.
        :rtype: ParserConfig
        """
        return self._parser_config

    @parser_config.setter
    def parser_config(self, parser_config):
        """Sets the parser_config of this Hl7V2Store.


        :param parser_config: The parser_config of this Hl7V2Store.
        :type parser_config: ParserConfig
        """

        self._parser_config = parser_config

    @property
    def reject_duplicate_message(self):
        """Gets the reject_duplicate_message of this Hl7V2Store.

        Determines whether to reject duplicate messages. A duplicate message is a message with the same raw bytes as a message that has already been ingested/created in this HL7v2 store. The default value is false, meaning that the store accepts the duplicate messages and it also returns the same ACK message in the IngestMessageResponse as has been returned previously. Note that only one resource is created in the store. When this field is set to true, CreateMessage/IngestMessage requests with a duplicate message will be rejected by the store, and IngestMessageErrorDetail returns a NACK message upon rejection.

        :return: The reject_duplicate_message of this Hl7V2Store.
        :rtype: bool
        """
        return self._reject_duplicate_message

    @reject_duplicate_message.setter
    def reject_duplicate_message(self, reject_duplicate_message):
        """Sets the reject_duplicate_message of this Hl7V2Store.

        Determines whether to reject duplicate messages. A duplicate message is a message with the same raw bytes as a message that has already been ingested/created in this HL7v2 store. The default value is false, meaning that the store accepts the duplicate messages and it also returns the same ACK message in the IngestMessageResponse as has been returned previously. Note that only one resource is created in the store. When this field is set to true, CreateMessage/IngestMessage requests with a duplicate message will be rejected by the store, and IngestMessageErrorDetail returns a NACK message upon rejection.

        :param reject_duplicate_message: The reject_duplicate_message of this Hl7V2Store.
        :type reject_duplicate_message: bool
        """

        self._reject_duplicate_message = reject_duplicate_message
