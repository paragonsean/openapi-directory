/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudHealthcareV1FhirBigQueryDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudHealthcareV1FhirBigQueryDestination::OAIGoogleCloudHealthcareV1FhirBigQueryDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudHealthcareV1FhirBigQueryDestination::OAIGoogleCloudHealthcareV1FhirBigQueryDestination() {
    this->initializeModel();
}

OAIGoogleCloudHealthcareV1FhirBigQueryDestination::~OAIGoogleCloudHealthcareV1FhirBigQueryDestination() {}

void OAIGoogleCloudHealthcareV1FhirBigQueryDestination::initializeModel() {

    m_dataset_uri_isSet = false;
    m_dataset_uri_isValid = false;

    m_force_isSet = false;
    m_force_isValid = false;

    m_schema_config_isSet = false;
    m_schema_config_isValid = false;

    m_write_disposition_isSet = false;
    m_write_disposition_isValid = false;
}

void OAIGoogleCloudHealthcareV1FhirBigQueryDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudHealthcareV1FhirBigQueryDestination::fromJsonObject(QJsonObject json) {

    m_dataset_uri_isValid = ::OpenAPI::fromJsonValue(m_dataset_uri, json[QString("datasetUri")]);
    m_dataset_uri_isSet = !json[QString("datasetUri")].isNull() && m_dataset_uri_isValid;

    m_force_isValid = ::OpenAPI::fromJsonValue(m_force, json[QString("force")]);
    m_force_isSet = !json[QString("force")].isNull() && m_force_isValid;

    m_schema_config_isValid = ::OpenAPI::fromJsonValue(m_schema_config, json[QString("schemaConfig")]);
    m_schema_config_isSet = !json[QString("schemaConfig")].isNull() && m_schema_config_isValid;

    m_write_disposition_isValid = ::OpenAPI::fromJsonValue(m_write_disposition, json[QString("writeDisposition")]);
    m_write_disposition_isSet = !json[QString("writeDisposition")].isNull() && m_write_disposition_isValid;
}

QString OAIGoogleCloudHealthcareV1FhirBigQueryDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudHealthcareV1FhirBigQueryDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_uri_isSet) {
        obj.insert(QString("datasetUri"), ::OpenAPI::toJsonValue(m_dataset_uri));
    }
    if (m_force_isSet) {
        obj.insert(QString("force"), ::OpenAPI::toJsonValue(m_force));
    }
    if (m_schema_config.isSet()) {
        obj.insert(QString("schemaConfig"), ::OpenAPI::toJsonValue(m_schema_config));
    }
    if (m_write_disposition_isSet) {
        obj.insert(QString("writeDisposition"), ::OpenAPI::toJsonValue(m_write_disposition));
    }
    return obj;
}

QString OAIGoogleCloudHealthcareV1FhirBigQueryDestination::getDatasetUri() const {
    return m_dataset_uri;
}
void OAIGoogleCloudHealthcareV1FhirBigQueryDestination::setDatasetUri(const QString &dataset_uri) {
    m_dataset_uri = dataset_uri;
    m_dataset_uri_isSet = true;
}

bool OAIGoogleCloudHealthcareV1FhirBigQueryDestination::is_dataset_uri_Set() const{
    return m_dataset_uri_isSet;
}

bool OAIGoogleCloudHealthcareV1FhirBigQueryDestination::is_dataset_uri_Valid() const{
    return m_dataset_uri_isValid;
}

bool OAIGoogleCloudHealthcareV1FhirBigQueryDestination::isForce() const {
    return m_force;
}
void OAIGoogleCloudHealthcareV1FhirBigQueryDestination::setForce(const bool &force) {
    m_force = force;
    m_force_isSet = true;
}

bool OAIGoogleCloudHealthcareV1FhirBigQueryDestination::is_force_Set() const{
    return m_force_isSet;
}

bool OAIGoogleCloudHealthcareV1FhirBigQueryDestination::is_force_Valid() const{
    return m_force_isValid;
}

OAISchemaConfig OAIGoogleCloudHealthcareV1FhirBigQueryDestination::getSchemaConfig() const {
    return m_schema_config;
}
void OAIGoogleCloudHealthcareV1FhirBigQueryDestination::setSchemaConfig(const OAISchemaConfig &schema_config) {
    m_schema_config = schema_config;
    m_schema_config_isSet = true;
}

bool OAIGoogleCloudHealthcareV1FhirBigQueryDestination::is_schema_config_Set() const{
    return m_schema_config_isSet;
}

bool OAIGoogleCloudHealthcareV1FhirBigQueryDestination::is_schema_config_Valid() const{
    return m_schema_config_isValid;
}

QString OAIGoogleCloudHealthcareV1FhirBigQueryDestination::getWriteDisposition() const {
    return m_write_disposition;
}
void OAIGoogleCloudHealthcareV1FhirBigQueryDestination::setWriteDisposition(const QString &write_disposition) {
    m_write_disposition = write_disposition;
    m_write_disposition_isSet = true;
}

bool OAIGoogleCloudHealthcareV1FhirBigQueryDestination::is_write_disposition_Set() const{
    return m_write_disposition_isSet;
}

bool OAIGoogleCloudHealthcareV1FhirBigQueryDestination::is_write_disposition_Valid() const{
    return m_write_disposition_isValid;
}

bool OAIGoogleCloudHealthcareV1FhirBigQueryDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_disposition_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudHealthcareV1FhirBigQueryDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
