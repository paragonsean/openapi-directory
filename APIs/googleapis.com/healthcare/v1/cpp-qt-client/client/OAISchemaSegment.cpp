/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchemaSegment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchemaSegment::OAISchemaSegment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchemaSegment::OAISchemaSegment() {
    this->initializeModel();
}

OAISchemaSegment::~OAISchemaSegment() {}

void OAISchemaSegment::initializeModel() {

    m_max_occurs_isSet = false;
    m_max_occurs_isValid = false;

    m_min_occurs_isSet = false;
    m_min_occurs_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISchemaSegment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchemaSegment::fromJsonObject(QJsonObject json) {

    m_max_occurs_isValid = ::OpenAPI::fromJsonValue(m_max_occurs, json[QString("maxOccurs")]);
    m_max_occurs_isSet = !json[QString("maxOccurs")].isNull() && m_max_occurs_isValid;

    m_min_occurs_isValid = ::OpenAPI::fromJsonValue(m_min_occurs, json[QString("minOccurs")]);
    m_min_occurs_isSet = !json[QString("minOccurs")].isNull() && m_min_occurs_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISchemaSegment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchemaSegment::asJsonObject() const {
    QJsonObject obj;
    if (m_max_occurs_isSet) {
        obj.insert(QString("maxOccurs"), ::OpenAPI::toJsonValue(m_max_occurs));
    }
    if (m_min_occurs_isSet) {
        obj.insert(QString("minOccurs"), ::OpenAPI::toJsonValue(m_min_occurs));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAISchemaSegment::getMaxOccurs() const {
    return m_max_occurs;
}
void OAISchemaSegment::setMaxOccurs(const qint32 &max_occurs) {
    m_max_occurs = max_occurs;
    m_max_occurs_isSet = true;
}

bool OAISchemaSegment::is_max_occurs_Set() const{
    return m_max_occurs_isSet;
}

bool OAISchemaSegment::is_max_occurs_Valid() const{
    return m_max_occurs_isValid;
}

qint32 OAISchemaSegment::getMinOccurs() const {
    return m_min_occurs;
}
void OAISchemaSegment::setMinOccurs(const qint32 &min_occurs) {
    m_min_occurs = min_occurs;
    m_min_occurs_isSet = true;
}

bool OAISchemaSegment::is_min_occurs_Set() const{
    return m_min_occurs_isSet;
}

bool OAISchemaSegment::is_min_occurs_Valid() const{
    return m_min_occurs_isValid;
}

QString OAISchemaSegment::getType() const {
    return m_type;
}
void OAISchemaSegment::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISchemaSegment::is_type_Set() const{
    return m_type_isSet;
}

bool OAISchemaSegment::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISchemaSegment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_occurs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_occurs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchemaSegment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
