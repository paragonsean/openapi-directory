/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFhirStore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFhirStore::OAIFhirStore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFhirStore::OAIFhirStore() {
    this->initializeModel();
}

OAIFhirStore::~OAIFhirStore() {}

void OAIFhirStore::initializeModel() {

    m_complex_data_type_reference_parsing_isSet = false;
    m_complex_data_type_reference_parsing_isValid = false;

    m_default_search_handling_strict_isSet = false;
    m_default_search_handling_strict_isValid = false;

    m_disable_referential_integrity_isSet = false;
    m_disable_referential_integrity_isValid = false;

    m_disable_resource_versioning_isSet = false;
    m_disable_resource_versioning_isValid = false;

    m_enable_update_create_isSet = false;
    m_enable_update_create_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notification_config_isSet = false;
    m_notification_config_isValid = false;

    m_notification_configs_isSet = false;
    m_notification_configs_isValid = false;

    m_stream_configs_isSet = false;
    m_stream_configs_isValid = false;

    m_validation_config_isSet = false;
    m_validation_config_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIFhirStore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFhirStore::fromJsonObject(QJsonObject json) {

    m_complex_data_type_reference_parsing_isValid = ::OpenAPI::fromJsonValue(m_complex_data_type_reference_parsing, json[QString("complexDataTypeReferenceParsing")]);
    m_complex_data_type_reference_parsing_isSet = !json[QString("complexDataTypeReferenceParsing")].isNull() && m_complex_data_type_reference_parsing_isValid;

    m_default_search_handling_strict_isValid = ::OpenAPI::fromJsonValue(m_default_search_handling_strict, json[QString("defaultSearchHandlingStrict")]);
    m_default_search_handling_strict_isSet = !json[QString("defaultSearchHandlingStrict")].isNull() && m_default_search_handling_strict_isValid;

    m_disable_referential_integrity_isValid = ::OpenAPI::fromJsonValue(m_disable_referential_integrity, json[QString("disableReferentialIntegrity")]);
    m_disable_referential_integrity_isSet = !json[QString("disableReferentialIntegrity")].isNull() && m_disable_referential_integrity_isValid;

    m_disable_resource_versioning_isValid = ::OpenAPI::fromJsonValue(m_disable_resource_versioning, json[QString("disableResourceVersioning")]);
    m_disable_resource_versioning_isSet = !json[QString("disableResourceVersioning")].isNull() && m_disable_resource_versioning_isValid;

    m_enable_update_create_isValid = ::OpenAPI::fromJsonValue(m_enable_update_create, json[QString("enableUpdateCreate")]);
    m_enable_update_create_isSet = !json[QString("enableUpdateCreate")].isNull() && m_enable_update_create_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notification_config_isValid = ::OpenAPI::fromJsonValue(m_notification_config, json[QString("notificationConfig")]);
    m_notification_config_isSet = !json[QString("notificationConfig")].isNull() && m_notification_config_isValid;

    m_notification_configs_isValid = ::OpenAPI::fromJsonValue(m_notification_configs, json[QString("notificationConfigs")]);
    m_notification_configs_isSet = !json[QString("notificationConfigs")].isNull() && m_notification_configs_isValid;

    m_stream_configs_isValid = ::OpenAPI::fromJsonValue(m_stream_configs, json[QString("streamConfigs")]);
    m_stream_configs_isSet = !json[QString("streamConfigs")].isNull() && m_stream_configs_isValid;

    m_validation_config_isValid = ::OpenAPI::fromJsonValue(m_validation_config, json[QString("validationConfig")]);
    m_validation_config_isSet = !json[QString("validationConfig")].isNull() && m_validation_config_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIFhirStore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFhirStore::asJsonObject() const {
    QJsonObject obj;
    if (m_complex_data_type_reference_parsing_isSet) {
        obj.insert(QString("complexDataTypeReferenceParsing"), ::OpenAPI::toJsonValue(m_complex_data_type_reference_parsing));
    }
    if (m_default_search_handling_strict_isSet) {
        obj.insert(QString("defaultSearchHandlingStrict"), ::OpenAPI::toJsonValue(m_default_search_handling_strict));
    }
    if (m_disable_referential_integrity_isSet) {
        obj.insert(QString("disableReferentialIntegrity"), ::OpenAPI::toJsonValue(m_disable_referential_integrity));
    }
    if (m_disable_resource_versioning_isSet) {
        obj.insert(QString("disableResourceVersioning"), ::OpenAPI::toJsonValue(m_disable_resource_versioning));
    }
    if (m_enable_update_create_isSet) {
        obj.insert(QString("enableUpdateCreate"), ::OpenAPI::toJsonValue(m_enable_update_create));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notification_config.isSet()) {
        obj.insert(QString("notificationConfig"), ::OpenAPI::toJsonValue(m_notification_config));
    }
    if (m_notification_configs.size() > 0) {
        obj.insert(QString("notificationConfigs"), ::OpenAPI::toJsonValue(m_notification_configs));
    }
    if (m_stream_configs.size() > 0) {
        obj.insert(QString("streamConfigs"), ::OpenAPI::toJsonValue(m_stream_configs));
    }
    if (m_validation_config.isSet()) {
        obj.insert(QString("validationConfig"), ::OpenAPI::toJsonValue(m_validation_config));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIFhirStore::getComplexDataTypeReferenceParsing() const {
    return m_complex_data_type_reference_parsing;
}
void OAIFhirStore::setComplexDataTypeReferenceParsing(const QString &complex_data_type_reference_parsing) {
    m_complex_data_type_reference_parsing = complex_data_type_reference_parsing;
    m_complex_data_type_reference_parsing_isSet = true;
}

bool OAIFhirStore::is_complex_data_type_reference_parsing_Set() const{
    return m_complex_data_type_reference_parsing_isSet;
}

bool OAIFhirStore::is_complex_data_type_reference_parsing_Valid() const{
    return m_complex_data_type_reference_parsing_isValid;
}

bool OAIFhirStore::isDefaultSearchHandlingStrict() const {
    return m_default_search_handling_strict;
}
void OAIFhirStore::setDefaultSearchHandlingStrict(const bool &default_search_handling_strict) {
    m_default_search_handling_strict = default_search_handling_strict;
    m_default_search_handling_strict_isSet = true;
}

bool OAIFhirStore::is_default_search_handling_strict_Set() const{
    return m_default_search_handling_strict_isSet;
}

bool OAIFhirStore::is_default_search_handling_strict_Valid() const{
    return m_default_search_handling_strict_isValid;
}

bool OAIFhirStore::isDisableReferentialIntegrity() const {
    return m_disable_referential_integrity;
}
void OAIFhirStore::setDisableReferentialIntegrity(const bool &disable_referential_integrity) {
    m_disable_referential_integrity = disable_referential_integrity;
    m_disable_referential_integrity_isSet = true;
}

bool OAIFhirStore::is_disable_referential_integrity_Set() const{
    return m_disable_referential_integrity_isSet;
}

bool OAIFhirStore::is_disable_referential_integrity_Valid() const{
    return m_disable_referential_integrity_isValid;
}

bool OAIFhirStore::isDisableResourceVersioning() const {
    return m_disable_resource_versioning;
}
void OAIFhirStore::setDisableResourceVersioning(const bool &disable_resource_versioning) {
    m_disable_resource_versioning = disable_resource_versioning;
    m_disable_resource_versioning_isSet = true;
}

bool OAIFhirStore::is_disable_resource_versioning_Set() const{
    return m_disable_resource_versioning_isSet;
}

bool OAIFhirStore::is_disable_resource_versioning_Valid() const{
    return m_disable_resource_versioning_isValid;
}

bool OAIFhirStore::isEnableUpdateCreate() const {
    return m_enable_update_create;
}
void OAIFhirStore::setEnableUpdateCreate(const bool &enable_update_create) {
    m_enable_update_create = enable_update_create;
    m_enable_update_create_isSet = true;
}

bool OAIFhirStore::is_enable_update_create_Set() const{
    return m_enable_update_create_isSet;
}

bool OAIFhirStore::is_enable_update_create_Valid() const{
    return m_enable_update_create_isValid;
}

QMap<QString, QString> OAIFhirStore::getLabels() const {
    return m_labels;
}
void OAIFhirStore::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIFhirStore::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIFhirStore::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIFhirStore::getName() const {
    return m_name;
}
void OAIFhirStore::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFhirStore::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFhirStore::is_name_Valid() const{
    return m_name_isValid;
}

OAINotificationConfig OAIFhirStore::getNotificationConfig() const {
    return m_notification_config;
}
void OAIFhirStore::setNotificationConfig(const OAINotificationConfig &notification_config) {
    m_notification_config = notification_config;
    m_notification_config_isSet = true;
}

bool OAIFhirStore::is_notification_config_Set() const{
    return m_notification_config_isSet;
}

bool OAIFhirStore::is_notification_config_Valid() const{
    return m_notification_config_isValid;
}

QList<OAIFhirNotificationConfig> OAIFhirStore::getNotificationConfigs() const {
    return m_notification_configs;
}
void OAIFhirStore::setNotificationConfigs(const QList<OAIFhirNotificationConfig> &notification_configs) {
    m_notification_configs = notification_configs;
    m_notification_configs_isSet = true;
}

bool OAIFhirStore::is_notification_configs_Set() const{
    return m_notification_configs_isSet;
}

bool OAIFhirStore::is_notification_configs_Valid() const{
    return m_notification_configs_isValid;
}

QList<OAIStreamConfig> OAIFhirStore::getStreamConfigs() const {
    return m_stream_configs;
}
void OAIFhirStore::setStreamConfigs(const QList<OAIStreamConfig> &stream_configs) {
    m_stream_configs = stream_configs;
    m_stream_configs_isSet = true;
}

bool OAIFhirStore::is_stream_configs_Set() const{
    return m_stream_configs_isSet;
}

bool OAIFhirStore::is_stream_configs_Valid() const{
    return m_stream_configs_isValid;
}

OAIValidationConfig OAIFhirStore::getValidationConfig() const {
    return m_validation_config;
}
void OAIFhirStore::setValidationConfig(const OAIValidationConfig &validation_config) {
    m_validation_config = validation_config;
    m_validation_config_isSet = true;
}

bool OAIFhirStore::is_validation_config_Set() const{
    return m_validation_config_isSet;
}

bool OAIFhirStore::is_validation_config_Valid() const{
    return m_validation_config_isValid;
}

QString OAIFhirStore::getVersion() const {
    return m_version;
}
void OAIFhirStore::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIFhirStore::is_version_Set() const{
    return m_version_isSet;
}

bool OAIFhirStore::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIFhirStore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_complex_data_type_reference_parsing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_search_handling_strict_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_referential_integrity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_resource_versioning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_update_create_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFhirStore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
