/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParserConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParserConfig::OAIParserConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParserConfig::OAIParserConfig() {
    this->initializeModel();
}

OAIParserConfig::~OAIParserConfig() {}

void OAIParserConfig::initializeModel() {

    m_allow_null_header_isSet = false;
    m_allow_null_header_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_segment_terminator_isSet = false;
    m_segment_terminator_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIParserConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParserConfig::fromJsonObject(QJsonObject json) {

    m_allow_null_header_isValid = ::OpenAPI::fromJsonValue(m_allow_null_header, json[QString("allowNullHeader")]);
    m_allow_null_header_isSet = !json[QString("allowNullHeader")].isNull() && m_allow_null_header_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_segment_terminator_isValid = ::OpenAPI::fromJsonValue(m_segment_terminator, json[QString("segmentTerminator")]);
    m_segment_terminator_isSet = !json[QString("segmentTerminator")].isNull() && m_segment_terminator_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIParserConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParserConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_null_header_isSet) {
        obj.insert(QString("allowNullHeader"), ::OpenAPI::toJsonValue(m_allow_null_header));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_segment_terminator_isSet) {
        obj.insert(QString("segmentTerminator"), ::OpenAPI::toJsonValue(m_segment_terminator));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

bool OAIParserConfig::isAllowNullHeader() const {
    return m_allow_null_header;
}
void OAIParserConfig::setAllowNullHeader(const bool &allow_null_header) {
    m_allow_null_header = allow_null_header;
    m_allow_null_header_isSet = true;
}

bool OAIParserConfig::is_allow_null_header_Set() const{
    return m_allow_null_header_isSet;
}

bool OAIParserConfig::is_allow_null_header_Valid() const{
    return m_allow_null_header_isValid;
}

OAISchemaPackage OAIParserConfig::getSchema() const {
    return m_schema;
}
void OAIParserConfig::setSchema(const OAISchemaPackage &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIParserConfig::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIParserConfig::is_schema_Valid() const{
    return m_schema_isValid;
}

QByteArray OAIParserConfig::getSegmentTerminator() const {
    return m_segment_terminator;
}
void OAIParserConfig::setSegmentTerminator(const QByteArray &segment_terminator) {
    m_segment_terminator = segment_terminator;
    m_segment_terminator_isSet = true;
}

bool OAIParserConfig::is_segment_terminator_Set() const{
    return m_segment_terminator_isSet;
}

bool OAIParserConfig::is_segment_terminator_Valid() const{
    return m_segment_terminator_isValid;
}

QString OAIParserConfig::getVersion() const {
    return m_version;
}
void OAIParserConfig::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIParserConfig::is_version_Set() const{
    return m_version_isSet;
}

bool OAIParserConfig::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIParserConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_null_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_terminator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParserConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
