/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudHealthcareV1ConsentPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudHealthcareV1ConsentPolicy::OAIGoogleCloudHealthcareV1ConsentPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudHealthcareV1ConsentPolicy::OAIGoogleCloudHealthcareV1ConsentPolicy() {
    this->initializeModel();
}

OAIGoogleCloudHealthcareV1ConsentPolicy::~OAIGoogleCloudHealthcareV1ConsentPolicy() {}

void OAIGoogleCloudHealthcareV1ConsentPolicy::initializeModel() {

    m_authorization_rule_isSet = false;
    m_authorization_rule_isValid = false;

    m_resource_attributes_isSet = false;
    m_resource_attributes_isValid = false;
}

void OAIGoogleCloudHealthcareV1ConsentPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudHealthcareV1ConsentPolicy::fromJsonObject(QJsonObject json) {

    m_authorization_rule_isValid = ::OpenAPI::fromJsonValue(m_authorization_rule, json[QString("authorizationRule")]);
    m_authorization_rule_isSet = !json[QString("authorizationRule")].isNull() && m_authorization_rule_isValid;

    m_resource_attributes_isValid = ::OpenAPI::fromJsonValue(m_resource_attributes, json[QString("resourceAttributes")]);
    m_resource_attributes_isSet = !json[QString("resourceAttributes")].isNull() && m_resource_attributes_isValid;
}

QString OAIGoogleCloudHealthcareV1ConsentPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudHealthcareV1ConsentPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_rule.isSet()) {
        obj.insert(QString("authorizationRule"), ::OpenAPI::toJsonValue(m_authorization_rule));
    }
    if (m_resource_attributes.size() > 0) {
        obj.insert(QString("resourceAttributes"), ::OpenAPI::toJsonValue(m_resource_attributes));
    }
    return obj;
}

OAIExpr OAIGoogleCloudHealthcareV1ConsentPolicy::getAuthorizationRule() const {
    return m_authorization_rule;
}
void OAIGoogleCloudHealthcareV1ConsentPolicy::setAuthorizationRule(const OAIExpr &authorization_rule) {
    m_authorization_rule = authorization_rule;
    m_authorization_rule_isSet = true;
}

bool OAIGoogleCloudHealthcareV1ConsentPolicy::is_authorization_rule_Set() const{
    return m_authorization_rule_isSet;
}

bool OAIGoogleCloudHealthcareV1ConsentPolicy::is_authorization_rule_Valid() const{
    return m_authorization_rule_isValid;
}

QList<OAIAttribute> OAIGoogleCloudHealthcareV1ConsentPolicy::getResourceAttributes() const {
    return m_resource_attributes;
}
void OAIGoogleCloudHealthcareV1ConsentPolicy::setResourceAttributes(const QList<OAIAttribute> &resource_attributes) {
    m_resource_attributes = resource_attributes;
    m_resource_attributes_isSet = true;
}

bool OAIGoogleCloudHealthcareV1ConsentPolicy::is_resource_attributes_Set() const{
    return m_resource_attributes_isSet;
}

bool OAIGoogleCloudHealthcareV1ConsentPolicy::is_resource_attributes_Valid() const{
    return m_resource_attributes_isValid;
}

bool OAIGoogleCloudHealthcareV1ConsentPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudHealthcareV1ConsentPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
