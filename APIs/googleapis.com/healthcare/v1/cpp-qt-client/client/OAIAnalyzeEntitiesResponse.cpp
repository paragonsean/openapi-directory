/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyzeEntitiesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyzeEntitiesResponse::OAIAnalyzeEntitiesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyzeEntitiesResponse::OAIAnalyzeEntitiesResponse() {
    this->initializeModel();
}

OAIAnalyzeEntitiesResponse::~OAIAnalyzeEntitiesResponse() {}

void OAIAnalyzeEntitiesResponse::initializeModel() {

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_entity_mentions_isSet = false;
    m_entity_mentions_isValid = false;

    m_fhir_bundle_isSet = false;
    m_fhir_bundle_isValid = false;

    m_relationships_isSet = false;
    m_relationships_isValid = false;
}

void OAIAnalyzeEntitiesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyzeEntitiesResponse::fromJsonObject(QJsonObject json) {

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;

    m_entity_mentions_isValid = ::OpenAPI::fromJsonValue(m_entity_mentions, json[QString("entityMentions")]);
    m_entity_mentions_isSet = !json[QString("entityMentions")].isNull() && m_entity_mentions_isValid;

    m_fhir_bundle_isValid = ::OpenAPI::fromJsonValue(m_fhir_bundle, json[QString("fhirBundle")]);
    m_fhir_bundle_isSet = !json[QString("fhirBundle")].isNull() && m_fhir_bundle_isValid;

    m_relationships_isValid = ::OpenAPI::fromJsonValue(m_relationships, json[QString("relationships")]);
    m_relationships_isSet = !json[QString("relationships")].isNull() && m_relationships_isValid;
}

QString OAIAnalyzeEntitiesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyzeEntitiesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_entities.size() > 0) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_entity_mentions.size() > 0) {
        obj.insert(QString("entityMentions"), ::OpenAPI::toJsonValue(m_entity_mentions));
    }
    if (m_fhir_bundle_isSet) {
        obj.insert(QString("fhirBundle"), ::OpenAPI::toJsonValue(m_fhir_bundle));
    }
    if (m_relationships.size() > 0) {
        obj.insert(QString("relationships"), ::OpenAPI::toJsonValue(m_relationships));
    }
    return obj;
}

QList<OAIEntity> OAIAnalyzeEntitiesResponse::getEntities() const {
    return m_entities;
}
void OAIAnalyzeEntitiesResponse::setEntities(const QList<OAIEntity> &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAIAnalyzeEntitiesResponse::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAIAnalyzeEntitiesResponse::is_entities_Valid() const{
    return m_entities_isValid;
}

QList<OAIEntityMention> OAIAnalyzeEntitiesResponse::getEntityMentions() const {
    return m_entity_mentions;
}
void OAIAnalyzeEntitiesResponse::setEntityMentions(const QList<OAIEntityMention> &entity_mentions) {
    m_entity_mentions = entity_mentions;
    m_entity_mentions_isSet = true;
}

bool OAIAnalyzeEntitiesResponse::is_entity_mentions_Set() const{
    return m_entity_mentions_isSet;
}

bool OAIAnalyzeEntitiesResponse::is_entity_mentions_Valid() const{
    return m_entity_mentions_isValid;
}

QString OAIAnalyzeEntitiesResponse::getFhirBundle() const {
    return m_fhir_bundle;
}
void OAIAnalyzeEntitiesResponse::setFhirBundle(const QString &fhir_bundle) {
    m_fhir_bundle = fhir_bundle;
    m_fhir_bundle_isSet = true;
}

bool OAIAnalyzeEntitiesResponse::is_fhir_bundle_Set() const{
    return m_fhir_bundle_isSet;
}

bool OAIAnalyzeEntitiesResponse::is_fhir_bundle_Valid() const{
    return m_fhir_bundle_isValid;
}

QList<OAIEntityMentionRelationship> OAIAnalyzeEntitiesResponse::getRelationships() const {
    return m_relationships;
}
void OAIAnalyzeEntitiesResponse::setRelationships(const QList<OAIEntityMentionRelationship> &relationships) {
    m_relationships = relationships;
    m_relationships_isSet = true;
}

bool OAIAnalyzeEntitiesResponse::is_relationships_Set() const{
    return m_relationships_isSet;
}

bool OAIAnalyzeEntitiesResponse::is_relationships_Valid() const{
    return m_relationships_isValid;
}

bool OAIAnalyzeEntitiesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_mentions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fhir_bundle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationships.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyzeEntitiesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
