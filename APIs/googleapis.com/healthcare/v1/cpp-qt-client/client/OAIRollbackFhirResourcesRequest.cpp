/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRollbackFhirResourcesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRollbackFhirResourcesRequest::OAIRollbackFhirResourcesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRollbackFhirResourcesRequest::OAIRollbackFhirResourcesRequest() {
    this->initializeModel();
}

OAIRollbackFhirResourcesRequest::~OAIRollbackFhirResourcesRequest() {}

void OAIRollbackFhirResourcesRequest::initializeModel() {

    m_change_type_isSet = false;
    m_change_type_isValid = false;

    m_exclude_rollbacks_isSet = false;
    m_exclude_rollbacks_isValid = false;

    m_filtering_fields_isSet = false;
    m_filtering_fields_isValid = false;

    m_force_isSet = false;
    m_force_isValid = false;

    m_input_gcs_object_isSet = false;
    m_input_gcs_object_isValid = false;

    m_result_gcs_bucket_isSet = false;
    m_result_gcs_bucket_isValid = false;

    m_rollback_time_isSet = false;
    m_rollback_time_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRollbackFhirResourcesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRollbackFhirResourcesRequest::fromJsonObject(QJsonObject json) {

    m_change_type_isValid = ::OpenAPI::fromJsonValue(m_change_type, json[QString("changeType")]);
    m_change_type_isSet = !json[QString("changeType")].isNull() && m_change_type_isValid;

    m_exclude_rollbacks_isValid = ::OpenAPI::fromJsonValue(m_exclude_rollbacks, json[QString("excludeRollbacks")]);
    m_exclude_rollbacks_isSet = !json[QString("excludeRollbacks")].isNull() && m_exclude_rollbacks_isValid;

    m_filtering_fields_isValid = ::OpenAPI::fromJsonValue(m_filtering_fields, json[QString("filteringFields")]);
    m_filtering_fields_isSet = !json[QString("filteringFields")].isNull() && m_filtering_fields_isValid;

    m_force_isValid = ::OpenAPI::fromJsonValue(m_force, json[QString("force")]);
    m_force_isSet = !json[QString("force")].isNull() && m_force_isValid;

    m_input_gcs_object_isValid = ::OpenAPI::fromJsonValue(m_input_gcs_object, json[QString("inputGcsObject")]);
    m_input_gcs_object_isSet = !json[QString("inputGcsObject")].isNull() && m_input_gcs_object_isValid;

    m_result_gcs_bucket_isValid = ::OpenAPI::fromJsonValue(m_result_gcs_bucket, json[QString("resultGcsBucket")]);
    m_result_gcs_bucket_isSet = !json[QString("resultGcsBucket")].isNull() && m_result_gcs_bucket_isValid;

    m_rollback_time_isValid = ::OpenAPI::fromJsonValue(m_rollback_time, json[QString("rollbackTime")]);
    m_rollback_time_isSet = !json[QString("rollbackTime")].isNull() && m_rollback_time_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRollbackFhirResourcesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRollbackFhirResourcesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_change_type_isSet) {
        obj.insert(QString("changeType"), ::OpenAPI::toJsonValue(m_change_type));
    }
    if (m_exclude_rollbacks_isSet) {
        obj.insert(QString("excludeRollbacks"), ::OpenAPI::toJsonValue(m_exclude_rollbacks));
    }
    if (m_filtering_fields.isSet()) {
        obj.insert(QString("filteringFields"), ::OpenAPI::toJsonValue(m_filtering_fields));
    }
    if (m_force_isSet) {
        obj.insert(QString("force"), ::OpenAPI::toJsonValue(m_force));
    }
    if (m_input_gcs_object_isSet) {
        obj.insert(QString("inputGcsObject"), ::OpenAPI::toJsonValue(m_input_gcs_object));
    }
    if (m_result_gcs_bucket_isSet) {
        obj.insert(QString("resultGcsBucket"), ::OpenAPI::toJsonValue(m_result_gcs_bucket));
    }
    if (m_rollback_time_isSet) {
        obj.insert(QString("rollbackTime"), ::OpenAPI::toJsonValue(m_rollback_time));
    }
    if (m_type.size() > 0) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIRollbackFhirResourcesRequest::getChangeType() const {
    return m_change_type;
}
void OAIRollbackFhirResourcesRequest::setChangeType(const QString &change_type) {
    m_change_type = change_type;
    m_change_type_isSet = true;
}

bool OAIRollbackFhirResourcesRequest::is_change_type_Set() const{
    return m_change_type_isSet;
}

bool OAIRollbackFhirResourcesRequest::is_change_type_Valid() const{
    return m_change_type_isValid;
}

bool OAIRollbackFhirResourcesRequest::isExcludeRollbacks() const {
    return m_exclude_rollbacks;
}
void OAIRollbackFhirResourcesRequest::setExcludeRollbacks(const bool &exclude_rollbacks) {
    m_exclude_rollbacks = exclude_rollbacks;
    m_exclude_rollbacks_isSet = true;
}

bool OAIRollbackFhirResourcesRequest::is_exclude_rollbacks_Set() const{
    return m_exclude_rollbacks_isSet;
}

bool OAIRollbackFhirResourcesRequest::is_exclude_rollbacks_Valid() const{
    return m_exclude_rollbacks_isValid;
}

OAIRollbackFhirResourceFilteringFields OAIRollbackFhirResourcesRequest::getFilteringFields() const {
    return m_filtering_fields;
}
void OAIRollbackFhirResourcesRequest::setFilteringFields(const OAIRollbackFhirResourceFilteringFields &filtering_fields) {
    m_filtering_fields = filtering_fields;
    m_filtering_fields_isSet = true;
}

bool OAIRollbackFhirResourcesRequest::is_filtering_fields_Set() const{
    return m_filtering_fields_isSet;
}

bool OAIRollbackFhirResourcesRequest::is_filtering_fields_Valid() const{
    return m_filtering_fields_isValid;
}

bool OAIRollbackFhirResourcesRequest::isForce() const {
    return m_force;
}
void OAIRollbackFhirResourcesRequest::setForce(const bool &force) {
    m_force = force;
    m_force_isSet = true;
}

bool OAIRollbackFhirResourcesRequest::is_force_Set() const{
    return m_force_isSet;
}

bool OAIRollbackFhirResourcesRequest::is_force_Valid() const{
    return m_force_isValid;
}

QString OAIRollbackFhirResourcesRequest::getInputGcsObject() const {
    return m_input_gcs_object;
}
void OAIRollbackFhirResourcesRequest::setInputGcsObject(const QString &input_gcs_object) {
    m_input_gcs_object = input_gcs_object;
    m_input_gcs_object_isSet = true;
}

bool OAIRollbackFhirResourcesRequest::is_input_gcs_object_Set() const{
    return m_input_gcs_object_isSet;
}

bool OAIRollbackFhirResourcesRequest::is_input_gcs_object_Valid() const{
    return m_input_gcs_object_isValid;
}

QString OAIRollbackFhirResourcesRequest::getResultGcsBucket() const {
    return m_result_gcs_bucket;
}
void OAIRollbackFhirResourcesRequest::setResultGcsBucket(const QString &result_gcs_bucket) {
    m_result_gcs_bucket = result_gcs_bucket;
    m_result_gcs_bucket_isSet = true;
}

bool OAIRollbackFhirResourcesRequest::is_result_gcs_bucket_Set() const{
    return m_result_gcs_bucket_isSet;
}

bool OAIRollbackFhirResourcesRequest::is_result_gcs_bucket_Valid() const{
    return m_result_gcs_bucket_isValid;
}

QString OAIRollbackFhirResourcesRequest::getRollbackTime() const {
    return m_rollback_time;
}
void OAIRollbackFhirResourcesRequest::setRollbackTime(const QString &rollback_time) {
    m_rollback_time = rollback_time;
    m_rollback_time_isSet = true;
}

bool OAIRollbackFhirResourcesRequest::is_rollback_time_Set() const{
    return m_rollback_time_isSet;
}

bool OAIRollbackFhirResourcesRequest::is_rollback_time_Valid() const{
    return m_rollback_time_isValid;
}

QList<QString> OAIRollbackFhirResourcesRequest::getType() const {
    return m_type;
}
void OAIRollbackFhirResourcesRequest::setType(const QList<QString> &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRollbackFhirResourcesRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRollbackFhirResourcesRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRollbackFhirResourcesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_change_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_rollbacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filtering_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_gcs_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_gcs_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollback_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRollbackFhirResourcesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
