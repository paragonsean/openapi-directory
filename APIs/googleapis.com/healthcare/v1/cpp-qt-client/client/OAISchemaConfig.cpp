/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchemaConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchemaConfig::OAISchemaConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchemaConfig::OAISchemaConfig() {
    this->initializeModel();
}

OAISchemaConfig::~OAISchemaConfig() {}

void OAISchemaConfig::initializeModel() {

    m_last_updated_partition_config_isSet = false;
    m_last_updated_partition_config_isValid = false;

    m_recursive_structure_depth_isSet = false;
    m_recursive_structure_depth_isValid = false;

    m_schema_type_isSet = false;
    m_schema_type_isValid = false;
}

void OAISchemaConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchemaConfig::fromJsonObject(QJsonObject json) {

    m_last_updated_partition_config_isValid = ::OpenAPI::fromJsonValue(m_last_updated_partition_config, json[QString("lastUpdatedPartitionConfig")]);
    m_last_updated_partition_config_isSet = !json[QString("lastUpdatedPartitionConfig")].isNull() && m_last_updated_partition_config_isValid;

    m_recursive_structure_depth_isValid = ::OpenAPI::fromJsonValue(m_recursive_structure_depth, json[QString("recursiveStructureDepth")]);
    m_recursive_structure_depth_isSet = !json[QString("recursiveStructureDepth")].isNull() && m_recursive_structure_depth_isValid;

    m_schema_type_isValid = ::OpenAPI::fromJsonValue(m_schema_type, json[QString("schemaType")]);
    m_schema_type_isSet = !json[QString("schemaType")].isNull() && m_schema_type_isValid;
}

QString OAISchemaConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchemaConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_last_updated_partition_config.isSet()) {
        obj.insert(QString("lastUpdatedPartitionConfig"), ::OpenAPI::toJsonValue(m_last_updated_partition_config));
    }
    if (m_recursive_structure_depth_isSet) {
        obj.insert(QString("recursiveStructureDepth"), ::OpenAPI::toJsonValue(m_recursive_structure_depth));
    }
    if (m_schema_type_isSet) {
        obj.insert(QString("schemaType"), ::OpenAPI::toJsonValue(m_schema_type));
    }
    return obj;
}

OAITimePartitioning OAISchemaConfig::getLastUpdatedPartitionConfig() const {
    return m_last_updated_partition_config;
}
void OAISchemaConfig::setLastUpdatedPartitionConfig(const OAITimePartitioning &last_updated_partition_config) {
    m_last_updated_partition_config = last_updated_partition_config;
    m_last_updated_partition_config_isSet = true;
}

bool OAISchemaConfig::is_last_updated_partition_config_Set() const{
    return m_last_updated_partition_config_isSet;
}

bool OAISchemaConfig::is_last_updated_partition_config_Valid() const{
    return m_last_updated_partition_config_isValid;
}

QString OAISchemaConfig::getRecursiveStructureDepth() const {
    return m_recursive_structure_depth;
}
void OAISchemaConfig::setRecursiveStructureDepth(const QString &recursive_structure_depth) {
    m_recursive_structure_depth = recursive_structure_depth;
    m_recursive_structure_depth_isSet = true;
}

bool OAISchemaConfig::is_recursive_structure_depth_Set() const{
    return m_recursive_structure_depth_isSet;
}

bool OAISchemaConfig::is_recursive_structure_depth_Valid() const{
    return m_recursive_structure_depth_isValid;
}

QString OAISchemaConfig::getSchemaType() const {
    return m_schema_type;
}
void OAISchemaConfig::setSchemaType(const QString &schema_type) {
    m_schema_type = schema_type;
    m_schema_type_isSet = true;
}

bool OAISchemaConfig::is_schema_type_Set() const{
    return m_schema_type_isSet;
}

bool OAISchemaConfig::is_schema_type_Valid() const{
    return m_schema_type_isValid;
}

bool OAISchemaConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_updated_partition_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recursive_structure_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchemaConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
