/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryAccessibleDataRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryAccessibleDataRequest::OAIQueryAccessibleDataRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryAccessibleDataRequest::OAIQueryAccessibleDataRequest() {
    this->initializeModel();
}

OAIQueryAccessibleDataRequest::~OAIQueryAccessibleDataRequest() {}

void OAIQueryAccessibleDataRequest::initializeModel() {

    m_gcs_destination_isSet = false;
    m_gcs_destination_isValid = false;

    m_request_attributes_isSet = false;
    m_request_attributes_isValid = false;

    m_resource_attributes_isSet = false;
    m_resource_attributes_isValid = false;
}

void OAIQueryAccessibleDataRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryAccessibleDataRequest::fromJsonObject(QJsonObject json) {

    m_gcs_destination_isValid = ::OpenAPI::fromJsonValue(m_gcs_destination, json[QString("gcsDestination")]);
    m_gcs_destination_isSet = !json[QString("gcsDestination")].isNull() && m_gcs_destination_isValid;

    m_request_attributes_isValid = ::OpenAPI::fromJsonValue(m_request_attributes, json[QString("requestAttributes")]);
    m_request_attributes_isSet = !json[QString("requestAttributes")].isNull() && m_request_attributes_isValid;

    m_resource_attributes_isValid = ::OpenAPI::fromJsonValue(m_resource_attributes, json[QString("resourceAttributes")]);
    m_resource_attributes_isSet = !json[QString("resourceAttributes")].isNull() && m_resource_attributes_isValid;
}

QString OAIQueryAccessibleDataRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryAccessibleDataRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_gcs_destination.isSet()) {
        obj.insert(QString("gcsDestination"), ::OpenAPI::toJsonValue(m_gcs_destination));
    }
    if (m_request_attributes.size() > 0) {
        obj.insert(QString("requestAttributes"), ::OpenAPI::toJsonValue(m_request_attributes));
    }
    if (m_resource_attributes.size() > 0) {
        obj.insert(QString("resourceAttributes"), ::OpenAPI::toJsonValue(m_resource_attributes));
    }
    return obj;
}

OAIGoogleCloudHealthcareV1ConsentGcsDestination OAIQueryAccessibleDataRequest::getGcsDestination() const {
    return m_gcs_destination;
}
void OAIQueryAccessibleDataRequest::setGcsDestination(const OAIGoogleCloudHealthcareV1ConsentGcsDestination &gcs_destination) {
    m_gcs_destination = gcs_destination;
    m_gcs_destination_isSet = true;
}

bool OAIQueryAccessibleDataRequest::is_gcs_destination_Set() const{
    return m_gcs_destination_isSet;
}

bool OAIQueryAccessibleDataRequest::is_gcs_destination_Valid() const{
    return m_gcs_destination_isValid;
}

QMap<QString, QString> OAIQueryAccessibleDataRequest::getRequestAttributes() const {
    return m_request_attributes;
}
void OAIQueryAccessibleDataRequest::setRequestAttributes(const QMap<QString, QString> &request_attributes) {
    m_request_attributes = request_attributes;
    m_request_attributes_isSet = true;
}

bool OAIQueryAccessibleDataRequest::is_request_attributes_Set() const{
    return m_request_attributes_isSet;
}

bool OAIQueryAccessibleDataRequest::is_request_attributes_Valid() const{
    return m_request_attributes_isValid;
}

QMap<QString, QString> OAIQueryAccessibleDataRequest::getResourceAttributes() const {
    return m_resource_attributes;
}
void OAIQueryAccessibleDataRequest::setResourceAttributes(const QMap<QString, QString> &resource_attributes) {
    m_resource_attributes = resource_attributes;
    m_resource_attributes_isSet = true;
}

bool OAIQueryAccessibleDataRequest::is_resource_attributes_Set() const{
    return m_resource_attributes_isSet;
}

bool OAIQueryAccessibleDataRequest::is_resource_attributes_Valid() const{
    return m_resource_attributes_isValid;
}

bool OAIQueryAccessibleDataRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gcs_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryAccessibleDataRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
