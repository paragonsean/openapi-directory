/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckDataAccessRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckDataAccessRequest::OAICheckDataAccessRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckDataAccessRequest::OAICheckDataAccessRequest() {
    this->initializeModel();
}

OAICheckDataAccessRequest::~OAICheckDataAccessRequest() {}

void OAICheckDataAccessRequest::initializeModel() {

    m_consent_list_isSet = false;
    m_consent_list_isValid = false;

    m_data_id_isSet = false;
    m_data_id_isValid = false;

    m_request_attributes_isSet = false;
    m_request_attributes_isValid = false;

    m_response_view_isSet = false;
    m_response_view_isValid = false;
}

void OAICheckDataAccessRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckDataAccessRequest::fromJsonObject(QJsonObject json) {

    m_consent_list_isValid = ::OpenAPI::fromJsonValue(m_consent_list, json[QString("consentList")]);
    m_consent_list_isSet = !json[QString("consentList")].isNull() && m_consent_list_isValid;

    m_data_id_isValid = ::OpenAPI::fromJsonValue(m_data_id, json[QString("dataId")]);
    m_data_id_isSet = !json[QString("dataId")].isNull() && m_data_id_isValid;

    m_request_attributes_isValid = ::OpenAPI::fromJsonValue(m_request_attributes, json[QString("requestAttributes")]);
    m_request_attributes_isSet = !json[QString("requestAttributes")].isNull() && m_request_attributes_isValid;

    m_response_view_isValid = ::OpenAPI::fromJsonValue(m_response_view, json[QString("responseView")]);
    m_response_view_isSet = !json[QString("responseView")].isNull() && m_response_view_isValid;
}

QString OAICheckDataAccessRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckDataAccessRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_consent_list.isSet()) {
        obj.insert(QString("consentList"), ::OpenAPI::toJsonValue(m_consent_list));
    }
    if (m_data_id_isSet) {
        obj.insert(QString("dataId"), ::OpenAPI::toJsonValue(m_data_id));
    }
    if (m_request_attributes.size() > 0) {
        obj.insert(QString("requestAttributes"), ::OpenAPI::toJsonValue(m_request_attributes));
    }
    if (m_response_view_isSet) {
        obj.insert(QString("responseView"), ::OpenAPI::toJsonValue(m_response_view));
    }
    return obj;
}

OAIConsentList OAICheckDataAccessRequest::getConsentList() const {
    return m_consent_list;
}
void OAICheckDataAccessRequest::setConsentList(const OAIConsentList &consent_list) {
    m_consent_list = consent_list;
    m_consent_list_isSet = true;
}

bool OAICheckDataAccessRequest::is_consent_list_Set() const{
    return m_consent_list_isSet;
}

bool OAICheckDataAccessRequest::is_consent_list_Valid() const{
    return m_consent_list_isValid;
}

QString OAICheckDataAccessRequest::getDataId() const {
    return m_data_id;
}
void OAICheckDataAccessRequest::setDataId(const QString &data_id) {
    m_data_id = data_id;
    m_data_id_isSet = true;
}

bool OAICheckDataAccessRequest::is_data_id_Set() const{
    return m_data_id_isSet;
}

bool OAICheckDataAccessRequest::is_data_id_Valid() const{
    return m_data_id_isValid;
}

QMap<QString, QString> OAICheckDataAccessRequest::getRequestAttributes() const {
    return m_request_attributes;
}
void OAICheckDataAccessRequest::setRequestAttributes(const QMap<QString, QString> &request_attributes) {
    m_request_attributes = request_attributes;
    m_request_attributes_isSet = true;
}

bool OAICheckDataAccessRequest::is_request_attributes_Set() const{
    return m_request_attributes_isSet;
}

bool OAICheckDataAccessRequest::is_request_attributes_Valid() const{
    return m_request_attributes_isValid;
}

QString OAICheckDataAccessRequest::getResponseView() const {
    return m_response_view;
}
void OAICheckDataAccessRequest::setResponseView(const QString &response_view) {
    m_response_view = response_view;
    m_response_view_isSet = true;
}

bool OAICheckDataAccessRequest::is_response_view_Set() const{
    return m_response_view_isSet;
}

bool OAICheckDataAccessRequest::is_response_view_Valid() const{
    return m_response_view_isValid;
}

bool OAICheckDataAccessRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_view_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckDataAccessRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
