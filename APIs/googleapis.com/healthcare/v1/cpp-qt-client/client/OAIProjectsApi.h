/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivateConsentRequest.h"
#include "OAIAnalyzeEntitiesRequest.h"
#include "OAIAnalyzeEntitiesResponse.h"
#include "OAIAttributeDefinition.h"
#include "OAICheckDataAccessRequest.h"
#include "OAICheckDataAccessResponse.h"
#include "OAIConsent.h"
#include "OAIConsentArtifact.h"
#include "OAIConsentStore.h"
#include "OAICreateMessageRequest.h"
#include "OAIDataset.h"
#include "OAIDeidentifyDatasetRequest.h"
#include "OAIDeidentifyFhirStoreRequest.h"
#include "OAIDicomStore.h"
#include "OAIDicomStoreMetrics.h"
#include "OAIEvaluateUserConsentsRequest.h"
#include "OAIEvaluateUserConsentsResponse.h"
#include "OAIExportMessagesRequest.h"
#include "OAIFhirStore.h"
#include "OAIFhirStoreMetrics.h"
#include "OAIHl7V2Store.h"
#include "OAIHl7V2StoreMetrics.h"
#include "OAIHttpBody.h"
#include "OAIImportMessagesRequest.h"
#include "OAIIngestMessageRequest.h"
#include "OAIIngestMessageResponse.h"
#include "OAIListAttributeDefinitionsResponse.h"
#include "OAIListConsentArtifactsResponse.h"
#include "OAIListConsentRevisionsResponse.h"
#include "OAIListConsentStoresResponse.h"
#include "OAIListConsentsResponse.h"
#include "OAIListDatasetsResponse.h"
#include "OAIListDicomStoresResponse.h"
#include "OAIListFhirStoresResponse.h"
#include "OAIListHl7V2StoresResponse.h"
#include "OAIListLocationsResponse.h"
#include "OAIListMessagesResponse.h"
#include "OAIListOperationsResponse.h"
#include "OAIListUserDataMappingsResponse.h"
#include "OAIMessage.h"
#include "OAIObject.h"
#include "OAIOperation.h"
#include "OAIPolicy.h"
#include "OAIQueryAccessibleDataRequest.h"
#include "OAIRejectConsentRequest.h"
#include "OAIRevokeConsentRequest.h"
#include "OAIRollbackFhirResourcesRequest.h"
#include "OAISearchResourcesRequest.h"
#include "OAISeriesMetrics.h"
#include "OAISetIamPolicyRequest.h"
#include "OAIStudyMetrics.h"
#include "OAITestIamPermissionsRequest.h"
#include "OAITestIamPermissionsResponse.h"
#include "OAIUserDataMapping.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  attribute_definition_id QString [optional]
    * @param[in]  oai_attribute_definition OAIAttributeDefinition [optional]
    */
    virtual void healthcare_projects_locations_datasets_consentStores_attributeDefinitions_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute_definition_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAttributeDefinition> &oai_attribute_definition = ::OpenAPI::OptionalParam<OAIAttributeDefinition>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_consentStores_attributeDefinitions_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  consent_store QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_check_data_access_request OAICheckDataAccessRequest [optional]
    */
    virtual void healthcare_projects_locations_datasets_consentStores_checkDataAccess(const QString &consent_store, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICheckDataAccessRequest> &oai_check_data_access_request = ::OpenAPI::OptionalParam<OAICheckDataAccessRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_consent_artifact OAIConsentArtifact [optional]
    */
    virtual void healthcare_projects_locations_datasets_consentStores_consentArtifacts_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIConsentArtifact> &oai_consent_artifact = ::OpenAPI::OptionalParam<OAIConsentArtifact>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_consentStores_consentArtifacts_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_activate_consent_request OAIActivateConsentRequest [optional]
    */
    virtual void healthcare_projects_locations_datasets_consentStores_consents_activate(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIActivateConsentRequest> &oai_activate_consent_request = ::OpenAPI::OptionalParam<OAIActivateConsentRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_consent OAIConsent [optional]
    */
    virtual void healthcare_projects_locations_datasets_consentStores_consents_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIConsent> &oai_consent = ::OpenAPI::OptionalParam<OAIConsent>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_consentStores_consents_deleteRevision(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_consentStores_consents_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_consentStores_consents_listRevisions(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_reject_consent_request OAIRejectConsentRequest [optional]
    */
    virtual void healthcare_projects_locations_datasets_consentStores_consents_reject(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRejectConsentRequest> &oai_reject_consent_request = ::OpenAPI::OptionalParam<OAIRejectConsentRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_revoke_consent_request OAIRevokeConsentRequest [optional]
    */
    virtual void healthcare_projects_locations_datasets_consentStores_consents_revoke(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRevokeConsentRequest> &oai_revoke_consent_request = ::OpenAPI::OptionalParam<OAIRevokeConsentRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  consent_store_id QString [optional]
    * @param[in]  oai_consent_store OAIConsentStore [optional]
    */
    virtual void healthcare_projects_locations_datasets_consentStores_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &consent_store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIConsentStore> &oai_consent_store = ::OpenAPI::OptionalParam<OAIConsentStore>());

    /**
    * @param[in]  consent_store QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_evaluate_user_consents_request OAIEvaluateUserConsentsRequest [optional]
    */
    virtual void healthcare_projects_locations_datasets_consentStores_evaluateUserConsents(const QString &consent_store, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEvaluateUserConsentsRequest> &oai_evaluate_user_consents_request = ::OpenAPI::OptionalParam<OAIEvaluateUserConsentsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_consentStores_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  consent_store QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_query_accessible_data_request OAIQueryAccessibleDataRequest [optional]
    */
    virtual void healthcare_projects_locations_datasets_consentStores_queryAccessibleData(const QString &consent_store, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIQueryAccessibleDataRequest> &oai_query_accessible_data_request = ::OpenAPI::OptionalParam<OAIQueryAccessibleDataRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void healthcare_projects_locations_datasets_consentStores_userDataMappings_archive(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_user_data_mapping OAIUserDataMapping [optional]
    */
    virtual void healthcare_projects_locations_datasets_consentStores_userDataMappings_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUserDataMapping> &oai_user_data_mapping = ::OpenAPI::OptionalParam<OAIUserDataMapping>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_consentStores_userDataMappings_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  dataset_id QString [optional]
    * @param[in]  oai_dataset OAIDataset [optional]
    */
    virtual void healthcare_projects_locations_datasets_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dataset_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDataset> &oai_dataset = ::OpenAPI::OptionalParam<OAIDataset>());

    /**
    * @param[in]  source_dataset QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_deidentify_dataset_request OAIDeidentifyDatasetRequest [optional]
    */
    virtual void healthcare_projects_locations_datasets_deidentify(const QString &source_dataset, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeidentifyDatasetRequest> &oai_deidentify_dataset_request = ::OpenAPI::OptionalParam<OAIDeidentifyDatasetRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  dicom_store_id QString [optional]
    * @param[in]  oai_dicom_store OAIDicomStore [optional]
    */
    virtual void healthcare_projects_locations_datasets_dicomStores_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dicom_store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDicomStore> &oai_dicom_store = ::OpenAPI::OptionalParam<OAIDicomStore>());

    /**
    * @param[in]  study QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_getStudyMetrics(const QString &study, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  series QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_series_getSeriesMetrics(const QString &series, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_dicomStores_getDICOMStoreMetrics(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_dicomStores_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  dicom_web_path QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_dicomStores_studies_series_instances_delete(const QString &parent, const QString &dicom_web_path, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  dicom_web_path QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_dicomStores_studies_series_instances_frames_retrieveRendered(const QString &parent, const QString &dicom_web_path, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  dicom_web_path QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_http_body OAIHttpBody [optional]
    */
    virtual void healthcare_projects_locations_datasets_dicomStores_studies_storeInstances(const QString &parent, const QString &dicom_web_path, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpBody> &oai_http_body = ::OpenAPI::OptionalParam<OAIHttpBody>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  fhir_store_id QString [optional]
    * @param[in]  oai_fhir_store OAIFhirStore [optional]
    */
    virtual void healthcare_projects_locations_datasets_fhirStores_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fhir_store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIFhirStore> &oai_fhir_store = ::OpenAPI::OptionalParam<OAIFhirStore>());

    /**
    * @param[in]  source_store QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_deidentify_fhir_store_request OAIDeidentifyFhirStoreRequest [optional]
    */
    virtual void healthcare_projects_locations_datasets_fhirStores_deidentify(const QString &source_store, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeidentifyFhirStoreRequest> &oai_deidentify_fhir_store_request = ::OpenAPI::OptionalParam<OAIDeidentifyFhirStoreRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  _count qint32 [optional]
    * @param[in]  _page_token QString [optional]
    * @param[in]  _since QString [optional]
    * @param[in]  _type QString [optional]
    * @param[in]  end QString [optional]
    * @param[in]  start QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_fhirStores_fhir_PatientEverything(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &_page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_fhirStores_fhir_ResourcePurge(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  profile QString [optional]
    * @param[in]  oai_http_body OAIHttpBody [optional]
    */
    virtual void healthcare_projects_locations_datasets_fhirStores_fhir_ResourceValidate(const QString &parent, const QString &type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &profile = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpBody> &oai_http_body = ::OpenAPI::OptionalParam<OAIHttpBody>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_fhirStores_fhir_capabilities(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalDelete(const QString &parent, const QString &type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_http_body OAIHttpBody [optional]
    */
    virtual void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalPatch(const QString &parent, const QString &type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpBody> &oai_http_body = ::OpenAPI::OptionalParam<OAIHttpBody>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_http_body OAIHttpBody [optional]
    */
    virtual void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalUpdate(const QString &parent, const QString &type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpBody> &oai_http_body = ::OpenAPI::OptionalParam<OAIHttpBody>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_http_body OAIHttpBody [optional]
    */
    virtual void healthcare_projects_locations_datasets_fhirStores_fhir_create(const QString &parent, const QString &type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpBody> &oai_http_body = ::OpenAPI::OptionalParam<OAIHttpBody>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_http_body OAIHttpBody [optional]
    */
    virtual void healthcare_projects_locations_datasets_fhirStores_fhir_executeBundle(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpBody> &oai_http_body = ::OpenAPI::OptionalParam<OAIHttpBody>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  _at QString [optional]
    * @param[in]  _count qint32 [optional]
    * @param[in]  _page_token QString [optional]
    * @param[in]  _since QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_fhirStores_fhir_history(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &_page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_search_resources_request OAISearchResourcesRequest [optional]
    */
    virtual void healthcare_projects_locations_datasets_fhirStores_fhir_search(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISearchResourcesRequest> &oai_search_resources_request = ::OpenAPI::OptionalParam<OAISearchResourcesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  resource_type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_search_resources_request OAISearchResourcesRequest [optional]
    */
    virtual void healthcare_projects_locations_datasets_fhirStores_fhir_searchType(const QString &parent, const QString &resource_type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISearchResourcesRequest> &oai_search_resources_request = ::OpenAPI::OptionalParam<OAISearchResourcesRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_http_body OAIHttpBody [optional]
    */
    virtual void healthcare_projects_locations_datasets_fhirStores_fhir_update(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpBody> &oai_http_body = ::OpenAPI::OptionalParam<OAIHttpBody>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_fhirStores_getFHIRStoreMetrics(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_fhirStores_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_rollback_fhir_resources_request OAIRollbackFhirResourcesRequest [optional]
    */
    virtual void healthcare_projects_locations_datasets_fhirStores_rollback(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRollbackFhirResourcesRequest> &oai_rollback_fhir_resources_request = ::OpenAPI::OptionalParam<OAIRollbackFhirResourcesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  hl7_v2_store_id QString [optional]
    * @param[in]  oaihl7_v2_store OAIHl7V2Store [optional]
    */
    virtual void healthcare_projects_locations_datasets_hl7V2Stores_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hl7_v2_store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHl7V2Store> &oaihl7_v2_store = ::OpenAPI::OptionalParam<OAIHl7V2Store>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_export_messages_request OAIExportMessagesRequest [optional]
    */
    virtual void healthcare_projects_locations_datasets_hl7V2Stores_export(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIExportMessagesRequest> &oai_export_messages_request = ::OpenAPI::OptionalParam<OAIExportMessagesRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_hl7V2Stores_getHL7v2StoreMetrics(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  options_requested_policy_version qint32 [optional]
    */
    virtual void healthcare_projects_locations_datasets_hl7V2Stores_getIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &options_requested_policy_version = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_import_messages_request OAIImportMessagesRequest [optional]
    */
    virtual void healthcare_projects_locations_datasets_hl7V2Stores_import(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImportMessagesRequest> &oai_import_messages_request = ::OpenAPI::OptionalParam<OAIImportMessagesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_hl7V2Stores_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_create_message_request OAICreateMessageRequest [optional]
    */
    virtual void healthcare_projects_locations_datasets_hl7V2Stores_messages_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateMessageRequest> &oai_create_message_request = ::OpenAPI::OptionalParam<OAICreateMessageRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_hl7V2Stores_messages_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_ingest_message_request OAIIngestMessageRequest [optional]
    */
    virtual void healthcare_projects_locations_datasets_hl7V2Stores_messages_ingest(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIngestMessageRequest> &oai_ingest_message_request = ::OpenAPI::OptionalParam<OAIIngestMessageRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_hl7V2Stores_messages_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_message OAIMessage [optional]
    */
    virtual void healthcare_projects_locations_datasets_hl7V2Stores_messages_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIMessage> &oai_message = ::OpenAPI::OptionalParam<OAIMessage>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_iam_policy_request OAISetIamPolicyRequest [optional]
    */
    virtual void healthcare_projects_locations_datasets_hl7V2Stores_setIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetIamPolicyRequest> &oai_set_iam_policy_request = ::OpenAPI::OptionalParam<OAISetIamPolicyRequest>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_test_iam_permissions_request OAITestIamPermissionsRequest [optional]
    */
    virtual void healthcare_projects_locations_datasets_hl7V2Stores_testIamPermissions(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITestIamPermissionsRequest> &oai_test_iam_permissions_request = ::OpenAPI::OptionalParam<OAITestIamPermissionsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void healthcare_projects_locations_datasets_operations_cancel(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_operations_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void healthcare_projects_locations_datasets_operations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void healthcare_projects_locations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  nlp_service QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_analyze_entities_request OAIAnalyzeEntitiesRequest [optional]
    */
    virtual void healthcare_projects_locations_services_nlp_analyzeEntities(const QString &nlp_service, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAnalyzeEntitiesRequest> &oai_analyze_entities_request = ::OpenAPI::OptionalParam<OAIAnalyzeEntitiesRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void healthcare_projects_locations_datasets_consentStores_attributeDefinitions_createCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_consentStores_attributeDefinitions_listCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_consentStores_checkDataAccessCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_consentStores_consentArtifacts_createCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_consentStores_consentArtifacts_listCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_consentStores_consents_activateCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_consentStores_consents_createCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_consentStores_consents_deleteRevisionCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_consentStores_consents_listCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_consentStores_consents_listRevisionsCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_consentStores_consents_rejectCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_consentStores_consents_revokeCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_consentStores_createCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_consentStores_evaluateUserConsentsCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_consentStores_listCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_consentStores_queryAccessibleDataCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_consentStores_userDataMappings_archiveCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_consentStores_userDataMappings_createCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_consentStores_userDataMappings_listCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_createCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_deidentifyCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_dicomStores_createCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_getStudyMetricsCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_series_getSeriesMetricsCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_dicomStores_getDICOMStoreMetricsCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_dicomStores_listCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_dicomStores_studies_series_instances_deleteCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_dicomStores_studies_series_instances_frames_retrieveRenderedCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_dicomStores_studies_storeInstancesCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_fhirStores_createCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_fhirStores_deidentifyCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_fhirStores_fhir_PatientEverythingCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_fhirStores_fhir_ResourcePurgeCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_fhirStores_fhir_ResourceValidateCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_fhirStores_fhir_capabilitiesCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalDeleteCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalPatchCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalUpdateCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_fhirStores_fhir_createCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_fhirStores_fhir_executeBundleCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_fhirStores_fhir_historyCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_fhirStores_fhir_searchCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_fhirStores_fhir_searchTypeCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_fhirStores_fhir_updateCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_fhirStores_getFHIRStoreMetricsCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_fhirStores_listCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_fhirStores_rollbackCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_hl7V2Stores_createCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_hl7V2Stores_exportCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_hl7V2Stores_getHL7v2StoreMetricsCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_hl7V2Stores_getIamPolicyCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_hl7V2Stores_importCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_hl7V2Stores_listCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_createCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_deleteCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_ingestCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_listCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_patchCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_hl7V2Stores_setIamPolicyCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_hl7V2Stores_testIamPermissionsCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_listCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_operations_cancelCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_operations_getCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_datasets_operations_listCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_listCallback(OAIHttpRequestWorker *worker);
    void healthcare_projects_locations_services_nlp_analyzeEntitiesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void healthcare_projects_locations_datasets_consentStores_attributeDefinitions_createSignal(OAIAttributeDefinition summary);
    void healthcare_projects_locations_datasets_consentStores_attributeDefinitions_listSignal(OAIListAttributeDefinitionsResponse summary);
    void healthcare_projects_locations_datasets_consentStores_checkDataAccessSignal(OAICheckDataAccessResponse summary);
    void healthcare_projects_locations_datasets_consentStores_consentArtifacts_createSignal(OAIConsentArtifact summary);
    void healthcare_projects_locations_datasets_consentStores_consentArtifacts_listSignal(OAIListConsentArtifactsResponse summary);
    void healthcare_projects_locations_datasets_consentStores_consents_activateSignal(OAIConsent summary);
    void healthcare_projects_locations_datasets_consentStores_consents_createSignal(OAIConsent summary);
    void healthcare_projects_locations_datasets_consentStores_consents_deleteRevisionSignal(OAIObject summary);
    void healthcare_projects_locations_datasets_consentStores_consents_listSignal(OAIListConsentsResponse summary);
    void healthcare_projects_locations_datasets_consentStores_consents_listRevisionsSignal(OAIListConsentRevisionsResponse summary);
    void healthcare_projects_locations_datasets_consentStores_consents_rejectSignal(OAIConsent summary);
    void healthcare_projects_locations_datasets_consentStores_consents_revokeSignal(OAIConsent summary);
    void healthcare_projects_locations_datasets_consentStores_createSignal(OAIConsentStore summary);
    void healthcare_projects_locations_datasets_consentStores_evaluateUserConsentsSignal(OAIEvaluateUserConsentsResponse summary);
    void healthcare_projects_locations_datasets_consentStores_listSignal(OAIListConsentStoresResponse summary);
    void healthcare_projects_locations_datasets_consentStores_queryAccessibleDataSignal(OAIOperation summary);
    void healthcare_projects_locations_datasets_consentStores_userDataMappings_archiveSignal(OAIObject summary);
    void healthcare_projects_locations_datasets_consentStores_userDataMappings_createSignal(OAIUserDataMapping summary);
    void healthcare_projects_locations_datasets_consentStores_userDataMappings_listSignal(OAIListUserDataMappingsResponse summary);
    void healthcare_projects_locations_datasets_createSignal(OAIOperation summary);
    void healthcare_projects_locations_datasets_deidentifySignal(OAIOperation summary);
    void healthcare_projects_locations_datasets_dicomStores_createSignal(OAIDicomStore summary);
    void healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_getStudyMetricsSignal(OAIStudyMetrics summary);
    void healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_series_getSeriesMetricsSignal(OAISeriesMetrics summary);
    void healthcare_projects_locations_datasets_dicomStores_getDICOMStoreMetricsSignal(OAIDicomStoreMetrics summary);
    void healthcare_projects_locations_datasets_dicomStores_listSignal(OAIListDicomStoresResponse summary);
    void healthcare_projects_locations_datasets_dicomStores_studies_series_instances_deleteSignal(OAIObject summary);
    void healthcare_projects_locations_datasets_dicomStores_studies_series_instances_frames_retrieveRenderedSignal(OAIHttpBody summary);
    void healthcare_projects_locations_datasets_dicomStores_studies_storeInstancesSignal(OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_createSignal(OAIFhirStore summary);
    void healthcare_projects_locations_datasets_fhirStores_deidentifySignal(OAIOperation summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_PatientEverythingSignal(OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_ResourcePurgeSignal(OAIObject summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_ResourceValidateSignal(OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_capabilitiesSignal(OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalDeleteSignal(OAIObject summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalPatchSignal(OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalUpdateSignal(OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_createSignal(OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_executeBundleSignal(OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_historySignal(OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_searchSignal(OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_searchTypeSignal(OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_updateSignal(OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_getFHIRStoreMetricsSignal(OAIFhirStoreMetrics summary);
    void healthcare_projects_locations_datasets_fhirStores_listSignal(OAIListFhirStoresResponse summary);
    void healthcare_projects_locations_datasets_fhirStores_rollbackSignal(OAIOperation summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_createSignal(OAIHl7V2Store summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_exportSignal(OAIOperation summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_getHL7v2StoreMetricsSignal(OAIHl7V2StoreMetrics summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_getIamPolicySignal(OAIPolicy summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_importSignal(OAIOperation summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_listSignal(OAIListHl7V2StoresResponse summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_createSignal(OAIMessage summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_deleteSignal(OAIObject summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_ingestSignal(OAIIngestMessageResponse summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_listSignal(OAIListMessagesResponse summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_patchSignal(OAIMessage summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_setIamPolicySignal(OAIPolicy summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_testIamPermissionsSignal(OAITestIamPermissionsResponse summary);
    void healthcare_projects_locations_datasets_listSignal(OAIListDatasetsResponse summary);
    void healthcare_projects_locations_datasets_operations_cancelSignal(OAIObject summary);
    void healthcare_projects_locations_datasets_operations_getSignal(OAIOperation summary);
    void healthcare_projects_locations_datasets_operations_listSignal(OAIListOperationsResponse summary);
    void healthcare_projects_locations_listSignal(OAIListLocationsResponse summary);
    void healthcare_projects_locations_services_nlp_analyzeEntitiesSignal(OAIAnalyzeEntitiesResponse summary);


    void healthcare_projects_locations_datasets_consentStores_attributeDefinitions_createSignalFull(OAIHttpRequestWorker *worker, OAIAttributeDefinition summary);
    void healthcare_projects_locations_datasets_consentStores_attributeDefinitions_listSignalFull(OAIHttpRequestWorker *worker, OAIListAttributeDefinitionsResponse summary);
    void healthcare_projects_locations_datasets_consentStores_checkDataAccessSignalFull(OAIHttpRequestWorker *worker, OAICheckDataAccessResponse summary);
    void healthcare_projects_locations_datasets_consentStores_consentArtifacts_createSignalFull(OAIHttpRequestWorker *worker, OAIConsentArtifact summary);
    void healthcare_projects_locations_datasets_consentStores_consentArtifacts_listSignalFull(OAIHttpRequestWorker *worker, OAIListConsentArtifactsResponse summary);
    void healthcare_projects_locations_datasets_consentStores_consents_activateSignalFull(OAIHttpRequestWorker *worker, OAIConsent summary);
    void healthcare_projects_locations_datasets_consentStores_consents_createSignalFull(OAIHttpRequestWorker *worker, OAIConsent summary);
    void healthcare_projects_locations_datasets_consentStores_consents_deleteRevisionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void healthcare_projects_locations_datasets_consentStores_consents_listSignalFull(OAIHttpRequestWorker *worker, OAIListConsentsResponse summary);
    void healthcare_projects_locations_datasets_consentStores_consents_listRevisionsSignalFull(OAIHttpRequestWorker *worker, OAIListConsentRevisionsResponse summary);
    void healthcare_projects_locations_datasets_consentStores_consents_rejectSignalFull(OAIHttpRequestWorker *worker, OAIConsent summary);
    void healthcare_projects_locations_datasets_consentStores_consents_revokeSignalFull(OAIHttpRequestWorker *worker, OAIConsent summary);
    void healthcare_projects_locations_datasets_consentStores_createSignalFull(OAIHttpRequestWorker *worker, OAIConsentStore summary);
    void healthcare_projects_locations_datasets_consentStores_evaluateUserConsentsSignalFull(OAIHttpRequestWorker *worker, OAIEvaluateUserConsentsResponse summary);
    void healthcare_projects_locations_datasets_consentStores_listSignalFull(OAIHttpRequestWorker *worker, OAIListConsentStoresResponse summary);
    void healthcare_projects_locations_datasets_consentStores_queryAccessibleDataSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void healthcare_projects_locations_datasets_consentStores_userDataMappings_archiveSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void healthcare_projects_locations_datasets_consentStores_userDataMappings_createSignalFull(OAIHttpRequestWorker *worker, OAIUserDataMapping summary);
    void healthcare_projects_locations_datasets_consentStores_userDataMappings_listSignalFull(OAIHttpRequestWorker *worker, OAIListUserDataMappingsResponse summary);
    void healthcare_projects_locations_datasets_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void healthcare_projects_locations_datasets_deidentifySignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void healthcare_projects_locations_datasets_dicomStores_createSignalFull(OAIHttpRequestWorker *worker, OAIDicomStore summary);
    void healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_getStudyMetricsSignalFull(OAIHttpRequestWorker *worker, OAIStudyMetrics summary);
    void healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_series_getSeriesMetricsSignalFull(OAIHttpRequestWorker *worker, OAISeriesMetrics summary);
    void healthcare_projects_locations_datasets_dicomStores_getDICOMStoreMetricsSignalFull(OAIHttpRequestWorker *worker, OAIDicomStoreMetrics summary);
    void healthcare_projects_locations_datasets_dicomStores_listSignalFull(OAIHttpRequestWorker *worker, OAIListDicomStoresResponse summary);
    void healthcare_projects_locations_datasets_dicomStores_studies_series_instances_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void healthcare_projects_locations_datasets_dicomStores_studies_series_instances_frames_retrieveRenderedSignalFull(OAIHttpRequestWorker *worker, OAIHttpBody summary);
    void healthcare_projects_locations_datasets_dicomStores_studies_storeInstancesSignalFull(OAIHttpRequestWorker *worker, OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_createSignalFull(OAIHttpRequestWorker *worker, OAIFhirStore summary);
    void healthcare_projects_locations_datasets_fhirStores_deidentifySignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_PatientEverythingSignalFull(OAIHttpRequestWorker *worker, OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_ResourcePurgeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_ResourceValidateSignalFull(OAIHttpRequestWorker *worker, OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_capabilitiesSignalFull(OAIHttpRequestWorker *worker, OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalPatchSignalFull(OAIHttpRequestWorker *worker, OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalUpdateSignalFull(OAIHttpRequestWorker *worker, OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_createSignalFull(OAIHttpRequestWorker *worker, OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_executeBundleSignalFull(OAIHttpRequestWorker *worker, OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_historySignalFull(OAIHttpRequestWorker *worker, OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_searchSignalFull(OAIHttpRequestWorker *worker, OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_searchTypeSignalFull(OAIHttpRequestWorker *worker, OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_fhir_updateSignalFull(OAIHttpRequestWorker *worker, OAIHttpBody summary);
    void healthcare_projects_locations_datasets_fhirStores_getFHIRStoreMetricsSignalFull(OAIHttpRequestWorker *worker, OAIFhirStoreMetrics summary);
    void healthcare_projects_locations_datasets_fhirStores_listSignalFull(OAIHttpRequestWorker *worker, OAIListFhirStoresResponse summary);
    void healthcare_projects_locations_datasets_fhirStores_rollbackSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_createSignalFull(OAIHttpRequestWorker *worker, OAIHl7V2Store summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_exportSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_getHL7v2StoreMetricsSignalFull(OAIHttpRequestWorker *worker, OAIHl7V2StoreMetrics summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_getIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIPolicy summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_importSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_listSignalFull(OAIHttpRequestWorker *worker, OAIListHl7V2StoresResponse summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_createSignalFull(OAIHttpRequestWorker *worker, OAIMessage summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_ingestSignalFull(OAIHttpRequestWorker *worker, OAIIngestMessageResponse summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_listSignalFull(OAIHttpRequestWorker *worker, OAIListMessagesResponse summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_patchSignalFull(OAIHttpRequestWorker *worker, OAIMessage summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_setIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIPolicy summary);
    void healthcare_projects_locations_datasets_hl7V2Stores_testIamPermissionsSignalFull(OAIHttpRequestWorker *worker, OAITestIamPermissionsResponse summary);
    void healthcare_projects_locations_datasets_listSignalFull(OAIHttpRequestWorker *worker, OAIListDatasetsResponse summary);
    void healthcare_projects_locations_datasets_operations_cancelSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void healthcare_projects_locations_datasets_operations_getSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void healthcare_projects_locations_datasets_operations_listSignalFull(OAIHttpRequestWorker *worker, OAIListOperationsResponse summary);
    void healthcare_projects_locations_listSignalFull(OAIHttpRequestWorker *worker, OAIListLocationsResponse summary);
    void healthcare_projects_locations_services_nlp_analyzeEntitiesSignalFull(OAIHttpRequestWorker *worker, OAIAnalyzeEntitiesResponse summary);

    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_attributeDefinitions_createSignalError() instead")
    void healthcare_projects_locations_datasets_consentStores_attributeDefinitions_createSignalE(OAIAttributeDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_attributeDefinitions_createSignalError(OAIAttributeDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_attributeDefinitions_listSignalError() instead")
    void healthcare_projects_locations_datasets_consentStores_attributeDefinitions_listSignalE(OAIListAttributeDefinitionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_attributeDefinitions_listSignalError(OAIListAttributeDefinitionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_checkDataAccessSignalError() instead")
    void healthcare_projects_locations_datasets_consentStores_checkDataAccessSignalE(OAICheckDataAccessResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_checkDataAccessSignalError(OAICheckDataAccessResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_consentArtifacts_createSignalError() instead")
    void healthcare_projects_locations_datasets_consentStores_consentArtifacts_createSignalE(OAIConsentArtifact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_consentArtifacts_createSignalError(OAIConsentArtifact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_consentArtifacts_listSignalError() instead")
    void healthcare_projects_locations_datasets_consentStores_consentArtifacts_listSignalE(OAIListConsentArtifactsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_consentArtifacts_listSignalError(OAIListConsentArtifactsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_consents_activateSignalError() instead")
    void healthcare_projects_locations_datasets_consentStores_consents_activateSignalE(OAIConsent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_consents_activateSignalError(OAIConsent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_consents_createSignalError() instead")
    void healthcare_projects_locations_datasets_consentStores_consents_createSignalE(OAIConsent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_consents_createSignalError(OAIConsent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_consents_deleteRevisionSignalError() instead")
    void healthcare_projects_locations_datasets_consentStores_consents_deleteRevisionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_consents_deleteRevisionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_consents_listSignalError() instead")
    void healthcare_projects_locations_datasets_consentStores_consents_listSignalE(OAIListConsentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_consents_listSignalError(OAIListConsentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_consents_listRevisionsSignalError() instead")
    void healthcare_projects_locations_datasets_consentStores_consents_listRevisionsSignalE(OAIListConsentRevisionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_consents_listRevisionsSignalError(OAIListConsentRevisionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_consents_rejectSignalError() instead")
    void healthcare_projects_locations_datasets_consentStores_consents_rejectSignalE(OAIConsent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_consents_rejectSignalError(OAIConsent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_consents_revokeSignalError() instead")
    void healthcare_projects_locations_datasets_consentStores_consents_revokeSignalE(OAIConsent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_consents_revokeSignalError(OAIConsent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_createSignalError() instead")
    void healthcare_projects_locations_datasets_consentStores_createSignalE(OAIConsentStore summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_createSignalError(OAIConsentStore summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_evaluateUserConsentsSignalError() instead")
    void healthcare_projects_locations_datasets_consentStores_evaluateUserConsentsSignalE(OAIEvaluateUserConsentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_evaluateUserConsentsSignalError(OAIEvaluateUserConsentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_listSignalError() instead")
    void healthcare_projects_locations_datasets_consentStores_listSignalE(OAIListConsentStoresResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_listSignalError(OAIListConsentStoresResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_queryAccessibleDataSignalError() instead")
    void healthcare_projects_locations_datasets_consentStores_queryAccessibleDataSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_queryAccessibleDataSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_userDataMappings_archiveSignalError() instead")
    void healthcare_projects_locations_datasets_consentStores_userDataMappings_archiveSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_userDataMappings_archiveSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_userDataMappings_createSignalError() instead")
    void healthcare_projects_locations_datasets_consentStores_userDataMappings_createSignalE(OAIUserDataMapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_userDataMappings_createSignalError(OAIUserDataMapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_userDataMappings_listSignalError() instead")
    void healthcare_projects_locations_datasets_consentStores_userDataMappings_listSignalE(OAIListUserDataMappingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_userDataMappings_listSignalError(OAIListUserDataMappingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_createSignalError() instead")
    void healthcare_projects_locations_datasets_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_deidentifySignalError() instead")
    void healthcare_projects_locations_datasets_deidentifySignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_deidentifySignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_dicomStores_createSignalError() instead")
    void healthcare_projects_locations_datasets_dicomStores_createSignalE(OAIDicomStore summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_dicomStores_createSignalError(OAIDicomStore summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_getStudyMetricsSignalError() instead")
    void healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_getStudyMetricsSignalE(OAIStudyMetrics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_getStudyMetricsSignalError(OAIStudyMetrics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_series_getSeriesMetricsSignalError() instead")
    void healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_series_getSeriesMetricsSignalE(OAISeriesMetrics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_series_getSeriesMetricsSignalError(OAISeriesMetrics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_dicomStores_getDICOMStoreMetricsSignalError() instead")
    void healthcare_projects_locations_datasets_dicomStores_getDICOMStoreMetricsSignalE(OAIDicomStoreMetrics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_dicomStores_getDICOMStoreMetricsSignalError(OAIDicomStoreMetrics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_dicomStores_listSignalError() instead")
    void healthcare_projects_locations_datasets_dicomStores_listSignalE(OAIListDicomStoresResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_dicomStores_listSignalError(OAIListDicomStoresResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_dicomStores_studies_series_instances_deleteSignalError() instead")
    void healthcare_projects_locations_datasets_dicomStores_studies_series_instances_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_dicomStores_studies_series_instances_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_dicomStores_studies_series_instances_frames_retrieveRenderedSignalError() instead")
    void healthcare_projects_locations_datasets_dicomStores_studies_series_instances_frames_retrieveRenderedSignalE(OAIHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_dicomStores_studies_series_instances_frames_retrieveRenderedSignalError(OAIHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_dicomStores_studies_storeInstancesSignalError() instead")
    void healthcare_projects_locations_datasets_dicomStores_studies_storeInstancesSignalE(OAIHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_dicomStores_studies_storeInstancesSignalError(OAIHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_createSignalError() instead")
    void healthcare_projects_locations_datasets_fhirStores_createSignalE(OAIFhirStore summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_createSignalError(OAIFhirStore summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_deidentifySignalError() instead")
    void healthcare_projects_locations_datasets_fhirStores_deidentifySignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_deidentifySignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_PatientEverythingSignalError() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_PatientEverythingSignalE(OAIHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_PatientEverythingSignalError(OAIHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_ResourcePurgeSignalError() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_ResourcePurgeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_ResourcePurgeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_ResourceValidateSignalError() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_ResourceValidateSignalE(OAIHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_ResourceValidateSignalError(OAIHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_capabilitiesSignalError() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_capabilitiesSignalE(OAIHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_capabilitiesSignalError(OAIHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_conditionalDeleteSignalError() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_conditionalPatchSignalError() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalPatchSignalE(OAIHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalPatchSignalError(OAIHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_conditionalUpdateSignalError() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalUpdateSignalE(OAIHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalUpdateSignalError(OAIHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_createSignalError() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_createSignalE(OAIHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_createSignalError(OAIHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_executeBundleSignalError() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_executeBundleSignalE(OAIHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_executeBundleSignalError(OAIHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_historySignalError() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_historySignalE(OAIHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_historySignalError(OAIHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_searchSignalError() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_searchSignalE(OAIHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_searchSignalError(OAIHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_searchTypeSignalError() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_searchTypeSignalE(OAIHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_searchTypeSignalError(OAIHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_updateSignalError() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_updateSignalE(OAIHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_updateSignalError(OAIHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_getFHIRStoreMetricsSignalError() instead")
    void healthcare_projects_locations_datasets_fhirStores_getFHIRStoreMetricsSignalE(OAIFhirStoreMetrics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_getFHIRStoreMetricsSignalError(OAIFhirStoreMetrics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_listSignalError() instead")
    void healthcare_projects_locations_datasets_fhirStores_listSignalE(OAIListFhirStoresResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_listSignalError(OAIListFhirStoresResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_rollbackSignalError() instead")
    void healthcare_projects_locations_datasets_fhirStores_rollbackSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_rollbackSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_createSignalError() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_createSignalE(OAIHl7V2Store summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_createSignalError(OAIHl7V2Store summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_exportSignalError() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_exportSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_exportSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_getHL7v2StoreMetricsSignalError() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_getHL7v2StoreMetricsSignalE(OAIHl7V2StoreMetrics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_getHL7v2StoreMetricsSignalError(OAIHl7V2StoreMetrics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_getIamPolicySignalError() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_getIamPolicySignalE(OAIPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_getIamPolicySignalError(OAIPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_importSignalError() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_importSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_importSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_listSignalError() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_listSignalE(OAIListHl7V2StoresResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_listSignalError(OAIListHl7V2StoresResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_messages_createSignalError() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_createSignalE(OAIMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_createSignalError(OAIMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_messages_deleteSignalError() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_messages_ingestSignalError() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_ingestSignalE(OAIIngestMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_ingestSignalError(OAIIngestMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_messages_listSignalError() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_listSignalE(OAIListMessagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_listSignalError(OAIListMessagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_messages_patchSignalError() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_patchSignalE(OAIMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_patchSignalError(OAIMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_setIamPolicySignalError() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_setIamPolicySignalE(OAIPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_setIamPolicySignalError(OAIPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_testIamPermissionsSignalError() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_testIamPermissionsSignalE(OAITestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_testIamPermissionsSignalError(OAITestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_listSignalError() instead")
    void healthcare_projects_locations_datasets_listSignalE(OAIListDatasetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_listSignalError(OAIListDatasetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_operations_cancelSignalError() instead")
    void healthcare_projects_locations_datasets_operations_cancelSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_operations_cancelSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_operations_getSignalError() instead")
    void healthcare_projects_locations_datasets_operations_getSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_operations_getSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_operations_listSignalError() instead")
    void healthcare_projects_locations_datasets_operations_listSignalE(OAIListOperationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_operations_listSignalError(OAIListOperationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_listSignalError() instead")
    void healthcare_projects_locations_listSignalE(OAIListLocationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_listSignalError(OAIListLocationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_services_nlp_analyzeEntitiesSignalError() instead")
    void healthcare_projects_locations_services_nlp_analyzeEntitiesSignalE(OAIAnalyzeEntitiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_services_nlp_analyzeEntitiesSignalError(OAIAnalyzeEntitiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_attributeDefinitions_createSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_consentStores_attributeDefinitions_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_attributeDefinitions_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_attributeDefinitions_listSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_consentStores_attributeDefinitions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_attributeDefinitions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_checkDataAccessSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_consentStores_checkDataAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_checkDataAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_consentArtifacts_createSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_consentStores_consentArtifacts_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_consentArtifacts_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_consentArtifacts_listSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_consentStores_consentArtifacts_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_consentArtifacts_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_consents_activateSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_consentStores_consents_activateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_consents_activateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_consents_createSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_consentStores_consents_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_consents_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_consents_deleteRevisionSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_consentStores_consents_deleteRevisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_consents_deleteRevisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_consents_listSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_consentStores_consents_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_consents_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_consents_listRevisionsSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_consentStores_consents_listRevisionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_consents_listRevisionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_consents_rejectSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_consentStores_consents_rejectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_consents_rejectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_consents_revokeSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_consentStores_consents_revokeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_consents_revokeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_createSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_consentStores_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_evaluateUserConsentsSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_consentStores_evaluateUserConsentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_evaluateUserConsentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_listSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_consentStores_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_queryAccessibleDataSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_consentStores_queryAccessibleDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_queryAccessibleDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_userDataMappings_archiveSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_consentStores_userDataMappings_archiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_userDataMappings_archiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_userDataMappings_createSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_consentStores_userDataMappings_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_userDataMappings_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_consentStores_userDataMappings_listSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_consentStores_userDataMappings_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_consentStores_userDataMappings_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_createSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_deidentifySignalErrorFull() instead")
    void healthcare_projects_locations_datasets_deidentifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_deidentifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_dicomStores_createSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_dicomStores_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_dicomStores_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_getStudyMetricsSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_getStudyMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_getStudyMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_series_getSeriesMetricsSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_series_getSeriesMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_series_getSeriesMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_dicomStores_getDICOMStoreMetricsSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_dicomStores_getDICOMStoreMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_dicomStores_getDICOMStoreMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_dicomStores_listSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_dicomStores_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_dicomStores_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_dicomStores_studies_series_instances_deleteSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_dicomStores_studies_series_instances_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_dicomStores_studies_series_instances_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_dicomStores_studies_series_instances_frames_retrieveRenderedSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_dicomStores_studies_series_instances_frames_retrieveRenderedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_dicomStores_studies_series_instances_frames_retrieveRenderedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_dicomStores_studies_storeInstancesSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_dicomStores_studies_storeInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_dicomStores_studies_storeInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_createSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_fhirStores_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_deidentifySignalErrorFull() instead")
    void healthcare_projects_locations_datasets_fhirStores_deidentifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_deidentifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_PatientEverythingSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_PatientEverythingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_PatientEverythingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_ResourcePurgeSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_ResourcePurgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_ResourcePurgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_ResourceValidateSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_ResourceValidateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_ResourceValidateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_capabilitiesSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_capabilitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_capabilitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_conditionalDeleteSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_conditionalPatchSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_conditionalUpdateSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_conditionalUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_createSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_executeBundleSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_executeBundleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_executeBundleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_historySignalErrorFull() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_historySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_historySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_searchSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_searchTypeSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_searchTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_searchTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_fhir_updateSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_fhirStores_fhir_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_fhir_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_getFHIRStoreMetricsSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_fhirStores_getFHIRStoreMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_getFHIRStoreMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_listSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_fhirStores_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_fhirStores_rollbackSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_fhirStores_rollbackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_fhirStores_rollbackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_createSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_exportSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_exportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_exportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_getHL7v2StoreMetricsSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_getHL7v2StoreMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_getHL7v2StoreMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_getIamPolicySignalErrorFull() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_getIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_getIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_importSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_listSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_messages_createSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_messages_deleteSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_messages_ingestSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_ingestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_ingestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_messages_listSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_messages_patchSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_messages_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_setIamPolicySignalErrorFull() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_setIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_setIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_hl7V2Stores_testIamPermissionsSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_hl7V2Stores_testIamPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_hl7V2Stores_testIamPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_listSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_operations_cancelSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_operations_cancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_operations_cancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_operations_getSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_operations_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_operations_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_datasets_operations_listSignalErrorFull() instead")
    void healthcare_projects_locations_datasets_operations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_datasets_operations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_listSignalErrorFull() instead")
    void healthcare_projects_locations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthcare_projects_locations_services_nlp_analyzeEntitiesSignalErrorFull() instead")
    void healthcare_projects_locations_services_nlp_analyzeEntitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthcare_projects_locations_services_nlp_analyzeEntitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
