/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityMention.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityMention::OAIEntityMention(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityMention::OAIEntityMention() {
    this->initializeModel();
}

OAIEntityMention::~OAIEntityMention() {}

void OAIEntityMention::initializeModel() {

    m_certainty_assessment_isSet = false;
    m_certainty_assessment_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_linked_entities_isSet = false;
    m_linked_entities_isValid = false;

    m_mention_id_isSet = false;
    m_mention_id_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_temporal_assessment_isSet = false;
    m_temporal_assessment_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEntityMention::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntityMention::fromJsonObject(QJsonObject json) {

    m_certainty_assessment_isValid = ::OpenAPI::fromJsonValue(m_certainty_assessment, json[QString("certaintyAssessment")]);
    m_certainty_assessment_isSet = !json[QString("certaintyAssessment")].isNull() && m_certainty_assessment_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_linked_entities_isValid = ::OpenAPI::fromJsonValue(m_linked_entities, json[QString("linkedEntities")]);
    m_linked_entities_isSet = !json[QString("linkedEntities")].isNull() && m_linked_entities_isValid;

    m_mention_id_isValid = ::OpenAPI::fromJsonValue(m_mention_id, json[QString("mentionId")]);
    m_mention_id_isSet = !json[QString("mentionId")].isNull() && m_mention_id_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_temporal_assessment_isValid = ::OpenAPI::fromJsonValue(m_temporal_assessment, json[QString("temporalAssessment")]);
    m_temporal_assessment_isSet = !json[QString("temporalAssessment")].isNull() && m_temporal_assessment_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEntityMention::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntityMention::asJsonObject() const {
    QJsonObject obj;
    if (m_certainty_assessment.isSet()) {
        obj.insert(QString("certaintyAssessment"), ::OpenAPI::toJsonValue(m_certainty_assessment));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_linked_entities.size() > 0) {
        obj.insert(QString("linkedEntities"), ::OpenAPI::toJsonValue(m_linked_entities));
    }
    if (m_mention_id_isSet) {
        obj.insert(QString("mentionId"), ::OpenAPI::toJsonValue(m_mention_id));
    }
    if (m_subject.isSet()) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_temporal_assessment.isSet()) {
        obj.insert(QString("temporalAssessment"), ::OpenAPI::toJsonValue(m_temporal_assessment));
    }
    if (m_text.isSet()) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIFeature OAIEntityMention::getCertaintyAssessment() const {
    return m_certainty_assessment;
}
void OAIEntityMention::setCertaintyAssessment(const OAIFeature &certainty_assessment) {
    m_certainty_assessment = certainty_assessment;
    m_certainty_assessment_isSet = true;
}

bool OAIEntityMention::is_certainty_assessment_Set() const{
    return m_certainty_assessment_isSet;
}

bool OAIEntityMention::is_certainty_assessment_Valid() const{
    return m_certainty_assessment_isValid;
}

double OAIEntityMention::getConfidence() const {
    return m_confidence;
}
void OAIEntityMention::setConfidence(const double &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIEntityMention::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIEntityMention::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QList<OAILinkedEntity> OAIEntityMention::getLinkedEntities() const {
    return m_linked_entities;
}
void OAIEntityMention::setLinkedEntities(const QList<OAILinkedEntity> &linked_entities) {
    m_linked_entities = linked_entities;
    m_linked_entities_isSet = true;
}

bool OAIEntityMention::is_linked_entities_Set() const{
    return m_linked_entities_isSet;
}

bool OAIEntityMention::is_linked_entities_Valid() const{
    return m_linked_entities_isValid;
}

QString OAIEntityMention::getMentionId() const {
    return m_mention_id;
}
void OAIEntityMention::setMentionId(const QString &mention_id) {
    m_mention_id = mention_id;
    m_mention_id_isSet = true;
}

bool OAIEntityMention::is_mention_id_Set() const{
    return m_mention_id_isSet;
}

bool OAIEntityMention::is_mention_id_Valid() const{
    return m_mention_id_isValid;
}

OAIFeature OAIEntityMention::getSubject() const {
    return m_subject;
}
void OAIEntityMention::setSubject(const OAIFeature &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIEntityMention::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIEntityMention::is_subject_Valid() const{
    return m_subject_isValid;
}

OAIFeature OAIEntityMention::getTemporalAssessment() const {
    return m_temporal_assessment;
}
void OAIEntityMention::setTemporalAssessment(const OAIFeature &temporal_assessment) {
    m_temporal_assessment = temporal_assessment;
    m_temporal_assessment_isSet = true;
}

bool OAIEntityMention::is_temporal_assessment_Set() const{
    return m_temporal_assessment_isSet;
}

bool OAIEntityMention::is_temporal_assessment_Valid() const{
    return m_temporal_assessment_isValid;
}

OAITextSpan OAIEntityMention::getText() const {
    return m_text;
}
void OAIEntityMention::setText(const OAITextSpan &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIEntityMention::is_text_Set() const{
    return m_text_isSet;
}

bool OAIEntityMention::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIEntityMention::getType() const {
    return m_type;
}
void OAIEntityMention::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEntityMention::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEntityMention::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEntityMention::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certainty_assessment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mention_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_temporal_assessment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntityMention::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
