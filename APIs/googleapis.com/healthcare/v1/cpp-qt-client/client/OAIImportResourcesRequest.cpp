/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportResourcesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportResourcesRequest::OAIImportResourcesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportResourcesRequest::OAIImportResourcesRequest() {
    this->initializeModel();
}

OAIImportResourcesRequest::~OAIImportResourcesRequest() {}

void OAIImportResourcesRequest::initializeModel() {

    m_content_structure_isSet = false;
    m_content_structure_isValid = false;

    m_gcs_source_isSet = false;
    m_gcs_source_isValid = false;
}

void OAIImportResourcesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportResourcesRequest::fromJsonObject(QJsonObject json) {

    m_content_structure_isValid = ::OpenAPI::fromJsonValue(m_content_structure, json[QString("contentStructure")]);
    m_content_structure_isSet = !json[QString("contentStructure")].isNull() && m_content_structure_isValid;

    m_gcs_source_isValid = ::OpenAPI::fromJsonValue(m_gcs_source, json[QString("gcsSource")]);
    m_gcs_source_isSet = !json[QString("gcsSource")].isNull() && m_gcs_source_isValid;
}

QString OAIImportResourcesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportResourcesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_content_structure_isSet) {
        obj.insert(QString("contentStructure"), ::OpenAPI::toJsonValue(m_content_structure));
    }
    if (m_gcs_source.isSet()) {
        obj.insert(QString("gcsSource"), ::OpenAPI::toJsonValue(m_gcs_source));
    }
    return obj;
}

QString OAIImportResourcesRequest::getContentStructure() const {
    return m_content_structure;
}
void OAIImportResourcesRequest::setContentStructure(const QString &content_structure) {
    m_content_structure = content_structure;
    m_content_structure_isSet = true;
}

bool OAIImportResourcesRequest::is_content_structure_Set() const{
    return m_content_structure_isSet;
}

bool OAIImportResourcesRequest::is_content_structure_Valid() const{
    return m_content_structure_isValid;
}

OAIGoogleCloudHealthcareV1FhirGcsSource OAIImportResourcesRequest::getGcsSource() const {
    return m_gcs_source;
}
void OAIImportResourcesRequest::setGcsSource(const OAIGoogleCloudHealthcareV1FhirGcsSource &gcs_source) {
    m_gcs_source = gcs_source;
    m_gcs_source_isSet = true;
}

bool OAIImportResourcesRequest::is_gcs_source_Set() const{
    return m_gcs_source_isSet;
}

bool OAIImportResourcesRequest::is_gcs_source_Valid() const{
    return m_gcs_source_isValid;
}

bool OAIImportResourcesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_structure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportResourcesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
