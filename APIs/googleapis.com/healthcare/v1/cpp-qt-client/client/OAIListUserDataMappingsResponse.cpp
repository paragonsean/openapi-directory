/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListUserDataMappingsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListUserDataMappingsResponse::OAIListUserDataMappingsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListUserDataMappingsResponse::OAIListUserDataMappingsResponse() {
    this->initializeModel();
}

OAIListUserDataMappingsResponse::~OAIListUserDataMappingsResponse() {}

void OAIListUserDataMappingsResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_user_data_mappings_isSet = false;
    m_user_data_mappings_isValid = false;
}

void OAIListUserDataMappingsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListUserDataMappingsResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_user_data_mappings_isValid = ::OpenAPI::fromJsonValue(m_user_data_mappings, json[QString("userDataMappings")]);
    m_user_data_mappings_isSet = !json[QString("userDataMappings")].isNull() && m_user_data_mappings_isValid;
}

QString OAIListUserDataMappingsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListUserDataMappingsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_user_data_mappings.size() > 0) {
        obj.insert(QString("userDataMappings"), ::OpenAPI::toJsonValue(m_user_data_mappings));
    }
    return obj;
}

QString OAIListUserDataMappingsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListUserDataMappingsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListUserDataMappingsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListUserDataMappingsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIUserDataMapping> OAIListUserDataMappingsResponse::getUserDataMappings() const {
    return m_user_data_mappings;
}
void OAIListUserDataMappingsResponse::setUserDataMappings(const QList<OAIUserDataMapping> &user_data_mappings) {
    m_user_data_mappings = user_data_mappings;
    m_user_data_mappings_isSet = true;
}

bool OAIListUserDataMappingsResponse::is_user_data_mappings_Set() const{
    return m_user_data_mappings_isSet;
}

bool OAIListUserDataMappingsResponse::is_user_data_mappings_Valid() const{
    return m_user_data_mappings_isValid;
}

bool OAIListUserDataMappingsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_data_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListUserDataMappingsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
