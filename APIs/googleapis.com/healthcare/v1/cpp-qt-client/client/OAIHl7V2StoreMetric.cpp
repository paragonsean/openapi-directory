/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHl7V2StoreMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHl7V2StoreMetric::OAIHl7V2StoreMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHl7V2StoreMetric::OAIHl7V2StoreMetric() {
    this->initializeModel();
}

OAIHl7V2StoreMetric::~OAIHl7V2StoreMetric() {}

void OAIHl7V2StoreMetric::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_message_type_isSet = false;
    m_message_type_isValid = false;

    m_structured_storage_size_bytes_isSet = false;
    m_structured_storage_size_bytes_isValid = false;
}

void OAIHl7V2StoreMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHl7V2StoreMetric::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_message_type_isValid = ::OpenAPI::fromJsonValue(m_message_type, json[QString("messageType")]);
    m_message_type_isSet = !json[QString("messageType")].isNull() && m_message_type_isValid;

    m_structured_storage_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_structured_storage_size_bytes, json[QString("structuredStorageSizeBytes")]);
    m_structured_storage_size_bytes_isSet = !json[QString("structuredStorageSizeBytes")].isNull() && m_structured_storage_size_bytes_isValid;
}

QString OAIHl7V2StoreMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHl7V2StoreMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_message_type_isSet) {
        obj.insert(QString("messageType"), ::OpenAPI::toJsonValue(m_message_type));
    }
    if (m_structured_storage_size_bytes_isSet) {
        obj.insert(QString("structuredStorageSizeBytes"), ::OpenAPI::toJsonValue(m_structured_storage_size_bytes));
    }
    return obj;
}

QString OAIHl7V2StoreMetric::getCount() const {
    return m_count;
}
void OAIHl7V2StoreMetric::setCount(const QString &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIHl7V2StoreMetric::is_count_Set() const{
    return m_count_isSet;
}

bool OAIHl7V2StoreMetric::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIHl7V2StoreMetric::getMessageType() const {
    return m_message_type;
}
void OAIHl7V2StoreMetric::setMessageType(const QString &message_type) {
    m_message_type = message_type;
    m_message_type_isSet = true;
}

bool OAIHl7V2StoreMetric::is_message_type_Set() const{
    return m_message_type_isSet;
}

bool OAIHl7V2StoreMetric::is_message_type_Valid() const{
    return m_message_type_isValid;
}

QString OAIHl7V2StoreMetric::getStructuredStorageSizeBytes() const {
    return m_structured_storage_size_bytes;
}
void OAIHl7V2StoreMetric::setStructuredStorageSizeBytes(const QString &structured_storage_size_bytes) {
    m_structured_storage_size_bytes = structured_storage_size_bytes;
    m_structured_storage_size_bytes_isSet = true;
}

bool OAIHl7V2StoreMetric::is_structured_storage_size_bytes_Set() const{
    return m_structured_storage_size_bytes_isSet;
}

bool OAIHl7V2StoreMetric::is_structured_storage_size_bytes_Valid() const{
    return m_structured_storage_size_bytes_isValid;
}

bool OAIHl7V2StoreMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_structured_storage_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHl7V2StoreMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
