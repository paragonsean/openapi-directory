/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDicomConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDicomConfig::OAIDicomConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDicomConfig::OAIDicomConfig() {
    this->initializeModel();
}

OAIDicomConfig::~OAIDicomConfig() {}

void OAIDicomConfig::initializeModel() {

    m_filter_profile_isSet = false;
    m_filter_profile_isValid = false;

    m_keep_list_isSet = false;
    m_keep_list_isValid = false;

    m_remove_list_isSet = false;
    m_remove_list_isValid = false;

    m_skip_id_redaction_isSet = false;
    m_skip_id_redaction_isValid = false;
}

void OAIDicomConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDicomConfig::fromJsonObject(QJsonObject json) {

    m_filter_profile_isValid = ::OpenAPI::fromJsonValue(m_filter_profile, json[QString("filterProfile")]);
    m_filter_profile_isSet = !json[QString("filterProfile")].isNull() && m_filter_profile_isValid;

    m_keep_list_isValid = ::OpenAPI::fromJsonValue(m_keep_list, json[QString("keepList")]);
    m_keep_list_isSet = !json[QString("keepList")].isNull() && m_keep_list_isValid;

    m_remove_list_isValid = ::OpenAPI::fromJsonValue(m_remove_list, json[QString("removeList")]);
    m_remove_list_isSet = !json[QString("removeList")].isNull() && m_remove_list_isValid;

    m_skip_id_redaction_isValid = ::OpenAPI::fromJsonValue(m_skip_id_redaction, json[QString("skipIdRedaction")]);
    m_skip_id_redaction_isSet = !json[QString("skipIdRedaction")].isNull() && m_skip_id_redaction_isValid;
}

QString OAIDicomConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDicomConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_profile_isSet) {
        obj.insert(QString("filterProfile"), ::OpenAPI::toJsonValue(m_filter_profile));
    }
    if (m_keep_list.isSet()) {
        obj.insert(QString("keepList"), ::OpenAPI::toJsonValue(m_keep_list));
    }
    if (m_remove_list.isSet()) {
        obj.insert(QString("removeList"), ::OpenAPI::toJsonValue(m_remove_list));
    }
    if (m_skip_id_redaction_isSet) {
        obj.insert(QString("skipIdRedaction"), ::OpenAPI::toJsonValue(m_skip_id_redaction));
    }
    return obj;
}

QString OAIDicomConfig::getFilterProfile() const {
    return m_filter_profile;
}
void OAIDicomConfig::setFilterProfile(const QString &filter_profile) {
    m_filter_profile = filter_profile;
    m_filter_profile_isSet = true;
}

bool OAIDicomConfig::is_filter_profile_Set() const{
    return m_filter_profile_isSet;
}

bool OAIDicomConfig::is_filter_profile_Valid() const{
    return m_filter_profile_isValid;
}

OAITagFilterList OAIDicomConfig::getKeepList() const {
    return m_keep_list;
}
void OAIDicomConfig::setKeepList(const OAITagFilterList &keep_list) {
    m_keep_list = keep_list;
    m_keep_list_isSet = true;
}

bool OAIDicomConfig::is_keep_list_Set() const{
    return m_keep_list_isSet;
}

bool OAIDicomConfig::is_keep_list_Valid() const{
    return m_keep_list_isValid;
}

OAITagFilterList OAIDicomConfig::getRemoveList() const {
    return m_remove_list;
}
void OAIDicomConfig::setRemoveList(const OAITagFilterList &remove_list) {
    m_remove_list = remove_list;
    m_remove_list_isSet = true;
}

bool OAIDicomConfig::is_remove_list_Set() const{
    return m_remove_list_isSet;
}

bool OAIDicomConfig::is_remove_list_Valid() const{
    return m_remove_list_isValid;
}

bool OAIDicomConfig::isSkipIdRedaction() const {
    return m_skip_id_redaction;
}
void OAIDicomConfig::setSkipIdRedaction(const bool &skip_id_redaction) {
    m_skip_id_redaction = skip_id_redaction;
    m_skip_id_redaction_isSet = true;
}

bool OAIDicomConfig::is_skip_id_redaction_Set() const{
    return m_skip_id_redaction_isSet;
}

bool OAIDicomConfig::is_skip_id_redaction_Valid() const{
    return m_skip_id_redaction_isValid;
}

bool OAIDicomConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_id_redaction_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDicomConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
