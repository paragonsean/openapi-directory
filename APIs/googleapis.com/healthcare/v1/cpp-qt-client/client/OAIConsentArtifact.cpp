/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsentArtifact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsentArtifact::OAIConsentArtifact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsentArtifact::OAIConsentArtifact() {
    this->initializeModel();
}

OAIConsentArtifact::~OAIConsentArtifact() {}

void OAIConsentArtifact::initializeModel() {

    m_consent_content_screenshots_isSet = false;
    m_consent_content_screenshots_isValid = false;

    m_consent_content_version_isSet = false;
    m_consent_content_version_isValid = false;

    m_guardian_signature_isSet = false;
    m_guardian_signature_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_signature_isSet = false;
    m_user_signature_isValid = false;

    m_witness_signature_isSet = false;
    m_witness_signature_isValid = false;
}

void OAIConsentArtifact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsentArtifact::fromJsonObject(QJsonObject json) {

    m_consent_content_screenshots_isValid = ::OpenAPI::fromJsonValue(m_consent_content_screenshots, json[QString("consentContentScreenshots")]);
    m_consent_content_screenshots_isSet = !json[QString("consentContentScreenshots")].isNull() && m_consent_content_screenshots_isValid;

    m_consent_content_version_isValid = ::OpenAPI::fromJsonValue(m_consent_content_version, json[QString("consentContentVersion")]);
    m_consent_content_version_isSet = !json[QString("consentContentVersion")].isNull() && m_consent_content_version_isValid;

    m_guardian_signature_isValid = ::OpenAPI::fromJsonValue(m_guardian_signature, json[QString("guardianSignature")]);
    m_guardian_signature_isSet = !json[QString("guardianSignature")].isNull() && m_guardian_signature_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_user_signature_isValid = ::OpenAPI::fromJsonValue(m_user_signature, json[QString("userSignature")]);
    m_user_signature_isSet = !json[QString("userSignature")].isNull() && m_user_signature_isValid;

    m_witness_signature_isValid = ::OpenAPI::fromJsonValue(m_witness_signature, json[QString("witnessSignature")]);
    m_witness_signature_isSet = !json[QString("witnessSignature")].isNull() && m_witness_signature_isValid;
}

QString OAIConsentArtifact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsentArtifact::asJsonObject() const {
    QJsonObject obj;
    if (m_consent_content_screenshots.size() > 0) {
        obj.insert(QString("consentContentScreenshots"), ::OpenAPI::toJsonValue(m_consent_content_screenshots));
    }
    if (m_consent_content_version_isSet) {
        obj.insert(QString("consentContentVersion"), ::OpenAPI::toJsonValue(m_consent_content_version));
    }
    if (m_guardian_signature.isSet()) {
        obj.insert(QString("guardianSignature"), ::OpenAPI::toJsonValue(m_guardian_signature));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_signature.isSet()) {
        obj.insert(QString("userSignature"), ::OpenAPI::toJsonValue(m_user_signature));
    }
    if (m_witness_signature.isSet()) {
        obj.insert(QString("witnessSignature"), ::OpenAPI::toJsonValue(m_witness_signature));
    }
    return obj;
}

QList<OAIImage> OAIConsentArtifact::getConsentContentScreenshots() const {
    return m_consent_content_screenshots;
}
void OAIConsentArtifact::setConsentContentScreenshots(const QList<OAIImage> &consent_content_screenshots) {
    m_consent_content_screenshots = consent_content_screenshots;
    m_consent_content_screenshots_isSet = true;
}

bool OAIConsentArtifact::is_consent_content_screenshots_Set() const{
    return m_consent_content_screenshots_isSet;
}

bool OAIConsentArtifact::is_consent_content_screenshots_Valid() const{
    return m_consent_content_screenshots_isValid;
}

QString OAIConsentArtifact::getConsentContentVersion() const {
    return m_consent_content_version;
}
void OAIConsentArtifact::setConsentContentVersion(const QString &consent_content_version) {
    m_consent_content_version = consent_content_version;
    m_consent_content_version_isSet = true;
}

bool OAIConsentArtifact::is_consent_content_version_Set() const{
    return m_consent_content_version_isSet;
}

bool OAIConsentArtifact::is_consent_content_version_Valid() const{
    return m_consent_content_version_isValid;
}

OAISignature OAIConsentArtifact::getGuardianSignature() const {
    return m_guardian_signature;
}
void OAIConsentArtifact::setGuardianSignature(const OAISignature &guardian_signature) {
    m_guardian_signature = guardian_signature;
    m_guardian_signature_isSet = true;
}

bool OAIConsentArtifact::is_guardian_signature_Set() const{
    return m_guardian_signature_isSet;
}

bool OAIConsentArtifact::is_guardian_signature_Valid() const{
    return m_guardian_signature_isValid;
}

QMap<QString, QString> OAIConsentArtifact::getMetadata() const {
    return m_metadata;
}
void OAIConsentArtifact::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIConsentArtifact::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIConsentArtifact::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIConsentArtifact::getName() const {
    return m_name;
}
void OAIConsentArtifact::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConsentArtifact::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConsentArtifact::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIConsentArtifact::getUserId() const {
    return m_user_id;
}
void OAIConsentArtifact::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIConsentArtifact::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIConsentArtifact::is_user_id_Valid() const{
    return m_user_id_isValid;
}

OAISignature OAIConsentArtifact::getUserSignature() const {
    return m_user_signature;
}
void OAIConsentArtifact::setUserSignature(const OAISignature &user_signature) {
    m_user_signature = user_signature;
    m_user_signature_isSet = true;
}

bool OAIConsentArtifact::is_user_signature_Set() const{
    return m_user_signature_isSet;
}

bool OAIConsentArtifact::is_user_signature_Valid() const{
    return m_user_signature_isValid;
}

OAISignature OAIConsentArtifact::getWitnessSignature() const {
    return m_witness_signature;
}
void OAIConsentArtifact::setWitnessSignature(const OAISignature &witness_signature) {
    m_witness_signature = witness_signature;
    m_witness_signature_isSet = true;
}

bool OAIConsentArtifact::is_witness_signature_Set() const{
    return m_witness_signature_isSet;
}

bool OAIConsentArtifact::is_witness_signature_Valid() const{
    return m_witness_signature_isValid;
}

bool OAIConsentArtifact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent_content_screenshots.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent_content_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guardian_signature.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_signature.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_witness_signature.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsentArtifact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
