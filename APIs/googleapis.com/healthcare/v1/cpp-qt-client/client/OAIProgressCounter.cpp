/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProgressCounter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProgressCounter::OAIProgressCounter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProgressCounter::OAIProgressCounter() {
    this->initializeModel();
}

OAIProgressCounter::~OAIProgressCounter() {}

void OAIProgressCounter::initializeModel() {

    m_failure_isSet = false;
    m_failure_isValid = false;

    m_pending_isSet = false;
    m_pending_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAIProgressCounter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProgressCounter::fromJsonObject(QJsonObject json) {

    m_failure_isValid = ::OpenAPI::fromJsonValue(m_failure, json[QString("failure")]);
    m_failure_isSet = !json[QString("failure")].isNull() && m_failure_isValid;

    m_pending_isValid = ::OpenAPI::fromJsonValue(m_pending, json[QString("pending")]);
    m_pending_isSet = !json[QString("pending")].isNull() && m_pending_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;
}

QString OAIProgressCounter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProgressCounter::asJsonObject() const {
    QJsonObject obj;
    if (m_failure_isSet) {
        obj.insert(QString("failure"), ::OpenAPI::toJsonValue(m_failure));
    }
    if (m_pending_isSet) {
        obj.insert(QString("pending"), ::OpenAPI::toJsonValue(m_pending));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

QString OAIProgressCounter::getFailure() const {
    return m_failure;
}
void OAIProgressCounter::setFailure(const QString &failure) {
    m_failure = failure;
    m_failure_isSet = true;
}

bool OAIProgressCounter::is_failure_Set() const{
    return m_failure_isSet;
}

bool OAIProgressCounter::is_failure_Valid() const{
    return m_failure_isValid;
}

QString OAIProgressCounter::getPending() const {
    return m_pending;
}
void OAIProgressCounter::setPending(const QString &pending) {
    m_pending = pending;
    m_pending_isSet = true;
}

bool OAIProgressCounter::is_pending_Set() const{
    return m_pending_isSet;
}

bool OAIProgressCounter::is_pending_Valid() const{
    return m_pending_isValid;
}

QString OAIProgressCounter::getSuccess() const {
    return m_success;
}
void OAIProgressCounter::setSuccess(const QString &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIProgressCounter::is_success_Set() const{
    return m_success_isSet;
}

bool OAIProgressCounter::is_success_Valid() const{
    return m_success_isValid;
}

bool OAIProgressCounter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProgressCounter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
