/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudHealthcareV1DicomBigQueryDestination;
import org.openapitools.client.model.GoogleCloudHealthcareV1DicomGcsDestination;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Exports data from the specified DICOM store. If a given resource, such as a DICOM object with the same SOPInstance UID, already exists in the output, it is overwritten with the version in the source dataset. Exported DICOM data persists when the DICOM store from which it was exported is deleted.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:13.605175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportDicomDataRequest {
  public static final String SERIALIZED_NAME_BIGQUERY_DESTINATION = "bigqueryDestination";
  @SerializedName(SERIALIZED_NAME_BIGQUERY_DESTINATION)
  private GoogleCloudHealthcareV1DicomBigQueryDestination bigqueryDestination;

  public static final String SERIALIZED_NAME_GCS_DESTINATION = "gcsDestination";
  @SerializedName(SERIALIZED_NAME_GCS_DESTINATION)
  private GoogleCloudHealthcareV1DicomGcsDestination gcsDestination;

  public ExportDicomDataRequest() {
  }

  public ExportDicomDataRequest bigqueryDestination(GoogleCloudHealthcareV1DicomBigQueryDestination bigqueryDestination) {
    this.bigqueryDestination = bigqueryDestination;
    return this;
  }

  /**
   * Get bigqueryDestination
   * @return bigqueryDestination
   */
  @javax.annotation.Nullable
  public GoogleCloudHealthcareV1DicomBigQueryDestination getBigqueryDestination() {
    return bigqueryDestination;
  }

  public void setBigqueryDestination(GoogleCloudHealthcareV1DicomBigQueryDestination bigqueryDestination) {
    this.bigqueryDestination = bigqueryDestination;
  }


  public ExportDicomDataRequest gcsDestination(GoogleCloudHealthcareV1DicomGcsDestination gcsDestination) {
    this.gcsDestination = gcsDestination;
    return this;
  }

  /**
   * Get gcsDestination
   * @return gcsDestination
   */
  @javax.annotation.Nullable
  public GoogleCloudHealthcareV1DicomGcsDestination getGcsDestination() {
    return gcsDestination;
  }

  public void setGcsDestination(GoogleCloudHealthcareV1DicomGcsDestination gcsDestination) {
    this.gcsDestination = gcsDestination;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportDicomDataRequest exportDicomDataRequest = (ExportDicomDataRequest) o;
    return Objects.equals(this.bigqueryDestination, exportDicomDataRequest.bigqueryDestination) &&
        Objects.equals(this.gcsDestination, exportDicomDataRequest.gcsDestination);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bigqueryDestination, gcsDestination);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportDicomDataRequest {\n");
    sb.append("    bigqueryDestination: ").append(toIndentedString(bigqueryDestination)).append("\n");
    sb.append("    gcsDestination: ").append(toIndentedString(gcsDestination)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bigqueryDestination");
    openapiFields.add("gcsDestination");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportDicomDataRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportDicomDataRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportDicomDataRequest is not found in the empty JSON string", ExportDicomDataRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportDicomDataRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportDicomDataRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bigqueryDestination`
      if (jsonObj.get("bigqueryDestination") != null && !jsonObj.get("bigqueryDestination").isJsonNull()) {
        GoogleCloudHealthcareV1DicomBigQueryDestination.validateJsonElement(jsonObj.get("bigqueryDestination"));
      }
      // validate the optional field `gcsDestination`
      if (jsonObj.get("gcsDestination") != null && !jsonObj.get("gcsDestination").isJsonNull()) {
        GoogleCloudHealthcareV1DicomGcsDestination.validateJsonElement(jsonObj.get("gcsDestination"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportDicomDataRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportDicomDataRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportDicomDataRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportDicomDataRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportDicomDataRequest>() {
           @Override
           public void write(JsonWriter out, ExportDicomDataRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportDicomDataRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportDicomDataRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportDicomDataRequest
   * @throws IOException if the JSON string is invalid with respect to ExportDicomDataRequest
   */
  public static ExportDicomDataRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportDicomDataRequest.class);
  }

  /**
   * Convert an instance of ExportDicomDataRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

