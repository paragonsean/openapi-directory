/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Type;
import org.openapitools.client.model.VersionSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Root config for HL7v2 datatype definitions for a specific HL7v2 version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:13.605175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Hl7TypesConfig {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private List<Type> type = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private List<VersionSource> version = new ArrayList<>();

  public Hl7TypesConfig() {
  }

  public Hl7TypesConfig type(List<Type> type) {
    this.type = type;
    return this;
  }

  public Hl7TypesConfig addTypeItem(Type typeItem) {
    if (this.type == null) {
      this.type = new ArrayList<>();
    }
    this.type.add(typeItem);
    return this;
  }

  /**
   * The HL7v2 type definitions.
   * @return type
   */
  @javax.annotation.Nullable
  public List<Type> getType() {
    return type;
  }

  public void setType(List<Type> type) {
    this.type = type;
  }


  public Hl7TypesConfig version(List<VersionSource> version) {
    this.version = version;
    return this;
  }

  public Hl7TypesConfig addVersionItem(VersionSource versionItem) {
    if (this.version == null) {
      this.version = new ArrayList<>();
    }
    this.version.add(versionItem);
    return this;
  }

  /**
   * The version selectors that this config applies to. A message must match ALL version sources to apply.
   * @return version
   */
  @javax.annotation.Nullable
  public List<VersionSource> getVersion() {
    return version;
  }

  public void setVersion(List<VersionSource> version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Hl7TypesConfig hl7TypesConfig = (Hl7TypesConfig) o;
    return Objects.equals(this.type, hl7TypesConfig.type) &&
        Objects.equals(this.version, hl7TypesConfig.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Hl7TypesConfig {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Hl7TypesConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Hl7TypesConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Hl7TypesConfig is not found in the empty JSON string", Hl7TypesConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Hl7TypesConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Hl7TypesConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        JsonArray jsonArraytype = jsonObj.getAsJsonArray("type");
        if (jsonArraytype != null) {
          // ensure the json data is an array
          if (!jsonObj.get("type").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `type` to be an array in the JSON string but got `%s`", jsonObj.get("type").toString()));
          }

          // validate the optional field `type` (array)
          for (int i = 0; i < jsonArraytype.size(); i++) {
            Type.validateJsonElement(jsonArraytype.get(i));
          };
        }
      }
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        JsonArray jsonArrayversion = jsonObj.getAsJsonArray("version");
        if (jsonArrayversion != null) {
          // ensure the json data is an array
          if (!jsonObj.get("version").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `version` to be an array in the JSON string but got `%s`", jsonObj.get("version").toString()));
          }

          // validate the optional field `version` (array)
          for (int i = 0; i < jsonArrayversion.size(); i++) {
            VersionSource.validateJsonElement(jsonArrayversion.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Hl7TypesConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Hl7TypesConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Hl7TypesConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Hl7TypesConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<Hl7TypesConfig>() {
           @Override
           public void write(JsonWriter out, Hl7TypesConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Hl7TypesConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Hl7TypesConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Hl7TypesConfig
   * @throws IOException if the JSON string is invalid with respect to Hl7TypesConfig
   */
  public static Hl7TypesConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Hl7TypesConfig.class);
  }

  /**
   * Convert an instance of Hl7TypesConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

