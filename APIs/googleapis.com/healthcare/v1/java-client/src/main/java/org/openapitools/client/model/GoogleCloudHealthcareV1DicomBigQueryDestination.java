/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The BigQuery table where the server writes the output.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:13.605175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudHealthcareV1DicomBigQueryDestination {
  public static final String SERIALIZED_NAME_FORCE = "force";
  @SerializedName(SERIALIZED_NAME_FORCE)
  private Boolean force;

  public static final String SERIALIZED_NAME_TABLE_URI = "tableUri";
  @SerializedName(SERIALIZED_NAME_TABLE_URI)
  private String tableUri;

  /**
   * Determines whether the existing table in the destination is to be overwritten or appended to. If a write_disposition is specified, the &#x60;force&#x60; parameter is ignored.
   */
  @JsonAdapter(WriteDispositionEnum.Adapter.class)
  public enum WriteDispositionEnum {
    DISPOSITION_UNSPECIFIED("WRITE_DISPOSITION_UNSPECIFIED"),
    
    EMPTY("WRITE_EMPTY"),
    
    TRUNCATE("WRITE_TRUNCATE"),
    
    APPEND("WRITE_APPEND");

    private String value;

    WriteDispositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WriteDispositionEnum fromValue(String value) {
      for (WriteDispositionEnum b : WriteDispositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WriteDispositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WriteDispositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WriteDispositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WriteDispositionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WriteDispositionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WRITE_DISPOSITION = "writeDisposition";
  @SerializedName(SERIALIZED_NAME_WRITE_DISPOSITION)
  private WriteDispositionEnum writeDisposition;

  public GoogleCloudHealthcareV1DicomBigQueryDestination() {
  }

  public GoogleCloudHealthcareV1DicomBigQueryDestination force(Boolean force) {
    this.force = force;
    return this;
  }

  /**
   * Use &#x60;write_disposition&#x60; instead. If &#x60;write_disposition&#x60; is specified, this parameter is ignored. force&#x3D;false is equivalent to write_disposition&#x3D;WRITE_EMPTY and force&#x3D;true is equivalent to write_disposition&#x3D;WRITE_TRUNCATE.
   * @return force
   */
  @javax.annotation.Nullable
  public Boolean getForce() {
    return force;
  }

  public void setForce(Boolean force) {
    this.force = force;
  }


  public GoogleCloudHealthcareV1DicomBigQueryDestination tableUri(String tableUri) {
    this.tableUri = tableUri;
    return this;
  }

  /**
   * BigQuery URI to a table, up to 2000 characters long, in the format &#x60;bq://projectId.bqDatasetId.tableId&#x60;
   * @return tableUri
   */
  @javax.annotation.Nullable
  public String getTableUri() {
    return tableUri;
  }

  public void setTableUri(String tableUri) {
    this.tableUri = tableUri;
  }


  public GoogleCloudHealthcareV1DicomBigQueryDestination writeDisposition(WriteDispositionEnum writeDisposition) {
    this.writeDisposition = writeDisposition;
    return this;
  }

  /**
   * Determines whether the existing table in the destination is to be overwritten or appended to. If a write_disposition is specified, the &#x60;force&#x60; parameter is ignored.
   * @return writeDisposition
   */
  @javax.annotation.Nullable
  public WriteDispositionEnum getWriteDisposition() {
    return writeDisposition;
  }

  public void setWriteDisposition(WriteDispositionEnum writeDisposition) {
    this.writeDisposition = writeDisposition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudHealthcareV1DicomBigQueryDestination googleCloudHealthcareV1DicomBigQueryDestination = (GoogleCloudHealthcareV1DicomBigQueryDestination) o;
    return Objects.equals(this.force, googleCloudHealthcareV1DicomBigQueryDestination.force) &&
        Objects.equals(this.tableUri, googleCloudHealthcareV1DicomBigQueryDestination.tableUri) &&
        Objects.equals(this.writeDisposition, googleCloudHealthcareV1DicomBigQueryDestination.writeDisposition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(force, tableUri, writeDisposition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudHealthcareV1DicomBigQueryDestination {\n");
    sb.append("    force: ").append(toIndentedString(force)).append("\n");
    sb.append("    tableUri: ").append(toIndentedString(tableUri)).append("\n");
    sb.append("    writeDisposition: ").append(toIndentedString(writeDisposition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("force");
    openapiFields.add("tableUri");
    openapiFields.add("writeDisposition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudHealthcareV1DicomBigQueryDestination
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudHealthcareV1DicomBigQueryDestination.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudHealthcareV1DicomBigQueryDestination is not found in the empty JSON string", GoogleCloudHealthcareV1DicomBigQueryDestination.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudHealthcareV1DicomBigQueryDestination.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudHealthcareV1DicomBigQueryDestination` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("tableUri") != null && !jsonObj.get("tableUri").isJsonNull()) && !jsonObj.get("tableUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableUri").toString()));
      }
      if ((jsonObj.get("writeDisposition") != null && !jsonObj.get("writeDisposition").isJsonNull()) && !jsonObj.get("writeDisposition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `writeDisposition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("writeDisposition").toString()));
      }
      // validate the optional field `writeDisposition`
      if (jsonObj.get("writeDisposition") != null && !jsonObj.get("writeDisposition").isJsonNull()) {
        WriteDispositionEnum.validateJsonElement(jsonObj.get("writeDisposition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudHealthcareV1DicomBigQueryDestination.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudHealthcareV1DicomBigQueryDestination' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudHealthcareV1DicomBigQueryDestination> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudHealthcareV1DicomBigQueryDestination.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudHealthcareV1DicomBigQueryDestination>() {
           @Override
           public void write(JsonWriter out, GoogleCloudHealthcareV1DicomBigQueryDestination value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudHealthcareV1DicomBigQueryDestination read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudHealthcareV1DicomBigQueryDestination given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudHealthcareV1DicomBigQueryDestination
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudHealthcareV1DicomBigQueryDestination
   */
  public static GoogleCloudHealthcareV1DicomBigQueryDestination fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudHealthcareV1DicomBigQueryDestination.class);
  }

  /**
   * Convert an instance of GoogleCloudHealthcareV1DicomBigQueryDestination to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

