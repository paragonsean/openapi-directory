/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Feature;
import org.openapitools.client.model.LinkedEntity;
import org.openapitools.client.model.TextSpan;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An entity mention in the document.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:13.605175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EntityMention {
  public static final String SERIALIZED_NAME_CERTAINTY_ASSESSMENT = "certaintyAssessment";
  @SerializedName(SERIALIZED_NAME_CERTAINTY_ASSESSMENT)
  private Feature certaintyAssessment;

  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private Double confidence;

  public static final String SERIALIZED_NAME_LINKED_ENTITIES = "linkedEntities";
  @SerializedName(SERIALIZED_NAME_LINKED_ENTITIES)
  private List<LinkedEntity> linkedEntities = new ArrayList<>();

  public static final String SERIALIZED_NAME_MENTION_ID = "mentionId";
  @SerializedName(SERIALIZED_NAME_MENTION_ID)
  private String mentionId;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private Feature subject;

  public static final String SERIALIZED_NAME_TEMPORAL_ASSESSMENT = "temporalAssessment";
  @SerializedName(SERIALIZED_NAME_TEMPORAL_ASSESSMENT)
  private Feature temporalAssessment;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private TextSpan text;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public EntityMention() {
  }

  public EntityMention certaintyAssessment(Feature certaintyAssessment) {
    this.certaintyAssessment = certaintyAssessment;
    return this;
  }

  /**
   * Get certaintyAssessment
   * @return certaintyAssessment
   */
  @javax.annotation.Nullable
  public Feature getCertaintyAssessment() {
    return certaintyAssessment;
  }

  public void setCertaintyAssessment(Feature certaintyAssessment) {
    this.certaintyAssessment = certaintyAssessment;
  }


  public EntityMention confidence(Double confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * The model&#39;s confidence in this entity mention annotation. A number between 0 and 1.
   * @return confidence
   */
  @javax.annotation.Nullable
  public Double getConfidence() {
    return confidence;
  }

  public void setConfidence(Double confidence) {
    this.confidence = confidence;
  }


  public EntityMention linkedEntities(List<LinkedEntity> linkedEntities) {
    this.linkedEntities = linkedEntities;
    return this;
  }

  public EntityMention addLinkedEntitiesItem(LinkedEntity linkedEntitiesItem) {
    if (this.linkedEntities == null) {
      this.linkedEntities = new ArrayList<>();
    }
    this.linkedEntities.add(linkedEntitiesItem);
    return this;
  }

  /**
   * linked_entities are candidate ontological concepts that this entity mention may refer to. They are sorted by decreasing confidence.
   * @return linkedEntities
   */
  @javax.annotation.Nullable
  public List<LinkedEntity> getLinkedEntities() {
    return linkedEntities;
  }

  public void setLinkedEntities(List<LinkedEntity> linkedEntities) {
    this.linkedEntities = linkedEntities;
  }


  public EntityMention mentionId(String mentionId) {
    this.mentionId = mentionId;
    return this;
  }

  /**
   * mention_id uniquely identifies each entity mention in a single response.
   * @return mentionId
   */
  @javax.annotation.Nullable
  public String getMentionId() {
    return mentionId;
  }

  public void setMentionId(String mentionId) {
    this.mentionId = mentionId;
  }


  public EntityMention subject(Feature subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public Feature getSubject() {
    return subject;
  }

  public void setSubject(Feature subject) {
    this.subject = subject;
  }


  public EntityMention temporalAssessment(Feature temporalAssessment) {
    this.temporalAssessment = temporalAssessment;
    return this;
  }

  /**
   * Get temporalAssessment
   * @return temporalAssessment
   */
  @javax.annotation.Nullable
  public Feature getTemporalAssessment() {
    return temporalAssessment;
  }

  public void setTemporalAssessment(Feature temporalAssessment) {
    this.temporalAssessment = temporalAssessment;
  }


  public EntityMention text(TextSpan text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public TextSpan getText() {
    return text;
  }

  public void setText(TextSpan text) {
    this.text = text;
  }


  public EntityMention type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The semantic type of the entity: UNKNOWN_ENTITY_TYPE, ALONE, ANATOMICAL_STRUCTURE, ASSISTED_LIVING, BF_RESULT, BM_RESULT, BM_UNIT, BM_VALUE, BODY_FUNCTION, BODY_MEASUREMENT, COMPLIANT, DOESNOT_FOLLOWUP, FAMILY, FOLLOWSUP, LABORATORY_DATA, LAB_RESULT, LAB_UNIT, LAB_VALUE, MEDICAL_DEVICE, MEDICINE, MED_DOSE, MED_DURATION, MED_FORM, MED_FREQUENCY, MED_ROUTE, MED_STATUS, MED_STRENGTH, MED_TOTALDOSE, MED_UNIT, NON_COMPLIANT, OTHER_LIVINGSTATUS, PROBLEM, PROCEDURE, PROCEDURE_RESULT, PROC_METHOD, REASON_FOR_NONCOMPLIANCE, SEVERITY, SUBSTANCE_ABUSE, UNCLEAR_FOLLOWUP.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityMention entityMention = (EntityMention) o;
    return Objects.equals(this.certaintyAssessment, entityMention.certaintyAssessment) &&
        Objects.equals(this.confidence, entityMention.confidence) &&
        Objects.equals(this.linkedEntities, entityMention.linkedEntities) &&
        Objects.equals(this.mentionId, entityMention.mentionId) &&
        Objects.equals(this.subject, entityMention.subject) &&
        Objects.equals(this.temporalAssessment, entityMention.temporalAssessment) &&
        Objects.equals(this.text, entityMention.text) &&
        Objects.equals(this.type, entityMention.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certaintyAssessment, confidence, linkedEntities, mentionId, subject, temporalAssessment, text, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityMention {\n");
    sb.append("    certaintyAssessment: ").append(toIndentedString(certaintyAssessment)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    linkedEntities: ").append(toIndentedString(linkedEntities)).append("\n");
    sb.append("    mentionId: ").append(toIndentedString(mentionId)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    temporalAssessment: ").append(toIndentedString(temporalAssessment)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certaintyAssessment");
    openapiFields.add("confidence");
    openapiFields.add("linkedEntities");
    openapiFields.add("mentionId");
    openapiFields.add("subject");
    openapiFields.add("temporalAssessment");
    openapiFields.add("text");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntityMention
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntityMention.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntityMention is not found in the empty JSON string", EntityMention.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntityMention.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntityMention` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `certaintyAssessment`
      if (jsonObj.get("certaintyAssessment") != null && !jsonObj.get("certaintyAssessment").isJsonNull()) {
        Feature.validateJsonElement(jsonObj.get("certaintyAssessment"));
      }
      if (jsonObj.get("linkedEntities") != null && !jsonObj.get("linkedEntities").isJsonNull()) {
        JsonArray jsonArraylinkedEntities = jsonObj.getAsJsonArray("linkedEntities");
        if (jsonArraylinkedEntities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("linkedEntities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `linkedEntities` to be an array in the JSON string but got `%s`", jsonObj.get("linkedEntities").toString()));
          }

          // validate the optional field `linkedEntities` (array)
          for (int i = 0; i < jsonArraylinkedEntities.size(); i++) {
            LinkedEntity.validateJsonElement(jsonArraylinkedEntities.get(i));
          };
        }
      }
      if ((jsonObj.get("mentionId") != null && !jsonObj.get("mentionId").isJsonNull()) && !jsonObj.get("mentionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mentionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mentionId").toString()));
      }
      // validate the optional field `subject`
      if (jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) {
        Feature.validateJsonElement(jsonObj.get("subject"));
      }
      // validate the optional field `temporalAssessment`
      if (jsonObj.get("temporalAssessment") != null && !jsonObj.get("temporalAssessment").isJsonNull()) {
        Feature.validateJsonElement(jsonObj.get("temporalAssessment"));
      }
      // validate the optional field `text`
      if (jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) {
        TextSpan.validateJsonElement(jsonObj.get("text"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntityMention.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntityMention' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntityMention> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntityMention.class));

       return (TypeAdapter<T>) new TypeAdapter<EntityMention>() {
           @Override
           public void write(JsonWriter out, EntityMention value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntityMention read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntityMention given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntityMention
   * @throws IOException if the JSON string is invalid with respect to EntityMention
   */
  public static EntityMention fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntityMention.class);
  }

  /**
   * Convert an instance of EntityMention to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

