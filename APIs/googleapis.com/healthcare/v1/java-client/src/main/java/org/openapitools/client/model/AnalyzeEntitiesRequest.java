/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request to analyze healthcare entities in a document.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:13.605175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalyzeEntitiesRequest {
  /**
   * Optional. Alternative output format to be generated based on the results of analysis.
   */
  @JsonAdapter(AlternativeOutputFormatEnum.Adapter.class)
  public enum AlternativeOutputFormatEnum {
    ALTERNATIVE_OUTPUT_FORMAT_UNSPECIFIED("ALTERNATIVE_OUTPUT_FORMAT_UNSPECIFIED"),
    
    FHIR_BUNDLE("FHIR_BUNDLE");

    private String value;

    AlternativeOutputFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlternativeOutputFormatEnum fromValue(String value) {
      for (AlternativeOutputFormatEnum b : AlternativeOutputFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlternativeOutputFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlternativeOutputFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlternativeOutputFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlternativeOutputFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AlternativeOutputFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALTERNATIVE_OUTPUT_FORMAT = "alternativeOutputFormat";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_OUTPUT_FORMAT)
  private AlternativeOutputFormatEnum alternativeOutputFormat;

  public static final String SERIALIZED_NAME_DOCUMENT_CONTENT = "documentContent";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_CONTENT)
  private String documentContent;

  /**
   * Gets or Sets licensedVocabularies
   */
  @JsonAdapter(LicensedVocabulariesEnum.Adapter.class)
  public enum LicensedVocabulariesEnum {
    LICENSED_VOCABULARY_UNSPECIFIED("LICENSED_VOCABULARY_UNSPECIFIED"),
    
    ICD10_CM("ICD10CM"),
    
    SNOMEDCT_US("SNOMEDCT_US");

    private String value;

    LicensedVocabulariesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LicensedVocabulariesEnum fromValue(String value) {
      for (LicensedVocabulariesEnum b : LicensedVocabulariesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LicensedVocabulariesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LicensedVocabulariesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LicensedVocabulariesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LicensedVocabulariesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LicensedVocabulariesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LICENSED_VOCABULARIES = "licensedVocabularies";
  @SerializedName(SERIALIZED_NAME_LICENSED_VOCABULARIES)
  private List<LicensedVocabulariesEnum> licensedVocabularies = new ArrayList<>();

  public AnalyzeEntitiesRequest() {
  }

  public AnalyzeEntitiesRequest alternativeOutputFormat(AlternativeOutputFormatEnum alternativeOutputFormat) {
    this.alternativeOutputFormat = alternativeOutputFormat;
    return this;
  }

  /**
   * Optional. Alternative output format to be generated based on the results of analysis.
   * @return alternativeOutputFormat
   */
  @javax.annotation.Nullable
  public AlternativeOutputFormatEnum getAlternativeOutputFormat() {
    return alternativeOutputFormat;
  }

  public void setAlternativeOutputFormat(AlternativeOutputFormatEnum alternativeOutputFormat) {
    this.alternativeOutputFormat = alternativeOutputFormat;
  }


  public AnalyzeEntitiesRequest documentContent(String documentContent) {
    this.documentContent = documentContent;
    return this;
  }

  /**
   * document_content is a document to be annotated.
   * @return documentContent
   */
  @javax.annotation.Nullable
  public String getDocumentContent() {
    return documentContent;
  }

  public void setDocumentContent(String documentContent) {
    this.documentContent = documentContent;
  }


  public AnalyzeEntitiesRequest licensedVocabularies(List<LicensedVocabulariesEnum> licensedVocabularies) {
    this.licensedVocabularies = licensedVocabularies;
    return this;
  }

  public AnalyzeEntitiesRequest addLicensedVocabulariesItem(LicensedVocabulariesEnum licensedVocabulariesItem) {
    if (this.licensedVocabularies == null) {
      this.licensedVocabularies = new ArrayList<>();
    }
    this.licensedVocabularies.add(licensedVocabulariesItem);
    return this;
  }

  /**
   * A list of licensed vocabularies to use in the request, in addition to the default unlicensed vocabularies.
   * @return licensedVocabularies
   */
  @javax.annotation.Nullable
  public List<LicensedVocabulariesEnum> getLicensedVocabularies() {
    return licensedVocabularies;
  }

  public void setLicensedVocabularies(List<LicensedVocabulariesEnum> licensedVocabularies) {
    this.licensedVocabularies = licensedVocabularies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyzeEntitiesRequest analyzeEntitiesRequest = (AnalyzeEntitiesRequest) o;
    return Objects.equals(this.alternativeOutputFormat, analyzeEntitiesRequest.alternativeOutputFormat) &&
        Objects.equals(this.documentContent, analyzeEntitiesRequest.documentContent) &&
        Objects.equals(this.licensedVocabularies, analyzeEntitiesRequest.licensedVocabularies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternativeOutputFormat, documentContent, licensedVocabularies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyzeEntitiesRequest {\n");
    sb.append("    alternativeOutputFormat: ").append(toIndentedString(alternativeOutputFormat)).append("\n");
    sb.append("    documentContent: ").append(toIndentedString(documentContent)).append("\n");
    sb.append("    licensedVocabularies: ").append(toIndentedString(licensedVocabularies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternativeOutputFormat");
    openapiFields.add("documentContent");
    openapiFields.add("licensedVocabularies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalyzeEntitiesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalyzeEntitiesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalyzeEntitiesRequest is not found in the empty JSON string", AnalyzeEntitiesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalyzeEntitiesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalyzeEntitiesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alternativeOutputFormat") != null && !jsonObj.get("alternativeOutputFormat").isJsonNull()) && !jsonObj.get("alternativeOutputFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternativeOutputFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alternativeOutputFormat").toString()));
      }
      // validate the optional field `alternativeOutputFormat`
      if (jsonObj.get("alternativeOutputFormat") != null && !jsonObj.get("alternativeOutputFormat").isJsonNull()) {
        AlternativeOutputFormatEnum.validateJsonElement(jsonObj.get("alternativeOutputFormat"));
      }
      if ((jsonObj.get("documentContent") != null && !jsonObj.get("documentContent").isJsonNull()) && !jsonObj.get("documentContent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentContent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentContent").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("licensedVocabularies") != null && !jsonObj.get("licensedVocabularies").isJsonNull() && !jsonObj.get("licensedVocabularies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `licensedVocabularies` to be an array in the JSON string but got `%s`", jsonObj.get("licensedVocabularies").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalyzeEntitiesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalyzeEntitiesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalyzeEntitiesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalyzeEntitiesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalyzeEntitiesRequest>() {
           @Override
           public void write(JsonWriter out, AnalyzeEntitiesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalyzeEntitiesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalyzeEntitiesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalyzeEntitiesRequest
   * @throws IOException if the JSON string is invalid with respect to AnalyzeEntitiesRequest
   */
  public static AnalyzeEntitiesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalyzeEntitiesRequest.class);
  }

  /**
   * Convert an instance of AnalyzeEntitiesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

