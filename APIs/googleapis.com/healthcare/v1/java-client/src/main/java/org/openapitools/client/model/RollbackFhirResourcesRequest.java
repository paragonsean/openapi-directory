/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RollbackFhirResourceFilteringFields;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RollbackFhirResourcesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:13.605175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RollbackFhirResourcesRequest {
  /**
   * Optional. CREATE/UPDATE/DELETE/ALL for reverting all txns of a certain type.
   */
  @JsonAdapter(ChangeTypeEnum.Adapter.class)
  public enum ChangeTypeEnum {
    CHANGE_TYPE_UNSPECIFIED("CHANGE_TYPE_UNSPECIFIED"),
    
    ALL("ALL"),
    
    CREATE("CREATE"),
    
    UPDATE("UPDATE"),
    
    DELETE("DELETE");

    private String value;

    ChangeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChangeTypeEnum fromValue(String value) {
      for (ChangeTypeEnum b : ChangeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChangeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChangeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChangeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChangeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChangeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHANGE_TYPE = "changeType";
  @SerializedName(SERIALIZED_NAME_CHANGE_TYPE)
  private ChangeTypeEnum changeType;

  public static final String SERIALIZED_NAME_EXCLUDE_ROLLBACKS = "excludeRollbacks";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_ROLLBACKS)
  private Boolean excludeRollbacks;

  public static final String SERIALIZED_NAME_FILTERING_FIELDS = "filteringFields";
  @SerializedName(SERIALIZED_NAME_FILTERING_FIELDS)
  private RollbackFhirResourceFilteringFields filteringFields;

  public static final String SERIALIZED_NAME_FORCE = "force";
  @SerializedName(SERIALIZED_NAME_FORCE)
  private Boolean force;

  public static final String SERIALIZED_NAME_INPUT_GCS_OBJECT = "inputGcsObject";
  @SerializedName(SERIALIZED_NAME_INPUT_GCS_OBJECT)
  private String inputGcsObject;

  public static final String SERIALIZED_NAME_RESULT_GCS_BUCKET = "resultGcsBucket";
  @SerializedName(SERIALIZED_NAME_RESULT_GCS_BUCKET)
  private String resultGcsBucket;

  public static final String SERIALIZED_NAME_ROLLBACK_TIME = "rollbackTime";
  @SerializedName(SERIALIZED_NAME_ROLLBACK_TIME)
  private String rollbackTime;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private List<String> type = new ArrayList<>();

  public RollbackFhirResourcesRequest() {
  }

  public RollbackFhirResourcesRequest changeType(ChangeTypeEnum changeType) {
    this.changeType = changeType;
    return this;
  }

  /**
   * Optional. CREATE/UPDATE/DELETE/ALL for reverting all txns of a certain type.
   * @return changeType
   */
  @javax.annotation.Nullable
  public ChangeTypeEnum getChangeType() {
    return changeType;
  }

  public void setChangeType(ChangeTypeEnum changeType) {
    this.changeType = changeType;
  }


  public RollbackFhirResourcesRequest excludeRollbacks(Boolean excludeRollbacks) {
    this.excludeRollbacks = excludeRollbacks;
    return this;
  }

  /**
   * Optional. Specifies whether to exclude earlier rollbacks.
   * @return excludeRollbacks
   */
  @javax.annotation.Nullable
  public Boolean getExcludeRollbacks() {
    return excludeRollbacks;
  }

  public void setExcludeRollbacks(Boolean excludeRollbacks) {
    this.excludeRollbacks = excludeRollbacks;
  }


  public RollbackFhirResourcesRequest filteringFields(RollbackFhirResourceFilteringFields filteringFields) {
    this.filteringFields = filteringFields;
    return this;
  }

  /**
   * Get filteringFields
   * @return filteringFields
   */
  @javax.annotation.Nullable
  public RollbackFhirResourceFilteringFields getFilteringFields() {
    return filteringFields;
  }

  public void setFilteringFields(RollbackFhirResourceFilteringFields filteringFields) {
    this.filteringFields = filteringFields;
  }


  public RollbackFhirResourcesRequest force(Boolean force) {
    this.force = force;
    return this;
  }

  /**
   * Optional. When enabled, changes will be reverted without explicit confirmation
   * @return force
   */
  @javax.annotation.Nullable
  public Boolean getForce() {
    return force;
  }

  public void setForce(Boolean force) {
    this.force = force;
  }


  public RollbackFhirResourcesRequest inputGcsObject(String inputGcsObject) {
    this.inputGcsObject = inputGcsObject;
    return this;
  }

  /**
   * Optional. GCS object containing list of {resourceType}/{resourceId} lines, identifying resources to be reverted
   * @return inputGcsObject
   */
  @javax.annotation.Nullable
  public String getInputGcsObject() {
    return inputGcsObject;
  }

  public void setInputGcsObject(String inputGcsObject) {
    this.inputGcsObject = inputGcsObject;
  }


  public RollbackFhirResourcesRequest resultGcsBucket(String resultGcsBucket) {
    this.resultGcsBucket = resultGcsBucket;
    return this;
  }

  /**
   * Required. Bucket to deposit result
   * @return resultGcsBucket
   */
  @javax.annotation.Nullable
  public String getResultGcsBucket() {
    return resultGcsBucket;
  }

  public void setResultGcsBucket(String resultGcsBucket) {
    this.resultGcsBucket = resultGcsBucket;
  }


  public RollbackFhirResourcesRequest rollbackTime(String rollbackTime) {
    this.rollbackTime = rollbackTime;
    return this;
  }

  /**
   * Required. Time point to rollback to.
   * @return rollbackTime
   */
  @javax.annotation.Nullable
  public String getRollbackTime() {
    return rollbackTime;
  }

  public void setRollbackTime(String rollbackTime) {
    this.rollbackTime = rollbackTime;
  }


  public RollbackFhirResourcesRequest type(List<String> type) {
    this.type = type;
    return this;
  }

  public RollbackFhirResourcesRequest addTypeItem(String typeItem) {
    if (this.type == null) {
      this.type = new ArrayList<>();
    }
    this.type.add(typeItem);
    return this;
  }

  /**
   * Optional. If specified, revert only resources of these types
   * @return type
   */
  @javax.annotation.Nullable
  public List<String> getType() {
    return type;
  }

  public void setType(List<String> type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RollbackFhirResourcesRequest rollbackFhirResourcesRequest = (RollbackFhirResourcesRequest) o;
    return Objects.equals(this.changeType, rollbackFhirResourcesRequest.changeType) &&
        Objects.equals(this.excludeRollbacks, rollbackFhirResourcesRequest.excludeRollbacks) &&
        Objects.equals(this.filteringFields, rollbackFhirResourcesRequest.filteringFields) &&
        Objects.equals(this.force, rollbackFhirResourcesRequest.force) &&
        Objects.equals(this.inputGcsObject, rollbackFhirResourcesRequest.inputGcsObject) &&
        Objects.equals(this.resultGcsBucket, rollbackFhirResourcesRequest.resultGcsBucket) &&
        Objects.equals(this.rollbackTime, rollbackFhirResourcesRequest.rollbackTime) &&
        Objects.equals(this.type, rollbackFhirResourcesRequest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changeType, excludeRollbacks, filteringFields, force, inputGcsObject, resultGcsBucket, rollbackTime, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RollbackFhirResourcesRequest {\n");
    sb.append("    changeType: ").append(toIndentedString(changeType)).append("\n");
    sb.append("    excludeRollbacks: ").append(toIndentedString(excludeRollbacks)).append("\n");
    sb.append("    filteringFields: ").append(toIndentedString(filteringFields)).append("\n");
    sb.append("    force: ").append(toIndentedString(force)).append("\n");
    sb.append("    inputGcsObject: ").append(toIndentedString(inputGcsObject)).append("\n");
    sb.append("    resultGcsBucket: ").append(toIndentedString(resultGcsBucket)).append("\n");
    sb.append("    rollbackTime: ").append(toIndentedString(rollbackTime)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changeType");
    openapiFields.add("excludeRollbacks");
    openapiFields.add("filteringFields");
    openapiFields.add("force");
    openapiFields.add("inputGcsObject");
    openapiFields.add("resultGcsBucket");
    openapiFields.add("rollbackTime");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RollbackFhirResourcesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RollbackFhirResourcesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RollbackFhirResourcesRequest is not found in the empty JSON string", RollbackFhirResourcesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RollbackFhirResourcesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RollbackFhirResourcesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("changeType") != null && !jsonObj.get("changeType").isJsonNull()) && !jsonObj.get("changeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeType").toString()));
      }
      // validate the optional field `changeType`
      if (jsonObj.get("changeType") != null && !jsonObj.get("changeType").isJsonNull()) {
        ChangeTypeEnum.validateJsonElement(jsonObj.get("changeType"));
      }
      // validate the optional field `filteringFields`
      if (jsonObj.get("filteringFields") != null && !jsonObj.get("filteringFields").isJsonNull()) {
        RollbackFhirResourceFilteringFields.validateJsonElement(jsonObj.get("filteringFields"));
      }
      if ((jsonObj.get("inputGcsObject") != null && !jsonObj.get("inputGcsObject").isJsonNull()) && !jsonObj.get("inputGcsObject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputGcsObject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputGcsObject").toString()));
      }
      if ((jsonObj.get("resultGcsBucket") != null && !jsonObj.get("resultGcsBucket").isJsonNull()) && !jsonObj.get("resultGcsBucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultGcsBucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultGcsBucket").toString()));
      }
      if ((jsonObj.get("rollbackTime") != null && !jsonObj.get("rollbackTime").isJsonNull()) && !jsonObj.get("rollbackTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rollbackTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rollbackTime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull() && !jsonObj.get("type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be an array in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RollbackFhirResourcesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RollbackFhirResourcesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RollbackFhirResourcesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RollbackFhirResourcesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RollbackFhirResourcesRequest>() {
           @Override
           public void write(JsonWriter out, RollbackFhirResourcesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RollbackFhirResourcesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RollbackFhirResourcesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RollbackFhirResourcesRequest
   * @throws IOException if the JSON string is invalid with respect to RollbackFhirResourcesRequest
   */
  public static RollbackFhirResourcesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RollbackFhirResourcesRequest.class);
  }

  /**
   * Convert an instance of RollbackFhirResourcesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

