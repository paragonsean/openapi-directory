/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The candidate entities that an entity mention could link to.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:13.605175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Entity {
  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public static final String SERIALIZED_NAME_PREFERRED_TERM = "preferredTerm";
  @SerializedName(SERIALIZED_NAME_PREFERRED_TERM)
  private String preferredTerm;

  public static final String SERIALIZED_NAME_VOCABULARY_CODES = "vocabularyCodes";
  @SerializedName(SERIALIZED_NAME_VOCABULARY_CODES)
  private List<String> vocabularyCodes = new ArrayList<>();

  public Entity() {
  }

  public Entity entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * entity_id is a first class field entity_id uniquely identifies this concept and its meta-vocabulary. For example, \&quot;UMLS/C0000970\&quot;.
   * @return entityId
   */
  @javax.annotation.Nullable
  public String getEntityId() {
    return entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }


  public Entity preferredTerm(String preferredTerm) {
    this.preferredTerm = preferredTerm;
    return this;
  }

  /**
   * preferred_term is the preferred term for this concept. For example, \&quot;Acetaminophen\&quot;. For ad hoc entities formed by normalization, this is the most popular unnormalized string.
   * @return preferredTerm
   */
  @javax.annotation.Nullable
  public String getPreferredTerm() {
    return preferredTerm;
  }

  public void setPreferredTerm(String preferredTerm) {
    this.preferredTerm = preferredTerm;
  }


  public Entity vocabularyCodes(List<String> vocabularyCodes) {
    this.vocabularyCodes = vocabularyCodes;
    return this;
  }

  public Entity addVocabularyCodesItem(String vocabularyCodesItem) {
    if (this.vocabularyCodes == null) {
      this.vocabularyCodes = new ArrayList<>();
    }
    this.vocabularyCodes.add(vocabularyCodesItem);
    return this;
  }

  /**
   * Vocabulary codes are first-class fields and differentiated from the concept unique identifier (entity_id). vocabulary_codes contains the representation of this concept in particular vocabularies, such as ICD-10, SNOMED-CT and RxNORM. These are prefixed by the name of the vocabulary, followed by the unique code within that vocabulary. For example, \&quot;RXNORM/A10334543\&quot;.
   * @return vocabularyCodes
   */
  @javax.annotation.Nullable
  public List<String> getVocabularyCodes() {
    return vocabularyCodes;
  }

  public void setVocabularyCodes(List<String> vocabularyCodes) {
    this.vocabularyCodes = vocabularyCodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Entity entity = (Entity) o;
    return Objects.equals(this.entityId, entity.entityId) &&
        Objects.equals(this.preferredTerm, entity.preferredTerm) &&
        Objects.equals(this.vocabularyCodes, entity.vocabularyCodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityId, preferredTerm, vocabularyCodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Entity {\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    preferredTerm: ").append(toIndentedString(preferredTerm)).append("\n");
    sb.append("    vocabularyCodes: ").append(toIndentedString(vocabularyCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entityId");
    openapiFields.add("preferredTerm");
    openapiFields.add("vocabularyCodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Entity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Entity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Entity is not found in the empty JSON string", Entity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Entity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Entity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if ((jsonObj.get("preferredTerm") != null && !jsonObj.get("preferredTerm").isJsonNull()) && !jsonObj.get("preferredTerm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredTerm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredTerm").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vocabularyCodes") != null && !jsonObj.get("vocabularyCodes").isJsonNull() && !jsonObj.get("vocabularyCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vocabularyCodes` to be an array in the JSON string but got `%s`", jsonObj.get("vocabularyCodes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Entity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Entity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Entity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Entity.class));

       return (TypeAdapter<T>) new TypeAdapter<Entity>() {
           @Override
           public void write(JsonWriter out, Entity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Entity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Entity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Entity
   * @throws IOException if the JSON string is invalid with respect to Entity
   */
  public static Entity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Entity.class);
  }

  /**
   * Convert an instance of Entity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

