/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudHealthcareV1ConsentGcsDestination;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Queries all data_ids that are consented for a given use in the given consent store and writes them to a specified destination. The returned Operation includes a progress counter for the number of User data mappings processed. Errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging] (https://cloud.google.com/healthcare/docs/how-tos/logging) and [QueryAccessibleData] for a sample log entry).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:13.605175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryAccessibleDataRequest {
  public static final String SERIALIZED_NAME_GCS_DESTINATION = "gcsDestination";
  @SerializedName(SERIALIZED_NAME_GCS_DESTINATION)
  private GoogleCloudHealthcareV1ConsentGcsDestination gcsDestination;

  public static final String SERIALIZED_NAME_REQUEST_ATTRIBUTES = "requestAttributes";
  @SerializedName(SERIALIZED_NAME_REQUEST_ATTRIBUTES)
  private Map<String, String> requestAttributes = new HashMap<>();

  public static final String SERIALIZED_NAME_RESOURCE_ATTRIBUTES = "resourceAttributes";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ATTRIBUTES)
  private Map<String, String> resourceAttributes = new HashMap<>();

  public QueryAccessibleDataRequest() {
  }

  public QueryAccessibleDataRequest gcsDestination(GoogleCloudHealthcareV1ConsentGcsDestination gcsDestination) {
    this.gcsDestination = gcsDestination;
    return this;
  }

  /**
   * Get gcsDestination
   * @return gcsDestination
   */
  @javax.annotation.Nullable
  public GoogleCloudHealthcareV1ConsentGcsDestination getGcsDestination() {
    return gcsDestination;
  }

  public void setGcsDestination(GoogleCloudHealthcareV1ConsentGcsDestination gcsDestination) {
    this.gcsDestination = gcsDestination;
  }


  public QueryAccessibleDataRequest requestAttributes(Map<String, String> requestAttributes) {
    this.requestAttributes = requestAttributes;
    return this;
  }

  public QueryAccessibleDataRequest putRequestAttributesItem(String key, String requestAttributesItem) {
    if (this.requestAttributes == null) {
      this.requestAttributes = new HashMap<>();
    }
    this.requestAttributes.put(key, requestAttributesItem);
    return this;
  }

  /**
   * The values of request attributes associated with this access request.
   * @return requestAttributes
   */
  @javax.annotation.Nullable
  public Map<String, String> getRequestAttributes() {
    return requestAttributes;
  }

  public void setRequestAttributes(Map<String, String> requestAttributes) {
    this.requestAttributes = requestAttributes;
  }


  public QueryAccessibleDataRequest resourceAttributes(Map<String, String> resourceAttributes) {
    this.resourceAttributes = resourceAttributes;
    return this;
  }

  public QueryAccessibleDataRequest putResourceAttributesItem(String key, String resourceAttributesItem) {
    if (this.resourceAttributes == null) {
      this.resourceAttributes = new HashMap<>();
    }
    this.resourceAttributes.put(key, resourceAttributesItem);
    return this;
  }

  /**
   * Optional. The values of resource attributes associated with the type of resources being requested. If no values are specified, then all resource types are included in the output.
   * @return resourceAttributes
   */
  @javax.annotation.Nullable
  public Map<String, String> getResourceAttributes() {
    return resourceAttributes;
  }

  public void setResourceAttributes(Map<String, String> resourceAttributes) {
    this.resourceAttributes = resourceAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryAccessibleDataRequest queryAccessibleDataRequest = (QueryAccessibleDataRequest) o;
    return Objects.equals(this.gcsDestination, queryAccessibleDataRequest.gcsDestination) &&
        Objects.equals(this.requestAttributes, queryAccessibleDataRequest.requestAttributes) &&
        Objects.equals(this.resourceAttributes, queryAccessibleDataRequest.resourceAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gcsDestination, requestAttributes, resourceAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryAccessibleDataRequest {\n");
    sb.append("    gcsDestination: ").append(toIndentedString(gcsDestination)).append("\n");
    sb.append("    requestAttributes: ").append(toIndentedString(requestAttributes)).append("\n");
    sb.append("    resourceAttributes: ").append(toIndentedString(resourceAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gcsDestination");
    openapiFields.add("requestAttributes");
    openapiFields.add("resourceAttributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryAccessibleDataRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryAccessibleDataRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryAccessibleDataRequest is not found in the empty JSON string", QueryAccessibleDataRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryAccessibleDataRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryAccessibleDataRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `gcsDestination`
      if (jsonObj.get("gcsDestination") != null && !jsonObj.get("gcsDestination").isJsonNull()) {
        GoogleCloudHealthcareV1ConsentGcsDestination.validateJsonElement(jsonObj.get("gcsDestination"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryAccessibleDataRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryAccessibleDataRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryAccessibleDataRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryAccessibleDataRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryAccessibleDataRequest>() {
           @Override
           public void write(JsonWriter out, QueryAccessibleDataRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryAccessibleDataRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryAccessibleDataRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryAccessibleDataRequest
   * @throws IOException if the JSON string is invalid with respect to QueryAccessibleDataRequest
   */
  public static QueryAccessibleDataRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryAccessibleDataRequest.class);
  }

  /**
   * Convert an instance of QueryAccessibleDataRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

