/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DicomStoreMetrics contains metrics describing a DICOM store.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:13.605175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DicomStoreMetrics {
  public static final String SERIALIZED_NAME_BLOB_STORAGE_SIZE_BYTES = "blobStorageSizeBytes";
  @SerializedName(SERIALIZED_NAME_BLOB_STORAGE_SIZE_BYTES)
  private String blobStorageSizeBytes;

  public static final String SERIALIZED_NAME_INSTANCE_COUNT = "instanceCount";
  @SerializedName(SERIALIZED_NAME_INSTANCE_COUNT)
  private String instanceCount;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERIES_COUNT = "seriesCount";
  @SerializedName(SERIALIZED_NAME_SERIES_COUNT)
  private String seriesCount;

  public static final String SERIALIZED_NAME_STRUCTURED_STORAGE_SIZE_BYTES = "structuredStorageSizeBytes";
  @SerializedName(SERIALIZED_NAME_STRUCTURED_STORAGE_SIZE_BYTES)
  private String structuredStorageSizeBytes;

  public static final String SERIALIZED_NAME_STUDY_COUNT = "studyCount";
  @SerializedName(SERIALIZED_NAME_STUDY_COUNT)
  private String studyCount;

  public DicomStoreMetrics() {
  }

  public DicomStoreMetrics blobStorageSizeBytes(String blobStorageSizeBytes) {
    this.blobStorageSizeBytes = blobStorageSizeBytes;
    return this;
  }

  /**
   * Total blob storage bytes for all instances in the store.
   * @return blobStorageSizeBytes
   */
  @javax.annotation.Nullable
  public String getBlobStorageSizeBytes() {
    return blobStorageSizeBytes;
  }

  public void setBlobStorageSizeBytes(String blobStorageSizeBytes) {
    this.blobStorageSizeBytes = blobStorageSizeBytes;
  }


  public DicomStoreMetrics instanceCount(String instanceCount) {
    this.instanceCount = instanceCount;
    return this;
  }

  /**
   * Number of instances in the store.
   * @return instanceCount
   */
  @javax.annotation.Nullable
  public String getInstanceCount() {
    return instanceCount;
  }

  public void setInstanceCount(String instanceCount) {
    this.instanceCount = instanceCount;
  }


  public DicomStoreMetrics name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Resource name of the DICOM store, of the form &#x60;projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DicomStoreMetrics seriesCount(String seriesCount) {
    this.seriesCount = seriesCount;
    return this;
  }

  /**
   * Number of series in the store.
   * @return seriesCount
   */
  @javax.annotation.Nullable
  public String getSeriesCount() {
    return seriesCount;
  }

  public void setSeriesCount(String seriesCount) {
    this.seriesCount = seriesCount;
  }


  public DicomStoreMetrics structuredStorageSizeBytes(String structuredStorageSizeBytes) {
    this.structuredStorageSizeBytes = structuredStorageSizeBytes;
    return this;
  }

  /**
   * Total structured storage bytes for all instances in the store.
   * @return structuredStorageSizeBytes
   */
  @javax.annotation.Nullable
  public String getStructuredStorageSizeBytes() {
    return structuredStorageSizeBytes;
  }

  public void setStructuredStorageSizeBytes(String structuredStorageSizeBytes) {
    this.structuredStorageSizeBytes = structuredStorageSizeBytes;
  }


  public DicomStoreMetrics studyCount(String studyCount) {
    this.studyCount = studyCount;
    return this;
  }

  /**
   * Number of studies in the store.
   * @return studyCount
   */
  @javax.annotation.Nullable
  public String getStudyCount() {
    return studyCount;
  }

  public void setStudyCount(String studyCount) {
    this.studyCount = studyCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DicomStoreMetrics dicomStoreMetrics = (DicomStoreMetrics) o;
    return Objects.equals(this.blobStorageSizeBytes, dicomStoreMetrics.blobStorageSizeBytes) &&
        Objects.equals(this.instanceCount, dicomStoreMetrics.instanceCount) &&
        Objects.equals(this.name, dicomStoreMetrics.name) &&
        Objects.equals(this.seriesCount, dicomStoreMetrics.seriesCount) &&
        Objects.equals(this.structuredStorageSizeBytes, dicomStoreMetrics.structuredStorageSizeBytes) &&
        Objects.equals(this.studyCount, dicomStoreMetrics.studyCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blobStorageSizeBytes, instanceCount, name, seriesCount, structuredStorageSizeBytes, studyCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DicomStoreMetrics {\n");
    sb.append("    blobStorageSizeBytes: ").append(toIndentedString(blobStorageSizeBytes)).append("\n");
    sb.append("    instanceCount: ").append(toIndentedString(instanceCount)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    seriesCount: ").append(toIndentedString(seriesCount)).append("\n");
    sb.append("    structuredStorageSizeBytes: ").append(toIndentedString(structuredStorageSizeBytes)).append("\n");
    sb.append("    studyCount: ").append(toIndentedString(studyCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blobStorageSizeBytes");
    openapiFields.add("instanceCount");
    openapiFields.add("name");
    openapiFields.add("seriesCount");
    openapiFields.add("structuredStorageSizeBytes");
    openapiFields.add("studyCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DicomStoreMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DicomStoreMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DicomStoreMetrics is not found in the empty JSON string", DicomStoreMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DicomStoreMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DicomStoreMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("blobStorageSizeBytes") != null && !jsonObj.get("blobStorageSizeBytes").isJsonNull()) && !jsonObj.get("blobStorageSizeBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blobStorageSizeBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blobStorageSizeBytes").toString()));
      }
      if ((jsonObj.get("instanceCount") != null && !jsonObj.get("instanceCount").isJsonNull()) && !jsonObj.get("instanceCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceCount").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("seriesCount") != null && !jsonObj.get("seriesCount").isJsonNull()) && !jsonObj.get("seriesCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seriesCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seriesCount").toString()));
      }
      if ((jsonObj.get("structuredStorageSizeBytes") != null && !jsonObj.get("structuredStorageSizeBytes").isJsonNull()) && !jsonObj.get("structuredStorageSizeBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `structuredStorageSizeBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("structuredStorageSizeBytes").toString()));
      }
      if ((jsonObj.get("studyCount") != null && !jsonObj.get("studyCount").isJsonNull()) && !jsonObj.get("studyCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studyCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studyCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DicomStoreMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DicomStoreMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DicomStoreMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DicomStoreMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<DicomStoreMetrics>() {
           @Override
           public void write(JsonWriter out, DicomStoreMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DicomStoreMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DicomStoreMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DicomStoreMetrics
   * @throws IOException if the JSON string is invalid with respect to DicomStoreMetrics
   */
  public static DicomStoreMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DicomStoreMetrics.class);
  }

  /**
   * Convert an instance of DicomStoreMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

