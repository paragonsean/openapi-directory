/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TimePartitioning;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for the FHIR BigQuery schema. Determines how the server generates the schema.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:13.605175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SchemaConfig {
  public static final String SERIALIZED_NAME_LAST_UPDATED_PARTITION_CONFIG = "lastUpdatedPartitionConfig";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_PARTITION_CONFIG)
  private TimePartitioning lastUpdatedPartitionConfig;

  public static final String SERIALIZED_NAME_RECURSIVE_STRUCTURE_DEPTH = "recursiveStructureDepth";
  @SerializedName(SERIALIZED_NAME_RECURSIVE_STRUCTURE_DEPTH)
  private String recursiveStructureDepth;

  /**
   * Specifies the output schema type. Schema type is required.
   */
  @JsonAdapter(SchemaTypeEnum.Adapter.class)
  public enum SchemaTypeEnum {
    SCHEMA_TYPE_UNSPECIFIED("SCHEMA_TYPE_UNSPECIFIED"),
    
    ANALYTICS("ANALYTICS"),
    
    ANALYTICS_V2("ANALYTICS_V2");

    private String value;

    SchemaTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SchemaTypeEnum fromValue(String value) {
      for (SchemaTypeEnum b : SchemaTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SchemaTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SchemaTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SchemaTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SchemaTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SchemaTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCHEMA_TYPE = "schemaType";
  @SerializedName(SERIALIZED_NAME_SCHEMA_TYPE)
  private SchemaTypeEnum schemaType;

  public SchemaConfig() {
  }

  public SchemaConfig lastUpdatedPartitionConfig(TimePartitioning lastUpdatedPartitionConfig) {
    this.lastUpdatedPartitionConfig = lastUpdatedPartitionConfig;
    return this;
  }

  /**
   * Get lastUpdatedPartitionConfig
   * @return lastUpdatedPartitionConfig
   */
  @javax.annotation.Nullable
  public TimePartitioning getLastUpdatedPartitionConfig() {
    return lastUpdatedPartitionConfig;
  }

  public void setLastUpdatedPartitionConfig(TimePartitioning lastUpdatedPartitionConfig) {
    this.lastUpdatedPartitionConfig = lastUpdatedPartitionConfig;
  }


  public SchemaConfig recursiveStructureDepth(String recursiveStructureDepth) {
    this.recursiveStructureDepth = recursiveStructureDepth;
    return this;
  }

  /**
   * The depth for all recursive structures in the output analytics schema. For example, &#x60;concept&#x60; in the CodeSystem resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called &#x60;concept.concept&#x60; but not &#x60;concept.concept.concept&#x60;. If not specified or set to 0, the server will use the default value 2. The maximum depth allowed is 5.
   * @return recursiveStructureDepth
   */
  @javax.annotation.Nullable
  public String getRecursiveStructureDepth() {
    return recursiveStructureDepth;
  }

  public void setRecursiveStructureDepth(String recursiveStructureDepth) {
    this.recursiveStructureDepth = recursiveStructureDepth;
  }


  public SchemaConfig schemaType(SchemaTypeEnum schemaType) {
    this.schemaType = schemaType;
    return this;
  }

  /**
   * Specifies the output schema type. Schema type is required.
   * @return schemaType
   */
  @javax.annotation.Nullable
  public SchemaTypeEnum getSchemaType() {
    return schemaType;
  }

  public void setSchemaType(SchemaTypeEnum schemaType) {
    this.schemaType = schemaType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaConfig schemaConfig = (SchemaConfig) o;
    return Objects.equals(this.lastUpdatedPartitionConfig, schemaConfig.lastUpdatedPartitionConfig) &&
        Objects.equals(this.recursiveStructureDepth, schemaConfig.recursiveStructureDepth) &&
        Objects.equals(this.schemaType, schemaConfig.schemaType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastUpdatedPartitionConfig, recursiveStructureDepth, schemaType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaConfig {\n");
    sb.append("    lastUpdatedPartitionConfig: ").append(toIndentedString(lastUpdatedPartitionConfig)).append("\n");
    sb.append("    recursiveStructureDepth: ").append(toIndentedString(recursiveStructureDepth)).append("\n");
    sb.append("    schemaType: ").append(toIndentedString(schemaType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lastUpdatedPartitionConfig");
    openapiFields.add("recursiveStructureDepth");
    openapiFields.add("schemaType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SchemaConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SchemaConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SchemaConfig is not found in the empty JSON string", SchemaConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SchemaConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SchemaConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `lastUpdatedPartitionConfig`
      if (jsonObj.get("lastUpdatedPartitionConfig") != null && !jsonObj.get("lastUpdatedPartitionConfig").isJsonNull()) {
        TimePartitioning.validateJsonElement(jsonObj.get("lastUpdatedPartitionConfig"));
      }
      if ((jsonObj.get("recursiveStructureDepth") != null && !jsonObj.get("recursiveStructureDepth").isJsonNull()) && !jsonObj.get("recursiveStructureDepth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recursiveStructureDepth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recursiveStructureDepth").toString()));
      }
      if ((jsonObj.get("schemaType") != null && !jsonObj.get("schemaType").isJsonNull()) && !jsonObj.get("schemaType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaType").toString()));
      }
      // validate the optional field `schemaType`
      if (jsonObj.get("schemaType") != null && !jsonObj.get("schemaType").isJsonNull()) {
        SchemaTypeEnum.validateJsonElement(jsonObj.get("schemaType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SchemaConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SchemaConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SchemaConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SchemaConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<SchemaConfig>() {
           @Override
           public void write(JsonWriter out, SchemaConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SchemaConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SchemaConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SchemaConfig
   * @throws IOException if the JSON string is invalid with respect to SchemaConfig
   */
  public static SchemaConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SchemaConfig.class);
  }

  /**
   * Convert an instance of SchemaConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

