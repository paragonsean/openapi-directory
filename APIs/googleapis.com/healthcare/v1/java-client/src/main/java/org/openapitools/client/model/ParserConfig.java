/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SchemaPackage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration for the parser. It determines how the server parses the messages.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:13.605175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ParserConfig {
  public static final String SERIALIZED_NAME_ALLOW_NULL_HEADER = "allowNullHeader";
  @SerializedName(SERIALIZED_NAME_ALLOW_NULL_HEADER)
  private Boolean allowNullHeader;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private SchemaPackage schema;

  public static final String SERIALIZED_NAME_SEGMENT_TERMINATOR = "segmentTerminator";
  @SerializedName(SERIALIZED_NAME_SEGMENT_TERMINATOR)
  private byte[] segmentTerminator;

  /**
   * Immutable. Determines the version of both the default parser to be used when &#x60;schema&#x60; is not given, as well as the schematized parser used when &#x60;schema&#x60; is specified. This field is immutable after HL7v2 store creation.
   */
  @JsonAdapter(VersionEnum.Adapter.class)
  public enum VersionEnum {
    PARSER_VERSION_UNSPECIFIED("PARSER_VERSION_UNSPECIFIED"),
    
    V1("V1"),
    
    V2("V2"),
    
    V3("V3");

    private String value;

    VersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VersionEnum fromValue(String value) {
      for (VersionEnum b : VersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private VersionEnum version;

  public ParserConfig() {
  }

  public ParserConfig allowNullHeader(Boolean allowNullHeader) {
    this.allowNullHeader = allowNullHeader;
    return this;
  }

  /**
   * Determines whether messages with no header are allowed.
   * @return allowNullHeader
   */
  @javax.annotation.Nullable
  public Boolean getAllowNullHeader() {
    return allowNullHeader;
  }

  public void setAllowNullHeader(Boolean allowNullHeader) {
    this.allowNullHeader = allowNullHeader;
  }


  public ParserConfig schema(SchemaPackage schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public SchemaPackage getSchema() {
    return schema;
  }

  public void setSchema(SchemaPackage schema) {
    this.schema = schema;
  }


  public ParserConfig segmentTerminator(byte[] segmentTerminator) {
    this.segmentTerminator = segmentTerminator;
    return this;
  }

  /**
   * Byte(s) to use as the segment terminator. If this is unset, &#39;\\r&#39; is used as segment terminator, matching the HL7 version 2 specification.
   * @return segmentTerminator
   */
  @javax.annotation.Nullable
  public byte[] getSegmentTerminator() {
    return segmentTerminator;
  }

  public void setSegmentTerminator(byte[] segmentTerminator) {
    this.segmentTerminator = segmentTerminator;
  }


  public ParserConfig version(VersionEnum version) {
    this.version = version;
    return this;
  }

  /**
   * Immutable. Determines the version of both the default parser to be used when &#x60;schema&#x60; is not given, as well as the schematized parser used when &#x60;schema&#x60; is specified. This field is immutable after HL7v2 store creation.
   * @return version
   */
  @javax.annotation.Nullable
  public VersionEnum getVersion() {
    return version;
  }

  public void setVersion(VersionEnum version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParserConfig parserConfig = (ParserConfig) o;
    return Objects.equals(this.allowNullHeader, parserConfig.allowNullHeader) &&
        Objects.equals(this.schema, parserConfig.schema) &&
        Arrays.equals(this.segmentTerminator, parserConfig.segmentTerminator) &&
        Objects.equals(this.version, parserConfig.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowNullHeader, schema, Arrays.hashCode(segmentTerminator), version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParserConfig {\n");
    sb.append("    allowNullHeader: ").append(toIndentedString(allowNullHeader)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    segmentTerminator: ").append(toIndentedString(segmentTerminator)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowNullHeader");
    openapiFields.add("schema");
    openapiFields.add("segmentTerminator");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ParserConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ParserConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParserConfig is not found in the empty JSON string", ParserConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ParserConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParserConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `schema`
      if (jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) {
        SchemaPackage.validateJsonElement(jsonObj.get("schema"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        VersionEnum.validateJsonElement(jsonObj.get("version"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParserConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParserConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParserConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParserConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ParserConfig>() {
           @Override
           public void write(JsonWriter out, ParserConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParserConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ParserConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ParserConfig
   * @throws IOException if the JSON string is invalid with respect to ParserConfig
   */
  public static ParserConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParserConfig.class);
  }

  /**
   * Convert an instance of ParserConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

