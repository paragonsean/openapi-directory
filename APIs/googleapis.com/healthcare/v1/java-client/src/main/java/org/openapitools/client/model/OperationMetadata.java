/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ProgressCounter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OperationMetadata provides information about the operation execution. Returned in the long-running operation&#39;s metadata field.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:13.605175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OperationMetadata {
  public static final String SERIALIZED_NAME_API_METHOD_NAME = "apiMethodName";
  @SerializedName(SERIALIZED_NAME_API_METHOD_NAME)
  private String apiMethodName;

  public static final String SERIALIZED_NAME_CANCEL_REQUESTED = "cancelRequested";
  @SerializedName(SERIALIZED_NAME_CANCEL_REQUESTED)
  private Boolean cancelRequested;

  public static final String SERIALIZED_NAME_COUNTER = "counter";
  @SerializedName(SERIALIZED_NAME_COUNTER)
  private ProgressCounter counter;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_LOGS_URL = "logsUrl";
  @SerializedName(SERIALIZED_NAME_LOGS_URL)
  private String logsUrl;

  public OperationMetadata() {
  }

  public OperationMetadata apiMethodName(String apiMethodName) {
    this.apiMethodName = apiMethodName;
    return this;
  }

  /**
   * The name of the API method that initiated the operation.
   * @return apiMethodName
   */
  @javax.annotation.Nullable
  public String getApiMethodName() {
    return apiMethodName;
  }

  public void setApiMethodName(String apiMethodName) {
    this.apiMethodName = apiMethodName;
  }


  public OperationMetadata cancelRequested(Boolean cancelRequested) {
    this.cancelRequested = cancelRequested;
    return this;
  }

  /**
   * Specifies if cancellation was requested for the operation.
   * @return cancelRequested
   */
  @javax.annotation.Nullable
  public Boolean getCancelRequested() {
    return cancelRequested;
  }

  public void setCancelRequested(Boolean cancelRequested) {
    this.cancelRequested = cancelRequested;
  }


  public OperationMetadata counter(ProgressCounter counter) {
    this.counter = counter;
    return this;
  }

  /**
   * Get counter
   * @return counter
   */
  @javax.annotation.Nullable
  public ProgressCounter getCounter() {
    return counter;
  }

  public void setCounter(ProgressCounter counter) {
    this.counter = counter;
  }


  public OperationMetadata createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * The time at which the operation was created by the API.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public OperationMetadata endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The time at which execution was completed.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public OperationMetadata logsUrl(String logsUrl) {
    this.logsUrl = logsUrl;
    return this;
  }

  /**
   * A link to audit and error logs in the log viewer. Error logs are generated only by some operations, listed at [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).
   * @return logsUrl
   */
  @javax.annotation.Nullable
  public String getLogsUrl() {
    return logsUrl;
  }

  public void setLogsUrl(String logsUrl) {
    this.logsUrl = logsUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperationMetadata operationMetadata = (OperationMetadata) o;
    return Objects.equals(this.apiMethodName, operationMetadata.apiMethodName) &&
        Objects.equals(this.cancelRequested, operationMetadata.cancelRequested) &&
        Objects.equals(this.counter, operationMetadata.counter) &&
        Objects.equals(this.createTime, operationMetadata.createTime) &&
        Objects.equals(this.endTime, operationMetadata.endTime) &&
        Objects.equals(this.logsUrl, operationMetadata.logsUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiMethodName, cancelRequested, counter, createTime, endTime, logsUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperationMetadata {\n");
    sb.append("    apiMethodName: ").append(toIndentedString(apiMethodName)).append("\n");
    sb.append("    cancelRequested: ").append(toIndentedString(cancelRequested)).append("\n");
    sb.append("    counter: ").append(toIndentedString(counter)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    logsUrl: ").append(toIndentedString(logsUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiMethodName");
    openapiFields.add("cancelRequested");
    openapiFields.add("counter");
    openapiFields.add("createTime");
    openapiFields.add("endTime");
    openapiFields.add("logsUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OperationMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OperationMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OperationMetadata is not found in the empty JSON string", OperationMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OperationMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OperationMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiMethodName") != null && !jsonObj.get("apiMethodName").isJsonNull()) && !jsonObj.get("apiMethodName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiMethodName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiMethodName").toString()));
      }
      // validate the optional field `counter`
      if (jsonObj.get("counter") != null && !jsonObj.get("counter").isJsonNull()) {
        ProgressCounter.validateJsonElement(jsonObj.get("counter"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("logsUrl") != null && !jsonObj.get("logsUrl").isJsonNull()) && !jsonObj.get("logsUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logsUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logsUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OperationMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OperationMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OperationMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OperationMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<OperationMetadata>() {
           @Override
           public void write(JsonWriter out, OperationMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OperationMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OperationMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OperationMetadata
   * @throws IOException if the JSON string is invalid with respect to OperationMetadata
   */
  public static OperationMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OperationMetadata.class);
  }

  /**
   * Convert an instance of OperationMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

