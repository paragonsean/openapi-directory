/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.Signature;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Documentation of a user&#39;s consent.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:13.605175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConsentArtifact {
  public static final String SERIALIZED_NAME_CONSENT_CONTENT_SCREENSHOTS = "consentContentScreenshots";
  @SerializedName(SERIALIZED_NAME_CONSENT_CONTENT_SCREENSHOTS)
  private List<Image> consentContentScreenshots = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONSENT_CONTENT_VERSION = "consentContentVersion";
  @SerializedName(SERIALIZED_NAME_CONSENT_CONTENT_VERSION)
  private String consentContentVersion;

  public static final String SERIALIZED_NAME_GUARDIAN_SIGNATURE = "guardianSignature";
  @SerializedName(SERIALIZED_NAME_GUARDIAN_SIGNATURE)
  private Signature guardianSignature;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_USER_SIGNATURE = "userSignature";
  @SerializedName(SERIALIZED_NAME_USER_SIGNATURE)
  private Signature userSignature;

  public static final String SERIALIZED_NAME_WITNESS_SIGNATURE = "witnessSignature";
  @SerializedName(SERIALIZED_NAME_WITNESS_SIGNATURE)
  private Signature witnessSignature;

  public ConsentArtifact() {
  }

  public ConsentArtifact consentContentScreenshots(List<Image> consentContentScreenshots) {
    this.consentContentScreenshots = consentContentScreenshots;
    return this;
  }

  public ConsentArtifact addConsentContentScreenshotsItem(Image consentContentScreenshotsItem) {
    if (this.consentContentScreenshots == null) {
      this.consentContentScreenshots = new ArrayList<>();
    }
    this.consentContentScreenshots.add(consentContentScreenshotsItem);
    return this;
  }

  /**
   * Optional. Screenshots, PDFs, or other binary information documenting the user&#39;s consent.
   * @return consentContentScreenshots
   */
  @javax.annotation.Nullable
  public List<Image> getConsentContentScreenshots() {
    return consentContentScreenshots;
  }

  public void setConsentContentScreenshots(List<Image> consentContentScreenshots) {
    this.consentContentScreenshots = consentContentScreenshots;
  }


  public ConsentArtifact consentContentVersion(String consentContentVersion) {
    this.consentContentVersion = consentContentVersion;
    return this;
  }

  /**
   * Optional. An string indicating the version of the consent information shown to the user.
   * @return consentContentVersion
   */
  @javax.annotation.Nullable
  public String getConsentContentVersion() {
    return consentContentVersion;
  }

  public void setConsentContentVersion(String consentContentVersion) {
    this.consentContentVersion = consentContentVersion;
  }


  public ConsentArtifact guardianSignature(Signature guardianSignature) {
    this.guardianSignature = guardianSignature;
    return this;
  }

  /**
   * Get guardianSignature
   * @return guardianSignature
   */
  @javax.annotation.Nullable
  public Signature getGuardianSignature() {
    return guardianSignature;
  }

  public void setGuardianSignature(Signature guardianSignature) {
    this.guardianSignature = guardianSignature;
  }


  public ConsentArtifact metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public ConsentArtifact putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Optional. Metadata associated with the Consent artifact. For example, the consent locale or user agent version.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public ConsentArtifact name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Identifier. Resource name of the Consent artifact, of the form &#x60;projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}&#x60;. Cannot be changed after creation.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ConsentArtifact userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Required. User&#39;s UUID provided by the client.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  public ConsentArtifact userSignature(Signature userSignature) {
    this.userSignature = userSignature;
    return this;
  }

  /**
   * Get userSignature
   * @return userSignature
   */
  @javax.annotation.Nullable
  public Signature getUserSignature() {
    return userSignature;
  }

  public void setUserSignature(Signature userSignature) {
    this.userSignature = userSignature;
  }


  public ConsentArtifact witnessSignature(Signature witnessSignature) {
    this.witnessSignature = witnessSignature;
    return this;
  }

  /**
   * Get witnessSignature
   * @return witnessSignature
   */
  @javax.annotation.Nullable
  public Signature getWitnessSignature() {
    return witnessSignature;
  }

  public void setWitnessSignature(Signature witnessSignature) {
    this.witnessSignature = witnessSignature;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsentArtifact consentArtifact = (ConsentArtifact) o;
    return Objects.equals(this.consentContentScreenshots, consentArtifact.consentContentScreenshots) &&
        Objects.equals(this.consentContentVersion, consentArtifact.consentContentVersion) &&
        Objects.equals(this.guardianSignature, consentArtifact.guardianSignature) &&
        Objects.equals(this.metadata, consentArtifact.metadata) &&
        Objects.equals(this.name, consentArtifact.name) &&
        Objects.equals(this.userId, consentArtifact.userId) &&
        Objects.equals(this.userSignature, consentArtifact.userSignature) &&
        Objects.equals(this.witnessSignature, consentArtifact.witnessSignature);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consentContentScreenshots, consentContentVersion, guardianSignature, metadata, name, userId, userSignature, witnessSignature);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsentArtifact {\n");
    sb.append("    consentContentScreenshots: ").append(toIndentedString(consentContentScreenshots)).append("\n");
    sb.append("    consentContentVersion: ").append(toIndentedString(consentContentVersion)).append("\n");
    sb.append("    guardianSignature: ").append(toIndentedString(guardianSignature)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userSignature: ").append(toIndentedString(userSignature)).append("\n");
    sb.append("    witnessSignature: ").append(toIndentedString(witnessSignature)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consentContentScreenshots");
    openapiFields.add("consentContentVersion");
    openapiFields.add("guardianSignature");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("userId");
    openapiFields.add("userSignature");
    openapiFields.add("witnessSignature");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConsentArtifact
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConsentArtifact.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConsentArtifact is not found in the empty JSON string", ConsentArtifact.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConsentArtifact.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConsentArtifact` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("consentContentScreenshots") != null && !jsonObj.get("consentContentScreenshots").isJsonNull()) {
        JsonArray jsonArrayconsentContentScreenshots = jsonObj.getAsJsonArray("consentContentScreenshots");
        if (jsonArrayconsentContentScreenshots != null) {
          // ensure the json data is an array
          if (!jsonObj.get("consentContentScreenshots").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `consentContentScreenshots` to be an array in the JSON string but got `%s`", jsonObj.get("consentContentScreenshots").toString()));
          }

          // validate the optional field `consentContentScreenshots` (array)
          for (int i = 0; i < jsonArrayconsentContentScreenshots.size(); i++) {
            Image.validateJsonElement(jsonArrayconsentContentScreenshots.get(i));
          };
        }
      }
      if ((jsonObj.get("consentContentVersion") != null && !jsonObj.get("consentContentVersion").isJsonNull()) && !jsonObj.get("consentContentVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consentContentVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consentContentVersion").toString()));
      }
      // validate the optional field `guardianSignature`
      if (jsonObj.get("guardianSignature") != null && !jsonObj.get("guardianSignature").isJsonNull()) {
        Signature.validateJsonElement(jsonObj.get("guardianSignature"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      // validate the optional field `userSignature`
      if (jsonObj.get("userSignature") != null && !jsonObj.get("userSignature").isJsonNull()) {
        Signature.validateJsonElement(jsonObj.get("userSignature"));
      }
      // validate the optional field `witnessSignature`
      if (jsonObj.get("witnessSignature") != null && !jsonObj.get("witnessSignature").isJsonNull()) {
        Signature.validateJsonElement(jsonObj.get("witnessSignature"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConsentArtifact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConsentArtifact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConsentArtifact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConsentArtifact.class));

       return (TypeAdapter<T>) new TypeAdapter<ConsentArtifact>() {
           @Override
           public void write(JsonWriter out, ConsentArtifact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConsentArtifact read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConsentArtifact given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConsentArtifact
   * @throws IOException if the JSON string is invalid with respect to ConsentArtifact
   */
  public static ConsentArtifact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConsentArtifact.class);
  }

  /**
   * Convert an instance of ConsentArtifact to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

