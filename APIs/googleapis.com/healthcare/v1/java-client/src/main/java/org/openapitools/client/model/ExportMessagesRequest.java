/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GcsDestination;
import org.openapitools.client.model.PubsubDestination;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to schedule an export.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:13.605175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportMessagesRequest {
  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_GCS_DESTINATION = "gcsDestination";
  @SerializedName(SERIALIZED_NAME_GCS_DESTINATION)
  private GcsDestination gcsDestination;

  public static final String SERIALIZED_NAME_PUBSUB_DESTINATION = "pubsubDestination";
  @SerializedName(SERIALIZED_NAME_PUBSUB_DESTINATION)
  private PubsubDestination pubsubDestination;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public ExportMessagesRequest() {
  }

  public ExportMessagesRequest endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The end of the range in &#x60;send_time&#x60; (MSH.7, https://www.hl7.org/documentcenter/public_temp_2E58C1F9-1C23-BA17-0C6126475344DA9D/wg/conf/HL7MSH.htm) to process. If not specified, the time when the export is scheduled is used. This value has to come after the &#x60;start_time&#x60; defined below. Only messages whose &#x60;send_time&#x60; lies in the range &#x60;start_time&#x60; (inclusive) to &#x60;end_time&#x60; (exclusive) are exported.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public ExportMessagesRequest filter(String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Restricts messages exported to those matching a filter, only applicable to PubsubDestination. The following syntax is available: * A string field value can be written as text inside quotation marks, for example &#x60;\&quot;query text\&quot;&#x60;. The only valid relational operation for text fields is equality (&#x60;&#x3D;&#x60;), where text is searched within the field, rather than having the field be equal to the text. For example, &#x60;\&quot;Comment &#x3D; great\&quot;&#x60; returns messages with &#x60;great&#x60; in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (&#x60;&#x3D;&#x60;), along with the less than/greater than operators (&#x60;&lt;&#x60;, &#x60;&lt;&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;&gt;&#x3D;&#x60;). Note that there is no inequality (&#x60;!&#x3D;&#x60;) operator. You can prepend the &#x60;NOT&#x60; operator to an expression to negate it. * A date field value must be written in the &#x60;yyyy-mm-dd&#x60; format. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (&#x60;&#x3D;&#x60;) , along with the less than/greater than operators (&#x60;&lt;&#x60;, &#x60;&lt;&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;&gt;&#x3D;&#x60;). Note that there is no inequality (&#x60;!&#x3D;&#x60;) operator. You can prepend the &#x60;NOT&#x60; operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding &#x60;AND&#x60; or &#x60;OR&#x60; operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, and is just another part of the character string to be matched. You can prepend the &#x60;NOT&#x60; operator to an expression to negate it. The following fields and functions are available for filtering: * &#x60;message_type&#x60;, from the MSH-9.1 field. For example, &#x60;NOT message_type &#x3D; \&quot;ADT\&quot;&#x60;. * &#x60;send_date&#x60; or &#x60;sendDate&#x60;, the &#x60;yyyy-mm-dd&#x60; date the message was sent in the dataset&#39;s time_zone, from the MSH-7 segment. For example, &#x60;send_date &lt; \&quot;2017-01-02\&quot;&#x60;. * &#x60;send_time&#x60;, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, &#x60;send_time &lt; \&quot;2017-01-02T00:00:00-05:00\&quot;&#x60;. * &#x60;create_time&#x60;, the timestamp when the message was created in the HL7v2 store. Use the RFC3339 time format for comparisons. For example, &#x60;create_time &lt; \&quot;2017-01-02T00:00:00-05:00\&quot;&#x60;. * &#x60;send_facility&#x60;, the care center that the message came from, from the MSH-4 segment. For example, &#x60;send_facility &#x3D; \&quot;ABC\&quot;&#x60;. Note: The filter will be applied to every message in the HL7v2 store whose &#x60;send_time&#x60; lies in the range defined by the &#x60;start_time&#x60; and the &#x60;end_time&#x60;. Even if the filter only matches a small set of messages, the export operation can still take a long time to finish when a lot of messages are between the specified &#x60;start_time&#x60; and &#x60;end_time&#x60; range.
   * @return filter
   */
  @javax.annotation.Nullable
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }


  public ExportMessagesRequest gcsDestination(GcsDestination gcsDestination) {
    this.gcsDestination = gcsDestination;
    return this;
  }

  /**
   * Get gcsDestination
   * @return gcsDestination
   */
  @javax.annotation.Nullable
  public GcsDestination getGcsDestination() {
    return gcsDestination;
  }

  public void setGcsDestination(GcsDestination gcsDestination) {
    this.gcsDestination = gcsDestination;
  }


  public ExportMessagesRequest pubsubDestination(PubsubDestination pubsubDestination) {
    this.pubsubDestination = pubsubDestination;
    return this;
  }

  /**
   * Get pubsubDestination
   * @return pubsubDestination
   */
  @javax.annotation.Nullable
  public PubsubDestination getPubsubDestination() {
    return pubsubDestination;
  }

  public void setPubsubDestination(PubsubDestination pubsubDestination) {
    this.pubsubDestination = pubsubDestination;
  }


  public ExportMessagesRequest startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The start of the range in &#x60;send_time&#x60; (MSH.7, https://www.hl7.org/documentcenter/public_temp_2E58C1F9-1C23-BA17-0C6126475344DA9D/wg/conf/HL7MSH.htm) to process. If not specified, the UNIX epoch (1970-01-01T00:00:00Z) is used. This value has to come before the &#x60;end_time&#x60; defined below. Only messages whose &#x60;send_time&#x60; lies in the range &#x60;start_time&#x60; (inclusive) to &#x60;end_time&#x60; (exclusive) are exported.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportMessagesRequest exportMessagesRequest = (ExportMessagesRequest) o;
    return Objects.equals(this.endTime, exportMessagesRequest.endTime) &&
        Objects.equals(this.filter, exportMessagesRequest.filter) &&
        Objects.equals(this.gcsDestination, exportMessagesRequest.gcsDestination) &&
        Objects.equals(this.pubsubDestination, exportMessagesRequest.pubsubDestination) &&
        Objects.equals(this.startTime, exportMessagesRequest.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, filter, gcsDestination, pubsubDestination, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportMessagesRequest {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    gcsDestination: ").append(toIndentedString(gcsDestination)).append("\n");
    sb.append("    pubsubDestination: ").append(toIndentedString(pubsubDestination)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("filter");
    openapiFields.add("gcsDestination");
    openapiFields.add("pubsubDestination");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportMessagesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportMessagesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportMessagesRequest is not found in the empty JSON string", ExportMessagesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportMessagesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportMessagesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      // validate the optional field `gcsDestination`
      if (jsonObj.get("gcsDestination") != null && !jsonObj.get("gcsDestination").isJsonNull()) {
        GcsDestination.validateJsonElement(jsonObj.get("gcsDestination"));
      }
      // validate the optional field `pubsubDestination`
      if (jsonObj.get("pubsubDestination") != null && !jsonObj.get("pubsubDestination").isJsonNull()) {
        PubsubDestination.validateJsonElement(jsonObj.get("pubsubDestination"));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportMessagesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportMessagesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportMessagesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportMessagesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportMessagesRequest>() {
           @Override
           public void write(JsonWriter out, ExportMessagesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportMessagesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportMessagesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportMessagesRequest
   * @throws IOException if the JSON string is invalid with respect to ExportMessagesRequest
   */
  public static ExportMessagesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportMessagesRequest.class);
  }

  /**
   * Convert an instance of ExportMessagesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

