/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudHealthcareV1DicomGcsSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Imports data into the specified DICOM store. Returns an error if any of the files to import are not DICOM files. This API accepts duplicate DICOM instances by ignoring the newly-pushed instance. It does not overwrite.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:13.605175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportDicomDataRequest {
  public static final String SERIALIZED_NAME_GCS_SOURCE = "gcsSource";
  @SerializedName(SERIALIZED_NAME_GCS_SOURCE)
  private GoogleCloudHealthcareV1DicomGcsSource gcsSource;

  public ImportDicomDataRequest() {
  }

  public ImportDicomDataRequest gcsSource(GoogleCloudHealthcareV1DicomGcsSource gcsSource) {
    this.gcsSource = gcsSource;
    return this;
  }

  /**
   * Get gcsSource
   * @return gcsSource
   */
  @javax.annotation.Nullable
  public GoogleCloudHealthcareV1DicomGcsSource getGcsSource() {
    return gcsSource;
  }

  public void setGcsSource(GoogleCloudHealthcareV1DicomGcsSource gcsSource) {
    this.gcsSource = gcsSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportDicomDataRequest importDicomDataRequest = (ImportDicomDataRequest) o;
    return Objects.equals(this.gcsSource, importDicomDataRequest.gcsSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gcsSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportDicomDataRequest {\n");
    sb.append("    gcsSource: ").append(toIndentedString(gcsSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gcsSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportDicomDataRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportDicomDataRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportDicomDataRequest is not found in the empty JSON string", ImportDicomDataRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportDicomDataRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportDicomDataRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `gcsSource`
      if (jsonObj.get("gcsSource") != null && !jsonObj.get("gcsSource").isJsonNull()) {
        GoogleCloudHealthcareV1DicomGcsSource.validateJsonElement(jsonObj.get("gcsSource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportDicomDataRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportDicomDataRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportDicomDataRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportDicomDataRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportDicomDataRequest>() {
           @Override
           public void write(JsonWriter out, ImportDicomDataRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportDicomDataRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportDicomDataRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportDicomDataRequest
   * @throws IOException if the JSON string is invalid with respect to ImportDicomDataRequest
   */
  public static ImportDicomDataRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportDicomDataRequest.class);
  }

  /**
   * Convert an instance of ImportDicomDataRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

