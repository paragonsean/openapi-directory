/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DeidentifyConfig;
import org.openapitools.client.model.FhirFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Creates a new FHIR store with sensitive information de-identified.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:13.605175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeidentifyFhirStoreRequest {
  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private DeidentifyConfig config;

  public static final String SERIALIZED_NAME_DESTINATION_STORE = "destinationStore";
  @SerializedName(SERIALIZED_NAME_DESTINATION_STORE)
  private String destinationStore;

  public static final String SERIALIZED_NAME_GCS_CONFIG_URI = "gcsConfigUri";
  @SerializedName(SERIALIZED_NAME_GCS_CONFIG_URI)
  private String gcsConfigUri;

  public static final String SERIALIZED_NAME_RESOURCE_FILTER = "resourceFilter";
  @SerializedName(SERIALIZED_NAME_RESOURCE_FILTER)
  private FhirFilter resourceFilter;

  public static final String SERIALIZED_NAME_SKIP_MODIFIED_RESOURCES = "skipModifiedResources";
  @SerializedName(SERIALIZED_NAME_SKIP_MODIFIED_RESOURCES)
  private Boolean skipModifiedResources;

  public DeidentifyFhirStoreRequest() {
  }

  public DeidentifyFhirStoreRequest config(DeidentifyConfig config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  public DeidentifyConfig getConfig() {
    return config;
  }

  public void setConfig(DeidentifyConfig config) {
    this.config = config;
  }


  public DeidentifyFhirStoreRequest destinationStore(String destinationStore) {
    this.destinationStore = destinationStore;
    return this;
  }

  /**
   * Required. The name of the FHIR store to create and write the redacted data to. For example, &#x60;projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}&#x60;. * The destination dataset must exist. * The source dataset and destination dataset must both reside in the same location. De-identifying data across multiple locations is not supported. * The destination FHIR store must exist. * The caller must have the healthcare.fhirResources.update permission to write to the destination FHIR store.
   * @return destinationStore
   */
  @javax.annotation.Nullable
  public String getDestinationStore() {
    return destinationStore;
  }

  public void setDestinationStore(String destinationStore) {
    this.destinationStore = destinationStore;
  }


  public DeidentifyFhirStoreRequest gcsConfigUri(String gcsConfigUri) {
    this.gcsConfigUri = gcsConfigUri;
    return this;
  }

  /**
   * Cloud Storage location to read the JSON cloud.healthcare.deidentify.DeidentifyConfig from, overriding the default config. Must be of the form &#x60;gs://{bucket_id}/path/to/object&#x60;. The Cloud Storage location must grant the Cloud IAM role &#x60;roles/storage.objectViewer&#x60; to the project&#39;s Cloud Healthcare Service Agent service account. Only one of &#x60;config&#x60; and &#x60;gcs_config_uri&#x60; can be specified.
   * @return gcsConfigUri
   */
  @javax.annotation.Nullable
  public String getGcsConfigUri() {
    return gcsConfigUri;
  }

  public void setGcsConfigUri(String gcsConfigUri) {
    this.gcsConfigUri = gcsConfigUri;
  }


  public DeidentifyFhirStoreRequest resourceFilter(FhirFilter resourceFilter) {
    this.resourceFilter = resourceFilter;
    return this;
  }

  /**
   * Get resourceFilter
   * @return resourceFilter
   */
  @javax.annotation.Nullable
  public FhirFilter getResourceFilter() {
    return resourceFilter;
  }

  public void setResourceFilter(FhirFilter resourceFilter) {
    this.resourceFilter = resourceFilter;
  }


  public DeidentifyFhirStoreRequest skipModifiedResources(Boolean skipModifiedResources) {
    this.skipModifiedResources = skipModifiedResources;
    return this;
  }

  /**
   * If true, skips resources that are created or modified after the de-identify operation is created.
   * @return skipModifiedResources
   */
  @javax.annotation.Nullable
  public Boolean getSkipModifiedResources() {
    return skipModifiedResources;
  }

  public void setSkipModifiedResources(Boolean skipModifiedResources) {
    this.skipModifiedResources = skipModifiedResources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeidentifyFhirStoreRequest deidentifyFhirStoreRequest = (DeidentifyFhirStoreRequest) o;
    return Objects.equals(this.config, deidentifyFhirStoreRequest.config) &&
        Objects.equals(this.destinationStore, deidentifyFhirStoreRequest.destinationStore) &&
        Objects.equals(this.gcsConfigUri, deidentifyFhirStoreRequest.gcsConfigUri) &&
        Objects.equals(this.resourceFilter, deidentifyFhirStoreRequest.resourceFilter) &&
        Objects.equals(this.skipModifiedResources, deidentifyFhirStoreRequest.skipModifiedResources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, destinationStore, gcsConfigUri, resourceFilter, skipModifiedResources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeidentifyFhirStoreRequest {\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    destinationStore: ").append(toIndentedString(destinationStore)).append("\n");
    sb.append("    gcsConfigUri: ").append(toIndentedString(gcsConfigUri)).append("\n");
    sb.append("    resourceFilter: ").append(toIndentedString(resourceFilter)).append("\n");
    sb.append("    skipModifiedResources: ").append(toIndentedString(skipModifiedResources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("config");
    openapiFields.add("destinationStore");
    openapiFields.add("gcsConfigUri");
    openapiFields.add("resourceFilter");
    openapiFields.add("skipModifiedResources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeidentifyFhirStoreRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeidentifyFhirStoreRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeidentifyFhirStoreRequest is not found in the empty JSON string", DeidentifyFhirStoreRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeidentifyFhirStoreRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeidentifyFhirStoreRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `config`
      if (jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull()) {
        DeidentifyConfig.validateJsonElement(jsonObj.get("config"));
      }
      if ((jsonObj.get("destinationStore") != null && !jsonObj.get("destinationStore").isJsonNull()) && !jsonObj.get("destinationStore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationStore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationStore").toString()));
      }
      if ((jsonObj.get("gcsConfigUri") != null && !jsonObj.get("gcsConfigUri").isJsonNull()) && !jsonObj.get("gcsConfigUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcsConfigUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcsConfigUri").toString()));
      }
      // validate the optional field `resourceFilter`
      if (jsonObj.get("resourceFilter") != null && !jsonObj.get("resourceFilter").isJsonNull()) {
        FhirFilter.validateJsonElement(jsonObj.get("resourceFilter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeidentifyFhirStoreRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeidentifyFhirStoreRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeidentifyFhirStoreRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeidentifyFhirStoreRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DeidentifyFhirStoreRequest>() {
           @Override
           public void write(JsonWriter out, DeidentifyFhirStoreRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeidentifyFhirStoreRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeidentifyFhirStoreRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeidentifyFhirStoreRequest
   * @throws IOException if the JSON string is invalid with respect to DeidentifyFhirStoreRequest
   */
  public static DeidentifyFhirStoreRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeidentifyFhirStoreRequest.class);
  }

  /**
   * Convert an instance of DeidentifyFhirStoreRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

