/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies where to send notifications upon changes to a data store.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:13.605175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NotificationConfig {
  public static final String SERIALIZED_NAME_PUBSUB_TOPIC = "pubsubTopic";
  @SerializedName(SERIALIZED_NAME_PUBSUB_TOPIC)
  private String pubsubTopic;

  public static final String SERIALIZED_NAME_SEND_FOR_BULK_IMPORT = "sendForBulkImport";
  @SerializedName(SERIALIZED_NAME_SEND_FOR_BULK_IMPORT)
  private Boolean sendForBulkImport;

  public NotificationConfig() {
  }

  public NotificationConfig pubsubTopic(String pubsubTopic) {
    this.pubsubTopic = pubsubTopic;
    return this;
  }

  /**
   * The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. PubsubMessage.Data contains the resource name. PubsubMessage.MessageId is the ID of this message. It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message was published. Notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can&#39;t be published to Pub/Sub, errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). If the number of errors exceeds a certain rate, some aren&#39;t submitted. Note that not all operations trigger notifications, see [Configuring Pub/Sub notifications](https://cloud.google.com/healthcare/docs/how-tos/pubsub) for specific details.
   * @return pubsubTopic
   */
  @javax.annotation.Nullable
  public String getPubsubTopic() {
    return pubsubTopic;
  }

  public void setPubsubTopic(String pubsubTopic) {
    this.pubsubTopic = pubsubTopic;
  }


  public NotificationConfig sendForBulkImport(Boolean sendForBulkImport) {
    this.sendForBulkImport = sendForBulkImport;
    return this;
  }

  /**
   * Indicates whether or not to send Pub/Sub notifications on bulk import. Only supported for DICOM imports.
   * @return sendForBulkImport
   */
  @javax.annotation.Nullable
  public Boolean getSendForBulkImport() {
    return sendForBulkImport;
  }

  public void setSendForBulkImport(Boolean sendForBulkImport) {
    this.sendForBulkImport = sendForBulkImport;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationConfig notificationConfig = (NotificationConfig) o;
    return Objects.equals(this.pubsubTopic, notificationConfig.pubsubTopic) &&
        Objects.equals(this.sendForBulkImport, notificationConfig.sendForBulkImport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pubsubTopic, sendForBulkImport);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationConfig {\n");
    sb.append("    pubsubTopic: ").append(toIndentedString(pubsubTopic)).append("\n");
    sb.append("    sendForBulkImport: ").append(toIndentedString(sendForBulkImport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pubsubTopic");
    openapiFields.add("sendForBulkImport");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationConfig is not found in the empty JSON string", NotificationConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotificationConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pubsubTopic") != null && !jsonObj.get("pubsubTopic").isJsonNull()) && !jsonObj.get("pubsubTopic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pubsubTopic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pubsubTopic").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationConfig>() {
           @Override
           public void write(JsonWriter out, NotificationConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationConfig
   * @throws IOException if the JSON string is invalid with respect to NotificationConfig
   */
  public static NotificationConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationConfig.class);
  }

  /**
   * Convert an instance of NotificationConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

