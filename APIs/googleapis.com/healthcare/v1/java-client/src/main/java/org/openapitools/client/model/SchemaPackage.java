/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Hl7SchemaConfig;
import org.openapitools.client.model.Hl7TypesConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A schema package contains a set of schemas and type definitions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:13.605175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SchemaPackage {
  public static final String SERIALIZED_NAME_IGNORE_MIN_OCCURS = "ignoreMinOccurs";
  @SerializedName(SERIALIZED_NAME_IGNORE_MIN_OCCURS)
  private Boolean ignoreMinOccurs;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<Hl7SchemaConfig> schemas = new ArrayList<>();

  /**
   * Determines how messages that fail to parse are handled.
   */
  @JsonAdapter(SchematizedParsingTypeEnum.Adapter.class)
  public enum SchematizedParsingTypeEnum {
    SCHEMATIZED_PARSING_TYPE_UNSPECIFIED("SCHEMATIZED_PARSING_TYPE_UNSPECIFIED"),
    
    SOFT_FAIL("SOFT_FAIL"),
    
    HARD_FAIL("HARD_FAIL");

    private String value;

    SchematizedParsingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SchematizedParsingTypeEnum fromValue(String value) {
      for (SchematizedParsingTypeEnum b : SchematizedParsingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SchematizedParsingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SchematizedParsingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SchematizedParsingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SchematizedParsingTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SchematizedParsingTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCHEMATIZED_PARSING_TYPE = "schematizedParsingType";
  @SerializedName(SERIALIZED_NAME_SCHEMATIZED_PARSING_TYPE)
  private SchematizedParsingTypeEnum schematizedParsingType;

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List<Hl7TypesConfig> types = new ArrayList<>();

  /**
   * Determines how unexpected segments (segments not matched to the schema) are handled.
   */
  @JsonAdapter(UnexpectedSegmentHandlingEnum.Adapter.class)
  public enum UnexpectedSegmentHandlingEnum {
    UNEXPECTED_SEGMENT_HANDLING_MODE_UNSPECIFIED("UNEXPECTED_SEGMENT_HANDLING_MODE_UNSPECIFIED"),
    
    FAIL("FAIL"),
    
    SKIP("SKIP"),
    
    PARSE("PARSE");

    private String value;

    UnexpectedSegmentHandlingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnexpectedSegmentHandlingEnum fromValue(String value) {
      for (UnexpectedSegmentHandlingEnum b : UnexpectedSegmentHandlingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnexpectedSegmentHandlingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnexpectedSegmentHandlingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnexpectedSegmentHandlingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnexpectedSegmentHandlingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UnexpectedSegmentHandlingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UNEXPECTED_SEGMENT_HANDLING = "unexpectedSegmentHandling";
  @SerializedName(SERIALIZED_NAME_UNEXPECTED_SEGMENT_HANDLING)
  private UnexpectedSegmentHandlingEnum unexpectedSegmentHandling;

  public SchemaPackage() {
  }

  public SchemaPackage ignoreMinOccurs(Boolean ignoreMinOccurs) {
    this.ignoreMinOccurs = ignoreMinOccurs;
    return this;
  }

  /**
   * Flag to ignore all min_occurs restrictions in the schema. This means that incoming messages can omit any group, segment, field, component, or subcomponent.
   * @return ignoreMinOccurs
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreMinOccurs() {
    return ignoreMinOccurs;
  }

  public void setIgnoreMinOccurs(Boolean ignoreMinOccurs) {
    this.ignoreMinOccurs = ignoreMinOccurs;
  }


  public SchemaPackage schemas(List<Hl7SchemaConfig> schemas) {
    this.schemas = schemas;
    return this;
  }

  public SchemaPackage addSchemasItem(Hl7SchemaConfig schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

  /**
   * Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message.
   * @return schemas
   */
  @javax.annotation.Nullable
  public List<Hl7SchemaConfig> getSchemas() {
    return schemas;
  }

  public void setSchemas(List<Hl7SchemaConfig> schemas) {
    this.schemas = schemas;
  }


  public SchemaPackage schematizedParsingType(SchematizedParsingTypeEnum schematizedParsingType) {
    this.schematizedParsingType = schematizedParsingType;
    return this;
  }

  /**
   * Determines how messages that fail to parse are handled.
   * @return schematizedParsingType
   */
  @javax.annotation.Nullable
  public SchematizedParsingTypeEnum getSchematizedParsingType() {
    return schematizedParsingType;
  }

  public void setSchematizedParsingType(SchematizedParsingTypeEnum schematizedParsingType) {
    this.schematizedParsingType = schematizedParsingType;
  }


  public SchemaPackage types(List<Hl7TypesConfig> types) {
    this.types = types;
    return this;
  }

  public SchemaPackage addTypesItem(Hl7TypesConfig typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

  /**
   * Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message.
   * @return types
   */
  @javax.annotation.Nullable
  public List<Hl7TypesConfig> getTypes() {
    return types;
  }

  public void setTypes(List<Hl7TypesConfig> types) {
    this.types = types;
  }


  public SchemaPackage unexpectedSegmentHandling(UnexpectedSegmentHandlingEnum unexpectedSegmentHandling) {
    this.unexpectedSegmentHandling = unexpectedSegmentHandling;
    return this;
  }

  /**
   * Determines how unexpected segments (segments not matched to the schema) are handled.
   * @return unexpectedSegmentHandling
   */
  @javax.annotation.Nullable
  public UnexpectedSegmentHandlingEnum getUnexpectedSegmentHandling() {
    return unexpectedSegmentHandling;
  }

  public void setUnexpectedSegmentHandling(UnexpectedSegmentHandlingEnum unexpectedSegmentHandling) {
    this.unexpectedSegmentHandling = unexpectedSegmentHandling;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaPackage schemaPackage = (SchemaPackage) o;
    return Objects.equals(this.ignoreMinOccurs, schemaPackage.ignoreMinOccurs) &&
        Objects.equals(this.schemas, schemaPackage.schemas) &&
        Objects.equals(this.schematizedParsingType, schemaPackage.schematizedParsingType) &&
        Objects.equals(this.types, schemaPackage.types) &&
        Objects.equals(this.unexpectedSegmentHandling, schemaPackage.unexpectedSegmentHandling);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ignoreMinOccurs, schemas, schematizedParsingType, types, unexpectedSegmentHandling);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaPackage {\n");
    sb.append("    ignoreMinOccurs: ").append(toIndentedString(ignoreMinOccurs)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    schematizedParsingType: ").append(toIndentedString(schematizedParsingType)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    unexpectedSegmentHandling: ").append(toIndentedString(unexpectedSegmentHandling)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ignoreMinOccurs");
    openapiFields.add("schemas");
    openapiFields.add("schematizedParsingType");
    openapiFields.add("types");
    openapiFields.add("unexpectedSegmentHandling");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SchemaPackage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SchemaPackage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SchemaPackage is not found in the empty JSON string", SchemaPackage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SchemaPackage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SchemaPackage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonNull()) {
        JsonArray jsonArrayschemas = jsonObj.getAsJsonArray("schemas");
        if (jsonArrayschemas != null) {
          // ensure the json data is an array
          if (!jsonObj.get("schemas").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
          }

          // validate the optional field `schemas` (array)
          for (int i = 0; i < jsonArrayschemas.size(); i++) {
            Hl7SchemaConfig.validateJsonElement(jsonArrayschemas.get(i));
          };
        }
      }
      if ((jsonObj.get("schematizedParsingType") != null && !jsonObj.get("schematizedParsingType").isJsonNull()) && !jsonObj.get("schematizedParsingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schematizedParsingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schematizedParsingType").toString()));
      }
      // validate the optional field `schematizedParsingType`
      if (jsonObj.get("schematizedParsingType") != null && !jsonObj.get("schematizedParsingType").isJsonNull()) {
        SchematizedParsingTypeEnum.validateJsonElement(jsonObj.get("schematizedParsingType"));
      }
      if (jsonObj.get("types") != null && !jsonObj.get("types").isJsonNull()) {
        JsonArray jsonArraytypes = jsonObj.getAsJsonArray("types");
        if (jsonArraytypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("types").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string but got `%s`", jsonObj.get("types").toString()));
          }

          // validate the optional field `types` (array)
          for (int i = 0; i < jsonArraytypes.size(); i++) {
            Hl7TypesConfig.validateJsonElement(jsonArraytypes.get(i));
          };
        }
      }
      if ((jsonObj.get("unexpectedSegmentHandling") != null && !jsonObj.get("unexpectedSegmentHandling").isJsonNull()) && !jsonObj.get("unexpectedSegmentHandling").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unexpectedSegmentHandling` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unexpectedSegmentHandling").toString()));
      }
      // validate the optional field `unexpectedSegmentHandling`
      if (jsonObj.get("unexpectedSegmentHandling") != null && !jsonObj.get("unexpectedSegmentHandling").isJsonNull()) {
        UnexpectedSegmentHandlingEnum.validateJsonElement(jsonObj.get("unexpectedSegmentHandling"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SchemaPackage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SchemaPackage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SchemaPackage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SchemaPackage.class));

       return (TypeAdapter<T>) new TypeAdapter<SchemaPackage>() {
           @Override
           public void write(JsonWriter out, SchemaPackage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SchemaPackage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SchemaPackage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SchemaPackage
   * @throws IOException if the JSON string is invalid with respect to SchemaPackage
   */
  public static SchemaPackage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SchemaPackage.class);
  }

  /**
   * Convert an instance of SchemaPackage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

