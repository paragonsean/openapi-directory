/*
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A client-defined consent attribute.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:13.605175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttributeDefinition {
  public static final String SERIALIZED_NAME_ALLOWED_VALUES = "allowedValues";
  @SerializedName(SERIALIZED_NAME_ALLOWED_VALUES)
  private List<String> allowedValues = new ArrayList<>();

  /**
   * Required. The category of the attribute. The value of this field cannot be changed after creation.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    CATEGORY_UNSPECIFIED("CATEGORY_UNSPECIFIED"),
    
    RESOURCE("RESOURCE"),
    
    REQUEST("REQUEST");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_CONSENT_DEFAULT_VALUES = "consentDefaultValues";
  @SerializedName(SERIALIZED_NAME_CONSENT_DEFAULT_VALUES)
  private List<String> consentDefaultValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_MAPPING_DEFAULT_VALUE = "dataMappingDefaultValue";
  @SerializedName(SERIALIZED_NAME_DATA_MAPPING_DEFAULT_VALUE)
  private String dataMappingDefaultValue;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public AttributeDefinition() {
  }

  public AttributeDefinition allowedValues(List<String> allowedValues) {
    this.allowedValues = allowedValues;
    return this;
  }

  public AttributeDefinition addAllowedValuesItem(String allowedValuesItem) {
    if (this.allowedValues == null) {
      this.allowedValues = new ArrayList<>();
    }
    this.allowedValues.add(allowedValuesItem);
    return this;
  }

  /**
   * Required. Possible values for the attribute. The number of allowed values must not exceed 500. An empty list is invalid. The list can only be expanded after creation.
   * @return allowedValues
   */
  @javax.annotation.Nullable
  public List<String> getAllowedValues() {
    return allowedValues;
  }

  public void setAllowedValues(List<String> allowedValues) {
    this.allowedValues = allowedValues;
  }


  public AttributeDefinition category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * Required. The category of the attribute. The value of this field cannot be changed after creation.
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public AttributeDefinition consentDefaultValues(List<String> consentDefaultValues) {
    this.consentDefaultValues = consentDefaultValues;
    return this;
  }

  public AttributeDefinition addConsentDefaultValuesItem(String consentDefaultValuesItem) {
    if (this.consentDefaultValues == null) {
      this.consentDefaultValues = new ArrayList<>();
    }
    this.consentDefaultValues.add(consentDefaultValuesItem);
    return this;
  }

  /**
   * Optional. Default values of the attribute in Consents. If no default values are specified, it defaults to an empty value.
   * @return consentDefaultValues
   */
  @javax.annotation.Nullable
  public List<String> getConsentDefaultValues() {
    return consentDefaultValues;
  }

  public void setConsentDefaultValues(List<String> consentDefaultValues) {
    this.consentDefaultValues = consentDefaultValues;
  }


  public AttributeDefinition dataMappingDefaultValue(String dataMappingDefaultValue) {
    this.dataMappingDefaultValue = dataMappingDefaultValue;
    return this;
  }

  /**
   * Optional. Default value of the attribute in User data mappings. If no default value is specified, it defaults to an empty value. This field is only applicable to attributes of the category &#x60;RESOURCE&#x60;.
   * @return dataMappingDefaultValue
   */
  @javax.annotation.Nullable
  public String getDataMappingDefaultValue() {
    return dataMappingDefaultValue;
  }

  public void setDataMappingDefaultValue(String dataMappingDefaultValue) {
    this.dataMappingDefaultValue = dataMappingDefaultValue;
  }


  public AttributeDefinition description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. A description of the attribute.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AttributeDefinition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Identifier. Resource name of the Attribute definition, of the form &#x60;projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/attributeDefinitions/{attribute_definition_id}&#x60;. Cannot be changed after creation.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttributeDefinition attributeDefinition = (AttributeDefinition) o;
    return Objects.equals(this.allowedValues, attributeDefinition.allowedValues) &&
        Objects.equals(this.category, attributeDefinition.category) &&
        Objects.equals(this.consentDefaultValues, attributeDefinition.consentDefaultValues) &&
        Objects.equals(this.dataMappingDefaultValue, attributeDefinition.dataMappingDefaultValue) &&
        Objects.equals(this.description, attributeDefinition.description) &&
        Objects.equals(this.name, attributeDefinition.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedValues, category, consentDefaultValues, dataMappingDefaultValue, description, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttributeDefinition {\n");
    sb.append("    allowedValues: ").append(toIndentedString(allowedValues)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    consentDefaultValues: ").append(toIndentedString(consentDefaultValues)).append("\n");
    sb.append("    dataMappingDefaultValue: ").append(toIndentedString(dataMappingDefaultValue)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedValues");
    openapiFields.add("category");
    openapiFields.add("consentDefaultValues");
    openapiFields.add("dataMappingDefaultValue");
    openapiFields.add("description");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttributeDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttributeDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttributeDefinition is not found in the empty JSON string", AttributeDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttributeDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttributeDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedValues") != null && !jsonObj.get("allowedValues").isJsonNull() && !jsonObj.get("allowedValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedValues` to be an array in the JSON string but got `%s`", jsonObj.get("allowedValues").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryEnum.validateJsonElement(jsonObj.get("category"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("consentDefaultValues") != null && !jsonObj.get("consentDefaultValues").isJsonNull() && !jsonObj.get("consentDefaultValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `consentDefaultValues` to be an array in the JSON string but got `%s`", jsonObj.get("consentDefaultValues").toString()));
      }
      if ((jsonObj.get("dataMappingDefaultValue") != null && !jsonObj.get("dataMappingDefaultValue").isJsonNull()) && !jsonObj.get("dataMappingDefaultValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataMappingDefaultValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataMappingDefaultValue").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttributeDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttributeDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttributeDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttributeDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<AttributeDefinition>() {
           @Override
           public void write(JsonWriter out, AttributeDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttributeDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttributeDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttributeDefinition
   * @throws IOException if the JSON string is invalid with respect to AttributeDefinition
   */
  public static AttributeDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttributeDefinition.class);
  }

  /**
   * Convert an instance of AttributeDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

