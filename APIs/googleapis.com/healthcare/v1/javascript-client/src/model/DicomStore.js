/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudHealthcareV1DicomStreamConfig from './GoogleCloudHealthcareV1DicomStreamConfig';
import NotificationConfig from './NotificationConfig';

/**
 * The DicomStore model module.
 * @module model/DicomStore
 * @version v1
 */
class DicomStore {
    /**
     * Constructs a new <code>DicomStore</code>.
     * Represents a DICOM store.
     * @alias module:model/DicomStore
     */
    constructor() { 
        
        DicomStore.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DicomStore</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DicomStore} obj Optional instance to populate.
     * @return {module:model/DicomStore} The populated <code>DicomStore</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DicomStore();

            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notificationConfig')) {
                obj['notificationConfig'] = NotificationConfig.constructFromObject(data['notificationConfig']);
            }
            if (data.hasOwnProperty('streamConfigs')) {
                obj['streamConfigs'] = ApiClient.convertToType(data['streamConfigs'], [GoogleCloudHealthcareV1DicomStreamConfig]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DicomStore</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DicomStore</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `notificationConfig`
        if (data['notificationConfig']) { // data not null
          NotificationConfig.validateJSON(data['notificationConfig']);
        }
        if (data['streamConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['streamConfigs'])) {
                throw new Error("Expected the field `streamConfigs` to be an array in the JSON data but got " + data['streamConfigs']);
            }
            // validate the optional field `streamConfigs` (array)
            for (const item of data['streamConfigs']) {
                GoogleCloudHealthcareV1DicomStreamConfig.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * User-supplied key-value pairs used to organize DICOM stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
 * @member {Object.<String, String>} labels
 */
DicomStore.prototype['labels'] = undefined;

/**
 * Identifier. Resource name of the DICOM store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
 * @member {String} name
 */
DicomStore.prototype['name'] = undefined;

/**
 * @member {module:model/NotificationConfig} notificationConfig
 */
DicomStore.prototype['notificationConfig'] = undefined;

/**
 * Optional. A list of streaming configs used to configure the destination of streaming exports for every DICOM instance insertion in this DICOM store. After a new config is added to `stream_configs`, DICOM instance insertions are streamed to the new destination. When a config is removed from `stream_configs`, the server stops streaming to that destination. Each config must contain a unique destination.
 * @member {Array.<module:model/GoogleCloudHealthcareV1DicomStreamConfig>} streamConfigs
 */
DicomStore.prototype['streamConfigs'] = undefined;






export default DicomStore;

