/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeidentifiedStoreDestination from './DeidentifiedStoreDestination';
import GoogleCloudHealthcareV1FhirBigQueryDestination from './GoogleCloudHealthcareV1FhirBigQueryDestination';

/**
 * The StreamConfig model module.
 * @module model/StreamConfig
 * @version v1
 */
class StreamConfig {
    /**
     * Constructs a new <code>StreamConfig</code>.
     * Contains configuration for streaming FHIR export.
     * @alias module:model/StreamConfig
     */
    constructor() { 
        
        StreamConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StreamConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StreamConfig} obj Optional instance to populate.
     * @return {module:model/StreamConfig} The populated <code>StreamConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StreamConfig();

            if (data.hasOwnProperty('bigqueryDestination')) {
                obj['bigqueryDestination'] = GoogleCloudHealthcareV1FhirBigQueryDestination.constructFromObject(data['bigqueryDestination']);
            }
            if (data.hasOwnProperty('deidentifiedStoreDestination')) {
                obj['deidentifiedStoreDestination'] = DeidentifiedStoreDestination.constructFromObject(data['deidentifiedStoreDestination']);
            }
            if (data.hasOwnProperty('resourceTypes')) {
                obj['resourceTypes'] = ApiClient.convertToType(data['resourceTypes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StreamConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StreamConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bigqueryDestination`
        if (data['bigqueryDestination']) { // data not null
          GoogleCloudHealthcareV1FhirBigQueryDestination.validateJSON(data['bigqueryDestination']);
        }
        // validate the optional field `deidentifiedStoreDestination`
        if (data['deidentifiedStoreDestination']) { // data not null
          DeidentifiedStoreDestination.validateJSON(data['deidentifiedStoreDestination']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['resourceTypes'])) {
            throw new Error("Expected the field `resourceTypes` to be an array in the JSON data but got " + data['resourceTypes']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudHealthcareV1FhirBigQueryDestination} bigqueryDestination
 */
StreamConfig.prototype['bigqueryDestination'] = undefined;

/**
 * @member {module:model/DeidentifiedStoreDestination} deidentifiedStoreDestination
 */
StreamConfig.prototype['deidentifiedStoreDestination'] = undefined;

/**
 * Supply a FHIR resource type (such as \"Patient\" or \"Observation\"). See https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats an empty list as an intent to stream all the supported resource types in this FHIR store.
 * @member {Array.<String>} resourceTypes
 */
StreamConfig.prototype['resourceTypes'] = undefined;






export default StreamConfig;

