/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldMetadata from './FieldMetadata';

/**
 * The FhirConfig model module.
 * @module model/FhirConfig
 * @version v1
 */
class FhirConfig {
    /**
     * Constructs a new <code>FhirConfig</code>.
     * Specifies how to handle de-identification of a FHIR store.
     * @alias module:model/FhirConfig
     */
    constructor() { 
        
        FhirConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FhirConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FhirConfig} obj Optional instance to populate.
     * @return {module:model/FhirConfig} The populated <code>FhirConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FhirConfig();

            if (data.hasOwnProperty('defaultKeepExtensions')) {
                obj['defaultKeepExtensions'] = ApiClient.convertToType(data['defaultKeepExtensions'], 'Boolean');
            }
            if (data.hasOwnProperty('fieldMetadataList')) {
                obj['fieldMetadataList'] = ApiClient.convertToType(data['fieldMetadataList'], [FieldMetadata]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FhirConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FhirConfig</code>.
     */
    static validateJSON(data) {
        if (data['fieldMetadataList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fieldMetadataList'])) {
                throw new Error("Expected the field `fieldMetadataList` to be an array in the JSON data but got " + data['fieldMetadataList']);
            }
            // validate the optional field `fieldMetadataList` (array)
            for (const item of data['fieldMetadataList']) {
                FieldMetadata.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The behaviour for handling FHIR extensions that aren't otherwise specified for de-identification. If true, all extensions are preserved during de-identification by default. If false or unspecified, all extensions are removed during de-identification by default.
 * @member {Boolean} defaultKeepExtensions
 */
FhirConfig.prototype['defaultKeepExtensions'] = undefined;

/**
 * Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata is passed through to the output dataset unmodified. All extensions will be processed according to `default_keep_extensions`.
 * @member {Array.<module:model/FieldMetadata>} fieldMetadataList
 */
FhirConfig.prototype['fieldMetadataList'] = undefined;






export default FhirConfig;

