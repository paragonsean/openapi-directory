/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FhirStoreMetric model module.
 * @module model/FhirStoreMetric
 * @version v1
 */
class FhirStoreMetric {
    /**
     * Constructs a new <code>FhirStoreMetric</code>.
     * Count of resources and total storage size by type for a given FHIR store.
     * @alias module:model/FhirStoreMetric
     */
    constructor() { 
        
        FhirStoreMetric.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FhirStoreMetric</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FhirStoreMetric} obj Optional instance to populate.
     * @return {module:model/FhirStoreMetric} The populated <code>FhirStoreMetric</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FhirStoreMetric();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'String');
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = ApiClient.convertToType(data['resourceType'], 'String');
            }
            if (data.hasOwnProperty('structuredStorageSizeBytes')) {
                obj['structuredStorageSizeBytes'] = ApiClient.convertToType(data['structuredStorageSizeBytes'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FhirStoreMetric</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FhirStoreMetric</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['count'] && !(typeof data['count'] === 'string' || data['count'] instanceof String)) {
            throw new Error("Expected the field `count` to be a primitive type in the JSON string but got " + data['count']);
        }
        // ensure the json data is a string
        if (data['resourceType'] && !(typeof data['resourceType'] === 'string' || data['resourceType'] instanceof String)) {
            throw new Error("Expected the field `resourceType` to be a primitive type in the JSON string but got " + data['resourceType']);
        }
        // ensure the json data is a string
        if (data['structuredStorageSizeBytes'] && !(typeof data['structuredStorageSizeBytes'] === 'string' || data['structuredStorageSizeBytes'] instanceof String)) {
            throw new Error("Expected the field `structuredStorageSizeBytes` to be a primitive type in the JSON string but got " + data['structuredStorageSizeBytes']);
        }

        return true;
    }


}



/**
 * The total count of FHIR resources in the store of this resource type.
 * @member {String} count
 */
FhirStoreMetric.prototype['count'] = undefined;

/**
 * The FHIR resource type this metric applies to.
 * @member {String} resourceType
 */
FhirStoreMetric.prototype['resourceType'] = undefined;

/**
 * The total amount of structured storage used by FHIR resources of this resource type in the store.
 * @member {String} structuredStorageSizeBytes
 */
FhirStoreMetric.prototype['structuredStorageSizeBytes'] = undefined;






export default FhirStoreMetric;

