/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TimePartitioning model module.
 * @module model/TimePartitioning
 * @version v1
 */
class TimePartitioning {
    /**
     * Constructs a new <code>TimePartitioning</code>.
     * Configuration for FHIR BigQuery time-partitioned tables.
     * @alias module:model/TimePartitioning
     */
    constructor() { 
        
        TimePartitioning.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TimePartitioning</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimePartitioning} obj Optional instance to populate.
     * @return {module:model/TimePartitioning} The populated <code>TimePartitioning</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimePartitioning();

            if (data.hasOwnProperty('expirationMs')) {
                obj['expirationMs'] = ApiClient.convertToType(data['expirationMs'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimePartitioning</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimePartitioning</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['expirationMs'] && !(typeof data['expirationMs'] === 'string' || data['expirationMs'] instanceof String)) {
            throw new Error("Expected the field `expirationMs` to be a primitive type in the JSON string but got " + data['expirationMs']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Number of milliseconds for which to keep the storage for a partition.
 * @member {String} expirationMs
 */
TimePartitioning.prototype['expirationMs'] = undefined;

/**
 * Type of partitioning.
 * @member {module:model/TimePartitioning.TypeEnum} type
 */
TimePartitioning.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
TimePartitioning['TypeEnum'] = {

    /**
     * value: "PARTITION_TYPE_UNSPECIFIED"
     * @const
     */
    "PARTITION_TYPE_UNSPECIFIED": "PARTITION_TYPE_UNSPECIFIED",

    /**
     * value: "HOUR"
     * @const
     */
    "HOUR": "HOUR",

    /**
     * value: "DAY"
     * @const
     */
    "DAY": "DAY",

    /**
     * value: "MONTH"
     * @const
     */
    "MONTH": "MONTH",

    /**
     * value: "YEAR"
     * @const
     */
    "YEAR": "YEAR"
};



export default TimePartitioning;

