/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConsentEvaluation model module.
 * @module model/ConsentEvaluation
 * @version v1
 */
class ConsentEvaluation {
    /**
     * Constructs a new <code>ConsentEvaluation</code>.
     * The detailed evaluation of a particular Consent.
     * @alias module:model/ConsentEvaluation
     */
    constructor() { 
        
        ConsentEvaluation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConsentEvaluation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConsentEvaluation} obj Optional instance to populate.
     * @return {module:model/ConsentEvaluation} The populated <code>ConsentEvaluation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConsentEvaluation();

            if (data.hasOwnProperty('evaluationResult')) {
                obj['evaluationResult'] = ApiClient.convertToType(data['evaluationResult'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConsentEvaluation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConsentEvaluation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['evaluationResult'] && !(typeof data['evaluationResult'] === 'string' || data['evaluationResult'] instanceof String)) {
            throw new Error("Expected the field `evaluationResult` to be a primitive type in the JSON string but got " + data['evaluationResult']);
        }

        return true;
    }


}



/**
 * The evaluation result.
 * @member {module:model/ConsentEvaluation.EvaluationResultEnum} evaluationResult
 */
ConsentEvaluation.prototype['evaluationResult'] = undefined;





/**
 * Allowed values for the <code>evaluationResult</code> property.
 * @enum {String}
 * @readonly
 */
ConsentEvaluation['EvaluationResultEnum'] = {

    /**
     * value: "EVALUATION_RESULT_UNSPECIFIED"
     * @const
     */
    "EVALUATION_RESULT_UNSPECIFIED": "EVALUATION_RESULT_UNSPECIFIED",

    /**
     * value: "NOT_APPLICABLE"
     * @const
     */
    "NOT_APPLICABLE": "NOT_APPLICABLE",

    /**
     * value: "NO_MATCHING_POLICY"
     * @const
     */
    "NO_MATCHING_POLICY": "NO_MATCHING_POLICY",

    /**
     * value: "NO_SATISFIED_POLICY"
     * @const
     */
    "NO_SATISFIED_POLICY": "NO_SATISFIED_POLICY",

    /**
     * value: "HAS_SATISFIED_POLICY"
     * @const
     */
    "HAS_SATISFIED_POLICY": "HAS_SATISFIED_POLICY"
};



export default ConsentEvaluation;

