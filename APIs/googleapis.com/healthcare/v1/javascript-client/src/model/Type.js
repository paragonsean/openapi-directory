/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Field from './Field';

/**
 * The Type model module.
 * @module model/Type
 * @version v1
 */
class Type {
    /**
     * Constructs a new <code>Type</code>.
     * A type definition for some HL7v2 type (incl. Segments and Datatypes).
     * @alias module:model/Type
     */
    constructor() { 
        
        Type.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Type</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Type} obj Optional instance to populate.
     * @return {module:model/Type} The populated <code>Type</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Type();

            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [Field]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('primitive')) {
                obj['primitive'] = ApiClient.convertToType(data['primitive'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Type</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Type</code>.
     */
    static validateJSON(data) {
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                Field.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['primitive'] && !(typeof data['primitive'] === 'string' || data['primitive'] instanceof String)) {
            throw new Error("Expected the field `primitive` to be a primitive type in the JSON string but got " + data['primitive']);
        }

        return true;
    }


}



/**
 * The (sub) fields this type has (if not primitive).
 * @member {Array.<module:model/Field>} fields
 */
Type.prototype['fields'] = undefined;

/**
 * The name of this type. This would be the segment or datatype name. For example, \"PID\" or \"XPN\".
 * @member {String} name
 */
Type.prototype['name'] = undefined;

/**
 * If this is a primitive type then this field is the type of the primitive For example, STRING. Leave unspecified for composite types.
 * @member {module:model/Type.PrimitiveEnum} primitive
 */
Type.prototype['primitive'] = undefined;





/**
 * Allowed values for the <code>primitive</code> property.
 * @enum {String}
 * @readonly
 */
Type['PrimitiveEnum'] = {

    /**
     * value: "PRIMITIVE_UNSPECIFIED"
     * @const
     */
    "PRIMITIVE_UNSPECIFIED": "PRIMITIVE_UNSPECIFIED",

    /**
     * value: "STRING"
     * @const
     */
    "STRING": "STRING",

    /**
     * value: "VARIES"
     * @const
     */
    "VARIES": "VARIES",

    /**
     * value: "UNESCAPED_STRING"
     * @const
     */
    "UNESCAPED_STRING": "UNESCAPED_STRING"
};



export default Type;

