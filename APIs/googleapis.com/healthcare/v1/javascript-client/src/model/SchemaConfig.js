/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TimePartitioning from './TimePartitioning';

/**
 * The SchemaConfig model module.
 * @module model/SchemaConfig
 * @version v1
 */
class SchemaConfig {
    /**
     * Constructs a new <code>SchemaConfig</code>.
     * Configuration for the FHIR BigQuery schema. Determines how the server generates the schema.
     * @alias module:model/SchemaConfig
     */
    constructor() { 
        
        SchemaConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SchemaConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SchemaConfig} obj Optional instance to populate.
     * @return {module:model/SchemaConfig} The populated <code>SchemaConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SchemaConfig();

            if (data.hasOwnProperty('lastUpdatedPartitionConfig')) {
                obj['lastUpdatedPartitionConfig'] = TimePartitioning.constructFromObject(data['lastUpdatedPartitionConfig']);
            }
            if (data.hasOwnProperty('recursiveStructureDepth')) {
                obj['recursiveStructureDepth'] = ApiClient.convertToType(data['recursiveStructureDepth'], 'String');
            }
            if (data.hasOwnProperty('schemaType')) {
                obj['schemaType'] = ApiClient.convertToType(data['schemaType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SchemaConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SchemaConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `lastUpdatedPartitionConfig`
        if (data['lastUpdatedPartitionConfig']) { // data not null
          TimePartitioning.validateJSON(data['lastUpdatedPartitionConfig']);
        }
        // ensure the json data is a string
        if (data['recursiveStructureDepth'] && !(typeof data['recursiveStructureDepth'] === 'string' || data['recursiveStructureDepth'] instanceof String)) {
            throw new Error("Expected the field `recursiveStructureDepth` to be a primitive type in the JSON string but got " + data['recursiveStructureDepth']);
        }
        // ensure the json data is a string
        if (data['schemaType'] && !(typeof data['schemaType'] === 'string' || data['schemaType'] instanceof String)) {
            throw new Error("Expected the field `schemaType` to be a primitive type in the JSON string but got " + data['schemaType']);
        }

        return true;
    }


}



/**
 * @member {module:model/TimePartitioning} lastUpdatedPartitionConfig
 */
SchemaConfig.prototype['lastUpdatedPartitionConfig'] = undefined;

/**
 * The depth for all recursive structures in the output analytics schema. For example, `concept` in the CodeSystem resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called `concept.concept` but not `concept.concept.concept`. If not specified or set to 0, the server will use the default value 2. The maximum depth allowed is 5.
 * @member {String} recursiveStructureDepth
 */
SchemaConfig.prototype['recursiveStructureDepth'] = undefined;

/**
 * Specifies the output schema type. Schema type is required.
 * @member {module:model/SchemaConfig.SchemaTypeEnum} schemaType
 */
SchemaConfig.prototype['schemaType'] = undefined;





/**
 * Allowed values for the <code>schemaType</code> property.
 * @enum {String}
 * @readonly
 */
SchemaConfig['SchemaTypeEnum'] = {

    /**
     * value: "SCHEMA_TYPE_UNSPECIFIED"
     * @const
     */
    "SCHEMA_TYPE_UNSPECIFIED": "SCHEMA_TYPE_UNSPECIFIED",

    /**
     * value: "ANALYTICS"
     * @const
     */
    "ANALYTICS": "ANALYTICS",

    /**
     * value: "ANALYTICS_V2"
     * @const
     */
    "ANALYTICS_V2": "ANALYTICS_V2"
};



export default SchemaConfig;

