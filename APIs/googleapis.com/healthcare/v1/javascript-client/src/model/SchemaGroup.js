/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GroupOrSegment from './GroupOrSegment';

/**
 * The SchemaGroup model module.
 * @module model/SchemaGroup
 * @version v1
 */
class SchemaGroup {
    /**
     * Constructs a new <code>SchemaGroup</code>.
     * An HL7v2 logical group construct.
     * @alias module:model/SchemaGroup
     */
    constructor() { 
        
        SchemaGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SchemaGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SchemaGroup} obj Optional instance to populate.
     * @return {module:model/SchemaGroup} The populated <code>SchemaGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SchemaGroup();

            if (data.hasOwnProperty('choice')) {
                obj['choice'] = ApiClient.convertToType(data['choice'], 'Boolean');
            }
            if (data.hasOwnProperty('maxOccurs')) {
                obj['maxOccurs'] = ApiClient.convertToType(data['maxOccurs'], 'Number');
            }
            if (data.hasOwnProperty('members')) {
                obj['members'] = ApiClient.convertToType(data['members'], [GroupOrSegment]);
            }
            if (data.hasOwnProperty('minOccurs')) {
                obj['minOccurs'] = ApiClient.convertToType(data['minOccurs'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SchemaGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SchemaGroup</code>.
     */
    static validateJSON(data) {
        if (data['members']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['members'])) {
                throw new Error("Expected the field `members` to be an array in the JSON data but got " + data['members']);
            }
            // validate the optional field `members` (array)
            for (const item of data['members']) {
                GroupOrSegment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * True indicates that this is a choice group, meaning that only one of its segments can exist in a given message.
 * @member {Boolean} choice
 */
SchemaGroup.prototype['choice'] = undefined;

/**
 * The maximum number of times this group can be repeated. 0 or -1 means unbounded.
 * @member {Number} maxOccurs
 */
SchemaGroup.prototype['maxOccurs'] = undefined;

/**
 * Nested groups and/or segments.
 * @member {Array.<module:model/GroupOrSegment>} members
 */
SchemaGroup.prototype['members'] = undefined;

/**
 * The minimum number of times this group must be present/repeated.
 * @member {Number} minOccurs
 */
SchemaGroup.prototype['minOccurs'] = undefined;

/**
 * The name of this group. For example, \"ORDER_DETAIL\".
 * @member {String} name
 */
SchemaGroup.prototype['name'] = undefined;






export default SchemaGroup;

