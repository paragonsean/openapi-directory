/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SchemaConfig from './SchemaConfig';

/**
 * The GoogleCloudHealthcareV1FhirBigQueryDestination model module.
 * @module model/GoogleCloudHealthcareV1FhirBigQueryDestination
 * @version v1
 */
class GoogleCloudHealthcareV1FhirBigQueryDestination {
    /**
     * Constructs a new <code>GoogleCloudHealthcareV1FhirBigQueryDestination</code>.
     * The configuration for exporting to BigQuery.
     * @alias module:model/GoogleCloudHealthcareV1FhirBigQueryDestination
     */
    constructor() { 
        
        GoogleCloudHealthcareV1FhirBigQueryDestination.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudHealthcareV1FhirBigQueryDestination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudHealthcareV1FhirBigQueryDestination} obj Optional instance to populate.
     * @return {module:model/GoogleCloudHealthcareV1FhirBigQueryDestination} The populated <code>GoogleCloudHealthcareV1FhirBigQueryDestination</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudHealthcareV1FhirBigQueryDestination();

            if (data.hasOwnProperty('datasetUri')) {
                obj['datasetUri'] = ApiClient.convertToType(data['datasetUri'], 'String');
            }
            if (data.hasOwnProperty('force')) {
                obj['force'] = ApiClient.convertToType(data['force'], 'Boolean');
            }
            if (data.hasOwnProperty('schemaConfig')) {
                obj['schemaConfig'] = SchemaConfig.constructFromObject(data['schemaConfig']);
            }
            if (data.hasOwnProperty('writeDisposition')) {
                obj['writeDisposition'] = ApiClient.convertToType(data['writeDisposition'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudHealthcareV1FhirBigQueryDestination</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudHealthcareV1FhirBigQueryDestination</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['datasetUri'] && !(typeof data['datasetUri'] === 'string' || data['datasetUri'] instanceof String)) {
            throw new Error("Expected the field `datasetUri` to be a primitive type in the JSON string but got " + data['datasetUri']);
        }
        // validate the optional field `schemaConfig`
        if (data['schemaConfig']) { // data not null
          SchemaConfig.validateJSON(data['schemaConfig']);
        }
        // ensure the json data is a string
        if (data['writeDisposition'] && !(typeof data['writeDisposition'] === 'string' || data['writeDisposition'] instanceof String)) {
            throw new Error("Expected the field `writeDisposition` to be a primitive type in the JSON string but got " + data['writeDisposition']);
        }

        return true;
    }


}



/**
 * BigQuery URI to an existing dataset, up to 2000 characters long, in the format `bq://projectId.bqDatasetId`.
 * @member {String} datasetUri
 */
GoogleCloudHealthcareV1FhirBigQueryDestination.prototype['datasetUri'] = undefined;

/**
 * If this flag is `TRUE`, all tables are deleted from the dataset before the new exported tables are written. If the flag is not set and the destination dataset contains tables, the export call returns an error. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
 * @member {Boolean} force
 */
GoogleCloudHealthcareV1FhirBigQueryDestination.prototype['force'] = undefined;

/**
 * @member {module:model/SchemaConfig} schemaConfig
 */
GoogleCloudHealthcareV1FhirBigQueryDestination.prototype['schemaConfig'] = undefined;

/**
 * Determines if existing data in the destination dataset is overwritten, appended to, or not written if the tables contain data. If a write_disposition is specified, the `force` parameter is ignored.
 * @member {module:model/GoogleCloudHealthcareV1FhirBigQueryDestination.WriteDispositionEnum} writeDisposition
 */
GoogleCloudHealthcareV1FhirBigQueryDestination.prototype['writeDisposition'] = undefined;





/**
 * Allowed values for the <code>writeDisposition</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudHealthcareV1FhirBigQueryDestination['WriteDispositionEnum'] = {

    /**
     * value: "WRITE_DISPOSITION_UNSPECIFIED"
     * @const
     */
    "DISPOSITION_UNSPECIFIED": "WRITE_DISPOSITION_UNSPECIFIED",

    /**
     * value: "WRITE_EMPTY"
     * @const
     */
    "EMPTY": "WRITE_EMPTY",

    /**
     * value: "WRITE_TRUNCATE"
     * @const
     */
    "TRUNCATE": "WRITE_TRUNCATE",

    /**
     * value: "WRITE_APPEND"
     * @const
     */
    "APPEND": "WRITE_APPEND"
};



export default GoogleCloudHealthcareV1FhirBigQueryDestination;

