/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CharacterMaskConfig from './CharacterMaskConfig';
import CryptoHashConfig from './CryptoHashConfig';
import DateShiftConfig from './DateShiftConfig';

/**
 * The InfoTypeTransformation model module.
 * @module model/InfoTypeTransformation
 * @version v1
 */
class InfoTypeTransformation {
    /**
     * Constructs a new <code>InfoTypeTransformation</code>.
     * A transformation to apply to text that is identified as a specific info_type.
     * @alias module:model/InfoTypeTransformation
     */
    constructor() { 
        
        InfoTypeTransformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InfoTypeTransformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InfoTypeTransformation} obj Optional instance to populate.
     * @return {module:model/InfoTypeTransformation} The populated <code>InfoTypeTransformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InfoTypeTransformation();

            if (data.hasOwnProperty('characterMaskConfig')) {
                obj['characterMaskConfig'] = CharacterMaskConfig.constructFromObject(data['characterMaskConfig']);
            }
            if (data.hasOwnProperty('cryptoHashConfig')) {
                obj['cryptoHashConfig'] = CryptoHashConfig.constructFromObject(data['cryptoHashConfig']);
            }
            if (data.hasOwnProperty('dateShiftConfig')) {
                obj['dateShiftConfig'] = DateShiftConfig.constructFromObject(data['dateShiftConfig']);
            }
            if (data.hasOwnProperty('infoTypes')) {
                obj['infoTypes'] = ApiClient.convertToType(data['infoTypes'], ['String']);
            }
            if (data.hasOwnProperty('redactConfig')) {
                obj['redactConfig'] = ApiClient.convertToType(data['redactConfig'], Object);
            }
            if (data.hasOwnProperty('replaceWithInfoTypeConfig')) {
                obj['replaceWithInfoTypeConfig'] = ApiClient.convertToType(data['replaceWithInfoTypeConfig'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InfoTypeTransformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InfoTypeTransformation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `characterMaskConfig`
        if (data['characterMaskConfig']) { // data not null
          CharacterMaskConfig.validateJSON(data['characterMaskConfig']);
        }
        // validate the optional field `cryptoHashConfig`
        if (data['cryptoHashConfig']) { // data not null
          CryptoHashConfig.validateJSON(data['cryptoHashConfig']);
        }
        // validate the optional field `dateShiftConfig`
        if (data['dateShiftConfig']) { // data not null
          DateShiftConfig.validateJSON(data['dateShiftConfig']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['infoTypes'])) {
            throw new Error("Expected the field `infoTypes` to be an array in the JSON data but got " + data['infoTypes']);
        }

        return true;
    }


}



/**
 * @member {module:model/CharacterMaskConfig} characterMaskConfig
 */
InfoTypeTransformation.prototype['characterMaskConfig'] = undefined;

/**
 * @member {module:model/CryptoHashConfig} cryptoHashConfig
 */
InfoTypeTransformation.prototype['cryptoHashConfig'] = undefined;

/**
 * @member {module:model/DateShiftConfig} dateShiftConfig
 */
InfoTypeTransformation.prototype['dateShiftConfig'] = undefined;

/**
 * InfoTypes to apply this transformation to. If this is not specified, the transformation applies to any info_type.
 * @member {Array.<String>} infoTypes
 */
InfoTypeTransformation.prototype['infoTypes'] = undefined;

/**
 * Define how to redact sensitive values. Default behaviour is erase. For example, \"My name is Jane.\" becomes \"My name is .\"
 * @member {Object} redactConfig
 */
InfoTypeTransformation.prototype['redactConfig'] = undefined;

/**
 * When using the INSPECT_AND_TRANSFORM action, each match is replaced with the name of the info_type. For example, \"My name is Jane\" becomes \"My name is [PERSON_NAME].\" The TRANSFORM action is equivalent to redacting.
 * @member {Object} replaceWithInfoTypeConfig
 */
InfoTypeTransformation.prototype['replaceWithInfoTypeConfig'] = undefined;






export default InfoTypeTransformation;

