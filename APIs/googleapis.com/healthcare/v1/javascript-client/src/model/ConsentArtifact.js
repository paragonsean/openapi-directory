/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Image from './Image';
import Signature from './Signature';

/**
 * The ConsentArtifact model module.
 * @module model/ConsentArtifact
 * @version v1
 */
class ConsentArtifact {
    /**
     * Constructs a new <code>ConsentArtifact</code>.
     * Documentation of a user&#39;s consent.
     * @alias module:model/ConsentArtifact
     */
    constructor() { 
        
        ConsentArtifact.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConsentArtifact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConsentArtifact} obj Optional instance to populate.
     * @return {module:model/ConsentArtifact} The populated <code>ConsentArtifact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConsentArtifact();

            if (data.hasOwnProperty('consentContentScreenshots')) {
                obj['consentContentScreenshots'] = ApiClient.convertToType(data['consentContentScreenshots'], [Image]);
            }
            if (data.hasOwnProperty('consentContentVersion')) {
                obj['consentContentVersion'] = ApiClient.convertToType(data['consentContentVersion'], 'String');
            }
            if (data.hasOwnProperty('guardianSignature')) {
                obj['guardianSignature'] = Signature.constructFromObject(data['guardianSignature']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
            if (data.hasOwnProperty('userSignature')) {
                obj['userSignature'] = Signature.constructFromObject(data['userSignature']);
            }
            if (data.hasOwnProperty('witnessSignature')) {
                obj['witnessSignature'] = Signature.constructFromObject(data['witnessSignature']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConsentArtifact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConsentArtifact</code>.
     */
    static validateJSON(data) {
        if (data['consentContentScreenshots']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['consentContentScreenshots'])) {
                throw new Error("Expected the field `consentContentScreenshots` to be an array in the JSON data but got " + data['consentContentScreenshots']);
            }
            // validate the optional field `consentContentScreenshots` (array)
            for (const item of data['consentContentScreenshots']) {
                Image.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['consentContentVersion'] && !(typeof data['consentContentVersion'] === 'string' || data['consentContentVersion'] instanceof String)) {
            throw new Error("Expected the field `consentContentVersion` to be a primitive type in the JSON string but got " + data['consentContentVersion']);
        }
        // validate the optional field `guardianSignature`
        if (data['guardianSignature']) { // data not null
          Signature.validateJSON(data['guardianSignature']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }
        // validate the optional field `userSignature`
        if (data['userSignature']) { // data not null
          Signature.validateJSON(data['userSignature']);
        }
        // validate the optional field `witnessSignature`
        if (data['witnessSignature']) { // data not null
          Signature.validateJSON(data['witnessSignature']);
        }

        return true;
    }


}



/**
 * Optional. Screenshots, PDFs, or other binary information documenting the user's consent.
 * @member {Array.<module:model/Image>} consentContentScreenshots
 */
ConsentArtifact.prototype['consentContentScreenshots'] = undefined;

/**
 * Optional. An string indicating the version of the consent information shown to the user.
 * @member {String} consentContentVersion
 */
ConsentArtifact.prototype['consentContentVersion'] = undefined;

/**
 * @member {module:model/Signature} guardianSignature
 */
ConsentArtifact.prototype['guardianSignature'] = undefined;

/**
 * Optional. Metadata associated with the Consent artifact. For example, the consent locale or user agent version.
 * @member {Object.<String, String>} metadata
 */
ConsentArtifact.prototype['metadata'] = undefined;

/**
 * Identifier. Resource name of the Consent artifact, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`. Cannot be changed after creation.
 * @member {String} name
 */
ConsentArtifact.prototype['name'] = undefined;

/**
 * Required. User's UUID provided by the client.
 * @member {String} userId
 */
ConsentArtifact.prototype['userId'] = undefined;

/**
 * @member {module:model/Signature} userSignature
 */
ConsentArtifact.prototype['userSignature'] = undefined;

/**
 * @member {module:model/Signature} witnessSignature
 */
ConsentArtifact.prototype['witnessSignature'] = undefined;






export default ConsentArtifact;

