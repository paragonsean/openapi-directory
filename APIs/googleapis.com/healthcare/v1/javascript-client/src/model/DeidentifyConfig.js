/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DicomConfig from './DicomConfig';
import FhirConfig from './FhirConfig';
import ImageConfig from './ImageConfig';
import TextConfig from './TextConfig';

/**
 * The DeidentifyConfig model module.
 * @module model/DeidentifyConfig
 * @version v1
 */
class DeidentifyConfig {
    /**
     * Constructs a new <code>DeidentifyConfig</code>.
     * Configures de-id options specific to different types of content. Each submessage customizes the handling of an https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are applied in a nested manner at runtime.
     * @alias module:model/DeidentifyConfig
     */
    constructor() { 
        
        DeidentifyConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeidentifyConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeidentifyConfig} obj Optional instance to populate.
     * @return {module:model/DeidentifyConfig} The populated <code>DeidentifyConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeidentifyConfig();

            if (data.hasOwnProperty('dicom')) {
                obj['dicom'] = DicomConfig.constructFromObject(data['dicom']);
            }
            if (data.hasOwnProperty('fhir')) {
                obj['fhir'] = FhirConfig.constructFromObject(data['fhir']);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ImageConfig.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = TextConfig.constructFromObject(data['text']);
            }
            if (data.hasOwnProperty('useRegionalDataProcessing')) {
                obj['useRegionalDataProcessing'] = ApiClient.convertToType(data['useRegionalDataProcessing'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeidentifyConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeidentifyConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dicom`
        if (data['dicom']) { // data not null
          DicomConfig.validateJSON(data['dicom']);
        }
        // validate the optional field `fhir`
        if (data['fhir']) { // data not null
          FhirConfig.validateJSON(data['fhir']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          ImageConfig.validateJSON(data['image']);
        }
        // validate the optional field `text`
        if (data['text']) { // data not null
          TextConfig.validateJSON(data['text']);
        }

        return true;
    }


}



/**
 * @member {module:model/DicomConfig} dicom
 */
DeidentifyConfig.prototype['dicom'] = undefined;

/**
 * @member {module:model/FhirConfig} fhir
 */
DeidentifyConfig.prototype['fhir'] = undefined;

/**
 * @member {module:model/ImageConfig} image
 */
DeidentifyConfig.prototype['image'] = undefined;

/**
 * @member {module:model/TextConfig} text
 */
DeidentifyConfig.prototype['text'] = undefined;

/**
 * Ensures in-flight data remains in the region of origin during de-identification. Using this option results in a significant reduction of throughput, and is not compatible with `LOCATION` or `ORGANIZATION_NAME` infoTypes. `LOCATION` must be excluded within TextConfig, and must also be excluded within ImageConfig if image redaction is required.
 * @member {Boolean} useRegionalDataProcessing
 */
DeidentifyConfig.prototype['useRegionalDataProcessing'] = undefined;






export default DeidentifyConfig;

