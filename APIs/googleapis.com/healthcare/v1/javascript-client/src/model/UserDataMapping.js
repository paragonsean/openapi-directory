/**
 * Cloud Healthcare API
 * Manage, store, and access healthcare data in Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attribute from './Attribute';

/**
 * The UserDataMapping model module.
 * @module model/UserDataMapping
 * @version v1
 */
class UserDataMapping {
    /**
     * Constructs a new <code>UserDataMapping</code>.
     * Maps a resource to the associated user and Attributes.
     * @alias module:model/UserDataMapping
     */
    constructor() { 
        
        UserDataMapping.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserDataMapping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserDataMapping} obj Optional instance to populate.
     * @return {module:model/UserDataMapping} The populated <code>UserDataMapping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserDataMapping();

            if (data.hasOwnProperty('archiveTime')) {
                obj['archiveTime'] = ApiClient.convertToType(data['archiveTime'], 'String');
            }
            if (data.hasOwnProperty('archived')) {
                obj['archived'] = ApiClient.convertToType(data['archived'], 'Boolean');
            }
            if (data.hasOwnProperty('dataId')) {
                obj['dataId'] = ApiClient.convertToType(data['dataId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resourceAttributes')) {
                obj['resourceAttributes'] = ApiClient.convertToType(data['resourceAttributes'], [Attribute]);
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserDataMapping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserDataMapping</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['archiveTime'] && !(typeof data['archiveTime'] === 'string' || data['archiveTime'] instanceof String)) {
            throw new Error("Expected the field `archiveTime` to be a primitive type in the JSON string but got " + data['archiveTime']);
        }
        // ensure the json data is a string
        if (data['dataId'] && !(typeof data['dataId'] === 'string' || data['dataId'] instanceof String)) {
            throw new Error("Expected the field `dataId` to be a primitive type in the JSON string but got " + data['dataId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['resourceAttributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resourceAttributes'])) {
                throw new Error("Expected the field `resourceAttributes` to be an array in the JSON data but got " + data['resourceAttributes']);
            }
            // validate the optional field `resourceAttributes` (array)
            for (const item of data['resourceAttributes']) {
                Attribute.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * Output only. Indicates the time when this mapping was archived.
 * @member {String} archiveTime
 */
UserDataMapping.prototype['archiveTime'] = undefined;

/**
 * Output only. Indicates whether this mapping is archived.
 * @member {Boolean} archived
 */
UserDataMapping.prototype['archived'] = undefined;

/**
 * Required. A unique identifier for the mapped resource.
 * @member {String} dataId
 */
UserDataMapping.prototype['dataId'] = undefined;

/**
 * Resource name of the User data mapping, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/userDataMappings/{user_data_mapping_id}`.
 * @member {String} name
 */
UserDataMapping.prototype['name'] = undefined;

/**
 * Attributes of the resource. Only explicitly set attributes are displayed here. Attribute definitions with defaults set implicitly apply to these User data mappings. Attributes listed here must be single valued, that is, exactly one value is specified for the field \"values\" in each Attribute.
 * @member {Array.<module:model/Attribute>} resourceAttributes
 */
UserDataMapping.prototype['resourceAttributes'] = undefined;

/**
 * Required. User's UUID provided by the client.
 * @member {String} userId
 */
UserDataMapping.prototype['userId'] = undefined;






export default UserDataMapping;

