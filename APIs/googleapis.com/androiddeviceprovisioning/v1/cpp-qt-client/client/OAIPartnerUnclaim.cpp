/**
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartnerUnclaim.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartnerUnclaim::OAIPartnerUnclaim(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartnerUnclaim::OAIPartnerUnclaim() {
    this->initializeModel();
}

OAIPartnerUnclaim::~OAIPartnerUnclaim() {}

void OAIPartnerUnclaim::initializeModel() {

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_device_identifier_isSet = false;
    m_device_identifier_isValid = false;

    m_section_type_isSet = false;
    m_section_type_isValid = false;

    m_vacation_mode_days_isSet = false;
    m_vacation_mode_days_isValid = false;

    m_vacation_mode_expire_time_isSet = false;
    m_vacation_mode_expire_time_isValid = false;
}

void OAIPartnerUnclaim::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartnerUnclaim::fromJsonObject(QJsonObject json) {

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_device_identifier_isValid = ::OpenAPI::fromJsonValue(m_device_identifier, json[QString("deviceIdentifier")]);
    m_device_identifier_isSet = !json[QString("deviceIdentifier")].isNull() && m_device_identifier_isValid;

    m_section_type_isValid = ::OpenAPI::fromJsonValue(m_section_type, json[QString("sectionType")]);
    m_section_type_isSet = !json[QString("sectionType")].isNull() && m_section_type_isValid;

    m_vacation_mode_days_isValid = ::OpenAPI::fromJsonValue(m_vacation_mode_days, json[QString("vacationModeDays")]);
    m_vacation_mode_days_isSet = !json[QString("vacationModeDays")].isNull() && m_vacation_mode_days_isValid;

    m_vacation_mode_expire_time_isValid = ::OpenAPI::fromJsonValue(m_vacation_mode_expire_time, json[QString("vacationModeExpireTime")]);
    m_vacation_mode_expire_time_isSet = !json[QString("vacationModeExpireTime")].isNull() && m_vacation_mode_expire_time_isValid;
}

QString OAIPartnerUnclaim::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartnerUnclaim::asJsonObject() const {
    QJsonObject obj;
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_device_identifier.isSet()) {
        obj.insert(QString("deviceIdentifier"), ::OpenAPI::toJsonValue(m_device_identifier));
    }
    if (m_section_type_isSet) {
        obj.insert(QString("sectionType"), ::OpenAPI::toJsonValue(m_section_type));
    }
    if (m_vacation_mode_days_isSet) {
        obj.insert(QString("vacationModeDays"), ::OpenAPI::toJsonValue(m_vacation_mode_days));
    }
    if (m_vacation_mode_expire_time_isSet) {
        obj.insert(QString("vacationModeExpireTime"), ::OpenAPI::toJsonValue(m_vacation_mode_expire_time));
    }
    return obj;
}

QString OAIPartnerUnclaim::getDeviceId() const {
    return m_device_id;
}
void OAIPartnerUnclaim::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIPartnerUnclaim::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIPartnerUnclaim::is_device_id_Valid() const{
    return m_device_id_isValid;
}

OAIDeviceIdentifier OAIPartnerUnclaim::getDeviceIdentifier() const {
    return m_device_identifier;
}
void OAIPartnerUnclaim::setDeviceIdentifier(const OAIDeviceIdentifier &device_identifier) {
    m_device_identifier = device_identifier;
    m_device_identifier_isSet = true;
}

bool OAIPartnerUnclaim::is_device_identifier_Set() const{
    return m_device_identifier_isSet;
}

bool OAIPartnerUnclaim::is_device_identifier_Valid() const{
    return m_device_identifier_isValid;
}

QString OAIPartnerUnclaim::getSectionType() const {
    return m_section_type;
}
void OAIPartnerUnclaim::setSectionType(const QString &section_type) {
    m_section_type = section_type;
    m_section_type_isSet = true;
}

bool OAIPartnerUnclaim::is_section_type_Set() const{
    return m_section_type_isSet;
}

bool OAIPartnerUnclaim::is_section_type_Valid() const{
    return m_section_type_isValid;
}

qint32 OAIPartnerUnclaim::getVacationModeDays() const {
    return m_vacation_mode_days;
}
void OAIPartnerUnclaim::setVacationModeDays(const qint32 &vacation_mode_days) {
    m_vacation_mode_days = vacation_mode_days;
    m_vacation_mode_days_isSet = true;
}

bool OAIPartnerUnclaim::is_vacation_mode_days_Set() const{
    return m_vacation_mode_days_isSet;
}

bool OAIPartnerUnclaim::is_vacation_mode_days_Valid() const{
    return m_vacation_mode_days_isValid;
}

QString OAIPartnerUnclaim::getVacationModeExpireTime() const {
    return m_vacation_mode_expire_time;
}
void OAIPartnerUnclaim::setVacationModeExpireTime(const QString &vacation_mode_expire_time) {
    m_vacation_mode_expire_time = vacation_mode_expire_time;
    m_vacation_mode_expire_time_isSet = true;
}

bool OAIPartnerUnclaim::is_vacation_mode_expire_time_Set() const{
    return m_vacation_mode_expire_time_isSet;
}

bool OAIPartnerUnclaim::is_vacation_mode_expire_time_Valid() const{
    return m_vacation_mode_expire_time_isValid;
}

bool OAIPartnerUnclaim::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vacation_mode_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vacation_mode_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartnerUnclaim::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
