/**
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDevicesLongRunningOperationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDevicesLongRunningOperationResponse::OAIDevicesLongRunningOperationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDevicesLongRunningOperationResponse::OAIDevicesLongRunningOperationResponse() {
    this->initializeModel();
}

OAIDevicesLongRunningOperationResponse::~OAIDevicesLongRunningOperationResponse() {}

void OAIDevicesLongRunningOperationResponse::initializeModel() {

    m_per_device_status_isSet = false;
    m_per_device_status_isValid = false;

    m_success_count_isSet = false;
    m_success_count_isValid = false;
}

void OAIDevicesLongRunningOperationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDevicesLongRunningOperationResponse::fromJsonObject(QJsonObject json) {

    m_per_device_status_isValid = ::OpenAPI::fromJsonValue(m_per_device_status, json[QString("perDeviceStatus")]);
    m_per_device_status_isSet = !json[QString("perDeviceStatus")].isNull() && m_per_device_status_isValid;

    m_success_count_isValid = ::OpenAPI::fromJsonValue(m_success_count, json[QString("successCount")]);
    m_success_count_isSet = !json[QString("successCount")].isNull() && m_success_count_isValid;
}

QString OAIDevicesLongRunningOperationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDevicesLongRunningOperationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_per_device_status.size() > 0) {
        obj.insert(QString("perDeviceStatus"), ::OpenAPI::toJsonValue(m_per_device_status));
    }
    if (m_success_count_isSet) {
        obj.insert(QString("successCount"), ::OpenAPI::toJsonValue(m_success_count));
    }
    return obj;
}

QList<OAIOperationPerDevice> OAIDevicesLongRunningOperationResponse::getPerDeviceStatus() const {
    return m_per_device_status;
}
void OAIDevicesLongRunningOperationResponse::setPerDeviceStatus(const QList<OAIOperationPerDevice> &per_device_status) {
    m_per_device_status = per_device_status;
    m_per_device_status_isSet = true;
}

bool OAIDevicesLongRunningOperationResponse::is_per_device_status_Set() const{
    return m_per_device_status_isSet;
}

bool OAIDevicesLongRunningOperationResponse::is_per_device_status_Valid() const{
    return m_per_device_status_isValid;
}

qint32 OAIDevicesLongRunningOperationResponse::getSuccessCount() const {
    return m_success_count;
}
void OAIDevicesLongRunningOperationResponse::setSuccessCount(const qint32 &success_count) {
    m_success_count = success_count;
    m_success_count_isSet = true;
}

bool OAIDevicesLongRunningOperationResponse::is_success_count_Set() const{
    return m_success_count_isSet;
}

bool OAIDevicesLongRunningOperationResponse::is_success_count_Valid() const{
    return m_success_count_isValid;
}

bool OAIDevicesLongRunningOperationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_per_device_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDevicesLongRunningOperationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
