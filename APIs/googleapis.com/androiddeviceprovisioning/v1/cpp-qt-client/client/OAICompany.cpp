/**
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompany.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompany::OAICompany(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompany::OAICompany() {
    this->initializeModel();
}

OAICompany::~OAICompany() {}

void OAICompany::initializeModel() {

    m_admin_emails_isSet = false;
    m_admin_emails_isValid = false;

    m_company_id_isSet = false;
    m_company_id_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_google_workspace_account_isSet = false;
    m_google_workspace_account_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_emails_isSet = false;
    m_owner_emails_isValid = false;

    m_skip_welcome_email_isSet = false;
    m_skip_welcome_email_isValid = false;

    m_terms_status_isSet = false;
    m_terms_status_isValid = false;
}

void OAICompany::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompany::fromJsonObject(QJsonObject json) {

    m_admin_emails_isValid = ::OpenAPI::fromJsonValue(m_admin_emails, json[QString("adminEmails")]);
    m_admin_emails_isSet = !json[QString("adminEmails")].isNull() && m_admin_emails_isValid;

    m_company_id_isValid = ::OpenAPI::fromJsonValue(m_company_id, json[QString("companyId")]);
    m_company_id_isSet = !json[QString("companyId")].isNull() && m_company_id_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("companyName")]);
    m_company_name_isSet = !json[QString("companyName")].isNull() && m_company_name_isValid;

    m_google_workspace_account_isValid = ::OpenAPI::fromJsonValue(m_google_workspace_account, json[QString("googleWorkspaceAccount")]);
    m_google_workspace_account_isSet = !json[QString("googleWorkspaceAccount")].isNull() && m_google_workspace_account_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_emails_isValid = ::OpenAPI::fromJsonValue(m_owner_emails, json[QString("ownerEmails")]);
    m_owner_emails_isSet = !json[QString("ownerEmails")].isNull() && m_owner_emails_isValid;

    m_skip_welcome_email_isValid = ::OpenAPI::fromJsonValue(m_skip_welcome_email, json[QString("skipWelcomeEmail")]);
    m_skip_welcome_email_isSet = !json[QString("skipWelcomeEmail")].isNull() && m_skip_welcome_email_isValid;

    m_terms_status_isValid = ::OpenAPI::fromJsonValue(m_terms_status, json[QString("termsStatus")]);
    m_terms_status_isSet = !json[QString("termsStatus")].isNull() && m_terms_status_isValid;
}

QString OAICompany::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompany::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_emails.size() > 0) {
        obj.insert(QString("adminEmails"), ::OpenAPI::toJsonValue(m_admin_emails));
    }
    if (m_company_id_isSet) {
        obj.insert(QString("companyId"), ::OpenAPI::toJsonValue(m_company_id));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("companyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_google_workspace_account.isSet()) {
        obj.insert(QString("googleWorkspaceAccount"), ::OpenAPI::toJsonValue(m_google_workspace_account));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_emails.size() > 0) {
        obj.insert(QString("ownerEmails"), ::OpenAPI::toJsonValue(m_owner_emails));
    }
    if (m_skip_welcome_email_isSet) {
        obj.insert(QString("skipWelcomeEmail"), ::OpenAPI::toJsonValue(m_skip_welcome_email));
    }
    if (m_terms_status_isSet) {
        obj.insert(QString("termsStatus"), ::OpenAPI::toJsonValue(m_terms_status));
    }
    return obj;
}

QList<QString> OAICompany::getAdminEmails() const {
    return m_admin_emails;
}
void OAICompany::setAdminEmails(const QList<QString> &admin_emails) {
    m_admin_emails = admin_emails;
    m_admin_emails_isSet = true;
}

bool OAICompany::is_admin_emails_Set() const{
    return m_admin_emails_isSet;
}

bool OAICompany::is_admin_emails_Valid() const{
    return m_admin_emails_isValid;
}

QString OAICompany::getCompanyId() const {
    return m_company_id;
}
void OAICompany::setCompanyId(const QString &company_id) {
    m_company_id = company_id;
    m_company_id_isSet = true;
}

bool OAICompany::is_company_id_Set() const{
    return m_company_id_isSet;
}

bool OAICompany::is_company_id_Valid() const{
    return m_company_id_isValid;
}

QString OAICompany::getCompanyName() const {
    return m_company_name;
}
void OAICompany::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAICompany::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAICompany::is_company_name_Valid() const{
    return m_company_name_isValid;
}

OAIGoogleWorkspaceAccount OAICompany::getGoogleWorkspaceAccount() const {
    return m_google_workspace_account;
}
void OAICompany::setGoogleWorkspaceAccount(const OAIGoogleWorkspaceAccount &google_workspace_account) {
    m_google_workspace_account = google_workspace_account;
    m_google_workspace_account_isSet = true;
}

bool OAICompany::is_google_workspace_account_Set() const{
    return m_google_workspace_account_isSet;
}

bool OAICompany::is_google_workspace_account_Valid() const{
    return m_google_workspace_account_isValid;
}

QString OAICompany::getLanguageCode() const {
    return m_language_code;
}
void OAICompany::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAICompany::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAICompany::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAICompany::getName() const {
    return m_name;
}
void OAICompany::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICompany::is_name_Set() const{
    return m_name_isSet;
}

bool OAICompany::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAICompany::getOwnerEmails() const {
    return m_owner_emails;
}
void OAICompany::setOwnerEmails(const QList<QString> &owner_emails) {
    m_owner_emails = owner_emails;
    m_owner_emails_isSet = true;
}

bool OAICompany::is_owner_emails_Set() const{
    return m_owner_emails_isSet;
}

bool OAICompany::is_owner_emails_Valid() const{
    return m_owner_emails_isValid;
}

bool OAICompany::isSkipWelcomeEmail() const {
    return m_skip_welcome_email;
}
void OAICompany::setSkipWelcomeEmail(const bool &skip_welcome_email) {
    m_skip_welcome_email = skip_welcome_email;
    m_skip_welcome_email_isSet = true;
}

bool OAICompany::is_skip_welcome_email_Set() const{
    return m_skip_welcome_email_isSet;
}

bool OAICompany::is_skip_welcome_email_Valid() const{
    return m_skip_welcome_email_isValid;
}

QString OAICompany::getTermsStatus() const {
    return m_terms_status;
}
void OAICompany::setTermsStatus(const QString &terms_status) {
    m_terms_status = terms_status;
    m_terms_status_isSet = true;
}

bool OAICompany::is_terms_status_Set() const{
    return m_terms_status_isSet;
}

bool OAICompany::is_terms_status_Valid() const{
    return m_terms_status_isValid;
}

bool OAICompany::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_workspace_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_welcome_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompany::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
