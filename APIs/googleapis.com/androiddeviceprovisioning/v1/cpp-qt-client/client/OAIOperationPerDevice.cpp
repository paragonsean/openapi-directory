/**
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationPerDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationPerDevice::OAIOperationPerDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationPerDevice::OAIOperationPerDevice() {
    this->initializeModel();
}

OAIOperationPerDevice::~OAIOperationPerDevice() {}

void OAIOperationPerDevice::initializeModel() {

    m_claim_isSet = false;
    m_claim_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_unclaim_isSet = false;
    m_unclaim_isValid = false;

    m_update_metadata_isSet = false;
    m_update_metadata_isValid = false;
}

void OAIOperationPerDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperationPerDevice::fromJsonObject(QJsonObject json) {

    m_claim_isValid = ::OpenAPI::fromJsonValue(m_claim, json[QString("claim")]);
    m_claim_isSet = !json[QString("claim")].isNull() && m_claim_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_unclaim_isValid = ::OpenAPI::fromJsonValue(m_unclaim, json[QString("unclaim")]);
    m_unclaim_isSet = !json[QString("unclaim")].isNull() && m_unclaim_isValid;

    m_update_metadata_isValid = ::OpenAPI::fromJsonValue(m_update_metadata, json[QString("updateMetadata")]);
    m_update_metadata_isSet = !json[QString("updateMetadata")].isNull() && m_update_metadata_isValid;
}

QString OAIOperationPerDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperationPerDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_claim.isSet()) {
        obj.insert(QString("claim"), ::OpenAPI::toJsonValue(m_claim));
    }
    if (m_result.isSet()) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_unclaim.isSet()) {
        obj.insert(QString("unclaim"), ::OpenAPI::toJsonValue(m_unclaim));
    }
    if (m_update_metadata.isSet()) {
        obj.insert(QString("updateMetadata"), ::OpenAPI::toJsonValue(m_update_metadata));
    }
    return obj;
}

OAIPartnerClaim OAIOperationPerDevice::getClaim() const {
    return m_claim;
}
void OAIOperationPerDevice::setClaim(const OAIPartnerClaim &claim) {
    m_claim = claim;
    m_claim_isSet = true;
}

bool OAIOperationPerDevice::is_claim_Set() const{
    return m_claim_isSet;
}

bool OAIOperationPerDevice::is_claim_Valid() const{
    return m_claim_isValid;
}

OAIPerDeviceStatusInBatch OAIOperationPerDevice::getResult() const {
    return m_result;
}
void OAIOperationPerDevice::setResult(const OAIPerDeviceStatusInBatch &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIOperationPerDevice::is_result_Set() const{
    return m_result_isSet;
}

bool OAIOperationPerDevice::is_result_Valid() const{
    return m_result_isValid;
}

OAIPartnerUnclaim OAIOperationPerDevice::getUnclaim() const {
    return m_unclaim;
}
void OAIOperationPerDevice::setUnclaim(const OAIPartnerUnclaim &unclaim) {
    m_unclaim = unclaim;
    m_unclaim_isSet = true;
}

bool OAIOperationPerDevice::is_unclaim_Set() const{
    return m_unclaim_isSet;
}

bool OAIOperationPerDevice::is_unclaim_Valid() const{
    return m_unclaim_isValid;
}

OAIUpdateMetadataArguments OAIOperationPerDevice::getUpdateMetadata() const {
    return m_update_metadata;
}
void OAIOperationPerDevice::setUpdateMetadata(const OAIUpdateMetadataArguments &update_metadata) {
    m_update_metadata = update_metadata;
    m_update_metadata_isSet = true;
}

bool OAIOperationPerDevice::is_update_metadata_Set() const{
    return m_update_metadata_isSet;
}

bool OAIOperationPerDevice::is_update_metadata_Valid() const{
    return m_update_metadata_isValid;
}

bool OAIOperationPerDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_claim.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unclaim.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperationPerDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
