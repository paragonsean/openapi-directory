/**
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerDeviceStatusInBatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerDeviceStatusInBatch::OAIPerDeviceStatusInBatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerDeviceStatusInBatch::OAIPerDeviceStatusInBatch() {
    this->initializeModel();
}

OAIPerDeviceStatusInBatch::~OAIPerDeviceStatusInBatch() {}

void OAIPerDeviceStatusInBatch::initializeModel() {

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_error_identifier_isSet = false;
    m_error_identifier_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIPerDeviceStatusInBatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerDeviceStatusInBatch::fromJsonObject(QJsonObject json) {

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_error_identifier_isValid = ::OpenAPI::fromJsonValue(m_error_identifier, json[QString("errorIdentifier")]);
    m_error_identifier_isSet = !json[QString("errorIdentifier")].isNull() && m_error_identifier_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIPerDeviceStatusInBatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerDeviceStatusInBatch::asJsonObject() const {
    QJsonObject obj;
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_error_identifier_isSet) {
        obj.insert(QString("errorIdentifier"), ::OpenAPI::toJsonValue(m_error_identifier));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIPerDeviceStatusInBatch::getDeviceId() const {
    return m_device_id;
}
void OAIPerDeviceStatusInBatch::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIPerDeviceStatusInBatch::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIPerDeviceStatusInBatch::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIPerDeviceStatusInBatch::getErrorIdentifier() const {
    return m_error_identifier;
}
void OAIPerDeviceStatusInBatch::setErrorIdentifier(const QString &error_identifier) {
    m_error_identifier = error_identifier;
    m_error_identifier_isSet = true;
}

bool OAIPerDeviceStatusInBatch::is_error_identifier_Set() const{
    return m_error_identifier_isSet;
}

bool OAIPerDeviceStatusInBatch::is_error_identifier_Valid() const{
    return m_error_identifier_isValid;
}

QString OAIPerDeviceStatusInBatch::getErrorMessage() const {
    return m_error_message;
}
void OAIPerDeviceStatusInBatch::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIPerDeviceStatusInBatch::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIPerDeviceStatusInBatch::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIPerDeviceStatusInBatch::getStatus() const {
    return m_status;
}
void OAIPerDeviceStatusInBatch::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPerDeviceStatusInBatch::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPerDeviceStatusInBatch::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIPerDeviceStatusInBatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerDeviceStatusInBatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
