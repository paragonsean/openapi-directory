/**
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartnerClaim.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartnerClaim::OAIPartnerClaim(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartnerClaim::OAIPartnerClaim() {
    this->initializeModel();
}

OAIPartnerClaim::~OAIPartnerClaim() {}

void OAIPartnerClaim::initializeModel() {

    m_configuration_id_isSet = false;
    m_configuration_id_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_device_identifier_isSet = false;
    m_device_identifier_isValid = false;

    m_device_metadata_isSet = false;
    m_device_metadata_isValid = false;

    m_google_workspace_customer_id_isSet = false;
    m_google_workspace_customer_id_isValid = false;

    m_pre_provisioning_token_isSet = false;
    m_pre_provisioning_token_isValid = false;

    m_section_type_isSet = false;
    m_section_type_isValid = false;

    m_simlock_profile_id_isSet = false;
    m_simlock_profile_id_isValid = false;
}

void OAIPartnerClaim::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartnerClaim::fromJsonObject(QJsonObject json) {

    m_configuration_id_isValid = ::OpenAPI::fromJsonValue(m_configuration_id, json[QString("configurationId")]);
    m_configuration_id_isSet = !json[QString("configurationId")].isNull() && m_configuration_id_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_device_identifier_isValid = ::OpenAPI::fromJsonValue(m_device_identifier, json[QString("deviceIdentifier")]);
    m_device_identifier_isSet = !json[QString("deviceIdentifier")].isNull() && m_device_identifier_isValid;

    m_device_metadata_isValid = ::OpenAPI::fromJsonValue(m_device_metadata, json[QString("deviceMetadata")]);
    m_device_metadata_isSet = !json[QString("deviceMetadata")].isNull() && m_device_metadata_isValid;

    m_google_workspace_customer_id_isValid = ::OpenAPI::fromJsonValue(m_google_workspace_customer_id, json[QString("googleWorkspaceCustomerId")]);
    m_google_workspace_customer_id_isSet = !json[QString("googleWorkspaceCustomerId")].isNull() && m_google_workspace_customer_id_isValid;

    m_pre_provisioning_token_isValid = ::OpenAPI::fromJsonValue(m_pre_provisioning_token, json[QString("preProvisioningToken")]);
    m_pre_provisioning_token_isSet = !json[QString("preProvisioningToken")].isNull() && m_pre_provisioning_token_isValid;

    m_section_type_isValid = ::OpenAPI::fromJsonValue(m_section_type, json[QString("sectionType")]);
    m_section_type_isSet = !json[QString("sectionType")].isNull() && m_section_type_isValid;

    m_simlock_profile_id_isValid = ::OpenAPI::fromJsonValue(m_simlock_profile_id, json[QString("simlockProfileId")]);
    m_simlock_profile_id_isSet = !json[QString("simlockProfileId")].isNull() && m_simlock_profile_id_isValid;
}

QString OAIPartnerClaim::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartnerClaim::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_id_isSet) {
        obj.insert(QString("configurationId"), ::OpenAPI::toJsonValue(m_configuration_id));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_device_identifier.isSet()) {
        obj.insert(QString("deviceIdentifier"), ::OpenAPI::toJsonValue(m_device_identifier));
    }
    if (m_device_metadata.isSet()) {
        obj.insert(QString("deviceMetadata"), ::OpenAPI::toJsonValue(m_device_metadata));
    }
    if (m_google_workspace_customer_id_isSet) {
        obj.insert(QString("googleWorkspaceCustomerId"), ::OpenAPI::toJsonValue(m_google_workspace_customer_id));
    }
    if (m_pre_provisioning_token_isSet) {
        obj.insert(QString("preProvisioningToken"), ::OpenAPI::toJsonValue(m_pre_provisioning_token));
    }
    if (m_section_type_isSet) {
        obj.insert(QString("sectionType"), ::OpenAPI::toJsonValue(m_section_type));
    }
    if (m_simlock_profile_id_isSet) {
        obj.insert(QString("simlockProfileId"), ::OpenAPI::toJsonValue(m_simlock_profile_id));
    }
    return obj;
}

QString OAIPartnerClaim::getConfigurationId() const {
    return m_configuration_id;
}
void OAIPartnerClaim::setConfigurationId(const QString &configuration_id) {
    m_configuration_id = configuration_id;
    m_configuration_id_isSet = true;
}

bool OAIPartnerClaim::is_configuration_id_Set() const{
    return m_configuration_id_isSet;
}

bool OAIPartnerClaim::is_configuration_id_Valid() const{
    return m_configuration_id_isValid;
}

QString OAIPartnerClaim::getCustomerId() const {
    return m_customer_id;
}
void OAIPartnerClaim::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIPartnerClaim::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIPartnerClaim::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

OAIDeviceIdentifier OAIPartnerClaim::getDeviceIdentifier() const {
    return m_device_identifier;
}
void OAIPartnerClaim::setDeviceIdentifier(const OAIDeviceIdentifier &device_identifier) {
    m_device_identifier = device_identifier;
    m_device_identifier_isSet = true;
}

bool OAIPartnerClaim::is_device_identifier_Set() const{
    return m_device_identifier_isSet;
}

bool OAIPartnerClaim::is_device_identifier_Valid() const{
    return m_device_identifier_isValid;
}

OAIDeviceMetadata OAIPartnerClaim::getDeviceMetadata() const {
    return m_device_metadata;
}
void OAIPartnerClaim::setDeviceMetadata(const OAIDeviceMetadata &device_metadata) {
    m_device_metadata = device_metadata;
    m_device_metadata_isSet = true;
}

bool OAIPartnerClaim::is_device_metadata_Set() const{
    return m_device_metadata_isSet;
}

bool OAIPartnerClaim::is_device_metadata_Valid() const{
    return m_device_metadata_isValid;
}

QString OAIPartnerClaim::getGoogleWorkspaceCustomerId() const {
    return m_google_workspace_customer_id;
}
void OAIPartnerClaim::setGoogleWorkspaceCustomerId(const QString &google_workspace_customer_id) {
    m_google_workspace_customer_id = google_workspace_customer_id;
    m_google_workspace_customer_id_isSet = true;
}

bool OAIPartnerClaim::is_google_workspace_customer_id_Set() const{
    return m_google_workspace_customer_id_isSet;
}

bool OAIPartnerClaim::is_google_workspace_customer_id_Valid() const{
    return m_google_workspace_customer_id_isValid;
}

QString OAIPartnerClaim::getPreProvisioningToken() const {
    return m_pre_provisioning_token;
}
void OAIPartnerClaim::setPreProvisioningToken(const QString &pre_provisioning_token) {
    m_pre_provisioning_token = pre_provisioning_token;
    m_pre_provisioning_token_isSet = true;
}

bool OAIPartnerClaim::is_pre_provisioning_token_Set() const{
    return m_pre_provisioning_token_isSet;
}

bool OAIPartnerClaim::is_pre_provisioning_token_Valid() const{
    return m_pre_provisioning_token_isValid;
}

QString OAIPartnerClaim::getSectionType() const {
    return m_section_type;
}
void OAIPartnerClaim::setSectionType(const QString &section_type) {
    m_section_type = section_type;
    m_section_type_isSet = true;
}

bool OAIPartnerClaim::is_section_type_Set() const{
    return m_section_type_isSet;
}

bool OAIPartnerClaim::is_section_type_Valid() const{
    return m_section_type_isValid;
}

QString OAIPartnerClaim::getSimlockProfileId() const {
    return m_simlock_profile_id;
}
void OAIPartnerClaim::setSimlockProfileId(const QString &simlock_profile_id) {
    m_simlock_profile_id = simlock_profile_id;
    m_simlock_profile_id_isSet = true;
}

bool OAIPartnerClaim::is_simlock_profile_id_Set() const{
    return m_simlock_profile_id_isSet;
}

bool OAIPartnerClaim::is_simlock_profile_id_Valid() const{
    return m_simlock_profile_id_isValid;
}

bool OAIPartnerClaim::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_workspace_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_provisioning_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simlock_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartnerClaim::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
