/**
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClaimDevicesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClaimDevicesRequest::OAIClaimDevicesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClaimDevicesRequest::OAIClaimDevicesRequest() {
    this->initializeModel();
}

OAIClaimDevicesRequest::~OAIClaimDevicesRequest() {}

void OAIClaimDevicesRequest::initializeModel() {

    m_claims_isSet = false;
    m_claims_isValid = false;
}

void OAIClaimDevicesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClaimDevicesRequest::fromJsonObject(QJsonObject json) {

    m_claims_isValid = ::OpenAPI::fromJsonValue(m_claims, json[QString("claims")]);
    m_claims_isSet = !json[QString("claims")].isNull() && m_claims_isValid;
}

QString OAIClaimDevicesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClaimDevicesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_claims.size() > 0) {
        obj.insert(QString("claims"), ::OpenAPI::toJsonValue(m_claims));
    }
    return obj;
}

QList<OAIPartnerClaim> OAIClaimDevicesRequest::getClaims() const {
    return m_claims;
}
void OAIClaimDevicesRequest::setClaims(const QList<OAIPartnerClaim> &claims) {
    m_claims = claims;
    m_claims_isSet = true;
}

bool OAIClaimDevicesRequest::is_claims_Set() const{
    return m_claims_isSet;
}

bool OAIClaimDevicesRequest::is_claims_Valid() const{
    return m_claims_isValid;
}

bool OAIClaimDevicesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_claims.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClaimDevicesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
