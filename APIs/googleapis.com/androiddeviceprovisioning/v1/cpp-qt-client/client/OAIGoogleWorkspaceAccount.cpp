/**
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleWorkspaceAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleWorkspaceAccount::OAIGoogleWorkspaceAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleWorkspaceAccount::OAIGoogleWorkspaceAccount() {
    this->initializeModel();
}

OAIGoogleWorkspaceAccount::~OAIGoogleWorkspaceAccount() {}

void OAIGoogleWorkspaceAccount::initializeModel() {

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_pre_provisioning_tokens_isSet = false;
    m_pre_provisioning_tokens_isValid = false;
}

void OAIGoogleWorkspaceAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleWorkspaceAccount::fromJsonObject(QJsonObject json) {

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_pre_provisioning_tokens_isValid = ::OpenAPI::fromJsonValue(m_pre_provisioning_tokens, json[QString("preProvisioningTokens")]);
    m_pre_provisioning_tokens_isSet = !json[QString("preProvisioningTokens")].isNull() && m_pre_provisioning_tokens_isValid;
}

QString OAIGoogleWorkspaceAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleWorkspaceAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_pre_provisioning_tokens.size() > 0) {
        obj.insert(QString("preProvisioningTokens"), ::OpenAPI::toJsonValue(m_pre_provisioning_tokens));
    }
    return obj;
}

QString OAIGoogleWorkspaceAccount::getCustomerId() const {
    return m_customer_id;
}
void OAIGoogleWorkspaceAccount::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIGoogleWorkspaceAccount::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIGoogleWorkspaceAccount::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QList<QString> OAIGoogleWorkspaceAccount::getPreProvisioningTokens() const {
    return m_pre_provisioning_tokens;
}
void OAIGoogleWorkspaceAccount::setPreProvisioningTokens(const QList<QString> &pre_provisioning_tokens) {
    m_pre_provisioning_tokens = pre_provisioning_tokens;
    m_pre_provisioning_tokens_isSet = true;
}

bool OAIGoogleWorkspaceAccount::is_pre_provisioning_tokens_Set() const{
    return m_pre_provisioning_tokens_isSet;
}

bool OAIGoogleWorkspaceAccount::is_pre_provisioning_tokens_Valid() const{
    return m_pre_provisioning_tokens_isValid;
}

bool OAIGoogleWorkspaceAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_provisioning_tokens.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleWorkspaceAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
