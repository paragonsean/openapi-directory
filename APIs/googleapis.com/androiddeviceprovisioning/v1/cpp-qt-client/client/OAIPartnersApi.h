/**
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPartnersApi_H
#define OAI_OAIPartnersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIClaimDeviceRequest.h"
#include "OAIClaimDeviceResponse.h"
#include "OAIClaimDevicesRequest.h"
#include "OAICompany.h"
#include "OAICreateCustomerRequest.h"
#include "OAIDevice.h"
#include "OAIDeviceMetadata.h"
#include "OAIFindDevicesByDeviceIdentifierRequest.h"
#include "OAIFindDevicesByDeviceIdentifierResponse.h"
#include "OAIFindDevicesByOwnerRequest.h"
#include "OAIFindDevicesByOwnerResponse.h"
#include "OAIGetDeviceSimLockStateRequest.h"
#include "OAIGetDeviceSimLockStateResponse.h"
#include "OAIListCustomersResponse.h"
#include "OAIListVendorCustomersResponse.h"
#include "OAIListVendorsResponse.h"
#include "OAIObject.h"
#include "OAIOperation.h"
#include "OAIUnclaimDeviceRequest.h"
#include "OAIUnclaimDevicesRequest.h"
#include "OAIUpdateDeviceMetadataInBatchRequest.h"
#include "OAIUpdateDeviceMetadataRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPartnersApi : public QObject {
    Q_OBJECT

public:
    OAIPartnersApi(const int timeOut = 0);
    ~OAIPartnersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_create_customer_request OAICreateCustomerRequest [optional]
    */
    virtual void androiddeviceprovisioning_partners_customers_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateCustomerRequest> &oai_create_customer_request = ::OpenAPI::OptionalParam<OAICreateCustomerRequest>());

    /**
    * @param[in]  partner_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void androiddeviceprovisioning_partners_customers_list(const QString &partner_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  partner_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_claim_device_request OAIClaimDeviceRequest [optional]
    */
    virtual void androiddeviceprovisioning_partners_devices_claim(const QString &partner_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIClaimDeviceRequest> &oai_claim_device_request = ::OpenAPI::OptionalParam<OAIClaimDeviceRequest>());

    /**
    * @param[in]  partner_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_claim_devices_request OAIClaimDevicesRequest [optional]
    */
    virtual void androiddeviceprovisioning_partners_devices_claimAsync(const QString &partner_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIClaimDevicesRequest> &oai_claim_devices_request = ::OpenAPI::OptionalParam<OAIClaimDevicesRequest>());

    /**
    * @param[in]  partner_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_find_devices_by_device_identifier_request OAIFindDevicesByDeviceIdentifierRequest [optional]
    */
    virtual void androiddeviceprovisioning_partners_devices_findByIdentifier(const QString &partner_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIFindDevicesByDeviceIdentifierRequest> &oai_find_devices_by_device_identifier_request = ::OpenAPI::OptionalParam<OAIFindDevicesByDeviceIdentifierRequest>());

    /**
    * @param[in]  partner_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_find_devices_by_owner_request OAIFindDevicesByOwnerRequest [optional]
    */
    virtual void androiddeviceprovisioning_partners_devices_findByOwner(const QString &partner_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIFindDevicesByOwnerRequest> &oai_find_devices_by_owner_request = ::OpenAPI::OptionalParam<OAIFindDevicesByOwnerRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void androiddeviceprovisioning_partners_devices_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  partner_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_get_device_sim_lock_state_request OAIGetDeviceSimLockStateRequest [optional]
    */
    virtual void androiddeviceprovisioning_partners_devices_getSimLockState(const QString &partner_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetDeviceSimLockStateRequest> &oai_get_device_sim_lock_state_request = ::OpenAPI::OptionalParam<OAIGetDeviceSimLockStateRequest>());

    /**
    * @param[in]  metadata_owner_id QString [required]
    * @param[in]  device_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_update_device_metadata_request OAIUpdateDeviceMetadataRequest [optional]
    */
    virtual void androiddeviceprovisioning_partners_devices_metadata(const QString &metadata_owner_id, const QString &device_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateDeviceMetadataRequest> &oai_update_device_metadata_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceMetadataRequest>());

    /**
    * @param[in]  partner_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_unclaim_device_request OAIUnclaimDeviceRequest [optional]
    */
    virtual void androiddeviceprovisioning_partners_devices_unclaim(const QString &partner_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUnclaimDeviceRequest> &oai_unclaim_device_request = ::OpenAPI::OptionalParam<OAIUnclaimDeviceRequest>());

    /**
    * @param[in]  partner_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_unclaim_devices_request OAIUnclaimDevicesRequest [optional]
    */
    virtual void androiddeviceprovisioning_partners_devices_unclaimAsync(const QString &partner_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUnclaimDevicesRequest> &oai_unclaim_devices_request = ::OpenAPI::OptionalParam<OAIUnclaimDevicesRequest>());

    /**
    * @param[in]  partner_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_update_device_metadata_in_batch_request OAIUpdateDeviceMetadataInBatchRequest [optional]
    */
    virtual void androiddeviceprovisioning_partners_devices_updateMetadataAsync(const QString &partner_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateDeviceMetadataInBatchRequest> &oai_update_device_metadata_in_batch_request = ::OpenAPI::OptionalParam<OAIUpdateDeviceMetadataInBatchRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void androiddeviceprovisioning_partners_vendors_customers_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void androiddeviceprovisioning_partners_vendors_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void androiddeviceprovisioning_partners_customers_createCallback(OAIHttpRequestWorker *worker);
    void androiddeviceprovisioning_partners_customers_listCallback(OAIHttpRequestWorker *worker);
    void androiddeviceprovisioning_partners_devices_claimCallback(OAIHttpRequestWorker *worker);
    void androiddeviceprovisioning_partners_devices_claimAsyncCallback(OAIHttpRequestWorker *worker);
    void androiddeviceprovisioning_partners_devices_findByIdentifierCallback(OAIHttpRequestWorker *worker);
    void androiddeviceprovisioning_partners_devices_findByOwnerCallback(OAIHttpRequestWorker *worker);
    void androiddeviceprovisioning_partners_devices_getCallback(OAIHttpRequestWorker *worker);
    void androiddeviceprovisioning_partners_devices_getSimLockStateCallback(OAIHttpRequestWorker *worker);
    void androiddeviceprovisioning_partners_devices_metadataCallback(OAIHttpRequestWorker *worker);
    void androiddeviceprovisioning_partners_devices_unclaimCallback(OAIHttpRequestWorker *worker);
    void androiddeviceprovisioning_partners_devices_unclaimAsyncCallback(OAIHttpRequestWorker *worker);
    void androiddeviceprovisioning_partners_devices_updateMetadataAsyncCallback(OAIHttpRequestWorker *worker);
    void androiddeviceprovisioning_partners_vendors_customers_listCallback(OAIHttpRequestWorker *worker);
    void androiddeviceprovisioning_partners_vendors_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void androiddeviceprovisioning_partners_customers_createSignal(OAICompany summary);
    void androiddeviceprovisioning_partners_customers_listSignal(OAIListCustomersResponse summary);
    void androiddeviceprovisioning_partners_devices_claimSignal(OAIClaimDeviceResponse summary);
    void androiddeviceprovisioning_partners_devices_claimAsyncSignal(OAIOperation summary);
    void androiddeviceprovisioning_partners_devices_findByIdentifierSignal(OAIFindDevicesByDeviceIdentifierResponse summary);
    void androiddeviceprovisioning_partners_devices_findByOwnerSignal(OAIFindDevicesByOwnerResponse summary);
    void androiddeviceprovisioning_partners_devices_getSignal(OAIDevice summary);
    void androiddeviceprovisioning_partners_devices_getSimLockStateSignal(OAIGetDeviceSimLockStateResponse summary);
    void androiddeviceprovisioning_partners_devices_metadataSignal(OAIDeviceMetadata summary);
    void androiddeviceprovisioning_partners_devices_unclaimSignal(OAIObject summary);
    void androiddeviceprovisioning_partners_devices_unclaimAsyncSignal(OAIOperation summary);
    void androiddeviceprovisioning_partners_devices_updateMetadataAsyncSignal(OAIOperation summary);
    void androiddeviceprovisioning_partners_vendors_customers_listSignal(OAIListVendorCustomersResponse summary);
    void androiddeviceprovisioning_partners_vendors_listSignal(OAIListVendorsResponse summary);


    void androiddeviceprovisioning_partners_customers_createSignalFull(OAIHttpRequestWorker *worker, OAICompany summary);
    void androiddeviceprovisioning_partners_customers_listSignalFull(OAIHttpRequestWorker *worker, OAIListCustomersResponse summary);
    void androiddeviceprovisioning_partners_devices_claimSignalFull(OAIHttpRequestWorker *worker, OAIClaimDeviceResponse summary);
    void androiddeviceprovisioning_partners_devices_claimAsyncSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void androiddeviceprovisioning_partners_devices_findByIdentifierSignalFull(OAIHttpRequestWorker *worker, OAIFindDevicesByDeviceIdentifierResponse summary);
    void androiddeviceprovisioning_partners_devices_findByOwnerSignalFull(OAIHttpRequestWorker *worker, OAIFindDevicesByOwnerResponse summary);
    void androiddeviceprovisioning_partners_devices_getSignalFull(OAIHttpRequestWorker *worker, OAIDevice summary);
    void androiddeviceprovisioning_partners_devices_getSimLockStateSignalFull(OAIHttpRequestWorker *worker, OAIGetDeviceSimLockStateResponse summary);
    void androiddeviceprovisioning_partners_devices_metadataSignalFull(OAIHttpRequestWorker *worker, OAIDeviceMetadata summary);
    void androiddeviceprovisioning_partners_devices_unclaimSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void androiddeviceprovisioning_partners_devices_unclaimAsyncSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void androiddeviceprovisioning_partners_devices_updateMetadataAsyncSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void androiddeviceprovisioning_partners_vendors_customers_listSignalFull(OAIHttpRequestWorker *worker, OAIListVendorCustomersResponse summary);
    void androiddeviceprovisioning_partners_vendors_listSignalFull(OAIHttpRequestWorker *worker, OAIListVendorsResponse summary);

    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_customers_createSignalError() instead")
    void androiddeviceprovisioning_partners_customers_createSignalE(OAICompany summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_customers_createSignalError(OAICompany summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_customers_listSignalError() instead")
    void androiddeviceprovisioning_partners_customers_listSignalE(OAIListCustomersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_customers_listSignalError(OAIListCustomersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_devices_claimSignalError() instead")
    void androiddeviceprovisioning_partners_devices_claimSignalE(OAIClaimDeviceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_devices_claimSignalError(OAIClaimDeviceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_devices_claimAsyncSignalError() instead")
    void androiddeviceprovisioning_partners_devices_claimAsyncSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_devices_claimAsyncSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_devices_findByIdentifierSignalError() instead")
    void androiddeviceprovisioning_partners_devices_findByIdentifierSignalE(OAIFindDevicesByDeviceIdentifierResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_devices_findByIdentifierSignalError(OAIFindDevicesByDeviceIdentifierResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_devices_findByOwnerSignalError() instead")
    void androiddeviceprovisioning_partners_devices_findByOwnerSignalE(OAIFindDevicesByOwnerResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_devices_findByOwnerSignalError(OAIFindDevicesByOwnerResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_devices_getSignalError() instead")
    void androiddeviceprovisioning_partners_devices_getSignalE(OAIDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_devices_getSignalError(OAIDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_devices_getSimLockStateSignalError() instead")
    void androiddeviceprovisioning_partners_devices_getSimLockStateSignalE(OAIGetDeviceSimLockStateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_devices_getSimLockStateSignalError(OAIGetDeviceSimLockStateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_devices_metadataSignalError() instead")
    void androiddeviceprovisioning_partners_devices_metadataSignalE(OAIDeviceMetadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_devices_metadataSignalError(OAIDeviceMetadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_devices_unclaimSignalError() instead")
    void androiddeviceprovisioning_partners_devices_unclaimSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_devices_unclaimSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_devices_unclaimAsyncSignalError() instead")
    void androiddeviceprovisioning_partners_devices_unclaimAsyncSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_devices_unclaimAsyncSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_devices_updateMetadataAsyncSignalError() instead")
    void androiddeviceprovisioning_partners_devices_updateMetadataAsyncSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_devices_updateMetadataAsyncSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_vendors_customers_listSignalError() instead")
    void androiddeviceprovisioning_partners_vendors_customers_listSignalE(OAIListVendorCustomersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_vendors_customers_listSignalError(OAIListVendorCustomersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_vendors_listSignalError() instead")
    void androiddeviceprovisioning_partners_vendors_listSignalE(OAIListVendorsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_vendors_listSignalError(OAIListVendorsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_customers_createSignalErrorFull() instead")
    void androiddeviceprovisioning_partners_customers_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_customers_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_customers_listSignalErrorFull() instead")
    void androiddeviceprovisioning_partners_customers_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_customers_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_devices_claimSignalErrorFull() instead")
    void androiddeviceprovisioning_partners_devices_claimSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_devices_claimSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_devices_claimAsyncSignalErrorFull() instead")
    void androiddeviceprovisioning_partners_devices_claimAsyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_devices_claimAsyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_devices_findByIdentifierSignalErrorFull() instead")
    void androiddeviceprovisioning_partners_devices_findByIdentifierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_devices_findByIdentifierSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_devices_findByOwnerSignalErrorFull() instead")
    void androiddeviceprovisioning_partners_devices_findByOwnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_devices_findByOwnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_devices_getSignalErrorFull() instead")
    void androiddeviceprovisioning_partners_devices_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_devices_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_devices_getSimLockStateSignalErrorFull() instead")
    void androiddeviceprovisioning_partners_devices_getSimLockStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_devices_getSimLockStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_devices_metadataSignalErrorFull() instead")
    void androiddeviceprovisioning_partners_devices_metadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_devices_metadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_devices_unclaimSignalErrorFull() instead")
    void androiddeviceprovisioning_partners_devices_unclaimSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_devices_unclaimSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_devices_unclaimAsyncSignalErrorFull() instead")
    void androiddeviceprovisioning_partners_devices_unclaimAsyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_devices_unclaimAsyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_devices_updateMetadataAsyncSignalErrorFull() instead")
    void androiddeviceprovisioning_partners_devices_updateMetadataAsyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_devices_updateMetadataAsyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_vendors_customers_listSignalErrorFull() instead")
    void androiddeviceprovisioning_partners_vendors_customers_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_vendors_customers_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androiddeviceprovisioning_partners_vendors_listSignalErrorFull() instead")
    void androiddeviceprovisioning_partners_vendors_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androiddeviceprovisioning_partners_vendors_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
