/**
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFindDevicesByDeviceIdentifierRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFindDevicesByDeviceIdentifierRequest::OAIFindDevicesByDeviceIdentifierRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFindDevicesByDeviceIdentifierRequest::OAIFindDevicesByDeviceIdentifierRequest() {
    this->initializeModel();
}

OAIFindDevicesByDeviceIdentifierRequest::~OAIFindDevicesByDeviceIdentifierRequest() {}

void OAIFindDevicesByDeviceIdentifierRequest::initializeModel() {

    m_device_identifier_isSet = false;
    m_device_identifier_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;
}

void OAIFindDevicesByDeviceIdentifierRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFindDevicesByDeviceIdentifierRequest::fromJsonObject(QJsonObject json) {

    m_device_identifier_isValid = ::OpenAPI::fromJsonValue(m_device_identifier, json[QString("deviceIdentifier")]);
    m_device_identifier_isSet = !json[QString("deviceIdentifier")].isNull() && m_device_identifier_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("pageToken")]);
    m_page_token_isSet = !json[QString("pageToken")].isNull() && m_page_token_isValid;
}

QString OAIFindDevicesByDeviceIdentifierRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFindDevicesByDeviceIdentifierRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_device_identifier.isSet()) {
        obj.insert(QString("deviceIdentifier"), ::OpenAPI::toJsonValue(m_device_identifier));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("pageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    return obj;
}

OAIDeviceIdentifier OAIFindDevicesByDeviceIdentifierRequest::getDeviceIdentifier() const {
    return m_device_identifier;
}
void OAIFindDevicesByDeviceIdentifierRequest::setDeviceIdentifier(const OAIDeviceIdentifier &device_identifier) {
    m_device_identifier = device_identifier;
    m_device_identifier_isSet = true;
}

bool OAIFindDevicesByDeviceIdentifierRequest::is_device_identifier_Set() const{
    return m_device_identifier_isSet;
}

bool OAIFindDevicesByDeviceIdentifierRequest::is_device_identifier_Valid() const{
    return m_device_identifier_isValid;
}

QString OAIFindDevicesByDeviceIdentifierRequest::getLimit() const {
    return m_limit;
}
void OAIFindDevicesByDeviceIdentifierRequest::setLimit(const QString &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIFindDevicesByDeviceIdentifierRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIFindDevicesByDeviceIdentifierRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIFindDevicesByDeviceIdentifierRequest::getPageToken() const {
    return m_page_token;
}
void OAIFindDevicesByDeviceIdentifierRequest::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIFindDevicesByDeviceIdentifierRequest::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIFindDevicesByDeviceIdentifierRequest::is_page_token_Valid() const{
    return m_page_token_isValid;
}

bool OAIFindDevicesByDeviceIdentifierRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFindDevicesByDeviceIdentifierRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
