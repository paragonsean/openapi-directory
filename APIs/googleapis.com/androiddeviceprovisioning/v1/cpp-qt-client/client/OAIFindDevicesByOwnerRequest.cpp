/**
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFindDevicesByOwnerRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFindDevicesByOwnerRequest::OAIFindDevicesByOwnerRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFindDevicesByOwnerRequest::OAIFindDevicesByOwnerRequest() {
    this->initializeModel();
}

OAIFindDevicesByOwnerRequest::~OAIFindDevicesByOwnerRequest() {}

void OAIFindDevicesByOwnerRequest::initializeModel() {

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_google_workspace_customer_id_isSet = false;
    m_google_workspace_customer_id_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_section_type_isSet = false;
    m_section_type_isValid = false;
}

void OAIFindDevicesByOwnerRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFindDevicesByOwnerRequest::fromJsonObject(QJsonObject json) {

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_google_workspace_customer_id_isValid = ::OpenAPI::fromJsonValue(m_google_workspace_customer_id, json[QString("googleWorkspaceCustomerId")]);
    m_google_workspace_customer_id_isSet = !json[QString("googleWorkspaceCustomerId")].isNull() && m_google_workspace_customer_id_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("pageToken")]);
    m_page_token_isSet = !json[QString("pageToken")].isNull() && m_page_token_isValid;

    m_section_type_isValid = ::OpenAPI::fromJsonValue(m_section_type, json[QString("sectionType")]);
    m_section_type_isSet = !json[QString("sectionType")].isNull() && m_section_type_isValid;
}

QString OAIFindDevicesByOwnerRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFindDevicesByOwnerRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_id.size() > 0) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_google_workspace_customer_id.size() > 0) {
        obj.insert(QString("googleWorkspaceCustomerId"), ::OpenAPI::toJsonValue(m_google_workspace_customer_id));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("pageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_section_type_isSet) {
        obj.insert(QString("sectionType"), ::OpenAPI::toJsonValue(m_section_type));
    }
    return obj;
}

QList<QString> OAIFindDevicesByOwnerRequest::getCustomerId() const {
    return m_customer_id;
}
void OAIFindDevicesByOwnerRequest::setCustomerId(const QList<QString> &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIFindDevicesByOwnerRequest::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIFindDevicesByOwnerRequest::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QList<QString> OAIFindDevicesByOwnerRequest::getGoogleWorkspaceCustomerId() const {
    return m_google_workspace_customer_id;
}
void OAIFindDevicesByOwnerRequest::setGoogleWorkspaceCustomerId(const QList<QString> &google_workspace_customer_id) {
    m_google_workspace_customer_id = google_workspace_customer_id;
    m_google_workspace_customer_id_isSet = true;
}

bool OAIFindDevicesByOwnerRequest::is_google_workspace_customer_id_Set() const{
    return m_google_workspace_customer_id_isSet;
}

bool OAIFindDevicesByOwnerRequest::is_google_workspace_customer_id_Valid() const{
    return m_google_workspace_customer_id_isValid;
}

QString OAIFindDevicesByOwnerRequest::getLimit() const {
    return m_limit;
}
void OAIFindDevicesByOwnerRequest::setLimit(const QString &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIFindDevicesByOwnerRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIFindDevicesByOwnerRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIFindDevicesByOwnerRequest::getPageToken() const {
    return m_page_token;
}
void OAIFindDevicesByOwnerRequest::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIFindDevicesByOwnerRequest::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIFindDevicesByOwnerRequest::is_page_token_Valid() const{
    return m_page_token_isValid;
}

QString OAIFindDevicesByOwnerRequest::getSectionType() const {
    return m_section_type;
}
void OAIFindDevicesByOwnerRequest::setSectionType(const QString &section_type) {
    m_section_type = section_type;
    m_section_type_isSet = true;
}

bool OAIFindDevicesByOwnerRequest::is_section_type_Set() const{
    return m_section_type_isSet;
}

bool OAIFindDevicesByOwnerRequest::is_section_type_Valid() const{
    return m_section_type_isValid;
}

bool OAIFindDevicesByOwnerRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_workspace_customer_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFindDevicesByOwnerRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
