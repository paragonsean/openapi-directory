/**
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceIdentifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceIdentifier::OAIDeviceIdentifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceIdentifier::OAIDeviceIdentifier() {
    this->initializeModel();
}

OAIDeviceIdentifier::~OAIDeviceIdentifier() {}

void OAIDeviceIdentifier::initializeModel() {

    m_chrome_os_attested_device_id_isSet = false;
    m_chrome_os_attested_device_id_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_imei_isSet = false;
    m_imei_isValid = false;

    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;

    m_meid_isSet = false;
    m_meid_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;
}

void OAIDeviceIdentifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceIdentifier::fromJsonObject(QJsonObject json) {

    m_chrome_os_attested_device_id_isValid = ::OpenAPI::fromJsonValue(m_chrome_os_attested_device_id, json[QString("chromeOsAttestedDeviceId")]);
    m_chrome_os_attested_device_id_isSet = !json[QString("chromeOsAttestedDeviceId")].isNull() && m_chrome_os_attested_device_id_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("deviceType")]);
    m_device_type_isSet = !json[QString("deviceType")].isNull() && m_device_type_isValid;

    m_imei_isValid = ::OpenAPI::fromJsonValue(m_imei, json[QString("imei")]);
    m_imei_isSet = !json[QString("imei")].isNull() && m_imei_isValid;

    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_manufacturer, json[QString("manufacturer")]);
    m_manufacturer_isSet = !json[QString("manufacturer")].isNull() && m_manufacturer_isValid;

    m_meid_isValid = ::OpenAPI::fromJsonValue(m_meid, json[QString("meid")]);
    m_meid_isSet = !json[QString("meid")].isNull() && m_meid_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;
}

QString OAIDeviceIdentifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceIdentifier::asJsonObject() const {
    QJsonObject obj;
    if (m_chrome_os_attested_device_id_isSet) {
        obj.insert(QString("chromeOsAttestedDeviceId"), ::OpenAPI::toJsonValue(m_chrome_os_attested_device_id));
    }
    if (m_device_type_isSet) {
        obj.insert(QString("deviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_imei_isSet) {
        obj.insert(QString("imei"), ::OpenAPI::toJsonValue(m_imei));
    }
    if (m_manufacturer_isSet) {
        obj.insert(QString("manufacturer"), ::OpenAPI::toJsonValue(m_manufacturer));
    }
    if (m_meid_isSet) {
        obj.insert(QString("meid"), ::OpenAPI::toJsonValue(m_meid));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    return obj;
}

QString OAIDeviceIdentifier::getChromeOsAttestedDeviceId() const {
    return m_chrome_os_attested_device_id;
}
void OAIDeviceIdentifier::setChromeOsAttestedDeviceId(const QString &chrome_os_attested_device_id) {
    m_chrome_os_attested_device_id = chrome_os_attested_device_id;
    m_chrome_os_attested_device_id_isSet = true;
}

bool OAIDeviceIdentifier::is_chrome_os_attested_device_id_Set() const{
    return m_chrome_os_attested_device_id_isSet;
}

bool OAIDeviceIdentifier::is_chrome_os_attested_device_id_Valid() const{
    return m_chrome_os_attested_device_id_isValid;
}

QString OAIDeviceIdentifier::getDeviceType() const {
    return m_device_type;
}
void OAIDeviceIdentifier::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIDeviceIdentifier::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIDeviceIdentifier::is_device_type_Valid() const{
    return m_device_type_isValid;
}

QString OAIDeviceIdentifier::getImei() const {
    return m_imei;
}
void OAIDeviceIdentifier::setImei(const QString &imei) {
    m_imei = imei;
    m_imei_isSet = true;
}

bool OAIDeviceIdentifier::is_imei_Set() const{
    return m_imei_isSet;
}

bool OAIDeviceIdentifier::is_imei_Valid() const{
    return m_imei_isValid;
}

QString OAIDeviceIdentifier::getManufacturer() const {
    return m_manufacturer;
}
void OAIDeviceIdentifier::setManufacturer(const QString &manufacturer) {
    m_manufacturer = manufacturer;
    m_manufacturer_isSet = true;
}

bool OAIDeviceIdentifier::is_manufacturer_Set() const{
    return m_manufacturer_isSet;
}

bool OAIDeviceIdentifier::is_manufacturer_Valid() const{
    return m_manufacturer_isValid;
}

QString OAIDeviceIdentifier::getMeid() const {
    return m_meid;
}
void OAIDeviceIdentifier::setMeid(const QString &meid) {
    m_meid = meid;
    m_meid_isSet = true;
}

bool OAIDeviceIdentifier::is_meid_Set() const{
    return m_meid_isSet;
}

bool OAIDeviceIdentifier::is_meid_Valid() const{
    return m_meid_isValid;
}

QString OAIDeviceIdentifier::getModel() const {
    return m_model;
}
void OAIDeviceIdentifier::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIDeviceIdentifier::is_model_Set() const{
    return m_model_isSet;
}

bool OAIDeviceIdentifier::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIDeviceIdentifier::getSerialNumber() const {
    return m_serial_number;
}
void OAIDeviceIdentifier::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIDeviceIdentifier::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIDeviceIdentifier::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

bool OAIDeviceIdentifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chrome_os_attested_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imei_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceIdentifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
