/*
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PartnerClaim;
import org.openapitools.client.model.PartnerUnclaim;
import org.openapitools.client.model.PerDeviceStatusInBatch;
import org.openapitools.client.model.UpdateMetadataArguments;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A task for each device in the operation. Corresponds to each device change in the request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:29.867792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OperationPerDevice {
  public static final String SERIALIZED_NAME_CLAIM = "claim";
  @SerializedName(SERIALIZED_NAME_CLAIM)
  private PartnerClaim claim;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private PerDeviceStatusInBatch result;

  public static final String SERIALIZED_NAME_UNCLAIM = "unclaim";
  @SerializedName(SERIALIZED_NAME_UNCLAIM)
  private PartnerUnclaim unclaim;

  public static final String SERIALIZED_NAME_UPDATE_METADATA = "updateMetadata";
  @SerializedName(SERIALIZED_NAME_UPDATE_METADATA)
  private UpdateMetadataArguments updateMetadata;

  public OperationPerDevice() {
  }

  public OperationPerDevice claim(PartnerClaim claim) {
    this.claim = claim;
    return this;
  }

  /**
   * Get claim
   * @return claim
   */
  @javax.annotation.Nullable
  public PartnerClaim getClaim() {
    return claim;
  }

  public void setClaim(PartnerClaim claim) {
    this.claim = claim;
  }


  public OperationPerDevice result(PerDeviceStatusInBatch result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public PerDeviceStatusInBatch getResult() {
    return result;
  }

  public void setResult(PerDeviceStatusInBatch result) {
    this.result = result;
  }


  public OperationPerDevice unclaim(PartnerUnclaim unclaim) {
    this.unclaim = unclaim;
    return this;
  }

  /**
   * Get unclaim
   * @return unclaim
   */
  @javax.annotation.Nullable
  public PartnerUnclaim getUnclaim() {
    return unclaim;
  }

  public void setUnclaim(PartnerUnclaim unclaim) {
    this.unclaim = unclaim;
  }


  public OperationPerDevice updateMetadata(UpdateMetadataArguments updateMetadata) {
    this.updateMetadata = updateMetadata;
    return this;
  }

  /**
   * Get updateMetadata
   * @return updateMetadata
   */
  @javax.annotation.Nullable
  public UpdateMetadataArguments getUpdateMetadata() {
    return updateMetadata;
  }

  public void setUpdateMetadata(UpdateMetadataArguments updateMetadata) {
    this.updateMetadata = updateMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperationPerDevice operationPerDevice = (OperationPerDevice) o;
    return Objects.equals(this.claim, operationPerDevice.claim) &&
        Objects.equals(this.result, operationPerDevice.result) &&
        Objects.equals(this.unclaim, operationPerDevice.unclaim) &&
        Objects.equals(this.updateMetadata, operationPerDevice.updateMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(claim, result, unclaim, updateMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperationPerDevice {\n");
    sb.append("    claim: ").append(toIndentedString(claim)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    unclaim: ").append(toIndentedString(unclaim)).append("\n");
    sb.append("    updateMetadata: ").append(toIndentedString(updateMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("claim");
    openapiFields.add("result");
    openapiFields.add("unclaim");
    openapiFields.add("updateMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OperationPerDevice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OperationPerDevice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OperationPerDevice is not found in the empty JSON string", OperationPerDevice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OperationPerDevice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OperationPerDevice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `claim`
      if (jsonObj.get("claim") != null && !jsonObj.get("claim").isJsonNull()) {
        PartnerClaim.validateJsonElement(jsonObj.get("claim"));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        PerDeviceStatusInBatch.validateJsonElement(jsonObj.get("result"));
      }
      // validate the optional field `unclaim`
      if (jsonObj.get("unclaim") != null && !jsonObj.get("unclaim").isJsonNull()) {
        PartnerUnclaim.validateJsonElement(jsonObj.get("unclaim"));
      }
      // validate the optional field `updateMetadata`
      if (jsonObj.get("updateMetadata") != null && !jsonObj.get("updateMetadata").isJsonNull()) {
        UpdateMetadataArguments.validateJsonElement(jsonObj.get("updateMetadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OperationPerDevice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OperationPerDevice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OperationPerDevice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OperationPerDevice.class));

       return (TypeAdapter<T>) new TypeAdapter<OperationPerDevice>() {
           @Override
           public void write(JsonWriter out, OperationPerDevice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OperationPerDevice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OperationPerDevice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OperationPerDevice
   * @throws IOException if the JSON string is invalid with respect to OperationPerDevice
   */
  public static OperationPerDevice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OperationPerDevice.class);
  }

  /**
   * Convert an instance of OperationPerDevice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

