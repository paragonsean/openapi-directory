/*
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A configuration collects the provisioning options for Android devices. Each configuration combines the following: * The EMM device policy controller (DPC) installed on the devices. * EMM policies enforced on the devices. * Metadata displayed on the device to help users during setup. Customers can add as many configurations as they need. However, zero-touch enrollment works best when a customer sets a default configuration that&#39;s applied to any new devices the organization purchases.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:29.867792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModelConfiguration {
  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_CONFIGURATION_ID = "configurationId";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_ID)
  private String configurationId;

  public static final String SERIALIZED_NAME_CONFIGURATION_NAME = "configurationName";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_NAME)
  private String configurationName;

  public static final String SERIALIZED_NAME_CONTACT_EMAIL = "contactEmail";
  @SerializedName(SERIALIZED_NAME_CONTACT_EMAIL)
  private String contactEmail;

  public static final String SERIALIZED_NAME_CONTACT_PHONE = "contactPhone";
  @SerializedName(SERIALIZED_NAME_CONTACT_PHONE)
  private String contactPhone;

  public static final String SERIALIZED_NAME_CUSTOM_MESSAGE = "customMessage";
  @SerializedName(SERIALIZED_NAME_CUSTOM_MESSAGE)
  private String customMessage;

  public static final String SERIALIZED_NAME_DPC_EXTRAS = "dpcExtras";
  @SerializedName(SERIALIZED_NAME_DPC_EXTRAS)
  private String dpcExtras;

  public static final String SERIALIZED_NAME_DPC_RESOURCE_PATH = "dpcResourcePath";
  @SerializedName(SERIALIZED_NAME_DPC_RESOURCE_PATH)
  private String dpcResourcePath;

  public static final String SERIALIZED_NAME_FORCED_RESET_TIME = "forcedResetTime";
  @SerializedName(SERIALIZED_NAME_FORCED_RESET_TIME)
  private String forcedResetTime;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public ModelConfiguration() {
  }

  public ModelConfiguration(
     String configurationId, 
     String name
  ) {
    this();
    this.configurationId = configurationId;
    this.name = name;
  }

  public ModelConfiguration companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Required. The name of the organization. Zero-touch enrollment shows this organization name to device users during device provisioning.
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  /**
   * Output only. The ID of the configuration. Assigned by the server.
   * @return configurationId
   */
  @javax.annotation.Nullable
  public String getConfigurationId() {
    return configurationId;
  }



  public ModelConfiguration configurationName(String configurationName) {
    this.configurationName = configurationName;
    return this;
  }

  /**
   * Required. A short name that describes the configuration&#39;s purpose. For example, _Sales team_ or _Temporary employees_. The zero-touch enrollment portal displays this name to IT admins.
   * @return configurationName
   */
  @javax.annotation.Nullable
  public String getConfigurationName() {
    return configurationName;
  }

  public void setConfigurationName(String configurationName) {
    this.configurationName = configurationName;
  }


  public ModelConfiguration contactEmail(String contactEmail) {
    this.contactEmail = contactEmail;
    return this;
  }

  /**
   * Required. The email address that device users can contact to get help. Zero-touch enrollment shows this email address to device users before device provisioning. The value is validated on input.
   * @return contactEmail
   */
  @javax.annotation.Nullable
  public String getContactEmail() {
    return contactEmail;
  }

  public void setContactEmail(String contactEmail) {
    this.contactEmail = contactEmail;
  }


  public ModelConfiguration contactPhone(String contactPhone) {
    this.contactPhone = contactPhone;
    return this;
  }

  /**
   * Required. The telephone number that device users can call, using another device, to get help. Zero-touch enrollment shows this number to device users before device provisioning. Accepts numerals, spaces, the plus sign, hyphens, and parentheses.
   * @return contactPhone
   */
  @javax.annotation.Nullable
  public String getContactPhone() {
    return contactPhone;
  }

  public void setContactPhone(String contactPhone) {
    this.contactPhone = contactPhone;
  }


  public ModelConfiguration customMessage(String customMessage) {
    this.customMessage = customMessage;
    return this;
  }

  /**
   * A message, containing one or two sentences, to help device users get help or give them more details about whatâ€™s happening to their device. Zero-touch enrollment shows this message before the device is provisioned.
   * @return customMessage
   */
  @javax.annotation.Nullable
  public String getCustomMessage() {
    return customMessage;
  }

  public void setCustomMessage(String customMessage) {
    this.customMessage = customMessage;
  }


  public ModelConfiguration dpcExtras(String dpcExtras) {
    this.dpcExtras = dpcExtras;
    return this;
  }

  /**
   * The JSON-formatted EMM provisioning extras that are passed to the DPC.
   * @return dpcExtras
   */
  @javax.annotation.Nullable
  public String getDpcExtras() {
    return dpcExtras;
  }

  public void setDpcExtras(String dpcExtras) {
    this.dpcExtras = dpcExtras;
  }


  public ModelConfiguration dpcResourcePath(String dpcResourcePath) {
    this.dpcResourcePath = dpcResourcePath;
    return this;
  }

  /**
   * Required. The resource name of the selected DPC (device policy controller) in the format &#x60;customers/[CUSTOMER_ID]/dpcs/_*&#x60;. To list the supported DPCs, call &#x60;customers.dpcs.list&#x60;.
   * @return dpcResourcePath
   */
  @javax.annotation.Nullable
  public String getDpcResourcePath() {
    return dpcResourcePath;
  }

  public void setDpcResourcePath(String dpcResourcePath) {
    this.dpcResourcePath = dpcResourcePath;
  }


  public ModelConfiguration forcedResetTime(String forcedResetTime) {
    this.forcedResetTime = forcedResetTime;
    return this;
  }

  /**
   * Optional. The timeout before forcing factory reset the device if the device doesn&#39;t go through provisioning in the setup wizard, usually due to lack of network connectivity during setup wizard. Ranges from 0-6 hours, with 2 hours being the default if unset.
   * @return forcedResetTime
   */
  @javax.annotation.Nullable
  public String getForcedResetTime() {
    return forcedResetTime;
  }

  public void setForcedResetTime(String forcedResetTime) {
    this.forcedResetTime = forcedResetTime;
  }


  public ModelConfiguration isDefault(Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * Required. Whether this is the default configuration that zero-touch enrollment applies to any new devices the organization purchases in the future. Only one customer configuration can be the default. Setting this value to &#x60;true&#x60;, changes the previous default configuration&#39;s &#x60;isDefault&#x60; value to &#x60;false&#x60;.
   * @return isDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }


  /**
   * Output only. The API resource name in the format &#x60;customers/[CUSTOMER_ID]/configurations/[CONFIGURATION_ID]&#x60;. Assigned by the server.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelConfiguration _configuration = (ModelConfiguration) o;
    return Objects.equals(this.companyName, _configuration.companyName) &&
        Objects.equals(this.configurationId, _configuration.configurationId) &&
        Objects.equals(this.configurationName, _configuration.configurationName) &&
        Objects.equals(this.contactEmail, _configuration.contactEmail) &&
        Objects.equals(this.contactPhone, _configuration.contactPhone) &&
        Objects.equals(this.customMessage, _configuration.customMessage) &&
        Objects.equals(this.dpcExtras, _configuration.dpcExtras) &&
        Objects.equals(this.dpcResourcePath, _configuration.dpcResourcePath) &&
        Objects.equals(this.forcedResetTime, _configuration.forcedResetTime) &&
        Objects.equals(this.isDefault, _configuration.isDefault) &&
        Objects.equals(this.name, _configuration.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companyName, configurationId, configurationName, contactEmail, contactPhone, customMessage, dpcExtras, dpcResourcePath, forcedResetTime, isDefault, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelConfiguration {\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    configurationId: ").append(toIndentedString(configurationId)).append("\n");
    sb.append("    configurationName: ").append(toIndentedString(configurationName)).append("\n");
    sb.append("    contactEmail: ").append(toIndentedString(contactEmail)).append("\n");
    sb.append("    contactPhone: ").append(toIndentedString(contactPhone)).append("\n");
    sb.append("    customMessage: ").append(toIndentedString(customMessage)).append("\n");
    sb.append("    dpcExtras: ").append(toIndentedString(dpcExtras)).append("\n");
    sb.append("    dpcResourcePath: ").append(toIndentedString(dpcResourcePath)).append("\n");
    sb.append("    forcedResetTime: ").append(toIndentedString(forcedResetTime)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("companyName");
    openapiFields.add("configurationId");
    openapiFields.add("configurationName");
    openapiFields.add("contactEmail");
    openapiFields.add("contactPhone");
    openapiFields.add("customMessage");
    openapiFields.add("dpcExtras");
    openapiFields.add("dpcResourcePath");
    openapiFields.add("forcedResetTime");
    openapiFields.add("isDefault");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelConfiguration is not found in the empty JSON string", ModelConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if ((jsonObj.get("configurationId") != null && !jsonObj.get("configurationId").isJsonNull()) && !jsonObj.get("configurationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configurationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configurationId").toString()));
      }
      if ((jsonObj.get("configurationName") != null && !jsonObj.get("configurationName").isJsonNull()) && !jsonObj.get("configurationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configurationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configurationName").toString()));
      }
      if ((jsonObj.get("contactEmail") != null && !jsonObj.get("contactEmail").isJsonNull()) && !jsonObj.get("contactEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactEmail").toString()));
      }
      if ((jsonObj.get("contactPhone") != null && !jsonObj.get("contactPhone").isJsonNull()) && !jsonObj.get("contactPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactPhone").toString()));
      }
      if ((jsonObj.get("customMessage") != null && !jsonObj.get("customMessage").isJsonNull()) && !jsonObj.get("customMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customMessage").toString()));
      }
      if ((jsonObj.get("dpcExtras") != null && !jsonObj.get("dpcExtras").isJsonNull()) && !jsonObj.get("dpcExtras").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dpcExtras` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dpcExtras").toString()));
      }
      if ((jsonObj.get("dpcResourcePath") != null && !jsonObj.get("dpcResourcePath").isJsonNull()) && !jsonObj.get("dpcResourcePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dpcResourcePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dpcResourcePath").toString()));
      }
      if ((jsonObj.get("forcedResetTime") != null && !jsonObj.get("forcedResetTime").isJsonNull()) && !jsonObj.get("forcedResetTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forcedResetTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forcedResetTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelConfiguration>() {
           @Override
           public void write(JsonWriter out, ModelConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelConfiguration
   * @throws IOException if the JSON string is invalid with respect to ModelConfiguration
   */
  public static ModelConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelConfiguration.class);
  }

  /**
   * Convert an instance of ModelConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

