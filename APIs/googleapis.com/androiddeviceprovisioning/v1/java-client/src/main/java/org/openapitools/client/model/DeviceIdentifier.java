/*
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Encapsulates hardware and product IDs to identify a manufactured device. To understand requirements on identifier sets, read [Identifiers](https://developers.google.com/zero-touch/guides/identifiers).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:29.867792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceIdentifier {
  public static final String SERIALIZED_NAME_CHROME_OS_ATTESTED_DEVICE_ID = "chromeOsAttestedDeviceId";
  @SerializedName(SERIALIZED_NAME_CHROME_OS_ATTESTED_DEVICE_ID)
  private String chromeOsAttestedDeviceId;

  /**
   * The type of the device
   */
  @JsonAdapter(DeviceTypeEnum.Adapter.class)
  public enum DeviceTypeEnum {
    UNSPECIFIED("DEVICE_TYPE_UNSPECIFIED"),
    
    ANDROID("DEVICE_TYPE_ANDROID"),
    
    CHROME_OS("DEVICE_TYPE_CHROME_OS");

    private String value;

    DeviceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeviceTypeEnum fromValue(String value) {
      for (DeviceTypeEnum b : DeviceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeviceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeviceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeviceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeviceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeviceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "deviceType";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private DeviceTypeEnum deviceType;

  public static final String SERIALIZED_NAME_IMEI = "imei";
  @SerializedName(SERIALIZED_NAME_IMEI)
  private String imei;

  public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER)
  private String manufacturer;

  public static final String SERIALIZED_NAME_MEID = "meid";
  @SerializedName(SERIALIZED_NAME_MEID)
  private String meid;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public DeviceIdentifier() {
  }

  public DeviceIdentifier chromeOsAttestedDeviceId(String chromeOsAttestedDeviceId) {
    this.chromeOsAttestedDeviceId = chromeOsAttestedDeviceId;
    return this;
  }

  /**
   * An identifier provided by OEMs, carried through the production and sales process. Only applicable to Chrome OS devices.
   * @return chromeOsAttestedDeviceId
   */
  @javax.annotation.Nullable
  public String getChromeOsAttestedDeviceId() {
    return chromeOsAttestedDeviceId;
  }

  public void setChromeOsAttestedDeviceId(String chromeOsAttestedDeviceId) {
    this.chromeOsAttestedDeviceId = chromeOsAttestedDeviceId;
  }


  public DeviceIdentifier deviceType(DeviceTypeEnum deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  /**
   * The type of the device
   * @return deviceType
   */
  @javax.annotation.Nullable
  public DeviceTypeEnum getDeviceType() {
    return deviceType;
  }

  public void setDeviceType(DeviceTypeEnum deviceType) {
    this.deviceType = deviceType;
  }


  public DeviceIdentifier imei(String imei) {
    this.imei = imei;
    return this;
  }

  /**
   * The device’s IMEI number. Validated on input.
   * @return imei
   */
  @javax.annotation.Nullable
  public String getImei() {
    return imei;
  }

  public void setImei(String imei) {
    this.imei = imei;
  }


  public DeviceIdentifier manufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  /**
   * The device manufacturer’s name. Matches the device&#39;s built-in value returned from &#x60;android.os.Build.MANUFACTURER&#x60;. Allowed values are listed in [Android manufacturers](/zero-touch/resources/manufacturer-names#manufacturers-names).
   * @return manufacturer
   */
  @javax.annotation.Nullable
  public String getManufacturer() {
    return manufacturer;
  }

  public void setManufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
  }


  public DeviceIdentifier meid(String meid) {
    this.meid = meid;
    return this;
  }

  /**
   * The device’s MEID number.
   * @return meid
   */
  @javax.annotation.Nullable
  public String getMeid() {
    return meid;
  }

  public void setMeid(String meid) {
    this.meid = meid;
  }


  public DeviceIdentifier model(String model) {
    this.model = model;
    return this;
  }

  /**
   * The device model&#39;s name. Allowed values are listed in [Android models](/zero-touch/resources/manufacturer-names#model-names) and [Chrome OS models](https://support.google.com/chrome/a/answer/10130175#identify_compatible).
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public DeviceIdentifier serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * The manufacturer&#39;s serial number for the device. This value might not be unique across different device models.
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceIdentifier deviceIdentifier = (DeviceIdentifier) o;
    return Objects.equals(this.chromeOsAttestedDeviceId, deviceIdentifier.chromeOsAttestedDeviceId) &&
        Objects.equals(this.deviceType, deviceIdentifier.deviceType) &&
        Objects.equals(this.imei, deviceIdentifier.imei) &&
        Objects.equals(this.manufacturer, deviceIdentifier.manufacturer) &&
        Objects.equals(this.meid, deviceIdentifier.meid) &&
        Objects.equals(this.model, deviceIdentifier.model) &&
        Objects.equals(this.serialNumber, deviceIdentifier.serialNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chromeOsAttestedDeviceId, deviceType, imei, manufacturer, meid, model, serialNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceIdentifier {\n");
    sb.append("    chromeOsAttestedDeviceId: ").append(toIndentedString(chromeOsAttestedDeviceId)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    imei: ").append(toIndentedString(imei)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    meid: ").append(toIndentedString(meid)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chromeOsAttestedDeviceId");
    openapiFields.add("deviceType");
    openapiFields.add("imei");
    openapiFields.add("manufacturer");
    openapiFields.add("meid");
    openapiFields.add("model");
    openapiFields.add("serialNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceIdentifier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceIdentifier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceIdentifier is not found in the empty JSON string", DeviceIdentifier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceIdentifier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceIdentifier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chromeOsAttestedDeviceId") != null && !jsonObj.get("chromeOsAttestedDeviceId").isJsonNull()) && !jsonObj.get("chromeOsAttestedDeviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chromeOsAttestedDeviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chromeOsAttestedDeviceId").toString()));
      }
      if ((jsonObj.get("deviceType") != null && !jsonObj.get("deviceType").isJsonNull()) && !jsonObj.get("deviceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceType").toString()));
      }
      // validate the optional field `deviceType`
      if (jsonObj.get("deviceType") != null && !jsonObj.get("deviceType").isJsonNull()) {
        DeviceTypeEnum.validateJsonElement(jsonObj.get("deviceType"));
      }
      if ((jsonObj.get("imei") != null && !jsonObj.get("imei").isJsonNull()) && !jsonObj.get("imei").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imei` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imei").toString()));
      }
      if ((jsonObj.get("manufacturer") != null && !jsonObj.get("manufacturer").isJsonNull()) && !jsonObj.get("manufacturer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manufacturer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manufacturer").toString()));
      }
      if ((jsonObj.get("meid") != null && !jsonObj.get("meid").isJsonNull()) && !jsonObj.get("meid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meid").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("serialNumber") != null && !jsonObj.get("serialNumber").isJsonNull()) && !jsonObj.get("serialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serialNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceIdentifier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceIdentifier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceIdentifier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceIdentifier.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceIdentifier>() {
           @Override
           public void write(JsonWriter out, DeviceIdentifier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceIdentifier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceIdentifier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceIdentifier
   * @throws IOException if the JSON string is invalid with respect to DeviceIdentifier
   */
  public static DeviceIdentifier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceIdentifier.class);
  }

  /**
   * Convert an instance of DeviceIdentifier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

