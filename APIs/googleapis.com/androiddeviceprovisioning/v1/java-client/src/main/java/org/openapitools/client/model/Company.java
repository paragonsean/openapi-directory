/*
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleWorkspaceAccount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A reseller, vendor, or customer in the zero-touch reseller and customer APIs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:29.867792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Company {
  public static final String SERIALIZED_NAME_ADMIN_EMAILS = "adminEmails";
  @SerializedName(SERIALIZED_NAME_ADMIN_EMAILS)
  private List<String> adminEmails = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPANY_ID = "companyId";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  private String companyId;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_GOOGLE_WORKSPACE_ACCOUNT = "googleWorkspaceAccount";
  @SerializedName(SERIALIZED_NAME_GOOGLE_WORKSPACE_ACCOUNT)
  private GoogleWorkspaceAccount googleWorkspaceAccount;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER_EMAILS = "ownerEmails";
  @SerializedName(SERIALIZED_NAME_OWNER_EMAILS)
  private List<String> ownerEmails = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKIP_WELCOME_EMAIL = "skipWelcomeEmail";
  @SerializedName(SERIALIZED_NAME_SKIP_WELCOME_EMAIL)
  private Boolean skipWelcomeEmail;

  /**
   * Output only. Whether any user from the company has accepted the latest Terms of Service (ToS). See TermsStatus.
   */
  @JsonAdapter(TermsStatusEnum.Adapter.class)
  public enum TermsStatusEnum {
    UNSPECIFIED("TERMS_STATUS_UNSPECIFIED"),
    
    NOT_ACCEPTED("TERMS_STATUS_NOT_ACCEPTED"),
    
    ACCEPTED("TERMS_STATUS_ACCEPTED"),
    
    STALE("TERMS_STATUS_STALE");

    private String value;

    TermsStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TermsStatusEnum fromValue(String value) {
      for (TermsStatusEnum b : TermsStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TermsStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TermsStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TermsStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TermsStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TermsStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TERMS_STATUS = "termsStatus";
  @SerializedName(SERIALIZED_NAME_TERMS_STATUS)
  private TermsStatusEnum termsStatus;

  public Company() {
  }

  public Company(
     String companyId, 
     String name, 
     TermsStatusEnum termsStatus
  ) {
    this();
    this.companyId = companyId;
    this.name = name;
    this.termsStatus = termsStatus;
  }

  public Company adminEmails(List<String> adminEmails) {
    this.adminEmails = adminEmails;
    return this;
  }

  public Company addAdminEmailsItem(String adminEmailsItem) {
    if (this.adminEmails == null) {
      this.adminEmails = new ArrayList<>();
    }
    this.adminEmails.add(adminEmailsItem);
    return this;
  }

  /**
   * Optional. Email address of customer&#39;s users in the admin role. Each email address must be associated with a Google Account.
   * @return adminEmails
   */
  @javax.annotation.Nullable
  public List<String> getAdminEmails() {
    return adminEmails;
  }

  public void setAdminEmails(List<String> adminEmails) {
    this.adminEmails = adminEmails;
  }


  /**
   * Output only. The ID of the company. Assigned by the server.
   * @return companyId
   */
  @javax.annotation.Nullable
  public String getCompanyId() {
    return companyId;
  }



  public Company companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Required. The name of the company. For example _XYZ Corp_. Displayed to the company&#39;s employees in the zero-touch enrollment portal.
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public Company googleWorkspaceAccount(GoogleWorkspaceAccount googleWorkspaceAccount) {
    this.googleWorkspaceAccount = googleWorkspaceAccount;
    return this;
  }

  /**
   * Get googleWorkspaceAccount
   * @return googleWorkspaceAccount
   */
  @javax.annotation.Nullable
  public GoogleWorkspaceAccount getGoogleWorkspaceAccount() {
    return googleWorkspaceAccount;
  }

  public void setGoogleWorkspaceAccount(GoogleWorkspaceAccount googleWorkspaceAccount) {
    this.googleWorkspaceAccount = googleWorkspaceAccount;
  }


  public Company languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Input only. The preferred locale of the customer represented as a BCP47 language code. This field is validated on input and requests containing unsupported language codes will be rejected. Supported language codes: Arabic (ar) Chinese (Hong Kong) (zh-HK) Chinese (Simplified) (zh-CN) Chinese (Traditional) (zh-TW) Czech (cs) Danish (da) Dutch (nl) English (UK) (en-GB) English (US) (en-US) Filipino (fil) Finnish (fi) French (fr) German (de) Hebrew (iw) Hindi (hi) Hungarian (hu) Indonesian (id) Italian (it) Japanese (ja) Korean (ko) Norwegian (Bokmal) (no) Polish (pl) Portuguese (Brazil) (pt-BR) Portuguese (Portugal) (pt-PT) Russian (ru) Spanish (es) Spanish (Latin America) (es-419) Swedish (sv) Thai (th) Turkish (tr) Ukrainian (uk) Vietnamese (vi)
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  /**
   * Output only. The API resource name of the company. The resource name is one of the following formats: * &#x60;partners/[PARTNER_ID]/customers/[CUSTOMER_ID]&#x60; * &#x60;partners/[PARTNER_ID]/vendors/[VENDOR_ID]&#x60; * &#x60;partners/[PARTNER_ID]/vendors/[VENDOR_ID]/customers/[CUSTOMER_ID]&#x60; Assigned by the server.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Company ownerEmails(List<String> ownerEmails) {
    this.ownerEmails = ownerEmails;
    return this;
  }

  public Company addOwnerEmailsItem(String ownerEmailsItem) {
    if (this.ownerEmails == null) {
      this.ownerEmails = new ArrayList<>();
    }
    this.ownerEmails.add(ownerEmailsItem);
    return this;
  }

  /**
   * Required. Input only. Email address of customer&#39;s users in the owner role. At least one &#x60;owner_email&#x60; is required. Owners share the same access as admins but can also add, delete, and edit your organization&#39;s portal users.
   * @return ownerEmails
   */
  @javax.annotation.Nullable
  public List<String> getOwnerEmails() {
    return ownerEmails;
  }

  public void setOwnerEmails(List<String> ownerEmails) {
    this.ownerEmails = ownerEmails;
  }


  public Company skipWelcomeEmail(Boolean skipWelcomeEmail) {
    this.skipWelcomeEmail = skipWelcomeEmail;
    return this;
  }

  /**
   * Input only. If set to true, welcome email will not be sent to the customer. It is recommended to skip the welcome email if devices will be claimed with additional DEVICE_PROTECTION service, as the customer will receive separate emails at device claim time. This field is ignored if this is not a Zero-touch customer.
   * @return skipWelcomeEmail
   */
  @javax.annotation.Nullable
  public Boolean getSkipWelcomeEmail() {
    return skipWelcomeEmail;
  }

  public void setSkipWelcomeEmail(Boolean skipWelcomeEmail) {
    this.skipWelcomeEmail = skipWelcomeEmail;
  }


  /**
   * Output only. Whether any user from the company has accepted the latest Terms of Service (ToS). See TermsStatus.
   * @return termsStatus
   */
  @javax.annotation.Nullable
  public TermsStatusEnum getTermsStatus() {
    return termsStatus;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Company company = (Company) o;
    return Objects.equals(this.adminEmails, company.adminEmails) &&
        Objects.equals(this.companyId, company.companyId) &&
        Objects.equals(this.companyName, company.companyName) &&
        Objects.equals(this.googleWorkspaceAccount, company.googleWorkspaceAccount) &&
        Objects.equals(this.languageCode, company.languageCode) &&
        Objects.equals(this.name, company.name) &&
        Objects.equals(this.ownerEmails, company.ownerEmails) &&
        Objects.equals(this.skipWelcomeEmail, company.skipWelcomeEmail) &&
        Objects.equals(this.termsStatus, company.termsStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminEmails, companyId, companyName, googleWorkspaceAccount, languageCode, name, ownerEmails, skipWelcomeEmail, termsStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Company {\n");
    sb.append("    adminEmails: ").append(toIndentedString(adminEmails)).append("\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    googleWorkspaceAccount: ").append(toIndentedString(googleWorkspaceAccount)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ownerEmails: ").append(toIndentedString(ownerEmails)).append("\n");
    sb.append("    skipWelcomeEmail: ").append(toIndentedString(skipWelcomeEmail)).append("\n");
    sb.append("    termsStatus: ").append(toIndentedString(termsStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adminEmails");
    openapiFields.add("companyId");
    openapiFields.add("companyName");
    openapiFields.add("googleWorkspaceAccount");
    openapiFields.add("languageCode");
    openapiFields.add("name");
    openapiFields.add("ownerEmails");
    openapiFields.add("skipWelcomeEmail");
    openapiFields.add("termsStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Company
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Company.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Company is not found in the empty JSON string", Company.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Company.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Company` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("adminEmails") != null && !jsonObj.get("adminEmails").isJsonNull() && !jsonObj.get("adminEmails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminEmails` to be an array in the JSON string but got `%s`", jsonObj.get("adminEmails").toString()));
      }
      if ((jsonObj.get("companyId") != null && !jsonObj.get("companyId").isJsonNull()) && !jsonObj.get("companyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyId").toString()));
      }
      if ((jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      // validate the optional field `googleWorkspaceAccount`
      if (jsonObj.get("googleWorkspaceAccount") != null && !jsonObj.get("googleWorkspaceAccount").isJsonNull()) {
        GoogleWorkspaceAccount.validateJsonElement(jsonObj.get("googleWorkspaceAccount"));
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ownerEmails") != null && !jsonObj.get("ownerEmails").isJsonNull() && !jsonObj.get("ownerEmails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerEmails` to be an array in the JSON string but got `%s`", jsonObj.get("ownerEmails").toString()));
      }
      if ((jsonObj.get("termsStatus") != null && !jsonObj.get("termsStatus").isJsonNull()) && !jsonObj.get("termsStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `termsStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("termsStatus").toString()));
      }
      // validate the optional field `termsStatus`
      if (jsonObj.get("termsStatus") != null && !jsonObj.get("termsStatus").isJsonNull()) {
        TermsStatusEnum.validateJsonElement(jsonObj.get("termsStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Company.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Company' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Company> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Company.class));

       return (TypeAdapter<T>) new TypeAdapter<Company>() {
           @Override
           public void write(JsonWriter out, Company value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Company read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Company given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Company
   * @throws IOException if the JSON string is invalid with respect to Company
   */
  public static Company fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Company.class);
  }

  /**
   * Convert an instance of Company to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

