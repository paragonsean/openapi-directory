/*
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A record of a device claimed by a reseller for a customer. Devices claimed for zero-touch enrollment have a claim with the type &#x60;SECTION_TYPE_ZERO_TOUCH&#x60;. To learn more, read [Claim devices for customers](/zero-touch/guides/how-it-works#claim).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:29.867792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceClaim {
  /**
   * The Additional service registered for the device.
   */
  @JsonAdapter(AdditionalServiceEnum.Adapter.class)
  public enum AdditionalServiceEnum {
    ADDITIONAL_SERVICE_UNSPECIFIED("ADDITIONAL_SERVICE_UNSPECIFIED"),
    
    DEVICE_PROTECTION("DEVICE_PROTECTION");

    private String value;

    AdditionalServiceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdditionalServiceEnum fromValue(String value) {
      for (AdditionalServiceEnum b : AdditionalServiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdditionalServiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdditionalServiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdditionalServiceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdditionalServiceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdditionalServiceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADDITIONAL_SERVICE = "additionalService";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_SERVICE)
  private AdditionalServiceEnum additionalService;

  public static final String SERIALIZED_NAME_GOOGLE_WORKSPACE_CUSTOMER_ID = "googleWorkspaceCustomerId";
  @SerializedName(SERIALIZED_NAME_GOOGLE_WORKSPACE_CUSTOMER_ID)
  private String googleWorkspaceCustomerId;

  public static final String SERIALIZED_NAME_OWNER_COMPANY_ID = "ownerCompanyId";
  @SerializedName(SERIALIZED_NAME_OWNER_COMPANY_ID)
  private String ownerCompanyId;

  public static final String SERIALIZED_NAME_RESELLER_ID = "resellerId";
  @SerializedName(SERIALIZED_NAME_RESELLER_ID)
  private String resellerId;

  /**
   * Output only. The type of claim made on the device.
   */
  @JsonAdapter(SectionTypeEnum.Adapter.class)
  public enum SectionTypeEnum {
    UNSPECIFIED("SECTION_TYPE_UNSPECIFIED"),
    
    SIM_LOCK("SECTION_TYPE_SIM_LOCK"),
    
    ZERO_TOUCH("SECTION_TYPE_ZERO_TOUCH");

    private String value;

    SectionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SectionTypeEnum fromValue(String value) {
      for (SectionTypeEnum b : SectionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SectionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SectionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SectionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SectionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SectionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SECTION_TYPE = "sectionType";
  @SerializedName(SERIALIZED_NAME_SECTION_TYPE)
  private SectionTypeEnum sectionType;

  public static final String SERIALIZED_NAME_VACATION_MODE_EXPIRE_TIME = "vacationModeExpireTime";
  @SerializedName(SERIALIZED_NAME_VACATION_MODE_EXPIRE_TIME)
  private String vacationModeExpireTime;

  public static final String SERIALIZED_NAME_VACATION_MODE_START_TIME = "vacationModeStartTime";
  @SerializedName(SERIALIZED_NAME_VACATION_MODE_START_TIME)
  private String vacationModeStartTime;

  public DeviceClaim() {
  }

  public DeviceClaim(
     SectionTypeEnum sectionType
  ) {
    this();
    this.sectionType = sectionType;
  }

  public DeviceClaim additionalService(AdditionalServiceEnum additionalService) {
    this.additionalService = additionalService;
    return this;
  }

  /**
   * The Additional service registered for the device.
   * @return additionalService
   */
  @javax.annotation.Nullable
  public AdditionalServiceEnum getAdditionalService() {
    return additionalService;
  }

  public void setAdditionalService(AdditionalServiceEnum additionalService) {
    this.additionalService = additionalService;
  }


  public DeviceClaim googleWorkspaceCustomerId(String googleWorkspaceCustomerId) {
    this.googleWorkspaceCustomerId = googleWorkspaceCustomerId;
    return this;
  }

  /**
   * The ID of the Google Workspace account that owns the Chrome OS device.
   * @return googleWorkspaceCustomerId
   */
  @javax.annotation.Nullable
  public String getGoogleWorkspaceCustomerId() {
    return googleWorkspaceCustomerId;
  }

  public void setGoogleWorkspaceCustomerId(String googleWorkspaceCustomerId) {
    this.googleWorkspaceCustomerId = googleWorkspaceCustomerId;
  }


  public DeviceClaim ownerCompanyId(String ownerCompanyId) {
    this.ownerCompanyId = ownerCompanyId;
    return this;
  }

  /**
   * The ID of the Customer that purchased the device.
   * @return ownerCompanyId
   */
  @javax.annotation.Nullable
  public String getOwnerCompanyId() {
    return ownerCompanyId;
  }

  public void setOwnerCompanyId(String ownerCompanyId) {
    this.ownerCompanyId = ownerCompanyId;
  }


  public DeviceClaim resellerId(String resellerId) {
    this.resellerId = resellerId;
    return this;
  }

  /**
   * The ID of the reseller that claimed the device.
   * @return resellerId
   */
  @javax.annotation.Nullable
  public String getResellerId() {
    return resellerId;
  }

  public void setResellerId(String resellerId) {
    this.resellerId = resellerId;
  }


  /**
   * Output only. The type of claim made on the device.
   * @return sectionType
   */
  @javax.annotation.Nullable
  public SectionTypeEnum getSectionType() {
    return sectionType;
  }



  public DeviceClaim vacationModeExpireTime(String vacationModeExpireTime) {
    this.vacationModeExpireTime = vacationModeExpireTime;
    return this;
  }

  /**
   * The timestamp when the device will exit ‘vacation mode’. This value is present iff the device is in &#39;vacation mode&#39;.
   * @return vacationModeExpireTime
   */
  @javax.annotation.Nullable
  public String getVacationModeExpireTime() {
    return vacationModeExpireTime;
  }

  public void setVacationModeExpireTime(String vacationModeExpireTime) {
    this.vacationModeExpireTime = vacationModeExpireTime;
  }


  public DeviceClaim vacationModeStartTime(String vacationModeStartTime) {
    this.vacationModeStartTime = vacationModeStartTime;
    return this;
  }

  /**
   * The timestamp when the device was put into ‘vacation mode’. This value is present iff the device is in &#39;vacation mode&#39;.
   * @return vacationModeStartTime
   */
  @javax.annotation.Nullable
  public String getVacationModeStartTime() {
    return vacationModeStartTime;
  }

  public void setVacationModeStartTime(String vacationModeStartTime) {
    this.vacationModeStartTime = vacationModeStartTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceClaim deviceClaim = (DeviceClaim) o;
    return Objects.equals(this.additionalService, deviceClaim.additionalService) &&
        Objects.equals(this.googleWorkspaceCustomerId, deviceClaim.googleWorkspaceCustomerId) &&
        Objects.equals(this.ownerCompanyId, deviceClaim.ownerCompanyId) &&
        Objects.equals(this.resellerId, deviceClaim.resellerId) &&
        Objects.equals(this.sectionType, deviceClaim.sectionType) &&
        Objects.equals(this.vacationModeExpireTime, deviceClaim.vacationModeExpireTime) &&
        Objects.equals(this.vacationModeStartTime, deviceClaim.vacationModeStartTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalService, googleWorkspaceCustomerId, ownerCompanyId, resellerId, sectionType, vacationModeExpireTime, vacationModeStartTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceClaim {\n");
    sb.append("    additionalService: ").append(toIndentedString(additionalService)).append("\n");
    sb.append("    googleWorkspaceCustomerId: ").append(toIndentedString(googleWorkspaceCustomerId)).append("\n");
    sb.append("    ownerCompanyId: ").append(toIndentedString(ownerCompanyId)).append("\n");
    sb.append("    resellerId: ").append(toIndentedString(resellerId)).append("\n");
    sb.append("    sectionType: ").append(toIndentedString(sectionType)).append("\n");
    sb.append("    vacationModeExpireTime: ").append(toIndentedString(vacationModeExpireTime)).append("\n");
    sb.append("    vacationModeStartTime: ").append(toIndentedString(vacationModeStartTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalService");
    openapiFields.add("googleWorkspaceCustomerId");
    openapiFields.add("ownerCompanyId");
    openapiFields.add("resellerId");
    openapiFields.add("sectionType");
    openapiFields.add("vacationModeExpireTime");
    openapiFields.add("vacationModeStartTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceClaim
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceClaim.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceClaim is not found in the empty JSON string", DeviceClaim.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceClaim.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceClaim` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalService") != null && !jsonObj.get("additionalService").isJsonNull()) && !jsonObj.get("additionalService").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalService` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalService").toString()));
      }
      // validate the optional field `additionalService`
      if (jsonObj.get("additionalService") != null && !jsonObj.get("additionalService").isJsonNull()) {
        AdditionalServiceEnum.validateJsonElement(jsonObj.get("additionalService"));
      }
      if ((jsonObj.get("googleWorkspaceCustomerId") != null && !jsonObj.get("googleWorkspaceCustomerId").isJsonNull()) && !jsonObj.get("googleWorkspaceCustomerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleWorkspaceCustomerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleWorkspaceCustomerId").toString()));
      }
      if ((jsonObj.get("ownerCompanyId") != null && !jsonObj.get("ownerCompanyId").isJsonNull()) && !jsonObj.get("ownerCompanyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerCompanyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerCompanyId").toString()));
      }
      if ((jsonObj.get("resellerId") != null && !jsonObj.get("resellerId").isJsonNull()) && !jsonObj.get("resellerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resellerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resellerId").toString()));
      }
      if ((jsonObj.get("sectionType") != null && !jsonObj.get("sectionType").isJsonNull()) && !jsonObj.get("sectionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sectionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sectionType").toString()));
      }
      // validate the optional field `sectionType`
      if (jsonObj.get("sectionType") != null && !jsonObj.get("sectionType").isJsonNull()) {
        SectionTypeEnum.validateJsonElement(jsonObj.get("sectionType"));
      }
      if ((jsonObj.get("vacationModeExpireTime") != null && !jsonObj.get("vacationModeExpireTime").isJsonNull()) && !jsonObj.get("vacationModeExpireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vacationModeExpireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vacationModeExpireTime").toString()));
      }
      if ((jsonObj.get("vacationModeStartTime") != null && !jsonObj.get("vacationModeStartTime").isJsonNull()) && !jsonObj.get("vacationModeStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vacationModeStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vacationModeStartTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceClaim.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceClaim' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceClaim> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceClaim.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceClaim>() {
           @Override
           public void write(JsonWriter out, DeviceClaim value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceClaim read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceClaim given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceClaim
   * @throws IOException if the JSON string is invalid with respect to DeviceClaim
   */
  public static DeviceClaim fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceClaim.class);
  }

  /**
   * Convert an instance of DeviceClaim to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

