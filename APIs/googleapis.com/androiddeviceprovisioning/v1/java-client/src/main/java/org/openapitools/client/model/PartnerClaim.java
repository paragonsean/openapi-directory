/*
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DeviceIdentifier;
import org.openapitools.client.model.DeviceMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Identifies one claim request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:29.867792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartnerClaim {
  public static final String SERIALIZED_NAME_CONFIGURATION_ID = "configurationId";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_ID)
  private String configurationId;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_DEVICE_IDENTIFIER = "deviceIdentifier";
  @SerializedName(SERIALIZED_NAME_DEVICE_IDENTIFIER)
  private DeviceIdentifier deviceIdentifier;

  public static final String SERIALIZED_NAME_DEVICE_METADATA = "deviceMetadata";
  @SerializedName(SERIALIZED_NAME_DEVICE_METADATA)
  private DeviceMetadata deviceMetadata;

  public static final String SERIALIZED_NAME_GOOGLE_WORKSPACE_CUSTOMER_ID = "googleWorkspaceCustomerId";
  @SerializedName(SERIALIZED_NAME_GOOGLE_WORKSPACE_CUSTOMER_ID)
  private String googleWorkspaceCustomerId;

  public static final String SERIALIZED_NAME_PRE_PROVISIONING_TOKEN = "preProvisioningToken";
  @SerializedName(SERIALIZED_NAME_PRE_PROVISIONING_TOKEN)
  private String preProvisioningToken;

  /**
   * Required. The section type of the device&#39;s provisioning record.
   */
  @JsonAdapter(SectionTypeEnum.Adapter.class)
  public enum SectionTypeEnum {
    UNSPECIFIED("SECTION_TYPE_UNSPECIFIED"),
    
    SIM_LOCK("SECTION_TYPE_SIM_LOCK"),
    
    ZERO_TOUCH("SECTION_TYPE_ZERO_TOUCH");

    private String value;

    SectionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SectionTypeEnum fromValue(String value) {
      for (SectionTypeEnum b : SectionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SectionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SectionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SectionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SectionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SectionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SECTION_TYPE = "sectionType";
  @SerializedName(SERIALIZED_NAME_SECTION_TYPE)
  private SectionTypeEnum sectionType;

  public static final String SERIALIZED_NAME_SIMLOCK_PROFILE_ID = "simlockProfileId";
  @SerializedName(SERIALIZED_NAME_SIMLOCK_PROFILE_ID)
  private String simlockProfileId;

  public PartnerClaim() {
  }

  public PartnerClaim configurationId(String configurationId) {
    this.configurationId = configurationId;
    return this;
  }

  /**
   * Optional. The ID of the configuration applied to the device section.
   * @return configurationId
   */
  @javax.annotation.Nullable
  public String getConfigurationId() {
    return configurationId;
  }

  public void setConfigurationId(String configurationId) {
    this.configurationId = configurationId;
  }


  public PartnerClaim customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * The ID of the customer for whom the device is being claimed.
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public PartnerClaim deviceIdentifier(DeviceIdentifier deviceIdentifier) {
    this.deviceIdentifier = deviceIdentifier;
    return this;
  }

  /**
   * Get deviceIdentifier
   * @return deviceIdentifier
   */
  @javax.annotation.Nullable
  public DeviceIdentifier getDeviceIdentifier() {
    return deviceIdentifier;
  }

  public void setDeviceIdentifier(DeviceIdentifier deviceIdentifier) {
    this.deviceIdentifier = deviceIdentifier;
  }


  public PartnerClaim deviceMetadata(DeviceMetadata deviceMetadata) {
    this.deviceMetadata = deviceMetadata;
    return this;
  }

  /**
   * Get deviceMetadata
   * @return deviceMetadata
   */
  @javax.annotation.Nullable
  public DeviceMetadata getDeviceMetadata() {
    return deviceMetadata;
  }

  public void setDeviceMetadata(DeviceMetadata deviceMetadata) {
    this.deviceMetadata = deviceMetadata;
  }


  public PartnerClaim googleWorkspaceCustomerId(String googleWorkspaceCustomerId) {
    this.googleWorkspaceCustomerId = googleWorkspaceCustomerId;
    return this;
  }

  /**
   * The Google Workspace customer ID.
   * @return googleWorkspaceCustomerId
   */
  @javax.annotation.Nullable
  public String getGoogleWorkspaceCustomerId() {
    return googleWorkspaceCustomerId;
  }

  public void setGoogleWorkspaceCustomerId(String googleWorkspaceCustomerId) {
    this.googleWorkspaceCustomerId = googleWorkspaceCustomerId;
  }


  public PartnerClaim preProvisioningToken(String preProvisioningToken) {
    this.preProvisioningToken = preProvisioningToken;
    return this;
  }

  /**
   * Optional. Must and can only be set for Chrome OS devices.
   * @return preProvisioningToken
   */
  @javax.annotation.Nullable
  public String getPreProvisioningToken() {
    return preProvisioningToken;
  }

  public void setPreProvisioningToken(String preProvisioningToken) {
    this.preProvisioningToken = preProvisioningToken;
  }


  public PartnerClaim sectionType(SectionTypeEnum sectionType) {
    this.sectionType = sectionType;
    return this;
  }

  /**
   * Required. The section type of the device&#39;s provisioning record.
   * @return sectionType
   */
  @javax.annotation.Nullable
  public SectionTypeEnum getSectionType() {
    return sectionType;
  }

  public void setSectionType(SectionTypeEnum sectionType) {
    this.sectionType = sectionType;
  }


  public PartnerClaim simlockProfileId(String simlockProfileId) {
    this.simlockProfileId = simlockProfileId;
    return this;
  }

  /**
   * Optional. Must and can only be set when DeviceProvisioningSectionType is SECTION_TYPE_SIM_LOCK. The unique identifier of the SimLock profile.
   * @return simlockProfileId
   */
  @javax.annotation.Nullable
  public String getSimlockProfileId() {
    return simlockProfileId;
  }

  public void setSimlockProfileId(String simlockProfileId) {
    this.simlockProfileId = simlockProfileId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartnerClaim partnerClaim = (PartnerClaim) o;
    return Objects.equals(this.configurationId, partnerClaim.configurationId) &&
        Objects.equals(this.customerId, partnerClaim.customerId) &&
        Objects.equals(this.deviceIdentifier, partnerClaim.deviceIdentifier) &&
        Objects.equals(this.deviceMetadata, partnerClaim.deviceMetadata) &&
        Objects.equals(this.googleWorkspaceCustomerId, partnerClaim.googleWorkspaceCustomerId) &&
        Objects.equals(this.preProvisioningToken, partnerClaim.preProvisioningToken) &&
        Objects.equals(this.sectionType, partnerClaim.sectionType) &&
        Objects.equals(this.simlockProfileId, partnerClaim.simlockProfileId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configurationId, customerId, deviceIdentifier, deviceMetadata, googleWorkspaceCustomerId, preProvisioningToken, sectionType, simlockProfileId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartnerClaim {\n");
    sb.append("    configurationId: ").append(toIndentedString(configurationId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    deviceIdentifier: ").append(toIndentedString(deviceIdentifier)).append("\n");
    sb.append("    deviceMetadata: ").append(toIndentedString(deviceMetadata)).append("\n");
    sb.append("    googleWorkspaceCustomerId: ").append(toIndentedString(googleWorkspaceCustomerId)).append("\n");
    sb.append("    preProvisioningToken: ").append(toIndentedString(preProvisioningToken)).append("\n");
    sb.append("    sectionType: ").append(toIndentedString(sectionType)).append("\n");
    sb.append("    simlockProfileId: ").append(toIndentedString(simlockProfileId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configurationId");
    openapiFields.add("customerId");
    openapiFields.add("deviceIdentifier");
    openapiFields.add("deviceMetadata");
    openapiFields.add("googleWorkspaceCustomerId");
    openapiFields.add("preProvisioningToken");
    openapiFields.add("sectionType");
    openapiFields.add("simlockProfileId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartnerClaim
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartnerClaim.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartnerClaim is not found in the empty JSON string", PartnerClaim.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartnerClaim.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartnerClaim` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("configurationId") != null && !jsonObj.get("configurationId").isJsonNull()) && !jsonObj.get("configurationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configurationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configurationId").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      // validate the optional field `deviceIdentifier`
      if (jsonObj.get("deviceIdentifier") != null && !jsonObj.get("deviceIdentifier").isJsonNull()) {
        DeviceIdentifier.validateJsonElement(jsonObj.get("deviceIdentifier"));
      }
      // validate the optional field `deviceMetadata`
      if (jsonObj.get("deviceMetadata") != null && !jsonObj.get("deviceMetadata").isJsonNull()) {
        DeviceMetadata.validateJsonElement(jsonObj.get("deviceMetadata"));
      }
      if ((jsonObj.get("googleWorkspaceCustomerId") != null && !jsonObj.get("googleWorkspaceCustomerId").isJsonNull()) && !jsonObj.get("googleWorkspaceCustomerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleWorkspaceCustomerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleWorkspaceCustomerId").toString()));
      }
      if ((jsonObj.get("preProvisioningToken") != null && !jsonObj.get("preProvisioningToken").isJsonNull()) && !jsonObj.get("preProvisioningToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preProvisioningToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preProvisioningToken").toString()));
      }
      if ((jsonObj.get("sectionType") != null && !jsonObj.get("sectionType").isJsonNull()) && !jsonObj.get("sectionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sectionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sectionType").toString()));
      }
      // validate the optional field `sectionType`
      if (jsonObj.get("sectionType") != null && !jsonObj.get("sectionType").isJsonNull()) {
        SectionTypeEnum.validateJsonElement(jsonObj.get("sectionType"));
      }
      if ((jsonObj.get("simlockProfileId") != null && !jsonObj.get("simlockProfileId").isJsonNull()) && !jsonObj.get("simlockProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `simlockProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("simlockProfileId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartnerClaim.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartnerClaim' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartnerClaim> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartnerClaim.class));

       return (TypeAdapter<T>) new TypeAdapter<PartnerClaim>() {
           @Override
           public void write(JsonWriter out, PartnerClaim value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartnerClaim read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartnerClaim given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartnerClaim
   * @throws IOException if the JSON string is invalid with respect to PartnerClaim
   */
  public static PartnerClaim fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartnerClaim.class);
  }

  /**
   * Convert an instance of PartnerClaim to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

