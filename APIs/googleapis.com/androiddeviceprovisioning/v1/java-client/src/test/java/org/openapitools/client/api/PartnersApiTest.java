/*
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ClaimDeviceRequest;
import org.openapitools.client.model.ClaimDeviceResponse;
import org.openapitools.client.model.ClaimDevicesRequest;
import org.openapitools.client.model.Company;
import org.openapitools.client.model.CreateCustomerRequest;
import org.openapitools.client.model.Device;
import org.openapitools.client.model.DeviceMetadata;
import org.openapitools.client.model.FindDevicesByDeviceIdentifierRequest;
import org.openapitools.client.model.FindDevicesByDeviceIdentifierResponse;
import org.openapitools.client.model.FindDevicesByOwnerRequest;
import org.openapitools.client.model.FindDevicesByOwnerResponse;
import org.openapitools.client.model.GetDeviceSimLockStateRequest;
import org.openapitools.client.model.GetDeviceSimLockStateResponse;
import org.openapitools.client.model.ListCustomersResponse;
import org.openapitools.client.model.ListVendorCustomersResponse;
import org.openapitools.client.model.ListVendorsResponse;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.UnclaimDeviceRequest;
import org.openapitools.client.model.UnclaimDevicesRequest;
import org.openapitools.client.model.UpdateDeviceMetadataInBatchRequest;
import org.openapitools.client.model.UpdateDeviceMetadataRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PartnersApi
 */
@Disabled
public class PartnersApiTest {

    private final PartnersApi api = new PartnersApi();

    /**
     * Creates a customer for zero-touch enrollment. After the method returns successfully, admin and owner roles can manage devices and EMM configs by calling API methods or using their zero-touch enrollment portal. The customer receives an email that welcomes them to zero-touch enrollment and explains how to sign into the portal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningPartnersCustomersCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CreateCustomerRequest createCustomerRequest = null;
        Company response = api.androiddeviceprovisioningPartnersCustomersCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, createCustomerRequest);
        // TODO: test validations
    }

    /**
     * Lists the customers that are enrolled to the reseller identified by the &#x60;partnerId&#x60; argument. This list includes customers that the reseller created and customers that enrolled themselves using the portal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningPartnersCustomersListTest() throws ApiException {
        String partnerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListCustomersResponse response = api.androiddeviceprovisioningPartnersCustomersList(partnerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Claims a device for a customer and adds it to zero-touch enrollment. If the device is already claimed by another customer, the call returns an error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningPartnersDevicesClaimTest() throws ApiException {
        String partnerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ClaimDeviceRequest claimDeviceRequest = null;
        ClaimDeviceResponse response = api.androiddeviceprovisioningPartnersDevicesClaim(partnerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, claimDeviceRequest);
        // TODO: test validations
    }

    /**
     * Claims a batch of devices for a customer asynchronously. Adds the devices to zero-touch enrollment. To learn more, read [Longâ€‘running batch operations](/zero-touch/guides/how-it-works#operations).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningPartnersDevicesClaimAsyncTest() throws ApiException {
        String partnerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ClaimDevicesRequest claimDevicesRequest = null;
        Operation response = api.androiddeviceprovisioningPartnersDevicesClaimAsync(partnerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, claimDevicesRequest);
        // TODO: test validations
    }

    /**
     * Finds devices by hardware identifiers, such as IMEI.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningPartnersDevicesFindByIdentifierTest() throws ApiException {
        String partnerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        FindDevicesByDeviceIdentifierRequest findDevicesByDeviceIdentifierRequest = null;
        FindDevicesByDeviceIdentifierResponse response = api.androiddeviceprovisioningPartnersDevicesFindByIdentifier(partnerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, findDevicesByDeviceIdentifierRequest);
        // TODO: test validations
    }

    /**
     * Finds devices claimed for customers. The results only contain devices registered to the reseller that&#39;s identified by the &#x60;partnerId&#x60; argument. The customer&#39;s devices purchased from other resellers don&#39;t appear in the results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningPartnersDevicesFindByOwnerTest() throws ApiException {
        String partnerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        FindDevicesByOwnerRequest findDevicesByOwnerRequest = null;
        FindDevicesByOwnerResponse response = api.androiddeviceprovisioningPartnersDevicesFindByOwner(partnerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, findDevicesByOwnerRequest);
        // TODO: test validations
    }

    /**
     * Gets a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningPartnersDevicesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Device response = api.androiddeviceprovisioningPartnersDevicesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a device&#39;s SIM lock state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningPartnersDevicesGetSimLockStateTest() throws ApiException {
        String partnerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GetDeviceSimLockStateRequest getDeviceSimLockStateRequest = null;
        GetDeviceSimLockStateResponse response = api.androiddeviceprovisioningPartnersDevicesGetSimLockState(partnerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, getDeviceSimLockStateRequest);
        // TODO: test validations
    }

    /**
     * Updates reseller metadata associated with the device. Android devices only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningPartnersDevicesMetadataTest() throws ApiException {
        String metadataOwnerId = null;
        String deviceId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UpdateDeviceMetadataRequest updateDeviceMetadataRequest = null;
        DeviceMetadata response = api.androiddeviceprovisioningPartnersDevicesMetadata(metadataOwnerId, deviceId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateDeviceMetadataRequest);
        // TODO: test validations
    }

    /**
     * Unclaims a device from a customer and removes it from zero-touch enrollment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningPartnersDevicesUnclaimTest() throws ApiException {
        String partnerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UnclaimDeviceRequest unclaimDeviceRequest = null;
        Object response = api.androiddeviceprovisioningPartnersDevicesUnclaim(partnerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, unclaimDeviceRequest);
        // TODO: test validations
    }

    /**
     * Unclaims a batch of devices for a customer asynchronously. Removes the devices from zero-touch enrollment. To learn more, read [Longâ€‘running batch operations](/zero-touch/guides/how-it-works#operations).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningPartnersDevicesUnclaimAsyncTest() throws ApiException {
        String partnerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UnclaimDevicesRequest unclaimDevicesRequest = null;
        Operation response = api.androiddeviceprovisioningPartnersDevicesUnclaimAsync(partnerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, unclaimDevicesRequest);
        // TODO: test validations
    }

    /**
     * Updates the reseller metadata attached to a batch of devices. This method updates devices asynchronously and returns an &#x60;Operation&#x60; that can be used to track progress. Read [Longâ€‘running batch operations](/zero-touch/guides/how-it-works#operations). Android Devices only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningPartnersDevicesUpdateMetadataAsyncTest() throws ApiException {
        String partnerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UpdateDeviceMetadataInBatchRequest updateDeviceMetadataInBatchRequest = null;
        Operation response = api.androiddeviceprovisioningPartnersDevicesUpdateMetadataAsync(partnerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateDeviceMetadataInBatchRequest);
        // TODO: test validations
    }

    /**
     * Lists the customers of the vendor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningPartnersVendorsCustomersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListVendorCustomersResponse response = api.androiddeviceprovisioningPartnersVendorsCustomersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists the vendors of the partner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningPartnersVendorsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListVendorsResponse response = api.androiddeviceprovisioningPartnersVendorsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

}
