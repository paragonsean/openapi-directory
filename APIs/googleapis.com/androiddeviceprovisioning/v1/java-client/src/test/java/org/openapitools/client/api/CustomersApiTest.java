/*
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CustomerApplyConfigurationRequest;
import org.openapitools.client.model.CustomerListConfigurationsResponse;
import org.openapitools.client.model.CustomerListCustomersResponse;
import org.openapitools.client.model.CustomerListDevicesResponse;
import org.openapitools.client.model.CustomerListDpcsResponse;
import org.openapitools.client.model.CustomerRemoveConfigurationRequest;
import org.openapitools.client.model.CustomerUnclaimDeviceRequest;
import org.openapitools.client.model.ModelConfiguration;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomersApi
 */
@Disabled
public class CustomersApiTest {

    private final CustomersApi api = new CustomersApi();

    /**
     * Creates a new configuration. Once created, a customer can apply the configuration to devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningCustomersConfigurationsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ModelConfiguration modelConfiguration = null;
        ModelConfiguration response = api.androiddeviceprovisioningCustomersConfigurationsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, modelConfiguration);
        // TODO: test validations
    }

    /**
     * Deletes an unused configuration. The API call fails if the customer has devices with the configuration applied.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningCustomersConfigurationsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.androiddeviceprovisioningCustomersConfigurationsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists a customer&#39;s configurations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningCustomersConfigurationsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CustomerListConfigurationsResponse response = api.androiddeviceprovisioningCustomersConfigurationsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Updates a configuration&#39;s field values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningCustomersConfigurationsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        ModelConfiguration modelConfiguration = null;
        ModelConfiguration response = api.androiddeviceprovisioningCustomersConfigurationsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, modelConfiguration);
        // TODO: test validations
    }

    /**
     * Applies a Configuration to the device to register the device for zero-touch enrollment. After applying a configuration to a device, the device automatically provisions itself on first boot, or next factory reset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningCustomersDevicesApplyConfigurationTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CustomerApplyConfigurationRequest customerApplyConfigurationRequest = null;
        Object response = api.androiddeviceprovisioningCustomersDevicesApplyConfiguration(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customerApplyConfigurationRequest);
        // TODO: test validations
    }

    /**
     * Lists a customer&#39;s devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningCustomersDevicesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String pageSize = null;
        String pageToken = null;
        CustomerListDevicesResponse response = api.androiddeviceprovisioningCustomersDevicesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Removes a configuration from device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningCustomersDevicesRemoveConfigurationTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CustomerRemoveConfigurationRequest customerRemoveConfigurationRequest = null;
        Object response = api.androiddeviceprovisioningCustomersDevicesRemoveConfiguration(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customerRemoveConfigurationRequest);
        // TODO: test validations
    }

    /**
     * Unclaims a device from a customer and removes it from zero-touch enrollment. After removing a device, a customer must contact their reseller to register the device into zero-touch enrollment again.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningCustomersDevicesUnclaimTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CustomerUnclaimDeviceRequest customerUnclaimDeviceRequest = null;
        Object response = api.androiddeviceprovisioningCustomersDevicesUnclaim(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customerUnclaimDeviceRequest);
        // TODO: test validations
    }

    /**
     * Lists the DPCs (device policy controllers) that support zero-touch enrollment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningCustomersDpcsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CustomerListDpcsResponse response = api.androiddeviceprovisioningCustomersDpcsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the user&#39;s customer accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androiddeviceprovisioningCustomersListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        CustomerListCustomersResponse response = api.androiddeviceprovisioningCustomersList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

}
