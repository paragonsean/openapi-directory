/**
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceIdentifier from './DeviceIdentifier';
import DeviceMetadata from './DeviceMetadata';

/**
 * The UpdateMetadataArguments model module.
 * @module model/UpdateMetadataArguments
 * @version v1
 */
class UpdateMetadataArguments {
    /**
     * Constructs a new <code>UpdateMetadataArguments</code>.
     * Identifies metadata updates to one device.
     * @alias module:model/UpdateMetadataArguments
     */
    constructor() { 
        
        UpdateMetadataArguments.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateMetadataArguments</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateMetadataArguments} obj Optional instance to populate.
     * @return {module:model/UpdateMetadataArguments} The populated <code>UpdateMetadataArguments</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateMetadataArguments();

            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = ApiClient.convertToType(data['deviceId'], 'String');
            }
            if (data.hasOwnProperty('deviceIdentifier')) {
                obj['deviceIdentifier'] = DeviceIdentifier.constructFromObject(data['deviceIdentifier']);
            }
            if (data.hasOwnProperty('deviceMetadata')) {
                obj['deviceMetadata'] = DeviceMetadata.constructFromObject(data['deviceMetadata']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateMetadataArguments</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateMetadataArguments</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deviceId'] && !(typeof data['deviceId'] === 'string' || data['deviceId'] instanceof String)) {
            throw new Error("Expected the field `deviceId` to be a primitive type in the JSON string but got " + data['deviceId']);
        }
        // validate the optional field `deviceIdentifier`
        if (data['deviceIdentifier']) { // data not null
          DeviceIdentifier.validateJSON(data['deviceIdentifier']);
        }
        // validate the optional field `deviceMetadata`
        if (data['deviceMetadata']) { // data not null
          DeviceMetadata.validateJSON(data['deviceMetadata']);
        }

        return true;
    }


}



/**
 * Required. Device ID of the device.
 * @member {String} deviceId
 */
UpdateMetadataArguments.prototype['deviceId'] = undefined;

/**
 * @member {module:model/DeviceIdentifier} deviceIdentifier
 */
UpdateMetadataArguments.prototype['deviceIdentifier'] = undefined;

/**
 * @member {module:model/DeviceMetadata} deviceMetadata
 */
UpdateMetadataArguments.prototype['deviceMetadata'] = undefined;






export default UpdateMetadataArguments;

