/**
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceClaim from './DeviceClaim';
import DeviceIdentifier from './DeviceIdentifier';
import DeviceMetadata from './DeviceMetadata';

/**
 * The Device model module.
 * @module model/Device
 * @version v1
 */
class Device {
    /**
     * Constructs a new <code>Device</code>.
     * An Android or Chrome OS device registered for zero-touch enrollment.
     * @alias module:model/Device
     */
    constructor() { 
        
        Device.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Device</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Device} obj Optional instance to populate.
     * @return {module:model/Device} The populated <code>Device</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Device();

            if (data.hasOwnProperty('claims')) {
                obj['claims'] = ApiClient.convertToType(data['claims'], [DeviceClaim]);
            }
            if (data.hasOwnProperty('configuration')) {
                obj['configuration'] = ApiClient.convertToType(data['configuration'], 'String');
            }
            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = ApiClient.convertToType(data['deviceId'], 'String');
            }
            if (data.hasOwnProperty('deviceIdentifier')) {
                obj['deviceIdentifier'] = DeviceIdentifier.constructFromObject(data['deviceIdentifier']);
            }
            if (data.hasOwnProperty('deviceMetadata')) {
                obj['deviceMetadata'] = DeviceMetadata.constructFromObject(data['deviceMetadata']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Device</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Device</code>.
     */
    static validateJSON(data) {
        if (data['claims']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['claims'])) {
                throw new Error("Expected the field `claims` to be an array in the JSON data but got " + data['claims']);
            }
            // validate the optional field `claims` (array)
            for (const item of data['claims']) {
                DeviceClaim.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['configuration'] && !(typeof data['configuration'] === 'string' || data['configuration'] instanceof String)) {
            throw new Error("Expected the field `configuration` to be a primitive type in the JSON string but got " + data['configuration']);
        }
        // ensure the json data is a string
        if (data['deviceId'] && !(typeof data['deviceId'] === 'string' || data['deviceId'] instanceof String)) {
            throw new Error("Expected the field `deviceId` to be a primitive type in the JSON string but got " + data['deviceId']);
        }
        // validate the optional field `deviceIdentifier`
        if (data['deviceIdentifier']) { // data not null
          DeviceIdentifier.validateJSON(data['deviceIdentifier']);
        }
        // validate the optional field `deviceMetadata`
        if (data['deviceMetadata']) { // data not null
          DeviceMetadata.validateJSON(data['deviceMetadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Output only. The provisioning claims for a device. Devices claimed for zero-touch enrollment have a claim with the type `SECTION_TYPE_ZERO_TOUCH`. Call `partners.devices.unclaim` or `partners.devices.unclaimAsync` to remove the device from zero-touch enrollment.
 * @member {Array.<module:model/DeviceClaim>} claims
 */
Device.prototype['claims'] = undefined;

/**
 * Not available to resellers.
 * @member {String} configuration
 */
Device.prototype['configuration'] = undefined;

/**
 * Output only. The ID of the device. Assigned by the server.
 * @member {String} deviceId
 */
Device.prototype['deviceId'] = undefined;

/**
 * @member {module:model/DeviceIdentifier} deviceIdentifier
 */
Device.prototype['deviceIdentifier'] = undefined;

/**
 * @member {module:model/DeviceMetadata} deviceMetadata
 */
Device.prototype['deviceMetadata'] = undefined;

/**
 * Output only. The API resource name in the format `partners/[PARTNER_ID]/devices/[DEVICE_ID]`. Assigned by the server.
 * @member {String} name
 */
Device.prototype['name'] = undefined;






export default Device;

