/**
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Configuration model module.
 * @module model/Configuration
 * @version v1
 */
class Configuration {
    /**
     * Constructs a new <code>Configuration</code>.
     * A configuration collects the provisioning options for Android devices. Each configuration combines the following: * The EMM device policy controller (DPC) installed on the devices. * EMM policies enforced on the devices. * Metadata displayed on the device to help users during setup. Customers can add as many configurations as they need. However, zero-touch enrollment works best when a customer sets a default configuration that&#39;s applied to any new devices the organization purchases.
     * @alias module:model/Configuration
     */
    constructor() { 
        
        Configuration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Configuration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Configuration} obj Optional instance to populate.
     * @return {module:model/Configuration} The populated <code>Configuration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Configuration();

            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('configurationId')) {
                obj['configurationId'] = ApiClient.convertToType(data['configurationId'], 'String');
            }
            if (data.hasOwnProperty('configurationName')) {
                obj['configurationName'] = ApiClient.convertToType(data['configurationName'], 'String');
            }
            if (data.hasOwnProperty('contactEmail')) {
                obj['contactEmail'] = ApiClient.convertToType(data['contactEmail'], 'String');
            }
            if (data.hasOwnProperty('contactPhone')) {
                obj['contactPhone'] = ApiClient.convertToType(data['contactPhone'], 'String');
            }
            if (data.hasOwnProperty('customMessage')) {
                obj['customMessage'] = ApiClient.convertToType(data['customMessage'], 'String');
            }
            if (data.hasOwnProperty('dpcExtras')) {
                obj['dpcExtras'] = ApiClient.convertToType(data['dpcExtras'], 'String');
            }
            if (data.hasOwnProperty('dpcResourcePath')) {
                obj['dpcResourcePath'] = ApiClient.convertToType(data['dpcResourcePath'], 'String');
            }
            if (data.hasOwnProperty('forcedResetTime')) {
                obj['forcedResetTime'] = ApiClient.convertToType(data['forcedResetTime'], 'String');
            }
            if (data.hasOwnProperty('isDefault')) {
                obj['isDefault'] = ApiClient.convertToType(data['isDefault'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Configuration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Configuration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['companyName'] && !(typeof data['companyName'] === 'string' || data['companyName'] instanceof String)) {
            throw new Error("Expected the field `companyName` to be a primitive type in the JSON string but got " + data['companyName']);
        }
        // ensure the json data is a string
        if (data['configurationId'] && !(typeof data['configurationId'] === 'string' || data['configurationId'] instanceof String)) {
            throw new Error("Expected the field `configurationId` to be a primitive type in the JSON string but got " + data['configurationId']);
        }
        // ensure the json data is a string
        if (data['configurationName'] && !(typeof data['configurationName'] === 'string' || data['configurationName'] instanceof String)) {
            throw new Error("Expected the field `configurationName` to be a primitive type in the JSON string but got " + data['configurationName']);
        }
        // ensure the json data is a string
        if (data['contactEmail'] && !(typeof data['contactEmail'] === 'string' || data['contactEmail'] instanceof String)) {
            throw new Error("Expected the field `contactEmail` to be a primitive type in the JSON string but got " + data['contactEmail']);
        }
        // ensure the json data is a string
        if (data['contactPhone'] && !(typeof data['contactPhone'] === 'string' || data['contactPhone'] instanceof String)) {
            throw new Error("Expected the field `contactPhone` to be a primitive type in the JSON string but got " + data['contactPhone']);
        }
        // ensure the json data is a string
        if (data['customMessage'] && !(typeof data['customMessage'] === 'string' || data['customMessage'] instanceof String)) {
            throw new Error("Expected the field `customMessage` to be a primitive type in the JSON string but got " + data['customMessage']);
        }
        // ensure the json data is a string
        if (data['dpcExtras'] && !(typeof data['dpcExtras'] === 'string' || data['dpcExtras'] instanceof String)) {
            throw new Error("Expected the field `dpcExtras` to be a primitive type in the JSON string but got " + data['dpcExtras']);
        }
        // ensure the json data is a string
        if (data['dpcResourcePath'] && !(typeof data['dpcResourcePath'] === 'string' || data['dpcResourcePath'] instanceof String)) {
            throw new Error("Expected the field `dpcResourcePath` to be a primitive type in the JSON string but got " + data['dpcResourcePath']);
        }
        // ensure the json data is a string
        if (data['forcedResetTime'] && !(typeof data['forcedResetTime'] === 'string' || data['forcedResetTime'] instanceof String)) {
            throw new Error("Expected the field `forcedResetTime` to be a primitive type in the JSON string but got " + data['forcedResetTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Required. The name of the organization. Zero-touch enrollment shows this organization name to device users during device provisioning.
 * @member {String} companyName
 */
Configuration.prototype['companyName'] = undefined;

/**
 * Output only. The ID of the configuration. Assigned by the server.
 * @member {String} configurationId
 */
Configuration.prototype['configurationId'] = undefined;

/**
 * Required. A short name that describes the configuration's purpose. For example, _Sales team_ or _Temporary employees_. The zero-touch enrollment portal displays this name to IT admins.
 * @member {String} configurationName
 */
Configuration.prototype['configurationName'] = undefined;

/**
 * Required. The email address that device users can contact to get help. Zero-touch enrollment shows this email address to device users before device provisioning. The value is validated on input.
 * @member {String} contactEmail
 */
Configuration.prototype['contactEmail'] = undefined;

/**
 * Required. The telephone number that device users can call, using another device, to get help. Zero-touch enrollment shows this number to device users before device provisioning. Accepts numerals, spaces, the plus sign, hyphens, and parentheses.
 * @member {String} contactPhone
 */
Configuration.prototype['contactPhone'] = undefined;

/**
 * A message, containing one or two sentences, to help device users get help or give them more details about whatâ€™s happening to their device. Zero-touch enrollment shows this message before the device is provisioned.
 * @member {String} customMessage
 */
Configuration.prototype['customMessage'] = undefined;

/**
 * The JSON-formatted EMM provisioning extras that are passed to the DPC.
 * @member {String} dpcExtras
 */
Configuration.prototype['dpcExtras'] = undefined;

/**
 * Required. The resource name of the selected DPC (device policy controller) in the format `customers/[CUSTOMER_ID]/dpcs/_*`. To list the supported DPCs, call `customers.dpcs.list`.
 * @member {String} dpcResourcePath
 */
Configuration.prototype['dpcResourcePath'] = undefined;

/**
 * Optional. The timeout before forcing factory reset the device if the device doesn't go through provisioning in the setup wizard, usually due to lack of network connectivity during setup wizard. Ranges from 0-6 hours, with 2 hours being the default if unset.
 * @member {String} forcedResetTime
 */
Configuration.prototype['forcedResetTime'] = undefined;

/**
 * Required. Whether this is the default configuration that zero-touch enrollment applies to any new devices the organization purchases in the future. Only one customer configuration can be the default. Setting this value to `true`, changes the previous default configuration's `isDefault` value to `false`.
 * @member {Boolean} isDefault
 */
Configuration.prototype['isDefault'] = undefined;

/**
 * Output only. The API resource name in the format `customers/[CUSTOMER_ID]/configurations/[CONFIGURATION_ID]`. Assigned by the server.
 * @member {String} name
 */
Configuration.prototype['name'] = undefined;






export default Configuration;

