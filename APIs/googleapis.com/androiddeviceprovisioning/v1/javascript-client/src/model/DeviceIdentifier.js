/**
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceIdentifier model module.
 * @module model/DeviceIdentifier
 * @version v1
 */
class DeviceIdentifier {
    /**
     * Constructs a new <code>DeviceIdentifier</code>.
     * Encapsulates hardware and product IDs to identify a manufactured device. To understand requirements on identifier sets, read [Identifiers](https://developers.google.com/zero-touch/guides/identifiers).
     * @alias module:model/DeviceIdentifier
     */
    constructor() { 
        
        DeviceIdentifier.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceIdentifier</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceIdentifier} obj Optional instance to populate.
     * @return {module:model/DeviceIdentifier} The populated <code>DeviceIdentifier</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceIdentifier();

            if (data.hasOwnProperty('chromeOsAttestedDeviceId')) {
                obj['chromeOsAttestedDeviceId'] = ApiClient.convertToType(data['chromeOsAttestedDeviceId'], 'String');
            }
            if (data.hasOwnProperty('deviceType')) {
                obj['deviceType'] = ApiClient.convertToType(data['deviceType'], 'String');
            }
            if (data.hasOwnProperty('imei')) {
                obj['imei'] = ApiClient.convertToType(data['imei'], 'String');
            }
            if (data.hasOwnProperty('manufacturer')) {
                obj['manufacturer'] = ApiClient.convertToType(data['manufacturer'], 'String');
            }
            if (data.hasOwnProperty('meid')) {
                obj['meid'] = ApiClient.convertToType(data['meid'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceIdentifier</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceIdentifier</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['chromeOsAttestedDeviceId'] && !(typeof data['chromeOsAttestedDeviceId'] === 'string' || data['chromeOsAttestedDeviceId'] instanceof String)) {
            throw new Error("Expected the field `chromeOsAttestedDeviceId` to be a primitive type in the JSON string but got " + data['chromeOsAttestedDeviceId']);
        }
        // ensure the json data is a string
        if (data['deviceType'] && !(typeof data['deviceType'] === 'string' || data['deviceType'] instanceof String)) {
            throw new Error("Expected the field `deviceType` to be a primitive type in the JSON string but got " + data['deviceType']);
        }
        // ensure the json data is a string
        if (data['imei'] && !(typeof data['imei'] === 'string' || data['imei'] instanceof String)) {
            throw new Error("Expected the field `imei` to be a primitive type in the JSON string but got " + data['imei']);
        }
        // ensure the json data is a string
        if (data['manufacturer'] && !(typeof data['manufacturer'] === 'string' || data['manufacturer'] instanceof String)) {
            throw new Error("Expected the field `manufacturer` to be a primitive type in the JSON string but got " + data['manufacturer']);
        }
        // ensure the json data is a string
        if (data['meid'] && !(typeof data['meid'] === 'string' || data['meid'] instanceof String)) {
            throw new Error("Expected the field `meid` to be a primitive type in the JSON string but got " + data['meid']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['serialNumber'] && !(typeof data['serialNumber'] === 'string' || data['serialNumber'] instanceof String)) {
            throw new Error("Expected the field `serialNumber` to be a primitive type in the JSON string but got " + data['serialNumber']);
        }

        return true;
    }


}



/**
 * An identifier provided by OEMs, carried through the production and sales process. Only applicable to Chrome OS devices.
 * @member {String} chromeOsAttestedDeviceId
 */
DeviceIdentifier.prototype['chromeOsAttestedDeviceId'] = undefined;

/**
 * The type of the device
 * @member {module:model/DeviceIdentifier.DeviceTypeEnum} deviceType
 */
DeviceIdentifier.prototype['deviceType'] = undefined;

/**
 * The device’s IMEI number. Validated on input.
 * @member {String} imei
 */
DeviceIdentifier.prototype['imei'] = undefined;

/**
 * The device manufacturer’s name. Matches the device's built-in value returned from `android.os.Build.MANUFACTURER`. Allowed values are listed in [Android manufacturers](/zero-touch/resources/manufacturer-names#manufacturers-names).
 * @member {String} manufacturer
 */
DeviceIdentifier.prototype['manufacturer'] = undefined;

/**
 * The device’s MEID number.
 * @member {String} meid
 */
DeviceIdentifier.prototype['meid'] = undefined;

/**
 * The device model's name. Allowed values are listed in [Android models](/zero-touch/resources/manufacturer-names#model-names) and [Chrome OS models](https://support.google.com/chrome/a/answer/10130175#identify_compatible).
 * @member {String} model
 */
DeviceIdentifier.prototype['model'] = undefined;

/**
 * The manufacturer's serial number for the device. This value might not be unique across different device models.
 * @member {String} serialNumber
 */
DeviceIdentifier.prototype['serialNumber'] = undefined;





/**
 * Allowed values for the <code>deviceType</code> property.
 * @enum {String}
 * @readonly
 */
DeviceIdentifier['DeviceTypeEnum'] = {

    /**
     * value: "DEVICE_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "DEVICE_TYPE_UNSPECIFIED",

    /**
     * value: "DEVICE_TYPE_ANDROID"
     * @const
     */
    "ANDROID": "DEVICE_TYPE_ANDROID",

    /**
     * value: "DEVICE_TYPE_CHROME_OS"
     * @const
     */
    "CHROME_OS": "DEVICE_TYPE_CHROME_OS"
};



export default DeviceIdentifier;

