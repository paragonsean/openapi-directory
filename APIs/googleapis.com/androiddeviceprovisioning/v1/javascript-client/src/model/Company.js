/**
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleWorkspaceAccount from './GoogleWorkspaceAccount';

/**
 * The Company model module.
 * @module model/Company
 * @version v1
 */
class Company {
    /**
     * Constructs a new <code>Company</code>.
     * A reseller, vendor, or customer in the zero-touch reseller and customer APIs.
     * @alias module:model/Company
     */
    constructor() { 
        
        Company.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Company</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Company} obj Optional instance to populate.
     * @return {module:model/Company} The populated <code>Company</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Company();

            if (data.hasOwnProperty('adminEmails')) {
                obj['adminEmails'] = ApiClient.convertToType(data['adminEmails'], ['String']);
            }
            if (data.hasOwnProperty('companyId')) {
                obj['companyId'] = ApiClient.convertToType(data['companyId'], 'String');
            }
            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('googleWorkspaceAccount')) {
                obj['googleWorkspaceAccount'] = GoogleWorkspaceAccount.constructFromObject(data['googleWorkspaceAccount']);
            }
            if (data.hasOwnProperty('languageCode')) {
                obj['languageCode'] = ApiClient.convertToType(data['languageCode'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ownerEmails')) {
                obj['ownerEmails'] = ApiClient.convertToType(data['ownerEmails'], ['String']);
            }
            if (data.hasOwnProperty('skipWelcomeEmail')) {
                obj['skipWelcomeEmail'] = ApiClient.convertToType(data['skipWelcomeEmail'], 'Boolean');
            }
            if (data.hasOwnProperty('termsStatus')) {
                obj['termsStatus'] = ApiClient.convertToType(data['termsStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Company</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Company</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['adminEmails'])) {
            throw new Error("Expected the field `adminEmails` to be an array in the JSON data but got " + data['adminEmails']);
        }
        // ensure the json data is a string
        if (data['companyId'] && !(typeof data['companyId'] === 'string' || data['companyId'] instanceof String)) {
            throw new Error("Expected the field `companyId` to be a primitive type in the JSON string but got " + data['companyId']);
        }
        // ensure the json data is a string
        if (data['companyName'] && !(typeof data['companyName'] === 'string' || data['companyName'] instanceof String)) {
            throw new Error("Expected the field `companyName` to be a primitive type in the JSON string but got " + data['companyName']);
        }
        // validate the optional field `googleWorkspaceAccount`
        if (data['googleWorkspaceAccount']) { // data not null
          GoogleWorkspaceAccount.validateJSON(data['googleWorkspaceAccount']);
        }
        // ensure the json data is a string
        if (data['languageCode'] && !(typeof data['languageCode'] === 'string' || data['languageCode'] instanceof String)) {
            throw new Error("Expected the field `languageCode` to be a primitive type in the JSON string but got " + data['languageCode']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ownerEmails'])) {
            throw new Error("Expected the field `ownerEmails` to be an array in the JSON data but got " + data['ownerEmails']);
        }
        // ensure the json data is a string
        if (data['termsStatus'] && !(typeof data['termsStatus'] === 'string' || data['termsStatus'] instanceof String)) {
            throw new Error("Expected the field `termsStatus` to be a primitive type in the JSON string but got " + data['termsStatus']);
        }

        return true;
    }


}



/**
 * Optional. Email address of customer's users in the admin role. Each email address must be associated with a Google Account.
 * @member {Array.<String>} adminEmails
 */
Company.prototype['adminEmails'] = undefined;

/**
 * Output only. The ID of the company. Assigned by the server.
 * @member {String} companyId
 */
Company.prototype['companyId'] = undefined;

/**
 * Required. The name of the company. For example _XYZ Corp_. Displayed to the company's employees in the zero-touch enrollment portal.
 * @member {String} companyName
 */
Company.prototype['companyName'] = undefined;

/**
 * @member {module:model/GoogleWorkspaceAccount} googleWorkspaceAccount
 */
Company.prototype['googleWorkspaceAccount'] = undefined;

/**
 * Input only. The preferred locale of the customer represented as a BCP47 language code. This field is validated on input and requests containing unsupported language codes will be rejected. Supported language codes: Arabic (ar) Chinese (Hong Kong) (zh-HK) Chinese (Simplified) (zh-CN) Chinese (Traditional) (zh-TW) Czech (cs) Danish (da) Dutch (nl) English (UK) (en-GB) English (US) (en-US) Filipino (fil) Finnish (fi) French (fr) German (de) Hebrew (iw) Hindi (hi) Hungarian (hu) Indonesian (id) Italian (it) Japanese (ja) Korean (ko) Norwegian (Bokmal) (no) Polish (pl) Portuguese (Brazil) (pt-BR) Portuguese (Portugal) (pt-PT) Russian (ru) Spanish (es) Spanish (Latin America) (es-419) Swedish (sv) Thai (th) Turkish (tr) Ukrainian (uk) Vietnamese (vi)
 * @member {String} languageCode
 */
Company.prototype['languageCode'] = undefined;

/**
 * Output only. The API resource name of the company. The resource name is one of the following formats: * `partners/[PARTNER_ID]/customers/[CUSTOMER_ID]` * `partners/[PARTNER_ID]/vendors/[VENDOR_ID]` * `partners/[PARTNER_ID]/vendors/[VENDOR_ID]/customers/[CUSTOMER_ID]` Assigned by the server.
 * @member {String} name
 */
Company.prototype['name'] = undefined;

/**
 * Required. Input only. Email address of customer's users in the owner role. At least one `owner_email` is required. Owners share the same access as admins but can also add, delete, and edit your organization's portal users.
 * @member {Array.<String>} ownerEmails
 */
Company.prototype['ownerEmails'] = undefined;

/**
 * Input only. If set to true, welcome email will not be sent to the customer. It is recommended to skip the welcome email if devices will be claimed with additional DEVICE_PROTECTION service, as the customer will receive separate emails at device claim time. This field is ignored if this is not a Zero-touch customer.
 * @member {Boolean} skipWelcomeEmail
 */
Company.prototype['skipWelcomeEmail'] = undefined;

/**
 * Output only. Whether any user from the company has accepted the latest Terms of Service (ToS). See TermsStatus.
 * @member {module:model/Company.TermsStatusEnum} termsStatus
 */
Company.prototype['termsStatus'] = undefined;





/**
 * Allowed values for the <code>termsStatus</code> property.
 * @enum {String}
 * @readonly
 */
Company['TermsStatusEnum'] = {

    /**
     * value: "TERMS_STATUS_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "TERMS_STATUS_UNSPECIFIED",

    /**
     * value: "TERMS_STATUS_NOT_ACCEPTED"
     * @const
     */
    "NOT_ACCEPTED": "TERMS_STATUS_NOT_ACCEPTED",

    /**
     * value: "TERMS_STATUS_ACCEPTED"
     * @const
     */
    "ACCEPTED": "TERMS_STATUS_ACCEPTED",

    /**
     * value: "TERMS_STATUS_STALE"
     * @const
     */
    "STALE": "TERMS_STATUS_STALE"
};



export default Company;

