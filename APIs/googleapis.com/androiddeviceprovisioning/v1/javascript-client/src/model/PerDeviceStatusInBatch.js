/**
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PerDeviceStatusInBatch model module.
 * @module model/PerDeviceStatusInBatch
 * @version v1
 */
class PerDeviceStatusInBatch {
    /**
     * Constructs a new <code>PerDeviceStatusInBatch</code>.
     * Captures the processing status for each device in the operation.
     * @alias module:model/PerDeviceStatusInBatch
     */
    constructor() { 
        
        PerDeviceStatusInBatch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PerDeviceStatusInBatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PerDeviceStatusInBatch} obj Optional instance to populate.
     * @return {module:model/PerDeviceStatusInBatch} The populated <code>PerDeviceStatusInBatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PerDeviceStatusInBatch();

            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = ApiClient.convertToType(data['deviceId'], 'String');
            }
            if (data.hasOwnProperty('errorIdentifier')) {
                obj['errorIdentifier'] = ApiClient.convertToType(data['errorIdentifier'], 'String');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PerDeviceStatusInBatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PerDeviceStatusInBatch</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deviceId'] && !(typeof data['deviceId'] === 'string' || data['deviceId'] instanceof String)) {
            throw new Error("Expected the field `deviceId` to be a primitive type in the JSON string but got " + data['deviceId']);
        }
        // ensure the json data is a string
        if (data['errorIdentifier'] && !(typeof data['errorIdentifier'] === 'string' || data['errorIdentifier'] instanceof String)) {
            throw new Error("Expected the field `errorIdentifier` to be a primitive type in the JSON string but got " + data['errorIdentifier']);
        }
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * If processing succeeds, the device ID of the device.
 * @member {String} deviceId
 */
PerDeviceStatusInBatch.prototype['deviceId'] = undefined;

/**
 * If processing fails, the error type.
 * @member {String} errorIdentifier
 */
PerDeviceStatusInBatch.prototype['errorIdentifier'] = undefined;

/**
 * If processing fails, a developer message explaining what went wrong.
 * @member {String} errorMessage
 */
PerDeviceStatusInBatch.prototype['errorMessage'] = undefined;

/**
 * The result status of the device after processing.
 * @member {module:model/PerDeviceStatusInBatch.StatusEnum} status
 */
PerDeviceStatusInBatch.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
PerDeviceStatusInBatch['StatusEnum'] = {

    /**
     * value: "SINGLE_DEVICE_STATUS_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "SINGLE_DEVICE_STATUS_UNSPECIFIED",

    /**
     * value: "SINGLE_DEVICE_STATUS_UNKNOWN_ERROR"
     * @const
     */
    "UNKNOWN_ERROR": "SINGLE_DEVICE_STATUS_UNKNOWN_ERROR",

    /**
     * value: "SINGLE_DEVICE_STATUS_OTHER_ERROR"
     * @const
     */
    "OTHER_ERROR": "SINGLE_DEVICE_STATUS_OTHER_ERROR",

    /**
     * value: "SINGLE_DEVICE_STATUS_SUCCESS"
     * @const
     */
    "SUCCESS": "SINGLE_DEVICE_STATUS_SUCCESS",

    /**
     * value: "SINGLE_DEVICE_STATUS_PERMISSION_DENIED"
     * @const
     */
    "PERMISSION_DENIED": "SINGLE_DEVICE_STATUS_PERMISSION_DENIED",

    /**
     * value: "SINGLE_DEVICE_STATUS_INVALID_DEVICE_IDENTIFIER"
     * @const
     */
    "INVALID_DEVICE_IDENTIFIER": "SINGLE_DEVICE_STATUS_INVALID_DEVICE_IDENTIFIER",

    /**
     * value: "SINGLE_DEVICE_STATUS_INVALID_SECTION_TYPE"
     * @const
     */
    "INVALID_SECTION_TYPE": "SINGLE_DEVICE_STATUS_INVALID_SECTION_TYPE",

    /**
     * value: "SINGLE_DEVICE_STATUS_SECTION_NOT_YOURS"
     * @const
     */
    "SECTION_NOT_YOURS": "SINGLE_DEVICE_STATUS_SECTION_NOT_YOURS",

    /**
     * value: "SINGLE_DEVICE_STATUS_INVALID_TOKEN"
     * @const
     */
    "INVALID_TOKEN": "SINGLE_DEVICE_STATUS_INVALID_TOKEN",

    /**
     * value: "SINGLE_DEVICE_STATUS_REVOKED_TOKEN"
     * @const
     */
    "REVOKED_TOKEN": "SINGLE_DEVICE_STATUS_REVOKED_TOKEN",

    /**
     * value: "SINGLE_DEVICE_STATUS_DEVICE_LIMIT_EXCEEDED"
     * @const
     */
    "DEVICE_LIMIT_EXCEEDED": "SINGLE_DEVICE_STATUS_DEVICE_LIMIT_EXCEEDED"
};



export default PerDeviceStatusInBatch;

