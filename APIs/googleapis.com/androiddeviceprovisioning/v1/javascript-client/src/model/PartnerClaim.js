/**
 * Android Device Provisioning Partner API
 * Automates Android zero-touch enrollment for device resellers, customers, and EMMs.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceIdentifier from './DeviceIdentifier';
import DeviceMetadata from './DeviceMetadata';

/**
 * The PartnerClaim model module.
 * @module model/PartnerClaim
 * @version v1
 */
class PartnerClaim {
    /**
     * Constructs a new <code>PartnerClaim</code>.
     * Identifies one claim request.
     * @alias module:model/PartnerClaim
     */
    constructor() { 
        
        PartnerClaim.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PartnerClaim</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PartnerClaim} obj Optional instance to populate.
     * @return {module:model/PartnerClaim} The populated <code>PartnerClaim</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PartnerClaim();

            if (data.hasOwnProperty('configurationId')) {
                obj['configurationId'] = ApiClient.convertToType(data['configurationId'], 'String');
            }
            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('deviceIdentifier')) {
                obj['deviceIdentifier'] = DeviceIdentifier.constructFromObject(data['deviceIdentifier']);
            }
            if (data.hasOwnProperty('deviceMetadata')) {
                obj['deviceMetadata'] = DeviceMetadata.constructFromObject(data['deviceMetadata']);
            }
            if (data.hasOwnProperty('googleWorkspaceCustomerId')) {
                obj['googleWorkspaceCustomerId'] = ApiClient.convertToType(data['googleWorkspaceCustomerId'], 'String');
            }
            if (data.hasOwnProperty('preProvisioningToken')) {
                obj['preProvisioningToken'] = ApiClient.convertToType(data['preProvisioningToken'], 'String');
            }
            if (data.hasOwnProperty('sectionType')) {
                obj['sectionType'] = ApiClient.convertToType(data['sectionType'], 'String');
            }
            if (data.hasOwnProperty('simlockProfileId')) {
                obj['simlockProfileId'] = ApiClient.convertToType(data['simlockProfileId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PartnerClaim</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PartnerClaim</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['configurationId'] && !(typeof data['configurationId'] === 'string' || data['configurationId'] instanceof String)) {
            throw new Error("Expected the field `configurationId` to be a primitive type in the JSON string but got " + data['configurationId']);
        }
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // validate the optional field `deviceIdentifier`
        if (data['deviceIdentifier']) { // data not null
          DeviceIdentifier.validateJSON(data['deviceIdentifier']);
        }
        // validate the optional field `deviceMetadata`
        if (data['deviceMetadata']) { // data not null
          DeviceMetadata.validateJSON(data['deviceMetadata']);
        }
        // ensure the json data is a string
        if (data['googleWorkspaceCustomerId'] && !(typeof data['googleWorkspaceCustomerId'] === 'string' || data['googleWorkspaceCustomerId'] instanceof String)) {
            throw new Error("Expected the field `googleWorkspaceCustomerId` to be a primitive type in the JSON string but got " + data['googleWorkspaceCustomerId']);
        }
        // ensure the json data is a string
        if (data['preProvisioningToken'] && !(typeof data['preProvisioningToken'] === 'string' || data['preProvisioningToken'] instanceof String)) {
            throw new Error("Expected the field `preProvisioningToken` to be a primitive type in the JSON string but got " + data['preProvisioningToken']);
        }
        // ensure the json data is a string
        if (data['sectionType'] && !(typeof data['sectionType'] === 'string' || data['sectionType'] instanceof String)) {
            throw new Error("Expected the field `sectionType` to be a primitive type in the JSON string but got " + data['sectionType']);
        }
        // ensure the json data is a string
        if (data['simlockProfileId'] && !(typeof data['simlockProfileId'] === 'string' || data['simlockProfileId'] instanceof String)) {
            throw new Error("Expected the field `simlockProfileId` to be a primitive type in the JSON string but got " + data['simlockProfileId']);
        }

        return true;
    }


}



/**
 * Optional. The ID of the configuration applied to the device section.
 * @member {String} configurationId
 */
PartnerClaim.prototype['configurationId'] = undefined;

/**
 * The ID of the customer for whom the device is being claimed.
 * @member {String} customerId
 */
PartnerClaim.prototype['customerId'] = undefined;

/**
 * @member {module:model/DeviceIdentifier} deviceIdentifier
 */
PartnerClaim.prototype['deviceIdentifier'] = undefined;

/**
 * @member {module:model/DeviceMetadata} deviceMetadata
 */
PartnerClaim.prototype['deviceMetadata'] = undefined;

/**
 * The Google Workspace customer ID.
 * @member {String} googleWorkspaceCustomerId
 */
PartnerClaim.prototype['googleWorkspaceCustomerId'] = undefined;

/**
 * Optional. Must and can only be set for Chrome OS devices.
 * @member {String} preProvisioningToken
 */
PartnerClaim.prototype['preProvisioningToken'] = undefined;

/**
 * Required. The section type of the device's provisioning record.
 * @member {module:model/PartnerClaim.SectionTypeEnum} sectionType
 */
PartnerClaim.prototype['sectionType'] = undefined;

/**
 * Optional. Must and can only be set when DeviceProvisioningSectionType is SECTION_TYPE_SIM_LOCK. The unique identifier of the SimLock profile.
 * @member {String} simlockProfileId
 */
PartnerClaim.prototype['simlockProfileId'] = undefined;





/**
 * Allowed values for the <code>sectionType</code> property.
 * @enum {String}
 * @readonly
 */
PartnerClaim['SectionTypeEnum'] = {

    /**
     * value: "SECTION_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "SECTION_TYPE_UNSPECIFIED",

    /**
     * value: "SECTION_TYPE_SIM_LOCK"
     * @const
     */
    "SIM_LOCK": "SECTION_TYPE_SIM_LOCK",

    /**
     * value: "SECTION_TYPE_ZERO_TOUCH"
     * @const
     */
    "ZERO_TOUCH": "SECTION_TYPE_ZERO_TOUCH"
};



export default PartnerClaim;

