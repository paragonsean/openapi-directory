# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FindDevicesByOwnerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_id: List[str]=None, google_workspace_customer_id: List[str]=None, limit: str=None, page_token: str=None, section_type: str=None):
        """FindDevicesByOwnerRequest - a model defined in OpenAPI

        :param customer_id: The customer_id of this FindDevicesByOwnerRequest.
        :param google_workspace_customer_id: The google_workspace_customer_id of this FindDevicesByOwnerRequest.
        :param limit: The limit of this FindDevicesByOwnerRequest.
        :param page_token: The page_token of this FindDevicesByOwnerRequest.
        :param section_type: The section_type of this FindDevicesByOwnerRequest.
        """
        self.openapi_types = {
            'customer_id': List[str],
            'google_workspace_customer_id': List[str],
            'limit': str,
            'page_token': str,
            'section_type': str
        }

        self.attribute_map = {
            'customer_id': 'customerId',
            'google_workspace_customer_id': 'googleWorkspaceCustomerId',
            'limit': 'limit',
            'page_token': 'pageToken',
            'section_type': 'sectionType'
        }

        self._customer_id = customer_id
        self._google_workspace_customer_id = google_workspace_customer_id
        self._limit = limit
        self._page_token = page_token
        self._section_type = section_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FindDevicesByOwnerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FindDevicesByOwnerRequest of this FindDevicesByOwnerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_id(self):
        """Gets the customer_id of this FindDevicesByOwnerRequest.

        The list of customer IDs to search for.

        :return: The customer_id of this FindDevicesByOwnerRequest.
        :rtype: List[str]
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this FindDevicesByOwnerRequest.

        The list of customer IDs to search for.

        :param customer_id: The customer_id of this FindDevicesByOwnerRequest.
        :type customer_id: List[str]
        """

        self._customer_id = customer_id

    @property
    def google_workspace_customer_id(self):
        """Gets the google_workspace_customer_id of this FindDevicesByOwnerRequest.

        The list of IDs of Google Workspace accounts to search for.

        :return: The google_workspace_customer_id of this FindDevicesByOwnerRequest.
        :rtype: List[str]
        """
        return self._google_workspace_customer_id

    @google_workspace_customer_id.setter
    def google_workspace_customer_id(self, google_workspace_customer_id):
        """Sets the google_workspace_customer_id of this FindDevicesByOwnerRequest.

        The list of IDs of Google Workspace accounts to search for.

        :param google_workspace_customer_id: The google_workspace_customer_id of this FindDevicesByOwnerRequest.
        :type google_workspace_customer_id: List[str]
        """

        self._google_workspace_customer_id = google_workspace_customer_id

    @property
    def limit(self):
        """Gets the limit of this FindDevicesByOwnerRequest.

        Required. The maximum number of devices to show in a page of results. Must be between 1 and 100 inclusive.

        :return: The limit of this FindDevicesByOwnerRequest.
        :rtype: str
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this FindDevicesByOwnerRequest.

        Required. The maximum number of devices to show in a page of results. Must be between 1 and 100 inclusive.

        :param limit: The limit of this FindDevicesByOwnerRequest.
        :type limit: str
        """

        self._limit = limit

    @property
    def page_token(self):
        """Gets the page_token of this FindDevicesByOwnerRequest.

        A token specifying which result page to return.

        :return: The page_token of this FindDevicesByOwnerRequest.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this FindDevicesByOwnerRequest.

        A token specifying which result page to return.

        :param page_token: The page_token of this FindDevicesByOwnerRequest.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def section_type(self):
        """Gets the section_type of this FindDevicesByOwnerRequest.

        Required. The section type of the device's provisioning record.

        :return: The section_type of this FindDevicesByOwnerRequest.
        :rtype: str
        """
        return self._section_type

    @section_type.setter
    def section_type(self, section_type):
        """Sets the section_type of this FindDevicesByOwnerRequest.

        Required. The section type of the device's provisioning record.

        :param section_type: The section_type of this FindDevicesByOwnerRequest.
        :type section_type: str
        """
        allowed_values = ["SECTION_TYPE_UNSPECIFIED", "SECTION_TYPE_SIM_LOCK", "SECTION_TYPE_ZERO_TOUCH"]  # noqa: E501
        if section_type not in allowed_values:
            raise ValueError(
                "Invalid value for `section_type` ({0}), must be one of {1}"
                .format(section_type, allowed_values)
            )

        self._section_type = section_type
