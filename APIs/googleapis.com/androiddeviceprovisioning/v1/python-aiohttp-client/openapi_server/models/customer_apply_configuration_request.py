# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_reference import DeviceReference
from openapi_server import util


class CustomerApplyConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: str=None, device: DeviceReference=None):
        """CustomerApplyConfigurationRequest - a model defined in OpenAPI

        :param configuration: The configuration of this CustomerApplyConfigurationRequest.
        :param device: The device of this CustomerApplyConfigurationRequest.
        """
        self.openapi_types = {
            'configuration': str,
            'device': DeviceReference
        }

        self.attribute_map = {
            'configuration': 'configuration',
            'device': 'device'
        }

        self._configuration = configuration
        self._device = device

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerApplyConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerApplyConfigurationRequest of this CustomerApplyConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this CustomerApplyConfigurationRequest.

        Required. The configuration applied to the device in the format `customers/[CUSTOMER_ID]/configurations/[CONFIGURATION_ID]`.

        :return: The configuration of this CustomerApplyConfigurationRequest.
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this CustomerApplyConfigurationRequest.

        Required. The configuration applied to the device in the format `customers/[CUSTOMER_ID]/configurations/[CONFIGURATION_ID]`.

        :param configuration: The configuration of this CustomerApplyConfigurationRequest.
        :type configuration: str
        """

        self._configuration = configuration

    @property
    def device(self):
        """Gets the device of this CustomerApplyConfigurationRequest.


        :return: The device of this CustomerApplyConfigurationRequest.
        :rtype: DeviceReference
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this CustomerApplyConfigurationRequest.


        :param device: The device of this CustomerApplyConfigurationRequest.
        :type device: DeviceReference
        """

        self._device = device
