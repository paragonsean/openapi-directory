# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceIdentifier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chrome_os_attested_device_id: str=None, device_type: str=None, imei: str=None, manufacturer: str=None, meid: str=None, model: str=None, serial_number: str=None):
        """DeviceIdentifier - a model defined in OpenAPI

        :param chrome_os_attested_device_id: The chrome_os_attested_device_id of this DeviceIdentifier.
        :param device_type: The device_type of this DeviceIdentifier.
        :param imei: The imei of this DeviceIdentifier.
        :param manufacturer: The manufacturer of this DeviceIdentifier.
        :param meid: The meid of this DeviceIdentifier.
        :param model: The model of this DeviceIdentifier.
        :param serial_number: The serial_number of this DeviceIdentifier.
        """
        self.openapi_types = {
            'chrome_os_attested_device_id': str,
            'device_type': str,
            'imei': str,
            'manufacturer': str,
            'meid': str,
            'model': str,
            'serial_number': str
        }

        self.attribute_map = {
            'chrome_os_attested_device_id': 'chromeOsAttestedDeviceId',
            'device_type': 'deviceType',
            'imei': 'imei',
            'manufacturer': 'manufacturer',
            'meid': 'meid',
            'model': 'model',
            'serial_number': 'serialNumber'
        }

        self._chrome_os_attested_device_id = chrome_os_attested_device_id
        self._device_type = device_type
        self._imei = imei
        self._manufacturer = manufacturer
        self._meid = meid
        self._model = model
        self._serial_number = serial_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceIdentifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceIdentifier of this DeviceIdentifier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chrome_os_attested_device_id(self):
        """Gets the chrome_os_attested_device_id of this DeviceIdentifier.

        An identifier provided by OEMs, carried through the production and sales process. Only applicable to Chrome OS devices.

        :return: The chrome_os_attested_device_id of this DeviceIdentifier.
        :rtype: str
        """
        return self._chrome_os_attested_device_id

    @chrome_os_attested_device_id.setter
    def chrome_os_attested_device_id(self, chrome_os_attested_device_id):
        """Sets the chrome_os_attested_device_id of this DeviceIdentifier.

        An identifier provided by OEMs, carried through the production and sales process. Only applicable to Chrome OS devices.

        :param chrome_os_attested_device_id: The chrome_os_attested_device_id of this DeviceIdentifier.
        :type chrome_os_attested_device_id: str
        """

        self._chrome_os_attested_device_id = chrome_os_attested_device_id

    @property
    def device_type(self):
        """Gets the device_type of this DeviceIdentifier.

        The type of the device

        :return: The device_type of this DeviceIdentifier.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DeviceIdentifier.

        The type of the device

        :param device_type: The device_type of this DeviceIdentifier.
        :type device_type: str
        """
        allowed_values = ["DEVICE_TYPE_UNSPECIFIED", "DEVICE_TYPE_ANDROID", "DEVICE_TYPE_CHROME_OS"]  # noqa: E501
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def imei(self):
        """Gets the imei of this DeviceIdentifier.

        The device’s IMEI number. Validated on input.

        :return: The imei of this DeviceIdentifier.
        :rtype: str
        """
        return self._imei

    @imei.setter
    def imei(self, imei):
        """Sets the imei of this DeviceIdentifier.

        The device’s IMEI number. Validated on input.

        :param imei: The imei of this DeviceIdentifier.
        :type imei: str
        """

        self._imei = imei

    @property
    def manufacturer(self):
        """Gets the manufacturer of this DeviceIdentifier.

        The device manufacturer’s name. Matches the device's built-in value returned from `android.os.Build.MANUFACTURER`. Allowed values are listed in [Android manufacturers](/zero-touch/resources/manufacturer-names#manufacturers-names).

        :return: The manufacturer of this DeviceIdentifier.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this DeviceIdentifier.

        The device manufacturer’s name. Matches the device's built-in value returned from `android.os.Build.MANUFACTURER`. Allowed values are listed in [Android manufacturers](/zero-touch/resources/manufacturer-names#manufacturers-names).

        :param manufacturer: The manufacturer of this DeviceIdentifier.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def meid(self):
        """Gets the meid of this DeviceIdentifier.

        The device’s MEID number.

        :return: The meid of this DeviceIdentifier.
        :rtype: str
        """
        return self._meid

    @meid.setter
    def meid(self, meid):
        """Sets the meid of this DeviceIdentifier.

        The device’s MEID number.

        :param meid: The meid of this DeviceIdentifier.
        :type meid: str
        """

        self._meid = meid

    @property
    def model(self):
        """Gets the model of this DeviceIdentifier.

        The device model's name. Allowed values are listed in [Android models](/zero-touch/resources/manufacturer-names#model-names) and [Chrome OS models](https://support.google.com/chrome/a/answer/10130175#identify_compatible).

        :return: The model of this DeviceIdentifier.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DeviceIdentifier.

        The device model's name. Allowed values are listed in [Android models](/zero-touch/resources/manufacturer-names#model-names) and [Chrome OS models](https://support.google.com/chrome/a/answer/10130175#identify_compatible).

        :param model: The model of this DeviceIdentifier.
        :type model: str
        """

        self._model = model

    @property
    def serial_number(self):
        """Gets the serial_number of this DeviceIdentifier.

        The manufacturer's serial number for the device. This value might not be unique across different device models.

        :return: The serial_number of this DeviceIdentifier.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this DeviceIdentifier.

        The manufacturer's serial number for the device. This value might not be unique across different device models.

        :param serial_number: The serial_number of this DeviceIdentifier.
        :type serial_number: str
        """

        self._serial_number = serial_number
