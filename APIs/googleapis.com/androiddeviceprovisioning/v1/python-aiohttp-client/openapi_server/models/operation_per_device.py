# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.partner_claim import PartnerClaim
from openapi_server.models.partner_unclaim import PartnerUnclaim
from openapi_server.models.per_device_status_in_batch import PerDeviceStatusInBatch
from openapi_server.models.update_metadata_arguments import UpdateMetadataArguments
from openapi_server import util


class OperationPerDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, claim: PartnerClaim=None, result: PerDeviceStatusInBatch=None, unclaim: PartnerUnclaim=None, update_metadata: UpdateMetadataArguments=None):
        """OperationPerDevice - a model defined in OpenAPI

        :param claim: The claim of this OperationPerDevice.
        :param result: The result of this OperationPerDevice.
        :param unclaim: The unclaim of this OperationPerDevice.
        :param update_metadata: The update_metadata of this OperationPerDevice.
        """
        self.openapi_types = {
            'claim': PartnerClaim,
            'result': PerDeviceStatusInBatch,
            'unclaim': PartnerUnclaim,
            'update_metadata': UpdateMetadataArguments
        }

        self.attribute_map = {
            'claim': 'claim',
            'result': 'result',
            'unclaim': 'unclaim',
            'update_metadata': 'updateMetadata'
        }

        self._claim = claim
        self._result = result
        self._unclaim = unclaim
        self._update_metadata = update_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationPerDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationPerDevice of this OperationPerDevice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def claim(self):
        """Gets the claim of this OperationPerDevice.


        :return: The claim of this OperationPerDevice.
        :rtype: PartnerClaim
        """
        return self._claim

    @claim.setter
    def claim(self, claim):
        """Sets the claim of this OperationPerDevice.


        :param claim: The claim of this OperationPerDevice.
        :type claim: PartnerClaim
        """

        self._claim = claim

    @property
    def result(self):
        """Gets the result of this OperationPerDevice.


        :return: The result of this OperationPerDevice.
        :rtype: PerDeviceStatusInBatch
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this OperationPerDevice.


        :param result: The result of this OperationPerDevice.
        :type result: PerDeviceStatusInBatch
        """

        self._result = result

    @property
    def unclaim(self):
        """Gets the unclaim of this OperationPerDevice.


        :return: The unclaim of this OperationPerDevice.
        :rtype: PartnerUnclaim
        """
        return self._unclaim

    @unclaim.setter
    def unclaim(self, unclaim):
        """Sets the unclaim of this OperationPerDevice.


        :param unclaim: The unclaim of this OperationPerDevice.
        :type unclaim: PartnerUnclaim
        """

        self._unclaim = unclaim

    @property
    def update_metadata(self):
        """Gets the update_metadata of this OperationPerDevice.


        :return: The update_metadata of this OperationPerDevice.
        :rtype: UpdateMetadataArguments
        """
        return self._update_metadata

    @update_metadata.setter
    def update_metadata(self, update_metadata):
        """Sets the update_metadata of this OperationPerDevice.


        :param update_metadata: The update_metadata of this OperationPerDevice.
        :type update_metadata: UpdateMetadataArguments
        """

        self._update_metadata = update_metadata
