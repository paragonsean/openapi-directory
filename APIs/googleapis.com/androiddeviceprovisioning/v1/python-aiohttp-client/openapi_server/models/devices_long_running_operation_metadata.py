# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DevicesLongRunningOperationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, devices_count: int=None, processing_status: str=None, progress: int=None):
        """DevicesLongRunningOperationMetadata - a model defined in OpenAPI

        :param devices_count: The devices_count of this DevicesLongRunningOperationMetadata.
        :param processing_status: The processing_status of this DevicesLongRunningOperationMetadata.
        :param progress: The progress of this DevicesLongRunningOperationMetadata.
        """
        self.openapi_types = {
            'devices_count': int,
            'processing_status': str,
            'progress': int
        }

        self.attribute_map = {
            'devices_count': 'devicesCount',
            'processing_status': 'processingStatus',
            'progress': 'progress'
        }

        self._devices_count = devices_count
        self._processing_status = processing_status
        self._progress = progress

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DevicesLongRunningOperationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DevicesLongRunningOperationMetadata of this DevicesLongRunningOperationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def devices_count(self):
        """Gets the devices_count of this DevicesLongRunningOperationMetadata.

        The number of metadata updates in the operation. This might be different from the number of updates in the request if the API can't parse some of the updates.

        :return: The devices_count of this DevicesLongRunningOperationMetadata.
        :rtype: int
        """
        return self._devices_count

    @devices_count.setter
    def devices_count(self, devices_count):
        """Sets the devices_count of this DevicesLongRunningOperationMetadata.

        The number of metadata updates in the operation. This might be different from the number of updates in the request if the API can't parse some of the updates.

        :param devices_count: The devices_count of this DevicesLongRunningOperationMetadata.
        :type devices_count: int
        """

        self._devices_count = devices_count

    @property
    def processing_status(self):
        """Gets the processing_status of this DevicesLongRunningOperationMetadata.

        The processing status of the operation.

        :return: The processing_status of this DevicesLongRunningOperationMetadata.
        :rtype: str
        """
        return self._processing_status

    @processing_status.setter
    def processing_status(self, processing_status):
        """Sets the processing_status of this DevicesLongRunningOperationMetadata.

        The processing status of the operation.

        :param processing_status: The processing_status of this DevicesLongRunningOperationMetadata.
        :type processing_status: str
        """
        allowed_values = ["BATCH_PROCESS_STATUS_UNSPECIFIED", "BATCH_PROCESS_PENDING", "BATCH_PROCESS_IN_PROGRESS", "BATCH_PROCESS_PROCESSED"]  # noqa: E501
        if processing_status not in allowed_values:
            raise ValueError(
                "Invalid value for `processing_status` ({0}), must be one of {1}"
                .format(processing_status, allowed_values)
            )

        self._processing_status = processing_status

    @property
    def progress(self):
        """Gets the progress of this DevicesLongRunningOperationMetadata.

        The processing progress of the operation. Measured as a number from 0 to 100. A value of 10O doesn't always mean the operation completed—check for the inclusion of a `done` field.

        :return: The progress of this DevicesLongRunningOperationMetadata.
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this DevicesLongRunningOperationMetadata.

        The processing progress of the operation. Measured as a number from 0 to 100. A value of 10O doesn't always mean the operation completed—check for the inclusion of a `done` field.

        :param progress: The progress of this DevicesLongRunningOperationMetadata.
        :type progress: int
        """

        self._progress = progress
