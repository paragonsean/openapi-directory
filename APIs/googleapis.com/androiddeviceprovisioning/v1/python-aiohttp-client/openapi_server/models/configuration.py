# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Configuration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_name: str=None, configuration_id: str=None, configuration_name: str=None, contact_email: str=None, contact_phone: str=None, custom_message: str=None, dpc_extras: str=None, dpc_resource_path: str=None, forced_reset_time: str=None, is_default: bool=None, name: str=None):
        """Configuration - a model defined in OpenAPI

        :param company_name: The company_name of this Configuration.
        :param configuration_id: The configuration_id of this Configuration.
        :param configuration_name: The configuration_name of this Configuration.
        :param contact_email: The contact_email of this Configuration.
        :param contact_phone: The contact_phone of this Configuration.
        :param custom_message: The custom_message of this Configuration.
        :param dpc_extras: The dpc_extras of this Configuration.
        :param dpc_resource_path: The dpc_resource_path of this Configuration.
        :param forced_reset_time: The forced_reset_time of this Configuration.
        :param is_default: The is_default of this Configuration.
        :param name: The name of this Configuration.
        """
        self.openapi_types = {
            'company_name': str,
            'configuration_id': str,
            'configuration_name': str,
            'contact_email': str,
            'contact_phone': str,
            'custom_message': str,
            'dpc_extras': str,
            'dpc_resource_path': str,
            'forced_reset_time': str,
            'is_default': bool,
            'name': str
        }

        self.attribute_map = {
            'company_name': 'companyName',
            'configuration_id': 'configurationId',
            'configuration_name': 'configurationName',
            'contact_email': 'contactEmail',
            'contact_phone': 'contactPhone',
            'custom_message': 'customMessage',
            'dpc_extras': 'dpcExtras',
            'dpc_resource_path': 'dpcResourcePath',
            'forced_reset_time': 'forcedResetTime',
            'is_default': 'isDefault',
            'name': 'name'
        }

        self._company_name = company_name
        self._configuration_id = configuration_id
        self._configuration_name = configuration_name
        self._contact_email = contact_email
        self._contact_phone = contact_phone
        self._custom_message = custom_message
        self._dpc_extras = dpc_extras
        self._dpc_resource_path = dpc_resource_path
        self._forced_reset_time = forced_reset_time
        self._is_default = is_default
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Configuration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Configuration of this Configuration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_name(self):
        """Gets the company_name of this Configuration.

        Required. The name of the organization. Zero-touch enrollment shows this organization name to device users during device provisioning.

        :return: The company_name of this Configuration.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Configuration.

        Required. The name of the organization. Zero-touch enrollment shows this organization name to device users during device provisioning.

        :param company_name: The company_name of this Configuration.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def configuration_id(self):
        """Gets the configuration_id of this Configuration.

        Output only. The ID of the configuration. Assigned by the server.

        :return: The configuration_id of this Configuration.
        :rtype: str
        """
        return self._configuration_id

    @configuration_id.setter
    def configuration_id(self, configuration_id):
        """Sets the configuration_id of this Configuration.

        Output only. The ID of the configuration. Assigned by the server.

        :param configuration_id: The configuration_id of this Configuration.
        :type configuration_id: str
        """

        self._configuration_id = configuration_id

    @property
    def configuration_name(self):
        """Gets the configuration_name of this Configuration.

        Required. A short name that describes the configuration's purpose. For example, _Sales team_ or _Temporary employees_. The zero-touch enrollment portal displays this name to IT admins.

        :return: The configuration_name of this Configuration.
        :rtype: str
        """
        return self._configuration_name

    @configuration_name.setter
    def configuration_name(self, configuration_name):
        """Sets the configuration_name of this Configuration.

        Required. A short name that describes the configuration's purpose. For example, _Sales team_ or _Temporary employees_. The zero-touch enrollment portal displays this name to IT admins.

        :param configuration_name: The configuration_name of this Configuration.
        :type configuration_name: str
        """

        self._configuration_name = configuration_name

    @property
    def contact_email(self):
        """Gets the contact_email of this Configuration.

        Required. The email address that device users can contact to get help. Zero-touch enrollment shows this email address to device users before device provisioning. The value is validated on input.

        :return: The contact_email of this Configuration.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this Configuration.

        Required. The email address that device users can contact to get help. Zero-touch enrollment shows this email address to device users before device provisioning. The value is validated on input.

        :param contact_email: The contact_email of this Configuration.
        :type contact_email: str
        """

        self._contact_email = contact_email

    @property
    def contact_phone(self):
        """Gets the contact_phone of this Configuration.

        Required. The telephone number that device users can call, using another device, to get help. Zero-touch enrollment shows this number to device users before device provisioning. Accepts numerals, spaces, the plus sign, hyphens, and parentheses.

        :return: The contact_phone of this Configuration.
        :rtype: str
        """
        return self._contact_phone

    @contact_phone.setter
    def contact_phone(self, contact_phone):
        """Sets the contact_phone of this Configuration.

        Required. The telephone number that device users can call, using another device, to get help. Zero-touch enrollment shows this number to device users before device provisioning. Accepts numerals, spaces, the plus sign, hyphens, and parentheses.

        :param contact_phone: The contact_phone of this Configuration.
        :type contact_phone: str
        """

        self._contact_phone = contact_phone

    @property
    def custom_message(self):
        """Gets the custom_message of this Configuration.

        A message, containing one or two sentences, to help device users get help or give them more details about what’s happening to their device. Zero-touch enrollment shows this message before the device is provisioned.

        :return: The custom_message of this Configuration.
        :rtype: str
        """
        return self._custom_message

    @custom_message.setter
    def custom_message(self, custom_message):
        """Sets the custom_message of this Configuration.

        A message, containing one or two sentences, to help device users get help or give them more details about what’s happening to their device. Zero-touch enrollment shows this message before the device is provisioned.

        :param custom_message: The custom_message of this Configuration.
        :type custom_message: str
        """

        self._custom_message = custom_message

    @property
    def dpc_extras(self):
        """Gets the dpc_extras of this Configuration.

        The JSON-formatted EMM provisioning extras that are passed to the DPC.

        :return: The dpc_extras of this Configuration.
        :rtype: str
        """
        return self._dpc_extras

    @dpc_extras.setter
    def dpc_extras(self, dpc_extras):
        """Sets the dpc_extras of this Configuration.

        The JSON-formatted EMM provisioning extras that are passed to the DPC.

        :param dpc_extras: The dpc_extras of this Configuration.
        :type dpc_extras: str
        """

        self._dpc_extras = dpc_extras

    @property
    def dpc_resource_path(self):
        """Gets the dpc_resource_path of this Configuration.

        Required. The resource name of the selected DPC (device policy controller) in the format `customers/[CUSTOMER_ID]/dpcs/*`. To list the supported DPCs, call `customers.dpcs.list`.

        :return: The dpc_resource_path of this Configuration.
        :rtype: str
        """
        return self._dpc_resource_path

    @dpc_resource_path.setter
    def dpc_resource_path(self, dpc_resource_path):
        """Sets the dpc_resource_path of this Configuration.

        Required. The resource name of the selected DPC (device policy controller) in the format `customers/[CUSTOMER_ID]/dpcs/*`. To list the supported DPCs, call `customers.dpcs.list`.

        :param dpc_resource_path: The dpc_resource_path of this Configuration.
        :type dpc_resource_path: str
        """

        self._dpc_resource_path = dpc_resource_path

    @property
    def forced_reset_time(self):
        """Gets the forced_reset_time of this Configuration.

        Optional. The timeout before forcing factory reset the device if the device doesn't go through provisioning in the setup wizard, usually due to lack of network connectivity during setup wizard. Ranges from 0-6 hours, with 2 hours being the default if unset.

        :return: The forced_reset_time of this Configuration.
        :rtype: str
        """
        return self._forced_reset_time

    @forced_reset_time.setter
    def forced_reset_time(self, forced_reset_time):
        """Sets the forced_reset_time of this Configuration.

        Optional. The timeout before forcing factory reset the device if the device doesn't go through provisioning in the setup wizard, usually due to lack of network connectivity during setup wizard. Ranges from 0-6 hours, with 2 hours being the default if unset.

        :param forced_reset_time: The forced_reset_time of this Configuration.
        :type forced_reset_time: str
        """

        self._forced_reset_time = forced_reset_time

    @property
    def is_default(self):
        """Gets the is_default of this Configuration.

        Required. Whether this is the default configuration that zero-touch enrollment applies to any new devices the organization purchases in the future. Only one customer configuration can be the default. Setting this value to `true`, changes the previous default configuration's `isDefault` value to `false`.

        :return: The is_default of this Configuration.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this Configuration.

        Required. Whether this is the default configuration that zero-touch enrollment applies to any new devices the organization purchases in the future. Only one customer configuration can be the default. Setting this value to `true`, changes the previous default configuration's `isDefault` value to `false`.

        :param is_default: The is_default of this Configuration.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def name(self):
        """Gets the name of this Configuration.

        Output only. The API resource name in the format `customers/[CUSTOMER_ID]/configurations/[CONFIGURATION_ID]`. Assigned by the server.

        :return: The name of this Configuration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Configuration.

        Output only. The API resource name in the format `customers/[CUSTOMER_ID]/configurations/[CONFIGURATION_ID]`. Assigned by the server.

        :param name: The name of this Configuration.
        :type name: str
        """

        self._name = name
