# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation_per_device import OperationPerDevice
from openapi_server import util


class DevicesLongRunningOperationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, per_device_status: List[OperationPerDevice]=None, success_count: int=None):
        """DevicesLongRunningOperationResponse - a model defined in OpenAPI

        :param per_device_status: The per_device_status of this DevicesLongRunningOperationResponse.
        :param success_count: The success_count of this DevicesLongRunningOperationResponse.
        """
        self.openapi_types = {
            'per_device_status': List[OperationPerDevice],
            'success_count': int
        }

        self.attribute_map = {
            'per_device_status': 'perDeviceStatus',
            'success_count': 'successCount'
        }

        self._per_device_status = per_device_status
        self._success_count = success_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DevicesLongRunningOperationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DevicesLongRunningOperationResponse of this DevicesLongRunningOperationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def per_device_status(self):
        """Gets the per_device_status of this DevicesLongRunningOperationResponse.

        The processing status for each device in the operation. One `PerDeviceStatus` per device. The list order matches the items in the original request.

        :return: The per_device_status of this DevicesLongRunningOperationResponse.
        :rtype: List[OperationPerDevice]
        """
        return self._per_device_status

    @per_device_status.setter
    def per_device_status(self, per_device_status):
        """Sets the per_device_status of this DevicesLongRunningOperationResponse.

        The processing status for each device in the operation. One `PerDeviceStatus` per device. The list order matches the items in the original request.

        :param per_device_status: The per_device_status of this DevicesLongRunningOperationResponse.
        :type per_device_status: List[OperationPerDevice]
        """

        self._per_device_status = per_device_status

    @property
    def success_count(self):
        """Gets the success_count of this DevicesLongRunningOperationResponse.

        A summary of how many items in the operation the server processed successfully. Updated as the operation progresses.

        :return: The success_count of this DevicesLongRunningOperationResponse.
        :rtype: int
        """
        return self._success_count

    @success_count.setter
    def success_count(self, success_count):
        """Sets the success_count of this DevicesLongRunningOperationResponse.

        A summary of how many items in the operation the server processed successfully. Updated as the operation progresses.

        :param success_count: The success_count of this DevicesLongRunningOperationResponse.
        :type success_count: int
        """

        self._success_count = success_count
