# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_identifier import DeviceIdentifier
from openapi_server.models.device_metadata import DeviceMetadata
from openapi_server import util


class ClaimDeviceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration_id: str=None, customer_id: str=None, device_identifier: DeviceIdentifier=None, device_metadata: DeviceMetadata=None, google_workspace_customer_id: str=None, pre_provisioning_token: str=None, section_type: str=None, simlock_profile_id: str=None):
        """ClaimDeviceRequest - a model defined in OpenAPI

        :param configuration_id: The configuration_id of this ClaimDeviceRequest.
        :param customer_id: The customer_id of this ClaimDeviceRequest.
        :param device_identifier: The device_identifier of this ClaimDeviceRequest.
        :param device_metadata: The device_metadata of this ClaimDeviceRequest.
        :param google_workspace_customer_id: The google_workspace_customer_id of this ClaimDeviceRequest.
        :param pre_provisioning_token: The pre_provisioning_token of this ClaimDeviceRequest.
        :param section_type: The section_type of this ClaimDeviceRequest.
        :param simlock_profile_id: The simlock_profile_id of this ClaimDeviceRequest.
        """
        self.openapi_types = {
            'configuration_id': str,
            'customer_id': str,
            'device_identifier': DeviceIdentifier,
            'device_metadata': DeviceMetadata,
            'google_workspace_customer_id': str,
            'pre_provisioning_token': str,
            'section_type': str,
            'simlock_profile_id': str
        }

        self.attribute_map = {
            'configuration_id': 'configurationId',
            'customer_id': 'customerId',
            'device_identifier': 'deviceIdentifier',
            'device_metadata': 'deviceMetadata',
            'google_workspace_customer_id': 'googleWorkspaceCustomerId',
            'pre_provisioning_token': 'preProvisioningToken',
            'section_type': 'sectionType',
            'simlock_profile_id': 'simlockProfileId'
        }

        self._configuration_id = configuration_id
        self._customer_id = customer_id
        self._device_identifier = device_identifier
        self._device_metadata = device_metadata
        self._google_workspace_customer_id = google_workspace_customer_id
        self._pre_provisioning_token = pre_provisioning_token
        self._section_type = section_type
        self._simlock_profile_id = simlock_profile_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClaimDeviceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClaimDeviceRequest of this ClaimDeviceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration_id(self):
        """Gets the configuration_id of this ClaimDeviceRequest.

        Optional. The ID of the configuration applied to the device section.

        :return: The configuration_id of this ClaimDeviceRequest.
        :rtype: str
        """
        return self._configuration_id

    @configuration_id.setter
    def configuration_id(self, configuration_id):
        """Sets the configuration_id of this ClaimDeviceRequest.

        Optional. The ID of the configuration applied to the device section.

        :param configuration_id: The configuration_id of this ClaimDeviceRequest.
        :type configuration_id: str
        """

        self._configuration_id = configuration_id

    @property
    def customer_id(self):
        """Gets the customer_id of this ClaimDeviceRequest.

        The ID of the customer for whom the device is being claimed.

        :return: The customer_id of this ClaimDeviceRequest.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this ClaimDeviceRequest.

        The ID of the customer for whom the device is being claimed.

        :param customer_id: The customer_id of this ClaimDeviceRequest.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def device_identifier(self):
        """Gets the device_identifier of this ClaimDeviceRequest.


        :return: The device_identifier of this ClaimDeviceRequest.
        :rtype: DeviceIdentifier
        """
        return self._device_identifier

    @device_identifier.setter
    def device_identifier(self, device_identifier):
        """Sets the device_identifier of this ClaimDeviceRequest.


        :param device_identifier: The device_identifier of this ClaimDeviceRequest.
        :type device_identifier: DeviceIdentifier
        """

        self._device_identifier = device_identifier

    @property
    def device_metadata(self):
        """Gets the device_metadata of this ClaimDeviceRequest.


        :return: The device_metadata of this ClaimDeviceRequest.
        :rtype: DeviceMetadata
        """
        return self._device_metadata

    @device_metadata.setter
    def device_metadata(self, device_metadata):
        """Sets the device_metadata of this ClaimDeviceRequest.


        :param device_metadata: The device_metadata of this ClaimDeviceRequest.
        :type device_metadata: DeviceMetadata
        """

        self._device_metadata = device_metadata

    @property
    def google_workspace_customer_id(self):
        """Gets the google_workspace_customer_id of this ClaimDeviceRequest.

        The Google Workspace customer ID.

        :return: The google_workspace_customer_id of this ClaimDeviceRequest.
        :rtype: str
        """
        return self._google_workspace_customer_id

    @google_workspace_customer_id.setter
    def google_workspace_customer_id(self, google_workspace_customer_id):
        """Sets the google_workspace_customer_id of this ClaimDeviceRequest.

        The Google Workspace customer ID.

        :param google_workspace_customer_id: The google_workspace_customer_id of this ClaimDeviceRequest.
        :type google_workspace_customer_id: str
        """

        self._google_workspace_customer_id = google_workspace_customer_id

    @property
    def pre_provisioning_token(self):
        """Gets the pre_provisioning_token of this ClaimDeviceRequest.

        Optional. Must and can only be set for Chrome OS devices.

        :return: The pre_provisioning_token of this ClaimDeviceRequest.
        :rtype: str
        """
        return self._pre_provisioning_token

    @pre_provisioning_token.setter
    def pre_provisioning_token(self, pre_provisioning_token):
        """Sets the pre_provisioning_token of this ClaimDeviceRequest.

        Optional. Must and can only be set for Chrome OS devices.

        :param pre_provisioning_token: The pre_provisioning_token of this ClaimDeviceRequest.
        :type pre_provisioning_token: str
        """

        self._pre_provisioning_token = pre_provisioning_token

    @property
    def section_type(self):
        """Gets the section_type of this ClaimDeviceRequest.

        Required. The section type of the device's provisioning record.

        :return: The section_type of this ClaimDeviceRequest.
        :rtype: str
        """
        return self._section_type

    @section_type.setter
    def section_type(self, section_type):
        """Sets the section_type of this ClaimDeviceRequest.

        Required. The section type of the device's provisioning record.

        :param section_type: The section_type of this ClaimDeviceRequest.
        :type section_type: str
        """
        allowed_values = ["SECTION_TYPE_UNSPECIFIED", "SECTION_TYPE_SIM_LOCK", "SECTION_TYPE_ZERO_TOUCH"]  # noqa: E501
        if section_type not in allowed_values:
            raise ValueError(
                "Invalid value for `section_type` ({0}), must be one of {1}"
                .format(section_type, allowed_values)
            )

        self._section_type = section_type

    @property
    def simlock_profile_id(self):
        """Gets the simlock_profile_id of this ClaimDeviceRequest.

        Optional. Must and can only be set when DeviceProvisioningSectionType is SECTION_TYPE_SIM_LOCK. The unique identifier of the SimLock profile.

        :return: The simlock_profile_id of this ClaimDeviceRequest.
        :rtype: str
        """
        return self._simlock_profile_id

    @simlock_profile_id.setter
    def simlock_profile_id(self, simlock_profile_id):
        """Sets the simlock_profile_id of this ClaimDeviceRequest.

        Optional. Must and can only be set when DeviceProvisioningSectionType is SECTION_TYPE_SIM_LOCK. The unique identifier of the SimLock profile.

        :param simlock_profile_id: The simlock_profile_id of this ClaimDeviceRequest.
        :type simlock_profile_id: str
        """

        self._simlock_profile_id = simlock_profile_id
