# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetDeviceSimLockStateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sim_lock_state: str=None):
        """GetDeviceSimLockStateResponse - a model defined in OpenAPI

        :param sim_lock_state: The sim_lock_state of this GetDeviceSimLockStateResponse.
        """
        self.openapi_types = {
            'sim_lock_state': str
        }

        self.attribute_map = {
            'sim_lock_state': 'simLockState'
        }

        self._sim_lock_state = sim_lock_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDeviceSimLockStateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetDeviceSimLockStateResponse of this GetDeviceSimLockStateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sim_lock_state(self):
        """Gets the sim_lock_state of this GetDeviceSimLockStateResponse.


        :return: The sim_lock_state of this GetDeviceSimLockStateResponse.
        :rtype: str
        """
        return self._sim_lock_state

    @sim_lock_state.setter
    def sim_lock_state(self, sim_lock_state):
        """Sets the sim_lock_state of this GetDeviceSimLockStateResponse.


        :param sim_lock_state: The sim_lock_state of this GetDeviceSimLockStateResponse.
        :type sim_lock_state: str
        """
        allowed_values = ["SIM_LOCK_STATE_UNSPECIFIED", "UNLOCKED", "LOCKED_TO_PARTNER", "LOCKED_TO_OTHER_PARTNER"]  # noqa: E501
        if sim_lock_state not in allowed_values:
            raise ValueError(
                "Invalid value for `sim_lock_state` ({0}), must be one of {1}"
                .format(sim_lock_state, allowed_values)
            )

        self._sim_lock_state = sim_lock_state
