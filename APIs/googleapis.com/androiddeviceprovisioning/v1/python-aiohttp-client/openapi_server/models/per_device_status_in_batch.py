# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PerDeviceStatusInBatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_id: str=None, error_identifier: str=None, error_message: str=None, status: str=None):
        """PerDeviceStatusInBatch - a model defined in OpenAPI

        :param device_id: The device_id of this PerDeviceStatusInBatch.
        :param error_identifier: The error_identifier of this PerDeviceStatusInBatch.
        :param error_message: The error_message of this PerDeviceStatusInBatch.
        :param status: The status of this PerDeviceStatusInBatch.
        """
        self.openapi_types = {
            'device_id': str,
            'error_identifier': str,
            'error_message': str,
            'status': str
        }

        self.attribute_map = {
            'device_id': 'deviceId',
            'error_identifier': 'errorIdentifier',
            'error_message': 'errorMessage',
            'status': 'status'
        }

        self._device_id = device_id
        self._error_identifier = error_identifier
        self._error_message = error_message
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PerDeviceStatusInBatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PerDeviceStatusInBatch of this PerDeviceStatusInBatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_id(self):
        """Gets the device_id of this PerDeviceStatusInBatch.

        If processing succeeds, the device ID of the device.

        :return: The device_id of this PerDeviceStatusInBatch.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this PerDeviceStatusInBatch.

        If processing succeeds, the device ID of the device.

        :param device_id: The device_id of this PerDeviceStatusInBatch.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def error_identifier(self):
        """Gets the error_identifier of this PerDeviceStatusInBatch.

        If processing fails, the error type.

        :return: The error_identifier of this PerDeviceStatusInBatch.
        :rtype: str
        """
        return self._error_identifier

    @error_identifier.setter
    def error_identifier(self, error_identifier):
        """Sets the error_identifier of this PerDeviceStatusInBatch.

        If processing fails, the error type.

        :param error_identifier: The error_identifier of this PerDeviceStatusInBatch.
        :type error_identifier: str
        """

        self._error_identifier = error_identifier

    @property
    def error_message(self):
        """Gets the error_message of this PerDeviceStatusInBatch.

        If processing fails, a developer message explaining what went wrong.

        :return: The error_message of this PerDeviceStatusInBatch.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this PerDeviceStatusInBatch.

        If processing fails, a developer message explaining what went wrong.

        :param error_message: The error_message of this PerDeviceStatusInBatch.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def status(self):
        """Gets the status of this PerDeviceStatusInBatch.

        The result status of the device after processing.

        :return: The status of this PerDeviceStatusInBatch.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PerDeviceStatusInBatch.

        The result status of the device after processing.

        :param status: The status of this PerDeviceStatusInBatch.
        :type status: str
        """
        allowed_values = ["SINGLE_DEVICE_STATUS_UNSPECIFIED", "SINGLE_DEVICE_STATUS_UNKNOWN_ERROR", "SINGLE_DEVICE_STATUS_OTHER_ERROR", "SINGLE_DEVICE_STATUS_SUCCESS", "SINGLE_DEVICE_STATUS_PERMISSION_DENIED", "SINGLE_DEVICE_STATUS_INVALID_DEVICE_IDENTIFIER", "SINGLE_DEVICE_STATUS_INVALID_SECTION_TYPE", "SINGLE_DEVICE_STATUS_SECTION_NOT_YOURS", "SINGLE_DEVICE_STATUS_INVALID_TOKEN", "SINGLE_DEVICE_STATUS_REVOKED_TOKEN", "SINGLE_DEVICE_STATUS_DEVICE_LIMIT_EXCEEDED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
