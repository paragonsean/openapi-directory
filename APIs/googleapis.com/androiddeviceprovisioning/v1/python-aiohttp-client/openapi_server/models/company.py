# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_workspace_account import GoogleWorkspaceAccount
from openapi_server import util


class Company(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_emails: List[str]=None, company_id: str=None, company_name: str=None, google_workspace_account: GoogleWorkspaceAccount=None, language_code: str=None, name: str=None, owner_emails: List[str]=None, skip_welcome_email: bool=None, terms_status: str=None):
        """Company - a model defined in OpenAPI

        :param admin_emails: The admin_emails of this Company.
        :param company_id: The company_id of this Company.
        :param company_name: The company_name of this Company.
        :param google_workspace_account: The google_workspace_account of this Company.
        :param language_code: The language_code of this Company.
        :param name: The name of this Company.
        :param owner_emails: The owner_emails of this Company.
        :param skip_welcome_email: The skip_welcome_email of this Company.
        :param terms_status: The terms_status of this Company.
        """
        self.openapi_types = {
            'admin_emails': List[str],
            'company_id': str,
            'company_name': str,
            'google_workspace_account': GoogleWorkspaceAccount,
            'language_code': str,
            'name': str,
            'owner_emails': List[str],
            'skip_welcome_email': bool,
            'terms_status': str
        }

        self.attribute_map = {
            'admin_emails': 'adminEmails',
            'company_id': 'companyId',
            'company_name': 'companyName',
            'google_workspace_account': 'googleWorkspaceAccount',
            'language_code': 'languageCode',
            'name': 'name',
            'owner_emails': 'ownerEmails',
            'skip_welcome_email': 'skipWelcomeEmail',
            'terms_status': 'termsStatus'
        }

        self._admin_emails = admin_emails
        self._company_id = company_id
        self._company_name = company_name
        self._google_workspace_account = google_workspace_account
        self._language_code = language_code
        self._name = name
        self._owner_emails = owner_emails
        self._skip_welcome_email = skip_welcome_email
        self._terms_status = terms_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Company':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Company of this Company.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_emails(self):
        """Gets the admin_emails of this Company.

        Optional. Email address of customer's users in the admin role. Each email address must be associated with a Google Account.

        :return: The admin_emails of this Company.
        :rtype: List[str]
        """
        return self._admin_emails

    @admin_emails.setter
    def admin_emails(self, admin_emails):
        """Sets the admin_emails of this Company.

        Optional. Email address of customer's users in the admin role. Each email address must be associated with a Google Account.

        :param admin_emails: The admin_emails of this Company.
        :type admin_emails: List[str]
        """

        self._admin_emails = admin_emails

    @property
    def company_id(self):
        """Gets the company_id of this Company.

        Output only. The ID of the company. Assigned by the server.

        :return: The company_id of this Company.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Company.

        Output only. The ID of the company. Assigned by the server.

        :param company_id: The company_id of this Company.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def company_name(self):
        """Gets the company_name of this Company.

        Required. The name of the company. For example _XYZ Corp_. Displayed to the company's employees in the zero-touch enrollment portal.

        :return: The company_name of this Company.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Company.

        Required. The name of the company. For example _XYZ Corp_. Displayed to the company's employees in the zero-touch enrollment portal.

        :param company_name: The company_name of this Company.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def google_workspace_account(self):
        """Gets the google_workspace_account of this Company.


        :return: The google_workspace_account of this Company.
        :rtype: GoogleWorkspaceAccount
        """
        return self._google_workspace_account

    @google_workspace_account.setter
    def google_workspace_account(self, google_workspace_account):
        """Sets the google_workspace_account of this Company.


        :param google_workspace_account: The google_workspace_account of this Company.
        :type google_workspace_account: GoogleWorkspaceAccount
        """

        self._google_workspace_account = google_workspace_account

    @property
    def language_code(self):
        """Gets the language_code of this Company.

        Input only. The preferred locale of the customer represented as a BCP47 language code. This field is validated on input and requests containing unsupported language codes will be rejected. Supported language codes: Arabic (ar) Chinese (Hong Kong) (zh-HK) Chinese (Simplified) (zh-CN) Chinese (Traditional) (zh-TW) Czech (cs) Danish (da) Dutch (nl) English (UK) (en-GB) English (US) (en-US) Filipino (fil) Finnish (fi) French (fr) German (de) Hebrew (iw) Hindi (hi) Hungarian (hu) Indonesian (id) Italian (it) Japanese (ja) Korean (ko) Norwegian (Bokmal) (no) Polish (pl) Portuguese (Brazil) (pt-BR) Portuguese (Portugal) (pt-PT) Russian (ru) Spanish (es) Spanish (Latin America) (es-419) Swedish (sv) Thai (th) Turkish (tr) Ukrainian (uk) Vietnamese (vi)

        :return: The language_code of this Company.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this Company.

        Input only. The preferred locale of the customer represented as a BCP47 language code. This field is validated on input and requests containing unsupported language codes will be rejected. Supported language codes: Arabic (ar) Chinese (Hong Kong) (zh-HK) Chinese (Simplified) (zh-CN) Chinese (Traditional) (zh-TW) Czech (cs) Danish (da) Dutch (nl) English (UK) (en-GB) English (US) (en-US) Filipino (fil) Finnish (fi) French (fr) German (de) Hebrew (iw) Hindi (hi) Hungarian (hu) Indonesian (id) Italian (it) Japanese (ja) Korean (ko) Norwegian (Bokmal) (no) Polish (pl) Portuguese (Brazil) (pt-BR) Portuguese (Portugal) (pt-PT) Russian (ru) Spanish (es) Spanish (Latin America) (es-419) Swedish (sv) Thai (th) Turkish (tr) Ukrainian (uk) Vietnamese (vi)

        :param language_code: The language_code of this Company.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def name(self):
        """Gets the name of this Company.

        Output only. The API resource name of the company. The resource name is one of the following formats: * `partners/[PARTNER_ID]/customers/[CUSTOMER_ID]` * `partners/[PARTNER_ID]/vendors/[VENDOR_ID]` * `partners/[PARTNER_ID]/vendors/[VENDOR_ID]/customers/[CUSTOMER_ID]` Assigned by the server.

        :return: The name of this Company.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Company.

        Output only. The API resource name of the company. The resource name is one of the following formats: * `partners/[PARTNER_ID]/customers/[CUSTOMER_ID]` * `partners/[PARTNER_ID]/vendors/[VENDOR_ID]` * `partners/[PARTNER_ID]/vendors/[VENDOR_ID]/customers/[CUSTOMER_ID]` Assigned by the server.

        :param name: The name of this Company.
        :type name: str
        """

        self._name = name

    @property
    def owner_emails(self):
        """Gets the owner_emails of this Company.

        Required. Input only. Email address of customer's users in the owner role. At least one `owner_email` is required. Owners share the same access as admins but can also add, delete, and edit your organization's portal users.

        :return: The owner_emails of this Company.
        :rtype: List[str]
        """
        return self._owner_emails

    @owner_emails.setter
    def owner_emails(self, owner_emails):
        """Sets the owner_emails of this Company.

        Required. Input only. Email address of customer's users in the owner role. At least one `owner_email` is required. Owners share the same access as admins but can also add, delete, and edit your organization's portal users.

        :param owner_emails: The owner_emails of this Company.
        :type owner_emails: List[str]
        """

        self._owner_emails = owner_emails

    @property
    def skip_welcome_email(self):
        """Gets the skip_welcome_email of this Company.

        Input only. If set to true, welcome email will not be sent to the customer. It is recommended to skip the welcome email if devices will be claimed with additional DEVICE_PROTECTION service, as the customer will receive separate emails at device claim time. This field is ignored if this is not a Zero-touch customer.

        :return: The skip_welcome_email of this Company.
        :rtype: bool
        """
        return self._skip_welcome_email

    @skip_welcome_email.setter
    def skip_welcome_email(self, skip_welcome_email):
        """Sets the skip_welcome_email of this Company.

        Input only. If set to true, welcome email will not be sent to the customer. It is recommended to skip the welcome email if devices will be claimed with additional DEVICE_PROTECTION service, as the customer will receive separate emails at device claim time. This field is ignored if this is not a Zero-touch customer.

        :param skip_welcome_email: The skip_welcome_email of this Company.
        :type skip_welcome_email: bool
        """

        self._skip_welcome_email = skip_welcome_email

    @property
    def terms_status(self):
        """Gets the terms_status of this Company.

        Output only. Whether any user from the company has accepted the latest Terms of Service (ToS). See TermsStatus.

        :return: The terms_status of this Company.
        :rtype: str
        """
        return self._terms_status

    @terms_status.setter
    def terms_status(self, terms_status):
        """Sets the terms_status of this Company.

        Output only. Whether any user from the company has accepted the latest Terms of Service (ToS). See TermsStatus.

        :param terms_status: The terms_status of this Company.
        :type terms_status: str
        """
        allowed_values = ["TERMS_STATUS_UNSPECIFIED", "TERMS_STATUS_NOT_ACCEPTED", "TERMS_STATUS_ACCEPTED", "TERMS_STATUS_STALE"]  # noqa: E501
        if terms_status not in allowed_values:
            raise ValueError(
                "Invalid value for `terms_status` ({0}), must be one of {1}"
                .format(terms_status, allowed_values)
            )

        self._terms_status = terms_status
