# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_claim import DeviceClaim
from openapi_server.models.device_identifier import DeviceIdentifier
from openapi_server.models.device_metadata import DeviceMetadata
from openapi_server import util


class Device(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, claims: List[DeviceClaim]=None, configuration: str=None, device_id: str=None, device_identifier: DeviceIdentifier=None, device_metadata: DeviceMetadata=None, name: str=None):
        """Device - a model defined in OpenAPI

        :param claims: The claims of this Device.
        :param configuration: The configuration of this Device.
        :param device_id: The device_id of this Device.
        :param device_identifier: The device_identifier of this Device.
        :param device_metadata: The device_metadata of this Device.
        :param name: The name of this Device.
        """
        self.openapi_types = {
            'claims': List[DeviceClaim],
            'configuration': str,
            'device_id': str,
            'device_identifier': DeviceIdentifier,
            'device_metadata': DeviceMetadata,
            'name': str
        }

        self.attribute_map = {
            'claims': 'claims',
            'configuration': 'configuration',
            'device_id': 'deviceId',
            'device_identifier': 'deviceIdentifier',
            'device_metadata': 'deviceMetadata',
            'name': 'name'
        }

        self._claims = claims
        self._configuration = configuration
        self._device_id = device_id
        self._device_identifier = device_identifier
        self._device_metadata = device_metadata
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Device':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Device of this Device.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def claims(self):
        """Gets the claims of this Device.

        Output only. The provisioning claims for a device. Devices claimed for zero-touch enrollment have a claim with the type `SECTION_TYPE_ZERO_TOUCH`. Call `partners.devices.unclaim` or `partners.devices.unclaimAsync` to remove the device from zero-touch enrollment.

        :return: The claims of this Device.
        :rtype: List[DeviceClaim]
        """
        return self._claims

    @claims.setter
    def claims(self, claims):
        """Sets the claims of this Device.

        Output only. The provisioning claims for a device. Devices claimed for zero-touch enrollment have a claim with the type `SECTION_TYPE_ZERO_TOUCH`. Call `partners.devices.unclaim` or `partners.devices.unclaimAsync` to remove the device from zero-touch enrollment.

        :param claims: The claims of this Device.
        :type claims: List[DeviceClaim]
        """

        self._claims = claims

    @property
    def configuration(self):
        """Gets the configuration of this Device.

        Not available to resellers.

        :return: The configuration of this Device.
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this Device.

        Not available to resellers.

        :param configuration: The configuration of this Device.
        :type configuration: str
        """

        self._configuration = configuration

    @property
    def device_id(self):
        """Gets the device_id of this Device.

        Output only. The ID of the device. Assigned by the server.

        :return: The device_id of this Device.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this Device.

        Output only. The ID of the device. Assigned by the server.

        :param device_id: The device_id of this Device.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def device_identifier(self):
        """Gets the device_identifier of this Device.


        :return: The device_identifier of this Device.
        :rtype: DeviceIdentifier
        """
        return self._device_identifier

    @device_identifier.setter
    def device_identifier(self, device_identifier):
        """Sets the device_identifier of this Device.


        :param device_identifier: The device_identifier of this Device.
        :type device_identifier: DeviceIdentifier
        """

        self._device_identifier = device_identifier

    @property
    def device_metadata(self):
        """Gets the device_metadata of this Device.


        :return: The device_metadata of this Device.
        :rtype: DeviceMetadata
        """
        return self._device_metadata

    @device_metadata.setter
    def device_metadata(self, device_metadata):
        """Sets the device_metadata of this Device.


        :param device_metadata: The device_metadata of this Device.
        :type device_metadata: DeviceMetadata
        """

        self._device_metadata = device_metadata

    @property
    def name(self):
        """Gets the name of this Device.

        Output only. The API resource name in the format `partners/[PARTNER_ID]/devices/[DEVICE_ID]`. Assigned by the server.

        :return: The name of this Device.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Device.

        Output only. The API resource name in the format `partners/[PARTNER_ID]/devices/[DEVICE_ID]`. Assigned by the server.

        :param name: The name of this Device.
        :type name: str
        """

        self._name = name
