# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vlan_attachment import VlanAttachment
from openapi_server import util


class NetworkConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bandwidth: str=None, cidr: str=None, id: str=None, location: str=None, service_cidr: str=None, type: str=None, user_note: str=None, vlan_attachments: List[VlanAttachment]=None):
        """NetworkConfig - a model defined in OpenAPI

        :param bandwidth: The bandwidth of this NetworkConfig.
        :param cidr: The cidr of this NetworkConfig.
        :param id: The id of this NetworkConfig.
        :param location: The location of this NetworkConfig.
        :param service_cidr: The service_cidr of this NetworkConfig.
        :param type: The type of this NetworkConfig.
        :param user_note: The user_note of this NetworkConfig.
        :param vlan_attachments: The vlan_attachments of this NetworkConfig.
        """
        self.openapi_types = {
            'bandwidth': str,
            'cidr': str,
            'id': str,
            'location': str,
            'service_cidr': str,
            'type': str,
            'user_note': str,
            'vlan_attachments': List[VlanAttachment]
        }

        self.attribute_map = {
            'bandwidth': 'bandwidth',
            'cidr': 'cidr',
            'id': 'id',
            'location': 'location',
            'service_cidr': 'serviceCidr',
            'type': 'type',
            'user_note': 'userNote',
            'vlan_attachments': 'vlanAttachments'
        }

        self._bandwidth = bandwidth
        self._cidr = cidr
        self._id = id
        self._location = location
        self._service_cidr = service_cidr
        self._type = type
        self._user_note = user_note
        self._vlan_attachments = vlan_attachments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkConfig of this NetworkConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bandwidth(self):
        """Gets the bandwidth of this NetworkConfig.

        Interconnect bandwidth. Set only when type is CLIENT.

        :return: The bandwidth of this NetworkConfig.
        :rtype: str
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth):
        """Sets the bandwidth of this NetworkConfig.

        Interconnect bandwidth. Set only when type is CLIENT.

        :param bandwidth: The bandwidth of this NetworkConfig.
        :type bandwidth: str
        """
        allowed_values = ["BANDWIDTH_UNSPECIFIED", "BW_1_GBPS", "BW_2_GBPS", "BW_5_GBPS", "BW_10_GBPS"]  # noqa: E501
        if bandwidth not in allowed_values:
            raise ValueError(
                "Invalid value for `bandwidth` ({0}), must be one of {1}"
                .format(bandwidth, allowed_values)
            )

        self._bandwidth = bandwidth

    @property
    def cidr(self):
        """Gets the cidr of this NetworkConfig.

        CIDR range of the network.

        :return: The cidr of this NetworkConfig.
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this NetworkConfig.

        CIDR range of the network.

        :param cidr: The cidr of this NetworkConfig.
        :type cidr: str
        """

        self._cidr = cidr

    @property
    def id(self):
        """Gets the id of this NetworkConfig.

        A transient unique identifier to identify a volume within an ProvisioningConfig request.

        :return: The id of this NetworkConfig.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NetworkConfig.

        A transient unique identifier to identify a volume within an ProvisioningConfig request.

        :param id: The id of this NetworkConfig.
        :type id: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this NetworkConfig.

        Location where to deploy the network.

        :return: The location of this NetworkConfig.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this NetworkConfig.

        Location where to deploy the network.

        :param location: The location of this NetworkConfig.
        :type location: str
        """

        self._location = location

    @property
    def service_cidr(self):
        """Gets the service_cidr of this NetworkConfig.

        Service CIDR, if any.

        :return: The service_cidr of this NetworkConfig.
        :rtype: str
        """
        return self._service_cidr

    @service_cidr.setter
    def service_cidr(self, service_cidr):
        """Sets the service_cidr of this NetworkConfig.

        Service CIDR, if any.

        :param service_cidr: The service_cidr of this NetworkConfig.
        :type service_cidr: str
        """
        allowed_values = ["SERVICE_CIDR_UNSPECIFIED", "DISABLED", "HIGH_26", "HIGH_27", "HIGH_28"]  # noqa: E501
        if service_cidr not in allowed_values:
            raise ValueError(
                "Invalid value for `service_cidr` ({0}), must be one of {1}"
                .format(service_cidr, allowed_values)
            )

        self._service_cidr = service_cidr

    @property
    def type(self):
        """Gets the type of this NetworkConfig.

        The type of this network.

        :return: The type of this NetworkConfig.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NetworkConfig.

        The type of this network.

        :param type: The type of this NetworkConfig.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "CLIENT", "PRIVATE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user_note(self):
        """Gets the user_note of this NetworkConfig.

        User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617).

        :return: The user_note of this NetworkConfig.
        :rtype: str
        """
        return self._user_note

    @user_note.setter
    def user_note(self, user_note):
        """Sets the user_note of this NetworkConfig.

        User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617).

        :param user_note: The user_note of this NetworkConfig.
        :type user_note: str
        """

        self._user_note = user_note

    @property
    def vlan_attachments(self):
        """Gets the vlan_attachments of this NetworkConfig.

        List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan).

        :return: The vlan_attachments of this NetworkConfig.
        :rtype: List[VlanAttachment]
        """
        return self._vlan_attachments

    @vlan_attachments.setter
    def vlan_attachments(self, vlan_attachments):
        """Sets the vlan_attachments of this NetworkConfig.

        List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan).

        :param vlan_attachments: The vlan_attachments of this NetworkConfig.
        :type vlan_attachments: List[VlanAttachment]
        """

        self._vlan_attachments = vlan_attachments
