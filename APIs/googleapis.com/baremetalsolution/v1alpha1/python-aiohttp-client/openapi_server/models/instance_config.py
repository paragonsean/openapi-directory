# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.network_address import NetworkAddress
from openapi_server import util


class InstanceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_network: NetworkAddress=None, hyperthreading: bool=None, id: str=None, instance_type: str=None, location: str=None, os_image: str=None, private_network: NetworkAddress=None, user_note: str=None):
        """InstanceConfig - a model defined in OpenAPI

        :param client_network: The client_network of this InstanceConfig.
        :param hyperthreading: The hyperthreading of this InstanceConfig.
        :param id: The id of this InstanceConfig.
        :param instance_type: The instance_type of this InstanceConfig.
        :param location: The location of this InstanceConfig.
        :param os_image: The os_image of this InstanceConfig.
        :param private_network: The private_network of this InstanceConfig.
        :param user_note: The user_note of this InstanceConfig.
        """
        self.openapi_types = {
            'client_network': NetworkAddress,
            'hyperthreading': bool,
            'id': str,
            'instance_type': str,
            'location': str,
            'os_image': str,
            'private_network': NetworkAddress,
            'user_note': str
        }

        self.attribute_map = {
            'client_network': 'clientNetwork',
            'hyperthreading': 'hyperthreading',
            'id': 'id',
            'instance_type': 'instanceType',
            'location': 'location',
            'os_image': 'osImage',
            'private_network': 'privateNetwork',
            'user_note': 'userNote'
        }

        self._client_network = client_network
        self._hyperthreading = hyperthreading
        self._id = id
        self._instance_type = instance_type
        self._location = location
        self._os_image = os_image
        self._private_network = private_network
        self._user_note = user_note

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceConfig of this InstanceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_network(self):
        """Gets the client_network of this InstanceConfig.


        :return: The client_network of this InstanceConfig.
        :rtype: NetworkAddress
        """
        return self._client_network

    @client_network.setter
    def client_network(self, client_network):
        """Sets the client_network of this InstanceConfig.


        :param client_network: The client_network of this InstanceConfig.
        :type client_network: NetworkAddress
        """

        self._client_network = client_network

    @property
    def hyperthreading(self):
        """Gets the hyperthreading of this InstanceConfig.

        Whether the instance should be provisioned with Hyperthreading enabled.

        :return: The hyperthreading of this InstanceConfig.
        :rtype: bool
        """
        return self._hyperthreading

    @hyperthreading.setter
    def hyperthreading(self, hyperthreading):
        """Sets the hyperthreading of this InstanceConfig.

        Whether the instance should be provisioned with Hyperthreading enabled.

        :param hyperthreading: The hyperthreading of this InstanceConfig.
        :type hyperthreading: bool
        """

        self._hyperthreading = hyperthreading

    @property
    def id(self):
        """Gets the id of this InstanceConfig.

        A transient unique identifier to idenfity an instance within an ProvisioningConfig request.

        :return: The id of this InstanceConfig.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InstanceConfig.

        A transient unique identifier to idenfity an instance within an ProvisioningConfig request.

        :param id: The id of this InstanceConfig.
        :type id: str
        """

        self._id = id

    @property
    def instance_type(self):
        """Gets the instance_type of this InstanceConfig.

        Instance type.

        :return: The instance_type of this InstanceConfig.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this InstanceConfig.

        Instance type.

        :param instance_type: The instance_type of this InstanceConfig.
        :type instance_type: str
        """

        self._instance_type = instance_type

    @property
    def location(self):
        """Gets the location of this InstanceConfig.

        Location where to deploy the instance.

        :return: The location of this InstanceConfig.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InstanceConfig.

        Location where to deploy the instance.

        :param location: The location of this InstanceConfig.
        :type location: str
        """

        self._location = location

    @property
    def os_image(self):
        """Gets the os_image of this InstanceConfig.

        OS image to initialize the instance.

        :return: The os_image of this InstanceConfig.
        :rtype: str
        """
        return self._os_image

    @os_image.setter
    def os_image(self, os_image):
        """Sets the os_image of this InstanceConfig.

        OS image to initialize the instance.

        :param os_image: The os_image of this InstanceConfig.
        :type os_image: str
        """

        self._os_image = os_image

    @property
    def private_network(self):
        """Gets the private_network of this InstanceConfig.


        :return: The private_network of this InstanceConfig.
        :rtype: NetworkAddress
        """
        return self._private_network

    @private_network.setter
    def private_network(self, private_network):
        """Sets the private_network of this InstanceConfig.


        :param private_network: The private_network of this InstanceConfig.
        :type private_network: NetworkAddress
        """

        self._private_network = private_network

    @property
    def user_note(self):
        """Gets the user_note of this InstanceConfig.

        User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617).

        :return: The user_note of this InstanceConfig.
        :rtype: str
        """
        return self._user_note

    @user_note.setter
    def user_note(self, user_note):
        """Sets the user_note of this InstanceConfig.

        User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617).

        :param user_note: The user_note of this InstanceConfig.
        :type user_note: str
        """

        self._user_note = user_note
