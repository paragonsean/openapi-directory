# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InstanceQuota(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_machine_count: int=None, instance_type: str=None, location: str=None):
        """InstanceQuota - a model defined in OpenAPI

        :param available_machine_count: The available_machine_count of this InstanceQuota.
        :param instance_type: The instance_type of this InstanceQuota.
        :param location: The location of this InstanceQuota.
        """
        self.openapi_types = {
            'available_machine_count': int,
            'instance_type': str,
            'location': str
        }

        self.attribute_map = {
            'available_machine_count': 'availableMachineCount',
            'instance_type': 'instanceType',
            'location': 'location'
        }

        self._available_machine_count = available_machine_count
        self._instance_type = instance_type
        self._location = location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceQuota':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceQuota of this InstanceQuota.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_machine_count(self):
        """Gets the available_machine_count of this InstanceQuota.

        Number of machines than can be created for the given location and instance_type.

        :return: The available_machine_count of this InstanceQuota.
        :rtype: int
        """
        return self._available_machine_count

    @available_machine_count.setter
    def available_machine_count(self, available_machine_count):
        """Sets the available_machine_count of this InstanceQuota.

        Number of machines than can be created for the given location and instance_type.

        :param available_machine_count: The available_machine_count of this InstanceQuota.
        :type available_machine_count: int
        """

        self._available_machine_count = available_machine_count

    @property
    def instance_type(self):
        """Gets the instance_type of this InstanceQuota.

        Instance type.

        :return: The instance_type of this InstanceQuota.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this InstanceQuota.

        Instance type.

        :param instance_type: The instance_type of this InstanceQuota.
        :type instance_type: str
        """

        self._instance_type = instance_type

    @property
    def location(self):
        """Gets the location of this InstanceQuota.

        Location where the quota applies.

        :return: The location of this InstanceQuota.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InstanceQuota.

        Location where the quota applies.

        :param location: The location of this InstanceQuota.
        :type location: str
        """

        self._location = location
