# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_config import InstanceConfig
from openapi_server.models.network_config import NetworkConfig
from openapi_server.models.volume_config import VolumeConfig
from openapi_server import util


class ProvisioningConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instances: List[InstanceConfig]=None, networks: List[NetworkConfig]=None, ticket_id: str=None, volumes: List[VolumeConfig]=None):
        """ProvisioningConfig - a model defined in OpenAPI

        :param instances: The instances of this ProvisioningConfig.
        :param networks: The networks of this ProvisioningConfig.
        :param ticket_id: The ticket_id of this ProvisioningConfig.
        :param volumes: The volumes of this ProvisioningConfig.
        """
        self.openapi_types = {
            'instances': List[InstanceConfig],
            'networks': List[NetworkConfig],
            'ticket_id': str,
            'volumes': List[VolumeConfig]
        }

        self.attribute_map = {
            'instances': 'instances',
            'networks': 'networks',
            'ticket_id': 'ticketId',
            'volumes': 'volumes'
        }

        self._instances = instances
        self._networks = networks
        self._ticket_id = ticket_id
        self._volumes = volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProvisioningConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProvisioningConfig of this ProvisioningConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instances(self):
        """Gets the instances of this ProvisioningConfig.

        Instances to be created.

        :return: The instances of this ProvisioningConfig.
        :rtype: List[InstanceConfig]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this ProvisioningConfig.

        Instances to be created.

        :param instances: The instances of this ProvisioningConfig.
        :type instances: List[InstanceConfig]
        """

        self._instances = instances

    @property
    def networks(self):
        """Gets the networks of this ProvisioningConfig.

        Networks to be created.

        :return: The networks of this ProvisioningConfig.
        :rtype: List[NetworkConfig]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this ProvisioningConfig.

        Networks to be created.

        :param networks: The networks of this ProvisioningConfig.
        :type networks: List[NetworkConfig]
        """

        self._networks = networks

    @property
    def ticket_id(self):
        """Gets the ticket_id of this ProvisioningConfig.

        A reference to track the request.

        :return: The ticket_id of this ProvisioningConfig.
        :rtype: str
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """Sets the ticket_id of this ProvisioningConfig.

        A reference to track the request.

        :param ticket_id: The ticket_id of this ProvisioningConfig.
        :type ticket_id: str
        """

        self._ticket_id = ticket_id

    @property
    def volumes(self):
        """Gets the volumes of this ProvisioningConfig.

        Volumes to be created.

        :return: The volumes of this ProvisioningConfig.
        :rtype: List[VolumeConfig]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ProvisioningConfig.

        Volumes to be created.

        :param volumes: The volumes of this ProvisioningConfig.
        :type volumes: List[VolumeConfig]
        """

        self._volumes = volumes
