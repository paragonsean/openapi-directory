# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lun_range import LunRange
from openapi_server.models.nfs_export import NfsExport
from openapi_server import util


class VolumeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, location: str=None, lun_ranges: List[LunRange]=None, machine_ids: List[str]=None, nfs_exports: List[NfsExport]=None, protocol: str=None, size_gb: int=None, snapshots_enabled: bool=None, type: str=None, user_note: str=None):
        """VolumeConfig - a model defined in OpenAPI

        :param id: The id of this VolumeConfig.
        :param location: The location of this VolumeConfig.
        :param lun_ranges: The lun_ranges of this VolumeConfig.
        :param machine_ids: The machine_ids of this VolumeConfig.
        :param nfs_exports: The nfs_exports of this VolumeConfig.
        :param protocol: The protocol of this VolumeConfig.
        :param size_gb: The size_gb of this VolumeConfig.
        :param snapshots_enabled: The snapshots_enabled of this VolumeConfig.
        :param type: The type of this VolumeConfig.
        :param user_note: The user_note of this VolumeConfig.
        """
        self.openapi_types = {
            'id': str,
            'location': str,
            'lun_ranges': List[LunRange],
            'machine_ids': List[str],
            'nfs_exports': List[NfsExport],
            'protocol': str,
            'size_gb': int,
            'snapshots_enabled': bool,
            'type': str,
            'user_note': str
        }

        self.attribute_map = {
            'id': 'id',
            'location': 'location',
            'lun_ranges': 'lunRanges',
            'machine_ids': 'machineIds',
            'nfs_exports': 'nfsExports',
            'protocol': 'protocol',
            'size_gb': 'sizeGb',
            'snapshots_enabled': 'snapshotsEnabled',
            'type': 'type',
            'user_note': 'userNote'
        }

        self._id = id
        self._location = location
        self._lun_ranges = lun_ranges
        self._machine_ids = machine_ids
        self._nfs_exports = nfs_exports
        self._protocol = protocol
        self._size_gb = size_gb
        self._snapshots_enabled = snapshots_enabled
        self._type = type
        self._user_note = user_note

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VolumeConfig of this VolumeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this VolumeConfig.

        A transient unique identifier to identify a volume within an ProvisioningConfig request.

        :return: The id of this VolumeConfig.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VolumeConfig.

        A transient unique identifier to identify a volume within an ProvisioningConfig request.

        :param id: The id of this VolumeConfig.
        :type id: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this VolumeConfig.

        Location where to deploy the volume.

        :return: The location of this VolumeConfig.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this VolumeConfig.

        Location where to deploy the volume.

        :param location: The location of this VolumeConfig.
        :type location: str
        """

        self._location = location

    @property
    def lun_ranges(self):
        """Gets the lun_ranges of this VolumeConfig.

        LUN ranges to be configured. Set only when protocol is PROTOCOL_FC.

        :return: The lun_ranges of this VolumeConfig.
        :rtype: List[LunRange]
        """
        return self._lun_ranges

    @lun_ranges.setter
    def lun_ranges(self, lun_ranges):
        """Sets the lun_ranges of this VolumeConfig.

        LUN ranges to be configured. Set only when protocol is PROTOCOL_FC.

        :param lun_ranges: The lun_ranges of this VolumeConfig.
        :type lun_ranges: List[LunRange]
        """

        self._lun_ranges = lun_ranges

    @property
    def machine_ids(self):
        """Gets the machine_ids of this VolumeConfig.

        Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC.

        :return: The machine_ids of this VolumeConfig.
        :rtype: List[str]
        """
        return self._machine_ids

    @machine_ids.setter
    def machine_ids(self, machine_ids):
        """Sets the machine_ids of this VolumeConfig.

        Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC.

        :param machine_ids: The machine_ids of this VolumeConfig.
        :type machine_ids: List[str]
        """

        self._machine_ids = machine_ids

    @property
    def nfs_exports(self):
        """Gets the nfs_exports of this VolumeConfig.

        NFS exports. Set only when protocol is PROTOCOL_NFS.

        :return: The nfs_exports of this VolumeConfig.
        :rtype: List[NfsExport]
        """
        return self._nfs_exports

    @nfs_exports.setter
    def nfs_exports(self, nfs_exports):
        """Sets the nfs_exports of this VolumeConfig.

        NFS exports. Set only when protocol is PROTOCOL_NFS.

        :param nfs_exports: The nfs_exports of this VolumeConfig.
        :type nfs_exports: List[NfsExport]
        """

        self._nfs_exports = nfs_exports

    @property
    def protocol(self):
        """Gets the protocol of this VolumeConfig.

        Volume protocol.

        :return: The protocol of this VolumeConfig.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this VolumeConfig.

        Volume protocol.

        :param protocol: The protocol of this VolumeConfig.
        :type protocol: str
        """
        allowed_values = ["PROTOCOL_UNSPECIFIED", "PROTOCOL_FC", "PROTOCOL_NFS"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def size_gb(self):
        """Gets the size_gb of this VolumeConfig.

        The requested size of this volume, in GB. This will be updated in a later iteration with a generic size field.

        :return: The size_gb of this VolumeConfig.
        :rtype: int
        """
        return self._size_gb

    @size_gb.setter
    def size_gb(self, size_gb):
        """Sets the size_gb of this VolumeConfig.

        The requested size of this volume, in GB. This will be updated in a later iteration with a generic size field.

        :param size_gb: The size_gb of this VolumeConfig.
        :type size_gb: int
        """

        self._size_gb = size_gb

    @property
    def snapshots_enabled(self):
        """Gets the snapshots_enabled of this VolumeConfig.

        Whether snapshots should be enabled.

        :return: The snapshots_enabled of this VolumeConfig.
        :rtype: bool
        """
        return self._snapshots_enabled

    @snapshots_enabled.setter
    def snapshots_enabled(self, snapshots_enabled):
        """Sets the snapshots_enabled of this VolumeConfig.

        Whether snapshots should be enabled.

        :param snapshots_enabled: The snapshots_enabled of this VolumeConfig.
        :type snapshots_enabled: bool
        """

        self._snapshots_enabled = snapshots_enabled

    @property
    def type(self):
        """Gets the type of this VolumeConfig.

        The type of this Volume.

        :return: The type of this VolumeConfig.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VolumeConfig.

        The type of this Volume.

        :param type: The type of this VolumeConfig.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "FLASH", "DISK"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user_note(self):
        """Gets the user_note of this VolumeConfig.

        User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617).

        :return: The user_note of this VolumeConfig.
        :rtype: str
        """
        return self._user_note

    @user_note.setter
    def user_note(self, user_note):
        """Sets the user_note of this VolumeConfig.

        User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617).

        :param user_note: The user_note of this VolumeConfig.
        :type user_note: str
        """

        self._user_note = user_note
