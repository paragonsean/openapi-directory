/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVolumeConfig.h
 *
 * Configuration parameters for a new volume.
 */

#ifndef OAIVolumeConfig_H
#define OAIVolumeConfig_H

#include <QJsonObject>

#include "OAILunRange.h"
#include "OAINfsExport.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILunRange;
class OAINfsExport;

class OAIVolumeConfig : public OAIObject {
public:
    OAIVolumeConfig();
    OAIVolumeConfig(QString json);
    ~OAIVolumeConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QList<OAILunRange> getLunRanges() const;
    void setLunRanges(const QList<OAILunRange> &lun_ranges);
    bool is_lun_ranges_Set() const;
    bool is_lun_ranges_Valid() const;

    QList<QString> getMachineIds() const;
    void setMachineIds(const QList<QString> &machine_ids);
    bool is_machine_ids_Set() const;
    bool is_machine_ids_Valid() const;

    QList<OAINfsExport> getNfsExports() const;
    void setNfsExports(const QList<OAINfsExport> &nfs_exports);
    bool is_nfs_exports_Set() const;
    bool is_nfs_exports_Valid() const;

    QString getProtocol() const;
    void setProtocol(const QString &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    qint32 getSizeGb() const;
    void setSizeGb(const qint32 &size_gb);
    bool is_size_gb_Set() const;
    bool is_size_gb_Valid() const;

    bool isSnapshotsEnabled() const;
    void setSnapshotsEnabled(const bool &snapshots_enabled);
    bool is_snapshots_enabled_Set() const;
    bool is_snapshots_enabled_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUserNote() const;
    void setUserNote(const QString &user_note);
    bool is_user_note_Set() const;
    bool is_user_note_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QList<OAILunRange> m_lun_ranges;
    bool m_lun_ranges_isSet;
    bool m_lun_ranges_isValid;

    QList<QString> m_machine_ids;
    bool m_machine_ids_isSet;
    bool m_machine_ids_isValid;

    QList<OAINfsExport> m_nfs_exports;
    bool m_nfs_exports_isSet;
    bool m_nfs_exports_isValid;

    QString m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    qint32 m_size_gb;
    bool m_size_gb_isSet;
    bool m_size_gb_isValid;

    bool m_snapshots_enabled;
    bool m_snapshots_enabled_isSet;
    bool m_snapshots_enabled_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_user_note;
    bool m_user_note_isSet;
    bool m_user_note_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVolumeConfig)

#endif // OAIVolumeConfig_H
