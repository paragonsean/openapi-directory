/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvisioningConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvisioningConfig::OAIProvisioningConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvisioningConfig::OAIProvisioningConfig() {
    this->initializeModel();
}

OAIProvisioningConfig::~OAIProvisioningConfig() {}

void OAIProvisioningConfig::initializeModel() {

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_networks_isSet = false;
    m_networks_isValid = false;

    m_ticket_id_isSet = false;
    m_ticket_id_isValid = false;

    m_volumes_isSet = false;
    m_volumes_isValid = false;
}

void OAIProvisioningConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvisioningConfig::fromJsonObject(QJsonObject json) {

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("instances")]);
    m_instances_isSet = !json[QString("instances")].isNull() && m_instances_isValid;

    m_networks_isValid = ::OpenAPI::fromJsonValue(m_networks, json[QString("networks")]);
    m_networks_isSet = !json[QString("networks")].isNull() && m_networks_isValid;

    m_ticket_id_isValid = ::OpenAPI::fromJsonValue(m_ticket_id, json[QString("ticketId")]);
    m_ticket_id_isSet = !json[QString("ticketId")].isNull() && m_ticket_id_isValid;

    m_volumes_isValid = ::OpenAPI::fromJsonValue(m_volumes, json[QString("volumes")]);
    m_volumes_isSet = !json[QString("volumes")].isNull() && m_volumes_isValid;
}

QString OAIProvisioningConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvisioningConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_instances.size() > 0) {
        obj.insert(QString("instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_networks.size() > 0) {
        obj.insert(QString("networks"), ::OpenAPI::toJsonValue(m_networks));
    }
    if (m_ticket_id_isSet) {
        obj.insert(QString("ticketId"), ::OpenAPI::toJsonValue(m_ticket_id));
    }
    if (m_volumes.size() > 0) {
        obj.insert(QString("volumes"), ::OpenAPI::toJsonValue(m_volumes));
    }
    return obj;
}

QList<OAIInstanceConfig> OAIProvisioningConfig::getInstances() const {
    return m_instances;
}
void OAIProvisioningConfig::setInstances(const QList<OAIInstanceConfig> &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAIProvisioningConfig::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAIProvisioningConfig::is_instances_Valid() const{
    return m_instances_isValid;
}

QList<OAINetworkConfig> OAIProvisioningConfig::getNetworks() const {
    return m_networks;
}
void OAIProvisioningConfig::setNetworks(const QList<OAINetworkConfig> &networks) {
    m_networks = networks;
    m_networks_isSet = true;
}

bool OAIProvisioningConfig::is_networks_Set() const{
    return m_networks_isSet;
}

bool OAIProvisioningConfig::is_networks_Valid() const{
    return m_networks_isValid;
}

QString OAIProvisioningConfig::getTicketId() const {
    return m_ticket_id;
}
void OAIProvisioningConfig::setTicketId(const QString &ticket_id) {
    m_ticket_id = ticket_id;
    m_ticket_id_isSet = true;
}

bool OAIProvisioningConfig::is_ticket_id_Set() const{
    return m_ticket_id_isSet;
}

bool OAIProvisioningConfig::is_ticket_id_Valid() const{
    return m_ticket_id_isValid;
}

QList<OAIVolumeConfig> OAIProvisioningConfig::getVolumes() const {
    return m_volumes;
}
void OAIProvisioningConfig::setVolumes(const QList<OAIVolumeConfig> &volumes) {
    m_volumes = volumes;
    m_volumes_isSet = true;
}

bool OAIProvisioningConfig::is_volumes_Set() const{
    return m_volumes_isSet;
}

bool OAIProvisioningConfig::is_volumes_Valid() const{
    return m_volumes_isValid;
}

bool OAIProvisioningConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_networks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticket_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvisioningConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
