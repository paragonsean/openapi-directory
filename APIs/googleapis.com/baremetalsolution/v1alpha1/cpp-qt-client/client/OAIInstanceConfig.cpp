/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceConfig::OAIInstanceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceConfig::OAIInstanceConfig() {
    this->initializeModel();
}

OAIInstanceConfig::~OAIInstanceConfig() {}

void OAIInstanceConfig::initializeModel() {

    m_client_network_isSet = false;
    m_client_network_isValid = false;

    m_hyperthreading_isSet = false;
    m_hyperthreading_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_os_image_isSet = false;
    m_os_image_isValid = false;

    m_private_network_isSet = false;
    m_private_network_isValid = false;

    m_user_note_isSet = false;
    m_user_note_isValid = false;
}

void OAIInstanceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceConfig::fromJsonObject(QJsonObject json) {

    m_client_network_isValid = ::OpenAPI::fromJsonValue(m_client_network, json[QString("clientNetwork")]);
    m_client_network_isSet = !json[QString("clientNetwork")].isNull() && m_client_network_isValid;

    m_hyperthreading_isValid = ::OpenAPI::fromJsonValue(m_hyperthreading, json[QString("hyperthreading")]);
    m_hyperthreading_isSet = !json[QString("hyperthreading")].isNull() && m_hyperthreading_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_os_image_isValid = ::OpenAPI::fromJsonValue(m_os_image, json[QString("osImage")]);
    m_os_image_isSet = !json[QString("osImage")].isNull() && m_os_image_isValid;

    m_private_network_isValid = ::OpenAPI::fromJsonValue(m_private_network, json[QString("privateNetwork")]);
    m_private_network_isSet = !json[QString("privateNetwork")].isNull() && m_private_network_isValid;

    m_user_note_isValid = ::OpenAPI::fromJsonValue(m_user_note, json[QString("userNote")]);
    m_user_note_isSet = !json[QString("userNote")].isNull() && m_user_note_isValid;
}

QString OAIInstanceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_client_network.isSet()) {
        obj.insert(QString("clientNetwork"), ::OpenAPI::toJsonValue(m_client_network));
    }
    if (m_hyperthreading_isSet) {
        obj.insert(QString("hyperthreading"), ::OpenAPI::toJsonValue(m_hyperthreading));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_os_image_isSet) {
        obj.insert(QString("osImage"), ::OpenAPI::toJsonValue(m_os_image));
    }
    if (m_private_network.isSet()) {
        obj.insert(QString("privateNetwork"), ::OpenAPI::toJsonValue(m_private_network));
    }
    if (m_user_note_isSet) {
        obj.insert(QString("userNote"), ::OpenAPI::toJsonValue(m_user_note));
    }
    return obj;
}

OAINetworkAddress OAIInstanceConfig::getClientNetwork() const {
    return m_client_network;
}
void OAIInstanceConfig::setClientNetwork(const OAINetworkAddress &client_network) {
    m_client_network = client_network;
    m_client_network_isSet = true;
}

bool OAIInstanceConfig::is_client_network_Set() const{
    return m_client_network_isSet;
}

bool OAIInstanceConfig::is_client_network_Valid() const{
    return m_client_network_isValid;
}

bool OAIInstanceConfig::isHyperthreading() const {
    return m_hyperthreading;
}
void OAIInstanceConfig::setHyperthreading(const bool &hyperthreading) {
    m_hyperthreading = hyperthreading;
    m_hyperthreading_isSet = true;
}

bool OAIInstanceConfig::is_hyperthreading_Set() const{
    return m_hyperthreading_isSet;
}

bool OAIInstanceConfig::is_hyperthreading_Valid() const{
    return m_hyperthreading_isValid;
}

QString OAIInstanceConfig::getId() const {
    return m_id;
}
void OAIInstanceConfig::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInstanceConfig::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInstanceConfig::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIInstanceConfig::getInstanceType() const {
    return m_instance_type;
}
void OAIInstanceConfig::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIInstanceConfig::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIInstanceConfig::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAIInstanceConfig::getLocation() const {
    return m_location;
}
void OAIInstanceConfig::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIInstanceConfig::is_location_Set() const{
    return m_location_isSet;
}

bool OAIInstanceConfig::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIInstanceConfig::getOsImage() const {
    return m_os_image;
}
void OAIInstanceConfig::setOsImage(const QString &os_image) {
    m_os_image = os_image;
    m_os_image_isSet = true;
}

bool OAIInstanceConfig::is_os_image_Set() const{
    return m_os_image_isSet;
}

bool OAIInstanceConfig::is_os_image_Valid() const{
    return m_os_image_isValid;
}

OAINetworkAddress OAIInstanceConfig::getPrivateNetwork() const {
    return m_private_network;
}
void OAIInstanceConfig::setPrivateNetwork(const OAINetworkAddress &private_network) {
    m_private_network = private_network;
    m_private_network_isSet = true;
}

bool OAIInstanceConfig::is_private_network_Set() const{
    return m_private_network_isSet;
}

bool OAIInstanceConfig::is_private_network_Valid() const{
    return m_private_network_isValid;
}

QString OAIInstanceConfig::getUserNote() const {
    return m_user_note;
}
void OAIInstanceConfig::setUserNote(const QString &user_note) {
    m_user_note = user_note;
    m_user_note_isSet = true;
}

bool OAIInstanceConfig::is_user_note_Set() const{
    return m_user_note_isSet;
}

bool OAIInstanceConfig::is_user_note_Valid() const{
    return m_user_note_isValid;
}

bool OAIInstanceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hyperthreading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_note_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
