/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InstanceConfig from './InstanceConfig';
import NetworkConfig from './NetworkConfig';
import VolumeConfig from './VolumeConfig';

/**
 * The ProvisioningConfig model module.
 * @module model/ProvisioningConfig
 * @version v1alpha1
 */
class ProvisioningConfig {
    /**
     * Constructs a new <code>ProvisioningConfig</code>.
     * An provisioning configuration.
     * @alias module:model/ProvisioningConfig
     */
    constructor() { 
        
        ProvisioningConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProvisioningConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProvisioningConfig} obj Optional instance to populate.
     * @return {module:model/ProvisioningConfig} The populated <code>ProvisioningConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProvisioningConfig();

            if (data.hasOwnProperty('instances')) {
                obj['instances'] = ApiClient.convertToType(data['instances'], [InstanceConfig]);
            }
            if (data.hasOwnProperty('networks')) {
                obj['networks'] = ApiClient.convertToType(data['networks'], [NetworkConfig]);
            }
            if (data.hasOwnProperty('ticketId')) {
                obj['ticketId'] = ApiClient.convertToType(data['ticketId'], 'String');
            }
            if (data.hasOwnProperty('volumes')) {
                obj['volumes'] = ApiClient.convertToType(data['volumes'], [VolumeConfig]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProvisioningConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProvisioningConfig</code>.
     */
    static validateJSON(data) {
        if (data['instances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['instances'])) {
                throw new Error("Expected the field `instances` to be an array in the JSON data but got " + data['instances']);
            }
            // validate the optional field `instances` (array)
            for (const item of data['instances']) {
                InstanceConfig.validateJSON(item);
            };
        }
        if (data['networks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['networks'])) {
                throw new Error("Expected the field `networks` to be an array in the JSON data but got " + data['networks']);
            }
            // validate the optional field `networks` (array)
            for (const item of data['networks']) {
                NetworkConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ticketId'] && !(typeof data['ticketId'] === 'string' || data['ticketId'] instanceof String)) {
            throw new Error("Expected the field `ticketId` to be a primitive type in the JSON string but got " + data['ticketId']);
        }
        if (data['volumes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['volumes'])) {
                throw new Error("Expected the field `volumes` to be an array in the JSON data but got " + data['volumes']);
            }
            // validate the optional field `volumes` (array)
            for (const item of data['volumes']) {
                VolumeConfig.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Instances to be created.
 * @member {Array.<module:model/InstanceConfig>} instances
 */
ProvisioningConfig.prototype['instances'] = undefined;

/**
 * Networks to be created.
 * @member {Array.<module:model/NetworkConfig>} networks
 */
ProvisioningConfig.prototype['networks'] = undefined;

/**
 * A reference to track the request.
 * @member {String} ticketId
 */
ProvisioningConfig.prototype['ticketId'] = undefined;

/**
 * Volumes to be created.
 * @member {Array.<module:model/VolumeConfig>} volumes
 */
ProvisioningConfig.prototype['volumes'] = undefined;






export default ProvisioningConfig;

