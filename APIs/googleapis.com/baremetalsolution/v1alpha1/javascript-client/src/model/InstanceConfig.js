/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NetworkAddress from './NetworkAddress';

/**
 * The InstanceConfig model module.
 * @module model/InstanceConfig
 * @version v1alpha1
 */
class InstanceConfig {
    /**
     * Constructs a new <code>InstanceConfig</code>.
     * Configuration parameters for a new instance.
     * @alias module:model/InstanceConfig
     */
    constructor() { 
        
        InstanceConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InstanceConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstanceConfig} obj Optional instance to populate.
     * @return {module:model/InstanceConfig} The populated <code>InstanceConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstanceConfig();

            if (data.hasOwnProperty('clientNetwork')) {
                obj['clientNetwork'] = NetworkAddress.constructFromObject(data['clientNetwork']);
            }
            if (data.hasOwnProperty('hyperthreading')) {
                obj['hyperthreading'] = ApiClient.convertToType(data['hyperthreading'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('instanceType')) {
                obj['instanceType'] = ApiClient.convertToType(data['instanceType'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('osImage')) {
                obj['osImage'] = ApiClient.convertToType(data['osImage'], 'String');
            }
            if (data.hasOwnProperty('privateNetwork')) {
                obj['privateNetwork'] = NetworkAddress.constructFromObject(data['privateNetwork']);
            }
            if (data.hasOwnProperty('userNote')) {
                obj['userNote'] = ApiClient.convertToType(data['userNote'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InstanceConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InstanceConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `clientNetwork`
        if (data['clientNetwork']) { // data not null
          NetworkAddress.validateJSON(data['clientNetwork']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['instanceType'] && !(typeof data['instanceType'] === 'string' || data['instanceType'] instanceof String)) {
            throw new Error("Expected the field `instanceType` to be a primitive type in the JSON string but got " + data['instanceType']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['osImage'] && !(typeof data['osImage'] === 'string' || data['osImage'] instanceof String)) {
            throw new Error("Expected the field `osImage` to be a primitive type in the JSON string but got " + data['osImage']);
        }
        // validate the optional field `privateNetwork`
        if (data['privateNetwork']) { // data not null
          NetworkAddress.validateJSON(data['privateNetwork']);
        }
        // ensure the json data is a string
        if (data['userNote'] && !(typeof data['userNote'] === 'string' || data['userNote'] instanceof String)) {
            throw new Error("Expected the field `userNote` to be a primitive type in the JSON string but got " + data['userNote']);
        }

        return true;
    }


}



/**
 * @member {module:model/NetworkAddress} clientNetwork
 */
InstanceConfig.prototype['clientNetwork'] = undefined;

/**
 * Whether the instance should be provisioned with Hyperthreading enabled.
 * @member {Boolean} hyperthreading
 */
InstanceConfig.prototype['hyperthreading'] = undefined;

/**
 * A transient unique identifier to idenfity an instance within an ProvisioningConfig request.
 * @member {String} id
 */
InstanceConfig.prototype['id'] = undefined;

/**
 * Instance type.
 * @member {String} instanceType
 */
InstanceConfig.prototype['instanceType'] = undefined;

/**
 * Location where to deploy the instance.
 * @member {String} location
 */
InstanceConfig.prototype['location'] = undefined;

/**
 * OS image to initialize the instance.
 * @member {String} osImage
 */
InstanceConfig.prototype['osImage'] = undefined;

/**
 * @member {module:model/NetworkAddress} privateNetwork
 */
InstanceConfig.prototype['privateNetwork'] = undefined;

/**
 * User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617).
 * @member {String} userNote
 */
InstanceConfig.prototype['userNote'] = undefined;






export default InstanceConfig;

