/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VlanAttachment from './VlanAttachment';

/**
 * The NetworkConfig model module.
 * @module model/NetworkConfig
 * @version v1alpha1
 */
class NetworkConfig {
    /**
     * Constructs a new <code>NetworkConfig</code>.
     * Configuration parameters for a new network.
     * @alias module:model/NetworkConfig
     */
    constructor() { 
        
        NetworkConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NetworkConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkConfig} obj Optional instance to populate.
     * @return {module:model/NetworkConfig} The populated <code>NetworkConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkConfig();

            if (data.hasOwnProperty('bandwidth')) {
                obj['bandwidth'] = ApiClient.convertToType(data['bandwidth'], 'String');
            }
            if (data.hasOwnProperty('cidr')) {
                obj['cidr'] = ApiClient.convertToType(data['cidr'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('serviceCidr')) {
                obj['serviceCidr'] = ApiClient.convertToType(data['serviceCidr'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('userNote')) {
                obj['userNote'] = ApiClient.convertToType(data['userNote'], 'String');
            }
            if (data.hasOwnProperty('vlanAttachments')) {
                obj['vlanAttachments'] = ApiClient.convertToType(data['vlanAttachments'], [VlanAttachment]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bandwidth'] && !(typeof data['bandwidth'] === 'string' || data['bandwidth'] instanceof String)) {
            throw new Error("Expected the field `bandwidth` to be a primitive type in the JSON string but got " + data['bandwidth']);
        }
        // ensure the json data is a string
        if (data['cidr'] && !(typeof data['cidr'] === 'string' || data['cidr'] instanceof String)) {
            throw new Error("Expected the field `cidr` to be a primitive type in the JSON string but got " + data['cidr']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['serviceCidr'] && !(typeof data['serviceCidr'] === 'string' || data['serviceCidr'] instanceof String)) {
            throw new Error("Expected the field `serviceCidr` to be a primitive type in the JSON string but got " + data['serviceCidr']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['userNote'] && !(typeof data['userNote'] === 'string' || data['userNote'] instanceof String)) {
            throw new Error("Expected the field `userNote` to be a primitive type in the JSON string but got " + data['userNote']);
        }
        if (data['vlanAttachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vlanAttachments'])) {
                throw new Error("Expected the field `vlanAttachments` to be an array in the JSON data but got " + data['vlanAttachments']);
            }
            // validate the optional field `vlanAttachments` (array)
            for (const item of data['vlanAttachments']) {
                VlanAttachment.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Interconnect bandwidth. Set only when type is CLIENT.
 * @member {module:model/NetworkConfig.BandwidthEnum} bandwidth
 */
NetworkConfig.prototype['bandwidth'] = undefined;

/**
 * CIDR range of the network.
 * @member {String} cidr
 */
NetworkConfig.prototype['cidr'] = undefined;

/**
 * A transient unique identifier to identify a volume within an ProvisioningConfig request.
 * @member {String} id
 */
NetworkConfig.prototype['id'] = undefined;

/**
 * Location where to deploy the network.
 * @member {String} location
 */
NetworkConfig.prototype['location'] = undefined;

/**
 * Service CIDR, if any.
 * @member {module:model/NetworkConfig.ServiceCidrEnum} serviceCidr
 */
NetworkConfig.prototype['serviceCidr'] = undefined;

/**
 * The type of this network.
 * @member {module:model/NetworkConfig.TypeEnum} type
 */
NetworkConfig.prototype['type'] = undefined;

/**
 * User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617).
 * @member {String} userNote
 */
NetworkConfig.prototype['userNote'] = undefined;

/**
 * List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan).
 * @member {Array.<module:model/VlanAttachment>} vlanAttachments
 */
NetworkConfig.prototype['vlanAttachments'] = undefined;





/**
 * Allowed values for the <code>bandwidth</code> property.
 * @enum {String}
 * @readonly
 */
NetworkConfig['BandwidthEnum'] = {

    /**
     * value: "BANDWIDTH_UNSPECIFIED"
     * @const
     */
    "BANDWIDTH_UNSPECIFIED": "BANDWIDTH_UNSPECIFIED",

    /**
     * value: "BW_1_GBPS"
     * @const
     */
    "BW_1_GBPS": "BW_1_GBPS",

    /**
     * value: "BW_2_GBPS"
     * @const
     */
    "BW_2_GBPS": "BW_2_GBPS",

    /**
     * value: "BW_5_GBPS"
     * @const
     */
    "BW_5_GBPS": "BW_5_GBPS",

    /**
     * value: "BW_10_GBPS"
     * @const
     */
    "BW_10_GBPS": "BW_10_GBPS"
};


/**
 * Allowed values for the <code>serviceCidr</code> property.
 * @enum {String}
 * @readonly
 */
NetworkConfig['ServiceCidrEnum'] = {

    /**
     * value: "SERVICE_CIDR_UNSPECIFIED"
     * @const
     */
    "SERVICE_CIDR_UNSPECIFIED": "SERVICE_CIDR_UNSPECIFIED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "HIGH_26"
     * @const
     */
    "HIGH_26": "HIGH_26",

    /**
     * value: "HIGH_27"
     * @const
     */
    "HIGH_27": "HIGH_27",

    /**
     * value: "HIGH_28"
     * @const
     */
    "HIGH_28": "HIGH_28"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
NetworkConfig['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "CLIENT"
     * @const
     */
    "CLIENT": "CLIENT",

    /**
     * value: "PRIVATE"
     * @const
     */
    "PRIVATE": "PRIVATE"
};



export default NetworkConfig;

