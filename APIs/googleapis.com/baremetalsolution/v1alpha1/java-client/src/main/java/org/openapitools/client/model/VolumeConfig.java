/*
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LunRange;
import org.openapitools.client.model.NfsExport;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration parameters for a new volume.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:56.622231-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VolumeConfig {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_LUN_RANGES = "lunRanges";
  @SerializedName(SERIALIZED_NAME_LUN_RANGES)
  private List<LunRange> lunRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_MACHINE_IDS = "machineIds";
  @SerializedName(SERIALIZED_NAME_MACHINE_IDS)
  private List<String> machineIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_NFS_EXPORTS = "nfsExports";
  @SerializedName(SERIALIZED_NAME_NFS_EXPORTS)
  private List<NfsExport> nfsExports = new ArrayList<>();

  /**
   * Volume protocol.
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    UNSPECIFIED("PROTOCOL_UNSPECIFIED"),
    
    FC("PROTOCOL_FC"),
    
    NFS("PROTOCOL_NFS");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_SIZE_GB = "sizeGb";
  @SerializedName(SERIALIZED_NAME_SIZE_GB)
  private Integer sizeGb;

  public static final String SERIALIZED_NAME_SNAPSHOTS_ENABLED = "snapshotsEnabled";
  @SerializedName(SERIALIZED_NAME_SNAPSHOTS_ENABLED)
  private Boolean snapshotsEnabled;

  /**
   * The type of this Volume.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    FLASH("FLASH"),
    
    DISK("DISK");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USER_NOTE = "userNote";
  @SerializedName(SERIALIZED_NAME_USER_NOTE)
  private String userNote;

  public VolumeConfig() {
  }

  public VolumeConfig id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A transient unique identifier to identify a volume within an ProvisioningConfig request.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public VolumeConfig location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Location where to deploy the volume.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public VolumeConfig lunRanges(List<LunRange> lunRanges) {
    this.lunRanges = lunRanges;
    return this;
  }

  public VolumeConfig addLunRangesItem(LunRange lunRangesItem) {
    if (this.lunRanges == null) {
      this.lunRanges = new ArrayList<>();
    }
    this.lunRanges.add(lunRangesItem);
    return this;
  }

  /**
   * LUN ranges to be configured. Set only when protocol is PROTOCOL_FC.
   * @return lunRanges
   */
  @javax.annotation.Nullable
  public List<LunRange> getLunRanges() {
    return lunRanges;
  }

  public void setLunRanges(List<LunRange> lunRanges) {
    this.lunRanges = lunRanges;
  }


  public VolumeConfig machineIds(List<String> machineIds) {
    this.machineIds = machineIds;
    return this;
  }

  public VolumeConfig addMachineIdsItem(String machineIdsItem) {
    if (this.machineIds == null) {
      this.machineIds = new ArrayList<>();
    }
    this.machineIds.add(machineIdsItem);
    return this;
  }

  /**
   * Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC.
   * @return machineIds
   */
  @javax.annotation.Nullable
  public List<String> getMachineIds() {
    return machineIds;
  }

  public void setMachineIds(List<String> machineIds) {
    this.machineIds = machineIds;
  }


  public VolumeConfig nfsExports(List<NfsExport> nfsExports) {
    this.nfsExports = nfsExports;
    return this;
  }

  public VolumeConfig addNfsExportsItem(NfsExport nfsExportsItem) {
    if (this.nfsExports == null) {
      this.nfsExports = new ArrayList<>();
    }
    this.nfsExports.add(nfsExportsItem);
    return this;
  }

  /**
   * NFS exports. Set only when protocol is PROTOCOL_NFS.
   * @return nfsExports
   */
  @javax.annotation.Nullable
  public List<NfsExport> getNfsExports() {
    return nfsExports;
  }

  public void setNfsExports(List<NfsExport> nfsExports) {
    this.nfsExports = nfsExports;
  }


  public VolumeConfig protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Volume protocol.
   * @return protocol
   */
  @javax.annotation.Nullable
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public VolumeConfig sizeGb(Integer sizeGb) {
    this.sizeGb = sizeGb;
    return this;
  }

  /**
   * The requested size of this volume, in GB. This will be updated in a later iteration with a generic size field.
   * @return sizeGb
   */
  @javax.annotation.Nullable
  public Integer getSizeGb() {
    return sizeGb;
  }

  public void setSizeGb(Integer sizeGb) {
    this.sizeGb = sizeGb;
  }


  public VolumeConfig snapshotsEnabled(Boolean snapshotsEnabled) {
    this.snapshotsEnabled = snapshotsEnabled;
    return this;
  }

  /**
   * Whether snapshots should be enabled.
   * @return snapshotsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSnapshotsEnabled() {
    return snapshotsEnabled;
  }

  public void setSnapshotsEnabled(Boolean snapshotsEnabled) {
    this.snapshotsEnabled = snapshotsEnabled;
  }


  public VolumeConfig type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of this Volume.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public VolumeConfig userNote(String userNote) {
    this.userNote = userNote;
    return this;
  }

  /**
   * User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617).
   * @return userNote
   */
  @javax.annotation.Nullable
  public String getUserNote() {
    return userNote;
  }

  public void setUserNote(String userNote) {
    this.userNote = userNote;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeConfig volumeConfig = (VolumeConfig) o;
    return Objects.equals(this.id, volumeConfig.id) &&
        Objects.equals(this.location, volumeConfig.location) &&
        Objects.equals(this.lunRanges, volumeConfig.lunRanges) &&
        Objects.equals(this.machineIds, volumeConfig.machineIds) &&
        Objects.equals(this.nfsExports, volumeConfig.nfsExports) &&
        Objects.equals(this.protocol, volumeConfig.protocol) &&
        Objects.equals(this.sizeGb, volumeConfig.sizeGb) &&
        Objects.equals(this.snapshotsEnabled, volumeConfig.snapshotsEnabled) &&
        Objects.equals(this.type, volumeConfig.type) &&
        Objects.equals(this.userNote, volumeConfig.userNote);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, location, lunRanges, machineIds, nfsExports, protocol, sizeGb, snapshotsEnabled, type, userNote);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeConfig {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    lunRanges: ").append(toIndentedString(lunRanges)).append("\n");
    sb.append("    machineIds: ").append(toIndentedString(machineIds)).append("\n");
    sb.append("    nfsExports: ").append(toIndentedString(nfsExports)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    sizeGb: ").append(toIndentedString(sizeGb)).append("\n");
    sb.append("    snapshotsEnabled: ").append(toIndentedString(snapshotsEnabled)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userNote: ").append(toIndentedString(userNote)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("location");
    openapiFields.add("lunRanges");
    openapiFields.add("machineIds");
    openapiFields.add("nfsExports");
    openapiFields.add("protocol");
    openapiFields.add("sizeGb");
    openapiFields.add("snapshotsEnabled");
    openapiFields.add("type");
    openapiFields.add("userNote");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VolumeConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VolumeConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VolumeConfig is not found in the empty JSON string", VolumeConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VolumeConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VolumeConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if (jsonObj.get("lunRanges") != null && !jsonObj.get("lunRanges").isJsonNull()) {
        JsonArray jsonArraylunRanges = jsonObj.getAsJsonArray("lunRanges");
        if (jsonArraylunRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lunRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lunRanges` to be an array in the JSON string but got `%s`", jsonObj.get("lunRanges").toString()));
          }

          // validate the optional field `lunRanges` (array)
          for (int i = 0; i < jsonArraylunRanges.size(); i++) {
            LunRange.validateJsonElement(jsonArraylunRanges.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("machineIds") != null && !jsonObj.get("machineIds").isJsonNull() && !jsonObj.get("machineIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineIds` to be an array in the JSON string but got `%s`", jsonObj.get("machineIds").toString()));
      }
      if (jsonObj.get("nfsExports") != null && !jsonObj.get("nfsExports").isJsonNull()) {
        JsonArray jsonArraynfsExports = jsonObj.getAsJsonArray("nfsExports");
        if (jsonArraynfsExports != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nfsExports").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nfsExports` to be an array in the JSON string but got `%s`", jsonObj.get("nfsExports").toString()));
          }

          // validate the optional field `nfsExports` (array)
          for (int i = 0; i < jsonArraynfsExports.size(); i++) {
            NfsExport.validateJsonElement(jsonArraynfsExports.get(i));
          };
        }
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("userNote") != null && !jsonObj.get("userNote").isJsonNull()) && !jsonObj.get("userNote").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userNote` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userNote").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VolumeConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VolumeConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VolumeConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VolumeConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<VolumeConfig>() {
           @Override
           public void write(JsonWriter out, VolumeConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VolumeConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VolumeConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VolumeConfig
   * @throws IOException if the JSON string is invalid with respect to VolumeConfig
   */
  public static VolumeConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VolumeConfig.class);
  }

  /**
   * Convert an instance of VolumeConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

