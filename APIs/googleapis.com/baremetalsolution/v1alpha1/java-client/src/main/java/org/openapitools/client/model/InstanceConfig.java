/*
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NetworkAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration parameters for a new instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:56.622231-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceConfig {
  public static final String SERIALIZED_NAME_CLIENT_NETWORK = "clientNetwork";
  @SerializedName(SERIALIZED_NAME_CLIENT_NETWORK)
  private NetworkAddress clientNetwork;

  public static final String SERIALIZED_NAME_HYPERTHREADING = "hyperthreading";
  @SerializedName(SERIALIZED_NAME_HYPERTHREADING)
  private Boolean hyperthreading;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_OS_IMAGE = "osImage";
  @SerializedName(SERIALIZED_NAME_OS_IMAGE)
  private String osImage;

  public static final String SERIALIZED_NAME_PRIVATE_NETWORK = "privateNetwork";
  @SerializedName(SERIALIZED_NAME_PRIVATE_NETWORK)
  private NetworkAddress privateNetwork;

  public static final String SERIALIZED_NAME_USER_NOTE = "userNote";
  @SerializedName(SERIALIZED_NAME_USER_NOTE)
  private String userNote;

  public InstanceConfig() {
  }

  public InstanceConfig clientNetwork(NetworkAddress clientNetwork) {
    this.clientNetwork = clientNetwork;
    return this;
  }

  /**
   * Get clientNetwork
   * @return clientNetwork
   */
  @javax.annotation.Nullable
  public NetworkAddress getClientNetwork() {
    return clientNetwork;
  }

  public void setClientNetwork(NetworkAddress clientNetwork) {
    this.clientNetwork = clientNetwork;
  }


  public InstanceConfig hyperthreading(Boolean hyperthreading) {
    this.hyperthreading = hyperthreading;
    return this;
  }

  /**
   * Whether the instance should be provisioned with Hyperthreading enabled.
   * @return hyperthreading
   */
  @javax.annotation.Nullable
  public Boolean getHyperthreading() {
    return hyperthreading;
  }

  public void setHyperthreading(Boolean hyperthreading) {
    this.hyperthreading = hyperthreading;
  }


  public InstanceConfig id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A transient unique identifier to idenfity an instance within an ProvisioningConfig request.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public InstanceConfig instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Instance type.
   * @return instanceType
   */
  @javax.annotation.Nullable
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public InstanceConfig location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Location where to deploy the instance.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public InstanceConfig osImage(String osImage) {
    this.osImage = osImage;
    return this;
  }

  /**
   * OS image to initialize the instance.
   * @return osImage
   */
  @javax.annotation.Nullable
  public String getOsImage() {
    return osImage;
  }

  public void setOsImage(String osImage) {
    this.osImage = osImage;
  }


  public InstanceConfig privateNetwork(NetworkAddress privateNetwork) {
    this.privateNetwork = privateNetwork;
    return this;
  }

  /**
   * Get privateNetwork
   * @return privateNetwork
   */
  @javax.annotation.Nullable
  public NetworkAddress getPrivateNetwork() {
    return privateNetwork;
  }

  public void setPrivateNetwork(NetworkAddress privateNetwork) {
    this.privateNetwork = privateNetwork;
  }


  public InstanceConfig userNote(String userNote) {
    this.userNote = userNote;
    return this;
  }

  /**
   * User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617).
   * @return userNote
   */
  @javax.annotation.Nullable
  public String getUserNote() {
    return userNote;
  }

  public void setUserNote(String userNote) {
    this.userNote = userNote;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceConfig instanceConfig = (InstanceConfig) o;
    return Objects.equals(this.clientNetwork, instanceConfig.clientNetwork) &&
        Objects.equals(this.hyperthreading, instanceConfig.hyperthreading) &&
        Objects.equals(this.id, instanceConfig.id) &&
        Objects.equals(this.instanceType, instanceConfig.instanceType) &&
        Objects.equals(this.location, instanceConfig.location) &&
        Objects.equals(this.osImage, instanceConfig.osImage) &&
        Objects.equals(this.privateNetwork, instanceConfig.privateNetwork) &&
        Objects.equals(this.userNote, instanceConfig.userNote);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientNetwork, hyperthreading, id, instanceType, location, osImage, privateNetwork, userNote);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceConfig {\n");
    sb.append("    clientNetwork: ").append(toIndentedString(clientNetwork)).append("\n");
    sb.append("    hyperthreading: ").append(toIndentedString(hyperthreading)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    osImage: ").append(toIndentedString(osImage)).append("\n");
    sb.append("    privateNetwork: ").append(toIndentedString(privateNetwork)).append("\n");
    sb.append("    userNote: ").append(toIndentedString(userNote)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientNetwork");
    openapiFields.add("hyperthreading");
    openapiFields.add("id");
    openapiFields.add("instanceType");
    openapiFields.add("location");
    openapiFields.add("osImage");
    openapiFields.add("privateNetwork");
    openapiFields.add("userNote");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceConfig is not found in the empty JSON string", InstanceConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `clientNetwork`
      if (jsonObj.get("clientNetwork") != null && !jsonObj.get("clientNetwork").isJsonNull()) {
        NetworkAddress.validateJsonElement(jsonObj.get("clientNetwork"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("instanceType") != null && !jsonObj.get("instanceType").isJsonNull()) && !jsonObj.get("instanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceType").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("osImage") != null && !jsonObj.get("osImage").isJsonNull()) && !jsonObj.get("osImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osImage").toString()));
      }
      // validate the optional field `privateNetwork`
      if (jsonObj.get("privateNetwork") != null && !jsonObj.get("privateNetwork").isJsonNull()) {
        NetworkAddress.validateJsonElement(jsonObj.get("privateNetwork"));
      }
      if ((jsonObj.get("userNote") != null && !jsonObj.get("userNote").isJsonNull()) && !jsonObj.get("userNote").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userNote` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userNote").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceConfig>() {
           @Override
           public void write(JsonWriter out, InstanceConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceConfig
   * @throws IOException if the JSON string is invalid with respect to InstanceConfig
   */
  public static InstanceConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceConfig.class);
  }

  /**
   * Convert an instance of InstanceConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

