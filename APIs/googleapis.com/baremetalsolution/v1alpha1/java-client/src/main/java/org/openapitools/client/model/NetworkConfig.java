/*
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VlanAttachment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration parameters for a new network.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:56.622231-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkConfig {
  /**
   * Interconnect bandwidth. Set only when type is CLIENT.
   */
  @JsonAdapter(BandwidthEnum.Adapter.class)
  public enum BandwidthEnum {
    BANDWIDTH_UNSPECIFIED("BANDWIDTH_UNSPECIFIED"),
    
    BW_1_GBPS("BW_1_GBPS"),
    
    BW_2_GBPS("BW_2_GBPS"),
    
    BW_5_GBPS("BW_5_GBPS"),
    
    BW_10_GBPS("BW_10_GBPS");

    private String value;

    BandwidthEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BandwidthEnum fromValue(String value) {
      for (BandwidthEnum b : BandwidthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BandwidthEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BandwidthEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BandwidthEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BandwidthEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BandwidthEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BANDWIDTH = "bandwidth";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH)
  private BandwidthEnum bandwidth;

  public static final String SERIALIZED_NAME_CIDR = "cidr";
  @SerializedName(SERIALIZED_NAME_CIDR)
  private String cidr;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  /**
   * Service CIDR, if any.
   */
  @JsonAdapter(ServiceCidrEnum.Adapter.class)
  public enum ServiceCidrEnum {
    SERVICE_CIDR_UNSPECIFIED("SERVICE_CIDR_UNSPECIFIED"),
    
    DISABLED("DISABLED"),
    
    HIGH_26("HIGH_26"),
    
    HIGH_27("HIGH_27"),
    
    HIGH_28("HIGH_28");

    private String value;

    ServiceCidrEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceCidrEnum fromValue(String value) {
      for (ServiceCidrEnum b : ServiceCidrEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceCidrEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceCidrEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceCidrEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServiceCidrEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServiceCidrEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVICE_CIDR = "serviceCidr";
  @SerializedName(SERIALIZED_NAME_SERVICE_CIDR)
  private ServiceCidrEnum serviceCidr;

  /**
   * The type of this network.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    CLIENT("CLIENT"),
    
    PRIVATE("PRIVATE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USER_NOTE = "userNote";
  @SerializedName(SERIALIZED_NAME_USER_NOTE)
  private String userNote;

  public static final String SERIALIZED_NAME_VLAN_ATTACHMENTS = "vlanAttachments";
  @SerializedName(SERIALIZED_NAME_VLAN_ATTACHMENTS)
  private List<VlanAttachment> vlanAttachments = new ArrayList<>();

  public NetworkConfig() {
  }

  public NetworkConfig bandwidth(BandwidthEnum bandwidth) {
    this.bandwidth = bandwidth;
    return this;
  }

  /**
   * Interconnect bandwidth. Set only when type is CLIENT.
   * @return bandwidth
   */
  @javax.annotation.Nullable
  public BandwidthEnum getBandwidth() {
    return bandwidth;
  }

  public void setBandwidth(BandwidthEnum bandwidth) {
    this.bandwidth = bandwidth;
  }


  public NetworkConfig cidr(String cidr) {
    this.cidr = cidr;
    return this;
  }

  /**
   * CIDR range of the network.
   * @return cidr
   */
  @javax.annotation.Nullable
  public String getCidr() {
    return cidr;
  }

  public void setCidr(String cidr) {
    this.cidr = cidr;
  }


  public NetworkConfig id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A transient unique identifier to identify a volume within an ProvisioningConfig request.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public NetworkConfig location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Location where to deploy the network.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public NetworkConfig serviceCidr(ServiceCidrEnum serviceCidr) {
    this.serviceCidr = serviceCidr;
    return this;
  }

  /**
   * Service CIDR, if any.
   * @return serviceCidr
   */
  @javax.annotation.Nullable
  public ServiceCidrEnum getServiceCidr() {
    return serviceCidr;
  }

  public void setServiceCidr(ServiceCidrEnum serviceCidr) {
    this.serviceCidr = serviceCidr;
  }


  public NetworkConfig type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of this network.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public NetworkConfig userNote(String userNote) {
    this.userNote = userNote;
    return this;
  }

  /**
   * User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617).
   * @return userNote
   */
  @javax.annotation.Nullable
  public String getUserNote() {
    return userNote;
  }

  public void setUserNote(String userNote) {
    this.userNote = userNote;
  }


  public NetworkConfig vlanAttachments(List<VlanAttachment> vlanAttachments) {
    this.vlanAttachments = vlanAttachments;
    return this;
  }

  public NetworkConfig addVlanAttachmentsItem(VlanAttachment vlanAttachmentsItem) {
    if (this.vlanAttachments == null) {
      this.vlanAttachments = new ArrayList<>();
    }
    this.vlanAttachments.add(vlanAttachmentsItem);
    return this;
  }

  /**
   * List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan).
   * @return vlanAttachments
   */
  @javax.annotation.Nullable
  public List<VlanAttachment> getVlanAttachments() {
    return vlanAttachments;
  }

  public void setVlanAttachments(List<VlanAttachment> vlanAttachments) {
    this.vlanAttachments = vlanAttachments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkConfig networkConfig = (NetworkConfig) o;
    return Objects.equals(this.bandwidth, networkConfig.bandwidth) &&
        Objects.equals(this.cidr, networkConfig.cidr) &&
        Objects.equals(this.id, networkConfig.id) &&
        Objects.equals(this.location, networkConfig.location) &&
        Objects.equals(this.serviceCidr, networkConfig.serviceCidr) &&
        Objects.equals(this.type, networkConfig.type) &&
        Objects.equals(this.userNote, networkConfig.userNote) &&
        Objects.equals(this.vlanAttachments, networkConfig.vlanAttachments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bandwidth, cidr, id, location, serviceCidr, type, userNote, vlanAttachments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkConfig {\n");
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    cidr: ").append(toIndentedString(cidr)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    serviceCidr: ").append(toIndentedString(serviceCidr)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userNote: ").append(toIndentedString(userNote)).append("\n");
    sb.append("    vlanAttachments: ").append(toIndentedString(vlanAttachments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bandwidth");
    openapiFields.add("cidr");
    openapiFields.add("id");
    openapiFields.add("location");
    openapiFields.add("serviceCidr");
    openapiFields.add("type");
    openapiFields.add("userNote");
    openapiFields.add("vlanAttachments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkConfig is not found in the empty JSON string", NetworkConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bandwidth") != null && !jsonObj.get("bandwidth").isJsonNull()) && !jsonObj.get("bandwidth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bandwidth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bandwidth").toString()));
      }
      // validate the optional field `bandwidth`
      if (jsonObj.get("bandwidth") != null && !jsonObj.get("bandwidth").isJsonNull()) {
        BandwidthEnum.validateJsonElement(jsonObj.get("bandwidth"));
      }
      if ((jsonObj.get("cidr") != null && !jsonObj.get("cidr").isJsonNull()) && !jsonObj.get("cidr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cidr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cidr").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("serviceCidr") != null && !jsonObj.get("serviceCidr").isJsonNull()) && !jsonObj.get("serviceCidr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceCidr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceCidr").toString()));
      }
      // validate the optional field `serviceCidr`
      if (jsonObj.get("serviceCidr") != null && !jsonObj.get("serviceCidr").isJsonNull()) {
        ServiceCidrEnum.validateJsonElement(jsonObj.get("serviceCidr"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("userNote") != null && !jsonObj.get("userNote").isJsonNull()) && !jsonObj.get("userNote").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userNote` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userNote").toString()));
      }
      if (jsonObj.get("vlanAttachments") != null && !jsonObj.get("vlanAttachments").isJsonNull()) {
        JsonArray jsonArrayvlanAttachments = jsonObj.getAsJsonArray("vlanAttachments");
        if (jsonArrayvlanAttachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vlanAttachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vlanAttachments` to be an array in the JSON string but got `%s`", jsonObj.get("vlanAttachments").toString()));
          }

          // validate the optional field `vlanAttachments` (array)
          for (int i = 0; i < jsonArrayvlanAttachments.size(); i++) {
            VlanAttachment.validateJsonElement(jsonArrayvlanAttachments.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkConfig>() {
           @Override
           public void write(JsonWriter out, NetworkConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkConfig
   * @throws IOException if the JSON string is invalid with respect to NetworkConfig
   */
  public static NetworkConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkConfig.class);
  }

  /**
   * Convert an instance of NetworkConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

