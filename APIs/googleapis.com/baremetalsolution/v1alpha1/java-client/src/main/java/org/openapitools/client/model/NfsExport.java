/*
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A NFS export entry.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:56.622231-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NfsExport {
  public static final String SERIALIZED_NAME_ALLOW_DEV = "allowDev";
  @SerializedName(SERIALIZED_NAME_ALLOW_DEV)
  private Boolean allowDev;

  public static final String SERIALIZED_NAME_ALLOW_SUID = "allowSuid";
  @SerializedName(SERIALIZED_NAME_ALLOW_SUID)
  private Boolean allowSuid;

  public static final String SERIALIZED_NAME_CIDR = "cidr";
  @SerializedName(SERIALIZED_NAME_CIDR)
  private String cidr;

  public static final String SERIALIZED_NAME_MACHINE_ID = "machineId";
  @SerializedName(SERIALIZED_NAME_MACHINE_ID)
  private String machineId;

  public static final String SERIALIZED_NAME_NETWORK_ID = "networkId";
  @SerializedName(SERIALIZED_NAME_NETWORK_ID)
  private String networkId;

  public static final String SERIALIZED_NAME_NO_ROOT_SQUASH = "noRootSquash";
  @SerializedName(SERIALIZED_NAME_NO_ROOT_SQUASH)
  private Boolean noRootSquash;

  /**
   * Export permissions.
   */
  @JsonAdapter(PermissionsEnum.Adapter.class)
  public enum PermissionsEnum {
    PERMISSIONS_UNSPECIFIED("PERMISSIONS_UNSPECIFIED"),
    
    READ_ONLY("READ_ONLY"),
    
    READ_WRITE("READ_WRITE");

    private String value;

    PermissionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PermissionsEnum fromValue(String value) {
      for (PermissionsEnum b : PermissionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PermissionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PermissionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PermissionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PermissionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PermissionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private PermissionsEnum permissions;

  public NfsExport() {
  }

  public NfsExport allowDev(Boolean allowDev) {
    this.allowDev = allowDev;
    return this;
  }

  /**
   * Allow dev.
   * @return allowDev
   */
  @javax.annotation.Nullable
  public Boolean getAllowDev() {
    return allowDev;
  }

  public void setAllowDev(Boolean allowDev) {
    this.allowDev = allowDev;
  }


  public NfsExport allowSuid(Boolean allowSuid) {
    this.allowSuid = allowSuid;
    return this;
  }

  /**
   * Allow the setuid flag.
   * @return allowSuid
   */
  @javax.annotation.Nullable
  public Boolean getAllowSuid() {
    return allowSuid;
  }

  public void setAllowSuid(Boolean allowSuid) {
    this.allowSuid = allowSuid;
  }


  public NfsExport cidr(String cidr) {
    this.cidr = cidr;
    return this;
  }

  /**
   * A CIDR range.
   * @return cidr
   */
  @javax.annotation.Nullable
  public String getCidr() {
    return cidr;
  }

  public void setCidr(String cidr) {
    this.cidr = cidr;
  }


  public NfsExport machineId(String machineId) {
    this.machineId = machineId;
    return this;
  }

  /**
   * Either a single machine, identified by an ID, or a comma-separated list of machine IDs.
   * @return machineId
   */
  @javax.annotation.Nullable
  public String getMachineId() {
    return machineId;
  }

  public void setMachineId(String machineId) {
    this.machineId = machineId;
  }


  public NfsExport networkId(String networkId) {
    this.networkId = networkId;
    return this;
  }

  /**
   * Network to use to publish the export.
   * @return networkId
   */
  @javax.annotation.Nullable
  public String getNetworkId() {
    return networkId;
  }

  public void setNetworkId(String networkId) {
    this.networkId = networkId;
  }


  public NfsExport noRootSquash(Boolean noRootSquash) {
    this.noRootSquash = noRootSquash;
    return this;
  }

  /**
   * Disable root squashing.
   * @return noRootSquash
   */
  @javax.annotation.Nullable
  public Boolean getNoRootSquash() {
    return noRootSquash;
  }

  public void setNoRootSquash(Boolean noRootSquash) {
    this.noRootSquash = noRootSquash;
  }


  public NfsExport permissions(PermissionsEnum permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * Export permissions.
   * @return permissions
   */
  @javax.annotation.Nullable
  public PermissionsEnum getPermissions() {
    return permissions;
  }

  public void setPermissions(PermissionsEnum permissions) {
    this.permissions = permissions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfsExport nfsExport = (NfsExport) o;
    return Objects.equals(this.allowDev, nfsExport.allowDev) &&
        Objects.equals(this.allowSuid, nfsExport.allowSuid) &&
        Objects.equals(this.cidr, nfsExport.cidr) &&
        Objects.equals(this.machineId, nfsExport.machineId) &&
        Objects.equals(this.networkId, nfsExport.networkId) &&
        Objects.equals(this.noRootSquash, nfsExport.noRootSquash) &&
        Objects.equals(this.permissions, nfsExport.permissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowDev, allowSuid, cidr, machineId, networkId, noRootSquash, permissions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfsExport {\n");
    sb.append("    allowDev: ").append(toIndentedString(allowDev)).append("\n");
    sb.append("    allowSuid: ").append(toIndentedString(allowSuid)).append("\n");
    sb.append("    cidr: ").append(toIndentedString(cidr)).append("\n");
    sb.append("    machineId: ").append(toIndentedString(machineId)).append("\n");
    sb.append("    networkId: ").append(toIndentedString(networkId)).append("\n");
    sb.append("    noRootSquash: ").append(toIndentedString(noRootSquash)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowDev");
    openapiFields.add("allowSuid");
    openapiFields.add("cidr");
    openapiFields.add("machineId");
    openapiFields.add("networkId");
    openapiFields.add("noRootSquash");
    openapiFields.add("permissions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfsExport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfsExport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfsExport is not found in the empty JSON string", NfsExport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfsExport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfsExport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cidr") != null && !jsonObj.get("cidr").isJsonNull()) && !jsonObj.get("cidr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cidr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cidr").toString()));
      }
      if ((jsonObj.get("machineId") != null && !jsonObj.get("machineId").isJsonNull()) && !jsonObj.get("machineId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineId").toString()));
      }
      if ((jsonObj.get("networkId") != null && !jsonObj.get("networkId").isJsonNull()) && !jsonObj.get("networkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkId").toString()));
      }
      if ((jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) && !jsonObj.get("permissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }
      // validate the optional field `permissions`
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        PermissionsEnum.validateJsonElement(jsonObj.get("permissions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfsExport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfsExport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfsExport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfsExport.class));

       return (TypeAdapter<T>) new TypeAdapter<NfsExport>() {
           @Override
           public void write(JsonWriter out, NfsExport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfsExport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfsExport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfsExport
   * @throws IOException if the JSON string is invalid with respect to NfsExport
   */
  public static NfsExport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfsExport.class);
  }

  /**
   * Convert an instance of NfsExport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

