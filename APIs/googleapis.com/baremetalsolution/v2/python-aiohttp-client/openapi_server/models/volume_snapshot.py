# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VolumeSnapshot(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, id: str=None, name: str=None, storage_volume: str=None, type: str=None):
        """VolumeSnapshot - a model defined in OpenAPI

        :param create_time: The create_time of this VolumeSnapshot.
        :param description: The description of this VolumeSnapshot.
        :param id: The id of this VolumeSnapshot.
        :param name: The name of this VolumeSnapshot.
        :param storage_volume: The storage_volume of this VolumeSnapshot.
        :param type: The type of this VolumeSnapshot.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'id': str,
            'name': str,
            'storage_volume': str,
            'type': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'storage_volume': 'storageVolume',
            'type': 'type'
        }

        self._create_time = create_time
        self._description = description
        self._id = id
        self._name = name
        self._storage_volume = storage_volume
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeSnapshot':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VolumeSnapshot of this VolumeSnapshot.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this VolumeSnapshot.

        Output only. The creation time of the snapshot.

        :return: The create_time of this VolumeSnapshot.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this VolumeSnapshot.

        Output only. The creation time of the snapshot.

        :param create_time: The create_time of this VolumeSnapshot.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this VolumeSnapshot.

        The description of the snapshot.

        :return: The description of this VolumeSnapshot.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VolumeSnapshot.

        The description of the snapshot.

        :param description: The description of this VolumeSnapshot.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this VolumeSnapshot.

        Output only. An identifier for the snapshot, generated by the backend.

        :return: The id of this VolumeSnapshot.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VolumeSnapshot.

        Output only. An identifier for the snapshot, generated by the backend.

        :param id: The id of this VolumeSnapshot.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this VolumeSnapshot.

        The name of the snapshot.

        :return: The name of this VolumeSnapshot.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumeSnapshot.

        The name of the snapshot.

        :param name: The name of this VolumeSnapshot.
        :type name: str
        """

        self._name = name

    @property
    def storage_volume(self):
        """Gets the storage_volume of this VolumeSnapshot.

        Output only. The name of the volume which this snapshot belongs to.

        :return: The storage_volume of this VolumeSnapshot.
        :rtype: str
        """
        return self._storage_volume

    @storage_volume.setter
    def storage_volume(self, storage_volume):
        """Sets the storage_volume of this VolumeSnapshot.

        Output only. The name of the volume which this snapshot belongs to.

        :param storage_volume: The storage_volume of this VolumeSnapshot.
        :type storage_volume: str
        """

        self._storage_volume = storage_volume

    @property
    def type(self):
        """Gets the type of this VolumeSnapshot.

        Output only. The type of the snapshot which indicates whether it was scheduled or manual/ad-hoc.

        :return: The type of this VolumeSnapshot.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VolumeSnapshot.

        Output only. The type of the snapshot which indicates whether it was scheduled or manual/ad-hoc.

        :param type: The type of this VolumeSnapshot.
        :type type: str
        """
        allowed_values = ["SNAPSHOT_TYPE_UNSPECIFIED", "AD_HOC", "SCHEDULED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
