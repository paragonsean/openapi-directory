# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.qos_policy import QosPolicy
from openapi_server import util


class VlanAttachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, interconnect_attachment: str=None, pairing_key: str=None, peer_ip: str=None, peer_vlan_id: str=None, qos_policy: QosPolicy=None, router_ip: str=None):
        """VlanAttachment - a model defined in OpenAPI

        :param id: The id of this VlanAttachment.
        :param interconnect_attachment: The interconnect_attachment of this VlanAttachment.
        :param pairing_key: The pairing_key of this VlanAttachment.
        :param peer_ip: The peer_ip of this VlanAttachment.
        :param peer_vlan_id: The peer_vlan_id of this VlanAttachment.
        :param qos_policy: The qos_policy of this VlanAttachment.
        :param router_ip: The router_ip of this VlanAttachment.
        """
        self.openapi_types = {
            'id': str,
            'interconnect_attachment': str,
            'pairing_key': str,
            'peer_ip': str,
            'peer_vlan_id': str,
            'qos_policy': QosPolicy,
            'router_ip': str
        }

        self.attribute_map = {
            'id': 'id',
            'interconnect_attachment': 'interconnectAttachment',
            'pairing_key': 'pairingKey',
            'peer_ip': 'peerIp',
            'peer_vlan_id': 'peerVlanId',
            'qos_policy': 'qosPolicy',
            'router_ip': 'routerIp'
        }

        self._id = id
        self._interconnect_attachment = interconnect_attachment
        self._pairing_key = pairing_key
        self._peer_ip = peer_ip
        self._peer_vlan_id = peer_vlan_id
        self._qos_policy = qos_policy
        self._router_ip = router_ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VlanAttachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VlanAttachment of this VlanAttachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this VlanAttachment.

        Immutable. The identifier of the attachment within vrf.

        :return: The id of this VlanAttachment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VlanAttachment.

        Immutable. The identifier of the attachment within vrf.

        :param id: The id of this VlanAttachment.
        :type id: str
        """

        self._id = id

    @property
    def interconnect_attachment(self):
        """Gets the interconnect_attachment of this VlanAttachment.

        Optional. The name of the vlan attachment within vrf. This is of the form projects/{project_number}/regions/{region}/interconnectAttachments/{interconnect_attachment}

        :return: The interconnect_attachment of this VlanAttachment.
        :rtype: str
        """
        return self._interconnect_attachment

    @interconnect_attachment.setter
    def interconnect_attachment(self, interconnect_attachment):
        """Sets the interconnect_attachment of this VlanAttachment.

        Optional. The name of the vlan attachment within vrf. This is of the form projects/{project_number}/regions/{region}/interconnectAttachments/{interconnect_attachment}

        :param interconnect_attachment: The interconnect_attachment of this VlanAttachment.
        :type interconnect_attachment: str
        """

        self._interconnect_attachment = interconnect_attachment

    @property
    def pairing_key(self):
        """Gets the pairing_key of this VlanAttachment.

        Input only. Pairing key.

        :return: The pairing_key of this VlanAttachment.
        :rtype: str
        """
        return self._pairing_key

    @pairing_key.setter
    def pairing_key(self, pairing_key):
        """Sets the pairing_key of this VlanAttachment.

        Input only. Pairing key.

        :param pairing_key: The pairing_key of this VlanAttachment.
        :type pairing_key: str
        """

        self._pairing_key = pairing_key

    @property
    def peer_ip(self):
        """Gets the peer_ip of this VlanAttachment.

        The peer IP of the attachment.

        :return: The peer_ip of this VlanAttachment.
        :rtype: str
        """
        return self._peer_ip

    @peer_ip.setter
    def peer_ip(self, peer_ip):
        """Sets the peer_ip of this VlanAttachment.

        The peer IP of the attachment.

        :param peer_ip: The peer_ip of this VlanAttachment.
        :type peer_ip: str
        """

        self._peer_ip = peer_ip

    @property
    def peer_vlan_id(self):
        """Gets the peer_vlan_id of this VlanAttachment.

        The peer vlan ID of the attachment.

        :return: The peer_vlan_id of this VlanAttachment.
        :rtype: str
        """
        return self._peer_vlan_id

    @peer_vlan_id.setter
    def peer_vlan_id(self, peer_vlan_id):
        """Sets the peer_vlan_id of this VlanAttachment.

        The peer vlan ID of the attachment.

        :param peer_vlan_id: The peer_vlan_id of this VlanAttachment.
        :type peer_vlan_id: str
        """

        self._peer_vlan_id = peer_vlan_id

    @property
    def qos_policy(self):
        """Gets the qos_policy of this VlanAttachment.


        :return: The qos_policy of this VlanAttachment.
        :rtype: QosPolicy
        """
        return self._qos_policy

    @qos_policy.setter
    def qos_policy(self, qos_policy):
        """Sets the qos_policy of this VlanAttachment.


        :param qos_policy: The qos_policy of this VlanAttachment.
        :type qos_policy: QosPolicy
        """

        self._qos_policy = qos_policy

    @property
    def router_ip(self):
        """Gets the router_ip of this VlanAttachment.

        The router IP of the attachment.

        :return: The router_ip of this VlanAttachment.
        :rtype: str
        """
        return self._router_ip

    @router_ip.setter
    def router_ip(self, router_ip):
        """Sets the router_ip of this VlanAttachment.

        The router IP of the attachment.

        :param router_ip: The router_ip of this VlanAttachment.
        :type router_ip: str
        """

        self._router_ip = router_ip
