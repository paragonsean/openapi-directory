# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, existing_network_id: str=None, network_id: str=None):
        """NetworkAddress - a model defined in OpenAPI

        :param address: The address of this NetworkAddress.
        :param existing_network_id: The existing_network_id of this NetworkAddress.
        :param network_id: The network_id of this NetworkAddress.
        """
        self.openapi_types = {
            'address': str,
            'existing_network_id': str,
            'network_id': str
        }

        self.attribute_map = {
            'address': 'address',
            'existing_network_id': 'existingNetworkId',
            'network_id': 'networkId'
        }

        self._address = address
        self._existing_network_id = existing_network_id
        self._network_id = network_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkAddress of this NetworkAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this NetworkAddress.

        IPv4 address to be assigned to the server.

        :return: The address of this NetworkAddress.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this NetworkAddress.

        IPv4 address to be assigned to the server.

        :param address: The address of this NetworkAddress.
        :type address: str
        """

        self._address = address

    @property
    def existing_network_id(self):
        """Gets the existing_network_id of this NetworkAddress.

        Name of the existing network to use.

        :return: The existing_network_id of this NetworkAddress.
        :rtype: str
        """
        return self._existing_network_id

    @existing_network_id.setter
    def existing_network_id(self, existing_network_id):
        """Sets the existing_network_id of this NetworkAddress.

        Name of the existing network to use.

        :param existing_network_id: The existing_network_id of this NetworkAddress.
        :type existing_network_id: str
        """

        self._existing_network_id = existing_network_id

    @property
    def network_id(self):
        """Gets the network_id of this NetworkAddress.

        Id of the network to use, within the same ProvisioningConfig request.

        :return: The network_id of this NetworkAddress.
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this NetworkAddress.

        Id of the network to use, within the same ProvisioningConfig request.

        :param network_id: The network_id of this NetworkAddress.
        :type network_id: str
        """

        self._network_id = network_id
