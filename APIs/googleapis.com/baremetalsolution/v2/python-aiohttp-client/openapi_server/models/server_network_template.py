# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_baremetalsolution_v2_server_network_template_logical_interface import GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface
from openapi_server import util


class ServerNetworkTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applicable_instance_types: List[str]=None, logical_interfaces: List[GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface]=None, name: str=None):
        """ServerNetworkTemplate - a model defined in OpenAPI

        :param applicable_instance_types: The applicable_instance_types of this ServerNetworkTemplate.
        :param logical_interfaces: The logical_interfaces of this ServerNetworkTemplate.
        :param name: The name of this ServerNetworkTemplate.
        """
        self.openapi_types = {
            'applicable_instance_types': List[str],
            'logical_interfaces': List[GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface],
            'name': str
        }

        self.attribute_map = {
            'applicable_instance_types': 'applicableInstanceTypes',
            'logical_interfaces': 'logicalInterfaces',
            'name': 'name'
        }

        self._applicable_instance_types = applicable_instance_types
        self._logical_interfaces = logical_interfaces
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerNetworkTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerNetworkTemplate of this ServerNetworkTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applicable_instance_types(self):
        """Gets the applicable_instance_types of this ServerNetworkTemplate.

        Instance types this template is applicable to.

        :return: The applicable_instance_types of this ServerNetworkTemplate.
        :rtype: List[str]
        """
        return self._applicable_instance_types

    @applicable_instance_types.setter
    def applicable_instance_types(self, applicable_instance_types):
        """Sets the applicable_instance_types of this ServerNetworkTemplate.

        Instance types this template is applicable to.

        :param applicable_instance_types: The applicable_instance_types of this ServerNetworkTemplate.
        :type applicable_instance_types: List[str]
        """

        self._applicable_instance_types = applicable_instance_types

    @property
    def logical_interfaces(self):
        """Gets the logical_interfaces of this ServerNetworkTemplate.

        Logical interfaces.

        :return: The logical_interfaces of this ServerNetworkTemplate.
        :rtype: List[GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface]
        """
        return self._logical_interfaces

    @logical_interfaces.setter
    def logical_interfaces(self, logical_interfaces):
        """Sets the logical_interfaces of this ServerNetworkTemplate.

        Logical interfaces.

        :param logical_interfaces: The logical_interfaces of this ServerNetworkTemplate.
        :type logical_interfaces: List[GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface]
        """

        self._logical_interfaces = logical_interfaces

    @property
    def name(self):
        """Gets the name of this ServerNetworkTemplate.

        Output only. Template's unique name. The full resource name follows the pattern: `projects/{project}/locations/{location}/serverNetworkTemplate/{server_network_template}` Generally, the {server_network_template} follows the syntax of \"bond\" or \"nic\".

        :return: The name of this ServerNetworkTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServerNetworkTemplate.

        Output only. Template's unique name. The full resource name follows the pattern: `projects/{project}/locations/{location}/serverNetworkTemplate/{server_network_template}` Generally, the {server_network_template} follows the syntax of \"bond\" or \"nic\".

        :param name: The name of this ServerNetworkTemplate.
        :type name: str
        """

        self._name = name
