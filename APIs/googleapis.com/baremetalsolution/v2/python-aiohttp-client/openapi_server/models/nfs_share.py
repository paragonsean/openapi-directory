# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.allowed_client import AllowedClient
from openapi_server import util


class NfsShare(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_clients: List[AllowedClient]=None, id: str=None, labels: Dict[str, str]=None, name: str=None, nfs_share_id: str=None, pod: str=None, requested_size_gib: str=None, state: str=None, storage_type: str=None, volume: str=None):
        """NfsShare - a model defined in OpenAPI

        :param allowed_clients: The allowed_clients of this NfsShare.
        :param id: The id of this NfsShare.
        :param labels: The labels of this NfsShare.
        :param name: The name of this NfsShare.
        :param nfs_share_id: The nfs_share_id of this NfsShare.
        :param pod: The pod of this NfsShare.
        :param requested_size_gib: The requested_size_gib of this NfsShare.
        :param state: The state of this NfsShare.
        :param storage_type: The storage_type of this NfsShare.
        :param volume: The volume of this NfsShare.
        """
        self.openapi_types = {
            'allowed_clients': List[AllowedClient],
            'id': str,
            'labels': Dict[str, str],
            'name': str,
            'nfs_share_id': str,
            'pod': str,
            'requested_size_gib': str,
            'state': str,
            'storage_type': str,
            'volume': str
        }

        self.attribute_map = {
            'allowed_clients': 'allowedClients',
            'id': 'id',
            'labels': 'labels',
            'name': 'name',
            'nfs_share_id': 'nfsShareId',
            'pod': 'pod',
            'requested_size_gib': 'requestedSizeGib',
            'state': 'state',
            'storage_type': 'storageType',
            'volume': 'volume'
        }

        self._allowed_clients = allowed_clients
        self._id = id
        self._labels = labels
        self._name = name
        self._nfs_share_id = nfs_share_id
        self._pod = pod
        self._requested_size_gib = requested_size_gib
        self._state = state
        self._storage_type = storage_type
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NfsShare':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NfsShare of this NfsShare.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_clients(self):
        """Gets the allowed_clients of this NfsShare.

        List of allowed access points.

        :return: The allowed_clients of this NfsShare.
        :rtype: List[AllowedClient]
        """
        return self._allowed_clients

    @allowed_clients.setter
    def allowed_clients(self, allowed_clients):
        """Sets the allowed_clients of this NfsShare.

        List of allowed access points.

        :param allowed_clients: The allowed_clients of this NfsShare.
        :type allowed_clients: List[AllowedClient]
        """

        self._allowed_clients = allowed_clients

    @property
    def id(self):
        """Gets the id of this NfsShare.

        Output only. An identifier for the NFS share, generated by the backend. This is the same value as nfs_share_id and will replace it in the future.

        :return: The id of this NfsShare.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NfsShare.

        Output only. An identifier for the NFS share, generated by the backend. This is the same value as nfs_share_id and will replace it in the future.

        :param id: The id of this NfsShare.
        :type id: str
        """

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this NfsShare.

        Labels as key value pairs.

        :return: The labels of this NfsShare.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this NfsShare.

        Labels as key value pairs.

        :param labels: The labels of this NfsShare.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this NfsShare.

        Immutable. The name of the NFS share.

        :return: The name of this NfsShare.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NfsShare.

        Immutable. The name of the NFS share.

        :param name: The name of this NfsShare.
        :type name: str
        """

        self._name = name

    @property
    def nfs_share_id(self):
        """Gets the nfs_share_id of this NfsShare.

        Output only. An identifier for the NFS share, generated by the backend. This field will be deprecated in the future, use `id` instead.

        :return: The nfs_share_id of this NfsShare.
        :rtype: str
        """
        return self._nfs_share_id

    @nfs_share_id.setter
    def nfs_share_id(self, nfs_share_id):
        """Sets the nfs_share_id of this NfsShare.

        Output only. An identifier for the NFS share, generated by the backend. This field will be deprecated in the future, use `id` instead.

        :param nfs_share_id: The nfs_share_id of this NfsShare.
        :type nfs_share_id: str
        """

        self._nfs_share_id = nfs_share_id

    @property
    def pod(self):
        """Gets the pod of this NfsShare.

        Immutable. Pod name. Pod is an independent part of infrastructure. NFSShare can only be connected to the assets (networks, instances) allocated in the same pod.

        :return: The pod of this NfsShare.
        :rtype: str
        """
        return self._pod

    @pod.setter
    def pod(self, pod):
        """Sets the pod of this NfsShare.

        Immutable. Pod name. Pod is an independent part of infrastructure. NFSShare can only be connected to the assets (networks, instances) allocated in the same pod.

        :param pod: The pod of this NfsShare.
        :type pod: str
        """

        self._pod = pod

    @property
    def requested_size_gib(self):
        """Gets the requested_size_gib of this NfsShare.

        The requested size, in GiB.

        :return: The requested_size_gib of this NfsShare.
        :rtype: str
        """
        return self._requested_size_gib

    @requested_size_gib.setter
    def requested_size_gib(self, requested_size_gib):
        """Sets the requested_size_gib of this NfsShare.

        The requested size, in GiB.

        :param requested_size_gib: The requested_size_gib of this NfsShare.
        :type requested_size_gib: str
        """

        self._requested_size_gib = requested_size_gib

    @property
    def state(self):
        """Gets the state of this NfsShare.

        Output only. The state of the NFS share.

        :return: The state of this NfsShare.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NfsShare.

        Output only. The state of the NFS share.

        :param state: The state of this NfsShare.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PROVISIONED", "CREATING", "UPDATING", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def storage_type(self):
        """Gets the storage_type of this NfsShare.

        Immutable. The storage type of the underlying volume.

        :return: The storage_type of this NfsShare.
        :rtype: str
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this NfsShare.

        Immutable. The storage type of the underlying volume.

        :param storage_type: The storage_type of this NfsShare.
        :type storage_type: str
        """
        allowed_values = ["STORAGE_TYPE_UNSPECIFIED", "SSD", "HDD"]  # noqa: E501
        if storage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_type` ({0}), must be one of {1}"
                .format(storage_type, allowed_values)
            )

        self._storage_type = storage_type

    @property
    def volume(self):
        """Gets the volume of this NfsShare.

        Output only. The underlying volume of the share. Created automatically during provisioning.

        :return: The volume of this NfsShare.
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this NfsShare.

        Output only. The underlying volume of the share. Created automatically during provisioning.

        :param volume: The volume of this NfsShare.
        :type volume: str
        """

        self._volume = volume
