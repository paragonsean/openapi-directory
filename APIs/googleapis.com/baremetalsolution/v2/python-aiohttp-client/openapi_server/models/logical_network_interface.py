# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LogicalNetworkInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_gateway: bool=None, id: str=None, ip_address: str=None, network: str=None, network_type: str=None):
        """LogicalNetworkInterface - a model defined in OpenAPI

        :param default_gateway: The default_gateway of this LogicalNetworkInterface.
        :param id: The id of this LogicalNetworkInterface.
        :param ip_address: The ip_address of this LogicalNetworkInterface.
        :param network: The network of this LogicalNetworkInterface.
        :param network_type: The network_type of this LogicalNetworkInterface.
        """
        self.openapi_types = {
            'default_gateway': bool,
            'id': str,
            'ip_address': str,
            'network': str,
            'network_type': str
        }

        self.attribute_map = {
            'default_gateway': 'defaultGateway',
            'id': 'id',
            'ip_address': 'ipAddress',
            'network': 'network',
            'network_type': 'networkType'
        }

        self._default_gateway = default_gateway
        self._id = id
        self._ip_address = ip_address
        self._network = network
        self._network_type = network_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogicalNetworkInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogicalNetworkInterface of this LogicalNetworkInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_gateway(self):
        """Gets the default_gateway of this LogicalNetworkInterface.

        Whether this interface is the default gateway for the instance. Only one interface can be the default gateway for the instance.

        :return: The default_gateway of this LogicalNetworkInterface.
        :rtype: bool
        """
        return self._default_gateway

    @default_gateway.setter
    def default_gateway(self, default_gateway):
        """Sets the default_gateway of this LogicalNetworkInterface.

        Whether this interface is the default gateway for the instance. Only one interface can be the default gateway for the instance.

        :param default_gateway: The default_gateway of this LogicalNetworkInterface.
        :type default_gateway: bool
        """

        self._default_gateway = default_gateway

    @property
    def id(self):
        """Gets the id of this LogicalNetworkInterface.

        An identifier for the `Network`, generated by the backend.

        :return: The id of this LogicalNetworkInterface.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LogicalNetworkInterface.

        An identifier for the `Network`, generated by the backend.

        :param id: The id of this LogicalNetworkInterface.
        :type id: str
        """

        self._id = id

    @property
    def ip_address(self):
        """Gets the ip_address of this LogicalNetworkInterface.

        IP address in the network

        :return: The ip_address of this LogicalNetworkInterface.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this LogicalNetworkInterface.

        IP address in the network

        :param ip_address: The ip_address of this LogicalNetworkInterface.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def network(self):
        """Gets the network of this LogicalNetworkInterface.

        Name of the network

        :return: The network of this LogicalNetworkInterface.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this LogicalNetworkInterface.

        Name of the network

        :param network: The network of this LogicalNetworkInterface.
        :type network: str
        """

        self._network = network

    @property
    def network_type(self):
        """Gets the network_type of this LogicalNetworkInterface.

        Type of network.

        :return: The network_type of this LogicalNetworkInterface.
        :rtype: str
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type):
        """Sets the network_type of this LogicalNetworkInterface.

        Type of network.

        :param network_type: The network_type of this LogicalNetworkInterface.
        :type network_type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "CLIENT", "PRIVATE"]  # noqa: E501
        if network_type not in allowed_values:
            raise ValueError(
                "Invalid value for `network_type` ({0}), must be one of {1}"
                .format(network_type, allowed_values)
            )

        self._network_type = network_type
