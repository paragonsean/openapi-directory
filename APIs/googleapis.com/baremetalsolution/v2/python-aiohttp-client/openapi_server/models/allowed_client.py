# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AllowedClient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_dev: bool=None, allow_suid: bool=None, allowed_clients_cidr: str=None, mount_permissions: str=None, network: str=None, nfs_path: str=None, no_root_squash: bool=None, share_ip: str=None):
        """AllowedClient - a model defined in OpenAPI

        :param allow_dev: The allow_dev of this AllowedClient.
        :param allow_suid: The allow_suid of this AllowedClient.
        :param allowed_clients_cidr: The allowed_clients_cidr of this AllowedClient.
        :param mount_permissions: The mount_permissions of this AllowedClient.
        :param network: The network of this AllowedClient.
        :param nfs_path: The nfs_path of this AllowedClient.
        :param no_root_squash: The no_root_squash of this AllowedClient.
        :param share_ip: The share_ip of this AllowedClient.
        """
        self.openapi_types = {
            'allow_dev': bool,
            'allow_suid': bool,
            'allowed_clients_cidr': str,
            'mount_permissions': str,
            'network': str,
            'nfs_path': str,
            'no_root_squash': bool,
            'share_ip': str
        }

        self.attribute_map = {
            'allow_dev': 'allowDev',
            'allow_suid': 'allowSuid',
            'allowed_clients_cidr': 'allowedClientsCidr',
            'mount_permissions': 'mountPermissions',
            'network': 'network',
            'nfs_path': 'nfsPath',
            'no_root_squash': 'noRootSquash',
            'share_ip': 'shareIp'
        }

        self._allow_dev = allow_dev
        self._allow_suid = allow_suid
        self._allowed_clients_cidr = allowed_clients_cidr
        self._mount_permissions = mount_permissions
        self._network = network
        self._nfs_path = nfs_path
        self._no_root_squash = no_root_squash
        self._share_ip = share_ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AllowedClient':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AllowedClient of this AllowedClient.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_dev(self):
        """Gets the allow_dev of this AllowedClient.

        Allow dev flag. Which controls whether to allow creation of devices.

        :return: The allow_dev of this AllowedClient.
        :rtype: bool
        """
        return self._allow_dev

    @allow_dev.setter
    def allow_dev(self, allow_dev):
        """Sets the allow_dev of this AllowedClient.

        Allow dev flag. Which controls whether to allow creation of devices.

        :param allow_dev: The allow_dev of this AllowedClient.
        :type allow_dev: bool
        """

        self._allow_dev = allow_dev

    @property
    def allow_suid(self):
        """Gets the allow_suid of this AllowedClient.

        Allow the setuid flag.

        :return: The allow_suid of this AllowedClient.
        :rtype: bool
        """
        return self._allow_suid

    @allow_suid.setter
    def allow_suid(self, allow_suid):
        """Sets the allow_suid of this AllowedClient.

        Allow the setuid flag.

        :param allow_suid: The allow_suid of this AllowedClient.
        :type allow_suid: bool
        """

        self._allow_suid = allow_suid

    @property
    def allowed_clients_cidr(self):
        """Gets the allowed_clients_cidr of this AllowedClient.

        The subnet of IP addresses permitted to access the share.

        :return: The allowed_clients_cidr of this AllowedClient.
        :rtype: str
        """
        return self._allowed_clients_cidr

    @allowed_clients_cidr.setter
    def allowed_clients_cidr(self, allowed_clients_cidr):
        """Sets the allowed_clients_cidr of this AllowedClient.

        The subnet of IP addresses permitted to access the share.

        :param allowed_clients_cidr: The allowed_clients_cidr of this AllowedClient.
        :type allowed_clients_cidr: str
        """

        self._allowed_clients_cidr = allowed_clients_cidr

    @property
    def mount_permissions(self):
        """Gets the mount_permissions of this AllowedClient.

        Mount permissions.

        :return: The mount_permissions of this AllowedClient.
        :rtype: str
        """
        return self._mount_permissions

    @mount_permissions.setter
    def mount_permissions(self, mount_permissions):
        """Sets the mount_permissions of this AllowedClient.

        Mount permissions.

        :param mount_permissions: The mount_permissions of this AllowedClient.
        :type mount_permissions: str
        """
        allowed_values = ["MOUNT_PERMISSIONS_UNSPECIFIED", "READ", "READ_WRITE"]  # noqa: E501
        if mount_permissions not in allowed_values:
            raise ValueError(
                "Invalid value for `mount_permissions` ({0}), must be one of {1}"
                .format(mount_permissions, allowed_values)
            )

        self._mount_permissions = mount_permissions

    @property
    def network(self):
        """Gets the network of this AllowedClient.

        The network the access point sits on.

        :return: The network of this AllowedClient.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this AllowedClient.

        The network the access point sits on.

        :param network: The network of this AllowedClient.
        :type network: str
        """

        self._network = network

    @property
    def nfs_path(self):
        """Gets the nfs_path of this AllowedClient.

        Output only. The path to access NFS, in format shareIP:/InstanceID InstanceID is the generated ID instead of customer provided name. example like \"10.0.0.0:/g123456789-nfs001\"

        :return: The nfs_path of this AllowedClient.
        :rtype: str
        """
        return self._nfs_path

    @nfs_path.setter
    def nfs_path(self, nfs_path):
        """Sets the nfs_path of this AllowedClient.

        Output only. The path to access NFS, in format shareIP:/InstanceID InstanceID is the generated ID instead of customer provided name. example like \"10.0.0.0:/g123456789-nfs001\"

        :param nfs_path: The nfs_path of this AllowedClient.
        :type nfs_path: str
        """

        self._nfs_path = nfs_path

    @property
    def no_root_squash(self):
        """Gets the no_root_squash of this AllowedClient.

        Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.

        :return: The no_root_squash of this AllowedClient.
        :rtype: bool
        """
        return self._no_root_squash

    @no_root_squash.setter
    def no_root_squash(self, no_root_squash):
        """Sets the no_root_squash of this AllowedClient.

        Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.

        :param no_root_squash: The no_root_squash of this AllowedClient.
        :type no_root_squash: bool
        """

        self._no_root_squash = no_root_squash

    @property
    def share_ip(self):
        """Gets the share_ip of this AllowedClient.

        Output only. The IP address of the share on this network. Assigned automatically during provisioning based on the network's services_cidr.

        :return: The share_ip of this AllowedClient.
        :rtype: str
        """
        return self._share_ip

    @share_ip.setter
    def share_ip(self, share_ip):
        """Sets the share_ip of this AllowedClient.

        Output only. The IP address of the share on this network. Assigned automatically during provisioning based on the network's services_cidr.

        :param share_ip: The share_ip of this AllowedClient.
        :type share_ip: str
        """

        self._share_ip = share_ip
