# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.network_address_reservation import NetworkAddressReservation
from openapi_server.models.network_mount_point import NetworkMountPoint
from openapi_server.models.vrf import VRF
from openapi_server import util


class Network(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cidr: str=None, gateway_ip: str=None, id: str=None, ip_address: str=None, jumbo_frames_enabled: bool=None, labels: Dict[str, str]=None, mac_address: List[str]=None, mount_points: List[NetworkMountPoint]=None, name: str=None, pod: str=None, reservations: List[NetworkAddressReservation]=None, services_cidr: str=None, state: str=None, type: str=None, vlan_id: str=None, vrf: VRF=None, vrf_attachment: str=None):
        """Network - a model defined in OpenAPI

        :param cidr: The cidr of this Network.
        :param gateway_ip: The gateway_ip of this Network.
        :param id: The id of this Network.
        :param ip_address: The ip_address of this Network.
        :param jumbo_frames_enabled: The jumbo_frames_enabled of this Network.
        :param labels: The labels of this Network.
        :param mac_address: The mac_address of this Network.
        :param mount_points: The mount_points of this Network.
        :param name: The name of this Network.
        :param pod: The pod of this Network.
        :param reservations: The reservations of this Network.
        :param services_cidr: The services_cidr of this Network.
        :param state: The state of this Network.
        :param type: The type of this Network.
        :param vlan_id: The vlan_id of this Network.
        :param vrf: The vrf of this Network.
        :param vrf_attachment: The vrf_attachment of this Network.
        """
        self.openapi_types = {
            'cidr': str,
            'gateway_ip': str,
            'id': str,
            'ip_address': str,
            'jumbo_frames_enabled': bool,
            'labels': Dict[str, str],
            'mac_address': List[str],
            'mount_points': List[NetworkMountPoint],
            'name': str,
            'pod': str,
            'reservations': List[NetworkAddressReservation],
            'services_cidr': str,
            'state': str,
            'type': str,
            'vlan_id': str,
            'vrf': VRF,
            'vrf_attachment': str
        }

        self.attribute_map = {
            'cidr': 'cidr',
            'gateway_ip': 'gatewayIp',
            'id': 'id',
            'ip_address': 'ipAddress',
            'jumbo_frames_enabled': 'jumboFramesEnabled',
            'labels': 'labels',
            'mac_address': 'macAddress',
            'mount_points': 'mountPoints',
            'name': 'name',
            'pod': 'pod',
            'reservations': 'reservations',
            'services_cidr': 'servicesCidr',
            'state': 'state',
            'type': 'type',
            'vlan_id': 'vlanId',
            'vrf': 'vrf',
            'vrf_attachment': 'vrfAttachment'
        }

        self._cidr = cidr
        self._gateway_ip = gateway_ip
        self._id = id
        self._ip_address = ip_address
        self._jumbo_frames_enabled = jumbo_frames_enabled
        self._labels = labels
        self._mac_address = mac_address
        self._mount_points = mount_points
        self._name = name
        self._pod = pod
        self._reservations = reservations
        self._services_cidr = services_cidr
        self._state = state
        self._type = type
        self._vlan_id = vlan_id
        self._vrf = vrf
        self._vrf_attachment = vrf_attachment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Network':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Network of this Network.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cidr(self):
        """Gets the cidr of this Network.

        The cidr of the Network.

        :return: The cidr of this Network.
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this Network.

        The cidr of the Network.

        :param cidr: The cidr of this Network.
        :type cidr: str
        """

        self._cidr = cidr

    @property
    def gateway_ip(self):
        """Gets the gateway_ip of this Network.

        Output only. Gateway ip address.

        :return: The gateway_ip of this Network.
        :rtype: str
        """
        return self._gateway_ip

    @gateway_ip.setter
    def gateway_ip(self, gateway_ip):
        """Sets the gateway_ip of this Network.

        Output only. Gateway ip address.

        :param gateway_ip: The gateway_ip of this Network.
        :type gateway_ip: str
        """

        self._gateway_ip = gateway_ip

    @property
    def id(self):
        """Gets the id of this Network.

        An identifier for the `Network`, generated by the backend.

        :return: The id of this Network.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Network.

        An identifier for the `Network`, generated by the backend.

        :param id: The id of this Network.
        :type id: str
        """

        self._id = id

    @property
    def ip_address(self):
        """Gets the ip_address of this Network.

        IP address configured.

        :return: The ip_address of this Network.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this Network.

        IP address configured.

        :param ip_address: The ip_address of this Network.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def jumbo_frames_enabled(self):
        """Gets the jumbo_frames_enabled of this Network.

        Whether network uses standard frames or jumbo ones.

        :return: The jumbo_frames_enabled of this Network.
        :rtype: bool
        """
        return self._jumbo_frames_enabled

    @jumbo_frames_enabled.setter
    def jumbo_frames_enabled(self, jumbo_frames_enabled):
        """Sets the jumbo_frames_enabled of this Network.

        Whether network uses standard frames or jumbo ones.

        :param jumbo_frames_enabled: The jumbo_frames_enabled of this Network.
        :type jumbo_frames_enabled: bool
        """

        self._jumbo_frames_enabled = jumbo_frames_enabled

    @property
    def labels(self):
        """Gets the labels of this Network.

        Labels as key value pairs.

        :return: The labels of this Network.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Network.

        Labels as key value pairs.

        :param labels: The labels of this Network.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def mac_address(self):
        """Gets the mac_address of this Network.

        List of physical interfaces.

        :return: The mac_address of this Network.
        :rtype: List[str]
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this Network.

        List of physical interfaces.

        :param mac_address: The mac_address of this Network.
        :type mac_address: List[str]
        """

        self._mac_address = mac_address

    @property
    def mount_points(self):
        """Gets the mount_points of this Network.

        Input only. List of mount points to attach the network to.

        :return: The mount_points of this Network.
        :rtype: List[NetworkMountPoint]
        """
        return self._mount_points

    @mount_points.setter
    def mount_points(self, mount_points):
        """Sets the mount_points of this Network.

        Input only. List of mount points to attach the network to.

        :param mount_points: The mount_points of this Network.
        :type mount_points: List[NetworkMountPoint]
        """

        self._mount_points = mount_points

    @property
    def name(self):
        """Gets the name of this Network.

        Output only. The resource name of this `Network`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/networks/{network}`

        :return: The name of this Network.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Network.

        Output only. The resource name of this `Network`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/networks/{network}`

        :param name: The name of this Network.
        :type name: str
        """

        self._name = name

    @property
    def pod(self):
        """Gets the pod of this Network.

        Immutable. Pod name. Pod is an independent part of infrastructure. Network can only be connected to the assets (instances, nfsshares) allocated in the same pod.

        :return: The pod of this Network.
        :rtype: str
        """
        return self._pod

    @pod.setter
    def pod(self, pod):
        """Sets the pod of this Network.

        Immutable. Pod name. Pod is an independent part of infrastructure. Network can only be connected to the assets (instances, nfsshares) allocated in the same pod.

        :param pod: The pod of this Network.
        :type pod: str
        """

        self._pod = pod

    @property
    def reservations(self):
        """Gets the reservations of this Network.

        List of IP address reservations in this network. When updating this field, an error will be generated if a reservation conflicts with an IP address already allocated to a physical server.

        :return: The reservations of this Network.
        :rtype: List[NetworkAddressReservation]
        """
        return self._reservations

    @reservations.setter
    def reservations(self, reservations):
        """Sets the reservations of this Network.

        List of IP address reservations in this network. When updating this field, an error will be generated if a reservation conflicts with an IP address already allocated to a physical server.

        :param reservations: The reservations of this Network.
        :type reservations: List[NetworkAddressReservation]
        """

        self._reservations = reservations

    @property
    def services_cidr(self):
        """Gets the services_cidr of this Network.

        IP range for reserved for services (e.g. NFS).

        :return: The services_cidr of this Network.
        :rtype: str
        """
        return self._services_cidr

    @services_cidr.setter
    def services_cidr(self, services_cidr):
        """Sets the services_cidr of this Network.

        IP range for reserved for services (e.g. NFS).

        :param services_cidr: The services_cidr of this Network.
        :type services_cidr: str
        """

        self._services_cidr = services_cidr

    @property
    def state(self):
        """Gets the state of this Network.

        The Network state.

        :return: The state of this Network.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Network.

        The Network state.

        :param state: The state of this Network.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PROVISIONING", "PROVISIONED", "DEPROVISIONING", "UPDATING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this Network.

        The type of this network.

        :return: The type of this Network.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Network.

        The type of this network.

        :param type: The type of this Network.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "CLIENT", "PRIVATE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def vlan_id(self):
        """Gets the vlan_id of this Network.

        The vlan id of the Network.

        :return: The vlan_id of this Network.
        :rtype: str
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this Network.

        The vlan id of the Network.

        :param vlan_id: The vlan_id of this Network.
        :type vlan_id: str
        """

        self._vlan_id = vlan_id

    @property
    def vrf(self):
        """Gets the vrf of this Network.


        :return: The vrf of this Network.
        :rtype: VRF
        """
        return self._vrf

    @vrf.setter
    def vrf(self, vrf):
        """Sets the vrf of this Network.


        :param vrf: The vrf of this Network.
        :type vrf: VRF
        """

        self._vrf = vrf

    @property
    def vrf_attachment(self):
        """Gets the vrf_attachment of this Network.

        Optional. The name of a pre-existing Vrf that the network should be attached to. Format is `vrfs/{vrf}`.

        :return: The vrf_attachment of this Network.
        :rtype: str
        """
        return self._vrf_attachment

    @vrf_attachment.setter
    def vrf_attachment(self, vrf_attachment):
        """Sets the vrf_attachment of this Network.

        Optional. The name of a pre-existing Vrf that the network should be attached to. Format is `vrfs/{vrf}`.

        :param vrf_attachment: The vrf_attachment of this Network.
        :type vrf_attachment: str
        """

        self._vrf_attachment = vrf_attachment
