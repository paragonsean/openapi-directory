# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OSImage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applicable_instance_types: List[str]=None, code: str=None, description: str=None, name: str=None, supported_network_templates: List[str]=None):
        """OSImage - a model defined in OpenAPI

        :param applicable_instance_types: The applicable_instance_types of this OSImage.
        :param code: The code of this OSImage.
        :param description: The description of this OSImage.
        :param name: The name of this OSImage.
        :param supported_network_templates: The supported_network_templates of this OSImage.
        """
        self.openapi_types = {
            'applicable_instance_types': List[str],
            'code': str,
            'description': str,
            'name': str,
            'supported_network_templates': List[str]
        }

        self.attribute_map = {
            'applicable_instance_types': 'applicableInstanceTypes',
            'code': 'code',
            'description': 'description',
            'name': 'name',
            'supported_network_templates': 'supportedNetworkTemplates'
        }

        self._applicable_instance_types = applicable_instance_types
        self._code = code
        self._description = description
        self._name = name
        self._supported_network_templates = supported_network_templates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OSImage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OSImage of this OSImage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applicable_instance_types(self):
        """Gets the applicable_instance_types of this OSImage.

        Instance types this image is applicable to. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)

        :return: The applicable_instance_types of this OSImage.
        :rtype: List[str]
        """
        return self._applicable_instance_types

    @applicable_instance_types.setter
    def applicable_instance_types(self, applicable_instance_types):
        """Sets the applicable_instance_types of this OSImage.

        Instance types this image is applicable to. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)

        :param applicable_instance_types: The applicable_instance_types of this OSImage.
        :type applicable_instance_types: List[str]
        """

        self._applicable_instance_types = applicable_instance_types

    @property
    def code(self):
        """Gets the code of this OSImage.

        OS Image code.

        :return: The code of this OSImage.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this OSImage.

        OS Image code.

        :param code: The code of this OSImage.
        :type code: str
        """

        self._code = code

    @property
    def description(self):
        """Gets the description of this OSImage.

        OS Image description.

        :return: The description of this OSImage.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OSImage.

        OS Image description.

        :param description: The description of this OSImage.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this OSImage.

        Output only. OS Image's unique name.

        :return: The name of this OSImage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OSImage.

        Output only. OS Image's unique name.

        :param name: The name of this OSImage.
        :type name: str
        """

        self._name = name

    @property
    def supported_network_templates(self):
        """Gets the supported_network_templates of this OSImage.

        Network templates that can be used with this OS Image.

        :return: The supported_network_templates of this OSImage.
        :rtype: List[str]
        """
        return self._supported_network_templates

    @supported_network_templates.setter
    def supported_network_templates(self, supported_network_templates):
        """Sets the supported_network_templates of this OSImage.

        Network templates that can be used with this OS Image.

        :param supported_network_templates: The supported_network_templates of this OSImage.
        :type supported_network_templates: List[str]
        """

        self._supported_network_templates = supported_network_templates
