# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_quota import InstanceQuota
from openapi_server import util


class ProvisioningQuota(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_type: str=None, available_count: int=None, gcp_service: str=None, instance_quota: InstanceQuota=None, location: str=None, name: str=None, network_bandwidth: str=None, server_count: str=None, storage_gib: str=None):
        """ProvisioningQuota - a model defined in OpenAPI

        :param asset_type: The asset_type of this ProvisioningQuota.
        :param available_count: The available_count of this ProvisioningQuota.
        :param gcp_service: The gcp_service of this ProvisioningQuota.
        :param instance_quota: The instance_quota of this ProvisioningQuota.
        :param location: The location of this ProvisioningQuota.
        :param name: The name of this ProvisioningQuota.
        :param network_bandwidth: The network_bandwidth of this ProvisioningQuota.
        :param server_count: The server_count of this ProvisioningQuota.
        :param storage_gib: The storage_gib of this ProvisioningQuota.
        """
        self.openapi_types = {
            'asset_type': str,
            'available_count': int,
            'gcp_service': str,
            'instance_quota': InstanceQuota,
            'location': str,
            'name': str,
            'network_bandwidth': str,
            'server_count': str,
            'storage_gib': str
        }

        self.attribute_map = {
            'asset_type': 'assetType',
            'available_count': 'availableCount',
            'gcp_service': 'gcpService',
            'instance_quota': 'instanceQuota',
            'location': 'location',
            'name': 'name',
            'network_bandwidth': 'networkBandwidth',
            'server_count': 'serverCount',
            'storage_gib': 'storageGib'
        }

        self._asset_type = asset_type
        self._available_count = available_count
        self._gcp_service = gcp_service
        self._instance_quota = instance_quota
        self._location = location
        self._name = name
        self._network_bandwidth = network_bandwidth
        self._server_count = server_count
        self._storage_gib = storage_gib

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProvisioningQuota':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProvisioningQuota of this ProvisioningQuota.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_type(self):
        """Gets the asset_type of this ProvisioningQuota.

        The asset type of this provisioning quota.

        :return: The asset_type of this ProvisioningQuota.
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this ProvisioningQuota.

        The asset type of this provisioning quota.

        :param asset_type: The asset_type of this ProvisioningQuota.
        :type asset_type: str
        """
        allowed_values = ["ASSET_TYPE_UNSPECIFIED", "ASSET_TYPE_SERVER", "ASSET_TYPE_STORAGE", "ASSET_TYPE_NETWORK"]  # noqa: E501
        if asset_type not in allowed_values:
            raise ValueError(
                "Invalid value for `asset_type` ({0}), must be one of {1}"
                .format(asset_type, allowed_values)
            )

        self._asset_type = asset_type

    @property
    def available_count(self):
        """Gets the available_count of this ProvisioningQuota.

        The available count of the provisioning quota.

        :return: The available_count of this ProvisioningQuota.
        :rtype: int
        """
        return self._available_count

    @available_count.setter
    def available_count(self, available_count):
        """Sets the available_count of this ProvisioningQuota.

        The available count of the provisioning quota.

        :param available_count: The available_count of this ProvisioningQuota.
        :type available_count: int
        """

        self._available_count = available_count

    @property
    def gcp_service(self):
        """Gets the gcp_service of this ProvisioningQuota.

        The gcp service of the provisioning quota.

        :return: The gcp_service of this ProvisioningQuota.
        :rtype: str
        """
        return self._gcp_service

    @gcp_service.setter
    def gcp_service(self, gcp_service):
        """Sets the gcp_service of this ProvisioningQuota.

        The gcp service of the provisioning quota.

        :param gcp_service: The gcp_service of this ProvisioningQuota.
        :type gcp_service: str
        """

        self._gcp_service = gcp_service

    @property
    def instance_quota(self):
        """Gets the instance_quota of this ProvisioningQuota.


        :return: The instance_quota of this ProvisioningQuota.
        :rtype: InstanceQuota
        """
        return self._instance_quota

    @instance_quota.setter
    def instance_quota(self, instance_quota):
        """Sets the instance_quota of this ProvisioningQuota.


        :param instance_quota: The instance_quota of this ProvisioningQuota.
        :type instance_quota: InstanceQuota
        """

        self._instance_quota = instance_quota

    @property
    def location(self):
        """Gets the location of this ProvisioningQuota.

        The specific location of the provisioining quota.

        :return: The location of this ProvisioningQuota.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ProvisioningQuota.

        The specific location of the provisioining quota.

        :param location: The location of this ProvisioningQuota.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this ProvisioningQuota.

        Output only. The name of the provisioning quota.

        :return: The name of this ProvisioningQuota.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProvisioningQuota.

        Output only. The name of the provisioning quota.

        :param name: The name of this ProvisioningQuota.
        :type name: str
        """

        self._name = name

    @property
    def network_bandwidth(self):
        """Gets the network_bandwidth of this ProvisioningQuota.

        Network bandwidth, Gbps

        :return: The network_bandwidth of this ProvisioningQuota.
        :rtype: str
        """
        return self._network_bandwidth

    @network_bandwidth.setter
    def network_bandwidth(self, network_bandwidth):
        """Sets the network_bandwidth of this ProvisioningQuota.

        Network bandwidth, Gbps

        :param network_bandwidth: The network_bandwidth of this ProvisioningQuota.
        :type network_bandwidth: str
        """

        self._network_bandwidth = network_bandwidth

    @property
    def server_count(self):
        """Gets the server_count of this ProvisioningQuota.

        Server count.

        :return: The server_count of this ProvisioningQuota.
        :rtype: str
        """
        return self._server_count

    @server_count.setter
    def server_count(self, server_count):
        """Sets the server_count of this ProvisioningQuota.

        Server count.

        :param server_count: The server_count of this ProvisioningQuota.
        :type server_count: str
        """

        self._server_count = server_count

    @property
    def storage_gib(self):
        """Gets the storage_gib of this ProvisioningQuota.

        Storage size (GB).

        :return: The storage_gib of this ProvisioningQuota.
        :rtype: str
        """
        return self._storage_gib

    @storage_gib.setter
    def storage_gib(self, storage_gib):
        """Sets the storage_gib of this ProvisioningQuota.

        Storage size (GB).

        :param storage_gib: The storage_gib of this ProvisioningQuota.
        :type storage_gib: str
        """

        self._storage_gib = storage_gib
