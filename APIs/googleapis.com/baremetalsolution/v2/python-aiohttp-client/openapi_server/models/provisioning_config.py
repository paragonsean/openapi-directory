# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_config import InstanceConfig
from openapi_server.models.network_config import NetworkConfig
from openapi_server.models.volume_config import VolumeConfig
from openapi_server import util


class ProvisioningConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_console_uri: str=None, custom_id: str=None, email: str=None, handover_service_account: str=None, instances: List[InstanceConfig]=None, location: str=None, name: str=None, networks: List[NetworkConfig]=None, pod: str=None, state: str=None, status_message: str=None, ticket_id: str=None, update_time: str=None, volumes: List[VolumeConfig]=None, vpc_sc_enabled: bool=None):
        """ProvisioningConfig - a model defined in OpenAPI

        :param cloud_console_uri: The cloud_console_uri of this ProvisioningConfig.
        :param custom_id: The custom_id of this ProvisioningConfig.
        :param email: The email of this ProvisioningConfig.
        :param handover_service_account: The handover_service_account of this ProvisioningConfig.
        :param instances: The instances of this ProvisioningConfig.
        :param location: The location of this ProvisioningConfig.
        :param name: The name of this ProvisioningConfig.
        :param networks: The networks of this ProvisioningConfig.
        :param pod: The pod of this ProvisioningConfig.
        :param state: The state of this ProvisioningConfig.
        :param status_message: The status_message of this ProvisioningConfig.
        :param ticket_id: The ticket_id of this ProvisioningConfig.
        :param update_time: The update_time of this ProvisioningConfig.
        :param volumes: The volumes of this ProvisioningConfig.
        :param vpc_sc_enabled: The vpc_sc_enabled of this ProvisioningConfig.
        """
        self.openapi_types = {
            'cloud_console_uri': str,
            'custom_id': str,
            'email': str,
            'handover_service_account': str,
            'instances': List[InstanceConfig],
            'location': str,
            'name': str,
            'networks': List[NetworkConfig],
            'pod': str,
            'state': str,
            'status_message': str,
            'ticket_id': str,
            'update_time': str,
            'volumes': List[VolumeConfig],
            'vpc_sc_enabled': bool
        }

        self.attribute_map = {
            'cloud_console_uri': 'cloudConsoleUri',
            'custom_id': 'customId',
            'email': 'email',
            'handover_service_account': 'handoverServiceAccount',
            'instances': 'instances',
            'location': 'location',
            'name': 'name',
            'networks': 'networks',
            'pod': 'pod',
            'state': 'state',
            'status_message': 'statusMessage',
            'ticket_id': 'ticketId',
            'update_time': 'updateTime',
            'volumes': 'volumes',
            'vpc_sc_enabled': 'vpcScEnabled'
        }

        self._cloud_console_uri = cloud_console_uri
        self._custom_id = custom_id
        self._email = email
        self._handover_service_account = handover_service_account
        self._instances = instances
        self._location = location
        self._name = name
        self._networks = networks
        self._pod = pod
        self._state = state
        self._status_message = status_message
        self._ticket_id = ticket_id
        self._update_time = update_time
        self._volumes = volumes
        self._vpc_sc_enabled = vpc_sc_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProvisioningConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProvisioningConfig of this ProvisioningConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_console_uri(self):
        """Gets the cloud_console_uri of this ProvisioningConfig.

        Output only. URI to Cloud Console UI view of this provisioning config.

        :return: The cloud_console_uri of this ProvisioningConfig.
        :rtype: str
        """
        return self._cloud_console_uri

    @cloud_console_uri.setter
    def cloud_console_uri(self, cloud_console_uri):
        """Sets the cloud_console_uri of this ProvisioningConfig.

        Output only. URI to Cloud Console UI view of this provisioning config.

        :param cloud_console_uri: The cloud_console_uri of this ProvisioningConfig.
        :type cloud_console_uri: str
        """

        self._cloud_console_uri = cloud_console_uri

    @property
    def custom_id(self):
        """Gets the custom_id of this ProvisioningConfig.

        Optional. The user-defined identifier of the provisioning config.

        :return: The custom_id of this ProvisioningConfig.
        :rtype: str
        """
        return self._custom_id

    @custom_id.setter
    def custom_id(self, custom_id):
        """Sets the custom_id of this ProvisioningConfig.

        Optional. The user-defined identifier of the provisioning config.

        :param custom_id: The custom_id of this ProvisioningConfig.
        :type custom_id: str
        """

        self._custom_id = custom_id

    @property
    def email(self):
        """Gets the email of this ProvisioningConfig.

        Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.

        :return: The email of this ProvisioningConfig.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ProvisioningConfig.

        Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.

        :param email: The email of this ProvisioningConfig.
        :type email: str
        """

        self._email = email

    @property
    def handover_service_account(self):
        """Gets the handover_service_account of this ProvisioningConfig.

        A service account to enable customers to access instance credentials upon handover.

        :return: The handover_service_account of this ProvisioningConfig.
        :rtype: str
        """
        return self._handover_service_account

    @handover_service_account.setter
    def handover_service_account(self, handover_service_account):
        """Sets the handover_service_account of this ProvisioningConfig.

        A service account to enable customers to access instance credentials upon handover.

        :param handover_service_account: The handover_service_account of this ProvisioningConfig.
        :type handover_service_account: str
        """

        self._handover_service_account = handover_service_account

    @property
    def instances(self):
        """Gets the instances of this ProvisioningConfig.

        Instances to be created.

        :return: The instances of this ProvisioningConfig.
        :rtype: List[InstanceConfig]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this ProvisioningConfig.

        Instances to be created.

        :param instances: The instances of this ProvisioningConfig.
        :type instances: List[InstanceConfig]
        """

        self._instances = instances

    @property
    def location(self):
        """Gets the location of this ProvisioningConfig.

        Optional. Location name of this ProvisioningConfig. It is optional only for Intake UI transition period.

        :return: The location of this ProvisioningConfig.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ProvisioningConfig.

        Optional. Location name of this ProvisioningConfig. It is optional only for Intake UI transition period.

        :param location: The location of this ProvisioningConfig.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this ProvisioningConfig.

        Output only. The system-generated name of the provisioning config. This follows the UUID format.

        :return: The name of this ProvisioningConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProvisioningConfig.

        Output only. The system-generated name of the provisioning config. This follows the UUID format.

        :param name: The name of this ProvisioningConfig.
        :type name: str
        """

        self._name = name

    @property
    def networks(self):
        """Gets the networks of this ProvisioningConfig.

        Networks to be created.

        :return: The networks of this ProvisioningConfig.
        :rtype: List[NetworkConfig]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this ProvisioningConfig.

        Networks to be created.

        :param networks: The networks of this ProvisioningConfig.
        :type networks: List[NetworkConfig]
        """

        self._networks = networks

    @property
    def pod(self):
        """Gets the pod of this ProvisioningConfig.

        Optional. Pod name. Pod is an independent part of infrastructure. Instance can be connected to the assets (networks, volumes, nfsshares) allocated in the same pod only.

        :return: The pod of this ProvisioningConfig.
        :rtype: str
        """
        return self._pod

    @pod.setter
    def pod(self, pod):
        """Sets the pod of this ProvisioningConfig.

        Optional. Pod name. Pod is an independent part of infrastructure. Instance can be connected to the assets (networks, volumes, nfsshares) allocated in the same pod only.

        :param pod: The pod of this ProvisioningConfig.
        :type pod: str
        """

        self._pod = pod

    @property
    def state(self):
        """Gets the state of this ProvisioningConfig.

        Output only. State of ProvisioningConfig.

        :return: The state of this ProvisioningConfig.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ProvisioningConfig.

        Output only. State of ProvisioningConfig.

        :param state: The state of this ProvisioningConfig.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "DRAFT", "SUBMITTED", "PROVISIONING", "PROVISIONED", "VALIDATED", "CANCELLED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status_message(self):
        """Gets the status_message of this ProvisioningConfig.

        Optional status messages associated with the FAILED state.

        :return: The status_message of this ProvisioningConfig.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this ProvisioningConfig.

        Optional status messages associated with the FAILED state.

        :param status_message: The status_message of this ProvisioningConfig.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def ticket_id(self):
        """Gets the ticket_id of this ProvisioningConfig.

        A generated ticket id to track provisioning request.

        :return: The ticket_id of this ProvisioningConfig.
        :rtype: str
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """Sets the ticket_id of this ProvisioningConfig.

        A generated ticket id to track provisioning request.

        :param ticket_id: The ticket_id of this ProvisioningConfig.
        :type ticket_id: str
        """

        self._ticket_id = ticket_id

    @property
    def update_time(self):
        """Gets the update_time of this ProvisioningConfig.

        Output only. Last update timestamp.

        :return: The update_time of this ProvisioningConfig.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ProvisioningConfig.

        Output only. Last update timestamp.

        :param update_time: The update_time of this ProvisioningConfig.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def volumes(self):
        """Gets the volumes of this ProvisioningConfig.

        Volumes to be created.

        :return: The volumes of this ProvisioningConfig.
        :rtype: List[VolumeConfig]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ProvisioningConfig.

        Volumes to be created.

        :param volumes: The volumes of this ProvisioningConfig.
        :type volumes: List[VolumeConfig]
        """

        self._volumes = volumes

    @property
    def vpc_sc_enabled(self):
        """Gets the vpc_sc_enabled of this ProvisioningConfig.

        If true, VPC SC is enabled for the cluster.

        :return: The vpc_sc_enabled of this ProvisioningConfig.
        :rtype: bool
        """
        return self._vpc_sc_enabled

    @vpc_sc_enabled.setter
    def vpc_sc_enabled(self, vpc_sc_enabled):
        """Sets the vpc_sc_enabled of this ProvisioningConfig.

        If true, VPC SC is enabled for the cluster.

        :param vpc_sc_enabled: The vpc_sc_enabled of this ProvisioningConfig.
        :type vpc_sc_enabled: bool
        """

        self._vpc_sc_enabled = vpc_sc_enabled
