# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_baremetalsolution_v2_logical_interface import GoogleCloudBaremetalsolutionV2LogicalInterface
from openapi_server.models.network_address import NetworkAddress
from openapi_server import util


class InstanceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_networks_enabled: bool=None, client_network: NetworkAddress=None, hyperthreading: bool=None, id: str=None, instance_type: str=None, kms_key_version: str=None, logical_interfaces: List[GoogleCloudBaremetalsolutionV2LogicalInterface]=None, name: str=None, network_config: str=None, network_template: str=None, os_image: str=None, private_network: NetworkAddress=None, ssh_key_names: List[str]=None, user_note: str=None):
        """InstanceConfig - a model defined in OpenAPI

        :param account_networks_enabled: The account_networks_enabled of this InstanceConfig.
        :param client_network: The client_network of this InstanceConfig.
        :param hyperthreading: The hyperthreading of this InstanceConfig.
        :param id: The id of this InstanceConfig.
        :param instance_type: The instance_type of this InstanceConfig.
        :param kms_key_version: The kms_key_version of this InstanceConfig.
        :param logical_interfaces: The logical_interfaces of this InstanceConfig.
        :param name: The name of this InstanceConfig.
        :param network_config: The network_config of this InstanceConfig.
        :param network_template: The network_template of this InstanceConfig.
        :param os_image: The os_image of this InstanceConfig.
        :param private_network: The private_network of this InstanceConfig.
        :param ssh_key_names: The ssh_key_names of this InstanceConfig.
        :param user_note: The user_note of this InstanceConfig.
        """
        self.openapi_types = {
            'account_networks_enabled': bool,
            'client_network': NetworkAddress,
            'hyperthreading': bool,
            'id': str,
            'instance_type': str,
            'kms_key_version': str,
            'logical_interfaces': List[GoogleCloudBaremetalsolutionV2LogicalInterface],
            'name': str,
            'network_config': str,
            'network_template': str,
            'os_image': str,
            'private_network': NetworkAddress,
            'ssh_key_names': List[str],
            'user_note': str
        }

        self.attribute_map = {
            'account_networks_enabled': 'accountNetworksEnabled',
            'client_network': 'clientNetwork',
            'hyperthreading': 'hyperthreading',
            'id': 'id',
            'instance_type': 'instanceType',
            'kms_key_version': 'kmsKeyVersion',
            'logical_interfaces': 'logicalInterfaces',
            'name': 'name',
            'network_config': 'networkConfig',
            'network_template': 'networkTemplate',
            'os_image': 'osImage',
            'private_network': 'privateNetwork',
            'ssh_key_names': 'sshKeyNames',
            'user_note': 'userNote'
        }

        self._account_networks_enabled = account_networks_enabled
        self._client_network = client_network
        self._hyperthreading = hyperthreading
        self._id = id
        self._instance_type = instance_type
        self._kms_key_version = kms_key_version
        self._logical_interfaces = logical_interfaces
        self._name = name
        self._network_config = network_config
        self._network_template = network_template
        self._os_image = os_image
        self._private_network = private_network
        self._ssh_key_names = ssh_key_names
        self._user_note = user_note

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceConfig of this InstanceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_networks_enabled(self):
        """Gets the account_networks_enabled of this InstanceConfig.

        If true networks can be from different projects of the same vendor account.

        :return: The account_networks_enabled of this InstanceConfig.
        :rtype: bool
        """
        return self._account_networks_enabled

    @account_networks_enabled.setter
    def account_networks_enabled(self, account_networks_enabled):
        """Sets the account_networks_enabled of this InstanceConfig.

        If true networks can be from different projects of the same vendor account.

        :param account_networks_enabled: The account_networks_enabled of this InstanceConfig.
        :type account_networks_enabled: bool
        """

        self._account_networks_enabled = account_networks_enabled

    @property
    def client_network(self):
        """Gets the client_network of this InstanceConfig.


        :return: The client_network of this InstanceConfig.
        :rtype: NetworkAddress
        """
        return self._client_network

    @client_network.setter
    def client_network(self, client_network):
        """Sets the client_network of this InstanceConfig.


        :param client_network: The client_network of this InstanceConfig.
        :type client_network: NetworkAddress
        """

        self._client_network = client_network

    @property
    def hyperthreading(self):
        """Gets the hyperthreading of this InstanceConfig.

        Whether the instance should be provisioned with Hyperthreading enabled.

        :return: The hyperthreading of this InstanceConfig.
        :rtype: bool
        """
        return self._hyperthreading

    @hyperthreading.setter
    def hyperthreading(self, hyperthreading):
        """Sets the hyperthreading of this InstanceConfig.

        Whether the instance should be provisioned with Hyperthreading enabled.

        :param hyperthreading: The hyperthreading of this InstanceConfig.
        :type hyperthreading: bool
        """

        self._hyperthreading = hyperthreading

    @property
    def id(self):
        """Gets the id of this InstanceConfig.

        A transient unique identifier to idenfity an instance within an ProvisioningConfig request.

        :return: The id of this InstanceConfig.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InstanceConfig.

        A transient unique identifier to idenfity an instance within an ProvisioningConfig request.

        :param id: The id of this InstanceConfig.
        :type id: str
        """

        self._id = id

    @property
    def instance_type(self):
        """Gets the instance_type of this InstanceConfig.

        Instance type. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)

        :return: The instance_type of this InstanceConfig.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this InstanceConfig.

        Instance type. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)

        :param instance_type: The instance_type of this InstanceConfig.
        :type instance_type: str
        """

        self._instance_type = instance_type

    @property
    def kms_key_version(self):
        """Gets the kms_key_version of this InstanceConfig.

        Name of the KMS crypto key version used to encrypt the initial passwords. The key has to have ASYMMETRIC_DECRYPT purpose.

        :return: The kms_key_version of this InstanceConfig.
        :rtype: str
        """
        return self._kms_key_version

    @kms_key_version.setter
    def kms_key_version(self, kms_key_version):
        """Sets the kms_key_version of this InstanceConfig.

        Name of the KMS crypto key version used to encrypt the initial passwords. The key has to have ASYMMETRIC_DECRYPT purpose.

        :param kms_key_version: The kms_key_version of this InstanceConfig.
        :type kms_key_version: str
        """

        self._kms_key_version = kms_key_version

    @property
    def logical_interfaces(self):
        """Gets the logical_interfaces of this InstanceConfig.

        List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. Filled if InstanceConfig.multivlan_config is true.

        :return: The logical_interfaces of this InstanceConfig.
        :rtype: List[GoogleCloudBaremetalsolutionV2LogicalInterface]
        """
        return self._logical_interfaces

    @logical_interfaces.setter
    def logical_interfaces(self, logical_interfaces):
        """Sets the logical_interfaces of this InstanceConfig.

        List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. Filled if InstanceConfig.multivlan_config is true.

        :param logical_interfaces: The logical_interfaces of this InstanceConfig.
        :type logical_interfaces: List[GoogleCloudBaremetalsolutionV2LogicalInterface]
        """

        self._logical_interfaces = logical_interfaces

    @property
    def name(self):
        """Gets the name of this InstanceConfig.

        The name of the instance config.

        :return: The name of this InstanceConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InstanceConfig.

        The name of the instance config.

        :param name: The name of this InstanceConfig.
        :type name: str
        """

        self._name = name

    @property
    def network_config(self):
        """Gets the network_config of this InstanceConfig.

        The type of network configuration on the instance.

        :return: The network_config of this InstanceConfig.
        :rtype: str
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config):
        """Sets the network_config of this InstanceConfig.

        The type of network configuration on the instance.

        :param network_config: The network_config of this InstanceConfig.
        :type network_config: str
        """
        allowed_values = ["NETWORKCONFIG_UNSPECIFIED", "SINGLE_VLAN", "MULTI_VLAN"]  # noqa: E501
        if network_config not in allowed_values:
            raise ValueError(
                "Invalid value for `network_config` ({0}), must be one of {1}"
                .format(network_config, allowed_values)
            )

        self._network_config = network_config

    @property
    def network_template(self):
        """Gets the network_template of this InstanceConfig.

        Server network template name. Filled if InstanceConfig.multivlan_config is true.

        :return: The network_template of this InstanceConfig.
        :rtype: str
        """
        return self._network_template

    @network_template.setter
    def network_template(self, network_template):
        """Sets the network_template of this InstanceConfig.

        Server network template name. Filled if InstanceConfig.multivlan_config is true.

        :param network_template: The network_template of this InstanceConfig.
        :type network_template: str
        """

        self._network_template = network_template

    @property
    def os_image(self):
        """Gets the os_image of this InstanceConfig.

        OS image to initialize the instance. [Available images](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)

        :return: The os_image of this InstanceConfig.
        :rtype: str
        """
        return self._os_image

    @os_image.setter
    def os_image(self, os_image):
        """Sets the os_image of this InstanceConfig.

        OS image to initialize the instance. [Available images](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)

        :param os_image: The os_image of this InstanceConfig.
        :type os_image: str
        """

        self._os_image = os_image

    @property
    def private_network(self):
        """Gets the private_network of this InstanceConfig.


        :return: The private_network of this InstanceConfig.
        :rtype: NetworkAddress
        """
        return self._private_network

    @private_network.setter
    def private_network(self, private_network):
        """Sets the private_network of this InstanceConfig.


        :param private_network: The private_network of this InstanceConfig.
        :type private_network: NetworkAddress
        """

        self._private_network = private_network

    @property
    def ssh_key_names(self):
        """Gets the ssh_key_names of this InstanceConfig.

        Optional. List of names of ssh keys used to provision the instance.

        :return: The ssh_key_names of this InstanceConfig.
        :rtype: List[str]
        """
        return self._ssh_key_names

    @ssh_key_names.setter
    def ssh_key_names(self, ssh_key_names):
        """Sets the ssh_key_names of this InstanceConfig.

        Optional. List of names of ssh keys used to provision the instance.

        :param ssh_key_names: The ssh_key_names of this InstanceConfig.
        :type ssh_key_names: List[str]
        """

        self._ssh_key_names = ssh_key_names

    @property
    def user_note(self):
        """Gets the user_note of this InstanceConfig.

        User note field, it can be used by customers to add additional information for the BMS Ops team .

        :return: The user_note of this InstanceConfig.
        :rtype: str
        """
        return self._user_note

    @user_note.setter
    def user_note(self, user_note):
        """Sets the user_note of this InstanceConfig.

        User note field, it can be used by customers to add additional information for the BMS Ops team .

        :param user_note: The user_note of this InstanceConfig.
        :type user_note: str
        """

        self._user_note = user_note
