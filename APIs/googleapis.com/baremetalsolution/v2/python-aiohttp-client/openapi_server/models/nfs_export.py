# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NfsExport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_dev: bool=None, allow_suid: bool=None, cidr: str=None, machine_id: str=None, network_id: str=None, no_root_squash: bool=None, permissions: str=None):
        """NfsExport - a model defined in OpenAPI

        :param allow_dev: The allow_dev of this NfsExport.
        :param allow_suid: The allow_suid of this NfsExport.
        :param cidr: The cidr of this NfsExport.
        :param machine_id: The machine_id of this NfsExport.
        :param network_id: The network_id of this NfsExport.
        :param no_root_squash: The no_root_squash of this NfsExport.
        :param permissions: The permissions of this NfsExport.
        """
        self.openapi_types = {
            'allow_dev': bool,
            'allow_suid': bool,
            'cidr': str,
            'machine_id': str,
            'network_id': str,
            'no_root_squash': bool,
            'permissions': str
        }

        self.attribute_map = {
            'allow_dev': 'allowDev',
            'allow_suid': 'allowSuid',
            'cidr': 'cidr',
            'machine_id': 'machineId',
            'network_id': 'networkId',
            'no_root_squash': 'noRootSquash',
            'permissions': 'permissions'
        }

        self._allow_dev = allow_dev
        self._allow_suid = allow_suid
        self._cidr = cidr
        self._machine_id = machine_id
        self._network_id = network_id
        self._no_root_squash = no_root_squash
        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NfsExport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NfsExport of this NfsExport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_dev(self):
        """Gets the allow_dev of this NfsExport.

        Allow dev flag in NfsShare AllowedClientsRequest.

        :return: The allow_dev of this NfsExport.
        :rtype: bool
        """
        return self._allow_dev

    @allow_dev.setter
    def allow_dev(self, allow_dev):
        """Sets the allow_dev of this NfsExport.

        Allow dev flag in NfsShare AllowedClientsRequest.

        :param allow_dev: The allow_dev of this NfsExport.
        :type allow_dev: bool
        """

        self._allow_dev = allow_dev

    @property
    def allow_suid(self):
        """Gets the allow_suid of this NfsExport.

        Allow the setuid flag.

        :return: The allow_suid of this NfsExport.
        :rtype: bool
        """
        return self._allow_suid

    @allow_suid.setter
    def allow_suid(self, allow_suid):
        """Sets the allow_suid of this NfsExport.

        Allow the setuid flag.

        :param allow_suid: The allow_suid of this NfsExport.
        :type allow_suid: bool
        """

        self._allow_suid = allow_suid

    @property
    def cidr(self):
        """Gets the cidr of this NfsExport.

        A CIDR range.

        :return: The cidr of this NfsExport.
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this NfsExport.

        A CIDR range.

        :param cidr: The cidr of this NfsExport.
        :type cidr: str
        """

        self._cidr = cidr

    @property
    def machine_id(self):
        """Gets the machine_id of this NfsExport.

        Either a single machine, identified by an ID, or a comma-separated list of machine IDs.

        :return: The machine_id of this NfsExport.
        :rtype: str
        """
        return self._machine_id

    @machine_id.setter
    def machine_id(self, machine_id):
        """Sets the machine_id of this NfsExport.

        Either a single machine, identified by an ID, or a comma-separated list of machine IDs.

        :param machine_id: The machine_id of this NfsExport.
        :type machine_id: str
        """

        self._machine_id = machine_id

    @property
    def network_id(self):
        """Gets the network_id of this NfsExport.

        Network to use to publish the export.

        :return: The network_id of this NfsExport.
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this NfsExport.

        Network to use to publish the export.

        :param network_id: The network_id of this NfsExport.
        :type network_id: str
        """

        self._network_id = network_id

    @property
    def no_root_squash(self):
        """Gets the no_root_squash of this NfsExport.

        Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.

        :return: The no_root_squash of this NfsExport.
        :rtype: bool
        """
        return self._no_root_squash

    @no_root_squash.setter
    def no_root_squash(self, no_root_squash):
        """Sets the no_root_squash of this NfsExport.

        Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.

        :param no_root_squash: The no_root_squash of this NfsExport.
        :type no_root_squash: bool
        """

        self._no_root_squash = no_root_squash

    @property
    def permissions(self):
        """Gets the permissions of this NfsExport.

        Export permissions.

        :return: The permissions of this NfsExport.
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this NfsExport.

        Export permissions.

        :param permissions: The permissions of this NfsExport.
        :type permissions: str
        """
        allowed_values = ["PERMISSIONS_UNSPECIFIED", "READ_ONLY", "READ_WRITE"]  # noqa: E501
        if permissions not in allowed_values:
            raise ValueError(
                "Invalid value for `permissions` ({0}), must be one of {1}"
                .format(permissions, allowed_values)
            )

        self._permissions = permissions
