# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkMountPoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_gateway: bool=None, instance: str=None, ip_address: str=None, logical_interface: str=None):
        """NetworkMountPoint - a model defined in OpenAPI

        :param default_gateway: The default_gateway of this NetworkMountPoint.
        :param instance: The instance of this NetworkMountPoint.
        :param ip_address: The ip_address of this NetworkMountPoint.
        :param logical_interface: The logical_interface of this NetworkMountPoint.
        """
        self.openapi_types = {
            'default_gateway': bool,
            'instance': str,
            'ip_address': str,
            'logical_interface': str
        }

        self.attribute_map = {
            'default_gateway': 'defaultGateway',
            'instance': 'instance',
            'ip_address': 'ipAddress',
            'logical_interface': 'logicalInterface'
        }

        self._default_gateway = default_gateway
        self._instance = instance
        self._ip_address = ip_address
        self._logical_interface = logical_interface

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkMountPoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkMountPoint of this NetworkMountPoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_gateway(self):
        """Gets the default_gateway of this NetworkMountPoint.

        Network should be a default gateway.

        :return: The default_gateway of this NetworkMountPoint.
        :rtype: bool
        """
        return self._default_gateway

    @default_gateway.setter
    def default_gateway(self, default_gateway):
        """Sets the default_gateway of this NetworkMountPoint.

        Network should be a default gateway.

        :param default_gateway: The default_gateway of this NetworkMountPoint.
        :type default_gateway: bool
        """

        self._default_gateway = default_gateway

    @property
    def instance(self):
        """Gets the instance of this NetworkMountPoint.

        Instance to attach network to.

        :return: The instance of this NetworkMountPoint.
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this NetworkMountPoint.

        Instance to attach network to.

        :param instance: The instance of this NetworkMountPoint.
        :type instance: str
        """

        self._instance = instance

    @property
    def ip_address(self):
        """Gets the ip_address of this NetworkMountPoint.

        Ip address of the server.

        :return: The ip_address of this NetworkMountPoint.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this NetworkMountPoint.

        Ip address of the server.

        :param ip_address: The ip_address of this NetworkMountPoint.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def logical_interface(self):
        """Gets the logical_interface of this NetworkMountPoint.

        Logical interface to detach from.

        :return: The logical_interface of this NetworkMountPoint.
        :rtype: str
        """
        return self._logical_interface

    @logical_interface.setter
    def logical_interface(self, logical_interface):
        """Sets the logical_interface of this NetworkMountPoint.

        Logical interface to detach from.

        :param logical_interface: The logical_interface of this NetworkMountPoint.
        :type logical_interface: str
        """

        self._logical_interface = logical_interface
