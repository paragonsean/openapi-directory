# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.qos_policy import QosPolicy
from openapi_server.models.vlan_attachment import VlanAttachment
from openapi_server import util


class VRF(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, qos_policy: QosPolicy=None, state: str=None, vlan_attachments: List[VlanAttachment]=None):
        """VRF - a model defined in OpenAPI

        :param name: The name of this VRF.
        :param qos_policy: The qos_policy of this VRF.
        :param state: The state of this VRF.
        :param vlan_attachments: The vlan_attachments of this VRF.
        """
        self.openapi_types = {
            'name': str,
            'qos_policy': QosPolicy,
            'state': str,
            'vlan_attachments': List[VlanAttachment]
        }

        self.attribute_map = {
            'name': 'name',
            'qos_policy': 'qosPolicy',
            'state': 'state',
            'vlan_attachments': 'vlanAttachments'
        }

        self._name = name
        self._qos_policy = qos_policy
        self._state = state
        self._vlan_attachments = vlan_attachments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VRF':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VRF of this VRF.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this VRF.

        The name of the VRF.

        :return: The name of this VRF.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VRF.

        The name of the VRF.

        :param name: The name of this VRF.
        :type name: str
        """

        self._name = name

    @property
    def qos_policy(self):
        """Gets the qos_policy of this VRF.


        :return: The qos_policy of this VRF.
        :rtype: QosPolicy
        """
        return self._qos_policy

    @qos_policy.setter
    def qos_policy(self, qos_policy):
        """Sets the qos_policy of this VRF.


        :param qos_policy: The qos_policy of this VRF.
        :type qos_policy: QosPolicy
        """

        self._qos_policy = qos_policy

    @property
    def state(self):
        """Gets the state of this VRF.

        The possible state of VRF.

        :return: The state of this VRF.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VRF.

        The possible state of VRF.

        :param state: The state of this VRF.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PROVISIONING", "PROVISIONED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def vlan_attachments(self):
        """Gets the vlan_attachments of this VRF.

        The list of VLAN attachments for the VRF.

        :return: The vlan_attachments of this VRF.
        :rtype: List[VlanAttachment]
        """
        return self._vlan_attachments

    @vlan_attachments.setter
    def vlan_attachments(self, vlan_attachments):
        """Sets the vlan_attachments of this VRF.

        The list of VLAN attachments for the VRF.

        :param vlan_attachments: The vlan_attachments of this VRF.
        :type vlan_attachments: List[VlanAttachment]
        """

        self._vlan_attachments = vlan_attachments
