# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Lun(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boot_lun: bool=None, expire_time: str=None, id: str=None, instances: List[str]=None, multiprotocol_type: str=None, name: str=None, shareable: bool=None, size_gb: str=None, state: str=None, storage_type: str=None, storage_volume: str=None, wwid: str=None):
        """Lun - a model defined in OpenAPI

        :param boot_lun: The boot_lun of this Lun.
        :param expire_time: The expire_time of this Lun.
        :param id: The id of this Lun.
        :param instances: The instances of this Lun.
        :param multiprotocol_type: The multiprotocol_type of this Lun.
        :param name: The name of this Lun.
        :param shareable: The shareable of this Lun.
        :param size_gb: The size_gb of this Lun.
        :param state: The state of this Lun.
        :param storage_type: The storage_type of this Lun.
        :param storage_volume: The storage_volume of this Lun.
        :param wwid: The wwid of this Lun.
        """
        self.openapi_types = {
            'boot_lun': bool,
            'expire_time': str,
            'id': str,
            'instances': List[str],
            'multiprotocol_type': str,
            'name': str,
            'shareable': bool,
            'size_gb': str,
            'state': str,
            'storage_type': str,
            'storage_volume': str,
            'wwid': str
        }

        self.attribute_map = {
            'boot_lun': 'bootLun',
            'expire_time': 'expireTime',
            'id': 'id',
            'instances': 'instances',
            'multiprotocol_type': 'multiprotocolType',
            'name': 'name',
            'shareable': 'shareable',
            'size_gb': 'sizeGb',
            'state': 'state',
            'storage_type': 'storageType',
            'storage_volume': 'storageVolume',
            'wwid': 'wwid'
        }

        self._boot_lun = boot_lun
        self._expire_time = expire_time
        self._id = id
        self._instances = instances
        self._multiprotocol_type = multiprotocol_type
        self._name = name
        self._shareable = shareable
        self._size_gb = size_gb
        self._state = state
        self._storage_type = storage_type
        self._storage_volume = storage_volume
        self._wwid = wwid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Lun':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Lun of this Lun.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boot_lun(self):
        """Gets the boot_lun of this Lun.

        Display if this LUN is a boot LUN.

        :return: The boot_lun of this Lun.
        :rtype: bool
        """
        return self._boot_lun

    @boot_lun.setter
    def boot_lun(self, boot_lun):
        """Sets the boot_lun of this Lun.

        Display if this LUN is a boot LUN.

        :param boot_lun: The boot_lun of this Lun.
        :type boot_lun: bool
        """

        self._boot_lun = boot_lun

    @property
    def expire_time(self):
        """Gets the expire_time of this Lun.

        Output only. Time after which LUN will be fully deleted. It is filled only for LUNs in COOL_OFF state.

        :return: The expire_time of this Lun.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this Lun.

        Output only. Time after which LUN will be fully deleted. It is filled only for LUNs in COOL_OFF state.

        :param expire_time: The expire_time of this Lun.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def id(self):
        """Gets the id of this Lun.

        An identifier for the LUN, generated by the backend.

        :return: The id of this Lun.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Lun.

        An identifier for the LUN, generated by the backend.

        :param id: The id of this Lun.
        :type id: str
        """

        self._id = id

    @property
    def instances(self):
        """Gets the instances of this Lun.

        Output only. Instances this Lun is attached to.

        :return: The instances of this Lun.
        :rtype: List[str]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this Lun.

        Output only. Instances this Lun is attached to.

        :param instances: The instances of this Lun.
        :type instances: List[str]
        """

        self._instances = instances

    @property
    def multiprotocol_type(self):
        """Gets the multiprotocol_type of this Lun.

        The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.

        :return: The multiprotocol_type of this Lun.
        :rtype: str
        """
        return self._multiprotocol_type

    @multiprotocol_type.setter
    def multiprotocol_type(self, multiprotocol_type):
        """Sets the multiprotocol_type of this Lun.

        The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.

        :param multiprotocol_type: The multiprotocol_type of this Lun.
        :type multiprotocol_type: str
        """
        allowed_values = ["MULTIPROTOCOL_TYPE_UNSPECIFIED", "LINUX"]  # noqa: E501
        if multiprotocol_type not in allowed_values:
            raise ValueError(
                "Invalid value for `multiprotocol_type` ({0}), must be one of {1}"
                .format(multiprotocol_type, allowed_values)
            )

        self._multiprotocol_type = multiprotocol_type

    @property
    def name(self):
        """Gets the name of this Lun.

        Output only. The name of the LUN.

        :return: The name of this Lun.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Lun.

        Output only. The name of the LUN.

        :param name: The name of this Lun.
        :type name: str
        """

        self._name = name

    @property
    def shareable(self):
        """Gets the shareable of this Lun.

        Display if this LUN can be shared between multiple physical servers.

        :return: The shareable of this Lun.
        :rtype: bool
        """
        return self._shareable

    @shareable.setter
    def shareable(self, shareable):
        """Sets the shareable of this Lun.

        Display if this LUN can be shared between multiple physical servers.

        :param shareable: The shareable of this Lun.
        :type shareable: bool
        """

        self._shareable = shareable

    @property
    def size_gb(self):
        """Gets the size_gb of this Lun.

        The size of this LUN, in GiB.

        :return: The size_gb of this Lun.
        :rtype: str
        """
        return self._size_gb

    @size_gb.setter
    def size_gb(self, size_gb):
        """Sets the size_gb of this Lun.

        The size of this LUN, in GiB.

        :param size_gb: The size_gb of this Lun.
        :type size_gb: str
        """

        self._size_gb = size_gb

    @property
    def state(self):
        """Gets the state of this Lun.

        The state of this storage volume.

        :return: The state of this Lun.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Lun.

        The state of this storage volume.

        :param state: The state of this Lun.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "UPDATING", "READY", "DELETING", "COOL_OFF"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def storage_type(self):
        """Gets the storage_type of this Lun.

        The storage type for this LUN.

        :return: The storage_type of this Lun.
        :rtype: str
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this Lun.

        The storage type for this LUN.

        :param storage_type: The storage_type of this Lun.
        :type storage_type: str
        """
        allowed_values = ["STORAGE_TYPE_UNSPECIFIED", "SSD", "HDD"]  # noqa: E501
        if storage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_type` ({0}), must be one of {1}"
                .format(storage_type, allowed_values)
            )

        self._storage_type = storage_type

    @property
    def storage_volume(self):
        """Gets the storage_volume of this Lun.

        Display the storage volume for this LUN.

        :return: The storage_volume of this Lun.
        :rtype: str
        """
        return self._storage_volume

    @storage_volume.setter
    def storage_volume(self, storage_volume):
        """Sets the storage_volume of this Lun.

        Display the storage volume for this LUN.

        :param storage_volume: The storage_volume of this Lun.
        :type storage_volume: str
        """

        self._storage_volume = storage_volume

    @property
    def wwid(self):
        """Gets the wwid of this Lun.

        The WWID for this LUN.

        :return: The wwid of this Lun.
        :rtype: str
        """
        return self._wwid

    @wwid.setter
    def wwid(self, wwid):
        """Sets the wwid of this Lun.

        The WWID for this LUN.

        :param wwid: The wwid of this Lun.
        :type wwid: str
        """

        self._wwid = wwid
