# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.snapshot_reservation_detail import SnapshotReservationDetail
from openapi_server import util


class Volume(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attached: bool=None, auto_grown_size_gib: str=None, boot_volume: bool=None, current_size_gib: str=None, emergency_size_gib: str=None, expire_time: str=None, id: str=None, instances: List[str]=None, labels: Dict[str, str]=None, max_size_gib: str=None, name: str=None, notes: str=None, originally_requested_size_gib: str=None, performance_tier: str=None, pod: str=None, protocol: str=None, remaining_space_gib: str=None, requested_size_gib: str=None, snapshot_auto_delete_behavior: str=None, snapshot_enabled: bool=None, snapshot_reservation_detail: SnapshotReservationDetail=None, state: str=None, storage_type: str=None, workload_profile: str=None):
        """Volume - a model defined in OpenAPI

        :param attached: The attached of this Volume.
        :param auto_grown_size_gib: The auto_grown_size_gib of this Volume.
        :param boot_volume: The boot_volume of this Volume.
        :param current_size_gib: The current_size_gib of this Volume.
        :param emergency_size_gib: The emergency_size_gib of this Volume.
        :param expire_time: The expire_time of this Volume.
        :param id: The id of this Volume.
        :param instances: The instances of this Volume.
        :param labels: The labels of this Volume.
        :param max_size_gib: The max_size_gib of this Volume.
        :param name: The name of this Volume.
        :param notes: The notes of this Volume.
        :param originally_requested_size_gib: The originally_requested_size_gib of this Volume.
        :param performance_tier: The performance_tier of this Volume.
        :param pod: The pod of this Volume.
        :param protocol: The protocol of this Volume.
        :param remaining_space_gib: The remaining_space_gib of this Volume.
        :param requested_size_gib: The requested_size_gib of this Volume.
        :param snapshot_auto_delete_behavior: The snapshot_auto_delete_behavior of this Volume.
        :param snapshot_enabled: The snapshot_enabled of this Volume.
        :param snapshot_reservation_detail: The snapshot_reservation_detail of this Volume.
        :param state: The state of this Volume.
        :param storage_type: The storage_type of this Volume.
        :param workload_profile: The workload_profile of this Volume.
        """
        self.openapi_types = {
            'attached': bool,
            'auto_grown_size_gib': str,
            'boot_volume': bool,
            'current_size_gib': str,
            'emergency_size_gib': str,
            'expire_time': str,
            'id': str,
            'instances': List[str],
            'labels': Dict[str, str],
            'max_size_gib': str,
            'name': str,
            'notes': str,
            'originally_requested_size_gib': str,
            'performance_tier': str,
            'pod': str,
            'protocol': str,
            'remaining_space_gib': str,
            'requested_size_gib': str,
            'snapshot_auto_delete_behavior': str,
            'snapshot_enabled': bool,
            'snapshot_reservation_detail': SnapshotReservationDetail,
            'state': str,
            'storage_type': str,
            'workload_profile': str
        }

        self.attribute_map = {
            'attached': 'attached',
            'auto_grown_size_gib': 'autoGrownSizeGib',
            'boot_volume': 'bootVolume',
            'current_size_gib': 'currentSizeGib',
            'emergency_size_gib': 'emergencySizeGib',
            'expire_time': 'expireTime',
            'id': 'id',
            'instances': 'instances',
            'labels': 'labels',
            'max_size_gib': 'maxSizeGib',
            'name': 'name',
            'notes': 'notes',
            'originally_requested_size_gib': 'originallyRequestedSizeGib',
            'performance_tier': 'performanceTier',
            'pod': 'pod',
            'protocol': 'protocol',
            'remaining_space_gib': 'remainingSpaceGib',
            'requested_size_gib': 'requestedSizeGib',
            'snapshot_auto_delete_behavior': 'snapshotAutoDeleteBehavior',
            'snapshot_enabled': 'snapshotEnabled',
            'snapshot_reservation_detail': 'snapshotReservationDetail',
            'state': 'state',
            'storage_type': 'storageType',
            'workload_profile': 'workloadProfile'
        }

        self._attached = attached
        self._auto_grown_size_gib = auto_grown_size_gib
        self._boot_volume = boot_volume
        self._current_size_gib = current_size_gib
        self._emergency_size_gib = emergency_size_gib
        self._expire_time = expire_time
        self._id = id
        self._instances = instances
        self._labels = labels
        self._max_size_gib = max_size_gib
        self._name = name
        self._notes = notes
        self._originally_requested_size_gib = originally_requested_size_gib
        self._performance_tier = performance_tier
        self._pod = pod
        self._protocol = protocol
        self._remaining_space_gib = remaining_space_gib
        self._requested_size_gib = requested_size_gib
        self._snapshot_auto_delete_behavior = snapshot_auto_delete_behavior
        self._snapshot_enabled = snapshot_enabled
        self._snapshot_reservation_detail = snapshot_reservation_detail
        self._state = state
        self._storage_type = storage_type
        self._workload_profile = workload_profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Volume':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Volume of this Volume.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attached(self):
        """Gets the attached of this Volume.

        Output only. Is the Volume attached at at least one instance. This field is a lightweight counterpart of `instances` field. It is filled in List responses as well.

        :return: The attached of this Volume.
        :rtype: bool
        """
        return self._attached

    @attached.setter
    def attached(self, attached):
        """Sets the attached of this Volume.

        Output only. Is the Volume attached at at least one instance. This field is a lightweight counterpart of `instances` field. It is filled in List responses as well.

        :param attached: The attached of this Volume.
        :type attached: bool
        """

        self._attached = attached

    @property
    def auto_grown_size_gib(self):
        """Gets the auto_grown_size_gib of this Volume.

        The size, in GiB, that this storage volume has expanded as a result of an auto grow policy. In the absence of auto-grow, the value is 0.

        :return: The auto_grown_size_gib of this Volume.
        :rtype: str
        """
        return self._auto_grown_size_gib

    @auto_grown_size_gib.setter
    def auto_grown_size_gib(self, auto_grown_size_gib):
        """Sets the auto_grown_size_gib of this Volume.

        The size, in GiB, that this storage volume has expanded as a result of an auto grow policy. In the absence of auto-grow, the value is 0.

        :param auto_grown_size_gib: The auto_grown_size_gib of this Volume.
        :type auto_grown_size_gib: str
        """

        self._auto_grown_size_gib = auto_grown_size_gib

    @property
    def boot_volume(self):
        """Gets the boot_volume of this Volume.

        Output only. Whether this volume is a boot volume. A boot volume is one which contains a boot LUN.

        :return: The boot_volume of this Volume.
        :rtype: bool
        """
        return self._boot_volume

    @boot_volume.setter
    def boot_volume(self, boot_volume):
        """Sets the boot_volume of this Volume.

        Output only. Whether this volume is a boot volume. A boot volume is one which contains a boot LUN.

        :param boot_volume: The boot_volume of this Volume.
        :type boot_volume: bool
        """

        self._boot_volume = boot_volume

    @property
    def current_size_gib(self):
        """Gets the current_size_gib of this Volume.

        The current size of this storage volume, in GiB, including space reserved for snapshots. This size might be different than the requested size if the storage volume has been configured with auto grow or auto shrink.

        :return: The current_size_gib of this Volume.
        :rtype: str
        """
        return self._current_size_gib

    @current_size_gib.setter
    def current_size_gib(self, current_size_gib):
        """Sets the current_size_gib of this Volume.

        The current size of this storage volume, in GiB, including space reserved for snapshots. This size might be different than the requested size if the storage volume has been configured with auto grow or auto shrink.

        :param current_size_gib: The current_size_gib of this Volume.
        :type current_size_gib: str
        """

        self._current_size_gib = current_size_gib

    @property
    def emergency_size_gib(self):
        """Gets the emergency_size_gib of this Volume.

        Additional emergency size that was requested for this Volume, in GiB. current_size_gib includes this value.

        :return: The emergency_size_gib of this Volume.
        :rtype: str
        """
        return self._emergency_size_gib

    @emergency_size_gib.setter
    def emergency_size_gib(self, emergency_size_gib):
        """Sets the emergency_size_gib of this Volume.

        Additional emergency size that was requested for this Volume, in GiB. current_size_gib includes this value.

        :param emergency_size_gib: The emergency_size_gib of this Volume.
        :type emergency_size_gib: str
        """

        self._emergency_size_gib = emergency_size_gib

    @property
    def expire_time(self):
        """Gets the expire_time of this Volume.

        Output only. Time after which volume will be fully deleted. It is filled only for volumes in COOLOFF state.

        :return: The expire_time of this Volume.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this Volume.

        Output only. Time after which volume will be fully deleted. It is filled only for volumes in COOLOFF state.

        :param expire_time: The expire_time of this Volume.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def id(self):
        """Gets the id of this Volume.

        An identifier for the `Volume`, generated by the backend.

        :return: The id of this Volume.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Volume.

        An identifier for the `Volume`, generated by the backend.

        :param id: The id of this Volume.
        :type id: str
        """

        self._id = id

    @property
    def instances(self):
        """Gets the instances of this Volume.

        Output only. Instances this Volume is attached to. This field is set only in Get requests.

        :return: The instances of this Volume.
        :rtype: List[str]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this Volume.

        Output only. Instances this Volume is attached to. This field is set only in Get requests.

        :param instances: The instances of this Volume.
        :type instances: List[str]
        """

        self._instances = instances

    @property
    def labels(self):
        """Gets the labels of this Volume.

        Labels as key value pairs.

        :return: The labels of this Volume.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Volume.

        Labels as key value pairs.

        :param labels: The labels of this Volume.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def max_size_gib(self):
        """Gets the max_size_gib of this Volume.

        Maximum size volume can be expanded to in case of evergency, in GiB.

        :return: The max_size_gib of this Volume.
        :rtype: str
        """
        return self._max_size_gib

    @max_size_gib.setter
    def max_size_gib(self, max_size_gib):
        """Sets the max_size_gib of this Volume.

        Maximum size volume can be expanded to in case of evergency, in GiB.

        :param max_size_gib: The max_size_gib of this Volume.
        :type max_size_gib: str
        """

        self._max_size_gib = max_size_gib

    @property
    def name(self):
        """Gets the name of this Volume.

        Output only. The resource name of this `Volume`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/volumes/{volume}`

        :return: The name of this Volume.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Volume.

        Output only. The resource name of this `Volume`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/volumes/{volume}`

        :param name: The name of this Volume.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this Volume.

        Input only. User-specified notes for new Volume. Used to provision Volumes that require manual intervention.

        :return: The notes of this Volume.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Volume.

        Input only. User-specified notes for new Volume. Used to provision Volumes that require manual intervention.

        :param notes: The notes of this Volume.
        :type notes: str
        """

        self._notes = notes

    @property
    def originally_requested_size_gib(self):
        """Gets the originally_requested_size_gib of this Volume.

        Originally requested size, in GiB.

        :return: The originally_requested_size_gib of this Volume.
        :rtype: str
        """
        return self._originally_requested_size_gib

    @originally_requested_size_gib.setter
    def originally_requested_size_gib(self, originally_requested_size_gib):
        """Sets the originally_requested_size_gib of this Volume.

        Originally requested size, in GiB.

        :param originally_requested_size_gib: The originally_requested_size_gib of this Volume.
        :type originally_requested_size_gib: str
        """

        self._originally_requested_size_gib = originally_requested_size_gib

    @property
    def performance_tier(self):
        """Gets the performance_tier of this Volume.

        Immutable. Performance tier of the Volume. Default is SHARED.

        :return: The performance_tier of this Volume.
        :rtype: str
        """
        return self._performance_tier

    @performance_tier.setter
    def performance_tier(self, performance_tier):
        """Sets the performance_tier of this Volume.

        Immutable. Performance tier of the Volume. Default is SHARED.

        :param performance_tier: The performance_tier of this Volume.
        :type performance_tier: str
        """
        allowed_values = ["VOLUME_PERFORMANCE_TIER_UNSPECIFIED", "VOLUME_PERFORMANCE_TIER_SHARED", "VOLUME_PERFORMANCE_TIER_ASSIGNED", "VOLUME_PERFORMANCE_TIER_HT", "VOLUME_PERFORMANCE_TIER_QOS2_PERFORMANCE"]  # noqa: E501
        if performance_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `performance_tier` ({0}), must be one of {1}"
                .format(performance_tier, allowed_values)
            )

        self._performance_tier = performance_tier

    @property
    def pod(self):
        """Gets the pod of this Volume.

        Immutable. Pod name. Pod is an independent part of infrastructure. Volume can only be connected to the instances allocated in the same pod.

        :return: The pod of this Volume.
        :rtype: str
        """
        return self._pod

    @pod.setter
    def pod(self, pod):
        """Sets the pod of this Volume.

        Immutable. Pod name. Pod is an independent part of infrastructure. Volume can only be connected to the instances allocated in the same pod.

        :param pod: The pod of this Volume.
        :type pod: str
        """

        self._pod = pod

    @property
    def protocol(self):
        """Gets the protocol of this Volume.

        Output only. Storage protocol for the Volume.

        :return: The protocol of this Volume.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Volume.

        Output only. Storage protocol for the Volume.

        :param protocol: The protocol of this Volume.
        :type protocol: str
        """
        allowed_values = ["PROTOCOL_UNSPECIFIED", "FIBRE_CHANNEL", "NFS"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def remaining_space_gib(self):
        """Gets the remaining_space_gib of this Volume.

        The space remaining in the storage volume for new LUNs, in GiB, excluding space reserved for snapshots.

        :return: The remaining_space_gib of this Volume.
        :rtype: str
        """
        return self._remaining_space_gib

    @remaining_space_gib.setter
    def remaining_space_gib(self, remaining_space_gib):
        """Sets the remaining_space_gib of this Volume.

        The space remaining in the storage volume for new LUNs, in GiB, excluding space reserved for snapshots.

        :param remaining_space_gib: The remaining_space_gib of this Volume.
        :type remaining_space_gib: str
        """

        self._remaining_space_gib = remaining_space_gib

    @property
    def requested_size_gib(self):
        """Gets the requested_size_gib of this Volume.

        The requested size of this storage volume, in GiB.

        :return: The requested_size_gib of this Volume.
        :rtype: str
        """
        return self._requested_size_gib

    @requested_size_gib.setter
    def requested_size_gib(self, requested_size_gib):
        """Sets the requested_size_gib of this Volume.

        The requested size of this storage volume, in GiB.

        :param requested_size_gib: The requested_size_gib of this Volume.
        :type requested_size_gib: str
        """

        self._requested_size_gib = requested_size_gib

    @property
    def snapshot_auto_delete_behavior(self):
        """Gets the snapshot_auto_delete_behavior of this Volume.

        The behavior to use when snapshot reserved space is full.

        :return: The snapshot_auto_delete_behavior of this Volume.
        :rtype: str
        """
        return self._snapshot_auto_delete_behavior

    @snapshot_auto_delete_behavior.setter
    def snapshot_auto_delete_behavior(self, snapshot_auto_delete_behavior):
        """Sets the snapshot_auto_delete_behavior of this Volume.

        The behavior to use when snapshot reserved space is full.

        :param snapshot_auto_delete_behavior: The snapshot_auto_delete_behavior of this Volume.
        :type snapshot_auto_delete_behavior: str
        """
        allowed_values = ["SNAPSHOT_AUTO_DELETE_BEHAVIOR_UNSPECIFIED", "DISABLED", "OLDEST_FIRST", "NEWEST_FIRST"]  # noqa: E501
        if snapshot_auto_delete_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `snapshot_auto_delete_behavior` ({0}), must be one of {1}"
                .format(snapshot_auto_delete_behavior, allowed_values)
            )

        self._snapshot_auto_delete_behavior = snapshot_auto_delete_behavior

    @property
    def snapshot_enabled(self):
        """Gets the snapshot_enabled of this Volume.

        Whether snapshots are enabled.

        :return: The snapshot_enabled of this Volume.
        :rtype: bool
        """
        return self._snapshot_enabled

    @snapshot_enabled.setter
    def snapshot_enabled(self, snapshot_enabled):
        """Sets the snapshot_enabled of this Volume.

        Whether snapshots are enabled.

        :param snapshot_enabled: The snapshot_enabled of this Volume.
        :type snapshot_enabled: bool
        """

        self._snapshot_enabled = snapshot_enabled

    @property
    def snapshot_reservation_detail(self):
        """Gets the snapshot_reservation_detail of this Volume.


        :return: The snapshot_reservation_detail of this Volume.
        :rtype: SnapshotReservationDetail
        """
        return self._snapshot_reservation_detail

    @snapshot_reservation_detail.setter
    def snapshot_reservation_detail(self, snapshot_reservation_detail):
        """Sets the snapshot_reservation_detail of this Volume.


        :param snapshot_reservation_detail: The snapshot_reservation_detail of this Volume.
        :type snapshot_reservation_detail: SnapshotReservationDetail
        """

        self._snapshot_reservation_detail = snapshot_reservation_detail

    @property
    def state(self):
        """Gets the state of this Volume.

        The state of this storage volume.

        :return: The state of this Volume.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Volume.

        The state of this storage volume.

        :param state: The state of this Volume.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "READY", "DELETING", "UPDATING", "COOL_OFF"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def storage_type(self):
        """Gets the storage_type of this Volume.

        The storage type for this volume.

        :return: The storage_type of this Volume.
        :rtype: str
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this Volume.

        The storage type for this volume.

        :param storage_type: The storage_type of this Volume.
        :type storage_type: str
        """
        allowed_values = ["STORAGE_TYPE_UNSPECIFIED", "SSD", "HDD"]  # noqa: E501
        if storage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_type` ({0}), must be one of {1}"
                .format(storage_type, allowed_values)
            )

        self._storage_type = storage_type

    @property
    def workload_profile(self):
        """Gets the workload_profile of this Volume.

        The workload profile for the volume.

        :return: The workload_profile of this Volume.
        :rtype: str
        """
        return self._workload_profile

    @workload_profile.setter
    def workload_profile(self, workload_profile):
        """Sets the workload_profile of this Volume.

        The workload profile for the volume.

        :param workload_profile: The workload_profile of this Volume.
        :type workload_profile: str
        """
        allowed_values = ["WORKLOAD_PROFILE_UNSPECIFIED", "GENERIC", "HANA"]  # noqa: E501
        if workload_profile not in allowed_values:
            raise ValueError(
                "Invalid value for `workload_profile` ({0}), must be one of {1}"
                .format(workload_profile, allowed_values)
            )

        self._workload_profile = workload_profile
