# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_baremetalsolution_v2_logical_interface import GoogleCloudBaremetalsolutionV2LogicalInterface
from openapi_server.models.lun import Lun
from openapi_server.models.network import Network
from openapi_server.models.volume import Volume
from openapi_server import util


class Instance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, firmware_version: str=None, hyperthreading_enabled: bool=None, id: str=None, interactive_serial_console_enabled: bool=None, kms_key_version: str=None, labels: Dict[str, str]=None, logical_interfaces: List[GoogleCloudBaremetalsolutionV2LogicalInterface]=None, login_info: str=None, luns: List[Lun]=None, machine_type: str=None, name: str=None, network_template: str=None, networks: List[Network]=None, os_image: str=None, pod: str=None, ssh_keys: List[str]=None, state: str=None, update_time: str=None, volumes: List[Volume]=None, workload_profile: str=None):
        """Instance - a model defined in OpenAPI

        :param create_time: The create_time of this Instance.
        :param firmware_version: The firmware_version of this Instance.
        :param hyperthreading_enabled: The hyperthreading_enabled of this Instance.
        :param id: The id of this Instance.
        :param interactive_serial_console_enabled: The interactive_serial_console_enabled of this Instance.
        :param kms_key_version: The kms_key_version of this Instance.
        :param labels: The labels of this Instance.
        :param logical_interfaces: The logical_interfaces of this Instance.
        :param login_info: The login_info of this Instance.
        :param luns: The luns of this Instance.
        :param machine_type: The machine_type of this Instance.
        :param name: The name of this Instance.
        :param network_template: The network_template of this Instance.
        :param networks: The networks of this Instance.
        :param os_image: The os_image of this Instance.
        :param pod: The pod of this Instance.
        :param ssh_keys: The ssh_keys of this Instance.
        :param state: The state of this Instance.
        :param update_time: The update_time of this Instance.
        :param volumes: The volumes of this Instance.
        :param workload_profile: The workload_profile of this Instance.
        """
        self.openapi_types = {
            'create_time': str,
            'firmware_version': str,
            'hyperthreading_enabled': bool,
            'id': str,
            'interactive_serial_console_enabled': bool,
            'kms_key_version': str,
            'labels': Dict[str, str],
            'logical_interfaces': List[GoogleCloudBaremetalsolutionV2LogicalInterface],
            'login_info': str,
            'luns': List[Lun],
            'machine_type': str,
            'name': str,
            'network_template': str,
            'networks': List[Network],
            'os_image': str,
            'pod': str,
            'ssh_keys': List[str],
            'state': str,
            'update_time': str,
            'volumes': List[Volume],
            'workload_profile': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'firmware_version': 'firmwareVersion',
            'hyperthreading_enabled': 'hyperthreadingEnabled',
            'id': 'id',
            'interactive_serial_console_enabled': 'interactiveSerialConsoleEnabled',
            'kms_key_version': 'kmsKeyVersion',
            'labels': 'labels',
            'logical_interfaces': 'logicalInterfaces',
            'login_info': 'loginInfo',
            'luns': 'luns',
            'machine_type': 'machineType',
            'name': 'name',
            'network_template': 'networkTemplate',
            'networks': 'networks',
            'os_image': 'osImage',
            'pod': 'pod',
            'ssh_keys': 'sshKeys',
            'state': 'state',
            'update_time': 'updateTime',
            'volumes': 'volumes',
            'workload_profile': 'workloadProfile'
        }

        self._create_time = create_time
        self._firmware_version = firmware_version
        self._hyperthreading_enabled = hyperthreading_enabled
        self._id = id
        self._interactive_serial_console_enabled = interactive_serial_console_enabled
        self._kms_key_version = kms_key_version
        self._labels = labels
        self._logical_interfaces = logical_interfaces
        self._login_info = login_info
        self._luns = luns
        self._machine_type = machine_type
        self._name = name
        self._network_template = network_template
        self._networks = networks
        self._os_image = os_image
        self._pod = pod
        self._ssh_keys = ssh_keys
        self._state = state
        self._update_time = update_time
        self._volumes = volumes
        self._workload_profile = workload_profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Instance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Instance of this Instance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Instance.

        Output only. Create a time stamp.

        :return: The create_time of this Instance.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Instance.

        Output only. Create a time stamp.

        :param create_time: The create_time of this Instance.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def firmware_version(self):
        """Gets the firmware_version of this Instance.

        Output only. The firmware version for the instance.

        :return: The firmware_version of this Instance.
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this Instance.

        Output only. The firmware version for the instance.

        :param firmware_version: The firmware_version of this Instance.
        :type firmware_version: str
        """

        self._firmware_version = firmware_version

    @property
    def hyperthreading_enabled(self):
        """Gets the hyperthreading_enabled of this Instance.

        True if you enable hyperthreading for the server, otherwise false. The default value is false.

        :return: The hyperthreading_enabled of this Instance.
        :rtype: bool
        """
        return self._hyperthreading_enabled

    @hyperthreading_enabled.setter
    def hyperthreading_enabled(self, hyperthreading_enabled):
        """Sets the hyperthreading_enabled of this Instance.

        True if you enable hyperthreading for the server, otherwise false. The default value is false.

        :param hyperthreading_enabled: The hyperthreading_enabled of this Instance.
        :type hyperthreading_enabled: bool
        """

        self._hyperthreading_enabled = hyperthreading_enabled

    @property
    def id(self):
        """Gets the id of this Instance.

        Output only. An identifier for the `Instance`, generated by the backend.

        :return: The id of this Instance.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Instance.

        Output only. An identifier for the `Instance`, generated by the backend.

        :param id: The id of this Instance.
        :type id: str
        """

        self._id = id

    @property
    def interactive_serial_console_enabled(self):
        """Gets the interactive_serial_console_enabled of this Instance.

        Output only. True if the interactive serial console feature is enabled for the instance, false otherwise. The default value is false.

        :return: The interactive_serial_console_enabled of this Instance.
        :rtype: bool
        """
        return self._interactive_serial_console_enabled

    @interactive_serial_console_enabled.setter
    def interactive_serial_console_enabled(self, interactive_serial_console_enabled):
        """Sets the interactive_serial_console_enabled of this Instance.

        Output only. True if the interactive serial console feature is enabled for the instance, false otherwise. The default value is false.

        :param interactive_serial_console_enabled: The interactive_serial_console_enabled of this Instance.
        :type interactive_serial_console_enabled: bool
        """

        self._interactive_serial_console_enabled = interactive_serial_console_enabled

    @property
    def kms_key_version(self):
        """Gets the kms_key_version of this Instance.

        Optional. Name of the KMS crypto key version used to encrypt the initial passwords. The key has to have ASYMMETRIC_DECRYPT purpose. Format is `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}`.

        :return: The kms_key_version of this Instance.
        :rtype: str
        """
        return self._kms_key_version

    @kms_key_version.setter
    def kms_key_version(self, kms_key_version):
        """Sets the kms_key_version of this Instance.

        Optional. Name of the KMS crypto key version used to encrypt the initial passwords. The key has to have ASYMMETRIC_DECRYPT purpose. Format is `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}`.

        :param kms_key_version: The kms_key_version of this Instance.
        :type kms_key_version: str
        """

        self._kms_key_version = kms_key_version

    @property
    def labels(self):
        """Gets the labels of this Instance.

        Labels as key value pairs.

        :return: The labels of this Instance.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Instance.

        Labels as key value pairs.

        :param labels: The labels of this Instance.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def logical_interfaces(self):
        """Gets the logical_interfaces of this Instance.

        List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. For the non-multivlan configurations (for eg, existing servers) that use existing default network template (bondaa-bondaa), both the Instance.networks field and the Instance.logical_interfaces fields will be filled to ensure backward compatibility. For the others, only Instance.logical_interfaces will be filled.

        :return: The logical_interfaces of this Instance.
        :rtype: List[GoogleCloudBaremetalsolutionV2LogicalInterface]
        """
        return self._logical_interfaces

    @logical_interfaces.setter
    def logical_interfaces(self, logical_interfaces):
        """Sets the logical_interfaces of this Instance.

        List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. For the non-multivlan configurations (for eg, existing servers) that use existing default network template (bondaa-bondaa), both the Instance.networks field and the Instance.logical_interfaces fields will be filled to ensure backward compatibility. For the others, only Instance.logical_interfaces will be filled.

        :param logical_interfaces: The logical_interfaces of this Instance.
        :type logical_interfaces: List[GoogleCloudBaremetalsolutionV2LogicalInterface]
        """

        self._logical_interfaces = logical_interfaces

    @property
    def login_info(self):
        """Gets the login_info of this Instance.

        Output only. Text field about info for logging in.

        :return: The login_info of this Instance.
        :rtype: str
        """
        return self._login_info

    @login_info.setter
    def login_info(self, login_info):
        """Sets the login_info of this Instance.

        Output only. Text field about info for logging in.

        :param login_info: The login_info of this Instance.
        :type login_info: str
        """

        self._login_info = login_info

    @property
    def luns(self):
        """Gets the luns of this Instance.

        Immutable. List of LUNs associated with this server.

        :return: The luns of this Instance.
        :rtype: List[Lun]
        """
        return self._luns

    @luns.setter
    def luns(self, luns):
        """Sets the luns of this Instance.

        Immutable. List of LUNs associated with this server.

        :param luns: The luns of this Instance.
        :type luns: List[Lun]
        """

        self._luns = luns

    @property
    def machine_type(self):
        """Gets the machine_type of this Instance.

        Immutable. The server type. [Available server types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)

        :return: The machine_type of this Instance.
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this Instance.

        Immutable. The server type. [Available server types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)

        :param machine_type: The machine_type of this Instance.
        :type machine_type: str
        """

        self._machine_type = machine_type

    @property
    def name(self):
        """Gets the name of this Instance.

        Immutable. The resource name of this `Instance`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/instances/{instance}`

        :return: The name of this Instance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Instance.

        Immutable. The resource name of this `Instance`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/instances/{instance}`

        :param name: The name of this Instance.
        :type name: str
        """

        self._name = name

    @property
    def network_template(self):
        """Gets the network_template of this Instance.

        Instance network template name. For eg, bondaa-bondaa, bondab-nic, etc. Generally, the template name follows the syntax of \"bond\" or \"nic\".

        :return: The network_template of this Instance.
        :rtype: str
        """
        return self._network_template

    @network_template.setter
    def network_template(self, network_template):
        """Sets the network_template of this Instance.

        Instance network template name. For eg, bondaa-bondaa, bondab-nic, etc. Generally, the template name follows the syntax of \"bond\" or \"nic\".

        :param network_template: The network_template of this Instance.
        :type network_template: str
        """

        self._network_template = network_template

    @property
    def networks(self):
        """Gets the networks of this Instance.

        Output only. List of networks associated with this server.

        :return: The networks of this Instance.
        :rtype: List[Network]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this Instance.

        Output only. List of networks associated with this server.

        :param networks: The networks of this Instance.
        :type networks: List[Network]
        """

        self._networks = networks

    @property
    def os_image(self):
        """Gets the os_image of this Instance.

        The OS image currently installed on the server.

        :return: The os_image of this Instance.
        :rtype: str
        """
        return self._os_image

    @os_image.setter
    def os_image(self, os_image):
        """Sets the os_image of this Instance.

        The OS image currently installed on the server.

        :param os_image: The os_image of this Instance.
        :type os_image: str
        """

        self._os_image = os_image

    @property
    def pod(self):
        """Gets the pod of this Instance.

        Immutable. Pod name. Pod is an independent part of infrastructure. Instance can only be connected to the assets (networks, volumes) allocated in the same pod.

        :return: The pod of this Instance.
        :rtype: str
        """
        return self._pod

    @pod.setter
    def pod(self, pod):
        """Sets the pod of this Instance.

        Immutable. Pod name. Pod is an independent part of infrastructure. Instance can only be connected to the assets (networks, volumes) allocated in the same pod.

        :param pod: The pod of this Instance.
        :type pod: str
        """

        self._pod = pod

    @property
    def ssh_keys(self):
        """Gets the ssh_keys of this Instance.

        Optional. List of SSH Keys used during instance provisioning.

        :return: The ssh_keys of this Instance.
        :rtype: List[str]
        """
        return self._ssh_keys

    @ssh_keys.setter
    def ssh_keys(self, ssh_keys):
        """Sets the ssh_keys of this Instance.

        Optional. List of SSH Keys used during instance provisioning.

        :param ssh_keys: The ssh_keys of this Instance.
        :type ssh_keys: List[str]
        """

        self._ssh_keys = ssh_keys

    @property
    def state(self):
        """Gets the state of this Instance.

        Output only. The state of the server.

        :return: The state of this Instance.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Instance.

        Output only. The state of the server.

        :param state: The state of this Instance.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PROVISIONING", "RUNNING", "DELETED", "UPDATING", "STARTING", "STOPPING", "SHUTDOWN"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this Instance.

        Output only. Update a time stamp.

        :return: The update_time of this Instance.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Instance.

        Output only. Update a time stamp.

        :param update_time: The update_time of this Instance.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def volumes(self):
        """Gets the volumes of this Instance.

        Input only. List of Volumes to attach to this Instance on creation. This field won't be populated in Get/List responses.

        :return: The volumes of this Instance.
        :rtype: List[Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this Instance.

        Input only. List of Volumes to attach to this Instance on creation. This field won't be populated in Get/List responses.

        :param volumes: The volumes of this Instance.
        :type volumes: List[Volume]
        """

        self._volumes = volumes

    @property
    def workload_profile(self):
        """Gets the workload_profile of this Instance.

        The workload profile for the instance.

        :return: The workload_profile of this Instance.
        :rtype: str
        """
        return self._workload_profile

    @workload_profile.setter
    def workload_profile(self, workload_profile):
        """Sets the workload_profile of this Instance.

        The workload profile for the instance.

        :param workload_profile: The workload_profile of this Instance.
        :type workload_profile: str
        """
        allowed_values = ["WORKLOAD_PROFILE_UNSPECIFIED", "WORKLOAD_PROFILE_GENERIC", "WORKLOAD_PROFILE_HANA"]  # noqa: E501
        if workload_profile not in allowed_values:
            raise ValueError(
                "Invalid value for `workload_profile` ({0}), must be one of {1}"
                .format(workload_profile, allowed_values)
            )

        self._workload_profile = workload_profile
