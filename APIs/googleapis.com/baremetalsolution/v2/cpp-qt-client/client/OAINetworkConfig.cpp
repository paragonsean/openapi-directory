/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkConfig::OAINetworkConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkConfig::OAINetworkConfig() {
    this->initializeModel();
}

OAINetworkConfig::~OAINetworkConfig() {}

void OAINetworkConfig::initializeModel() {

    m_bandwidth_isSet = false;
    m_bandwidth_isValid = false;

    m_cidr_isSet = false;
    m_cidr_isValid = false;

    m_gcp_service_isSet = false;
    m_gcp_service_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_jumbo_frames_enabled_isSet = false;
    m_jumbo_frames_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_service_cidr_isSet = false;
    m_service_cidr_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_note_isSet = false;
    m_user_note_isValid = false;

    m_vlan_attachments_isSet = false;
    m_vlan_attachments_isValid = false;

    m_vlan_same_project_isSet = false;
    m_vlan_same_project_isValid = false;
}

void OAINetworkConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkConfig::fromJsonObject(QJsonObject json) {

    m_bandwidth_isValid = ::OpenAPI::fromJsonValue(m_bandwidth, json[QString("bandwidth")]);
    m_bandwidth_isSet = !json[QString("bandwidth")].isNull() && m_bandwidth_isValid;

    m_cidr_isValid = ::OpenAPI::fromJsonValue(m_cidr, json[QString("cidr")]);
    m_cidr_isSet = !json[QString("cidr")].isNull() && m_cidr_isValid;

    m_gcp_service_isValid = ::OpenAPI::fromJsonValue(m_gcp_service, json[QString("gcpService")]);
    m_gcp_service_isSet = !json[QString("gcpService")].isNull() && m_gcp_service_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_jumbo_frames_enabled_isValid = ::OpenAPI::fromJsonValue(m_jumbo_frames_enabled, json[QString("jumboFramesEnabled")]);
    m_jumbo_frames_enabled_isSet = !json[QString("jumboFramesEnabled")].isNull() && m_jumbo_frames_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_service_cidr_isValid = ::OpenAPI::fromJsonValue(m_service_cidr, json[QString("serviceCidr")]);
    m_service_cidr_isSet = !json[QString("serviceCidr")].isNull() && m_service_cidr_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_note_isValid = ::OpenAPI::fromJsonValue(m_user_note, json[QString("userNote")]);
    m_user_note_isSet = !json[QString("userNote")].isNull() && m_user_note_isValid;

    m_vlan_attachments_isValid = ::OpenAPI::fromJsonValue(m_vlan_attachments, json[QString("vlanAttachments")]);
    m_vlan_attachments_isSet = !json[QString("vlanAttachments")].isNull() && m_vlan_attachments_isValid;

    m_vlan_same_project_isValid = ::OpenAPI::fromJsonValue(m_vlan_same_project, json[QString("vlanSameProject")]);
    m_vlan_same_project_isSet = !json[QString("vlanSameProject")].isNull() && m_vlan_same_project_isValid;
}

QString OAINetworkConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_bandwidth_isSet) {
        obj.insert(QString("bandwidth"), ::OpenAPI::toJsonValue(m_bandwidth));
    }
    if (m_cidr_isSet) {
        obj.insert(QString("cidr"), ::OpenAPI::toJsonValue(m_cidr));
    }
    if (m_gcp_service_isSet) {
        obj.insert(QString("gcpService"), ::OpenAPI::toJsonValue(m_gcp_service));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_jumbo_frames_enabled_isSet) {
        obj.insert(QString("jumboFramesEnabled"), ::OpenAPI::toJsonValue(m_jumbo_frames_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_service_cidr_isSet) {
        obj.insert(QString("serviceCidr"), ::OpenAPI::toJsonValue(m_service_cidr));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_note_isSet) {
        obj.insert(QString("userNote"), ::OpenAPI::toJsonValue(m_user_note));
    }
    if (m_vlan_attachments.size() > 0) {
        obj.insert(QString("vlanAttachments"), ::OpenAPI::toJsonValue(m_vlan_attachments));
    }
    if (m_vlan_same_project_isSet) {
        obj.insert(QString("vlanSameProject"), ::OpenAPI::toJsonValue(m_vlan_same_project));
    }
    return obj;
}

QString OAINetworkConfig::getBandwidth() const {
    return m_bandwidth;
}
void OAINetworkConfig::setBandwidth(const QString &bandwidth) {
    m_bandwidth = bandwidth;
    m_bandwidth_isSet = true;
}

bool OAINetworkConfig::is_bandwidth_Set() const{
    return m_bandwidth_isSet;
}

bool OAINetworkConfig::is_bandwidth_Valid() const{
    return m_bandwidth_isValid;
}

QString OAINetworkConfig::getCidr() const {
    return m_cidr;
}
void OAINetworkConfig::setCidr(const QString &cidr) {
    m_cidr = cidr;
    m_cidr_isSet = true;
}

bool OAINetworkConfig::is_cidr_Set() const{
    return m_cidr_isSet;
}

bool OAINetworkConfig::is_cidr_Valid() const{
    return m_cidr_isValid;
}

QString OAINetworkConfig::getGcpService() const {
    return m_gcp_service;
}
void OAINetworkConfig::setGcpService(const QString &gcp_service) {
    m_gcp_service = gcp_service;
    m_gcp_service_isSet = true;
}

bool OAINetworkConfig::is_gcp_service_Set() const{
    return m_gcp_service_isSet;
}

bool OAINetworkConfig::is_gcp_service_Valid() const{
    return m_gcp_service_isValid;
}

QString OAINetworkConfig::getId() const {
    return m_id;
}
void OAINetworkConfig::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINetworkConfig::is_id_Set() const{
    return m_id_isSet;
}

bool OAINetworkConfig::is_id_Valid() const{
    return m_id_isValid;
}

bool OAINetworkConfig::isJumboFramesEnabled() const {
    return m_jumbo_frames_enabled;
}
void OAINetworkConfig::setJumboFramesEnabled(const bool &jumbo_frames_enabled) {
    m_jumbo_frames_enabled = jumbo_frames_enabled;
    m_jumbo_frames_enabled_isSet = true;
}

bool OAINetworkConfig::is_jumbo_frames_enabled_Set() const{
    return m_jumbo_frames_enabled_isSet;
}

bool OAINetworkConfig::is_jumbo_frames_enabled_Valid() const{
    return m_jumbo_frames_enabled_isValid;
}

QString OAINetworkConfig::getName() const {
    return m_name;
}
void OAINetworkConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINetworkConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAINetworkConfig::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINetworkConfig::getServiceCidr() const {
    return m_service_cidr;
}
void OAINetworkConfig::setServiceCidr(const QString &service_cidr) {
    m_service_cidr = service_cidr;
    m_service_cidr_isSet = true;
}

bool OAINetworkConfig::is_service_cidr_Set() const{
    return m_service_cidr_isSet;
}

bool OAINetworkConfig::is_service_cidr_Valid() const{
    return m_service_cidr_isValid;
}

QString OAINetworkConfig::getType() const {
    return m_type;
}
void OAINetworkConfig::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINetworkConfig::is_type_Set() const{
    return m_type_isSet;
}

bool OAINetworkConfig::is_type_Valid() const{
    return m_type_isValid;
}

QString OAINetworkConfig::getUserNote() const {
    return m_user_note;
}
void OAINetworkConfig::setUserNote(const QString &user_note) {
    m_user_note = user_note;
    m_user_note_isSet = true;
}

bool OAINetworkConfig::is_user_note_Set() const{
    return m_user_note_isSet;
}

bool OAINetworkConfig::is_user_note_Valid() const{
    return m_user_note_isValid;
}

QList<OAIIntakeVlanAttachment> OAINetworkConfig::getVlanAttachments() const {
    return m_vlan_attachments;
}
void OAINetworkConfig::setVlanAttachments(const QList<OAIIntakeVlanAttachment> &vlan_attachments) {
    m_vlan_attachments = vlan_attachments;
    m_vlan_attachments_isSet = true;
}

bool OAINetworkConfig::is_vlan_attachments_Set() const{
    return m_vlan_attachments_isSet;
}

bool OAINetworkConfig::is_vlan_attachments_Valid() const{
    return m_vlan_attachments_isValid;
}

bool OAINetworkConfig::isVlanSameProject() const {
    return m_vlan_same_project;
}
void OAINetworkConfig::setVlanSameProject(const bool &vlan_same_project) {
    m_vlan_same_project = vlan_same_project;
    m_vlan_same_project_isSet = true;
}

bool OAINetworkConfig::is_vlan_same_project_Set() const{
    return m_vlan_same_project_isSet;
}

bool OAINetworkConfig::is_vlan_same_project_Valid() const{
    return m_vlan_same_project_isValid;
}

bool OAINetworkConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bandwidth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcp_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jumbo_frames_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_same_project_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
