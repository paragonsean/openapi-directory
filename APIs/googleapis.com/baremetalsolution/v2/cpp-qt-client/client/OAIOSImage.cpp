/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSImage::OAIOSImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSImage::OAIOSImage() {
    this->initializeModel();
}

OAIOSImage::~OAIOSImage() {}

void OAIOSImage::initializeModel() {

    m_applicable_instance_types_isSet = false;
    m_applicable_instance_types_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_supported_network_templates_isSet = false;
    m_supported_network_templates_isValid = false;
}

void OAIOSImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOSImage::fromJsonObject(QJsonObject json) {

    m_applicable_instance_types_isValid = ::OpenAPI::fromJsonValue(m_applicable_instance_types, json[QString("applicableInstanceTypes")]);
    m_applicable_instance_types_isSet = !json[QString("applicableInstanceTypes")].isNull() && m_applicable_instance_types_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_supported_network_templates_isValid = ::OpenAPI::fromJsonValue(m_supported_network_templates, json[QString("supportedNetworkTemplates")]);
    m_supported_network_templates_isSet = !json[QString("supportedNetworkTemplates")].isNull() && m_supported_network_templates_isValid;
}

QString OAIOSImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOSImage::asJsonObject() const {
    QJsonObject obj;
    if (m_applicable_instance_types.size() > 0) {
        obj.insert(QString("applicableInstanceTypes"), ::OpenAPI::toJsonValue(m_applicable_instance_types));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_supported_network_templates.size() > 0) {
        obj.insert(QString("supportedNetworkTemplates"), ::OpenAPI::toJsonValue(m_supported_network_templates));
    }
    return obj;
}

QList<QString> OAIOSImage::getApplicableInstanceTypes() const {
    return m_applicable_instance_types;
}
void OAIOSImage::setApplicableInstanceTypes(const QList<QString> &applicable_instance_types) {
    m_applicable_instance_types = applicable_instance_types;
    m_applicable_instance_types_isSet = true;
}

bool OAIOSImage::is_applicable_instance_types_Set() const{
    return m_applicable_instance_types_isSet;
}

bool OAIOSImage::is_applicable_instance_types_Valid() const{
    return m_applicable_instance_types_isValid;
}

QString OAIOSImage::getCode() const {
    return m_code;
}
void OAIOSImage::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIOSImage::is_code_Set() const{
    return m_code_isSet;
}

bool OAIOSImage::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIOSImage::getDescription() const {
    return m_description;
}
void OAIOSImage::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOSImage::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOSImage::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIOSImage::getName() const {
    return m_name;
}
void OAIOSImage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOSImage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOSImage::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIOSImage::getSupportedNetworkTemplates() const {
    return m_supported_network_templates;
}
void OAIOSImage::setSupportedNetworkTemplates(const QList<QString> &supported_network_templates) {
    m_supported_network_templates = supported_network_templates;
    m_supported_network_templates_isSet = true;
}

bool OAIOSImage::is_supported_network_templates_Set() const{
    return m_supported_network_templates_isSet;
}

bool OAIOSImage::is_supported_network_templates_Valid() const{
    return m_supported_network_templates_isValid;
}

bool OAIOSImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applicable_instance_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_network_templates.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOSImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
