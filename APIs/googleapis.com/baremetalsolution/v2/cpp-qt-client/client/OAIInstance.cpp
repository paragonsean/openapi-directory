/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstance::OAIInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstance::OAIInstance() {
    this->initializeModel();
}

OAIInstance::~OAIInstance() {}

void OAIInstance::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_firmware_version_isSet = false;
    m_firmware_version_isValid = false;

    m_hyperthreading_enabled_isSet = false;
    m_hyperthreading_enabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interactive_serial_console_enabled_isSet = false;
    m_interactive_serial_console_enabled_isValid = false;

    m_kms_key_version_isSet = false;
    m_kms_key_version_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_logical_interfaces_isSet = false;
    m_logical_interfaces_isValid = false;

    m_login_info_isSet = false;
    m_login_info_isValid = false;

    m_luns_isSet = false;
    m_luns_isValid = false;

    m_machine_type_isSet = false;
    m_machine_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_template_isSet = false;
    m_network_template_isValid = false;

    m_networks_isSet = false;
    m_networks_isValid = false;

    m_os_image_isSet = false;
    m_os_image_isValid = false;

    m_pod_isSet = false;
    m_pod_isValid = false;

    m_ssh_keys_isSet = false;
    m_ssh_keys_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_volumes_isSet = false;
    m_volumes_isValid = false;

    m_workload_profile_isSet = false;
    m_workload_profile_isValid = false;
}

void OAIInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstance::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_firmware_version_isValid = ::OpenAPI::fromJsonValue(m_firmware_version, json[QString("firmwareVersion")]);
    m_firmware_version_isSet = !json[QString("firmwareVersion")].isNull() && m_firmware_version_isValid;

    m_hyperthreading_enabled_isValid = ::OpenAPI::fromJsonValue(m_hyperthreading_enabled, json[QString("hyperthreadingEnabled")]);
    m_hyperthreading_enabled_isSet = !json[QString("hyperthreadingEnabled")].isNull() && m_hyperthreading_enabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interactive_serial_console_enabled_isValid = ::OpenAPI::fromJsonValue(m_interactive_serial_console_enabled, json[QString("interactiveSerialConsoleEnabled")]);
    m_interactive_serial_console_enabled_isSet = !json[QString("interactiveSerialConsoleEnabled")].isNull() && m_interactive_serial_console_enabled_isValid;

    m_kms_key_version_isValid = ::OpenAPI::fromJsonValue(m_kms_key_version, json[QString("kmsKeyVersion")]);
    m_kms_key_version_isSet = !json[QString("kmsKeyVersion")].isNull() && m_kms_key_version_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_logical_interfaces_isValid = ::OpenAPI::fromJsonValue(m_logical_interfaces, json[QString("logicalInterfaces")]);
    m_logical_interfaces_isSet = !json[QString("logicalInterfaces")].isNull() && m_logical_interfaces_isValid;

    m_login_info_isValid = ::OpenAPI::fromJsonValue(m_login_info, json[QString("loginInfo")]);
    m_login_info_isSet = !json[QString("loginInfo")].isNull() && m_login_info_isValid;

    m_luns_isValid = ::OpenAPI::fromJsonValue(m_luns, json[QString("luns")]);
    m_luns_isSet = !json[QString("luns")].isNull() && m_luns_isValid;

    m_machine_type_isValid = ::OpenAPI::fromJsonValue(m_machine_type, json[QString("machineType")]);
    m_machine_type_isSet = !json[QString("machineType")].isNull() && m_machine_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_template_isValid = ::OpenAPI::fromJsonValue(m_network_template, json[QString("networkTemplate")]);
    m_network_template_isSet = !json[QString("networkTemplate")].isNull() && m_network_template_isValid;

    m_networks_isValid = ::OpenAPI::fromJsonValue(m_networks, json[QString("networks")]);
    m_networks_isSet = !json[QString("networks")].isNull() && m_networks_isValid;

    m_os_image_isValid = ::OpenAPI::fromJsonValue(m_os_image, json[QString("osImage")]);
    m_os_image_isSet = !json[QString("osImage")].isNull() && m_os_image_isValid;

    m_pod_isValid = ::OpenAPI::fromJsonValue(m_pod, json[QString("pod")]);
    m_pod_isSet = !json[QString("pod")].isNull() && m_pod_isValid;

    m_ssh_keys_isValid = ::OpenAPI::fromJsonValue(m_ssh_keys, json[QString("sshKeys")]);
    m_ssh_keys_isSet = !json[QString("sshKeys")].isNull() && m_ssh_keys_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_volumes_isValid = ::OpenAPI::fromJsonValue(m_volumes, json[QString("volumes")]);
    m_volumes_isSet = !json[QString("volumes")].isNull() && m_volumes_isValid;

    m_workload_profile_isValid = ::OpenAPI::fromJsonValue(m_workload_profile, json[QString("workloadProfile")]);
    m_workload_profile_isSet = !json[QString("workloadProfile")].isNull() && m_workload_profile_isValid;
}

QString OAIInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_firmware_version_isSet) {
        obj.insert(QString("firmwareVersion"), ::OpenAPI::toJsonValue(m_firmware_version));
    }
    if (m_hyperthreading_enabled_isSet) {
        obj.insert(QString("hyperthreadingEnabled"), ::OpenAPI::toJsonValue(m_hyperthreading_enabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interactive_serial_console_enabled_isSet) {
        obj.insert(QString("interactiveSerialConsoleEnabled"), ::OpenAPI::toJsonValue(m_interactive_serial_console_enabled));
    }
    if (m_kms_key_version_isSet) {
        obj.insert(QString("kmsKeyVersion"), ::OpenAPI::toJsonValue(m_kms_key_version));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_logical_interfaces.size() > 0) {
        obj.insert(QString("logicalInterfaces"), ::OpenAPI::toJsonValue(m_logical_interfaces));
    }
    if (m_login_info_isSet) {
        obj.insert(QString("loginInfo"), ::OpenAPI::toJsonValue(m_login_info));
    }
    if (m_luns.size() > 0) {
        obj.insert(QString("luns"), ::OpenAPI::toJsonValue(m_luns));
    }
    if (m_machine_type_isSet) {
        obj.insert(QString("machineType"), ::OpenAPI::toJsonValue(m_machine_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_template_isSet) {
        obj.insert(QString("networkTemplate"), ::OpenAPI::toJsonValue(m_network_template));
    }
    if (m_networks.size() > 0) {
        obj.insert(QString("networks"), ::OpenAPI::toJsonValue(m_networks));
    }
    if (m_os_image_isSet) {
        obj.insert(QString("osImage"), ::OpenAPI::toJsonValue(m_os_image));
    }
    if (m_pod_isSet) {
        obj.insert(QString("pod"), ::OpenAPI::toJsonValue(m_pod));
    }
    if (m_ssh_keys.size() > 0) {
        obj.insert(QString("sshKeys"), ::OpenAPI::toJsonValue(m_ssh_keys));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_volumes.size() > 0) {
        obj.insert(QString("volumes"), ::OpenAPI::toJsonValue(m_volumes));
    }
    if (m_workload_profile_isSet) {
        obj.insert(QString("workloadProfile"), ::OpenAPI::toJsonValue(m_workload_profile));
    }
    return obj;
}

QString OAIInstance::getCreateTime() const {
    return m_create_time;
}
void OAIInstance::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIInstance::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIInstance::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIInstance::getFirmwareVersion() const {
    return m_firmware_version;
}
void OAIInstance::setFirmwareVersion(const QString &firmware_version) {
    m_firmware_version = firmware_version;
    m_firmware_version_isSet = true;
}

bool OAIInstance::is_firmware_version_Set() const{
    return m_firmware_version_isSet;
}

bool OAIInstance::is_firmware_version_Valid() const{
    return m_firmware_version_isValid;
}

bool OAIInstance::isHyperthreadingEnabled() const {
    return m_hyperthreading_enabled;
}
void OAIInstance::setHyperthreadingEnabled(const bool &hyperthreading_enabled) {
    m_hyperthreading_enabled = hyperthreading_enabled;
    m_hyperthreading_enabled_isSet = true;
}

bool OAIInstance::is_hyperthreading_enabled_Set() const{
    return m_hyperthreading_enabled_isSet;
}

bool OAIInstance::is_hyperthreading_enabled_Valid() const{
    return m_hyperthreading_enabled_isValid;
}

QString OAIInstance::getId() const {
    return m_id;
}
void OAIInstance::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInstance::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInstance::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIInstance::isInteractiveSerialConsoleEnabled() const {
    return m_interactive_serial_console_enabled;
}
void OAIInstance::setInteractiveSerialConsoleEnabled(const bool &interactive_serial_console_enabled) {
    m_interactive_serial_console_enabled = interactive_serial_console_enabled;
    m_interactive_serial_console_enabled_isSet = true;
}

bool OAIInstance::is_interactive_serial_console_enabled_Set() const{
    return m_interactive_serial_console_enabled_isSet;
}

bool OAIInstance::is_interactive_serial_console_enabled_Valid() const{
    return m_interactive_serial_console_enabled_isValid;
}

QString OAIInstance::getKmsKeyVersion() const {
    return m_kms_key_version;
}
void OAIInstance::setKmsKeyVersion(const QString &kms_key_version) {
    m_kms_key_version = kms_key_version;
    m_kms_key_version_isSet = true;
}

bool OAIInstance::is_kms_key_version_Set() const{
    return m_kms_key_version_isSet;
}

bool OAIInstance::is_kms_key_version_Valid() const{
    return m_kms_key_version_isValid;
}

QMap<QString, QString> OAIInstance::getLabels() const {
    return m_labels;
}
void OAIInstance::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIInstance::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIInstance::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<OAIGoogleCloudBaremetalsolutionV2LogicalInterface> OAIInstance::getLogicalInterfaces() const {
    return m_logical_interfaces;
}
void OAIInstance::setLogicalInterfaces(const QList<OAIGoogleCloudBaremetalsolutionV2LogicalInterface> &logical_interfaces) {
    m_logical_interfaces = logical_interfaces;
    m_logical_interfaces_isSet = true;
}

bool OAIInstance::is_logical_interfaces_Set() const{
    return m_logical_interfaces_isSet;
}

bool OAIInstance::is_logical_interfaces_Valid() const{
    return m_logical_interfaces_isValid;
}

QString OAIInstance::getLoginInfo() const {
    return m_login_info;
}
void OAIInstance::setLoginInfo(const QString &login_info) {
    m_login_info = login_info;
    m_login_info_isSet = true;
}

bool OAIInstance::is_login_info_Set() const{
    return m_login_info_isSet;
}

bool OAIInstance::is_login_info_Valid() const{
    return m_login_info_isValid;
}

QList<OAILun> OAIInstance::getLuns() const {
    return m_luns;
}
void OAIInstance::setLuns(const QList<OAILun> &luns) {
    m_luns = luns;
    m_luns_isSet = true;
}

bool OAIInstance::is_luns_Set() const{
    return m_luns_isSet;
}

bool OAIInstance::is_luns_Valid() const{
    return m_luns_isValid;
}

QString OAIInstance::getMachineType() const {
    return m_machine_type;
}
void OAIInstance::setMachineType(const QString &machine_type) {
    m_machine_type = machine_type;
    m_machine_type_isSet = true;
}

bool OAIInstance::is_machine_type_Set() const{
    return m_machine_type_isSet;
}

bool OAIInstance::is_machine_type_Valid() const{
    return m_machine_type_isValid;
}

QString OAIInstance::getName() const {
    return m_name;
}
void OAIInstance::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInstance::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInstance::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInstance::getNetworkTemplate() const {
    return m_network_template;
}
void OAIInstance::setNetworkTemplate(const QString &network_template) {
    m_network_template = network_template;
    m_network_template_isSet = true;
}

bool OAIInstance::is_network_template_Set() const{
    return m_network_template_isSet;
}

bool OAIInstance::is_network_template_Valid() const{
    return m_network_template_isValid;
}

QList<OAINetwork> OAIInstance::getNetworks() const {
    return m_networks;
}
void OAIInstance::setNetworks(const QList<OAINetwork> &networks) {
    m_networks = networks;
    m_networks_isSet = true;
}

bool OAIInstance::is_networks_Set() const{
    return m_networks_isSet;
}

bool OAIInstance::is_networks_Valid() const{
    return m_networks_isValid;
}

QString OAIInstance::getOsImage() const {
    return m_os_image;
}
void OAIInstance::setOsImage(const QString &os_image) {
    m_os_image = os_image;
    m_os_image_isSet = true;
}

bool OAIInstance::is_os_image_Set() const{
    return m_os_image_isSet;
}

bool OAIInstance::is_os_image_Valid() const{
    return m_os_image_isValid;
}

QString OAIInstance::getPod() const {
    return m_pod;
}
void OAIInstance::setPod(const QString &pod) {
    m_pod = pod;
    m_pod_isSet = true;
}

bool OAIInstance::is_pod_Set() const{
    return m_pod_isSet;
}

bool OAIInstance::is_pod_Valid() const{
    return m_pod_isValid;
}

QList<QString> OAIInstance::getSshKeys() const {
    return m_ssh_keys;
}
void OAIInstance::setSshKeys(const QList<QString> &ssh_keys) {
    m_ssh_keys = ssh_keys;
    m_ssh_keys_isSet = true;
}

bool OAIInstance::is_ssh_keys_Set() const{
    return m_ssh_keys_isSet;
}

bool OAIInstance::is_ssh_keys_Valid() const{
    return m_ssh_keys_isValid;
}

QString OAIInstance::getState() const {
    return m_state;
}
void OAIInstance::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIInstance::is_state_Set() const{
    return m_state_isSet;
}

bool OAIInstance::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIInstance::getUpdateTime() const {
    return m_update_time;
}
void OAIInstance::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIInstance::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIInstance::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QList<OAIVolume> OAIInstance::getVolumes() const {
    return m_volumes;
}
void OAIInstance::setVolumes(const QList<OAIVolume> &volumes) {
    m_volumes = volumes;
    m_volumes_isSet = true;
}

bool OAIInstance::is_volumes_Set() const{
    return m_volumes_isSet;
}

bool OAIInstance::is_volumes_Valid() const{
    return m_volumes_isValid;
}

QString OAIInstance::getWorkloadProfile() const {
    return m_workload_profile;
}
void OAIInstance::setWorkloadProfile(const QString &workload_profile) {
    m_workload_profile = workload_profile;
    m_workload_profile_isSet = true;
}

bool OAIInstance::is_workload_profile_Set() const{
    return m_workload_profile_isSet;
}

bool OAIInstance::is_workload_profile_Valid() const{
    return m_workload_profile_isValid;
}

bool OAIInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hyperthreading_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interactive_serial_console_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_interfaces.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_luns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_networks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_workload_profile_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
