/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserAccount::OAIUserAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserAccount::OAIUserAccount() {
    this->initializeModel();
}

OAIUserAccount::~OAIUserAccount() {}

void OAIUserAccount::initializeModel() {

    m_encrypted_password_isSet = false;
    m_encrypted_password_isValid = false;

    m_kms_key_version_isSet = false;
    m_kms_key_version_isValid = false;
}

void OAIUserAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserAccount::fromJsonObject(QJsonObject json) {

    m_encrypted_password_isValid = ::OpenAPI::fromJsonValue(m_encrypted_password, json[QString("encryptedPassword")]);
    m_encrypted_password_isSet = !json[QString("encryptedPassword")].isNull() && m_encrypted_password_isValid;

    m_kms_key_version_isValid = ::OpenAPI::fromJsonValue(m_kms_key_version, json[QString("kmsKeyVersion")]);
    m_kms_key_version_isSet = !json[QString("kmsKeyVersion")].isNull() && m_kms_key_version_isValid;
}

QString OAIUserAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_encrypted_password_isSet) {
        obj.insert(QString("encryptedPassword"), ::OpenAPI::toJsonValue(m_encrypted_password));
    }
    if (m_kms_key_version_isSet) {
        obj.insert(QString("kmsKeyVersion"), ::OpenAPI::toJsonValue(m_kms_key_version));
    }
    return obj;
}

QString OAIUserAccount::getEncryptedPassword() const {
    return m_encrypted_password;
}
void OAIUserAccount::setEncryptedPassword(const QString &encrypted_password) {
    m_encrypted_password = encrypted_password;
    m_encrypted_password_isSet = true;
}

bool OAIUserAccount::is_encrypted_password_Set() const{
    return m_encrypted_password_isSet;
}

bool OAIUserAccount::is_encrypted_password_Valid() const{
    return m_encrypted_password_isValid;
}

QString OAIUserAccount::getKmsKeyVersion() const {
    return m_kms_key_version;
}
void OAIUserAccount::setKmsKeyVersion(const QString &kms_key_version) {
    m_kms_key_version = kms_key_version;
    m_kms_key_version_isSet = true;
}

bool OAIUserAccount::is_kms_key_version_Set() const{
    return m_kms_key_version_isSet;
}

bool OAIUserAccount::is_kms_key_version_Valid() const{
    return m_kms_key_version_isValid;
}

bool OAIUserAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encrypted_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
