/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINetwork.h
 *
 * A Network.
 */

#ifndef OAINetwork_H
#define OAINetwork_H

#include <QJsonObject>

#include "OAINetworkAddressReservation.h"
#include "OAINetworkMountPoint.h"
#include "OAIVRF.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINetworkMountPoint;
class OAINetworkAddressReservation;
class OAIVRF;

class OAINetwork : public OAIObject {
public:
    OAINetwork();
    OAINetwork(QString json);
    ~OAINetwork() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCidr() const;
    void setCidr(const QString &cidr);
    bool is_cidr_Set() const;
    bool is_cidr_Valid() const;

    QString getGatewayIp() const;
    void setGatewayIp(const QString &gateway_ip);
    bool is_gateway_ip_Set() const;
    bool is_gateway_ip_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getIpAddress() const;
    void setIpAddress(const QString &ip_address);
    bool is_ip_address_Set() const;
    bool is_ip_address_Valid() const;

    bool isJumboFramesEnabled() const;
    void setJumboFramesEnabled(const bool &jumbo_frames_enabled);
    bool is_jumbo_frames_enabled_Set() const;
    bool is_jumbo_frames_enabled_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QList<QString> getMacAddress() const;
    void setMacAddress(const QList<QString> &mac_address);
    bool is_mac_address_Set() const;
    bool is_mac_address_Valid() const;

    QList<OAINetworkMountPoint> getMountPoints() const;
    void setMountPoints(const QList<OAINetworkMountPoint> &mount_points);
    bool is_mount_points_Set() const;
    bool is_mount_points_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPod() const;
    void setPod(const QString &pod);
    bool is_pod_Set() const;
    bool is_pod_Valid() const;

    QList<OAINetworkAddressReservation> getReservations() const;
    void setReservations(const QList<OAINetworkAddressReservation> &reservations);
    bool is_reservations_Set() const;
    bool is_reservations_Valid() const;

    QString getServicesCidr() const;
    void setServicesCidr(const QString &services_cidr);
    bool is_services_cidr_Set() const;
    bool is_services_cidr_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getVlanId() const;
    void setVlanId(const QString &vlan_id);
    bool is_vlan_id_Set() const;
    bool is_vlan_id_Valid() const;

    OAIVRF getVrf() const;
    void setVrf(const OAIVRF &vrf);
    bool is_vrf_Set() const;
    bool is_vrf_Valid() const;

    QString getVrfAttachment() const;
    void setVrfAttachment(const QString &vrf_attachment);
    bool is_vrf_attachment_Set() const;
    bool is_vrf_attachment_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cidr;
    bool m_cidr_isSet;
    bool m_cidr_isValid;

    QString m_gateway_ip;
    bool m_gateway_ip_isSet;
    bool m_gateway_ip_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_ip_address;
    bool m_ip_address_isSet;
    bool m_ip_address_isValid;

    bool m_jumbo_frames_enabled;
    bool m_jumbo_frames_enabled_isSet;
    bool m_jumbo_frames_enabled_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QList<QString> m_mac_address;
    bool m_mac_address_isSet;
    bool m_mac_address_isValid;

    QList<OAINetworkMountPoint> m_mount_points;
    bool m_mount_points_isSet;
    bool m_mount_points_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_pod;
    bool m_pod_isSet;
    bool m_pod_isValid;

    QList<OAINetworkAddressReservation> m_reservations;
    bool m_reservations_isSet;
    bool m_reservations_isValid;

    QString m_services_cidr;
    bool m_services_cidr_isSet;
    bool m_services_cidr_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_vlan_id;
    bool m_vlan_id_isSet;
    bool m_vlan_id_isValid;

    OAIVRF m_vrf;
    bool m_vrf_isSet;
    bool m_vrf_isValid;

    QString m_vrf_attachment;
    bool m_vrf_attachment_isSet;
    bool m_vrf_attachment_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINetwork)

#endif // OAINetwork_H
