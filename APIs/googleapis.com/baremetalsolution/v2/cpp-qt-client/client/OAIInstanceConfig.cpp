/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceConfig::OAIInstanceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceConfig::OAIInstanceConfig() {
    this->initializeModel();
}

OAIInstanceConfig::~OAIInstanceConfig() {}

void OAIInstanceConfig::initializeModel() {

    m_account_networks_enabled_isSet = false;
    m_account_networks_enabled_isValid = false;

    m_client_network_isSet = false;
    m_client_network_isValid = false;

    m_hyperthreading_isSet = false;
    m_hyperthreading_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_kms_key_version_isSet = false;
    m_kms_key_version_isValid = false;

    m_logical_interfaces_isSet = false;
    m_logical_interfaces_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_config_isSet = false;
    m_network_config_isValid = false;

    m_network_template_isSet = false;
    m_network_template_isValid = false;

    m_os_image_isSet = false;
    m_os_image_isValid = false;

    m_private_network_isSet = false;
    m_private_network_isValid = false;

    m_ssh_key_names_isSet = false;
    m_ssh_key_names_isValid = false;

    m_user_note_isSet = false;
    m_user_note_isValid = false;
}

void OAIInstanceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceConfig::fromJsonObject(QJsonObject json) {

    m_account_networks_enabled_isValid = ::OpenAPI::fromJsonValue(m_account_networks_enabled, json[QString("accountNetworksEnabled")]);
    m_account_networks_enabled_isSet = !json[QString("accountNetworksEnabled")].isNull() && m_account_networks_enabled_isValid;

    m_client_network_isValid = ::OpenAPI::fromJsonValue(m_client_network, json[QString("clientNetwork")]);
    m_client_network_isSet = !json[QString("clientNetwork")].isNull() && m_client_network_isValid;

    m_hyperthreading_isValid = ::OpenAPI::fromJsonValue(m_hyperthreading, json[QString("hyperthreading")]);
    m_hyperthreading_isSet = !json[QString("hyperthreading")].isNull() && m_hyperthreading_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_kms_key_version_isValid = ::OpenAPI::fromJsonValue(m_kms_key_version, json[QString("kmsKeyVersion")]);
    m_kms_key_version_isSet = !json[QString("kmsKeyVersion")].isNull() && m_kms_key_version_isValid;

    m_logical_interfaces_isValid = ::OpenAPI::fromJsonValue(m_logical_interfaces, json[QString("logicalInterfaces")]);
    m_logical_interfaces_isSet = !json[QString("logicalInterfaces")].isNull() && m_logical_interfaces_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_config_isValid = ::OpenAPI::fromJsonValue(m_network_config, json[QString("networkConfig")]);
    m_network_config_isSet = !json[QString("networkConfig")].isNull() && m_network_config_isValid;

    m_network_template_isValid = ::OpenAPI::fromJsonValue(m_network_template, json[QString("networkTemplate")]);
    m_network_template_isSet = !json[QString("networkTemplate")].isNull() && m_network_template_isValid;

    m_os_image_isValid = ::OpenAPI::fromJsonValue(m_os_image, json[QString("osImage")]);
    m_os_image_isSet = !json[QString("osImage")].isNull() && m_os_image_isValid;

    m_private_network_isValid = ::OpenAPI::fromJsonValue(m_private_network, json[QString("privateNetwork")]);
    m_private_network_isSet = !json[QString("privateNetwork")].isNull() && m_private_network_isValid;

    m_ssh_key_names_isValid = ::OpenAPI::fromJsonValue(m_ssh_key_names, json[QString("sshKeyNames")]);
    m_ssh_key_names_isSet = !json[QString("sshKeyNames")].isNull() && m_ssh_key_names_isValid;

    m_user_note_isValid = ::OpenAPI::fromJsonValue(m_user_note, json[QString("userNote")]);
    m_user_note_isSet = !json[QString("userNote")].isNull() && m_user_note_isValid;
}

QString OAIInstanceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_account_networks_enabled_isSet) {
        obj.insert(QString("accountNetworksEnabled"), ::OpenAPI::toJsonValue(m_account_networks_enabled));
    }
    if (m_client_network.isSet()) {
        obj.insert(QString("clientNetwork"), ::OpenAPI::toJsonValue(m_client_network));
    }
    if (m_hyperthreading_isSet) {
        obj.insert(QString("hyperthreading"), ::OpenAPI::toJsonValue(m_hyperthreading));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_kms_key_version_isSet) {
        obj.insert(QString("kmsKeyVersion"), ::OpenAPI::toJsonValue(m_kms_key_version));
    }
    if (m_logical_interfaces.size() > 0) {
        obj.insert(QString("logicalInterfaces"), ::OpenAPI::toJsonValue(m_logical_interfaces));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_config_isSet) {
        obj.insert(QString("networkConfig"), ::OpenAPI::toJsonValue(m_network_config));
    }
    if (m_network_template_isSet) {
        obj.insert(QString("networkTemplate"), ::OpenAPI::toJsonValue(m_network_template));
    }
    if (m_os_image_isSet) {
        obj.insert(QString("osImage"), ::OpenAPI::toJsonValue(m_os_image));
    }
    if (m_private_network.isSet()) {
        obj.insert(QString("privateNetwork"), ::OpenAPI::toJsonValue(m_private_network));
    }
    if (m_ssh_key_names.size() > 0) {
        obj.insert(QString("sshKeyNames"), ::OpenAPI::toJsonValue(m_ssh_key_names));
    }
    if (m_user_note_isSet) {
        obj.insert(QString("userNote"), ::OpenAPI::toJsonValue(m_user_note));
    }
    return obj;
}

bool OAIInstanceConfig::isAccountNetworksEnabled() const {
    return m_account_networks_enabled;
}
void OAIInstanceConfig::setAccountNetworksEnabled(const bool &account_networks_enabled) {
    m_account_networks_enabled = account_networks_enabled;
    m_account_networks_enabled_isSet = true;
}

bool OAIInstanceConfig::is_account_networks_enabled_Set() const{
    return m_account_networks_enabled_isSet;
}

bool OAIInstanceConfig::is_account_networks_enabled_Valid() const{
    return m_account_networks_enabled_isValid;
}

OAINetworkAddress OAIInstanceConfig::getClientNetwork() const {
    return m_client_network;
}
void OAIInstanceConfig::setClientNetwork(const OAINetworkAddress &client_network) {
    m_client_network = client_network;
    m_client_network_isSet = true;
}

bool OAIInstanceConfig::is_client_network_Set() const{
    return m_client_network_isSet;
}

bool OAIInstanceConfig::is_client_network_Valid() const{
    return m_client_network_isValid;
}

bool OAIInstanceConfig::isHyperthreading() const {
    return m_hyperthreading;
}
void OAIInstanceConfig::setHyperthreading(const bool &hyperthreading) {
    m_hyperthreading = hyperthreading;
    m_hyperthreading_isSet = true;
}

bool OAIInstanceConfig::is_hyperthreading_Set() const{
    return m_hyperthreading_isSet;
}

bool OAIInstanceConfig::is_hyperthreading_Valid() const{
    return m_hyperthreading_isValid;
}

QString OAIInstanceConfig::getId() const {
    return m_id;
}
void OAIInstanceConfig::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInstanceConfig::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInstanceConfig::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIInstanceConfig::getInstanceType() const {
    return m_instance_type;
}
void OAIInstanceConfig::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIInstanceConfig::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIInstanceConfig::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAIInstanceConfig::getKmsKeyVersion() const {
    return m_kms_key_version;
}
void OAIInstanceConfig::setKmsKeyVersion(const QString &kms_key_version) {
    m_kms_key_version = kms_key_version;
    m_kms_key_version_isSet = true;
}

bool OAIInstanceConfig::is_kms_key_version_Set() const{
    return m_kms_key_version_isSet;
}

bool OAIInstanceConfig::is_kms_key_version_Valid() const{
    return m_kms_key_version_isValid;
}

QList<OAIGoogleCloudBaremetalsolutionV2LogicalInterface> OAIInstanceConfig::getLogicalInterfaces() const {
    return m_logical_interfaces;
}
void OAIInstanceConfig::setLogicalInterfaces(const QList<OAIGoogleCloudBaremetalsolutionV2LogicalInterface> &logical_interfaces) {
    m_logical_interfaces = logical_interfaces;
    m_logical_interfaces_isSet = true;
}

bool OAIInstanceConfig::is_logical_interfaces_Set() const{
    return m_logical_interfaces_isSet;
}

bool OAIInstanceConfig::is_logical_interfaces_Valid() const{
    return m_logical_interfaces_isValid;
}

QString OAIInstanceConfig::getName() const {
    return m_name;
}
void OAIInstanceConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInstanceConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInstanceConfig::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInstanceConfig::getNetworkConfig() const {
    return m_network_config;
}
void OAIInstanceConfig::setNetworkConfig(const QString &network_config) {
    m_network_config = network_config;
    m_network_config_isSet = true;
}

bool OAIInstanceConfig::is_network_config_Set() const{
    return m_network_config_isSet;
}

bool OAIInstanceConfig::is_network_config_Valid() const{
    return m_network_config_isValid;
}

QString OAIInstanceConfig::getNetworkTemplate() const {
    return m_network_template;
}
void OAIInstanceConfig::setNetworkTemplate(const QString &network_template) {
    m_network_template = network_template;
    m_network_template_isSet = true;
}

bool OAIInstanceConfig::is_network_template_Set() const{
    return m_network_template_isSet;
}

bool OAIInstanceConfig::is_network_template_Valid() const{
    return m_network_template_isValid;
}

QString OAIInstanceConfig::getOsImage() const {
    return m_os_image;
}
void OAIInstanceConfig::setOsImage(const QString &os_image) {
    m_os_image = os_image;
    m_os_image_isSet = true;
}

bool OAIInstanceConfig::is_os_image_Set() const{
    return m_os_image_isSet;
}

bool OAIInstanceConfig::is_os_image_Valid() const{
    return m_os_image_isValid;
}

OAINetworkAddress OAIInstanceConfig::getPrivateNetwork() const {
    return m_private_network;
}
void OAIInstanceConfig::setPrivateNetwork(const OAINetworkAddress &private_network) {
    m_private_network = private_network;
    m_private_network_isSet = true;
}

bool OAIInstanceConfig::is_private_network_Set() const{
    return m_private_network_isSet;
}

bool OAIInstanceConfig::is_private_network_Valid() const{
    return m_private_network_isValid;
}

QList<QString> OAIInstanceConfig::getSshKeyNames() const {
    return m_ssh_key_names;
}
void OAIInstanceConfig::setSshKeyNames(const QList<QString> &ssh_key_names) {
    m_ssh_key_names = ssh_key_names;
    m_ssh_key_names_isSet = true;
}

bool OAIInstanceConfig::is_ssh_key_names_Set() const{
    return m_ssh_key_names_isSet;
}

bool OAIInstanceConfig::is_ssh_key_names_Valid() const{
    return m_ssh_key_names_isValid;
}

QString OAIInstanceConfig::getUserNote() const {
    return m_user_note;
}
void OAIInstanceConfig::setUserNote(const QString &user_note) {
    m_user_note = user_note;
    m_user_note_isSet = true;
}

bool OAIInstanceConfig::is_user_note_Set() const{
    return m_user_note_isSet;
}

bool OAIInstanceConfig::is_user_note_Valid() const{
    return m_user_note_isValid;
}

bool OAIInstanceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_networks_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hyperthreading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_interfaces.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_key_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_note_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
