/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogicalNetworkInterface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogicalNetworkInterface::OAILogicalNetworkInterface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogicalNetworkInterface::OAILogicalNetworkInterface() {
    this->initializeModel();
}

OAILogicalNetworkInterface::~OAILogicalNetworkInterface() {}

void OAILogicalNetworkInterface::initializeModel() {

    m_default_gateway_isSet = false;
    m_default_gateway_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_network_type_isSet = false;
    m_network_type_isValid = false;
}

void OAILogicalNetworkInterface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogicalNetworkInterface::fromJsonObject(QJsonObject json) {

    m_default_gateway_isValid = ::OpenAPI::fromJsonValue(m_default_gateway, json[QString("defaultGateway")]);
    m_default_gateway_isSet = !json[QString("defaultGateway")].isNull() && m_default_gateway_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_network_type_isValid = ::OpenAPI::fromJsonValue(m_network_type, json[QString("networkType")]);
    m_network_type_isSet = !json[QString("networkType")].isNull() && m_network_type_isValid;
}

QString OAILogicalNetworkInterface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogicalNetworkInterface::asJsonObject() const {
    QJsonObject obj;
    if (m_default_gateway_isSet) {
        obj.insert(QString("defaultGateway"), ::OpenAPI::toJsonValue(m_default_gateway));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_network_type_isSet) {
        obj.insert(QString("networkType"), ::OpenAPI::toJsonValue(m_network_type));
    }
    return obj;
}

bool OAILogicalNetworkInterface::isDefaultGateway() const {
    return m_default_gateway;
}
void OAILogicalNetworkInterface::setDefaultGateway(const bool &default_gateway) {
    m_default_gateway = default_gateway;
    m_default_gateway_isSet = true;
}

bool OAILogicalNetworkInterface::is_default_gateway_Set() const{
    return m_default_gateway_isSet;
}

bool OAILogicalNetworkInterface::is_default_gateway_Valid() const{
    return m_default_gateway_isValid;
}

QString OAILogicalNetworkInterface::getId() const {
    return m_id;
}
void OAILogicalNetworkInterface::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILogicalNetworkInterface::is_id_Set() const{
    return m_id_isSet;
}

bool OAILogicalNetworkInterface::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILogicalNetworkInterface::getIpAddress() const {
    return m_ip_address;
}
void OAILogicalNetworkInterface::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAILogicalNetworkInterface::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAILogicalNetworkInterface::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAILogicalNetworkInterface::getNetwork() const {
    return m_network;
}
void OAILogicalNetworkInterface::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAILogicalNetworkInterface::is_network_Set() const{
    return m_network_isSet;
}

bool OAILogicalNetworkInterface::is_network_Valid() const{
    return m_network_isValid;
}

QString OAILogicalNetworkInterface::getNetworkType() const {
    return m_network_type;
}
void OAILogicalNetworkInterface::setNetworkType(const QString &network_type) {
    m_network_type = network_type;
    m_network_type_isSet = true;
}

bool OAILogicalNetworkInterface::is_network_type_Set() const{
    return m_network_type_isSet;
}

bool OAILogicalNetworkInterface::is_network_type_Valid() const{
    return m_network_type_isValid;
}

bool OAILogicalNetworkInterface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogicalNetworkInterface::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
