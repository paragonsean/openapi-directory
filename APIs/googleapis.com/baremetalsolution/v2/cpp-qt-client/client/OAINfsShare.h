/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINfsShare.h
 *
 * An NFS share.
 */

#ifndef OAINfsShare_H
#define OAINfsShare_H

#include <QJsonObject>

#include "OAIAllowedClient.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAllowedClient;

class OAINfsShare : public OAIObject {
public:
    OAINfsShare();
    OAINfsShare(QString json);
    ~OAINfsShare() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAllowedClient> getAllowedClients() const;
    void setAllowedClients(const QList<OAIAllowedClient> &allowed_clients);
    bool is_allowed_clients_Set() const;
    bool is_allowed_clients_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNfsShareId() const;
    void setNfsShareId(const QString &nfs_share_id);
    bool is_nfs_share_id_Set() const;
    bool is_nfs_share_id_Valid() const;

    QString getPod() const;
    void setPod(const QString &pod);
    bool is_pod_Set() const;
    bool is_pod_Valid() const;

    QString getRequestedSizeGib() const;
    void setRequestedSizeGib(const QString &requested_size_gib);
    bool is_requested_size_gib_Set() const;
    bool is_requested_size_gib_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStorageType() const;
    void setStorageType(const QString &storage_type);
    bool is_storage_type_Set() const;
    bool is_storage_type_Valid() const;

    QString getVolume() const;
    void setVolume(const QString &volume);
    bool is_volume_Set() const;
    bool is_volume_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAllowedClient> m_allowed_clients;
    bool m_allowed_clients_isSet;
    bool m_allowed_clients_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_nfs_share_id;
    bool m_nfs_share_id_isSet;
    bool m_nfs_share_id_isValid;

    QString m_pod;
    bool m_pod_isSet;
    bool m_pod_isValid;

    QString m_requested_size_gib;
    bool m_requested_size_gib_isSet;
    bool m_requested_size_gib_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_storage_type;
    bool m_storage_type_isSet;
    bool m_storage_type_isValid;

    QString m_volume;
    bool m_volume_isSet;
    bool m_volume_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINfsShare)

#endif // OAINfsShare_H
