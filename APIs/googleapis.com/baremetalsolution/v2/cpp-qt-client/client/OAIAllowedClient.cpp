/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAllowedClient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAllowedClient::OAIAllowedClient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAllowedClient::OAIAllowedClient() {
    this->initializeModel();
}

OAIAllowedClient::~OAIAllowedClient() {}

void OAIAllowedClient::initializeModel() {

    m_allow_dev_isSet = false;
    m_allow_dev_isValid = false;

    m_allow_suid_isSet = false;
    m_allow_suid_isValid = false;

    m_allowed_clients_cidr_isSet = false;
    m_allowed_clients_cidr_isValid = false;

    m_mount_permissions_isSet = false;
    m_mount_permissions_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_nfs_path_isSet = false;
    m_nfs_path_isValid = false;

    m_no_root_squash_isSet = false;
    m_no_root_squash_isValid = false;

    m_share_ip_isSet = false;
    m_share_ip_isValid = false;
}

void OAIAllowedClient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAllowedClient::fromJsonObject(QJsonObject json) {

    m_allow_dev_isValid = ::OpenAPI::fromJsonValue(m_allow_dev, json[QString("allowDev")]);
    m_allow_dev_isSet = !json[QString("allowDev")].isNull() && m_allow_dev_isValid;

    m_allow_suid_isValid = ::OpenAPI::fromJsonValue(m_allow_suid, json[QString("allowSuid")]);
    m_allow_suid_isSet = !json[QString("allowSuid")].isNull() && m_allow_suid_isValid;

    m_allowed_clients_cidr_isValid = ::OpenAPI::fromJsonValue(m_allowed_clients_cidr, json[QString("allowedClientsCidr")]);
    m_allowed_clients_cidr_isSet = !json[QString("allowedClientsCidr")].isNull() && m_allowed_clients_cidr_isValid;

    m_mount_permissions_isValid = ::OpenAPI::fromJsonValue(m_mount_permissions, json[QString("mountPermissions")]);
    m_mount_permissions_isSet = !json[QString("mountPermissions")].isNull() && m_mount_permissions_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_nfs_path_isValid = ::OpenAPI::fromJsonValue(m_nfs_path, json[QString("nfsPath")]);
    m_nfs_path_isSet = !json[QString("nfsPath")].isNull() && m_nfs_path_isValid;

    m_no_root_squash_isValid = ::OpenAPI::fromJsonValue(m_no_root_squash, json[QString("noRootSquash")]);
    m_no_root_squash_isSet = !json[QString("noRootSquash")].isNull() && m_no_root_squash_isValid;

    m_share_ip_isValid = ::OpenAPI::fromJsonValue(m_share_ip, json[QString("shareIp")]);
    m_share_ip_isSet = !json[QString("shareIp")].isNull() && m_share_ip_isValid;
}

QString OAIAllowedClient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAllowedClient::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_dev_isSet) {
        obj.insert(QString("allowDev"), ::OpenAPI::toJsonValue(m_allow_dev));
    }
    if (m_allow_suid_isSet) {
        obj.insert(QString("allowSuid"), ::OpenAPI::toJsonValue(m_allow_suid));
    }
    if (m_allowed_clients_cidr_isSet) {
        obj.insert(QString("allowedClientsCidr"), ::OpenAPI::toJsonValue(m_allowed_clients_cidr));
    }
    if (m_mount_permissions_isSet) {
        obj.insert(QString("mountPermissions"), ::OpenAPI::toJsonValue(m_mount_permissions));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_nfs_path_isSet) {
        obj.insert(QString("nfsPath"), ::OpenAPI::toJsonValue(m_nfs_path));
    }
    if (m_no_root_squash_isSet) {
        obj.insert(QString("noRootSquash"), ::OpenAPI::toJsonValue(m_no_root_squash));
    }
    if (m_share_ip_isSet) {
        obj.insert(QString("shareIp"), ::OpenAPI::toJsonValue(m_share_ip));
    }
    return obj;
}

bool OAIAllowedClient::isAllowDev() const {
    return m_allow_dev;
}
void OAIAllowedClient::setAllowDev(const bool &allow_dev) {
    m_allow_dev = allow_dev;
    m_allow_dev_isSet = true;
}

bool OAIAllowedClient::is_allow_dev_Set() const{
    return m_allow_dev_isSet;
}

bool OAIAllowedClient::is_allow_dev_Valid() const{
    return m_allow_dev_isValid;
}

bool OAIAllowedClient::isAllowSuid() const {
    return m_allow_suid;
}
void OAIAllowedClient::setAllowSuid(const bool &allow_suid) {
    m_allow_suid = allow_suid;
    m_allow_suid_isSet = true;
}

bool OAIAllowedClient::is_allow_suid_Set() const{
    return m_allow_suid_isSet;
}

bool OAIAllowedClient::is_allow_suid_Valid() const{
    return m_allow_suid_isValid;
}

QString OAIAllowedClient::getAllowedClientsCidr() const {
    return m_allowed_clients_cidr;
}
void OAIAllowedClient::setAllowedClientsCidr(const QString &allowed_clients_cidr) {
    m_allowed_clients_cidr = allowed_clients_cidr;
    m_allowed_clients_cidr_isSet = true;
}

bool OAIAllowedClient::is_allowed_clients_cidr_Set() const{
    return m_allowed_clients_cidr_isSet;
}

bool OAIAllowedClient::is_allowed_clients_cidr_Valid() const{
    return m_allowed_clients_cidr_isValid;
}

QString OAIAllowedClient::getMountPermissions() const {
    return m_mount_permissions;
}
void OAIAllowedClient::setMountPermissions(const QString &mount_permissions) {
    m_mount_permissions = mount_permissions;
    m_mount_permissions_isSet = true;
}

bool OAIAllowedClient::is_mount_permissions_Set() const{
    return m_mount_permissions_isSet;
}

bool OAIAllowedClient::is_mount_permissions_Valid() const{
    return m_mount_permissions_isValid;
}

QString OAIAllowedClient::getNetwork() const {
    return m_network;
}
void OAIAllowedClient::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIAllowedClient::is_network_Set() const{
    return m_network_isSet;
}

bool OAIAllowedClient::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIAllowedClient::getNfsPath() const {
    return m_nfs_path;
}
void OAIAllowedClient::setNfsPath(const QString &nfs_path) {
    m_nfs_path = nfs_path;
    m_nfs_path_isSet = true;
}

bool OAIAllowedClient::is_nfs_path_Set() const{
    return m_nfs_path_isSet;
}

bool OAIAllowedClient::is_nfs_path_Valid() const{
    return m_nfs_path_isValid;
}

bool OAIAllowedClient::isNoRootSquash() const {
    return m_no_root_squash;
}
void OAIAllowedClient::setNoRootSquash(const bool &no_root_squash) {
    m_no_root_squash = no_root_squash;
    m_no_root_squash_isSet = true;
}

bool OAIAllowedClient::is_no_root_squash_Set() const{
    return m_no_root_squash_isSet;
}

bool OAIAllowedClient::is_no_root_squash_Valid() const{
    return m_no_root_squash_isValid;
}

QString OAIAllowedClient::getShareIp() const {
    return m_share_ip;
}
void OAIAllowedClient::setShareIp(const QString &share_ip) {
    m_share_ip = share_ip;
    m_share_ip_isSet = true;
}

bool OAIAllowedClient::is_share_ip_Set() const{
    return m_share_ip_isSet;
}

bool OAIAllowedClient::is_share_ip_Valid() const{
    return m_share_ip_isValid;
}

bool OAIAllowedClient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_dev_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_suid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_clients_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfs_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_root_squash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_ip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAllowedClient::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
