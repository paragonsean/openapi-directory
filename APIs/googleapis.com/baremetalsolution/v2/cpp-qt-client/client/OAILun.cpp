/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILun::OAILun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILun::OAILun() {
    this->initializeModel();
}

OAILun::~OAILun() {}

void OAILun::initializeModel() {

    m_boot_lun_isSet = false;
    m_boot_lun_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_multiprotocol_type_isSet = false;
    m_multiprotocol_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_shareable_isSet = false;
    m_shareable_isValid = false;

    m_size_gb_isSet = false;
    m_size_gb_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_storage_type_isSet = false;
    m_storage_type_isValid = false;

    m_storage_volume_isSet = false;
    m_storage_volume_isValid = false;

    m_wwid_isSet = false;
    m_wwid_isValid = false;
}

void OAILun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILun::fromJsonObject(QJsonObject json) {

    m_boot_lun_isValid = ::OpenAPI::fromJsonValue(m_boot_lun, json[QString("bootLun")]);
    m_boot_lun_isSet = !json[QString("bootLun")].isNull() && m_boot_lun_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("instances")]);
    m_instances_isSet = !json[QString("instances")].isNull() && m_instances_isValid;

    m_multiprotocol_type_isValid = ::OpenAPI::fromJsonValue(m_multiprotocol_type, json[QString("multiprotocolType")]);
    m_multiprotocol_type_isSet = !json[QString("multiprotocolType")].isNull() && m_multiprotocol_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_shareable_isValid = ::OpenAPI::fromJsonValue(m_shareable, json[QString("shareable")]);
    m_shareable_isSet = !json[QString("shareable")].isNull() && m_shareable_isValid;

    m_size_gb_isValid = ::OpenAPI::fromJsonValue(m_size_gb, json[QString("sizeGb")]);
    m_size_gb_isSet = !json[QString("sizeGb")].isNull() && m_size_gb_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_storage_type_isValid = ::OpenAPI::fromJsonValue(m_storage_type, json[QString("storageType")]);
    m_storage_type_isSet = !json[QString("storageType")].isNull() && m_storage_type_isValid;

    m_storage_volume_isValid = ::OpenAPI::fromJsonValue(m_storage_volume, json[QString("storageVolume")]);
    m_storage_volume_isSet = !json[QString("storageVolume")].isNull() && m_storage_volume_isValid;

    m_wwid_isValid = ::OpenAPI::fromJsonValue(m_wwid, json[QString("wwid")]);
    m_wwid_isSet = !json[QString("wwid")].isNull() && m_wwid_isValid;
}

QString OAILun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILun::asJsonObject() const {
    QJsonObject obj;
    if (m_boot_lun_isSet) {
        obj.insert(QString("bootLun"), ::OpenAPI::toJsonValue(m_boot_lun));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instances.size() > 0) {
        obj.insert(QString("instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_multiprotocol_type_isSet) {
        obj.insert(QString("multiprotocolType"), ::OpenAPI::toJsonValue(m_multiprotocol_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_shareable_isSet) {
        obj.insert(QString("shareable"), ::OpenAPI::toJsonValue(m_shareable));
    }
    if (m_size_gb_isSet) {
        obj.insert(QString("sizeGb"), ::OpenAPI::toJsonValue(m_size_gb));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_storage_type_isSet) {
        obj.insert(QString("storageType"), ::OpenAPI::toJsonValue(m_storage_type));
    }
    if (m_storage_volume_isSet) {
        obj.insert(QString("storageVolume"), ::OpenAPI::toJsonValue(m_storage_volume));
    }
    if (m_wwid_isSet) {
        obj.insert(QString("wwid"), ::OpenAPI::toJsonValue(m_wwid));
    }
    return obj;
}

bool OAILun::isBootLun() const {
    return m_boot_lun;
}
void OAILun::setBootLun(const bool &boot_lun) {
    m_boot_lun = boot_lun;
    m_boot_lun_isSet = true;
}

bool OAILun::is_boot_lun_Set() const{
    return m_boot_lun_isSet;
}

bool OAILun::is_boot_lun_Valid() const{
    return m_boot_lun_isValid;
}

QString OAILun::getExpireTime() const {
    return m_expire_time;
}
void OAILun::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAILun::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAILun::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAILun::getId() const {
    return m_id;
}
void OAILun::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILun::is_id_Set() const{
    return m_id_isSet;
}

bool OAILun::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAILun::getInstances() const {
    return m_instances;
}
void OAILun::setInstances(const QList<QString> &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAILun::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAILun::is_instances_Valid() const{
    return m_instances_isValid;
}

QString OAILun::getMultiprotocolType() const {
    return m_multiprotocol_type;
}
void OAILun::setMultiprotocolType(const QString &multiprotocol_type) {
    m_multiprotocol_type = multiprotocol_type;
    m_multiprotocol_type_isSet = true;
}

bool OAILun::is_multiprotocol_type_Set() const{
    return m_multiprotocol_type_isSet;
}

bool OAILun::is_multiprotocol_type_Valid() const{
    return m_multiprotocol_type_isValid;
}

QString OAILun::getName() const {
    return m_name;
}
void OAILun::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILun::is_name_Set() const{
    return m_name_isSet;
}

bool OAILun::is_name_Valid() const{
    return m_name_isValid;
}

bool OAILun::isShareable() const {
    return m_shareable;
}
void OAILun::setShareable(const bool &shareable) {
    m_shareable = shareable;
    m_shareable_isSet = true;
}

bool OAILun::is_shareable_Set() const{
    return m_shareable_isSet;
}

bool OAILun::is_shareable_Valid() const{
    return m_shareable_isValid;
}

QString OAILun::getSizeGb() const {
    return m_size_gb;
}
void OAILun::setSizeGb(const QString &size_gb) {
    m_size_gb = size_gb;
    m_size_gb_isSet = true;
}

bool OAILun::is_size_gb_Set() const{
    return m_size_gb_isSet;
}

bool OAILun::is_size_gb_Valid() const{
    return m_size_gb_isValid;
}

QString OAILun::getState() const {
    return m_state;
}
void OAILun::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAILun::is_state_Set() const{
    return m_state_isSet;
}

bool OAILun::is_state_Valid() const{
    return m_state_isValid;
}

QString OAILun::getStorageType() const {
    return m_storage_type;
}
void OAILun::setStorageType(const QString &storage_type) {
    m_storage_type = storage_type;
    m_storage_type_isSet = true;
}

bool OAILun::is_storage_type_Set() const{
    return m_storage_type_isSet;
}

bool OAILun::is_storage_type_Valid() const{
    return m_storage_type_isValid;
}

QString OAILun::getStorageVolume() const {
    return m_storage_volume;
}
void OAILun::setStorageVolume(const QString &storage_volume) {
    m_storage_volume = storage_volume;
    m_storage_volume_isSet = true;
}

bool OAILun::is_storage_volume_Set() const{
    return m_storage_volume_isSet;
}

bool OAILun::is_storage_volume_Valid() const{
    return m_storage_volume_isValid;
}

QString OAILun::getWwid() const {
    return m_wwid;
}
void OAILun::setWwid(const QString &wwid) {
    m_wwid = wwid;
    m_wwid_isSet = true;
}

bool OAILun::is_wwid_Set() const{
    return m_wwid_isSet;
}

bool OAILun::is_wwid_Valid() const{
    return m_wwid_isValid;
}

bool OAILun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boot_lun_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiprotocol_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shareable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wwid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
