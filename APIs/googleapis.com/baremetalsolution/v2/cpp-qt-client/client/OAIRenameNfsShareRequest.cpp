/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRenameNfsShareRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRenameNfsShareRequest::OAIRenameNfsShareRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRenameNfsShareRequest::OAIRenameNfsShareRequest() {
    this->initializeModel();
}

OAIRenameNfsShareRequest::~OAIRenameNfsShareRequest() {}

void OAIRenameNfsShareRequest::initializeModel() {

    m_new_nfsshare_id_isSet = false;
    m_new_nfsshare_id_isValid = false;
}

void OAIRenameNfsShareRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRenameNfsShareRequest::fromJsonObject(QJsonObject json) {

    m_new_nfsshare_id_isValid = ::OpenAPI::fromJsonValue(m_new_nfsshare_id, json[QString("newNfsshareId")]);
    m_new_nfsshare_id_isSet = !json[QString("newNfsshareId")].isNull() && m_new_nfsshare_id_isValid;
}

QString OAIRenameNfsShareRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRenameNfsShareRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_new_nfsshare_id_isSet) {
        obj.insert(QString("newNfsshareId"), ::OpenAPI::toJsonValue(m_new_nfsshare_id));
    }
    return obj;
}

QString OAIRenameNfsShareRequest::getNewNfsshareId() const {
    return m_new_nfsshare_id;
}
void OAIRenameNfsShareRequest::setNewNfsshareId(const QString &new_nfsshare_id) {
    m_new_nfsshare_id = new_nfsshare_id;
    m_new_nfsshare_id_isSet = true;
}

bool OAIRenameNfsShareRequest::is_new_nfsshare_id_Set() const{
    return m_new_nfsshare_id_isSet;
}

bool OAIRenameNfsShareRequest::is_new_nfsshare_id_Valid() const{
    return m_new_nfsshare_id_isValid;
}

bool OAIRenameNfsShareRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_new_nfsshare_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRenameNfsShareRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
