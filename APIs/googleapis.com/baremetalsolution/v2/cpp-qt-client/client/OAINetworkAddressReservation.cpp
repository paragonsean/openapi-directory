/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkAddressReservation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkAddressReservation::OAINetworkAddressReservation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkAddressReservation::OAINetworkAddressReservation() {
    this->initializeModel();
}

OAINetworkAddressReservation::~OAINetworkAddressReservation() {}

void OAINetworkAddressReservation::initializeModel() {

    m_end_address_isSet = false;
    m_end_address_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_start_address_isSet = false;
    m_start_address_isValid = false;
}

void OAINetworkAddressReservation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkAddressReservation::fromJsonObject(QJsonObject json) {

    m_end_address_isValid = ::OpenAPI::fromJsonValue(m_end_address, json[QString("endAddress")]);
    m_end_address_isSet = !json[QString("endAddress")].isNull() && m_end_address_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_start_address_isValid = ::OpenAPI::fromJsonValue(m_start_address, json[QString("startAddress")]);
    m_start_address_isSet = !json[QString("startAddress")].isNull() && m_start_address_isValid;
}

QString OAINetworkAddressReservation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkAddressReservation::asJsonObject() const {
    QJsonObject obj;
    if (m_end_address_isSet) {
        obj.insert(QString("endAddress"), ::OpenAPI::toJsonValue(m_end_address));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_start_address_isSet) {
        obj.insert(QString("startAddress"), ::OpenAPI::toJsonValue(m_start_address));
    }
    return obj;
}

QString OAINetworkAddressReservation::getEndAddress() const {
    return m_end_address;
}
void OAINetworkAddressReservation::setEndAddress(const QString &end_address) {
    m_end_address = end_address;
    m_end_address_isSet = true;
}

bool OAINetworkAddressReservation::is_end_address_Set() const{
    return m_end_address_isSet;
}

bool OAINetworkAddressReservation::is_end_address_Valid() const{
    return m_end_address_isValid;
}

QString OAINetworkAddressReservation::getNote() const {
    return m_note;
}
void OAINetworkAddressReservation::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAINetworkAddressReservation::is_note_Set() const{
    return m_note_isSet;
}

bool OAINetworkAddressReservation::is_note_Valid() const{
    return m_note_isValid;
}

QString OAINetworkAddressReservation::getStartAddress() const {
    return m_start_address;
}
void OAINetworkAddressReservation::setStartAddress(const QString &start_address) {
    m_start_address = start_address;
    m_start_address_isSet = true;
}

bool OAINetworkAddressReservation::is_start_address_Set() const{
    return m_start_address_isSet;
}

bool OAINetworkAddressReservation::is_start_address_Valid() const{
    return m_start_address_isValid;
}

bool OAINetworkAddressReservation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkAddressReservation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
