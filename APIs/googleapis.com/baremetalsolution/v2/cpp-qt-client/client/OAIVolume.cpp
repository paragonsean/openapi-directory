/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolume.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolume::OAIVolume(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolume::OAIVolume() {
    this->initializeModel();
}

OAIVolume::~OAIVolume() {}

void OAIVolume::initializeModel() {

    m_attached_isSet = false;
    m_attached_isValid = false;

    m_auto_grown_size_gib_isSet = false;
    m_auto_grown_size_gib_isValid = false;

    m_boot_volume_isSet = false;
    m_boot_volume_isValid = false;

    m_current_size_gib_isSet = false;
    m_current_size_gib_isValid = false;

    m_emergency_size_gib_isSet = false;
    m_emergency_size_gib_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_max_size_gib_isSet = false;
    m_max_size_gib_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_originally_requested_size_gib_isSet = false;
    m_originally_requested_size_gib_isValid = false;

    m_performance_tier_isSet = false;
    m_performance_tier_isValid = false;

    m_pod_isSet = false;
    m_pod_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_remaining_space_gib_isSet = false;
    m_remaining_space_gib_isValid = false;

    m_requested_size_gib_isSet = false;
    m_requested_size_gib_isValid = false;

    m_snapshot_auto_delete_behavior_isSet = false;
    m_snapshot_auto_delete_behavior_isValid = false;

    m_snapshot_enabled_isSet = false;
    m_snapshot_enabled_isValid = false;

    m_snapshot_reservation_detail_isSet = false;
    m_snapshot_reservation_detail_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_storage_type_isSet = false;
    m_storage_type_isValid = false;

    m_workload_profile_isSet = false;
    m_workload_profile_isValid = false;
}

void OAIVolume::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolume::fromJsonObject(QJsonObject json) {

    m_attached_isValid = ::OpenAPI::fromJsonValue(m_attached, json[QString("attached")]);
    m_attached_isSet = !json[QString("attached")].isNull() && m_attached_isValid;

    m_auto_grown_size_gib_isValid = ::OpenAPI::fromJsonValue(m_auto_grown_size_gib, json[QString("autoGrownSizeGib")]);
    m_auto_grown_size_gib_isSet = !json[QString("autoGrownSizeGib")].isNull() && m_auto_grown_size_gib_isValid;

    m_boot_volume_isValid = ::OpenAPI::fromJsonValue(m_boot_volume, json[QString("bootVolume")]);
    m_boot_volume_isSet = !json[QString("bootVolume")].isNull() && m_boot_volume_isValid;

    m_current_size_gib_isValid = ::OpenAPI::fromJsonValue(m_current_size_gib, json[QString("currentSizeGib")]);
    m_current_size_gib_isSet = !json[QString("currentSizeGib")].isNull() && m_current_size_gib_isValid;

    m_emergency_size_gib_isValid = ::OpenAPI::fromJsonValue(m_emergency_size_gib, json[QString("emergencySizeGib")]);
    m_emergency_size_gib_isSet = !json[QString("emergencySizeGib")].isNull() && m_emergency_size_gib_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("instances")]);
    m_instances_isSet = !json[QString("instances")].isNull() && m_instances_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_max_size_gib_isValid = ::OpenAPI::fromJsonValue(m_max_size_gib, json[QString("maxSizeGib")]);
    m_max_size_gib_isSet = !json[QString("maxSizeGib")].isNull() && m_max_size_gib_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_originally_requested_size_gib_isValid = ::OpenAPI::fromJsonValue(m_originally_requested_size_gib, json[QString("originallyRequestedSizeGib")]);
    m_originally_requested_size_gib_isSet = !json[QString("originallyRequestedSizeGib")].isNull() && m_originally_requested_size_gib_isValid;

    m_performance_tier_isValid = ::OpenAPI::fromJsonValue(m_performance_tier, json[QString("performanceTier")]);
    m_performance_tier_isSet = !json[QString("performanceTier")].isNull() && m_performance_tier_isValid;

    m_pod_isValid = ::OpenAPI::fromJsonValue(m_pod, json[QString("pod")]);
    m_pod_isSet = !json[QString("pod")].isNull() && m_pod_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_remaining_space_gib_isValid = ::OpenAPI::fromJsonValue(m_remaining_space_gib, json[QString("remainingSpaceGib")]);
    m_remaining_space_gib_isSet = !json[QString("remainingSpaceGib")].isNull() && m_remaining_space_gib_isValid;

    m_requested_size_gib_isValid = ::OpenAPI::fromJsonValue(m_requested_size_gib, json[QString("requestedSizeGib")]);
    m_requested_size_gib_isSet = !json[QString("requestedSizeGib")].isNull() && m_requested_size_gib_isValid;

    m_snapshot_auto_delete_behavior_isValid = ::OpenAPI::fromJsonValue(m_snapshot_auto_delete_behavior, json[QString("snapshotAutoDeleteBehavior")]);
    m_snapshot_auto_delete_behavior_isSet = !json[QString("snapshotAutoDeleteBehavior")].isNull() && m_snapshot_auto_delete_behavior_isValid;

    m_snapshot_enabled_isValid = ::OpenAPI::fromJsonValue(m_snapshot_enabled, json[QString("snapshotEnabled")]);
    m_snapshot_enabled_isSet = !json[QString("snapshotEnabled")].isNull() && m_snapshot_enabled_isValid;

    m_snapshot_reservation_detail_isValid = ::OpenAPI::fromJsonValue(m_snapshot_reservation_detail, json[QString("snapshotReservationDetail")]);
    m_snapshot_reservation_detail_isSet = !json[QString("snapshotReservationDetail")].isNull() && m_snapshot_reservation_detail_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_storage_type_isValid = ::OpenAPI::fromJsonValue(m_storage_type, json[QString("storageType")]);
    m_storage_type_isSet = !json[QString("storageType")].isNull() && m_storage_type_isValid;

    m_workload_profile_isValid = ::OpenAPI::fromJsonValue(m_workload_profile, json[QString("workloadProfile")]);
    m_workload_profile_isSet = !json[QString("workloadProfile")].isNull() && m_workload_profile_isValid;
}

QString OAIVolume::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolume::asJsonObject() const {
    QJsonObject obj;
    if (m_attached_isSet) {
        obj.insert(QString("attached"), ::OpenAPI::toJsonValue(m_attached));
    }
    if (m_auto_grown_size_gib_isSet) {
        obj.insert(QString("autoGrownSizeGib"), ::OpenAPI::toJsonValue(m_auto_grown_size_gib));
    }
    if (m_boot_volume_isSet) {
        obj.insert(QString("bootVolume"), ::OpenAPI::toJsonValue(m_boot_volume));
    }
    if (m_current_size_gib_isSet) {
        obj.insert(QString("currentSizeGib"), ::OpenAPI::toJsonValue(m_current_size_gib));
    }
    if (m_emergency_size_gib_isSet) {
        obj.insert(QString("emergencySizeGib"), ::OpenAPI::toJsonValue(m_emergency_size_gib));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instances.size() > 0) {
        obj.insert(QString("instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_max_size_gib_isSet) {
        obj.insert(QString("maxSizeGib"), ::OpenAPI::toJsonValue(m_max_size_gib));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_originally_requested_size_gib_isSet) {
        obj.insert(QString("originallyRequestedSizeGib"), ::OpenAPI::toJsonValue(m_originally_requested_size_gib));
    }
    if (m_performance_tier_isSet) {
        obj.insert(QString("performanceTier"), ::OpenAPI::toJsonValue(m_performance_tier));
    }
    if (m_pod_isSet) {
        obj.insert(QString("pod"), ::OpenAPI::toJsonValue(m_pod));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_remaining_space_gib_isSet) {
        obj.insert(QString("remainingSpaceGib"), ::OpenAPI::toJsonValue(m_remaining_space_gib));
    }
    if (m_requested_size_gib_isSet) {
        obj.insert(QString("requestedSizeGib"), ::OpenAPI::toJsonValue(m_requested_size_gib));
    }
    if (m_snapshot_auto_delete_behavior_isSet) {
        obj.insert(QString("snapshotAutoDeleteBehavior"), ::OpenAPI::toJsonValue(m_snapshot_auto_delete_behavior));
    }
    if (m_snapshot_enabled_isSet) {
        obj.insert(QString("snapshotEnabled"), ::OpenAPI::toJsonValue(m_snapshot_enabled));
    }
    if (m_snapshot_reservation_detail.isSet()) {
        obj.insert(QString("snapshotReservationDetail"), ::OpenAPI::toJsonValue(m_snapshot_reservation_detail));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_storage_type_isSet) {
        obj.insert(QString("storageType"), ::OpenAPI::toJsonValue(m_storage_type));
    }
    if (m_workload_profile_isSet) {
        obj.insert(QString("workloadProfile"), ::OpenAPI::toJsonValue(m_workload_profile));
    }
    return obj;
}

bool OAIVolume::isAttached() const {
    return m_attached;
}
void OAIVolume::setAttached(const bool &attached) {
    m_attached = attached;
    m_attached_isSet = true;
}

bool OAIVolume::is_attached_Set() const{
    return m_attached_isSet;
}

bool OAIVolume::is_attached_Valid() const{
    return m_attached_isValid;
}

QString OAIVolume::getAutoGrownSizeGib() const {
    return m_auto_grown_size_gib;
}
void OAIVolume::setAutoGrownSizeGib(const QString &auto_grown_size_gib) {
    m_auto_grown_size_gib = auto_grown_size_gib;
    m_auto_grown_size_gib_isSet = true;
}

bool OAIVolume::is_auto_grown_size_gib_Set() const{
    return m_auto_grown_size_gib_isSet;
}

bool OAIVolume::is_auto_grown_size_gib_Valid() const{
    return m_auto_grown_size_gib_isValid;
}

bool OAIVolume::isBootVolume() const {
    return m_boot_volume;
}
void OAIVolume::setBootVolume(const bool &boot_volume) {
    m_boot_volume = boot_volume;
    m_boot_volume_isSet = true;
}

bool OAIVolume::is_boot_volume_Set() const{
    return m_boot_volume_isSet;
}

bool OAIVolume::is_boot_volume_Valid() const{
    return m_boot_volume_isValid;
}

QString OAIVolume::getCurrentSizeGib() const {
    return m_current_size_gib;
}
void OAIVolume::setCurrentSizeGib(const QString &current_size_gib) {
    m_current_size_gib = current_size_gib;
    m_current_size_gib_isSet = true;
}

bool OAIVolume::is_current_size_gib_Set() const{
    return m_current_size_gib_isSet;
}

bool OAIVolume::is_current_size_gib_Valid() const{
    return m_current_size_gib_isValid;
}

QString OAIVolume::getEmergencySizeGib() const {
    return m_emergency_size_gib;
}
void OAIVolume::setEmergencySizeGib(const QString &emergency_size_gib) {
    m_emergency_size_gib = emergency_size_gib;
    m_emergency_size_gib_isSet = true;
}

bool OAIVolume::is_emergency_size_gib_Set() const{
    return m_emergency_size_gib_isSet;
}

bool OAIVolume::is_emergency_size_gib_Valid() const{
    return m_emergency_size_gib_isValid;
}

QString OAIVolume::getExpireTime() const {
    return m_expire_time;
}
void OAIVolume::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIVolume::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIVolume::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAIVolume::getId() const {
    return m_id;
}
void OAIVolume::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVolume::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVolume::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIVolume::getInstances() const {
    return m_instances;
}
void OAIVolume::setInstances(const QList<QString> &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAIVolume::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAIVolume::is_instances_Valid() const{
    return m_instances_isValid;
}

QMap<QString, QString> OAIVolume::getLabels() const {
    return m_labels;
}
void OAIVolume::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIVolume::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIVolume::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIVolume::getMaxSizeGib() const {
    return m_max_size_gib;
}
void OAIVolume::setMaxSizeGib(const QString &max_size_gib) {
    m_max_size_gib = max_size_gib;
    m_max_size_gib_isSet = true;
}

bool OAIVolume::is_max_size_gib_Set() const{
    return m_max_size_gib_isSet;
}

bool OAIVolume::is_max_size_gib_Valid() const{
    return m_max_size_gib_isValid;
}

QString OAIVolume::getName() const {
    return m_name;
}
void OAIVolume::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVolume::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVolume::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVolume::getNotes() const {
    return m_notes;
}
void OAIVolume::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIVolume::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIVolume::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIVolume::getOriginallyRequestedSizeGib() const {
    return m_originally_requested_size_gib;
}
void OAIVolume::setOriginallyRequestedSizeGib(const QString &originally_requested_size_gib) {
    m_originally_requested_size_gib = originally_requested_size_gib;
    m_originally_requested_size_gib_isSet = true;
}

bool OAIVolume::is_originally_requested_size_gib_Set() const{
    return m_originally_requested_size_gib_isSet;
}

bool OAIVolume::is_originally_requested_size_gib_Valid() const{
    return m_originally_requested_size_gib_isValid;
}

QString OAIVolume::getPerformanceTier() const {
    return m_performance_tier;
}
void OAIVolume::setPerformanceTier(const QString &performance_tier) {
    m_performance_tier = performance_tier;
    m_performance_tier_isSet = true;
}

bool OAIVolume::is_performance_tier_Set() const{
    return m_performance_tier_isSet;
}

bool OAIVolume::is_performance_tier_Valid() const{
    return m_performance_tier_isValid;
}

QString OAIVolume::getPod() const {
    return m_pod;
}
void OAIVolume::setPod(const QString &pod) {
    m_pod = pod;
    m_pod_isSet = true;
}

bool OAIVolume::is_pod_Set() const{
    return m_pod_isSet;
}

bool OAIVolume::is_pod_Valid() const{
    return m_pod_isValid;
}

QString OAIVolume::getProtocol() const {
    return m_protocol;
}
void OAIVolume::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIVolume::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIVolume::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIVolume::getRemainingSpaceGib() const {
    return m_remaining_space_gib;
}
void OAIVolume::setRemainingSpaceGib(const QString &remaining_space_gib) {
    m_remaining_space_gib = remaining_space_gib;
    m_remaining_space_gib_isSet = true;
}

bool OAIVolume::is_remaining_space_gib_Set() const{
    return m_remaining_space_gib_isSet;
}

bool OAIVolume::is_remaining_space_gib_Valid() const{
    return m_remaining_space_gib_isValid;
}

QString OAIVolume::getRequestedSizeGib() const {
    return m_requested_size_gib;
}
void OAIVolume::setRequestedSizeGib(const QString &requested_size_gib) {
    m_requested_size_gib = requested_size_gib;
    m_requested_size_gib_isSet = true;
}

bool OAIVolume::is_requested_size_gib_Set() const{
    return m_requested_size_gib_isSet;
}

bool OAIVolume::is_requested_size_gib_Valid() const{
    return m_requested_size_gib_isValid;
}

QString OAIVolume::getSnapshotAutoDeleteBehavior() const {
    return m_snapshot_auto_delete_behavior;
}
void OAIVolume::setSnapshotAutoDeleteBehavior(const QString &snapshot_auto_delete_behavior) {
    m_snapshot_auto_delete_behavior = snapshot_auto_delete_behavior;
    m_snapshot_auto_delete_behavior_isSet = true;
}

bool OAIVolume::is_snapshot_auto_delete_behavior_Set() const{
    return m_snapshot_auto_delete_behavior_isSet;
}

bool OAIVolume::is_snapshot_auto_delete_behavior_Valid() const{
    return m_snapshot_auto_delete_behavior_isValid;
}

bool OAIVolume::isSnapshotEnabled() const {
    return m_snapshot_enabled;
}
void OAIVolume::setSnapshotEnabled(const bool &snapshot_enabled) {
    m_snapshot_enabled = snapshot_enabled;
    m_snapshot_enabled_isSet = true;
}

bool OAIVolume::is_snapshot_enabled_Set() const{
    return m_snapshot_enabled_isSet;
}

bool OAIVolume::is_snapshot_enabled_Valid() const{
    return m_snapshot_enabled_isValid;
}

OAISnapshotReservationDetail OAIVolume::getSnapshotReservationDetail() const {
    return m_snapshot_reservation_detail;
}
void OAIVolume::setSnapshotReservationDetail(const OAISnapshotReservationDetail &snapshot_reservation_detail) {
    m_snapshot_reservation_detail = snapshot_reservation_detail;
    m_snapshot_reservation_detail_isSet = true;
}

bool OAIVolume::is_snapshot_reservation_detail_Set() const{
    return m_snapshot_reservation_detail_isSet;
}

bool OAIVolume::is_snapshot_reservation_detail_Valid() const{
    return m_snapshot_reservation_detail_isValid;
}

QString OAIVolume::getState() const {
    return m_state;
}
void OAIVolume::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIVolume::is_state_Set() const{
    return m_state_isSet;
}

bool OAIVolume::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIVolume::getStorageType() const {
    return m_storage_type;
}
void OAIVolume::setStorageType(const QString &storage_type) {
    m_storage_type = storage_type;
    m_storage_type_isSet = true;
}

bool OAIVolume::is_storage_type_Set() const{
    return m_storage_type_isSet;
}

bool OAIVolume::is_storage_type_Valid() const{
    return m_storage_type_isValid;
}

QString OAIVolume::getWorkloadProfile() const {
    return m_workload_profile;
}
void OAIVolume::setWorkloadProfile(const QString &workload_profile) {
    m_workload_profile = workload_profile;
    m_workload_profile_isSet = true;
}

bool OAIVolume::is_workload_profile_Set() const{
    return m_workload_profile_isSet;
}

bool OAIVolume::is_workload_profile_Valid() const{
    return m_workload_profile_isValid;
}

bool OAIVolume::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attached_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_grown_size_gib_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boot_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_size_gib_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emergency_size_gib_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_size_gib_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originally_requested_size_gib_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_space_gib_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_size_gib_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_auto_delete_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_reservation_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workload_profile_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolume::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
