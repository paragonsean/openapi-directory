/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINfsShare.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINfsShare::OAINfsShare(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINfsShare::OAINfsShare() {
    this->initializeModel();
}

OAINfsShare::~OAINfsShare() {}

void OAINfsShare::initializeModel() {

    m_allowed_clients_isSet = false;
    m_allowed_clients_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nfs_share_id_isSet = false;
    m_nfs_share_id_isValid = false;

    m_pod_isSet = false;
    m_pod_isValid = false;

    m_requested_size_gib_isSet = false;
    m_requested_size_gib_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_storage_type_isSet = false;
    m_storage_type_isValid = false;

    m_volume_isSet = false;
    m_volume_isValid = false;
}

void OAINfsShare::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINfsShare::fromJsonObject(QJsonObject json) {

    m_allowed_clients_isValid = ::OpenAPI::fromJsonValue(m_allowed_clients, json[QString("allowedClients")]);
    m_allowed_clients_isSet = !json[QString("allowedClients")].isNull() && m_allowed_clients_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nfs_share_id_isValid = ::OpenAPI::fromJsonValue(m_nfs_share_id, json[QString("nfsShareId")]);
    m_nfs_share_id_isSet = !json[QString("nfsShareId")].isNull() && m_nfs_share_id_isValid;

    m_pod_isValid = ::OpenAPI::fromJsonValue(m_pod, json[QString("pod")]);
    m_pod_isSet = !json[QString("pod")].isNull() && m_pod_isValid;

    m_requested_size_gib_isValid = ::OpenAPI::fromJsonValue(m_requested_size_gib, json[QString("requestedSizeGib")]);
    m_requested_size_gib_isSet = !json[QString("requestedSizeGib")].isNull() && m_requested_size_gib_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_storage_type_isValid = ::OpenAPI::fromJsonValue(m_storage_type, json[QString("storageType")]);
    m_storage_type_isSet = !json[QString("storageType")].isNull() && m_storage_type_isValid;

    m_volume_isValid = ::OpenAPI::fromJsonValue(m_volume, json[QString("volume")]);
    m_volume_isSet = !json[QString("volume")].isNull() && m_volume_isValid;
}

QString OAINfsShare::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINfsShare::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_clients.size() > 0) {
        obj.insert(QString("allowedClients"), ::OpenAPI::toJsonValue(m_allowed_clients));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nfs_share_id_isSet) {
        obj.insert(QString("nfsShareId"), ::OpenAPI::toJsonValue(m_nfs_share_id));
    }
    if (m_pod_isSet) {
        obj.insert(QString("pod"), ::OpenAPI::toJsonValue(m_pod));
    }
    if (m_requested_size_gib_isSet) {
        obj.insert(QString("requestedSizeGib"), ::OpenAPI::toJsonValue(m_requested_size_gib));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_storage_type_isSet) {
        obj.insert(QString("storageType"), ::OpenAPI::toJsonValue(m_storage_type));
    }
    if (m_volume_isSet) {
        obj.insert(QString("volume"), ::OpenAPI::toJsonValue(m_volume));
    }
    return obj;
}

QList<OAIAllowedClient> OAINfsShare::getAllowedClients() const {
    return m_allowed_clients;
}
void OAINfsShare::setAllowedClients(const QList<OAIAllowedClient> &allowed_clients) {
    m_allowed_clients = allowed_clients;
    m_allowed_clients_isSet = true;
}

bool OAINfsShare::is_allowed_clients_Set() const{
    return m_allowed_clients_isSet;
}

bool OAINfsShare::is_allowed_clients_Valid() const{
    return m_allowed_clients_isValid;
}

QString OAINfsShare::getId() const {
    return m_id;
}
void OAINfsShare::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINfsShare::is_id_Set() const{
    return m_id_isSet;
}

bool OAINfsShare::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, QString> OAINfsShare::getLabels() const {
    return m_labels;
}
void OAINfsShare::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAINfsShare::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAINfsShare::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAINfsShare::getName() const {
    return m_name;
}
void OAINfsShare::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINfsShare::is_name_Set() const{
    return m_name_isSet;
}

bool OAINfsShare::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINfsShare::getNfsShareId() const {
    return m_nfs_share_id;
}
void OAINfsShare::setNfsShareId(const QString &nfs_share_id) {
    m_nfs_share_id = nfs_share_id;
    m_nfs_share_id_isSet = true;
}

bool OAINfsShare::is_nfs_share_id_Set() const{
    return m_nfs_share_id_isSet;
}

bool OAINfsShare::is_nfs_share_id_Valid() const{
    return m_nfs_share_id_isValid;
}

QString OAINfsShare::getPod() const {
    return m_pod;
}
void OAINfsShare::setPod(const QString &pod) {
    m_pod = pod;
    m_pod_isSet = true;
}

bool OAINfsShare::is_pod_Set() const{
    return m_pod_isSet;
}

bool OAINfsShare::is_pod_Valid() const{
    return m_pod_isValid;
}

QString OAINfsShare::getRequestedSizeGib() const {
    return m_requested_size_gib;
}
void OAINfsShare::setRequestedSizeGib(const QString &requested_size_gib) {
    m_requested_size_gib = requested_size_gib;
    m_requested_size_gib_isSet = true;
}

bool OAINfsShare::is_requested_size_gib_Set() const{
    return m_requested_size_gib_isSet;
}

bool OAINfsShare::is_requested_size_gib_Valid() const{
    return m_requested_size_gib_isValid;
}

QString OAINfsShare::getState() const {
    return m_state;
}
void OAINfsShare::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAINfsShare::is_state_Set() const{
    return m_state_isSet;
}

bool OAINfsShare::is_state_Valid() const{
    return m_state_isValid;
}

QString OAINfsShare::getStorageType() const {
    return m_storage_type;
}
void OAINfsShare::setStorageType(const QString &storage_type) {
    m_storage_type = storage_type;
    m_storage_type_isSet = true;
}

bool OAINfsShare::is_storage_type_Set() const{
    return m_storage_type_isSet;
}

bool OAINfsShare::is_storage_type_Valid() const{
    return m_storage_type_isValid;
}

QString OAINfsShare::getVolume() const {
    return m_volume;
}
void OAINfsShare::setVolume(const QString &volume) {
    m_volume = volume;
    m_volume_isSet = true;
}

bool OAINfsShare::is_volume_Set() const{
    return m_volume_isSet;
}

bool OAINfsShare::is_volume_Valid() const{
    return m_volume_isValid;
}

bool OAINfsShare::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_clients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfs_share_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_size_gib_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINfsShare::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
