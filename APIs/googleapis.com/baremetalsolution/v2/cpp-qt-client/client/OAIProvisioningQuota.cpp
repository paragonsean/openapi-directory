/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvisioningQuota.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvisioningQuota::OAIProvisioningQuota(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvisioningQuota::OAIProvisioningQuota() {
    this->initializeModel();
}

OAIProvisioningQuota::~OAIProvisioningQuota() {}

void OAIProvisioningQuota::initializeModel() {

    m_asset_type_isSet = false;
    m_asset_type_isValid = false;

    m_available_count_isSet = false;
    m_available_count_isValid = false;

    m_gcp_service_isSet = false;
    m_gcp_service_isValid = false;

    m_instance_quota_isSet = false;
    m_instance_quota_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_bandwidth_isSet = false;
    m_network_bandwidth_isValid = false;

    m_server_count_isSet = false;
    m_server_count_isValid = false;

    m_storage_gib_isSet = false;
    m_storage_gib_isValid = false;
}

void OAIProvisioningQuota::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvisioningQuota::fromJsonObject(QJsonObject json) {

    m_asset_type_isValid = ::OpenAPI::fromJsonValue(m_asset_type, json[QString("assetType")]);
    m_asset_type_isSet = !json[QString("assetType")].isNull() && m_asset_type_isValid;

    m_available_count_isValid = ::OpenAPI::fromJsonValue(m_available_count, json[QString("availableCount")]);
    m_available_count_isSet = !json[QString("availableCount")].isNull() && m_available_count_isValid;

    m_gcp_service_isValid = ::OpenAPI::fromJsonValue(m_gcp_service, json[QString("gcpService")]);
    m_gcp_service_isSet = !json[QString("gcpService")].isNull() && m_gcp_service_isValid;

    m_instance_quota_isValid = ::OpenAPI::fromJsonValue(m_instance_quota, json[QString("instanceQuota")]);
    m_instance_quota_isSet = !json[QString("instanceQuota")].isNull() && m_instance_quota_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_bandwidth_isValid = ::OpenAPI::fromJsonValue(m_network_bandwidth, json[QString("networkBandwidth")]);
    m_network_bandwidth_isSet = !json[QString("networkBandwidth")].isNull() && m_network_bandwidth_isValid;

    m_server_count_isValid = ::OpenAPI::fromJsonValue(m_server_count, json[QString("serverCount")]);
    m_server_count_isSet = !json[QString("serverCount")].isNull() && m_server_count_isValid;

    m_storage_gib_isValid = ::OpenAPI::fromJsonValue(m_storage_gib, json[QString("storageGib")]);
    m_storage_gib_isSet = !json[QString("storageGib")].isNull() && m_storage_gib_isValid;
}

QString OAIProvisioningQuota::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvisioningQuota::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_type_isSet) {
        obj.insert(QString("assetType"), ::OpenAPI::toJsonValue(m_asset_type));
    }
    if (m_available_count_isSet) {
        obj.insert(QString("availableCount"), ::OpenAPI::toJsonValue(m_available_count));
    }
    if (m_gcp_service_isSet) {
        obj.insert(QString("gcpService"), ::OpenAPI::toJsonValue(m_gcp_service));
    }
    if (m_instance_quota.isSet()) {
        obj.insert(QString("instanceQuota"), ::OpenAPI::toJsonValue(m_instance_quota));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_bandwidth_isSet) {
        obj.insert(QString("networkBandwidth"), ::OpenAPI::toJsonValue(m_network_bandwidth));
    }
    if (m_server_count_isSet) {
        obj.insert(QString("serverCount"), ::OpenAPI::toJsonValue(m_server_count));
    }
    if (m_storage_gib_isSet) {
        obj.insert(QString("storageGib"), ::OpenAPI::toJsonValue(m_storage_gib));
    }
    return obj;
}

QString OAIProvisioningQuota::getAssetType() const {
    return m_asset_type;
}
void OAIProvisioningQuota::setAssetType(const QString &asset_type) {
    m_asset_type = asset_type;
    m_asset_type_isSet = true;
}

bool OAIProvisioningQuota::is_asset_type_Set() const{
    return m_asset_type_isSet;
}

bool OAIProvisioningQuota::is_asset_type_Valid() const{
    return m_asset_type_isValid;
}

qint32 OAIProvisioningQuota::getAvailableCount() const {
    return m_available_count;
}
void OAIProvisioningQuota::setAvailableCount(const qint32 &available_count) {
    m_available_count = available_count;
    m_available_count_isSet = true;
}

bool OAIProvisioningQuota::is_available_count_Set() const{
    return m_available_count_isSet;
}

bool OAIProvisioningQuota::is_available_count_Valid() const{
    return m_available_count_isValid;
}

QString OAIProvisioningQuota::getGcpService() const {
    return m_gcp_service;
}
void OAIProvisioningQuota::setGcpService(const QString &gcp_service) {
    m_gcp_service = gcp_service;
    m_gcp_service_isSet = true;
}

bool OAIProvisioningQuota::is_gcp_service_Set() const{
    return m_gcp_service_isSet;
}

bool OAIProvisioningQuota::is_gcp_service_Valid() const{
    return m_gcp_service_isValid;
}

OAIInstanceQuota OAIProvisioningQuota::getInstanceQuota() const {
    return m_instance_quota;
}
void OAIProvisioningQuota::setInstanceQuota(const OAIInstanceQuota &instance_quota) {
    m_instance_quota = instance_quota;
    m_instance_quota_isSet = true;
}

bool OAIProvisioningQuota::is_instance_quota_Set() const{
    return m_instance_quota_isSet;
}

bool OAIProvisioningQuota::is_instance_quota_Valid() const{
    return m_instance_quota_isValid;
}

QString OAIProvisioningQuota::getLocation() const {
    return m_location;
}
void OAIProvisioningQuota::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIProvisioningQuota::is_location_Set() const{
    return m_location_isSet;
}

bool OAIProvisioningQuota::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIProvisioningQuota::getName() const {
    return m_name;
}
void OAIProvisioningQuota::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProvisioningQuota::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProvisioningQuota::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProvisioningQuota::getNetworkBandwidth() const {
    return m_network_bandwidth;
}
void OAIProvisioningQuota::setNetworkBandwidth(const QString &network_bandwidth) {
    m_network_bandwidth = network_bandwidth;
    m_network_bandwidth_isSet = true;
}

bool OAIProvisioningQuota::is_network_bandwidth_Set() const{
    return m_network_bandwidth_isSet;
}

bool OAIProvisioningQuota::is_network_bandwidth_Valid() const{
    return m_network_bandwidth_isValid;
}

QString OAIProvisioningQuota::getServerCount() const {
    return m_server_count;
}
void OAIProvisioningQuota::setServerCount(const QString &server_count) {
    m_server_count = server_count;
    m_server_count_isSet = true;
}

bool OAIProvisioningQuota::is_server_count_Set() const{
    return m_server_count_isSet;
}

bool OAIProvisioningQuota::is_server_count_Valid() const{
    return m_server_count_isValid;
}

QString OAIProvisioningQuota::getStorageGib() const {
    return m_storage_gib;
}
void OAIProvisioningQuota::setStorageGib(const QString &storage_gib) {
    m_storage_gib = storage_gib;
    m_storage_gib_isSet = true;
}

bool OAIProvisioningQuota::is_storage_gib_Set() const{
    return m_storage_gib_isSet;
}

bool OAIProvisioningQuota::is_storage_gib_Valid() const{
    return m_storage_gib_isValid;
}

bool OAIProvisioningQuota::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcp_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_quota.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_bandwidth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_gib_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvisioningQuota::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
